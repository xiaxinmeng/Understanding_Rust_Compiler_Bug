{"sha": "8b5948d5bf08f27bf443356549a25b39d40c159d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTk0OGQ1YmYwOGYyN2JmNDQzMzU2NTQ5YTI1YjM5ZDQwYzE1OWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-12T17:07:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-12T17:07:11Z"}, "message": "Auto merge of #27688 - alexcrichton:rollup, r=alexcrichton", "tree": {"sha": "f3d54534ff69927186d3b2a6e892544899b77716", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3d54534ff69927186d3b2a6e892544899b77716"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b5948d5bf08f27bf443356549a25b39d40c159d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b5948d5bf08f27bf443356549a25b39d40c159d", "html_url": "https://github.com/rust-lang/rust/commit/8b5948d5bf08f27bf443356549a25b39d40c159d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b5948d5bf08f27bf443356549a25b39d40c159d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81c9ff24fe6d53eb51d9427302ec842da49b9edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/81c9ff24fe6d53eb51d9427302ec842da49b9edc", "html_url": "https://github.com/rust-lang/rust/commit/81c9ff24fe6d53eb51d9427302ec842da49b9edc"}, {"sha": "6b09eb8e17d1952a930e1411da85703c2c534dde", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b09eb8e17d1952a930e1411da85703c2c534dde", "html_url": "https://github.com/rust-lang/rust/commit/6b09eb8e17d1952a930e1411da85703c2c534dde"}], "stats": {"total": 1166, "additions": 404, "deletions": 762}, "files": [{"sha": "048cdc08fb5e880fa50dadbd22d1dee7eaf0f6b2", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -17,8 +17,8 @@ hop on [#rust-internals][pound-rust-internals].\n As a reminder, all contributors are expected to follow our [Code of Conduct][coc].\n \n [pound-rust-internals]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-internals\n-[internals]: http://internals.rust-lang.org\n-[coc]: http://www.rust-lang.org/conduct.html\n+[internals]: https://internals.rust-lang.org\n+[coc]: https://www.rust-lang.org/conduct.html\n \n ## Feature Requests\n \n@@ -207,6 +207,6 @@ it to [Crates.io](http://crates.io). Easier said than done, but very, very\n valuable!\n \n [pound-rust]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n-[users]: http://users.rust-lang.org/\n+[users]: https://users.rust-lang.org/\n [so]: http://stackoverflow.com/questions/tagged/rust\n [community-library]: https://github.com/rust-lang/rfcs/labels/A-community-library"}, {"sha": "0ae93380e5920dab03029f9c2c798a065073faf7", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -13,8 +13,8 @@ as standard libraries, tools and documentation for Rust.\n \n Read [\"Installing Rust\"] from [The Book].\n \n-[\"Installing Rust\"]: http://doc.rust-lang.org/book/installing-rust.html\n-[The Book]: http://doc.rust-lang.org/book/index.html\n+[\"Installing Rust\"]: https://doc.rust-lang.org/book/installing-rust.html\n+[The Book]: https://doc.rust-lang.org/book/index.html\n \n ## Building from Source\n \n@@ -117,7 +117,7 @@ The Rust community congregates in a few places:\n \n [Stack Overflow]: http://stackoverflow.com/questions/tagged/rust\n [/r/rust]: http://reddit.com/r/rust\n-[users.rust-lang.org]: http://users.rust-lang.org/\n+[users.rust-lang.org]: https://users.rust-lang.org/\n \n ## Contributing\n "}, {"sha": "e964396c76d055d3df7becc34e5f7ba4f7e51dd3", "filename": "RELEASES.md", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -102,51 +102,51 @@ Misc\n * Fat pointers are now [passed in pairs of immediate arguments][fat],\n   resulting in faster compile times and smaller code.\n \n-[`Extend`]: http://doc.rust-lang.org/nightly/std/iter/trait.Extend.html\n+[`Extend`]: https://doc.rust-lang.org/nightly/std/iter/trait.Extend.html\n [extend-rfc]: https://github.com/rust-lang/rfcs/blob/master/text/0839-embrace-extend-extinguish.md\n-[`iter::once`]: http://doc.rust-lang.org/nightly/std/iter/fn.once.html\n-[`iter::empty`]: http://doc.rust-lang.org/nightly/std/iter/fn.empty.html\n-[`matches`]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.matches\n-[`rmatches`]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.rmatches\n-[`Cell`]: http://doc.rust-lang.org/nightly/std/cell/struct.Cell.html\n-[`RefCell`]: http://doc.rust-lang.org/nightly/std/cell/struct.RefCell.html\n-[`wrapping_add`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_add\n-[`wrapping_sub`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_sub\n-[`wrapping_mul`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_mul\n-[`wrapping_div`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_div\n-[`wrapping_rem`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_rem\n-[`wrapping_neg`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_neg\n-[`wrapping_shl`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_shl\n-[`wrapping_shr`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_shr\n-[`Wrapping`]: http://doc.rust-lang.org/nightly/std/num/struct.Wrapping.html\n-[`fmt::Formatter`]: http://doc.rust-lang.org/nightly/std/fmt/struct.Formatter.html\n-[`fmt::Write`]: http://doc.rust-lang.org/nightly/std/fmt/trait.Write.html\n-[`io::Write`]: http://doc.rust-lang.org/nightly/std/io/trait.Write.html\n-[`debug_struct`]: http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_struct\n-[`debug_tuple`]: http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_tuple\n-[`debug_list`]: http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_list\n-[`debug_set`]: http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_set\n-[`debug_map`]: http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_map\n-[`Debug`]: http://doc.rust-lang.org/nightly/std/fmt/trait.Debug.html\n-[strup]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.to_uppercase\n-[strlow]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.to_lowercase\n-[`to_uppercase`]: http://doc.rust-lang.org/nightly/std/primitive.char.html#method.to_uppercase\n-[`to_lowercase`]: http://doc.rust-lang.org/nightly/std/primitive.char.html#method.to_lowercase\n-[`PoisonError`]: http://doc.rust-lang.org/nightly/std/sync/struct.PoisonError.html\n-[`RwLock`]: http://doc.rust-lang.org/nightly/std/sync/struct.RwLock.html\n-[`Mutex`]: http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html\n-[`FromRawFd`]: http://doc.rust-lang.org/nightly/std/os/unix/io/trait.FromRawFd.html\n-[`AsRawFd`]: http://doc.rust-lang.org/nightly/std/os/unix/io/trait.AsRawFd.html\n-[`Stdio`]: http://doc.rust-lang.org/nightly/std/process/struct.Stdio.html\n-[`ChildStdin`]: http://doc.rust-lang.org/nightly/std/process/struct.ChildStdin.html\n-[`ChildStdout`]: http://doc.rust-lang.org/nightly/std/process/struct.ChildStdout.html\n-[`ChildStderr`]: http://doc.rust-lang.org/nightly/std/process/struct.ChildStderr.html\n-[`io::ErrorKind`]: http://doc.rust-lang.org/nightly/std/io/enum.ErrorKind.html\n+[`iter::once`]: https://doc.rust-lang.org/nightly/std/iter/fn.once.html\n+[`iter::empty`]: https://doc.rust-lang.org/nightly/std/iter/fn.empty.html\n+[`matches`]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.matches\n+[`rmatches`]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.rmatches\n+[`Cell`]: https://doc.rust-lang.org/nightly/std/cell/struct.Cell.html\n+[`RefCell`]: https://doc.rust-lang.org/nightly/std/cell/struct.RefCell.html\n+[`wrapping_add`]: https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_add\n+[`wrapping_sub`]: https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_sub\n+[`wrapping_mul`]: https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_mul\n+[`wrapping_div`]: https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_div\n+[`wrapping_rem`]: https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_rem\n+[`wrapping_neg`]: https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_neg\n+[`wrapping_shl`]: https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_shl\n+[`wrapping_shr`]: https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_shr\n+[`Wrapping`]: https://doc.rust-lang.org/nightly/std/num/struct.Wrapping.html\n+[`fmt::Formatter`]: https://doc.rust-lang.org/nightly/std/fmt/struct.Formatter.html\n+[`fmt::Write`]: https://doc.rust-lang.org/nightly/std/fmt/trait.Write.html\n+[`io::Write`]: https://doc.rust-lang.org/nightly/std/io/trait.Write.html\n+[`debug_struct`]: https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_struct\n+[`debug_tuple`]: https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_tuple\n+[`debug_list`]: https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_list\n+[`debug_set`]: https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_set\n+[`debug_map`]: https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_map\n+[`Debug`]: https://doc.rust-lang.org/nightly/std/fmt/trait.Debug.html\n+[strup]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.to_uppercase\n+[strlow]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.to_lowercase\n+[`to_uppercase`]: https://doc.rust-lang.org/nightly/std/primitive.char.html#method.to_uppercase\n+[`to_lowercase`]: https://doc.rust-lang.org/nightly/std/primitive.char.html#method.to_lowercase\n+[`PoisonError`]: https://doc.rust-lang.org/nightly/std/sync/struct.PoisonError.html\n+[`RwLock`]: https://doc.rust-lang.org/nightly/std/sync/struct.RwLock.html\n+[`Mutex`]: https://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html\n+[`FromRawFd`]: https://doc.rust-lang.org/nightly/std/os/unix/io/trait.FromRawFd.html\n+[`AsRawFd`]: https://doc.rust-lang.org/nightly/std/os/unix/io/trait.AsRawFd.html\n+[`Stdio`]: https://doc.rust-lang.org/nightly/std/process/struct.Stdio.html\n+[`ChildStdin`]: https://doc.rust-lang.org/nightly/std/process/struct.ChildStdin.html\n+[`ChildStdout`]: https://doc.rust-lang.org/nightly/std/process/struct.ChildStdout.html\n+[`ChildStderr`]: https://doc.rust-lang.org/nightly/std/process/struct.ChildStderr.html\n+[`io::ErrorKind`]: https://doc.rust-lang.org/nightly/std/io/enum.ErrorKind.html\n [debugfmt]: https://www.reddit.com/r/rust/comments/3ceaui/psa_produces_prettyprinted_debug_output/\n-[`DerefMut`]: http://doc.rust-lang.org/nightly/std/ops/trait.DerefMut.html\n-[`mem::align_of`]: http://doc.rust-lang.org/nightly/std/mem/fn.align_of.html\n+[`DerefMut`]: https://doc.rust-lang.org/nightly/std/ops/trait.DerefMut.html\n+[`mem::align_of`]: https://doc.rust-lang.org/nightly/std/mem/fn.align_of.html\n [align]: https://github.com/rust-lang/rust/pull/25646\n-[`mem::min_align_of`]: http://doc.rust-lang.org/nightly/std/mem/fn.min_align_of.html\n+[`mem::min_align_of`]: https://doc.rust-lang.org/nightly/std/mem/fn.min_align_of.html\n [typos]: https://github.com/rust-lang/rust/pull/26087\n [nop]: https://github.com/rust-lang/rust/pull/26336\n [fat]: https://github.com/rust-lang/rust/pull/26411\n@@ -237,14 +237,14 @@ Misc\n * [The `drop_with_repr_extern` lint warns about mixing `repr(C)`\n   with `Drop`][drop].\n \n-[`str::split_whitespace`]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.split_whitespace\n-[`FromRawFd`]: http://doc.rust-lang.org/nightly/std/os/unix/io/trait.FromRawFd.html\n-[`AsRawFd`]: http://doc.rust-lang.org/nightly/std/os/unix/io/trait.AsRawFd.html\n-[`std::os::unix::symlink`]: http://doc.rust-lang.org/nightly/std/os/unix/fs/fn.symlink.html\n-[`IntoIterator`]: http://doc.rust-lang.org/nightly/std/iter/trait.IntoIterator.html\n-[`From`]: http://doc.rust-lang.org/nightly/std/convert/trait.From.html\n+[`str::split_whitespace`]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.split_whitespace\n+[`FromRawFd`]: https://doc.rust-lang.org/nightly/std/os/unix/io/trait.FromRawFd.html\n+[`AsRawFd`]: https://doc.rust-lang.org/nightly/std/os/unix/io/trait.AsRawFd.html\n+[`std::os::unix::symlink`]: https://doc.rust-lang.org/nightly/std/os/unix/fs/fn.symlink.html\n+[`IntoIterator`]: https://doc.rust-lang.org/nightly/std/iter/trait.IntoIterator.html\n+[`From`]: https://doc.rust-lang.org/nightly/std/convert/trait.From.html\n [rf]: https://github.com/rust-lang/rust/pull/24491\n-[err-index]: http://doc.rust-lang.org/error-index.html\n+[err-index]: https://doc.rust-lang.org/error-index.html\n [sk]: https://github.com/rust-lang/rust/pull/24615\n [pre]: https://github.com/rust-lang/rust/pull/25323\n [file]: https://github.com/rust-lang/rust/pull/24598\n@@ -258,13 +258,13 @@ Misc\n [pie]: https://github.com/rust-lang/rust/pull/24953\n [abs]: https://github.com/rust-lang/rust/pull/25441\n [c]: https://github.com/rust-lang/rust/pull/25496\n-[`Cloned`]: http://doc.rust-lang.org/nightly/std/iter/struct.Cloned.html\n-[`Incoming`]: http://doc.rust-lang.org/nightly/std/net/struct.Incoming.html\n+[`Cloned`]: https://doc.rust-lang.org/nightly/std/iter/struct.Cloned.html\n+[`Incoming`]: https://doc.rust-lang.org/nightly/std/net/struct.Incoming.html\n [inc]: https://github.com/rust-lang/rust/pull/25522\n [bh]: https://github.com/rust-lang/rust/pull/25856\n-[`BinaryHeap`]: http://doc.rust-lang.org/nightly/std/collections/struct.BinaryHeap.html\n+[`BinaryHeap`]: https://doc.rust-lang.org/nightly/std/collections/struct.BinaryHeap.html\n [ll]: https://github.com/rust-lang/rust/pull/26022\n-[`split_off`]: http://doc.rust-lang.org/nightly/collections/linked_list/struct.LinkedList.html#method.split_off\n+[`split_off`]: https://doc.rust-lang.org/nightly/collections/linked_list/struct.LinkedList.html#method.split_off\n [drop]: https://github.com/rust-lang/rust/pull/24935\n \n Version 1.0.0 (May 2015)\n@@ -508,7 +508,7 @@ Version 1.0.0-alpha.2 (February 2015)\n [drop]: https://github.com/rust-lang/rust/pull/21972\n [drop-rfc]: https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md\n [feat]: https://github.com/rust-lang/rust/pull/21248\n-[feat-forum]: http://users.rust-lang.org/t/psa-important-info-about-rustcs-new-feature-staging/82/5\n+[feat-forum]: https://users.rust-lang.org/t/psa-important-info-about-rustcs-new-feature-staging/82/5\n [feat-rfc]: https://github.com/rust-lang/rfcs/blob/master/text/0507-release-channels.md\n [fmt]: https://github.com/rust-lang/rust/pull/21457\n [into]: https://github.com/rust-lang/rust/pull/20790\n@@ -709,7 +709,7 @@ Version 1.0.0-alpha (January 2015)\n [objsafe]: https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md\n [assoc]: https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\n [ints]: https://github.com/rust-lang/rfcs/pull/544#issuecomment-68760871\n-[trpl]: http://doc.rust-lang.org/book/index.html\n+[trpl]: https://doc.rust-lang.org/book/index.html\n [rbe]: http://rustbyexample.com/\n \n "}, {"sha": "4c8f110373483078803bf29283d38a43d3cbfec7", "filename": "mk/cfg/i686-pc-windows-msvc.mk", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-msvc.mk?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -22,8 +22,3 @@ CFG_LDPATH_i686-pc-windows-msvc :=\n CFG_RUN_i686-pc-windows-msvc=$(2)\n CFG_RUN_TARG_i686-pc-windows-msvc=$(call CFG_RUN_i686-pc-windows-msvc,,$(2))\n CFG_GNU_TRIPLE_i686-pc-windows-msvc := i686-pc-win32\n-\n-# All windows nightiles are currently a GNU triple, so this MSVC triple is not\n-# bootstrapping from itself. This is relevant during stage0, and other parts of\n-# the build system take this into account.\n-BOOTSTRAP_FROM_i686-pc-windows-msvc := i686-pc-windows-gnu"}, {"sha": "65cf28f6852b24c822652345237acb3058b05038", "filename": "mk/cfg/x86_64-pc-windows-msvc.mk", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -22,8 +22,3 @@ CFG_LDPATH_x86_64-pc-windows-msvc :=\n CFG_RUN_x86_64-pc-windows-msvc=$(2)\n CFG_RUN_TARG_x86_64-pc-windows-msvc=$(call CFG_RUN_x86_64-pc-windows-msvc,,$(2))\n CFG_GNU_TRIPLE_x86_64-pc-windows-msvc := x86_64-pc-win32\n-\n-# All windows nightiles are currently a GNU triple, so this MSVC triple is not\n-# bootstrapping from itself. This is relevant during stage0, and other parts of\n-# the build system take this into account.\n-BOOTSTRAP_FROM_x86_64-pc-windows-msvc := x86_64-pc-windows-gnu"}, {"sha": "c547e35bb70104ad1dea6997c231fe789ea70323", "filename": "mk/docs.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -48,7 +48,7 @@ L10N_LANGS := ja\n RUSTDOC_HTML_OPTS_NO_CSS = --html-before-content=doc/version_info.html \\\n \t--html-in-header=doc/favicon.inc \\\n \t--html-after-content=doc/footer.inc \\\n-\t--markdown-playground-url='http://play.rust-lang.org/'\n+\t--markdown-playground-url='https://play.rust-lang.org/'\n \n RUSTDOC_HTML_OPTS = $(RUSTDOC_HTML_OPTS_NO_CSS) --markdown-css rust.css\n \n@@ -169,7 +169,7 @@ doc/not_found.html: $(D)/not_found.md $(HTML_DEPS) | doc/\n \t@$(call E, rustdoc: $@)\n \t$(Q)$(RUSTDOC) $(RUSTDOC_HTML_OPTS_NO_CSS) \\\n \t\t--markdown-no-toc \\\n-\t\t--markdown-css http://doc.rust-lang.org/rust.css $<\n+\t\t--markdown-css https://doc.rust-lang.org/rust.css $<\n \n define DEF_DOC\n "}, {"sha": "b70926388caa423dd2591bf01e214170006d5382", "filename": "mk/main.mk", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -400,11 +400,6 @@ TSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(foreach obj,$$(INSTALLED_OBJECTS_$(2)),\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(obj))\n \n-ifeq ($(1),0)\n-TSREQ$(1)_T_$(2)_H_$(3) += \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(call CFG_STATIC_LIB_NAME_$(2),morestack)\n-endif\n-\n # Prerequisites for a working stageN compiler and libraries, for a specific\n # target\n SREQ$(1)_T_$(2)_H_$(3) = \\"}, {"sha": "fcb6a5b50d3cebc049cca98288e20035460dc08e", "filename": "mk/platform.mk", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -237,64 +237,3 @@ endef\n \n $(foreach target,$(CFG_TARGET), \\\n   $(eval $(call CFG_MAKE_TOOLCHAIN,$(target))))\n-\n-# There are more comments about this available in the target specification for\n-# Windows MSVC in the compiler, but the gist of it is that we use `llvm-ar.exe`\n-# instead of `lib.exe` for assembling archives, so we need to inject this custom\n-# dependency here.\n-#\n-# FIXME(stage0): remove this and all other relevant support in the makefiles\n-#                after a snapshot is made\n-define ADD_LLVM_AR_TO_MSVC_DEPS\n-ifeq ($$(findstring msvc,$(1)),msvc)\n-NATIVE_TOOL_DEPS_core_T_$(1) += llvm-ar.exe\n-INSTALLED_BINS_$(1) += llvm-ar.exe\n-endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call ADD_LLVM_AR_TO_MSVC_DEPS,$(target))))\n-\n-# When working with MSVC on windows, each DLL needs to explicitly declare its\n-# interface to the outside world through some means. The options for doing so\n-# include:\n-#\n-# 1. A custom attribute on each function itself\n-# 2. A linker argument saying what to export\n-# 3. A file which lists all symbols that need to be exported\n-#\n-# The Rust compiler takes care (1) for us for all Rust code by annotating all\n-# public-facing functions with dllexport, but we have a few native dependencies\n-# which need to cross the DLL boundary. The most important of these dependencies\n-# is LLVM which is linked into `rustc_llvm.dll` but primarily used from\n-# `rustc_trans.dll`. This means that many of LLVM's C API functions need to be\n-# exposed from `rustc_llvm.dll` to be forwarded over the boundary.\n-#\n-# Unfortunately, at this time, LLVM does not handle this sort of exportation on\n-# Windows for us, so we're forced to do it ourselves if we want it (which seems\n-# like the path of least resistance right now). To do this we generate a `.DEF`\n-# file [1] which we then custom-pass to the linker when building the rustc_llvm\n-# crate. This DEF file list all symbols that are exported from\n-# `src/librustc_llvm/lib.rs` and is generated by a small python script.\n-#\n-# Fun times!\n-#\n-# [1]: https://msdn.microsoft.com/en-us/library/28d6s79h.aspx\n-#\n-# FIXME(stage0): remove this macro and the usage below (and the commments above)\n-# \t         when a new snapshot is available. Also remove the\n-# \t         RUSTFLAGS$(1)_.._T_ variable in mk/target.mk along with\n-# \t         CUSTOM_DEPS (as they were only added for this)\n-define ADD_RUSTC_LLVM_DEF_TO_MSVC\n-ifeq ($$(findstring msvc,$(1)),msvc)\n-RUSTFLAGS0_rustc_llvm_T_$(1) += -C link-args=\"-DEF:$(1)/rt/rustc_llvm.def\"\n-CUSTOM_DEPS0_rustc_llvm_T_$(1) += $(1)/rt/rustc_llvm.def\n-\n-$(1)/rt/rustc_llvm.def: $$(S)src/etc/mklldef.py $$(S)src/librustc_llvm/lib.rs\n-\t$$(CFG_PYTHON) $$^ $$@ rustc_llvm-$$(CFG_FILENAME_EXTRA)\n-endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call ADD_RUSTC_LLVM_DEF_TO_MSVC,$(target))))\n-"}, {"sha": "b8f345699f45e6f19210f89cf16f76a0bb368561", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -35,8 +35,7 @@\n # that's per-target so you're allowed to conditionally add files based on the\n # target.\n ################################################################################\n-NATIVE_LIBS := rust_builtin hoedown miniz \\\n-\t\trust_test_helpers morestack\n+NATIVE_LIBS := rust_builtin hoedown miniz rust_test_helpers\n \n # $(1) is the target triple\n define NATIVE_LIBRARIES\n@@ -54,7 +53,6 @@ NATIVE_DEPS_miniz_$(1) = miniz.c\n NATIVE_DEPS_rust_builtin_$(1) := rust_builtin.c \\\n \t\t\trust_android_dummy.c\n NATIVE_DEPS_rust_test_helpers_$(1) := rust_test_helpers.c\n-NATIVE_DEPS_morestack_$(1) := empty.c\n \n ################################################################################\n # You shouldn't find it that necessary to edit anything below this line."}, {"sha": "aae66c45b57e3c2fbb9074de39b7749ecc79c1dc", "filename": "mk/target.mk", "status": "modified", "additions": 1, "deletions": 92, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -37,10 +37,7 @@ CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4) := \\\n \t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)), \\\n \t\t  $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),$$(dep))) \\\n \t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)_T_$(2)), \\\n-\t\t  $$(RT_OUTPUT_DIR_$(2))/$$(dep)) \\\n-\t\t$$(foreach dep,$$(NATIVE_TOOL_DEPS_$(4)_T_$(2)), \\\n-\t\t  $$(TBIN$(1)_T_$(3)_H_$(3))/$$(dep)) \\\n-\t\t$$(CUSTOM_DEPS$(1)_$(4)_T_$(2))\n+\t\t  $$(RT_OUTPUT_DIR_$(2))/$$(dep))\n endef\n \n $(foreach host,$(CFG_HOST), \\\n@@ -142,21 +139,13 @@ SNAPSHOT_RUSTC_POST_CLEANUP=$(HBIN0_H_$(CFG_BUILD))/rustc$(X_$(CFG_BUILD))\n \n define TARGET_HOST_RULES\n \n-$$(TBIN$(1)_T_$(2)_H_$(3))/:\n-\tmkdir -p $$@\n-\n $$(TLIB$(1)_T_$(2)_H_$(3))/:\n \tmkdir -p $$@\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/%: $$(RT_OUTPUT_DIR_$(2))/% \\\n \t    | $$(TLIB$(1)_T_$(2)_H_$(3))/ $$(SNAPSHOT_RUSTC_POST_CLEANUP)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\n-$$(TBIN$(1)_T_$(2)_H_$(3))/%: $$(CFG_LLVM_INST_DIR_$(2))/bin/% \\\n-\t    | $$(TBIN$(1)_T_$(2)_H_$(3))/ $$(SNAPSHOT_RUSTC_POST_CLEANUP)\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n endef\n \n $(foreach source,$(CFG_HOST), \\\n@@ -180,83 +169,3 @@ $(foreach host,$(CFG_HOST), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach tool,$(TOOLS), \\\n     $(eval $(call TARGET_TOOL,$(stage),$(target),$(host),$(tool)))))))\n-\n-# We have some triples which are bootstrapped from other triples, and this means\n-# that we need to fixup some of the native tools that a triple depends on.\n-#\n-# For example, MSVC requires the llvm-ar.exe executable to manage archives, but\n-# it bootstraps from the GNU Windows triple. This means that the compiler will\n-# add this directory to PATH when executing new processes:\n-#\n-# \t$SYSROOT/rustlib/x86_64-pc-windows-gnu/bin\n-#\n-# Unfortunately, however, the GNU triple is not known about in stage0, so the\n-# tools are actually located in:\n-#\n-# \t$SYSROOT/rustlib/x86_64-pc-windows-msvc/bin\n-#\n-# To remedy this problem, the rules below copy all native tool dependencies into\n-# the bootstrap triple's location in stage 0 so the bootstrap compiler can find\n-# the right sets of tools. Later stages (1+) will have the right host triple for\n-# the compiler, so there's no need to worry there.\n-#\n-# $(1) - stage\n-# $(2) - triple that's being used as host/target\n-# $(3) - triple snapshot is built for\n-# $(4) - crate\n-# $(5) - tool\n-#\n-# FIXME(stage0): remove this and all other relevant support in the makefiles\n-#                after a snapshot is made\n-define MOVE_TOOLS_TO_SNAPSHOT_HOST_DIR\n-ifneq (,$(3))\n-$$(TLIB$(1)_T_$(2)_H_$(2))/stamp.$(4): $$(HLIB$(1)_H_$(2))/rustlib/$(3)/bin/$(5)\n-\n-$$(HLIB$(1)_H_$(2))/rustlib/$(3)/bin/$(5): $$(TBIN$(1)_T_$(2)_H_$(2))/$(5)\n-\tmkdir -p $$(@D)\n-\tcp $$< $$@\n-endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n- $(foreach crate,$(CRATES), \\\n-  $(foreach tool,$(NATIVE_TOOL_DEPS_$(crate)_T_$(target)), \\\n-   $(eval $(call MOVE_TOOLS_TO_SNAPSHOT_HOST_DIR,0,$(target),$(BOOTSTRAP_FROM_$(target)),$(crate),$(tool))))))\n-\n-# For MSVC targets we need to set up some environment variables for the linker\n-# to work correctly when building Rust crates. These two variables are:\n-#\n-# - LIB tells the linker the default search path for finding system libraries,\n-#   for example kernel32.dll\n-# - PATH needs to be modified to ensure that MSVC's link.exe is first in the\n-#   path instead of MinGW's /usr/bin/link.exe (entirely unrelated)\n-#\n-# The values for these variables are detected by the configure script.\n-#\n-# FIXME(stage0): remove this and all other relevant support in the makefiles\n-#                after a snapshot is made\n-define SETUP_LIB_MSVC_ENV_VARS\n-ifeq ($$(findstring msvc,$(2)),msvc)\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n-\texport LIB := $$(CFG_MSVC_LIB_PATH_$$(HOST_$(2)))\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n-\texport PATH := $$(CFG_MSVC_BINDIR_$$(HOST_$(2))):$$(PATH)\n-endif\n-endef\n-define SETUP_TOOL_MSVC_ENV_VARS\n-ifeq ($$(findstring msvc,$(2)),msvc)\n-$$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n-\texport LIB := $$(CFG_MSVC_LIB_PATH_$$(HOST_$(2)))\n-$$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n-\texport PATH := $$(CFG_MSVC_BINDIR_$$(HOST_$(2))):$$(PATH)\n-endif\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach crate,$(CRATES), \\\n-   $(eval $(call SETUP_LIB_MSVC_ENV_VARS,0,$(target),$(host),$(crate))))))\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach tool,$(TOOLS), \\\n-   $(eval $(call SETUP_TOOL_MSVC_ENV_VARS,0,$(target),$(host),$(tool))))))"}, {"sha": "f91828838a8ea6b1b4a66eab2fafb9d6591d15d4", "filename": "mk/tests.mk", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -597,6 +597,10 @@ CTEST_DISABLE_debuginfo-gdb =\n CTEST_DISABLE_debuginfo-lldb = \"lldb tests are disabled on android\"\n endif\n \n+ifeq ($(findstring msvc,$(CFG_TARGET)),msvc)\n+CTEST_DISABLE_debuginfo-gdb = \"gdb tests are disabled on MSVC\"\n+endif\n+\n # CTEST_DISABLE_NONSELFHOST_$(TEST_GROUP), if set, will cause that\n # test group to be disabled *unless* the target is able to build a\n # compiler (i.e. when the target triple is in the set of of host\n@@ -1050,7 +1054,8 @@ $(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n         $$(MAKE) \\\n \t    $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n \t    $(3)/test/run-make/$$* \\\n-\t    \"$$(CC_$(3)) $$(CFG_GCCISH_CFLAGS_$(3))\" \\\n+\t    $$(CC_$(3)) \\\n+\t    \"$$(CFG_GCCISH_CFLAGS_$(3))\" \\\n \t    $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n \t    \"$$(TESTNAME)\" \\\n \t    $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3)) \\"}, {"sha": "8f881657bdc1a1965140ab4941436a06bee2f3ba", "filename": "src/doc/favicon.inc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Ffavicon.inc", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Ffavicon.inc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ffavicon.inc?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -1 +1 @@\n-<link rel=\"shortcut icon\" href=\"http://www.rust-lang.org/favicon.ico\">\n+<link rel=\"shortcut icon\" href=\"https://www.rust-lang.org/favicon.ico\">"}, {"sha": "8ca50667507c5b4e7fafc2663496a92f807651d7", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -95,5 +95,4 @@ languages:\n - [Russian](https://github.com/kgv/rust_book_ru)\n - [Korean](https://github.com/rust-kr/doc.rust-kr.org)\n - [Chinese](https://github.com/KaiserY/rust-book-chinese)\n-- [Spanish](https://github.com/goyox86/elpr)\n-\n+- [Spanish](https://goyox86.github.io/elpr)"}, {"sha": "5d632ebc68f7a3fd54f692902b8f81f378e460d3", "filename": "src/doc/not_found.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fnot_found.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fnot_found.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnot_found.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -21,12 +21,12 @@ Some things that might be helpful to you though:\n \n # Reference\n \n-* [The Rust official site](http://rust-lang.org)\n-* [The Rust reference](http://doc.rust-lang.org/reference.html)\n+* [The Rust official site](https://www.rust-lang.org)\n+* [The Rust reference](https://doc.rust-lang.org/reference.html)\n \n # Docs\n \n-* [The standard library](http://doc.rust-lang.org/std/)\n+* [The standard library](https://doc.rust-lang.org/std/)\n \n <script>\n function get_url_fragments() {\n@@ -58,7 +58,7 @@ function populate_rust_search() {\n     // #18540, use a single token\n \n     var a = document.createElement(\"a\");\n-    a.href = \"http://doc.rust-lang.org/core/?search=\" + encodeURIComponent(lt);\n+    a.href = \"https://doc.rust-lang.org/core/?search=\" + encodeURIComponent(lt);\n     a.textContent = lt;\n     var search = document.getElementById('core-search');\n     search.innerHTML = \"\";"}, {"sha": "5ab1a1d9c10f45e9de5b6beb04784e72fbd4e9df", "filename": "src/doc/style/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fstyle%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fstyle%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2FREADME.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -26,7 +26,7 @@ Every guideline has a status:\n \n One purpose of these guidelines is to reach decisions on a number of\n cross-cutting API and stylistic choices. Discussion and development of\n-the guidelines will happen primarily on http://discuss.rust-lang.org/,\n+the guidelines will happen primarily on https://internals.rust-lang.org/,\n using the Guidelines category. Discussion can also occur on the\n [guidelines issue tracker](https://github.com/rust-lang/rust-guidelines).\n "}, {"sha": "0985475f56a9a86e43ee3c5b101e4ea49bab3a22", "filename": "src/doc/style/errors/ergonomics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -57,7 +57,7 @@ fn write_info(info: &Info) -> Result<(), IoError> {\n ```\n \n See\n-[the `result` module documentation](http://static.rust-lang.org/doc/master/std/result/index.html#the-try!-macro)\n+[the `result` module documentation](https://doc.rust-lang.org/stable/std/result/index.html#the-try!-macro)\n for more details.\n \n ### The `Result`-`impl` pattern [FIXME]"}, {"sha": "4038ec10b9ab5d1f9f5a015326e8268455030dc4", "filename": "src/doc/style/errors/signaling.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fstyle%2Ferrors%2Fsignaling.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fstyle%2Ferrors%2Fsignaling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ferrors%2Fsignaling.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -94,7 +94,7 @@ aspects of the input that are not covered by the contract.\n ### For obstructions, use `Result`\n \n The\n-[`Result<T,E>` type](http://static.rust-lang.org/doc/master/std/result/index.html)\n+[`Result<T,E>` type](https://doc.rust-lang.org/stable/std/result/index.html)\n represents either a success (yielding `T`) or failure (yielding `E`). By\n returning a `Result`, a function allows its clients to discover and react to\n obstructions in a fine-grained way."}, {"sha": "9ea1d218161912b50fed472dc4df7e000036e626", "filename": "src/doc/style/features/functions-and-methods/input.md", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -124,15 +124,15 @@ that the caller already owns, for example to re-use a buffer:\n fn read(&mut self, buf: &mut [u8]) -> std::io::Result<usize>\n ```\n \n-(From the [Reader trait](http://static.rust-lang.org/doc/master/std/io/trait.Reader.html#tymethod.read).)\n+(From the [Read trait](https://doc.rust-lang.org/stable/std/io/trait.Read.html#tymethod.read).)\n \n ### Consider validating arguments, statically or dynamically. [FIXME: needs RFC]\n \n _Note: this material is closely related to\n   [library-level guarantees](../../safety/lib-guarantees.md)._\n \n Rust APIs do _not_ generally follow the\n-[robustness principle](http://en.wikipedia.org/wiki/Robustness_principle): \"be\n+[robustness principle](https://en.wikipedia.org/wiki/Robustness_principle): \"be\n conservative in what you send; be liberal in what you accept\".\n \n Instead, Rust code should _enforce_ the validity of input whenever practical.\n@@ -147,24 +147,26 @@ Choose an argument type that rules out bad inputs.\n For example, prefer\n \n ```rust\n-fn foo(a: ascii::Ascii) { ... }\n+enum FooMode {\n+    Mode1,\n+    Mode2,\n+    Mode3,\n+}\n+fn foo(mode: FooMode) { ... }\n ```\n \n over\n \n ```rust\n-fn foo(a: u8) { ... }\n+fn foo(mode2: bool, mode3: bool) {\n+    assert!(!mode2 || !mode3);\n+    ...\n+}\n ```\n \n-Note that\n-[`ascii::Ascii`](http://static.rust-lang.org/doc/master/std/ascii/struct.Ascii.html)\n-is a _wrapper_ around `u8` that guarantees the highest bit is zero; see\n-[newtype patterns](../types/newtype.md) for more details on creating typesafe wrappers.\n-\n Static enforcement usually comes at little run-time cost: it pushes the\n-costs to the boundaries (e.g. when a `u8` is first converted into an\n-`Ascii`). It also catches bugs early, during compilation, rather than through\n-run-time failures.\n+costs to the boundaries. It also catches bugs early, during compilation,\n+rather than through run-time failures.\n \n On the other hand, some properties are difficult or impossible to\n express using types.\n@@ -177,7 +179,7 @@ downsides:\n \n 1. Runtime overhead (unless checking can be done as part of processing the input).\n 2. Delayed detection of bugs.\n-3. Introduces failure cases, either via `fail!` or `Result`/`Option` types (see\n+3. Introduces failure cases, either via `panic!` or `Result`/`Option` types (see\n    the [error handling guidelines](../../errors/README.md)), which must then be\n    dealt with by client code.\n "}, {"sha": "23d8760f571f6cecca166e4d81d251e77169e335", "filename": "src/doc/style/features/modules.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fstyle%2Ffeatures%2Fmodules.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fstyle%2Ffeatures%2Fmodules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Fmodules.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -58,13 +58,13 @@ For modules that themselves have submodules, place the module in a separate\n directory (e.g., `bar/mod.rs` for a module `bar`) rather than the same directory.\n \n Note the structure of\n-[`std::io`](http://doc.rust-lang.org/std/io/). Many of the submodules lack\n+[`std::io`](https://doc.rust-lang.org/std/io/). Many of the submodules lack\n children, like\n-[`io::fs`](http://doc.rust-lang.org/std/io/fs/)\n+[`io::fs`](https://doc.rust-lang.org/std/io/fs/)\n and\n-[`io::stdio`](http://doc.rust-lang.org/std/io/stdio/).\n+[`io::stdio`](https://doc.rust-lang.org/std/io/stdio/).\n On the other hand,\n-[`io::net`](http://doc.rust-lang.org/std/io/net/)\n+[`io::net`](https://doc.rust-lang.org/std/io/net/)\n contains submodules, so it lives in a separate directory:\n \n ```\n@@ -88,7 +88,7 @@ submodules of `io::net` easier to find.\n ### Consider top-level definitions or reexports. [FIXME: needs RFC]\n \n For modules with submodules,\n-define or [reexport](http://doc.rust-lang.org/std/io/#reexports) commonly used\n+define or [reexport](https://doc.rust-lang.org/std/io/#reexports) commonly used\n definitions at the top level:\n \n * Functionality relevant to the module itself or to many of its\n@@ -98,10 +98,10 @@ definitions at the top level:\n   common definitions.\n \n For example,\n-[`IoError`](http://doc.rust-lang.org/std/io/struct.IoError.html)\n+[`IoError`](https://doc.rust-lang.org/std/io/struct.IoError.html)\n is defined in `io/mod.rs`, since it pertains to the entirety of `io`,\n while\n-[`TcpStream`](http://doc.rust-lang.org/std/io/net/tcp/struct.TcpStream.html)\n+[`TcpStream`](https://doc.rust-lang.org/std/io/net/tcp/struct.TcpStream.html)\n is defined in `io/net/tcp.rs` and reexported in the `io` module.\n \n ### Use internal module hirearchies for organization. [FIXME: needs RFC]\n@@ -113,11 +113,11 @@ is defined in `io/net/tcp.rs` and reexported in the `io` module.\n Internal module hirearchies (i.e., private submodules) may be used to\n hide implementation details that are not part of the module's API.\n \n-For example, in [`std::io`](http://doc.rust-lang.org/std/io/), `mod mem`\n+For example, in [`std::io`](https://doc.rust-lang.org/std/io/), `mod mem`\n provides implementations for\n-[`BufReader`](http://doc.rust-lang.org/std/io/struct.BufReader.html)\n+[`BufReader`](https://doc.rust-lang.org/std/io/struct.BufReader.html)\n and\n-[`BufWriter`](http://doc.rust-lang.org/std/io/struct.BufWriter.html),\n+[`BufWriter`](https://doc.rust-lang.org/std/io/struct.BufWriter.html),\n but these are re-exported in `io/mod.rs` at the top level of the module:\n \n ```rust"}, {"sha": "9fc640890fe8acbca219393c6ce467b5f5b0079c", "filename": "src/doc/style/ownership/builders.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fstyle%2Fownership%2Fbuilders.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fstyle%2Fownership%2Fbuilders.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fownership%2Fbuilders.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -32,7 +32,7 @@ treatment of ownership, as described below.\n \n In some cases, constructing the final `T` does not require the builder itself to\n be consumed. The follow variant on\n-[`std::io::process::Command`](http://static.rust-lang.org/doc/master/std/io/process/struct.Command.html)\n+[`std::process::Command`](https://doc.rust-lang.org/stable/std/process/struct.Command.html)\n is one example:\n \n ```rust"}, {"sha": "540dbe9ab9bf87d424afbff0c5478f722acbfa6d", "filename": "src/doc/trpl/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Ftrpl%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Ftrpl%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FREADME.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -13,7 +13,7 @@ even though some of these abstractions feel like those of a high-level\n language. Even then, Rust still allows precise control like a low-level\n language would.\n \n-[rust]: http://rust-lang.org\n+[rust]: https://www.rust-lang.org\n \n \u201cThe Rust Programming Language\u201d is split into eight sections. This introduction\n is the first. After this:"}, {"sha": "ffa8be5ac084b224b53c033b2f2c20c2a01246ba", "filename": "src/doc/trpl/compiler-plugins.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Ftrpl%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Ftrpl%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcompiler-plugins.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -115,7 +115,7 @@ In addition to procedural macros, you can define new\n extensions.  See\n [`Registry::register_syntax_extension`](../rustc/plugin/registry/struct.Registry.html#method.register_syntax_extension)\n and the [`SyntaxExtension`\n-enum](http://doc.rust-lang.org/syntax/ext/base/enum.SyntaxExtension.html).  For\n+enum](https://doc.rust-lang.org/syntax/ext/base/enum.SyntaxExtension.html).  For\n a more involved macro example, see\n [`regex_macros`](https://github.com/rust-lang/regex/blob/master/regex_macros/src/lib.rs).\n \n@@ -156,7 +156,7 @@ so that the compiler can continue and find further errors.\n To print syntax fragments for debugging, you can use\n [`span_note`](../syntax/ext/base/struct.ExtCtxt.html#method.span_note) together\n with\n-[`syntax::print::pprust::*_to_string`](http://doc.rust-lang.org/syntax/print/pprust/index.html#functions).\n+[`syntax::print::pprust::*_to_string`](https://doc.rust-lang.org/syntax/print/pprust/index.html#functions).\n \n The example above produced an integer literal using\n [`AstBuilder::expr_usize`](../syntax/ext/build/trait.AstBuilder.html#tymethod.expr_usize)."}, {"sha": "556af6625c0fff7a37510809f6d4331be5adcd32", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -76,7 +76,7 @@ This [unfortunate error](https://github.com/rust-lang/rust/issues/22547) is\n correct: documentation comments apply to the thing after them, and there's no\n thing after that last comment.\n \n-[rc-new]: http://doc.rust-lang.org/nightly/std/rc/struct.Rc.html#method.new\n+[rc-new]: https://doc.rust-lang.org/nightly/std/rc/struct.Rc.html#method.new\n \n ### Writing documentation comments\n \n@@ -544,9 +544,9 @@ You can control a few aspects of the HTML that `rustdoc` generates through the\n `#![doc]` version of the attribute:\n \n ```rust\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"https://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"https://doc.rust-lang.org/\")]\n ```\n \n This sets a few different options, with a logo, favicon, and a root URL."}, {"sha": "f06005d55b9616d6b96b5072ec187c552566c0dd", "filename": "src/doc/trpl/installing-rust.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -32,7 +32,7 @@ install dialog and on the \"Product Features\" page ensure \"Add to PATH\" is\n installed on the local hard drive.\n \n \n-[install-page]: http://www.rust-lang.org/install.html\n+[install-page]: https://www.rust-lang.org/install.html\n \n ## Uninstalling\n \n@@ -85,10 +85,10 @@ $ rustc --version\n ```\n \n You should see the version number, commit hash, and commit date. If you just\n-installed version 1.0.0, you should see:\n+installed version 1.2.0, you should see:\n \n ```bash\n-rustc 1.0.0 (a59de37e9 2015-05-13)\n+rustc 1.2.0 (082e47636 2015-08-03)\n ```\n \n If you did, Rust has been installed successfully! Congrats!\n@@ -112,5 +112,5 @@ resources include [the user\u2019s forum][users], and\n \n [irc]: irc://irc.mozilla.org/#rust\n [mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n-[users]: http://users.rust-lang.org/\n+[users]: https://users.rust-lang.org/\n [stackoverflow]: http://stackoverflow.com/questions/tagged/rust"}, {"sha": "0578fbf8bdb09286f768f6b617aeedab63b23480", "filename": "src/doc/trpl/nightly-rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Ftrpl%2Fnightly-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Ftrpl%2Fnightly-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fnightly-rust.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -50,7 +50,7 @@ documentation on [building Rust from Source][from-source], or [the official\n binary downloads][install-page].\n \n [from-source]: https://github.com/rust-lang/rust#building-from-source\n-[install-page]: http://www.rust-lang.org/install.html\n+[install-page]: https://www.rust-lang.org/install.html\n \n Oh, we should also mention the officially supported platforms:\n \n@@ -95,5 +95,5 @@ resources include [the user\u2019s forum][users], and [Stack Overflow][stackoverflo\n \n [irc]: irc://irc.mozilla.org/#rust\n [mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n-[users]: http://users.rust-lang.org/ \n+[users]: https://users.rust-lang.org/\n [stackoverflow]: http://stackoverflow.com/questions/tagged/rust"}, {"sha": "2fda57923cd8faf428cebe2dbb077f11125630a2", "filename": "src/doc/version_info.html.template", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fversion_info.html.template", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fdoc%2Fversion_info.html.template", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fversion_info.html.template?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -1,6 +1,6 @@\n <div id=\"versioninfo\">\n-  <img src=\"http://www.rust-lang.org/logos/rust-logo-32x32-blk.png\" width=\"32\" height=\"32\" alt><br>\n-  <span class=\"white-sticker\"><a href=\"http://rust-lang.org\">Rust</a> VERSION</span><br>\n-  <a href=\"http://github.com/rust-lang/rust/commit/STAMP\"\n+  <img src=\"https://www.rust-lang.org/logos/rust-logo-32x32-blk.png\" width=\"32\" height=\"32\" alt><br>\n+  <span class=\"white-sticker\"><a href=\"https://www.rust-lang.org\">Rust</a> VERSION</span><br>\n+  <a href=\"https://github.com/rust-lang/rust/commit/STAMP\"\n     class=\"hash white-sticker\">SHORT_HASH</a>\n </div>"}, {"sha": "04bf81a96aaf3ab09d6389712645c05228e6ddf2", "filename": "src/etc/maketest.py", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fetc%2Fmaketest.py", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fetc%2Fmaketest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmaketest.py?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -41,14 +41,14 @@ def convert_path_spec(name, value):\n make = sys.argv[2]\n putenv('RUSTC', os.path.abspath(sys.argv[3]))\n putenv('TMPDIR', os.path.abspath(sys.argv[4]))\n-putenv('CC', sys.argv[5])\n-putenv('RUSTDOC', os.path.abspath(sys.argv[6]))\n-filt = sys.argv[7]\n-putenv('LD_LIB_PATH_ENVVAR', sys.argv[8])\n-putenv('HOST_RPATH_DIR', os.path.abspath(sys.argv[9]))\n-putenv('TARGET_RPATH_DIR', os.path.abspath(sys.argv[10]))\n-putenv('RUST_BUILD_STAGE', sys.argv[11])\n-putenv('S', os.path.abspath(sys.argv[12]))\n+putenv('CC', sys.argv[5] + ' ' + sys.argv[6])\n+putenv('RUSTDOC', os.path.abspath(sys.argv[7]))\n+filt = sys.argv[8]\n+putenv('LD_LIB_PATH_ENVVAR', sys.argv[9])\n+putenv('HOST_RPATH_DIR', os.path.abspath(sys.argv[10]))\n+putenv('TARGET_RPATH_DIR', os.path.abspath(sys.argv[11]))\n+putenv('RUST_BUILD_STAGE', sys.argv[12])\n+putenv('S', os.path.abspath(sys.argv[13]))\n putenv('PYTHON', sys.executable)\n \n if filt not in sys.argv[1]:"}, {"sha": "ccf8784e2a7e6206126ac17d830b6827599e41d5", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -71,9 +71,6 @@\n \n use boxed::Box;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::atomic;\n use core::atomic::Ordering::{Relaxed, Release, Acquire, SeqCst};\n use core::fmt;"}, {"sha": "f31bb60ed97ee5418b2203ecf97e06179e8d63c0", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -53,9 +53,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use heap;\n use raw_vec::RawVec;\n "}, {"sha": "6551011e81d3e346b591c4e8328a91a31ccaace0", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -64,9 +64,9 @@\n #![unstable(feature = \"alloc\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n                       form or name\")]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        test(no_crate_inject))]\n #![no_std]\n \n@@ -92,7 +92,6 @@\n #![feature(unsize)]\n #![feature(core_slice_ext)]\n #![feature(core_str_ext)]\n-#![cfg_attr(stage0, feature(core, core_prelude))]\n \n #![cfg_attr(test, feature(test, alloc, rustc_private, box_raw))]\n #![cfg_attr(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")),\n@@ -101,8 +100,6 @@\n #[cfg(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")))]\n extern crate libc;\n \n-#[cfg(stage0)] #[macro_use] extern crate core;\n-\n // Allow testing this library\n \n #[cfg(test)] #[macro_use] extern crate std;"}, {"sha": "620ceaa346b706b9858131c4324d0fa15b8f70b8", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -150,9 +150,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n #[cfg(not(test))]\n use boxed::Box;\n #[cfg(test)]"}, {"sha": "969500fc441cb7960665f0dd4945a51a1d102192", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -26,9 +26,9 @@\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(alloc)]\n #![feature(box_syntax)]"}, {"sha": "c46025b33351c21748de801b3fa6e611cdb32544", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -151,9 +151,6 @@\n #![allow(missing_docs)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::iter::{FromIterator};\n use core::mem::swap;\n use core::ptr;"}, {"sha": "e1ae4c51e3affb642e0bf782ae62fc8c7c6e95ce", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -86,9 +86,6 @@\n //! println!(\"There are {} primes below {}\", num_primes, max_prime);\n //! ```\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp::Ordering;\n use core::cmp;\n use core::fmt;"}, {"sha": "a5c6ebaa5ae4442ced83fd32c55869a0192d2582", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -17,9 +17,6 @@\n \n use self::Entry::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp::Ordering;\n use core::fmt::Debug;\n use core::hash::{Hash, Hasher};\n@@ -531,8 +528,6 @@ enum Continuation<A, B> {\n /// to nodes. By using this module much better safety guarantees can be made, and more search\n /// boilerplate gets cut out.\n mod stack {\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n     use core::marker;\n     use core::mem;\n     use core::ops::{Deref, DerefMut};"}, {"sha": "7b544078d5b2fc5068ab7ad65edbc2e90ff41d90", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -16,9 +16,6 @@ pub use self::SearchResult::*;\n pub use self::ForceResult::*;\n pub use self::TraversalItem::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp::Ordering::{Greater, Less, Equal};\n use core::intrinsics::arith_offset;\n use core::iter::Zip;"}, {"sha": "3f545e7b2a16d704e3cfdcc0b4d4b2c7969fef14", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -11,9 +11,6 @@\n // This is pretty much entirely stolen from TreeSet, since BTreeMap has an identical interface\n // to TreeMap\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp::Ordering::{self, Less, Greater, Equal};\n use core::fmt::Debug;\n use core::fmt;"}, {"sha": "246c213a19b2dd9d75fa72ff5cdba42374864600", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -17,9 +17,6 @@\n             reason = \"matches collection reform specification, \\\n                       waiting for dust to settle\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::marker;\n use core::fmt;\n use core::iter::{FromIterator};"}, {"sha": "740fba73c173c2242971bdeaf12e1618007673c3", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -21,10 +21,10 @@\n #![unstable(feature = \"collections\",\n             reason = \"library is unlikely to be stabilized with the current \\\n                       layout and name, use std::collections instead\")]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\",\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\",\n        test(no_crate_inject))]\n \n #![allow(trivial_casts)]\n@@ -59,13 +59,10 @@\n #![feature(utf8_error)]\n #![cfg_attr(test, feature(rand, test))]\n #![cfg_attr(not(test), feature(str_words))]\n-#![cfg_attr(stage0, feature(core, core_prelude))]\n \n #![feature(no_std)]\n #![no_std]\n \n-#[cfg(stage0)] #[macro_use] extern crate core;\n-\n extern crate rustc_unicode;\n extern crate alloc;\n "}, {"sha": "50b5db758c1ed4eddc768d4733b8ea39b3cfbff9", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -21,9 +21,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use alloc::boxed::Box;\n use core::cmp::Ordering;\n use core::fmt;"}, {"sha": "aa41c57b92712c8ac4832a3c92f46fa271c29572", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -12,9 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::fmt;\n use core::hash;\n use core::iter::FromIterator;"}, {"sha": "45b0dea493f4518f68454964dbfdb0dbeb0a5ab7", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -58,9 +58,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use alloc::raw_vec::RawVec;\n use alloc::boxed::Box;\n use alloc::heap::EMPTY;"}, {"sha": "f189d7b80d98115f8747bc6729d5c5d9f27fdcb1", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -18,9 +18,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp::Ordering;\n use core::fmt;\n use core::iter::{self, repeat, FromIterator, RandomAccessIterator};"}, {"sha": "93f8db23e565a3aef7f61acf1bc469f1d64aa32d", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -20,9 +20,6 @@\n \n use self::Entry::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp::{max, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};"}, {"sha": "64a56549d0ff02f8247379717b899e98dddec2ad", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 13, "deletions": 37, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -54,34 +54,32 @@\n                       stabilization in terms of structure and naming\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\")]\n #![doc(test(no_crate_inject))]\n \n-#![cfg_attr(stage0, feature(no_std))]\n-#![cfg_attr(stage0, no_std)]\n-#![cfg_attr(not(stage0), feature(no_core))]\n-#![cfg_attr(not(stage0), no_core)]\n+#![no_core]\n #![allow(raw_pointer_derive)]\n #![deny(missing_docs)]\n \n+#![feature(allow_internal_unstable)]\n #![feature(associated_type_defaults)]\n+#![feature(concat_idents)]\n+#![feature(const_fn)]\n+#![feature(custom_attribute)]\n+#![feature(fundamental)]\n #![feature(intrinsics)]\n #![feature(lang_items)]\n+#![feature(no_core)]\n #![feature(on_unimplemented)]\n+#![feature(optin_builtin_traits)]\n+#![feature(reflect)]\n+#![feature(rustc_attrs)]\n #![feature(simd)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n-#![feature(rustc_attrs)]\n-#![feature(optin_builtin_traits)]\n-#![feature(fundamental)]\n-#![feature(concat_idents)]\n-#![feature(reflect)]\n-#![feature(custom_attribute)]\n-#![feature(const_fn)]\n-#![feature(allow_internal_unstable)]\n \n #[macro_use]\n mod macros;\n@@ -159,25 +157,3 @@ pub mod fmt;\n \n // note: does not need to be public\n mod tuple;\n-\n-// A curious inner-module that's not exported that contains the bindings of core\n-// so that compiler-expanded references to `core::$foo` can be resolved within\n-// core itself.\n-//\n-// Note that no crate-defined macros require this module due to the existence of\n-// the `$crate` meta variable, only those expansions defined in the compiler\n-// require this. This is because the compiler doesn't currently know that it's\n-// compiling the core library when it's compiling this library, so it expands\n-// all references to `::core::$foo`\n-#[doc(hidden)]\n-#[cfg(stage0)]\n-mod core {\n-    pub use intrinsics;     // derive(PartialOrd)\n-    pub use fmt;            // format_args!\n-    pub use clone;          // derive(Clone)\n-    pub use cmp;            // derive(Ord)\n-    pub use hash;           // derive(Hash)\n-    pub use marker;         // derive(Copy)\n-    pub use option;         // iterator protocol\n-    pub use iter;           // iterator protocol\n-}"}, {"sha": "64b9d7ac16b5af748f1fb0f1be9e20fd48801cc0", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -21,9 +21,9 @@\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(libc)]\n #![feature(staged_api)]"}, {"sha": "469b04e7c8b1d7bc0cafc9d8db854301530f3a60", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -21,10 +21,10 @@\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\")]\n \n #![feature(staged_api)]\n #![feature(unicode)]"}, {"sha": "c9bd3c04fa97a02bbb5b45191b2595da1422c586", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -84,10 +84,10 @@\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\")]\n \n #![deny(missing_docs)]\n #![feature(staged_api)]"}, {"sha": "f6f3438f467206e0f94ebfaa7cf8c3a7e728986f", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -281,9 +281,9 @@\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(into_cow)]\n #![feature(str_escape)]"}, {"sha": "2718694490c4de24ded3a6e0408adb9515ee6401", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -15,13 +15,12 @@\n #![cfg_attr(not(feature = \"cargo-build\"), unstable(feature = \"libc\",\n                                                    reason = \"use `libc` from crates.io\"))]\n #![cfg_attr(not(feature = \"cargo-build\"), feature(staged_api, no_std))]\n-#![cfg_attr(all(not(feature = \"cargo-build\"), stage0), feature(core))]\n #![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n #![cfg_attr(not(feature = \"cargo-build\"), no_std)]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\")]\n #![cfg_attr(test, feature(test))]\n \n //! Bindings for the C standard library and other platform libraries\n@@ -79,7 +78,6 @@\n #![allow(bad_style, raw_pointer_derive)]\n #![cfg_attr(target_os = \"nacl\", allow(unused_imports))]\n #[cfg(feature = \"cargo-build\")] extern crate std as core;\n-#[cfg(all(stage0, not(feature = \"cargo-build\")))] extern crate core;\n \n #[cfg(test)] extern crate std;\n #[cfg(test)] extern crate test;"}, {"sha": "f4002c7aaaeeda3ae7173868aac5267ad8138655", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -163,10 +163,10 @@\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\")]\n #![deny(missing_docs)]\n \n #![feature(box_raw)]"}, {"sha": "db81ff5c0700dc4e1c176ec36e4a0dc5e36a6505", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -10,9 +10,6 @@\n \n //! The ChaCha random number generator.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use {Rng, SeedableRng, Rand};\n \n const KEY_WORDS    : usize =  8; // 8 words for the 256-bit key"}, {"sha": "5defe174cf5d7f02e2bd189552f691ad6c7ba72d", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -17,9 +17,6 @@\n //! internally. The `IndependentSample` trait is for generating values\n //! that do not need to record state.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::num::Float;\n use core::marker::PhantomData;\n "}, {"sha": "e196708368ad35bdf763baf9c0549881458b5a71", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -12,9 +12,6 @@\n \n // this is surprisingly complicated to be both generic & correct\n \n-#[cfg(stage0)]\n-use core::prelude::v1::PartialOrd;\n-\n use Rng;\n use distributions::{Sample, IndependentSample};\n "}, {"sha": "f51483cc11f464b7b732f19fb19b191bf17da518", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -12,9 +12,6 @@\n \n #![allow(non_camel_case_types)]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::slice;\n use core::iter::repeat;\n use core::num::Wrapping as w;"}, {"sha": "56104064a7291d5e35cd3d3875382ff776b3b85e", "filename": "src/librand/lib.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -20,10 +20,10 @@\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rand\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\")]\n #![no_std]\n #![staged_api]\n #![unstable(feature = \"rand\",\n@@ -34,20 +34,14 @@\n #![feature(num_bits_bytes)]\n #![feature(staged_api)]\n #![feature(step_by)]\n-#![cfg_attr(stage0, feature(core, core_prelude))]\n \n #![cfg_attr(test, feature(test, rand, rustc_private, iter_order))]\n \n #![allow(deprecated)]\n \n-#[cfg(stage0)] #[macro_use] extern crate core;\n-\n #[cfg(test)] #[macro_use] extern crate std;\n #[cfg(test)] #[macro_use] extern crate log;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::marker::PhantomData;\n \n pub use isaac::{IsaacRng, Isaac64Rng};"}, {"sha": "04093db4b6ff79fd2b0eda113c744f3729e94481", "filename": "src/librand/rand_impls.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Frand_impls.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -10,9 +10,6 @@\n \n //! The implementations of `Rand` for the built-in types.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::char;\n use core::isize;\n use core::usize;"}, {"sha": "99fe2bb5ab507f530f2eb1f8ae0d6082ab5e5f97", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -11,9 +11,6 @@\n //! A wrapper around another RNG that reseeds it after it\n //! generates a certain number of random bytes.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use {Rng, SeedableRng};\n \n /// How many bytes of entropy the underling RNG is allowed to generate"}, {"sha": "a65cfac56b32b0b49229d9eebef88c990d7b63e4", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -118,10 +118,10 @@\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\")]\n \n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "fd2e4e2fb7700d6400f386c08d8c0071884ceeaa", "filename": "src/librustc/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FREADME.md?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -4,7 +4,7 @@ An informal guide to reading and working on the rustc compiler.\n If you wish to expand on this document, or have a more experienced\n Rust contributor add anything else to it, please get in touch:\n \n-* http://internals.rust-lang.org/\n+* https://internals.rust-lang.org/\n * https://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n \n or file a bug:"}, {"sha": "6b53f835be59218b3405b6b5c75a9323bfa01654", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -21,9 +21,9 @@\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(append)]\n #![feature(associated_consts)]\n@@ -179,5 +179,18 @@ mod rustc {\n     pub use lint;\n }\n \n+// FIXME(#27438): right now the unit tests of librustc don't refer to any actual\n+//                functions generated in librustc_data_structures (all\n+//                references are through generic functions), but statics are\n+//                referenced from time to time. Due to this bug we won't\n+//                actually correctly link in the statics unless we also\n+//                reference a function, so be sure to reference a dummy\n+//                function.\n+#[test]\n+fn noop() {\n+    rustc_data_structures::__noop_fix_for_27438();\n+}\n+\n+\n // Build the diagnostics array at the end so that the metadata includes error use sites.\n __build_diagnostic_array! { librustc, DIAGNOSTICS }"}, {"sha": "b661f633388c33c5a6616bb3d39b478385714da2", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -28,9 +28,9 @@\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_syntax)]\n #![feature(fs_canonicalize)]"}, {"sha": "77030f5d76827f929c5d8cd1ea22b533386fa20c", "filename": "src/librustc_back/target/apple_ios_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -77,8 +77,8 @@ fn target_cpu(arch: Arch) -> String {\n         Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n         Armv7s => \"cortex-a9\",\n         Arm64 => \"cyclone\",\n-        I386 => \"generic\",\n-        X86_64 => \"x86-64\",\n+        I386 => \"yonah\",\n+        X86_64 => \"core2\",\n     }.to_string()\n }\n "}, {"sha": "85756db96061fc81f8b1fa227f33ab37e207c863", "filename": "src/librustc_back/target/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -13,6 +13,7 @@ use target::Target;\n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n+    base.custom_unwind_resume = true;\n \n     Target {\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),"}, {"sha": "850701e704613c3ac666d5338c3db85a6903fc97", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -158,6 +158,60 @@ fn main(){\n     x = 5;\n }\n ```\n+\"##,\n+\n+E0387: r##\"\n+This error occurs when an attempt is made to mutate or mutably reference data\n+that a closure has captured immutably. Examples of this error are shown below:\n+\n+```\n+// Accepts a function or a closure that captures its environment immutably.\n+// Closures passed to foo will not be able to mutate their closed-over state.\n+fn foo<F: Fn()>(f: F) { }\n+\n+// Attempts to mutate closed-over data.  Error message reads:\n+// `cannot assign to data in a captured outer variable...`\n+fn mutable() {\n+    let mut x = 0u32;\n+    foo(|| x = 2);\n+}\n+\n+// Attempts to take a mutable reference to closed-over data.  Error message\n+// reads: `cannot borrow data mutably in a captured outer variable...`\n+fn mut_addr() {\n+    let mut x = 0u32;\n+    foo(|| { let y = &mut x; });\n+}\n+```\n+\n+The problem here is that foo is defined as accepting a parameter of type `Fn`.\n+Closures passed into foo will thus be inferred to be of type `Fn`, meaning that\n+they capture their context immutably.\n+\n+If the definition of `foo` is under your control, the simplest solution is to\n+capture the data mutably. This can be done by defining `foo` to take FnMut\n+rather than Fn:\n+\n+```\n+fn foo<F: FnMut()>(f: F) { }\n+```\n+\n+Alternatively, we can consider using the `Cell` and `RefCell` types to achieve\n+interior mutability through a shared reference. Our example's `mutable` function\n+could be redefined as below:\n+\n+```\n+use std::cell::Cell;\n+\n+fn mutable() {\n+    let x = Cell::new(0u32);\n+    foo(|| x.set(2));\n+}\n+```\n+\n+You can read more about cell types in the API documentation:\n+\n+https://doc.rust-lang.org/std/cell/\n \"##\n \n }\n@@ -166,7 +220,6 @@ register_diagnostics! {\n     E0383, // partial reinitialization of uninitialized structure\n     E0385, // {} in an aliasable location\n     E0386, // {} in an immutable container\n-    E0387, // {} in a captured outer variable in an `Fn` closure\n     E0388, // {} in a static location\n     E0389  // {} in a `&` reference\n }"}, {"sha": "302e62d81dd679e5d9f186b7b0716a449ec015d9", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -15,9 +15,9 @@\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![allow(non_camel_case_types)]\n "}, {"sha": "897a05952e64f8c5df1445cfb6508b2c16e26f82", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -23,9 +23,9 @@\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![staged_api]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"https://www.rust-lang.org/favicon.ico\",\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(rustc_private, staged_api)]\n #![cfg_attr(test, feature(test))]\n@@ -38,3 +38,7 @@ pub mod graph;\n pub mod bitvec;\n pub mod ivar;\n pub mod unify;\n+\n+// See comments in src/librustc/lib.rs\n+#[doc(hidden)]\n+pub fn __noop_fix_for_27438() {}"}, {"sha": "230307f0b19321744c0fb41e66eab267d383dd5c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -21,9 +21,9 @@\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_syntax)]\n #![feature(libc)]"}, {"sha": "13724760d7bfb3da4815c4d41257a43eb1f15576", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -26,9 +26,9 @@\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![cfg_attr(test, feature(test))]\n #![feature(box_patterns)]"}, {"sha": "15661283aac2993db711a4a0ed18c081883fad86", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -21,17 +21,17 @@\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(associated_consts)]\n #![feature(box_syntax)]\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(staged_api)]\n #![feature(vec_push_all)]\n-#![cfg_attr(not(stage0), feature(linked_from))]\n+#![feature(linked_from)]\n \n extern crate libc;\n #[macro_use] #[no_link] extern crate rustc_bitflags;\n@@ -599,7 +599,7 @@ pub mod debuginfo {\n // automatically updated whenever LLVM is updated to include an up-to-date\n // set of the libraries we need to link to LLVM for.\n #[link(name = \"rustllvm\", kind = \"static\")]\n-#[cfg_attr(not(stage0), linked_from = \"rustllvm\")] // not quite true but good enough\n+#[linked_from = \"rustllvm\"] // not quite true but good enough\n extern {\n     /* Create and destroy contexts. */\n     pub fn LLVMContextCreate() -> ContextRef;"}, {"sha": "4991904703a47cce31bc2b263d5d0903f8c91af6", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -15,9 +15,9 @@\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]"}, {"sha": "04144a50b67d6755ae273c2576ca4714db37764b", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -46,7 +46,7 @@ fn f() {\n See the Declaration Statements section of the reference for more information\n about what constitutes an Item declaration and what does not:\n \n-http://doc.rust-lang.org/reference.html#statements\n+https://doc.rust-lang.org/reference.html#statements\n \"##,\n \n E0251: r##\"\n@@ -201,7 +201,7 @@ struct abc;\n See the Declaration Statements section of the reference for more information\n about what constitutes an Item declaration and what does not:\n \n-http://doc.rust-lang.org/reference.html#statements\n+https://doc.rust-lang.org/reference.html#statements\n \"##,\n \n E0317: r##\"\n@@ -212,7 +212,7 @@ name as an existing primitive type.\n See the Types section of the reference for more information about the primitive\n types:\n \n-http://doc.rust-lang.org/reference.html#types\n+https://doc.rust-lang.org/reference.html#types\n \"##,\n \n E0364: r##\"\n@@ -241,7 +241,7 @@ pub use foo::X;\n See the 'Use Declarations' section of the reference for more information\n on this topic:\n \n-http://doc.rust-lang.org/reference.html#use-declarations\n+https://doc.rust-lang.org/reference.html#use-declarations\n \"##,\n \n E0365: r##\"\n@@ -270,7 +270,7 @@ pub use foo as foo2;\n See the 'Use Declarations' section of the reference for more information\n on this topic:\n \n-http://doc.rust-lang.org/reference.html#use-declarations\n+https://doc.rust-lang.org/reference.html#use-declarations\n \"##,\n \n E0403: r##\"\n@@ -627,21 +627,29 @@ trait Foo {\n         Self; // error: unresolved name `Self`\n     }\n }\n+\n+// or:\n+let x = unknown_variable;  // error: unresolved name `unknown_variable`\n ```\n \n-Please verify you didn't misspell the name or that you're not using an\n-invalid object. Example:\n+Please verify that the name wasn't misspelled and ensure that the\n+identifier being referred to is valid for the given situation. Example:\n \n ```\n enum something_that_does_exist {\n     foo\n }\n+\n // or:\n mod something_that_does_exist {\n     pub static foo : i32 = 0i32;\n }\n \n something_that_does_exist::foo; // ok!\n+\n+// or:\n+let unknown_variable = 12u32;\n+let x = unknown_variable; // ok!\n ```\n \"##,\n "}, {"sha": "e63dbd2092a606e92ca8cfb38cc27c3f9e1ca841", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -15,9 +15,9 @@\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(associated_consts)]\n #![feature(borrow_state)]"}, {"sha": "f4daa6e86e9c0d126dd9509cd20d905059524a1b", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -21,9 +21,9 @@\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "947c902b2a91b392d2750c0ccc50f9daca506ca6", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -745,13 +745,22 @@ pub fn invoke<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n }\n \n+/// Returns whether this session's target will use SEH-based unwinding.\n+///\n+/// This is only true for MSVC targets, and even then the 64-bit MSVC target\n+/// currently uses SEH-ish unwinding with DWARF info tables to the side (same as\n+/// 64-bit MinGW) instead of \"full SEH\".\n+pub fn wants_msvc_seh(sess: &Session) -> bool {\n+    sess.target.target.options.is_like_msvc && sess.target.target.arch == \"x86\"\n+}\n+\n pub fn need_invoke(bcx: Block) -> bool {\n-    // FIXME(#25869) currently unwinding is not implemented for MSVC and our\n-    //               normal unwinding infrastructure ends up just causing linker\n-    //               errors with the current LLVM implementation, so landing\n-    //               pads are disabled entirely for MSVC targets\n-    if bcx.sess().no_landing_pads() ||\n-       bcx.sess().target.target.options.is_like_msvc {\n+    // FIXME(#25869) currently SEH-based unwinding is pretty buggy in LLVM and\n+    //               is being overhauled as this is being written. Until that\n+    //               time such that upstream LLVM's implementation is more solid\n+    //               and we start binding it we need to skip invokes for any\n+    //               target which wants SEH-based unwinding.\n+    if bcx.sess().no_landing_pads() || wants_msvc_seh(bcx.sess()) {\n         return false;\n     }\n "}, {"sha": "0a39150dbd36a684fcdd358588044a6d841d73d1", "filename": "src/librustc_trans/trans/cabi_x86_win64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_win64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_win64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_win64.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -42,10 +42,10 @@ pub fn compute_abi_info(ccx: &CrateContext,\n         let ty = match t.kind() {\n             Struct => {\n                 match llsize_of_alloc(ccx, t) {\n-                    1 => ArgType::direct(rty, Some(Type::i8(ccx)), None, None),\n-                    2 => ArgType::direct(rty, Some(Type::i16(ccx)), None, None),\n-                    4 => ArgType::direct(rty, Some(Type::i32(ccx)), None, None),\n-                    8 => ArgType::direct(rty, Some(Type::i64(ccx)), None, None),\n+                    1 => ArgType::direct(t, Some(Type::i8(ccx)), None, None),\n+                    2 => ArgType::direct(t, Some(Type::i16(ccx)), None, None),\n+                    4 => ArgType::direct(t, Some(Type::i32(ccx)), None, None),\n+                    8 => ArgType::direct(t, Some(Type::i64(ccx)), None, None),\n                     _ => ArgType::indirect(t, Some(Attribute::ByVal))\n                 }\n             }"}, {"sha": "98301221f96e8aa803e5c6589fec557736f48a7f", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -595,7 +595,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         // landing pads as \"landing pads for SEH\".\n         let target = &self.ccx.sess().target.target;\n         match self.ccx.tcx().lang_items.eh_personality() {\n-            Some(def_id) if !target.options.is_like_msvc => {\n+            Some(def_id) if !base::wants_msvc_seh(self.ccx.sess()) => {\n                 callee::trans_fn_ref(self.ccx, def_id, ExprId(0),\n                                      self.param_substs).val\n             }\n@@ -604,7 +604,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n                 match *personality {\n                     Some(llpersonality) => llpersonality,\n                     None => {\n-                        let name = if !target.options.is_like_msvc {\n+                        let name = if !base::wants_msvc_seh(self.ccx.sess()) {\n                             \"rust_eh_personality\"\n                         } else if target.arch == \"x86\" {\n                             \"_except_handler3\""}, {"sha": "293a0a6a4ca084cc1e30051c714ad6995add355e", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -1037,7 +1037,7 @@ fn try_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         Call(bcx, func, &[data], None, dloc);\n         Store(bcx, C_null(Type::i8p(bcx.ccx())), dest);\n         bcx\n-    } else if bcx.sess().target.target.options.is_like_msvc {\n+    } else if wants_msvc_seh(bcx.sess()) {\n         trans_msvc_try(bcx, func, data, dest, dloc)\n     } else {\n         trans_gnu_try(bcx, func, data, dest, dloc)"}, {"sha": "fa258188eb8251992c4269a66671f75a5dab2cc4", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -190,7 +190,7 @@ trait_obj.method_two();\n You can read more about trait objects in the Trait Object section of the\n Reference:\n \n-http://doc.rust-lang.org/reference.html#trait-objects\n+https://doc.rust-lang.org/reference.html#trait-objects\n \"##,\n \n E0034: r##\"\n@@ -642,6 +642,7 @@ item paths (ie, namespaced variables), dereferences, indexing expressions,\n and field references.\n \n Let's start with some bad examples:\n+\n ```\n use std::collections::LinkedList;\n \n@@ -653,8 +654,10 @@ LinkedList::new() += 1;\n fn some_func(i: &mut i32) {\n     i += 12; // Error : '+=' operation cannot be applied on a reference !\n }\n+```\n \n And now some good examples:\n+\n ```\n let mut i : i32 = 0;\n \n@@ -665,7 +668,6 @@ i += 12; // Good !\n fn some_func(i: &mut i32) {\n     *i += 12; // Good !\n }\n-\n ```\n \"##,\n \n@@ -694,6 +696,7 @@ More details can be found here:\n https://doc.rust-lang.org/reference.html#lvalues,-rvalues-and-temporaries\n \n Now, we can go further. Here are some bad examples:\n+\n ```\n struct SomeStruct {\n     x: i32,\n@@ -1322,7 +1325,7 @@ fn bar(x: &str, y: &str) -> &str { ... }\n fn baz<'a>(x: &'a str, y: &str) -> &str { ... }\n ```\n \n-[book-le]: http://doc.rust-lang.org/nightly/book/lifetimes.html#lifetime-elision\n+[book-le]: https://doc.rust-lang.org/nightly/book/lifetimes.html#lifetime-elision\n \"##,\n \n E0107: r##\"\n@@ -1840,6 +1843,22 @@ Since we know for certain that Wrapper<u32> implements Clone, there's no reason\n to also specify it in a `where` clause.\n \"##,\n \n+E0194: r##\"\n+A type parameter was declared which shadows an existing one. An example of this\n+error:\n+\n+```\n+trait Foo<T> {\n+    fn do_something(&self) -> T;\n+    fn do_something_else<T: Clone>(&self, bar: T);\n+}\n+```\n+\n+In this example, the trait `Foo` and the trait method `do_something_else` both\n+define a type parameter `T`. This is not allowed: if the method wishes to\n+define a type parameter, it must use a different name for it.\n+\"##,\n+\n E0195: r##\"\n Your method's lifetime parameters do not match the trait declaration.\n Erroneous code example:\n@@ -2595,7 +2614,6 @@ register_diagnostics! {\n     E0188, // can not cast a immutable reference to a mutable pointer\n     E0189, // deprecated: can only cast a boxed pointer to a boxed object\n     E0190, // deprecated: can only cast a &-pointer to an &-object\n-    E0194,\n     E0196, // cannot determine a type for this closure\n     E0203, // type parameter has more than one relaxed default bound,\n            // and only one is supported"}, {"sha": "5d7822a71bb5d015d850217898af1cf9e12f6398", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -69,9 +69,9 @@ This API is completely unstable and subject to change.\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![allow(non_camel_case_types)]\n "}, {"sha": "3ff405602640363d630c0883c82620ff69eb164f", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -26,10 +26,10 @@\n #![unstable(feature = \"unicode\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\",\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\",\n        test(no_crate_inject))]\n #![no_std]\n \n@@ -41,9 +41,6 @@\n #![feature(lang_items)]\n #![feature(no_std)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, feature(core, core_prelude))]\n-\n-#[cfg(stage0)] extern crate core;\n \n mod normalize;\n mod tables;"}, {"sha": "a938312248f478b6fdfe6e862b51d49037e84cc3", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -14,8 +14,6 @@\n //! unicode parts of the CharExt trait.\n \n use self::GraphemeState::*;\n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n \n use core::char;\n use core::cmp;"}, {"sha": "7388a066f2254d5f4a508da46a9c5e1ad0fdaac3", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -598,7 +598,7 @@ mod tests {\n             assert_eq!(output, expect);\n         }\n \n-        t(\"hello [Rust](http://rust-lang.org) :)\", \"hello Rust :)\");\n+        t(\"hello [Rust](https://www.rust-lang.org) :)\", \"hello Rust :)\");\n         t(\"code `let x = i32;` ...\", \"code `let x = i32;` ...\");\n         t(\"type `Type<'static>` ...\", \"type `Type<'static>` ...\");\n         t(\"# top header\", \"top header\");"}, {"sha": "9ceb2195f032c1d3aafa321881f0b84d45dc35be", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -15,10 +15,10 @@\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n    html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-   html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-   html_playground_url = \"http://play.rust-lang.org/\")]\n+   html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+   html_playground_url = \"https://play.rust-lang.org/\")]\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "561cd8745f3bfa006bec8c9fd50111c09ee9ed35", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -22,10 +22,10 @@ Core encoding and decoding interfaces.\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\")]\n \n #![feature(box_syntax)]\n #![feature(collections)]"}, {"sha": "8831830f799fe1ebe46138e6ca342f16119cbe3f", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -32,9 +32,6 @@\n #![unstable(feature = \"os_str\",\n             reason = \"recently added as part of path/io reform\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use borrow::{Borrow, Cow, ToOwned};\n use ffi::CString;\n use fmt::{self, Debug};"}, {"sha": "ba32ffc49d4428b0dd69fbb506ef054f49d6fe8c", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -17,9 +17,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use fmt;\n use ffi::OsString;\n use io::{self, SeekFrom, Seek, Read, Write};"}, {"sha": "9590f0b7aa72693eb6e4d21b99b3733cb01ad5c9", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -292,9 +292,6 @@ impl Write for Cursor<Vec<u8>> {\n \n #[cfg(test)]\n mod tests {\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n-\n     use io::prelude::*;\n     use io::{Cursor, SeekFrom};\n     use vec::Vec;"}, {"sha": "a5c8ba335c1505852fa3aff2a4145fea47454d27", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use boxed::Box;\n use cmp;\n use io::{self, SeekFrom, Read, Write, Seek, BufRead, Error, ErrorKind};"}, {"sha": "33c561e3eea7352d3ad81aabc4fd43d12f495d03", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -56,21 +56,21 @@ struct StderrRaw(stdio::Stderr);\n /// The returned handle has no external synchronization or buffering.\n fn stdin_raw() -> io::Result<StdinRaw> { stdio::Stdin::new().map(StdinRaw) }\n \n-/// Constructs a new raw handle to the standard input stream of this process.\n+/// Constructs a new raw handle to the standard output stream of this process.\n ///\n /// The returned handle does not interact with any other handles created nor\n /// handles returned by `std::io::stdout`. Note that data is buffered by the\n-/// `std::io::stdin` handles so writes which happen via this raw handle may\n+/// `std::io::stdout` handles so writes which happen via this raw handle may\n /// appear before previous writes.\n ///\n /// The returned handle has no external synchronization or buffering layered on\n /// top.\n fn stdout_raw() -> io::Result<StdoutRaw> { stdio::Stdout::new().map(StdoutRaw) }\n \n-/// Constructs a new raw handle to the standard input stream of this process.\n+/// Constructs a new raw handle to the standard error stream of this process.\n ///\n /// The returned handle does not interact with any other handles created nor\n-/// handles returned by `std::io::stdout`.\n+/// handles returned by `std::io::stderr`.\n ///\n /// The returned handle has no external synchronization or buffering layered on\n /// top."}, {"sha": "07a9548224aca8c8508166c03eddd896ce8a8e72", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -10,9 +10,6 @@\n \n #![allow(missing_copy_implementations)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use io::{self, Read, Write, ErrorKind, BufRead};\n \n /// Copies the entire contents of a reader into a writer."}, {"sha": "6041c2d3d47f33beb597935b8ecd993b8a70c789", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -191,10 +191,10 @@\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\",\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\",\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n@@ -249,16 +249,13 @@\n #![cfg_attr(test, feature(float_from_str_radix, range_inclusive, float_extras, hash_default))]\n #![cfg_attr(test, feature(test, rustc_private, float_consts))]\n #![cfg_attr(target_env = \"msvc\", feature(link_args))]\n-#![cfg_attr(stage0, feature(core, core_prelude))]\n \n // Don't link to std. We are std.\n #![no_std]\n \n #![allow(trivial_casts)]\n #![deny(missing_docs)]\n \n-#[cfg(stage0)] #[macro_use] extern crate core;\n-\n #[cfg(test)] extern crate test;\n #[cfg(test)] #[macro_use] extern crate log;\n "}, {"sha": "1e1ffc19900c5ed9953e541ee6157a61a7b6c474", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -11,9 +11,6 @@\n #![unstable(feature = \"udp\", reason = \"remaining functions have not been \\\n                                        scrutinized enough to be stabilized\")]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use fmt;\n use io::{self, Error, ErrorKind};\n use net::{ToSocketAddrs, SocketAddr, IpAddr};"}, {"sha": "6a8026a807e726925ad17f6145181e9f043a1512", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -15,9 +15,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use core::num;\n #[cfg(not(target_env = \"msvc\"))]\n use intrinsics;"}, {"sha": "e757ff90fddf71e8a31056c9621bb8b3d3c30d3c", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -15,9 +15,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use core::num;\n use intrinsics;\n use libc::c_int;"}, {"sha": "d1ef763e0f620715222ba1adce043feed52aca21", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -43,8 +43,6 @@ pub fn test_num<T>(ten: T, two: T) where\n \n #[cfg(test)]\n mod tests {\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n     use super::*;\n     use i8;\n     use i16;"}, {"sha": "489438973b302dbc8e5e6b663249f5437d76e1c2", "filename": "src/libstd/path.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -98,9 +98,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use ascii::*;\n use borrow::{Borrow, IntoCow, ToOwned, Cow};\n use cmp;\n@@ -135,8 +132,6 @@ use self::platform::{is_sep_byte, is_verbatim_sep, MAIN_SEP_STR, parse_prefix};\n #[cfg(unix)]\n mod platform {\n     use super::Prefix;\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n     use ffi::OsStr;\n \n     #[inline]\n@@ -159,8 +154,6 @@ mod platform {\n \n #[cfg(windows)]\n mod platform {\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n     use ascii::*;\n \n     use super::{os_str_as_u8_slice, u8_slice_as_os_str, Prefix};\n@@ -409,7 +402,6 @@ fn has_physical_root(s: &[u8], prefix: Option<Prefix>) -> bool {\n }\n \n // basic workhorse for splitting stem and extension\n-#[allow(unused_unsafe)] // FIXME\n fn split_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {\n     unsafe {\n         if os_str_as_u8_slice(file) == b\"..\" { return (Some(file), None) }\n@@ -1750,8 +1742,6 @@ impl AsRef<Path> for PathBuf {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n     use string::{ToString, String};\n     use vec::Vec;\n "}, {"sha": "ee46ec5c9c4660005169d00cd145697dd5e19c20", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -57,9 +57,6 @@\n \n #![unstable(feature = \"rand\")]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::RefCell;\n use io;\n use mem;"}, {"sha": "51d5af056cb7f838f89b4a5962de5ed3dc830ada", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -15,7 +15,6 @@ pub use self::imp::OsRng;\n \n #[cfg(all(unix, not(target_os = \"ios\")))]\n mod imp {\n-    #[cfg(stage0)] use prelude::v1::*;\n     use self::OsRngInner::*;\n \n     use fs::File;\n@@ -182,12 +181,12 @@ mod imp {\n \n #[cfg(target_os = \"ios\")]\n mod imp {\n-    use prelude::v1::*;\n+    #[cfg(stage0)] use prelude::v1::*;\n \n     use io;\n     use mem;\n     use rand::Rng;\n-    use libc::{c_int, c_void, size_t};\n+    use libc::{c_int, size_t};\n \n     /// A random number generator that retrieves randomness straight from\n     /// the operating system. Platform sources:\n@@ -249,9 +248,6 @@ mod imp {\n \n #[cfg(windows)]\n mod imp {\n-    #[cfg(stage0)]\n-    use prelude::v1::*;\n-\n     use io;\n     use mem;\n     use rand::Rng;"}, {"sha": "36adf44cd3a3ea2913dbc72980fc97167641b677", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(dead_code)]\n \n-#[cfg(stage0)] use prelude::v1::*;\n use io::prelude::*;\n use rand::Rng;\n "}, {"sha": "cf8bac31057f78131b4ac49015890e4f2816e9a8", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -19,8 +19,6 @@\n //!\n //! FIXME #7756: Would be nice for this to not exist.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n use vec::Vec;\n \n /// One-time global initialization.\n@@ -141,8 +139,6 @@ mod imp {\n           target_os = \"ios\",\n           target_os = \"windows\"))]\n mod imp {\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n     use vec::Vec;\n \n     pub unsafe fn init(_argc: isize, _argv: *const *const u8) {"}, {"sha": "9e7ed89bae1b7d1c03439da5cc54305de4b24339", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -12,9 +12,6 @@\n \n #![allow(non_camel_case_types)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use env;\n use sync::atomic::{self, Ordering};\n "}, {"sha": "4feb2d49a98ba8b27dec53c3cfbdb25af005560d", "filename": "src/libstd/rt/unwind/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Frt%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Frt%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind%2Fmod.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -77,18 +77,18 @@ use sys_common::mutex::Mutex;\n // implementations. One goes through SEH on Windows and the other goes through\n // libgcc via the libunwind-like API.\n \n-// *-pc-windows-msvc\n-#[cfg(all(windows, target_env = \"msvc\"))]\n+// i686-pc-windows-msvc\n+#[cfg(all(windows, target_arch = \"x86\", target_env = \"msvc\"))]\n #[path = \"seh.rs\"] #[doc(hidden)]\n pub mod imp;\n \n-// x86_64-pc-windows-gnu\n-#[cfg(all(windows, target_arch=\"x86_64\", target_env=\"gnu\"))]\n+// x86_64-pc-windows-*\n+#[cfg(all(windows, target_arch = \"x86_64\"))]\n #[path = \"seh64_gnu.rs\"] #[doc(hidden)]\n pub mod imp;\n \n // i686-pc-windows-gnu and all others\n-#[cfg(any(unix, all(windows, target_arch=\"x86\", target_env=\"gnu\")))]\n+#[cfg(any(unix, all(windows, target_arch = \"x86\", target_env = \"gnu\")))]\n #[path = \"gcc.rs\"] #[doc(hidden)]\n pub mod imp;\n "}, {"sha": "506b8260278a87416af983f3ddc92dec0a25ced7", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -39,8 +39,6 @@\n                         outside in crates.io first\")]\n #![allow(deprecated)]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n use core::mem::replace;\n \n use boxed::Box;"}, {"sha": "c37c0405bbb3851e647b78c61412422866da97d2", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -265,9 +265,6 @@\n // And now that you've seen all the races that I found and attempted to fix,\n // here's the code for you to find some more!\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use sync::Arc;\n use error;\n use fmt;"}, {"sha": "e4eba3d3d2065960deeed37350f19c298d954612", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -40,9 +40,6 @@\n \n pub use self::PopResult::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use alloc::boxed::Box;\n use core::ptr;\n use core::cell::UnsafeCell;"}, {"sha": "cb930280964b3260fbd7cb6fbc922ac3db2cb256", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -37,9 +37,6 @@ pub use self::UpgradeResult::*;\n pub use self::SelectionResult::*;\n use self::MyUpgrade::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use sync::mpsc::Receiver;\n use sync::mpsc::blocking::{self, SignalToken};\n use core::mem;"}, {"sha": "56d903fed3b564f3afd468a44d866640eb1bf27a", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -57,9 +57,6 @@\n                       but no guarantees beyond this are being made\")]\n \n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cell::{Cell, UnsafeCell};\n use core::marker;\n use core::ptr;"}, {"sha": "a3779931c7bd294291a8d75d43e487a5ca24f89b", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -20,9 +20,6 @@\n \n pub use self::Failure::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp;\n use core::isize;\n "}, {"sha": "819f75c006b3112584f6d09f5f8a883f07d37a16", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -33,9 +33,6 @@\n //! concurrently between two threads. This data structure is safe to use and\n //! enforces the semantics that there is one pusher and one popper.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use alloc::boxed::Box;\n use core::ptr;\n use core::cell::UnsafeCell;"}, {"sha": "a9da1b12f7d926ab2be1989c79b9e438a3286abc", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -22,9 +22,6 @@ pub use self::UpgradeResult::*;\n pub use self::SelectionResult::*;\n use self::Message::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp;\n use core::isize;\n use thread;"}, {"sha": "84d758cf9b3b6684244f5dcee7584dc119efcb01", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -33,9 +33,6 @@\n /// of a synchronous channel. There are a few branches for the unbuffered case,\n /// but they're mostly just relevant to blocking senders.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n pub use self::Failure::*;\n use self::Blocker::*;\n "}, {"sha": "a91e1321149a3fa8eb210f6e120f2385ea68edda", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -13,9 +13,6 @@\n //! This primitive is meant to be used to run one-time initialization. An\n //! example use case would be for initializing an FFI library.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use isize;\n use sync::atomic::{AtomicIsize, Ordering};\n use sync::StaticMutex;"}, {"sha": "7f56afc9e1ff2d2695e36d785b6222e7c754fd1b", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n use io::prelude::*;\n \n use io;"}, {"sha": "aca1f42c529fc4fbd7708a6c3031a04ff4f2ad96", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -10,9 +10,6 @@\n \n #![allow(missing_docs)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n pub mod backtrace;\n pub mod condvar;\n pub mod mutex;\n@@ -51,7 +48,3 @@ pub trait IntoInner<Inner> {\n pub trait FromInner<Inner> {\n     fn from_inner(inner: Inner) -> Self;\n }\n-\n-#[cfg(stage0)]\n-#[lang = \"stack_exhausted\"]\n-pub fn stack_exhausted() {}"}, {"sha": "c6917d8fca5f4c59924e90cce6afbcbfb69ef5f3", "filename": "src/libstd/sys/common/poison.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::Cell;\n use error::{Error};\n use fmt;"}, {"sha": "0467c67167bd518d85d7a9fd2c419e17a404e4d3", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -10,9 +10,6 @@\n \n #![allow(dead_code)] // stack_guard isn't used right now on all platforms\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use cell::RefCell;\n use string::String;\n use thread::Thread;"}, {"sha": "f68c57c86ef4bf664ef198168f10a2fb722046c5", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -58,9 +58,6 @@\n #![unstable(feature = \"thread_local_internals\")]\n #![allow(dead_code)] // sys isn't exported yet\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use sync::atomic::{self, AtomicUsize, Ordering};\n \n use sys::thread_local as imp;"}, {"sha": "9e4a80a411bb1ba6d08a834ce5b661f806b13924", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -25,9 +25,6 @@\n // unix (it's mostly used on windows), so don't worry about dead code here.\n #![allow(dead_code)]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::char::{encode_utf8_raw, encode_utf16_raw};\n use core::str::next_code_point;\n "}, {"sha": "853e745b8a190ad57fbef1b4faeef464019dca1f", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -83,8 +83,6 @@\n /// to symbols. This is a bit of a hokey implementation as-is, but it works for\n /// all unix platforms we support right now, so it at least gets the job done.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n use io::prelude::*;\n \n use ffi::CStr;\n@@ -107,6 +105,8 @@ use sys_common::backtrace::*;\n #[cfg(all(target_os = \"ios\", target_arch = \"arm\"))]\n #[inline(never)]\n pub fn write(w: &mut Write) -> io::Result<()> {\n+    use mem;\n+\n     extern {\n         fn backtrace(buf: *mut *mut libc::c_void,\n                      sz: libc::c_int) -> libc::c_int;\n@@ -121,7 +121,7 @@ pub fn write(w: &mut Write) -> io::Result<()> {\n     try!(writeln!(w, \"stack backtrace:\"));\n     // 100 lines should be enough\n     const SIZE: usize = 100;\n-    let mut buf: [*mut libc::c_void; SIZE] = unsafe {mem::zeroed()};\n+    let mut buf: [*mut libc::c_void; SIZE] = unsafe { mem::zeroed() };\n     let cnt = unsafe { backtrace(buf.as_mut_ptr(), SIZE as libc::c_int) as usize};\n \n     // skipping the first one as it is write itself"}, {"sha": "b9538867b252d26f888b33e15c95da6dfdfc9e38", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n use libc;\n use ptr;"}, {"sha": "9bcd62dbdd15a156379d2434a5f2dffc298e997e", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -12,9 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use fs::{self, Permissions, OpenOptions};\n use io;\n use libc;"}, {"sha": "4ff6daf84c12af702256dfa932f29b1154d0664b", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -14,8 +14,6 @@\n \n use os::unix::raw::{uid_t, gid_t};\n use os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n-#[cfg(stage0)]\n-use prelude::v1::*;\n use process;\n use sys;\n use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};"}, {"sha": "4ac498f77ce48642804a2307d4df6cab980e8647", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use io;\n use libc::{self, c_int, size_t, c_void};\n use mem;"}, {"sha": "922a213f9c2c78cc54f2b020de835e2643d3396b", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n use io::prelude::*;\n use os::unix::prelude::*;\n "}, {"sha": "2efca0257f3c8dd1bda0b4de68f2a18cc135738e", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -11,9 +11,6 @@\n #![allow(missing_docs)]\n #![allow(non_camel_case_types)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use io::{self, ErrorKind};\n use libc;\n use num::One;"}, {"sha": "e4c231ff971d35c54b2805aa0a2bffebea792a87", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n use sys::sync as ffi;\n use mem;"}, {"sha": "f0f08a72ed8df212c44d4ef590011e79fe45a6ea", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -11,9 +11,6 @@\n /// The underlying OsString/OsStr implementation on Unix systems: just\n /// a `Vec<u8>`/`[u8]`.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use borrow::Cow;\n use fmt::{self, Debug};\n use vec::Vec;"}, {"sha": "5c29c4c08111d246d172c885145480bd3a8b7891", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use sys::fd::FileDesc;\n use io;\n use libc;"}, {"sha": "788bff6243018f22aff3a404c18e182f95da2032", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use libc;\n use cell::UnsafeCell;\n use sys::sync as ffi;"}, {"sha": "1aa75fa18b7374383d02a1a0781a974c04646224", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use libc;\n use self::imp::{make_handler, drop_handler};\n "}, {"sha": "c87800a1498f05d31870649630d96c77f6199116", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use io;\n use libc;\n use sys::fd::FileDesc;"}, {"sha": "8d59461f1e4e775801e8d93729ef57f5041244fe", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -163,9 +163,6 @@ impl Drop for Thread {\n           not(target_os = \"netbsd\"),\n           not(target_os = \"openbsd\")))]\n pub mod guard {\n-    #[cfg(stage0)]\n-    use prelude::v1::*;\n-\n     pub unsafe fn current() -> Option<usize> { None }\n     pub unsafe fn init() -> Option<usize> { None }\n }"}, {"sha": "c375788fdc16989b1660b896dfbe17f1a00d7d1a", "filename": "src/libstd/sys/unix/thread_local.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -10,8 +10,6 @@\n \n #![allow(dead_code)] // sys isn't exported yet\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n use libc::c_int;\n \n pub type Key = pthread_key_t;"}, {"sha": "7078ee92085fb60c67f5617446219419ca58292c", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -24,8 +24,6 @@\n \n #![allow(dead_code)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n use io::prelude::*;\n \n use dynamic_lib::DynamicLibrary;"}, {"sha": "ac76479d7dbd02baab2d8ba32f767f883f0231ef", "filename": "src/libstd/sys/windows/condvar.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n use libc::{self, DWORD};\n use sys::c;"}, {"sha": "66f42db42cfc856e12ef34e69a1b618d49640ed3", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -12,9 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use fs::{OpenOptions, Metadata};\n use io;\n use path::Path;"}, {"sha": "b8c3f1e7b358268e23e8b476f26460f8a832233e", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n use io::prelude::*;\n use os::windows::prelude::*;\n "}, {"sha": "a9e9b0e25207748c883f09660484f593ee2b5ff3", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use io::ErrorKind;\n use io;\n use libc::funcs::extra::kernel32::{GetCurrentProcess, DuplicateHandle};"}, {"sha": "02c5bc1f0ab14a0cc8fd0d07f739b724621b78dc", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use io;\n use libc::consts::os::extra::INVALID_SOCKET;\n use libc::{self, c_int, c_void};"}, {"sha": "7e286b91f4a7fd48eb1eea342e339020e679da1e", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use io;\n use libc;\n use sys::cvt;"}, {"sha": "3e81ebfcedfb9954db6e51149bec588fcdd6ea62", "filename": "src/libstd/sys/windows/rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n use sys::c;\n "}, {"sha": "cf1b3ebddb97b60d902c82dd592ef2dcb701b0e5", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -81,9 +81,6 @@ impl Thread {\n }\n \n pub mod guard {\n-    #[cfg(stage0)]\n-    use prelude::v1::*;\n-\n     pub unsafe fn current() -> Option<usize> { None }\n     pub unsafe fn init() -> Option<usize> { None }\n }"}, {"sha": "3bf170b5fe2185be9cff8ee33d74471290c32b8b", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -12,9 +12,6 @@\n \n #![unstable(feature = \"thread_local_internals\")]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n \n // Sure wish we had macro hygiene, no?\n@@ -272,9 +269,6 @@ impl<T: 'static> LocalKey<T> {\n           not(no_elf_tls)))]\n #[doc(hidden)]\n mod imp {\n-    #[cfg(stage0)]\n-    use prelude::v1::*;\n-\n     use cell::{Cell, UnsafeCell};\n     use intrinsics;\n     use ptr;"}, {"sha": "303ab0f9f01347f39a9e0c729a0b0afa07d14da7", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -42,9 +42,6 @@\n \n #![unstable(feature = \"thread_local_internals\")]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n #[doc(hidden)]\n pub use self::imp::KeyInner as __KeyInner;\n \n@@ -250,9 +247,6 @@ mod imp {\n           no_elf_tls))]\n #[doc(hidden)]\n mod imp {\n-    #[cfg(stage0)]\n-    use prelude::v1::*;\n-\n     use cell::Cell;\n     use marker;\n     use sys_common::thread_local::StaticKey as OsStaticKey;\n@@ -280,8 +274,6 @@ mod imp {\n #[cfg(test)]\n mod tests {\n     use cell::Cell;\n-    #[cfg(stage0)]\n-    use prelude::v1::*;\n \n     scoped_thread_local!(static FOO: u32);\n "}, {"sha": "ba9c3157b0275832e25ec5d211bcb85309d7b36d", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use ops::{Add, Sub, Mul, Div};\n use sys::time::SteadyTime;\n "}, {"sha": "bcc90dc47d9dfde480323161bfd60ed518c59a52", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -941,7 +941,7 @@ pub enum Expr_ {\n     /// `Foo {x: 1, .. base}`, where `base` is the `Option<Expr>`.\n     ExprStruct(Path, Vec<Field>, Option<P<Expr>>),\n \n-    /// A vector literal constructed from one repeated element.\n+    /// An array literal constructed from one repeated element.\n     ///\n     /// For example, `[1u8; 5]`. The first expression is the element\n     /// to be repeated; the second is the number of times to repeat it."}, {"sha": "6c3bee3f48ed9c90fe71abd9a3fd236f9c950e90", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -115,7 +115,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n         }\n \n         // URLs can be unavoidably longer than the line limit, so we allow them.\n-        // Allowed format is: `[name]: http://rust-lang.org/`\n+        // Allowed format is: `[name]: https://www.rust-lang.org/`\n         let is_url = |l: &str| l.starts_with('[') && l.contains(\"]:\") && l.contains(\"http\");\n \n         if msg.lines().any(|line| line.len() > MAX_DESCRIPTION_WIDTH && !is_url(line)) {"}, {"sha": "94c920406c4e447ece9c07f0432404a259702fcb", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -21,9 +21,9 @@\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(associated_consts)]\n #![feature(bitset)]"}, {"sha": "e6242690ac0d097a5c9d1adb9fb1be18a18ecf4f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -2075,7 +2075,7 @@ impl<'a> Parser<'a> {\n                     // Nonempty vector.\n                     let first_expr = try!(self.parse_expr_nopanic());\n                     if self.check(&token::Semi) {\n-                        // Repeating vector syntax: [ 0; 512 ]\n+                        // Repeating array syntax: [ 0; 512 ]\n                         try!(self.bump());\n                         let count = try!(self.parse_expr_nopanic());\n                         try!(self.expect(&token::CloseDelim(token::Bracket)));\n@@ -3260,7 +3260,7 @@ impl<'a> Parser<'a> {\n             pat = PatTup(fields);\n           }\n           token::OpenDelim(token::Bracket) => {\n-            // Parse [pat,pat,...] as vector pattern\n+            // Parse [pat,pat,...] as slice pattern\n             try!(self.bump());\n             let (before, slice, after) = try!(self.parse_pat_vec_elements());\n             try!(self.expect(&token::CloseDelim(token::Bracket)));"}, {"sha": "69f0d186ed0be444d1ebcd298525cfaf6e1e7618", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -49,10 +49,10 @@\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\")]\n #![deny(missing_docs)]\n \n #![feature(box_syntax)]"}, {"sha": "54c0cbc67be4b648d2a0dcee6667277d4a1eafab", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -30,9 +30,9 @@\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(asm)]\n #![feature(box_syntax)]"}, {"sha": "6a54ed322de0ae3c4bd17a800fc5aa6f81125cbf", "filename": "src/rt/empty.c", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81c9ff24fe6d53eb51d9427302ec842da49b9edc/src%2Frt%2Fempty.c", "raw_url": "https://github.com/rust-lang/rust/raw/81c9ff24fe6d53eb51d9427302ec842da49b9edc/src%2Frt%2Fempty.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fempty.c?ref=81c9ff24fe6d53eb51d9427302ec842da49b9edc", "patch": "@@ -1,9 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms."}, {"sha": "a1f4539443d9b6ab80ad74e85d579bb99197c4c8", "filename": "src/rustbook/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Frustbook%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Frustbook%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbuild.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -143,7 +143,7 @@ fn render(book: &Book, tgt: &Path) -> CliResult<()> {\n             format!(\"-o{}\", out_path.display()),\n             format!(\"--html-before-content={}\", prelude.display()),\n             format!(\"--html-after-content={}\", postlude.display()),\n-            format!(\"--markdown-playground-url=http://play.rust-lang.org\"),\n+            format!(\"--markdown-playground-url=https://play.rust-lang.org\"),\n             format!(\"--markdown-css={}\", item.path_to_root.join(\"rust-book.css\").display()),\n             \"--markdown-no-toc\".to_string(),\n         ];"}, {"sha": "704c1b0b835b1ec470b523f31a10da293bc77141", "filename": "src/snapshots.txt", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -1,3 +1,14 @@\n+S 2015-08-11 1af31d4\n+  bitrig-x86_64 0000000000000000000000000000000000000000\n+  freebsd-i386 0000000000000000000000000000000000000000\n+  freebsd-x86_64 0000000000000000000000000000000000000000\n+  linux-i386 e2553bf399cd134a08ef3511a0a6ab0d7a667216\n+  linux-x86_64 7df8ba9dec63ec77b857066109d4b6250f3d222f\n+  macos-i386 29750870c82a0347f8b8b735a4e2e0da26f5098d\n+  macos-x86_64 c9f2c588238b4c6998190c3abeb33fd6164099a2\n+  winnt-i386 dc01ac690efdcc40eb6fd8154205a1f21893eb6c\n+  winnt-x86_64 1464a2e54768498222277f904ccd559e27608950\n+\n S 2015-07-26 a5c12f4\n   bitrig-x86_64 8734eb41ffbe6ddc1120aa2910db4162ec9cf270\n   freebsd-i386 2fee22adec101e2f952a5548fd1437ce1bd8d26f"}, {"sha": "963a007c6855a0990a75aeb0ebaa1a0ec3a44f42", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -87,16 +87,12 @@ static HOMO_SAPIENS: [AminoAcid;4] = [\n     AminoAcid { c: 't' as u8, p: 0.3015094502008 },\n ];\n \n-// FIXME: Use map().\n fn sum_and_scale(a: &'static [AminoAcid]) -> Vec<AminoAcid> {\n-    let mut result = Vec::new();\n     let mut p = 0f32;\n-    for a_i in a {\n-        let mut a_i = *a_i;\n+    let mut result: Vec<AminoAcid> = a.iter().map(|a_i| {\n         p += a_i.p;\n-        a_i.p = p * LOOKUP_SCALE;\n-        result.push(a_i);\n-    }\n+        AminoAcid { c: a_i.c, p: p * LOOKUP_SCALE }\n+    }).collect();\n     let result_len = result.len();\n     result[result_len - 1].p = LOOKUP_SCALE;\n     result\n@@ -177,17 +173,17 @@ impl<'a, W: Write> RandomFasta<'a, W> {\n \n     fn rng(&mut self, max: f32) -> f32 {\n         self.seed = (self.seed * IA + IC) % IM;\n-        max * (self.seed as f32) / (IM as f32)\n+        (max * self.seed as f32) / (IM as f32)\n     }\n \n     fn nextc(&mut self) -> u8 {\n-        let r = self.rng(1.0);\n-        for a in &self.lookup[..] {\n-            if a.p >= r {\n-                return a.c;\n+        let r = self.rng(LOOKUP_SCALE);\n+        for i in (r as usize..LOOKUP_SIZE) {\n+            if self.lookup[i].p >= r {\n+                return self.lookup[i].c;\n             }\n         }\n-        0\n+        unreachable!();\n     }\n \n     fn make(&mut self, n: usize) -> io::Result<()> {\n@@ -217,7 +213,8 @@ fn main() {\n         5\n     };\n \n-    let mut out = io::stdout();\n+    let stdout = io::stdout();\n+    let mut out = stdout.lock();\n \n     out.write_all(b\">ONE Homo sapiens alu\\n\").unwrap();\n     {"}, {"sha": "4a3338c4bf6c8521c331362b0f5cbf8c5b016a6e", "filename": "src/test/compile-fail/loops-reject-duplicate-labels-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels-2.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -16,7 +16,7 @@\n //\n // This is testing the generalization (to the whole function body)\n // discussed here:\n-// http://internals.rust-lang.org/t/psa-rejecting-duplicate-loop-labels/1833\n+// https://internals.rust-lang.org/t/psa-rejecting-duplicate-loop-labels/1833\n \n pub fn foo() {\n     { 'fl: for _ in 0..10 { break; } }   //~ NOTE shadowed label `'fl` declared here"}, {"sha": "f889e381dc46e17e6a644bef275cf0e72b0e3e7d", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,7 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-g\n+// We disable tail merging here because it can't preserve debuginfo and thus\n+// potentially breaks the backtraces. Also, subtle changes can decide whether\n+// tail merging suceeds, so the test might work today but fail tomorrow due to a\n+// seemingly completely unrelated change.\n+// Unfortunately, LLVM has no \"disable\" option for this, so we have to set\n+// \"enable\" to 0 instead.\n+// compile-flags:-g -Cllvm-args=-enable-tail-merge=0\n // ignore-pretty as this critically relies on line numbers\n \n use std::io;\n@@ -97,6 +103,10 @@ fn inner_inlined(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n     let inner_pos = pos!(); aux::callback_inlined(|aux_pos| {\n         check!(counter; main_pos, outer_pos, inner_pos, aux_pos);\n     });\n+\n+    // this tests a distinction between two independent calls to the inlined function.\n+    // (un)fortunately, LLVM somehow merges two consecutive such calls into one node.\n+    inner_further_inlined(counter, main_pos, outer_pos, pos!());\n }\n \n #[inline(never)]"}, {"sha": "58d7c1df19c13babfbac085258699c2b0ba66ebb", "filename": "src/test/run-pass/cleanup-arm-conditional.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,16 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// copyright 2014 the rust project developers. see the copyright\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/copyright.\n-//\n-// licensed under the apache license, version 2.0 <license-apache or\n-// http://www.apache.org/licenses/license-2.0> or the mit license\n-// <license-mit or http://opensource.org/licenses/mit>, at your\n-// option. this file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Test that cleanup scope for temporaries created in a match\n // arm is confined to the match arm itself.\n "}, {"sha": "6744d7d413d5c9c29f9619d0abd5e23771762e1d", "filename": "src/test/run-pass/cleanup-shortcircuit.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5948d5bf08f27bf443356549a25b39d40c159d/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs?ref=8b5948d5bf08f27bf443356549a25b39d40c159d", "patch": "@@ -8,16 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// copyright 2014 the rust project developers. see the copyright\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/copyright.\n-//\n-// licensed under the apache license, version 2.0 <license-apache or\n-// http://www.apache.org/licenses/license-2.0> or the mit license\n-// <license-mit or http://opensource.org/licenses/mit>, at your\n-// option. this file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Test that cleanups for the RHS of shortcircuiting operators work.\n \n // pretty-expanded FIXME #23616"}]}