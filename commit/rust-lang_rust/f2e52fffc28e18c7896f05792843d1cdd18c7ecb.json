{"sha": "f2e52fffc28e18c7896f05792843d1cdd18c7ecb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZTUyZmZmYzI4ZTE4Yzc4OTZmMDU3OTI4NDNkMWNkZDE4YzdlY2I=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-03-29T23:52:59Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-03-29T23:52:59Z"}, "message": "2229: Produce a rustfix migration suggestion", "tree": {"sha": "dd76d3897df3dddc78f5bdff528be61c3f4ce823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd76d3897df3dddc78f5bdff528be61c3f4ce823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2e52fffc28e18c7896f05792843d1cdd18c7ecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2e52fffc28e18c7896f05792843d1cdd18c7ecb", "html_url": "https://github.com/rust-lang/rust/commit/f2e52fffc28e18c7896f05792843d1cdd18c7ecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2e52fffc28e18c7896f05792843d1cdd18c7ecb/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4103089f40a163f6d143f06359cba7043da29b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4103089f40a163f6d143f06359cba7043da29b", "html_url": "https://github.com/rust-lang/rust/commit/cc4103089f40a163f6d143f06359cba7043da29b"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "fd4186e8025710cedaf4c807d34b12ed512841b3", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f2e52fffc28e18c7896f05792843d1cdd18c7ecb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e52fffc28e18c7896f05792843d1cdd18c7ecb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=f2e52fffc28e18c7896f05792843d1cdd18c7ecb", "patch": "@@ -34,6 +34,7 @@ use super::FnCtxt;\n \n use crate::expr_use_visitor as euv;\n use rustc_data_structures::fx::FxIndexMap;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::def_id::LocalDefId;\n@@ -91,7 +92,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n         if let hir::ExprKind::Closure(cc, _, body_id, _, _) = expr.kind {\n             let body = self.fcx.tcx.hir().body(body_id);\n             self.visit_body(body);\n-            self.fcx.analyze_closure(expr.hir_id, expr.span, body, cc);\n+            self.fcx.analyze_closure(expr.hir_id, expr.span, body_id, body, cc);\n         }\n \n         intravisit::walk_expr(self, expr);\n@@ -104,6 +105,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         closure_hir_id: hir::HirId,\n         span: Span,\n+        body_id: hir::BodyId,\n         body: &'tcx hir::Body<'tcx>,\n         capture_clause: hir::CaptureBy,\n     ) {\n@@ -167,7 +169,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let closure_hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n         if should_do_migration_analysis(self.tcx, closure_hir_id) {\n-            self.perform_2229_migration_anaysis(closure_def_id, capture_clause, span);\n+            self.perform_2229_migration_anaysis(closure_def_id, body_id, capture_clause, span);\n         }\n \n         // We now fake capture information for all variables that are mentioned within the closure\n@@ -465,6 +467,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn perform_2229_migration_anaysis(\n         &self,\n         closure_def_id: DefId,\n+        body_id: hir::BodyId,\n         capture_clause: hir::CaptureBy,\n         span: Span,\n     ) {\n@@ -488,7 +491,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let mut diagnostics_builder = lint.build(\n                         \"drop order affected for closure because of `capture_disjoint_fields`\",\n                     );\n-                    diagnostics_builder.note(&migrations_text);\n+                    let closure_body_span = self.tcx.hir().span(body_id.hir_id);\n+                    let (sugg, app) =\n+                        match self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n+                            Ok(s) => (\n+                                format!(\"{{ {} {} }}\", migrations_text, s),\n+                                Applicability::MachineApplicable,\n+                            ),\n+                            Err(_) => (migrations_text.clone(), Applicability::HasPlaceholders),\n+                        };\n+\n+                    diagnostics_builder.span_suggestion(\n+                        closure_body_span,\n+                        &format!(\"You can restore original behavior adding `{}` to the closure/generator\", migrations_text),\n+                        sugg,\n+                        app,\n+                    );\n                     diagnostics_builder.emit();\n                 },\n             );\n@@ -1517,10 +1535,14 @@ fn should_do_migration_analysis(tcx: TyCtxt<'_>, closure_id: hir::HirId) -> bool\n \n fn migration_suggestion_for_2229(tcx: TyCtxt<'_>, need_migrations: &Vec<hir::HirId>) -> String {\n     let need_migrations_strings =\n-        need_migrations.iter().map(|v| format!(\"{}\", var_name(tcx, *v))).collect::<Vec<_>>();\n+        need_migrations.iter().map(|v| format!(\"&{}\", var_name(tcx, *v))).collect::<Vec<_>>();\n     let migrations_list_concat = need_migrations_strings.join(\", \");\n \n-    format!(\"drop(&({}));\", migrations_list_concat)\n+    if 1 == need_migrations.len() {\n+        format!(\"let _ = {};\", migrations_list_concat)\n+    } else {\n+        format!(\"let _ = ({});\", migrations_list_concat)\n+    }\n }\n \n /// Helper function to determine if we need to escalate CaptureKind from"}]}