{"sha": "a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "node_id": "C_kwDOAAsO6NoAKGE5MDUxZDg2MWNhMTNhMWMxNmRhM2NkNDI0OGIyNmQ4NmNmNWUxZDU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-18T19:44:27Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-08T03:36:30Z"}, "message": "Tweak borrow suggestion", "tree": {"sha": "7fe6eb692e34d808afc4392d1ed73fab56ad0528", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fe6eb692e34d808afc4392d1ed73fab56ad0528"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "html_url": "https://github.com/rust-lang/rust/commit/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad6b20bf5225c65aab30169c9a173719f5bdfc04", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6b20bf5225c65aab30169c9a173719f5bdfc04", "html_url": "https://github.com/rust-lang/rust/commit/ad6b20bf5225c65aab30169c9a173719f5bdfc04"}], "stats": {"total": 499, "additions": 288, "deletions": 211}, "files": [{"sha": "b8de22272ddb873e072b15e6eaec0ba56e5ae010", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 42, "deletions": 39, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -1334,52 +1334,55 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ));\n                     }\n \n-                    if let Ok(src) = sm.span_to_snippet(sugg_sp) {\n-                        let needs_parens = match expr.kind {\n-                            // parenthesize if needed (Issue #46756)\n-                            hir::ExprKind::Cast(_, _) | hir::ExprKind::Binary(_, _, _) => true,\n-                            // parenthesize borrows of range literals (Issue #54505)\n-                            _ if is_range_literal(expr) => true,\n-                            _ => false,\n-                        };\n-\n-                        if let Some(sugg) = self.can_use_as_ref(expr) {\n-                            return Some((\n-                                sugg.0,\n-                                sugg.1.to_string(),\n-                                sugg.2,\n-                                Applicability::MachineApplicable,\n-                                false,\n-                                false,\n-                            ));\n-                        }\n-\n-                        let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n-                            Some(ident) => format!(\"{ident}: \"),\n-                            None => String::new(),\n-                        };\n-\n-                        if let Some(hir::Node::Expr(hir::Expr {\n-                            kind: hir::ExprKind::Assign(..),\n-                            ..\n-                        })) = self.tcx.hir().find_parent(expr.hir_id)\n-                        {\n-                            if mutability.is_mut() {\n-                                // Suppressing this diagnostic, we'll properly print it in `check_expr_assign`\n-                                return None;\n-                            }\n-                        }\n+                    let needs_parens = match expr.kind {\n+                        // parenthesize if needed (Issue #46756)\n+                        hir::ExprKind::Cast(_, _) | hir::ExprKind::Binary(_, _, _) => true,\n+                        // parenthesize borrows of range literals (Issue #54505)\n+                        _ if is_range_literal(expr) => true,\n+                        _ => false,\n+                    };\n \n-                        let sugg_expr = if needs_parens { format!(\"({src})\") } else { src };\n+                    if let Some(sugg) = self.can_use_as_ref(expr) {\n                         return Some((\n-                            sp,\n-                            format!(\"consider {}borrowing here\", mutability.mutably_str()),\n-                            format!(\"{prefix}{}{sugg_expr}\", mutability.ref_prefix_str()),\n+                            sugg.0,\n+                            sugg.1.to_string(),\n+                            sugg.2,\n                             Applicability::MachineApplicable,\n                             false,\n                             false,\n                         ));\n                     }\n+\n+                    let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n+                        Some(ident) => format!(\"{ident}: \"),\n+                        None => String::new(),\n+                    };\n+\n+                    if let Some(hir::Node::Expr(hir::Expr {\n+                        kind: hir::ExprKind::Assign(..),\n+                        ..\n+                    })) = self.tcx.hir().find_parent(expr.hir_id)\n+                    {\n+                        if mutability.is_mut() {\n+                            // Suppressing this diagnostic, we'll properly print it in `check_expr_assign`\n+                            return None;\n+                        }\n+                    }\n+\n+                    let (sp, sugg_expr, verbose) = if needs_parens {\n+                        let src = sm.span_to_snippet(sugg_sp).ok()?;\n+                        (sp, format!(\"({src})\"), false)\n+                    } else {\n+                        (sp.shrink_to_lo(), \"\".to_string(), true)\n+                    };\n+                    return Some((\n+                        sp,\n+                        format!(\"consider {}borrowing here\", mutability.mutably_str()),\n+                        format!(\"{prefix}{}{sugg_expr}\", mutability.ref_prefix_str()),\n+                        Applicability::MachineApplicable,\n+                        verbose,\n+                        false,\n+                    ));\n                 }\n             }\n             ("}, {"sha": "082564fbc7f889bd6f9273d29faca5dcbc53ff60", "filename": "tests/ui/argument-suggestions/issue-97484.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -16,7 +16,7 @@ LL | fn foo(a: &A, d: D, e: &E, g: G) {}\n help: consider borrowing here\n    |\n LL |     foo(&&A, B, C, D, &E, F, G);\n-   |                       ~~\n+   |                       +\n help: remove the extra arguments\n    |\n LL -     foo(&&A, B, C, D, E, F, G);"}, {"sha": "cd84505680514abe4cffb3ea97267d0a4b655304", "filename": "tests/ui/async-await/issues/issue-102206.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -2,14 +2,16 @@ error[E0308]: mismatched types\n   --> $DIR/issue-102206.rs:6:27\n    |\n LL |     std::mem::size_of_val(foo());\n-   |     --------------------- ^^^^^\n-   |     |                     |\n-   |     |                     expected `&_`, found future\n-   |     |                     help: consider borrowing here: `&foo()`\n+   |     --------------------- ^^^^^ expected `&_`, found future\n+   |     |\n    |     arguments to this function are incorrect\n    |\n note: function defined here\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+help: consider borrowing here\n+   |\n+LL |     std::mem::size_of_val(&foo());\n+   |                           +\n \n error: aborting due to previous error\n "}, {"sha": "17bbca7a0bdb6d385b703f22a6feced6f82248fb", "filename": "tests/ui/coercion/coercion-slice.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoercion-slice.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -2,11 +2,14 @@ error[E0308]: mismatched types\n   --> $DIR/coercion-slice.rs:4:21\n    |\n LL |     let _: &[i32] = [0];\n-   |            ------   ^^^\n-   |            |        |\n-   |            |        expected `&[i32]`, found `[{integer}; 1]`\n-   |            |        help: consider borrowing here: `&[0]`\n+   |            ------   ^^^ expected `&[i32]`, found `[{integer}; 1]`\n+   |            |\n    |            expected due to this\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let _: &[i32] = &[0];\n+   |                     +\n \n error: aborting due to previous error\n "}, {"sha": "c58aab42269887895e02c6ff918b88b4ea70f8cd", "filename": "tests/ui/inference/deref-suggestion.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Finference%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Finference%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fderef-suggestion.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -98,19 +98,23 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:40:17\n    |\n LL |     let s = S { u };\n-   |                 ^\n-   |                 |\n-   |                 expected `&u32`, found integer\n-   |                 help: consider borrowing here: `u: &u`\n+   |                 ^ expected `&u32`, found integer\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let s = S { u: &u };\n+   |                 ++++\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:42:20\n    |\n LL |     let s = S { u: u };\n-   |                    ^\n-   |                    |\n-   |                    expected `&u32`, found integer\n-   |                    help: consider borrowing here: `&u`\n+   |                    ^ expected `&u32`, found integer\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let s = S { u: &u };\n+   |                    +\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:45:17"}, {"sha": "879dc5b76c59975fc88ccd73589396509255e6b8", "filename": "tests/ui/issues/issue-11374.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fissues%2Fissue-11374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fissues%2Fissue-11374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-11374.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -2,10 +2,8 @@ error[E0308]: mismatched types\n   --> $DIR/issue-11374.rs:26:15\n    |\n LL |     c.read_to(v);\n-   |       ------- ^\n-   |       |       |\n-   |       |       expected `&mut [u8]`, found `Vec<_>`\n-   |       |       help: consider mutably borrowing here: `&mut v`\n+   |       ------- ^ expected `&mut [u8]`, found `Vec<_>`\n+   |       |\n    |       arguments to this method are incorrect\n    |\n    = note: expected mutable reference `&mut [u8]`\n@@ -15,6 +13,10 @@ note: method defined here\n    |\n LL |     pub fn read_to(&mut self, vec: &mut [u8]) {\n    |            ^^^^^^^            --------------\n+help: consider mutably borrowing here\n+   |\n+LL |     c.read_to(&mut v);\n+   |               ++++\n \n error: aborting due to previous error\n "}, {"sha": "3419c0798595e2e92805bd81fa04e3f6fcee2b72", "filename": "tests/ui/issues/issue-17033.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fissues%2Fissue-17033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fissues%2Fissue-17033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-17033.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -2,11 +2,14 @@ error[E0308]: mismatched types\n   --> $DIR/issue-17033.rs:2:10\n    |\n LL |     (*p)(())\n-   |     ---- ^^\n-   |     |    |\n-   |     |    expected `&mut ()`, found `()`\n-   |     |    help: consider mutably borrowing here: `&mut ()`\n+   |     ---- ^^ expected `&mut ()`, found `()`\n+   |     |\n    |     arguments to this function are incorrect\n+   |\n+help: consider mutably borrowing here\n+   |\n+LL |     (*p)(&mut ())\n+   |          ++++\n \n error: aborting due to previous error\n "}, {"sha": "40098f9622fa99c8c9ef97c3879b8370e6f09331", "filename": "tests/ui/issues/issue-18819.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fissues%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fissues%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-18819.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -19,7 +19,7 @@ LL | fn print_x(_: &dyn Foo<Item=bool>, extra: &str) {\n help: consider borrowing here\n    |\n LL |     print_x(&X);\n-   |             ~~\n+   |             +\n help: provide the argument\n    |\n LL |     print_x(/* &dyn Foo<Item = bool> */, /* &str */);"}, {"sha": "6e126038cc95c074923d3cebdbc97960e6e6da53", "filename": "tests/ui/issues/issue-46302.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fissues%2Fissue-46302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fissues%2Fissue-46302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-46302.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -2,10 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/issue-46302.rs:3:27\n    |\n LL |   let u: &str = if true { s[..2] } else { s };\n-   |                           ^^^^^^\n-   |                           |\n-   |                           expected `&str`, found `str`\n-   |                           help: consider borrowing here: `&s[..2]`\n+   |                           ^^^^^^ expected `&str`, found `str`\n+   |\n+help: consider borrowing here\n+   |\n+LL |   let u: &str = if true { &s[..2] } else { s };\n+   |                           +\n \n error: aborting due to previous error\n "}, {"sha": "aa922e2682d8347e1992b6debd4ec0f4bbf8c26a", "filename": "tests/ui/issues/issue-61106.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fissues%2Fissue-61106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fissues%2Fissue-61106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-61106.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -2,17 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/issue-61106.rs:3:9\n    |\n LL |     foo(x.clone());\n-   |     --- ^^^^^^^^^\n-   |     |   |\n-   |     |   expected `&str`, found `String`\n-   |     |   help: consider borrowing here: `&x`\n+   |     --- ^^^^^^^^^ expected `&str`, found `String`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n note: function defined here\n   --> $DIR/issue-61106.rs:6:4\n    |\n LL | fn foo(_: &str) {}\n    |    ^^^ -------\n+help: consider borrowing here\n+   |\n+LL |     foo(&x.clone());\n+   |         +\n \n error: aborting due to previous error\n "}, {"sha": "dcc21acc5c0f484121d571828854e37031628942", "filename": "tests/ui/methods/method-self-arg-1.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -2,17 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/method-self-arg-1.rs:11:14\n    |\n LL |     Foo::bar(x);\n-   |     -------- ^\n-   |     |        |\n-   |     |        expected `&Foo`, found `Foo`\n-   |     |        help: consider borrowing here: `&x`\n+   |     -------- ^ expected `&Foo`, found `Foo`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n note: method defined here\n   --> $DIR/method-self-arg-1.rs:6:8\n    |\n LL |     fn bar(&self) {}\n    |        ^^^ -----\n+help: consider borrowing here\n+   |\n+LL |     Foo::bar(&x);\n+   |              +\n \n error[E0308]: mismatched types\n   --> $DIR/method-self-arg-1.rs:13:14"}, {"sha": "7be94ef4ad66386138abcea42c766088c97fff1c", "filename": "tests/ui/mismatched_types/dont-point-return-on-E0308.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -2,17 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/dont-point-return-on-E0308.rs:11:11\n    |\n LL |         f(());\n-   |         - ^^\n-   |         | |\n-   |         | expected `&()`, found `()`\n-   |         | help: consider borrowing here: `&()`\n+   |         - ^^ expected `&()`, found `()`\n+   |         |\n    |         arguments to this function are incorrect\n    |\n note: function defined here\n   --> $DIR/dont-point-return-on-E0308.rs:3:10\n    |\n LL | async fn f(_: &()) {}\n    |          ^ ------\n+help: consider borrowing here\n+   |\n+LL |         f(&());\n+   |           +\n \n error: aborting due to previous error\n "}, {"sha": "8a3076db9b233978f4f7d13a9fd39b5ecac890f0", "filename": "tests/ui/mut/mut-cross-borrowing.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fmut%2Fmut-cross-borrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fmut%2Fmut-cross-borrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut%2Fmut-cross-borrowing.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -2,10 +2,8 @@ error[E0308]: mismatched types\n   --> $DIR/mut-cross-borrowing.rs:7:7\n    |\n LL |     f(x)\n-   |     - ^\n-   |     | |\n-   |     | expected `&mut isize`, found `Box<{integer}>`\n-   |     | help: consider mutably borrowing here: `&mut x`\n+   |     - ^ expected `&mut isize`, found `Box<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected mutable reference `&mut isize`\n@@ -15,6 +13,10 @@ note: function defined here\n    |\n LL | fn f(_: &mut isize) {}\n    |    ^ -------------\n+help: consider mutably borrowing here\n+   |\n+LL |     f(&mut x)\n+   |       ++++\n \n error: aborting due to previous error\n "}, {"sha": "71c36c741cc5eab2e0b02335a6190d98397bf69f", "filename": "tests/ui/range/issue-54505-no-literals.fixed", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Frange%2Fissue-54505-no-literals.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Frange%2Fissue-54505-no-literals.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505-no-literals.fixed?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -16,60 +16,60 @@ fn main() {\n     take_range(&std::ops::Range { start: 0, end: 1 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &std::ops::Range { start: 0, end: 1 }\n+    //~| SUGGESTION &\n \n     take_range(&::std::ops::Range { start: 0, end: 1 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &::std::ops::Range { start: 0, end: 1 }\n+    //~| SUGGESTION &\n \n     take_range(&std::ops::RangeFrom { start: 1 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &std::ops::RangeFrom { start: 1 }\n+    //~| SUGGESTION &\n \n     take_range(&::std::ops::RangeFrom { start: 1 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &::std::ops::RangeFrom { start: 1 }\n+    //~| SUGGESTION &\n \n     take_range(&std::ops::RangeFull {});\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &std::ops::RangeFull {}\n+    //~| SUGGESTION &\n \n     take_range(&::std::ops::RangeFull {});\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &::std::ops::RangeFull {}\n+    //~| SUGGESTION &\n \n     take_range(&std::ops::RangeInclusive::new(0, 1));\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &std::ops::RangeInclusive::new(0, 1)\n+    //~| SUGGESTION &\n \n     take_range(&::std::ops::RangeInclusive::new(0, 1));\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &::std::ops::RangeInclusive::new(0, 1)\n+    //~| SUGGESTION &\n \n     take_range(&std::ops::RangeTo { end: 5 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &std::ops::RangeTo { end: 5 }\n+    //~| SUGGESTION &\n \n     take_range(&::std::ops::RangeTo { end: 5 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &::std::ops::RangeTo { end: 5 }\n+    //~| SUGGESTION &\n \n     take_range(&std::ops::RangeToInclusive { end: 5 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &std::ops::RangeToInclusive { end: 5 }\n+    //~| SUGGESTION &\n \n     take_range(&::std::ops::RangeToInclusive { end: 5 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &::std::ops::RangeToInclusive { end: 5 }\n+    //~| SUGGESTION &\n }"}, {"sha": "db125d1a22b6de78ed296ddabe321a7bf518fa09", "filename": "tests/ui/range/issue-54505-no-literals.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Frange%2Fissue-54505-no-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Frange%2Fissue-54505-no-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505-no-literals.rs?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -16,60 +16,60 @@ fn main() {\n     take_range(std::ops::Range { start: 0, end: 1 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &std::ops::Range { start: 0, end: 1 }\n+    //~| SUGGESTION &\n \n     take_range(::std::ops::Range { start: 0, end: 1 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &::std::ops::Range { start: 0, end: 1 }\n+    //~| SUGGESTION &\n \n     take_range(std::ops::RangeFrom { start: 1 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &std::ops::RangeFrom { start: 1 }\n+    //~| SUGGESTION &\n \n     take_range(::std::ops::RangeFrom { start: 1 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &::std::ops::RangeFrom { start: 1 }\n+    //~| SUGGESTION &\n \n     take_range(std::ops::RangeFull {});\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &std::ops::RangeFull {}\n+    //~| SUGGESTION &\n \n     take_range(::std::ops::RangeFull {});\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &::std::ops::RangeFull {}\n+    //~| SUGGESTION &\n \n     take_range(std::ops::RangeInclusive::new(0, 1));\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &std::ops::RangeInclusive::new(0, 1)\n+    //~| SUGGESTION &\n \n     take_range(::std::ops::RangeInclusive::new(0, 1));\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &::std::ops::RangeInclusive::new(0, 1)\n+    //~| SUGGESTION &\n \n     take_range(std::ops::RangeTo { end: 5 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &std::ops::RangeTo { end: 5 }\n+    //~| SUGGESTION &\n \n     take_range(::std::ops::RangeTo { end: 5 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &::std::ops::RangeTo { end: 5 }\n+    //~| SUGGESTION &\n \n     take_range(std::ops::RangeToInclusive { end: 5 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &std::ops::RangeToInclusive { end: 5 }\n+    //~| SUGGESTION &\n \n     take_range(::std::ops::RangeToInclusive { end: 5 });\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &::std::ops::RangeToInclusive { end: 5 }\n+    //~| SUGGESTION &\n }"}, {"sha": "5894bb6ba553fab6856a4d35d3fad240573401af", "filename": "tests/ui/range/issue-54505-no-literals.stderr", "status": "modified", "additions": 72, "deletions": 48, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505-no-literals.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -2,10 +2,8 @@ error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:16:16\n    |\n LL |     take_range(std::ops::Range { start: 0, end: 1 });\n-   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `Range<{integer}>`\n-   |     |          help: consider borrowing here: `&std::ops::Range { start: 0, end: 1 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `Range<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -15,15 +13,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&std::ops::Range { start: 0, end: 1 });\n+   |                +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:21:16\n    |\n LL |     take_range(::std::ops::Range { start: 0, end: 1 });\n-   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `Range<{integer}>`\n-   |     |          help: consider borrowing here: `&::std::ops::Range { start: 0, end: 1 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `Range<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -33,15 +33,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&::std::ops::Range { start: 0, end: 1 });\n+   |                +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:26:16\n    |\n LL |     take_range(std::ops::RangeFrom { start: 1 });\n-   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeFrom<{integer}>`\n-   |     |          help: consider borrowing here: `&std::ops::RangeFrom { start: 1 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `RangeFrom<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -51,15 +53,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&std::ops::RangeFrom { start: 1 });\n+   |                +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:31:16\n    |\n LL |     take_range(::std::ops::RangeFrom { start: 1 });\n-   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeFrom<{integer}>`\n-   |     |          help: consider borrowing here: `&::std::ops::RangeFrom { start: 1 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `RangeFrom<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -69,15 +73,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&::std::ops::RangeFrom { start: 1 });\n+   |                +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:36:16\n    |\n LL |     take_range(std::ops::RangeFull {});\n-   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeFull`\n-   |     |          help: consider borrowing here: `&std::ops::RangeFull {}`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `RangeFull`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -87,15 +93,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&std::ops::RangeFull {});\n+   |                +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:41:16\n    |\n LL |     take_range(::std::ops::RangeFull {});\n-   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeFull`\n-   |     |          help: consider borrowing here: `&::std::ops::RangeFull {}`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `RangeFull`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -105,15 +113,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&::std::ops::RangeFull {});\n+   |                +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:46:16\n    |\n LL |     take_range(std::ops::RangeInclusive::new(0, 1));\n-   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeInclusive<{integer}>`\n-   |     |          help: consider borrowing here: `&std::ops::RangeInclusive::new(0, 1)`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `RangeInclusive<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -123,15 +133,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&std::ops::RangeInclusive::new(0, 1));\n+   |                +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:51:16\n    |\n LL |     take_range(::std::ops::RangeInclusive::new(0, 1));\n-   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeInclusive<{integer}>`\n-   |     |          help: consider borrowing here: `&::std::ops::RangeInclusive::new(0, 1)`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `RangeInclusive<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -141,15 +153,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&::std::ops::RangeInclusive::new(0, 1));\n+   |                +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:56:16\n    |\n LL |     take_range(std::ops::RangeTo { end: 5 });\n-   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeTo<{integer}>`\n-   |     |          help: consider borrowing here: `&std::ops::RangeTo { end: 5 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `RangeTo<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -159,15 +173,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&std::ops::RangeTo { end: 5 });\n+   |                +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:61:16\n    |\n LL |     take_range(::std::ops::RangeTo { end: 5 });\n-   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeTo<{integer}>`\n-   |     |          help: consider borrowing here: `&::std::ops::RangeTo { end: 5 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `RangeTo<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -177,15 +193,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&::std::ops::RangeTo { end: 5 });\n+   |                +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:66:16\n    |\n LL |     take_range(std::ops::RangeToInclusive { end: 5 });\n-   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeToInclusive<{integer}>`\n-   |     |          help: consider borrowing here: `&std::ops::RangeToInclusive { end: 5 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `RangeToInclusive<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -195,15 +213,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&std::ops::RangeToInclusive { end: 5 });\n+   |                +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:71:16\n    |\n LL |     take_range(::std::ops::RangeToInclusive { end: 5 });\n-   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeToInclusive<{integer}>`\n-   |     |          help: consider borrowing here: `&::std::ops::RangeToInclusive { end: 5 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `RangeToInclusive<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -213,6 +233,10 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&::std::ops::RangeToInclusive { end: 5 });\n+   |                +\n \n error: aborting due to 12 previous errors\n "}, {"sha": "ff840b781f0721c6f32ebf8875acdf6932ca5b90", "filename": "tests/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -10,11 +10,14 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:9:19\n    |\n LL |     let x: &str = String::new();\n-   |            ----   ^^^^^^^^^^^^^\n-   |            |      |\n-   |            |      expected `&str`, found `String`\n-   |            |      help: consider borrowing here: `&String::new()`\n+   |            ----   ^^^^^^^^^^^^^ expected `&str`, found `String`\n+   |            |\n    |            expected due to this\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let x: &str = &String::new();\n+   |                   +\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:12:10"}, {"sha": "c8c4a5139880d8e2ccd16816787914f680e3c9cf", "filename": "tests/ui/span/issue-39018.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-39018.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -78,10 +78,12 @@ error[E0308]: mismatched types\n   --> $DIR/issue-39018.rs:29:17\n    |\n LL |     let _ = a + b;\n-   |                 ^\n-   |                 |\n-   |                 expected `&str`, found `String`\n-   |                 help: consider borrowing here: `&b`\n+   |                 ^ expected `&str`, found `String`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let _ = a + &b;\n+   |                 +\n \n error[E0369]: cannot add `String` to `&String`\n   --> $DIR/issue-39018.rs:30:15"}, {"sha": "515cb9e12f858c4fedd9d35e3ce9e0b26802dc73", "filename": "tests/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -10,10 +10,12 @@ error[E0308]: mismatched types\n   --> $DIR/str-array-assignment.rs:5:27\n    |\n LL |   let u: &str = if true { s[..2] } else { s };\n-   |                           ^^^^^^\n-   |                           |\n-   |                           expected `&str`, found `str`\n-   |                           help: consider borrowing here: `&s[..2]`\n+   |                           ^^^^^^ expected `&str`, found `str`\n+   |\n+help: consider borrowing here\n+   |\n+LL |   let u: &str = if true { &s[..2] } else { s };\n+   |                           +\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/str-array-assignment.rs:7:7\n@@ -33,11 +35,14 @@ error[E0308]: mismatched types\n   --> $DIR/str-array-assignment.rs:9:17\n    |\n LL |   let w: &str = s[..2];\n-   |          ----   ^^^^^^\n-   |          |      |\n-   |          |      expected `&str`, found `str`\n-   |          |      help: consider borrowing here: `&s[..2]`\n+   |          ----   ^^^^^^ expected `&str`, found `str`\n+   |          |\n    |          expected due to this\n+   |\n+help: consider borrowing here\n+   |\n+LL |   let w: &str = &s[..2];\n+   |                 +\n \n error: aborting due to 4 previous errors\n "}, {"sha": "730f5fa1b5e3de5455c4b092d78cc2eed0b15bd5", "filename": "tests/ui/suggestions/suggest-ref-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fsuggestions%2Fsuggest-ref-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fsuggestions%2Fsuggest-ref-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-ref-macro.rs?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -14,7 +14,7 @@ macro_rules! bla {\n     () => {\n         x(123);\n         //~^ ERROR mismatched types\n-        //~| SUGGESTION &mut 123\n+        //~| SUGGESTION &mut\n     };\n     ($v:expr) => {\n         x($v)\n@@ -25,5 +25,5 @@ fn main() {\n     bla!();\n     bla!(456);\n     //~^ ERROR mismatched types\n-    //~| SUGGESTION &mut 456\n+    //~| SUGGESTION &mut\n }"}, {"sha": "08bc9e86a50f87534a026522e2c1818457cfaf04", "filename": "tests/ui/suggestions/suggest-ref-macro.stderr", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -18,10 +18,8 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-ref-macro.rs:15:11\n    |\n LL |         x(123);\n-   |         - ^^^\n-   |         | |\n-   |         | expected `&mut i32`, found integer\n-   |         | help: consider mutably borrowing here: `&mut 123`\n+   |         - ^^^ expected `&mut i32`, found integer\n+   |         |\n    |         arguments to this function are incorrect\n ...\n LL |     bla!();\n@@ -33,6 +31,10 @@ note: function defined here\n LL | fn x(_: &mut i32) {}\n    |    ^ -----------\n    = note: this error originates in the macro `bla` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider mutably borrowing here\n+   |\n+LL |         x(&mut 123);\n+   |           ++++\n \n error[E0308]: mismatched types\n   --> $DIR/suggest-ref-macro.rs:26:10\n@@ -41,16 +43,17 @@ LL |         x($v)\n    |         - arguments to this function are incorrect\n ...\n LL |     bla!(456);\n-   |          ^^^\n-   |          |\n-   |          expected `&mut i32`, found integer\n-   |          help: consider mutably borrowing here: `&mut 456`\n+   |          ^^^ expected `&mut i32`, found integer\n    |\n note: function defined here\n   --> $DIR/suggest-ref-macro.rs:11:4\n    |\n LL | fn x(_: &mut i32) {}\n    |    ^ -----------\n+help: consider mutably borrowing here\n+   |\n+LL |     bla!(&mut 456);\n+   |          ++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ce6f29d354fd16c32fc8662bce88e67043e801a4", "filename": "tests/ui/type/type-mismatch.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Ftype%2Ftype-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Ftype%2Ftype-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-mismatch.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -378,10 +378,8 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:47:23\n    |\n LL |     want::<&Foo<foo>>(f);\n-   |     ----------------- ^\n-   |     |                 |\n-   |     |                 expected `&Foo<foo>`, found `Foo<foo>`\n-   |     |                 help: consider borrowing here: `&f`\n+   |     ----------------- ^ expected `&Foo<foo>`, found `Foo<foo>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&Foo<foo>`\n@@ -391,6 +389,10 @@ note: function defined here\n    |\n LL | fn want<T>(t: T) {}\n    |    ^^^^    ----\n+help: consider borrowing here\n+   |\n+LL |     want::<&Foo<foo>>(&f);\n+   |                       +\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:48:26\n@@ -556,10 +558,8 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:61:26\n    |\n LL |     want::<&Foo<foo, B>>(f);\n-   |     -------------------- ^\n-   |     |                    |\n-   |     |                    expected `&Foo<foo, B>`, found `Foo<foo, B>`\n-   |     |                    help: consider borrowing here: `&f`\n+   |     -------------------- ^ expected `&Foo<foo, B>`, found `Foo<foo, B>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&Foo<foo, B>`\n@@ -569,6 +569,10 @@ note: function defined here\n    |\n LL | fn want<T>(t: T) {}\n    |    ^^^^    ----\n+help: consider borrowing here\n+   |\n+LL |     want::<&Foo<foo, B>>(&f);\n+   |                          +\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:65:19"}, {"sha": "f9cdb280e276a320071154514c5fa89f6d2a9ac0", "filename": "tests/ui/typeck/bad-index-due-to-nested.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -42,27 +42,29 @@ error[E0308]: mismatched types\n LL | fn index<'a, K, V>(map: &'a HashMap<K, V>, k: K) -> &'a V {\n    |              - this type parameter\n LL |     map[k]\n-   |         ^\n-   |         |\n-   |         expected `&K`, found type parameter `K`\n-   |         help: consider borrowing here: `&k`\n+   |         ^ expected `&K`, found type parameter `K`\n    |\n    = note:   expected reference `&K`\n            found type parameter `K`\n+help: consider borrowing here\n+   |\n+LL |     map[&k]\n+   |         +\n \n error[E0308]: mismatched types\n   --> $DIR/bad-index-due-to-nested.rs:20:5\n    |\n LL | fn index<'a, K, V>(map: &'a HashMap<K, V>, k: K) -> &'a V {\n    |                 - this type parameter               ----- expected `&'a V` because of return type\n LL |     map[k]\n-   |     ^^^^^^\n-   |     |\n-   |     expected `&V`, found type parameter `V`\n-   |     help: consider borrowing here: `&map[k]`\n+   |     ^^^^^^ expected `&V`, found type parameter `V`\n    |\n    = note:   expected reference `&'a V`\n            found type parameter `V`\n+help: consider borrowing here\n+   |\n+LL |     &map[k]\n+   |     +\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b9b3a5fe5ec8f086c033a2389e1c2179fa0ddd1c", "filename": "tests/ui/typeck/bad-type-in-vec-contains.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Ftypeck%2Fbad-type-in-vec-contains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Ftypeck%2Fbad-type-in-vec-contains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-type-in-vec-contains.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -2,16 +2,18 @@ error[E0308]: mismatched types\n   --> $DIR/bad-type-in-vec-contains.rs:5:21\n    |\n LL |     primes.contains(3);\n-   |            -------- ^\n-   |            |        |\n-   |            |        expected `&_`, found integer\n-   |            |        help: consider borrowing here: `&3`\n+   |            -------- ^ expected `&_`, found integer\n+   |            |\n    |            arguments to this method are incorrect\n    |\n    = note: expected reference `&_`\n                    found type `{integer}`\n note: method defined here\n   --> $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+help: consider borrowing here\n+   |\n+LL |     primes.contains(&3);\n+   |                     +\n \n error: aborting due to previous error\n "}, {"sha": "8ecb8b680160b6e880c4c031ea50449d6bb079d9", "filename": "tests/ui/typeck/issue-13853.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Ftypeck%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Ftypeck%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-13853.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -20,10 +20,8 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13853.rs:37:13\n    |\n LL |     iterate(graph);\n-   |     ------- ^^^^^\n-   |     |       |\n-   |     |       expected `&_`, found `Vec<Stuff>`\n-   |     |       help: consider borrowing here: `&graph`\n+   |     ------- ^^^^^ expected `&_`, found `Vec<Stuff>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -33,6 +31,10 @@ note: function defined here\n    |\n LL | fn iterate<N: Node, G: Graph<N>>(graph: &G) {\n    |    ^^^^^^^                       ---------\n+help: consider borrowing here\n+   |\n+LL |     iterate(&graph);\n+   |             +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8741b35cdcff8bf786c64fc3c38fd87c0f02dc79", "filename": "tests/ui/unsized-locals/suggest-borrow.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Funsized-locals%2Fsuggest-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5/tests%2Fui%2Funsized-locals%2Fsuggest-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Fsuggest-borrow.stderr?ref=a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "patch": "@@ -16,11 +16,14 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-borrow.rs:3:20\n    |\n LL |     let x: &[u8] = vec!(1, 2, 3)[..];\n-   |            -----   ^^^^^^^^^^^^^^^^^\n-   |            |       |\n-   |            |       expected `&[u8]`, found `[{integer}]`\n-   |            |       help: consider borrowing here: `&vec!(1, 2, 3)[..]`\n+   |            -----   ^^^^^^^^^^^^^^^^^ expected `&[u8]`, found `[{integer}]`\n+   |            |\n    |            expected due to this\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let x: &[u8] = &vec!(1, 2, 3)[..];\n+   |                    +\n \n error[E0308]: mismatched types\n   --> $DIR/suggest-borrow.rs:4:19"}]}