{"sha": "243944c6535867f2d4e3bc44f4a8b0e300dc83b9", "node_id": "C_kwDOAAsO6NoAKDI0Mzk0NGM2NTM1ODY3ZjJkNGUzYmM0NGY0YThiMGUzMDBkYzgzYjk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-07T05:59:50Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-09T05:14:51Z"}, "message": "Remove `QueryContext`.\n\nThere is a type `QueryCtxt`, which impls the trait `QueryContext`.\nConfusingly, there is another type `QueryContext`. The latter is (like\n`TyCtxt`) just a pointer to a `GlobalContext`. It's not used much, e.g.\nits `impl` block has a single method.\n\nThis commit removes `QueryContext`, replacing its use with direct\n`GlobalCtxt` use.", "tree": {"sha": "4f2e8ec178049f4ebec7f03338783ca103dc7074", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f2e8ec178049f4ebec7f03338783ca103dc7074"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/243944c6535867f2d4e3bc44f4a8b0e300dc83b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/243944c6535867f2d4e3bc44f4a8b0e300dc83b9", "html_url": "https://github.com/rust-lang/rust/commit/243944c6535867f2d4e3bc44f4a8b0e300dc83b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/243944c6535867f2d4e3bc44f4a8b0e300dc83b9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf", "html_url": "https://github.com/rust-lang/rust/commit/afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "33ebbb411ceb6824716e3c443e77f22021a27d98", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/243944c6535867f2d4e3bc44f4a8b0e300dc83b9/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243944c6535867f2d4e3bc44f4a8b0e300dc83b9/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=243944c6535867f2d4e3bc44f4a8b0e300dc83b9", "patch": "@@ -738,30 +738,16 @@ pub static DEFAULT_EXTERN_QUERY_PROVIDERS: LazyLock<ExternProviders> = LazyLock:\n     extern_providers\n });\n \n-pub struct QueryContext<'tcx> {\n-    gcx: &'tcx GlobalCtxt<'tcx>,\n-}\n-\n-impl<'tcx> QueryContext<'tcx> {\n-    pub fn enter<F, R>(&mut self, f: F) -> R\n-    where\n-        F: FnOnce(TyCtxt<'tcx>) -> R,\n-    {\n-        let icx = ty::tls::ImplicitCtxt::new(self.gcx);\n-        ty::tls::enter_context(&icx, || f(icx.tcx))\n-    }\n-}\n-\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<LintStore>,\n     dep_graph: DepGraph,\n     untracked: Untracked,\n     queries: &'tcx OnceCell<TcxQueries<'tcx>>,\n-    global_ctxt: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n+    gcx_cell: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n     hir_arena: &'tcx WorkerLocal<rustc_hir::Arena<'tcx>>,\n-) -> QueryContext<'tcx> {\n+) -> &'tcx GlobalCtxt<'tcx> {\n     // We're constructing the HIR here; we don't care what we will\n     // read, since we haven't even constructed the *input* to\n     // incr. comp. yet.\n@@ -785,8 +771,8 @@ pub fn create_global_ctxt<'tcx>(\n         TcxQueries::new(local_providers, extern_providers, query_result_on_disk_cache)\n     });\n \n-    let gcx = sess.time(\"setup_global_ctxt\", || {\n-        global_ctxt.get_or_init(move || {\n+    sess.time(\"setup_global_ctxt\", || {\n+        gcx_cell.get_or_init(move || {\n             TyCtxt::create_global_ctxt(\n                 sess,\n                 lint_store,\n@@ -799,9 +785,7 @@ pub fn create_global_ctxt<'tcx>(\n                 rustc_query_impl::query_callbacks(arena),\n             )\n         })\n-    });\n-\n-    QueryContext { gcx }\n+    })\n }\n \n /// Runs the resolution, type-checking, region checking and other"}, {"sha": "6512695873ef90e88b74306fbc009cf8da24b9ec", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/243944c6535867f2d4e3bc44f4a8b0e300dc83b9/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243944c6535867f2d4e3bc44f4a8b0e300dc83b9/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=243944c6535867f2d4e3bc44f4a8b0e300dc83b9", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::{FailedWritingFile, RustcErrorFatal, RustcErrorUnexpectedAnnotation};\n use crate::interface::{Compiler, Result};\n-use crate::passes::{self, BoxedResolver, QueryContext};\n+use crate::passes::{self, BoxedResolver};\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n@@ -64,7 +64,7 @@ impl<'a, T> std::ops::DerefMut for QueryResult<'a, T> {\n     }\n }\n \n-impl<'a, 'tcx> QueryResult<'a, QueryContext<'tcx>> {\n+impl<'a, 'tcx> QueryResult<'a, &'tcx GlobalCtxt<'tcx>> {\n     pub fn enter<T>(&mut self, f: impl FnOnce(TyCtxt<'tcx>) -> T) -> T {\n         (*self.0).get_mut().enter(f)\n     }\n@@ -78,7 +78,7 @@ impl<T> Default for Query<T> {\n \n pub struct Queries<'tcx> {\n     compiler: &'tcx Compiler,\n-    gcx: OnceCell<GlobalCtxt<'tcx>>,\n+    gcx_cell: OnceCell<GlobalCtxt<'tcx>>,\n     queries: OnceCell<TcxQueries<'tcx>>,\n \n     arena: WorkerLocal<Arena<'tcx>>,\n@@ -90,15 +90,16 @@ pub struct Queries<'tcx> {\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    global_ctxt: Query<QueryContext<'tcx>>,\n+    // This just points to what's in `gcx_cell`.\n+    gcx: Query<&'tcx GlobalCtxt<'tcx>>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n }\n \n impl<'tcx> Queries<'tcx> {\n     pub fn new(compiler: &'tcx Compiler) -> Queries<'tcx> {\n         Queries {\n             compiler,\n-            gcx: OnceCell::new(),\n+            gcx_cell: OnceCell::new(),\n             queries: OnceCell::new(),\n             arena: WorkerLocal::new(|_| Arena::default()),\n             hir_arena: WorkerLocal::new(|_| rustc_hir::Arena::default()),\n@@ -108,7 +109,7 @@ impl<'tcx> Queries<'tcx> {\n             register_plugins: Default::default(),\n             expansion: Default::default(),\n             dep_graph: Default::default(),\n-            global_ctxt: Default::default(),\n+            gcx: Default::default(),\n             ongoing_codegen: Default::default(),\n         }\n     }\n@@ -207,8 +208,8 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn global_ctxt(&'tcx self) -> Result<QueryResult<'_, QueryContext<'tcx>>> {\n-        self.global_ctxt.compute(|| {\n+    pub fn global_ctxt(&'tcx self) -> Result<QueryResult<'_, &'tcx GlobalCtxt<'tcx>>> {\n+        self.gcx.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n             let (krate, resolver, lint_store) = self.expansion()?.steal();\n \n@@ -218,18 +219,18 @@ impl<'tcx> Queries<'tcx> {\n                 ast_lowering: untracked_resolver_for_lowering,\n             } = BoxedResolver::to_resolver_outputs(resolver);\n \n-            let mut qcx = passes::create_global_ctxt(\n+            let gcx = passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store,\n                 self.dep_graph()?.steal(),\n                 untracked,\n                 &self.queries,\n-                &self.gcx,\n+                &self.gcx_cell,\n                 &self.arena,\n                 &self.hir_arena,\n             );\n \n-            qcx.enter(|tcx| {\n+            gcx.enter(|tcx| {\n                 let feed = tcx.feed_unit_query();\n                 feed.resolver_for_lowering(\n                     tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n@@ -239,7 +240,7 @@ impl<'tcx> Queries<'tcx> {\n                 let feed = tcx.feed_local_crate();\n                 feed.crate_name(crate_name);\n             });\n-            Ok(qcx)\n+            Ok(gcx)\n         })\n     }\n \n@@ -387,7 +388,7 @@ impl Compiler {\n \n         // NOTE: intentionally does not compute the global context if it hasn't been built yet,\n         // since that likely means there was a parse error.\n-        if let Some(Ok(gcx)) = &mut *queries.global_ctxt.result.borrow_mut() {\n+        if let Some(Ok(gcx)) = &mut *queries.gcx.result.borrow_mut() {\n             let gcx = gcx.get_mut();\n             // We assume that no queries are run past here. If there are new queries\n             // after this point, they'll show up as \"<unknown>\" in self-profiling data."}, {"sha": "d07d9190e011e43da6fc57b5656b6510bbb56780", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/243944c6535867f2d4e3bc44f4a8b0e300dc83b9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243944c6535867f2d4e3bc44f4a8b0e300dc83b9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=243944c6535867f2d4e3bc44f4a8b0e300dc83b9", "patch": "@@ -468,6 +468,18 @@ pub struct GlobalCtxt<'tcx> {\n     pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,\n }\n \n+impl<'tcx> GlobalCtxt<'tcx> {\n+    /// Installs `self` in a `TyCtxt` and `ImplicitCtxt` for the duration of\n+    /// `f`.\n+    pub fn enter<'a: 'tcx, F, R>(&'a self, f: F) -> R\n+    where\n+        F: FnOnce(TyCtxt<'tcx>) -> R,\n+    {\n+        let icx = tls::ImplicitCtxt::new(self);\n+        tls::enter_context(&icx, || f(icx.tcx))\n+    }\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     /// Expects a body and returns its codegen attributes.\n     ///"}, {"sha": "90d6388b70cd8d5493799219dd15191e37bacdaf", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/243944c6535867f2d4e3bc44f4a8b0e300dc83b9/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243944c6535867f2d4e3bc44f4a8b0e300dc83b9/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=243944c6535867f2d4e3bc44f4a8b0e300dc83b9", "patch": "@@ -814,9 +814,9 @@ fn main_args(at_args: &[String]) -> MainResult {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }\n \n-            let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess);\n+            let mut gcx = abort_on_err(queries.global_ctxt(), sess);\n \n-            global_ctxt.enter(|tcx| {\n+            gcx.enter(|tcx| {\n                 let (krate, render_opts, mut cache) = sess.time(\"run_global_ctxt\", || {\n                     core::run_global_ctxt(\n                         tcx,"}]}