{"sha": "effc2e9772685b3530efe604bf40a9f8649de860", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZmMyZTk3NzI2ODViMzUzMGVmZTYwNGJmNDBhOWY4NjQ5ZGU4NjA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-06-30T22:47:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-07-01T20:30:06Z"}, "message": "Release notes for 1.10.0", "tree": {"sha": "987b5b44929fe102c692ea53ae4da443b3873f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/987b5b44929fe102c692ea53ae4da443b3873f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/effc2e9772685b3530efe604bf40a9f8649de860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/effc2e9772685b3530efe604bf40a9f8649de860", "html_url": "https://github.com/rust-lang/rust/commit/effc2e9772685b3530efe604bf40a9f8649de860", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/effc2e9772685b3530efe604bf40a9f8649de860/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2b56fb7a0c24e04227318ca7e5950e9289ee3e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b56fb7a0c24e04227318ca7e5950e9289ee3e4", "html_url": "https://github.com/rust-lang/rust/commit/c2b56fb7a0c24e04227318ca7e5950e9289ee3e4"}], "stats": {"total": 312, "additions": 312, "deletions": 0}, "files": [{"sha": "ffe8d64ff2da4c71b64338b88b460a5946f63b05", "filename": "RELEASES.md", "status": "modified", "additions": 312, "deletions": 0, "changes": 312, "blob_url": "https://github.com/rust-lang/rust/blob/effc2e9772685b3530efe604bf40a9f8649de860/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/effc2e9772685b3530efe604bf40a9f8649de860/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=effc2e9772685b3530efe604bf40a9f8649de860", "patch": "@@ -1,3 +1,315 @@\n+Version 1.10.0 (2016-07-07)\n+===========================\n+\n+Language\n+--------\n+\n+* [Allow `concat_idents!` in type positions as well as in expression\n+  positions]\n+  (https://github.com/rust-lang/rust/pull/33735).\n+* [`Copy` types are required to have a trivial implementation of `Clone`]\n+  (https://github.com/rust-lang/rust/pull/33420).\n+  [RFC 1521](https://github.com/rust-lang/rfcs/blob/master/text/1521-copy-clone-semantics.md).\n+* [Single-variant enums support the `#[repr(..)]` attribute]\n+  (https://github.com/rust-lang/rust/pull/33355).\n+* [Fix `#[derive(RustcEncodable)]` in the presence of other `encode` methods]\n+  (https://github.com/rust-lang/rust/pull/32908).\n+* [`panic!` can be converted to a runtime abort with the\n+  `-C panic=abort` flag]\n+  (https://github.com/rust-lang/rust/pull/32900).\n+  [RFC 1513](https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md).\n+* [Add a new crate type, 'cdylib']\n+  (https://github.com/rust-lang/rust/pull/33553).\n+  cdylibs are dynamic libraries suitable for loading by non-Rust hosts.\n+  [RFC 1510](https://github.com/rust-lang/rfcs/blob/master/text/1510-rdylib.md).\n+  Note that Cargo does not yet directly support cdylibs.\n+\n+Stabilized APIs\n+---------------\n+\n+* `os::windows::fs::OpenOptionsExt::access_mode`\n+* `os::windows::fs::OpenOptionsExt::share_mode`\n+* `os::windows::fs::OpenOptionsExt::custom_flags`\n+* `os::windows::fs::OpenOptionsExt::attributes`\n+* `os::windows::fs::OpenOptionsExt::security_qos_flags`\n+* `os::unix::fs::OpenOptionsExt::custom_flags`\n+* [`sync::Weak::new`]\n+  (http://doc.rust-lang.org/alloc/arc/struct.Weak.html#method.new)\n+* `Default for sync::Weak`\n+* [`panic::set_hook`]\n+  (http://doc.rust-lang.org/std/panic/fn.set_hook.html)\n+* [`panic::take_hook`]\n+  (http://doc.rust-lang.org/std/panic/fn.take_hook.html)\n+* [`panic::PanicInfo`]\n+  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html)\n+* [`panic::PanicInfo::payload`]\n+  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.payload)\n+* [`panic::PanicInfo::location`]\n+  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.location)\n+* [`panic::Location`]\n+  (http://doc.rust-lang.org/std/panic/struct.Location.html)\n+* [`panic::Location::file`]\n+  (http://doc.rust-lang.org/std/panic/struct.Location.html#method.file)\n+* [`panic::Location::line`]\n+  (http://doc.rust-lang.org/std/panic/struct.Location.html#method.line)\n+* [`ffi::CStr::from_bytes_with_nul`]\n+  (http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul)\n+* [`ffi::CStr::from_bytes_with_nul_unchecked`]\n+  (http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked)\n+* [`ffi::FromBytesWithNulError`]\n+  (http://doc.rust-lang.org/std/ffi/struct.FromBytesWithNulError.html)\n+* [`fs::Metadata::modified`]\n+  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified)\n+* [`fs::Metadata::accessed`]\n+  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.accessed)\n+* [`fs::Metadata::created`]\n+  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.created)\n+* `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange`\n+* `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange_weak`\n+* `collections::{btree,hash}_map::{Occupied,Vacant,}Entry::key`\n+* `os::unix::net::{UnixStream, UnixListener, UnixDatagram, SocketAddr}`\n+* [`SocketAddr::is_unnamed`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.is_unnamed)\n+* [`SocketAddr::as_pathname`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.as_pathname)\n+* [`UnixStream::connect`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.connect)\n+* [`UnixStream::pair`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.pair)\n+* [`UnixStream::try_clone`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.try_clone)\n+* [`UnixStream::local_addr`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.local_addr)\n+* [`UnixStream::peer_addr`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.peer_addr)\n+* [`UnixStream::set_read_timeout`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n+* [`UnixStream::set_write_timeout`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n+* [`UnixStream::read_timeout`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n+* [`UnixStream::write_timeout`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n+* [`UnixStream::set_nonblocking`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.set_nonblocking)\n+* [`UnixStream::take_error`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.take_error)\n+* [`UnixStream::shutdown`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.shutdown)\n+* Read/Write/RawFd impls for `UnixStream`\n+* [`UnixListener::bind`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.bind)\n+* [`UnixListener::accept`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.accept)\n+* [`UnixListener::try_clone`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.try_clone)\n+* [`UnixListener::local_addr`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.local_addr)\n+* [`UnixListener::set_nonblocking`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.set_nonblocking)\n+* [`UnixListener::take_error`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.take_error)\n+* [`UnixListener::incoming`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.incoming)\n+* RawFd impls for `UnixListener`\n+* [`UnixDatagram::bind`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.bind)\n+* [`UnixDatagram::unbound`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.unbound)\n+* [`UnixDatagram::pair`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.pair)\n+* [`UnixDatagram::connect`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.connect)\n+* [`UnixDatagram::try_clone`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.try_clone)\n+* [`UnixDatagram::local_addr`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.local_addr)\n+* [`UnixDatagram::peer_addr`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.peer_addr)\n+* [`UnixDatagram::recv_from`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv_from)\n+* [`UnixDatagram::recv`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv)\n+* [`UnixDatagram::send_to`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send_to)\n+* [`UnixDatagram::send`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send)\n+* [`UnixDatagram::set_read_timeout`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_read_timeout)\n+* [`UnixDatagram::set_write_timeout`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_write_timeout)\n+* [`UnixDatagram::read_timeout`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.read_timeout)\n+* [`UnixDatagram::write_timeout`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.write_timeout)\n+* [`UnixDatagram::set_nonblocking`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_nonblocking)\n+* [`UnixDatagram::take_error`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.take_error)\n+* [`UnixDatagram::shutdown`]\n+  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.shutdown)\n+* RawFd impls for `UnixDatagram`\n+* `{BTree,Hash}Map::values_mut`\n+* [`<[_]>::binary_search_by_key`]\n+  (http://doc.rust-lang.org/beta/std/primitive.slice.html#method.binary_search_by_key)\n+\n+Libraries\n+---------\n+\n+* [The `abs_sub` method of floats is deprecated]\n+  (https://github.com/rust-lang/rust/pull/33664).\n+  The semantics of this minor method are subtle and probably not what\n+  most people want.\n+* [Add implementation of Ord for Cell<T> and RefCell<T> where T: Ord]\n+  (https://github.com/rust-lang/rust/pull/33306).\n+* [On Linux, if `HashMap`s can't be initialized with `getrandom` they\n+  will fall back to `/dev/urandom` temporarily to avoid blocking\n+  during early boot]\n+  (https://github.com/rust-lang/rust/pull/33086).\n+* [Implemented negation for wrapping numerals]\n+  (https://github.com/rust-lang/rust/pull/33067).\n+* [Implement `Clone` for `binary_heap::IntoIter`]\n+  (https://github.com/rust-lang/rust/pull/33050).\n+* [Implement `Display` and `Hash` for `std::num::Wrapping`]\n+  (https://github.com/rust-lang/rust/pull/33023).\n+* [Add `Default` implementation for `&CStr`, `CString`, `Path`]\n+  (https://github.com/rust-lang/rust/pull/32990).\n+* [Implement `From<Vec<T>>` and `Into<Vec<T>>` for `VecDeque<T>`]\n+  (https://github.com/rust-lang/rust/pull/32866).\n+* [Implement `Default` for `UnsafeCell`, `fmt::Error`, `Condvar`,\n+  `Mutex`, `RwLock`]\n+  (https://github.com/rust-lang/rust/pull/32785).\n+\n+Cargo\n+-----\n+* [Cargo.toml supports the `profile.*.panic` option]\n+  (https://github.com/rust-lang/cargo/pull/2687).\n+  This controls the runtime behavior of the `panic!` macro\n+  and can be either \"unwind\" (the default), or \"abort\".\n+  [RFC 1513](https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md).\n+* [Don't throw away errors with `-p` arguments]\n+  (https://github.com/rust-lang/cargo/pull/2723).\n+* [Report status to stderr instead of stdout]\n+  (https://github.com/rust-lang/cargo/pull/2693).\n+* [Build scripts are passed a `CARGO_MANIFEST_LINKS` environment\n+  variable that corresponds to the `links` field of the manifest]\n+  (https://github.com/rust-lang/cargo/pull/2710).\n+* [Ban keywords from crate names]\n+  (https://github.com/rust-lang/cargo/pull/2707).\n+* [Canonicalize `CARGO_HOME` on Windows]\n+  (https://github.com/rust-lang/cargo/pull/2604).\n+* [Retry network requests]\n+  (https://github.com/rust-lang/cargo/pull/2396).\n+  By default they are retried twice, which can be customized with the\n+  `net.retry` value in `.cargo/config`.\n+* [Don't print extra error info for failing subcommands]\n+  (https://github.com/rust-lang/cargo/pull/2674).\n+* [Add `--force` flag to `cargo install`]\n+  (https://github.com/rust-lang/cargo/pull/2405).\n+* [Don't use `flock` on NFS mounts]\n+  (https://github.com/rust-lang/cargo/pull/2623).\n+* [Prefer building `cargo install` artifacts in temporary directories]\n+  (https://github.com/rust-lang/cargo/pull/2610).\n+  Makes it possible to install multiple crates in parallel.\n+* [Add `cargo test --doc`]\n+  (https://github.com/rust-lang/cargo/pull/2578).\n+* [Add `cargo --explain`]\n+  (https://github.com/rust-lang/cargo/pull/2551).\n+* [Don't print warnings when `-q` is passed]\n+  (https://github.com/rust-lang/cargo/pull/2576).\n+* [Add `cargo doc --lib` and `--bin`]\n+  (https://github.com/rust-lang/cargo/pull/2577).\n+* [Don't require build script output to be UTF-8]\n+  (https://github.com/rust-lang/cargo/pull/2560).\n+* [Correctly attempt multiple git usernames]\n+  (https://github.com/rust-lang/cargo/pull/2584).\n+\n+Performance\n+-----------\n+\n+* [rustc memory usage was reduced by refactoring the context used for\n+  type checking]\n+  (https://github.com/rust-lang/rust/pull/33425).\n+* [Speed up creation of `HashMap`s by caching the random keys used\n+  to initialize the hash state]\n+  (https://github.com/rust-lang/rust/pull/33318).\n+* [The `find` implementation for `Chain` iterators is 2x faster]\n+  (https://github.com/rust-lang/rust/pull/33289).\n+* [Trait selection optimizations speed up type checking by 15%]\n+  (https://github.com/rust-lang/rust/pull/33138).\n+* [Efficient trie lookup for boolean Unicode properties]\n+  (https://github.com/rust-lang/rust/pull/33098).\n+  10x faster than the previous lookup tables.\n+* [Special case `#[derive(Copy, Clone)]` to avoid bloat]\n+  (https://github.com/rust-lang/rust/pull/31414).\n+\n+Usability\n+---------\n+\n+* Many incremental improvements to documentation and rustdoc.\n+* [rustdoc: List blanket trait impls]\n+  (https://github.com/rust-lang/rust/pull/33514).\n+* [rustdoc: Clean up ABI rendering]\n+  (https://github.com/rust-lang/rust/pull/33151).\n+* [Indexing with the wrong type produces a more informative error]\n+  (https://github.com/rust-lang/rust/pull/33401).\n+* [Improve diagnostics for constants being used in irrefutable patterns]\n+  (https://github.com/rust-lang/rust/pull/33406).\n+* [When many method candidates are in scope limit the suggestions to 10]\n+  (https://github.com/rust-lang/rust/pull/33338).\n+* [Remove confusing suggestion when calling a `fn` type]\n+  (https://github.com/rust-lang/rust/pull/33325).\n+* [Do not suggest changing `&mut self` to `&mut mut self`]\n+  (https://github.com/rust-lang/rust/pull/33319).\n+\n+Misc\n+----\n+\n+* [Update i686-linux-android features to match Android ABI]\n+  (https://github.com/rust-lang/rust/pull/33651).\n+* [Update aarch64-linux-android features to match Android ABI]\n+  (https://github.com/rust-lang/rust/pull/33500).\n+* [`std` no longer prints backtraces on platforms where the running\n+  module must be loaded with `env::current_exe`, which can't be relied\n+  on](https://github.com/rust-lang/rust/pull/33554).\n+* This release includes std binaries for the i586-unknown-linux-gnu,\n+  i686-unknown-linux-musl, and armv7-linux-androideabi targets. The\n+  i586 target is for old x86 hardware without SSE2, and the armv7\n+  target is for Android running on modern ARM architectures.\n+* [The `rust-gdb` and `rust-lldb` scripts are distributed on all\n+  Unix platforms](https://github.com/rust-lang/rust/pull/32835).\n+* [On Unix the runtime aborts by calling `libc::abort` instead of\n+  generating an illegal instruction]\n+  (https://github.com/rust-lang/rust/pull/31457).\n+* [Rust is now bootstrapped from the previous release of Rust,\n+  instead of a snapshot from an arbitrary commit]\n+  (https://github.com/rust-lang/rust/pull/32942).\n+\n+Compatibility Notes\n+-------------------\n+\n+* [`AtomicBool` is now bool-sized, not word-sized]\n+  (https://github.com/rust-lang/rust/pull/33579).\n+* [`target_env` for Linux ARM targets is just `gnu`, not\n+  `gnueabihf`, `gnueabi`, etc]\n+  (https://github.com/rust-lang/rust/pull/33403).\n+* [Consistently panic on overflow in `Duration::new`]\n+  (https://github.com/rust-lang/rust/pull/33072).\n+* [Change `String::truncate` to panic less]\n+  (https://github.com/rust-lang/rust/pull/32977).\n+* [Add `:block` to the follow set for `:ty` and `:path`]\n+  (https://github.com/rust-lang/rust/pull/32945).\n+  Affects how macros are parsed.\n+* [Fix macro hygiene bug]\n+  (https://github.com/rust-lang/rust/pull/32923).\n+* [Feature-gated attributes on macro-generated macro invocations are\n+  now rejected]\n+  (https://github.com/rust-lang/rust/pull/32791).\n+* [Suppress fallback and ambiguity errors during type inference]\n+  (https://github.com/rust-lang/rust/pull/32258).\n+  This caused some minor changes to type inference.\n+\n+\n Version 1.9.0 (2016-05-26)\n ==========================\n "}]}