{"sha": "6253213a6e4c9a1d0059d5ed9834e1eb2808d927", "node_id": "C_kwDOAAsO6NoAKDYyNTMyMTNhNmU0YzlhMWQwMDU5ZDVlZDk4MzRlMWViMjgwOGQ5Mjc", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T11:23:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T11:23:52Z"}, "message": "move test", "tree": {"sha": "00ae7d64052854df9f42fba047c5adf1e3168304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00ae7d64052854df9f42fba047c5adf1e3168304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6253213a6e4c9a1d0059d5ed9834e1eb2808d927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6253213a6e4c9a1d0059d5ed9834e1eb2808d927", "html_url": "https://github.com/rust-lang/rust/commit/6253213a6e4c9a1d0059d5ed9834e1eb2808d927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6253213a6e4c9a1d0059d5ed9834e1eb2808d927/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e55797f59d47153651661588e9ff09ffb75c6e67", "url": "https://api.github.com/repos/rust-lang/rust/commits/e55797f59d47153651661588e9ff09ffb75c6e67", "html_url": "https://github.com/rust-lang/rust/commit/e55797f59d47153651661588e9ff09ffb75c6e67"}], "stats": {"total": 84, "additions": 56, "deletions": 28}, "files": [{"sha": "9762570412c34d05775502225880e383513ad00d", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/regression.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6253213a6e4c9a1d0059d5ed9834e1eb2808d927/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6253213a6e4c9a1d0059d5ed9834e1eb2808d927/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs?ref=6253213a6e4c9a1d0059d5ed9834e1eb2808d927", "patch": "@@ -477,3 +477,59 @@ __cfg_if_items! {\n \"##]],\n     );\n }\n+\n+#[test]\n+fn test_proptest_arbitrary() {\n+    // From <https://github.com/AltSysrq/proptest/blob/d1c4b049337d2f75dd6f49a095115f7c532e5129/proptest/src/arbitrary/macros.rs#L16>.\n+    check(\n+        r#\"\n+macro_rules! arbitrary {\n+    ([$($bounds : tt)*] $typ: ty, $strat: ty, $params: ty;\n+        $args: ident => $logic: expr) => {\n+        impl<$($bounds)*> $crate::arbitrary::Arbitrary for $typ {\n+            type Parameters = $params;\n+            type Strategy = $strat;\n+            fn arbitrary_with($args: Self::Parameters) -> Self::Strategy {\n+                $logic\n+            }\n+        }\n+    };\n+}\n+\n+arbitrary!(\n+    [A:Arbitrary]\n+    Vec<A> ,\n+    VecStrategy<A::Strategy>,\n+    RangedParams1<A::Parameters>;\n+    args =>   {\n+        let product_unpack![range, a] = args;\n+        vec(any_with::<A>(a), range)\n+    }\n+);\n+\"#,\n+        expect![[r#\"\n+macro_rules! arbitrary {\n+    ([$($bounds : tt)*] $typ: ty, $strat: ty, $params: ty;\n+        $args: ident => $logic: expr) => {\n+        impl<$($bounds)*> $crate::arbitrary::Arbitrary for $typ {\n+            type Parameters = $params;\n+            type Strategy = $strat;\n+            fn arbitrary_with($args: Self::Parameters) -> Self::Strategy {\n+                $logic\n+            }\n+        }\n+    };\n+}\n+\n+impl <A: Arbitrary> $crate::arbitrary::Arbitrary for Vec<A> {\n+    type Parameters = RangedParams1<A::Parameters>;\n+    type Strategy = VecStrategy<A::Strategy>;\n+    fn arbitrary_with(args: Self::Parameters) -> Self::Strategy { {\n+            let product_unpack![range, a] = args;\n+            vec(any_with::<A>(a), range)\n+        }\n+    }\n+}\n+\"#]],\n+    );\n+}"}, {"sha": "300467306d6b29caf921e1f6ef7d87d4d1d49f61", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6253213a6e4c9a1d0059d5ed9834e1eb2808d927/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6253213a6e4c9a1d0059d5ed9834e1eb2808d927/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=6253213a6e4c9a1d0059d5ed9834e1eb2808d927", "patch": "@@ -98,34 +98,6 @@ fn test_attr_to_token_tree() {\n     );\n }\n \n-#[test]\n-fn test_proptest_arbitrary() {\n-    // from https://github.com/AltSysrq/proptest/blob/d1c4b049337d2f75dd6f49a095115f7c532e5129/proptest/src/arbitrary/macros.rs#L16\n-    parse_macro(\n-        r#\"\n-macro_rules! arbitrary {\n-    ([$($bounds : tt)*] $typ: ty, $strat: ty, $params: ty;\n-        $args: ident => $logic: expr) => {\n-        impl<$($bounds)*> $crate::arbitrary::Arbitrary for $typ {\n-            type Parameters = $params;\n-            type Strategy = $strat;\n-            fn arbitrary_with($args: Self::Parameters) -> Self::Strategy {\n-                $logic\n-            }\n-        }\n-    };\n-\n-}\"#,\n-    ).assert_expand_items(r#\"arbitrary !   ( [ A : Arbitrary ]\n-        Vec < A > ,\n-        VecStrategy < A :: Strategy > ,\n-        RangedParams1 < A :: Parameters > ;\n-        args =>   { let product_unpack !   [ range , a ] = args ; vec ( any_with :: < A >   ( a ) , range ) }\n-    ) ;\"#,\n-    \"impl <A : Arbitrary > $crate :: arbitrary :: Arbitrary for Vec < A > {type Parameters = RangedParams1 < A :: Parameters > ; type Strategy = VecStrategy < A :: Strategy > ; fn arbitrary_with (args : Self :: Parameters) -> Self :: Strategy {{let product_unpack ! [range , a] = args ; vec (any_with :: < A > (a) , range)}}}\"\n-    );\n-}\n-\n #[test]\n fn test_old_ridl() {\n     // This is from winapi 2.8, which do not have a link from github"}]}