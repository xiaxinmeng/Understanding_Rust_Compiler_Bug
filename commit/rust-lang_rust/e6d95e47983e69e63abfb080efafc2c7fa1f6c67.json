{"sha": "e6d95e47983e69e63abfb080efafc2c7fa1f6c67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZDk1ZTQ3OTgzZTY5ZTYzYWJmYjA4MGVmYWZjMmM3ZmExZjZjNjc=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-08-07T05:47:54Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-08-07T05:47:54Z"}, "message": "Implement comparisons generically", "tree": {"sha": "f6c166e4fc28e685c5db8e1349aff6ca9c1edd43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6c166e4fc28e685c5db8e1349aff6ca9c1edd43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6d95e47983e69e63abfb080efafc2c7fa1f6c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d95e47983e69e63abfb080efafc2c7fa1f6c67", "html_url": "https://github.com/rust-lang/rust/commit/e6d95e47983e69e63abfb080efafc2c7fa1f6c67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6d95e47983e69e63abfb080efafc2c7fa1f6c67/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0280539cfee50c02fb5ed87960390d2d68008b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0280539cfee50c02fb5ed87960390d2d68008b", "html_url": "https://github.com/rust-lang/rust/commit/ea0280539cfee50c02fb5ed87960390d2d68008b"}], "stats": {"total": 112, "additions": 42, "deletions": 70}, "files": [{"sha": "c094f680a59d9d1373323f6d2c1fa65c68744a38", "filename": "crates/core_simd/src/comparisons.rs", "status": "modified", "additions": 42, "deletions": 70, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/e6d95e47983e69e63abfb080efafc2c7fa1f6c67/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6d95e47983e69e63abfb080efafc2c7fa1f6c67/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs?ref=e6d95e47983e69e63abfb080efafc2c7fa1f6c67", "patch": "@@ -1,77 +1,49 @@\n-use crate::{LaneCount, SupportedLaneCount};\n-\n-macro_rules! implement_mask_ops {\n-    { $($vector:ident => $mask:ident ($inner_ty:ident),)* } => {\n-        $(\n-            impl<const LANES: usize> crate::$vector<LANES>\n-            where\n-                LaneCount<LANES>: SupportedLaneCount,\n-            {\n-                /// Test if each lane is equal to the corresponding lane in `other`.\n-                #[inline]\n-                pub fn lanes_eq(self, other: Self) -> crate::$mask<LANES> {\n-                    unsafe {\n-                        crate::$mask::from_int_unchecked(crate::intrinsics::simd_eq(self, other))\n-                    }\n-                }\n-\n-                /// Test if each lane is not equal to the corresponding lane in `other`.\n-                #[inline]\n-                pub fn lanes_ne(self, other: Self) -> crate::$mask<LANES> {\n-                    unsafe {\n-                        crate::$mask::from_int_unchecked(crate::intrinsics::simd_ne(self, other))\n-                    }\n-                }\n-\n-                /// Test if each lane is less than the corresponding lane in `other`.\n-                #[inline]\n-                pub fn lanes_lt(self, other: Self) -> crate::$mask<LANES> {\n-                    unsafe {\n-                        crate::$mask::from_int_unchecked(crate::intrinsics::simd_lt(self, other))\n-                    }\n-                }\n-\n-                /// Test if each lane is greater than the corresponding lane in `other`.\n-                #[inline]\n-                pub fn lanes_gt(self, other: Self) -> crate::$mask<LANES> {\n-                    unsafe {\n-                        crate::$mask::from_int_unchecked(crate::intrinsics::simd_gt(self, other))\n-                    }\n-                }\n-\n-                /// Test if each lane is less than or equal to the corresponding lane in `other`.\n-                #[inline]\n-                pub fn lanes_le(self, other: Self) -> crate::$mask<LANES> {\n-                    unsafe {\n-                        crate::$mask::from_int_unchecked(crate::intrinsics::simd_le(self, other))\n-                    }\n-                }\n+use crate::{LaneCount, Mask, Simd, SimdElement, SupportedLaneCount};\n+\n+impl<Element, const LANES: usize> Simd<Element, LANES>\n+where\n+    Element: SimdElement + PartialEq,\n+    LaneCount<LANES>: SupportedLaneCount,\n+{\n+    /// Test if each lane is equal to the corresponding lane in `other`.\n+    #[inline]\n+    pub fn lanes_eq(self, other: Self) -> Mask<Element::Mask, LANES> {\n+        unsafe { Mask::from_int_unchecked(crate::intrinsics::simd_eq(self, other)) }\n+    }\n \n-                /// Test if each lane is greater than or equal to the corresponding lane in `other`.\n-                #[inline]\n-                pub fn lanes_ge(self, other: Self) -> crate::$mask<LANES> {\n-                    unsafe {\n-                        crate::$mask::from_int_unchecked(crate::intrinsics::simd_ge(self, other))\n-                    }\n-                }\n-            }\n-        )*\n+    /// Test if each lane is not equal to the corresponding lane in `other`.\n+    #[inline]\n+    pub fn lanes_ne(self, other: Self) -> Mask<Element::Mask, LANES> {\n+        unsafe { Mask::from_int_unchecked(crate::intrinsics::simd_ne(self, other)) }\n     }\n }\n \n-implement_mask_ops! {\n-    SimdI8 => Mask8 (SimdI8),\n-    SimdI16 => Mask16 (SimdI16),\n-    SimdI32 => Mask32 (SimdI32),\n-    SimdI64 => Mask64 (SimdI64),\n-    SimdIsize => MaskSize (SimdIsize),\n+impl<Element, const LANES: usize> Simd<Element, LANES>\n+where\n+    Element: SimdElement + PartialOrd,\n+    LaneCount<LANES>: SupportedLaneCount,\n+{\n+    /// Test if each lane is less than the corresponding lane in `other`.\n+    #[inline]\n+    pub fn lanes_lt(self, other: Self) -> Mask<Element::Mask, LANES> {\n+        unsafe { Mask::from_int_unchecked(crate::intrinsics::simd_lt(self, other)) }\n+    }\n \n-    SimdU8 => Mask8 (SimdI8),\n-    SimdU16 => Mask16 (SimdI16),\n-    SimdU32 => Mask32 (SimdI32),\n-    SimdU64 => Mask64 (SimdI64),\n-    SimdUsize => MaskSize (SimdIsize),\n+    /// Test if each lane is greater than the corresponding lane in `other`.\n+    #[inline]\n+    pub fn lanes_gt(self, other: Self) -> Mask<Element::Mask, LANES> {\n+        unsafe { Mask::from_int_unchecked(crate::intrinsics::simd_gt(self, other)) }\n+    }\n \n-    SimdF32 => Mask32 (SimdI32),\n-    SimdF64 => Mask64 (SimdI64),\n+    /// Test if each lane is less than or equal to the corresponding lane in `other`.\n+    #[inline]\n+    pub fn lanes_le(self, other: Self) -> Mask<Element::Mask, LANES> {\n+        unsafe { Mask::from_int_unchecked(crate::intrinsics::simd_le(self, other)) }\n+    }\n+\n+    /// Test if each lane is greater than or equal to the corresponding lane in `other`.\n+    #[inline]\n+    pub fn lanes_ge(self, other: Self) -> Mask<Element::Mask, LANES> {\n+        unsafe { Mask::from_int_unchecked(crate::intrinsics::simd_ge(self, other)) }\n+    }\n }"}]}