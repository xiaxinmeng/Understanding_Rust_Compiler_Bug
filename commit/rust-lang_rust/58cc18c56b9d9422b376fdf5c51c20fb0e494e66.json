{"sha": "58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "node_id": "C_kwDOAAsO6NoAKDU4Y2MxOGM1NmI5ZDk0MjJiMzc2ZmRmNWM1MWMyMGZiMGU0OTRlNjY", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-10T05:50:06Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-10T06:19:30Z"}, "message": "Add #[must_use] to alloc constructors", "tree": {"sha": "a0e5d15bafb3840e00d59f6375606ac5d49699c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0e5d15bafb3840e00d59f6375606ac5d49699c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "html_url": "https://github.com/rust-lang/rust/commit/58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6928fafe06e4ab29317f75194e1bf67c119dccdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6928fafe06e4ab29317f75194e1bf67c119dccdc", "html_url": "https://github.com/rust-lang/rust/commit/6928fafe06e4ab29317f75194e1bf67c119dccdc"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "bd4f52560421b9edd0b5935058ebcd4e6474e2da", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "patch": "@@ -187,6 +187,7 @@ impl<T> Box<T> {\n     #[cfg(not(no_global_oom_handling))]\n     #[inline(always)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new(x: T) -> Self {\n         box x\n     }\n@@ -211,6 +212,7 @@ impl<T> Box<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     #[inline]\n     pub fn new_uninit() -> Box<mem::MaybeUninit<T>> {\n         Self::new_uninit_in(Global)\n@@ -237,6 +239,7 @@ impl<T> Box<T> {\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {\n         Self::new_zeroed_in(Global)\n     }\n@@ -245,6 +248,7 @@ impl<T> Box<T> {\n     /// `x` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[must_use]\n     #[inline(always)]\n     pub fn pin(x: T) -> Pin<Box<T>> {\n         (box x).into()\n@@ -339,6 +343,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[must_use]\n     #[inline]\n     pub fn new_in(x: T, alloc: A) -> Self {\n         let mut boxed = Self::new_uninit_in(alloc);\n@@ -395,6 +400,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// ```\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n@@ -459,6 +465,7 @@ impl<T, A: Allocator> Box<T, A> {\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[cfg(not(no_global_oom_handling))]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n@@ -503,6 +510,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// `x` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[must_use]\n     #[inline(always)]\n     pub fn pin_in(x: T, alloc: A) -> Pin<Self>\n     where\n@@ -561,6 +569,7 @@ impl<T> Box<[T]> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         unsafe { RawVec::with_capacity(len).into_box(len) }\n     }\n@@ -585,6 +594,7 @@ impl<T> Box<[T]> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         unsafe { RawVec::with_capacity_zeroed(len).into_box(len) }\n     }\n@@ -681,6 +691,7 @@ impl<T, A: Allocator> Box<[T], A> {\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit_slice_in(len: usize, alloc: A) -> Box<[mem::MaybeUninit<T>], A> {\n         unsafe { RawVec::with_capacity_in(len, alloc).into_box(len) }\n     }\n@@ -708,6 +719,7 @@ impl<T, A: Allocator> Box<[T], A> {\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_slice_in(len: usize, alloc: A) -> Box<[mem::MaybeUninit<T>], A> {\n         unsafe { RawVec::with_capacity_zeroed_in(len, alloc).into_box(len) }\n     }"}, {"sha": "01453e2710def938e3b7456869b141eaf353b9ee", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "patch": "@@ -364,6 +364,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// heap.push(4);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new() -> BinaryHeap<T> {\n         BinaryHeap { data: vec![] }\n     }\n@@ -383,6 +384,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// heap.push(4);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_capacity(capacity: usize) -> BinaryHeap<T> {\n         BinaryHeap { data: Vec::with_capacity(capacity) }\n     }"}, {"sha": "7de80291cbbeab93179f312007293999a9abf1ac", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "patch": "@@ -502,6 +502,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[must_use]\n     pub const fn new() -> BTreeMap<K, V> {\n         BTreeMap { root: None, length: 0 }\n     }"}, {"sha": "2699f3fba397d8e1769c80b50daf1a0b3a11b92c", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "patch": "@@ -248,6 +248,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[must_use]\n     pub const fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n     }"}, {"sha": "6dcba318c3598f4c4307d8849818e307a6d461e6", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "patch": "@@ -417,6 +417,7 @@ impl<T> LinkedList<T> {\n     #[inline]\n     #[rustc_const_stable(feature = \"const_linked_list_new\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub const fn new() -> Self {\n         LinkedList { head: None, tail: None, len: 0, marker: PhantomData }\n     }"}, {"sha": "09ae1f7eebd09b8b6165fffb5247ba574c3a2ddf", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "patch": "@@ -475,6 +475,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new() -> VecDeque<T> {\n         VecDeque::new_in(Global)\n     }\n@@ -490,6 +491,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_capacity(capacity: usize) -> VecDeque<T> {\n         Self::with_capacity_in(capacity, Global)\n     }"}, {"sha": "75dbd4678bb473c39572372c5265a74ae4976ba0", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "patch": "@@ -69,6 +69,7 @@ impl<T> RawVec<T, Global> {\n     /// `RawVec` with capacity `0`. If `T` is zero-sized, then it makes a\n     /// `RawVec` with capacity `usize::MAX`. Useful for implementing\n     /// delayed allocation.\n+    #[must_use]\n     pub const fn new() -> Self {\n         Self::new_in(Global)\n     }\n@@ -87,13 +88,15 @@ impl<T> RawVec<T, Global> {\n     ///\n     /// Aborts on OOM.\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use]\n     #[inline]\n     pub fn with_capacity(capacity: usize) -> Self {\n         Self::with_capacity_in(capacity, Global)\n     }\n \n     /// Like `with_capacity`, but guarantees the buffer is zeroed.\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use]\n     #[inline]\n     pub fn with_capacity_zeroed(capacity: usize) -> Self {\n         Self::with_capacity_zeroed_in(capacity, Global)"}, {"sha": "bde0dc754fb32b0e2589c8924ae8c6248c4ce7b6", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "patch": "@@ -452,6 +452,7 @@ impl<T> Rc<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit() -> Rc<mem::MaybeUninit<T>> {\n         unsafe {\n             Rc::from_ptr(Rc::allocate_for_layout(\n@@ -484,6 +485,7 @@ impl<T> Rc<T> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed() -> Rc<mem::MaybeUninit<T>> {\n         unsafe {\n             Rc::from_ptr(Rc::allocate_for_layout(\n@@ -587,6 +589,7 @@ impl<T> Rc<T> {\n     /// `value` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[must_use]\n     pub fn pin(value: T) -> Pin<Rc<T>> {\n         unsafe { Pin::new_unchecked(Rc::new(value)) }\n     }\n@@ -658,6 +661,7 @@ impl<T> Rc<[T]> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit_slice(len: usize) -> Rc<[mem::MaybeUninit<T>]> {\n         unsafe { Rc::from_ptr(Rc::allocate_for_slice(len)) }\n     }\n@@ -684,6 +688,7 @@ impl<T> Rc<[T]> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_slice(len: usize) -> Rc<[mem::MaybeUninit<T>]> {\n         unsafe {\n             Rc::from_ptr(Rc::allocate_for_layout(\n@@ -2044,6 +2049,7 @@ impl<T> Weak<T> {\n     /// assert!(empty.upgrade().is_none());\n     /// ```\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n+    #[must_use]\n     pub fn new() -> Weak<T> {\n         Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect(\"MAX is not 0\") }\n     }"}, {"sha": "d1bc80cc0265ea2b65a1894de27357fc634dccde", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "patch": "@@ -378,6 +378,7 @@ impl String {\n     #[inline]\n     #[rustc_const_stable(feature = \"const_string_new\", since = \"1.39.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub const fn new() -> String {\n         String { vec: Vec::new() }\n     }\n@@ -422,6 +423,7 @@ impl String {\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_capacity(capacity: usize) -> String {\n         String { vec: Vec::with_capacity(capacity) }\n     }"}, {"sha": "482c3eac5f970498fd181e8d575ba029983e56f5", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "patch": "@@ -448,6 +448,7 @@ impl<T> Arc<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit() -> Arc<mem::MaybeUninit<T>> {\n         unsafe {\n             Arc::from_ptr(Arc::allocate_for_layout(\n@@ -480,6 +481,7 @@ impl<T> Arc<T> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed() -> Arc<mem::MaybeUninit<T>> {\n         unsafe {\n             Arc::from_ptr(Arc::allocate_for_layout(\n@@ -494,6 +496,7 @@ impl<T> Arc<T> {\n     /// `data` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[must_use]\n     pub fn pin(data: T) -> Pin<Arc<T>> {\n         unsafe { Pin::new_unchecked(Arc::new(data)) }\n     }\n@@ -662,6 +665,7 @@ impl<T> Arc<[T]> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit_slice(len: usize) -> Arc<[mem::MaybeUninit<T>]> {\n         unsafe { Arc::from_ptr(Arc::allocate_for_slice(len)) }\n     }\n@@ -688,6 +692,7 @@ impl<T> Arc<[T]> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_slice(len: usize) -> Arc<[mem::MaybeUninit<T>]> {\n         unsafe {\n             Arc::from_ptr(Arc::allocate_for_layout(\n@@ -1678,6 +1683,7 @@ impl<T> Weak<T> {\n     /// assert!(empty.upgrade().is_none());\n     /// ```\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n+    #[must_use]\n     pub fn new() -> Weak<T> {\n         Weak { ptr: NonNull::new(usize::MAX as *mut ArcInner<T>).expect(\"MAX is not 0\") }\n     }"}, {"sha": "a12acb1a1c07f7da512844658aa3992f18418209", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "patch": "@@ -420,6 +420,7 @@ impl<T> Vec<T> {\n     #[inline]\n     #[rustc_const_stable(feature = \"const_vec_new\", since = \"1.39.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub const fn new() -> Self {\n         Vec { buf: RawVec::NEW, len: 0 }\n     }\n@@ -464,6 +465,7 @@ impl<T> Vec<T> {\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_capacity(capacity: usize) -> Self {\n         Self::with_capacity_in(capacity, Global)\n     }"}, {"sha": "39fbf3c9eb4e29ac6c3cdbec5b8a2f16f3c62946", "filename": "src/test/ui/weak-new-uninhabited-issue-48493.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/src%2Ftest%2Fui%2Fweak-new-uninhabited-issue-48493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58cc18c56b9d9422b376fdf5c51c20fb0e494e66/src%2Ftest%2Fui%2Fweak-new-uninhabited-issue-48493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fweak-new-uninhabited-issue-48493.rs?ref=58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     enum Void {}\n-    std::rc::Weak::<Void>::new();\n-    std::sync::Weak::<Void>::new();\n+    let _ = std::rc::Weak::<Void>::new();\n+    let _ = std::sync::Weak::<Void>::new();\n }"}]}