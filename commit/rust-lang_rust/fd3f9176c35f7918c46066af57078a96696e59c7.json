{"sha": "fd3f9176c35f7918c46066af57078a96696e59c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkM2Y5MTc2YzM1Zjc5MThjNDYwNjZhZjU3MDc4YTk2Njk2ZTU5Yzc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-21T12:06:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T12:06:35Z"}, "message": "Rollup merge of #69901 - RalfJung:rustc_layout, r=eddyb\n\nadd #[rustc_layout(debug)]\n\n@eddyb recently told me about the `#[rustc_layout]` attribute, and I think it would be very useful if it could be used to print all the layout information Rust has about a type. When working with layouts (e.g. in Miri), it is often not clear how certain surface language features get represented internally. I have some awful hacks locally to be able to dump this debug information; with this attribute I could get it on the playground which is so much better. :)", "tree": {"sha": "9f4c9ce874e006afcbcb20858953d6d167cbbfb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f4c9ce874e006afcbcb20858953d6d167cbbfb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd3f9176c35f7918c46066af57078a96696e59c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedgNLCRBK7hj4Ov3rIwAAdHIIAJhvufSpafsr/jmyTcq0LgFd\nKD7dEf0hGhzVh6mr7VN8mJUMnvvCRHXpvEzrYK4TyNARLNVXuEe3coajcGrW+k1Q\nBNDY1UkDsurfbSSyjHHAdP98wFkMOa3J9s3etbntMl9Pvo/ogLGoD4YCmC37yX06\nkv/OkLOncjmM/64GUCsaFaySgfU8tC23VsXKq0SpgVMUvISdwHAaifkG/tbQCm0H\nr7nDV8CtLTgtm/fcjGo2+MfNUrG3aRy5gpKx0A/lafSUZvmkkZvveijnfxRyQKn3\nQLtDBz+ineDSjBn5PSegxte+rPPEtwWxC9d+5aPcmagGGeeMNBvO/4IsMjl0TQI=\n=6dgj\n-----END PGP SIGNATURE-----\n", "payload": "tree 9f4c9ce874e006afcbcb20858953d6d167cbbfb1\nparent a6596f2a4de1ea77a2a023510499de11adb53dc6\nparent e548df7e362ec31f00a5661f207320587d91b529\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584792395 +0100\ncommitter GitHub <noreply@github.com> 1584792395 +0100\n\nRollup merge of #69901 - RalfJung:rustc_layout, r=eddyb\n\nadd #[rustc_layout(debug)]\n\n@eddyb recently told me about the `#[rustc_layout]` attribute, and I think it would be very useful if it could be used to print all the layout information Rust has about a type. When working with layouts (e.g. in Miri), it is often not clear how certain surface language features get represented internally. I have some awful hacks locally to be able to dump this debug information; with this attribute I could get it on the playground which is so much better. :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3f9176c35f7918c46066af57078a96696e59c7", "html_url": "https://github.com/rust-lang/rust/commit/fd3f9176c35f7918c46066af57078a96696e59c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd3f9176c35f7918c46066af57078a96696e59c7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6596f2a4de1ea77a2a023510499de11adb53dc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6596f2a4de1ea77a2a023510499de11adb53dc6", "html_url": "https://github.com/rust-lang/rust/commit/a6596f2a4de1ea77a2a023510499de11adb53dc6"}, {"sha": "e548df7e362ec31f00a5661f207320587d91b529", "url": "https://api.github.com/repos/rust-lang/rust/commits/e548df7e362ec31f00a5661f207320587d91b529", "html_url": "https://github.com/rust-lang/rust/commit/e548df7e362ec31f00a5661f207320587d91b529"}], "stats": {"total": 364, "additions": 356, "deletions": 8}, "files": [{"sha": "9d8b1422bdf2469bc0910ee7bf3ce9d395dd0b69", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fd3f9176c35f7918c46066af57078a96696e59c7/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3f9176c35f7918c46066af57078a96696e59c7/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=fd3f9176c35f7918c46066af57078a96696e59c7", "patch": "@@ -17,32 +17,38 @@ use rustc_span::symbol::sym;\n pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {\n         // if the `rustc_attrs` feature is not enabled, don't bother testing layout\n-        tcx.hir().krate().visit_all_item_likes(&mut VarianceTest { tcx });\n+        tcx.hir().krate().visit_all_item_likes(&mut LayoutTest { tcx });\n     }\n }\n \n-struct VarianceTest<'tcx> {\n+struct LayoutTest<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n+impl ItemLikeVisitor<'tcx> for LayoutTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         let item_def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n-        if let ItemKind::TyAlias(..) = item.kind {\n-            for attr in self.tcx.get_attrs(item_def_id).iter() {\n-                if attr.check_name(sym::rustc_layout) {\n-                    self.dump_layout_of(item_def_id, item, attr);\n+        match item.kind {\n+            ItemKind::TyAlias(..)\n+            | ItemKind::Enum(..)\n+            | ItemKind::Struct(..)\n+            | ItemKind::Union(..) => {\n+                for attr in self.tcx.get_attrs(item_def_id).iter() {\n+                    if attr.check_name(sym::rustc_layout) {\n+                        self.dump_layout_of(item_def_id, item, attr);\n+                    }\n                 }\n             }\n+            _ => {}\n         }\n     }\n \n     fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem<'tcx>) {}\n }\n \n-impl VarianceTest<'tcx> {\n+impl LayoutTest<'tcx> {\n     fn dump_layout_of(&self, item_def_id: DefId, item: &hir::Item<'tcx>, attr: &Attribute) {\n         let tcx = self.tcx;\n         let param_env = self.tcx.param_env(item_def_id);\n@@ -81,6 +87,13 @@ impl VarianceTest<'tcx> {\n                             );\n                         }\n \n+                        sym::debug => {\n+                            self.tcx.sess.span_err(\n+                                item.span,\n+                                &format!(\"layout debugging: {:#?}\", *ty_layout),\n+                            );\n+                        }\n+\n                         name => {\n                             self.tcx.sess.span_err(\n                                 meta_item.span(),"}, {"sha": "dcb4e849a75e8f34be5a7d592347117391a76ddf", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd3f9176c35f7918c46066af57078a96696e59c7/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3f9176c35f7918c46066af57078a96696e59c7/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=fd3f9176c35f7918c46066af57078a96696e59c7", "patch": "@@ -253,6 +253,7 @@ symbols! {\n         debug_trait,\n         declare_lint_pass,\n         decl_macro,\n+        debug,\n         Debug,\n         Decodable,\n         Default,"}, {"sha": "70ae200e3e5aa936003e77e2b30a1352d898a198", "filename": "src/test/ui/layout/debug.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd3f9176c35f7918c46066af57078a96696e59c7/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3f9176c35f7918c46066af57078a96696e59c7/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.rs?ref=fd3f9176c35f7918c46066af57078a96696e59c7", "patch": "@@ -0,0 +1,15 @@\n+// normalize-stderr-test \"pref: Align \\{\\n *pow2: [1-3],\\n *\\}\" -> \"pref: $$PREF_ALIGN\"\n+#![feature(never_type, rustc_attrs)]\n+#![crate_type = \"lib\"]\n+\n+#[rustc_layout(debug)]\n+enum E { Foo, Bar(!, i32, i32) } //~ ERROR: layout debugging\n+\n+#[rustc_layout(debug)]\n+struct S { f1: i32, f2: (), f3: i32 } //~ ERROR: layout debugging\n+\n+#[rustc_layout(debug)]\n+union U { f1: (i32, i32), f3: i32 } //~ ERROR: layout debugging\n+\n+#[rustc_layout(debug)]\n+type Test = Result<i32, i32>; //~ ERROR: layout debugging"}, {"sha": "0ce538285f8c497989503587ea9222cc7f9cecd7", "filename": "src/test/ui/layout/debug.stderr", "status": "added", "additions": 319, "deletions": 0, "changes": 319, "blob_url": "https://github.com/rust-lang/rust/blob/fd3f9176c35f7918c46066af57078a96696e59c7/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd3f9176c35f7918c46066af57078a96696e59c7/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=fd3f9176c35f7918c46066af57078a96696e59c7", "patch": "@@ -0,0 +1,319 @@\n+error: layout debugging: LayoutDetails {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        discr: Scalar {\n+            value: Int(\n+                I32,\n+                false,\n+            ),\n+            valid_range: 0..=0,\n+        },\n+        discr_kind: Tag,\n+        discr_index: 0,\n+        variants: [\n+            LayoutDetails {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 0,\n+                    },\n+                    pref: $PREF_ALIGN,\n+                },\n+                size: Size {\n+                    raw: 4,\n+                },\n+            },\n+            LayoutDetails {\n+                fields: Arbitrary {\n+                    offsets: [\n+                        Size {\n+                            raw: 4,\n+                        },\n+                        Size {\n+                            raw: 4,\n+                        },\n+                        Size {\n+                            raw: 8,\n+                        },\n+                    ],\n+                    memory_index: [\n+                        0,\n+                        1,\n+                        2,\n+                    ],\n+                },\n+                variants: Single {\n+                    index: 1,\n+                },\n+                abi: Uninhabited,\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 2,\n+                    },\n+                    pref: $PREF_ALIGN,\n+                },\n+                size: Size {\n+                    raw: 12,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Aggregate {\n+        sized: true,\n+    },\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I32,\n+                    false,\n+                ),\n+                valid_range: 0..=0,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: $PREF_ALIGN,\n+    },\n+    size: Size {\n+        raw: 12,\n+    },\n+}\n+  --> $DIR/debug.rs:6:1\n+   |\n+LL | enum E { Foo, Bar(!, i32, i32) }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout debugging: LayoutDetails {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+            Size {\n+                raw: 0,\n+            },\n+            Size {\n+                raw: 4,\n+            },\n+        ],\n+        memory_index: [\n+            1,\n+            0,\n+            2,\n+        ],\n+    },\n+    variants: Single {\n+        index: 0,\n+    },\n+    abi: ScalarPair(\n+        Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 0..=4294967295,\n+        },\n+        Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 0..=4294967295,\n+        },\n+    ),\n+    largest_niche: None,\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: $PREF_ALIGN,\n+    },\n+    size: Size {\n+        raw: 8,\n+    },\n+}\n+  --> $DIR/debug.rs:9:1\n+   |\n+LL | struct S { f1: i32, f2: (), f3: i32 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout debugging: LayoutDetails {\n+    fields: Union(\n+        2,\n+    ),\n+    variants: Single {\n+        index: 0,\n+    },\n+    abi: Aggregate {\n+        sized: true,\n+    },\n+    largest_niche: None,\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: $PREF_ALIGN,\n+    },\n+    size: Size {\n+        raw: 8,\n+    },\n+}\n+  --> $DIR/debug.rs:12:1\n+   |\n+LL | union U { f1: (i32, i32), f3: i32 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout debugging: LayoutDetails {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        discr: Scalar {\n+            value: Int(\n+                I32,\n+                false,\n+            ),\n+            valid_range: 0..=1,\n+        },\n+        discr_kind: Tag,\n+        discr_index: 0,\n+        variants: [\n+            LayoutDetails {\n+                fields: Arbitrary {\n+                    offsets: [\n+                        Size {\n+                            raw: 4,\n+                        },\n+                    ],\n+                    memory_index: [\n+                        0,\n+                    ],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 2,\n+                    },\n+                    pref: $PREF_ALIGN,\n+                },\n+                size: Size {\n+                    raw: 8,\n+                },\n+            },\n+            LayoutDetails {\n+                fields: Arbitrary {\n+                    offsets: [\n+                        Size {\n+                            raw: 4,\n+                        },\n+                    ],\n+                    memory_index: [\n+                        0,\n+                    ],\n+                },\n+                variants: Single {\n+                    index: 1,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 2,\n+                    },\n+                    pref: $PREF_ALIGN,\n+                },\n+                size: Size {\n+                    raw: 8,\n+                },\n+            },\n+        ],\n+    },\n+    abi: ScalarPair(\n+        Scalar {\n+            value: Int(\n+                I32,\n+                false,\n+            ),\n+            valid_range: 0..=1,\n+        },\n+        Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 0..=4294967295,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I32,\n+                    false,\n+                ),\n+                valid_range: 0..=1,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: $PREF_ALIGN,\n+    },\n+    size: Size {\n+        raw: 8,\n+    },\n+}\n+  --> $DIR/debug.rs:15:1\n+   |\n+LL | type Test = Result<i32, i32>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}