{"sha": "869d14447af84bfb506e19abf2ca97810845c675", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2OWQxNDQ0N2FmODRiZmI1MDZlMTlhYmYyY2E5NzgxMDg0NWM2NzU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-13T19:02:17Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-13T19:22:51Z"}, "message": "TypeIdHasher: Let projections be hashed implicitly by the visitor.", "tree": {"sha": "4340e8100a6c1fc9b67726797e5b23c249484af4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4340e8100a6c1fc9b67726797e5b23c249484af4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/869d14447af84bfb506e19abf2ca97810845c675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/869d14447af84bfb506e19abf2ca97810845c675", "html_url": "https://github.com/rust-lang/rust/commit/869d14447af84bfb506e19abf2ca97810845c675", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/869d14447af84bfb506e19abf2ca97810845c675/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a0dd0fca4e3e3b5eade66fb3dddc2b9868dc52", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a0dd0fca4e3e3b5eade66fb3dddc2b9868dc52", "html_url": "https://github.com/rust-lang/rust/commit/75a0dd0fca4e3e3b5eade66fb3dddc2b9868dc52"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "344f0e57d64230f3894cc576498d3cb63d2f291a", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/869d14447af84bfb506e19abf2ca97810845c675/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/869d14447af84bfb506e19abf2ca97810845c675/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=869d14447af84bfb506e19abf2ca97810845c675", "patch": "@@ -453,17 +453,6 @@ impl<'a, 'gcx, 'tcx> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx> {\n                 // Hash region and builtin bounds.\n                 data.region_bound.visit_with(self);\n                 self.hash(data.builtin_bounds);\n-\n-                // Only projection bounds are left, hash them.\n-                self.hash(data.projection_bounds.len());\n-                for bound in &data.projection_bounds {\n-                    self.def_id(bound.0.trait_ref.def_id);\n-                    self.hash(bound.0.item_name);\n-                    bound.visit_with(self);\n-                }\n-\n-                // Bypass super_visit_with, we've visited everything.\n-                return false;\n             }\n             TyTuple(tys) => {\n                 self.hash(tys.len());"}, {"sha": "10e315f269f971af023e23a5148a1f72b90b96a0", "filename": "src/test/run-pass/auxiliary/typeid-intrinsic-aux1.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/869d14447af84bfb506e19abf2ca97810845c675/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/869d14447af84bfb506e19abf2ca97810845c675/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux1.rs?ref=869d14447af84bfb506e19abf2ca97810845c675", "patch": "@@ -22,6 +22,8 @@ pub type F = Option<isize>;\n pub type G = usize;\n pub type H = &'static str;\n pub type I = Box<Fn()>;\n+pub type I32Iterator = Iterator<Item=i32>;\n+pub type U32Iterator = Iterator<Item=u32>;\n \n pub fn id_A() -> TypeId { TypeId::of::<A>() }\n pub fn id_B() -> TypeId { TypeId::of::<B>() }\n@@ -34,3 +36,6 @@ pub fn id_H() -> TypeId { TypeId::of::<H>() }\n pub fn id_I() -> TypeId { TypeId::of::<I>() }\n \n pub fn foo<T: Any>() -> TypeId { TypeId::of::<T>() }\n+\n+pub fn id_i32_iterator() -> TypeId { TypeId::of::<I32Iterator>() }\n+pub fn id_u32_iterator() -> TypeId { TypeId::of::<U32Iterator>() }"}, {"sha": "10e315f269f971af023e23a5148a1f72b90b96a0", "filename": "src/test/run-pass/auxiliary/typeid-intrinsic-aux2.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/869d14447af84bfb506e19abf2ca97810845c675/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/869d14447af84bfb506e19abf2ca97810845c675/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux2.rs?ref=869d14447af84bfb506e19abf2ca97810845c675", "patch": "@@ -22,6 +22,8 @@ pub type F = Option<isize>;\n pub type G = usize;\n pub type H = &'static str;\n pub type I = Box<Fn()>;\n+pub type I32Iterator = Iterator<Item=i32>;\n+pub type U32Iterator = Iterator<Item=u32>;\n \n pub fn id_A() -> TypeId { TypeId::of::<A>() }\n pub fn id_B() -> TypeId { TypeId::of::<B>() }\n@@ -34,3 +36,6 @@ pub fn id_H() -> TypeId { TypeId::of::<H>() }\n pub fn id_I() -> TypeId { TypeId::of::<I>() }\n \n pub fn foo<T: Any>() -> TypeId { TypeId::of::<T>() }\n+\n+pub fn id_i32_iterator() -> TypeId { TypeId::of::<I32Iterator>() }\n+pub fn id_u32_iterator() -> TypeId { TypeId::of::<U32Iterator>() }"}, {"sha": "36650368d57be58b003be1cfc777fe3eff1f5152", "filename": "src/test/run-pass/typeid-intrinsic.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/869d14447af84bfb506e19abf2ca97810845c675/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/869d14447af84bfb506e19abf2ca97810845c675/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs?ref=869d14447af84bfb506e19abf2ca97810845c675", "patch": "@@ -78,4 +78,13 @@ pub fn main() {\n     b.hash(&mut s2);\n \n     assert_eq!(s1.finish(), s2.finish());\n+\n+    // Check projections\n+\n+    assert_eq!(TypeId::of::<other1::I32Iterator>(), other1::id_i32_iterator());\n+    assert_eq!(TypeId::of::<other1::U32Iterator>(), other1::id_u32_iterator());\n+    assert_eq!(other1::id_i32_iterator(), other2::id_i32_iterator());\n+    assert_eq!(other1::id_u32_iterator(), other2::id_u32_iterator());\n+    assert!(other1::id_i32_iterator() != other1::id_u32_iterator());\n+    assert!(TypeId::of::<other1::I32Iterator>() != TypeId::of::<other1::U32Iterator>());\n }"}]}