{"sha": "508fadab16ec36c57daa8f0361db60848d31c0f7", "node_id": "C_kwDOAAsO6NoAKDUwOGZhZGFiMTZlYzM2YzU3ZGFhOGYwMzYxZGI2MDg0OGQzMWMwZjc", "commit": {"author": {"name": "Ilya Yanok", "email": "ilya.yanok@gmail.com", "date": "2021-10-23T09:40:46Z"}, "committer": {"name": "Ilya Yanok", "email": "ilya.yanok@gmail.com", "date": "2021-10-23T09:40:46Z"}, "message": "Update control_flow.rs\n\nFix and extent ControlFlow `traverse_inorder` example\n\n1. The existing example compiles on its own, but any usage fails to be monomorphised and so doesn't compile. Fix that by using Fn trait instead of FnMut.\n2. Added an example usage of `traverse_inorder` showing how we can terminate the traversal early.\n\nFixes #90063", "tree": {"sha": "89ccab1c65f13b87fe729e490d723e7300ad087d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89ccab1c65f13b87fe729e490d723e7300ad087d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/508fadab16ec36c57daa8f0361db60848d31c0f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/508fadab16ec36c57daa8f0361db60848d31c0f7", "html_url": "https://github.com/rust-lang/rust/commit/508fadab16ec36c57daa8f0361db60848d31c0f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/508fadab16ec36c57daa8f0361db60848d31c0f7/comments", "author": {"login": "yanok", "id": 468850, "node_id": "MDQ6VXNlcjQ2ODg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/468850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanok", "html_url": "https://github.com/yanok", "followers_url": "https://api.github.com/users/yanok/followers", "following_url": "https://api.github.com/users/yanok/following{/other_user}", "gists_url": "https://api.github.com/users/yanok/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanok/subscriptions", "organizations_url": "https://api.github.com/users/yanok/orgs", "repos_url": "https://api.github.com/users/yanok/repos", "events_url": "https://api.github.com/users/yanok/events{/privacy}", "received_events_url": "https://api.github.com/users/yanok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yanok", "id": 468850, "node_id": "MDQ6VXNlcjQ2ODg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/468850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanok", "html_url": "https://github.com/yanok", "followers_url": "https://api.github.com/users/yanok/followers", "following_url": "https://api.github.com/users/yanok/following{/other_user}", "gists_url": "https://api.github.com/users/yanok/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanok/subscriptions", "organizations_url": "https://api.github.com/users/yanok/orgs", "repos_url": "https://api.github.com/users/yanok/repos", "events_url": "https://api.github.com/users/yanok/events{/privacy}", "received_events_url": "https://api.github.com/users/yanok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d71e749a244890cd370d49963e747cf92f4a037", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d71e749a244890cd370d49963e747cf92f4a037", "html_url": "https://github.com/rust-lang/rust/commit/3d71e749a244890cd370d49963e747cf92f4a037"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "ec00d0fe05b9c45031679c79d8f5099188d54b1d", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/508fadab16ec36c57daa8f0361db60848d31c0f7/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508fadab16ec36c57daa8f0361db60848d31c0f7/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=508fadab16ec36c57daa8f0361db60848d31c0f7", "patch": "@@ -34,17 +34,40 @@ use crate::{convert, ops};\n /// }\n ///\n /// impl<T> TreeNode<T> {\n-///     pub fn traverse_inorder<B>(&self, mut f: impl FnMut(&T) -> ControlFlow<B>) -> ControlFlow<B> {\n+///     pub fn traverse_inorder<B>(&self, f: &impl Fn(&T) -> ControlFlow<B>) -> ControlFlow<B> {\n ///         if let Some(left) = &self.left {\n-///             left.traverse_inorder(&mut f)?;\n+///             left.traverse_inorder(f)?;\n ///         }\n ///         f(&self.value)?;\n ///         if let Some(right) = &self.right {\n-///             right.traverse_inorder(&mut f)?;\n+///             right.traverse_inorder(f)?;\n ///         }\n ///         ControlFlow::Continue(())\n ///     }\n /// }\n+///\n+/// let node = TreeNode {\n+///     value: 0,\n+///     left: Some(Box::new(TreeNode {\n+///         value: 1,\n+///         left: None,\n+///         right: None\n+///     })),\n+///     right: Some(Box::new(TreeNode {\n+///         value: 2,\n+///         left: None,\n+///         right: None\n+///     }))\n+/// };\n+///\n+/// node.traverse_inorder(& |val| {\n+///     println!(\"{}\", val);\n+///     if *val <= 0 {\n+///         ControlFlow::Break(())\n+///     } else {\n+///         ControlFlow::Continue(())\n+///     }\n+/// });\n /// ```\n #[stable(feature = \"control_flow_enum_type\", since = \"1.55.0\")]\n #[derive(Debug, Clone, Copy, PartialEq)]"}]}