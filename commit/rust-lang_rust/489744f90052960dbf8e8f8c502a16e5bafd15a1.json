{"sha": "489744f90052960dbf8e8f8c502a16e5bafd15a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OTc0NGY5MDA1Mjk2MGRiZjhlOGY4YzUwMmExNmU1YmFmZDE1YTE=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-08-05T01:53:21Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-08-18T07:25:26Z"}, "message": "Remove box syntax from rustc_builtin_macros", "tree": {"sha": "0e482f3b08fe09b17f0ec158857e86bce56b30d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e482f3b08fe09b17f0ec158857e86bce56b30d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/489744f90052960dbf8e8f8c502a16e5bafd15a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/489744f90052960dbf8e8f8c502a16e5bafd15a1", "html_url": "https://github.com/rust-lang/rust/commit/489744f90052960dbf8e8f8c502a16e5bafd15a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/489744f90052960dbf8e8f8c502a16e5bafd15a1/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cd1cd034b6501cbfbd78a4d034e74aa188fb00e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd1cd034b6501cbfbd78a4d034e74aa188fb00e", "html_url": "https://github.com/rust-lang/rust/commit/1cd1cd034b6501cbfbd78a4d034e74aa188fb00e"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "61af4979e70142fe7dad2788f7106d6ceda8c764", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/489744f90052960dbf8e8f8c502a16e5bafd15a1/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489744f90052960dbf8e8f8c502a16e5bafd15a1/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=489744f90052960dbf8e8f8c502a16e5bafd15a1", "patch": "@@ -527,12 +527,12 @@ impl<'a> TraitDef<'a> {\n                     tokens: None,\n                 },\n                 attrs: Vec::new(),\n-                kind: ast::AssocItemKind::TyAlias(box ast::TyAliasKind(\n+                kind: ast::AssocItemKind::TyAlias(Box::new(ast::TyAliasKind(\n                     ast::Defaultness::Final,\n                     Generics::default(),\n                     Vec::new(),\n                     Some(type_def.to_ty(cx, self.span, type_ident, generics)),\n-                )),\n+                ))),\n                 tokens: None,\n             })\n         });\n@@ -698,7 +698,7 @@ impl<'a> TraitDef<'a> {\n             self.span,\n             Ident::invalid(),\n             a,\n-            ast::ItemKind::Impl(box ast::ImplKind {\n+            ast::ItemKind::Impl(Box::new(ast::ImplKind {\n                 unsafety,\n                 polarity: ast::ImplPolarity::Positive,\n                 defaultness: ast::Defaultness::Final,\n@@ -707,7 +707,7 @@ impl<'a> TraitDef<'a> {\n                 of_trait: opt_trait_ref,\n                 self_ty: self_type,\n                 items: methods.into_iter().chain(associated_types).collect(),\n-            }),\n+            })),\n         )\n     }\n \n@@ -940,7 +940,12 @@ impl<'a> MethodDef<'a> {\n                 tokens: None,\n             },\n             ident: method_ident,\n-            kind: ast::AssocItemKind::Fn(box ast::FnKind(def, sig, fn_generics, Some(body_block))),\n+            kind: ast::AssocItemKind::Fn(Box::new(ast::FnKind(\n+                def,\n+                sig,\n+                fn_generics,\n+                Some(body_block),\n+            ))),\n             tokens: None,\n         })\n     }"}, {"sha": "572ec6e242e4b4d7fbe1b5410adab8d7a107319a", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/489744f90052960dbf8e8f8c502a16e5bafd15a1/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489744f90052960dbf8e8f8c502a16e5bafd15a1/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=489744f90052960dbf8e8f8c502a16e5bafd15a1", "patch": "@@ -179,7 +179,7 @@ fn inject_impl_of_structural_trait(\n         span,\n         Ident::invalid(),\n         attrs,\n-        ItemKind::Impl(box ImplKind {\n+        ItemKind::Impl(Box::new(ImplKind {\n             unsafety: ast::Unsafe::No,\n             polarity: ast::ImplPolarity::Positive,\n             defaultness: ast::Defaultness::Final,\n@@ -188,7 +188,7 @@ fn inject_impl_of_structural_trait(\n             of_trait: Some(trait_ref),\n             self_ty: self_type,\n             items: Vec::new(),\n-        }),\n+        })),\n     );\n \n     push(Annotatable::Item(newitem));"}, {"sha": "3f71ee6f489a08fbbdd1d413f92905f9fe769417", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/489744f90052960dbf8e8f8c502a16e5bafd15a1/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489744f90052960dbf8e8f8c502a16e5bafd15a1/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=489744f90052960dbf8e8f8c502a16e5bafd15a1", "patch": "@@ -85,8 +85,12 @@ impl AllocFnFactory<'_, '_> {\n         let header = FnHeader { unsafety: Unsafe::Yes(self.span), ..FnHeader::default() };\n         let sig = FnSig { decl, header, span: self.span };\n         let block = Some(self.cx.block_expr(output_expr));\n-        let kind =\n-            ItemKind::Fn(box FnKind(ast::Defaultness::Final, sig, Generics::default(), block));\n+        let kind = ItemKind::Fn(Box::new(FnKind(\n+            ast::Defaultness::Final,\n+            sig,\n+            Generics::default(),\n+            block,\n+        )));\n         let item = self.cx.item(\n             self.span,\n             Ident::from_str_and_span(&self.kind.fn_name(method.name), self.span),"}, {"sha": "d1d276930b90aa1c45912cede65d38c9821e72e7", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/489744f90052960dbf8e8f8c502a16e5bafd15a1/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489744f90052960dbf8e8f8c502a16e5bafd15a1/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=489744f90052960dbf8e8f8c502a16e5bafd15a1", "patch": "@@ -3,7 +3,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]"}, {"sha": "be24b60294bfe52608e572b87bd89f39bdfd2f1d", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/489744f90052960dbf8e8f8c502a16e5bafd15a1/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489744f90052960dbf8e8f8c502a16e5bafd15a1/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=489744f90052960dbf8e8f8c502a16e5bafd15a1", "patch": "@@ -315,8 +315,12 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     let decl = ecx.fn_decl(vec![], ast::FnRetTy::Ty(main_ret_ty));\n     let sig = ast::FnSig { decl, header: ast::FnHeader::default(), span: sp };\n     let def = ast::Defaultness::Final;\n-    let main =\n-        ast::ItemKind::Fn(box ast::FnKind(def, sig, ast::Generics::default(), Some(main_body)));\n+    let main = ast::ItemKind::Fn(Box::new(ast::FnKind(\n+        def,\n+        sig,\n+        ast::Generics::default(),\n+        Some(main_body),\n+    )));\n \n     // Honor the reexport_test_harness_main attribute\n     let main_id = match cx.reexport_test_harness_main {"}]}