{"sha": "5042dbdb2e27b141ccc4cffc34efcf06ec24d59f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNDJkYmRiMmUyN2IxNDFjY2M0Y2ZmYzM0ZWZjZjA2ZWMyNGQ1OWY=", "commit": {"author": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-09-08T02:06:09Z"}, "committer": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-10-05T13:01:42Z"}, "message": "add RegionNameHighlight::Occluded", "tree": {"sha": "5de55cab894e320af6aadd242a8a58ed6df918db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5de55cab894e320af6aadd242a8a58ed6df918db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5042dbdb2e27b141ccc4cffc34efcf06ec24d59f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5042dbdb2e27b141ccc4cffc34efcf06ec24d59f", "html_url": "https://github.com/rust-lang/rust/commit/5042dbdb2e27b141ccc4cffc34efcf06ec24d59f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5042dbdb2e27b141ccc4cffc34efcf06ec24d59f/comments", "author": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34ff35298938f0d0ae477618b17a41d5afc00a7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/34ff35298938f0d0ae477618b17a41d5afc00a7a", "html_url": "https://github.com/rust-lang/rust/commit/34ff35298938f0d0ae477618b17a41d5afc00a7a"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "db5c14843b9fcd9d60119eca2655784bb50572bd", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5042dbdb2e27b141ccc4cffc34efcf06ec24d59f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5042dbdb2e27b141ccc4cffc34efcf06ec24d59f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=5042dbdb2e27b141ccc4cffc34efcf06ec24d59f", "patch": "@@ -57,6 +57,10 @@ crate enum RegionNameHighlight {\n     /// The anonymous region corresponds to a region where the type annotation is completely missing\n     /// from the code, e.g. in a closure arguments `|x| { ... }`, where `x` is a reference.\n     CannotMatchHirTy(Span, String),\n+    /// The anonymous region corresponds to a region where the type annotation is completely missing\n+    /// from the code, and *even if* we print out the full name of the type, the region name won't\n+    /// be included. This currently occurs for opaque types like `impl Future`.\n+    Occluded(Span, String),\n }\n \n impl RegionName {\n@@ -87,7 +91,8 @@ impl RegionName {\n             RegionNameSource::AnonRegionFromArgument(ref highlight) => match *highlight {\n                 RegionNameHighlight::MatchedHirTy(span)\n                 | RegionNameHighlight::MatchedAdtAndSegment(span)\n-                | RegionNameHighlight::CannotMatchHirTy(span, _) => Some(span),\n+                | RegionNameHighlight::CannotMatchHirTy(span, _)\n+                | RegionNameHighlight::Occluded(span, _) => Some(span),\n             },\n         }\n     }\n@@ -123,6 +128,15 @@ impl RegionName {\n             ) => {\n                 diag.span_label(*span, format!(\"let's call this `{}`\", self));\n             }\n+            RegionNameSource::AnonRegionFromArgument(RegionNameHighlight::Occluded(\n+                span,\n+                type_name,\n+            )) => {\n+                diag.span_label(\n+                    *span,\n+                    format!(\"lifetime `{}` appears in the type {}\", self, type_name),\n+                );\n+            }\n             RegionNameSource::AnonRegionFromUpvar(span, upvar_name) => {\n                 diag.span_label(\n                     *span,\n@@ -349,19 +363,21 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             argument_index,\n         );\n \n-        self.get_argument_hir_ty_for_highlighting(argument_index)\n+        let highlight = self\n+            .get_argument_hir_ty_for_highlighting(argument_index)\n             .and_then(|arg_hir_ty| self.highlight_if_we_can_match_hir_ty(fr, arg_ty, arg_hir_ty))\n-            .or_else(|| {\n+            .unwrap_or_else(|| {\n                 // `highlight_if_we_cannot_match_hir_ty` needs to know the number we will give to\n                 // the anonymous region. If it succeeds, the `synthesize_region_name` call below\n                 // will increment the counter, \"reserving\" the number we just used.\n                 let counter = *self.next_region_name.try_borrow().unwrap();\n                 self.highlight_if_we_cannot_match_hir_ty(fr, arg_ty, span, counter)\n-            })\n-            .map(|highlight| RegionName {\n-                name: self.synthesize_region_name(),\n-                source: RegionNameSource::AnonRegionFromArgument(highlight),\n-            })\n+            });\n+\n+        Some(RegionName {\n+            name: self.synthesize_region_name(),\n+            source: RegionNameSource::AnonRegionFromArgument(highlight),\n+        })\n     }\n \n     fn get_argument_hir_ty_for_highlighting(\n@@ -399,7 +415,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         ty: Ty<'tcx>,\n         span: Span,\n         counter: usize,\n-    ) -> Option<RegionNameHighlight> {\n+    ) -> RegionNameHighlight {\n         let mut highlight = RegionHighlightMode::default();\n         highlight.highlighting_region_vid(needle_fr, counter);\n         let type_name =\n@@ -411,9 +427,9 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         );\n         if type_name.find(&format!(\"'{}\", counter)).is_some() {\n             // Only add a label if we can confirm that a region was labelled.\n-            Some(RegionNameHighlight::CannotMatchHirTy(span, type_name))\n+            RegionNameHighlight::CannotMatchHirTy(span, type_name)\n         } else {\n-            None\n+            RegionNameHighlight::Occluded(span, type_name)\n         }\n     }\n "}]}