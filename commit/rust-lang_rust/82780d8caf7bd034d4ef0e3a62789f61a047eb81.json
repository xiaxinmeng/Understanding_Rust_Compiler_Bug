{"sha": "82780d8caf7bd034d4ef0e3a62789f61a047eb81", "node_id": "C_kwDOAAsO6NoAKDgyNzgwZDhjYWY3YmQwMzRkNGVmMGUzYTYyNzg5ZjYxYTA0N2ViODE", "commit": {"author": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2023-03-09T07:46:54Z"}, "committer": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2023-03-15T01:07:11Z"}, "message": "feat: add an autofix for inserting an unsafe block to missing unsafe diagnostic", "tree": {"sha": "488e3c3d9b109f3a6ccbb2b52223c006f08c1a99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/488e3c3d9b109f3a6ccbb2b52223c006f08c1a99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82780d8caf7bd034d4ef0e3a62789f61a047eb81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82780d8caf7bd034d4ef0e3a62789f61a047eb81", "html_url": "https://github.com/rust-lang/rust/commit/82780d8caf7bd034d4ef0e3a62789f61a047eb81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82780d8caf7bd034d4ef0e3a62789f61a047eb81/comments", "author": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4d7ea0692f2a72276704109ee13ffb3284f4863", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d7ea0692f2a72276704109ee13ffb3284f4863", "html_url": "https://github.com/rust-lang/rust/commit/b4d7ea0692f2a72276704109ee13ffb3284f4863"}], "stats": {"total": 196, "additions": 189, "deletions": 7}, "files": [{"sha": "60086ed4a4ec166bc9c6df58ac6754867d93280c", "filename": "crates/ide-diagnostics/src/handlers/missing_unsafe.rs", "status": "modified", "additions": 189, "deletions": 7, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/82780d8caf7bd034d4ef0e3a62789f61a047eb81/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82780d8caf7bd034d4ef0e3a62789f61a047eb81/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs?ref=82780d8caf7bd034d4ef0e3a62789f61a047eb81", "patch": "@@ -1,4 +1,11 @@\n-use crate::{Diagnostic, DiagnosticsContext};\n+use hir::db::AstDatabase;\n+use ide_db::{assists::Assist, source_change::SourceChange};\n+use syntax::ast::{ExprStmt, LetStmt};\n+use syntax::AstNode;\n+use syntax::{ast, SyntaxNode};\n+use text_edit::TextEdit;\n+\n+use crate::{fix, Diagnostic, DiagnosticsContext};\n \n // Diagnostic: missing-unsafe\n //\n@@ -9,11 +16,60 @@ pub(crate) fn missing_unsafe(ctx: &DiagnosticsContext<'_>, d: &hir::MissingUnsaf\n         \"this operation is unsafe and requires an unsafe function or block\",\n         ctx.sema.diagnostics_display_range(d.expr.clone().map(|it| it.into())).range,\n     )\n+    .with_fixes(fixes(ctx, d))\n+}\n+\n+fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingUnsafe) -> Option<Vec<Assist>> {\n+    let root = ctx.sema.db.parse_or_expand(d.expr.file_id)?;\n+    let expr = d.expr.value.to_node(&root);\n+\n+    let node_to_add_unsafe_block = pick_best_node_to_add_unsafe_block(ctx, &expr);\n+\n+    let replacement = format!(\"unsafe {{ {} }}\", node_to_add_unsafe_block.text());\n+    let edit = TextEdit::replace(node_to_add_unsafe_block.text_range(), replacement);\n+    let source_change =\n+        SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), edit);\n+    Some(vec![fix(\"add_unsafe\", \"Add unsafe block\", source_change, expr.syntax().text_range())])\n+}\n+\n+// Find the let statement or expression statement closest to the `expr` in the\n+// ancestor chain.\n+//\n+// Why don't we just add an unsafe block around the `expr`?\n+//\n+// Consider this example:\n+// ```\n+// STATIC_MUT += 1;\n+// ```\n+// We can't add an unsafe block to the left-hand side of an assignment.\n+// ```\n+// unsafe { STATIC_MUT } += 1;\n+// ```\n+//\n+// Or this example:\n+// ```\n+// let z = STATIC_MUT.a;\n+// ```\n+// We can't add an unsafe block like this:\n+// ```\n+// let z = unsafe { STATIC_MUT } .a;\n+// ```\n+fn pick_best_node_to_add_unsafe_block(\n+    ctx: &DiagnosticsContext<'_>,\n+    expr: &ast::Expr,\n+) -> SyntaxNode {\n+    let Some(let_or_expr_stmt) = ctx.sema.ancestors_with_macros(expr.syntax().clone()).find(|node| {\n+        LetStmt::can_cast(node.kind()) || ExprStmt::can_cast(node.kind())\n+    }) else {\n+        // Is this reachable?\n+        return expr.syntax().clone();\n+    };\n+    let_or_expr_stmt\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::check_diagnostics;\n+    use crate::tests::{check_diagnostics, check_fix};\n \n     #[test]\n     fn missing_unsafe_diagnostic_with_raw_ptr() {\n@@ -23,7 +79,7 @@ fn main() {\n     let x = &5 as *const usize;\n     unsafe { let y = *x; }\n     let z = *x;\n-}         //^^ error: this operation is unsafe and requires an unsafe function or block\n+}         //^^\ud83d\udca1 error: this operation is unsafe and requires an unsafe function or block\n \"#,\n         )\n     }\n@@ -48,9 +104,9 @@ unsafe fn unsafe_fn() {\n \n fn main() {\n     unsafe_fn();\n-  //^^^^^^^^^^^ error: this operation is unsafe and requires an unsafe function or block\n+  //^^^^^^^^^^^\ud83d\udca1 error: this operation is unsafe and requires an unsafe function or block\n     HasUnsafe.unsafe_fn();\n-  //^^^^^^^^^^^^^^^^^^^^^ error: this operation is unsafe and requires an unsafe function or block\n+  //^^^^^^^^^^^^^^^^^^^^^\ud83d\udca1 error: this operation is unsafe and requires an unsafe function or block\n     unsafe {\n         unsafe_fn();\n         HasUnsafe.unsafe_fn();\n@@ -72,7 +128,7 @@ static mut STATIC_MUT: Ty = Ty { a: 0 };\n \n fn main() {\n     let x = STATIC_MUT.a;\n-          //^^^^^^^^^^ error: this operation is unsafe and requires an unsafe function or block\n+          //^^^^^^^^^^\ud83d\udca1 error: this operation is unsafe and requires an unsafe function or block\n     unsafe {\n         let x = STATIC_MUT.a;\n     }\n@@ -94,9 +150,135 @@ extern \"rust-intrinsic\" {\n fn main() {\n     let _ = bitreverse(12);\n     let _ = floorf32(12.0);\n-          //^^^^^^^^^^^^^^ error: this operation is unsafe and requires an unsafe function or block\n+          //^^^^^^^^^^^^^^\ud83d\udca1 error: this operation is unsafe and requires an unsafe function or block\n }\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn add_unsafe_block_when_dereferencing_a_raw_pointer() {\n+        check_fix(\n+            r#\"\n+fn main() {\n+    let x = &5 as *const usize;\n+    let z = *x$0;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = &5 as *const usize;\n+    unsafe { let z = *x; }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_unsafe_block_when_calling_unsafe_function() {\n+        check_fix(\n+            r#\"\n+unsafe fn func() {\n+    let x = &5 as *const usize;\n+    let z = *x;\n+}\n+fn main() {\n+    func$0();\n+}\n+\"#,\n+            r#\"\n+unsafe fn func() {\n+    let x = &5 as *const usize;\n+    let z = *x;\n+}\n+fn main() {\n+    unsafe { func(); }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_unsafe_block_when_calling_unsafe_method() {\n+        check_fix(\n+            r#\"\n+struct S(usize);\n+impl S {\n+    unsafe fn func(&self) {\n+        let x = &self.0 as *const usize;\n+        let z = *x;\n+    }\n+}\n+fn main() {\n+    let s = S(5);\n+    s.func$0();\n+}\n+\"#,\n+            r#\"\n+struct S(usize);\n+impl S {\n+    unsafe fn func(&self) {\n+        let x = &self.0 as *const usize;\n+        let z = *x;\n+    }\n+}\n+fn main() {\n+    let s = S(5);\n+    unsafe { s.func(); }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_unsafe_block_when_accessing_mutable_static() {\n+        check_fix(\n+            r#\"\n+struct Ty {\n+    a: u8,\n+}\n+\n+static mut STATIC_MUT: Ty = Ty { a: 0 };\n+\n+fn main() {\n+    let x = STATIC_MUT$0.a;\n+}\n+\"#,\n+            r#\"\n+struct Ty {\n+    a: u8,\n+}\n+\n+static mut STATIC_MUT: Ty = Ty { a: 0 };\n+\n+fn main() {\n+    unsafe { let x = STATIC_MUT.a; }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_unsafe_block_when_calling_unsafe_intrinsic() {\n+        check_fix(\n+            r#\"\n+extern \"rust-intrinsic\" {\n+    pub fn floorf32(x: f32) -> f32;\n+}\n+\n+fn main() {\n+    let _ = floorf32$0(12.0);\n+}\n+\"#,\n+            r#\"\n+extern \"rust-intrinsic\" {\n+    pub fn floorf32(x: f32) -> f32;\n+}\n+\n+fn main() {\n+    unsafe { let _ = floorf32(12.0); }\n+}\n+\"#,\n+        )\n+    }\n }"}]}