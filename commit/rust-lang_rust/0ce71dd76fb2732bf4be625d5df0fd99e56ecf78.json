{"sha": "0ce71dd76fb2732bf4be625d5df0fd99e56ecf78", "node_id": "C_kwDOAAsO6NoAKDBjZTcxZGQ3NmZiMjczMmJmNGJlNjI1ZDVkZjBmZDk5ZTU2ZWNmNzg", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-10T14:04:41Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-11T12:21:13Z"}, "message": "completion: check stability", "tree": {"sha": "2fbecd89a5df3e195aa412022b544a285a05d37c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fbecd89a5df3e195aa412022b544a285a05d37c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmQ1ULkACgkQ4laYqTBY\nYXH/Ug/+MHU66LZY+ihP4o1wl/q34n+7DxVsJ4J5Kf/q6FQntHtk3bsSgEKkEj57\npf9n2emZT/XgVdANxEGYqOqdW/MhxH/pHMRfMK2gp3Oi3D3oGC2EVD78d8zJa8dG\niAJT2SMkOQTI5ybv3htnM/Sml8pWg2ICqr3IeNEZCAG/CafAjHgGmGpOvKylFO+W\nfAdKUfZ7RnV1OiB+hBje9TKsDYTmVvNFagu4W2WFa2nNy7n4fcB51aa5aOPsuEvK\n4OQvMCFMlEDXtWOKUuMRr5r7rImo28eh+V3ak335ML/LS1muG2w6HX1wt3hVW+HV\ns0Vv9RvQDP3cAoghlF3N04dO1OGkqmyRffb3Ao4czfb7LUnMWtW6vV+XhWPT1wVf\nyqlNgc7fDdrD5zLFqzSLsAlkXVPGNwypUOVhyk8SU3bIG2lLlQOk4X5+TJbWoOla\n0IiWQJx4GsM731acLsIHJZfl7VjXW4r8975fZ1kDcSenPtzx2BzHc1ENCkWTpWub\n/jVrLTLvl8wM812Cuf3koo/m+WWMBHKumE8mxDSYqL1xXmur+/RoaBjf2/eQRuVa\nitnt1T6yYXMjmV56PC5C0S3baryFOT35XHOy4/uY2J7HmU36HyIVmR3pSZb2vP3t\n8Pk4IucLVdPEAaAlPoA/eet1yajFx7i3m3ggA15Ajj8f4X2jlOE=\n=VPKP\n-----END PGP SIGNATURE-----", "payload": "tree 2fbecd89a5df3e195aa412022b544a285a05d37c\nparent 584d2697cce38c4aadefbb77577f77dd03b59b2f\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1681135481 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1681215673 +0900\n\ncompletion: check stability\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78", "html_url": "https://github.com/rust-lang/rust/commit/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "584d2697cce38c4aadefbb77577f77dd03b59b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/584d2697cce38c4aadefbb77577f77dd03b59b2f", "html_url": "https://github.com/rust-lang/rust/commit/584d2697cce38c4aadefbb77577f77dd03b59b2f"}], "stats": {"total": 127, "additions": 107, "deletions": 20}, "files": [{"sha": "cc59e780938c8b8c8400040abea6dc4b292fb75e", "filename": "crates/hir-def/src/attr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/crates%2Fhir-def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/crates%2Fhir-def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr.rs?ref=0ce71dd76fb2732bf4be625d5df0fd99e56ecf78", "patch": "@@ -269,6 +269,10 @@ impl Attrs {\n     pub fn is_proc_macro_derive(&self) -> bool {\n         self.by_key(\"proc_macro_derive\").exists()\n     }\n+\n+    pub fn is_unstable(&self) -> bool {\n+        self.by_key(\"unstable\").exists()\n+    }\n }\n \n use std::slice::Iter as SliceIter;"}, {"sha": "6f23bc5c747297cc7032655c75d4a4cef342605d", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=0ce71dd76fb2732bf4be625d5df0fd99e56ecf78", "patch": "@@ -23,7 +23,7 @@ pub(crate) mod env_vars;\n \n use std::iter;\n \n-use hir::{known, ScopeDef, Variant};\n+use hir::{known, HasAttrs, ScopeDef, Variant};\n use ide_db::{imports::import_assets::LocatedImport, SymbolKind};\n use syntax::ast;\n \n@@ -181,6 +181,9 @@ impl Completions {\n         resolution: hir::ScopeDef,\n         doc_aliases: Vec<syntax::SmolStr>,\n     ) {\n+        if !ctx.check_stability(resolution.attrs(ctx.db).as_deref()) {\n+            return;\n+        }\n         let is_private_editable = match ctx.def_is_visible(&resolution) {\n             Visible::Yes => false,\n             Visible::Editable => true,\n@@ -206,6 +209,9 @@ impl Completions {\n         local_name: hir::Name,\n         resolution: hir::ScopeDef,\n     ) {\n+        if !ctx.check_stability(resolution.attrs(ctx.db).as_deref()) {\n+            return;\n+        }\n         let is_private_editable = match ctx.def_is_visible(&resolution) {\n             Visible::Yes => false,\n             Visible::Editable => true,\n@@ -228,6 +234,9 @@ impl Completions {\n         path_ctx: &PathCompletionCtx,\n         e: hir::Enum,\n     ) {\n+        if !ctx.check_stability(Some(&e.attrs(ctx.db))) {\n+            return;\n+        }\n         e.variants(ctx.db)\n             .into_iter()\n             .for_each(|variant| self.add_enum_variant(ctx, path_ctx, variant, None));\n@@ -241,6 +250,9 @@ impl Completions {\n         local_name: hir::Name,\n         doc_aliases: Vec<syntax::SmolStr>,\n     ) {\n+        if !ctx.check_stability(Some(&module.attrs(ctx.db))) {\n+            return;\n+        }\n         self.add_path_resolution(\n             ctx,\n             path_ctx,\n@@ -257,6 +269,9 @@ impl Completions {\n         mac: hir::Macro,\n         local_name: hir::Name,\n     ) {\n+        if !ctx.check_stability(Some(&mac.attrs(ctx.db))) {\n+            return;\n+        }\n         let is_private_editable = match ctx.is_visible(&mac) {\n             Visible::Yes => false,\n             Visible::Editable => true,\n@@ -280,6 +295,9 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<hir::Name>,\n     ) {\n+        if !ctx.check_stability(Some(&func.attrs(ctx.db))) {\n+            return;\n+        }\n         let is_private_editable = match ctx.is_visible(&func) {\n             Visible::Yes => false,\n             Visible::Editable => true,\n@@ -304,6 +322,9 @@ impl Completions {\n         receiver: Option<hir::Name>,\n         local_name: Option<hir::Name>,\n     ) {\n+        if !ctx.check_stability(Some(&func.attrs(ctx.db))) {\n+            return;\n+        }\n         let is_private_editable = match ctx.is_visible(&func) {\n             Visible::Yes => false,\n             Visible::Editable => true,\n@@ -328,6 +349,9 @@ impl Completions {\n         func: hir::Function,\n         import: LocatedImport,\n     ) {\n+        if !ctx.check_stability(Some(&func.attrs(ctx.db))) {\n+            return;\n+        }\n         let is_private_editable = match ctx.is_visible(&func) {\n             Visible::Yes => false,\n             Visible::Editable => true,\n@@ -348,6 +372,9 @@ impl Completions {\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext<'_>, konst: hir::Const) {\n+        if !ctx.check_stability(Some(&konst.attrs(ctx.db))) {\n+            return;\n+        }\n         let is_private_editable = match ctx.is_visible(&konst) {\n             Visible::Yes => false,\n             Visible::Editable => true,\n@@ -364,6 +391,9 @@ impl Completions {\n         ctx: &CompletionContext<'_>,\n         type_alias: hir::TypeAlias,\n     ) {\n+        if !ctx.check_stability(Some(&type_alias.attrs(ctx.db))) {\n+            return;\n+        }\n         let is_private_editable = match ctx.is_visible(&type_alias) {\n             Visible::Yes => false,\n             Visible::Editable => true,\n@@ -380,6 +410,9 @@ impl Completions {\n         ctx: &CompletionContext<'_>,\n         type_alias: hir::TypeAlias,\n     ) {\n+        if !ctx.check_stability(Some(&type_alias.attrs(ctx.db))) {\n+            return;\n+        }\n         self.add_opt(render_type_alias_with_eq(RenderContext::new(ctx), type_alias));\n     }\n \n@@ -390,6 +423,9 @@ impl Completions {\n         variant: hir::Variant,\n         path: hir::ModPath,\n     ) {\n+        if !ctx.check_stability(Some(&variant.attrs(ctx.db))) {\n+            return;\n+        }\n         if let Some(builder) =\n             render_variant_lit(RenderContext::new(ctx), path_ctx, None, variant, Some(path))\n         {\n@@ -404,6 +440,9 @@ impl Completions {\n         variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n+        if !ctx.check_stability(Some(&variant.attrs(ctx.db))) {\n+            return;\n+        }\n         if let PathCompletionCtx { kind: PathKind::Pat { pat_ctx }, .. } = path_ctx {\n             cov_mark::hit!(enum_variant_pattern_path);\n             self.add_variant_pat(ctx, pat_ctx, Some(path_ctx), variant, local_name);\n@@ -425,6 +464,9 @@ impl Completions {\n         field: hir::Field,\n         ty: &hir::Type,\n     ) {\n+        if !ctx.check_stability(Some(&field.attrs(ctx.db))) {\n+            return;\n+        }\n         let is_private_editable = match ctx.is_visible(&field) {\n             Visible::Yes => false,\n             Visible::Editable => true,\n@@ -448,6 +490,9 @@ impl Completions {\n         path: Option<hir::ModPath>,\n         local_name: Option<hir::Name>,\n     ) {\n+        if !ctx.check_stability(Some(&strukt.attrs(ctx.db))) {\n+            return;\n+        }\n         if let Some(builder) =\n             render_struct_literal(RenderContext::new(ctx), path_ctx, strukt, path, local_name)\n         {\n@@ -462,6 +507,9 @@ impl Completions {\n         path: Option<hir::ModPath>,\n         local_name: Option<hir::Name>,\n     ) {\n+        if !ctx.check_stability(Some(&un.attrs(ctx.db))) {\n+            return;\n+        }\n         let item = render_union_literal(RenderContext::new(ctx), un, path, local_name);\n         self.add_opt(item);\n     }\n@@ -473,6 +521,8 @@ impl Completions {\n         field: usize,\n         ty: &hir::Type,\n     ) {\n+        // Only used for (unnamed) tuples, whose all fields *are* stable. No need to check\n+        // stability here.\n         let item = render_tuple_field(RenderContext::new(ctx), receiver, field, ty);\n         self.add(item);\n     }\n@@ -494,6 +544,9 @@ impl Completions {\n         variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n+        if !ctx.check_stability(Some(&variant.attrs(ctx.db))) {\n+            return;\n+        }\n         self.add_opt(render_variant_pat(\n             RenderContext::new(ctx),\n             pattern_ctx,\n@@ -511,6 +564,9 @@ impl Completions {\n         variant: hir::Variant,\n         path: hir::ModPath,\n     ) {\n+        if !ctx.check_stability(Some(&variant.attrs(ctx.db))) {\n+            return;\n+        }\n         let path = Some(&path);\n         self.add_opt(render_variant_pat(\n             RenderContext::new(ctx),\n@@ -529,6 +585,9 @@ impl Completions {\n         strukt: hir::Struct,\n         local_name: Option<hir::Name>,\n     ) {\n+        if !ctx.check_stability(Some(&strukt.attrs(ctx.db))) {\n+            return;\n+        }\n         self.add_opt(render_struct_pat(RenderContext::new(ctx), pattern_ctx, strukt, local_name));\n     }\n }"}, {"sha": "32d3fb8c624fa85bb1799590ea449a60445de156", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=0ce71dd76fb2732bf4be625d5df0fd99e56ecf78", "patch": "@@ -267,8 +267,10 @@ fn import_on_the_fly(\n             .into_iter()\n             .filter(ns_filter)\n             .filter(|import| {\n-                !ctx.is_item_hidden(&import.item_to_import)\n-                    && !ctx.is_item_hidden(&import.original_item)\n+                let item = &import.item_to_import;\n+                !ctx.is_item_hidden(item)\n+                    && !ctx.is_item_hidden(item)\n+                    && ctx.check_stability(item.attrs(ctx.db).as_deref())\n             })\n             .sorted_by_key(|located_import| {\n                 compute_fuzzy_completion_order_key(\n@@ -315,8 +317,10 @@ fn import_on_the_fly_pat_(\n             .into_iter()\n             .filter(ns_filter)\n             .filter(|import| {\n-                !ctx.is_item_hidden(&import.item_to_import)\n-                    && !ctx.is_item_hidden(&import.original_item)\n+                let item = &import.item_to_import;\n+                !ctx.is_item_hidden(item)\n+                    && !ctx.is_item_hidden(item)\n+                    && ctx.check_stability(item.attrs(ctx.db).as_deref())\n             })\n             .sorted_by_key(|located_import| {\n                 compute_fuzzy_completion_order_key("}, {"sha": "e82908a361e60b97fa0774b3598fa356be3f7d1d", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=0ce71dd76fb2732bf4be625d5df0fd99e56ecf78", "patch": "@@ -150,21 +150,24 @@ fn complete_trait_impl(\n     impl_def: &ast::Impl,\n ) {\n     if let Some(hir_impl) = ctx.sema.to_def(impl_def) {\n-        get_missing_assoc_items(&ctx.sema, impl_def).into_iter().for_each(|item| {\n-            use self::ImplCompletionKind::*;\n-            match (item, kind) {\n-                (hir::AssocItem::Function(func), All | Fn) => {\n-                    add_function_impl(acc, ctx, replacement_range, func, hir_impl)\n+        get_missing_assoc_items(&ctx.sema, impl_def)\n+            .into_iter()\n+            .filter(|item| ctx.check_stability(Some(&item.attrs(ctx.db))))\n+            .for_each(|item| {\n+                use self::ImplCompletionKind::*;\n+                match (item, kind) {\n+                    (hir::AssocItem::Function(func), All | Fn) => {\n+                        add_function_impl(acc, ctx, replacement_range, func, hir_impl)\n+                    }\n+                    (hir::AssocItem::TypeAlias(type_alias), All | TypeAlias) => {\n+                        add_type_alias_impl(acc, ctx, replacement_range, type_alias, hir_impl)\n+                    }\n+                    (hir::AssocItem::Const(const_), All | Const) => {\n+                        add_const_impl(acc, ctx, replacement_range, const_, hir_impl)\n+                    }\n+                    _ => {}\n                 }\n-                (hir::AssocItem::TypeAlias(type_alias), All | TypeAlias) => {\n-                    add_type_alias_impl(acc, ctx, replacement_range, type_alias, hir_impl)\n-                }\n-                (hir::AssocItem::Const(const_), All | Const) => {\n-                    add_const_impl(acc, ctx, replacement_range, const_, hir_impl)\n-                }\n-                _ => {}\n-            }\n-        });\n+            });\n     }\n }\n "}, {"sha": "45be4fb20540cf9f54231740c3e7648ead98e604", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=0ce71dd76fb2732bf4be625d5df0fd99e56ecf78", "patch": "@@ -52,6 +52,9 @@ pub(crate) fn complete_use_path(\n                         )\n                     };\n                     for (name, def) in module_scope {\n+                        if !ctx.check_stability(def.attrs(ctx.db).as_deref()) {\n+                            continue;\n+                        }\n                         let is_name_already_imported = name\n                             .as_text()\n                             .map_or(false, |text| already_imported_names.contains(text.as_str()));"}, {"sha": "d99414fe358295e27d50a50f95dd5a6546762517", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=0ce71dd76fb2732bf4be625d5df0fd99e56ecf78", "patch": "@@ -367,6 +367,8 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) krate: hir::Crate,\n     /// The module of the `scope`.\n     pub(super) module: hir::Module,\n+    /// Whether nightly toolchain is used. Cached since this is looked up a lot.\n+    is_nightly: bool,\n \n     /// The expected name of what we are completing.\n     /// This is usually the parameter name of the function argument we are completing.\n@@ -386,7 +388,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) depth_from_crate_root: usize,\n }\n \n-impl<'a> CompletionContext<'a> {\n+impl CompletionContext<'_> {\n     /// The range of the identifier that is being completed.\n     pub(crate) fn source_range(&self) -> TextRange {\n         let kind = self.original_token.kind();\n@@ -451,6 +453,12 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n+    /// Checks whether this item should be listed in regards to stability. Returns `true` if we should.\n+    pub(crate) fn check_stability(&self, attrs: Option<&hir::Attrs>) -> bool {\n+        let Some(attrs) = attrs else { return true; };\n+        !attrs.is_unstable() || self.is_nightly\n+    }\n+\n     /// Whether the given trait is an operator trait or not.\n     pub(crate) fn is_ops_trait(&self, trait_: hir::Trait) -> bool {\n         match trait_.attrs(self.db).lang() {\n@@ -624,6 +632,11 @@ impl<'a> CompletionContext<'a> {\n         let krate = scope.krate();\n         let module = scope.module();\n \n+        let toolchain = db.crate_graph()[krate.into()].channel;\n+        // `toolchain == None` means we're in some detached files. Since we have no information on\n+        // the toolchain being used, let's just allow unstable items to be listed.\n+        let is_nightly = matches!(toolchain, Some(base_db::ReleaseChannel::Nightly) | None);\n+\n         let mut locals = FxHashMap::default();\n         scope.process_all_names(&mut |name, scope| {\n             if let ScopeDef::Local(local) = scope {\n@@ -643,6 +656,7 @@ impl<'a> CompletionContext<'a> {\n             token,\n             krate,\n             module,\n+            is_nightly,\n             expected_name,\n             expected_type,\n             qualifier_ctx,"}]}