{"sha": "e2f3577131d3c87a5a0c0517d778bfe7834dc966", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZjM1NzcxMzFkM2M4N2E1YTBjMDUxN2Q3NzhiZmU3ODM0ZGM5NjY=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-05-02T00:02:47Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-05T10:46:43Z"}, "message": "wellformed wc", "tree": {"sha": "d1c7f6a832b97b955169170266434bddd2674ce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c7f6a832b97b955169170266434bddd2674ce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2f3577131d3c87a5a0c0517d778bfe7834dc966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f3577131d3c87a5a0c0517d778bfe7834dc966", "html_url": "https://github.com/rust-lang/rust/commit/e2f3577131d3c87a5a0c0517d778bfe7834dc966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2f3577131d3c87a5a0c0517d778bfe7834dc966/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c865d3934cbcf5c0d77d955a73711bd3700a57c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c865d3934cbcf5c0d77d955a73711bd3700a57c7", "html_url": "https://github.com/rust-lang/rust/commit/c865d3934cbcf5c0d77d955a73711bd3700a57c7"}], "stats": {"total": 102, "additions": 80, "deletions": 22}, "files": [{"sha": "bac0381f0b00541fd30cbb398c85b08bd24e5a2f", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 80, "deletions": 22, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/e2f3577131d3c87a5a0c0517d778bfe7834dc966/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f3577131d3c87a5a0c0517d778bfe7834dc966/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=e2f3577131d3c87a5a0c0517d778bfe7834dc966", "patch": "@@ -12,8 +12,10 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n use rustc::hir::{self, ImplPolarity};\n-use rustc::traits::{Clause, Clauses, DomainGoal, Goal, PolyDomainGoal, ProgramClause,\n-                    WhereClause, FromEnv, WellFormed};\n+use rustc::traits::{\n+    Clause, Clauses, DomainGoal, FromEnv, Goal, PolyDomainGoal, ProgramClause, WellFormed,\n+    WhereClause,\n+};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Slice, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -101,39 +103,52 @@ impl<'tcx> Lower<PolyDomainGoal<'tcx>> for ty::Predicate<'tcx> {\n             Predicate::RegionOutlives(predicate) => predicate.lower(),\n             Predicate::TypeOutlives(predicate) => predicate.lower(),\n             Predicate::Projection(predicate) => predicate.lower(),\n-            Predicate::WellFormed(ty) => ty::Binder::dummy(\n-                DomainGoal::WellFormed(WellFormed::Ty(*ty))\n-            ),\n-            Predicate::ObjectSafe(..) |\n-            Predicate::ClosureKind(..) |\n-            Predicate::Subtype(..) |\n-            Predicate::ConstEvaluatable(..) => {\n-                unimplemented!()\n+            Predicate::WellFormed(ty) => {\n+                ty::Binder::dummy(DomainGoal::WellFormed(WellFormed::Ty(*ty)))\n             }\n+            Predicate::ObjectSafe(..)\n+            | Predicate::ClosureKind(..)\n+            | Predicate::Subtype(..)\n+            | Predicate::ConstEvaluatable(..) => unimplemented!(),\n         }\n     }\n }\n \n-/// Transforms an existing goal into a FromEnv goal.\n-///\n /// Used for lowered where clauses (see rustc guide).\n trait IntoFromEnvGoal {\n+    // Transforms an existing goal into a FromEnv goal.\n     fn into_from_env_goal(self) -> Self;\n }\n \n-impl<'tcx> IntoFromEnvGoal for DomainGoal<'tcx> {\n+trait IntoWellFormedGoal {\n+    fn into_wellformed_goal(self) -> Self;\n+}\n+\n+impl<'tcx> IntoGoal for DomainGoal<'tcx> {\n+    // Transforms an existing goal into a WellFormed goal.\n     fn into_from_env_goal(self) -> DomainGoal<'tcx> {\n         use self::WhereClause::*;\n \n         match self {\n-            DomainGoal::Holds(Implemented(trait_ref)) => DomainGoal::FromEnv(\n-                FromEnv::Trait(trait_ref)\n-            ),\n+            DomainGoal::Holds(Implemented(trait_ref)) => {\n+                DomainGoal::FromEnv(FromEnv::Trait(trait_ref))\n+            }\n             other => other,\n         }\n     }\n }\n \n+impl<'tcx> IntoFromEnvGoal for DomainGoal<'tcx> {\n+    fn into_wellformed_goal(self) -> DomainGoal<'tcx> {\n+        use self::DomainGoal::*;\n+        match self {\n+            Holds(wc_atom) => WellFormed(wc_atom),\n+            WellFormed(..) | FromEnv(..) | WellFormedTy(..) | FromEnvTy(..) | Normalize(..)\n+            | RegionOutlives(..) | TypeOutlives(..) => self,\n+        }\n+    }\n+}\n+\n crate fn program_clauses_for<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n@@ -230,7 +245,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     // `Implemented(Self: Trait<P1..Pn>)`\n     let impl_trait: DomainGoal = trait_pred.lower();\n \n-     // `FromEnv(Self: Trait<P1..Pn>)`\n+    // `FromEnv(Self: Trait<P1..Pn>)`\n     let from_env_goal = impl_trait.into_from_env_goal().into_goal();\n     let hypotheses = tcx.intern_goals(&[from_env_goal]);\n \n@@ -262,10 +277,50 @@ fn program_clauses_for_trait<'a, 'tcx>(\n             goal: goal.into_from_env_goal(),\n             hypotheses,\n         }))\n+        .map(|wc| implied_bound_from_trait(tcx, trait_pred, wc));\n+    let wellformed_clauses = where_clauses[1..]\n+        .into_iter()\n+        .map(|wc| wellformed_from_bound(tcx, trait_pred, wc));\n+    tcx.mk_clauses(\n+        clauses\n+            .chain(implied_bound_clauses)\n+            .chain(wellformed_clauses),\n+    )\n+}\n \n-        .map(Clause::ForAll);\n+fn wellformed_from_bound<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    trait_pred: ty::TraitPredicate<'tcx>,\n+    where_clause: &ty::Predicate<'tcx>,\n+) -> Clause<'tcx> {\n+    // Rule WellFormed-TraitRef\n+    //\n+    // For each where clause WC:\n+    // forall<Self, P1..Pn> {\n+    //   WellFormed(Self: Trait<P1..Pn>) :- Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n+    // }\n \n-    tcx.mk_clauses(clauses.chain(implied_bound_clauses))\n+    // WellFormed(Self: Trait<P1..Pn>)\n+    let wellformed_trait = DomainGoal::WellFormed(WhereClauseAtom::Implemented(trait_pred));\n+    // Impemented(Self: Trait<P1..Pn>)\n+    let impl_trait = ty::Binder::dummy(DomainGoal::Holds(WhereClauseAtom::Implemented(trait_pred)));\n+    // WellFormed(WC)\n+    let wellformed_wc = where_clause\n+        .lower()\n+        .map_bound(|wc| wc.into_wellformed_goal());\n+    // Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n+    let mut where_clauses = vec![impl_trait];\n+    where_clauses.push(wellformed_wc);\n+    Clause::ForAll(where_clause.lower().map_bound(|_| {\n+        ProgramClause {\n+            goal: wellformed_trait,\n+            hypotheses: tcx.mk_goals(\n+                where_clauses\n+                    .into_iter()\n+                    .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+            ),\n+        }\n+    }))\n }\n \n fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Clauses<'tcx> {\n@@ -307,7 +362,6 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Clauses<'tcx> {\n-\n     // Rule WellFormed-Type\n     //\n     // `struct Ty<P1..Pn> where WC1, ..., WCm`\n@@ -328,7 +382,10 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n     let well_formed = ProgramClause {\n         goal: DomainGoal::WellFormed(WellFormed::Ty(ty)),\n         hypotheses: tcx.mk_goals(\n-            where_clauses.iter().cloned().map(|wc| Goal::from_poly_domain_goal(wc, tcx))\n+            where_clauses\n+                .iter()\n+                .cloned()\n+                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n         ),\n     };\n \n@@ -459,7 +516,8 @@ impl<'a, 'tcx> ClauseDumper<'a, 'tcx> {\n             }\n \n             if let Some(clauses) = clauses {\n-                let mut err = self.tcx\n+                let mut err = self\n+                    .tcx\n                     .sess\n                     .struct_span_err(attr.span, \"program clause dump\");\n "}]}