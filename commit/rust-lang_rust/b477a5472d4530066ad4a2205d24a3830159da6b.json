{"sha": "b477a5472d4530066ad4a2205d24a3830159da6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NzdhNTQ3MmQ0NTMwMDY2YWQ0YTIyMDVkMjRhMzgzMDE1OWRhNmI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-11T14:35:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-14T16:46:22Z"}, "message": "Avoid file name formatting when debug file writing is disabled", "tree": {"sha": "de9c25d3c0e926aa0cd3fa36f908c4a7431ab487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de9c25d3c0e926aa0cd3fa36f908c4a7431ab487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b477a5472d4530066ad4a2205d24a3830159da6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b477a5472d4530066ad4a2205d24a3830159da6b", "html_url": "https://github.com/rust-lang/rust/commit/b477a5472d4530066ad4a2205d24a3830159da6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b477a5472d4530066ad4a2205d24a3830159da6b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56bf873110b9fdcc62534022e9161c515bf0f949", "url": "https://api.github.com/repos/rust-lang/rust/commits/56bf873110b9fdcc62534022e9161c515bf0f949", "html_url": "https://github.com/rust-lang/rust/commit/56bf873110b9fdcc62534022e9161c515bf0f949"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "61e0206f105348d9730c95c423e436f2f094190c", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b477a5472d4530066ad4a2205d24a3830159da6b/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b477a5472d4530066ad4a2205d24a3830159da6b/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=b477a5472d4530066ad4a2205d24a3830159da6b", "patch": "@@ -147,7 +147,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     if let Some(disasm) = &context.mach_compile_result.as_ref().unwrap().disasm {\n         crate::pretty_clif::write_ir_file(\n             tcx,\n-            &format!(\"{}.vcode\", tcx.symbol_name(instance).name),\n+            || format!(\"{}.vcode\", tcx.symbol_name(instance).name),\n             |file| file.write_all(disasm.as_bytes()),\n         )\n     }"}, {"sha": "158811c5eaf4903cadf13709c9abba67cf8f8b1c", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b477a5472d4530066ad4a2205d24a3830159da6b/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b477a5472d4530066ad4a2205d24a3830159da6b/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=b477a5472d4530066ad4a2205d24a3830159da6b", "patch": "@@ -207,7 +207,7 @@ pub(crate) fn should_write_ir(tcx: TyCtxt<'_>) -> bool {\n \n pub(crate) fn write_ir_file(\n     tcx: TyCtxt<'_>,\n-    name: &str,\n+    name: impl FnOnce() -> String,\n     write: impl FnOnce(&mut dyn Write) -> std::io::Result<()>,\n ) {\n     if !should_write_ir(tcx) {\n@@ -222,7 +222,7 @@ pub(crate) fn write_ir_file(\n         res @ Err(_) => res.unwrap(),\n     }\n \n-    let clif_file_name = clif_output_dir.join(name);\n+    let clif_file_name = clif_output_dir.join(name());\n \n     let res = std::fs::File::create(clif_file_name).and_then(|mut file| write(&mut file));\n     if let Err(err) = res {\n@@ -238,27 +238,31 @@ pub(crate) fn write_clif_file<'tcx>(\n     context: &cranelift_codegen::Context,\n     mut clif_comments: &CommentWriter,\n ) {\n-    write_ir_file(tcx, &format!(\"{}.{}.clif\", tcx.symbol_name(instance).name, postfix), |file| {\n-        let value_ranges =\n-            isa.map(|isa| context.build_value_labels_ranges(isa).expect(\"value location ranges\"));\n+    write_ir_file(\n+        tcx,\n+        || format!(\"{}.{}.clif\", tcx.symbol_name(instance).name, postfix),\n+        |file| {\n+            let value_ranges = isa\n+                .map(|isa| context.build_value_labels_ranges(isa).expect(\"value location ranges\"));\n \n-        let mut clif = String::new();\n-        cranelift_codegen::write::decorate_function(\n-            &mut clif_comments,\n-            &mut clif,\n-            &context.func,\n-            &DisplayFunctionAnnotations { isa, value_ranges: value_ranges.as_ref() },\n-        )\n-        .unwrap();\n+            let mut clif = String::new();\n+            cranelift_codegen::write::decorate_function(\n+                &mut clif_comments,\n+                &mut clif,\n+                &context.func,\n+                &DisplayFunctionAnnotations { isa, value_ranges: value_ranges.as_ref() },\n+            )\n+            .unwrap();\n \n-        writeln!(file, \"test compile\")?;\n-        writeln!(file, \"set is_pic\")?;\n-        writeln!(file, \"set enable_simd\")?;\n-        writeln!(file, \"target {} haswell\", crate::target_triple(tcx.sess))?;\n-        writeln!(file)?;\n-        file.write_all(clif.as_bytes())?;\n-        Ok(())\n-    });\n+            writeln!(file, \"test compile\")?;\n+            writeln!(file, \"set is_pic\")?;\n+            writeln!(file, \"set enable_simd\")?;\n+            writeln!(file, \"target {} haswell\", crate::target_triple(tcx.sess))?;\n+            writeln!(file)?;\n+            file.write_all(clif.as_bytes())?;\n+            Ok(())\n+        },\n+    );\n }\n \n impl fmt::Debug for FunctionCx<'_, '_, '_> {"}]}