{"sha": "15a310345d955f06dcb989a510d6613be2443a6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTMxMDM0NWQ5NTVmMDZkY2I5ODlhNTEwZDY2MTNiZTI0NDNhNmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-22T14:27:25Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-22T16:04:33Z"}, "message": "Improve local ir comments", "tree": {"sha": "3c85c9221bbe9b0f40f53090ec9bb6be7e44bada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c85c9221bbe9b0f40f53090ec9bb6be7e44bada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a310345d955f06dcb989a510d6613be2443a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a310345d955f06dcb989a510d6613be2443a6e", "html_url": "https://github.com/rust-lang/rust/commit/15a310345d955f06dcb989a510d6613be2443a6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a310345d955f06dcb989a510d6613be2443a6e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df641e1679882274e8eb82b45d60f6fe2250952b", "url": "https://api.github.com/repos/rust-lang/rust/commits/df641e1679882274e8eb82b45d60f6fe2250952b", "html_url": "https://github.com/rust-lang/rust/commit/df641e1679882274e8eb82b45d60f6fe2250952b"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "41c74ef4a33405722de01f3b79a25a622fe227a6", "filename": "src/abi/comments.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/15a310345d955f06dcb989a510d6613be2443a6e/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a310345d955f06dcb989a510d6613be2443a6e/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=15a310345d955f06dcb989a510d6613be2443a6e", "patch": "@@ -45,7 +45,7 @@ pub fn add_arg_comment<'tcx>(\n pub fn add_locals_header_comment(fx: &mut FunctionCx<impl Backend>) {\n     fx.add_global_comment(String::new());\n     fx.add_global_comment(format!(\n-        \"kind  local ty                   size  align (abi,pref)\"\n+        \"kind  local ty                              size align (abi,pref)\"\n     ));\n }\n \n@@ -63,35 +63,33 @@ pub fn add_local_place_comments<'tcx>(\n         fields: _,\n         largest_niche: _,\n     } = details;\n-    match *place.inner() {\n+\n+    let (kind, extra) = match *place.inner() {\n         CPlaceInner::Var(var) => {\n             assert_eq!(local, var);\n-            fx.add_global_comment(format!(\n-                \"ssa   {:5} {:20} {:4}b {}, {}\",\n-                format!(\"{:?}\", local),\n-                format!(\"{:?}\", ty),\n-                size.bytes(),\n-                align.abi.bytes(),\n-                align.pref.bytes(),\n-            ));\n+            (\"ssa\", std::borrow::Cow::Borrowed(\"\"))\n         }\n-        CPlaceInner::NoPlace => fx.add_global_comment(format!(\n-            \"zst   {:5} {:20} {:4}b {}, {}\",\n-            format!(\"{:?}\", local),\n-            format!(\"{:?}\", ty),\n-            size.bytes(),\n-            align.abi.bytes(),\n-            align.pref.bytes(),\n-        )),\n-        CPlaceInner::Addr(ptr, None) => fx.add_global_comment(format!(\n-            \"reuse {:5} {:20} {:4}b {}, {}              storage={:?}\",\n-            format!(\"{:?}\", local),\n-            format!(\"{:?}\", ty),\n-            size.bytes(),\n-            align.abi.bytes(),\n-            align.pref.bytes(),\n-            ptr,\n-        )),\n+        CPlaceInner::NoPlace => (\"zst\", \"\".into()),\n+        CPlaceInner::Addr(ptr, None) => match ptr.base_and_offset() {\n+            (crate::pointer::PointerBase::Addr(addr), offset) => {\n+                (\"reuse\", format!(\"storage={}{}\", addr, offset).into())\n+            }\n+            (crate::pointer::PointerBase::Stack(stack_slot), offset) => {\n+                (\"stack\", format!(\"storage={}{}\", stack_slot, offset).into())\n+            }\n+        },\n         CPlaceInner::Addr(_, Some(_)) => unreachable!(),\n-    }\n+    };\n+\n+    fx.add_global_comment(format!(\n+        \"{:<5} {:5} {:30} {:4}b {}, {}{}{}\",\n+        kind,\n+        format!(\"{:?}\", local),\n+        format!(\"{:?}\", ty),\n+        size.bytes(),\n+        align.abi.bytes(),\n+        align.pref.bytes(),\n+        if extra.is_empty() { \"\" } else { \"              \" },\n+        extra,\n+    ));\n }"}, {"sha": "f47d5e9be9ba1c795703a25c4d51ce79c14201af", "filename": "src/pointer.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15a310345d955f06dcb989a510d6613be2443a6e/src%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a310345d955f06dcb989a510d6613be2443a6e/src%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpointer.rs?ref=15a310345d955f06dcb989a510d6613be2443a6e", "patch": "@@ -9,7 +9,7 @@ pub struct Pointer {\n }\n \n #[derive(Copy, Clone, Debug)]\n-enum PointerBase {\n+pub enum PointerBase {\n     Addr(Value),\n     Stack(StackSlot),\n }\n@@ -37,6 +37,10 @@ impl Pointer {\n         }\n     }\n \n+    pub fn base_and_offset(self) -> (PointerBase, Offset32) {\n+        (self.base, self.offset)\n+    }\n+\n     pub fn get_addr<'a, 'tcx>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> Value {\n         match self.base {\n             PointerBase::Addr(base_addr) => {"}]}