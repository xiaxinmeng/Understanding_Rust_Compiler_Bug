{"sha": "1607064cfed6d7d4d963de8bb038079592b20995", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MDcwNjRjZmVkNmQ3ZDRkOTYzZGU4YmIwMzgwNzk1OTJiMjA5OTU=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-17T16:45:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-21T16:54:07Z"}, "message": "repair macro docs\n\nIn f1ad425199b0d89dab275a8c8f6f29a73d316f70, I changed the handling\nof macros, to prevent macro invocations from occurring in fully expanded\nsource. Instead, I added a side table. It contained only the\nspans of the macros, because this was the only information required\nin order to make macro export work.\n\nHowever, librustdoc was also affected by this change, since it\nextracts macro information in a similar way. As a result of the earlier\nchange, exported macros were no longer documented.\n\nIn order to repair this, I've adjusted the side table to contain whole\nitems, rather than just the spans.", "tree": {"sha": "cb4afebfdfe38a721ebac78152b7b6cc65d20201", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb4afebfdfe38a721ebac78152b7b6cc65d20201"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1607064cfed6d7d4d963de8bb038079592b20995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1607064cfed6d7d4d963de8bb038079592b20995", "html_url": "https://github.com/rust-lang/rust/commit/1607064cfed6d7d4d963de8bb038079592b20995", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1607064cfed6d7d4d963de8bb038079592b20995/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8c9d21130ff2f25b18978119e1f123a219af056", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c9d21130ff2f25b18978119e1f123a219af056", "html_url": "https://github.com/rust-lang/rust/commit/e8c9d21130ff2f25b18978119e1f123a219af056"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "7997af1ee5e11980e971a569c5b4548d8db70260", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1607064cfed6d7d4d963de8bb038079592b20995/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1607064cfed6d7d4d963de8bb038079592b20995/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=1607064cfed6d7d4d963de8bb038079592b20995", "patch": "@@ -1618,8 +1618,8 @@ fn encode_macro_defs(ecx: &EncodeContext,\n                      krate: &Crate,\n                      ebml_w: &mut Encoder) {\n     ebml_w.start_tag(tag_exported_macros);\n-    for span in krate.exported_macros.iter() {\n-        encode_macro_def(ecx, ebml_w, span);\n+    for item in krate.exported_macros.iter() {\n+        encode_macro_def(ecx, ebml_w, &item.span);\n     }\n     ebml_w.end_tag();\n }"}, {"sha": "594a235339669694357c7693e11a061dfa1cf6c7", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1607064cfed6d7d4d963de8bb038079592b20995/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1607064cfed6d7d4d963de8bb038079592b20995/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=1607064cfed6d7d4d963de8bb038079592b20995", "patch": "@@ -26,6 +26,14 @@ use std::gc::{Gc, GC};\n use core;\n use doctree::*;\n \n+// looks to me like the first two of these are actually\n+// output parameters, maybe only mutated once; perhaps\n+// better simply to have the visit method return a tuple\n+// containing them?\n+\n+// also, is there some reason that this doesn't use the 'visit'\n+// framework from syntax?\n+\n pub struct RustdocVisitor<'a> {\n     pub module: Module,\n     pub attrs: Vec<ast::Attribute>,\n@@ -64,6 +72,9 @@ impl<'a> RustdocVisitor<'a> {\n                                               ast::CRATE_NODE_ID,\n                                               &krate.module,\n                                               None);\n+        // attach the crate's exported macros to the top-level module:\n+        self.module.macros = krate.exported_macros.iter()\n+            .map(|it| self.visit_macro(&**it)).collect();\n         self.module.is_crate = true;\n     }\n \n@@ -323,15 +334,20 @@ impl<'a> RustdocVisitor<'a> {\n             ast::ItemForeignMod(ref fm) => {\n                 om.foreigns.push(fm.clone());\n             }\n-            ast::ItemMac(ref _m) => {\n-                om.macros.push(Macro {\n-                    id: item.id,\n-                    attrs: item.attrs.iter().map(|x| *x).collect(),\n-                    name: item.ident,\n-                    where: item.span,\n-                    stab: self.stability(item.id),\n-                })\n+            ast::ItemMac(_) => {\n+                fail!(\"rustdoc: macros should be gone, after expansion\");\n             }\n         }\n     }\n+\n+    // convert each exported_macro into a doc item\n+    fn visit_macro(&self, item: &ast::Item) -> Macro {\n+        Macro {\n+            id: item.id,\n+            attrs: item.attrs.iter().map(|x| *x).collect(),\n+            name: item.ident,\n+            where: item.span,\n+            stab: self.stability(item.id),\n+        }\n+    }\n }"}, {"sha": "614bbd1c3ed00f4e5592891798e2ee22aca65d68", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1607064cfed6d7d4d963de8bb038079592b20995/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1607064cfed6d7d4d963de8bb038079592b20995/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1607064cfed6d7d4d963de8bb038079592b20995", "patch": "@@ -256,7 +256,7 @@ pub struct Crate {\n     pub attrs: Vec<Attribute>,\n     pub config: CrateConfig,\n     pub span: Span,\n-    pub exported_macros: Vec<Span>\n+    pub exported_macros: Vec<Gc<Item>>\n }\n \n pub type MetaItem = Spanned<MetaItem_>;"}, {"sha": "5341f0c2d61b26ba44c5a12fcb0350db637eed09", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1607064cfed6d7d4d963de8bb038079592b20995/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1607064cfed6d7d4d963de8bb038079592b20995/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1607064cfed6d7d4d963de8bb038079592b20995", "patch": "@@ -104,9 +104,9 @@ pub type IdentMacroExpanderFn =\n /// just into the compiler's internal macro table, for `make_def`).\n pub trait MacResult {\n     /// Define a new macro.\n-    // this should go away; the idea that a macro might expand into\n-    // either a macro definition or an expression, depending on what\n-    // the context wants, is kind of silly.\n+    // this particular flavor should go away; the idea that a macro might\n+    // expand into either a macro definition or an expression, depending\n+    // on what the context wants, is kind of silly.\n     fn make_def(&self) -> Option<MacroDef> {\n         None\n     }\n@@ -431,7 +431,7 @@ pub struct ExtCtxt<'a> {\n \n     pub mod_path: Vec<ast::Ident> ,\n     pub trace_mac: bool,\n-    pub exported_macros: Vec<codemap::Span>\n+    pub exported_macros: Vec<Gc<ast::Item>>\n }\n \n impl<'a> ExtCtxt<'a> {\n@@ -562,9 +562,6 @@ impl<'a> ExtCtxt<'a> {\n     pub fn name_of(&self, st: &str) -> ast::Name {\n         token::intern(st)\n     }\n-    pub fn push_exported_macro(&mut self, span: codemap::Span) {\n-        self.exported_macros.push(span);\n-    }\n }\n \n /// Extract a string literal from the macro expanded version of `expr`,"}, {"sha": "c10f3ce07749b49399d42924096023a49e844f27", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1607064cfed6d7d4d963de8bb038079592b20995/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1607064cfed6d7d4d963de8bb038079592b20995/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1607064cfed6d7d4d963de8bb038079592b20995", "patch": "@@ -536,7 +536,7 @@ fn expand_item_mac(it: Gc<ast::Item>, fld: &mut MacroExpander)\n             // create issue to recommend refactoring here?\n             fld.extsbox.insert(intern(name.as_slice()), ext);\n             if attr::contains_name(it.attrs.as_slice(), \"macro_export\") {\n-                fld.cx.push_exported_macro(it.span);\n+                fld.cx.exported_macros.push(it);\n             }\n             SmallVector::zero()\n         }\n@@ -1039,7 +1039,7 @@ pub struct ExportedMacros {\n pub fn expand_crate(parse_sess: &parse::ParseSess,\n                     cfg: ExpansionConfig,\n                     // these are the macros being imported to this crate:\n-                    macros: Vec<ExportedMacros>,\n+                    imported_macros: Vec<ExportedMacros>,\n                     user_exts: Vec<NamedSyntaxExtension>,\n                     c: Crate) -> Crate {\n     let mut cx = ExtCtxt::new(parse_sess, c.config.clone(), cfg);\n@@ -1048,7 +1048,7 @@ pub fn expand_crate(parse_sess: &parse::ParseSess,\n         cx: &mut cx,\n     };\n \n-    for ExportedMacros { crate_name, macros } in macros.move_iter() {\n+    for ExportedMacros { crate_name, macros } in imported_macros.move_iter() {\n         let name = format!(\"<{} macros>\", token::get_ident(crate_name))\n             .into_string();\n "}, {"sha": "271eee7d08a039db2a196b26630cef891698bb28", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1607064cfed6d7d4d963de8bb038079592b20995/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1607064cfed6d7d4d963de8bb038079592b20995/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1607064cfed6d7d4d963de8bb038079592b20995", "patch": "@@ -752,7 +752,7 @@ pub fn noop_fold_crate<T: Folder>(c: Crate, folder: &mut T) -> Crate {\n         attrs: c.attrs.iter().map(|x| folder.fold_attribute(*x)).collect(),\n         config: c.config.iter().map(|x| fold_meta_item_(*x, folder)).collect(),\n         span: folder.new_span(c.span),\n-        exported_macros: c.exported_macros.iter().map(|sp| folder.new_span(*sp)).collect(),\n+        exported_macros: c.exported_macros\n     }\n }\n "}]}