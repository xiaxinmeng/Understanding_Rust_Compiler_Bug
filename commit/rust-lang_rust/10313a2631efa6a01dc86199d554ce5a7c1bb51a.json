{"sha": "10313a2631efa6a01dc86199d554ce5a7c1bb51a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMzEzYTI2MzFlZmE2YTAxZGM4NjE5OWQ1NTRjZTVhN2MxYmI1MWE=", "commit": {"author": {"name": "Vardan Margaryan", "email": "v.t.margaryan@gmail.com", "date": "2020-05-15T19:33:37Z"}, "committer": {"name": "Vardan Margaryan", "email": "v.t.margaryan@gmail.com", "date": "2020-05-15T19:33:37Z"}, "message": "Revert \"Fix cases of match_wildcard_for_single_variants lint when it is spanned on Option\"\n\nThis reverts commit 494830797744c09d6de3b2b2452ab185d2204005.", "tree": {"sha": "557f68c4e35ee8ac261f22002bb5cad938f69112", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/557f68c4e35ee8ac261f22002bb5cad938f69112"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10313a2631efa6a01dc86199d554ce5a7c1bb51a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10313a2631efa6a01dc86199d554ce5a7c1bb51a", "html_url": "https://github.com/rust-lang/rust/commit/10313a2631efa6a01dc86199d554ce5a7c1bb51a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10313a2631efa6a01dc86199d554ce5a7c1bb51a/comments", "author": {"login": "vtmargaryan", "id": 8739550, "node_id": "MDQ6VXNlcjg3Mzk1NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8739550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vtmargaryan", "html_url": "https://github.com/vtmargaryan", "followers_url": "https://api.github.com/users/vtmargaryan/followers", "following_url": "https://api.github.com/users/vtmargaryan/following{/other_user}", "gists_url": "https://api.github.com/users/vtmargaryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/vtmargaryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vtmargaryan/subscriptions", "organizations_url": "https://api.github.com/users/vtmargaryan/orgs", "repos_url": "https://api.github.com/users/vtmargaryan/repos", "events_url": "https://api.github.com/users/vtmargaryan/events{/privacy}", "received_events_url": "https://api.github.com/users/vtmargaryan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vtmargaryan", "id": 8739550, "node_id": "MDQ6VXNlcjg3Mzk1NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8739550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vtmargaryan", "html_url": "https://github.com/vtmargaryan", "followers_url": "https://api.github.com/users/vtmargaryan/followers", "following_url": "https://api.github.com/users/vtmargaryan/following{/other_user}", "gists_url": "https://api.github.com/users/vtmargaryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/vtmargaryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vtmargaryan/subscriptions", "organizations_url": "https://api.github.com/users/vtmargaryan/orgs", "repos_url": "https://api.github.com/users/vtmargaryan/repos", "events_url": "https://api.github.com/users/vtmargaryan/events{/privacy}", "received_events_url": "https://api.github.com/users/vtmargaryan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c59cd5f2110ff90a256f0948f05716403e84b85", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c59cd5f2110ff90a256f0948f05716403e84b85", "html_url": "https://github.com/rust-lang/rust/commit/1c59cd5f2110ff90a256f0948f05716403e84b85"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "81ddc8c0067c7184dd0e35af2bd5129724e2e7d2", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=10313a2631efa6a01dc86199d554ce5a7c1bb51a", "patch": "@@ -139,7 +139,6 @@ impl Constant {\n                 .find(|r| r.map_or(true, |o| o != Ordering::Equal))\n                 .unwrap_or_else(|| Some(l.len().cmp(&r.len()))),\n             (&Self::Repeat(ref lv, ref ls), &Self::Repeat(ref rv, ref rs)) => {\n-                #[allow(clippy::match_wildcard_for_single_variants)]\n                 match Self::partial_cmp(tcx, cmp_type, lv, rv) {\n                     Some(Equal) => Some(ls.cmp(rs)),\n                     x => x,\n@@ -355,14 +354,14 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             (Some(Constant::Vec(vec)), Some(Constant::Int(index))) => match vec.get(index as usize) {\n                 Some(Constant::F32(x)) => Some(Constant::F32(*x)),\n                 Some(Constant::F64(x)) => Some(Constant::F64(*x)),\n-                Some(_) | None => None,\n+                _ => None,\n             },\n             (Some(Constant::Vec(vec)), _) => {\n                 if !vec.is_empty() && vec.iter().all(|x| *x == vec[0]) {\n                     match vec.get(0) {\n                         Some(Constant::F32(x)) => Some(Constant::F32(*x)),\n                         Some(Constant::F64(x)) => Some(Constant::F64(*x)),\n-                        Some(_) | None => None,\n+                        _ => None,\n                     }\n                 } else {\n                     None\n@@ -533,7 +532,7 @@ pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n                         })\n                         .collect::<Option<Vec<Constant>>>()\n                         .map(Constant::Vec),\n-                    Some(_) | None => None,\n+                    _ => None,\n                 },\n                 ty::Float(FloatTy::F64) => match miri_to_const(len) {\n                     Some(Constant::Int(len)) => alloc\n@@ -547,7 +546,7 @@ pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n                         })\n                         .collect::<Option<Vec<Constant>>>()\n                         .map(Constant::Vec),\n-                    Some(_) | None => None,\n+                    _ => None,\n                 },\n                 // FIXME: implement other array type conversions.\n                 _ => None,"}, {"sha": "1ec60a0e6e67ac9e00c42e4920d438fafd25ad8c", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=10313a2631efa6a01dc86199d554ce5a7c1bb51a", "patch": "@@ -95,12 +95,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n     match map.find(id) {\n         Some(Node::Binding(_)) => (),\n-        Some(_) | None => return false,\n+        _ => return false,\n     }\n \n     match map.find(map.get_parent_node(id)) {\n         Some(Node::Param(_)) => true,\n-        Some(_) | None => false,\n+        _ => false,\n     }\n }\n "}, {"sha": "86317fb8bd5c4767b9ed5d7a4e9543b7fc8ed17c", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=10313a2631efa6a01dc86199d554ce5a7c1bb51a", "patch": "@@ -410,7 +410,7 @@ fn is_zero(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n         Some(Constant::Int(i)) => i == 0,\n         Some(Constant::F32(f)) => f == 0.0,\n         Some(Constant::F64(f)) => f == 0.0,\n-        Some(_) | None => false,\n+        _ => false,\n     }\n }\n "}, {"sha": "0bc6b70855ba6b98c2d476c228f3a76dbdaeef7a", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=10313a2631efa6a01dc86199d554ce5a7c1bb51a", "patch": "@@ -2154,7 +2154,7 @@ fn is_loop_nested(cx: &LateContext<'_, '_>, loop_expr: &Expr<'_>, iter_expr: &Ex\n                 }\n             },\n             Some(Node::Stmt(_)) => (),\n-            Some(_) | None => {\n+            _ => {\n                 return false;\n             },\n         }"}, {"sha": "e1d524c2231e4841bb1c91366c92a240f1156f0e", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=10313a2631efa6a01dc86199d554ce5a7c1bb51a", "patch": "@@ -509,7 +509,7 @@ fn is_allowed<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) -> boo\n             Constant::F64(f) => *f == 0.0 || (*f).is_infinite(),\n             _ => false,\n         }),\n-        Some(_) | None => false,\n+        _ => false,\n     }\n }\n "}, {"sha": "4ca90455bc4d1e81b44bbd1c8fdc51e61a99561a", "filename": "clippy_lints/src/modulo_arithmetic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs?ref=10313a2631efa6a01dc86199d554ce5a7c1bb51a", "patch": "@@ -37,7 +37,6 @@ struct OperandInfo {\n }\n \n fn analyze_operand(operand: &Expr<'_>, cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<OperandInfo> {\n-    #[allow(clippy::match_wildcard_for_single_variants)]\n     match constant(cx, cx.tables, operand) {\n         Some((Constant::Int(v), _)) => match cx.tables.expr_ty(expr).kind {\n             ty::Int(ity) => {"}, {"sha": "3b8ef18bfab8672a3dd4405655956d5002779ee8", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10313a2631efa6a01dc86199d554ce5a7c1bb51a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=10313a2631efa6a01dc86199d554ce5a7c1bb51a", "patch": "@@ -370,7 +370,6 @@ pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'_, 'tcx>, hir_id: HirId) -> O\n \n /// Checks whether this type implements `Drop`.\n pub fn has_drop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    #[allow(clippy::match_wildcard_for_single_variants)]\n     match ty.ty_adt_def() {\n         Some(def) => def.has_dtor(cx.tcx),\n         _ => false,\n@@ -445,7 +444,6 @@ pub fn is_entrypoint_fn(cx: &LateContext<'_, '_>, def_id: DefId) -> bool {\n /// Gets the name of the item the expression is in, if available.\n pub fn get_item_name(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<Name> {\n     let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n-    #[allow(clippy::match_wildcard_for_single_variants)]\n     match cx.tcx.hir().find(parent_id) {\n         Some(\n             Node::Item(Item { ident, .. })"}]}