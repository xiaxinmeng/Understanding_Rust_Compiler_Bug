{"sha": "87f58a1a4fb0a95973add9ff8c0c8e3439599e8a", "node_id": "C_kwDOAAsO6NoAKDg3ZjU4YTFhNGZiMGE5NTk3M2FkZDlmZjhjMGM4ZTM0Mzk1OTllOGE", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2023-02-24T00:20:47Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2023-03-08T08:52:17Z"}, "message": "Use late lint pass for `missing_assert_message` lint\n\nCo-authored-by: Weihang Lo <me@weihanglo.tw>", "tree": {"sha": "12c3e1bd42882d2c17d56fc85ee8e11d8c05ec98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12c3e1bd42882d2c17d56fc85ee8e11d8c05ec98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87f58a1a4fb0a95973add9ff8c0c8e3439599e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87f58a1a4fb0a95973add9ff8c0c8e3439599e8a", "html_url": "https://github.com/rust-lang/rust/commit/87f58a1a4fb0a95973add9ff8c0c8e3439599e8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87f58a1a4fb0a95973add9ff8c0c8e3439599e8a/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "682d52cf7c83b95a73cb64c1f938bfab37d528ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/682d52cf7c83b95a73cb64c1f938bfab37d528ab", "html_url": "https://github.com/rust-lang/rust/commit/682d52cf7c83b95a73cb64c1f938bfab37d528ab"}], "stats": {"total": 108, "additions": 27, "deletions": 81}, "files": [{"sha": "6d4ec5277567f207df900284170df948bfb7c787", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87f58a1a4fb0a95973add9ff8c0c8e3439599e8a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f58a1a4fb0a95973add9ff8c0c8e3439599e8a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=87f58a1a4fb0a95973add9ff8c0c8e3439599e8a", "patch": "@@ -927,7 +927,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     store.register_late_pass(|_| Box::new(no_mangle_with_rust_abi::NoMangleWithRustAbi));\n     store.register_late_pass(|_| Box::new(collection_is_never_read::CollectionIsNeverRead));\n-    store.register_pre_expansion_pass(|| Box::<missing_assert_message::MissingAssertMessage>::default());\n+    store.register_late_pass(|_| Box::new(missing_assert_message::MissingAssertMessage));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "2ff0cee2925cdacad49a81c592e7e8c0d080b8d9", "filename": "clippy_lints/src/missing_assert_message.rs", "status": "modified", "additions": 26, "deletions": 80, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/87f58a1a4fb0a95973add9ff8c0c8e3439599e8a/clippy_lints%2Fsrc%2Fmissing_assert_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f58a1a4fb0a95973add9ff8c0c8e3439599e8a/clippy_lints%2Fsrc%2Fmissing_assert_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_assert_message.rs?ref=87f58a1a4fb0a95973add9ff8c0c8e3439599e8a", "patch": "@@ -1,11 +1,9 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_ast::ast;\n-use rustc_ast::{\n-    token::{Token, TokenKind},\n-    tokenstream::TokenTree,\n-};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use clippy_utils::macros::{find_assert_args, find_assert_eq_args, root_macro_call_first_node, PanicExpn};\n+use clippy_utils::{is_in_cfg_test, is_in_test_function};\n+use rustc_hir::Expr;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n@@ -37,93 +35,41 @@ declare_clippy_lint! {\n     \"checks assertions without a custom panic message\"\n }\n \n-#[derive(Default, Clone, Debug)]\n-pub struct MissingAssertMessage {\n-    // This field will be greater than zero if we are inside a `#[test]` or `#[cfg(test)]`\n-    test_deepnes: usize,\n-}\n+declare_lint_pass!(MissingAssertMessage => [MISSING_ASSERT_MESSAGE]);\n \n-impl_lint_pass!(MissingAssertMessage => [MISSING_ASSERT_MESSAGE]);\n+impl<'tcx> LateLintPass<'tcx> for MissingAssertMessage {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return };\n+        let single_argument = match cx.tcx.get_diagnostic_name(macro_call.def_id) {\n+            Some(sym::assert_macro | sym::debug_assert_macro) => true,\n+            Some(\n+                sym::assert_eq_macro | sym::assert_ne_macro | sym::debug_assert_eq_macro | sym::debug_assert_ne_macro,\n+            ) => false,\n+            _ => return,\n+        };\n \n-impl EarlyLintPass for MissingAssertMessage {\n-    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac_call: &ast::MacCall) {\n-        if self.test_deepnes != 0 {\n+        // This lint would be very noisy in tests, so just ignore if we're in test context\n+        if is_in_test_function(cx.tcx, expr.hir_id) || is_in_cfg_test(cx.tcx, expr.hir_id) {\n             return;\n         }\n \n-        let Some(last_segment) = mac_call.path.segments.last() else { return; };\n-        let num_separators_needed = match last_segment.ident.as_str() {\n-            \"assert\" | \"debug_assert\" => 1,\n-            \"assert_eq\" | \"assert_ne\" | \"debug_assert_eq\" | \"debug_assert_ne\" => 2,\n-            _ => return,\n+        let panic_expn = if single_argument {\n+            let Some((_, panic_expn)) = find_assert_args(cx, expr, macro_call.expn) else { return };\n+            panic_expn\n+        } else {\n+            let Some((_, _, panic_expn)) = find_assert_eq_args(cx, expr, macro_call.expn) else { return };\n+            panic_expn\n         };\n-        let num_separators = num_commas_on_arguments(mac_call);\n \n-        if num_separators < num_separators_needed {\n+        if let PanicExpn::Empty = panic_expn {\n             span_lint_and_help(\n                 cx,\n                 MISSING_ASSERT_MESSAGE,\n-                mac_call.span(),\n+                macro_call.span,\n                 \"assert without any message\",\n                 None,\n                 \"consider describing why the failing assert is problematic\",\n             );\n         }\n     }\n-\n-    fn check_item(&mut self, _: &EarlyContext<'_>, item: &ast::Item) {\n-        if item.attrs.iter().any(is_a_test_attribute) {\n-            self.test_deepnes += 1;\n-        }\n-    }\n-\n-    fn check_item_post(&mut self, _: &EarlyContext<'_>, item: &ast::Item) {\n-        if item.attrs.iter().any(is_a_test_attribute) {\n-            self.test_deepnes -= 1;\n-        }\n-    }\n-}\n-\n-// Returns number of commas (excluding trailing comma) from `MacCall`'s arguments.\n-fn num_commas_on_arguments(mac_call: &ast::MacCall) -> usize {\n-    let mut num_separators = 0;\n-    let mut is_trailing = false;\n-    for tt in mac_call.args.tokens.trees() {\n-        match tt {\n-            TokenTree::Token(\n-                Token {\n-                    kind: TokenKind::Comma,\n-                    span: _,\n-                },\n-                _,\n-            ) => {\n-                num_separators += 1;\n-                is_trailing = true;\n-            },\n-            _ => {\n-                is_trailing = false;\n-            },\n-        }\n-    }\n-    if is_trailing {\n-        num_separators -= 1;\n-    }\n-    num_separators\n-}\n-\n-// Returns true if the attribute is either a `#[test]` or a `#[cfg(test)]`.\n-fn is_a_test_attribute(attr: &ast::Attribute) -> bool {\n-    if attr.has_name(sym::test) {\n-        return true;\n-    }\n-\n-    if attr.has_name(sym::cfg)\n-        && let Some(items) = attr.meta_item_list()\n-        && let [item] = &*items\n-        && item.has_name(sym::test)\n-    {\n-        true\n-    } else {\n-        false\n-    }\n }"}]}