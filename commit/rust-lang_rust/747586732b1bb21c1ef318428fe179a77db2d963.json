{"sha": "747586732b1bb21c1ef318428fe179a77db2d963", "node_id": "C_kwDOAAsO6NoAKDc0NzU4NjczMmIxYmIyMWMxZWYzMTg0MjhmZTE3OWE3N2RiMmQ5NjM", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-06-25T11:08:38Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-06-25T11:08:38Z"}, "message": "[rustc_parse] Forbid lets in certain places", "tree": {"sha": "0ae478b8430db5bd2e5025e97e2e78427a5ec37f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae478b8430db5bd2e5025e97e2e78427a5ec37f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/747586732b1bb21c1ef318428fe179a77db2d963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/747586732b1bb21c1ef318428fe179a77db2d963", "html_url": "https://github.com/rust-lang/rust/commit/747586732b1bb21c1ef318428fe179a77db2d963", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/747586732b1bb21c1ef318428fe179a77db2d963/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e02d645110ae14f4a7f04d6bd5b05f2842488dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/e02d645110ae14f4a7f04d6bd5b05f2842488dda", "html_url": "https://github.com/rust-lang/rust/commit/e02d645110ae14f4a7f04d6bd5b05f2842488dda"}], "stats": {"total": 664, "additions": 468, "deletions": 196}, "files": [{"sha": "2c43563b10474c9214fdf1972032081931572720", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -7,6 +7,7 @@ use super::{\n };\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n+use core::mem;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n use rustc_ast::tokenstream::Spacing;\n@@ -26,7 +27,6 @@ use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Pos};\n-use std::mem;\n \n /// Possibly accepts an `token::Interpolated` expression (a pre-parsed expression\n /// dropped into the token stream, which happens while parsing the result of\n@@ -2343,7 +2343,9 @@ impl<'a> Parser<'a> {\n \n     /// Parses the condition of a `if` or `while` expression.\n     fn parse_cond_expr(&mut self) -> PResult<'a, P<Expr>> {\n-        let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n+        let cond = self.with_let_management(true, |local_self| {\n+            local_self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)\n+        })?;\n \n         if let ExprKind::Let(..) = cond.kind {\n             // Remove the last feature gating of a `let` expression since it's stable.\n@@ -2356,6 +2358,13 @@ impl<'a> Parser<'a> {\n     /// Parses a `let $pat = $expr` pseudo-expression.\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n+        if !self.let_expr_allowed {\n+            self.struct_span_err(\n+                self.prev_token.span,\n+                \"expected expression, found `let` statement\",\n+            )\n+            .emit();\n+        }\n         let lo = self.prev_token.span;\n         let pat = self.parse_pat_allow_top_alt(\n             None,\n@@ -2672,6 +2681,8 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn parse_arm(&mut self) -> PResult<'a, Arm> {\n+        // Used to check the `let_chains` and `if_let_guard` features mostly by scaning\n+        // `&&` tokens.\n         fn check_let_expr(expr: &Expr) -> (bool, bool) {\n             match expr.kind {\n                 ExprKind::Binary(_, ref lhs, ref rhs) => {\n@@ -2694,7 +2705,7 @@ impl<'a> Parser<'a> {\n             )?;\n             let guard = if this.eat_keyword(kw::If) {\n                 let if_span = this.prev_token.span;\n-                let cond = this.parse_expr()?;\n+                let cond = this.with_let_management(true, |local_this| local_this.parse_expr())?;\n                 let (has_let_expr, does_not_have_bin_op) = check_let_expr(&cond);\n                 if has_let_expr {\n                     if does_not_have_bin_op {\n@@ -3256,4 +3267,17 @@ impl<'a> Parser<'a> {\n             Ok((res, trailing))\n         })\n     }\n+\n+    // Calls `f` with the internal `let_expr_allowed` set to `let_expr_allowed` and then\n+    // sets the internal `let_expr_allowed` back to its original value.\n+    fn with_let_management<T>(\n+        &mut self,\n+        let_expr_allowed: bool,\n+        f: impl FnOnce(&mut Self) -> T,\n+    ) -> T {\n+        let last_let_expr_allowed = mem::replace(&mut self.let_expr_allowed, let_expr_allowed);\n+        let rslt = f(self);\n+        self.let_expr_allowed = last_let_expr_allowed;\n+        rslt\n+    }\n }"}, {"sha": "acdf121522ad9e635613857bc7318beee1145919", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -147,12 +147,15 @@ pub struct Parser<'a> {\n     /// This allows us to recover when the user forget to add braces around\n     /// multiple statements in the closure body.\n     pub current_closure: Option<ClosureSpans>,\n+    /// Used to track where `let`s are allowed. For example, `if true && let 1 = 1` is valid\n+    /// but `[1, 2, 3][let _ = ()]` is not.\n+    let_expr_allowed: bool,\n }\n \n // This type is used a lot, e.g. it's cloned when matching many declarative macro rules. Make sure\n // it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Parser<'_>, 328);\n+rustc_data_structures::static_assert_size!(Parser<'_>, 336);\n \n /// Stores span information about a closure.\n #[derive(Clone)]\n@@ -455,6 +458,7 @@ impl<'a> Parser<'a> {\n                 inner_attr_ranges: Default::default(),\n             },\n             current_closure: None,\n+            let_expr_allowed: false,\n         };\n \n         // Make parser point to the first token."}, {"sha": "635050f376c8a73c50f2eb946648600e9bfbd34e", "filename": "src/test/ui/mir/issue-92893.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -1,6 +1,7 @@\n struct Bug<A = [(); (let a = (), 1).1]> {\n     //~^ `let` expressions are not supported here\n-    //~^^ `let` expressions in this position are unstable [E0658]\n+    //~| `let` expressions in this position are unstable [E0658]\n+    //~| expected expression, found `let` statement\n     a: A\n }\n "}, {"sha": "4a0fcce31d7c7b0a6f208a5b2abb65fb69db26f1", "filename": "src/test/ui/mir/issue-92893.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -1,3 +1,9 @@\n+error: expected expression, found `let` statement\n+  --> $DIR/issue-92893.rs:1:22\n+   |\n+LL | struct Bug<A = [(); (let a = (), 1).1]> {\n+   |                      ^^^\n+\n error: `let` expressions are not supported here\n   --> $DIR/issue-92893.rs:1:22\n    |\n@@ -15,6 +21,6 @@ LL | struct Bug<A = [(); (let a = (), 1).1]> {\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "bb1aff70d8995d03a1db837458e276e9b6188485", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -58,8 +58,10 @@ fn _macros() {\n     }\n     use_expr!((let 0 = 1 && 0 == 0));\n     //~^ ERROR `let` expressions in this position are unstable\n+    //~| ERROR expected expression, found `let` statement\n     use_expr!((let 0 = 1));\n     //~^ ERROR `let` expressions in this position are unstable\n+    //~| ERROR expected expression, found `let` statement\n     match () {\n         #[cfg(FALSE)]\n         () if let 0 = 1 => {}"}, {"sha": "370a57318fdd05f04dbdf30f34b879015b6c3cde", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -1,5 +1,17 @@\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:59:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:62:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^\n+\n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:69:15\n+  --> $DIR/feature-gate.rs:71:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -58,7 +70,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:65:12\n+  --> $DIR/feature-gate.rs:67:12\n    |\n LL |         () if let 0 = 1 => {}\n    |            ^^^^^^^^^^^^\n@@ -203,14 +215,14 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:61:16\n+  --> $DIR/feature-gate.rs:62:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 25 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "36b730505c29eeebc17569eb369d29ea9a9a8db1", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 71, "deletions": 17, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -81,9 +81,11 @@ fn _macros() {\n     use_expr!((let 0 = 1 && 0 == 0));\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n     use_expr!((let 0 = 1));\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n }\n \n fn nested_within_if_expr() {\n@@ -147,7 +149,8 @@ fn nested_within_if_expr() {\n     //~| ERROR mismatched types\n     //~| ERROR mismatched types\n \n-    if let true = let true = true {} //~ ERROR `let` expressions are not supported here\n+    if let true = let true = true {}\n+    //~^ ERROR `let` expressions are not supported here\n }\n \n fn nested_within_while_expr() {\n@@ -211,7 +214,8 @@ fn nested_within_while_expr() {\n     //~| ERROR mismatched types\n     //~| ERROR mismatched types\n \n-    while let true = let true = true {} //~ ERROR `let` expressions are not supported here\n+    while let true = let true = true {}\n+    //~^ ERROR `let` expressions are not supported here\n }\n \n fn not_error_because_clarified_intent() {\n@@ -225,45 +229,85 @@ fn not_error_because_clarified_intent() {\n }\n \n fn outside_if_and_while_expr() {\n-    &let 0 = 0; //~ ERROR `let` expressions are not supported here\n+    &let 0 = 0;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n-    !let 0 = 0; //~ ERROR `let` expressions are not supported here\n-    *let 0 = 0; //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR type `bool` cannot be dereferenced\n-    -let 0 = 0; //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR cannot apply unary operator `-` to type `bool`\n+    !let 0 = 0;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    *let 0 = 0;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR type `bool` cannot be dereferenced\n+    //~| ERROR expected expression, found `let` statement\n+    -let 0 = 0;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR cannot apply unary operator `-` to type `bool`\n+    //~| ERROR expected expression, found `let` statement\n \n     fn _check_try_binds_tighter() -> Result<(), ()> {\n         let 0 = 0?;\n         //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n         Ok(())\n     }\n-    (let 0 = 0)?; //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR the `?` operator can only be used in a function that returns `Result`\n+    (let 0 = 0)?;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR the `?` operator can only be used in a function that returns `Result`\n     //~| ERROR the `?` operator can only be applied to values that implement `Try`\n+    //~| ERROR expected expression, found `let` statement\n \n-    true || let 0 = 0; //~ ERROR `let` expressions are not supported here\n-    (true || let 0 = 0); //~ ERROR `let` expressions are not supported here\n-    true && (true || let 0 = 0); //~ ERROR `let` expressions are not supported here\n+    true || let 0 = 0;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    (true || let 0 = 0);\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    true && (true || let 0 = 0);\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     let mut x = true;\n-    x = let 0 = 0; //~ ERROR `let` expressions are not supported here\n+    x = let 0 = 0;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n-    true..(let 0 = 0); //~ ERROR `let` expressions are not supported here\n-    ..(let 0 = 0); //~ ERROR `let` expressions are not supported here\n-    (let 0 = 0)..; //~ ERROR `let` expressions are not supported here\n+    true..(let 0 = 0);\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    ..(let 0 = 0);\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    (let 0 = 0)..;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     (let Range { start: _, end: _ } = true..true || false);\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n     (let true = let true = true);\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n+\n+    {\n+        #[cfg(FALSE)]\n+        let x = true && let y = 1;\n+        //~^ ERROR expected expression, found `let` statement\n+    }\n+\n+    #[cfg(FALSE)]\n+    {\n+        [1, 2, 3][let _ = ()]\n+        //~^ ERROR expected expression, found `let` statement\n+    }\n \n     // Check function tail position.\n     &let 0 = 0\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n }\n \n // Let's make sure that `let` inside const generic arguments are considered.\n@@ -335,4 +379,14 @@ fn with_parenthesis() {\n     let fun = || true;\n     if let true = (true && fun()) && (true) {\n     }\n+\n+    #[cfg(FALSE)]\n+    let x = (true && let y = 1);\n+    //~^ ERROR expected expression, found `let` statement\n+\n+    #[cfg(FALSE)]\n+    {\n+        ([1, 2, 3][let _ = ()])\n+        //~^ ERROR expected expression, found `let` statement\n+    }\n }"}, {"sha": "5cf06cf4b27cd42c60a28e63cbf42a599aa1bee1", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 287, "deletions": 155, "changes": 442, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -1,5 +1,113 @@\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:232:6\n+   |\n+LL |     &let 0 = 0;\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:236:6\n+   |\n+LL |     !let 0 = 0;\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:239:6\n+   |\n+LL |     *let 0 = 0;\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:243:6\n+   |\n+LL |     -let 0 = 0;\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:253:6\n+   |\n+LL |     (let 0 = 0)?;\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:259:13\n+   |\n+LL |     true || let 0 = 0;\n+   |             ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:262:14\n+   |\n+LL |     (true || let 0 = 0);\n+   |              ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:265:22\n+   |\n+LL |     true && (true || let 0 = 0);\n+   |                      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:270:9\n+   |\n+LL |     x = let 0 = 0;\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:274:12\n+   |\n+LL |     true..(let 0 = 0);\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:277:8\n+   |\n+LL |     ..(let 0 = 0);\n+   |        ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:280:6\n+   |\n+LL |     (let 0 = 0)..;\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:284:6\n+   |\n+LL |     (let Range { start: _, end: _ } = true..true || false);\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:289:6\n+   |\n+LL |     (let true = let true = true);\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:289:17\n+   |\n+LL |     (let true = let true = true);\n+   |                 ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:296:25\n+   |\n+LL |         let x = true && let y = 1;\n+   |                         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:302:19\n+   |\n+LL |         [1, 2, 3][let _ = ()]\n+   |                   ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:307:6\n+   |\n+LL |     &let 0 = 0\n+   |      ^^^\n+\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/disallowed-positions.rs:293:9\n+  --> $DIR/disallowed-positions.rs:337:9\n    |\n LL |         true && let 1 = 1\n    |         ^^^^^^^^^^^^^^^^^\n@@ -9,6 +117,30 @@ help: enclose the `const` expression in braces\n LL |         { true && let 1 = 1 }\n    |         +                   +\n \n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:384:22\n+   |\n+LL |     let x = (true && let y = 1);\n+   |                      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:389:20\n+   |\n+LL |         ([1, 2, 3][let _ = ()])\n+   |                    ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:81:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:85:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^\n+\n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:29:9\n    |\n@@ -270,710 +402,710 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:84:16\n+  --> $DIR/disallowed-positions.rs:85:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:84:16\n+  --> $DIR/disallowed-positions.rs:85:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:84:16\n+  --> $DIR/disallowed-positions.rs:85:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:84:16\n+  --> $DIR/disallowed-positions.rs:85:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:90:9\n+  --> $DIR/disallowed-positions.rs:92:9\n    |\n LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:93:9\n+  --> $DIR/disallowed-positions.rs:95:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:94:9\n+  --> $DIR/disallowed-positions.rs:96:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:96:9\n+  --> $DIR/disallowed-positions.rs:98:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:104:9\n+  --> $DIR/disallowed-positions.rs:106:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:104:9\n+  --> $DIR/disallowed-positions.rs:106:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:108:16\n+  --> $DIR/disallowed-positions.rs:110:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:108:13\n+  --> $DIR/disallowed-positions.rs:110:13\n    |\n LL |     if true || let 0 = 0 {}\n    |             ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:109:17\n+  --> $DIR/disallowed-positions.rs:111:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:109:14\n+  --> $DIR/disallowed-positions.rs:111:14\n    |\n LL |     if (true || let 0 = 0) {}\n    |              ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:110:25\n+  --> $DIR/disallowed-positions.rs:112:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:110:22\n+  --> $DIR/disallowed-positions.rs:112:22\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                      ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:111:25\n+  --> $DIR/disallowed-positions.rs:113:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:111:17\n+  --> $DIR/disallowed-positions.rs:113:17\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                 ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:114:12\n+  --> $DIR/disallowed-positions.rs:116:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:117:15\n+  --> $DIR/disallowed-positions.rs:119:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:117:15\n+  --> $DIR/disallowed-positions.rs:119:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:119:11\n+  --> $DIR/disallowed-positions.rs:121:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:119:11\n+  --> $DIR/disallowed-positions.rs:121:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:121:9\n+  --> $DIR/disallowed-positions.rs:123:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:121:9\n+  --> $DIR/disallowed-positions.rs:123:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:125:8\n+  --> $DIR/disallowed-positions.rs:127:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:129:8\n+  --> $DIR/disallowed-positions.rs:131:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:136:8\n+  --> $DIR/disallowed-positions.rs:138:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:144:8\n+  --> $DIR/disallowed-positions.rs:146:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:150:19\n+  --> $DIR/disallowed-positions.rs:152:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:154:12\n+  --> $DIR/disallowed-positions.rs:157:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:157:12\n+  --> $DIR/disallowed-positions.rs:160:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:158:12\n+  --> $DIR/disallowed-positions.rs:161:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:160:12\n+  --> $DIR/disallowed-positions.rs:163:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:168:12\n+  --> $DIR/disallowed-positions.rs:171:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:168:12\n+  --> $DIR/disallowed-positions.rs:171:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:172:19\n+  --> $DIR/disallowed-positions.rs:175:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:172:16\n+  --> $DIR/disallowed-positions.rs:175:16\n    |\n LL |     while true || let 0 = 0 {}\n    |                ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:173:20\n+  --> $DIR/disallowed-positions.rs:176:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:173:17\n+  --> $DIR/disallowed-positions.rs:176:17\n    |\n LL |     while (true || let 0 = 0) {}\n    |                 ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:174:28\n+  --> $DIR/disallowed-positions.rs:177:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:174:25\n+  --> $DIR/disallowed-positions.rs:177:25\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                         ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:175:28\n+  --> $DIR/disallowed-positions.rs:178:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:175:20\n+  --> $DIR/disallowed-positions.rs:178:20\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                    ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:178:15\n+  --> $DIR/disallowed-positions.rs:181:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:181:18\n+  --> $DIR/disallowed-positions.rs:184:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:181:18\n+  --> $DIR/disallowed-positions.rs:184:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:183:14\n+  --> $DIR/disallowed-positions.rs:186:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:183:14\n+  --> $DIR/disallowed-positions.rs:186:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:185:12\n+  --> $DIR/disallowed-positions.rs:188:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:185:12\n+  --> $DIR/disallowed-positions.rs:188:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:189:11\n+  --> $DIR/disallowed-positions.rs:192:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:193:11\n+  --> $DIR/disallowed-positions.rs:196:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:200:11\n+  --> $DIR/disallowed-positions.rs:203:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:208:11\n+  --> $DIR/disallowed-positions.rs:211:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:214:22\n+  --> $DIR/disallowed-positions.rs:217:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:228:6\n+  --> $DIR/disallowed-positions.rs:232:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:230:6\n+  --> $DIR/disallowed-positions.rs:236:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:231:6\n+  --> $DIR/disallowed-positions.rs:239:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:233:6\n+  --> $DIR/disallowed-positions.rs:243:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:241:6\n+  --> $DIR/disallowed-positions.rs:253:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:241:6\n+  --> $DIR/disallowed-positions.rs:253:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:245:13\n+  --> $DIR/disallowed-positions.rs:259:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:245:10\n+  --> $DIR/disallowed-positions.rs:259:10\n    |\n LL |     true || let 0 = 0;\n    |          ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:246:14\n+  --> $DIR/disallowed-positions.rs:262:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:246:11\n+  --> $DIR/disallowed-positions.rs:262:11\n    |\n LL |     (true || let 0 = 0);\n    |           ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:247:22\n+  --> $DIR/disallowed-positions.rs:265:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:247:19\n+  --> $DIR/disallowed-positions.rs:265:19\n    |\n LL |     true && (true || let 0 = 0);\n    |                   ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:250:9\n+  --> $DIR/disallowed-positions.rs:270:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:252:12\n+  --> $DIR/disallowed-positions.rs:274:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:252:12\n+  --> $DIR/disallowed-positions.rs:274:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:253:8\n+  --> $DIR/disallowed-positions.rs:277:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:253:8\n+  --> $DIR/disallowed-positions.rs:277:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:254:6\n+  --> $DIR/disallowed-positions.rs:280:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:254:6\n+  --> $DIR/disallowed-positions.rs:280:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:256:6\n+  --> $DIR/disallowed-positions.rs:284:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:260:6\n+  --> $DIR/disallowed-positions.rs:289:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:260:6\n+  --> $DIR/disallowed-positions.rs:289:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:264:6\n+  --> $DIR/disallowed-positions.rs:307:6\n    |\n LL |     &let 0 = 0\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:275:17\n+  --> $DIR/disallowed-positions.rs:319:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:279:17\n+  --> $DIR/disallowed-positions.rs:323:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:283:17\n+  --> $DIR/disallowed-positions.rs:327:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:293:17\n+  --> $DIR/disallowed-positions.rs:337:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:302:9\n+  --> $DIR/disallowed-positions.rs:346:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:302:9\n+  --> $DIR/disallowed-positions.rs:346:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:306:9\n+  --> $DIR/disallowed-positions.rs:350:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:306:9\n+  --> $DIR/disallowed-positions.rs:350:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:309:9\n+  --> $DIR/disallowed-positions.rs:353:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:309:9\n+  --> $DIR/disallowed-positions.rs:353:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:309:32\n+  --> $DIR/disallowed-positions.rs:353:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:309:32\n+  --> $DIR/disallowed-positions.rs:353:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:316:9\n+  --> $DIR/disallowed-positions.rs:360:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:316:9\n+  --> $DIR/disallowed-positions.rs:360:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:316:31\n+  --> $DIR/disallowed-positions.rs:360:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:316:31\n+  --> $DIR/disallowed-positions.rs:360:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:320:9\n+  --> $DIR/disallowed-positions.rs:364:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:320:9\n+  --> $DIR/disallowed-positions.rs:364:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:320:31\n+  --> $DIR/disallowed-positions.rs:364:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:320:31\n+  --> $DIR/disallowed-positions.rs:364:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:324:9\n+  --> $DIR/disallowed-positions.rs:368:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:324:9\n+  --> $DIR/disallowed-positions.rs:368:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:90:8\n+  --> $DIR/disallowed-positions.rs:92:8\n    |\n LL |     if &let 0 = 0 {}\n    |        ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -985,27 +1117,27 @@ LL +     if let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:94:8\n+  --> $DIR/disallowed-positions.rs:96:8\n    |\n LL |     if *let 0 = 0 {}\n    |        ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:96:8\n+  --> $DIR/disallowed-positions.rs:98:8\n    |\n LL |     if -let 0 = 0 {}\n    |        ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:104:8\n+  --> $DIR/disallowed-positions.rs:106:8\n    |\n LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:104:19\n+  --> $DIR/disallowed-positions.rs:106:19\n    |\n LL | / fn nested_within_if_expr() {\n LL | |     if &let 0 = 0 {}\n@@ -1015,14 +1147,14 @@ LL | |\n LL | |     if (let 0 = 0)? {}\n    | |                   ^ cannot use the `?` operator in a function that returns `()`\n ...  |\n-LL | |     if let true = let true = true {}\n+LL | |\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:114:8\n+  --> $DIR/disallowed-positions.rs:116:8\n    |\n LL |     if x = let 0 = 0 {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1033,7 +1165,7 @@ LL |     if x == let 0 = 0 {}\n    |          ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:117:8\n+  --> $DIR/disallowed-positions.rs:119:8\n    |\n LL |     if true..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1042,7 +1174,7 @@ LL |     if true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:119:8\n+  --> $DIR/disallowed-positions.rs:121:8\n    |\n LL |     if ..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1051,7 +1183,7 @@ LL |     if ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:121:8\n+  --> $DIR/disallowed-positions.rs:123:8\n    |\n LL |     if (let 0 = 0).. {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1060,7 +1192,7 @@ LL |     if (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:125:12\n+  --> $DIR/disallowed-positions.rs:127:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1071,7 +1203,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:125:8\n+  --> $DIR/disallowed-positions.rs:127:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1080,7 +1212,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:129:12\n+  --> $DIR/disallowed-positions.rs:131:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1091,7 +1223,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:129:8\n+  --> $DIR/disallowed-positions.rs:131:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1100,7 +1232,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:136:12\n+  --> $DIR/disallowed-positions.rs:138:12\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1111,20 +1243,20 @@ LL |     if let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:136:41\n+  --> $DIR/disallowed-positions.rs:138:41\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |                                         ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:136:41: 136:48]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:138:41: 138:48]`\n help: use parentheses to call this closure\n    |\n LL |     if let Range { start: F, end } = F..(|| true)() {}\n    |                                         +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:136:8\n+  --> $DIR/disallowed-positions.rs:138:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1133,7 +1265,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:144:12\n+  --> $DIR/disallowed-positions.rs:146:12\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1144,7 +1276,7 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:144:44\n+  --> $DIR/disallowed-positions.rs:146:44\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |                                            ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1156,7 +1288,7 @@ LL +     if let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:144:8\n+  --> $DIR/disallowed-positions.rs:146:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1165,15 +1297,15 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:100:20\n+  --> $DIR/disallowed-positions.rs:102:20\n    |\n LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:154:11\n+  --> $DIR/disallowed-positions.rs:157:11\n    |\n LL |     while &let 0 = 0 {}\n    |           ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -1185,27 +1317,27 @@ LL +     while let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:158:11\n+  --> $DIR/disallowed-positions.rs:161:11\n    |\n LL |     while *let 0 = 0 {}\n    |           ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:160:11\n+  --> $DIR/disallowed-positions.rs:163:11\n    |\n LL |     while -let 0 = 0 {}\n    |           ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:168:11\n+  --> $DIR/disallowed-positions.rs:171:11\n    |\n LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:168:22\n+  --> $DIR/disallowed-positions.rs:171:22\n    |\n LL | / fn nested_within_while_expr() {\n LL | |     while &let 0 = 0 {}\n@@ -1215,14 +1347,14 @@ LL | |\n LL | |     while (let 0 = 0)? {}\n    | |                      ^ cannot use the `?` operator in a function that returns `()`\n ...  |\n-LL | |     while let true = let true = true {}\n+LL | |\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:178:11\n+  --> $DIR/disallowed-positions.rs:181:11\n    |\n LL |     while x = let 0 = 0 {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1233,7 +1365,7 @@ LL |     while x == let 0 = 0 {}\n    |             ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:181:11\n+  --> $DIR/disallowed-positions.rs:184:11\n    |\n LL |     while true..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1242,7 +1374,7 @@ LL |     while true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:183:11\n+  --> $DIR/disallowed-positions.rs:186:11\n    |\n LL |     while ..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1251,7 +1383,7 @@ LL |     while ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:185:11\n+  --> $DIR/disallowed-positions.rs:188:11\n    |\n LL |     while (let 0 = 0).. {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1260,7 +1392,7 @@ LL |     while (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:189:15\n+  --> $DIR/disallowed-positions.rs:192:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1271,7 +1403,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:189:11\n+  --> $DIR/disallowed-positions.rs:192:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1280,7 +1412,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:193:15\n+  --> $DIR/disallowed-positions.rs:196:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1291,7 +1423,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:193:11\n+  --> $DIR/disallowed-positions.rs:196:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1300,7 +1432,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:200:15\n+  --> $DIR/disallowed-positions.rs:203:15\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1311,20 +1443,20 @@ LL |     while let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:200:44\n+  --> $DIR/disallowed-positions.rs:203:44\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |                                            ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:200:44: 200:51]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:203:44: 203:51]`\n help: use parentheses to call this closure\n    |\n LL |     while let Range { start: F, end } = F..(|| true)() {}\n    |                                            +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:200:11\n+  --> $DIR/disallowed-positions.rs:203:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1333,7 +1465,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:208:15\n+  --> $DIR/disallowed-positions.rs:211:15\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1344,7 +1476,7 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:208:47\n+  --> $DIR/disallowed-positions.rs:211:47\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |                                               ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1356,7 +1488,7 @@ LL +     while let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:208:11\n+  --> $DIR/disallowed-positions.rs:211:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1365,40 +1497,40 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:164:23\n+  --> $DIR/disallowed-positions.rs:167:23\n    |\n LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:231:5\n+  --> $DIR/disallowed-positions.rs:239:5\n    |\n LL |     *let 0 = 0;\n    |     ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:233:5\n+  --> $DIR/disallowed-positions.rs:243:5\n    |\n LL |     -let 0 = 0;\n    |     ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:241:5\n+  --> $DIR/disallowed-positions.rs:253:5\n    |\n LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:241:16\n+  --> $DIR/disallowed-positions.rs:253:16\n    |\n LL | / fn outside_if_and_while_expr() {\n LL | |     &let 0 = 0;\n LL | |\n-LL | |     !let 0 = 0;\n+LL | |\n ...  |\n LL | |     (let 0 = 0)?;\n    | |                ^ cannot use the `?` operator in a function that returns `()`\n@@ -1410,7 +1542,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:256:10\n+  --> $DIR/disallowed-positions.rs:284:10\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1421,7 +1553,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:264:5\n+  --> $DIR/disallowed-positions.rs:307:5\n    |\n LL | fn outside_if_and_while_expr() {\n    |                                - help: try adding a return type: `-> &bool`\n@@ -1430,14 +1562,14 @@ LL |     &let 0 = 0\n    |     ^^^^^^^^^^ expected `()`, found `&bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:237:17\n+  --> $DIR/disallowed-positions.rs:249:17\n    |\n LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n-error: aborting due to 134 previous errors\n+error: aborting due to 156 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "12befc637c787b5d5dcc6c78d9eac342bda7a50d", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -17,6 +17,7 @@ fn main() {\n     //~| ERROR `let` expressions are not supported here\n     //~| ERROR mismatched types\n     //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n         return;\n     };\n "}, {"sha": "498a112fa9bb3f7434e6031827821cf9ba38bb69", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -9,6 +9,12 @@ help: wrap the expression in parentheses\n LL |     let Some(n) = (opt && n == 1) else {\n    |                   +             +\n \n+error: expected expression, found `let` statement\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:15:26\n+   |\n+LL |     let Some(n) = opt && let another = n else {\n+   |                          ^^^\n+\n error: a `&&` expression cannot be directly assigned in `let...else`\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:15:19\n    |\n@@ -21,43 +27,43 @@ LL |     let Some(n) = (opt && let another = n) else {\n    |                   +                      +\n \n error: this `if` expression is missing a block after the condition\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:23:5\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:24:5\n    |\n LL |     if let Some(n) = opt else {\n    |     ^^\n    |\n help: add a block here\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:23:25\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:24:25\n    |\n LL |     if let Some(n) = opt else {\n    |                         ^\n \n error: this `if` expression is missing a block after the condition\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:27:5\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:28:5\n    |\n LL |     if let Some(n) = opt && n == 1 else {\n    |     ^^\n    |\n help: add a block here\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:27:35\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:28:35\n    |\n LL |     if let Some(n) = opt && n == 1 else {\n    |                                   ^\n \n error: this `if` expression is missing a block after the condition\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:31:5\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:32:5\n    |\n LL |     if let Some(n) = opt && let another = n else {\n    |     ^^\n    |\n help: add a block here\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:31:44\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:32:44\n    |\n LL |     if let Some(n) = opt && let another = n else {\n    |                                            ^\n \n error: expected `{`, found keyword `else`\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:37:33\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:38:33\n    |\n LL |         while let Some(n) = opt else {\n    |         ----- ----------------- ^^^^ expected `{`\n@@ -66,7 +72,7 @@ LL |         while let Some(n) = opt else {\n    |         while parsing the body of this `while` expression\n \n error: expected `{`, found keyword `else`\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:43:43\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:44:43\n    |\n LL |         while let Some(n) = opt && n == 1 else {\n    |         ----- --------------------------- ^^^^ expected `{`\n@@ -75,7 +81,7 @@ LL |         while let Some(n) = opt && n == 1 else {\n    |         while parsing the body of this `while` expression\n \n error: expected `{`, found keyword `else`\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:49:52\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:50:52\n    |\n LL |         while let Some(n) = opt && let another = n else {\n    |         ----- ------------------------------------ ^^^^ expected `{`\n@@ -131,6 +137,6 @@ LL |     let Some(n) = opt && let another = n else {\n    = note: expected type `bool`\n               found enum `Option<_>`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "87718211308484ce64f128fc7fd162a2ca56d753", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -39,6 +39,7 @@ fn _macros() {\n \n     noop_expr!((let 0 = 1));\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR expected expression, found `let` statement\n \n     macro_rules! use_expr {\n         ($e:expr) => {\n@@ -48,9 +49,9 @@ fn _macros() {\n     }\n     #[cfg(FALSE)] (let 0 = 1);\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR expected expression, found `let` statement\n     use_expr!(let 0 = 1);\n     //~^ ERROR no rules expected the token `let`\n-    // ^--- FIXME(53667): Consider whether `Let` can be added to `ident_can_begin_expr`.\n }\n \n fn main() {}"}, {"sha": "bcea8bbaa730bfc6e895cb21a1d6d32f5848367f", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -1,5 +1,17 @@\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:50:20\n+   |\n+LL |     #[cfg(FALSE)] (let 0 = 1);\n+   |                    ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:40:17\n+   |\n+LL |     noop_expr!((let 0 = 1));\n+   |                 ^^^\n+\n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:51:15\n+  --> $DIR/feature-gate.rs:53:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -62,7 +74,7 @@ LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:49:20\n+  --> $DIR/feature-gate.rs:50:20\n    |\n LL |     #[cfg(FALSE)] (let 0 = 1);\n    |                    ^^^^^^^^^\n@@ -79,6 +91,6 @@ LL |     noop_expr!((let 0 = 1));\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "6cc53a1935b9556a5d1dff07ea6d965f3d757a74", "filename": "src/test/ui/rfc-2497-if-let-chains/invalid-let-in-a-valid-let-context.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747586732b1bb21c1ef318428fe179a77db2d963/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs?ref=747586732b1bb21c1ef318428fe179a77db2d963", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+// known-bug\n+\n+#![feature(let_chains)]\n+\n+fn main() {\n+    let _opt = Some(1i32);\n+\n+    #[cfg(FALSE)]\n+    {\n+        if let Some(elem) = _opt && {\n+            [1, 2, 3][let _ = ()];\n+            true\n+        } {\n+        }\n+    }\n+}"}]}