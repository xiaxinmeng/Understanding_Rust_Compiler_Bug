{"sha": "38aab8e40034ae21b7c801ae8532ec1f5ae5022d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YWFiOGU0MDAzNGFlMjFiN2M4MDFhZTg1MzJlYzFmNWFlNTAyMmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-06T00:49:13Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-06T00:49:13Z"}, "message": "rustc: Thread a self type through trans_impl; fix cross-crate trait issue", "tree": {"sha": "450f2ff034c7e3f0fb917e52b9bbf026ffe39ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/450f2ff034c7e3f0fb917e52b9bbf026ffe39ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38aab8e40034ae21b7c801ae8532ec1f5ae5022d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38aab8e40034ae21b7c801ae8532ec1f5ae5022d", "html_url": "https://github.com/rust-lang/rust/commit/38aab8e40034ae21b7c801ae8532ec1f5ae5022d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38aab8e40034ae21b7c801ae8532ec1f5ae5022d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8287f0e41be93fa0c902cac71637cbcb1632a50", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8287f0e41be93fa0c902cac71637cbcb1632a50", "html_url": "https://github.com/rust-lang/rust/commit/d8287f0e41be93fa0c902cac71637cbcb1632a50"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "24774add4dc37ddbf3324a03aeb0aa118f058545", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/38aab8e40034ae21b7c801ae8532ec1f5ae5022d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aab8e40034ae21b7c801ae8532ec1f5ae5022d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=38aab8e40034ae21b7c801ae8532ec1f5ae5022d", "patch": "@@ -1848,19 +1848,25 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n         }\n       }\n       ast::item_impl(tps, trait_refs, _, ms) => {\n-        meth::trans_impl(ccx, *path, item.ident, ms, tps);\n+        meth::trans_impl(ccx, *path, item.ident, ms, tps, None);\n \n         // Translate any methods that have provided implementations.\n         for trait_refs.each |trait_ref_ptr| {\n             let trait_def = ccx.tcx.def_map.get(trait_ref_ptr.ref_id);\n \n             // XXX: Cross-crate default methods.\n-            match ccx.tcx.items.get(def_id_of_def(trait_def).node) {\n+            let trait_id = def_id_of_def(trait_def);\n+            if trait_id.crate != ast::local_crate {\n+                loop;\n+            }\n+\n+            match ccx.tcx.items.get(trait_id.node) {\n                 ast_map::node_item(trait_item, _) => {\n                     match trait_item.node {\n                         ast::item_trait(tps, _, trait_methods) => {\n+                            // XXX: ty_self is wrong here. Get the real type.\n                             trans_trait(ccx, tps, trait_methods, path,\n-                                        item.ident);\n+                                        item.ident, ty::mk_self(ccx.tcx));\n                         }\n                         _ => {\n                             ccx.tcx.sess.impossible_case(item.span,\n@@ -1922,15 +1928,16 @@ fn trans_struct_def(ccx: @crate_ctxt, struct_def: @ast::struct_def,\n     // If there are ty params, the ctor will get monomorphized\n \n     // Translate methods\n-    meth::trans_impl(ccx, *path, ident, struct_def.methods, tps);\n+    meth::trans_impl(ccx, *path, ident, struct_def.methods, tps, None);\n }\n \n fn trans_trait(ccx: @crate_ctxt, tps: ~[ast::ty_param],\n                trait_methods: ~[ast::trait_method],\n-               path: @ast_map::path, ident: ast::ident) {\n+               path: @ast_map::path, ident: ast::ident,\n+               self_ty: ty::t) {\n     // Translate any methods that have provided implementations\n     let (_, provided_methods) = ast_util::split_trait_methods(trait_methods);\n-    meth::trans_impl(ccx, *path, ident, provided_methods, tps);\n+    meth::trans_impl(ccx, *path, ident, provided_methods, tps, Some(self_ty));\n }\n \n // Translate a module. Doing this amounts to translating the items in the"}, {"sha": "65605f0e4668d2bea99a2a5ac4cedf280c5e8cc8", "filename": "src/rustc/middle/trans/meth.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38aab8e40034ae21b7c801ae8532ec1f5ae5022d/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aab8e40034ae21b7c801ae8532ec1f5ae5022d/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=38aab8e40034ae21b7c801ae8532ec1f5ae5022d", "patch": "@@ -27,15 +27,16 @@ be generated once they are invoked with specific type parameters,\n see `trans::base::lval_static_fn()` or `trans::base::monomorphic_fn()`.\n */\n fn trans_impl(ccx: @crate_ctxt, path: path, name: ast::ident,\n-              methods: ~[@ast::method], tps: ~[ast::ty_param]) {\n+              methods: ~[@ast::method], tps: ~[ast::ty_param],\n+              self_ty: Option<ty::t>) {\n     let _icx = ccx.insn_ctxt(\"impl::trans_impl\");\n     if tps.len() > 0u { return; }\n     let sub_path = vec::append_one(path, path_name(name));\n     for vec::each(methods) |method| {\n         if method.tps.len() == 0u {\n             let llfn = get_item_val(ccx, method.id);\n             let path = vec::append_one(sub_path, path_name(method.ident));\n-            trans_method(ccx, path, *method, None, llfn);\n+            trans_method(ccx, path, *method, None, self_ty, llfn);\n         }\n     }\n }\n@@ -49,12 +50,16 @@ Translates a (possibly monomorphized) method body.\n - `method`: the AST node for the method\n - `param_substs`: if this is a generic method, the current values for\n   type parameters and so forth, else none\n+- `base_self_ty`: optionally, the explicit self type for this method. This\n+  will be none if this is not a default method and must always be present\n+  if this is a default method.\n - `llfn`: the LLVM ValueRef for the method\n */\n fn trans_method(ccx: @crate_ctxt,\n                 path: path,\n                 method: &ast::method,\n                 param_substs: Option<param_substs>,\n+                base_self_ty: Option<ty::t>,\n                 llfn: ValueRef) {\n \n     // figure out how self is being passed\n@@ -65,7 +70,11 @@ fn trans_method(ccx: @crate_ctxt,\n       _ => {\n         // determine the (monomorphized) type that `self` maps to for\n         // this method\n-        let self_ty = ty::node_id_to_type(ccx.tcx, method.self_id);\n+        let self_ty;\n+        match base_self_ty {\n+            None => self_ty = ty::node_id_to_type(ccx.tcx, method.self_id),\n+            Some(provided_self_ty) => self_ty = provided_self_ty\n+        }\n         let self_ty = match param_substs {\n           None => self_ty,\n           Some({tys: ref tys, _}) => ty::subst_tps(ccx.tcx, *tys, self_ty)"}, {"sha": "17eaf591c9f3469aca2c614e27260b07b50e784d", "filename": "src/rustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38aab8e40034ae21b7c801ae8532ec1f5ae5022d/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aab8e40034ae21b7c801ae8532ec1f5ae5022d/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=38aab8e40034ae21b7c801ae8532ec1f5ae5022d", "patch": "@@ -156,9 +156,10 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n         d\n       }\n       ast_map::node_method(mth, _, _) => {\n+        // XXX: What should the self type be here?\n         let d = mk_lldecl();\n         set_inline_hint_if_appr(mth.attrs, d);\n-        meth::trans_method(ccx, pt, mth, psubsts, d);\n+        meth::trans_method(ccx, pt, mth, psubsts, None, d);\n         d\n       }\n       ast_map::node_ctor(_, tps, ctor, parent_id, _) => {"}]}