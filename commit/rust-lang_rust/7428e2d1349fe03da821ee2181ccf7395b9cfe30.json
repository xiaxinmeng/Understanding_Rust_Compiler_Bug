{"sha": "7428e2d1349fe03da821ee2181ccf7395b9cfe30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MjhlMmQxMzQ5ZmUwM2RhODIxZWUyMTgxY2NmNzM5NWI5Y2ZlMzA=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-06T03:46:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-06T03:46:51Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>", "tree": {"sha": "88caff0481d178225b271ea7a1cc1409afd229a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88caff0481d178225b271ea7a1cc1409afd229a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7428e2d1349fe03da821ee2181ccf7395b9cfe30", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf9TKrCRBK7hj4Ov3rIwAAdHIIACjlPvtNW5OMEfWJjKMYhQM2\nVknhZtq7DhuuGM7Vxf/XrgUDAbN5vhXD5zTVUmCqKAg8NiWiTYYWYir+UCARUGcQ\nk8ZaiudDpVDNb90UabLwUezrdWKCCHkiztIyWOt0E5pcjUvQXnjrjYthFo7Xh5xw\n4g80Wusik0cpHXpOKP3Ddbc2BQCEgsOPmFkExcwpmfy+2bW8Q3ztpxVtNAwgGbO6\nUa1fu5a8qEpFtdQgX3juVAAh5HBNMqe+pYZHnCURjPeOc710o6pxi2Ji7CY87vIt\n91FN4gcnRRO3evJtmlXhZ9oww+Ng7tUaTvNUqvmcMuljmM/dzuGCXTJxplRyHk4=\n=JReG\n-----END PGP SIGNATURE-----\n", "payload": "tree 88caff0481d178225b271ea7a1cc1409afd229a6\nparent e636805eee49ff2e8bc30429ab91a8e2508656b3\nauthor Camelid <camelidcamel@gmail.com> 1609904811 -0800\ncommitter GitHub <noreply@github.com> 1609904811 -0800\n\nApply suggestions from code review\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7428e2d1349fe03da821ee2181ccf7395b9cfe30", "html_url": "https://github.com/rust-lang/rust/commit/7428e2d1349fe03da821ee2181ccf7395b9cfe30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7428e2d1349fe03da821ee2181ccf7395b9cfe30/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e636805eee49ff2e8bc30429ab91a8e2508656b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e636805eee49ff2e8bc30429ab91a8e2508656b3", "html_url": "https://github.com/rust-lang/rust/commit/e636805eee49ff2e8bc30429ab91a8e2508656b3"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "38791fcea548428797d699f38173b941525aa551", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7428e2d1349fe03da821ee2181ccf7395b9cfe30/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7428e2d1349fe03da821ee2181ccf7395b9cfe30/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7428e2d1349fe03da821ee2181ccf7395b9cfe30", "patch": "@@ -293,7 +293,7 @@ impl Item {\n \n     /// See the documentation for [`next_def_id()`].\n     ///\n-    /// [`next_def_id()`]: crate::core::DocContext::next_def_id()\n+    /// [`next_def_id()`]: DocContext::next_def_id()\n     crate fn is_fake(&self) -> bool {\n         MAX_DEF_ID.with(|m| {\n             m.borrow().get(&self.def_id.krate).map(|id| self.def_id >= *id).unwrap_or(false)"}, {"sha": "43aaefa0870738618b2a77226b289a3f48874a92", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7428e2d1349fe03da821ee2181ccf7395b9cfe30/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7428e2d1349fe03da821ee2181ccf7395b9cfe30/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7428e2d1349fe03da821ee2181ccf7395b9cfe30", "patch": "@@ -123,7 +123,7 @@ impl<'tcx> DocContext<'tcx> {\n     /// Create a new \"fake\" [`DefId`].\n     ///\n     /// This is an ugly hack, but it's the simplest way to handle synthetic impls without greatly\n-    /// refactoring either `librustdoc` or [`rustc_middle`]. In particular, allowing new [`DefId`]s\n+    /// refactoring either rustdoc or [`rustc_middle`]. In particular, allowing new [`DefId`]s\n     /// to be registered after the AST is constructed would require storing the [`DefId`] mapping\n     /// in a [`RefCell`], decreasing the performance for normal compilation for very little gain.\n     ///"}]}