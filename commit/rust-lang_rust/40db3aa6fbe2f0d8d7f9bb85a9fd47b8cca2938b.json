{"sha": "40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZGIzYWE2ZmJlMmYwZDhkN2Y5YmI4NWE5ZmQ0N2I4Y2NhMjkzOGI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-20T07:59:16Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-20T21:53:28Z"}, "message": "Add a separate AST mapping phase\n\nThis will replace the various node_id-to-node mappings done in several\nother passes. This commit already uses the new map in resolve, dropping\nthe ast_map that was built there before.", "tree": {"sha": "e60308a91da459967a7bf419c44986fbed7f6819", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e60308a91da459967a7bf419c44986fbed7f6819"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b", "html_url": "https://github.com/rust-lang/rust/commit/40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77af54bf6f7d5e7cb704e08689ea96746bc57819", "url": "https://api.github.com/repos/rust-lang/rust/commits/77af54bf6f7d5e7cb704e08689ea96746bc57819", "html_url": "https://github.com/rust-lang/rust/commit/77af54bf6f7d5e7cb704e08689ea96746bc57819"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "040b551a529752890ab4c2c079bcd1f4131049f1", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b", "patch": "@@ -80,9 +80,11 @@ fn compile_input(session::session sess, eval::env env, str input,\n     auto crate =\n         time(time_passes, \"parsing\", bind parse_input(sess, p, input));\n     if (sess.get_opts().output_type == link::output_type_none) { ret; }\n+    auto ast_map = time(time_passes, \"ast indexing\",\n+                        bind middle::ast_map::map_crate(*crate));\n     auto d =\n         time(time_passes, \"resolution\",\n-             bind resolve::resolve_crate(sess, crate));\n+             bind resolve::resolve_crate(sess, ast_map, crate));\n     auto ty_cx = ty::mk_ctxt(sess, d._0, d._1);\n     time[()](time_passes, \"typechecking\",\n              bind typeck::check_crate(ty_cx, crate));\n@@ -107,7 +109,8 @@ fn pretty_print_input(session::session sess, eval::env env, str input,\n     auto mode;\n     alt (ppm) {\n         case (ppm_typed) {\n-            auto d = resolve::resolve_crate(sess, crate);\n+            auto amap = middle::ast_map::map_crate(*crate);\n+            auto d = resolve::resolve_crate(sess, amap, crate);\n             auto ty_cx = ty::mk_ctxt(sess, d._0, d._1);\n             typeck::check_crate(ty_cx, crate);\n             mode = ppaux::mo_typed(ty_cx);"}, {"sha": "243411760797329c3ebf6ab2b091e0b4a6556638", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b", "patch": "@@ -116,7 +116,7 @@ type env =\n     rec(crate_map crate_map,\n         def_map def_map,\n         constr_table fn_constrs,\n-        hashmap[ast::node_id, @ast::item] ast_map,\n+        ast_map::map ast_map,\n         hashmap[ast::node_id, import_state] imports,\n         hashmap[ast::node_id, @indexed_mod] mod_map,\n         hashmap[def_id, vec[ident]] ext_map,\n@@ -130,13 +130,13 @@ tag dir { inside; outside; }\n \n tag namespace { ns_value; ns_type; ns_module; }\n \n-fn resolve_crate(session sess, @ast::crate crate) ->\n+fn resolve_crate(session sess, &ast_map::map amap, @ast::crate crate) ->\n    tup(def_map, constr_table) {\n     auto e =\n         @rec(crate_map=new_int_hash[ast::crate_num](),\n              def_map=new_int_hash[def](),\n              fn_constrs = new_int_hash[vec[ty::constr_def]](),\n-             ast_map=new_int_hash[@ast::item](),\n+             ast_map=amap,\n              imports=new_int_hash[import_state](),\n              mod_map=new_int_hash[@indexed_mod](),\n              ext_map=new_def_hash[vec[ident]](),\n@@ -187,7 +187,6 @@ fn map_crate(&@env e, &@ast::crate c) {\n                                       index=index_mod(md),\n                                       mutable glob_imports=vec::empty[def](),\n                                       glob_imported_names=s));\n-                e.ast_map.insert(i.id, i);\n             }\n             case (ast::item_native_mod(?nmd)) {\n                 auto s = new_str_hash[import_state]();\n@@ -196,13 +195,8 @@ fn map_crate(&@env e, &@ast::crate c) {\n                                       index=index_nmod(nmd),\n                                       mutable glob_imports=vec::empty[def](),\n                                       glob_imported_names=s));\n-                e.ast_map.insert(i.id, i);\n             }\n-            case (ast::item_obj(_, _, ?ctor_id)) {\n-                e.ast_map.insert(i.id, i);\n-                e.ast_map.insert(ctor_id, i);\n-            }\n-            case (_) { e.ast_map.insert(i.id, i); }\n+            case (_) { }\n         }\n     }\n     // Next, assemble the links for globbed imports.\n@@ -969,16 +963,12 @@ fn lookup_glob_in_mod(&env e, @indexed_mod info, &span sp, &ident id,\n             ret some[def](matches.(0));\n         } else {\n             for (def match in matches) {\n-                alt (e.ast_map.find(ast::def_id_of_def(match)._1)) {\n-                    case (some(?it)) {\n-                        e.sess.span_note(it.span,\n-                                         \"'\" + id + \"' is defined here.\");\n-                    }\n-                    case (_) {\n-                        e.sess.bug(\"Internal error: imports and matches \" +\n-                                   \"don't agree\");\n-                    }\n-                }\n+                auto span = alt (e.ast_map.get(ast::def_id_of_def(match)._1)){\n+                    case (ast_map::node_item(?it)) { it.span }\n+                    case (ast_map::node_obj_ctor(?it)) { it.span }\n+                    case (ast_map::node_native_item(?it)) { it.span }\n+                };\n+                e.sess.span_note(span, \"'\" + id + \"' is defined here.\");\n             }\n             e.sess.span_fatal(sp,\n                             \"'\" + id + \"' is glob-imported from\" +"}, {"sha": "da2a8640a7d614aef53eca88aa80bfeb000f8e95", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b", "patch": "@@ -19,6 +19,7 @@ mod middle {\n     mod walk;\n     mod visit;\n     mod metadata;\n+    mod ast_map;\n     mod resolve;\n     mod typeck;\n     mod alias;"}]}