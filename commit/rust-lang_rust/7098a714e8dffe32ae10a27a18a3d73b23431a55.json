{"sha": "7098a714e8dffe32ae10a27a18a3d73b23431a55", "node_id": "C_kwDOAAsO6NoAKDcwOThhNzE0ZThkZmZlMzJhZTEwYTI3YTE4YTNkNzNiMjM0MzFhNTU", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-02-15T22:51:24Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-06-20T20:42:49Z"}, "message": "Improve docs for `is_running` to explain use case", "tree": {"sha": "ff4b69520a756d114f86004526eaecfef5b7e284", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff4b69520a756d114f86004526eaecfef5b7e284"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7098a714e8dffe32ae10a27a18a3d73b23431a55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7098a714e8dffe32ae10a27a18a3d73b23431a55", "html_url": "https://github.com/rust-lang/rust/commit/7098a714e8dffe32ae10a27a18a3d73b23431a55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7098a714e8dffe32ae10a27a18a3d73b23431a55/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "611e7b9cea2b982b63de7f6697b2a9079b0bf188", "url": "https://api.github.com/repos/rust-lang/rust/commits/611e7b9cea2b982b63de7f6697b2a9079b0bf188", "html_url": "https://github.com/rust-lang/rust/commit/611e7b9cea2b982b63de7f6697b2a9079b0bf188"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "0a6a7cfe976cc31b9bb6344793bb42f9f3769f6a", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7098a714e8dffe32ae10a27a18a3d73b23431a55/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7098a714e8dffe32ae10a27a18a3d73b23431a55/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=7098a714e8dffe32ae10a27a18a3d73b23431a55", "patch": "@@ -1487,13 +1487,14 @@ impl<T> JoinHandle<T> {\n \n     /// Checks if the associated thread has finished running its main function.\n     ///\n+    /// `is_finished` supports implementing a non-blocking join operation, by checking\n+    /// `is_finished`, and calling `join` if it returns `true`. This function does not block. To\n+    /// block while waiting on the thread to finish, use [`join`][Self::join].\n+    ///\n     /// This might return `true` for a brief moment after the thread's main\n     /// function has returned, but before the thread itself has stopped running.\n     /// However, once this returns `true`, [`join`][Self::join] can be expected\n     /// to return quickly, without blocking for any significant amount of time.\n-    ///\n-    /// This function does not block. To block while waiting on the thread to finish,\n-    /// use [`join`][Self::join].\n     #[stable(feature = \"thread_is_running\", since = \"1.61.0\")]\n     pub fn is_finished(&self) -> bool {\n         Arc::strong_count(&self.0.packet) == 1"}, {"sha": "a387a09dc8b156813a956f7bad47272ee533665c", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7098a714e8dffe32ae10a27a18a3d73b23431a55/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7098a714e8dffe32ae10a27a18a3d73b23431a55/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=7098a714e8dffe32ae10a27a18a3d73b23431a55", "patch": "@@ -308,13 +308,14 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n \n     /// Checks if the associated thread has finished running its main function.\n     ///\n+    /// `is_finished` supports implementing a non-blocking join operation, by checking\n+    /// `is_finished`, and calling `join` if it returns `false`. This function does not block. To\n+    /// block while waiting on the thread to finish, use [`join`][Self::join].\n+    ///\n     /// This might return `true` for a brief moment after the thread's main\n     /// function has returned, but before the thread itself has stopped running.\n     /// However, once this returns `true`, [`join`][Self::join] can be expected\n     /// to return quickly, without blocking for any significant amount of time.\n-    ///\n-    /// This function does not block. To block while waiting on the thread to finish,\n-    /// use [`join`][Self::join].\n     #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n     pub fn is_finished(&self) -> bool {\n         Arc::strong_count(&self.0.packet) == 1"}]}