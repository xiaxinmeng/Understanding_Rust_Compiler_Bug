{"sha": "29ec2506abb1d382e432cae2519aa7b7695c276a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZWMyNTA2YWJiMWQzODJlNDMyY2FlMjUxOWFhN2I3Njk1YzI3NmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-04T07:56:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-04T07:56:57Z"}, "message": "librustc: Remove the `&LIFETIME EXPR` production from the language.\n\nThis was parsed by the parser but completely ignored; not even stored in\nthe AST!\n\nThis breaks code that looks like:\n\n    static X: &'static [u8] = &'static [1, 2, 3];\n\nChange this code to the shorter:\n\n    static X: &'static [u8] = &[1, 2, 3];\n\nCloses #15312.\n\n[breaking-change]", "tree": {"sha": "8548c1ac829f431dd07f930f8c0de909448b57cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8548c1ac829f431dd07f930f8c0de909448b57cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29ec2506abb1d382e432cae2519aa7b7695c276a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29ec2506abb1d382e432cae2519aa7b7695c276a", "html_url": "https://github.com/rust-lang/rust/commit/29ec2506abb1d382e432cae2519aa7b7695c276a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29ec2506abb1d382e432cae2519aa7b7695c276a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bff1ff810dcfa8064c11e2b84473f053d1f69f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bff1ff810dcfa8064c11e2b84473f053d1f69f1", "html_url": "https://github.com/rust-lang/rust/commit/1bff1ff810dcfa8064c11e2b84473f053d1f69f1"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "e699816347ca390846f89b8fc88c4ba963c1cd49", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -316,7 +316,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n \n         #[inline]\n         fn groups<'r>(&'r mut self, i: uint) -> &'r mut Captures {\n-            &'r mut self.queue[i].groups\n+            &mut self.queue[i].groups\n         }\n     }\n }"}, {"sha": "09ba098b21dfb6cc33b3741d850e21fd3255f31a", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -427,7 +427,7 @@ pub fn get_os(triple: &str) -> Option<abi::Os> {\n     }\n     None\n }\n-static os_names : &'static [(&'static str, abi::Os)] = &'static [\n+static os_names : &'static [(&'static str, abi::Os)] = &[\n     (\"mingw32\", abi::OsWin32),\n     (\"win32\",   abi::OsWin32),\n     (\"darwin\",  abi::OsMacos),\n@@ -442,7 +442,7 @@ pub fn get_arch(triple: &str) -> Option<abi::Architecture> {\n     }\n     None\n }\n-static architecture_abis : &'static [(&'static str, abi::Architecture)] = &'static [\n+static architecture_abis : &'static [(&'static str, abi::Architecture)] = &[\n     (\"i386\",   abi::X86),\n     (\"i486\",   abi::X86),\n     (\"i586\",   abi::X86),"}, {"sha": "0ab3d50cfbc3da3b9b7db5edb600dcba316ba235", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -540,7 +540,7 @@ impl LintPass for UnusedAttribute {\n     }\n \n     fn check_attribute(&mut self, cx: &Context, attr: &ast::Attribute) {\n-        static ATTRIBUTE_WHITELIST: &'static [&'static str] = &'static [\n+        static ATTRIBUTE_WHITELIST: &'static [&'static str] = &[\n             // FIXME: #14408 whitelist docs since rustdoc looks at them\n             \"doc\",\n \n@@ -574,7 +574,7 @@ impl LintPass for UnusedAttribute {\n             \"unstable\",\n         ];\n \n-        static CRATE_ATTRS: &'static [&'static str] = &'static [\n+        static CRATE_ATTRS: &'static [&'static str] = &[\n             \"crate_type\",\n             \"feature\",\n             \"no_start\","}, {"sha": "3e3c5d60376e6c61930a60f2962cc9353524ba37", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -1118,7 +1118,7 @@ impl<T: Iterator<char>> Parser<T> {\n     /// Provides access to the current position in the logical structure of the\n     /// JSON stream.\n     pub fn stack<'l>(&'l self) -> &'l Stack {\n-        return &'l self.stack;\n+        return &self.stack;\n     }\n \n     fn eof(&self) -> bool { self.ch.is_none() }"}, {"sha": "098e87243b69cfe8d75824de5e7cc91e744f0748", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -294,8 +294,7 @@ mod table {\n \n             unsafe {\n                 debug_assert!(*self.hashes.offset(idx) != EMPTY_BUCKET);\n-                (&'a *self.keys.offset(idx),\n-                 &'a *self.vals.offset(idx))\n+                (&*self.keys.offset(idx), &*self.vals.offset(idx))\n             }\n         }\n \n@@ -306,8 +305,7 @@ mod table {\n \n             unsafe {\n                 debug_assert!(*self.hashes.offset(idx) != EMPTY_BUCKET);\n-                (&'a     *self.keys.offset(idx),\n-                 &'a mut *self.vals.offset(idx))\n+                (&*self.keys.offset(idx), &mut *self.vals.offset(idx))\n             }\n         }\n \n@@ -319,8 +317,7 @@ mod table {\n             unsafe {\n                 debug_assert!(*self.hashes.offset(idx) != EMPTY_BUCKET);\n                 (transmute(self.hashes.offset(idx)),\n-                 &'a mut *self.keys.offset(idx),\n-                 &'a mut *self.vals.offset(idx))\n+                 &mut *self.keys.offset(idx), &mut *self.vals.offset(idx))\n             }\n         }\n "}, {"sha": "960971b94d2f2e8fa6563748ec6915cbc54413ed", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -2400,7 +2400,6 @@ impl<'a> Parser<'a> {\n           }\n           token::BINOP(token::AND) | token::ANDAND => {\n             self.expect_and();\n-            let _lt = self.parse_opt_lifetime();\n             let m = self.parse_mutability();\n             let e = self.parse_prefix_expr();\n             hi = e.span.hi;"}, {"sha": "9467eb699217074217d016d55405352385b8b43a", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -19,7 +19,7 @@ use super::super::TermInfo;\n \n // These are the orders ncurses uses in its compiled format (as of 5.9). Not sure if portable.\n \n-pub static boolfnames: &'static[&'static str] = &'static[\"auto_left_margin\", \"auto_right_margin\",\n+pub static boolfnames: &'static[&'static str] = &[\"auto_left_margin\", \"auto_right_margin\",\n     \"no_esc_ctlc\", \"ceol_standout_glitch\", \"eat_newline_glitch\", \"erase_overstrike\", \"generic_type\",\n     \"hard_copy\", \"has_meta_key\", \"has_status_line\", \"insert_null_glitch\", \"memory_above\",\n     \"memory_below\", \"move_insert_mode\", \"move_standout_mode\", \"over_strike\", \"status_line_esc_ok\",\n@@ -31,12 +31,12 @@ pub static boolfnames: &'static[&'static str] = &'static[\"auto_left_margin\", \"au\n     \"no_correctly_working_cr\", \"gnu_has_meta_key\", \"linefeed_is_newline\", \"has_hardware_tabs\",\n     \"return_does_clr_eol\"];\n \n-pub static boolnames: &'static[&'static str] = &'static[\"bw\", \"am\", \"xsb\", \"xhp\", \"xenl\", \"eo\",\n+pub static boolnames: &'static[&'static str] = &[\"bw\", \"am\", \"xsb\", \"xhp\", \"xenl\", \"eo\",\n     \"gn\", \"hc\", \"km\", \"hs\", \"in\", \"db\", \"da\", \"mir\", \"msgr\", \"os\", \"eslok\", \"xt\", \"hz\", \"ul\", \"xon\",\n     \"nxon\", \"mc5i\", \"chts\", \"nrrmc\", \"npc\", \"ndscr\", \"ccc\", \"bce\", \"hls\", \"xhpa\", \"crxm\", \"daisy\",\n     \"xvpa\", \"sam\", \"cpix\", \"lpix\", \"OTbs\", \"OTns\", \"OTnc\", \"OTMT\", \"OTNL\", \"OTpt\", \"OTxr\"];\n \n-pub static numfnames: &'static[&'static str] = &'static[ \"columns\", \"init_tabs\", \"lines\",\n+pub static numfnames: &'static[&'static str] = &[ \"columns\", \"init_tabs\", \"lines\",\n     \"lines_of_memory\", \"magic_cookie_glitch\", \"padding_baud_rate\", \"virtual_terminal\",\n     \"width_status_line\", \"num_labels\", \"label_height\", \"label_width\", \"max_attributes\",\n     \"maximum_windows\", \"max_colors\", \"max_pairs\", \"no_color_video\", \"buffer_capacity\",\n@@ -46,12 +46,12 @@ pub static numfnames: &'static[&'static str] = &'static[ \"columns\", \"init_tabs\",\n     \"bit_image_entwining\", \"bit_image_type\", \"magic_cookie_glitch_ul\", \"carriage_return_delay\",\n     \"new_line_delay\", \"backspace_delay\", \"horizontal_tab_delay\", \"number_of_function_keys\"];\n \n-pub static numnames: &'static[&'static str] = &'static[ \"cols\", \"it\", \"lines\", \"lm\", \"xmc\", \"pb\",\n+pub static numnames: &'static[&'static str] = &[ \"cols\", \"it\", \"lines\", \"lm\", \"xmc\", \"pb\",\n     \"vt\", \"wsl\", \"nlab\", \"lh\", \"lw\", \"ma\", \"wnum\", \"colors\", \"pairs\", \"ncv\", \"bufsz\", \"spinv\",\n     \"spinh\", \"maddr\", \"mjump\", \"mcs\", \"mls\", \"npins\", \"orc\", \"orl\", \"orhi\", \"orvi\", \"cps\", \"widcs\",\n     \"btns\", \"bitwin\", \"bitype\", \"UTug\", \"OTdC\", \"OTdN\", \"OTdB\", \"OTdT\", \"OTkn\"];\n \n-pub static stringfnames: &'static[&'static str] = &'static[ \"back_tab\", \"bell\", \"carriage_return\",\n+pub static stringfnames: &'static[&'static str] = &[ \"back_tab\", \"bell\", \"carriage_return\",\n     \"change_scroll_region\", \"clear_all_tabs\", \"clear_screen\", \"clr_eol\", \"clr_eos\",\n     \"column_address\", \"command_character\", \"cursor_address\", \"cursor_down\", \"cursor_home\",\n     \"cursor_invisible\", \"cursor_left\", \"cursor_mem_address\", \"cursor_normal\", \"cursor_right\",\n@@ -124,7 +124,7 @@ pub static stringfnames: &'static[&'static str] = &'static[ \"back_tab\", \"bell\",\n     \"acs_lrcorner\", \"acs_ltee\", \"acs_rtee\", \"acs_btee\", \"acs_ttee\", \"acs_hline\", \"acs_vline\",\n     \"acs_plus\", \"memory_lock\", \"memory_unlock\", \"box_chars_1\"];\n \n-pub static stringnames: &'static[&'static str] = &'static[ \"cbt\", \"_\", \"cr\", \"csr\", \"tbc\", \"clear\",\n+pub static stringnames: &'static[&'static str] = &[ \"cbt\", \"_\", \"cr\", \"csr\", \"tbc\", \"clear\",\n     \"_\", \"_\", \"hpa\", \"cmdch\", \"cup\", \"cud1\", \"home\", \"civis\", \"cub1\", \"mrcup\", \"cnorm\", \"cuf1\",\n     \"ll\", \"cuu1\", \"cvvis\", \"dch1\", \"dl1\", \"dsl\", \"hd\", \"smacs\", \"blink\", \"bold\", \"smcup\", \"smdc\",\n     \"dim\", \"smir\", \"invis\", \"prot\", \"rev\", \"smso\", \"smul\", \"ech\", \"rmacs\", \"sgr0\", \"rmcup\", \"rmdc\","}, {"sha": "1c7516ef7e2bfb2e3189c5e276f4f18d998d7a46", "filename": "src/test/compile-fail/borrowck-forbid-static-unsafe-interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Ftest%2Fcompile-fail%2Fborrowck-forbid-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Ftest%2Fcompile-fail%2Fborrowck-forbid-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-forbid-static-unsafe-interior.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -32,7 +32,7 @@ static STATIC1: UnsafeEnum<int> = VariantSafe;\n static STATIC2: Unsafe<int> = Unsafe{value: 1, marker1: marker::InvariantType};\n static STATIC3: MyUnsafe<int> = MyUnsafe{value: STATIC2};\n \n-static STATIC4: &'static Unsafe<int> = &'static STATIC2;\n+static STATIC4: &'static Unsafe<int> = &STATIC2;\n //~^ ERROR borrow of immutable static items with unsafe interior is not allowed\n \n struct Wrap<T> {"}, {"sha": "b7344d72a46c4253bbc19487d47ef34d159edc20", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -113,12 +113,12 @@ static mut STATIC14: SafeStruct = SafeStruct {\n     field2: Variant4(\"str\".to_string())\n };\n \n-static STATIC15: &'static [Box<MyOwned>] = &'static [box MyOwned, box MyOwned];\n+static STATIC15: &'static [Box<MyOwned>] = &[box MyOwned, box MyOwned];\n //~^ ERROR static items are not allowed to have custom pointers\n //~^^ ERROR static items are not allowed to have custom pointers\n \n static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) =\n-    (&'static box MyOwned, &'static box MyOwned);\n+    (&box MyOwned, &box MyOwned);\n //~^ ERROR static items are not allowed to have custom pointers\n //~^^ ERROR static items are not allowed to have custom pointers\n "}, {"sha": "5b6012673564d03447fa52a44ef99e7f6a362d11", "filename": "src/test/run-pass/issue-5917.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Ftest%2Frun-pass%2Fissue-5917.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Ftest%2Frun-pass%2Fissue-5917.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5917.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct T (&'static [int]);\n-static t : T = T (&'static [5, 4, 3]);\n+static t : T = T (&[5, 4, 3]);\n pub fn main () {\n     let T(ref v) = t;\n     assert_eq!(v[0], 5);"}, {"sha": "275fe740db157ca60c5e136efde82437d80bae4a", "filename": "src/test/run-pass/issue-8578.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Ftest%2Frun-pass%2Fissue-8578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Ftest%2Frun-pass%2Fissue-8578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8578.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -17,7 +17,7 @@ impl<'a> UninterpretedOption_NamePart {\n         static instance: UninterpretedOption_NamePart = UninterpretedOption_NamePart {\n             name_part: None,\n         };\n-        &'static instance\n+        &instance\n     }\n }\n "}, {"sha": "ed4712ff3be9c55bd8ba81e1b64498f0fee7445c", "filename": "src/test/run-pass/trans-tag-static-padding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Ftest%2Frun-pass%2Ftrans-tag-static-padding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Ftest%2Frun-pass%2Ftrans-tag-static-padding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrans-tag-static-padding.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -43,15 +43,15 @@ fn default_instance() -> &'static Request {\n         // size of struct may be not equal to size of struct, and\n         // compiler crashes in internal assertion check.\n     };\n-    &'static instance\n+    &instance\n }\n \n fn non_default_instance() -> &'static Request {\n     static instance: Request = Request {\n         foo: TestSome(0x1020304050607080),\n         bar: 19,\n     };\n-    &'static instance\n+    &instance\n }\n \n pub fn main() {"}, {"sha": "f95e9ad7d83c98a2d05bcd87aac823e96ca2d2f1", "filename": "src/test/run-pass/typeck_type_placeholder_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ec2506abb1d382e432cae2519aa7b7695c276a/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs?ref=29ec2506abb1d382e432cae2519aa7b7695c276a", "patch": "@@ -11,7 +11,7 @@\n // This test checks that the `_` type placeholder works\n // correctly for enabling type inference.\n \n-static CONSTEXPR: *const int = &'static 413 as *const _;\n+static CONSTEXPR: *const int = &413 as *const _;\n \n pub fn main() {\n     let x: Vec<_> = range(0u, 5).collect();"}]}