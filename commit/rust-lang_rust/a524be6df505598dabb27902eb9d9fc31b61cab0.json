{"sha": "a524be6df505598dabb27902eb9d9fc31b61cab0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MjRiZTZkZjUwNTU5OGRhYmIyNzkwMmViOWQ5ZmMzMWI2MWNhYjA=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2020-04-12T13:23:54Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2020-04-12T13:23:54Z"}, "message": "cargo dev fmt", "tree": {"sha": "7ab5d5d2a5b48f75b62b0fba0a2e75e8a7bc5c2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ab5d5d2a5b48f75b62b0fba0a2e75e8a7bc5c2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a524be6df505598dabb27902eb9d9fc31b61cab0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE6VFioMHrom999LRAK0OZxL9Ny94FAl6TFnMACgkQK0OZxL9N\ny94UwxAAnOUPqxSaDi5t5zQf2NQt/K8LaepqiPdc6opBjJMSDp4ev8pvoIruhqAL\n7/r/n/0v2k7a+BgpNUxq8L+u3ByU3KeJXfz4CQtxb/0AmA0fHBfulZlHaPMgODBU\n4EwnhzK0u9EP5eRADcPsEbIdp6PT2CHRdy9NFWdasx+bjJ7bDWtGxGYuMXTgHzvB\noHMHqTrP9f1HsaMUklW2qKFYN4HYKPQ5bltSigKnBAXh7f9FdAor3feC5oHMf/6j\nLgRT8V8jIJs7n9axks6b9BxJX0ZbBf+aYBqr5D/yp7UJx3y+w/QdOqqnyfYJSvRq\npgHMlJr02Mkq6s3+MYaT97R/w4xcN3jb46P9MMEZZCDIXUB5qqVXs8lK+zQP0IH+\nalylY+KADxVmXDZZMbQ+ntm44CEy2RP1NROriVjsAB1+UAsjG++C2648Ksth7Zzi\n9+hEinQk6Wc1eguQIeU5oFEZETR8BP9XwOQp3fpLOzB0eqGyj5ULu/LU7V77rTvg\n0JzkX2zCkAx7NDzTtsLEOW5Im8LDYnQZsHe8x5XtALE2s/ag1mEwuI1hIrSdaSEB\nAzWB8+gAhivugg20EnBB9BgvHWMQ/PxboqYK+WiYJtEpBiZic3j8bWB+aMAlQafH\nH/g0WoLVkseqdaNp9tgUBlU/GMppCVEb34secw1JdQYXQidNOAY=\n=y7lX\n-----END PGP SIGNATURE-----", "payload": "tree 7ab5d5d2a5b48f75b62b0fba0a2e75e8a7bc5c2d\nparent 83874d0ee77264a82a59513fa4362e86c39034c4\nauthor Philipp Hansch <dev@phansch.net> 1586697834 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1586697834 +0200\n\ncargo dev fmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a524be6df505598dabb27902eb9d9fc31b61cab0", "html_url": "https://github.com/rust-lang/rust/commit/a524be6df505598dabb27902eb9d9fc31b61cab0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a524be6df505598dabb27902eb9d9fc31b61cab0/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83874d0ee77264a82a59513fa4362e86c39034c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/83874d0ee77264a82a59513fa4362e86c39034c4", "html_url": "https://github.com/rust-lang/rust/commit/83874d0ee77264a82a59513fa4362e86c39034c4"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "f16d10fde9297aaeca9cd4e3bf8b3fc1d2021f0c", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=a524be6df505598dabb27902eb9d9fc31b61cab0", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    get_trait_def_id, is_type_diagnostic_item, implements_trait, in_macro, paths, snippet_opt, span_lint_and_sugg,\n+    get_trait_def_id, implements_trait, in_macro, is_type_diagnostic_item, paths, snippet_opt, span_lint_and_sugg,\n     span_lint_and_then, SpanlessEq,\n };\n use if_chain::if_chain;\n@@ -249,7 +249,9 @@ fn simplify_not(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<String> {\n         },\n         ExprKind::MethodCall(path, _, args) if args.len() == 1 => {\n             let type_of_receiver = cx.tables.expr_ty(&args[0]);\n-            if !is_type_diagnostic_item(cx, type_of_receiver, sym!(option_type)) && !is_type_diagnostic_item(cx, type_of_receiver, sym!(result_type)) {\n+            if !is_type_diagnostic_item(cx, type_of_receiver, sym!(option_type))\n+                && !is_type_diagnostic_item(cx, type_of_receiver, sym!(result_type))\n+            {\n                 return None;\n             }\n             METHODS_WITH_NEGATION"}, {"sha": "93a394b79e55b29663b260d4ca769429c8c9d390", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=a524be6df505598dabb27902eb9d9fc31b61cab0", "patch": "@@ -9,7 +9,7 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n \n-use crate::utils::{snippet_opt, span_lint_and_help, LimitStack, is_type_diagnostic_item};\n+use crate::utils::{is_type_diagnostic_item, snippet_opt, span_lint_and_help, LimitStack};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for methods with high cognitive complexity."}, {"sha": "8e45a09b489e384beea9302497a97ae76cacffcd", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=a524be6df505598dabb27902eb9d9fc31b61cab0", "patch": "@@ -1,5 +1,7 @@\n use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT};\n-use crate::utils::{is_expn_of, match_def_path, method_chain_args, span_lint_and_then, walk_ptrs_ty, is_type_diagnostic_item};\n+use crate::utils::{\n+    is_expn_of, is_type_diagnostic_item, match_def_path, method_chain_args, span_lint_and_then, walk_ptrs_ty,\n+};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -76,7 +78,9 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n             // check for `unwrap`\n             if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n                 let reciever_ty = walk_ptrs_ty(self.tables.expr_ty(&arglists[0][0]));\n-                if is_type_diagnostic_item(self.lcx, reciever_ty, sym!(option_type)) || is_type_diagnostic_item(self.lcx, reciever_ty, sym!(result_type)) {\n+                if is_type_diagnostic_item(self.lcx, reciever_ty, sym!(option_type))\n+                    || is_type_diagnostic_item(self.lcx, reciever_ty, sym!(result_type))\n+                {\n                     self.result.push(expr.span);\n                 }\n             }"}, {"sha": "206a842d21ca9f82a29c45da71dda075ba5d0b9b", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=a524be6df505598dabb27902eb9d9fc31b61cab0", "patch": "@@ -3,10 +3,10 @@ use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::is_unused;\n use crate::utils::{\n-    expr_block, get_arg_name, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable, is_type_diagnostic_item, is_wild,\n-    match_qpath, match_type, match_var, multispan_sugg, remove_blocks, snippet, snippet_block,\n-    snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n-    walk_ptrs_ty,\n+    expr_block, get_arg_name, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable,\n+    is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, multispan_sugg, remove_blocks, snippet,\n+    snippet_block, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n+    span_lint_and_then, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;"}, {"sha": "3a0e4decec25739799dd6dc8df5e9a70d1c0af63", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a524be6df505598dabb27902eb9d9fc31b61cab0", "patch": "@@ -3209,9 +3209,7 @@ fn is_maybe_uninit_ty_valid(cx: &LateContext<'_, '_>, ty: Ty<'_>) -> bool {\n     match ty.kind {\n         ty::Array(ref component, _) => is_maybe_uninit_ty_valid(cx, component),\n         ty::Tuple(ref types) => types.types().all(|ty| is_maybe_uninit_ty_valid(cx, ty)),\n-        ty::Adt(ref adt, _) => {\n-            match_def_path(cx, adt.did, &paths::MEM_MAYBEUNINIT)\n-        },\n+        ty::Adt(ref adt, _) => match_def_path(cx, adt.did, &paths::MEM_MAYBEUNINIT),\n         _ => false,\n     }\n }"}, {"sha": "28c1d97530938b2a37f9c0c99f0f03fa85241ede", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=a524be6df505598dabb27902eb9d9fc31b61cab0", "patch": "@@ -7,7 +7,8 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    higher, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet_with_applicability, span_lint_and_sugg, SpanlessEq,\n+    higher, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet_with_applicability,\n+    span_lint_and_sugg, SpanlessEq,\n };\n \n declare_clippy_lint! {"}, {"sha": "98dc29507c2e98e6b050da07c81e98eebb0db81a", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a524be6df505598dabb27902eb9d9fc31b61cab0/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=a524be6df505598dabb27902eb9d9fc31b61cab0", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{higher::if_block, span_lint_and_then, usage::is_potentially_mutated, is_type_diagnostic_item};\n+use crate::utils::{higher::if_block, is_type_diagnostic_item, span_lint_and_then, usage::is_potentially_mutated};\n use if_chain::if_chain;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, HirId, Path, QPath, UnOp};"}]}