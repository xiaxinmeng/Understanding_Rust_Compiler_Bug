{"sha": "c9a340e546ac2c708d6f334a83cfbf6a38810255", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YTM0MGU1NDZhYzJjNzA4ZDZmMzM0YTgzY2ZiZjZhMzg4MTAyNTU=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-28T11:37:57Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-05T04:28:52Z"}, "message": "Remove expr_ty method completely", "tree": {"sha": "a5e1db98a24d46993410dbd1cfbed71212c18882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5e1db98a24d46993410dbd1cfbed71212c18882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9a340e546ac2c708d6f334a83cfbf6a38810255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a340e546ac2c708d6f334a83cfbf6a38810255", "html_url": "https://github.com/rust-lang/rust/commit/c9a340e546ac2c708d6f334a83cfbf6a38810255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9a340e546ac2c708d6f334a83cfbf6a38810255/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c8f5457d26055b26210fdd69c5ded1ecdde144a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8f5457d26055b26210fdd69c5ded1ecdde144a", "html_url": "https://github.com/rust-lang/rust/commit/7c8f5457d26055b26210fdd69c5ded1ecdde144a"}], "stats": {"total": 21, "additions": 4, "deletions": 17}, "files": [{"sha": "ab59fafb652099087028a0406a6202802c200523", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9a340e546ac2c708d6f334a83cfbf6a38810255/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a340e546ac2c708d6f334a83cfbf6a38810255/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=c9a340e546ac2c708d6f334a83cfbf6a38810255", "patch": "@@ -472,7 +472,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                    i, expr, autoderef_count);\n \n             if autoderef_count > 0 {\n-                let mut autoderef = self.autoderef(expr.span, self.expr_ty(expr));\n+                let mut autoderef = self.autoderef(expr.span, self.node_ty(expr.id));\n                 autoderef.nth(autoderef_count).unwrap_or_else(|| {\n                     span_bug!(expr.span, \"expr was deref-able {} times but now isn't?\",\n                               autoderef_count);\n@@ -532,7 +532,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                                 unsize: None\n                             }))), false)\n                     };\n-                    let index_expr_ty = self.expr_ty(&index_expr);\n+                    let index_expr_ty = self.node_ty(index_expr.id);\n \n                     let result = self.try_index_step(\n                         ty::MethodCall::expr(expr.id),\n@@ -547,7 +547,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                     if let Some((input_ty, return_ty)) = result {\n                         self.demand_suptype(index_expr.span, input_ty, index_expr_ty);\n \n-                        let expr_ty = self.expr_ty(&expr);\n+                        let expr_ty = self.node_ty(expr.id);\n                         self.demand_suptype(expr.span, expr_ty, return_ty);\n                     }\n                 }\n@@ -558,7 +558,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                     if self.tables.borrow().method_map.contains_key(&method_call) {\n                         let method = self.try_overloaded_deref(expr.span,\n                             Some(&base_expr),\n-                            self.expr_ty(&base_expr),\n+                            self.node_ty(base_expr.id),\n                             PreferMutLvalue);\n                         let method = method.expect(\"re-trying deref failed\");\n                         self.tables.borrow_mut().method_map.insert(method_call, method);"}, {"sha": "00fdcd59f7ceece1d30a798400b02fa44008c867", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c9a340e546ac2c708d6f334a83cfbf6a38810255/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a340e546ac2c708d6f334a83cfbf6a38810255/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c9a340e546ac2c708d6f334a83cfbf6a38810255", "patch": "@@ -1763,19 +1763,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         t\n     }\n \n-    pub fn expr_ty(&self, ex: &hir::Expr) -> Ty<'tcx> {\n-        if let Some(&adjustment::AdjustNeverToAny(ref t))\n-                = self.tables.borrow().adjustments.get(&ex.id) {\n-            return t;\n-        }\n-        match self.tables.borrow().node_types.get(&ex.id) {\n-            Some(&t) => t,\n-            None => {\n-                bug!(\"no type for expr in fcx {}\", self.tag());\n-            }\n-        }\n-    }\n-\n     /// Apply `adjustment` to the type of `expr`\n     pub fn adjust_expr_ty(&self,\n                           expr: &hir::Expr,"}]}