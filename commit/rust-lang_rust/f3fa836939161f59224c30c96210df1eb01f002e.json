{"sha": "f3fa836939161f59224c30c96210df1eb01f002e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZmE4MzY5MzkxNjFmNTkyMjRjMzBjOTYyMTBkZjFlYjAxZjAwMmU=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-04T17:57:17Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-08T22:14:45Z"}, "message": "added test for method arg hygiene", "tree": {"sha": "15cc83f660d1413946bc7e5c223aa41d1b08187b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15cc83f660d1413946bc7e5c223aa41d1b08187b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3fa836939161f59224c30c96210df1eb01f002e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3fa836939161f59224c30c96210df1eb01f002e", "html_url": "https://github.com/rust-lang/rust/commit/f3fa836939161f59224c30c96210df1eb01f002e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3fa836939161f59224c30c96210df1eb01f002e/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bb34a3146e6ba4bc7902a85de90cf4f8064ace0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb34a3146e6ba4bc7902a85de90cf4f8064ace0", "html_url": "https://github.com/rust-lang/rust/commit/8bb34a3146e6ba4bc7902a85de90cf4f8064ace0"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "1569b4ac4e95d1e97df8e88f485d8747b77af922", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f3fa836939161f59224c30c96210df1eb01f002e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3fa836939161f59224c30c96210df1eb01f002e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f3fa836939161f59224c30c96210df1eb01f002e", "patch": "@@ -1390,6 +1390,19 @@ mod test {\n     // but *shouldn't* bind because it was inserted by a different macro....\n     // can't write this test case until we have macro-generating macros.\n \n+    // method arg hygiene\n+    // method expands to fn get_x(&self_0, x_1:int) {self_0 + self_2 + x_3 + x_1}\n+    #[test] fn method_arg_hygiene(){\n+        run_renaming_test(\n+            &(\"macro_rules! inject_x (()=>(x))\n+              macro_rules! inject_self (()=>(self))\n+              struct A;\n+              impl A{fn get_x(&self, x: int) {self + inject_self!() + inject_x!() + x;} }\",\n+              vec!(vec!(0),vec!(3)),\n+              true),\n+            0)\n+    }\n+\n     // item fn hygiene\n     // expands to fn q(x_1:int){fn g(x_2:int){x_2 + x_1};}\n     #[test] fn issue_9383(){"}]}