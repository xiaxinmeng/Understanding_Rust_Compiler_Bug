{"sha": "7d32f3d052b46f09bfd21effd801eebeab4204b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzJmM2QwNTJiNDZmMDliZmQyMWVmZmQ4MDFlZWJlYWI0MjA0YjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-15T23:30:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-15T23:30:43Z"}, "message": "rustc: Add a stub crate reader module for \"use\" directives", "tree": {"sha": "d6c7cf9282192058382f8c09b3595fd07f9f5dd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6c7cf9282192058382f8c09b3595fd07f9f5dd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d32f3d052b46f09bfd21effd801eebeab4204b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d32f3d052b46f09bfd21effd801eebeab4204b3", "html_url": "https://github.com/rust-lang/rust/commit/7d32f3d052b46f09bfd21effd801eebeab4204b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d32f3d052b46f09bfd21effd801eebeab4204b3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb081d661161f7b68a85a828a998b63bbf6cfd13", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb081d661161f7b68a85a828a998b63bbf6cfd13", "html_url": "https://github.com/rust-lang/rust/commit/bb081d661161f7b68a85a828a998b63bbf6cfd13"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "ed03f1d2e48e5062abb30a2cbe0141f03f25ec0d", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7d32f3d052b46f09bfd21effd801eebeab4204b3/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d32f3d052b46f09bfd21effd801eebeab4204b3/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=7d32f3d052b46f09bfd21effd801eebeab4204b3", "patch": "@@ -1,5 +1,6 @@\n // -*- rust -*-\n \n+import front.creader;\n import front.parser;\n import front.token;\n import front.eval;\n@@ -53,10 +54,12 @@ impure fn parse_input(session.session sess,\n impure fn compile_input(session.session sess,\n                         eval.env env,\n                         str input, str output,\n-                        bool shared) {\n+                        bool shared,\n+                        vec[str] library_search_paths) {\n     auto def = tup(0, 0);\n     auto p = parser.new_parser(sess, env, def, input);\n     auto crate = parse_input(sess, p, input);\n+    crate = creader.read_crates(sess, crate);\n     crate = resolve.resolve_crate(sess, crate);\n     crate = typeck.check_crate(sess, crate);\n     trans.trans_crate(sess, crate, output, shared);\n@@ -87,6 +90,7 @@ fn usage(session.session sess, str argv0) {\n     log \"    -glue              generate glue.bc file\";\n     log \"    -shared            compile a shared-library crate\";\n     log \"    -pp                pretty-print the input instead of compiling\";\n+    log \"    -L <path>          add a directory to the library search path\";\n     log \"    -h                 display this message\";\n     log \"\";\n     log \"\";\n@@ -111,6 +115,7 @@ impure fn main(vec[str] args) {\n     auto sess = session.session(target_cfg);\n     let option.t[str] input_file = none[str];\n     let option.t[str] output_file = none[str];\n+    let vec[str] library_search_paths = vec();\n     let bool do_warn = true;\n     let bool shared = false;\n     let bool pretty = false;\n@@ -139,6 +144,14 @@ impure fn main(vec[str] args) {\n                     usage(sess, args.(0));\n                     sess.err(\"-o requires an argument\");\n                 }\n+            } else if (_str.eq(arg, \"-L\")) {\n+                if (i+1u < len) {\n+                    library_search_paths += vec(args.(i+1u));\n+                    i += 1u;\n+                } else {\n+                    usage(sess, args.(0));\n+                    sess.err(\"-L requires an argument\");\n+                }\n             } else if (_str.eq(arg, \"-h\")) {\n                 usage(sess, args.(0));\n             } else {\n@@ -193,10 +206,12 @@ impure fn main(vec[str] args) {\n                         parts = _vec.pop[str](parts);\n                         parts += \".bc\";\n                         auto ofile = _str.concat(parts);\n-                        compile_input(sess, env, ifile, ofile, shared);\n+                        compile_input(sess, env, ifile, ofile, shared,\n+                                      library_search_paths);\n                     }\n                     case (some[str](?ofile)) {\n-                        compile_input(sess, env, ifile, ofile, shared);\n+                        compile_input(sess, env, ifile, ofile, shared,\n+                                      library_search_paths);\n                     }\n                 }\n             }"}, {"sha": "3de72406448de6639e424011b7d3f7d662b5ef0b", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d32f3d052b46f09bfd21effd801eebeab4204b3/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d32f3d052b46f09bfd21effd801eebeab4204b3/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=7d32f3d052b46f09bfd21effd801eebeab4204b3", "patch": "@@ -21,6 +21,7 @@ type ty_param = rec(ident ident, def_id id);\n // Annotations added during successive passes.\n tag ann {\n     ann_none;\n+    ann_crate(@external_crate_info);\n     ann_type(@middle.ty.t, option.t[vec[@middle.ty.t]] /* ty param substs */);\n }\n \n@@ -370,6 +371,9 @@ tag native_item_ {\n     native_item_fn(ident, fn_decl, vec[ty_param], def_id, ann);\n }\n \n+// TODO: Actually store something here.\n+type external_crate_info = ();\n+\n fn index_view_item(mod_index index, @view_item it) {\n     alt (it.node) {\n         case(ast.view_item_use(?id, _, _)) {"}, {"sha": "4564ae2b42268a9263a996b3540c92ac6caf0b2f", "filename": "src/comp/front/creader.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7d32f3d052b46f09bfd21effd801eebeab4204b3/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d32f3d052b46f09bfd21effd801eebeab4204b3/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=7d32f3d052b46f09bfd21effd801eebeab4204b3", "patch": "@@ -0,0 +1,28 @@\n+// -*- rust -*-\n+\n+import driver.session;\n+import front.ast;\n+import middle.fold;\n+import util.common;\n+import util.common.span;\n+import std.map.hashmap;\n+\n+// TODO: map to a real type here.\n+type env = @hashmap[str, @ast.external_crate_info];\n+\n+fn fold_view_item_use(&env e, &span sp, ast.ident ident,\n+        vec[@ast.meta_item] meta_items, ast.def_id id) -> @ast.view_item {\n+    // TODO: find the crate\n+\n+    auto viu = ast.view_item_use(ident, meta_items, id);\n+    ret @fold.respan[ast.view_item_](sp, viu);\n+}\n+\n+// Reads external crates referenced by \"use\" directives.\n+fn read_crates(session.session sess, @ast.crate crate) -> @ast.crate {\n+    auto external_crates = @common.new_str_hash[@ast.external_crate_info]();\n+    auto f = fold_view_item_use;\n+    auto fld = @rec(fold_view_item_use=f with *fold.new_identity_fold[env]());\n+    ret fold.fold_crate[env](external_crates, fld, crate);\n+}\n+"}, {"sha": "7f1a7a03ebcf688fbd1aa520970c3bf4ddb9cc3b", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d32f3d052b46f09bfd21effd801eebeab4204b3/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7d32f3d052b46f09bfd21effd801eebeab4204b3/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=7d32f3d052b46f09bfd21effd801eebeab4204b3", "patch": "@@ -5,6 +5,7 @@ use std;\n \n mod front {\n     mod ast;\n+    mod creader;\n     mod extfmt;\n     mod lexer;\n     mod parser;"}]}