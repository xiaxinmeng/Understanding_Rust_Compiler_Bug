{"sha": "e38106599a1f3f27de889e5efc8d1812571b310b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzODEwNjU5OWExZjNmMjdkZTg4OWU1ZWZjOGQxODEyNTcxYjMxMGI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-11T09:34:57Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-11T09:34:57Z"}, "message": "Address review comments", "tree": {"sha": "aa1bcd70ab6028b5f5864b2f6eb3fc9eacb7408c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa1bcd70ab6028b5f5864b2f6eb3fc9eacb7408c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e38106599a1f3f27de889e5efc8d1812571b310b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e38106599a1f3f27de889e5efc8d1812571b310b", "html_url": "https://github.com/rust-lang/rust/commit/e38106599a1f3f27de889e5efc8d1812571b310b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e38106599a1f3f27de889e5efc8d1812571b310b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af26e7f4f411824a633807d88346e99e62ae3ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/af26e7f4f411824a633807d88346e99e62ae3ef3", "html_url": "https://github.com/rust-lang/rust/commit/af26e7f4f411824a633807d88346e99e62ae3ef3"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "3b6064fcdf7bf2c7e24fc86f000f9a6356fa21b8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e38106599a1f3f27de889e5efc8d1812571b310b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38106599a1f3f27de889e5efc8d1812571b310b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e38106599a1f3f27de889e5efc8d1812571b310b", "patch": "@@ -187,8 +187,9 @@ pub fn literal_to_string(lit: token::Lit) -> String {\n     out\n }\n \n-fn ident_to_string(ident: ast::Ident, is_raw: bool) -> String {\n-    ident_to_string_ext(ident.name, is_raw, Some(ident.span))\n+/// Print an ident from AST, `$crate` is converted into its respective crate name.\n+fn ast_ident_to_string(ident: ast::Ident, is_raw: bool) -> String {\n+    ident_to_string(ident.name, is_raw, Some(ident.span))\n }\n \n // AST pretty-printer is used as a fallback for turning AST structures into token streams for\n@@ -202,9 +203,7 @@ fn ident_to_string(ident: ast::Ident, is_raw: bool) -> String {\n // but not otherwise. Pretty-printing is the only way for proc macros to discover token contents,\n // so we should not perform this lossy conversion if the top level call to the pretty-printer was\n // done for a token stream or a single token.\n-fn ident_to_string_ext(\n-    name: ast::Name, is_raw: bool, convert_dollar_crate: Option<Span>\n-) -> String {\n+fn ident_to_string(name: ast::Name, is_raw: bool, convert_dollar_crate: Option<Span>) -> String {\n     if is_raw {\n         format!(\"r#{}\", name)\n     } else {\n@@ -222,6 +221,7 @@ fn ident_to_string_ext(\n     }\n }\n \n+/// Print the token kind precisely, without converting `$crate` into its respective crate name.\n pub fn token_kind_to_string(tok: &TokenKind) -> String {\n     token_kind_to_string_ext(tok, None)\n }\n@@ -272,7 +272,7 @@ fn token_kind_to_string_ext(tok: &TokenKind, convert_dollar_crate: Option<Span>)\n         token::Literal(lit) => literal_to_string(lit),\n \n         /* Name components */\n-        token::Ident(s, is_raw)     => ident_to_string_ext(s, is_raw, convert_dollar_crate),\n+        token::Ident(s, is_raw)     => ident_to_string(s, is_raw, convert_dollar_crate),\n         token::Lifetime(s)          => s.to_string(),\n \n         /* Other */\n@@ -286,6 +286,7 @@ fn token_kind_to_string_ext(tok: &TokenKind, convert_dollar_crate: Option<Span>)\n     }\n }\n \n+/// Print the token precisely, without converting `$crate` into its respective crate name.\n pub fn token_to_string(token: &Token) -> String {\n     token_to_string_ext(token, false)\n }\n@@ -305,7 +306,7 @@ crate fn nonterminal_to_string(nt: &Nonterminal) -> String {\n         token::NtBlock(ref e)       => block_to_string(e),\n         token::NtStmt(ref e)        => stmt_to_string(e),\n         token::NtPat(ref e)         => pat_to_string(e),\n-        token::NtIdent(e, is_raw)   => ident_to_string(e, is_raw),\n+        token::NtIdent(e, is_raw)   => ast_ident_to_string(e, is_raw),\n         token::NtLifetime(e)        => e.to_string(),\n         token::NtLiteral(ref e)     => expr_to_string(e),\n         token::NtTT(ref tree)       => tt_to_string(tree.clone()),\n@@ -601,7 +602,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n                 self.word(\"::\");\n             }\n             if segment.ident.name != kw::PathRoot {\n-                self.word(ident_to_string(segment.ident, segment.ident.is_raw_guess()));\n+                self.word(ast_ident_to_string(segment.ident, segment.ident.is_raw_guess()));\n             }\n         }\n     }\n@@ -2205,7 +2206,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_ident(&mut self, ident: ast::Ident) {\n-        self.s.word(ident_to_string(ident, ident.is_raw_guess()));\n+        self.s.word(ast_ident_to_string(ident, ident.is_raw_guess()));\n         self.ann.post(self, AnnNode::Ident(&ident))\n     }\n "}]}