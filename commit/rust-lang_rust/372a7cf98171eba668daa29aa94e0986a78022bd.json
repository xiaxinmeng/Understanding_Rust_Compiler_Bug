{"sha": "372a7cf98171eba668daa29aa94e0986a78022bd", "node_id": "C_kwDOAAsO6NoAKDM3MmE3Y2Y5ODE3MWViYTY2OGRhYTI5YWE5NGUwOTg2YTc4MDIyYmQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-04T17:33:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-04T17:33:16Z"}, "message": "Merge #10929\n\n10929: internal: Split up macro/attribute semantic tokens a bit more r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/9172\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "4c1ef2acae67582e02a0adcd8e84420ced268664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c1ef2acae67582e02a0adcd8e84420ced268664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/372a7cf98171eba668daa29aa94e0986a78022bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhq6ZcCRBK7hj4Ov3rIwAAbLQIAJvU6wayLqkz43prpuFpN/Vl\nrB0YTXdNheMF95O5itb27L+jgQY7tasYWfDa0LKHv35M9VM9WtkhPrlGy1psjJxh\n0SQWT3VkstRf8yFfyHIZmSO+HDnrl3ClXjTUqMa28R/ZAlwYNM2ZBEHIgU0O0jkG\nKEIXBYwiruvRptym3he/clveskYLEKCDxJKb49MyHbLQrsvQ4EAQghCuIXj6h4w9\nBs0NZdaP1PVwXM6koxM20MkNnaU+KdcH0ik/qBxvISaQoqssF4Wu0mGbgYxyw8S8\nIwrGyzGbdGwXs3uY6NHiuW4EPjydq5mjCs/6FMnWJem2Wd48szQGOzG8z2lcTMI=\n=18vj\n-----END PGP SIGNATURE-----\n", "payload": "tree 4c1ef2acae67582e02a0adcd8e84420ced268664\nparent b327cf3d0cb2f13af850400b341ea81c878ecf42\nparent 3472105ad9cef06d7a3a032047bcbf06bc80fe26\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1638639196 +0000\ncommitter GitHub <noreply@github.com> 1638639196 +0000\n\nMerge #10929\n\n10929: internal: Split up macro/attribute semantic tokens a bit more r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/9172\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/372a7cf98171eba668daa29aa94e0986a78022bd", "html_url": "https://github.com/rust-lang/rust/commit/372a7cf98171eba668daa29aa94e0986a78022bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/372a7cf98171eba668daa29aa94e0986a78022bd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b327cf3d0cb2f13af850400b341ea81c878ecf42", "url": "https://api.github.com/repos/rust-lang/rust/commits/b327cf3d0cb2f13af850400b341ea81c878ecf42", "html_url": "https://github.com/rust-lang/rust/commit/b327cf3d0cb2f13af850400b341ea81c878ecf42"}, {"sha": "3472105ad9cef06d7a3a032047bcbf06bc80fe26", "url": "https://api.github.com/repos/rust-lang/rust/commits/3472105ad9cef06d7a3a032047bcbf06bc80fe26", "html_url": "https://github.com/rust-lang/rust/commit/3472105ad9cef06d7a3a032047bcbf06bc80fe26"}], "stats": {"total": 367, "additions": 194, "deletions": 173}, "files": [{"sha": "d97e52200dc5ee0bfbb3e883fe62765fd78c7612", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -363,7 +363,13 @@ impl TryToNav for hir::MacroDef {\n         let mut res = NavigationTarget::from_named(\n             db,\n             src.as_ref().with_value(name_owner),\n-            SymbolKind::Macro,\n+            match self.kind() {\n+                hir::MacroKind::Declarative\n+                | hir::MacroKind::BuiltIn\n+                | hir::MacroKind::ProcMacro => SymbolKind::Macro,\n+                hir::MacroKind::Derive => SymbolKind::Derive,\n+                hir::MacroKind::Attr => SymbolKind::Attribute,\n+            },\n         );\n         res.docs = self.docs(db);\n         Some(res)"}, {"sha": "0741e1ffbfaca93da1916de3669204dade608367", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -57,9 +57,11 @@ pub struct HlRange {\n // - For items:\n // +\n // [horizontal]\n+// attribute:: Emitted for attribute macros.\n // enum:: Emitted for enums.\n // function:: Emitted for free-standing functions.\n-// macro:: Emitted for macros.\n+// derive:: Emitted for derive macros.\n+// macro:: Emitted for function-like macros.\n // method:: Emitted for associated functions, also knowns as methods.\n // namespace:: Emitted for modules.\n // struct:: Emitted for structs.\n@@ -90,6 +92,7 @@ pub struct HlRange {\n // +\n // [horizontal]\n // punctuation:: Emitted for general punctuation.\n+// attributeBracket:: Emitted for attribute invocation brackets, that is the `#[` and `]` tokens.\n // angle:: Emitted for `<>` angle brackets.\n // brace:: Emitted for `{}` braces.\n // bracket:: Emitted for `[]` brackets.\n@@ -102,7 +105,6 @@ pub struct HlRange {\n // //-\n //\n // [horizontal]\n-// attribute:: Emitted for the `#[` `]` tokens.\n // builtinAttribute:: Emitted for names to builtin attributes in attribute path, the `repr` in `#[repr(u8)]` for example.\n // builtinType:: Emitted for builtin types like `u32`, `str` and `f32`.\n // comment:: Emitted for comments."}, {"sha": "a5be905983f0d34471fbe045679b3f87efef10ac", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -133,7 +133,7 @@ fn token(\n                 _ if parent_matches::<ast::RangeExpr>(&token) => HlOperator::Other.into(),\n                 _ if parent_matches::<ast::RangePat>(&token) => HlOperator::Other.into(),\n                 _ if parent_matches::<ast::RestPat>(&token) => HlOperator::Other.into(),\n-                _ if parent_matches::<ast::Attr>(&token) => HlTag::Attribute.into(),\n+                _ if parent_matches::<ast::Attr>(&token) => HlTag::AttributeBracket.into(),\n                 kind => match kind {\n                     T!['['] | T![']'] => HlPunct::Bracket,\n                     T!['{'] | T!['}'] => HlPunct::Brace,\n@@ -200,7 +200,7 @@ fn node(\n                 return None;\n             },\n             ast::Attr(__) => {\n-                HlTag::Attribute.into()\n+                HlTag::AttributeBracket.into()\n             },\n             // Highlight definitions depending on the \"type\" of the definition.\n             ast::Name(name) => {\n@@ -374,7 +374,13 @@ fn highlight_def(\n ) -> Highlight {\n     let db = sema.db;\n     let mut h = match def {\n-        Definition::Macro(_) => Highlight::new(HlTag::Symbol(SymbolKind::Macro)),\n+        Definition::Macro(m) => Highlight::new(HlTag::Symbol(match m.kind() {\n+            hir::MacroKind::Declarative | hir::MacroKind::BuiltIn | hir::MacroKind::ProcMacro => {\n+                SymbolKind::Macro\n+            }\n+            hir::MacroKind::Derive => SymbolKind::Derive,\n+            hir::MacroKind::Attr => SymbolKind::Attribute,\n+        })),\n         Definition::Field(_) => Highlight::new(HlTag::Symbol(SymbolKind::Field)),\n         Definition::Module(module) => {\n             let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Module));"}, {"sha": "7216eae0ebcb41f77f837fc71ff303a1cc3a0f9b", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -18,7 +18,7 @@ pub struct HlMods(u32);\n pub enum HlTag {\n     Symbol(SymbolKind),\n \n-    Attribute,\n+    AttributeBracket,\n     BoolLiteral,\n     BuiltinType,\n     ByteLiteral,\n@@ -124,9 +124,11 @@ impl HlTag {\n     fn as_str(self) -> &'static str {\n         match self {\n             HlTag::Symbol(symbol) => match symbol {\n+                SymbolKind::Attribute => \"attribute\",\n                 SymbolKind::BuiltinAttr => \"builtin_attr\",\n                 SymbolKind::Const => \"constant\",\n                 SymbolKind::ConstParam => \"const_param\",\n+                SymbolKind::Derive => \"derive\",\n                 SymbolKind::Enum => \"enum\",\n                 SymbolKind::Field => \"field\",\n                 SymbolKind::Function => \"function\",\n@@ -147,7 +149,7 @@ impl HlTag {\n                 SymbolKind::ValueParam => \"value_param\",\n                 SymbolKind::Variant => \"enum_variant\",\n             },\n-            HlTag::Attribute => \"attribute\",\n+            HlTag::AttributeBracket => \"attribute_bracket\",\n             HlTag::BoolLiteral => \"bool_literal\",\n             HlTag::BuiltinType => \"builtin_type\",\n             HlTag::ByteLiteral => \"byte_literal\","}, {"sha": "0b1c5470ee9407b10cb9cee33193b473662cb9d5", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -72,7 +72,7 @@\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// #</span><span class=\"none injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"builtin_attr attribute injected library\">allow</span><span class=\"parenthesis attribute injected\">(</span><span class=\"none attribute injected\">unused_mut</span><span class=\"parenthesis attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n+    <span class=\"comment documentation\">/// #</span><span class=\"none injected\"> </span><span class=\"attribute_bracket attribute injected\">#</span><span class=\"attribute_bracket attribute injected\">!</span><span class=\"attribute_bracket attribute injected\">[</span><span class=\"builtin_attr attribute injected library\">allow</span><span class=\"parenthesis attribute injected\">(</span><span class=\"none attribute injected\">unused_mut</span><span class=\"parenthesis attribute injected\">)</span><span class=\"attribute_bracket attribute injected\">]</span>\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"none injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"colon injected\">:</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public static\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n@@ -143,12 +143,12 @@\n <span class=\"comment documentation\">///</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"comment documentation\">/// </span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"false\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute_bracket attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute_bracket attribute\"> </span><span class=\"string_literal attribute\">\"false\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute_bracket attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute_bracket attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute_bracket attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">doc</span><span class=\"attribute_bracket attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute_bracket attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"comment documentation\">///</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```rust\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```ignore\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute_bracket attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute_bracket attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"comma attribute\">,</span><span class=\"attribute_bracket attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute_bracket attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute_bracket attribute\"> </span><span class=\"string_literal attribute\">\"```rust\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute_bracket attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute_bracket attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute_bracket attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute_bracket attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute_bracket attribute\"> </span><span class=\"string_literal attribute\">\"```ignore\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"none injected\">alloc::</span><span class=\"macro injected\">vec!</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration public\">mix_and_match</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>"}, {"sha": "e457069e1f6379f9941925fd6764382279118213", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -45,14 +45,14 @@\n         <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>io<span class=\"colon\">:</span><span class=\"colon\">:</span>_print<span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>format_args_nl<span class=\"punctuation\">!</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>arg<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span><span class=\"parenthesis\">)</span>\n <span class=\"brace\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">macro_export</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">macro_export</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">format_args</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">macro_export</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">macro_export</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">const_format_args</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">macro_export</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">macro_export</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">format_args_nl</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">mod</span> <span class=\"module declaration\">panic</span> <span class=\"brace\">{</span>\n@@ -77,12 +77,12 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">std_panic</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">macro_export</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">std_panic</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">macro_export</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">panic</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">assert</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">asm</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">toho</span> <span class=\"brace\">{</span>"}, {"sha": "04494283d5da4d12b3a00e474ee2d862544c9687", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -54,7 +54,7 @@\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference unsafe\">unsafe_method</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">repr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">packed</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">repr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">packed</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Packed</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">a</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u16</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>"}, {"sha": "b0fbbfda2a12d59abef43f99531fedff5ca14ff9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -43,16 +43,16 @@\n <pre><code><span class=\"keyword\">use</span> <span class=\"module\">inner</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"module declaration\">inner_mod</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">allow</span><span class=\"parenthesis attribute\">(</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"module attribute crate_root library\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"macro attribute library\">identity</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">allow</span><span class=\"parenthesis attribute\">(</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"module attribute crate_root library\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"attribute attribute library\">identity</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">ops</span> <span class=\"brace\">{</span>\n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute_bracket attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_mut\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_mut\"</span><span class=\"attribute_bracket attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn\"</span><span class=\"attribute_bracket attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">Fn</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n@@ -87,7 +87,7 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"macro attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"macro attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>"}, {"sha": "f09015efb603b05a1081b6d1df32400c0d45ef99", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -4,20 +4,19 @@\n //! for built-in attributes.\n \n use hir::HasAttrs;\n-use ide_db::helpers::{\n-    generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES, RUSTDOC_LINTS},\n-    parse_tt_as_comma_sep_paths,\n+use ide_db::{\n+    helpers::{\n+        generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES, RUSTDOC_LINTS},\n+        parse_tt_as_comma_sep_paths,\n+    },\n+    SymbolKind,\n };\n use itertools::Itertools;\n use once_cell::sync::Lazy;\n use rustc_hash::FxHashMap;\n use syntax::{algo::non_trivia_sibling, ast, AstNode, Direction, SyntaxKind, T};\n \n-use crate::{\n-    context::CompletionContext,\n-    item::{CompletionItem, CompletionItemKind},\n-    Completions,\n-};\n+use crate::{context::CompletionContext, item::CompletionItem, Completions};\n \n mod cfg;\n mod derive;\n@@ -73,11 +72,8 @@ fn complete_new_attribute(acc: &mut Completions, ctx: &CompletionContext, attrib\n     });\n \n     let add_completion = |attr_completion: &AttrCompletion| {\n-        let mut item = CompletionItem::new(\n-            CompletionItemKind::Attribute,\n-            ctx.source_range(),\n-            attr_completion.label,\n-        );\n+        let mut item =\n+            CompletionItem::new(SymbolKind::Attribute, ctx.source_range(), attr_completion.label);\n \n         if let Some(lookup) = attr_completion.lookup {\n             item.lookup_by(lookup);\n@@ -107,7 +103,7 @@ fn complete_new_attribute(acc: &mut Completions, ctx: &CompletionContext, attrib\n         if let hir::ScopeDef::MacroDef(mac) = scope_def {\n             if mac.kind() == hir::MacroKind::Attr {\n                 let mut item = CompletionItem::new(\n-                    CompletionItemKind::Attribute,\n+                    SymbolKind::Attribute,\n                     ctx.source_range(),\n                     name.to_smol_str(),\n                 );"}, {"sha": "e53bf4917431139c97b80464383a81a35743759e", "filename": "crates/ide_completion/src/completions/attribute/cfg.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -2,16 +2,14 @@\n \n use std::iter;\n \n+use ide_db::SymbolKind;\n use syntax::SyntaxKind;\n \n-use crate::{\n-    completions::Completions, context::CompletionContext, CompletionItem, CompletionItemKind,\n-};\n+use crate::{completions::Completions, context::CompletionContext, CompletionItem};\n \n pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n     let add_completion = |item: &str| {\n-        let mut completion =\n-            CompletionItem::new(CompletionItemKind::Attribute, ctx.source_range(), item);\n+        let mut completion = CompletionItem::new(SymbolKind::BuiltinAttr, ctx.source_range(), item);\n         completion.insert_text(format!(r#\"\"{}\"\"#, item));\n         acc.add(completion.build());\n     };\n@@ -34,7 +32,7 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n                 krate.potential_cfg(ctx.db).get_cfg_values(&name).cloned().for_each(|s| {\n                     let insert_text = format!(r#\"\"{}\"\"#, s);\n                     let mut item =\n-                        CompletionItem::new(CompletionItemKind::Attribute, ctx.source_range(), s);\n+                        CompletionItem::new(SymbolKind::BuiltinAttr, ctx.source_range(), s);\n                     item.insert_text(insert_text);\n \n                     acc.add(item.build());\n@@ -44,8 +42,7 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n         None => {\n             if let Some(krate) = ctx.krate {\n                 krate.potential_cfg(ctx.db).get_cfg_keys().cloned().for_each(|s| {\n-                    let item =\n-                        CompletionItem::new(CompletionItemKind::Attribute, ctx.source_range(), s);\n+                    let item = CompletionItem::new(SymbolKind::BuiltinAttr, ctx.source_range(), s);\n                     acc.add(item.build());\n                 })\n             }"}, {"sha": "0daf1147882b78372db36917c5ec273fa561c435", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -1,15 +1,16 @@\n //! Completion for derives\n use hir::{HasAttrs, MacroDef, MacroKind};\n-use ide_db::helpers::{import_assets::ImportAssets, insert_use::ImportScope, FamousDefs};\n+use ide_db::{\n+    helpers::{import_assets::ImportAssets, insert_use::ImportScope, FamousDefs},\n+    SymbolKind,\n+};\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{ast, SmolStr, SyntaxKind};\n \n use crate::{\n-    completions::flyimport::compute_fuzzy_completion_order_key,\n-    context::CompletionContext,\n-    item::{CompletionItem, CompletionItemKind},\n-    Completions, ImportEdit,\n+    completions::flyimport::compute_fuzzy_completion_order_key, context::CompletionContext,\n+    item::CompletionItem, Completions, ImportEdit,\n };\n \n pub(super) fn complete_derive(\n@@ -56,8 +57,7 @@ pub(super) fn complete_derive(\n             _ => (name, None),\n         };\n \n-        let mut item =\n-            CompletionItem::new(CompletionItemKind::Attribute, ctx.source_range(), label);\n+        let mut item = CompletionItem::new(SymbolKind::Derive, ctx.source_range(), label);\n         if let Some(docs) = mac.docs(ctx.db) {\n             item.documentation(docs);\n         }\n@@ -67,7 +67,7 @@ pub(super) fn complete_derive(\n         item.add_to(acc);\n     }\n \n-    flyimport_attribute(acc, ctx);\n+    flyimport_derive(acc, ctx);\n }\n \n fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, MacroDef)> {\n@@ -82,7 +82,7 @@ fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, MacroDef)> {\n     result\n }\n \n-fn flyimport_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n+fn flyimport_derive(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     if ctx.token.kind() != SyntaxKind::IDENT {\n         return None;\n     };\n@@ -106,13 +106,14 @@ fn flyimport_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option\n                 hir::ItemInNs::Macros(mac) => Some((import, mac)),\n                 _ => None,\n             })\n+            .filter(|&(_, mac)| mac.kind() == MacroKind::Derive)\n             .filter(|&(_, mac)| !ctx.is_item_hidden(&hir::ItemInNs::Macros(mac)))\n             .sorted_by_key(|(import, _)| {\n                 compute_fuzzy_completion_order_key(&import.import_path, &user_input_lowercased)\n             })\n             .filter_map(|(import, mac)| {\n                 let mut item = CompletionItem::new(\n-                    CompletionItemKind::Attribute,\n+                    SymbolKind::Derive,\n                     ctx.source_range(),\n                     mac.name(ctx.db)?.to_smol_str(),\n                 );"}, {"sha": "e2477423a2d58bb0731ea83953fbc19b4bbca62f", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -1,12 +1,8 @@\n //! Completion for lints\n-use ide_db::helpers::generated_lints::Lint;\n+use ide_db::{helpers::generated_lints::Lint, SymbolKind};\n use syntax::{ast, T};\n \n-use crate::{\n-    context::CompletionContext,\n-    item::{CompletionItem, CompletionItemKind},\n-    Completions,\n-};\n+use crate::{context::CompletionContext, item::CompletionItem, Completions};\n \n pub(super) fn complete_lint(\n     acc: &mut Completions,\n@@ -58,8 +54,7 @@ pub(super) fn complete_lint(\n             Some(qual) if !is_qualified => format!(\"{}::{}\", qual, name),\n             _ => name.to_owned(),\n         };\n-        let mut item =\n-            CompletionItem::new(CompletionItemKind::Attribute, ctx.source_range(), label);\n+        let mut item = CompletionItem::new(SymbolKind::Attribute, ctx.source_range(), label);\n         item.documentation(hir::Documentation::new(description.to_owned()));\n         item.add_to(acc)\n     }"}, {"sha": "805038091c7941daa93211092b7e02679e2ab3e7", "filename": "crates/ide_completion/src/completions/attribute/repr.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -1,12 +1,9 @@\n //! Completion for representations.\n \n+use ide_db::SymbolKind;\n use syntax::ast;\n \n-use crate::{\n-    context::CompletionContext,\n-    item::{CompletionItem, CompletionItemKind},\n-    Completions,\n-};\n+use crate::{context::CompletionContext, item::CompletionItem, Completions};\n \n pub(super) fn complete_repr(acc: &mut Completions, ctx: &CompletionContext, input: ast::TokenTree) {\n     if let Some(existing_reprs) = super::parse_comma_sep_expr(input) {\n@@ -29,8 +26,7 @@ pub(super) fn complete_repr(acc: &mut Completions, ctx: &CompletionContext, inpu\n                 continue;\n             }\n \n-            let mut item =\n-                CompletionItem::new(CompletionItemKind::Attribute, ctx.source_range(), label);\n+            let mut item = CompletionItem::new(SymbolKind::BuiltinAttr, ctx.source_range(), label);\n             if let Some(lookup) = lookup {\n                 item.lookup_by(lookup);\n             }"}, {"sha": "4a6e034dc91515e4996cc65a665eb6aae4bc1e8a", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -216,7 +216,6 @@ impl CompletionRelevance {\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum CompletionItemKind {\n     SymbolKind(SymbolKind),\n-    Attribute,\n     Binding,\n     BuiltinType,\n     Keyword,\n@@ -232,9 +231,11 @@ impl CompletionItemKind {\n     pub(crate) fn tag(&self) -> &'static str {\n         match self {\n             CompletionItemKind::SymbolKind(kind) => match kind {\n+                SymbolKind::Attribute => \"at\",\n                 SymbolKind::BuiltinAttr => \"ba\",\n                 SymbolKind::Const => \"ct\",\n                 SymbolKind::ConstParam => \"cp\",\n+                SymbolKind::Derive => \"de\",\n                 SymbolKind::Enum => \"en\",\n                 SymbolKind::Field => \"fd\",\n                 SymbolKind::Function => \"fn\",\n@@ -255,7 +256,6 @@ impl CompletionItemKind {\n                 SymbolKind::ValueParam => \"vp\",\n                 SymbolKind::Variant => \"ev\",\n             },\n-            CompletionItemKind::Attribute => \"at\",\n             CompletionItemKind::Binding => \"bn\",\n             CompletionItemKind::BuiltinType => \"bt\",\n             CompletionItemKind::Keyword => \"kw\","}, {"sha": "8141fab299e3dc1d6678714cd8231b34e79a7020", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 90, "deletions": 90, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -560,9 +560,9 @@ mod cfg {\n         check(\n             r#\"#[cfg(target_endian = $0\"#,\n             expect![[r#\"\n-            at little\n-            at big\n-\"#]],\n+                ba little\n+                ba big\n+            \"#]],\n         );\n     }\n }\n@@ -594,13 +594,13 @@ mod derive {\n #[derive($0)] struct Test;\n \"#,\n             expect![[r#\"\n-                at Default\n-                at Clone, Copy\n-                at PartialEq\n-                at PartialEq, Eq\n-                at PartialEq, Eq, PartialOrd, Ord\n-                at Clone\n-                at PartialEq, PartialOrd\n+                de Default\n+                de Clone, Copy\n+                de PartialEq\n+                de PartialEq, Eq\n+                de PartialEq, Eq, PartialOrd, Ord\n+                de Clone\n+                de PartialEq, PartialOrd\n             \"#]],\n         );\n     }\n@@ -613,12 +613,12 @@ mod derive {\n #[derive(serde::Serialize, PartialEq, $0)] struct Test;\n \"#,\n             expect![[r#\"\n-                at Default\n-                at Clone, Copy\n-                at Eq\n-                at Eq, PartialOrd, Ord\n-                at Clone\n-                at PartialOrd\n+                de Default\n+                de Clone, Copy\n+                de Eq\n+                de Eq, PartialOrd, Ord\n+                de Clone\n+                de PartialOrd\n             \"#]],\n         )\n     }\n@@ -631,12 +631,12 @@ mod derive {\n #[derive($0 serde::Serialize, PartialEq)] struct Test;\n \"#,\n             expect![[r#\"\n-                at Default\n-                at Clone, Copy\n-                at Eq\n-                at Eq, PartialOrd, Ord\n-                at Clone\n-                at PartialOrd\n+                de Default\n+                de Clone, Copy\n+                de Eq\n+                de Eq, PartialOrd, Ord\n+                de Clone\n+                de PartialOrd\n             \"#]],\n         )\n     }\n@@ -649,7 +649,7 @@ mod derive {\n #[derive(der$0)] struct Test;\n \"#,\n             expect![[r#\"\n-                at DeriveIdentity (use proc_macros::DeriveIdentity)\n+                de DeriveIdentity (use proc_macros::DeriveIdentity)\n             \"#]],\n         );\n         check_derive(\n@@ -659,7 +659,7 @@ use proc_macros::DeriveIdentity;\n #[derive(der$0)] struct Test;\n \"#,\n             expect![[r#\"\n-                at DeriveIdentity\n+                de DeriveIdentity\n             \"#]],\n         );\n     }\n@@ -775,23 +775,23 @@ mod repr {\n         check_repr(\n             r#\"#[repr($0)] struct Test;\"#,\n             expect![[r#\"\n-            at align($0)\n-            at packed\n-            at transparent\n-            at C\n-            at u8\n-            at u16\n-            at u32\n-            at u64\n-            at u128\n-            at usize\n-            at i8\n-            at i16\n-            at i32\n-            at i64\n-            at i28\n-            at isize\n-        \"#]],\n+                ba align($0)\n+                ba packed\n+                ba transparent\n+                ba C\n+                ba u8\n+                ba u16\n+                ba u32\n+                ba u64\n+                ba u128\n+                ba usize\n+                ba i8\n+                ba i16\n+                ba i32\n+                ba i64\n+                ba i28\n+                ba isize\n+            \"#]],\n         );\n     }\n \n@@ -805,21 +805,21 @@ mod repr {\n         check_repr(\n             r#\"#[repr(align(1), $0)] struct Test;\"#,\n             expect![[r#\"\n-            at transparent\n-            at C\n-            at u8\n-            at u16\n-            at u32\n-            at u64\n-            at u128\n-            at usize\n-            at i8\n-            at i16\n-            at i32\n-            at i64\n-            at i28\n-            at isize\n-        \"#]],\n+                ba transparent\n+                ba C\n+                ba u8\n+                ba u16\n+                ba u32\n+                ba u64\n+                ba u128\n+                ba usize\n+                ba i8\n+                ba i16\n+                ba i32\n+                ba i64\n+                ba i28\n+                ba isize\n+            \"#]],\n         );\n     }\n \n@@ -828,21 +828,21 @@ mod repr {\n         check_repr(\n             r#\"#[repr(packed, $0)] struct Test;\"#,\n             expect![[r#\"\n-            at transparent\n-            at C\n-            at u8\n-            at u16\n-            at u32\n-            at u64\n-            at u128\n-            at usize\n-            at i8\n-            at i16\n-            at i32\n-            at i64\n-            at i28\n-            at isize\n-        \"#]],\n+                ba transparent\n+                ba C\n+                ba u8\n+                ba u16\n+                ba u32\n+                ba u64\n+                ba u128\n+                ba usize\n+                ba i8\n+                ba i16\n+                ba i32\n+                ba i64\n+                ba i28\n+                ba isize\n+            \"#]],\n         );\n     }\n \n@@ -851,21 +851,21 @@ mod repr {\n         check_repr(\n             r#\"#[repr(C, $0)] struct Test;\"#,\n             expect![[r#\"\n-            at align($0)\n-            at packed\n-            at u8\n-            at u16\n-            at u32\n-            at u64\n-            at u128\n-            at usize\n-            at i8\n-            at i16\n-            at i32\n-            at i64\n-            at i28\n-            at isize\n-        \"#]],\n+                ba align($0)\n+                ba packed\n+                ba u8\n+                ba u16\n+                ba u32\n+                ba u64\n+                ba u128\n+                ba usize\n+                ba i8\n+                ba i16\n+                ba i32\n+                ba i64\n+                ba i28\n+                ba isize\n+            \"#]],\n         );\n     }\n \n@@ -874,10 +874,10 @@ mod repr {\n         check_repr(\n             r#\"#[repr(usize, $0)] struct Test;\"#,\n             expect![[r#\"\n-            at align($0)\n-            at packed\n-            at C\n-        \"#]],\n+                ba align($0)\n+                ba packed\n+                ba C\n+            \"#]],\n         );\n     }\n }"}, {"sha": "0d14c176b58c5d70a6b54ed3c103ab88abe914c2", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -145,9 +145,11 @@ fn line_index(db: &dyn LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum SymbolKind {\n+    Attribute,\n     BuiltinAttr,\n     Const,\n     ConstParam,\n+    Derive,\n     Enum,\n     Field,\n     Function,"}, {"sha": "1097a77afecf9d0290937a369dbae5ce00625a6a", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -41,6 +41,7 @@ define_semantic_token_types![\n     (ANGLE, \"angle\"),\n     (ARITHMETIC, \"arithmetic\"),\n     (ATTRIBUTE, \"attribute\"),\n+    (ATTRIBUTE_BRACKET, \"attributeBracket\"),\n     (BITWISE, \"bitwise\"),\n     (BOOLEAN, \"boolean\"),\n     (BRACE, \"brace\"),\n@@ -52,6 +53,7 @@ define_semantic_token_types![\n     (COMMA, \"comma\"),\n     (COMPARISON, \"comparison\"),\n     (CONST_PARAMETER, \"constParameter\"),\n+    (DERIVE, \"derive\"),\n     (DOT, \"dot\"),\n     (ESCAPE_SEQUENCE, \"escapeSequence\"),\n     (FORMAT_SPECIFIER, \"formatSpecifier\"),"}, {"sha": "f8c46b92fa8b8cda9ce0f189277a8246db06200f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -50,7 +50,10 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         SymbolKind::Enum => lsp_types::SymbolKind::ENUM,\n         SymbolKind::Variant => lsp_types::SymbolKind::ENUM_MEMBER,\n         SymbolKind::Trait => lsp_types::SymbolKind::INTERFACE,\n-        SymbolKind::Macro | SymbolKind::BuiltinAttr => lsp_types::SymbolKind::FUNCTION,\n+        SymbolKind::Macro\n+        | SymbolKind::BuiltinAttr\n+        | SymbolKind::Attribute\n+        | SymbolKind::Derive => lsp_types::SymbolKind::FUNCTION,\n         SymbolKind::Module | SymbolKind::ToolModule => lsp_types::SymbolKind::MODULE,\n         SymbolKind::TypeAlias | SymbolKind::TypeParam => lsp_types::SymbolKind::TYPE_PARAMETER,\n         SymbolKind::Field => lsp_types::SymbolKind::FIELD,\n@@ -100,24 +103,25 @@ pub(crate) fn completion_item_kind(\n     completion_item_kind: CompletionItemKind,\n ) -> lsp_types::CompletionItemKind {\n     match completion_item_kind {\n-        CompletionItemKind::Attribute => lsp_types::CompletionItemKind::ENUM_MEMBER,\n         CompletionItemKind::Binding => lsp_types::CompletionItemKind::VARIABLE,\n         CompletionItemKind::BuiltinType => lsp_types::CompletionItemKind::STRUCT,\n         CompletionItemKind::Keyword => lsp_types::CompletionItemKind::KEYWORD,\n         CompletionItemKind::Method => lsp_types::CompletionItemKind::METHOD,\n         CompletionItemKind::Snippet => lsp_types::CompletionItemKind::SNIPPET,\n         CompletionItemKind::UnresolvedReference => lsp_types::CompletionItemKind::REFERENCE,\n         CompletionItemKind::SymbolKind(symbol) => match symbol {\n+            SymbolKind::Attribute => lsp_types::CompletionItemKind::FUNCTION,\n             SymbolKind::Const => lsp_types::CompletionItemKind::CONSTANT,\n             SymbolKind::ConstParam => lsp_types::CompletionItemKind::TYPE_PARAMETER,\n+            SymbolKind::Derive => lsp_types::CompletionItemKind::FUNCTION,\n             SymbolKind::Enum => lsp_types::CompletionItemKind::ENUM,\n             SymbolKind::Field => lsp_types::CompletionItemKind::FIELD,\n             SymbolKind::Function => lsp_types::CompletionItemKind::FUNCTION,\n             SymbolKind::Impl => lsp_types::CompletionItemKind::TEXT,\n             SymbolKind::Label => lsp_types::CompletionItemKind::VARIABLE,\n             SymbolKind::LifetimeParam => lsp_types::CompletionItemKind::TYPE_PARAMETER,\n             SymbolKind::Local => lsp_types::CompletionItemKind::VARIABLE,\n-            SymbolKind::Macro => lsp_types::CompletionItemKind::METHOD,\n+            SymbolKind::Macro => lsp_types::CompletionItemKind::FUNCTION,\n             SymbolKind::Module => lsp_types::CompletionItemKind::MODULE,\n             SymbolKind::SelfParam => lsp_types::CompletionItemKind::VALUE,\n             SymbolKind::Static => lsp_types::CompletionItemKind::VALUE,\n@@ -468,6 +472,8 @@ fn semantic_token_type_and_modifiers(\n     let mut mods = semantic_tokens::ModifierSet::default();\n     let type_ = match highlight.tag {\n         HlTag::Symbol(symbol) => match symbol {\n+            SymbolKind::Attribute => semantic_tokens::ATTRIBUTE,\n+            SymbolKind::Derive => semantic_tokens::DERIVE,\n             SymbolKind::Module => lsp_types::SemanticTokenType::NAMESPACE,\n             SymbolKind::Impl => semantic_tokens::TYPE_ALIAS,\n             SymbolKind::Field => lsp_types::SemanticTokenType::PROPERTY,\n@@ -504,7 +510,7 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::BuiltinAttr => semantic_tokens::BUILTIN_ATTRIBUTE,\n             SymbolKind::ToolModule => semantic_tokens::TOOL_MODULE,\n         },\n-        HlTag::Attribute => semantic_tokens::ATTRIBUTE,\n+        HlTag::AttributeBracket => semantic_tokens::ATTRIBUTE_BRACKET,\n         HlTag::BoolLiteral => semantic_tokens::BOOLEAN,\n         HlTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n         HlTag::ByteLiteral | HlTag::NumericLiteral => lsp_types::SemanticTokenType::NUMBER,"}, {"sha": "26f21f73d454ad2e0cd19f9e381af5f7ef2008a0", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/372a7cf98171eba668daa29aa94e0986a78022bd/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/372a7cf98171eba668daa29aa94e0986a78022bd/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=372a7cf98171eba668daa29aa94e0986a78022bd", "patch": "@@ -1125,6 +1125,11 @@\n                 \"id\": \"attribute\",\n                 \"description\": \"Style for attributes\"\n             },\n+            {\n+                \"id\": \"attributeBracket\",\n+                \"description\": \"Style for attribute invocation brackets, that is the `#[` and `]` tokens\",\n+                \"superType\": \"punctuation\"\n+            },\n             {\n                 \"id\": \"bitwise\",\n                 \"description\": \"Style for bitwise operators\",\n@@ -1179,6 +1184,11 @@\n                 \"id\": \"constParameter\",\n                 \"description\": \"Style for const generics\"\n             },\n+            {\n+                \"id\": \"derive\",\n+                \"description\": \"Style for derives\",\n+                \"superType\": \"attribute\"\n+            },\n             {\n                 \"id\": \"dot\",\n                 \"description\": \"Style for .\","}]}