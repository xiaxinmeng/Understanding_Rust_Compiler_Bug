{"sha": "63ad5d0522053d7eb345eee404954ec24759f956", "node_id": "C_kwDOAAsO6NoAKDYzYWQ1ZDA1MjIwNTNkN2ViMzQ1ZWVlNDA0OTU0ZWMyNDc1OWY5NTY", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-11T09:18:12Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-13T10:24:51Z"}, "message": "Rename folder traits' `tcx` method to `interner`", "tree": {"sha": "10e03215d5288d63e741ceda215fb5ddb8bd6c94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10e03215d5288d63e741ceda215fb5ddb8bd6c94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63ad5d0522053d7eb345eee404954ec24759f956", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEvrRBFuOXsbT1OVTHfUwvbCISJTIFAmPqD/MRHGVnZ3lhbEBn\nbWFpbC5jb20ACgkQfUwvbCISJTJwvg/+PH57YqvGcuspp7J+LdNAZ0TG/DcC1rob\nXQSucARc77THQrvlIVHOIcL5Ns9xqfqRb21MXPgEilcy0sVaF3mnRoNBaM/cyepi\nsu+a5/2mhrhSGOwJi5Z93okw/0LHX1OTpgsMhaiC/vG6BlQFNfH5QTamn8Fv5PyK\nIlKPzFROWpjdn3CKZk1NZz8XHo6AkFynNH9ktMkeXgWnu6MXESGI1tiYpaCHSDQV\n97RMq7w0KUvu9ACYqXTZ1wry9lDbN52xiYaTZvp+6NtRmtLNTW+3sJMkSEYFGJOY\nMDU3u4tnn10vrFres31xwQ2JuG8syfDlRYwD6G8cojk1THX4ixeUMcEpeMEmi+xU\ni6ix4O6A7JjpE9pgvgrPa8jd4YfhPji0RqmiCCQheaQXyn4ouqpqvnSqJNqt5R4H\nO2n2QhaPlBnkT7Zeyxu84wC02j60fBswcBqsdlA/TLKciAOCKUiJ0gHqXBmk/UgD\n8VaK3ogD/lmNciNSp7i5V1Wpnv1xswK6+QhN2h07I8J6ZhqiOHvJSPWbzTIILqY3\nLd/xRMcoNUXjUdcmHXlVCmijeluJC5GwAdHRv3jDQ7bsJkFH5ZQigRVFprkpOvUR\n5b2zUQ9WDI/6ArfPaQwyZr3XfEGw9Qja950ohOBgTnQOGJZmS+KAmKrk4IP/G1aX\nJQvcke2wDuI=\n=JS/G\n-----END PGP SIGNATURE-----", "payload": "tree 10e03215d5288d63e741ceda215fb5ddb8bd6c94\nparent 459e1424134423d28a94a392e071300675677342\nauthor Alan Egerton <eggyal@gmail.com> 1676107092 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1676283891 +0000\n\nRename folder traits' `tcx` method to `interner`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63ad5d0522053d7eb345eee404954ec24759f956", "html_url": "https://github.com/rust-lang/rust/commit/63ad5d0522053d7eb345eee404954ec24759f956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63ad5d0522053d7eb345eee404954ec24759f956/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "459e1424134423d28a94a392e071300675677342", "url": "https://api.github.com/repos/rust-lang/rust/commits/459e1424134423d28a94a392e071300675677342", "html_url": "https://github.com/rust-lang/rust/commit/459e1424134423d28a94a392e071300675677342"}], "stats": {"total": 178, "additions": 91, "deletions": 87}, "files": [{"sha": "a926deb2393ded2c94a9f5528bba23c90f328259", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -465,7 +465,7 @@ struct RemapLateBound<'a, 'tcx> {\n }\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for RemapLateBound<'_, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -830,13 +830,13 @@ impl<'a, 'tcx> ImplTraitInTraitCollector<'a, 'tcx> {\n }\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ImplTraitInTraitCollector<'_, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.ocx.infcx.tcx\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if let ty::Alias(ty::Projection, proj) = ty.kind()\n-            && self.tcx().def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n+            && self.interner().def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n         {\n             if let Some((ty, _)) = self.types.get(&proj.def_id) {\n                 return *ty;\n@@ -852,7 +852,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ImplTraitInTraitCollector<'_, 'tcx> {\n             });\n             self.types.insert(proj.def_id, (infer_ty, proj.substs));\n             // Recurse into bounds\n-            for (pred, pred_span) in self.tcx().bound_explicit_item_bounds(proj.def_id).subst_iter_copied(self.tcx(), proj.substs) {\n+            for (pred, pred_span) in self.interner().bound_explicit_item_bounds(proj.def_id).subst_iter_copied(self.interner(), proj.substs) {\n                 let pred = pred.fold_with(self);\n                 let pred = self.ocx.normalize(\n                     &ObligationCause::misc(self.span, self.body_id),\n@@ -861,7 +861,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ImplTraitInTraitCollector<'_, 'tcx> {\n                 );\n \n                 self.ocx.register_obligation(traits::Obligation::new(\n-                    self.tcx(),\n+                    self.interner(),\n                     ObligationCause::new(\n                         self.span,\n                         self.body_id,"}, {"sha": "54fcccb0c11e4e507ff365e7e5ba403b6c742696", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -851,7 +851,7 @@ fn infer_placeholder_type<'a>(\n     }\n \n     impl<'tcx> TypeFolder<TyCtxt<'tcx>> for MakeNameable<'tcx> {\n-        fn tcx(&self) -> TyCtxt<'tcx> {\n+        fn interner(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }\n "}, {"sha": "8fc4610ae85677057b8568b18b2aca35e3eb07d0", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -190,7 +190,7 @@ struct EraseAllBoundRegions<'tcx> {\n // lead to unsoundness (we call `delay_span_bug` at the start\n // of `diagnostic_hir_wf_check`).\n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for EraseAllBoundRegions<'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n     fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {"}, {"sha": "c8256e7ec08e61fbf015699c5380257775cc8227", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -964,7 +964,7 @@ fn is_builtin_binop<'tcx>(lhs: Ty<'tcx>, rhs: Ty<'tcx>, op: hir::BinOp) -> bool\n struct TypeParamEraser<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, Span);\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for TypeParamEraser<'_, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.0.tcx\n     }\n "}, {"sha": "b6c9a88c82dadd610839033f9f99964cff5d3642", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -764,7 +764,7 @@ struct EraseEarlyRegions<'tcx> {\n }\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for EraseEarlyRegions<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n@@ -780,7 +780,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for EraseEarlyRegions<'tcx> {\n }\n \n impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Resolver<'cx, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -797,7 +797,7 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n                 let e = self.report_error(t);\n                 self.replaced_with_error = Some(e);\n-                self.tcx().ty_error_with_guaranteed(e)\n+                self.interner().ty_error_with_guaranteed(e)\n             }\n         }\n     }\n@@ -814,7 +814,7 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n                 let e = self.report_error(ct);\n                 self.replaced_with_error = Some(e);\n-                self.tcx().const_error_with_guaranteed(ct.ty(), e)\n+                self.interner().const_error_with_guaranteed(ct.ty(), e)\n             }\n         }\n     }"}, {"sha": "6bfdeda3a246087c3f02a2687983bdc4a6be01ae", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -327,7 +327,7 @@ struct Canonicalizer<'cx, 'tcx> {\n }\n \n impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -738,7 +738,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         let var = self.canonical_var(info, r.into());\n         let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32(), None) };\n         let region = ty::ReLateBound(self.binder_index, br);\n-        self.tcx().mk_region(region)\n+        self.interner().mk_region(region)\n     }\n \n     /// Given a type variable `ty_var` of the given kind, first check\n@@ -752,7 +752,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             self.fold_ty(bound_to)\n         } else {\n             let var = self.canonical_var(info, ty_var.into());\n-            self.tcx().mk_bound(self.binder_index, var.into())\n+            self.interner().mk_bound(self.binder_index, var.into())\n         }\n     }\n \n@@ -771,7 +771,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             self.fold_const(bound_to)\n         } else {\n             let var = self.canonical_var(info, const_var.into());\n-            self.tcx().mk_const(\n+            self.interner().mk_const(\n                 ty::ConstKind::Bound(self.binder_index, var),\n                 self.fold_ty(const_var.ty()),\n             )"}, {"sha": "c2bf075444f882ceac300226de9193c3a45a43ea", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -847,7 +847,7 @@ struct ConstInferUnifier<'cx, 'tcx> {\n impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for ConstInferUnifier<'_, 'tcx> {\n     type Error = TypeError<'tcx>;\n \n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -875,7 +875,7 @@ impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for ConstInferUnifier<'_, 'tcx> {\n                             .borrow_mut()\n                             .type_variables()\n                             .new_var(self.for_universe, origin);\n-                        Ok(self.tcx().mk_ty_var(new_var_id))\n+                        Ok(self.interner().mk_ty_var(new_var_id))\n                     }\n                 }\n             }\n@@ -953,7 +953,7 @@ impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for ConstInferUnifier<'_, 'tcx> {\n                                         },\n                                     },\n                                 );\n-                            Ok(self.tcx().mk_const(new_var_id, c.ty()))\n+                            Ok(self.interner().mk_const(new_var_id, c.ty()))\n                         }\n                     }\n                 }"}, {"sha": "41bffdc684da43650edc660159b42bc150a86b81", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for TypeFreshener<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -124,13 +124,13 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for TypeFreshener<'a, 'tcx> {\n             | ty::ReError(_)\n             | ty::ReErased => {\n                 // replace all free regions with 'erased\n-                self.tcx().lifetimes.re_erased\n+                self.interner().lifetimes.re_erased\n             }\n             ty::ReStatic => {\n                 if self.keep_static {\n                     r\n                 } else {\n-                    self.tcx().lifetimes.re_erased\n+                    self.interner().lifetimes.re_erased\n                 }\n             }\n         }"}, {"sha": "cc2f19a5704900bd4f95c4746a44cc73168675aa", "filename": "compiler/rustc_infer/src/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -176,7 +176,7 @@ pub struct InferenceFudger<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for InferenceFudger<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "b5a10ea659037eb611a7035c095271667f9935b3", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -1853,7 +1853,7 @@ struct InferenceLiteralEraser<'tcx> {\n }\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for InferenceLiteralEraser<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1871,7 +1871,7 @@ struct ShallowResolver<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for ShallowResolver<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -2065,7 +2065,7 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n     }\n \n     impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReplaceParamAndInferWithPlaceholder<'tcx> {\n-        fn tcx(&self) -> TyCtxt<'tcx> {\n+        fn interner(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }\n "}, {"sha": "008bf1e9c5dc4841a4cc86b95a57fae91e37207b", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -32,8 +32,8 @@ impl<'a, 'tcx> OpportunisticVarResolver<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for OpportunisticVarResolver<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n-        TypeFolder::tcx(&self.shallow_resolver)\n+    fn interner(&self) -> TyCtxt<'tcx> {\n+        TypeFolder::interner(&self.shallow_resolver)\n     }\n \n     #[inline]\n@@ -74,7 +74,7 @@ impl<'a, 'tcx> OpportunisticRegionResolver<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for OpportunisticRegionResolver<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -95,7 +95,7 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for OpportunisticRegionResolver<'a, 'tcx\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n                     .opportunistic_resolve_var(rid);\n-                TypeFolder::tcx(self).reuse_or_mk_region(r, ty::ReVar(resolved))\n+                TypeFolder::interner(self).reuse_or_mk_region(r, ty::ReVar(resolved))\n             }\n             _ => r,\n         }\n@@ -214,7 +214,7 @@ struct FullTypeResolver<'a, 'tcx> {\n impl<'a, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for FullTypeResolver<'a, 'tcx> {\n     type Error = FixupError<'tcx>;\n \n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "bddf84880d297368f995f05a5932691c4dfa2a5b", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -28,7 +28,7 @@ pub struct ExternalConstraintsData<'tcx> {\n \n impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ExternalConstraints<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        Ok(ir::FallibleTypeFolder::tcx(folder).intern_external_constraints(\n+        Ok(ir::FallibleTypeFolder::interner(folder).intern_external_constraints(\n             ExternalConstraintsData {\n                 regions: (),\n                 opaque_types: self\n@@ -41,7 +41,7 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ExternalConstraints<'tcx> {\n     }\n \n     fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        ir::TypeFolder::tcx(folder).intern_external_constraints(ExternalConstraintsData {\n+        ir::TypeFolder::interner(folder).intern_external_constraints(ExternalConstraintsData {\n             regions: (),\n             opaque_types: self.opaque_types.iter().map(|opaque| opaque.fold_with(folder)).collect(),\n         })"}, {"sha": "b7f0a0be75ee2c104b714341719b66bafc09744a", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n \n         impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Expander<'tcx> {\n-            fn tcx(&self) -> TyCtxt<'tcx> {\n+            fn interner(&self) -> TyCtxt<'tcx> {\n                 self.tcx\n             }\n             fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {"}, {"sha": "fc529f5d1d0993e938e48624f58d0e49bdf96ab4", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -539,7 +539,7 @@ pub struct MakeSuggestableFolder<'tcx> {\n impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for MakeSuggestableFolder<'tcx> {\n     type Error = ();\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "d3b031bf8755c80dec327444df1f92be883146b9", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -35,7 +35,7 @@ struct RegionEraserVisitor<'tcx> {\n }\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for RegionEraserVisitor<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "352daa8fc298889e73afab1fc6c33a793983ff48", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -36,7 +36,7 @@ where\n     G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,\n     H: FnMut(ty::Const<'tcx>) -> ty::Const<'tcx>,\n {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -121,7 +121,7 @@ impl<'a, 'tcx> RegionFolder<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> ir::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -198,7 +198,7 @@ impl<'tcx, D> ir::TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'tcx, D>\n where\n     D: BoundVarReplacerDelegate<'tcx>,\n {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -461,7 +461,7 @@ impl<'tcx> Shifter<'tcx> {\n }\n \n impl<'tcx> ir::TypeFolder<TyCtxt<'tcx>> for Shifter<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "55f2395e531a5240582629df3a1fce9f9d94707e", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -675,7 +675,7 @@ fn polymorphize<'tcx>(\n     }\n \n     impl<'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for PolymorphizationFolder<'tcx> {\n-        fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+        fn interner(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }\n "}, {"sha": "825e5fbe232fc82a543491d31c2f16ce6e33e707", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -206,7 +206,7 @@ impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n }\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for NormalizeAfterErasingRegionsFolder<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -244,7 +244,7 @@ impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     type Error = NormalizationError<'tcx>;\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "66c878c8b6358a013ebc5eeea06187bb6433765f", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -94,7 +94,7 @@ impl<'tcx> ReverseMapper<'tcx> {\n }\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -143,7 +143,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n                     )\n                     .emit();\n \n-                self.tcx().re_error(e)\n+                self.interner().re_error(e)\n             }\n         }\n     }\n@@ -188,7 +188,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n                                 .emit();\n                         }\n \n-                        self.tcx().ty_error()\n+                        self.interner().ty_error()\n                     }\n                 }\n             }\n@@ -216,7 +216,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n                             });\n                         }\n \n-                        self.tcx().const_error(ct.ty())\n+                        self.interner().const_error(ct.ty())\n                     }\n                 }\n             }"}, {"sha": "f50a5d89d3d1ec8c91944684e510f201c9f6d359", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -2222,7 +2222,7 @@ struct RegionFolder<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "97ee2b1fc5dd1b1781c5df2ad7ea7d8a1e7713fa", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -486,7 +486,7 @@ impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n             | ty::Foreign(..) => return Ok(self),\n         };\n \n-        Ok(if *self.kind() == kind { self } else { folder.tcx().mk_ty(kind) })\n+        Ok(if *self.kind() == kind { self } else { folder.interner().mk_ty(kind) })\n     }\n }\n \n@@ -579,7 +579,7 @@ impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n         let new = self.kind().try_fold_with(folder)?;\n-        Ok(folder.tcx().reuse_or_mk_predicate(self, new))\n+        Ok(folder.interner().reuse_or_mk_predicate(self, new))\n     }\n }\n \n@@ -615,7 +615,7 @@ impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n         let ty = self.ty().try_fold_with(folder)?;\n         let kind = self.kind().try_fold_with(folder)?;\n         if ty != self.ty() || kind != self.kind() {\n-            Ok(folder.tcx().mk_const(kind, ty))\n+            Ok(folder.interner().mk_const(kind, ty))\n         } else {\n             Ok(self)\n         }"}, {"sha": "abde81236e21a902ba183431ee1db35d63d4f39c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -1152,7 +1152,7 @@ struct SkipBindersAt<'tcx> {\n impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for SkipBindersAt<'tcx> {\n     type Error = ();\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1173,7 +1173,7 @@ impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for SkipBindersAt<'tcx> {\n             if index == self.index {\n                 Err(())\n             } else {\n-                Ok(self.tcx().mk_bound(index.shifted_out(1), bv))\n+                Ok(self.interner().mk_bound(index.shifted_out(1), bv))\n             }\n         } else {\n             ty.try_super_fold_with(self)\n@@ -1187,7 +1187,7 @@ impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for SkipBindersAt<'tcx> {\n             if index == self.index {\n                 Err(())\n             } else {\n-                Ok(self.tcx().mk_region(ty::ReLateBound(index.shifted_out(1), bv)))\n+                Ok(self.interner().mk_region(ty::ReLateBound(index.shifted_out(1), bv)))\n             }\n         } else {\n             r.try_super_fold_with(self)\n@@ -1201,7 +1201,7 @@ impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for SkipBindersAt<'tcx> {\n             if index == self.index {\n                 Err(())\n             } else {\n-                Ok(self.tcx().mk_const(\n+                Ok(self.interner().mk_const(\n                     ty::ConstKind::Bound(index.shifted_out(1), bv),\n                     ct.ty().try_fold_with(self)?,\n                 ))"}, {"sha": "a6ab7440c8e667e9eb97428c35538ec079240e9f", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -486,15 +486,19 @@ impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for SubstsRef<'tcx> {\n         match self.len() {\n             1 => {\n                 let param0 = self[0].try_fold_with(folder)?;\n-                if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }\n+                if param0 == self[0] {\n+                    Ok(self)\n+                } else {\n+                    Ok(folder.interner().intern_substs(&[param0]))\n+                }\n             }\n             2 => {\n                 let param0 = self[0].try_fold_with(folder)?;\n                 let param1 = self[1].try_fold_with(folder)?;\n                 if param0 == self[0] && param1 == self[1] {\n                     Ok(self)\n                 } else {\n-                    Ok(folder.tcx().intern_substs(&[param0, param1]))\n+                    Ok(folder.interner().intern_substs(&[param0, param1]))\n                 }\n             }\n             0 => Ok(self),\n@@ -527,7 +531,7 @@ impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<Ty<'tcx>> {\n                 if param0 == self[0] && param1 == self[1] {\n                     Ok(self)\n                 } else {\n-                    Ok(folder.tcx().intern_type_list(&[param0, param1]))\n+                    Ok(folder.interner().intern_type_list(&[param0, param1]))\n                 }\n             }\n             _ => ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v)),\n@@ -778,7 +782,7 @@ struct SubstFolder<'a, 'tcx> {\n \n impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for SubstFolder<'a, 'tcx> {\n     #[inline]\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -987,7 +991,7 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n             return val;\n         }\n \n-        let result = ty::fold::shift_vars(TypeFolder::tcx(self), val, self.binders_passed);\n+        let result = ty::fold::shift_vars(TypeFolder::interner(self), val, self.binders_passed);\n         debug!(\"shift_vars: shifted result = {:?}\", result);\n \n         result"}, {"sha": "e907ce46c86fb14d770a3b6b5ee6c67565fce070", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -843,7 +843,7 @@ impl<'tcx> OpaqueTypeExpander<'tcx> {\n }\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for OpaqueTypeExpander<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1343,7 +1343,7 @@ where\n             for t in iter {\n                 new_list.push(t.try_fold_with(folder)?)\n             }\n-            Ok(intern(folder.tcx(), &new_list))\n+            Ok(intern(folder.interner(), &new_list))\n         }\n         Some((_, Err(err))) => {\n             return Err(err);"}, {"sha": "3adb15cb44123544aec96b18c485ab9308d0e0d6", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -860,7 +860,7 @@ pub struct RegionReplacer<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for RegionReplacer<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "c2565b7a3aa3e5ea1bc88b792d80ee5e4da01dbb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -2675,7 +2675,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n \n         impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for ParamToVarFolder<'a, 'tcx> {\n-            fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+            fn interner(&self) -> TyCtxt<'tcx> {\n                 self.infcx.tcx\n             }\n "}, {"sha": "0a1dfa7925b0fce87b31ef39a221b9e1efc2c165", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -4091,7 +4091,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReplaceImplTraitFolder<'tcx> {\n         t.super_fold_with(self)\n     }\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n }"}, {"sha": "a380d4697ea267ac252b1f121039fd3f96ca0dcc", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -449,7 +449,7 @@ impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n-    fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.selcx.tcx()\n     }\n \n@@ -503,7 +503,7 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n                     Reveal::UserFacing => ty.super_fold_with(self),\n \n                     Reveal::All => {\n-                        let recursion_limit = self.tcx().recursion_limit();\n+                        let recursion_limit = self.interner().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.depth) {\n                             self.selcx.infcx.err_ctxt().report_overflow_error(\n                                 &ty,\n@@ -514,8 +514,8 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n                         }\n \n                         let substs = substs.fold_with(self);\n-                        let generic_ty = self.tcx().bound_type_of(def_id);\n-                        let concrete_ty = generic_ty.subst(self.tcx(), substs);\n+                        let generic_ty = self.interner().bound_type_of(def_id);\n+                        let concrete_ty = generic_ty.subst(self.interner(), substs);\n                         self.depth += 1;\n                         let folded_ty = self.fold_ty(concrete_ty);\n                         self.depth -= 1;\n@@ -741,7 +741,7 @@ impl<'me, 'tcx> BoundVarReplacer<'me, 'tcx> {\n }\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'_, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -847,7 +847,7 @@ impl<'me, 'tcx> PlaceholderReplacer<'me, 'tcx> {\n }\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for PlaceholderReplacer<'_, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -888,7 +888,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for PlaceholderReplacer<'_, 'tcx> {\n                         let db = ty::DebruijnIndex::from_usize(\n                             self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                         );\n-                        self.tcx().mk_region(ty::ReLateBound(db, *replace_var))\n+                        self.interner().mk_region(ty::ReLateBound(db, *replace_var))\n                     }\n                     None => r1,\n                 }\n@@ -915,7 +915,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for PlaceholderReplacer<'_, 'tcx> {\n                         let db = ty::DebruijnIndex::from_usize(\n                             self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                         );\n-                        self.tcx().mk_bound(db, *replace_var)\n+                        self.interner().mk_bound(db, *replace_var)\n                     }\n                     None => ty,\n                 }\n@@ -939,7 +939,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for PlaceholderReplacer<'_, 'tcx> {\n                     let db = ty::DebruijnIndex::from_usize(\n                         self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                     );\n-                    self.tcx().mk_const(ty::ConstKind::Bound(db, *replace_var), ct.ty())\n+                    self.interner().mk_const(ty::ConstKind::Bound(db, *replace_var), ct.ty())\n                 }\n                 None => ct,\n             }"}, {"sha": "e7282a450f67b2e1ef84409de484874e75b5193b", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -173,7 +173,7 @@ struct QueryNormalizer<'cx, 'tcx> {\n impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx> {\n     type Error = NoSolution;\n \n-    fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -214,7 +214,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx>\n \n                     Reveal::All => {\n                         let substs = substs.try_fold_with(self)?;\n-                        let recursion_limit = self.tcx().recursion_limit();\n+                        let recursion_limit = self.interner().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n                             // A closure or generator may have itself as in its upvars.\n                             // This should be checked handled by the recursion check for opaque\n@@ -228,8 +228,8 @@ impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx>\n                             return ty.try_super_fold_with(self);\n                         }\n \n-                        let generic_ty = self.tcx().bound_type_of(def_id);\n-                        let concrete_ty = generic_ty.subst(self.tcx(), substs);\n+                        let generic_ty = self.interner().bound_type_of(def_id);\n+                        let concrete_ty = generic_ty.subst(self.interner(), substs);\n                         self.anon_depth += 1;\n                         if concrete_ty == ty {\n                             bug!("}, {"sha": "20725c656de626c52fe3913f93a0024e6db89814", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -770,7 +770,7 @@ struct ReplaceOpaqueTyFolder<'tcx> {\n }\n \n impl<'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for ReplaceOpaqueTyFolder<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "2978fc4ed8c4666492d76bee4a6bf132b5c5d1f8", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -1008,7 +1008,7 @@ impl<'a, 'tcx> NamedBoundVarSubstitutor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for NamedBoundVarSubstitutor<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1064,7 +1064,7 @@ impl<'tcx> ParamsSubstitutor<'tcx> {\n }\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1140,7 +1140,7 @@ impl<'tcx> ReverseParamsSubstitutor<'tcx> {\n }\n \n impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseParamsSubstitutor<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "ee4ef57c38f110c311011c827467bd348e2003c3", "filename": "compiler/rustc_type_ir/src/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -101,7 +101,7 @@ pub trait TypeSuperFoldable<I: Interner>: TypeFoldable<I> {\n /// the infallible methods of this trait to ensure that the two APIs\n /// are coherent.\n pub trait TypeFolder<I: Interner>: FallibleTypeFolder<I, Error = !> {\n-    fn tcx(&self) -> I;\n+    fn interner(&self) -> I;\n \n     fn fold_binder<T>(&mut self, t: I::Binder<T>) -> I::Binder<T>\n     where\n@@ -150,7 +150,7 @@ pub trait TypeFolder<I: Interner>: FallibleTypeFolder<I, Error = !> {\n pub trait FallibleTypeFolder<I: Interner>: Sized {\n     type Error;\n \n-    fn tcx<'a>(&'a self) -> I;\n+    fn interner(&self) -> I;\n \n     fn try_fold_binder<T>(&mut self, t: I::Binder<T>) -> Result<I::Binder<T>, Self::Error>\n     where\n@@ -197,8 +197,8 @@ where\n {\n     type Error = !;\n \n-    fn tcx<'a>(&'a self) -> I {\n-        TypeFolder::tcx(self)\n+    fn interner(&self) -> I {\n+        TypeFolder::interner(self)\n     }\n \n     fn try_fold_binder<T>(&mut self, t: I::Binder<T>) -> Result<I::Binder<T>, !>"}, {"sha": "6c15eac2c1922b3d1d7c5762f25f720bdc3f4cea", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ad5d0522053d7eb345eee404954ec24759f956/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ad5d0522053d7eb345eee404954ec24759f956/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=63ad5d0522053d7eb345eee404954ec24759f956", "patch": "@@ -735,7 +735,7 @@ struct RegionReplacer<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for RegionReplacer<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}]}