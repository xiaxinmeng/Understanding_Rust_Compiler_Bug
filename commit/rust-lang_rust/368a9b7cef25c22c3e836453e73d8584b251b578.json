{"sha": "368a9b7cef25c22c3e836453e73d8584b251b578", "node_id": "C_kwDOAAsO6NoAKDM2OGE5YjdjZWYyNWMyMmMzZTgzNjQ1M2U3M2Q4NTg0YjI1MWI1Nzg", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2022-02-02T01:06:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-02T01:06:14Z"}, "message": "Handle non-ascii character at boundary (#5089)\n\n* Handle non-ascii character at boundary\r\n\r\n* Replace substraction underflow check with early termination", "tree": {"sha": "ae5dde353064f451cbc3859d2fddc93c118a6e59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae5dde353064f451cbc3859d2fddc93c118a6e59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/368a9b7cef25c22c3e836453e73d8584b251b578", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+dkGCRBK7hj4Ov3rIwAAKhMIACNoM0vmCv0FDCW+2+q4sBU2\nGdAr+pJ5LIeBOf6+8gvtB/PZVMwVVUMFSfQ9IU77AStyKYzp4Uqd26r2PKqrAdr+\ng5CExp5VxKfPag+TJwupTYyqjdCsDRYmKNPdMlGim8RH8yPlMKlTwuG08mhISWQv\n+qn7ItsZZ3uWpLCXgrCmwYZO0YB3T5y7eGdgmRv4A80s3gH+PXKsyRyV2WhUop2H\nEgjBjPCAzUWK4RsIRtOEM2q8GZQq9gp8wsZaxjPmZU/Md6OIh6BTiiL6x764FlSt\nUAndQ2g2CJEopsZtRqSmjJztTycBPjXnRsLbXlK3VpOTV71K6ad/2eWc7XavPSM=\n=4VpF\n-----END PGP SIGNATURE-----\n", "payload": "tree ae5dde353064f451cbc3859d2fddc93c118a6e59\nparent 8b0b213cddb23a9bbe421b717d1a0e5fb3982712\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1643763974 +0100\ncommitter GitHub <noreply@github.com> 1643763974 -0600\n\nHandle non-ascii character at boundary (#5089)\n\n* Handle non-ascii character at boundary\r\n\r\n* Replace substraction underflow check with early termination"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/368a9b7cef25c22c3e836453e73d8584b251b578", "html_url": "https://github.com/rust-lang/rust/commit/368a9b7cef25c22c3e836453e73d8584b251b578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/368a9b7cef25c22c3e836453e73d8584b251b578/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b0b213cddb23a9bbe421b717d1a0e5fb3982712", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0b213cddb23a9bbe421b717d1a0e5fb3982712", "html_url": "https://github.com/rust-lang/rust/commit/8b0b213cddb23a9bbe421b717d1a0e5fb3982712"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "b65aa5b33b241b4a16f38719d9d39863e16626aa", "filename": "src/string.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/368a9b7cef25c22c3e836453e73d8584b251b578/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368a9b7cef25c22c3e836453e73d8584b251b578/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=368a9b7cef25c22c3e836453e73d8584b251b578", "patch": "@@ -278,6 +278,9 @@ fn break_string(max_width: usize, trim_end: bool, line_end: &str, input: &[&str]\n         }\n         cur_index\n     };\n+    if max_width_index_in_input == 0 {\n+        return SnippetState::EndOfInput(input.concat());\n+    }\n \n     // Find the position in input for breaking the string\n     if line_end.is_empty()\n@@ -301,7 +304,7 @@ fn break_string(max_width: usize, trim_end: bool, line_end: &str, input: &[&str]\n         return if trim_end {\n             SnippetState::LineEnd(input[..=url_index_end].concat(), index_plus_ws + 1)\n         } else {\n-            return SnippetState::LineEnd(input[..=index_plus_ws].concat(), index_plus_ws + 1);\n+            SnippetState::LineEnd(input[..=index_plus_ws].concat(), index_plus_ws + 1)\n         };\n     }\n "}, {"sha": "ae1c723eff76aa9334c8270c2b14b525e3f25d3f", "filename": "tests/source/issue-5023.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/368a9b7cef25c22c3e836453e73d8584b251b578/tests%2Fsource%2Fissue-5023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368a9b7cef25c22c3e836453e73d8584b251b578/tests%2Fsource%2Fissue-5023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-5023.rs?ref=368a9b7cef25c22c3e836453e73d8584b251b578", "patch": "@@ -0,0 +1,22 @@\n+// rustfmt-wrap_comments: true\n+\n+/// A comment to test special unicode characters on boundaries\n+/// \u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f  it should break right here this goes to the next line\n+fn main() {\n+    if xxx {\n+        let xxx = xxx\n+            .into_iter()\n+            .filter(|(xxx, xxx)| {\n+                if let Some(x) = Some(1) {\n+                    // xxxxxxxxxxxxxxxxxx, xxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx xxx xxxxxxx, xxxxx xxx\n+                    // xxxxxxxxxx. xxxxxxxxxxxxxxxx\uff0cxxxxxxxxxxxxxxxxx xxx xxxxxxx\n+                    // \u662fsdfadsdfxxxxxxxxx\uff0csdfaxxxxxx_xxxxx_masdfaonxxx\uff0c\n+                    if false {\n+                        return true;\n+                    }\n+                }\n+                false\n+            })\n+            .collect();\n+    }\n+}"}, {"sha": "4e84c7d98427a03a70f91a4e37d9ef6082f9cbed", "filename": "tests/target/issue-5023.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/368a9b7cef25c22c3e836453e73d8584b251b578/tests%2Ftarget%2Fissue-5023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368a9b7cef25c22c3e836453e73d8584b251b578/tests%2Ftarget%2Fissue-5023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5023.rs?ref=368a9b7cef25c22c3e836453e73d8584b251b578", "patch": "@@ -0,0 +1,23 @@\n+// rustfmt-wrap_comments: true\n+\n+/// A comment to test special unicode characters on boundaries\n+/// \u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f  it should break right here\n+/// this goes to the next line\n+fn main() {\n+    if xxx {\n+        let xxx = xxx\n+            .into_iter()\n+            .filter(|(xxx, xxx)| {\n+                if let Some(x) = Some(1) {\n+                    // xxxxxxxxxxxxxxxxxx, xxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx xxx xxxxxxx, xxxxx xxx\n+                    // xxxxxxxxxx. xxxxxxxxxxxxxxxx\uff0cxxxxxxxxxxxxxxxxx xxx xxxxxxx\n+                    // \u662fsdfadsdfxxxxxxxxx\uff0csdfaxxxxxx_xxxxx_masdfaonxxx\uff0c\n+                    if false {\n+                        return true;\n+                    }\n+                }\n+                false\n+            })\n+            .collect();\n+    }\n+}"}]}