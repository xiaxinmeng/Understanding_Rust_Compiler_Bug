{"sha": "4cb26afc0c25f77d52b6f2c83eba89466d85b214", "node_id": "C_kwDOAAsO6NoAKDRjYjI2YWZjMGMyNWY3N2Q1MmI2ZjJjODNlYmE4OTQ2NmQ4NWIyMTQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-31T12:44:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-31T13:59:53Z"}, "message": "fix progress report being deduplicated", "tree": {"sha": "cdb5e923bef634e3ea5b3642c7f04176348d8bb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdb5e923bef634e3ea5b3642c7f04176348d8bb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cb26afc0c25f77d52b6f2c83eba89466d85b214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb26afc0c25f77d52b6f2c83eba89466d85b214", "html_url": "https://github.com/rust-lang/rust/commit/4cb26afc0c25f77d52b6f2c83eba89466d85b214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cb26afc0c25f77d52b6f2c83eba89466d85b214/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feeeba2925fc7bd425d5d18366be469e24945a6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/feeeba2925fc7bd425d5d18366be469e24945a6a", "html_url": "https://github.com/rust-lang/rust/commit/feeeba2925fc7bd425d5d18366be469e24945a6a"}], "stats": {"total": 86, "additions": 55, "deletions": 31}, "files": [{"sha": "3a0d17b22a76480209834b61572bc41c72f44c05", "filename": "src/diagnostics.rs", "status": "modified", "additions": 47, "deletions": 23, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4cb26afc0c25f77d52b6f2c83eba89466d85b214/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb26afc0c25f77d52b6f2c83eba89466d85b214/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=4cb26afc0c25f77d52b6f2c83eba89466d85b214", "patch": "@@ -70,7 +70,9 @@ pub enum NonHaltingDiagnostic {\n     CreatedAlloc(AllocId, Size, Align, MemoryKind<MiriMemoryKind>),\n     FreedAlloc(AllocId),\n     RejectedIsolatedOp(String),\n-    ProgressReport,\n+    ProgressReport {\n+        block_count: u64, // how many basic blocks have been run so far\n+    },\n     Int2Ptr {\n         details: bool,\n     },\n@@ -261,6 +263,7 @@ pub fn report_error<'tcx, 'mir>(\n         DiagLevel::Error,\n         &if let Some(title) = title { format!(\"{}: {}\", title, msg[0]) } else { msg[0].clone() },\n         msg,\n+        vec![],\n         helps,\n         &stacktrace,\n     );\n@@ -307,6 +310,7 @@ fn report_msg<'mir, 'tcx>(\n     diag_level: DiagLevel,\n     title: &str,\n     span_msg: Vec<String>,\n+    notes: Vec<(Option<SpanData>, String)>,\n     helps: Vec<(Option<SpanData>, String)>,\n     stacktrace: &[FrameInfo<'tcx>],\n ) {\n@@ -331,15 +335,22 @@ fn report_msg<'mir, 'tcx>(\n         err.note(\"(no span available)\");\n     }\n \n-    // Show help messages.\n-    if !helps.is_empty() {\n-        for (span_data, help) in helps {\n-            if let Some(span_data) = span_data {\n-                err.span_help(span_data.span(), &help);\n-            } else {\n-                err.help(&help);\n-            }\n+    // Show note and help messages.\n+    for (span_data, note) in &notes {\n+        if let Some(span_data) = span_data {\n+            err.span_note(span_data.span(), note);\n+        } else {\n+            err.note(note);\n         }\n+    }\n+    for (span_data, help) in &helps {\n+        if let Some(span_data) = span_data {\n+            err.span_help(span_data.span(), help);\n+        } else {\n+            err.help(help);\n+        }\n+    }\n+    if notes.len() + helps.len() > 0 {\n         // Add visual separator before backtrace.\n         err.note(\"backtrace:\");\n     }\n@@ -436,6 +447,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Show diagnostics.\n             for e in diagnostics.drain(..) {\n                 use NonHaltingDiagnostic::*;\n+\n+                let (title, diag_level) = match e {\n+                    RejectedIsolatedOp(_) =>\n+                        (\"operation rejected by isolation\", DiagLevel::Warning),\n+                    Int2Ptr { .. } => (\"integer-to-pointer cast\", DiagLevel::Warning),\n+                    CreatedPointerTag(..)\n+                    | PoppedPointerTag(..)\n+                    | CreatedCallId(..)\n+                    | CreatedAlloc(..)\n+                    | FreedAlloc(..)\n+                    | ProgressReport { .. }\n+                    | WeakMemoryOutdatedLoad =>\n+                        (\"tracking was triggered\", DiagLevel::Note),\n+                };\n+\n                 let msg = match e {\n                     CreatedPointerTag(tag, None) =>\n                         format!(\"created tag {tag:?}\"),\n@@ -465,26 +491,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         format!(\"freed allocation with id {id}\"),\n                     RejectedIsolatedOp(ref op) =>\n                         format!(\"{op} was made to return an error due to isolation\"),\n-                    ProgressReport =>\n+                    ProgressReport { .. } =>\n                         format!(\"progress report: current operation being executed is here\"),\n                     Int2Ptr { .. } =>\n                         format!(\"integer-to-pointer cast\"),\n                     WeakMemoryOutdatedLoad =>\n                         format!(\"weak memory emulation: outdated value returned from load\"),\n                 };\n \n-                let (title, diag_level) = match e {\n-                    RejectedIsolatedOp(_) =>\n-                        (\"operation rejected by isolation\", DiagLevel::Warning),\n-                    Int2Ptr { .. } => (\"integer-to-pointer cast\", DiagLevel::Warning),\n-                    CreatedPointerTag(..)\n-                    | PoppedPointerTag(..)\n-                    | CreatedCallId(..)\n-                    | CreatedAlloc(..)\n-                    | FreedAlloc(..)\n-                    | ProgressReport\n-                    | WeakMemoryOutdatedLoad =>\n-                        (\"tracking was triggered\", DiagLevel::Note),\n+                let notes = match e {\n+                    ProgressReport { block_count } => {\n+                        // It is important that each progress report is slightly different, since\n+                        // identical diagnostics are being deduplicated.\n+                        vec![\n+                            (None, format!(\"so far, {block_count} basic blocks have been executed\")),\n+                        ]\n+                    }\n+                    _ => vec![],\n                 };\n \n                 let helps = match e {\n@@ -500,7 +523,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     _ => vec![],\n                 };\n \n-                report_msg(this, diag_level, title, vec![msg], helps, &stacktrace);\n+                report_msg(this, diag_level, title, vec![msg], notes, helps, &stacktrace);\n             }\n         });\n     }\n@@ -519,6 +542,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"the place in the program where the ICE was triggered\",\n             vec![],\n             vec![],\n+            vec![],\n             &stacktrace,\n         );\n     }"}, {"sha": "3be4d1d1b5bcb6414f676f1655067ee298521e76", "filename": "src/machine.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4cb26afc0c25f77d52b6f2c83eba89466d85b214/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb26afc0c25f77d52b6f2c83eba89466d85b214/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=4cb26afc0c25f77d52b6f2c83eba89466d85b214", "patch": "@@ -374,8 +374,8 @@ pub struct Evaluator<'mir, 'tcx> {\n \n     /// If `Some`, we will report the current stack every N basic blocks.\n     pub(crate) report_progress: Option<u32>,\n-    /// The number of blocks that passed since the last progress report.\n-    pub(crate) since_progress_report: u32,\n+    // The total number of blocks that have been executed.\n+    pub(crate) basic_block_count: u64,\n \n     /// Handle of the optional shared object file for external functions.\n     pub external_so_lib: Option<(libloading::Library, std::path::PathBuf)>,\n@@ -433,7 +433,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             weak_memory: config.weak_memory_emulation,\n             preemption_rate: config.preemption_rate,\n             report_progress: config.report_progress,\n-            since_progress_report: 0,\n+            basic_block_count: 0,\n             external_so_lib: config.external_so_file.as_ref().map(|lib_file_path| {\n                 // Check if host target == the session target.\n                 if env!(\"TARGET\") != target_triple {\n@@ -992,14 +992,14 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     }\n \n     fn before_terminator(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+        ecx.machine.basic_block_count += 1u64; // a u64 that is only incremented by 1 will \"never\" overflow\n         // Possibly report our progress.\n         if let Some(report_progress) = ecx.machine.report_progress {\n-            if ecx.machine.since_progress_report >= report_progress {\n-                register_diagnostic(NonHaltingDiagnostic::ProgressReport);\n-                ecx.machine.since_progress_report = 0;\n+            if ecx.machine.basic_block_count % u64::from(report_progress) == 0 {\n+                register_diagnostic(NonHaltingDiagnostic::ProgressReport {\n+                    block_count: ecx.machine.basic_block_count,\n+                });\n             }\n-            // Cannot overflow, since it is strictly less than `report_progress`.\n-            ecx.machine.since_progress_report += 1;\n         }\n         // These are our preemption points.\n         ecx.maybe_preempt_active_thread();"}]}