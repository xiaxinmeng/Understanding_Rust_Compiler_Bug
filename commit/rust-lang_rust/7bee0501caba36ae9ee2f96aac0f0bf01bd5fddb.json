{"sha": "7bee0501caba36ae9ee2f96aac0f0bf01bd5fddb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZWUwNTAxY2FiYTM2YWU5ZWUyZjk2YWFjMGYwYmYwMWJkNWZkZGI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-08-23T00:00:12Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-08-23T17:27:38Z"}, "message": "Use the proper monomorphized ty::t for llvm alias hints. Closes #7260.", "tree": {"sha": "b54e0416b03b011850d9d0a3301e4bda2fb25737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b54e0416b03b011850d9d0a3301e4bda2fb25737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bee0501caba36ae9ee2f96aac0f0bf01bd5fddb", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bee0501caba36ae9ee2f96aac0f0bf01bd5fddb", "html_url": "https://github.com/rust-lang/rust/commit/7bee0501caba36ae9ee2f96aac0f0bf01bd5fddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bee0501caba36ae9ee2f96aac0f0bf01bd5fddb/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c0f9bd35493def5e23f0f43ddeba54da9d788b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0f9bd35493def5e23f0f43ddeba54da9d788b4", "html_url": "https://github.com/rust-lang/rust/commit/2c0f9bd35493def5e23f0f43ddeba54da9d788b4"}], "stats": {"total": 66, "additions": 37, "deletions": 29}, "files": [{"sha": "054c5bcbf8bffbd656a73bb8977a0f416a864b2d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7bee0501caba36ae9ee2f96aac0f0bf01bd5fddb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bee0501caba36ae9ee2f96aac0f0bf01bd5fddb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7bee0501caba36ae9ee2f96aac0f0bf01bd5fddb", "patch": "@@ -1710,7 +1710,8 @@ pub fn new_fn_ctxt(ccx: @mut CrateContext,\n // field of the fn_ctxt with\n pub fn create_llargs_for_fn_args(cx: @mut FunctionContext,\n                                  self_arg: self_arg,\n-                                 args: &[ast::arg])\n+                                 args: &[ast::arg],\n+                                 arg_tys: &[ty::t])\n                               -> ~[ValueRef] {\n     let _icx = push_ctxt(\"create_llargs_for_fn_args\");\n \n@@ -1727,26 +1728,31 @@ pub fn create_llargs_for_fn_args(cx: @mut FunctionContext,\n \n     // Return an array containing the ValueRefs that we get from\n     // llvm::LLVMGetParam for each argument.\n-    vec::from_fn(args.len(), |i| {\n-        unsafe {\n-            let arg_n = cx.arg_pos(i);\n-            let arg = &args[i];\n-            let llarg = llvm::LLVMGetParam(cx.llfn, arg_n as c_uint);\n-\n-            // FIXME #7260: aliasing should be determined by monomorphized ty::t\n-            match arg.ty.node {\n-                // `~` pointers never alias other parameters, because ownership was transferred\n-                ast::ty_uniq(_) => {\n-                    llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n+    do vec::from_fn(args.len()) |i| {\n+        let arg_n = cx.arg_pos(i);\n+        let arg_ty = arg_tys[i];\n+        let llarg = unsafe {llvm::LLVMGetParam(cx.llfn, arg_n as c_uint) };\n+\n+        match ty::get(arg_ty).sty {\n+            // `~` pointers never alias other parameters, because\n+            // ownership was transferred\n+            ty::ty_uniq(*) |\n+            ty::ty_evec(_, ty::vstore_uniq) |\n+            ty::ty_closure(ty::ClosureTy {sigil: ast::OwnedSigil, _}) => {\n+                unsafe {\n+                    llvm::LLVMAddAttribute(\n+                        llarg, lib::llvm::NoAliasAttribute as c_uint);\n                 }\n-                // FIXME: #6785: `&mut` can only alias `&const` and `@mut`, we should check for\n-                // those in the other parameters and then mark it as `noalias` if there aren't any\n-                _ => {}\n             }\n-\n-            llarg\n+            // FIXME: #6785: `&mut` can only alias `&const` and\n+            // `@mut`, we should check for those in the other\n+            // parameters and then mark it as `noalias` if there\n+            // aren't any\n+            _ => {}\n         }\n-    })\n+\n+        llarg\n+    }\n }\n \n pub fn copy_args_to_allocas(fcx: @mut FunctionContext,\n@@ -1881,7 +1887,6 @@ pub fn trans_closure(ccx: @mut CrateContext,\n     debug!(\"trans_closure(..., param_substs=%s)\",\n            param_substs.repr(ccx.tcx));\n \n-    // Set up arguments to the function.\n     let fcx = new_fn_ctxt_w_id(ccx,\n                                path,\n                                llfndecl,\n@@ -1892,21 +1897,23 @@ pub fn trans_closure(ccx: @mut CrateContext,\n                                body.info(),\n                                Some(body.span));\n \n-    let raw_llargs = create_llargs_for_fn_args(fcx, self_arg, decl.inputs);\n-\n-    // Set the fixed stack segment flag if necessary.\n-    if attr::contains_name(attributes, \"fixed_stack_segment\") {\n-        set_no_inline(fcx.llfn);\n-        set_fixed_stack_segment(fcx.llfn);\n-    }\n-\n     // Create the first basic block in the function and keep a handle on it to\n     //  pass to finish_fn later.\n     let bcx_top = fcx.entry_bcx.unwrap();\n     let mut bcx = bcx_top;\n     let block_ty = node_id_type(bcx, body.id);\n \n+    // Set up arguments to the function.\n     let arg_tys = ty::ty_fn_args(node_id_type(bcx, id));\n+    let raw_llargs = create_llargs_for_fn_args(fcx, self_arg,\n+                                               decl.inputs, arg_tys);\n+\n+    // Set the fixed stack segment flag if necessary.\n+    if attr::contains_name(attributes, \"fixed_stack_segment\") {\n+        set_no_inline(fcx.llfn);\n+        set_fixed_stack_segment(fcx.llfn);\n+    }\n+\n     bcx = copy_args_to_allocas(fcx, bcx, decl.inputs, raw_llargs, arg_tys);\n \n     maybe_load_env(fcx);\n@@ -2108,10 +2115,11 @@ pub fn trans_enum_variant_or_tuple_like_struct<A:IdAndTy>(\n                                None,\n                                None);\n \n-    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args);\n+    let arg_tys = ty::ty_fn_args(ctor_ty);\n+\n+    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args, arg_tys);\n \n     let bcx = fcx.entry_bcx.unwrap();\n-    let arg_tys = ty::ty_fn_args(ctor_ty);\n \n     insert_synthetic_type_entries(bcx, fn_args, arg_tys);\n     let bcx = copy_args_to_allocas(fcx, bcx, fn_args, raw_llargs, arg_tys);"}]}