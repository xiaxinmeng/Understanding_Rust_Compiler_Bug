{"sha": "31a051870b8ab18c798cacded7eb8e0d087a8224", "node_id": "C_kwDOAAsO6NoAKDMxYTA1MTg3MGI4YWIxOGM3OThjYWNkZWQ3ZWI4ZTBkMDg3YTgyMjQ", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-08-08T04:16:47Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-08-09T17:44:52Z"}, "message": "Address review comments", "tree": {"sha": "001a21e83e125b4c65a0504894029f4109609db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/001a21e83e125b4c65a0504894029f4109609db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31a051870b8ab18c798cacded7eb8e0d087a8224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31a051870b8ab18c798cacded7eb8e0d087a8224", "html_url": "https://github.com/rust-lang/rust/commit/31a051870b8ab18c798cacded7eb8e0d087a8224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31a051870b8ab18c798cacded7eb8e0d087a8224/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f75142c8c3383684ac7a02222f08db7a3b30ccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f75142c8c3383684ac7a02222f08db7a3b30ccf", "html_url": "https://github.com/rust-lang/rust/commit/1f75142c8c3383684ac7a02222f08db7a3b30ccf"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "e008d50aa514a44b3eaf892010bb8ea3c6dc0372", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/31a051870b8ab18c798cacded7eb8e0d087a8224/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a051870b8ab18c798cacded7eb8e0d087a8224/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=31a051870b8ab18c798cacded7eb8e0d087a8224", "patch": "@@ -26,8 +26,17 @@ use rustc_trait_selection::traits::{ObligationCause, ObligationCauseCode};\n use std::cell::{Cell, RefCell};\n use std::ops::Deref;\n \n-/// The `FnCtxt` stores type-checking context needed to type-check function bodies,\n-/// in contrast to [`ItemCtxt`], which is used to type-check item *signatures*.\n+/// The `FnCtxt` stores type-checking context needed to type-check bodies of\n+/// functions, closures, and `const`s, including performing type inference\n+/// with [`InferCtxt`].\n+///\n+/// This is in contrast to [`ItemCtxt`], which is used to type-check item *signatures*\n+/// and thus does not perform type inference.\n+///\n+/// See [`ItemCtxt`]'s docs for more.\n+///\n+/// [`ItemCtxt`]: crate::collect::ItemCtxt\n+/// [`InferCtxt`]: infer::InferCtxt\n pub struct FnCtxt<'a, 'tcx> {\n     pub(super) body_id: hir::HirId,\n "}, {"sha": "e7c5ecc60ec78c7a01cafd3cee3d8aad1f38839c", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/31a051870b8ab18c798cacded7eb8e0d087a8224/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a051870b8ab18c798cacded7eb8e0d087a8224/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=31a051870b8ab18c798cacded7eb8e0d087a8224", "patch": "@@ -94,12 +94,27 @@ pub fn provide(providers: &mut Providers) {\n ///////////////////////////////////////////////////////////////////////////\n \n /// Context specific to some particular item. This is what implements\n-/// `AstConv`.\n+/// [`AstConv`].\n ///\n-/// `ItemCtxt` is primarily used to type-check item signatures, in contrast to [`FnCtxt`],\n-/// which is used to type-check function bodies.\n+/// # `ItemCtxt` vs `FnCtxt`\n ///\n-/// It has information about the predicates that are defined\n+/// `ItemCtxt` is primarily used to type-check item signatures and lower them\n+/// from HIR to their [`ty::Ty`] representation, which is exposed using [`AstConv`].\n+/// It's also used for the bodies of items like structs where the body (the fields)\n+/// are just signatures.\n+///\n+/// This is in contrast to [`FnCtxt`], which is used to type-check bodies of\n+/// functions, closures, and `const`s -- anywhere that expressions and statements show up.\n+///\n+/// An important thing to note is that `ItemCtxt` does no inference -- it has no [`InferCtxt`] --\n+/// while `FnCtxt` does do inference.\n+///\n+/// [`FnCtxt`]: crate::check::FnCtxt\n+/// [`InferCtxt`]: rustc_infer::infer::InferCtxt\n+///\n+/// # Trait predicates\n+///\n+/// `ItemCtxt` has information about the predicates that are defined\n /// on the trait. Unfortunately, this predicate information is\n /// available in various different forms at various points in the\n /// process. So we can't just store a pointer to e.g., the AST or the"}]}