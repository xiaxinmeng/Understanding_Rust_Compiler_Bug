{"sha": "36dfde50f48d0a2bfcb02d8512372f7c2ca37821", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZGZkZTUwZjQ4ZDBhMmJmY2IwMmQ4NTEyMzcyZjdjMmNhMzc4MjE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T12:00:27Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T12:00:27Z"}, "message": "Extract intrinsic function handling.", "tree": {"sha": "afcd3530bf1bd5a0287bbfb630c05ff0c571f6be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afcd3530bf1bd5a0287bbfb630c05ff0c571f6be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36dfde50f48d0a2bfcb02d8512372f7c2ca37821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36dfde50f48d0a2bfcb02d8512372f7c2ca37821", "html_url": "https://github.com/rust-lang/rust/commit/36dfde50f48d0a2bfcb02d8512372f7c2ca37821", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36dfde50f48d0a2bfcb02d8512372f7c2ca37821/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e057a156f286328430c6a75fc9909d5102f164e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e057a156f286328430c6a75fc9909d5102f164e9", "html_url": "https://github.com/rust-lang/rust/commit/e057a156f286328430c6a75fc9909d5102f164e9"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "2b8734d3d8c322cbb5b0eb25f6366d838ce2aff7", "filename": "src/interpreter.rs", "status": "modified", "additions": 42, "deletions": 32, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/36dfde50f48d0a2bfcb02d8512372f7c2ca37821/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36dfde50f48d0a2bfcb02d8512372f7c2ca37821/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=36dfde50f48d0a2bfcb02d8512372f7c2ca37821", "patch": "@@ -247,38 +247,13 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n \n                         use syntax::abi::Abi;\n                         match fn_ty.abi {\n-                            Abi::RustIntrinsic => {\n-                                let ret_ptr = &mir::Lvalue::ReturnPointer;\n-                                let dest = try!(self.eval_lvalue(ret_ptr));\n-                                let dest_repr = self.lvalue_repr(ret_ptr);\n-\n-                                match &self.tcx.item_name(def_id).as_str()[..] {\n-                                    \"size_of\" => {\n-                                        let ty = *substs.types.get(subst::FnSpace, 0);\n-                                        let size = self.ty_size(ty) as u64;\n-                                        try!(self.memory.write_uint(dest, size, dest_repr.size()));\n-                                    }\n-\n-                                    \"offset\" => {\n-                                        let pointee_ty = *substs.types.get(subst::FnSpace, 0);\n-                                        let pointee_size = self.ty_size(pointee_ty) as isize;\n-                                        let ptr_arg = try!(self.eval_operand(&args[0]));\n-                                        let offset_arg = try!(self.eval_operand(&args[1]));\n-                                        let ptr = try!(self.memory.read_ptr(ptr_arg));\n-                                        // TODO(tsion): read_isize\n-                                        let offset = try!(self.memory.read_i64(offset_arg));\n-                                        let result_ptr = ptr.offset(offset as isize * pointee_size);\n-                                        try!(self.memory.write_ptr(dest, result_ptr));\n-                                    }\n-\n-                                    name => panic!(\"can't handle intrinsic named {}\", name),\n-                                }\n-\n-                                // Since we pushed no stack frame, the main loop will act\n-                                // as if the call just completed and it's returning to the\n-                                // current frame.\n-                                TerminatorTarget::Call\n-                            }\n+                            Abi::RustIntrinsic =>\n+                                try!(self.call_intrinsic(\n+                                    &self.tcx.item_name(def_id).as_str(),\n+                                    fn_ty,\n+                                    substs,\n+                                    args,\n+                                )),\n \n                             Abi::Rust => {\n                                 // Only trait methods can have a Self parameter.\n@@ -313,6 +288,41 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         Ok(target)\n     }\n \n+    fn call_intrinsic(&mut self, name: &str, _fn_ty: &'tcx ty::BareFnTy<'tcx>,\n+        substs: &'tcx Substs<'tcx>, args: &[mir::Operand<'tcx>]) -> EvalResult<TerminatorTarget>\n+    {\n+        let ret_ptr = &mir::Lvalue::ReturnPointer;\n+        let dest = try!(self.eval_lvalue(ret_ptr));\n+        let dest_size = self.lvalue_repr(ret_ptr).size();\n+\n+        match name {\n+            \"size_of\" => {\n+                let ty = *substs.types.get(subst::FnSpace, 0);\n+                let size = self.ty_size(ty) as u64;\n+                try!(self.memory.write_uint(dest, size, dest_size));\n+            }\n+\n+            \"offset\" => {\n+                let pointee_ty = *substs.types.get(subst::FnSpace, 0);\n+                let pointee_size = self.ty_size(pointee_ty) as isize;\n+                let ptr_arg = try!(self.eval_operand(&args[0]));\n+                let offset_arg = try!(self.eval_operand(&args[1]));\n+                let ptr = try!(self.memory.read_ptr(ptr_arg));\n+                // TODO(tsion): read_isize\n+                let offset = try!(self.memory.read_i64(offset_arg));\n+                let result_ptr = ptr.offset(offset as isize * pointee_size);\n+                try!(self.memory.write_ptr(dest, result_ptr));\n+            }\n+\n+            name => panic!(\"can't handle intrinsic: {}\", name),\n+        }\n+\n+        // Since we pushed no stack frame, the main loop will act\n+        // as if the call just completed and it's returning to the\n+        // current frame.\n+        Ok(TerminatorTarget::Call)\n+    }\n+\n     fn assign_to_aggregate(&mut self, dest: Pointer, dest_repr: &Repr, variant: usize,\n                          operands: &[mir::Operand<'tcx>]) -> EvalResult<()> {\n         match *dest_repr {"}]}