{"sha": "dfde867fcd4d29213dbdaf0b948ed00fe82a43e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZGU4NjdmY2Q0ZDI5MjEzZGJkYWYwYjk0OGVkMDBmZTgyYTQzZTU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-04-28T19:19:52Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-02T12:17:07Z"}, "message": "Migrate trait and impl blocks' toggles into", "tree": {"sha": "a7ed595c1cd3ce66670e0837d709da68f598f361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7ed595c1cd3ce66670e0837d709da68f598f361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5", "html_url": "https://github.com/rust-lang/rust/commit/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "html_url": "https://github.com/rust-lang/rust/commit/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8"}], "stats": {"total": 309, "additions": 124, "deletions": 185}, "files": [{"sha": "c2c5f496132ab9848354a5fc796d83296fb4ee2f", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=dfde867fcd4d29213dbdaf0b948ed00fe82a43e5", "patch": "@@ -625,10 +625,6 @@ impl ItemKind {\n             | KeywordItem(_) => [].iter(),\n         }\n     }\n-\n-    crate fn is_type_alias(&self) -> bool {\n-        matches!(self, ItemKind::TypedefItem(..) | ItemKind::AssocTypeItem(..))\n-    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "dcb8635ade632b4fd3e815a5746f6206f98c780a", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 78, "deletions": 87, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=dfde867fcd4d29213dbdaf0b948ed00fe82a43e5", "patch": "@@ -508,23 +508,16 @@ fn document(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, parent: Option\n     if let Some(ref name) = item.name {\n         info!(\"Documenting {}\", name);\n     }\n-    document_item_info(w, cx, item, false, parent);\n-    document_full(w, item, cx, false);\n+    document_item_info(w, cx, item, parent);\n+    document_full(w, item, cx);\n }\n \n /// Render md_text as markdown.\n-fn render_markdown(\n-    w: &mut Buffer,\n-    cx: &Context<'_>,\n-    md_text: &str,\n-    links: Vec<RenderedLink>,\n-    is_hidden: bool,\n-) {\n+fn render_markdown(w: &mut Buffer, cx: &Context<'_>, md_text: &str, links: Vec<RenderedLink>) {\n     let mut ids = cx.id_map.borrow_mut();\n     write!(\n         w,\n-        \"<div class=\\\"docblock{}\\\">{}</div>\",\n-        if is_hidden { \" hidden\" } else { \"\" },\n+        \"<div class=\\\"docblock\\\">{}</div>\",\n         Markdown(\n             md_text,\n             &links,\n@@ -544,11 +537,10 @@ fn document_short(\n     item: &clean::Item,\n     cx: &Context<'_>,\n     link: AssocItemLink<'_>,\n-    is_hidden: bool,\n     parent: &clean::Item,\n     show_def_docs: bool,\n ) {\n-    document_item_info(w, cx, item, is_hidden, Some(parent));\n+    document_item_info(w, cx, item, Some(parent));\n     if !show_def_docs {\n         return;\n     }\n@@ -565,19 +557,14 @@ fn document_short(\n             }\n         }\n \n-        write!(\n-            w,\n-            \"<div class='docblock{}'>{}</div>\",\n-            if is_hidden { \" hidden\" } else { \"\" },\n-            summary_html,\n-        );\n+        write!(w, \"<div class='docblock'>{}</div>\", summary_html,);\n     }\n }\n \n-fn document_full(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>, is_hidden: bool) {\n+fn document_full(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>) {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n-        render_markdown(w, cx, &s, item.links(cx), is_hidden);\n+        render_markdown(w, cx, &s, item.links(cx));\n     }\n }\n \n@@ -590,16 +577,11 @@ fn document_item_info(\n     w: &mut Buffer,\n     cx: &Context<'_>,\n     item: &clean::Item,\n-    is_hidden: bool,\n     parent: Option<&clean::Item>,\n ) {\n     let item_infos = short_item_info(item, cx, parent);\n     if !item_infos.is_empty() {\n-        if is_hidden {\n-            w.write_str(\"<div class=\\\"item-info hidden\\\">\");\n-        } else {\n-            w.write_str(\"<div class=\\\"item-info\\\">\");\n-        }\n+        w.write_str(\"<div class=\\\"item-info\\\">\");\n         for info in item_infos {\n             w.write_str(&info);\n         }\n@@ -1281,8 +1263,12 @@ fn render_impl(\n     let trait_ = i.trait_did_full(cache).map(|did| &traits[&did]);\n     let mut close_tags = String::new();\n \n+    // For trait implementations, the `interesting` output contains all methods that have doc\n+    // comments, and the `boring` output contains all methods that do not. The distinction is\n+    // used to allow hiding the boring methods.\n     fn doc_impl_item(\n-        w: &mut Buffer,\n+        boring: &mut Buffer,\n+        interesting: &mut Buffer,\n         cx: &Context<'_>,\n         item: &clean::Item,\n         parent: &clean::Item,\n@@ -1305,15 +1291,46 @@ fn render_impl(\n             }\n         };\n \n-        let (is_hidden, extra_class) =\n-            if (trait_.is_none() || item.doc_value().is_some() || item.kind.is_type_alias())\n-                && !is_default_item\n-            {\n-                (false, \"\")\n-            } else {\n-                (true, \" hidden\")\n-            };\n         let in_trait_class = if trait_.is_some() { \" trait-impl\" } else { \"\" };\n+\n+        let mut doc_buffer = Buffer::empty_from(boring);\n+        let mut info_buffer = Buffer::empty_from(boring);\n+        let mut short_documented = true;\n+\n+        if render_method_item {\n+            if !is_default_item {\n+                if let Some(t) = trait_ {\n+                    // The trait item may have been stripped so we might not\n+                    // find any documentation or stability for it.\n+                    if let Some(it) = t.items.iter().find(|i| i.name == item.name) {\n+                        // We need the stability of the item from the trait\n+                        // because impls can't have a stability.\n+                        if item.doc_value().is_some() {\n+                            document_item_info(&mut info_buffer, cx, it, Some(parent));\n+                            document_full(&mut doc_buffer, item, cx);\n+                            short_documented = false;\n+                        } else {\n+                            // In case the item isn't documented,\n+                            // provide short documentation from the trait.\n+                            document_short(&mut doc_buffer, it, cx, link, parent, show_def_docs);\n+                        }\n+                    }\n+                } else {\n+                    document_item_info(&mut info_buffer, cx, item, Some(parent));\n+                    if show_def_docs {\n+                        document_full(&mut doc_buffer, item, cx);\n+                        short_documented = false;\n+                    }\n+                }\n+            } else {\n+                document_short(&mut doc_buffer, item, cx, link, parent, show_def_docs);\n+            }\n+        }\n+        let w = if short_documented && trait_.is_some() { interesting } else { boring };\n+\n+        if !doc_buffer.is_empty() {\n+            w.write_str(\"<details class=\\\"rustdoc-toggle\\\" open><summary>\");\n+        }\n         match *item.kind {\n             clean::MethodItem(..) | clean::TyMethodItem(_) => {\n                 // Only render when the method is not static or we allow static methods\n@@ -1326,11 +1343,7 @@ fn render_impl(\n                             })\n                         })\n                         .map(|item| format!(\"{}.{}\", item.type_(), name));\n-                    write!(\n-                        w,\n-                        \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\">\",\n-                        id, item_type, extra_class, in_trait_class,\n-                    );\n+                    write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, in_trait_class,);\n                     w.write_str(\"<code>\");\n                     render_assoc_item(\n                         w,\n@@ -1355,11 +1368,7 @@ fn render_impl(\n             clean::TypedefItem(ref tydef, _) => {\n                 let source_id = format!(\"{}.{}\", ItemType::AssocType, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(\n-                    w,\n-                    \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\",\n-                    id, item_type, extra_class, in_trait_class\n-                );\n+                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, in_trait_class);\n                 assoc_type(\n                     w,\n                     item,\n@@ -1376,11 +1385,7 @@ fn render_impl(\n             clean::AssocConstItem(ref ty, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(\n-                    w,\n-                    \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\",\n-                    id, item_type, extra_class, in_trait_class\n-                );\n+                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, in_trait_class);\n                 assoc_const(\n                     w,\n                     item,\n@@ -1405,11 +1410,7 @@ fn render_impl(\n             clean::AssocTypeItem(ref bounds, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(\n-                    w,\n-                    \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\",\n-                    id, item_type, extra_class, in_trait_class\n-                );\n+                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, in_trait_class);\n                 assoc_type(\n                     w,\n                     item,\n@@ -1427,38 +1428,20 @@ fn render_impl(\n             _ => panic!(\"can't make docs for trait item with name {:?}\", item.name),\n         }\n \n-        if render_method_item {\n-            if !is_default_item {\n-                if let Some(t) = trait_ {\n-                    // The trait item may have been stripped so we might not\n-                    // find any documentation or stability for it.\n-                    if let Some(it) = t.items.iter().find(|i| i.name == item.name) {\n-                        // We need the stability of the item from the trait\n-                        // because impls can't have a stability.\n-                        if item.doc_value().is_some() {\n-                            document_item_info(w, cx, it, is_hidden, Some(parent));\n-                            document_full(w, item, cx, is_hidden);\n-                        } else {\n-                            // In case the item isn't documented,\n-                            // provide short documentation from the trait.\n-                            document_short(w, it, cx, link, is_hidden, parent, show_def_docs);\n-                        }\n-                    }\n-                } else {\n-                    document_item_info(w, cx, item, is_hidden, Some(parent));\n-                    if show_def_docs {\n-                        document_full(w, item, cx, is_hidden);\n-                    }\n-                }\n-            } else {\n-                document_short(w, item, cx, link, is_hidden, parent, show_def_docs);\n-            }\n+        w.push_buffer(info_buffer);\n+        if !doc_buffer.is_empty() {\n+            w.write_str(\"</summary>\");\n+            w.push_buffer(doc_buffer);\n+            w.push_str(\"</details>\");\n         }\n     }\n \n     let mut impl_items = Buffer::empty_from(w);\n+    let mut default_impl_items = Buffer::empty_from(w);\n+\n     for trait_item in &i.inner_impl().items {\n         doc_impl_item(\n+            &mut default_impl_items,\n             &mut impl_items,\n             cx,\n             trait_item,\n@@ -1475,6 +1458,7 @@ fn render_impl(\n \n     fn render_default_items(\n         w: &mut Buffer,\n+        tmp_w: &mut Buffer,\n         cx: &Context<'_>,\n         t: &clean::Trait,\n         i: &clean::Impl,\n@@ -1494,6 +1478,7 @@ fn render_impl(\n \n             doc_impl_item(\n                 w,\n+                tmp_w,\n                 cx,\n                 trait_item,\n                 parent,\n@@ -1515,6 +1500,7 @@ fn render_impl(\n     if show_default_items {\n         if let Some(t) = trait_ {\n             render_default_items(\n+                &mut default_impl_items,\n                 &mut impl_items,\n                 cx,\n                 &t.trait_,\n@@ -1527,7 +1513,7 @@ fn render_impl(\n             );\n         }\n     }\n-    let details_str = if impl_items.is_empty() {\n+    let details_str = if impl_items.is_empty() && default_impl_items.is_empty() {\n         \"\"\n     } else {\n         \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open><summary>\"\n@@ -1554,7 +1540,7 @@ fn render_impl(\n                 \"{}<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">\",\n                 details_str, id, aliases\n             );\n-            if !impl_items.is_empty() {\n+            if !impl_items.is_empty() || !default_impl_items.is_empty() {\n                 close_tags.insert_str(0, \"</details>\");\n             }\n             write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n@@ -1585,7 +1571,7 @@ fn render_impl(\n                 aliases,\n                 i.inner_impl().print(false, cx)\n             );\n-            if !impl_items.is_empty() {\n+            if !impl_items.is_empty() || !default_impl_items.is_empty() {\n                 close_tags.insert_str(0, \"</details>\");\n             }\n         }\n@@ -1598,7 +1584,7 @@ fn render_impl(\n             outer_const_version,\n         );\n         write_srclink(cx, &i.impl_item, w);\n-        if impl_items.is_empty() {\n+        if impl_items.is_empty() && default_impl_items.is_empty() {\n             w.write_str(\"</h3>\");\n         } else {\n             w.write_str(\"</h3></summary>\");\n@@ -1627,8 +1613,13 @@ fn render_impl(\n             );\n         }\n     }\n-    if !impl_items.is_empty() {\n+    if !impl_items.is_empty() || !default_impl_items.is_empty() {\n         w.write_str(\"<div class=\\\"impl-items\\\">\");\n+        w.push_buffer(default_impl_items);\n+        if trait_.is_some() && !impl_items.is_empty() {\n+            w.write_str(\"<details class=\\\"undocumented\\\"><summary></summary>\");\n+            close_tags.insert_str(0, \"</details>\");\n+        }\n         w.push_buffer(impl_items);\n         close_tags.insert_str(0, \"</div>\");\n     }"}, {"sha": "0c43f7730c06359427a4c1e8d7fea00c44658fc3", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 10, "deletions": 87, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=dfde867fcd4d29213dbdaf0b948ed00fe82a43e5", "patch": "@@ -1156,8 +1156,6 @@ function hideThemeButtonState() {\n         var hideMethodDocs = getSettingValue(\"auto-hide-method-docs\") === \"true\";\n         var hideImplementors = getSettingValue(\"auto-collapse-implementors\") !== \"false\";\n         var hideLargeItemContents = getSettingValue(\"auto-hide-large-items\") !== \"false\";\n-        var hideTraitImplementations =\n-            getSettingValue(\"auto-hide-trait-implementations\") !== \"false\";\n \n         var impl_list = document.getElementById(\"trait-implementations-list\");\n         if (impl_list !== null) {\n@@ -1173,100 +1171,25 @@ function hideThemeButtonState() {\n             });\n         }\n \n-        var func = function(e) {\n-            var next = e.nextElementSibling;\n-            if (next && hasClass(next, \"item-info\")) {\n-              next = next.nextElementSibling;\n-            }\n-            if (!next) {\n-                return;\n-            }\n-            if (hasClass(next, \"docblock\")) {\n-                var newToggle = toggle.cloneNode(true);\n-                insertAfter(newToggle, e.childNodes[e.childNodes.length - 1]);\n-                if (hideMethodDocs === true && hasClass(e, \"method\") === true) {\n-                    collapseDocs(newToggle, \"hide\");\n+        if (hideMethodDocs === true) {\n+            onEachLazy(document.getElementsByClassName(\"method\"), function(e) {\n+                var toggle = e.parentNode;\n+                if (toggle) {\n+                    toggle = toggle.parentNode;\n                 }\n-            }\n-        };\n-\n-        var funcImpl = function(e) {\n-            var next = e.nextElementSibling;\n-            if (next && hasClass(next, \"item-info\")) {\n-                next = next.nextElementSibling;\n-            }\n-            if (next && hasClass(next, \"docblock\")) {\n-                next = next.nextElementSibling;\n-            }\n-            if (!next) {\n-                return;\n-            }\n-        };\n+                if (toggle && toggle.tagName === \"DETAILS\") {\n+                    toggle.open = false;\n+                }\n+            });\n+        }\n \n-        onEachLazy(document.getElementsByClassName(\"method\"), func);\n-        onEachLazy(document.getElementsByClassName(\"associatedconstant\"), func);\n-        var impl_call = function() {};\n         onEachLazy(document.getElementsByTagName(\"details\"), function (e) {\n             var showLargeItem = !hideLargeItemContents && hasClass(e, \"type-contents-toggle\");\n             var showImplementor = !hideImplementors && hasClass(e, \"implementors-toggle\");\n             if (showLargeItem || showImplementor) {\n                 e.open = true;\n             }\n         });\n-        if (hideMethodDocs === true) {\n-            impl_call = function(e, newToggle) {\n-                if (e.id.match(/^impl(?:-\\d+)?$/) === null) {\n-                    // Automatically minimize all non-inherent impls\n-                    if (hasClass(e, \"impl\") === true) {\n-                        collapseDocs(newToggle, \"hide\");\n-                    }\n-                }\n-            };\n-        }\n-        var newToggle = document.createElement(\"a\");\n-        newToggle.href = \"javascript:void(0)\";\n-        newToggle.className = \"collapse-toggle hidden-default collapsed\";\n-        newToggle.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n-                              \"</span>] Show hidden undocumented items\";\n-        function toggleClicked() {\n-            if (hasClass(this, \"collapsed\")) {\n-                removeClass(this, \"collapsed\");\n-                onEachLazy(this.parentNode.getElementsByClassName(\"hidden\"), function(x) {\n-                    if (hasClass(x, \"content\") === false) {\n-                        removeClass(x, \"hidden\");\n-                        addClass(x, \"x\");\n-                    }\n-                }, true);\n-                this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(false) +\n-                                 \"</span>] Hide undocumented items\";\n-            } else {\n-                addClass(this, \"collapsed\");\n-                onEachLazy(this.parentNode.getElementsByClassName(\"x\"), function(x) {\n-                    if (hasClass(x, \"content\") === false) {\n-                        addClass(x, \"hidden\");\n-                        removeClass(x, \"x\");\n-                    }\n-                }, true);\n-                this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n-                                 \"</span>] Show hidden undocumented items\";\n-            }\n-        }\n-        onEachLazy(document.getElementsByClassName(\"impl-items\"), function(e) {\n-            onEachLazy(e.getElementsByClassName(\"associatedconstant\"), func);\n-            // We transform the DOM iterator into a vec of DOM elements to prevent performance\n-            // issues on webkit browsers.\n-            var hiddenElems = Array.prototype.slice.call(e.getElementsByClassName(\"hidden\"));\n-            var needToggle = hiddenElems.some(function(hiddenElem) {\n-                return hasClass(hiddenElem, \"content\") === false &&\n-                    hasClass(hiddenElem, \"docblock\") === false;\n-            });\n-            if (needToggle === true) {\n-                var inner_toggle = newToggle.cloneNode(true);\n-                inner_toggle.onclick = toggleClicked;\n-                e.insertBefore(inner_toggle, e.firstChild);\n-                impl_call(e.previousSibling, inner_toggle);\n-            }\n-        });\n \n         var currentType = document.getElementsByClassName(\"type-decl\")[0];\n         var className = null;"}, {"sha": "55d8514533acb25927fd620399826a5fa863ea83", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=dfde867fcd4d29213dbdaf0b948ed00fe82a43e5", "patch": "@@ -147,14 +147,16 @@ h1, h2, h3, h4,\n .sidebar, a.source, .search-input, .content table td:first-child > a,\n .collapse-toggle, div.item-list .out-of-band,\n #source-sidebar, #sidebar-toggle,\n+details.rustdoc-toggle > summary::before,\n+details.undocumented > summary::before,\n+.content ul.crate a.crate,\n /* This selector is for the items listed in the \"all items\" page. */\n #main > ul.docblock > li > a {\n \tfont-family: \"Fira Sans\", Arial, sans-serif;\n }\n \n .content ul.crate a.crate {\n \tfont-size: 16px/1.6;\n-\tfont-family: \"Fira Sans\", Arial, sans-serif;\n }\n \n ol, ul {\n@@ -596,7 +598,9 @@ h4 > code, h3 > code, .invisible > code {\n \tleft: -19px;\n }\n \n-.content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant {\n+.content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant,\n+.content .impl-items details > summary > .type,\n+.impl-items details > summary > .associatedconstant {\n \tmargin-left: 20px;\n }\n \n@@ -1764,7 +1768,10 @@ details.rustdoc-toggle > summary.hideme {\n \tcursor: pointer;\n }\n \n-details.rustdoc-toggle > summary::-webkit-details-marker {\n+details.rustdoc-toggle > summary::-webkit-details-marker,\n+details.rustdoc-toggle > summary::marker,\n+details.undocumented > summary::-webkit-details-marker,\n+details.undocumented > summary::marker {\n \tdisplay: none;\n }\n \n@@ -1787,6 +1794,14 @@ details.rustdoc-toggle > summary.hideme::before {\n details.rustdoc-toggle > summary:not(.hideme)::before {\n \tposition: absolute;\n \tleft: -23px;\n+\ttop: initial;\n+}\n+\n+.impl-items > details.rustdoc-toggle > summary:not(.hideme)::before,\n+.undocumented > details.rustdoc-toggle > summary:not(.hideme)::before {\n+\tposition: absolute;\n+\ttop: 3px;\n+\tleft: -2px;\n }\n \n /* When a \"hideme\" summary is open and the \"Expand description\" or \"Show\n@@ -1798,7 +1813,7 @@ details.rustdoc-toggle[open] > summary.hideme {\n \tposition: absolute;\n }\n \n-details.rustdoc-toggle[open] {\n+details.rustdoc-toggle, details.undocumented {\n \tposition: relative;\n }\n \n@@ -1810,3 +1825,14 @@ details.rustdoc-toggle[open] > summary::before {\n \tcontent: \"[\u2212]\";\n \tdisplay: inline;\n }\n+\n+details.undocumented > summary::before {\n+\tcontent: \"[+] Show hidden undocumented items\";\n+\tcursor: pointer;\n+\tfont-size: 16px;\n+\tfont-weight: 300;\n+}\n+\n+details.undocumented[open] > summary::before {\n+\tcontent: \"[-] Hide undocumented items\";\n+}"}, {"sha": "aace0b3c037caf6be61d86ed5f3b9485ef0d0dec", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=dfde867fcd4d29213dbdaf0b948ed00fe82a43e5", "patch": "@@ -226,7 +226,8 @@ a {\n \n .collapse-toggle,\n details.rustdoc-toggle > summary.hideme > span,\n-details.rustdoc-toggle > summary::before {\n+details.rustdoc-toggle > summary::before,\n+details.undocumented > summary::before {\n \tcolor: #999;\n }\n "}, {"sha": "c23e95ce107a9431410efedb309d947a72225d65", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=dfde867fcd4d29213dbdaf0b948ed00fe82a43e5", "patch": "@@ -188,7 +188,8 @@ a.test-arrow {\n \n .collapse-toggle,\n details.rustdoc-toggle > summary.hideme > span,\n-details.rustdoc-toggle > summary::before {\n+details.rustdoc-toggle > summary::before,\n+details.undocumented > summary::before {\n \tcolor: #999;\n }\n "}, {"sha": "9330972121073b31b29705c793f806748b94af38", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/dfde867fcd4d29213dbdaf0b948ed00fe82a43e5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=dfde867fcd4d29213dbdaf0b948ed00fe82a43e5", "patch": "@@ -186,7 +186,8 @@ a.test-arrow {\n \n .collapse-toggle,\n details.rustdoc-toggle > summary.hideme > span,\n-details.rustdoc-toggle > summary::before {\n+details.rustdoc-toggle > summary::before,\n+details.undocumented > summary::before {\n \tcolor: #999;\n }\n "}]}