{"sha": "b0f3ed2b808d0696d0a97173d65d368b01c0c9a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZjNlZDJiODA4ZDA2OTZkMGE5NzE3M2Q2NWQzNjhiMDFjMGM5YTc=", "commit": {"author": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2018-12-05T14:01:19Z"}, "committer": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2018-12-05T14:01:19Z"}, "message": "Added additional reasoning to `Why is this bad?`.\nAdded comment to explain usage of MIR.", "tree": {"sha": "cb07e740acb021c98161875d8a2dba4fe847963a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb07e740acb021c98161875d8a2dba4fe847963a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0f3ed2b808d0696d0a97173d65d368b01c0c9a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f3ed2b808d0696d0a97173d65d368b01c0c9a7", "html_url": "https://github.com/rust-lang/rust/commit/b0f3ed2b808d0696d0a97173d65d368b01c0c9a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0f3ed2b808d0696d0a97173d65d368b01c0c9a7/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aed2b986e6d596f6ed154625030b8c83a67066fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/aed2b986e6d596f6ed154625030b8c83a67066fe", "html_url": "https://github.com/rust-lang/rust/commit/aed2b986e6d596f6ed154625030b8c83a67066fe"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "664f182c533687991095de5e0cfc5a29377c0ee7", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3ed2b808d0696d0a97173d65d368b01c0c9a7/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3ed2b808d0696d0a97173d65d368b01c0c9a7/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=b0f3ed2b808d0696d0a97173d65d368b01c0c9a7", "patch": "@@ -17,7 +17,10 @@ use crate::utils::{snippet_opt, span_lint_and_then};\n /// **What it does:** Checks for missing return statements at the end of a block.\n ///\n /// **Why is this bad?** Actually omitting the return keyword is idiomatic Rust code. Programmers\n-/// coming from other languages might prefer the expressiveness of `return`.\n+/// coming from other languages might prefer the expressiveness of `return`. It's possible to miss\n+/// the last returning statement because the only difference is a missing `;`. Especially in bigger\n+/// code with multiple return paths having a `return` keyword makes it easier to find the\n+/// corresponding statements.\n ///\n /// **Known problems:** None.\n ///\n@@ -124,6 +127,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         let def_id = cx.tcx.hir.body_owner_def_id(body.id());\n         let mir = cx.tcx.optimized_mir(def_id);\n \n+        // checking return type through MIR, HIR is not able to determine inferred closure return types\n         if !mir.return_ty().is_unit() {\n             Self::expr_match(cx, &body.value);\n         }"}]}