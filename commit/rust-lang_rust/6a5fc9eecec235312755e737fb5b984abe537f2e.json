{"sha": "6a5fc9eecec235312755e737fb5b984abe537f2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNWZjOWVlY2VjMjM1MzEyNzU1ZTczN2ZiNWI5ODRhYmU1MzdmMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-02T17:48:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-02T17:48:28Z"}, "message": "Auto merge of #41207 - sstewartgallus:spinpause, r=alexcrichton\n\nSpin loop pause function redux\n\nGitHub's interface is screwy.\n\nThis is the same PR as https://github.com/rust-lang/rust/pull/40537", "tree": {"sha": "657314e4a33fe0b2c5911d9f5b6435068005ee7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/657314e4a33fe0b2c5911d9f5b6435068005ee7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a5fc9eecec235312755e737fb5b984abe537f2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5fc9eecec235312755e737fb5b984abe537f2e", "html_url": "https://github.com/rust-lang/rust/commit/6a5fc9eecec235312755e737fb5b984abe537f2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a5fc9eecec235312755e737fb5b984abe537f2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed1f26ddda15b2bcf613a257e813e8b02ee14dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1f26ddda15b2bcf613a257e813e8b02ee14dff", "html_url": "https://github.com/rust-lang/rust/commit/ed1f26ddda15b2bcf613a257e813e8b02ee14dff"}, {"sha": "f4fe3cd0e997fc417a245fd33d0d27fb0b44ba10", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4fe3cd0e997fc417a245fd33d0d27fb0b44ba10", "html_url": "https://github.com/rust-lang/rust/commit/f4fe3cd0e997fc417a245fd33d0d27fb0b44ba10"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "3d9e7c7fd860dd33f1b3b793f83ca3d102fc0425", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a5fc9eecec235312755e737fb5b984abe537f2e/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/6a5fc9eecec235312755e737fb5b984abe537f2e/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=6a5fc9eecec235312755e737fb5b984abe537f2e", "patch": "@@ -145,6 +145,7 @@\n     - [future_atomic_orderings](library-features/future-atomic-orderings.md)\n     - [get_type_id](library-features/get-type-id.md)\n     - [heap_api](library-features/heap-api.md)\n+    - [hint_core_should_pause](library-features/hint-core-should-pause.md)\n     - [i128](library-features/i128.md)\n     - [inclusive_range](library-features/inclusive-range.md)\n     - [integer_atomics](library-features/integer-atomics.md)"}, {"sha": "05e057be4932df41e80dfb9c52a3538e3ba1d8c5", "filename": "src/doc/unstable-book/src/library-features/hint-core-should-pause.md", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6a5fc9eecec235312755e737fb5b984abe537f2e/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fhint-core-should-pause.md", "raw_url": "https://github.com/rust-lang/rust/raw/6a5fc9eecec235312755e737fb5b984abe537f2e/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fhint-core-should-pause.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fhint-core-should-pause.md?ref=6a5fc9eecec235312755e737fb5b984abe537f2e", "patch": "@@ -0,0 +1,41 @@\n+# `hint_core_should_pause`\n+\n+The tracking issue for this feature is: [#41196]\n+\n+[#41196]: https://github.com/rust-lang/rust/issues/41196\n+\n+------------------------\n+\n+Many programs have spin loops like the following:\n+\n+```rust,no_run\n+use std::sync::atomic::{AtomicBool,Ordering};\n+\n+fn spin_loop(value: &AtomicBool) {\n+    loop {\n+        if value.load(Ordering::Acquire) {\n+             break;\n+        }\n+    }\n+}\n+```\n+\n+These programs can be improved in performance like so:\n+\n+```rust,no_run\n+#![feature(hint_core_should_pause)]\n+use std::sync::atomic;\n+use std::sync::atomic::{AtomicBool,Ordering};\n+\n+fn spin_loop(value: &AtomicBool) {\n+    loop {\n+        if value.load(Ordering::Acquire) {\n+             break;\n+        }\n+        atomic::hint_core_should_pause();\n+    }\n+}\n+```\n+\n+Further improvements could combine `hint_core_should_pause` with\n+exponential backoff or `std::thread::yield_now`."}, {"sha": "3c51dbc2550dff3da3f266d9003044e97a8169c8", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6a5fc9eecec235312755e737fb5b984abe537f2e/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5fc9eecec235312755e737fb5b984abe537f2e/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=6a5fc9eecec235312755e737fb5b984abe537f2e", "patch": "@@ -94,6 +94,29 @@ use intrinsics;\n use cell::UnsafeCell;\n use fmt;\n \n+/// Save power or switch hyperthreads in a busy-wait spin-loop.\n+///\n+/// This function is deliberately more primitive than\n+/// `std::thread::yield_now` and does not directly yield to the\n+/// system's scheduler.  In some cases it might be useful to use a\n+/// combination of both functions.  Careful benchmarking is advised.\n+///\n+/// On some platforms this function may not do anything at all.\n+#[inline]\n+#[unstable(feature = \"hint_core_should_pause\", issue = \"41196\")]\n+pub fn hint_core_should_pause()\n+{\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    unsafe {\n+        asm!(\"pause\" ::: \"memory\" : \"volatile\");\n+    }\n+\n+    #[cfg(target_arch = \"aarch64\")]\n+    unsafe {\n+        asm!(\"yield\" ::: \"memory\" : \"volatile\");\n+    }\n+}\n+\n /// A boolean type which can be safely shared between threads.\n ///\n /// This type has the same in-memory representation as a `bool`."}]}