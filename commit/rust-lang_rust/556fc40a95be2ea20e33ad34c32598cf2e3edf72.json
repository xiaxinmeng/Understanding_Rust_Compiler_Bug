{"sha": "556fc40a95be2ea20e33ad34c32598cf2e3edf72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NmZjNDBhOTViZTJlYTIwZTMzYWQzNGMzMjU5OGNmMmUzZWRmNzI=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2019-02-07T11:28:38Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2019-04-23T22:54:14Z"}, "message": "Mark HashSet functions with #[inline]", "tree": {"sha": "52cf41d33f6f4f0dd362322aa5ab744063ecfe06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52cf41d33f6f4f0dd362322aa5ab744063ecfe06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/556fc40a95be2ea20e33ad34c32598cf2e3edf72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/556fc40a95be2ea20e33ad34c32598cf2e3edf72", "html_url": "https://github.com/rust-lang/rust/commit/556fc40a95be2ea20e33ad34c32598cf2e3edf72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/556fc40a95be2ea20e33ad34c32598cf2e3edf72/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a533504ca12ed93fec3cfb1d42add1a32bbc27cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a533504ca12ed93fec3cfb1d42add1a32bbc27cf", "html_url": "https://github.com/rust-lang/rust/commit/a533504ca12ed93fec3cfb1d42add1a32bbc27cf"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "b610e09ae749eedff3ca305ee9e06d9bb8656a36", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/556fc40a95be2ea20e33ad34c32598cf2e3edf72/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556fc40a95be2ea20e33ad34c32598cf2e3edf72/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=556fc40a95be2ea20e33ad34c32598cf2e3edf72", "patch": "@@ -181,6 +181,7 @@ impl<T, S> HashSet<T, S> {\n     ///     println!(\"{}\", x);\n     /// }\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, T> {\n         Iter { iter: self.map.keys() }\n@@ -198,6 +199,7 @@ impl<T, S> HashSet<T, S> {\n     /// v.insert(1);\n     /// assert_eq!(v.len(), 1);\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.map.len()\n@@ -215,6 +217,7 @@ impl<T, S> HashSet<T, S> {\n     /// v.insert(1);\n     /// assert!(!v.is_empty());\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.map.is_empty()\n@@ -255,6 +258,7 @@ impl<T, S> HashSet<T, S> {\n     /// v.clear();\n     /// assert!(v.is_empty());\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn clear(&mut self) {\n         self.map.clear()\n@@ -332,6 +336,7 @@ impl<T, S> HashSet<T, S>\n     /// let set: HashSet<i32> = HashSet::with_hasher(hasher);\n     /// let hasher: &RandomState = set.hasher();\n     /// ```\n+    #[inline]\n     #[stable(feature = \"hashmap_public_hasher\", since = \"1.9.0\")]\n     pub fn hasher(&self) -> &S {\n         self.map.hasher()\n@@ -353,6 +358,7 @@ impl<T, S> HashSet<T, S>\n     /// set.reserve(10);\n     /// assert!(set.capacity() >= 10);\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve(&mut self, additional: usize) {\n         self.map.reserve(additional)\n@@ -397,6 +403,7 @@ impl<T, S> HashSet<T, S>\n     /// set.shrink_to_fit();\n     /// assert!(set.capacity() >= 2);\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn shrink_to_fit(&mut self) {\n         self.map.shrink_to_fit()\n@@ -453,6 +460,7 @@ impl<T, S> HashSet<T, S>\n     /// let diff: HashSet<_> = b.difference(&a).collect();\n     /// assert_eq!(diff, [4].iter().collect());\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S> {\n         Difference {\n@@ -482,6 +490,7 @@ impl<T, S> HashSet<T, S>\n     /// assert_eq!(diff1, diff2);\n     /// assert_eq!(diff1, [1, 4].iter().collect());\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn symmetric_difference<'a>(&'a self,\n                                     other: &'a HashSet<T, S>)\n@@ -507,6 +516,7 @@ impl<T, S> HashSet<T, S>\n     /// let intersection: HashSet<_> = a.intersection(&b).collect();\n     /// assert_eq!(intersection, [2, 3].iter().collect());\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {\n         if self.len() <= other.len() {\n@@ -540,6 +550,7 @@ impl<T, S> HashSet<T, S>\n     /// let union: HashSet<_> = a.union(&b).collect();\n     /// assert_eq!(union, [1, 2, 3, 4].iter().collect());\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {\n         if self.len() <= other.len() {\n@@ -571,6 +582,7 @@ impl<T, S> HashSet<T, S>\n     ///\n     /// [`Eq`]: ../../std/cmp/trait.Eq.html\n     /// [`Hash`]: ../../std/hash/trait.Hash.html\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn contains<Q: ?Sized>(&self, value: &Q) -> bool\n         where T: Borrow<Q>,\n@@ -597,6 +609,7 @@ impl<T, S> HashSet<T, S>\n     ///\n     /// [`Eq`]: ../../std/cmp/trait.Eq.html\n     /// [`Hash`]: ../../std/hash/trait.Hash.html\n+    #[inline]\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>\n         where T: Borrow<Q>,\n@@ -700,6 +713,7 @@ impl<T, S> HashSet<T, S>\n     /// assert_eq!(set.insert(2), false);\n     /// assert_eq!(set.len(), 1);\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(&mut self, value: T) -> bool {\n         self.map.insert(value, ()).is_none()\n@@ -720,6 +734,7 @@ impl<T, S> HashSet<T, S>\n     /// set.replace(Vec::with_capacity(10));\n     /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n     /// ```\n+    #[inline]\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn replace(&mut self, value: T) -> Option<T> {\n         match self.map.entry(value) {\n@@ -752,6 +767,7 @@ impl<T, S> HashSet<T, S>\n     ///\n     /// [`Eq`]: ../../std/cmp/trait.Eq.html\n     /// [`Hash`]: ../../std/hash/trait.Hash.html\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool\n         where T: Borrow<Q>,\n@@ -778,6 +794,7 @@ impl<T, S> HashSet<T, S>\n     ///\n     /// [`Eq`]: ../../std/cmp/trait.Eq.html\n     /// [`Hash`]: ../../std/hash/trait.Hash.html\n+    #[inline]\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T>\n         where T: Borrow<Q>,\n@@ -844,6 +861,7 @@ impl<T, S> FromIterator<T> for HashSet<T, S>\n     where T: Eq + Hash,\n           S: BuildHasher + Default\n {\n+    #[inline]\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> HashSet<T, S> {\n         let mut set = HashSet::with_hasher(Default::default());\n         set.extend(iter);\n@@ -856,6 +874,7 @@ impl<T, S> Extend<T> for HashSet<T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n {\n+    #[inline]\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n         self.map.extend(iter.into_iter().map(|k| (k, ())));\n     }\n@@ -866,6 +885,7 @@ impl<'a, T, S> Extend<&'a T> for HashSet<T, S>\n     where T: 'a + Eq + Hash + Copy,\n           S: BuildHasher\n {\n+    #[inline]\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().cloned());\n     }\n@@ -877,6 +897,7 @@ impl<T, S> Default for HashSet<T, S>\n           S: BuildHasher + Default\n {\n     /// Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.\n+    #[inline]\n     fn default() -> HashSet<T, S> {\n         HashSet { map: HashMap::default() }\n     }\n@@ -1105,6 +1126,7 @@ impl<'a, T, S> IntoIterator for &'a HashSet<T, S> {\n     type Item = &'a T;\n     type IntoIter = Iter<'a, T>;\n \n+    #[inline]\n     fn into_iter(self) -> Iter<'a, T> {\n         self.iter()\n     }\n@@ -1135,13 +1157,15 @@ impl<T, S> IntoIterator for HashSet<T, S> {\n     ///     println!(\"{}\", x);\n     /// }\n     /// ```\n+    #[inline]\n     fn into_iter(self) -> IntoIter<T> {\n         IntoIter { iter: self.map.into_iter() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K> Clone for Iter<'_, K> {\n+    #[inline]\n     fn clone(&self) -> Self {\n         Iter { iter: self.iter.clone() }\n     }\n@@ -1150,15 +1174,18 @@ impl<K> Clone for Iter<'_, K> {\n impl<'a, K> Iterator for Iter<'a, K> {\n     type Item = &'a K;\n \n+    #[inline]\n     fn next(&mut self) -> Option<&'a K> {\n         self.iter.next()\n     }\n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K> ExactSizeIterator for Iter<'_, K> {\n+    #[inline]\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n@@ -1177,15 +1204,18 @@ impl<K: fmt::Debug> fmt::Debug for Iter<'_, K> {\n impl<K> Iterator for IntoIter<K> {\n     type Item = K;\n \n+    #[inline]\n     fn next(&mut self) -> Option<K> {\n         self.iter.next().map(|(k, _)| k)\n     }\n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K> ExactSizeIterator for IntoIter<K> {\n+    #[inline]\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n@@ -1208,15 +1238,18 @@ impl<K: fmt::Debug> fmt::Debug for IntoIter<K> {\n impl<'a, K> Iterator for Drain<'a, K> {\n     type Item = K;\n \n+    #[inline]\n     fn next(&mut self) -> Option<K> {\n         self.iter.next().map(|(k, _)| k)\n     }\n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K> ExactSizeIterator for Drain<'_, K> {\n+    #[inline]\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n@@ -1237,6 +1270,7 @@ impl<K: fmt::Debug> fmt::Debug for Drain<'_, K> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, S> Clone for Intersection<'_, T, S> {\n+    #[inline]\n     fn clone(&self) -> Self {\n         Intersection { iter: self.iter.clone(), ..*self }\n     }\n@@ -1249,6 +1283,7 @@ impl<'a, T, S> Iterator for Intersection<'a, T, S>\n {\n     type Item = &'a T;\n \n+    #[inline]\n     fn next(&mut self) -> Option<&'a T> {\n         loop {\n             let elt = self.iter.next()?;\n@@ -1258,6 +1293,7 @@ impl<'a, T, S> Iterator for Intersection<'a, T, S>\n         }\n     }\n \n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         let (_, upper) = self.iter.size_hint();\n         (0, upper)\n@@ -1283,6 +1319,7 @@ impl<T, S> FusedIterator for Intersection<'_, T, S>\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, S> Clone for Difference<'_, T, S> {\n+    #[inline]\n     fn clone(&self) -> Self {\n         Difference { iter: self.iter.clone(), ..*self }\n     }\n@@ -1295,6 +1332,7 @@ impl<'a, T, S> Iterator for Difference<'a, T, S>\n {\n     type Item = &'a T;\n \n+    #[inline]\n     fn next(&mut self) -> Option<&'a T> {\n         loop {\n             let elt = self.iter.next()?;\n@@ -1304,6 +1342,7 @@ impl<'a, T, S> Iterator for Difference<'a, T, S>\n         }\n     }\n \n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         let (_, upper) = self.iter.size_hint();\n         (0, upper)\n@@ -1329,6 +1368,7 @@ impl<T, S> fmt::Debug for Difference<'_, T, S>\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, S> Clone for SymmetricDifference<'_, T, S> {\n+    #[inline]\n     fn clone(&self) -> Self {\n         SymmetricDifference { iter: self.iter.clone() }\n     }\n@@ -1341,9 +1381,11 @@ impl<'a, T, S> Iterator for SymmetricDifference<'a, T, S>\n {\n     type Item = &'a T;\n \n+    #[inline]\n     fn next(&mut self) -> Option<&'a T> {\n         self.iter.next()\n     }\n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n@@ -1368,6 +1410,7 @@ impl<T, S> fmt::Debug for SymmetricDifference<'_, T, S>\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, S> Clone for Union<'_, T, S> {\n+    #[inline]\n     fn clone(&self) -> Self {\n         Union { iter: self.iter.clone() }\n     }\n@@ -1397,9 +1440,11 @@ impl<'a, T, S> Iterator for Union<'a, T, S>\n {\n     type Item = &'a T;\n \n+    #[inline]\n     fn next(&mut self) -> Option<&'a T> {\n         self.iter.next()\n     }\n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }"}]}