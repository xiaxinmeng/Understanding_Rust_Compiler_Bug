{"sha": "87253cf3a91994aac5a9e679ae17cfcad1ed0fcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MjUzY2YzYTkxOTk0YWFjNWE5ZTY3OWFlMTdjZmNhZDFlZDBmY2Y=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-11T08:44:27Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-11T10:46:44Z"}, "message": "Revert some iface shape code, fix a few more things in it\n\nWe can now run the compiler with an iface-based hashtable\nimplementation.", "tree": {"sha": "f59d0eebc135a86b4f2a84e9712898d98c3b9dbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f59d0eebc135a86b4f2a84e9712898d98c3b9dbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87253cf3a91994aac5a9e679ae17cfcad1ed0fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87253cf3a91994aac5a9e679ae17cfcad1ed0fcf", "html_url": "https://github.com/rust-lang/rust/commit/87253cf3a91994aac5a9e679ae17cfcad1ed0fcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87253cf3a91994aac5a9e679ae17cfcad1ed0fcf/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0145b15f0cd61389599eb1cb77c028f7f4a8229a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0145b15f0cd61389599eb1cb77c028f7f4a8229a", "html_url": "https://github.com/rust-lang/rust/commit/0145b15f0cd61389599eb1cb77c028f7f4a8229a"}], "stats": {"total": 49, "additions": 19, "deletions": 30}, "files": [{"sha": "d04ae2e09df10e215eb5f3c41b401b0b92df633c", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/87253cf3a91994aac5a9e679ae17cfcad1ed0fcf/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/87253cf3a91994aac5a9e679ae17cfcad1ed0fcf/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=87253cf3a91994aac5a9e679ae17cfcad1ed0fcf", "patch": "@@ -111,8 +111,7 @@ class irc : public shape::data<irc,shape::ptr> {\n     }\n \n     void walk_iface() {\n-        // an iface is always a ptr to a ref-counted obj.\n-        shape::data<irc,shape::ptr>::walk_box_contents();\n+        shape::data<irc,shape::ptr>::walk_iface_contents(dp);\n     }\n \n     void walk_res(const shape::rust_fn *dtor, unsigned n_params,\n@@ -503,7 +502,7 @@ class sweep : public shape::data<sweep,shape::ptr> {\n     }\n \n     void walk_iface() {\n-        shape::data<sweep,shape::ptr>::walk_box_contents();\n+        shape::data<sweep,shape::ptr>::walk_iface_contents(dp);\n     }\n \n     void walk_res(const shape::rust_fn *dtor, unsigned n_params,"}, {"sha": "b83d74f6bfe3179bb6caf38a3bc968c24459c55d", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/87253cf3a91994aac5a9e679ae17cfcad1ed0fcf/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/87253cf3a91994aac5a9e679ae17cfcad1ed0fcf/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=87253cf3a91994aac5a9e679ae17cfcad1ed0fcf", "patch": "@@ -260,23 +260,6 @@ struct rust_opaque_closure;\n //   no arguments (and hence the final void*) is harmless\n typedef void (*CDECL spawn_fn)(void*, rust_opaque_closure*, void *);\n \n-// corresponds to the layout of an iface value\n-//\n-// Note: eventually, we should inline the contents of opaque_iface_contents\n-// into opaque_iface in the LLVM code.  Otherwise, the alignment of\n-// opaque_iface_contents depends on the opaque data!\n-\n-struct opaque_iface_contents {\n-    const type_desc *td; // describes opaque_iface_contents\n-    const void *vtable;\n-    // (opaque data goes here)\n-};\n-\n-struct opaque_iface {\n-    intptr_t ref_count;\n-    opaque_iface_contents contents;\n-};\n-\n // corresponds to the layout of a fn(), fn@(), fn~() etc\n struct fn_env_pair {\n     spawn_fn f;"}, {"sha": "0def948223fb7777abff1ac9eebe82837e7d9a2b", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/87253cf3a91994aac5a9e679ae17cfcad1ed0fcf/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/87253cf3a91994aac5a9e679ae17cfcad1ed0fcf/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=87253cf3a91994aac5a9e679ae17cfcad1ed0fcf", "patch": "@@ -363,7 +363,7 @@ class type_param {\n template<typename T>\n void\n ctxt<T>::walk() {\n-    switch (*sp++) {\n+  switch (*sp++) {\n     case SHAPE_U8:      WALK_NUMBER(uint8_t);   break;\n     case SHAPE_U16:     WALK_NUMBER(uint16_t);  break;\n     case SHAPE_U32:     WALK_NUMBER(uint32_t);  break;\n@@ -823,7 +823,7 @@ class data : public ctxt< data<T,U> > {\n     void walk_uniq_contents();\n     void walk_fn_contents(ptr &dp);\n     void walk_obj_contents(ptr &dp);\n-    void walk_iface_value(ptr &dp);\n+    void walk_iface_contents(ptr &dp);\n     void walk_variant(tag_info &tinfo, tag_variant_t variant);\n \n     static std::pair<uint8_t *,uint8_t *> get_vec_data_range(ptr dp);\n@@ -870,7 +870,7 @@ class data : public ctxt< data<T,U> > {\n \n     void walk_iface() {\n         ALIGN_TO(alignof<void *>());\n-        U next_dp = dp + sizeof(void *) * 2;\n+        U next_dp = dp + sizeof(void *);\n         static_cast<T *>(this)->walk_iface();\n         dp = next_dp;\n     }\n@@ -1003,14 +1003,21 @@ data<T,U>::walk_obj_contents(ptr &dp) {\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_iface_value(ptr &dp) {\n-    opaque_iface *box_ptr = bump_dp<opaque_iface *>(dp);\n+data<T,U>::walk_iface_contents(ptr &dp) {\n+    uint8_t *box_ptr = bump_dp<uint8_t *>(dp);\n     if (!box_ptr) return;\n-    const type_desc *contents_td = box_ptr->contents.td;\n-    ptr contents_dp((uintptr_t)&box_ptr->contents);\n-    T sub(*static_cast<T *>(this), contents_td->shape, NULL, NULL, contents_dp);\n+    U ref_count_dp(box_ptr);\n+    uint8_t *body_ptr = box_ptr + sizeof(void*);\n+    type_desc *valtydesc =\n+        *reinterpret_cast<type_desc **>(body_ptr);\n+    ptr value_dp(body_ptr + sizeof(void*) * 2);\n+    // FIXME The 5 is a hard-coded way to skip over a struct shape\n+    // header and the first two (number-typed) fields. This is too\n+    // fragile, but I didn't see a good way to properly encode it.\n+    T sub(*static_cast<T *>(this), valtydesc->shape + 5, NULL, NULL,\n+          value_dp);\n     sub.align = true;\n-    sub.walk();\n+    static_cast<T *>(this)->walk_box_contents(sub, ref_count_dp);\n }\n \n // Polymorphic logging, for convenience\n@@ -1099,7 +1106,7 @@ class log : public data<log,ptr> {\n     void walk_iface() {\n         out << prefix << \"iface(\";\n         prefix = \"\";\n-        data<log,ptr>::walk_iface_value(dp);\n+        data<log,ptr>::walk_iface_contents(dp);\n         out << prefix << \")\";\n     }\n "}]}