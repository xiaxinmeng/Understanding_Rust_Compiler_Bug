{"sha": "33ff32cac8324ee3fcae09baa1c571c701f1157e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZmYzMmNhYzgzMjRlZTNmY2FlMDliYWExYzU3MWM3MDFmMTE1N2U=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-08T08:28:05Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-10T16:32:06Z"}, "message": "Get the test suite working inside the rustc test suite", "tree": {"sha": "c9993c5033134475e840e287bdff6542b0af577a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9993c5033134475e840e287bdff6542b0af577a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33ff32cac8324ee3fcae09baa1c571c701f1157e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmMiocACgkQpp+NIls6\n19n+4w/9Em2iUAxXuTzKZYf4bEfES/un/Ain/VdCKD//3mw3PDFjfxCheCE4h7LL\ndRacObzRBKXYlE5iQca3j9MY/aQ8iS2KdjK+nu8fgJiv2kgs4/iCxNPNZESuMqmS\nf5L4dGZ6UnMGxNKYkBv8c2adtAwn/zs/4gFPJ+nXsc9zkE2yF9UaybhW66qz+W2i\nimv45H66v4mYvPBvbeX+0/w/Pzp4iVWp8hcZhZEahIt8/pwLq+jMHvfU3tOM6TzO\nOkS9FNUeOx4/rdzk89FUOAlLqM0qmZhtHya+3aNuiIBz1fBj8slrS4jRlaZqtWlX\n3oQOtHHxsXskqf7cONhbgN1MmNt5FMpndwa31qmlFziGhPdK2iDfOhkcamlT4J19\nU5DyN9zQBbUl2HZz6UDdy0L0x+7lLNcIuF5a4fHGufwDB+tDF9PCuhHBOOSbe0dc\nhbumZZmYs6WY6x4bnVPNbmJ6E9Nhjd3+lbk4Y1fXau5k638wvODkmWWzoxmqAaHZ\nErD+GQHlejKnHppAqR3nDrCv0SKhvRkqHcFv3GNkK15iUZI08ioXBCNh2Bhjp2Rl\nJ/x9NJw+7mW7iSDq0s5R4Zth2zHo8cLGPmbnRxIt3lc+XiwtIr6h2gCVtwpiRpLB\nz+wCnJSy7kaMDWDLSq+17uVK1w9g/v1ZRjE04NITmJgLoUxzwng=\n=Dakn\n-----END PGP SIGNATURE-----", "payload": "tree c9993c5033134475e840e287bdff6542b0af577a\nparent 63c48435030c3f3057aa9da8ffb4be8389896050\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1502180885 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1502382726 +0200\n\nGet the test suite working inside the rustc test suite\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33ff32cac8324ee3fcae09baa1c571c701f1157e", "html_url": "https://github.com/rust-lang/rust/commit/33ff32cac8324ee3fcae09baa1c571c701f1157e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33ff32cac8324ee3fcae09baa1c571c701f1157e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63c48435030c3f3057aa9da8ffb4be8389896050", "url": "https://api.github.com/repos/rust-lang/rust/commits/63c48435030c3f3057aa9da8ffb4be8389896050", "html_url": "https://github.com/rust-lang/rust/commit/63c48435030c3f3057aa9da8ffb4be8389896050"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "78886d96413fbdad88caa981bb8e52627bf73580", "filename": "tests/compiletest.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/33ff32cac8324ee3fcae09baa1c571c701f1157e/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ff32cac8324ee3fcae09baa1c571c701f1157e/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=33ff32cac8324ee3fcae09baa1c571c701f1157e", "patch": "@@ -13,7 +13,21 @@ macro_rules! eprintln {\n     }\n }\n \n-const MIRI_PATH: &'static str = concat!(\"target/\", env!(\"PROFILE\"), \"/miri\");\n+fn miri_path() -> PathBuf {\n+    if rustc_test_suite().is_some() {\n+        PathBuf::from(option_env!(\"MIRI_PATH\").unwrap())\n+    } else {\n+        PathBuf::from(concat!(\"target/\", env!(\"PROFILE\"), \"/miri\"))\n+    }\n+}\n+\n+fn rustc_test_suite() -> Option<PathBuf> {\n+    option_env!(\"RUSTC_TEST_SUITE\").map(PathBuf::from)\n+}\n+\n+fn rustc_lib_path() -> PathBuf {\n+    option_env!(\"RUSTC_LIB_PATH\").unwrap().into()\n+}\n \n fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: bool) {\n     eprintln!(\n@@ -23,9 +37,14 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: b\n     );\n     let mut config = compiletest::default_config();\n     config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n-    config.rustc_path = MIRI_PATH.into();\n+    config.rustc_path = miri_path();\n     let mut flags = Vec::new();\n-    if fullmir {\n+    if rustc_test_suite().is_some() {\n+        config.run_lib_path = rustc_lib_path();\n+        config.compile_lib_path = rustc_lib_path();\n+    }\n+    // if we are building as part of the rustc test suite, we already have fullmir for everything\n+    if fullmir && rustc_test_suite().is_none() {\n         if host != target {\n             // skip fullmir on nonhost\n             return;\n@@ -50,7 +69,12 @@ fn run_pass(path: &str) {\n     let mut config = compiletest::default_config();\n     config.mode = \"run-pass\".parse().expect(\"Invalid mode\");\n     config.src_base = PathBuf::from(path);\n-    config.target_rustcflags = Some(\"-Dwarnings\".to_string());\n+    if let Some(rustc_path) = rustc_test_suite() {\n+        config.rustc_path = rustc_path;\n+        config.run_lib_path = rustc_lib_path();\n+        config.compile_lib_path = rustc_lib_path();\n+    }\n+    config.target_rustcflags = Some(format!(\"-Dwarnings --sysroot {}\", get_sysroot().display()));\n     config.host_rustcflags = Some(\"-Dwarnings\".to_string());\n     compiletest::run_tests(&config);\n }\n@@ -68,9 +92,14 @@ fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n     config.host = host.to_owned();\n-    config.rustc_path = MIRI_PATH.into();\n+    config.rustc_path = miri_path();\n+    if rustc_test_suite().is_some() {\n+        config.run_lib_path = rustc_lib_path();\n+        config.compile_lib_path = rustc_lib_path();\n+    }\n     let mut flags = Vec::new();\n-    if fullmir {\n+    // if we are building as part of the rustc test suite, we already have fullmir for everything\n+    if fullmir && rustc_test_suite().is_none() {\n         if host != target {\n             // skip fullmir on nonhost\n             return;"}]}