{"sha": "3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYmUxMmViM2VkMDllNDljZTEzNmQwOTg0ODVlMWI0NTM4ZmJmMDM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-23T14:32:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-23T17:16:42Z"}, "message": "Merge branch '49001_epoch' of https://github.com/klnusbaum/rust into rollup", "tree": {"sha": "7150b2646cc7a19f85ce9e55e1f0eb76183416a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7150b2646cc7a19f85ce9e55e1f0eb76183416a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "html_url": "https://github.com/rust-lang/rust/commit/3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82bb41bdab6d6d5611573883bea5779ed43ca184", "url": "https://api.github.com/repos/rust-lang/rust/commits/82bb41bdab6d6d5611573883bea5779ed43ca184", "html_url": "https://github.com/rust-lang/rust/commit/82bb41bdab6d6d5611573883bea5779ed43ca184"}, {"sha": "11f14060a4da7776c5f56e7dc53cc9545e4ab25f", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f14060a4da7776c5f56e7dc53cc9545e4ab25f", "html_url": "https://github.com/rust-lang/rust/commit/11f14060a4da7776c5f56e7dc53cc9545e4ab25f"}], "stats": {"total": 190, "additions": 95, "deletions": 95}, "files": [{"sha": "3c833251f72a78c410b5ab735ced0fb569791bc9", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -41,7 +41,7 @@ use util::nodemap::FxHashMap;\n use std::default::Default as StdDefault;\n use std::cell::{Ref, RefCell};\n use syntax::ast;\n-use syntax::epoch;\n+use syntax::edition;\n use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n use hir;\n@@ -103,9 +103,9 @@ pub struct FutureIncompatibleInfo {\n     pub id: LintId,\n     /// e.g., a URL for an issue/PR/RFC or error code\n     pub reference: &'static str,\n-    /// If this is an epoch fixing lint, the epoch in which\n+    /// If this is an edition fixing lint, the edition in which\n     /// this lint becomes obsolete\n-    pub epoch: Option<epoch::Epoch>,\n+    pub edition: Option<edition::Edition>,\n }\n \n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n@@ -201,11 +201,11 @@ impl LintStore {\n                                         sess: Option<&Session>,\n                                         lints: Vec<FutureIncompatibleInfo>) {\n \n-        for epoch in epoch::ALL_EPOCHS {\n-            let lints = lints.iter().filter(|f| f.epoch == Some(*epoch)).map(|f| f.id)\n+        for edition in edition::ALL_EDITIONS {\n+            let lints = lints.iter().filter(|f| f.edition == Some(*edition)).map(|f| f.id)\n                              .collect::<Vec<_>>();\n             if !lints.is_empty() {\n-                self.register_group(sess, false, epoch.lint_name(), lints)\n+                self.register_group(sess, false, edition.lint_name(), lints)\n             }\n         }\n "}, {"sha": "cd038d067a1fd950f7565d1ceefb6e5d08fbd39e", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -42,7 +42,7 @@ use session::{Session, DiagnosticMessageId};\n use std::hash;\n use syntax::ast;\n use syntax::codemap::MultiSpan;\n-use syntax::epoch::Epoch;\n+use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n use syntax::visit as ast_visit;\n use syntax_pos::Span;\n@@ -77,8 +77,8 @@ pub struct Lint {\n     /// e.g. \"imports that are never used\"\n     pub desc: &'static str,\n \n-    /// Deny lint after this epoch\n-    pub epoch_deny: Option<Epoch>,\n+    /// Deny lint after this edition\n+    pub edition_deny: Option<Edition>,\n }\n \n impl Lint {\n@@ -88,8 +88,8 @@ impl Lint {\n     }\n \n     pub fn default_level(&self, session: &Session) -> Level {\n-        if let Some(epoch_deny) = self.epoch_deny {\n-            if session.epoch() >= epoch_deny {\n+        if let Some(edition_deny) = self.edition_deny {\n+            if session.edition() >= edition_deny {\n                 return Level::Deny\n             }\n         }\n@@ -100,20 +100,20 @@ impl Lint {\n /// Declare a static item of type `&'static Lint`.\n #[macro_export]\n macro_rules! declare_lint {\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr, $epoch: expr) => (\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr, $edition: expr) => (\n         $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n             name: stringify!($NAME),\n             default_level: $crate::lint::$Level,\n             desc: $desc,\n-            epoch_deny: Some($epoch)\n+            edition_deny: Some($edition)\n         };\n     );\n     ($vis: vis $NAME: ident, $Level: ident, $desc: expr) => (\n         $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n             name: stringify!($NAME),\n             default_level: $crate::lint::$Level,\n             desc: $desc,\n-            epoch_deny: None,\n+            edition_deny: None,\n         };\n     );\n }\n@@ -499,8 +499,8 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n     // Check for future incompatibility lints and issue a stronger warning.\n     let lints = sess.lint_store.borrow();\n     if let Some(future_incompatible) = lints.future_incompatible(LintId::of(lint)) {\n-        let future = if let Some(epoch) = future_incompatible.epoch {\n-            format!(\"the {} epoch\", epoch)\n+        let future = if let Some(edition) = future_incompatible.edition {\n+            format!(\"the {} edition\", edition)\n         } else {\n             \"a future release\".to_owned()\n         };"}, {"sha": "4ba634f8b25cd26953e9eda384c8a120450dd55d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -28,7 +28,7 @@ use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n use syntax::codemap::{FileName, FilePathMapping};\n-use syntax::epoch::Epoch;\n+use syntax::edition::Edition;\n use syntax::parse::token;\n use syntax::parse;\n use syntax::symbol::Symbol;\n@@ -771,7 +771,7 @@ macro_rules! options {\n             Some(\"`string` or `string=string`\");\n         pub const parse_lto: Option<&'static str> =\n             Some(\"one of `thin`, `fat`, or omitted\");\n-        pub const parse_epoch: Option<&'static str> =\n+        pub const parse_edition: Option<&'static str> =\n             Some(\"one of: `2015`, `2018`\");\n     }\n \n@@ -780,7 +780,7 @@ macro_rules! options {\n         use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto};\n         use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n-        use syntax::epoch::Epoch;\n+        use syntax::edition::Edition;\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n@@ -983,11 +983,11 @@ macro_rules! options {\n             true\n         }\n \n-        fn parse_epoch(slot: &mut Epoch, v: Option<&str>) -> bool {\n+        fn parse_edition(slot: &mut Edition, v: Option<&str>) -> bool {\n             match v {\n                 Some(s) => {\n-                    let epoch = s.parse();\n-                    if let Ok(parsed) = epoch {\n+                    let edition = s.parse();\n+                    if let Ok(parsed) = edition {\n                         *slot = parsed;\n                         true\n                     } else {\n@@ -1280,10 +1280,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `everybody_loops` (all function bodies replaced with `loop {}`),\n         `hir` (the HIR), `hir,identified`, or\n         `hir,typed` (HIR with types for each node).\"),\n-    epoch: Epoch = (Epoch::Epoch2015, parse_epoch, [TRACKED],\n-        \"The epoch to build Rust with. Newer epochs may include features\n-         that require breaking changes. The default epoch is 2015 (the first\n-         epoch). Crates compiled with different epochs can be linked together.\"),\n+    edition: Edition = (Edition::Edition2015, parse_edition, [TRACKED],\n+        \"The edition to build Rust with. Newer editions may include features\n+         that require breaking changes. The default edition is 2015 (the first\n+         edition). Crates compiled with different editions can be linked together.\"),\n     run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n           \"run `dsymutil` and delete intermediate object files\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n@@ -2258,7 +2258,7 @@ mod dep_tracking {\n     use std::hash::Hash;\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n-    use super::{CrateType, DebugInfoLevel, Epoch, ErrorOutputType, Lto, OptLevel, OutputTypes,\n+    use super::{CrateType, DebugInfoLevel, Edition, ErrorOutputType, Lto, OptLevel, OutputTypes,\n                 Passes, Sanitizer};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_back::{PanicStrategy, RelroLevel};\n@@ -2320,7 +2320,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n-    impl_dep_tracking_hash_via_hash!(Epoch);\n+    impl_dep_tracking_hash_via_hash!(Edition);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);"}, {"sha": "556255e06ed008a9b4564ab09701d5d153fc863f", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -31,7 +31,7 @@ use rustc_data_structures::sync::{Lrc, Lock};\n use syntax::ast::NodeId;\n use errors::{self, DiagnosticBuilder, DiagnosticId};\n use errors::emitter::{Emitter, EmitterWriter};\n-use syntax::epoch::Epoch;\n+use syntax::edition::Edition;\n use syntax::json::JsonEmitter;\n use syntax::feature_gate;\n use syntax::symbol::Symbol;\n@@ -976,13 +976,13 @@ impl Session {\n         self.opts.debugging_opts.teach && !self.parse_sess.span_diagnostic.code_emitted(code)\n     }\n \n-    /// Are we allowed to use features from the Rust 2018 epoch?\n+    /// Are we allowed to use features from the Rust 2018 edition?\n     pub fn rust_2018(&self) -> bool {\n-        self.opts.debugging_opts.epoch >= Epoch::Epoch2018\n+        self.opts.debugging_opts.edition >= Edition::Edition2018\n     }\n \n-    pub fn epoch(&self) -> Epoch {\n-        self.opts.debugging_opts.epoch\n+    pub fn edition(&self) -> Edition {\n+        self.opts.debugging_opts.edition\n     }\n }\n "}, {"sha": "a3115544f30b954e1f4b6477b5928907401865e9", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -648,7 +648,7 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n {\n     let (mut krate, features) = syntax::config::features(krate, &sess.parse_sess,\n                                                          sess.opts.test,\n-                                                         sess.opts.debugging_opts.epoch);\n+                                                         sess.opts.debugging_opts.edition);\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);\n "}, {"sha": "901d76edc80654ca9661d40372deec1c0f4e48b8", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -48,7 +48,7 @@ use rustc::session;\n use rustc::util;\n \n use session::Session;\n-use syntax::epoch::Epoch;\n+use syntax::edition::Edition;\n use lint::LintId;\n use lint::FutureIncompatibleInfo;\n \n@@ -197,82 +197,82 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         FutureIncompatibleInfo {\n             id: LintId::of(PRIVATE_IN_PUBLIC),\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PUB_USE_OF_PRIVATE_EXTERN_CRATE),\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PATTERNS_IN_FNS_WITHOUT_BODY),\n             reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n             reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n             reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_DIRECTORY_OWNERSHIP),\n             reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_IMPORTS),\n             reference: \"issue #38260 <https://github.com/rust-lang/rust/issues/38260>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_CONSTRUCTOR_VISIBILITY),\n             reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n             reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN),\n             reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(ANONYMOUS_PARAMETERS),\n             reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n             reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LATE_BOUND_LIFETIME_ARGUMENTS),\n             reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_PACKED_BORROWS),\n             reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(INCOHERENT_FUNDAMENTAL_IMPLS),\n             reference: \"issue #46205 <https://github.com/rust-lang/rust/issues/46205>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n             reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n-            epoch: Some(Epoch::Epoch2018),\n+            edition: Some(Edition::Edition2018),\n         }\n         ]);\n "}, {"sha": "c7921d2bd45889645d5aa559158430d3fc7b868b", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -326,7 +326,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if reached_raw_pointer\n                     && !self.tcx.features().arbitrary_self_types {\n                         // this case used to be allowed by the compiler,\n-                        // so we do a future-compat lint here for the 2015 epoch\n+                        // so we do a future-compat lint here for the 2015 edition\n                         // (see https://github.com/rust-lang/rust/issues/46906)\n                         if self.tcx.sess.rust_2018() {\n                           span_err!(self.tcx.sess, span, E0908,"}, {"sha": "56b1306e5b33f2336980a805fa02db46cf6c6f73", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -13,7 +13,7 @@ use feature_gate::{feature_err, EXPLAIN_STMT_ATTR_SYNTAX, Features, get_features\n use {fold, attr};\n use ast;\n use codemap::Spanned;\n-use epoch::Epoch;\n+use edition::Edition;\n use parse::{token, ParseSess};\n \n use ptr::P;\n@@ -27,7 +27,7 @@ pub struct StripUnconfigured<'a> {\n }\n \n // `cfg_attr`-process the crate's attributes and compute the crate's features.\n-pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool, epoch: Epoch)\n+pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool, edition: Edition)\n                 -> (ast::Crate, Features) {\n     let features;\n     {\n@@ -47,7 +47,7 @@ pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool, epoc\n             return (krate, Features::new());\n         }\n \n-        features = get_features(&sess.span_diagnostic, &krate.attrs, epoch);\n+        features = get_features(&sess.span_diagnostic, &krate.attrs, edition);\n \n         // Avoid reconfiguring malformed `cfg_attr`s\n         if err_count == sess.span_diagnostic.err_count() {"}, {"sha": "61246d4493ca387810f5004941ba1f5324061dbd", "filename": "src/libsyntax/edition.rs", "status": "renamed", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibsyntax%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibsyntax%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fedition.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -11,58 +11,58 @@\n use std::fmt;\n use std::str::FromStr;\n \n-/// The epoch of the compiler (RFC 2052)\n+/// The edition of the compiler (RFC 2052)\n #[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug)]\n #[non_exhaustive]\n-pub enum Epoch {\n-    // epochs must be kept in order, newest to oldest\n+pub enum Edition {\n+    // editions must be kept in order, newest to oldest\n \n-    /// The 2015 epoch\n-    Epoch2015,\n-    /// The 2018 epoch\n-    Epoch2018,\n+    /// The 2015 edition\n+    Edition2015,\n+    /// The 2018 edition\n+    Edition2018,\n \n-    // when adding new epochs, be sure to update:\n+    // when adding new editions, be sure to update:\n     //\n-    // - the list in the `parse_epoch` static in librustc::session::config\n+    // - the list in the `parse_edition` static in librustc::session::config\n     // - add a `rust_####()` function to the session\n     // - update the enum in Cargo's sources as well\n     //\n-    // When -Zepoch becomes --epoch, there will\n-    // also be a check for the epoch being nightly-only\n+    // When -Zedition becomes --edition, there will\n+    // also be a check for the edition being nightly-only\n     // somewhere. That will need to be updated\n-    // whenever we're stabilizing/introducing a new epoch\n+    // whenever we're stabilizing/introducing a new edition\n     // as well as changing the default Cargo template.\n }\n \n // must be in order from oldest to newest\n-pub const ALL_EPOCHS: &[Epoch] = &[Epoch::Epoch2015, Epoch::Epoch2018];\n+pub const ALL_EDITIONS: &[Edition] = &[Edition::Edition2015, Edition::Edition2018];\n \n-impl fmt::Display for Epoch {\n+impl fmt::Display for Edition {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let s = match *self {\n-            Epoch::Epoch2015 => \"2015\",\n-            Epoch::Epoch2018 => \"2018\",\n+            Edition::Edition2015 => \"2015\",\n+            Edition::Edition2018 => \"2018\",\n         };\n         write!(f, \"{}\", s)\n     }\n }\n \n-impl Epoch {\n+impl Edition {\n     pub fn lint_name(&self) -> &'static str {\n         match *self {\n-            Epoch::Epoch2015 => \"epoch_2015\",\n-            Epoch::Epoch2018 => \"epoch_2018\",\n+            Edition::Edition2015 => \"edition_2015\",\n+            Edition::Edition2018 => \"edition_2018\",\n         }\n     }\n }\n \n-impl FromStr for Epoch {\n+impl FromStr for Edition {\n     type Err = ();\n     fn from_str(s: &str) -> Result<Self, ()> {\n         match s {\n-            \"2015\" => Ok(Epoch::Epoch2015),\n-            \"2018\" => Ok(Epoch::Epoch2018),\n+            \"2015\" => Ok(Edition::Edition2015),\n+            \"2018\" => Ok(Edition::Edition2018),\n             _ => Err(())\n         }\n     }", "previous_filename": "src/libsyntax/epoch.rs"}, {"sha": "69612054ae3daf84c1d1f79982be2fdf888485de", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -28,7 +28,7 @@ use self::AttributeGate::*;\n use abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n-use epoch::Epoch;\n+use edition::Edition;\n use codemap::Spanned;\n use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler, FatalError};\n@@ -55,13 +55,13 @@ macro_rules! set {\n }\n \n macro_rules! declare_features {\n-    ($((active, $feature: ident, $ver: expr, $issue: expr, $epoch: expr),)+) => {\n+    ($((active, $feature: ident, $ver: expr, $issue: expr, $edition: expr),)+) => {\n         /// Represents active features that are currently being implemented or\n         /// currently being considered for addition/removal.\n         const ACTIVE_FEATURES:\n                 &'static [(&'static str, &'static str, Option<u32>,\n-                           Option<Epoch>, fn(&mut Features, Span))] =\n-            &[$((stringify!($feature), $ver, $issue, $epoch, set!($feature))),+];\n+                           Option<Edition>, fn(&mut Features, Span))] =\n+            &[$((stringify!($feature), $ver, $issue, $edition, set!($feature))),+];\n \n         /// A set of features to be used by later passes.\n         #[derive(Clone)]\n@@ -402,7 +402,7 @@ declare_features! (\n     (active, match_default_bindings, \"1.22.0\", Some(42640), None),\n \n     // Trait object syntax with `dyn` prefix\n-    (active, dyn_trait, \"1.22.0\", Some(44662), Some(Epoch::Epoch2018)),\n+    (active, dyn_trait, \"1.22.0\", Some(44662), Some(Edition::Edition2018)),\n \n     // `crate` as visibility modifier, synonymous to `pub(crate)`\n     (active, crate_visibility_modifier, \"1.23.0\", Some(45388), None),\n@@ -1818,16 +1818,16 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n }\n \n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n-                    epoch: Epoch) -> Features {\n+                    edition: Edition) -> Features {\n     let mut features = Features::new();\n \n     let mut feature_checker = FeatureChecker::default();\n \n-    for &(.., f_epoch, set) in ACTIVE_FEATURES.iter() {\n-        if let Some(f_epoch) = f_epoch {\n-            if epoch >= f_epoch {\n+    for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n+        if let Some(f_edition) = f_edition {\n+            if edition >= f_edition {\n                 // FIXME(Manishearth) there is currently no way to set\n-                // lang features by epoch\n+                // lang features by edition\n                 set(&mut features, DUMMY_SP);\n             }\n         }"}, {"sha": "74f1ee373ec635afca4369065565c2b115eb58e8", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -145,7 +145,7 @@ pub mod codemap;\n #[macro_use]\n pub mod config;\n pub mod entry;\n-pub mod epoch;\n+pub mod edition;\n pub mod feature_gate;\n pub mod fold;\n pub mod parse;"}, {"sha": "fdc9b4f704cd16f4c988cb87f198291b3e46d27d", "filename": "src/test/compile-fail/edition-raw-pointer-method-2015.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2015.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: -Zepoch=2015 -Zunstable-options\n+// compile-flags: -Zedition=2015 -Zunstable-options\n \n-// tests that epochs work with the tyvar warning-turned-error\n+// tests that editions work with the tyvar warning-turned-error\n \n #[deny(warnings)]\n fn main() {", "previous_filename": "src/test/compile-fail/epoch-raw-pointer-method-2015.rs"}, {"sha": "58b34591029ba98ee18542a695e7e797e1012264", "filename": "src/test/compile-fail/edition-raw-pointer-method-2018.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: -Zepoch=2018 -Zunstable-options\n+// compile-flags: -Zedition=2018 -Zunstable-options\n \n-// tests that epochs work with the tyvar warning-turned-error\n+// tests that editions work with the tyvar warning-turned-error\n \n #[deny(warnings)]\n fn main() {", "previous_filename": "src/test/compile-fail/epoch-raw-pointer-method-2018.rs"}, {"sha": "399823ec92d0c419eb91f48bac48a0d9dd347a02", "filename": "src/test/run-pass/dyn-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Ftest%2Frun-pass%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Ftest%2Frun-pass%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdyn-trait.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty `dyn ::foo` parses differently in the current epoch\n+// ignore-pretty `dyn ::foo` parses differently in the current edition\n \n #![feature(dyn_trait)]\n "}, {"sha": "f3d8f216e1132e7edc3cbe9ffef27a15daef610d", "filename": "src/test/run-pass/epoch-gate-feature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -11,7 +11,7 @@\n // Checks if the correct registers are being used to pass arguments\n // when the sysv64 ABI is specified.\n \n-// compile-flags: -Zepoch=2018\n+// compile-flags: -Zedition=2018\n \n pub trait Foo {}\n "}, {"sha": "fe6dc0b07482f60ac1a21da4eb6dd25626110693", "filename": "src/test/ui/inference-variable-behind-raw-pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe12eb3ed09e49ce136d098485e1b4538fbf03/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr?ref=3ebe12eb3ed09e49ce136d098485e1b4538fbf03", "patch": "@@ -5,6 +5,6 @@ LL |     if data.is_null() {}\n    |             ^^^^^^^\n    |\n    = note: #[warn(tyvar_behind_raw_pointer)] on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 epoch!\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n "}]}