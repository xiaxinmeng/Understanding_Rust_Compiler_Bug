{"sha": "974f854bb528c9a94af62990965ac62a1aa0dbed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NGY4NTRiYjUyOGM5YTk0YWY2Mjk5MDk2NWFjNjJhMWFhMGRiZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-30T07:15:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-30T07:15:47Z"}, "message": "auto merge of #8839 : sanxiyn/rust/env, r=thestinger", "tree": {"sha": "d4fc704f956972791455f7631ed061242790f1aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4fc704f956972791455f7631ed061242790f1aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/974f854bb528c9a94af62990965ac62a1aa0dbed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/974f854bb528c9a94af62990965ac62a1aa0dbed", "html_url": "https://github.com/rust-lang/rust/commit/974f854bb528c9a94af62990965ac62a1aa0dbed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/974f854bb528c9a94af62990965ac62a1aa0dbed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed422b88727807aee40495a6193a69e4c3842be1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed422b88727807aee40495a6193a69e4c3842be1", "html_url": "https://github.com/rust-lang/rust/commit/ed422b88727807aee40495a6193a69e4c3842be1"}, {"sha": "97b542bd84623e8bc55aa894e53722c7bf7de6c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b542bd84623e8bc55aa894e53722c7bf7de6c6", "html_url": "https://github.com/rust-lang/rust/commit/97b542bd84623e8bc55aa894e53722c7bf7de6c6"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "f1d89b883164e700b0554ef9c0cb4fcb609a0f3d", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/974f854bb528c9a94af62990965ac62a1aa0dbed/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f854bb528c9a94af62990965ac62a1aa0dbed/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=974f854bb528c9a94af62990965ac62a1aa0dbed", "patch": "@@ -83,9 +83,6 @@ pub struct config {\n     // Run tests using the JIT\n     jit: bool,\n \n-    // Run tests using the new runtime\n-    newrt: bool,\n-\n     // Target system to be tested\n     target: ~str,\n "}, {"sha": "d4d80eba5c96362a5c807a87f5311a8c748decdd", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/974f854bb528c9a94af62990965ac62a1aa0dbed/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f854bb528c9a94af62990965ac62a1aa0dbed/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=974f854bb528c9a94af62990965ac62a1aa0dbed", "patch": "@@ -71,7 +71,6 @@ pub fn parse_config(args: ~[~str]) -> config {\n           optopt(\"\", \"ratchet-noise-percent\",\n                  \"percent change in metrics to consider noise\", \"N\"),\n           optflag(\"\", \"jit\", \"run tests under the JIT\"),\n-          optflag(\"\", \"newrt\", \"run tests on the new runtime / scheduler\"),\n           optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n           optopt(\"\", \"adb-path\", \"path to the android debugger\", \"PATH\"),\n           optopt(\"\", \"adb-test-dir\", \"path to tests for the android debugger\", \"PATH\"),\n@@ -137,7 +136,6 @@ pub fn parse_config(args: ~[~str]) -> config {\n         runtool: getopts::opt_maybe_str(matches, \"runtool\"),\n         rustcflags: getopts::opt_maybe_str(matches, \"rustcflags\"),\n         jit: getopts::opt_present(matches, \"jit\"),\n-        newrt: getopts::opt_present(matches, \"newrt\"),\n         target: opt_str2(getopts::opt_maybe_str(matches, \"target\")).to_str(),\n         adb_path: opt_str2(getopts::opt_maybe_str(matches, \"adb-path\")).to_str(),\n         adb_test_dir:\n@@ -171,7 +169,6 @@ pub fn log_config(config: &config) {\n     logv(c, fmt!(\"runtool: %s\", opt_str(&config.runtool)));\n     logv(c, fmt!(\"rustcflags: %s\", opt_str(&config.rustcflags)));\n     logv(c, fmt!(\"jit: %b\", config.jit));\n-    logv(c, fmt!(\"newrt: %b\", config.newrt));\n     logv(c, fmt!(\"target: %s\", config.target));\n     logv(c, fmt!(\"adb_path: %s\", config.adb_path));\n     logv(c, fmt!(\"adb_test_dir: %s\", config.adb_test_dir));"}, {"sha": "ea94ce662ac1e726779d5ded99db5e2897e9b7cd", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/974f854bb528c9a94af62990965ac62a1aa0dbed/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f854bb528c9a94af62990965ac62a1aa0dbed/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=974f854bb528c9a94af62990965ac62a1aa0dbed", "patch": "@@ -547,15 +547,13 @@ fn compile_test_(config: &config, props: &TestProps,\n fn exec_compiled_test(config: &config, props: &TestProps,\n                       testfile: &Path) -> ProcRes {\n \n-    // If testing the new runtime then set the RUST_NEWRT env var\n     let env = props.exec_env.clone();\n-    let env = if config.newrt { env + &[(~\"RUST_NEWRT\", ~\"1\")] } else { env };\n \n     match config.target {\n \n         ~\"arm-linux-androideabi\" => {\n             if (config.adb_device_status) {\n-                _arm_exec_compiled_test(config, props, testfile)\n+                _arm_exec_compiled_test(config, props, testfile, env)\n             } else {\n                 _dummy_exec_compiled_test(config, props, testfile)\n             }\n@@ -781,7 +779,7 @@ stderr:\\n\\\n }\n \n fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n-                      testfile: &Path) -> ProcRes {\n+                      testfile: &Path, env: ~[(~str, ~str)]) -> ProcRes {\n \n     let args = make_run_args(config, props, testfile);\n     let cmdline = make_cmdline(\"\", args.prog, args.args);\n@@ -807,6 +805,9 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n \n     // run test via adb_run_wrapper\n     runargs.push(~\"shell\");\n+    for (key, val) in env.move_iter() {\n+        runargs.push(fmt!(\"%s=%s\", key, val));\n+    }\n     runargs.push(fmt!(\"%s/adb_run_wrapper.sh\", config.adb_test_dir));\n     runargs.push(fmt!(\"%s\", config.adb_test_dir));\n     runargs.push(fmt!(\"%s\", prog_short));"}]}