{"sha": "761a91ade850d4e21964ebe44fc9ba2e423c9571", "node_id": "C_kwDOAAsO6NoAKDc2MWE5MWFkZTg1MGQ0ZTIxOTY0ZWJlNDRmYzliYTJlNDIzYzk1NzE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-04T10:22:24Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-04T11:31:17Z"}, "message": "Build CI dist artifacts without debug assertions\n\nThis significantly improves performance. For example for the\nsimple-raytracer benchmark it goes from a 13% improvement over LLVM to\n39% improvement over LLVM.", "tree": {"sha": "91b954415241abd1be41e009296eb152abc2b07d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91b954415241abd1be41e009296eb152abc2b07d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/761a91ade850d4e21964ebe44fc9ba2e423c9571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/761a91ade850d4e21964ebe44fc9ba2e423c9571", "html_url": "https://github.com/rust-lang/rust/commit/761a91ade850d4e21964ebe44fc9ba2e423c9571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/761a91ade850d4e21964ebe44fc9ba2e423c9571/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb92a1ae85317ec5cbde43655e2975c56443c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb92a1ae85317ec5cbde43655e2975c56443c4c", "html_url": "https://github.com/rust-lang/rust/commit/efb92a1ae85317ec5cbde43655e2975c56443c4c"}], "stats": {"total": 125, "additions": 100, "deletions": 25}, "files": [{"sha": "9d67886ba8698b7920e3cd58aa884945c0be827f", "filename": ".github/workflows/main.yml", "status": "modified", "additions": 86, "deletions": 19, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/761a91ade850d4e21964ebe44fc9ba2e423c9571/.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/761a91ade850d4e21964ebe44fc9ba2e423c9571/.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmain.yml?ref=761a91ade850d4e21964ebe44fc9ba2e423c9571", "patch": "@@ -21,6 +21,7 @@ jobs:\n         cargo fmt --check\n         rustfmt --check build_system/mod.rs\n \n+\n   build:\n     runs-on: ${{ matrix.os }}\n     timeout-minutes: 60\n@@ -112,23 +113,6 @@ jobs:\n         TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n       run: ./y.rs test\n \n-    - name: Package prebuilt cg_clif\n-      run: tar cvfJ cg_clif.tar.xz dist\n-\n-    - name: Upload prebuilt cg_clif\n-      if: matrix.os == 'windows-latest' || matrix.env.TARGET_TRIPLE != 'x86_64-pc-windows-gnu'\n-      uses: actions/upload-artifact@v3\n-      with:\n-        name: cg_clif-${{ matrix.env.TARGET_TRIPLE }}\n-        path: cg_clif.tar.xz\n-\n-    - name: Upload prebuilt cg_clif (cross compile)\n-      if: matrix.os != 'windows-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n-      uses: actions/upload-artifact@v3\n-      with:\n-        name: cg_clif-${{ runner.os }}-cross-x86_64-mingw\n-        path: cg_clif.tar.xz\n-\n \n   abi_cafe:\n     runs-on: ${{ matrix.os }}\n@@ -186,6 +170,7 @@ jobs:\n         TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n       run: ./y.rs abi-cafe\n \n+\n   bench:\n     runs-on: ubuntu-latest\n     timeout-minutes: 60\n@@ -223,7 +208,89 @@ jobs:\n       run: ./y.rs prepare\n \n     - name: Build\n-      run: ./y.rs build --sysroot none\n+      run: CI_OPT=1 ./y.rs build --sysroot none\n \n     - name: Benchmark\n-      run: ./y.rs bench\n+      run: CI_OPT=1 ./y.rs bench\n+\n+\n+  dist:\n+    runs-on: ${{ matrix.os }}\n+    timeout-minutes: 60\n+\n+    defaults:\n+      run:\n+        shell: bash\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        include:\n+          - os: ubuntu-20.04 # FIXME switch to ubuntu-22.04 once #1303 is fixed\n+            env:\n+              TARGET_TRIPLE: x86_64-unknown-linux-gnu\n+          - os: macos-latest\n+            env:\n+              TARGET_TRIPLE: x86_64-apple-darwin\n+          # cross-compile from Linux to Windows using mingw\n+          - os: ubuntu-latest\n+            env:\n+              TARGET_TRIPLE: x86_64-pc-windows-gnu\n+          - os: windows-latest\n+            env:\n+              TARGET_TRIPLE: x86_64-pc-windows-msvc\n+          - os: windows-latest\n+            env:\n+              TARGET_TRIPLE: x86_64-pc-windows-gnu\n+\n+    steps:\n+    - uses: actions/checkout@v3\n+\n+    - name: Cache cargo target dir\n+      uses: actions/cache@v3\n+      with:\n+        path: build/cg_clif\n+        key: ${{ runner.os }}-${{ matrix.env.TARGET_TRIPLE }}-dist-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n+\n+    - name: Set MinGW as the default toolchain\n+      if: matrix.os == 'windows-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n+      run: rustup set default-host x86_64-pc-windows-gnu\n+\n+    - name: Install MinGW toolchain and wine\n+      if: matrix.os == 'ubuntu-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n+      run: |\n+        sudo apt-get update\n+        sudo apt-get install -y gcc-mingw-w64-x86-64 wine-stable\n+\n+    - name: Use sparse cargo registry\n+      run: |\n+        cat >> ~/.cargo/config.toml <<EOF\n+        [unstable]\n+        sparse-registry = true\n+        EOF\n+\n+    - name: Prepare dependencies\n+      run: ./y.rs prepare\n+\n+    - name: Build backend\n+      run: CI_OPT=1 ./y.rs build --sysroot none\n+\n+    - name: Build sysroot\n+      run: CI_OPT=1 ./y.rs build\n+\n+    - name: Package prebuilt cg_clif\n+      run: tar cvfJ cg_clif.tar.xz dist\n+\n+    - name: Upload prebuilt cg_clif\n+      if: matrix.os == 'windows-latest' || matrix.env.TARGET_TRIPLE != 'x86_64-pc-windows-gnu'\n+      uses: actions/upload-artifact@v3\n+      with:\n+        name: cg_clif-${{ matrix.env.TARGET_TRIPLE }}\n+        path: cg_clif.tar.xz\n+\n+    - name: Upload prebuilt cg_clif (cross compile)\n+      if: matrix.os != 'windows-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n+      uses: actions/upload-artifact@v3\n+      with:\n+        name: cg_clif-${{ runner.os }}-cross-x86_64-mingw\n+        path: cg_clif.tar.xz"}, {"sha": "4b740fa2db65f32947b1f86663193b22074ac585", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/761a91ade850d4e21964ebe44fc9ba2e423c9571/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761a91ade850d4e21964ebe44fc9ba2e423c9571/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=761a91ade850d4e21964ebe44fc9ba2e423c9571", "patch": "@@ -3,7 +3,7 @@ use std::path::PathBuf;\n \n use super::path::{Dirs, RelPath};\n use super::rustc_info::get_file_name;\n-use super::utils::{is_ci, CargoProject, Compiler};\n+use super::utils::{is_ci, is_ci_opt, CargoProject, Compiler};\n \n pub(crate) static CG_CLIF: CargoProject = CargoProject::new(&RelPath::SOURCE, \"cg_clif\");\n \n@@ -26,7 +26,9 @@ pub(crate) fn build_backend(\n         // Disabling incr comp reduces cache size and incr comp doesn't save as much on CI anyway\n         cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"false\");\n \n-        cmd.env(\"CARGO_PROFILE_RELEASE_DEBUG_ASSERTIONS\", \"true\");\n+        if !is_ci_opt() {\n+            cmd.env(\"CARGO_PROFILE_RELEASE_DEBUG_ASSERTIONS\", \"true\");\n+        }\n     }\n \n     if use_unstable_features {"}, {"sha": "8a53acdf7e3968983c7c31507bb3f4f8c3817c88", "filename": "build_system/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/761a91ade850d4e21964ebe44fc9ba2e423c9571/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761a91ade850d4e21964ebe44fc9ba2e423c9571/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=761a91ade850d4e21964ebe44fc9ba2e423c9571", "patch": "@@ -2,7 +2,7 @@ use std::env;\n use std::path::PathBuf;\n use std::process;\n \n-use self::utils::{is_ci, Compiler};\n+use self::utils::{is_ci, is_ci_opt, Compiler};\n \n mod abi_cafe;\n mod bench;\n@@ -53,8 +53,10 @@ pub fn main() {\n         // Disabling incr comp reduces cache size and incr comp doesn't save as much on CI anyway\n         env::set_var(\"CARGO_BUILD_INCREMENTAL\", \"false\");\n \n-        // Enable the Cranelift verifier\n-        env::set_var(\"CG_CLIF_ENABLE_VERIFIER\", \"1\");\n+        if !is_ci_opt() {\n+            // Enable the Cranelift verifier\n+            env::set_var(\"CG_CLIF_ENABLE_VERIFIER\", \"1\");\n+        }\n     }\n \n     let mut args = env::args().skip(1);"}, {"sha": "abc5bab49422468454948ea77f79891c6c5f873c", "filename": "build_system/utils.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/761a91ade850d4e21964ebe44fc9ba2e423c9571/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761a91ade850d4e21964ebe44fc9ba2e423c9571/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=761a91ade850d4e21964ebe44fc9ba2e423c9571", "patch": "@@ -279,5 +279,9 @@ pub(crate) fn copy_dir_recursively(from: &Path, to: &Path) {\n }\n \n pub(crate) fn is_ci() -> bool {\n-    env::var(\"CI\").as_deref() == Ok(\"true\")\n+    env::var(\"CI\").is_ok()\n+}\n+\n+pub(crate) fn is_ci_opt() -> bool {\n+    env::var(\"CI_OPT\").is_ok()\n }"}]}