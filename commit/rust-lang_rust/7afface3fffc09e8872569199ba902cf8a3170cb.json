{"sha": "7afface3fffc09e8872569199ba902cf8a3170cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZmZhY2UzZmZmYzA5ZTg4NzI1NjkxOTliYTkwMmNmOGEzMTcwY2I=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-06T19:57:46Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-08T02:41:14Z"}, "message": "extra: Implement .rev_iter() in treemap\n\nImplement reverse iterators for TreeMap and TreeSet, that produce the\nkeys in backward order.", "tree": {"sha": "ca66ed3c665e32d8074a8e517c191d3f8d5dc242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca66ed3c665e32d8074a8e517c191d3f8d5dc242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7afface3fffc09e8872569199ba902cf8a3170cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7afface3fffc09e8872569199ba902cf8a3170cb", "html_url": "https://github.com/rust-lang/rust/commit/7afface3fffc09e8872569199ba902cf8a3170cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7afface3fffc09e8872569199ba902cf8a3170cb/comments", "author": null, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52b01c50cbf001e383fb20bde313f6e58ee6f601", "url": "https://api.github.com/repos/rust-lang/rust/commits/52b01c50cbf001e383fb20bde313f6e58ee6f601", "html_url": "https://github.com/rust-lang/rust/commit/52b01c50cbf001e383fb20bde313f6e58ee6f601"}], "stats": {"total": 81, "additions": 60, "deletions": 21}, "files": [{"sha": "989f7a419bba63d0ead0731378b66b2482b3b80f", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 60, "deletions": 21, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7afface3fffc09e8872569199ba902cf8a3170cb/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afface3fffc09e8872569199ba902cf8a3170cb/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=7afface3fffc09e8872569199ba902cf8a3170cb", "patch": "@@ -13,7 +13,6 @@\n //! `TotalOrd`.\n \n \n-use std::num;\n use std::util::{swap, replace};\n use std::iterator::{FromIterator, Extendable};\n \n@@ -152,7 +151,7 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n \n     /// Visit all key-value pairs in reverse order\n     pub fn each_reverse<'a>(&'a self, f: &fn(&'a K, &'a V) -> bool) -> bool {\n-        each_reverse(&self.root, f)\n+        self.rev_iter().advance(|(k,v)| f(k, v))\n     }\n \n     /// Visit all keys in reverse order\n@@ -176,6 +175,12 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n         }\n     }\n \n+    /// Get a lazy reverse iterator over the key-value pairs in the map.\n+    /// Requires that it be frozen (immutable).\n+    pub fn rev_iter<'a>(&'a self) -> TreeMapRevIterator<'a, K, V> {\n+        TreeMapRevIterator{iter: self.iter()}\n+    }\n+\n     /// Get a lazy iterator that should be initialized using\n     /// `iter_traverse_left`/`iter_traverse_right`/`iter_traverse_complete`.\n     fn iter_for_traversal<'a>(&'a self) -> TreeMapIterator<'a, K, V> {\n@@ -254,20 +259,18 @@ pub struct TreeMapIterator<'self, K, V> {\n     priv remaining_max: uint\n }\n \n-impl<'self, K, V> Iterator<(&'self K, &'self V)> for TreeMapIterator<'self, K, V> {\n-    /// Advance the iterator to the next node (in order) and return a\n-    /// tuple with a reference to the key and value. If there are no\n-    /// more nodes, return `None`.\n-    fn next(&mut self) -> Option<(&'self K, &'self V)> {\n+impl<'self, K, V> TreeMapIterator<'self, K, V> {\n+    #[inline(always)]\n+    fn next_(&mut self, forward: bool) -> Option<(&'self K, &'self V)> {\n         while !self.stack.is_empty() || self.node.is_some() {\n             match *self.node {\n               Some(ref x) => {\n                 self.stack.push(x);\n-                self.node = &x.left;\n+                self.node = if forward { &x.left } else { &x.right };\n               }\n               None => {\n                 let res = self.stack.pop();\n-                self.node = &res.right;\n+                self.node = if forward { &res.right } else { &res.left };\n                 self.remaining_max -= 1;\n                 if self.remaining_min > 0 {\n                     self.remaining_min -= 1;\n@@ -278,13 +281,41 @@ impl<'self, K, V> Iterator<(&'self K, &'self V)> for TreeMapIterator<'self, K, V\n         }\n         None\n     }\n+}\n+\n+impl<'self, K, V> Iterator<(&'self K, &'self V)> for TreeMapIterator<'self, K, V> {\n+    /// Advance the iterator to the next node (in order) and return a\n+    /// tuple with a reference to the key and value. If there are no\n+    /// more nodes, return `None`.\n+    fn next(&mut self) -> Option<(&'self K, &'self V)> {\n+        self.next_(true)\n+    }\n \n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         (self.remaining_min, Some(self.remaining_max))\n     }\n }\n \n+/// Lazy backward iterator over a map\n+pub struct TreeMapRevIterator<'self, K, V> {\n+    priv iter: TreeMapIterator<'self, K, V>,\n+}\n+\n+impl<'self, K, V> Iterator<(&'self K, &'self V)> for TreeMapRevIterator<'self, K, V> {\n+    /// Advance the iterator to the next node (in order) and return a\n+    /// tuple with a reference to the key and value. If there are no\n+    /// more nodes, return `None`.\n+    fn next(&mut self) -> Option<(&'self K, &'self V)> {\n+        self.iter.next_(false)\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n /// iter_traverse_left, iter_traverse_right and iter_traverse_complete are used to\n /// initialize TreeMapIterator pointing to element inside tree structure.\n ///\n@@ -382,6 +413,14 @@ impl<'self, T> Iterator<&'self T> for TreeSetIterator<'self, T> {\n     }\n }\n \n+impl<'self, T> Iterator<&'self T> for TreeSetRevIterator<'self, T> {\n+    /// Advance the iterator to the next node (in order). If there are no more nodes, return `None`.\n+    #[inline]\n+    fn next(&mut self) -> Option<&'self T> {\n+        do self.iter.next().map |&(value, _)| { value }\n+    }\n+}\n+\n /// A implementation of the `Set` trait on top of the `TreeMap` container. The\n /// only requirement is that the type of the elements contained ascribes to the\n /// `TotalOrd` trait.\n@@ -492,6 +531,13 @@ impl<T: TotalOrd> TreeSet<T> {\n         TreeSetIterator{iter: self.map.iter()}\n     }\n \n+    /// Get a lazy iterator over the values in the set.\n+    /// Requires that it be frozen (immutable).\n+    #[inline]\n+    pub fn rev_iter<'a>(&'a self) -> TreeSetRevIterator<'a, T> {\n+        TreeSetRevIterator{iter: self.map.rev_iter()}\n+    }\n+\n     /// Get a lazy iterator pointing to the first value not less than `v` (greater or equal).\n     /// If all elements in the set are less than `v` empty iterator is returned.\n     #[inline]\n@@ -540,6 +586,11 @@ pub struct TreeSetIterator<'self, T> {\n     priv iter: TreeMapIterator<'self, T, ()>\n }\n \n+/// Lazy backward iterator over a set\n+pub struct TreeSetRevIterator<'self, T> {\n+    priv iter: TreeMapRevIterator<'self, T, ()>\n+}\n+\n // Encapsulate an iterator and hold its latest value until stepped forward\n struct Focus<A, T> {\n     priv iter: T,\n@@ -691,18 +742,6 @@ impl<K: TotalOrd, V> TreeNode<K, V> {\n     }\n }\n \n-fn each<'r, K: TotalOrd, V>(node: &'r Option<~TreeNode<K, V>>,\n-                            f: &fn(&'r K, &'r V) -> bool) -> bool {\n-    node.iter().advance(|x| each(&x.left,  |k,v| f(k,v)) && f(&x.key, &x.value) &&\n-                            each(&x.right, |k,v| f(k,v)))\n-}\n-\n-fn each_reverse<'r, K: TotalOrd, V>(node: &'r Option<~TreeNode<K, V>>,\n-                                    f: &fn(&'r K, &'r V) -> bool) -> bool {\n-    node.iter().advance(|x| each_reverse(&x.right, |k,v| f(k,v)) && f(&x.key, &x.value) &&\n-                            each_reverse(&x.left,  |k,v| f(k,v)))\n-}\n-\n fn mutate_values<'r, K: TotalOrd, V>(node: &'r mut Option<~TreeNode<K, V>>,\n                                      f: &fn(&'r K, &'r mut V) -> bool)\n                                   -> bool {"}]}