{"sha": "e5ebd3edabc17436de086a7ce147983c2238939a", "node_id": "C_kwDOAAsO6NoAKGU1ZWJkM2VkYWJjMTc0MzZkZTA4NmE3Y2UxNDc5ODNjMjIzODkzOWE", "commit": {"author": {"name": "Evan Typanski", "email": "evan.typanski@microfocus.com", "date": "2022-06-21T18:13:15Z"}, "committer": {"name": "Evan Typanski", "email": "evan.typanski@microfocus.com", "date": "2022-06-21T18:13:15Z"}, "message": "Implement manual_rem_euclid lint", "tree": {"sha": "ec393431211a4adb17ffbd41841bcb27f5b275e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec393431211a4adb17ffbd41841bcb27f5b275e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5ebd3edabc17436de086a7ce147983c2238939a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ebd3edabc17436de086a7ce147983c2238939a", "html_url": "https://github.com/rust-lang/rust/commit/e5ebd3edabc17436de086a7ce147983c2238939a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5ebd3edabc17436de086a7ce147983c2238939a/comments", "author": null, "committer": null, "parents": [{"sha": "93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e", "html_url": "https://github.com/rust-lang/rust/commit/93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e"}], "stats": {"total": 200, "additions": 195, "deletions": 5}, "files": [{"sha": "dcc96bc10b8aa67e3e6575015ca1a1cb952e718f", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebd3edabc17436de086a7ce147983c2238939a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebd3edabc17436de086a7ce147983c2238939a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e5ebd3edabc17436de086a7ce147983c2238939a", "patch": "@@ -3527,6 +3527,7 @@ Released 2018-09-13\n [`manual_non_exhaustive`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n [`manual_ok_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_or\n [`manual_range_contains`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n+[`manual_rem_euclid`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_rem_euclid\n [`manual_saturating_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic\n [`manual_split_once`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_split_once\n [`manual_str_repeat`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_str_repeat"}, {"sha": "a1565255b0b589417f93dab1ce48f4bba28f9447", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebd3edabc17436de086a7ce147983c2238939a/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebd3edabc17436de086a7ce147983c2238939a/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=e5ebd3edabc17436de086a7ce147983c2238939a", "patch": "@@ -135,6 +135,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n     LintId::of(manual_bits::MANUAL_BITS),\n     LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n+    LintId::of(manual_rem_euclid::MANUAL_REM_EUCLID),\n     LintId::of(manual_strip::MANUAL_STRIP),\n     LintId::of(map_clone::MAP_CLONE),\n     LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),"}, {"sha": "6370264a12a6486bd66412a31c0ea0634f09919f", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebd3edabc17436de086a7ce147983c2238939a/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebd3edabc17436de086a7ce147983c2238939a/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=e5ebd3edabc17436de086a7ce147983c2238939a", "patch": "@@ -24,6 +24,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(loops::MANUAL_FLATTEN),\n     LintId::of(loops::SINGLE_ELEMENT_LOOP),\n     LintId::of(loops::WHILE_LET_LOOP),\n+    LintId::of(manual_rem_euclid::MANUAL_REM_EUCLID),\n     LintId::of(manual_strip::MANUAL_STRIP),\n     LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n     LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),"}, {"sha": "f706ba0620fdd73c4e6270f46316e5a20194e0da", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebd3edabc17436de086a7ce147983c2238939a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebd3edabc17436de086a7ce147983c2238939a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=e5ebd3edabc17436de086a7ce147983c2238939a", "patch": "@@ -254,6 +254,7 @@ store.register_lints(&[\n     manual_bits::MANUAL_BITS,\n     manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n     manual_ok_or::MANUAL_OK_OR,\n+    manual_rem_euclid::MANUAL_REM_EUCLID,\n     manual_strip::MANUAL_STRIP,\n     map_clone::MAP_CLONE,\n     map_err_ignore::MAP_ERR_IGNORE,"}, {"sha": "70cf6be8b7cf6ef398e9fd3166bf75135e2620d4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebd3edabc17436de086a7ce147983c2238939a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebd3edabc17436de086a7ce147983c2238939a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e5ebd3edabc17436de086a7ce147983c2238939a", "patch": "@@ -282,6 +282,7 @@ mod manual_async_fn;\n mod manual_bits;\n mod manual_non_exhaustive;\n mod manual_ok_or;\n+mod manual_rem_euclid;\n mod manual_strip;\n mod map_clone;\n mod map_err_ignore;\n@@ -912,6 +913,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(as_underscore::AsUnderscore));\n     store.register_late_pass(|| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n     store.register_late_pass(|| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n+    store.register_late_pass(move || Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv)));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "7ef8f78a5f60f6191cad60df78eb8af45de62d0b", "filename": "clippy_lints/src/manual_rem_euclid.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebd3edabc17436de086a7ce147983c2238939a/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebd3edabc17436de086a7ce147983c2238939a/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=e5ebd3edabc17436de086a7ce147983c2238939a", "patch": "@@ -0,0 +1,110 @@\n+use clippy_utils::consts::{constant_full_int, FullInt};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{meets_msrv, msrvs, path_to_local};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for an expression like `((x % 4) + 4) % 4` which is a common manual reimplementation\n+    /// of `x.rem_euclid(4)`.\n+    ///\n+    /// ### Why is this bad?\n+    /// It's simpler and more readable.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x = 24;\n+    /// let rem = ((x % 4) + 4) % 4;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = 24;\n+    /// let rem = x.rem_euclid(4);\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub MANUAL_REM_EUCLID,\n+    complexity,\n+    \"manually reimplementing `rem_euclid`\"\n+}\n+\n+pub struct ManualRemEuclid {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl ManualRemEuclid {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(ManualRemEuclid => [MANUAL_REM_EUCLID]);\n+\n+impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if !meets_msrv(self.msrv, msrvs::REM_EUCLID) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::Binary(op1, ..) = expr.kind;\n+            if op1.node == BinOpKind::Rem;\n+            if let Some((const1, expr1)) = check_for_positive_int_constant(cx, expr);\n+            if let ExprKind::Binary(op2, ..) = expr1.kind;\n+            if op2.node == BinOpKind::Add;\n+            if let Some((const2, expr2)) = check_for_positive_int_constant(cx, expr1);\n+            if let ExprKind::Binary(op3, ..) = expr2.kind;\n+            if op3.node == BinOpKind::Rem;\n+            if let Some((const3, expr3)) = check_for_positive_int_constant(cx, expr2);\n+            if const1 == const2 && const2 == const3;\n+            if path_to_local(expr3).is_some();\n+            then {\n+                let mut app = Applicability::MachineApplicable;\n+                let rem_of = snippet_with_applicability(cx, expr3.span, \"_\", &mut app);\n+                span_lint_and_sugg(\n+                    cx,\n+                    MANUAL_REM_EUCLID,\n+                    expr.span,\n+                    \"manual `rem_euclid` implementation\",\n+                    \"consider using\",\n+                    format!(\"{rem_of}.rem_euclid({const1})\"),\n+                    app,\n+                );\n+            }\n+        }\n+    }\n+\n+    extract_msrv_attr!(LateContext);\n+}\n+\n+// Takes a binary expression and separates the operands into the int constant and the other\n+// operand. Ensures the int constant is positive.\n+fn check_for_positive_int_constant<'a>(cx: &'a LateContext<'_>, expr: &'a Expr<'_>) -> Option<(u128, &'a Expr<'a>)> {\n+    let (int_const, other_op) = if let ExprKind::Binary(_, left, right) = expr.kind {\n+        if let Some(int_const) = constant_full_int(cx, cx.typeck_results(), left) {\n+            (int_const, right)\n+        } else if let Some(int_const) = constant_full_int(cx, cx.typeck_results(), right) {\n+            (int_const, left)\n+        } else {\n+            return None;\n+        }\n+    } else {\n+        return None;\n+    };\n+\n+    if int_const > FullInt::S(0) {\n+        let val = match int_const {\n+            FullInt::S(s) => s.try_into().unwrap(),\n+            FullInt::U(u) => u,\n+        };\n+        Some((val, other_op))\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "8000f9e21a1e9dd358ae773d5be28435221e1030", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebd3edabc17436de086a7ce147983c2238939a/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebd3edabc17436de086a7ce147983c2238939a/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=e5ebd3edabc17436de086a7ce147983c2238939a", "patch": "@@ -23,7 +23,7 @@ msrv_aliases! {\n     1,42,0 { MATCHES_MACRO, SLICE_PATTERNS, PTR_SLICE_RAW_PARTS }\n     1,41,0 { RE_REBALANCING_COHERENCE, RESULT_MAP_OR_ELSE }\n     1,40,0 { MEM_TAKE, NON_EXHAUSTIVE, OPTION_AS_DEREF }\n-    1,38,0 { POINTER_CAST }\n+    1,38,0 { POINTER_CAST, REM_EUCLID }\n     1,37,0 { TYPE_ALIAS_ENUM_VARIANTS }\n     1,36,0 { ITERATOR_COPIED }\n     1,35,0 { OPTION_COPIED, RANGE_CONTAINS }"}, {"sha": "f176fc9ad1289073ceb9697462f3b0c787235725", "filename": "tests/ui/manual_rem_euclid.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebd3edabc17436de086a7ce147983c2238939a/tests%2Fui%2Fmanual_rem_euclid.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebd3edabc17436de086a7ce147983c2238939a/tests%2Fui%2Fmanual_rem_euclid.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.fixed?ref=e5ebd3edabc17436de086a7ce147983c2238939a", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+\n+#![warn(clippy::manual_rem_euclid)]\n+\n+fn main() {\n+    let value: i32 = 5;\n+\n+    let _: i32 = value.rem_euclid(4);\n+    let _: i32 = value.rem_euclid(4);\n+    let _: i32 = value.rem_euclid(4);\n+    let _: i32 = value.rem_euclid(4);\n+    let _: i32 = 1 + value.rem_euclid(4);\n+\n+    let _: i32 = (3 + value % 4) % 4;\n+    let _: i32 = (-4 + value % -4) % -4;\n+    let _: i32 = ((5 % 4) + 4) % 4;\n+}"}, {"sha": "b243065de87f989244561d1850103b1302e74622", "filename": "tests/ui/manual_rem_euclid.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebd3edabc17436de086a7ce147983c2238939a/tests%2Fui%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebd3edabc17436de086a7ce147983c2238939a/tests%2Fui%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.rs?ref=e5ebd3edabc17436de086a7ce147983c2238939a", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+\n+#![warn(clippy::manual_rem_euclid)]\n+\n+fn main() {\n+    let value: i32 = 5;\n+\n+    let _: i32 = ((value % 4) + 4) % 4;\n+    let _: i32 = (4 + (value % 4)) % 4;\n+    let _: i32 = (value % 4 + 4) % 4;\n+    let _: i32 = (4 + value % 4) % 4;\n+    let _: i32 = 1 + (4 + value % 4) % 4;\n+\n+    let _: i32 = (3 + value % 4) % 4;\n+    let _: i32 = (-4 + value % -4) % -4;\n+    let _: i32 = ((5 % 4) + 4) % 4;\n+}"}, {"sha": "7134759dcc9f886429c8d72e04264ce483fbcd37", "filename": "tests/ui/manual_rem_euclid.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebd3edabc17436de086a7ce147983c2238939a/tests%2Fui%2Fmanual_rem_euclid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebd3edabc17436de086a7ce147983c2238939a/tests%2Fui%2Fmanual_rem_euclid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.stderr?ref=e5ebd3edabc17436de086a7ce147983c2238939a", "patch": "@@ -0,0 +1,34 @@\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:8:18\n+   |\n+LL |     let _: i32 = ((value % 4) + 4) % 4;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n+   |\n+   = note: `-D clippy::manual-rem-euclid` implied by `-D warnings`\n+\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:9:18\n+   |\n+LL |     let _: i32 = (4 + (value % 4)) % 4;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n+\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:10:18\n+   |\n+LL |     let _: i32 = (value % 4 + 4) % 4;\n+   |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n+\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:11:18\n+   |\n+LL |     let _: i32 = (4 + value % 4) % 4;\n+   |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n+\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:12:22\n+   |\n+LL |     let _: i32 = 1 + (4 + value % 4) % 4;\n+   |                      ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "301a8e54ccfef9c42df90e40684d4bbca8c273aa", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebd3edabc17436de086a7ce147983c2238939a/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebd3edabc17436de086a7ce147983c2238939a/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=e5ebd3edabc17436de086a7ce147983c2238939a", "patch": "@@ -155,6 +155,11 @@ fn cast_abs_to_unsigned() {\n     assert_eq!(10u32, x.abs() as u32);\n }\n \n+fn manual_rem_euclid() {\n+    let x: i32 = 10;\n+    let _: i32 = ((x % 4) + 4) % 4;\n+}\n+\n fn main() {\n     filter_map_next();\n     checked_conversion();\n@@ -174,6 +179,7 @@ fn main() {\n     int_from_bool();\n     err_expect();\n     cast_abs_to_unsigned();\n+    manual_rem_euclid();\n }\n \n mod just_under_msrv {"}, {"sha": "b1c23b539ffdeb9fc62a262deb39656f6b314967", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebd3edabc17436de086a7ce147983c2238939a/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebd3edabc17436de086a7ce147983c2238939a/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=e5ebd3edabc17436de086a7ce147983c2238939a", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:198:24\n+  --> $DIR/min_rust_version_attr.rs:204:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:197:9\n+  --> $DIR/min_rust_version_attr.rs:203:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL ~             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:210:24\n+  --> $DIR/min_rust_version_attr.rs:216:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:209:9\n+  --> $DIR/min_rust_version_attr.rs:215:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}