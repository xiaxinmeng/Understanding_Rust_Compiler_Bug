{"sha": "8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZDk1ZGY1NGFiNWRlM2RkZGZkNDdkOGFlOWZjNTJmZWE4MDM4NDQ=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-03-24T13:57:24Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-03-24T13:57:24Z"}, "message": "Merge pull request #868 from rust-lang-nursery/tuple-wide\n\nDon't apply the function args heuristic to tuple lits.", "tree": {"sha": "ab37e6eb43e62a29ac7f06329f42524708659cd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab37e6eb43e62a29ac7f06329f42524708659cd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "html_url": "https://github.com/rust-lang/rust/commit/8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca757183fedf8e89286372b91ca074c11d99c4f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca757183fedf8e89286372b91ca074c11d99c4f4", "html_url": "https://github.com/rust-lang/rust/commit/ca757183fedf8e89286372b91ca074c11d99c4f4"}, {"sha": "9d8ce544283fd18cf1bfd6285a9dcce19aabbfea", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d8ce544283fd18cf1bfd6285a9dcce19aabbfea", "html_url": "https://github.com/rust-lang/rust/commit/9d8ce544283fd18cf1bfd6285a9dcce19aabbfea"}], "stats": {"total": 127, "additions": 46, "deletions": 81}, "files": [{"sha": "c535287df24397daf92009e65adc99d34eaf0cd7", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "patch": "@@ -236,8 +236,7 @@ fn rewrite_method_call(method_name: ast::Ident,\n                                               .map(|ty| ty.rewrite(context, width, offset))\n                                               .collect());\n \n-        (types.last().unwrap().span.hi,\n-         format!(\"::<{}>\", type_list.join(\", \")))\n+        (types.last().unwrap().span.hi, format!(\"::<{}>\", type_list.join(\", \")))\n     };\n \n     let callee_str = format!(\".{}{}\", method_name, type_str);"}, {"sha": "232e7691b820d286fb3142a7e24bb9b9202d727f", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "patch": "@@ -501,9 +501,7 @@ impl<'a> Iterator for CommentCodeSlices<'a> {\n             CodeCharKind::Comment => CodeCharKind::Normal,\n             CodeCharKind::Normal => CodeCharKind::Comment,\n         };\n-        let res = (kind,\n-                   self.last_slice_end,\n-                   &self.slice[self.last_slice_end..sub_slice_end]);\n+        let res = (kind, self.last_slice_end, &self.slice[self.last_slice_end..sub_slice_end]);\n         self.last_slice_end = sub_slice_end;\n         self.last_slice_kind = kind;\n "}, {"sha": "d933f68ce187248e40b97ea4e7acedd87625c4ad", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "patch": "@@ -18,7 +18,7 @@ use std::fmt::Write;\n use {Indent, Spanned};\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n-            DefinitiveListTactic, definitive_tactic, ListItem, format_fn_args};\n+            DefinitiveListTactic, definitive_tactic, ListItem, format_item_list};\n use string::{StringFormat, rewrite_string};\n use utils::{CodeMapSpanUtils, extra_offset, last_line_width, wrap_str, binary_search,\n             first_line_width, semicolon_for_stmt};\n@@ -1336,9 +1336,7 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n     // Replace the stub with the full overflowing last argument if the rewrite\n     // succeeded and its first line fits with the other arguments.\n     match (overflow_last, tactic, placeholder) {\n-        (true,\n-         DefinitiveListTactic::Horizontal,\n-         placeholder @ Some(..)) => {\n+        (true, DefinitiveListTactic::Horizontal, placeholder @ Some(..)) => {\n             item_vec[arg_count - 1].item = placeholder;\n         }\n         (true, _, _) => {\n@@ -1511,8 +1509,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                      outer_indent))\n     };\n \n-    match (context.config.struct_lit_style,\n-           context.config.struct_lit_multiline_style) {\n+    match (context.config.struct_lit_style, context.config.struct_lit_multiline_style) {\n         (StructLitStyle::Block, _) if fields_str.contains('\\n') || fields_str.len() > h_budget => {\n             format_on_newline()\n         }\n@@ -1583,7 +1580,7 @@ pub fn rewrite_tuple<'a, I>(context: &RewriteContext,\n                              list_lo,\n                              span.hi - BytePos(1));\n     let budget = try_opt!(width.checked_sub(2));\n-    let list_str = try_opt!(format_fn_args(items, budget, indent, context.config));\n+    let list_str = try_opt!(format_item_list(items, budget, indent, context.config));\n \n     Some(format!(\"({})\", list_str))\n }"}, {"sha": "688e475983219411d83e06e70066d03964862630", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "patch": "@@ -1581,9 +1581,7 @@ fn compute_budgets_for_args(context: &RewriteContext,\n             let multi_line_budget = context.config.max_width -\n                                     (indent.width() + result.len() + \"()\".len());\n \n-            return (one_line_budget,\n-                    multi_line_budget,\n-                    indent + result.len() + 1);\n+            return (one_line_budget, multi_line_budget, indent + result.len() + 1);\n         }\n     }\n "}, {"sha": "8f56be02e32ddc5bbc6e901bb9453fefac95ce3f", "filename": "tests/source/issue-510.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/tests%2Fsource%2Fissue-510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/tests%2Fsource%2Fissue-510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-510.rs?ref=8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "patch": "@@ -19,7 +19,6 @@ let inline_size = block.get_shrink_to_fit_inline_size(available_inline_size -\n }\n };\n \n-// FIXME(#501): tuple width heuristic may not be optimal for patterns.\n         let (inline_start, inline_size, margin_inline_start, margin_inline_end) =\n             match (inline_start, inline_end, computed_inline_size) {\n                 (MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {"}, {"sha": "eac45b83ca08cd50c17636da2857011c69c009b5", "filename": "tests/system.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "patch": "@@ -305,8 +305,7 @@ fn get_target(file_name: &str, target: Option<&str>, write_mode: Option<WriteMod\n     let file_path = Path::new(file_name);\n     let (source_path_prefix, target_path_prefix) = match write_mode {\n         Some(WriteMode::Coverage) => {\n-            (Path::new(\"tests/coverage-source/\"),\n-             \"tests/coverage-target/\")\n+            (Path::new(\"tests/coverage-source/\"), \"tests/coverage-target/\")\n         }\n         _ => (Path::new(\"tests/source/\"), \"tests/target/\"),\n     };"}, {"sha": "382919ce4035fc28ac0e18645d99ffae7cee62d8", "filename": "tests/target/closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "patch": "@@ -9,8 +9,7 @@ fn main() {\n                      b: WithType, // argument\n                      // ignored\n                      _| {\n-        (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n-         bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb)\n+        (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb)\n     };\n \n     let block_body = move |xxxxxxxxxxxxxxxxxxxxxxxxxxxxx,"}, {"sha": "5b5860998fa46508680577650a53b766aca6eb0c", "filename": "tests/target/issue-510.rs", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/tests%2Ftarget%2Fissue-510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/tests%2Ftarget%2Fissue-510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-510.rs?ref=8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "patch": "@@ -4,40 +4,37 @@ impl ISizeAndMarginsComputer for AbsoluteNonReplaced {\n                                      input: &ISizeConstraintInput)\n                                      -> ISizeConstraintSolution {\n \n-        let (inline_start,\n-             inline_size,\n-             margin_inline_start,\n-             margin_inline_end) = match (inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx,\n-                                         inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx) {\n-            (MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {\n-                let margin_start = inline_start_margin.specified_or_zero();\n-                let margin_end = inline_end_margin.specified_or_zero();\n-                // Now it is the same situation as inline-start Specified and inline-end\n-                // and inline-size Auto.\n-                //\n-                // Set inline-end to zero to calculate inline-size.\n-                let inline_size = block.get_shrink_to_fit_inline_size(available_inline_size -\n-                                                                      (margin_start + margin_end));\n-                (Au(0), inline_size, margin_start, margin_end)\n-            }\n-        };\n+        let (inline_start, inline_size, margin_inline_start, margin_inline_end) =\n+            match (inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx,\n+                   inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx) {\n+                (MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {\n+                    let margin_start = inline_start_margin.specified_or_zero();\n+                    let margin_end = inline_end_margin.specified_or_zero();\n+                    // Now it is the same situation as inline-start Specified and inline-end\n+                    // and inline-size Auto.\n+                    //\n+                    // Set inline-end to zero to calculate inline-size.\n+                    let inline_size = block.get_shrink_to_fit_inline_size(available_inline_size -\n+                                                                          (margin_start +\n+                                                                           margin_end));\n+                    (Au(0), inline_size, margin_start, margin_end)\n+                }\n+            };\n \n-        // FIXME(#501): tuple width heuristic may not be optimal for patterns.\n-        let (inline_start,\n-             inline_size,\n-             margin_inline_start,\n-             margin_inline_end) = match (inline_start, inline_end, computed_inline_size) {\n-            (MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {\n-                let margin_start = inline_start_margin.specified_or_zero();\n-                let margin_end = inline_end_margin.specified_or_zero();\n-                // Now it is the same situation as inline-start Specified and inline-end\n-                // and inline-size Auto.\n-                //\n-                // Set inline-end to zero to calculate inline-size.\n-                let inline_size = block.get_shrink_to_fit_inline_size(available_inline_size -\n-                                                                      (margin_start + margin_end));\n-                (Au(0), inline_size, margin_start, margin_end)\n-            }\n-        };\n+        let (inline_start, inline_size, margin_inline_start, margin_inline_end) =\n+            match (inline_start, inline_end, computed_inline_size) {\n+                (MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {\n+                    let margin_start = inline_start_margin.specified_or_zero();\n+                    let margin_end = inline_end_margin.specified_or_zero();\n+                    // Now it is the same situation as inline-start Specified and inline-end\n+                    // and inline-size Auto.\n+                    //\n+                    // Set inline-end to zero to calculate inline-size.\n+                    let inline_size = block.get_shrink_to_fit_inline_size(available_inline_size -\n+                                                                          (margin_start +\n+                                                                           margin_end));\n+                    (Au(0), inline_size, margin_start, margin_end)\n+                }\n+            };\n     }\n }"}, {"sha": "ed571d3212359f982db303c61f081e0d6bdfc7f0", "filename": "tests/target/match.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "patch": "@@ -32,16 +32,7 @@ fn foo() {\n         }\n \n         // Test that earlier patterns can take the guard space\n-        (aaaa,\n-         bbbbb,\n-         ccccccc,\n-         aaaaa,\n-         bbbbbbbb,\n-         cccccc,\n-         aaaa,\n-         bbbbbbbb,\n-         cccccc,\n-         dddddd) |\n+        (aaaa, bbbbb, ccccccc, aaaaa, bbbbbbbb, cccccc, aaaa, bbbbbbbb, cccccc, dddddd) |\n         Patternnnnnnnnnnnnnnnnnnnnnnnnn if loooooooooooooooooooooooooooooooooooooooooong_guard => {}\n \n         _ => {}\n@@ -75,22 +66,13 @@ fn main() {\n fn main() {\n     match r {\n         Variableeeeeeeeeeeeeeeeee => {\n-            (\"variable\",\n-             vec![\"id\", \"name\", \"qualname\", \"value\", \"type\", \"scopeid\"],\n-             true,\n-             true)\n+            (\"variable\", vec![\"id\", \"name\", \"qualname\", \"value\", \"type\", \"scopeid\"], true, true)\n         }\n         Enummmmmmmmmmmmmmmmmmmmm => {\n-            (\"enum\",\n-             vec![\"id\", \"qualname\", \"scopeid\", \"value\"],\n-             true,\n-             true)\n+            (\"enum\", vec![\"id\", \"qualname\", \"scopeid\", \"value\"], true, true)\n         }\n         Variantttttttttttttttttttttttt => {\n-            (\"variant\",\n-             vec![\"id\", \"name\", \"qualname\", \"type\", \"value\", \"scopeid\"],\n-             true,\n-             true)\n+            (\"variant\", vec![\"id\", \"name\", \"qualname\", \"type\", \"value\", \"scopeid\"], true, true)\n         }\n     };\n "}, {"sha": "a5bcc7f701a717d71dd4ae510757e7647d946fa2", "filename": "tests/target/tuple.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/tests%2Ftarget%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd95df54ab5de3dddfd47d8ae9fc52fea803844/tests%2Ftarget%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftuple.rs?ref=8fd95df54ab5de3dddfd47d8ae9fc52fea803844", "patch": "@@ -2,9 +2,7 @@\n \n fn foo() {\n     let a = (a, a, a, a, a);\n-    let aaaaaaaaaaaaaaaa = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n-                            aaaaaaaaaaaaaa,\n-                            aaaaaaaaaaaaaa);\n+    let aaaaaaaaaaaaaaaa = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaa, aaaaaaaaaaaaaa);\n     let aaaaaaaaaaaaaaaaaaaaaa = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n                                   aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n                                   aaaaaaaaaaaaaaaaaaaaaaaaa,\n@@ -26,7 +24,6 @@ fn a() {\n }\n \n fn b() {\n-    ((bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n-      bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb),\n+    ((bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb),\n      bbbbbbbbbbbbbbbbbb)\n }"}]}