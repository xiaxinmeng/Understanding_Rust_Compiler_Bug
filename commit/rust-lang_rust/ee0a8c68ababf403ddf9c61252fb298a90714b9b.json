{"sha": "ee0a8c68ababf403ddf9c61252fb298a90714b9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMGE4YzY4YWJhYmY0MDNkZGY5YzYxMjUyZmIyOThhOTA3MTRiOWI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T16:47:43Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T19:25:06Z"}, "message": "rename hashmap find_ref/get_ref -> find/get", "tree": {"sha": "0b8ea24da6a6c8354ef7fde1c933358ec535d6a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b8ea24da6a6c8354ef7fde1c933358ec535d6a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee0a8c68ababf403ddf9c61252fb298a90714b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0a8c68ababf403ddf9c61252fb298a90714b9b", "html_url": "https://github.com/rust-lang/rust/commit/ee0a8c68ababf403ddf9c61252fb298a90714b9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee0a8c68ababf403ddf9c61252fb298a90714b9b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "203fcbd0f360fdae9db551bf63e14fe152150cc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/203fcbd0f360fdae9db551bf63e14fe152150cc9", "html_url": "https://github.com/rust-lang/rust/commit/203fcbd0f360fdae9db551bf63e14fe152150cc9"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "c3314d3c35263d7312340dbed34e90bfdbabf92a", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee0a8c68ababf403ddf9c61252fb298a90714b9b/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0a8c68ababf403ddf9c61252fb298a90714b9b/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=ee0a8c68ababf403ddf9c61252fb298a90714b9b", "patch": "@@ -369,7 +369,7 @@ pub mod linear {\n             }\n         }\n \n-        pure fn find_ref(&self, k: &K) -> Option<&self/V> {\n+        pure fn find(&self, k: &K) -> Option<&self/V> {\n             match self.bucket_for_key(self.buckets, k) {\n                 FoundEntry(idx) => {\n                     match self.buckets[idx] {\n@@ -389,8 +389,8 @@ pub mod linear {\n             }\n         }\n \n-        pure fn get_ref(&self, k: &K) -> &self/V {\n-            match self.find_ref(k) {\n+        pure fn get(&self, k: &K) -> &self/V {\n+            match self.find(k) {\n                 Some(v) => v,\n                 None => fail fmt!(\"No entry found for key: %?\", k),\n             }\n@@ -428,7 +428,7 @@ pub mod linear {\n             if self.len() != other.len() { return false; }\n \n             for self.each |key, value| {\n-                match other.find_ref(key) {\n+                match other.find(key) {\n                     None => return false,\n                     Some(v) => if value != v { return false },\n                 }\n@@ -593,11 +593,11 @@ pub mod test {\n     }\n \n     #[test]\n-    pub fn find_ref() {\n+    pub fn find() {\n         let mut m = ~LinearMap();\n-        assert m.find_ref(&1).is_none();\n+        assert m.find(&1).is_none();\n         m.insert(1, 2);\n-        match m.find_ref(&1) {\n+        match m.find(&1) {\n             None => fail,\n             Some(v) => assert *v == 2\n         }"}, {"sha": "c41a9e8924870c067137d1a765105958eea74c48", "filename": "src/libstd/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee0a8c68ababf403ddf9c61252fb298a90714b9b/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0a8c68ababf403ddf9c61252fb298a90714b9b/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=ee0a8c68ababf403ddf9c61252fb298a90714b9b", "patch": "@@ -911,7 +911,7 @@ pub impl Decoder: serialize::Decoder {\n                 // FIXME(#3148) This hint should not be necessary.\n                 let obj: &self/~Object = obj;\n \n-                match obj.find_ref(&name.to_owned()) {\n+                match obj.find(&name.to_owned()) {\n                     None => fail fmt!(\"no such field: %s\", name),\n                     Some(json) => {\n                         self.stack.push(json);\n@@ -969,7 +969,7 @@ impl Json : Eq {\n                         if d0.len() == d1.len() {\n                             let mut equal = true;\n                             for d0.each |k, v0| {\n-                                match d1.find_ref(k) {\n+                                match d1.find(k) {\n                                     Some(v1) if v0 == v1 => { },\n                                     _ => { equal = false; break }\n                                 }"}, {"sha": "b8417bb427f624395b6c6dda49007b27cbc16b4d", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0a8c68ababf403ddf9c61252fb298a90714b9b/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0a8c68ababf403ddf9c61252fb298a90714b9b/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=ee0a8c68ababf403ddf9c61252fb298a90714b9b", "patch": "@@ -297,7 +297,7 @@ impl @Mut<Prep> : TPrep {\n                 name: &str, val: &str) -> bool {\n         do self.borrow_imm |p| {\n             let k = kind.to_owned();\n-            let f = (*p.ctxt.freshness.get_ref(&k))(name, val);\n+            let f = (*p.ctxt.freshness.get(&k))(name, val);\n             do p.ctxt.logger.borrow_imm |lg| {\n                 if f {\n                     lg.info(fmt!(\"%s %s:%s is fresh\","}]}