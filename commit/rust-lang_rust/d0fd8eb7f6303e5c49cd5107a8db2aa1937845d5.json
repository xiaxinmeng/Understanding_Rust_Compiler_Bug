{"sha": "d0fd8eb7f6303e5c49cd5107a8db2aa1937845d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZmQ4ZWI3ZjYzMDNlNWM0OWNkNTEwN2E4ZGIyYWExOTM3ODQ1ZDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-12T10:35:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-12T10:35:18Z"}, "message": "Merge #5717\n\n5717: Minor\n\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4872eebe2c82da58246e63f3140d3339687bd9ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4872eebe2c82da58246e63f3140d3339687bd9ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0fd8eb7f6303e5c49cd5107a8db2aa1937845d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfM8XmCRBK7hj4Ov3rIwAAdHIIAHm2wVjlTU2mrplXzcSkDs/Y\nRo6IZNaSp7xsgQ1nrt6gotWrogU13dTcxaJTzsdY8Y0FDV65rb643+1lEiTahvLV\nzqUUg/lRdYfd2yMqETl76CfUp4iZFC8aViHealA/N5Jz2m+eCTUVehQ/qaZ7Ik7B\nUw1cvDgGbLCIYaJakpcnWNvW6avXgvN67P//Kv9qCBhCBLbNOoM5Cc0HkXk0b+r8\nSmVxvhOV8FyDufsk0nLCmGgqZIrB3yWGqLjG1wr6PedvH1RQSLet7V/PpiyJcpT9\nb1r8+g/DYZs9WGRTJkwt/DBxXy/XKEOUKX1q0oIP9Pxjg9WWJAdMr9Zg+ad/EFU=\n=hU2E\n-----END PGP SIGNATURE-----\n", "payload": "tree 4872eebe2c82da58246e63f3140d3339687bd9ab\nparent b27d5233bb3d68ae27e97879c85e5a8851d0501e\nparent 96001921fc1a00fe4f13dbe140e2df01430d11ea\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597228518 +0000\ncommitter GitHub <noreply@github.com> 1597228518 +0000\n\nMerge #5717\n\n5717: Minor\n\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0fd8eb7f6303e5c49cd5107a8db2aa1937845d5", "html_url": "https://github.com/rust-lang/rust/commit/d0fd8eb7f6303e5c49cd5107a8db2aa1937845d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0fd8eb7f6303e5c49cd5107a8db2aa1937845d5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b27d5233bb3d68ae27e97879c85e5a8851d0501e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b27d5233bb3d68ae27e97879c85e5a8851d0501e", "html_url": "https://github.com/rust-lang/rust/commit/b27d5233bb3d68ae27e97879c85e5a8851d0501e"}, {"sha": "96001921fc1a00fe4f13dbe140e2df01430d11ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/96001921fc1a00fe4f13dbe140e2df01430d11ea", "html_url": "https://github.com/rust-lang/rust/commit/96001921fc1a00fe4f13dbe140e2df01430d11ea"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "d3d62debfdddf3bec8f94f6ef543e65e3efdfaee", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0fd8eb7f6303e5c49cd5107a8db2aa1937845d5/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fd8eb7f6303e5c49cd5107a8db2aa1937845d5/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=d0fd8eb7f6303e5c49cd5107a8db2aa1937845d5", "patch": "@@ -265,8 +265,7 @@ impl SourceAnalyzer {\n         }\n \n         // This must be a normal source file rather than macro file.\n-        let hir_path =\n-            crate::Path::from_src(path.clone(), &Hygiene::new(db.upcast(), self.file_id))?;\n+        let hir_path = Path::from_src(path.clone(), &Hygiene::new(db.upcast(), self.file_id))?;\n \n         // Case where path is a qualifier of another path, e.g. foo::bar::Baz where we\n         // trying to resolve foo::bar.\n@@ -451,7 +450,7 @@ fn adjust(\n pub(crate) fn resolve_hir_path(\n     db: &dyn HirDatabase,\n     resolver: &Resolver,\n-    path: &crate::Path,\n+    path: &Path,\n ) -> Option<PathResolution> {\n     let types =\n         resolver.resolve_path_in_type_ns_fully(db.upcast(), path.mod_path()).map(|ty| match ty {\n@@ -512,7 +511,7 @@ pub(crate) fn resolve_hir_path(\n pub(crate) fn resolve_hir_path_qualifier(\n     db: &dyn HirDatabase,\n     resolver: &Resolver,\n-    path: &crate::Path,\n+    path: &Path,\n ) -> Option<PathResolution> {\n     let items = resolver\n         .resolve_module_path_in_items(db.upcast(), path.mod_path())"}]}