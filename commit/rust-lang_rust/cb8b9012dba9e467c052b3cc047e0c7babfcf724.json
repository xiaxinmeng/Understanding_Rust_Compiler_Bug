{"sha": "cb8b9012dba9e467c052b3cc047e0c7babfcf724", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOGI5MDEyZGJhOWU0NjdjMDUyYjNjYzA0N2UwYzdiYWJmY2Y3MjQ=", "commit": {"author": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-10-26T23:19:06Z"}, "committer": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-10-26T23:19:06Z"}, "message": "Address review comments", "tree": {"sha": "ddd824e20032852a78f28e01837ca314dd819878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddd824e20032852a78f28e01837ca314dd819878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb8b9012dba9e467c052b3cc047e0c7babfcf724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb8b9012dba9e467c052b3cc047e0c7babfcf724", "html_url": "https://github.com/rust-lang/rust/commit/cb8b9012dba9e467c052b3cc047e0c7babfcf724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb8b9012dba9e467c052b3cc047e0c7babfcf724/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ba127d3f06aa785eaf3df96f0adb505de67e74c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba127d3f06aa785eaf3df96f0adb505de67e74c", "html_url": "https://github.com/rust-lang/rust/commit/6ba127d3f06aa785eaf3df96f0adb505de67e74c"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "4a249d72bbccf69bfbd18b17b70895b474d99207", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb8b9012dba9e467c052b3cc047e0c7babfcf724/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8b9012dba9e467c052b3cc047e0c7babfcf724/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=cb8b9012dba9e467c052b3cc047e0c7babfcf724", "patch": "@@ -109,7 +109,6 @@ use crate::sys;\n /// documentation of `CString` before use, as improper ownership management\n /// of `CString` instances can lead to invalid memory accesses, memory leaks,\n /// and other memory errors.\n-\n #[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"cstring_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2d40f6e871d9f811508191b933f1ed45906b75a9", "filename": "src/test/ui/lint/lint-temporary-cstring-as-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb8b9012dba9e467c052b3cc047e0c7babfcf724/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8b9012dba9e467c052b3cc047e0c7babfcf724/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.rs?ref=cb8b9012dba9e467c052b3cc047e0c7babfcf724", "patch": "@@ -1,10 +1,10 @@\n-// ignore-tidy-linelength\n #![deny(temporary_cstring_as_ptr)]\n \n use std::ffi::CString;\n \n fn some_function(data: *const i8) {}\n \n fn main() {\n-    some_function(CString::new(\"\").unwrap().as_ptr()); //~ ERROR getting the inner pointer of a temporary `CString`\n+    some_function(CString::new(\"\").unwrap().as_ptr());\n+    //~^ ERROR getting the inner pointer of a temporary `CString`\n }"}, {"sha": "c72d56f2a5fca4eb8290d66c03d4e266c549d250", "filename": "src/test/ui/lint/lint-temporary-cstring-as-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb8b9012dba9e467c052b3cc047e0c7babfcf724/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb8b9012dba9e467c052b3cc047e0c7babfcf724/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr?ref=cb8b9012dba9e467c052b3cc047e0c7babfcf724", "patch": "@@ -1,13 +1,13 @@\n error: getting the inner pointer of a temporary `CString`\n-  --> $DIR/lint-temporary-cstring-as-param.rs:9:45\n+  --> $DIR/lint-temporary-cstring-as-param.rs:8:45\n    |\n LL |     some_function(CString::new(\"\").unwrap().as_ptr());\n    |                   ------------------------- ^^^^^^ this pointer will be invalid\n    |                   |\n    |                   this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-temporary-cstring-as-param.rs:2:9\n+  --> $DIR/lint-temporary-cstring-as-param.rs:1:9\n    |\n LL | #![deny(temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7aa4f2e1e005cc6bcab9766045cbb8daf5a8ab16", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb8b9012dba9e467c052b3cc047e0c7babfcf724/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8b9012dba9e467c052b3cc047e0c7babfcf724/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs?ref=cb8b9012dba9e467c052b3cc047e0c7babfcf724", "patch": "@@ -1,9 +1,9 @@\n-// ignore-tidy-linelength\n // this program is not technically incorrect, but is an obscure enough style to be worth linting\n #![deny(temporary_cstring_as_ptr)]\n \n use std::ffi::CString;\n \n fn main() {\n-    let s = CString::new(\"some text\").unwrap().as_ptr(); //~ ERROR getting the inner pointer of a temporary `CString`\n+    let s = CString::new(\"some text\").unwrap().as_ptr();\n+    //~^ ERROR getting the inner pointer of a temporary `CString`\n }"}, {"sha": "e69d2dd533a407c636d2816053d895a1591b192e", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb8b9012dba9e467c052b3cc047e0c7babfcf724/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb8b9012dba9e467c052b3cc047e0c7babfcf724/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr?ref=cb8b9012dba9e467c052b3cc047e0c7babfcf724", "patch": "@@ -1,13 +1,13 @@\n error: getting the inner pointer of a temporary `CString`\n-  --> $DIR/lint-temporary-cstring-as-ptr.rs:8:48\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:7:48\n    |\n LL |     let s = CString::new(\"some text\").unwrap().as_ptr();\n    |             ---------------------------------- ^^^^^^ this pointer will be invalid\n    |             |\n    |             this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-temporary-cstring-as-ptr.rs:3:9\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:2:9\n    |\n LL | #![deny(temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^"}]}