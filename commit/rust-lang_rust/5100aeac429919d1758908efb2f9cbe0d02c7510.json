{"sha": "5100aeac429919d1758908efb2f9cbe0d02c7510", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMDBhZWFjNDI5OTE5ZDE3NTg5MDhlZmIyZjljYmUwZDAyYzc1MTA=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-21T16:55:26Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-21T16:55:26Z"}, "message": "Merge #876\n\n876: Fix join_lines not adding a comma after join_single_expr_block with match arm r=matklad a=vipentti\n\nFixes #868 \n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "5921ac7c9d20fa729a3d97d8e6a81f87431f57e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5921ac7c9d20fa729a3d97d8e6a81f87431f57e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5100aeac429919d1758908efb2f9cbe0d02c7510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5100aeac429919d1758908efb2f9cbe0d02c7510", "html_url": "https://github.com/rust-lang/rust/commit/5100aeac429919d1758908efb2f9cbe0d02c7510", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5100aeac429919d1758908efb2f9cbe0d02c7510/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "55da8e786d2cac3cb6332f80c1ee715fbcbdee0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/55da8e786d2cac3cb6332f80c1ee715fbcbdee0d", "html_url": "https://github.com/rust-lang/rust/commit/55da8e786d2cac3cb6332f80c1ee715fbcbdee0d"}, {"sha": "82173c8de4b1283b6b54bd0def25b9c432614841", "url": "https://api.github.com/repos/rust-lang/rust/commits/82173c8de4b1283b6b54bd0def25b9c432614841", "html_url": "https://github.com/rust-lang/rust/commit/82173c8de4b1283b6b54bd0def25b9c432614841"}], "stats": {"total": 153, "additions": 143, "deletions": 10}, "files": [{"sha": "0d4a789fc884923498b0ac01f358ac1fb21681c9", "filename": "crates/ra_assists/src/flip_comma.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5100aeac429919d1758908efb2f9cbe0d02c7510/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5100aeac429919d1758908efb2f9cbe0d02c7510/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs?ref=5100aeac429919d1758908efb2f9cbe0d02c7510", "patch": "@@ -2,9 +2,10 @@ use hir::db::HirDatabase;\n use ra_syntax::{\n     Direction,\n     SyntaxKind::COMMA,\n+    algo::non_trivia_sibling,\n };\n \n-use crate::{AssistCtx, Assist, non_trivia_sibling};\n+use crate::{AssistCtx, Assist};\n \n pub(crate) fn flip_comma(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let comma = ctx.leaf_at_offset().find(|leaf| leaf.kind() == COMMA)?;"}, {"sha": "e1e899edce6ca912f05668b2f3045e65778ebdec", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5100aeac429919d1758908efb2f9cbe0d02c7510/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5100aeac429919d1758908efb2f9cbe0d02c7510/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=5100aeac429919d1758908efb2f9cbe0d02c7510", "patch": "@@ -10,7 +10,7 @@ mod assist_ctx;\n use itertools::Itertools;\n \n use ra_text_edit::TextEdit;\n-use ra_syntax::{TextRange, TextUnit, SyntaxNode, Direction};\n+use ra_syntax::{TextRange, TextUnit};\n use ra_db::FileRange;\n use hir::db::HirDatabase;\n \n@@ -104,10 +104,6 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n     ]\n }\n \n-fn non_trivia_sibling(node: &SyntaxNode, direction: Direction) -> Option<&SyntaxNode> {\n-    node.siblings(direction).skip(1).find(|node| !node.kind().is_trivia())\n-}\n-\n #[cfg(test)]\n mod helpers {\n     use hir::mock::MockDatabase;"}, {"sha": "b5bcd62fb211ae44dc740803bb802b5b4ca69b98", "filename": "crates/ra_ide_api_light/src/join_lines.rs", "status": "modified", "additions": 134, "deletions": 3, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/5100aeac429919d1758908efb2f9cbe0d02c7510/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5100aeac429919d1758908efb2f9cbe0d02c7510/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs?ref=5100aeac429919d1758908efb2f9cbe0d02c7510", "patch": "@@ -2,8 +2,9 @@ use itertools::Itertools;\n use ra_syntax::{\n     SourceFile, TextRange, TextUnit, AstNode, SyntaxNode,\n     SyntaxKind::{self, WHITESPACE, COMMA, R_CURLY, R_PAREN, R_BRACK},\n-    algo::find_covering_node,\n+    algo::{find_covering_node, non_trivia_sibling},\n     ast,\n+    Direction,\n };\n use ra_fmt::{\n     compute_ws, extract_trivial_expression\n@@ -120,11 +121,30 @@ fn remove_newline(\n     }\n }\n \n+fn has_comma_after(node: &SyntaxNode) -> bool {\n+    match non_trivia_sibling(node, Direction::Next) {\n+        Some(n) => n.kind() == COMMA,\n+        _ => false,\n+    }\n+}\n+\n fn join_single_expr_block(edit: &mut TextEditBuilder, node: &SyntaxNode) -> Option<()> {\n     let block = ast::Block::cast(node.parent()?)?;\n     let block_expr = ast::BlockExpr::cast(block.syntax().parent()?)?;\n     let expr = extract_trivial_expression(block)?;\n-    edit.replace(block_expr.syntax().range(), expr.syntax().text().to_string());\n+\n+    let block_range = block_expr.syntax().range();\n+    let mut buf = expr.syntax().text().to_string();\n+\n+    // Match block needs to have a comma after the block\n+    if let Some(match_arm) = block_expr.syntax().parent().and_then(ast::MatchArm::cast) {\n+        if !has_comma_after(match_arm.syntax()) {\n+            buf.push(',');\n+        }\n+    }\n+\n+    edit.replace(block_range, buf);\n+\n     Some(())\n }\n \n@@ -208,7 +228,6 @@ fn foo() {\n     }\n \n     #[test]\n-    #[ignore] // FIXME: https://github.com/rust-analyzer/rust-analyzer/issues/868\n     fn join_lines_adds_comma_for_block_in_match_arm() {\n         check_join_lines(\n             r\"\n@@ -230,6 +249,118 @@ fn foo(e: Result<U, V>) {\n         );\n     }\n \n+    #[test]\n+    fn join_lines_keeps_comma_for_block_in_match_arm() {\n+        // We already have a comma\n+        check_join_lines(\n+            r\"\n+fn foo(e: Result<U, V>) {\n+    match e {\n+        Ok(u) => <|>{\n+            u.foo()\n+        },\n+        Err(v) => v,\n+    }\n+}\",\n+            r\"\n+fn foo(e: Result<U, V>) {\n+    match e {\n+        Ok(u) => <|>u.foo(),\n+        Err(v) => v,\n+    }\n+}\",\n+        );\n+\n+        // comma with whitespace between brace and ,\n+        check_join_lines(\n+            r\"\n+fn foo(e: Result<U, V>) {\n+    match e {\n+        Ok(u) => <|>{\n+            u.foo()\n+        }    ,\n+        Err(v) => v,\n+    }\n+}\",\n+            r\"\n+fn foo(e: Result<U, V>) {\n+    match e {\n+        Ok(u) => <|>u.foo()    ,\n+        Err(v) => v,\n+    }\n+}\",\n+        );\n+\n+        // comma with newline between brace and ,\n+        check_join_lines(\n+            r\"\n+fn foo(e: Result<U, V>) {\n+    match e {\n+        Ok(u) => <|>{\n+            u.foo()\n+        }\n+        ,\n+        Err(v) => v,\n+    }\n+}\",\n+            r\"\n+fn foo(e: Result<U, V>) {\n+    match e {\n+        Ok(u) => <|>u.foo()\n+        ,\n+        Err(v) => v,\n+    }\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn join_lines_keeps_comma_with_single_arg_tuple() {\n+        // A single arg tuple\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    let x = (<|>{\n+       4\n+    },);\n+}\",\n+            r\"\n+fn foo() {\n+    let x = (<|>4,);\n+}\",\n+        );\n+\n+        // single arg tuple with whitespace between brace and comma\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    let x = (<|>{\n+       4\n+    }   ,);\n+}\",\n+            r\"\n+fn foo() {\n+    let x = (<|>4   ,);\n+}\",\n+        );\n+\n+        // single arg tuple with newline between brace and comma\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    let x = (<|>{\n+       4\n+    }\n+    ,);\n+}\",\n+            r\"\n+fn foo() {\n+    let x = (<|>4\n+    ,);\n+}\",\n+        );\n+    }\n+\n     #[test]\n     fn test_join_lines_use_items_left() {\n         // No space after the '{'"}, {"sha": "e2b4f0388182144f19f5604bc34c730355e88596", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5100aeac429919d1758908efb2f9cbe0d02c7510/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5100aeac429919d1758908efb2f9cbe0d02c7510/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=5100aeac429919d1758908efb2f9cbe0d02c7510", "patch": "@@ -2,7 +2,7 @@ pub mod visit;\n \n use rowan::TransparentNewType;\n \n-use crate::{SyntaxNode, TextRange, TextUnit, AstNode};\n+use crate::{SyntaxNode, TextRange, TextUnit, AstNode, Direction};\n \n pub use rowan::LeafAtOffset;\n \n@@ -29,6 +29,11 @@ pub fn find_node_at_offset<N: AstNode>(syntax: &SyntaxNode, offset: TextUnit) ->\n     find_leaf_at_offset(syntax, offset).find_map(|leaf| leaf.ancestors().find_map(N::cast))\n }\n \n+/// Finds the first sibling in the given direction which is not `trivia`\n+pub fn non_trivia_sibling(node: &SyntaxNode, direction: Direction) -> Option<&SyntaxNode> {\n+    node.siblings(direction).skip(1).find(|node| !node.kind().is_trivia())\n+}\n+\n pub fn find_covering_node(root: &SyntaxNode, range: TextRange) -> &SyntaxNode {\n     SyntaxNode::from_repr(root.0.covering_node(range))\n }"}]}