{"sha": "c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMGYwNjhkYzhiMmVmNTg2NzhiOTg0NmJhODM0ZGQ2ZGVhM2ZlNDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-30T04:31:04Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T09:39:24Z"}, "message": "IsAsync -> enum Async { Yes { span: Span, .. }, No }\nuse new span for better diagnostics.", "tree": {"sha": "82e59f521573df949dda750e7f1aa31588205b7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82e59f521573df949dda750e7f1aa31588205b7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "html_url": "https://github.com/rust-lang/rust/commit/c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e839b2ec849246ec5efe5069c8d874dbef289462", "url": "https://api.github.com/repos/rust-lang/rust/commits/e839b2ec849246ec5efe5069c8d874dbef289462", "html_url": "https://github.com/rust-lang/rust/commit/e839b2ec849246ec5efe5069c8d874dbef289462"}], "stats": {"total": 204, "additions": 96, "deletions": 108}, "files": [{"sha": "b51d47655831215fd27413a044e8d317389036e3", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -106,7 +106,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ref body,\n                 fn_decl_span,\n             ) => {\n-                if let IsAsync::Async { closure_id, .. } = asyncness {\n+                if let Async::Yes { closure_id, .. } = asyncness {\n                     self.lower_expr_async_closure(\n                         capture_clause,\n                         closure_id,"}, {"sha": "73a25620b5a041c49eac54ec425296336fe3c16f", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -299,7 +299,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     // `impl Future<Output = T>` here because lower_body\n                     // only cares about the input argument patterns in the function\n                     // declaration (decl), not the return types.\n-                    let asyncness = header.asyncness.node;\n+                    let asyncness = header.asyncness;\n                     let body_id =\n                         this.lower_maybe_async_body(span, &decl, asyncness, body.as_deref());\n \n@@ -836,19 +836,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n             AssocItemKind::Fn(ref sig, ref body) => {\n                 self.current_item = Some(i.span);\n-                let body_id = self.lower_maybe_async_body(\n-                    i.span,\n-                    &sig.decl,\n-                    sig.header.asyncness.node,\n-                    body.as_deref(),\n-                );\n+                let asyncness = sig.header.asyncness;\n+                let body_id =\n+                    self.lower_maybe_async_body(i.span, &sig.decl, asyncness, body.as_deref());\n                 let impl_trait_return_allow = !self.is_in_trait_impl;\n                 let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n                     sig,\n                     impl_item_def_id,\n                     impl_trait_return_allow,\n-                    sig.header.asyncness.node.opt_return_id(),\n+                    asyncness.opt_return_id(),\n                 );\n \n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n@@ -1033,12 +1030,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         &mut self,\n         span: Span,\n         decl: &FnDecl,\n-        asyncness: IsAsync,\n+        asyncness: Async,\n         body: Option<&Block>,\n     ) -> hir::BodyId {\n         let closure_id = match asyncness {\n-            IsAsync::Async { closure_id, .. } => closure_id,\n-            IsAsync::NotAsync => return self.lower_fn_body_block(span, decl, body),\n+            Async::Yes { closure_id, .. } => closure_id,\n+            Async::No => return self.lower_fn_body_block(span, decl, body),\n         };\n \n         self.lower_body(|this| {\n@@ -1248,7 +1245,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_fn_header(&mut self, h: FnHeader) -> hir::FnHeader {\n         hir::FnHeader {\n             unsafety: self.lower_unsafety(h.unsafety),\n-            asyncness: self.lower_asyncness(h.asyncness.node),\n+            asyncness: self.lower_asyncness(h.asyncness),\n             constness: self.lower_constness(h.constness),\n             abi: self.lower_extern(h.ext),\n         }\n@@ -1276,10 +1273,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             .emit();\n     }\n \n-    fn lower_asyncness(&mut self, a: IsAsync) -> hir::IsAsync {\n+    fn lower_asyncness(&mut self, a: Async) -> hir::IsAsync {\n         match a {\n-            IsAsync::Async { .. } => hir::IsAsync::Async,\n-            IsAsync::NotAsync => hir::IsAsync::NotAsync,\n+            Async::Yes { .. } => hir::IsAsync::Async,\n+            Async::No => hir::IsAsync::NotAsync,\n         }\n     }\n "}, {"sha": "e0217de1d3b8d6d7926fb69fd8fcdc649fa993b1", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -221,13 +221,13 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_trait_fn_not_async(&self, span: Span, asyncness: IsAsync) {\n-        if asyncness.is_async() {\n-            struct_span_err!(self.session, span, E0706, \"trait fns cannot be declared `async`\")\n+    fn check_trait_fn_not_async(&self, fn_span: Span, asyncness: Async) {\n+        if let Async::Yes { span, .. } = asyncness {\n+            struct_span_err!(self.session, fn_span, E0706, \"trait fns cannot be declared `async`\")\n+                .span_label(span, \"`async` because of this\")\n                 .note(\"`async` trait functions are not currently supported\")\n                 .note(\n-                    \"consider using the `async-trait` crate: \\\n-                       https://crates.io/crates/async-trait\",\n+                    \"consider using the `async-trait` crate: https://crates.io/crates/async-trait\",\n                 )\n                 .emit();\n         }\n@@ -1144,7 +1144,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             self.invalid_visibility(&item.vis, None);\n             if let AssocItemKind::Fn(sig, _) = &item.kind {\n                 self.check_trait_fn_not_const(sig.header.constness);\n-                self.check_trait_fn_not_async(item.span, sig.header.asyncness.node);\n+                self.check_trait_fn_not_async(item.span, sig.header.asyncness);\n             }\n         }\n "}, {"sha": "b1fa818d0a8cf01c5e4045f0e5119a55ad7567d0", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -2449,7 +2449,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_asyncness(&mut self, asyncness: ast::IsAsync) {\n+    crate fn print_asyncness(&mut self, asyncness: ast::Async) {\n         if asyncness.is_async() {\n             self.word_nbsp(\"async\");\n         }\n@@ -2734,7 +2734,7 @@ impl<'a> State<'a> {\n         self.s.word(visibility_qualified(vis, \"\"));\n \n         self.print_constness(header.constness);\n-        self.print_asyncness(header.asyncness.node);\n+        self.print_asyncness(header.asyncness);\n         self.print_unsafety(header.unsafety);\n \n         match header.ext {"}, {"sha": "a246e11495345b240cc07d74d58e8affa41dd3b1", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -381,8 +381,10 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n                 .emit();\n             return false;\n         }\n-        if sig.header.asyncness.node.is_async() {\n-            sd.span_err(i.span, \"async functions cannot be used for tests\");\n+        if let ast::Async::Yes { span, .. } = sig.header.asyncness {\n+            sd.struct_span_err(i.span, \"async functions cannot be used for tests\")\n+                .span_label(span, \"async because of this\")\n+                .emit();\n             return false;\n         }\n "}, {"sha": "af22e46eb6afa58f61af92606fa4a007b7d49e43", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -507,7 +507,7 @@ impl<'a> ExtCtxt<'a> {\n             span,\n             ast::ExprKind::Closure(\n                 ast::CaptureBy::Ref,\n-                ast::IsAsync::NotAsync,\n+                ast::Async::No,\n                 ast::Movability::Movable,\n                 fn_decl,\n                 body,\n@@ -530,7 +530,7 @@ impl<'a> ExtCtxt<'a> {\n             span,\n             ast::ExprKind::Closure(\n                 ast::CaptureBy::Ref,\n-                ast::IsAsync::NotAsync,\n+                ast::Async::No,\n                 ast::Movability::Movable,\n                 fn_decl,\n                 body,"}, {"sha": "5a4225ece65aac3071a2df822942cef24d0c5743", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -13,7 +13,7 @@ use syntax::ast::{self, AttrStyle, AttrVec, CaptureBy, Field, Ident, Lit, DUMMY_\n use syntax::ast::{\n     AnonConst, BinOp, BinOpKind, FnDecl, FunctionRetTy, Mac, Param, Ty, TyKind, UnOp,\n };\n-use syntax::ast::{Arm, BlockCheckMode, Expr, ExprKind, IsAsync, Label, Movability, RangeLimits};\n+use syntax::ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use syntax::ptr::P;\n use syntax::token::{self, Token, TokenKind};\n use syntax::util::classify;\n@@ -1348,7 +1348,7 @@ impl<'a> Parser<'a> {\n             if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };\n \n         let asyncness =\n-            if self.token.span.rust_2018() { self.parse_asyncness() } else { IsAsync::NotAsync };\n+            if self.token.span.rust_2018() { self.parse_asyncness() } else { Async::No };\n         if asyncness.is_async() {\n             // Feature-gate `async ||` closures.\n             self.sess.gated_spans.gate(sym::async_closure, self.prev_span);"}, {"sha": "aa43c15e286edac657bcab0494b57d74800e9f17", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 9, "deletions": 35, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -6,13 +6,13 @@ use crate::maybe_whole;\n \n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult, StashKey};\n-use rustc_span::source_map::{self, respan, Span};\n+use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::BytePos;\n use syntax::ast::{self, AttrKind, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n use syntax::ast::{AssocItem, AssocItemKind, Item, ItemKind, UseTree, UseTreeKind};\n+use syntax::ast::{Async, Const, Defaultness, Extern, IsAuto, PathSegment, StrLit, Unsafe};\n use syntax::ast::{BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter, Param, SelfKind};\n-use syntax::ast::{Const, Defaultness, Extern, IsAsync, IsAuto, PathSegment, StrLit, Unsafe};\n use syntax::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n use syntax::ast::{FnHeader, ForeignItem, ForeignItemKind, Mutability, Visibility, VisibilityKind};\n use syntax::ptr::P;\n@@ -105,10 +105,9 @@ impl<'a> Parser<'a> {\n \n             if self.eat_keyword(kw::Fn) {\n                 // EXTERN FUNCTION ITEM\n-                let fn_span = self.prev_span;\n                 let header = FnHeader {\n                     unsafety: Unsafe::No,\n-                    asyncness: respan(fn_span, IsAsync::NotAsync),\n+                    asyncness: Async::No,\n                     constness: Const::No,\n                     ext: Extern::from_abi(abi),\n                 };\n@@ -140,12 +139,7 @@ impl<'a> Parser<'a> {\n                 let ext = self.parse_extern()?;\n                 self.expect_keyword(kw::Fn)?;\n \n-                let header = FnHeader {\n-                    unsafety,\n-                    asyncness: respan(const_span, IsAsync::NotAsync),\n-                    constness,\n-                    ext,\n-                };\n+                let header = FnHeader { unsafety, asyncness: Async::No, constness, ext };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             }\n \n@@ -172,16 +166,9 @@ impl<'a> Parser<'a> {\n             let async_span = self.token.span;\n             if self.is_keyword_ahead(1, &[kw::Fn]) || self.is_keyword_ahead(2, &[kw::Fn]) {\n                 // ASYNC FUNCTION ITEM\n-                self.bump(); // `async`\n+                let asyncness = self.parse_asyncness(); // `async`\n                 let unsafety = self.parse_unsafety(); // `unsafe`?\n                 self.expect_keyword(kw::Fn)?; // `fn`\n-                let asyncness = respan(\n-                    async_span,\n-                    IsAsync::Async {\n-                        closure_id: DUMMY_NODE_ID,\n-                        return_impl_trait_id: DUMMY_NODE_ID,\n-                    },\n-                );\n                 self.ban_async_in_2015(async_span);\n                 let header =\n                     FnHeader { unsafety, asyncness, constness: Const::No, ext: Extern::None };\n@@ -211,13 +198,7 @@ impl<'a> Parser<'a> {\n         if self.check_keyword(kw::Fn) {\n             // FUNCTION ITEM\n             self.bump();\n-            let fn_span = self.prev_span;\n-            let header = FnHeader {\n-                unsafety: Unsafe::No,\n-                asyncness: respan(fn_span, IsAsync::NotAsync),\n-                constness: Const::No,\n-                ext: Extern::None,\n-            };\n+            let header = FnHeader::default();\n             return self.parse_item_fn(lo, vis, attrs, header);\n         }\n \n@@ -230,13 +211,7 @@ impl<'a> Parser<'a> {\n             self.check(&token::OpenDelim(token::Brace));\n             let ext = self.parse_extern()?;\n             self.expect_keyword(kw::Fn)?;\n-            let fn_span = self.prev_span;\n-            let header = FnHeader {\n-                unsafety,\n-                asyncness: respan(fn_span, IsAsync::NotAsync),\n-                constness: Const::No,\n-                ext,\n-            };\n+            let header = FnHeader { unsafety, asyncness: Async::No, constness: Const::No, ext };\n             return self.parse_item_fn(lo, vis, attrs, header);\n         }\n \n@@ -1788,10 +1763,9 @@ impl<'a> Parser<'a> {\n     fn parse_fn_front_matter(&mut self) -> PResult<'a, FnHeader> {\n         let constness = self.parse_constness();\n         let asyncness = self.parse_asyncness();\n-        if let IsAsync::Async { .. } = asyncness {\n-            self.ban_async_in_2015(self.prev_span);\n+        if let Async::Yes { span, .. } = asyncness {\n+            self.ban_async_in_2015(span);\n         }\n-        let asyncness = respan(self.prev_span, asyncness);\n         let unsafety = self.parse_unsafety();\n         let (constness, unsafety, ext) = if let Const::Yes(_) = constness {\n             (constness, unsafety, Extern::None)"}, {"sha": "2f2f2f8f176e535f12c655eb9d8cb9efbd7b07f1", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -24,7 +24,7 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{FileName, Span, DUMMY_SP};\n use syntax::ast::DUMMY_NODE_ID;\n use syntax::ast::{self, AttrStyle, AttrVec, Const, CrateSugar, Extern, Ident, Unsafe};\n-use syntax::ast::{IsAsync, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n+use syntax::ast::{Async, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n use syntax::ptr::P;\n use syntax::token::{self, DelimToken, Token, TokenKind};\n use syntax::tokenstream::{self, DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n@@ -954,11 +954,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses asyncness: `async` or nothing.\n-    fn parse_asyncness(&mut self) -> IsAsync {\n+    fn parse_asyncness(&mut self) -> Async {\n         if self.eat_keyword(kw::Async) {\n-            IsAsync::Async { closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }\n+            let span = self.prev_span;\n+            Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }\n         } else {\n-            IsAsync::NotAsync\n+            Async::No\n         }\n     }\n "}, {"sha": "fe80dec513cfe7a16cc37085d5adf741a91cfc44", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -48,8 +48,8 @@ impl<'a> DefCollector<'a> {\n         decl: &'a FnDecl,\n         body: Option<&'a Block>,\n     ) {\n-        let (closure_id, return_impl_trait_id) = match header.asyncness.node {\n-            IsAsync::Async { closure_id, return_impl_trait_id } => {\n+        let (closure_id, return_impl_trait_id) = match header.asyncness {\n+            Async::Yes { span: _, closure_id, return_impl_trait_id } => {\n                 (closure_id, return_impl_trait_id)\n             }\n             _ => unreachable!(),\n@@ -117,7 +117,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             | ItemKind::ExternCrate(..)\n             | ItemKind::ForeignMod(..)\n             | ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n-            ItemKind::Fn(sig, generics, body) if sig.header.asyncness.node.is_async() => {\n+            ItemKind::Fn(sig, generics, body) if sig.header.asyncness.is_async() => {\n                 return self.visit_async_fn(\n                     i.id,\n                     i.ident.name,\n@@ -215,7 +215,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_assoc_item(&mut self, i: &'a AssocItem, ctxt: visit::AssocCtxt) {\n         let def_data = match &i.kind {\n-            AssocItemKind::Fn(FnSig { header, decl }, body) if header.asyncness.node.is_async() => {\n+            AssocItemKind::Fn(FnSig { header, decl }, body) if header.asyncness.is_async() => {\n                 return self.visit_async_fn(\n                     i.id,\n                     i.ident.name,\n@@ -255,10 +255,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 // we must create two defs.\n                 let closure_def = self.create_def(expr.id, DefPathData::ClosureExpr, expr.span);\n                 match asyncness {\n-                    IsAsync::Async { closure_id, .. } => {\n+                    Async::Yes { closure_id, .. } => {\n                         self.create_def(closure_id, DefPathData::ClosureExpr, expr.span)\n                     }\n-                    IsAsync::NotAsync => closure_def,\n+                    Async::No => closure_def,\n                 }\n             }\n             ExprKind::Async(_, async_id, _) => {"}, {"sha": "58ff7f447890c53ca4e357570d4f206019a809e9", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -2030,7 +2030,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // `async |x| ...` gets desugared to `|x| future_from_generator(|| ...)`, so we need to\n             // resolve the arguments within the proper scopes so that usages of them inside the\n             // closure are detected as upvars rather than normal closure arg usages.\n-            ExprKind::Closure(_, IsAsync::Async { .. }, _, ref fn_decl, ref body, _span) => {\n+            ExprKind::Closure(_, Async::Yes { .. }, _, ref fn_decl, ref body, _span) => {\n                 self.with_rib(ValueNS, NormalRibKind, |this| {\n                     // Resolve arguments:\n                     this.resolve_params(&fn_decl.inputs);"}, {"sha": "01e3e3f368529d5d016e6d940464e1196dcf277c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -290,8 +290,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 // as an `impl Trait` existential type. Because of this, to match\n                 // the definition paths when resolving nested types we need to\n                 // start walking from the newly-created definition.\n-                match sig.header.asyncness.node {\n-                    ast::IsAsync::Async { return_impl_trait_id, .. } => {\n+                match sig.header.asyncness {\n+                    ast::Async::Yes { return_impl_trait_id, .. } => {\n                         v.nest_tables(return_impl_trait_id, |v| v.visit_ty(ret_ty))\n                     }\n                     _ => v.visit_ty(ret_ty),\n@@ -383,8 +383,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     // as an `impl Trait` existential type. Because of this, to match\n                     // the definition paths when resolving nested types we need to\n                     // start walking from the newly-created definition.\n-                    match header.asyncness.node {\n-                        ast::IsAsync::Async { return_impl_trait_id, .. } => {\n+                    match header.asyncness {\n+                        ast::Async::Yes { return_impl_trait_id, .. } => {\n                             v.nest_tables(return_impl_trait_id, |v| v.visit_ty(ret_ty))\n                         }\n                         _ => v.visit_ty(ret_ty),"}, {"sha": "d3c4d6d5723b90c6e4001ae6cf1448406a08e5cd", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -368,7 +368,7 @@ impl Sig for ast::Item {\n                 if let ast::Const::Yes(_) = header.constness {\n                     text.push_str(\"const \");\n                 }\n-                if header.asyncness.node.is_async() {\n+                if header.asyncness.is_async() {\n                     text.push_str(\"async \");\n                 }\n                 if let ast::Unsafe::Yes(_) = header.unsafety {\n@@ -887,7 +887,7 @@ fn make_method_signature(\n     if let ast::Const::Yes(_) = m.header.constness {\n         text.push_str(\"const \");\n     }\n-    if m.header.asyncness.node.is_async() {\n+    if m.header.asyncness.is_async() {\n         text.push_str(\"async \");\n     }\n     if let ast::Unsafe::Yes(_) = m.header.unsafety {"}, {"sha": "72430fa9c17e415b02694d9a04cf02b20241fe71", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -34,7 +34,7 @@ use rustc_data_structures::thin_vec::ThinVec;\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{self, Decoder, Encoder};\n-use rustc_span::source_map::{dummy_spanned, respan, Spanned};\n+use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -1198,14 +1198,14 @@ pub enum ExprKind {\n     /// A closure (e.g., `move |a, b, c| a + b + c`).\n     ///\n     /// The final span is the span of the argument block `|...|`.\n-    Closure(CaptureBy, IsAsync, Movability, P<FnDecl>, P<Expr>, Span),\n+    Closure(CaptureBy, Async, Movability, P<FnDecl>, P<Expr>, Span),\n     /// A block (`'label: { ... }`).\n     Block(P<Block>, Option<Label>),\n     /// An async block (`async move { ... }`).\n     ///\n     /// The `NodeId` is the `NodeId` for the closure that results from\n     /// desugaring an async block, just like the NodeId field in the\n-    /// `IsAsync` enum. This is necessary in order to create a def for the\n+    /// `Async::Yes` variant. This is necessary in order to create a def for the\n     /// closure which can be used as a parent of any child defs. Defs\n     /// created during lowering cannot be made the parent of any other\n     /// preexisting defs.\n@@ -2109,21 +2109,21 @@ pub enum Unsafe {\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub enum IsAsync {\n-    Async { closure_id: NodeId, return_impl_trait_id: NodeId },\n-    NotAsync,\n+pub enum Async {\n+    Yes { span: Span, closure_id: NodeId, return_impl_trait_id: NodeId },\n+    No,\n }\n \n-impl IsAsync {\n+impl Async {\n     pub fn is_async(self) -> bool {\n-        if let IsAsync::Async { .. } = self { true } else { false }\n+        if let Async::Yes { .. } = self { true } else { false }\n     }\n \n     /// In ths case this is an `async` return, the `NodeId` for the generated `impl Trait` item.\n     pub fn opt_return_id(self) -> Option<NodeId> {\n         match self {\n-            IsAsync::Async { return_impl_trait_id, .. } => Some(return_impl_trait_id),\n-            IsAsync::NotAsync => None,\n+            Async::Yes { return_impl_trait_id, .. } => Some(return_impl_trait_id),\n+            Async::No => None,\n         }\n     }\n }\n@@ -2496,7 +2496,7 @@ impl Extern {\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n pub struct FnHeader {\n     pub unsafety: Unsafe,\n-    pub asyncness: Spanned<IsAsync>,\n+    pub asyncness: Async,\n     pub constness: Const,\n     pub ext: Extern,\n }\n@@ -2506,7 +2506,7 @@ impl FnHeader {\n     pub fn has_qualifiers(&self) -> bool {\n         let Self { unsafety, asyncness, constness, ext } = self;\n         matches!(unsafety, Unsafe::Yes(_))\n-            || asyncness.node.is_async()\n+            || asyncness.is_async()\n             || matches!(constness, Const::Yes(_))\n             || !matches!(ext, Extern::None)\n     }\n@@ -2516,7 +2516,7 @@ impl Default for FnHeader {\n     fn default() -> FnHeader {\n         FnHeader {\n             unsafety: Unsafe::No,\n-            asyncness: dummy_spanned(IsAsync::NotAsync),\n+            asyncness: Async::No,\n             constness: Const::No,\n             ext: Extern::None,\n         }"}, {"sha": "e0180d451936f3c6a8dbecae77beb7d6f3733962", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -114,7 +114,7 @@ pub trait MutVisitor: Sized {\n         noop_visit_fn_decl(d, self);\n     }\n \n-    fn visit_asyncness(&mut self, a: &mut IsAsync) {\n+    fn visit_asyncness(&mut self, a: &mut Async) {\n         noop_visit_asyncness(a, self);\n     }\n \n@@ -728,13 +728,13 @@ pub fn noop_visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis:\n     }\n }\n \n-pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut IsAsync, vis: &mut T) {\n+pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut Async, vis: &mut T) {\n     match asyncness {\n-        IsAsync::Async { closure_id, return_impl_trait_id } => {\n+        Async::Yes { span: _, closure_id, return_impl_trait_id } => {\n             vis.visit_id(closure_id);\n             vis.visit_id(return_impl_trait_id);\n         }\n-        IsAsync::NotAsync => {}\n+        Async::No => {}\n     }\n }\n \n@@ -980,7 +980,7 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n \n pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n     let FnHeader { unsafety: _, asyncness, constness: _, ext: _ } = header;\n-    vis.visit_asyncness(&mut asyncness.node);\n+    vis.visit_asyncness(asyncness);\n }\n \n pub fn noop_visit_mod<T: MutVisitor>(Mod { inner, items, inline: _ }: &mut Mod, vis: &mut T) {"}, {"sha": "7ac75c605f2e47a00bfb2f64ed70488731169185", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -121,7 +121,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(\n                         ExprKind::Closure(CaptureBy::Value,\n-                                          IsAsync::NotAsync,\n+                                          Async::No,\n                                           Movability::Movable,\n                                           decl.clone(),\n                                           e,"}, {"sha": "04f72fb645e28b8952fd3dda1506adef5ac529e8", "filename": "src/test/ui/async-await/async-trait-fn.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -2,7 +2,9 @@ error[E0706]: trait fns cannot be declared `async`\n   --> $DIR/async-trait-fn.rs:3:5\n    |\n LL |     async fn foo() {}\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     -----^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n@@ -11,7 +13,9 @@ error[E0706]: trait fns cannot be declared `async`\n   --> $DIR/async-trait-fn.rs:4:5\n    |\n LL |     async fn bar(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     -----^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait"}, {"sha": "e6859a3cd93a0786686ff4c499ea99579676cf11", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -56,7 +56,9 @@ error[E0706]: trait fns cannot be declared `async`\n   --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     -----^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait"}, {"sha": "689bbdd8bab88c92892588f471caa270be75fbcf", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c30f068dc8b2ef58678b9846ba834dd6dea3fe44/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=c30f068dc8b2ef58678b9846ba834dd6dea3fe44", "patch": "@@ -2,7 +2,9 @@ error[E0706]: trait fns cannot be declared `async`\n   --> $DIR/fn-header-semantic-fail.rs:17:9\n    |\n LL |         async fn ft1();\n-   |         ^^^^^^^^^^^^^^^\n+   |         -----^^^^^^^^^^\n+   |         |\n+   |         `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n@@ -17,7 +19,9 @@ error[E0706]: trait fns cannot be declared `async`\n   --> $DIR/fn-header-semantic-fail.rs:21:21\n    |\n LL |         /* const */ async unsafe extern \"C\" fn ft5();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n@@ -26,7 +30,9 @@ error[E0706]: trait fns cannot be declared `async`\n   --> $DIR/fn-header-semantic-fail.rs:28:9\n    |\n LL |         async fn ft1() {}\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         -----^^^^^^^^^^^^\n+   |         |\n+   |         `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n@@ -41,7 +47,9 @@ error[E0706]: trait fns cannot be declared `async`\n   --> $DIR/fn-header-semantic-fail.rs:33:21\n    |\n LL |         /* const */ async unsafe extern \"C\" fn ft5() {}\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait"}]}