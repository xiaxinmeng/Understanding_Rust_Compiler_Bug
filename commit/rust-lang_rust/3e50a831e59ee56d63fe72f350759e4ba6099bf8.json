{"sha": "3e50a831e59ee56d63fe72f350759e4ba6099bf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNTBhODMxZTU5ZWU1NmQ2M2ZlNzJmMzUwNzU5ZTRiYTYwOTliZjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T12:23:41Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T12:23:41Z"}, "message": "Optimize line_program_add_file", "tree": {"sha": "1c06689546f5f91c6fa0d67f665e44f3ccc7e219", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c06689546f5f91c6fa0d67f665e44f3ccc7e219"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e50a831e59ee56d63fe72f350759e4ba6099bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e50a831e59ee56d63fe72f350759e4ba6099bf8", "html_url": "https://github.com/rust-lang/rust/commit/3e50a831e59ee56d63fe72f350759e4ba6099bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e50a831e59ee56d63fe72f350759e4ba6099bf8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "996bfd06ae37bd3bf3ba02903674608c3c4082e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/996bfd06ae37bd3bf3ba02903674608c3c4082e1", "html_url": "https://github.com/rust-lang/rust/commit/996bfd06ae37bd3bf3ba02903674608c3c4082e1"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "e21b0b026c891c96e3febec0a5d3262c2894cb76", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3e50a831e59ee56d63fe72f350759e4ba6099bf8/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e50a831e59ee56d63fe72f350759e4ba6099bf8/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=3e50a831e59ee56d63fe72f350759e4ba6099bf8", "patch": "@@ -1,3 +1,6 @@\n+use std::ffi::OsStr;\n+use std::path::{Component, Path};\n+\n use crate::prelude::*;\n \n use syntax::source_map::FileName;\n@@ -8,22 +11,49 @@ use gimli::write::{\n     Address, AttributeValue, FileId, LineProgram, LineString, LineStringTable, UnitEntryId,\n };\n \n+// OPTIMIZATION: It is cheaper to do this in one pass than using `.parent()` and `.file_name()`.\n+fn split_path_dir_and_file(path: &Path) -> (&Path, &OsStr) {\n+    let mut iter = path.components();\n+    let file_name = match iter.next_back() {\n+        Some(Component::Normal(p)) => p,\n+        component => {\n+            panic!(\"Path component {:?} of path {} is an invalid filename\", component, path.display());\n+        }\n+    };\n+    let parent = iter.as_path();\n+    (parent, file_name)\n+}\n+\n+// OPTIMIZATION: Avoid UTF-8 validation on UNIX.\n+fn osstr_as_utf8_bytes(path: &OsStr) -> &[u8] {\n+    #[cfg(unix)] {\n+        use std::os::unix::ffi::OsStrExt;\n+        return path.as_bytes();\n+    }\n+    #[cfg(not(unix))] {\n+        return path.to_str().unwrap().as_bytes();\n+    }\n+}\n+\n fn line_program_add_file(\n     line_program: &mut LineProgram,\n     line_strings: &mut LineStringTable,\n     file: &FileName,\n ) -> FileId {\n     match file {\n         FileName::Real(path) => {\n-            let dir_name = path.parent().unwrap().to_str().unwrap().as_bytes();\n+            let (dir_path, file_name) = split_path_dir_and_file(path);\n+            let dir_name = osstr_as_utf8_bytes(dir_path.as_os_str());\n+            let file_name = osstr_as_utf8_bytes(file_name);\n+\n             let dir_id = if !dir_name.is_empty() {\n                 let dir_name = LineString::new(dir_name, line_program.encoding(), line_strings);\n                 line_program.add_directory(dir_name)\n             } else {\n                 line_program.default_directory()\n             };\n             let file_name = LineString::new(\n-                path.file_name().unwrap().to_str().unwrap().as_bytes(),\n+                file_name,\n                 line_program.encoding(),\n                 line_strings,\n             );"}]}