{"sha": "2f73cef5a3bff0da510bfc35f88bb42009af6035", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNzNjZWY1YTNiZmYwZGE1MTBiZmMzNWY4OGJiNDIwMDlhZjYwMzU=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-10T16:19:17Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T17:10:28Z"}, "message": "rustc_codegen_llvm: use safe references for MemoryBuffer and ObjectFile.", "tree": {"sha": "0bdcdb2012c991f47b07fb614577145bfecb1f0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bdcdb2012c991f47b07fb614577145bfecb1f0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f73cef5a3bff0da510bfc35f88bb42009af6035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f73cef5a3bff0da510bfc35f88bb42009af6035", "html_url": "https://github.com/rust-lang/rust/commit/2f73cef5a3bff0da510bfc35f88bb42009af6035", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f73cef5a3bff0da510bfc35f88bb42009af6035/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebec156abfc25ce695227ed2c12c420244a433f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebec156abfc25ce695227ed2c12c420244a433f8", "html_url": "https://github.com/rust-lang/rust/commit/ebec156abfc25ce695227ed2c12c420244a433f8"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "422eb32bab8f8b8243238858e9a9f6345dd42974", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f73cef5a3bff0da510bfc35f88bb42009af6035/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f73cef5a3bff0da510bfc35f88bb42009af6035/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=2f73cef5a3bff0da510bfc35f88bb42009af6035", "patch": "@@ -390,13 +390,11 @@ extern { pub type Metadata; }\n extern { pub type BasicBlock; }\n extern { pub type Builder; }\n extern { pub type MemoryBuffer; }\n-pub type MemoryBufferRef = *mut MemoryBuffer;\n extern { pub type PassManager; }\n pub type PassManagerRef = *mut PassManager;\n extern { pub type PassManagerBuilder; }\n pub type PassManagerBuilderRef = *mut PassManagerBuilder;\n extern { pub type ObjectFile; }\n-pub type ObjectFileRef = *mut ObjectFile;\n extern { pub type SectionIterator; }\n pub type SectionIteratorRef = *mut SectionIterator;\n extern { pub type Pass; }\n@@ -1143,17 +1141,19 @@ extern \"C\" {\n     // Stuff that's in rustllvm/ because it's not upstream yet.\n \n     /// Opens an object file.\n-    pub fn LLVMCreateObjectFile(MemBuf: MemoryBufferRef) -> ObjectFileRef;\n+    pub fn LLVMCreateObjectFile(\n+        MemBuf: &'static mut MemoryBuffer,\n+    ) -> Option<&'static mut ObjectFile>;\n     /// Closes an object file.\n-    pub fn LLVMDisposeObjectFile(ObjFile: ObjectFileRef);\n+    pub fn LLVMDisposeObjectFile(ObjFile: &'static mut ObjectFile);\n \n     /// Enumerates the sections in an object file.\n-    pub fn LLVMGetSections(ObjFile: ObjectFileRef) -> SectionIteratorRef;\n+    pub fn LLVMGetSections(ObjFile: &ObjectFile) -> SectionIteratorRef;\n     /// Destroys a section iterator.\n     pub fn LLVMDisposeSectionIterator(SI: SectionIteratorRef);\n     /// Returns true if the section iterator is at the end of the section\n     /// list:\n-    pub fn LLVMIsSectionIteratorAtEnd(ObjFile: ObjectFileRef, SI: SectionIteratorRef) -> Bool;\n+    pub fn LLVMIsSectionIteratorAtEnd(ObjFile: &ObjectFile, SI: SectionIteratorRef) -> Bool;\n     /// Moves the section iterator to point to the next section.\n     pub fn LLVMMoveToNextSection(SI: SectionIteratorRef);\n     /// Returns the current section size.\n@@ -1163,7 +1163,9 @@ extern \"C\" {\n \n     /// Reads the given file and returns it as a memory buffer. Use\n     /// LLVMDisposeMemoryBuffer() to get rid of it.\n-    pub fn LLVMRustCreateMemoryBufferWithContentsOfFile(Path: *const c_char) -> MemoryBufferRef;\n+    pub fn LLVMRustCreateMemoryBufferWithContentsOfFile(\n+        Path: *const c_char,\n+    ) -> Option<&'static mut MemoryBuffer>;\n \n     pub fn LLVMStartMultithreaded() -> Bool;\n "}, {"sha": "6bca2a162214cb2b57f5f67b7ccf4e9e95bdfe9f", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f73cef5a3bff0da510bfc35f88bb42009af6035/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f73cef5a3bff0da510bfc35f88bb42009af6035/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=2f73cef5a3bff0da510bfc35f88bb42009af6035", "patch": "@@ -179,21 +179,16 @@ impl Attribute {\n // Memory-managed interface to object files.\n \n pub struct ObjectFile {\n-    pub llof: ObjectFileRef,\n+    pub llof: &'static mut ffi::ObjectFile,\n }\n \n unsafe impl Send for ObjectFile {}\n \n impl ObjectFile {\n     // This will take ownership of llmb\n-    pub fn new(llmb: MemoryBufferRef) -> Option<ObjectFile> {\n+    pub fn new(llmb: &'static mut MemoryBuffer) -> Option<ObjectFile> {\n         unsafe {\n-            let llof = LLVMCreateObjectFile(llmb);\n-            if llof as isize == 0 {\n-                // LLVMCreateObjectFile took ownership of llmb\n-                return None;\n-            }\n-\n+            let llof = LLVMCreateObjectFile(llmb)?;\n             Some(ObjectFile { llof: llof })\n         }\n     }\n@@ -202,7 +197,7 @@ impl ObjectFile {\n impl Drop for ObjectFile {\n     fn drop(&mut self) {\n         unsafe {\n-            LLVMDisposeObjectFile(self.llof);\n+            LLVMDisposeObjectFile(&mut *(self.llof as *mut _));\n         }\n     }\n }\n@@ -221,7 +216,7 @@ impl Drop for SectionIter {\n     }\n }\n \n-pub fn mk_section_iter(llof: ObjectFileRef) -> SectionIter {\n+pub fn mk_section_iter(llof: &ffi::ObjectFile) -> SectionIter {\n     unsafe { SectionIter { llsi: LLVMGetSections(llof) } }\n }\n "}, {"sha": "fcb704413ef116c1944e486083f4a995dcbffaba", "filename": "src/librustc_codegen_llvm/metadata.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f73cef5a3bff0da510bfc35f88bb42009af6035/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f73cef5a3bff0da510bfc35f88bb42009af6035/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmetadata.rs?ref=2f73cef5a3bff0da510bfc35f88bb42009af6035", "patch": "@@ -58,10 +58,8 @@ impl MetadataLoader for LlvmMetadataLoader {\n                           -> Result<MetadataRef, String> {\n         unsafe {\n             let buf = common::path2cstr(filename);\n-            let mb = llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf.as_ptr());\n-            if mb as isize == 0 {\n-                return Err(format!(\"error reading library: '{}'\", filename.display()));\n-            }\n+            let mb = llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf.as_ptr())\n+                .ok_or_else(|| format!(\"error reading library: '{}'\", filename.display()))?;\n             let of = ObjectFile::new(mb)\n                 .map(|of| OwningRef::new(box of))\n                 .ok_or_else(|| format!(\"provided path not an object file: '{}'\","}]}