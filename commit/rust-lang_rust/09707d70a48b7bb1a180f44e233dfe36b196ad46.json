{"sha": "09707d70a48b7bb1a180f44e233dfe36b196ad46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NzA3ZDcwYTQ4YjdiYjFhMTgwZjQ0ZTIzM2RmZTM2YjE5NmFkNDY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-21T06:20:04Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-03T15:41:48Z"}, "message": "Fix fallout", "tree": {"sha": "58baa2e18e0ac3f71d06bbaf38cdb08e8e67dcca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58baa2e18e0ac3f71d06bbaf38cdb08e8e67dcca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09707d70a48b7bb1a180f44e233dfe36b196ad46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09707d70a48b7bb1a180f44e233dfe36b196ad46", "html_url": "https://github.com/rust-lang/rust/commit/09707d70a48b7bb1a180f44e233dfe36b196ad46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09707d70a48b7bb1a180f44e233dfe36b196ad46/comments", "author": null, "committer": null, "parents": [{"sha": "eac635de01d083e0423dcf9e548cf522ec41015d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eac635de01d083e0423dcf9e548cf522ec41015d", "html_url": "https://github.com/rust-lang/rust/commit/eac635de01d083e0423dcf9e548cf522ec41015d"}], "stats": {"total": 116, "additions": 59, "deletions": 57}, "files": [{"sha": "39cdf0c456413d48f81393993d3168591c525e64", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -945,15 +945,15 @@ mod tests {\n         let mut m = list_from(v.as_slice());\n         m.rotate_backward(); check_links(&m);\n         m.rotate_forward(); check_links(&m);\n-        assert_eq!(v.iter().collect::<Vec<&int>>(), m.iter().collect());\n+        assert_eq!(v.iter().collect::<Vec<&int>>(), m.iter().collect::<Vec<_>>());\n         m.rotate_forward(); check_links(&m);\n         m.rotate_forward(); check_links(&m);\n         m.pop_front(); check_links(&m);\n         m.rotate_forward(); check_links(&m);\n         m.rotate_backward(); check_links(&m);\n         m.push_front(9); check_links(&m);\n         m.rotate_forward(); check_links(&m);\n-        assert_eq!(vec![3i,9,5,1,2], m.into_iter().collect());\n+        assert_eq!(vec![3i,9,5,1,2], m.into_iter().collect::<Vec<_>>());\n     }\n \n     #[test]"}, {"sha": "2cbde0168a2e80444c13641f2557a26e0cc7842d", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -397,23 +397,23 @@ mod test {\n     fn test_iterator() {\n         let mut e1: EnumSet<Foo> = EnumSet::new();\n \n-        let elems: Vec<Foo> = e1.iter().collect();\n+        let elems: ::vec::Vec<Foo> = e1.iter().collect();\n         assert!(elems.is_empty())\n \n         e1.insert(A);\n-        let elems = e1.iter().collect();\n+        let elems: ::vec::Vec<_> = e1.iter().collect();\n         assert_eq!(vec![A], elems)\n \n         e1.insert(C);\n-        let elems = e1.iter().collect();\n+        let elems: ::vec::Vec<_> = e1.iter().collect();\n         assert_eq!(vec![A,C], elems)\n \n         e1.insert(C);\n-        let elems = e1.iter().collect();\n+        let elems: ::vec::Vec<_> = e1.iter().collect();\n         assert_eq!(vec![A,C], elems)\n \n         e1.insert(B);\n-        let elems = e1.iter().collect();\n+        let elems: ::vec::Vec<_> = e1.iter().collect();\n         assert_eq!(vec![A,B,C], elems)\n     }\n \n@@ -431,35 +431,35 @@ mod test {\n         e2.insert(C);\n \n         let e_union = e1 | e2;\n-        let elems = e_union.iter().collect();\n+        let elems: ::vec::Vec<_> = e_union.iter().collect();\n         assert_eq!(vec![A,B,C], elems)\n \n         let e_intersection = e1 & e2;\n-        let elems = e_intersection.iter().collect();\n+        let elems: ::vec::Vec<_> = e_intersection.iter().collect();\n         assert_eq!(vec![C], elems)\n \n         // Another way to express intersection\n         let e_intersection = e1 - (e1 - e2);\n-        let elems = e_intersection.iter().collect();\n+        let elems: ::vec::Vec<_> = e_intersection.iter().collect();\n         assert_eq!(vec![C], elems)\n \n         let e_subtract = e1 - e2;\n-        let elems = e_subtract.iter().collect();\n+        let elems: ::vec::Vec<_> = e_subtract.iter().collect();\n         assert_eq!(vec![A], elems)\n \n         // Bitwise XOR of two sets, aka symmetric difference\n         let e_symmetric_diff = e1 ^ e2;\n-        let elems = e_symmetric_diff.iter().collect();\n+        let elems: ::vec::Vec<_> = e_symmetric_diff.iter().collect();\n         assert_eq!(vec![A,B], elems)\n \n         // Another way to express symmetric difference\n         let e_symmetric_diff = (e1 - e2) | (e2 - e1);\n-        let elems = e_symmetric_diff.iter().collect();\n+        let elems: ::vec::Vec<_> = e_symmetric_diff.iter().collect();\n         assert_eq!(vec![A,B], elems)\n \n         // Yet another way to express symmetric difference\n         let e_symmetric_diff = (e1 | e2) - (e1 & e2);\n-        let elems = e_symmetric_diff.iter().collect();\n+        let elems: ::vec::Vec<_> = e_symmetric_diff.iter().collect();\n         assert_eq!(vec![A,B], elems)\n     }\n "}, {"sha": "8917afa34b149a27521578bdeee935ce272e140f", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -1010,10 +1010,12 @@ mod tests {\n     #[test]\n     fn test_from_utf8_lossy() {\n         let xs = b\"hello\";\n-        assert_eq!(String::from_utf8_lossy(xs), \"hello\".into_cow());\n+        let ys: str::CowString = \"hello\".into_cow();\n+        assert_eq!(String::from_utf8_lossy(xs), ys);\n \n         let xs = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes();\n-        assert_eq!(String::from_utf8_lossy(xs), \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".into_cow());\n+        let ys: str::CowString = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".into_cow();\n+        assert_eq!(String::from_utf8_lossy(xs), ys);\n \n         let xs = b\"Hello\\xC2 There\\xFF Goodbye\";\n         assert_eq!(String::from_utf8_lossy(xs),"}, {"sha": "c40f0c19c09f888459312f04db62affbaa89f646", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -1868,27 +1868,27 @@ mod tests {\n         let mut values = vec![1u8,2,3,4,5];\n         {\n             let slice = values.slice_from_mut(2);\n-            assert!(slice == &mut [3, 4, 5]);\n+            assert!(slice == [3, 4, 5]);\n             for p in slice.iter_mut() {\n                 *p += 2;\n             }\n         }\n \n-        assert!(values.as_slice() == &[1, 2, 5, 6, 7]);\n+        assert!(values.as_slice() == [1, 2, 5, 6, 7]);\n     }\n \n     #[test]\n     fn test_slice_to_mut() {\n         let mut values = vec![1u8,2,3,4,5];\n         {\n             let slice = values.slice_to_mut(2);\n-            assert!(slice == &mut [1, 2]);\n+            assert!(slice == [1, 2]);\n             for p in slice.iter_mut() {\n                 *p += 1;\n             }\n         }\n \n-        assert!(values.as_slice() == &[2, 3, 3, 4, 5]);\n+        assert!(values.as_slice() == [2, 3, 3, 4, 5]);\n     }\n \n     #[test]"}, {"sha": "347777b587aa59d0af34892c48a91ed598abf979", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -226,7 +226,7 @@ extern \"rust-intrinsic\" {\n     /// use std::mem;\n     ///\n     /// let v: &[u8] = unsafe { mem::transmute(\"L\") };\n-    /// assert!(v == &[76u8]);\n+    /// assert!(v == [76u8]);\n     /// ```\n     pub fn transmute<T,U>(e: T) -> U;\n "}, {"sha": "ef895a1d7fbcca26920c7858c65b430a11f7f1da", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -274,9 +274,9 @@ impl<T> Option<T> {\n     /// let mut x = Some(\"Diamonds\");\n     /// {\n     ///     let v = x.as_mut_slice();\n-    ///     assert!(v == &mut [\"Diamonds\"]);\n+    ///     assert!(v == [\"Diamonds\"]);\n     ///     v[0] = \"Dirt\";\n-    ///     assert!(v == &mut [\"Dirt\"]);\n+    ///     assert!(v == [\"Dirt\"]);\n     /// }\n     /// assert_eq!(x, Some(\"Dirt\"));\n     /// ```\n@@ -554,7 +554,7 @@ impl<T> Option<T> {\n     ///\n     /// let x = None;\n     /// let v: Vec<&str> = x.into_iter().collect();\n-    /// assert_eq!(v, vec![]);\n+    /// assert!(v.is_empty());\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for iterator conventions\"]"}, {"sha": "07bb6f15c94ff83b0f0dc5b3fdbd30f0d2cd56ce", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -407,14 +407,14 @@ impl<T, E> Result<T, E> {\n     /// let mut x: Result<&str, uint> = Ok(\"Gold\");\n     /// {\n     ///     let v = x.as_mut_slice();\n-    ///     assert!(v == &mut [\"Gold\"]);\n+    ///     assert!(v == [\"Gold\"]);\n     ///     v[0] = \"Silver\";\n-    ///     assert!(v == &mut [\"Silver\"]);\n+    ///     assert!(v == [\"Silver\"]);\n     /// }\n     /// assert_eq!(x, Ok(\"Silver\"));\n     ///\n     /// let mut x: Result<&str, uint> = Err(45);\n-    /// assert!(x.as_mut_slice() == &mut []);\n+    /// assert!(x.as_mut_slice().is_empty());\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for mut conventions\"]"}, {"sha": "12cd20584a180adab4ba5a109e1ecf6cb9a60945", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -374,20 +374,20 @@ pub trait SlicePrelude<T> for Sized? {\n     /// // scoped to restrict the lifetime of the borrows\n     /// {\n     ///    let (left, right) = v.split_at_mut(0);\n-    ///    assert!(left == &mut []);\n-    ///    assert!(right == &mut [1i, 2, 3, 4, 5, 6]);\n+    ///    assert!(left == []);\n+    ///    assert!(right == [1i, 2, 3, 4, 5, 6]);\n     /// }\n     ///\n     /// {\n     ///     let (left, right) = v.split_at_mut(2);\n-    ///     assert!(left == &mut [1i, 2]);\n-    ///     assert!(right == &mut [3i, 4, 5, 6]);\n+    ///     assert!(left == [1i, 2]);\n+    ///     assert!(right == [3i, 4, 5, 6]);\n     /// }\n     ///\n     /// {\n     ///     let (left, right) = v.split_at_mut(6);\n-    ///     assert!(left == &mut [1i, 2, 3, 4, 5, 6]);\n-    ///     assert!(right == &mut []);\n+    ///     assert!(left == [1i, 2, 3, 4, 5, 6]);\n+    ///     assert!(right == []);\n     /// }\n     /// ```\n     #[unstable = \"waiting on final error conventions\"]"}, {"sha": "75ddfd5413b31e2c10fc051c0a53c85ab88015c1", "filename": "src/libcoretest/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcoretest%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibcoretest%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fmem.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -109,7 +109,7 @@ fn test_transmute() {\n     }\n \n     unsafe {\n-        assert!(vec![76u8] == transmute(\"L\".to_string()));\n+        assert!(vec![76u8] == transmute::<_, Vec<u8>>(\"L\".to_string()));\n     }\n }\n "}, {"sha": "92c87aacc7dc5bf75e276fdb9a1b6be4d2f455a1", "filename": "src/librustc/middle/cfg/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -40,7 +40,7 @@ fn replace_newline_with_backslash_l(s: String) -> String {\n         let mut last_two: Vec<_> =\n             s.as_slice().chars().rev().take(2).collect();\n         last_two.reverse();\n-        if last_two.as_slice() != &['\\\\', 'l'] {\n+        if last_two != ['\\\\', 'l'] {\n             s.push_str(\"\\\\l\");\n         }\n         s"}, {"sha": "9c94823f867586d6c1296d08d31b923574fc1a2f", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -156,7 +156,7 @@ mod test {\n             \"rpath2\".to_string(),\n             \"rpath1\".to_string()\n         ]);\n-        assert!(res.as_slice() == &[\n+        assert!(res.as_slice() == [\n             \"rpath1\".to_string(),\n             \"rpath2\".to_string()\n         ]);\n@@ -176,7 +176,7 @@ mod test {\n             \"4a\".to_string(),\n             \"3\".to_string()\n         ]);\n-        assert!(res.as_slice() == &[\n+        assert!(res.as_slice() == [\n             \"1a\".to_string(),\n             \"2\".to_string(),\n             \"4a\".to_string(),"}, {"sha": "555cb0004892fd08af9d3f8edc3057ea91222ff4", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -1545,7 +1545,7 @@ fn compile_unit_metadata(cx: &CrateContext) {\n                     Some(ref p) if p.is_relative() => {\n                             // prepend \"./\" if necessary\n                             let dotdot = b\"..\";\n-                            let prefix = &[dotdot[0], ::std::path::SEP_BYTE];\n+                            let prefix = [dotdot[0], ::std::path::SEP_BYTE];\n                             let mut path_bytes = p.as_vec().to_vec();\n \n                             if path_bytes.slice_to(2) != prefix &&"}, {"sha": "cc946a6ca4a96ea1a956dc952194fb495dadebaa", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -172,7 +172,7 @@ pub fn main_args(args: &[String]) -> int {\n         }\n     }\n \n-    if matches.opt_strs(\"passes\").as_slice() == &[\"list\".to_string()] {\n+    if matches.opt_strs(\"passes\") == [\"list\"] {\n         println!(\"Available passes for running rustdoc:\");\n         for &(name, _, description) in PASSES.iter() {\n             println!(\"{:>20} - {}\", name, description);"}, {"sha": "fd6b57d096ae6e2b5484852aead077aa5d6ebebb", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -1528,7 +1528,7 @@ mod test {\n \n         check!(File::create(&tmpdir.join(\"test\")).write(&bytes));\n         let actual = check!(File::open(&tmpdir.join(\"test\")).read_to_end());\n-        assert!(actual.as_slice() == &bytes);\n+        assert!(actual == bytes.as_slice());\n     }\n \n     #[test]"}, {"sha": "0abd030a16347e58b3f7e08462508c1bfceadd6e", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -2034,7 +2034,7 @@ mod tests {\n     fn split_paths_windows() {\n         fn check_parse(unparsed: &str, parsed: &[&str]) -> bool {\n             split_paths(unparsed) ==\n-                parsed.iter().map(|s| Path::new(*s)).collect()\n+                parsed.iter().map(|s| Path::new(*s)).collect::<Vec<_>>()\n         }\n \n         assert!(check_parse(\"\", &mut [\"\"]));\n@@ -2054,7 +2054,7 @@ mod tests {\n     fn split_paths_unix() {\n         fn check_parse(unparsed: &str, parsed: &[&str]) -> bool {\n             split_paths(unparsed) ==\n-                parsed.iter().map(|s| Path::new(*s)).collect()\n+                parsed.iter().map(|s| Path::new(*s)).collect::<Vec<_>>()\n         }\n \n         assert!(check_parse(\"\", &mut [\"\"]));"}, {"sha": "d56e4f704499ef9871359de20d603a5ac6d3af5a", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -224,10 +224,10 @@ mod test {\n         assert_eq!(Vec::new(), v);\n \n         let v = SmallVector::one(1i);\n-        assert_eq!(vec!(1i), v.into_iter().collect());\n+        assert_eq!(vec!(1i), v.into_iter().collect::<Vec<_>>());\n \n         let v = SmallVector::many(vec!(1i, 2i, 3i));\n-        assert_eq!(vec!(1i, 2i, 3i), v.into_iter().collect());\n+        assert_eq!(vec!(1i, 2i, 3i), v.into_iter().collect::<Vec<_>>());\n     }\n \n     #[test]"}, {"sha": "d644542db0732532ccf49db2121b5c77cb57f613", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -582,23 +582,23 @@ mod test {\n     fn test_basic_setabf() {\n         let s = b\"\\\\E[48;5;%p1%dm\";\n         assert_eq!(expand(s, &[Number(1)], &mut Variables::new()).unwrap(),\n-                   \"\\\\E[48;5;1m\".bytes().collect());\n+                   \"\\\\E[48;5;1m\".bytes().collect::<Vec<_>>());\n     }\n \n     #[test]\n     fn test_multiple_int_constants() {\n         assert_eq!(expand(b\"%{1}%{2}%d%d\", &[], &mut Variables::new()).unwrap(),\n-                   \"21\".bytes().collect());\n+                   \"21\".bytes().collect::<Vec<_>>());\n     }\n \n     #[test]\n     fn test_op_i() {\n         let mut vars = Variables::new();\n         assert_eq!(expand(b\"%p1%d%p2%d%p3%d%i%p1%d%p2%d%p3%d\",\n                           &[Number(1),Number(2),Number(3)], &mut vars),\n-                   Ok(\"123233\".bytes().collect()));\n+                   Ok(\"123233\".bytes().collect::<Vec<_>>()));\n         assert_eq!(expand(b\"%p1%d%p2%d%i%p1%d%p2%d\", &[], &mut vars),\n-                   Ok(\"0011\".bytes().collect()));\n+                   Ok(\"0011\".bytes().collect::<Vec<_>>()));\n     }\n \n     #[test]\n@@ -672,15 +672,15 @@ mod test {\n         let res = expand(s, &[Number(1)], &mut vars);\n         assert!(res.is_ok(), res.unwrap_err());\n         assert_eq!(res.unwrap(),\n-                   \"\\\\E[31m\".bytes().collect());\n+                   \"\\\\E[31m\".bytes().collect::<Vec<_>>());\n         let res = expand(s, &[Number(8)], &mut vars);\n         assert!(res.is_ok(), res.unwrap_err());\n         assert_eq!(res.unwrap(),\n-                   \"\\\\E[90m\".bytes().collect());\n+                   \"\\\\E[90m\".bytes().collect::<Vec<_>>());\n         let res = expand(s, &[Number(42)], &mut vars);\n         assert!(res.is_ok(), res.unwrap_err());\n         assert_eq!(res.unwrap(),\n-                   \"\\\\E[38;5;42m\".bytes().collect());\n+                   \"\\\\E[38;5;42m\".bytes().collect::<Vec<_>>());\n     }\n \n     #[test]\n@@ -692,13 +692,13 @@ mod test {\n                             Words(\"foo\".to_string()),\n                             Words(\"f\".to_string()),\n                             Words(\"foo\".to_string())], vars),\n-                   Ok(\"foofoo ffo\".bytes().collect()));\n+                   Ok(\"foofoo ffo\".bytes().collect::<Vec<_>>()));\n         assert_eq!(expand(b\"%p1%:-4.2s\", &[Words(\"foo\".to_string())], vars),\n-                   Ok(\"fo  \".bytes().collect()));\n+                   Ok(\"fo  \".bytes().collect::<Vec<_>>()));\n \n         assert_eq!(expand(b\"%p1%d%p1%.3d%p1%5d%p1%:+d\", &[Number(1)], vars),\n-                   Ok(\"1001    1+1\".bytes().collect()));\n+                   Ok(\"1001    1+1\".bytes().collect::<Vec<_>>()));\n         assert_eq!(expand(b\"%p1%o%p1%#o%p2%6.4x%p2%#6.4X\", &[Number(15), Number(27)], vars),\n-                   Ok(\"17017  001b0X001B\".bytes().collect()));\n+                   Ok(\"17017  001b0X001B\".bytes().collect::<Vec<_>>()));\n     }\n }"}, {"sha": "76b8463a4170133185419e07f4f88fd2b6d4bbf0", "filename": "src/test/run-pass/issue-15080.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15080.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -26,5 +26,5 @@ fn main() {\n                 break\n         }\n     }\n-    assert!(result.as_slice() == &[2, 4]);\n+    assert!(result == [2, 4]);\n }"}, {"sha": "666847517efdeda568d337a45d628f586e46fb20", "filename": "src/test/run-pass/issue-7784.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09707d70a48b7bb1a180f44e233dfe36b196ad46/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7784.rs?ref=09707d70a48b7bb1a180f44e233dfe36b196ad46", "patch": "@@ -33,6 +33,6 @@ fn main() {\n     let out = bar(\"baz\", \"foo\");\n     let [a, xs.., d] = out;\n     assert_eq!(a, \"baz\");\n-    assert!(xs == &[\"foo\", \"foo\"]);\n+    assert!(xs == [\"foo\", \"foo\"]);\n     assert_eq!(d, \"baz\");\n }"}]}