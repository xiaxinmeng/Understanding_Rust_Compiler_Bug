{"sha": "537920eedbd30ceb2828b3d909bb663c83f6fce1", "node_id": "C_kwDOAAsO6NoAKDUzNzkyMGVlZGJkMzBjZWIyODI4YjNkOTA5YmI2NjNjODNmNmZjZTE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-13T22:47:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-13T22:47:23Z"}, "message": "Rollup merge of #95243 - vladimir-ea:compiler_watch_os, r=nagisa\n\nAdd Apple WatchOS compile targets\n\nHello,\n\nI would like to add the following target triples for Apple WatchOS as Tier 3 platforms:\n\narmv7k-apple-watchos\narm64_32-apple-watchos\nx86_64-apple-watchos-sim\nThere are some pre-requisites Pull Requests:\nhttps://github.com/rust-lang/compiler-builtins/pull/456 (merged)\nhttps://github.com/alexcrichton/cc-rs/pull/662 (pending)\nhttps://github.com/rust-lang/libc/pull/2717 (merged)\n\nThere will be a subsequent PR with standard library changes for WatchOS.  Previous compiler and library changes were in a single PR (https://github.com/rust-lang/rust/pull/94736) which is now closed in favour of separate PRs.\n\nMany thanks!\nVlad.\n\n### Tier 3 Target Requirements\n\nAdds support for Apple WatchOS compile targets.\n\nBelow are details on how this target meets the requirements for tier 3:\n\n>   tier 3 target must have a designated developer or developers (the \"target maintainers\") on record to be CCed when issues arise regarding the target. (The mechanism to track and CC such developers may evolve over time.)\n\n`@deg4uss3r` has volunteered to be the target maintainer. I am also happy to help if a second maintainer is required.\n\n> Targets must use naming consistent with any existing targets; for instance, a target for the same CPU or OS as an existing Rust target should use the same name for that CPU or OS. Targets should normally use the same names and naming conventions as used elsewhere in the broader ecosystem beyond Rust (such as in other toolchains), unless they have a very good reason to diverge. Changing the name of a target can be highly disruptive, especially once the target reaches a higher tier, so getting the name right is important even for a tier 3 target.\n\nUses the same naming as the LLVM target, and the same convention as other Apple targets.\n\n> Target names should not introduce undue confusion or ambiguity unless absolutely necessary to maintain ecosystem compatibility. For example, if the name of the target makes people extremely likely to form incorrect beliefs about what it targets, the name should be changed or augmented to disambiguate it.\n\nI don't believe there is any ambiguity here.\n\n> Tier 3 targets may have unusual requirements to build or use, but must not create legal issues or impose onerous legal terms for the Rust project or for Rust developers or users.\n\nI don't see any legal issues here.\n\n> The target must not introduce license incompatibilities.\n> Anything added to the Rust repository must be under the standard Rust license (MIT OR Apache-2.0).\n> The target must not cause the Rust tools or libraries built for any other host (even when supporting cross-compilation to the target) to depend on any new dependency less permissive than the Rust licensing policy. This applies whether the dependency is a Rust crate that would require adding new license exceptions (as specified by the tidy tool in the rust-lang/rust repository), or whether the dependency is a native library or binary. In other words, the introduction of the target must not cause a user installing or running a version of Rust or the Rust tools to be subject to any new license requirements.\n> If the target supports building host tools (such as rustc or cargo), those host tools must not depend on proprietary (non-FOSS) libraries, other than ordinary runtime libraries supplied by the platform and commonly used by other binaries built for the target. For instance, rustc built for the target may depend on a common proprietary C runtime library or console output library, but must not depend on a proprietary code generation library or code optimization library. Rust's license permits such combinations, but the Rust project has no interest in maintaining such combinations within the scope of Rust itself, even at tier 3.\n> Targets should not require proprietary (non-FOSS) components to link a functional binary or library.\n> \"onerous\" here is an intentionally subjective term. At a minimum, \"onerous\" legal/licensing terms include but are not limited to: non-disclosure requirements, non-compete requirements, contributor license agreements (CLAs) or equivalent, \"non-commercial\"/\"research-only\"/etc terms, requirements conditional on the employer or employment of any particular Rust developers, revocable terms, any requirements that create liability for the Rust project or its developers or users, or any requirements that adversely affect the livelihood or prospects of the Rust project or its developers or users.\n\nI see no issues with any of the above.\n\n> Neither this policy nor any decisions made regarding targets shall create any binding agreement or estoppel by any party. If any member of an approving Rust team serves as one of the maintainers of a target, or has any legal or employment requirement (explicit or implicit) that might affect their decisions regarding a target, they must recuse themselves from any approval decisions regarding the target's tier status, though they may otherwise participate in discussions.\n> This requirement does not prevent part or all of this policy from being cited in an explicit contract or work agreement (e.g. to implement or maintain support for a target). This requirement exists to ensure that a developer or team responsible for reviewing and approving a target does not face any legal threats or obligations that would prevent them from freely exercising their judgment in such approval, even if such judgment involves subjective matters or goes beyond the letter of these requirements.\n\nOnly relevant to those making approval decisions.\n\n> Tier 3 targets should attempt to implement as much of the standard libraries as possible and appropriate (core for most targets, alloc for targets that can support dynamic memory allocation, std for targets with an operating system or equivalent layer of system-provided functionality), but may leave some code unimplemented (either unavailable or stubbed out as appropriate), whether because the target makes it impossible to implement or challenging to implement. The authors of pull requests are not obligated to avoid calling any portions of the standard library on the basis of a tier 3 target not implementing those portions.\n\ncore and alloc can be used. std support will be added in a subsequent PR.\n\n> The target must provide documentation for the Rust community explaining how to build for the target, using cross-compilation if possible. If the target supports running tests (even if they do not pass), the documentation must explain how to run tests for the target, using emulation if possible or dedicated hardware if necessary.\n\nUse --target=<target> option to cross compile, just like any target. Tests can be run using the WatchOS simulator (see https://developer.apple.com/documentation/xcode/running-your-app-in-the-simulator-or-on-a-device).\n\n> Tier 3 targets must not impose burden on the authors of pull requests, or other developers in the community, to maintain the target. In particular, do not post comments (automated or manual) on a PR that derail or suggest a block on the PR based on a tier 3 target. Do not send automated messages or notifications (via any medium, including via `@)` to a PR author or others involved with a PR regarding a tier 3 target, unless they have opted into such messages.\n> Backlinks such as those generated by the issue/PR tracker when linking to an issue or PR are not considered a violation of this policy, within reason. However, such messages (even on a separate repository) must not generate notifications to anyone involved with a PR who has not requested such notifications.\n\nI don't foresee this being a problem.\n\n> Patches adding or updating tier 3 targets must not break any existing tier 2 or tier 1 target, and must not knowingly break another tier 3 target without approval of either the compiler team or the maintainers of the other tier 3 target.\n> In particular, this may come up when working on closely related targets, such as variations of the same architecture with different features. Avoid introducing unconditional uses of features that another variation of the target may not have; use conditional compilation or runtime detection, as appropriate, to let each target run code supported by that target.\n\nNo other targets should be affected by the pull request.", "tree": {"sha": "1002c0e65160b0aeccec5f50bbc27bd945eb7265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1002c0e65160b0aeccec5f50bbc27bd945eb7265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/537920eedbd30ceb2828b3d909bb663c83f6fce1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJip757CRBK7hj4Ov3rIwAAhFsIAJkoM8TrYA7o+7WtPq9StauN\n3Bsqa280xLC5R9fKtyTXNAZ9bjgsX0Utcvz43++L3LbF7h9EzVroKsTME5zx4+rd\nzyu6XrJG5LUVy/3iAcrFsR+b9X4aD1mcz3E8rm7WgNribMgOeBgDONQMDEUn71lW\nmJwHqAnUkRudlvUwu7l/oUi6wGam0auj80ktNsS9j2wIdgNLmjr7dapLT8o5bIev\nwHLGzFeeQAAki7cJLcDCmD2KdGp7vbtM5JUb+2zLhpNvoUvbtOHNx+CMVqoRn+dJ\nnPBrijTumnS61J/zaEWECjaOjUWFKpPj5bNSClsGQJX94UjWIhTnDUbhLIqbSVw=\n=F0R4\n-----END PGP SIGNATURE-----\n", "payload": "tree 1002c0e65160b0aeccec5f50bbc27bd945eb7265\nparent e3a3c00be805c265e5be3b478d76423371459c3b\nparent dc5c61028ab9e0a1985ccc913fcab88b5f50efb6\nauthor Yuki Okushi <jtitor@2k36.org> 1655160443 +0900\ncommitter GitHub <noreply@github.com> 1655160443 +0900\n\nRollup merge of #95243 - vladimir-ea:compiler_watch_os, r=nagisa\n\nAdd Apple WatchOS compile targets\n\nHello,\n\nI would like to add the following target triples for Apple WatchOS as Tier 3 platforms:\n\narmv7k-apple-watchos\narm64_32-apple-watchos\nx86_64-apple-watchos-sim\nThere are some pre-requisites Pull Requests:\nhttps://github.com/rust-lang/compiler-builtins/pull/456 (merged)\nhttps://github.com/alexcrichton/cc-rs/pull/662 (pending)\nhttps://github.com/rust-lang/libc/pull/2717 (merged)\n\nThere will be a subsequent PR with standard library changes for WatchOS.  Previous compiler and library changes were in a single PR (https://github.com/rust-lang/rust/pull/94736) which is now closed in favour of separate PRs.\n\nMany thanks!\nVlad.\n\n### Tier 3 Target Requirements\n\nAdds support for Apple WatchOS compile targets.\n\nBelow are details on how this target meets the requirements for tier 3:\n\n>   tier 3 target must have a designated developer or developers (the \"target maintainers\") on record to be CCed when issues arise regarding the target. (The mechanism to track and CC such developers may evolve over time.)\n\n`@deg4uss3r` has volunteered to be the target maintainer. I am also happy to help if a second maintainer is required.\n\n> Targets must use naming consistent with any existing targets; for instance, a target for the same CPU or OS as an existing Rust target should use the same name for that CPU or OS. Targets should normally use the same names and naming conventions as used elsewhere in the broader ecosystem beyond Rust (such as in other toolchains), unless they have a very good reason to diverge. Changing the name of a target can be highly disruptive, especially once the target reaches a higher tier, so getting the name right is important even for a tier 3 target.\n\nUses the same naming as the LLVM target, and the same convention as other Apple targets.\n\n> Target names should not introduce undue confusion or ambiguity unless absolutely necessary to maintain ecosystem compatibility. For example, if the name of the target makes people extremely likely to form incorrect beliefs about what it targets, the name should be changed or augmented to disambiguate it.\n\nI don't believe there is any ambiguity here.\n\n> Tier 3 targets may have unusual requirements to build or use, but must not create legal issues or impose onerous legal terms for the Rust project or for Rust developers or users.\n\nI don't see any legal issues here.\n\n> The target must not introduce license incompatibilities.\n> Anything added to the Rust repository must be under the standard Rust license (MIT OR Apache-2.0).\n> The target must not cause the Rust tools or libraries built for any other host (even when supporting cross-compilation to the target) to depend on any new dependency less permissive than the Rust licensing policy. This applies whether the dependency is a Rust crate that would require adding new license exceptions (as specified by the tidy tool in the rust-lang/rust repository), or whether the dependency is a native library or binary. In other words, the introduction of the target must not cause a user installing or running a version of Rust or the Rust tools to be subject to any new license requirements.\n> If the target supports building host tools (such as rustc or cargo), those host tools must not depend on proprietary (non-FOSS) libraries, other than ordinary runtime libraries supplied by the platform and commonly used by other binaries built for the target. For instance, rustc built for the target may depend on a common proprietary C runtime library or console output library, but must not depend on a proprietary code generation library or code optimization library. Rust's license permits such combinations, but the Rust project has no interest in maintaining such combinations within the scope of Rust itself, even at tier 3.\n> Targets should not require proprietary (non-FOSS) components to link a functional binary or library.\n> \"onerous\" here is an intentionally subjective term. At a minimum, \"onerous\" legal/licensing terms include but are not limited to: non-disclosure requirements, non-compete requirements, contributor license agreements (CLAs) or equivalent, \"non-commercial\"/\"research-only\"/etc terms, requirements conditional on the employer or employment of any particular Rust developers, revocable terms, any requirements that create liability for the Rust project or its developers or users, or any requirements that adversely affect the livelihood or prospects of the Rust project or its developers or users.\n\nI see no issues with any of the above.\n\n> Neither this policy nor any decisions made regarding targets shall create any binding agreement or estoppel by any party. If any member of an approving Rust team serves as one of the maintainers of a target, or has any legal or employment requirement (explicit or implicit) that might affect their decisions regarding a target, they must recuse themselves from any approval decisions regarding the target's tier status, though they may otherwise participate in discussions.\n> This requirement does not prevent part or all of this policy from being cited in an explicit contract or work agreement (e.g. to implement or maintain support for a target). This requirement exists to ensure that a developer or team responsible for reviewing and approving a target does not face any legal threats or obligations that would prevent them from freely exercising their judgment in such approval, even if such judgment involves subjective matters or goes beyond the letter of these requirements.\n\nOnly relevant to those making approval decisions.\n\n> Tier 3 targets should attempt to implement as much of the standard libraries as possible and appropriate (core for most targets, alloc for targets that can support dynamic memory allocation, std for targets with an operating system or equivalent layer of system-provided functionality), but may leave some code unimplemented (either unavailable or stubbed out as appropriate), whether because the target makes it impossible to implement or challenging to implement. The authors of pull requests are not obligated to avoid calling any portions of the standard library on the basis of a tier 3 target not implementing those portions.\n\ncore and alloc can be used. std support will be added in a subsequent PR.\n\n> The target must provide documentation for the Rust community explaining how to build for the target, using cross-compilation if possible. If the target supports running tests (even if they do not pass), the documentation must explain how to run tests for the target, using emulation if possible or dedicated hardware if necessary.\n\nUse --target=<target> option to cross compile, just like any target. Tests can be run using the WatchOS simulator (see https://developer.apple.com/documentation/xcode/running-your-app-in-the-simulator-or-on-a-device).\n\n> Tier 3 targets must not impose burden on the authors of pull requests, or other developers in the community, to maintain the target. In particular, do not post comments (automated or manual) on a PR that derail or suggest a block on the PR based on a tier 3 target. Do not send automated messages or notifications (via any medium, including via `@)` to a PR author or others involved with a PR regarding a tier 3 target, unless they have opted into such messages.\n> Backlinks such as those generated by the issue/PR tracker when linking to an issue or PR are not considered a violation of this policy, within reason. However, such messages (even on a separate repository) must not generate notifications to anyone involved with a PR who has not requested such notifications.\n\nI don't foresee this being a problem.\n\n> Patches adding or updating tier 3 targets must not break any existing tier 2 or tier 1 target, and must not knowingly break another tier 3 target without approval of either the compiler team or the maintainers of the other tier 3 target.\n> In particular, this may come up when working on closely related targets, such as variations of the same architecture with different features. Avoid introducing unconditional uses of features that another variation of the target may not have; use conditional compilation or runtime detection, as appropriate, to let each target run code supported by that target.\n\nNo other targets should be affected by the pull request.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/537920eedbd30ceb2828b3d909bb663c83f6fce1", "html_url": "https://github.com/rust-lang/rust/commit/537920eedbd30ceb2828b3d909bb663c83f6fce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/537920eedbd30ceb2828b3d909bb663c83f6fce1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3a3c00be805c265e5be3b478d76423371459c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a3c00be805c265e5be3b478d76423371459c3b", "html_url": "https://github.com/rust-lang/rust/commit/e3a3c00be805c265e5be3b478d76423371459c3b"}, {"sha": "dc5c61028ab9e0a1985ccc913fcab88b5f50efb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc5c61028ab9e0a1985ccc913fcab88b5f50efb6", "html_url": "https://github.com/rust-lang/rust/commit/dc5c61028ab9e0a1985ccc913fcab88b5f50efb6"}], "stats": {"total": 240, "additions": 231, "deletions": 9}, "files": [{"sha": "d05d09a11eacddaa5203547ef3e608facced3b46", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -1036,7 +1036,8 @@ unsafe fn embed_bitcode(\n     // reason (see issue #90326 for historical background).\n     let is_apple = cgcx.opts.target_triple.triple().contains(\"-ios\")\n         || cgcx.opts.target_triple.triple().contains(\"-darwin\")\n-        || cgcx.opts.target_triple.triple().contains(\"-tvos\");\n+        || cgcx.opts.target_triple.triple().contains(\"-tvos\")\n+        || cgcx.opts.target_triple.triple().contains(\"-watchos\");\n     if is_apple\n         || cgcx.opts.target_triple.triple().starts_with(\"wasm\")\n         || cgcx.opts.target_triple.triple().starts_with(\"asmjs\")"}, {"sha": "e70509f3ecc4bcd578916f862dd47e10a0a232ae", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -2606,7 +2606,7 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     let os = &sess.target.os;\n     let llvm_target = &sess.target.llvm_target;\n     if sess.target.vendor != \"apple\"\n-        || !matches!(os.as_ref(), \"ios\" | \"tvos\")\n+        || !matches!(os.as_ref(), \"ios\" | \"tvos\" | \"watchos\")\n         || flavor != LinkerFlavor::Gcc\n     {\n         return;\n@@ -2616,11 +2616,16 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n         (\"x86_64\", \"tvos\") => \"appletvsimulator\",\n         (\"arm\", \"ios\") => \"iphoneos\",\n         (\"aarch64\", \"ios\") if llvm_target.contains(\"macabi\") => \"macosx\",\n-        (\"aarch64\", \"ios\") if llvm_target.contains(\"sim\") => \"iphonesimulator\",\n+        (\"aarch64\", \"ios\") if llvm_target.ends_with(\"-simulator\") => \"iphonesimulator\",\n         (\"aarch64\", \"ios\") => \"iphoneos\",\n         (\"x86\", \"ios\") => \"iphonesimulator\",\n         (\"x86_64\", \"ios\") if llvm_target.contains(\"macabi\") => \"macosx\",\n         (\"x86_64\", \"ios\") => \"iphonesimulator\",\n+        (\"x86_64\", \"watchos\") => \"watchsimulator\",\n+        (\"arm64_32\", \"watchos\") => \"watchos\",\n+        (\"aarch64\", \"watchos\") if llvm_target.ends_with(\"-simulator\") => \"watchsimulator\",\n+        (\"aarch64\", \"watchos\") => \"watchos\",\n+        (\"arm\", \"watchos\") => \"watchos\",\n         _ => {\n             sess.err(&format!(\"unsupported arch `{}` for os `{}`\", arch, os));\n             return;\n@@ -2667,6 +2672,11 @@ fn get_apple_sdk_root(sdk_name: &str) -> Result<String, String> {\n             \"macosx10.15\"\n                 if sdkroot.contains(\"iPhoneOS.platform\")\n                     || sdkroot.contains(\"iPhoneSimulator.platform\") => {}\n+            \"watchos\"\n+                if sdkroot.contains(\"WatchSimulator.platform\")\n+                    || sdkroot.contains(\"MacOSX.platform\") => {}\n+            \"watchsimulator\"\n+                if sdkroot.contains(\"WatchOS.platform\") || sdkroot.contains(\"MacOSX.platform\") => {}\n             // Ignore `SDKROOT` if it's not a valid path.\n             _ if !p.is_absolute() || p == Path::new(\"/\") || !p.exists() => {}\n             _ => return Ok(sdkroot),"}, {"sha": "3059f42140be4178bbc63b7d561c39a22eb2529e", "filename": "compiler/rustc_target/src/spec/aarch64_apple_watchos_sim.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -0,0 +1,38 @@\n+use super::apple_sdk_base::{opts, Arch};\n+use crate::spec::{FramePointer, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let base = opts(\"watchos\", Arch::Arm64_sim);\n+\n+    // Clang automatically chooses a more specific target based on\n+    // WATCHOS_DEPLOYMENT_TARGET.\n+    // This is required for the simulator target to pick the right\n+    // MACH-O commands, so we do too.\n+    let arch = \"arm64\";\n+    let llvm_target = super::apple_base::watchos_sim_llvm_target(arch);\n+\n+    Target {\n+        llvm_target: llvm_target.into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n+        options: TargetOptions {\n+            features: \"+neon,+fp-armv8,+apple-a7\".into(),\n+            max_atomic_width: Some(128),\n+            forces_embed_bitcode: true,\n+            frame_pointer: FramePointer::NonLeaf,\n+            // Taken from a clang build on Xcode 11.4.1.\n+            // These arguments are not actually invoked - they just have\n+            // to look right to pass App Store validation.\n+            bitcode_llvm_cmdline: \"-triple\\0\\\n+                arm64-apple-watchos5.0-simulator\\0\\\n+                -emit-obj\\0\\\n+                -disable-llvm-passes\\0\\\n+                -target-abi\\0\\\n+                darwinpcs\\0\\\n+                -Os\\0\"\n+                .into(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "e8460a509e2ba6b3cacad150045ab4e5b5b3ee1d", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -114,3 +114,12 @@ pub fn ios_sim_llvm_target(arch: &str) -> String {\n     let (major, minor) = ios_deployment_target();\n     format!(\"{}-apple-ios{}.{}.0-simulator\", arch, major, minor)\n }\n+\n+fn watchos_deployment_target() -> (u32, u32) {\n+    deployment_target(\"WATCHOS_DEPLOYMENT_TARGET\").unwrap_or((5, 0))\n+}\n+\n+pub fn watchos_sim_llvm_target(arch: &str) -> String {\n+    let (major, minor) = watchos_deployment_target();\n+    format!(\"{}-apple-watchos{}.{}.0-simulator\", arch, major, minor)\n+}"}, {"sha": "ecb6cbd9f8a498657ca29f0bae93f06823a833f1", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -6,8 +6,10 @@ use Arch::*;\n #[derive(Copy, Clone)]\n pub enum Arch {\n     Armv7,\n+    Armv7k,\n     Armv7s,\n     Arm64,\n+    Arm64_32,\n     I386,\n     X86_64,\n     X86_64_macabi,\n@@ -17,7 +19,7 @@ pub enum Arch {\n \n fn target_abi(arch: Arch) -> &'static str {\n     match arch {\n-        Armv7 | Armv7s | Arm64 | I386 | X86_64 => \"\",\n+        Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 => \"\",\n         X86_64_macabi | Arm64_macabi => \"macabi\",\n         Arm64_sim => \"sim\",\n     }\n@@ -26,8 +28,10 @@ fn target_abi(arch: Arch) -> &'static str {\n fn target_cpu(arch: Arch) -> &'static str {\n     match arch {\n         Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n+        Armv7k => \"cortex-a8\",\n         Armv7s => \"cortex-a9\",\n         Arm64 => \"apple-a7\",\n+        Arm64_32 => \"apple-s4\",\n         I386 => \"yonah\",\n         X86_64 => \"core2\",\n         X86_64_macabi => \"core2\",\n@@ -38,7 +42,7 @@ fn target_cpu(arch: Arch) -> &'static str {\n \n fn link_env_remove(arch: Arch) -> Cow<'static, [Cow<'static, str>]> {\n     match arch {\n-        Armv7 | Armv7s | Arm64 | I386 | X86_64 | Arm64_sim => {\n+        Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 | Arm64_sim => {\n             cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n         }\n         X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],"}, {"sha": "7b23fe1c482e1d6448a926c20b9b421b4325de70", "filename": "compiler/rustc_target/src/spec/arm64_32_apple_watchos.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -0,0 +1,28 @@\n+use super::apple_sdk_base::{opts, Arch};\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let base = opts(\"watchos\", Arch::Arm64_32);\n+    Target {\n+        llvm_target: \"arm64_32-apple-watchos\".into(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:o-p:32:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n+        options: TargetOptions {\n+            features: \"+neon,+fp-armv8,+apple-a7\".into(),\n+            max_atomic_width: Some(64),\n+            forces_embed_bitcode: true,\n+            // These arguments are not actually invoked - they just have\n+            // to look right to pass App Store validation.\n+            bitcode_llvm_cmdline: \"-triple\\0\\\n+                arm64_32-apple-watchos5.0.0\\0\\\n+                -emit-obj\\0\\\n+                -disable-llvm-passes\\0\\\n+                -target-abi\\0\\\n+                darwinpcs\\0\\\n+                -Os\\0\"\n+                .into(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "af5d1c2ff45813f97615783bcf6ae8ee19974762", "filename": "compiler/rustc_target/src/spec/armv7k_apple_watchos.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -0,0 +1,28 @@\n+use super::apple_sdk_base::{opts, Arch};\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let base = opts(\"watchos\", Arch::Armv7k);\n+    Target {\n+        llvm_target: \"armv7k-apple-watchos\".into(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:o-p:32:32-Fi8-i64:64-a:0:32-n32-S128\".into(),\n+        arch: \"arm\".into(),\n+        options: TargetOptions {\n+            features: \"+v7,+vfp4,+neon\".into(),\n+            max_atomic_width: Some(64),\n+            forces_embed_bitcode: true,\n+            // These arguments are not actually invoked - they just have\n+            // to look right to pass App Store validation.\n+            bitcode_llvm_cmdline: \"-triple\\0\\\n+                armv7k-apple-watchos3.0.0\\0\\\n+                -emit-obj\\0\\\n+                -disable-llvm-passes\\0\\\n+                -target-abi\\0\\\n+                darwinpcs\\0\\\n+                -Os\\0\"\n+                .into(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "422af66787579ff7b10f129ea0d1480ace95191b", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -928,6 +928,11 @@ supported_targets! {\n     (\"aarch64-apple-tvos\", aarch64_apple_tvos),\n     (\"x86_64-apple-tvos\", x86_64_apple_tvos),\n \n+    (\"armv7k-apple-watchos\", armv7k_apple_watchos),\n+    (\"arm64_32-apple-watchos\", arm64_32_apple_watchos),\n+    (\"x86_64-apple-watchos-sim\", x86_64_apple_watchos_sim),\n+    (\"aarch64-apple-watchos-sim\", aarch64_apple_watchos_sim),\n+\n     (\"armebv7r-none-eabi\", armebv7r_none_eabi),\n     (\"armebv7r-none-eabihf\", armebv7r_none_eabihf),\n     (\"armv7r-none-eabi\", armv7r_none_eabi),"}, {"sha": "4dff3c2f209cd20c06165e884f404b3c7225ede9", "filename": "compiler/rustc_target/src/spec/x86_64_apple_watchos_sim.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -0,0 +1,35 @@\n+use super::apple_sdk_base::{opts, Arch};\n+use crate::spec::{StackProbeType, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let base = opts(\"watchos\", Arch::X86_64);\n+\n+    let arch = \"x86_64\";\n+    let llvm_target = super::apple_base::watchos_sim_llvm_target(arch);\n+\n+    Target {\n+        llvm_target: llvm_target.into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .into(),\n+        arch: \"x86_64\".into(),\n+        options: TargetOptions {\n+            max_atomic_width: Some(64),\n+            // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+            stack_probes: StackProbeType::Call,\n+            forces_embed_bitcode: true,\n+            // Taken from a clang build on Xcode 11.4.1.\n+            // These arguments are not actually invoked - they just have\n+            // to look right to pass App Store validation.\n+            bitcode_llvm_cmdline: \"-triple\\0\\\n+                x86_64-apple-watchos5.0-simulator\\0\\\n+                -emit-obj\\0\\\n+                -disable-llvm-passes\\0\\\n+                -target-abi\\0\\\n+                darwinpcs\\0\\\n+                -Os\\0\"\n+                .into(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "e23498873f3d38eccbcbeb419bcc3bfa84c5fe38", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -315,8 +315,11 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_ENABLE_ZLIB\", \"OFF\");\n         }\n \n-        // Are we compiling for iOS/tvOS?\n-        if target.contains(\"apple-ios\") || target.contains(\"apple-tvos\") {\n+        // Are we compiling for iOS/tvOS/watchOS?\n+        if target.contains(\"apple-ios\")\n+            || target.contains(\"apple-tvos\")\n+            || target.contains(\"apple-watchos\")\n+        {\n             // These two defines prevent CMake from automatically trying to add a MacOSX sysroot, which leads to a compiler error.\n             cfg.define(\"CMAKE_OSX_SYSROOT\", \"/\");\n             cfg.define(\"CMAKE_OSX_DEPLOYMENT_TARGET\", \"\");"}, {"sha": "e464564c12078f51ca941f1fe533d0cc0779919b", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -16,6 +16,7 @@\n     - [Target Tier Policy](target-tier-policy.md)\n     - [Template for Target-specific Documentation](platform-support/TEMPLATE.md)\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n+    - [\\*-apple-watchos\\*](platform-support/apple-watchos.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)"}, {"sha": "ec93bdd3fd37f8d2996445ec201d8b280f00e0a1", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -207,6 +207,7 @@ target | std | host | notes\n -------|:---:|:----:|-------\n `aarch64-apple-ios-macabi` | ? |  | Apple Catalyst on ARM64\n `aarch64-apple-tvos` | * |  | ARM64 tvOS\n+[`aarch64-apple-watchos-sim`](platform-support/apple-watchos.md) | \u2713 |  | ARM64 Apple WatchOS Simulator\n [`aarch64-kmc-solid_asp3`](platform-support/kmc-solid.md) | \u2713 |  | ARM64 SOLID with TOPPERS/ASP3\n [`aarch64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n@@ -220,6 +221,7 @@ target | std | host | notes\n `aarch64-wrs-vxworks` | ? |  |\n `aarch64_be-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (big-endian, ILP32 ABI)\n `aarch64_be-unknown-linux-gnu` | \u2713 | \u2713 | ARM64 Linux (big-endian)\n+[`arm64_32-apple-watchos`](platform-support/apple-watchos.md) | \u2713 | | ARM Apple WatchOS 64-bit with 32-bit pointers\n `armv4t-unknown-linux-gnueabi` | ? |  |\n `armv5te-unknown-linux-uclibceabi` | ? |  | ARMv5TE Linux with uClibc\n `armv6-unknown-freebsd` | \u2713 | \u2713 | ARMv6 FreeBSD\n@@ -234,6 +236,7 @@ target | std | host | notes\n [`armv7a-kmc-solid_asp3-eabi`](platform-support/kmc-solid.md) | \u2713 |  | ARM SOLID with TOPPERS/ASP3\n [`armv7a-kmc-solid_asp3-eabihf`](platform-support/kmc-solid.md) | \u2713 |  | ARM SOLID with TOPPERS/ASP3, hardfloat\n `armv7a-none-eabihf` | * | | ARM Cortex-A, hardfloat\n+[`armv7k-apple-watchos`](platform-support/apple-watchos.md) | \u2713 | | ARM Apple WatchOS\n `armv7s-apple-ios` | \u2713 |  |\n `avr-unknown-gnu-atmega328` | * |  | AVR. Requires `-Z build-std=core`\n `bpfeb-unknown-none` | * |  | BPF (big endian)\n@@ -290,6 +293,7 @@ target | std | host | notes\n [`wasm64-unknown-unknown`](platform-support/wasm64-unknown-unknown.md) | ? |  | WebAssembly\n `x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst on x86_64\n `x86_64-apple-tvos` | * | | x86 64-bit tvOS\n+[`x86_64-apple-watchos-sim`](platform-support/apple-watchos.md) | \u2713 | | x86 64-bit Apple WatchOS simulator\n [`x86_64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n `x86_64-pc-windows-msvc` | * |  | 64-bit Windows XP support\n `x86_64-sun-solaris` | ? |  | Deprecated target for 64-bit Solaris 10/11, illumos"}, {"sha": "fe4c7c0c88f6da1559ef939e153a188da60a3e8b", "filename": "src/doc/rustc/src/platform-support/apple-watchos.md", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fapple-watchos.md", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fapple-watchos.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fapple-watchos.md?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -0,0 +1,55 @@\n+# *-apple-watchos\n+- arm64_32-apple-watchos\n+- armv7k-apple-watchos\n+- aarch64-apple-watchos-sim\n+- x86_64-apple-watchos-sim\n+\n+**Tier: 3**\n+\n+Apple WatchOS targets:\n+- Apple WatchOS on Arm 64_32\n+- Apple WatchOS on Arm v7k\n+- Apple WatchOS Simulator on arm64\n+- Apple WatchOS Simulator on x86_64\n+\n+## Target maintainers\n+\n+* [@deg4uss3r](https://github.com/deg4uss3r)\n+* [@vladimir-ea](https://github.com/vladimir-ea)\n+\n+## Requirements\n+\n+These targets are cross-compiled.\n+To build these targets Xcode 12 or higher on macOS is required.\n+\n+## Building the target\n+\n+The targets can be built by enabling them for a `rustc` build, for example:\n+\n+```toml\n+[build]\n+build-stage = 1\n+target = [\"aarch64-apple-watchos-sim\"]\n+```\n+\n+## Building Rust programs\n+\n+*Note: Building for this target requires the corresponding WatchOS SDK, as provided by Xcode 12+.*\n+\n+Rust programs can be built for these targets, if `rustc` has been built with support for them, for example:\n+\n+```text\n+rustc --target aarch64-apple-watchos-sim your-code.rs\n+```\n+\n+## Testing\n+\n+There is no support for running the Rust testsuite on WatchOS or the simulators.\n+\n+There is no easy way to run simple programs on WatchOS or the WatchOS simulators. Static library builds can be embedded into WatchOS applications.\n+\n+## Cross-compilation toolchains and C code\n+\n+This target can be cross-compiled from x86_64 or aarch64 macOS hosts.\n+\n+Other hosts are not supported for cross-compilation, but might work when also providing the required Xcode SDK."}, {"sha": "24ce2280c8adffb9da49a1911526eef90cea3ccf", "filename": "src/test/ui/check-cfg/well-known-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -7,7 +7,7 @@ LL | #[cfg(target_os = \"linuz\")]\n    |                   help: did you mean: `\"linux\"`\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n-   = note: expected values for `target_os` are: android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, windows, xous\n+   = note: expected values for `target_os` are: android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, watchos, windows, xous\n \n warning: unexpected `cfg` condition value\n   --> $DIR/well-known-values.rs:14:7"}, {"sha": "bc2946e2c135426fda022bb56f745e37e3e6f67b", "filename": "src/tools/compiletest/src/raise_fd_limit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Ftools%2Fcompiletest%2Fsrc%2Fraise_fd_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Ftools%2Fcompiletest%2Fsrc%2Fraise_fd_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fraise_fd_limit.rs?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -4,7 +4,7 @@\n /// on the number of cores available.\n ///\n /// This fixes issue #7772.\n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n #[allow(non_camel_case_types)]\n pub unsafe fn raise_fd_limit() {\n     use std::cmp;"}, {"sha": "215af347f17d219d09939a88e811101ea3334b8d", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537920eedbd30ceb2828b3d909bb663c83f6fce1/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=537920eedbd30ceb2828b3d909bb663c83f6fce1", "patch": "@@ -31,6 +31,7 @@ const OS_TABLE: &[(&str, &str)] = &[\n     (\"redox\", \"redox\"),\n     (\"sgx\", \"sgx\"),\n     (\"solaris\", \"solaris\"),\n+    (\"watchos\", \"watchos\"),\n     (\"win32\", \"windows\"),\n     (\"windows\", \"windows\"),\n     (\"vxworks\", \"vxworks\"),"}]}