{"sha": "2c175df013a701321e44bcdba3c7ba7772ed3b94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMTc1ZGYwMTNhNzAxMzIxZTQ0YmNkYmEzYzdiYTc3NzJlZDNiOTQ=", "commit": {"author": {"name": "Irina-Gabriela Popa", "email": "irinagpopa@gmail.com", "date": "2017-11-27T15:21:13Z"}, "committer": {"name": "Irina-Gabriela Popa", "email": "irinagpopa@gmail.com", "date": "2017-12-04T16:25:31Z"}, "message": "rustc_back: replace tempdir with crates.io version.", "tree": {"sha": "d56166ea947d1850dacfb349c9e4f0ac03be83ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d56166ea947d1850dacfb349c9e4f0ac03be83ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c175df013a701321e44bcdba3c7ba7772ed3b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c175df013a701321e44bcdba3c7ba7772ed3b94", "html_url": "https://github.com/rust-lang/rust/commit/2c175df013a701321e44bcdba3c7ba7772ed3b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c175df013a701321e44bcdba3c7ba7772ed3b94/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dda924ab6a15ebccfa1be0bff5b88390f4195afd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda924ab6a15ebccfa1be0bff5b88390f4195afd", "html_url": "https://github.com/rust-lang/rust/commit/dda924ab6a15ebccfa1be0bff5b88390f4195afd"}], "stats": {"total": 145, "additions": 18, "deletions": 127}, "files": [{"sha": "dc15486fe7cb25c4cc1ad5b67d914a763582b2bf", "filename": "src/Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -1960,6 +1960,7 @@ dependencies = [\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n+ \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2013,6 +2014,7 @@ dependencies = [\n  \"html-diff 0.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "ccf1db778d2967f6e9971c4225efed55245edb5e", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -36,7 +36,6 @@ extern crate serialize;\n \n extern crate serialize as rustc_serialize; // used by deriving\n \n-pub mod tempdir;\n pub mod target;\n \n use std::str::FromStr;"}, {"sha": "1a2515366224c04cb585884fc110c90e1dd40073", "filename": "src/librustc_back/tempdir.rs", "status": "removed", "additions": 0, "deletions": 114, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/dda924ab6a15ebccfa1be0bff5b88390f4195afd/src%2Flibrustc_back%2Ftempdir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda924ab6a15ebccfa1be0bff5b88390f4195afd/src%2Flibrustc_back%2Ftempdir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftempdir.rs?ref=dda924ab6a15ebccfa1be0bff5b88390f4195afd", "patch": "@@ -1,114 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::env;\n-use std::io::{self, Error, ErrorKind};\n-use std::fs;\n-use std::path::{self, PathBuf, Path};\n-use rand::{thread_rng, Rng};\n-\n-/// A wrapper for a path to temporary directory implementing automatic\n-/// scope-based deletion.\n-pub struct TempDir {\n-    path: Option<PathBuf>,\n-}\n-\n-// How many times should we (re)try finding an unused random name? It should be\n-// enough that an attacker will run out of luck before we run out of patience.\n-const NUM_RETRIES: u32 = 1 << 31;\n-// How many characters should we include in a random file name? It needs to\n-// be enough to dissuade an attacker from trying to preemptively create names\n-// of that length, but not so huge that we unnecessarily drain the random number\n-// generator of entropy.\n-const NUM_RAND_CHARS: usize = 12;\n-\n-impl TempDir {\n-    /// Attempts to make a temporary directory inside of `tmpdir` whose name\n-    /// will have the prefix `prefix`. The directory will be automatically\n-    /// deleted once the returned wrapper is destroyed.\n-    ///\n-    /// If no directory can be created, `Err` is returned.\n-    #[allow(deprecated)] // rand usage\n-    pub fn new_in<P: AsRef<Path>>(tmpdir: P, prefix: &str)\n-                                  -> io::Result<TempDir> {\n-        Self::_new_in(tmpdir.as_ref(), prefix)\n-    }\n-\n-    fn _new_in(tmpdir: &Path, prefix: &str) -> io::Result<TempDir> {\n-        let storage;\n-        let mut tmpdir = tmpdir;\n-        if !tmpdir.is_absolute() {\n-            let cur_dir = env::current_dir()?;\n-            storage = cur_dir.join(tmpdir);\n-            tmpdir = &storage;\n-            // return TempDir::new_in(&cur_dir.join(tmpdir), prefix);\n-        }\n-\n-        let mut rng = thread_rng();\n-        for _ in 0..NUM_RETRIES {\n-            let suffix: String = rng.gen_ascii_chars().take(NUM_RAND_CHARS).collect();\n-            let leaf = if !prefix.is_empty() {\n-                format!(\"{}.{}\", prefix, suffix)\n-            } else {\n-                // If we're given an empty string for a prefix, then creating a\n-                // directory starting with \".\" would lead to it being\n-                // semi-invisible on some systems.\n-                suffix\n-            };\n-            let path = tmpdir.join(&leaf);\n-            match fs::create_dir(&path) {\n-                Ok(_) => return Ok(TempDir { path: Some(path) }),\n-                Err(ref e) if e.kind() == ErrorKind::AlreadyExists => {}\n-                Err(e) => return Err(e)\n-            }\n-        }\n-\n-        Err(Error::new(ErrorKind::AlreadyExists,\n-                       \"too many temporary directories already exist\"))\n-    }\n-\n-    /// Attempts to make a temporary directory inside of `env::temp_dir()` whose\n-    /// name will have the prefix `prefix`. The directory will be automatically\n-    /// deleted once the returned wrapper is destroyed.\n-    ///\n-    /// If no directory can be created, `Err` is returned.\n-    pub fn new(prefix: &str) -> io::Result<TempDir> {\n-        TempDir::new_in(&env::temp_dir(), prefix)\n-    }\n-\n-    /// Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\n-    /// This discards the wrapper so that the automatic deletion of the\n-    /// temporary directory is prevented.\n-    pub fn into_path(mut self) -> PathBuf {\n-        self.path.take().unwrap()\n-    }\n-\n-    /// Access the wrapped `std::path::Path` to the temporary directory.\n-    pub fn path(&self) -> &path::Path {\n-        self.path.as_ref().unwrap()\n-    }\n-\n-    fn cleanup_dir(&mut self) -> io::Result<()> {\n-        match self.path {\n-            Some(ref p) => fs::remove_dir_all(p),\n-            None => Ok(())\n-        }\n-    }\n-}\n-\n-impl Drop for TempDir {\n-    fn drop(&mut self) {\n-        let _ = self.cleanup_dir();\n-    }\n-}\n-\n-// the tests for this module need to change the path using change_dir,\n-// and this doesn't play nicely with other tests so these unit tests are located\n-// in src/test/run-pass/tempfile.rs"}, {"sha": "d8318ea808221f19853a4935379e2ac80a11fcb7", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -32,6 +32,7 @@ rustc_trans_utils = { path = \"../librustc_trans_utils\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+tempdir = \"0.3\"\n \n [target.\"cfg(windows)\".dependencies]\n cc = \"1.0.1\""}, {"sha": "a182d7c6fbe06ec1c8cf004c1f68333f25287fa0", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -26,7 +26,7 @@ use {CrateTranslation, CrateInfo};\n use rustc::util::common::time;\n use rustc::util::fs::fix_windows_verbatim_for_gcc;\n use rustc::hir::def_id::CrateNum;\n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n use rustc_back::{PanicStrategy, RelroLevel, LinkerFlavor};\n use context::get_reloc_model;\n use llvm;"}, {"sha": "3c2e56bf2a12721b0402c551eea71d692357d12e", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -63,6 +63,7 @@ extern crate rustc_errors as errors;\n extern crate serialize;\n #[cfg(windows)]\n extern crate cc; // Used to locate MSVC\n+extern crate tempdir;\n \n pub use base::trans_crate;\n use back::bytecode::RLIB_BYTECODE_EXTENSION;"}, {"sha": "fd8a6e0b5932644b486550888585d58d48566ca5", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -14,6 +14,7 @@ doctest = false\n log = \"0.3\"\n pulldown-cmark = { version = \"0.1.0\", default-features = false }\n html-diff = \"0.0.5\"\n+tempdir = \"0.3\"\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }"}, {"sha": "f0bb87015f80579cd398bcf5569c2caf9e379df7", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -48,6 +48,7 @@ extern crate std_unicode;\n #[macro_use] extern crate log;\n extern crate rustc_errors as errors;\n extern crate pulldown_cmark;\n+extern crate tempdir;\n \n extern crate serialize as rustc_serialize; // used by deriving\n "}, {"sha": "74a16cb867d74015fad38da8f309f14a9119d3b1", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -28,7 +28,7 @@ use rustc::session::{self, CompileIncomplete, config};\n use rustc::session::config::{OutputType, OutputTypes, Externs};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n use rustc_driver::{self, driver, Compilation};\n use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;"}, {"sha": "ba42cb870c97edf124f38b8192c76314cfb0074f", "filename": "src/test/run-pass-fulldeps/create-dir-all-bare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Ftest%2Frun-pass-fulldeps%2Fcreate-dir-all-bare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Ftest%2Frun-pass-fulldeps%2Fcreate-dir-all-bare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcreate-dir-all-bare.rs?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -12,11 +12,11 @@\n \n #![feature(rustc_private)]\n \n-extern crate rustc_back;\n+extern crate tempdir;\n \n use std::env;\n use std::fs;\n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n \n fn main() {\n     let td = TempDir::new(\"create-dir-all-bare\").unwrap();"}, {"sha": "121fd4a9825df0d3770b66ed3db7a1da5a468bf8", "filename": "src/test/run-pass-fulldeps/issue-15149.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15149.rs?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -13,13 +13,13 @@\n \n #![feature(rustc_private)]\n \n-extern crate rustc_back;\n+extern crate tempdir;\n \n use std::env;\n use std::fs;\n use std::process;\n use std::str;\n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n \n fn main() {\n     // If we're the child, make sure we were invoked correctly"}, {"sha": "7a2a4343522bb05e4ce8b062c246a3441f527793", "filename": "src/test/run-pass-fulldeps/rename-directory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -15,11 +15,11 @@\n \n #![feature(rustc_private)]\n \n-extern crate rustc_back;\n+extern crate tempdir;\n \n use std::ffi::CString;\n use std::fs::{self, File};\n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n \n fn rename_directory() {\n     let tmpdir = TempDir::new(\"rename_directory\").ok().expect(\"rename_directory failed\");"}, {"sha": "535ab711f5bcf62ee8803cd4c229a5809ec6775d", "filename": "src/test/run-pass-fulldeps/stdio-from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Ftest%2Frun-pass-fulldeps%2Fstdio-from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Ftest%2Frun-pass-fulldeps%2Fstdio-from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fstdio-from.rs?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -12,15 +12,15 @@\n \n #![feature(rustc_private)]\n \n-extern crate rustc_back;\n+extern crate tempdir;\n \n use std::env;\n use std::fs::File;\n use std::io;\n use std::io::{Read, Write};\n use std::process::{Command, Stdio};\n \n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n \n fn main() {\n     if env::args().len() > 1 {"}, {"sha": "16f7e2832853663452934ebbd86f0be7dc52783c", "filename": "src/test/run-pass-fulldeps/switch-stdout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Ftest%2Frun-pass-fulldeps%2Fswitch-stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c175df013a701321e44bcdba3c7ba7772ed3b94/src%2Ftest%2Frun-pass-fulldeps%2Fswitch-stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fswitch-stdout.rs?ref=2c175df013a701321e44bcdba3c7ba7772ed3b94", "patch": "@@ -10,12 +10,12 @@\n \n #![feature(rustc_private)]\n \n-extern crate rustc_back;\n+extern crate tempdir;\n \n use std::fs::File;\n use std::io::{Read, Write};\n \n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n \n #[cfg(unix)]\n fn switch_stdout_to(file: File) {"}]}