{"sha": "56d89364a5d097c73a1a148bd0c2760784ce0b9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZDg5MzY0YTVkMDk3YzczYTFhMTQ4YmQwYzI3NjA3ODRjZTBiOWM=", "commit": {"author": {"name": "JCTyblaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-12-11T18:42:36Z"}, "committer": {"name": "JCTyblaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-12-11T18:42:36Z"}, "message": "Add post-initialization hook for static memory initialized using the interpereter.", "tree": {"sha": "0157b8cb383339a481b000b0d0df68791721f217", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0157b8cb383339a481b000b0d0df68791721f217"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d89364a5d097c73a1a148bd0c2760784ce0b9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d89364a5d097c73a1a148bd0c2760784ce0b9c", "html_url": "https://github.com/rust-lang/rust/commit/56d89364a5d097c73a1a148bd0c2760784ce0b9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d89364a5d097c73a1a148bd0c2760784ce0b9c/comments", "author": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9f7d19a916419dbb652d3f272bdc0b5578b6d61", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f7d19a916419dbb652d3f272bdc0b5578b6d61", "html_url": "https://github.com/rust-lang/rust/commit/a9f7d19a916419dbb652d3f272bdc0b5578b6d61"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "67166062d40dabbdf3580bad9aef1f45dfd6c1e2", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56d89364a5d097c73a1a148bd0c2760784ce0b9c/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d89364a5d097c73a1a148bd0c2760784ce0b9c/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=56d89364a5d097c73a1a148bd0c2760784ce0b9c", "patch": "@@ -9,6 +9,7 @@ use std::hash::Hash;\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::def_id::DefId;\n+use rustc_target::abi::Size;\n \n use super::{\n     AllocId, Allocation, AllocationExtra, CheckInAllocMsg, Frame, ImmTy, InterpCx, InterpResult,\n@@ -299,6 +300,15 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         Ok(())\n     }\n \n+    /// Called after initializing static memory using the interpreter.\n+    fn after_static_mem_initialized(\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        _ptr: Pointer<Self::PointerTag>,\n+        _size: Size\n+    ) -> InterpResult<'tcx> {\n+        Ok(())\n+    }\n+\n     /// Executes a retagging operation\n     #[inline]\n     fn retag("}, {"sha": "18dba4775980b513760f9d372b77daf51872a454", "filename": "compiler/rustc_mir/src/interpret/traits.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56d89364a5d097c73a1a148bd0c2760784ce0b9c/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d89364a5d097c73a1a148bd0c2760784ce0b9c/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs?ref=56d89364a5d097c73a1a148bd0c2760784ce0b9c", "patch": "@@ -56,8 +56,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // If you touch this code, be sure to also make the corresponding changes to\n         // `get_vtable` in `rust_codegen_llvm/meth.rs`.\n         // /////////////////////////////////////////////////////////////////////////////////////////\n+        let vtable_size = ptr_size * u64::try_from(methods.len()).unwrap().checked_add(3).unwrap();\n         let vtable = self.memory.allocate(\n-            ptr_size * u64::try_from(methods.len()).unwrap().checked_add(3).unwrap(),\n+            vtable_size,\n             ptr_align,\n             MemoryKind::Vtable,\n         );\n@@ -93,6 +94,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         }\n \n+        M::after_static_mem_initialized(self, vtable, vtable_size)?;\n+\n         self.memory.mark_immutable(vtable.alloc_id)?;\n         assert!(self.vtables.insert((ty, poly_trait_ref), vtable).is_none());\n "}]}