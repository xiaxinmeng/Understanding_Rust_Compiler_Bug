{"sha": "03ac54aed6f728ab4e5e18a10b5c3887782924cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYWM1NGFlZDZmNzI4YWI0ZTVlMThhMTBiNWMzODg3NzgyOTI0Y2Y=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-09-24T14:14:43Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-09-24T14:14:43Z"}, "message": "Add const-eval support for SIMD types, insert, and extract", "tree": {"sha": "91f65ab848d03a9bf61f4fa849e0b296537f1bdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91f65ab848d03a9bf61f4fa849e0b296537f1bdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03ac54aed6f728ab4e5e18a10b5c3887782924cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03ac54aed6f728ab4e5e18a10b5c3887782924cf", "html_url": "https://github.com/rust-lang/rust/commit/03ac54aed6f728ab4e5e18a10b5c3887782924cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03ac54aed6f728ab4e5e18a10b5c3887782924cf/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "html_url": "https://github.com/rust-lang/rust/commit/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea"}], "stats": {"total": 145, "additions": 143, "deletions": 2}, "files": [{"sha": "0ede068190597420b62cb2381c463dd847cd0db3", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/03ac54aed6f728ab4e5e18a10b5c3887782924cf/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ac54aed6f728ab4e5e18a10b5c3887782924cf/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=03ac54aed6f728ab4e5e18a10b5c3887782924cf", "patch": "@@ -239,7 +239,25 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             \"transmute\" => {\n                 self.copy_op_transmute(args[0], dest)?;\n             }\n-\n+            \"simd_insert\" => {\n+                let mut vector = self.read_vector(args[0])?;\n+                let index = self.read_scalar(args[1])?.to_u32()? as usize;\n+                let scalar = self.read_immediate(args[2])?;\n+                if vector[index].layout.size == scalar.layout.size {\n+                    vector[index] = scalar;\n+                } else {\n+                    throw_ub_format!(\n+                        \"Inserting `{:?}` with size `{}` to a vector element place of size `{}`\",\n+                        scalar, scalar.layout.size.bytes(), vector[index].layout.size.bytes()\n+                    );\n+                }\n+                self.write_vector(vector, dest)?;\n+            }\n+            \"simd_extract\" => {\n+                let index = self.read_scalar(args[1])?.to_u32()? as _;\n+                let scalar = self.read_immediate(self.operand_field(args[0], index)?)?;\n+                self.write_immediate(*scalar, dest)?;\n+            }\n             _ => return Ok(false),\n         }\n "}, {"sha": "184e2ee9516fcb08c9900c081afa10a2966b53ad", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/03ac54aed6f728ab4e5e18a10b5c3887782924cf/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ac54aed6f728ab4e5e18a10b5c3887782924cf/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=03ac54aed6f728ab4e5e18a10b5c3887782924cf", "patch": "@@ -335,6 +335,21 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n+    /// Read vector from operand `op`\n+    pub fn read_vector(&self, op: OpTy<'tcx, M::PointerTag>)\n+                       -> InterpResult<'tcx, Vec<ImmTy<'tcx, M::PointerTag>>> {\n+        if let layout::Abi::Vector { count, .. } = op.layout.abi {\n+            assert_ne!(count, 0);\n+            let mut scalars = Vec::new();\n+            for index in 0..count {\n+                scalars.push(self.read_immediate(self.operand_field(op, index as _)?)?);\n+            }\n+            Ok(scalars)\n+        } else {\n+            bug!(\"type is not a vector: {:?}, abi: {:?}\", op.layout.ty, op.layout.abi);\n+        }\n+    }\n+\n     /// Read a scalar from a place\n     pub fn read_scalar(\n         &self,"}, {"sha": "9154e2666c598a53e89e286c8ee7597ab58a537c", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/03ac54aed6f728ab4e5e18a10b5c3887782924cf/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ac54aed6f728ab4e5e18a10b5c3887782924cf/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=03ac54aed6f728ab4e5e18a10b5c3887782924cf", "patch": "@@ -696,6 +696,40 @@ where\n         Ok(())\n     }\n \n+    /// Writes the `scalar` to the `index`-th element of the `vector`.\n+    pub fn write_scalar_to_vector(\n+        &mut self,\n+        scalar: ImmTy<'tcx, M::PointerTag>,\n+        vector: PlaceTy<'tcx, M::PointerTag>,\n+        index: usize,\n+    ) -> InterpResult<'tcx> {\n+        let index = index as u64;\n+        let place = self.place_field(vector, index)?;\n+        self.write_immediate(*scalar, place)?;\n+        Ok(())\n+    }\n+\n+    /// Writes the `scalars` to the `vector`.\n+    pub fn write_vector(\n+        &mut self,\n+        scalars: Vec<ImmTy<'tcx, M::PointerTag>>,\n+        vector: PlaceTy<'tcx, M::PointerTag>,\n+    ) -> InterpResult<'tcx> {\n+        assert_ne!(scalars.len(), 0);\n+        match vector.layout.ty.sty {\n+            ty::Adt(def, ..) if def.repr.simd() => {\n+                let tcx = &*self.tcx;\n+                let count = vector.layout.ty.simd_size(*tcx);\n+                assert_eq!(count, scalars.len());\n+                for index in 0..scalars.len() {\n+                    self.write_scalar_to_vector(scalars[index], vector, index)?;\n+                }\n+            }\n+            _ => bug!(\"not a vector\"),\n+        }\n+        Ok(())\n+    }\n+\n     /// Write an `Immediate` to memory.\n     #[inline(always)]\n     pub fn write_immediate_to_mplace("}, {"sha": "a324c58512406e76b255d8ae252d49dc10084a38", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03ac54aed6f728ab4e5e18a10b5c3887782924cf/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ac54aed6f728ab4e5e18a10b5c3887782924cf/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=03ac54aed6f728ab4e5e18a10b5c3887782924cf", "patch": "@@ -249,7 +249,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n-                if caller_abi != Abi::RustIntrinsic {\n+                if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = caller_abi {\n+                    // ok\n+                } else {\n                     throw_unsup!(FunctionAbiMismatch(caller_abi, Abi::RustIntrinsic))\n                 }\n                 // The intrinsic itself cannot diverge, so if we got here without a return"}, {"sha": "a0f088cc636fcf9ff92864a7218dd9b4c7f717ab", "filename": "src/test/ui/consts/const-eval/const_eval-simd.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/03ac54aed6f728ab4e5e18a10b5c3887782924cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_eval-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ac54aed6f728ab4e5e18a10b5c3887782924cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_eval-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_eval-simd.rs?ref=03ac54aed6f728ab4e5e18a10b5c3887782924cf", "patch": "@@ -0,0 +1,24 @@\n+// run-pass\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)] struct i8x1(i8);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_insert<T, U>(x: T, idx: u32, val: U) -> T;\n+    fn simd_extract<T, U>(x: T, idx: u32) -> U;\n+}\n+\n+const fn foo(x: i8x1) -> i8 {\n+    unsafe { simd_insert(x, 0_u32, 42_i8) }.0\n+}\n+\n+fn main() {\n+    const V: i8x1 = i8x1(13);\n+    const X: i8 = foo(V);\n+    const Y: i8 = unsafe { simd_extract(V, 0) };\n+    assert_eq!(X, 42);\n+    assert_eq!(Y, 13);\n+}"}, {"sha": "7fc068718b0bef11a9b841dd125f23459fbead93", "filename": "src/test/ui/consts/const-eval/const_eval-simd.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/03ac54aed6f728ab4e5e18a10b5c3887782924cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_eval-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03ac54aed6f728ab4e5e18a10b5c3887782924cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_eval-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_eval-simd.stderr?ref=03ac54aed6f728ab4e5e18a10b5c3887782924cf", "patch": "@@ -0,0 +1,48 @@\n+warning: skipping const checks\n+  --> $DIR/const_eval-simd.rs:22:5\n+   |\n+LL |     assert_eq!(X, 42);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_eval-simd.rs:22:5\n+   |\n+LL |     assert_eq!(X, 42);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_eval-simd.rs:22:5\n+   |\n+LL |     assert_eq!(X, 42);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_eval-simd.rs:23:5\n+   |\n+LL |     assert_eq!(Y, 13);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_eval-simd.rs:23:5\n+   |\n+LL |     assert_eq!(Y, 13);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_eval-simd.rs:23:5\n+   |\n+LL |     assert_eq!(Y, 13);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+"}]}