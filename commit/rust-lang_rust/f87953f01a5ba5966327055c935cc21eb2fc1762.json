{"sha": "f87953f01a5ba5966327055c935cc21eb2fc1762", "node_id": "C_kwDOAAsO6NoAKGY4Nzk1M2YwMWE1YmE1OTY2MzI3MDU1YzkzNWNjMjFlYjJmYzE3NjI", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-07-27T15:34:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-27T15:34:46Z"}, "message": "fix universe map in ifcx.instantiate_canonical_*\n\nPreviously, `infcx.instantiate_canonical_*` maps the root universe in `canonical` into `ty::UniverseIndex::Root`, I think because it assumes it works with a fresh `infcx` but this is not true for the use cases in mir typeck. Now the root universe is mapped into `infcx.universe()`.\r\n\r\nI catched this accidentally while reviewing the code. I'm not sure if this is the right fix or if it is really a bug!", "tree": {"sha": "6b540ce5e6da74b54fa28ad2f79edda9e20fad65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b540ce5e6da74b54fa28ad2f79edda9e20fad65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f87953f01a5ba5966327055c935cc21eb2fc1762", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4VsWCRBK7hj4Ov3rIwAArcoIAFEZMf7CFM5JczqnPEnP+fs8\nxbgZK9tcxHl8BMO2NDdrxiNsiT56JxCOzqplWeztt/GF1IsCshETjoH6AoU5Hod/\nnc/L+6p4HHEhTAoJ7cE+J0z7tK7dmQAu17JCnjNb8vztNEg8pRSP4tbnWGbLmXgX\niPayJ/ciDmf2+HCc6w6A2hff2+UfVg7jjMo2IXR9kST/Rkl4aGwE4xiao8ecCpDr\n6QpkTRByGyX+Okq9/s01ZQbH2T8LR8r/kkzt08WVQqO4ICHNL8bOAtsu3KYh3lbp\nwElf/R3E2IVD65FTOVw09nUBh0Ebh3ZN5NYDVGwXwC5qT1DB5eGyQDruCTck3+U=\n=A6OP\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b540ce5e6da74b54fa28ad2f79edda9e20fad65\nparent 2a220937c283803bfd5d1155e4a81e6287089504\nauthor Ali MJ Al-Nasrawy <alimjalnasrawy@gmail.com> 1658936086 +0300\ncommitter GitHub <noreply@github.com> 1658936086 +0300\n\nfix universe map in ifcx.instantiate_canonical_*\n\nPreviously, `infcx.instantiate_canonical_*` maps the root universe in `canonical` into `ty::UniverseIndex::Root`, I think because it assumes it works with a fresh `infcx` but this is not true for the use cases in mir typeck. Now the root universe is mapped into `infcx.universe()`.\r\n\r\nI catched this accidentally while reviewing the code. I'm not sure if this is the right fix or if it is really a bug!"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f87953f01a5ba5966327055c935cc21eb2fc1762", "html_url": "https://github.com/rust-lang/rust/commit/f87953f01a5ba5966327055c935cc21eb2fc1762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f87953f01a5ba5966327055c935cc21eb2fc1762/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a220937c283803bfd5d1155e4a81e6287089504", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a220937c283803bfd5d1155e4a81e6287089504", "html_url": "https://github.com/rust-lang/rust/commit/2a220937c283803bfd5d1155e4a81e6287089504"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "270c05a23707595fe9da15a053c97b51d610352e", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f87953f01a5ba5966327055c935cc21eb2fc1762/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87953f01a5ba5966327055c935cc21eb2fc1762/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=f87953f01a5ba5966327055c935cc21eb2fc1762", "patch": "@@ -41,7 +41,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// inference variables and applies it to the canonical value.\n     /// Returns both the instantiated result *and* the substitution S.\n     ///\n-    /// This is only meant to be invoked as part of constructing an\n+    /// This can be invoked as part of constructing an\n     /// inference context at the start of a query (see\n     /// `InferCtxtBuilder::enter_with_canonical`). It basically\n     /// brings the canonical value \"into scope\" within your new infcx.\n@@ -63,8 +63,8 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         // in them, so this code has no effect, but it is looking\n         // forward to the day when we *do* want to carry universes\n         // through into queries.\n-        let universes: IndexVec<ty::UniverseIndex, _> = std::iter::once(ty::UniverseIndex::ROOT)\n-            .chain((0..canonical.max_universe.as_u32()).map(|_| self.create_next_universe()))\n+        let universes: IndexVec<ty::UniverseIndex, _> = std::iter::once(self.universe())\n+            .chain((1..=canonical.max_universe.as_u32()).map(|_| self.create_next_universe()))\n             .collect();\n \n         let canonical_inference_vars ="}]}