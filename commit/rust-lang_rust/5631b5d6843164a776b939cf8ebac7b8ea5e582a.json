{"sha": "5631b5d6843164a776b939cf8ebac7b8ea5e582a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MzFiNWQ2ODQzMTY0YTc3NmI5MzljZjhlYmFjN2I4ZWE1ZTU4MmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-19T09:47:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-19T09:47:50Z"}, "message": "Rollup merge of #76749 - guswynn:hir_ranges, r=estebank\n\ngive *even better* suggestion when matching a const range\n\nnotice that the err already has \"constant defined here\"\nso this is now *exceedingly clear*\n\nextension to #76222\n\nr? @estebank", "tree": {"sha": "36ae6ef035549d8c7323180df74a0f7013d2ab7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36ae6ef035549d8c7323180df74a0f7013d2ab7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5631b5d6843164a776b939cf8ebac7b8ea5e582a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZdPHCRBK7hj4Ov3rIwAAdHIIABYumsOzNLbm1B6axddOJYs6\nyhU9HRdYC3ycVdjI8PiSYgwxI0sqKsEd3Oid3bxxJJEO1XB0IRQR2pRAgAX+JJmm\nPsoxlz4jDGt+6Hn8dxl8r7HQ9rx+dIGGtEhI+GpvAurBfjXbGAJ1wmYgrnWfQ+S4\ntLn2ppQlH+waKInVq1eOcrkac9Q5rm1OcN+TBZbYROwcCQ8hlyAV1glp8cIUlmCm\n2Hfd3QK+wUx6mZyH5HAsUreENmvLWK7pUblED1DfNRNPbWC014lNWpbfc/WdFWSS\nEADwcqdDwH/CLqsk9i62RzUz9l9Liaxn13MkYKTZd3T7GXWEEhH48XK6QV3OWVo=\n=53uz\n-----END PGP SIGNATURE-----\n", "payload": "tree 36ae6ef035549d8c7323180df74a0f7013d2ab7d\nparent 8a7cb1eac1764da047196f7e3572fb12ca1a22d4\nparent 230355f25f10306211a80040bec1561545715383\nauthor Ralf Jung <post@ralfj.de> 1600508870 +0200\ncommitter GitHub <noreply@github.com> 1600508870 +0200\n\nRollup merge of #76749 - guswynn:hir_ranges, r=estebank\n\ngive *even better* suggestion when matching a const range\n\nnotice that the err already has \"constant defined here\"\nso this is now *exceedingly clear*\n\nextension to #76222\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5631b5d6843164a776b939cf8ebac7b8ea5e582a", "html_url": "https://github.com/rust-lang/rust/commit/5631b5d6843164a776b939cf8ebac7b8ea5e582a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5631b5d6843164a776b939cf8ebac7b8ea5e582a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a7cb1eac1764da047196f7e3572fb12ca1a22d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7cb1eac1764da047196f7e3572fb12ca1a22d4", "html_url": "https://github.com/rust-lang/rust/commit/8a7cb1eac1764da047196f7e3572fb12ca1a22d4"}, {"sha": "230355f25f10306211a80040bec1561545715383", "url": "https://api.github.com/repos/rust-lang/rust/commits/230355f25f10306211a80040bec1561545715383", "html_url": "https://github.com/rust-lang/rust/commit/230355f25f10306211a80040bec1561545715383"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "321472b8fe8d36332fbf7f29305c95d38e6e1704", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5631b5d6843164a776b939cf8ebac7b8ea5e582a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5631b5d6843164a776b939cf8ebac7b8ea5e582a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=5631b5d6843164a776b939cf8ebac7b8ea5e582a", "patch": "@@ -1,5 +1,6 @@\n use crate::check::FnCtxt;\n use rustc_ast as ast;\n+\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n@@ -740,6 +741,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat_ty\n     }\n \n+    fn maybe_suggest_range_literal(\n+        &self,\n+        e: &mut DiagnosticBuilder<'_>,\n+        opt_def_id: Option<hir::def_id::DefId>,\n+        ident: Ident,\n+    ) -> bool {\n+        match opt_def_id {\n+            Some(def_id) => match self.tcx.hir().get_if_local(def_id) {\n+                Some(hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Const(_, body_id), ..\n+                })) => match self.tcx.hir().get(body_id.hir_id) {\n+                    hir::Node::Expr(expr) => {\n+                        if hir::is_range_literal(expr) {\n+                            let span = self.tcx.hir().span(body_id.hir_id);\n+                            if let Ok(snip) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                                e.span_suggestion_verbose(\n+                                    ident.span,\n+                                    \"you may want to move the range into the match block\",\n+                                    snip,\n+                                    Applicability::MachineApplicable,\n+                                );\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                    _ => (),\n+                },\n+                _ => (),\n+            },\n+            _ => (),\n+        }\n+        false\n+    }\n+\n     fn emit_bad_pat_path(\n         &self,\n         mut e: DiagnosticBuilder<'_>,\n@@ -772,12 +807,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         );\n                     }\n                     _ => {\n-                        let const_def_id = match pat_ty.kind() {\n+                        let (type_def_id, item_def_id) = match pat_ty.kind() {\n                             Adt(def, _) => match res {\n-                                Res::Def(DefKind::Const, _) => Some(def.did),\n-                                _ => None,\n+                                Res::Def(DefKind::Const, def_id) => (Some(def.did), Some(def_id)),\n+                                _ => (None, None),\n                             },\n-                            _ => None,\n+                            _ => (None, None),\n                         };\n \n                         let ranges = &[\n@@ -788,11 +823,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.tcx.lang_items().range_inclusive_struct(),\n                             self.tcx.lang_items().range_to_inclusive_struct(),\n                         ];\n-                        if const_def_id != None && ranges.contains(&const_def_id) {\n-                            let msg = \"constants only support matching by type, \\\n-                                if you meant to match against a range of values, \\\n-                                consider using a range pattern like `min ..= max` in the match block\";\n-                            e.note(msg);\n+                        if type_def_id != None && ranges.contains(&type_def_id) {\n+                            if !self.maybe_suggest_range_literal(&mut e, item_def_id, *ident) {\n+                                let msg = \"constants only support matching by type, \\\n+                                    if you meant to match against a range of values, \\\n+                                    consider using a range pattern like `min ..= max` in the match block\";\n+                                e.note(msg);\n+                            }\n                         } else {\n                             let msg = \"introduce a new binding instead\";\n                             let sugg = format!(\"other_{}\", ident.as_str().to_lowercase());"}, {"sha": "d9790d2b56e2895fed4a1ec169ed63fd8bfa07f1", "filename": "src/test/ui/issues/issue-76191.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5631b5d6843164a776b939cf8ebac7b8ea5e582a/src%2Ftest%2Fui%2Fissues%2Fissue-76191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5631b5d6843164a776b939cf8ebac7b8ea5e582a/src%2Ftest%2Fui%2Fissues%2Fissue-76191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76191.rs?ref=5631b5d6843164a776b939cf8ebac7b8ea5e582a", "patch": "@@ -2,13 +2,18 @@\n #![allow(non_snake_case)]\n \n use std::ops::RangeInclusive;\n+\n const RANGE: RangeInclusive<i32> = 0..=255;\n \n+const RANGE2: RangeInclusive<i32> = panic!();\n+\n fn main() {\n     let n: i32 = 1;\n     match n {\n         RANGE => {}\n         //~^ ERROR mismatched types\n+        RANGE2 => {}\n+        //~^ ERROR mismatched types\n         _ => {}\n     }\n }"}, {"sha": "bdcd2fe1adc5a727636cea40fc055b4a0687ad3d", "filename": "src/test/ui/issues/issue-76191.stderr", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5631b5d6843164a776b939cf8ebac7b8ea5e582a/src%2Ftest%2Fui%2Fissues%2Fissue-76191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5631b5d6843164a776b939cf8ebac7b8ea5e582a/src%2Ftest%2Fui%2Fissues%2Fissue-76191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76191.stderr?ref=5631b5d6843164a776b939cf8ebac7b8ea5e582a", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-76191.rs:10:9\n+  --> $DIR/issue-76191.rs:13:9\n    |\n LL | const RANGE: RangeInclusive<i32> = 0..=255;\n    | ------------------------------------------- constant defined here\n@@ -14,8 +14,30 @@ LL |         RANGE => {}\n    |\n    = note: expected type `i32`\n             found struct `RangeInclusive<i32>`\n+help: you may want to move the range into the match block\n+   |\n+LL |         0..=255 => {}\n+   |         ^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-76191.rs:15:9\n+   |\n+LL | const RANGE2: RangeInclusive<i32> = panic!();\n+   | --------------------------------------------- constant defined here\n+...\n+LL |     match n {\n+   |           - this expression has type `i32`\n+...\n+LL |         RANGE2 => {}\n+   |         ^^^^^^\n+   |         |\n+   |         expected `i32`, found struct `RangeInclusive`\n+   |         `RANGE2` is interpreted as a constant, not a new binding\n+   |\n+   = note: expected type `i32`\n+            found struct `RangeInclusive<i32>`\n    = note: constants only support matching by type, if you meant to match against a range of values, consider using a range pattern like `min ..= max` in the match block\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}