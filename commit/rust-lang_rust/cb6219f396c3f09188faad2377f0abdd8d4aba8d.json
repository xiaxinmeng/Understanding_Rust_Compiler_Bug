{"sha": "cb6219f396c3f09188faad2377f0abdd8d4aba8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNjIxOWYzOTZjM2YwOTE4OGZhYWQyMzc3ZjBhYmRkOGQ0YWJhOGQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-06-19T13:16:14Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-06-19T21:59:27Z"}, "message": "testing guide: update to use `test_harness` & fix problems.\n\nrustdoc now supports compiling things with `--test` so the examples in\nthis guide can be compiled & tested properly (revealing a few issues &\nout-dated behaviours).\n\nAlso, reword an example to be clearer, cc #12242.", "tree": {"sha": "17fa99e0fb57ef8c4282508cf16ebac8a0755bcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17fa99e0fb57ef8c4282508cf16ebac8a0755bcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb6219f396c3f09188faad2377f0abdd8d4aba8d", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6219f396c3f09188faad2377f0abdd8d4aba8d", "html_url": "https://github.com/rust-lang/rust/commit/cb6219f396c3f09188faad2377f0abdd8d4aba8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb6219f396c3f09188faad2377f0abdd8d4aba8d/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11bdeea76734e1c756246373db23d5db29632ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/11bdeea76734e1c756246373db23d5db29632ce8", "html_url": "https://github.com/rust-lang/rust/commit/11bdeea76734e1c756246373db23d5db29632ce8"}], "stats": {"total": 46, "additions": 21, "deletions": 25}, "files": [{"sha": "3d6093bad259fb0840e2bda6bca8066cd129fd37", "filename": "src/doc/guide-testing.md", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cb6219f396c3f09188faad2377f0abdd8d4aba8d/src%2Fdoc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb6219f396c3f09188faad2377f0abdd8d4aba8d/src%2Fdoc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-testing.md?ref=cb6219f396c3f09188faad2377f0abdd8d4aba8d", "patch": "@@ -4,7 +4,7 @@\n \n To create test functions, add a `#[test]` attribute like this:\n \n-~~~\n+~~~test_harness\n fn return_two() -> int {\n     2\n }\n@@ -37,7 +37,7 @@ test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n Rust has built in support for simple unit testing. Functions can be\n marked as unit tests using the `test` attribute.\n \n-~~~\n+~~~test_harness\n #[test]\n fn return_none_if_empty() {\n     // ... test code ...\n@@ -55,7 +55,7 @@ other (`assert_eq`, ...) means, then the test fails.\n When compiling a crate with the `--test` flag `--cfg test` is also\n implied, so that tests can be conditionally compiled.\n \n-~~~\n+~~~test_harness\n #[cfg(test)]\n mod tests {\n     #[test]\n@@ -80,11 +80,11 @@ Tests that are intended to fail can be annotated with the\n task to fail then the test will be counted as successful; otherwise it\n will be counted as a failure. For example:\n \n-~~~\n+~~~test_harness\n #[test]\n #[should_fail]\n fn test_out_of_bounds_failure() {\n-    let v: [int] = [];\n+    let v: &[int] = [];\n     v[0];\n }\n ~~~\n@@ -204,26 +204,22 @@ amount.\n \n For example:\n \n-~~~\n-# #![allow(unused_imports)]\n+~~~test_harness\n extern crate test;\n \n-use std::slice;\n use test::Bencher;\n \n #[bench]\n fn bench_sum_1024_ints(b: &mut Bencher) {\n-    let v = slice::from_fn(1024, |n| n);\n-    b.iter(|| {v.iter().fold(0, |old, new| old + *new);} );\n+    let v = Vec::from_fn(1024, |n| n);\n+    b.iter(|| v.iter().fold(0, |old, new| old + *new));\n }\n \n #[bench]\n fn initialise_a_vector(b: &mut Bencher) {\n-    b.iter(|| {slice::from_elem(1024, 0u64);} );\n+    b.iter(|| Vec::from_elem(1024, 0u64));\n     b.bytes = 1024 * 8;\n }\n-\n-# fn main() {}\n ~~~\n \n The benchmark runner will calibrate measurement of the benchmark\n@@ -266,19 +262,16 @@ benchmarking what one expects. For example, the compiler might\n recognize that some calculation has no external effects and remove\n it entirely.\n \n-~~~\n-# #![allow(unused_imports)]\n+~~~test_harness\n extern crate test;\n use test::Bencher;\n \n #[bench]\n fn bench_xor_1000_ints(b: &mut Bencher) {\n     b.iter(|| {\n-            range(0, 1000).fold(0, |old, new| old ^ new);\n-        });\n+        range(0, 1000).fold(0, |old, new| old ^ new);\n+    });\n }\n-\n-# fn main() {}\n ~~~\n \n gives the following results\n@@ -297,8 +290,11 @@ cannot remove the computation entirely. This could be done for the\n example above by adjusting the `bh.iter` call to\n \n ~~~\n-# struct X; impl X { fn iter<T>(&self, _: || -> T) {} } let bh = X;\n-bh.iter(|| range(0, 1000).fold(0, |old, new| old ^ new))\n+# struct X; impl X { fn iter<T>(&self, _: || -> T) {} } let b = X;\n+b.iter(|| {\n+    // note lack of `;` (could also use an explicit `return`).\n+    range(0, 1000).fold(0, |old, new| old ^ new)\n+});\n ~~~\n \n Or, the other option is to call the generic `test::black_box`\n@@ -309,10 +305,10 @@ forces it to consider any argument as used.\n extern crate test;\n \n # fn main() {\n-# struct X; impl X { fn iter<T>(&self, _: || -> T) {} } let bh = X;\n-bh.iter(|| {\n-        test::black_box(range(0, 1000).fold(0, |old, new| old ^ new));\n-    });\n+# struct X; impl X { fn iter<T>(&self, _: || -> T) {} } let b = X;\n+b.iter(|| {\n+    test::black_box(range(0, 1000).fold(0, |old, new| old ^ new));\n+});\n # }\n ~~~\n "}]}