{"sha": "001a42e632573abca10b2f8272f50a3999846e70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMWE0MmU2MzI1NzNhYmNhMTBiMmY4MjcyZjUwYTM5OTk4NDZlNzA=", "commit": {"author": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2020-03-05T13:36:19Z"}, "committer": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2020-04-20T10:29:59Z"}, "message": "progress work on suggestion for auto fix", "tree": {"sha": "4ebd286f91ed4b5beb1c284e0ba77a713b1096cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ebd286f91ed4b5beb1c284e0ba77a713b1096cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/001a42e632573abca10b2f8272f50a3999846e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/001a42e632573abca10b2f8272f50a3999846e70", "html_url": "https://github.com/rust-lang/rust/commit/001a42e632573abca10b2f8272f50a3999846e70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/001a42e632573abca10b2f8272f50a3999846e70/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dcc8d50381b561a87cdfb926c829434857e635f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dcc8d50381b561a87cdfb926c829434857e635f", "html_url": "https://github.com/rust-lang/rust/commit/6dcc8d50381b561a87cdfb926c829434857e635f"}], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "2668c89bdc8fe25c6b4a46bfbbb5e114593abf0c", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/001a42e632573abca10b2f8272f50a3999846e70/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/001a42e632573abca10b2f8272f50a3999846e70/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=001a42e632573abca10b2f8272f50a3999846e70", "patch": "@@ -1286,6 +1286,7 @@ Released 2018-09-13\n [`get_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap\n [`identity_conversion`]: https://rust-lang.github.io/rust-clippy/master/index.html#identity_conversion\n [`identity_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n+[`if_let_mutex`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_mutex\n [`if_let_redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_redundant_pattern_matching\n [`if_let_some_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_some_result\n [`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else"}, {"sha": "34f0b22f65e6812a95f4ec9c0738dd34eee40158", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/001a42e632573abca10b2f8272f50a3999846e70/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001a42e632573abca10b2f8272f50a3999846e70/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=001a42e632573abca10b2f8272f50a3999846e70", "patch": "@@ -0,0 +1,135 @@\n+use crate::utils::{\n+    match_type, method_calls, method_chain_args, paths, snippet, snippet_with_applicability, span_lint_and_sugg,\n+};\n+use if_chain::if_chain;\n+use rustc::ty;\n+use rustc_errors::Applicability;\n+use rustc_hir::{print, Expr, ExprKind, MatchSource, PatKind, QPath, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `Mutex::lock` calls in `if let` expression\n+    /// with lock calls in any of the else blocks.\n+    ///\n+    /// **Why is this bad?** The Mutex lock remains held for the whole\n+    /// `if let ... else` block and deadlocks.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// # use std::sync::Mutex;\n+    /// let mutex = Mutex::new(10);\n+    /// if let Ok(thing) = mutex.lock() {\n+    ///     do_thing();\n+    /// } else {\n+    ///     mutex.lock();\n+    /// }\n+    /// ```\n+    pub IF_LET_MUTEX,\n+    correctness,\n+    \"locking a `Mutex` in an `if let` block can cause deadlock\"\n+}\n+\n+declare_lint_pass!(IfLetMutex => [IF_LET_MUTEX]);\n+\n+impl LateLintPass<'_, '_> for IfLetMutex {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, ex: &'_ Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::Match(ref op, ref arms, MatchSource::IfLetDesugar {\n+                contains_else_clause: true,\n+            }) = ex.kind; // if let ... {} else {}\n+            if let ExprKind::MethodCall(_, _, ref args) = op.kind;\n+            let ty = cx.tables.expr_ty(&args[0]);\n+            if let ty::Adt(_, subst) = ty.kind;\n+            if match_type(cx, ty, &paths::MUTEX); // make sure receiver is Mutex\n+            if method_chain_names(op, 10).iter().any(|s| s == \"lock\"); // and lock is called\n+\n+            let mut suggestion = String::from(&format!(\"if let _ = {} {{\\n\", snippet(cx, op.span, \"_\")));\n+            \n+            if arms.iter().any(|arm| if_chain! {\n+                if let ExprKind::Block(ref block, _l) = arm.body.kind;\n+                if block.stmts.iter().any(|stmt| match stmt.kind {\n+                    StmtKind::Local(l) => if_chain! {\n+                        if let Some(ex) = l.init;\n+                        if let ExprKind::MethodCall(_, _, ref args) = op.kind;\n+                        if method_chain_names(ex, 10).iter().any(|s| s == \"lock\"); // and lock is called\n+                        then {\n+                            let ty = cx.tables.expr_ty(&args[0]);\n+                            // // make sure receiver is Result<MutexGuard<...>>\n+                            match_type(cx, ty, &paths::RESULT)\n+                        } else {\n+                            suggestion.push_str(&format!(\"    {}\\n\", snippet(cx, l.span, \"_\")));\n+                            false\n+                        }\n+                    },\n+                    StmtKind::Expr(e) => if_chain! {\n+                        if let ExprKind::MethodCall(_, _, ref args) = e.kind;\n+                        if method_chain_names(e, 10).iter().any(|s| s == \"lock\"); // and lock is called\n+                        then {\n+                            let ty = cx.tables.expr_ty(&args[0]);\n+                            // // make sure receiver is Result<MutexGuard<...>>\n+                            match_type(cx, ty, &paths::RESULT)\n+                        } else {\n+                            suggestion.push_str(&format!(\"    {}\\n\", snippet(cx, e.span, \"_\")));\n+                            false\n+                        }\n+                    },\n+                    StmtKind::Semi(e) => if_chain! {\n+                        if let ExprKind::MethodCall(_, _, ref args) = e.kind;\n+                        if method_chain_names(e, 10).iter().any(|s| s == \"lock\"); // and lock is called\n+                        then {\n+                            let ty = cx.tables.expr_ty(&args[0]);\n+                            // // make sure receiver is Result<MutexGuard<...>>\n+                            match_type(cx, ty, &paths::RESULT)\n+                        } else {\n+                            suggestion.push_str(&format!(\"    {}\\n\", snippet(cx, e.span, \"_\")));\n+                            false\n+                        }\n+                    },\n+                    _ => { suggestion.push_str(&format!(\"     {}\\n\", snippet(cx, stmt.span, \"_\"))); false },\n+                });\n+                then {\n+                    true\n+                } else {\n+                    suggestion.push_str(&format!(\"else {}\\n\", snippet(cx, arm.span, \"_\")));\n+                    false\n+                }\n+            });\n+            then {\n+                println!(\"{}\", suggestion);\n+                span_lint_and_sugg(\n+                    cx,\n+                    IF_LET_MUTEX,\n+                    ex.span,\n+                    \"using a `Mutex` in inner scope of `.lock` call\",\n+                    \"try\",\n+                    format!(\"{:?}\", \"hello\"),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn method_chain_names<'tcx>(expr: &'tcx Expr<'tcx>, max_depth: usize) -> Vec<String> {\n+    let mut method_names = Vec::with_capacity(max_depth);\n+\n+    let mut current = expr;\n+    for _ in 0..max_depth {\n+        if let ExprKind::MethodCall(path, span, args) = &current.kind {\n+            if args.iter().any(|e| e.span.from_expansion()) {\n+                break;\n+            }\n+            method_names.push(path.ident.to_string());\n+            println!(\"{:?}\", method_names);\n+            current = &args[0];\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    method_names\n+}"}, {"sha": "819230b6a61c50db3fad2af209627b6229b3aad8", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/001a42e632573abca10b2f8272f50a3999846e70/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001a42e632573abca10b2f8272f50a3999846e70/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=001a42e632573abca10b2f8272f50a3999846e70", "patch": "@@ -222,6 +222,7 @@ mod future_not_send;\n mod get_last_with_len;\n mod identity_conversion;\n mod identity_op;\n+mod if_let_mutex;\n mod if_let_some_result;\n mod if_not_else;\n mod implicit_return;\n@@ -572,6 +573,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &get_last_with_len::GET_LAST_WITH_LEN,\n         &identity_conversion::IDENTITY_CONVERSION,\n         &identity_op::IDENTITY_OP,\n+        &if_let_mutex::IF_LET_MUTEX,\n         &if_let_some_result::IF_LET_SOME_RESULT,\n         &if_not_else::IF_NOT_ELSE,\n         &implicit_return::IMPLICIT_RETURN,\n@@ -1053,6 +1055,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box dereference::Dereferencing);\n     store.register_late_pass(|| box future_not_send::FutureNotSend);\n     store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n+    store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1231,6 +1234,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&get_last_with_len::GET_LAST_WITH_LEN),\n         LintId::of(&identity_conversion::IDENTITY_CONVERSION),\n         LintId::of(&identity_op::IDENTITY_OP),\n+        LintId::of(&if_let_mutex::IF_LET_MUTEX),\n         LintId::of(&if_let_some_result::IF_LET_SOME_RESULT),\n         LintId::of(&indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n         LintId::of(&infinite_iter::INFINITE_ITER),\n@@ -1618,6 +1622,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&erasing_op::ERASING_OP),\n         LintId::of(&formatting::POSSIBLE_MISSING_COMMA),\n         LintId::of(&functions::NOT_UNSAFE_PTR_ARG_DEREF),\n+        LintId::of(&if_let_mutex::IF_LET_MUTEX),\n         LintId::of(&indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n         LintId::of(&infinite_iter::INFINITE_ITER),\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),"}, {"sha": "229fd3ac8249d133d51e92c522ac8012b875f7fa", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/001a42e632573abca10b2f8272f50a3999846e70/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001a42e632573abca10b2f8272f50a3999846e70/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=001a42e632573abca10b2f8272f50a3999846e70", "patch": "@@ -731,6 +731,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"identity_op\",\n     },\n+    Lint {\n+        name: \"if_let_mutex\",\n+        group: \"correctness\",\n+        desc: \"default lint description\",\n+        deprecation: None,\n+        module: \"if_let_mutex\",\n+    },\n     Lint {\n         name: \"if_let_some_result\",\n         group: \"style\","}, {"sha": "13fe44eed2c342304e28b0ae48d036cd39b68fe1", "filename": "tests/ui/if_let_mutex.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/001a42e632573abca10b2f8272f50a3999846e70/tests%2Fui%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001a42e632573abca10b2f8272f50a3999846e70/tests%2Fui%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_mutex.rs?ref=001a42e632573abca10b2f8272f50a3999846e70", "patch": "@@ -0,0 +1,16 @@\n+#![warn(clippy::if_let_mutex)]\n+\n+use std::sync::Mutex;\n+\n+fn do_stuff() {}\n+fn foo() {\n+    let m = Mutex::new(1u8);\n+\n+    if let Ok(locked) = m.lock() {\n+        do_stuff();\n+    } else {\n+        m.lock().unwrap();\n+    };\n+}\n+\n+fn main() {}"}]}