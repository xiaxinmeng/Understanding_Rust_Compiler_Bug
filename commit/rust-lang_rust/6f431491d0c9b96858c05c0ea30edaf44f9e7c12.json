{"sha": "6f431491d0c9b96858c05c0ea30edaf44f9e7c12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNDMxNDkxZDBjOWI5Njg1OGMwNWMwZWEzMGVkYWY0NGY5ZTdjMTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-06T22:44:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-09T15:00:13Z"}, "message": "rustc: Prefer loading crates in the sysroot\n\nThis commit is a random stab in the dark to fix the spurious failures on #39518.\nThe leading theory of the spurious failures on Windows is that the compiler is\nloading a path in the `deps` folder, passing it to `link.exe`, and then this is\nracing with Cargo itself updating those paths.\n\nThis race, however, has a few unique properties:\n\n* It's isolated to just libstd. Most crates are never passed to the linker and\n  simultaneously being worked on by Cargo. Cargo's typical execution of the\n  dependency graph never hits this problem.\n* The crates are already all located in the sysroot in addition to the `deps`\n  folder. This means that the compiler actually has two candidates of crates to\n  load, and it's just arbitrarily rejecting one.\n\nTogether this means that we shouldn't need to fix this problem \"in the large\"\nand we can instead just fix it in this isolated situation (hopefully). To solve\nthis the compiler's been updated to prefer crates from the sysroot to leave\nCargo's structure to itself.\n\nWe'll see if this actually allows the PR to land...", "tree": {"sha": "f1b3635dd83b2474c12991b8f1208d2229a99d0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1b3635dd83b2474c12991b8f1208d2229a99d0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f431491d0c9b96858c05c0ea30edaf44f9e7c12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f431491d0c9b96858c05c0ea30edaf44f9e7c12", "html_url": "https://github.com/rust-lang/rust/commit/6f431491d0c9b96858c05c0ea30edaf44f9e7c12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f431491d0c9b96858c05c0ea30edaf44f9e7c12/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3be02fc41032febc28e22a8a41ec7dc85ca1ce19", "url": "https://api.github.com/repos/rust-lang/rust/commits/3be02fc41032febc28e22a8a41ec7dc85ca1ce19", "html_url": "https://github.com/rust-lang/rust/commit/3be02fc41032febc28e22a8a41ec7dc85ca1ce19"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "a6771083fc34eaf438313e920cbc78707a569ba2", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6f431491d0c9b96858c05c0ea30edaf44f9e7c12/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f431491d0c9b96858c05c0ea30edaf44f9e7c12/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=6f431491d0c9b96858c05c0ea30edaf44f9e7c12", "patch": "@@ -639,6 +639,34 @@ impl<'a> Context<'a> {\n                                                          lib.display()));\n                 continue;\n             }\n+\n+            // Ok so at this point we've determined that `(lib, kind)` above is\n+            // a candidate crate to load, and that `slot` is either none (this\n+            // is the first crate of its kind) or if some the previous path has\n+            // the exact same hash (e.g. it's the exact same crate).\n+            //\n+            // In principle these two candidate crates are exactly the same so\n+            // we can choose either of them to link. As a stupidly gross hack,\n+            // however, we favor crate in the sysroot.\n+            //\n+            // You can find more info in rust-lang/rust#39518 and various linked\n+            // issues, but the general gist is that during testing libstd the\n+            // compilers has two candidates to choose from: one in the sysroot\n+            // and one in the deps folder. These two crates are the exact same\n+            // crate but if the compiler chooses the one in the deps folder\n+            // it'll cause spurious errors on Windows.\n+            //\n+            // As a result, we favor the sysroot crate here. Note that the\n+            // candidates are all canonicalized, so we canonicalize the sysroot\n+            // as well.\n+            if let Some((ref prev, _)) = ret {\n+                let sysroot = self.sess.sysroot();\n+                let sysroot = sysroot.canonicalize()\n+                                     .unwrap_or(sysroot.to_path_buf());\n+                if prev.starts_with(&sysroot) {\n+                    continue\n+                }\n+            }\n             *slot = Some((hash, metadata));\n             ret = Some((lib, kind));\n         }"}]}