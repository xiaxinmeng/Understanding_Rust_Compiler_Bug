{"sha": "3c6c8d5a8dbf4db20450ed5793ef35f29c13466c", "node_id": "C_kwDOAAsO6NoAKDNjNmM4ZDVhOGRiZjRkYjIwNDUwZWQ1NzkzZWYzNWYyOWMxMzQ2NmM", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-05-25T21:32:27Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-05-26T08:11:58Z"}, "message": "rebase, use Ty in CallArgument and re-insert static_assert_size on ConstraintCategory", "tree": {"sha": "c907fe3258b0a80e884fdfd416707dd28bc77b9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c907fe3258b0a80e884fdfd416707dd28bc77b9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c6c8d5a8dbf4db20450ed5793ef35f29c13466c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6c8d5a8dbf4db20450ed5793ef35f29c13466c", "html_url": "https://github.com/rust-lang/rust/commit/3c6c8d5a8dbf4db20450ed5793ef35f29c13466c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c6c8d5a8dbf4db20450ed5793ef35f29c13466c/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99fa123f6619433d39a2e9f04d80c244fec17980", "url": "https://api.github.com/repos/rust-lang/rust/commits/99fa123f6619433d39a2e9f04d80c244fec17980", "html_url": "https://github.com/rust-lang/rust/commit/99fa123f6619433d39a2e9f04d80c244fec17980"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "48b8230857a69a02f2ab7741027782d6ebfc2b59", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3c6c8d5a8dbf4db20450ed5793ef35f29c13466c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6c8d5a8dbf4db20450ed5793ef35f29c13466c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=3c6c8d5a8dbf4db20450ed5793ef35f29c13466c", "patch": "@@ -788,7 +788,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         let tcx = self.infcx.tcx;\n \n-        let instance = if let ConstraintCategory::CallArgument(Some((fn_did, substs))) = category {\n+        let instance = if let ConstraintCategory::CallArgument(Some(func_ty)) = category {\n+            let (fn_did, substs) = match func_ty.kind() {\n+                ty::FnDef(fn_did, substs) => (fn_did, substs),\n+                _ => return,\n+            };\n             debug!(?fn_did, ?substs);\n \n             // Only suggest this on function calls, not closures\n@@ -821,13 +825,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let mut visitor = TraitObjectVisitor(FxHashSet::default());\n         visitor.visit_ty(param.param_ty);\n \n-        if let Some((ident, self_ty)) =\n-            self.get_impl_ident_and_self_ty_from_trait(instance.def_id(), &visitor.0)\n-        {\n-            self.suggest_constrain_dyn_trait_in_impl(diag, &visitor.0, ident, self_ty)\n-        } else {\n-            return;\n-        };\n+        let Some((ident, self_ty)) =\n+            self.get_impl_ident_and_self_ty_from_trait(instance.def_id(), &visitor.0) else {return};\n+\n+        self.suggest_constrain_dyn_trait_in_impl(diag, &visitor.0, ident, self_ty);\n     }\n \n     #[instrument(skip(self, err), level = \"debug\")]"}, {"sha": "4a2b2942008b874266d3c70d616a22b4b5244dc5", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c6c8d5a8dbf4db20450ed5793ef35f29c13466c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6c8d5a8dbf4db20450ed5793ef35f29c13466c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=3c6c8d5a8dbf4db20450ed5793ef35f29c13466c", "patch": "@@ -1418,7 +1418,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 ref args,\n                 ref destination,\n                 from_hir_call,\n-                fn_span,\n+                target,\n                 ..\n             } => {\n                 self.check_operand(func, term_location);\n@@ -1427,9 +1427,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n \n                 let func_ty = func.ty(body, tcx);\n-                debug!(\"check_terminator: call, func_ty={:?}\", func_ty);\n                 debug!(\"func_ty.kind: {:?}\", func_ty.kind());\n-                debug!(?fn_span);\n+\n                 let sig = match func_ty.kind() {\n                     ty::FnDef(..) | ty::FnPtr(_) => func_ty.fn_sig(tcx),\n                     _ => {\n@@ -1444,7 +1443,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 );\n                 debug!(?sig);\n                 let sig = self.normalize(sig, term_location);\n-                self.check_call_dest(body, term, &sig, destination, target, term_location);\n+                self.check_call_dest(body, term, &sig, *destination, target, term_location);\n \n                 self.prove_predicates(\n                     sig.inputs_and_output\n@@ -1604,24 +1603,19 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             span_mirbug!(self, term, \"call to {:?} with wrong # of args\", sig);\n         }\n \n-        let call_arg = if let TerminatorKind::Call { func, .. } = &term.kind {\n-            let func_ty = func.ty(body, self.infcx.tcx);\n-            if let ty::FnDef(fn_did, substs) = func_ty.kind() {\n-                Some((*fn_did, *substs))\n-            } else {\n-                None\n-            }\n+        let func_ty = if let TerminatorKind::Call { func, .. } = &term.kind {\n+            Some(func.ty(body, self.infcx.tcx))\n         } else {\n             None\n         };\n-        debug!(?call_arg);\n+        debug!(?func_ty);\n \n         for (n, (fn_arg, op_arg)) in iter::zip(sig.inputs(), args).enumerate() {\n             let op_arg_ty = op_arg.ty(body, self.tcx());\n \n             let op_arg_ty = self.normalize(op_arg_ty, term_location);\n             let category = if from_hir_call {\n-                ConstraintCategory::CallArgument(call_arg)\n+                ConstraintCategory::CallArgument(func_ty)\n             } else {\n                 ConstraintCategory::Boring\n             };"}, {"sha": "01945b543b14bf6a585428bccc445cce3401b372", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c6c8d5a8dbf4db20450ed5793ef35f29c13466c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6c8d5a8dbf4db20450ed5793ef35f29c13466c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=3c6c8d5a8dbf4db20450ed5793ef35f29c13466c", "patch": "@@ -1,7 +1,7 @@\n //! Values computed by queries that use MIR.\n \n use crate::mir::{self, Body, Promoted};\n-use crate::ty::{self, subst::SubstsRef, OpaqueHiddenType, Ty, TyCtxt};\n+use crate::ty::{self, OpaqueHiddenType, Ty, TyCtxt};\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorGuaranteed;\n@@ -341,6 +341,10 @@ pub struct ClosureOutlivesRequirement<'tcx> {\n     pub category: ConstraintCategory<'tcx>,\n }\n \n+// Make sure this enum doesn't unintentionally grow\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+rustc_data_structures::static_assert_size!(ConstraintCategory<'_>, 16);\n+\n /// Outlives-constraints can be categorized to determine whether and why they\n /// are interesting (for error reporting). Order of variants indicates sort\n /// order of the category, thereby influencing diagnostic output.\n@@ -360,7 +364,9 @@ pub enum ConstraintCategory<'tcx> {\n     ///\n     /// We try to get the category that the closure used when reporting this.\n     ClosureBounds,\n-    CallArgument(Option<(DefId, SubstsRef<'tcx>)>),\n+\n+    /// Contains the function type if available.\n+    CallArgument(Option<Ty<'tcx>>),\n     CopyBound,\n     SizedBound,\n     Assignment,"}, {"sha": "42e5a05d63b7670058590290c63a4146a0c3488e", "filename": "compiler/rustc_middle/src/ty/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c6c8d5a8dbf4db20450ed5793ef35f29c13466c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6c8d5a8dbf4db20450ed5793ef35f29c13466c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs?ref=3c6c8d5a8dbf4db20450ed5793ef35f29c13466c", "patch": "@@ -135,8 +135,8 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::RegionKind {\n             ty::RePlaceholder(p) => {\n                 p.hash_stable(hcx, hasher);\n             }\n-            ty::ReVar(reg_vid) => {\n-                reg_vid.hash_stable(hcx, hasher);\n+            ty::ReVar(reg) => {\n+                reg.hash_stable(hcx, hasher);\n             }\n         }\n     }"}]}