{"sha": "ba24fbd404d7489298af68b4384d1544cd54844d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMjRmYmQ0MDRkNzQ4OTI5OGFmNjhiNDM4NGQxNTQ0Y2Q1NDg0NGQ=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-12-17T22:58:56Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-02T18:47:02Z"}, "message": "Manually check trait implementations", "tree": {"sha": "870ac10b68adeae7d5d3193cf785b1110ecf6f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/870ac10b68adeae7d5d3193cf785b1110ecf6f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba24fbd404d7489298af68b4384d1544cd54844d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba24fbd404d7489298af68b4384d1544cd54844d", "html_url": "https://github.com/rust-lang/rust/commit/ba24fbd404d7489298af68b4384d1544cd54844d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba24fbd404d7489298af68b4384d1544cd54844d/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6093ea8039d4bf48ef2b34ca0ec1397016bb2b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/6093ea8039d4bf48ef2b34ca0ec1397016bb2b52", "html_url": "https://github.com/rust-lang/rust/commit/6093ea8039d4bf48ef2b34ca0ec1397016bb2b52"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "f4235f3df21c6230459f23f677fb43cd40be092d", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ba24fbd404d7489298af68b4384d1544cd54844d/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba24fbd404d7489298af68b4384d1544cd54844d/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=ba24fbd404d7489298af68b4384d1544cd54844d", "patch": "@@ -27,6 +27,7 @@ use fmt_macros::{Parser, Piece, Position};\n use middle::def_id::DefId;\n use middle::infer::InferCtxt;\n use middle::ty::{self, ToPredicate, HasTypeFlags, ToPolyTraitRef, TraitRef, Ty};\n+use middle::ty::fast_reject;\n use middle::ty::fold::TypeFoldable;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n \n@@ -233,20 +234,38 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                             if let Some(s) = custom_note {\n                                 err.fileline_note(obligation.cause.span, &s);\n                             } else {\n-                                let mut impl_candidates = Vec::new();\n-                                infcx.tcx.lookup_trait_def(trait_ref.def_id())\n-                                         .for_each_relevant_impl(\n-                                    infcx.tcx,\n-                                    trait_ref.self_ty(),\n-                                    |impl_def_id| {\n-                                        match infcx.tcx.impl_trait_ref(impl_def_id) {\n-                                            Some(ref imp) => {\n-                                                impl_candidates.push(format!(\"  {}\", imp));\n-                                            },\n-                                            None => (),\n+                                infcx.tcx.populate_implementations_for_trait_if_necessary(\n+                                    trait_ref.def_id());\n+\n+                                let trait_def = infcx.tcx.lookup_trait_def(trait_ref.def_id());\n+                                let blanket_impls = trait_def.blanket_impls.borrow();\n+                                let impl_iter = blanket_impls.iter()\n+                                                             .filter_map(|&id|\n+                                                                     infcx.tcx.impl_trait_ref(id));\n+\n+                                let nonblanket = trait_def.nonblanket_impls.borrow();\n+                                let nonblanket_iter = nonblanket.values()\n+                                                            .flat_map(|ids|\n+                                                                ids.iter().filter_map(|&id|\n+                                                                    infcx.tcx.impl_trait_ref(id)));\n+\n+                                let simp = fast_reject::simplify_type(infcx.tcx, trait_ref.self_ty(), true);\n+                                let nonblanket_iter = nonblanket_iter.filter(|def| {\n+                                    if let Some(simp) = simp {\n+                                        let imp_simp = fast_reject::simplify_type(infcx.tcx, def.self_ty(), true);\n+                                        if let Some(imp_simp) = imp_simp {\n+                                            simp == imp_simp\n+                                        } else {\n+                                            false\n                                         }\n+                                    } else {\n+                                        true\n                                     }\n-                                );\n+                                });\n+\n+                                let impl_candidates = impl_iter.chain(nonblanket_iter)\n+                                                               .map(|imp| format!(\"  {}\", imp))\n+                                                               .take(5).collect::<Vec<_>>();\n \n                                 if impl_candidates.len() > 0 {\n                                     err.fileline_help("}]}