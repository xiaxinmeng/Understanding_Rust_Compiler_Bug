{"sha": "ba951e3ca72283d39757bd39d20bfd75ce901147", "node_id": "C_kwDOAAsO6NoAKGJhOTUxZTNjYTcyMjgzZDM5NzU3YmQzOWQyMGJmZDc1Y2U5MDExNDc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-15T17:29:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-25T16:10:10Z"}, "message": "Fix formatting of let chains", "tree": {"sha": "67aea54d64656b1f86808afe1f99f953957e7559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67aea54d64656b1f86808afe1f99f953957e7559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba951e3ca72283d39757bd39d20bfd75ce901147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba951e3ca72283d39757bd39d20bfd75ce901147", "html_url": "https://github.com/rust-lang/rust/commit/ba951e3ca72283d39757bd39d20bfd75ce901147", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba951e3ca72283d39757bd39d20bfd75ce901147/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93b5c893e6394104b5ae80cf42d7220ad3d18779", "url": "https://api.github.com/repos/rust-lang/rust/commits/93b5c893e6394104b5ae80cf42d7220ad3d18779", "html_url": "https://github.com/rust-lang/rust/commit/93b5c893e6394104b5ae80cf42d7220ad3d18779"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "a41f89a6aa33ee85294281a8c4069a38932c4017", "filename": "clippy_lints/src/semicolon_block.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba951e3ca72283d39757bd39d20bfd75ce901147/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba951e3ca72283d39757bd39d20bfd75ce901147/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=ba951e3ca72283d39757bd39d20bfd75ce901147", "patch": "@@ -73,9 +73,9 @@ impl LateLintPass<'_> for SemicolonBlock {\n \n fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>) {\n     if !block.span.from_expansion()\n-    && let Some(tail) = block.expr\n-    && let Some(block_expr @ Expr { kind: ExprKind::Block(_, _), ..}) = get_parent_expr_for_hir(cx, block.hir_id)\n-    && let Some(Node::Stmt(Stmt { kind: StmtKind::Semi(_), span, .. })) = get_parent_node(cx.tcx, block_expr.hir_id)\n+        && let Some(tail) = block.expr\n+        && let Some(block_expr @ Expr { kind: ExprKind::Block(_, _), ..}) = get_parent_expr_for_hir(cx, block.hir_id)\n+        && let Some(Node::Stmt(Stmt { kind: StmtKind::Semi(_), span, .. })) = get_parent_node(cx.tcx, block_expr.hir_id)\n     {\n         let expr_snip = snippet_with_macro_callsite(cx, tail.span, \"..\");\n \n@@ -101,16 +101,18 @@ fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>) {\n \n fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>) {\n     if !block.span.from_expansion()\n-    && block.expr.is_none()\n-    && let [.., Stmt { kind: StmtKind::Semi(expr), .. }] = block.stmts\n-    && let Some(block_expr @ Expr { kind: ExprKind::Block(_, _), ..}) = get_parent_expr_for_hir(cx,block.hir_id)\n-    && let Some(Node::Stmt(Stmt { kind: StmtKind::Expr(_), .. })) = get_parent_node(cx.tcx, block_expr.hir_id) {\n+        && block.expr.is_none()\n+        && let [.., Stmt { kind: StmtKind::Semi(expr), .. }] = block.stmts\n+        && let Some(block_expr @ Expr { kind: ExprKind::Block(_, _), ..}) = get_parent_expr_for_hir(cx,block.hir_id)\n+        && let Some(Node::Stmt(Stmt { kind: StmtKind::Expr(_), .. })) = get_parent_node(cx.tcx, block_expr.hir_id)\n+    {\n         let expr_snip = snippet_with_macro_callsite(cx, expr.span, \"..\");\n \n         let mut suggestion: String = snippet_with_macro_callsite(cx, block.span, \"..\").to_string();\n \n         if let Some((expr_offset, _)) = suggestion.rmatch_indices(&*expr_snip).next()\n-        && let Some(semi_offset) = suggestion[expr_offset + expr_snip.len()..].find(';') {\n+            && let Some(semi_offset) = suggestion[expr_offset + expr_snip.len()..].find(';')\n+        {\n             suggestion.remove(expr_offset +  expr_snip.len() + semi_offset);\n         } else {\n             return;"}]}