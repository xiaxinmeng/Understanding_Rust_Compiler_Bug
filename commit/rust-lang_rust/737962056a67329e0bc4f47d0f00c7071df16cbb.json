{"sha": "737962056a67329e0bc4f47d0f00c7071df16cbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNzk2MjA1NmE2NzMyOWUwYmM0ZjQ3ZDBmMDBjNzA3MWRmMTZjYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-23T00:32:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-23T00:32:40Z"}, "message": "Auto merge of #42304 - Mark-Simulacrum:issue-37157, r=nikomatsakis\n\nPrint the two types in the span label for transmute errors.\n\nFixes #37157. I'm not entirely happy with the changes here but overall it's better in my opinion; we certainly avoid the odd language in that issue, which changes to:\n\n```\nerror[E0512]: transmute called with differently sized types: <C as TypeConstructor<'a>>::T (size can vary because of <C as TypeConstructor>::T) to <C as TypeConstructor<'b>>::T (size can vary because of <C as TypeConstructor>::T)\n --> test.rs:8:5\n  |\n8 |     ::std::mem::transmute(x)\n  |     ^^^^^^^^^^^^^^^^^^^^^ transmuting between <C as TypeConstructor<'a>>::T and <C as TypeConstructor<'b>>::T\n\nerror: aborting due to previous error(s)\n```", "tree": {"sha": "caa7da4b7e084d4ef2f245a8a7528013aa6dd68a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa7da4b7e084d4ef2f245a8a7528013aa6dd68a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/737962056a67329e0bc4f47d0f00c7071df16cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/737962056a67329e0bc4f47d0f00c7071df16cbb", "html_url": "https://github.com/rust-lang/rust/commit/737962056a67329e0bc4f47d0f00c7071df16cbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/737962056a67329e0bc4f47d0f00c7071df16cbb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd62230fbdcaf6508dec02a59818f732bd4c1759", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd62230fbdcaf6508dec02a59818f732bd4c1759", "html_url": "https://github.com/rust-lang/rust/commit/bd62230fbdcaf6508dec02a59818f732bd4c1759"}, {"sha": "d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "html_url": "https://github.com/rust-lang/rust/commit/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d"}], "stats": {"total": 345, "additions": 296, "deletions": 49}, "files": [{"sha": "4d378b0bf7dd3ae9596b2f678ddf260165b9d811", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -1631,7 +1631,7 @@ fn takes_u8(_: u8) {}\n \n fn main() {\n     unsafe { takes_u8(::std::mem::transmute(0u16)); }\n-    // error: transmute called with differently sized types\n+    // error: transmute called with types of different sizes\n }\n ```\n "}, {"sha": "f180ae53b8ae1926868ad9794595f772c8e31f85", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -86,17 +86,16 @@ impl<'a, 'tcx> ExprVisitor<'a, 'tcx> {\n             // Special-case transmutting from `typeof(function)` and\n             // `Option<typeof(function)>` to present a clearer error.\n             let from = unpack_option_like(self.tcx.global_tcx(), from);\n-            match (&from.sty, sk_to) {\n-                (&ty::TyFnDef(..), SizeSkeleton::Known(size_to))\n-                        if size_to == Pointer.size(self.tcx) => {\n+            if let (&ty::TyFnDef(..), SizeSkeleton::Known(size_to)) = (&from.sty, sk_to) {\n+                if size_to == Pointer.size(self.tcx) {\n                     struct_span_err!(self.tcx.sess, span, E0591,\n-                                     \"`{}` is zero-sized and can't be transmuted to `{}`\",\n-                                     from, to)\n-                        .span_note(span, \"cast with `as` to a pointer instead\")\n+                                     \"can't transmute zero-sized type\")\n+                        .note(&format!(\"source type: {}\", from))\n+                        .note(&format!(\"target type: {}\", to))\n+                        .help(\"cast with `as` to a pointer instead\")\n                         .emit();\n                     return;\n                 }\n-                _ => {}\n             }\n         }\n \n@@ -111,7 +110,7 @@ impl<'a, 'tcx> ExprVisitor<'a, 'tcx> {\n                 }\n                 Err(LayoutError::Unknown(bad)) => {\n                     if bad == ty {\n-                        format!(\"size can vary\")\n+                        format!(\"this type's size can vary\")\n                     } else {\n                         format!(\"size can vary because of {}\", bad)\n                     }\n@@ -121,14 +120,9 @@ impl<'a, 'tcx> ExprVisitor<'a, 'tcx> {\n         };\n \n         struct_span_err!(self.tcx.sess, span, E0512,\n-                  \"transmute called with differently sized types: \\\n-                   {} ({}) to {} ({})\",\n-                  from, skeleton_string(from, sk_from),\n-                  to, skeleton_string(to, sk_to))\n-            .span_label(span,\n-                format!(\"transmuting between {} and {}\",\n-                    skeleton_string(from, sk_from),\n-                    skeleton_string(to, sk_to)))\n+            \"transmute called with types of different sizes\")\n+            .note(&format!(\"source type: {} ({})\", from, skeleton_string(from, sk_from)))\n+            .note(&format!(\"target type: {} ({})\", to, skeleton_string(to, sk_to)))\n             .emit();\n     }\n }"}, {"sha": "25f962716413119eed2f6df8851b13a72c2fafb6", "filename": "src/test/compile-fail/E0512.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2FE0512.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2FE0512.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0512.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -12,5 +12,4 @@ fn takes_u8(_: u8) {}\n \n fn main() {\n     unsafe { takes_u8(::std::mem::transmute(0u16)); } //~ ERROR E0512\n-                                                      //~| transmuting between 16 bits and 8 bits\n }"}, {"sha": "9d9b7e48043540bc19ccd37af270b5e573915c14", "filename": "src/test/compile-fail/issue-21174.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Fissue-21174.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Fissue-21174.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21174.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -15,7 +15,7 @@ trait Trait<'a> {\n \n fn foo<'a, T: Trait<'a>>(value: T::A) {\n     let new: T::B = unsafe { std::mem::transmute(value) };\n-//~^ ERROR: transmute called with differently sized types\n+//~^ ERROR: transmute called with types of different sizes\n }\n \n fn main() { }"}, {"sha": "dc9155ed66c6e1dd8ea4935532c7ec8b81f7df37", "filename": "src/test/compile-fail/issue-28625.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Fissue-28625.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Fissue-28625.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28625.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -17,7 +17,7 @@ struct ArrayPeano<T: Bar> {\n }\n \n fn foo<T>(a: &ArrayPeano<T>) -> &[T] where T: Bar {\n-    unsafe { std::mem::transmute(a) } //~ ERROR transmute called with differently sized types\n+    unsafe { std::mem::transmute(a) } //~ ERROR transmute called with types of different sizes\n }\n \n impl Bar for () {"}, {"sha": "5091ba4ee1aa4254801563bb6732c1750a9709cc", "filename": "src/test/compile-fail/issue-32377.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Fissue-32377.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Fissue-32377.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32377.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -21,7 +21,7 @@ struct Bar<U: Foo> {\n \n fn foo<U: Foo>(x: [usize; 2]) -> Bar<U> {\n     unsafe { mem::transmute(x) }\n-    //~^ ERROR transmute called with differently sized types\n+    //~^ ERROR transmute called with types of different sizes\n }\n \n fn main() {}"}, {"sha": "c96184d5988437dfbf450d6c4cb60d4b42ea7884", "filename": "src/test/compile-fail/packed-struct-generic-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -13,7 +13,7 @@\n // the error points to the start of the file, not the line with the\n // transmute\n \n-// error-pattern: transmute called with differently sized types\n+// error-pattern: transmute called with types of different sizes\n \n use std::mem;\n "}, {"sha": "abb02dd39e67d705bb01bd1795c2362b804deee9", "filename": "src/test/compile-fail/packed-struct-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -13,7 +13,7 @@\n // the error points to the start of the file, not the line with the\n // transmute\n \n-// error-pattern: transmute called with differently sized types\n+// error-pattern: transmute called with types of different sizes\n \n use std::mem;\n "}, {"sha": "113e2ed4c80f44d85ff4eb500f05e8cef7382ade", "filename": "src/test/compile-fail/transmute-different-sizes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Ftransmute-different-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Ftransmute-different-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftransmute-different-sizes.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -17,12 +17,12 @@ use std::mem::transmute;\n \n unsafe fn f() {\n     let _: i8 = transmute(16i16);\n-    //~^ ERROR transmute called with differently sized types\n+    //~^ ERROR transmute called with types of different sizes\n }\n \n unsafe fn g<T>(x: &T) {\n     let _: i8 = transmute(x);\n-    //~^ ERROR transmute called with differently sized types\n+    //~^ ERROR transmute called with types of different sizes\n }\n \n trait Specializable { type Output; }\n@@ -33,7 +33,7 @@ impl<T> Specializable for T {\n \n unsafe fn specializable<T>(x: u16) -> <T as Specializable>::Output {\n     transmute(x)\n-    //~^ ERROR transmute called with differently sized types\n+    //~^ ERROR transmute called with types of different sizes\n }\n \n fn main() {}"}, {"sha": "59027fc7787f846603046b04ce548020e794dee9", "filename": "src/test/compile-fail/transmute-fat-pointers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Ftransmute-fat-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Ftransmute-fat-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftransmute-fat-pointers.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -15,11 +15,11 @@\n use std::mem::transmute;\n \n fn a<T, U: ?Sized>(x: &[T]) -> &U {\n-    unsafe { transmute(x) } //~ ERROR transmute called with differently sized types\n+    unsafe { transmute(x) } //~ ERROR transmute called with types of different sizes\n }\n \n fn b<T: ?Sized, U: ?Sized>(x: &T) -> &U {\n-    unsafe { transmute(x) } //~ ERROR transmute called with differently sized types\n+    unsafe { transmute(x) } //~ ERROR transmute called with types of different sizes\n }\n \n fn c<T, U>(x: &T) -> &U {\n@@ -31,11 +31,11 @@ fn d<T, U>(x: &[T]) -> &[U] {\n }\n \n fn e<T: ?Sized, U>(x: &T) -> &U {\n-    unsafe { transmute(x) } //~ ERROR transmute called with differently sized types\n+    unsafe { transmute(x) } //~ ERROR transmute called with types of different sizes\n }\n \n fn f<T, U: ?Sized>(x: &T) -> &U {\n-    unsafe { transmute(x) } //~ ERROR transmute called with differently sized types\n+    unsafe { transmute(x) } //~ ERROR transmute called with types of different sizes\n }\n \n fn main() { }"}, {"sha": "2f8f9e46e1aeeb6f21d9fe508e9f4f069fe20ebb", "filename": "src/test/compile-fail/transmute-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Ftransmute-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fcompile-fail%2Ftransmute-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftransmute-impl.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -26,7 +26,7 @@ impl<T: ?Sized> Foo<T> {\n \n     fn n(x: &T) -> &isize {\n         // Not OK here, because T : Sized is not in scope.\n-        unsafe { transmute(x) } //~ ERROR transmute called with differently sized types\n+        unsafe { transmute(x) } //~ ERROR transmute called with types of different sizes\n     }\n }\n "}, {"sha": "d5968a388dc1d933ea5e7b54876928e8b9eaf6ba", "filename": "src/test/ui/transmute/main.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-x86\n+// ignore-arm\n+// ignore-emscripten\n+// ignore 32-bit platforms (test output is different)\n+\n+#![feature(untagged_unions)]\n+use std::mem::transmute;\n+\n+pub trait TypeConstructor<'a> {\n+    type T;\n+}\n+\n+unsafe fn transmute_lifetime<'a, 'b, C>(x: <C as TypeConstructor<'a>>::T)\n+                                        -> <C as TypeConstructor<'b>>::T\n+where for<'z> C: TypeConstructor<'z> {\n+    transmute(x) //~ ERROR transmute called with types of different sizes\n+}\n+\n+unsafe fn sizes() {\n+    let x: u8 = transmute(10u16); //~ ERROR transmute called with types of different sizes\n+}\n+\n+unsafe fn ptrs() {\n+    let x: u8 = transmute(\"test\"); //~ ERROR transmute called with types of different sizes\n+}\n+\n+union Foo { x: () }\n+unsafe fn vary() {\n+    let x: Foo = transmute(10); //~ ERROR transmute called with types of different sizes\n+}\n+\n+fn main() {}"}, {"sha": "c5d5a4ed8a6239631d2985df674f9002414779c4", "filename": "src/test/ui/transmute/main.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -0,0 +1,38 @@\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/main.rs:26:5\n+   |\n+26 |     transmute(x) //~ ERROR transmute called with types of different sizes\n+   |     ^^^^^^^^^\n+   |\n+   = note: source type: <C as TypeConstructor<'a>>::T (size can vary because of <C as TypeConstructor>::T)\n+   = note: target type: <C as TypeConstructor<'b>>::T (size can vary because of <C as TypeConstructor>::T)\n+\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/main.rs:30:17\n+   |\n+30 |     let x: u8 = transmute(10u16); //~ ERROR transmute called with types of different sizes\n+   |                 ^^^^^^^^^\n+   |\n+   = note: source type: u16 (16 bits)\n+   = note: target type: u8 (8 bits)\n+\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/main.rs:34:17\n+   |\n+34 |     let x: u8 = transmute(\"test\"); //~ ERROR transmute called with types of different sizes\n+   |                 ^^^^^^^^^\n+   |\n+   = note: source type: &str (128 bits)\n+   = note: target type: u8 (8 bits)\n+\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/main.rs:39:18\n+   |\n+39 |     let x: Foo = transmute(10); //~ ERROR transmute called with types of different sizes\n+   |                  ^^^^^^^^^\n+   |\n+   = note: source type: i32 (32 bits)\n+   = note: target type: Foo (0 bits)\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "98d2e1e3628f280f6847abdc6c31dba484f22bf7", "filename": "src/test/ui/transmute/transmute-from-fn-item-types-error.rs", "status": "renamed", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -8,9 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-x86\n+// ignore-arm\n+// ignore-emscripten\n+// ignore 32-bit platforms (test output is different)\n+\n use std::mem;\n \n-unsafe fn foo() -> (isize, *const (), Option<fn()>) {\n+unsafe fn foo() -> (i32, *const (), Option<fn()>) {\n     let i = mem::transmute(bar);\n     //~^ ERROR is zero-sized and can't be transmuted\n     //~^^ NOTE cast with `as` to a pointer instead\n@@ -29,8 +34,8 @@ unsafe fn foo() -> (isize, *const (), Option<fn()>) {\n unsafe fn bar() {\n     // Error as usual if the resulting type is not pointer-sized.\n     mem::transmute::<_, u8>(main);\n-    //~^ ERROR transmute called with differently sized types\n-    //~^^ NOTE transmuting between 0 bits and 8 bits\n+    //~^ ERROR transmute called with types of different sizes\n+    //~^^ NOTE transmuting between fn() {main} and u8\n \n     mem::transmute::<_, *mut ()>(foo);\n     //~^ ERROR is zero-sized and can't be transmuted\n@@ -41,7 +46,7 @@ unsafe fn bar() {\n     //~^^ NOTE cast with `as` to a pointer instead\n \n     // No error if a coercion would otherwise occur.\n-    mem::transmute::<fn(), usize>(main);\n+    mem::transmute::<fn(), u32>(main);\n }\n \n unsafe fn baz() {\n@@ -58,7 +63,7 @@ unsafe fn baz() {\n     //~^^ NOTE cast with `as` to a pointer instead\n \n     // No error if a coercion would otherwise occur.\n-    mem::transmute::<Option<fn()>, usize>(Some(main));\n+    mem::transmute::<Option<fn()>, u32>(Some(main));\n }\n \n fn main() {", "previous_filename": "src/test/compile-fail/transmute-from-fn-item-types-error.rs"}, {"sha": "61ee5cf61283fa2937b16ad0307a40b46d72a679", "filename": "src/test/ui/transmute/transmute-from-fn-item-types-error.stderr", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -0,0 +1,108 @@\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-from-fn-item-types-error.rs:19:13\n+   |\n+19 |     let i = mem::transmute(bar);\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: source type: unsafe fn() {bar} (0 bits)\n+   = note: target type: i32 (32 bits)\n+\n+error[E0591]: can't transmute zero-sized type\n+  --> $DIR/transmute-from-fn-item-types-error.rs:23:13\n+   |\n+23 |     let p = mem::transmute(foo);\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: source type: unsafe fn() -> (i32, *const (), std::option::Option<fn()>) {foo}\n+   = note: target type: *const ()\n+   = help: cast with `as` to a pointer instead\n+\n+error[E0591]: can't transmute zero-sized type\n+  --> $DIR/transmute-from-fn-item-types-error.rs:27:14\n+   |\n+27 |     let of = mem::transmute(main);\n+   |              ^^^^^^^^^^^^^^\n+   |\n+   = note: source type: fn() {main}\n+   = note: target type: std::option::Option<fn()>\n+   = help: cast with `as` to a pointer instead\n+\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-from-fn-item-types-error.rs:36:5\n+   |\n+36 |     mem::transmute::<_, u8>(main);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: fn() {main} (0 bits)\n+   = note: target type: u8 (8 bits)\n+\n+error[E0591]: can't transmute zero-sized type\n+  --> $DIR/transmute-from-fn-item-types-error.rs:40:5\n+   |\n+40 |     mem::transmute::<_, *mut ()>(foo);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: unsafe fn() -> (i32, *const (), std::option::Option<fn()>) {foo}\n+   = note: target type: *mut ()\n+   = help: cast with `as` to a pointer instead\n+\n+error[E0591]: can't transmute zero-sized type\n+  --> $DIR/transmute-from-fn-item-types-error.rs:44:5\n+   |\n+44 |     mem::transmute::<_, fn()>(bar);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: unsafe fn() {bar}\n+   = note: target type: fn()\n+   = help: cast with `as` to a pointer instead\n+\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-from-fn-item-types-error.rs:49:5\n+   |\n+49 |     mem::transmute::<fn(), u32>(main);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: fn() (64 bits)\n+   = note: target type: u32 (32 bits)\n+\n+error[E0591]: can't transmute zero-sized type\n+  --> $DIR/transmute-from-fn-item-types-error.rs:53:5\n+   |\n+53 |     mem::transmute::<_, *mut ()>(Some(foo));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: unsafe fn() -> (i32, *const (), std::option::Option<fn()>) {foo}\n+   = note: target type: *mut ()\n+   = help: cast with `as` to a pointer instead\n+\n+error[E0591]: can't transmute zero-sized type\n+  --> $DIR/transmute-from-fn-item-types-error.rs:57:5\n+   |\n+57 |     mem::transmute::<_, fn()>(Some(bar));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: unsafe fn() {bar}\n+   = note: target type: fn()\n+   = help: cast with `as` to a pointer instead\n+\n+error[E0591]: can't transmute zero-sized type\n+  --> $DIR/transmute-from-fn-item-types-error.rs:61:5\n+   |\n+61 |     mem::transmute::<_, Option<fn()>>(Some(baz));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: unsafe fn() {baz}\n+   = note: target type: std::option::Option<fn()>\n+   = help: cast with `as` to a pointer instead\n+\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-from-fn-item-types-error.rs:66:5\n+   |\n+66 |     mem::transmute::<Option<fn()>, u32>(Some(main));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: std::option::Option<fn()> (64 bits)\n+   = note: target type: u32 (32 bits)\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "fa83a10dc48e88da1512ba3db41a2ba2bdad22ea", "filename": "src/test/ui/transmute/transmute-type-parameters.rs", "status": "renamed", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.rs?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -8,32 +8,37 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-x86\n+// ignore-arm\n+// ignore-emscripten\n+// ignore 32-bit platforms (test output is different)\n+\n // Tests that `transmute` cannot be called on type parameters.\n \n use std::mem::transmute;\n \n unsafe fn f<T>(x: T) {\n-    let _: isize = transmute(x);\n-//~^ ERROR differently sized types: T (size can vary) to isize\n+    let _: i32 = transmute(x);\n+//~^ ERROR differently sized types: T (size can vary) to i32\n }\n \n-unsafe fn g<T>(x: (T, isize)) {\n-    let _: isize = transmute(x);\n-//~^ ERROR differently sized types: (T, isize) (size can vary because of T) to isize\n+unsafe fn g<T>(x: (T, i32)) {\n+    let _: i32 = transmute(x);\n+//~^ ERROR differently sized types: (T, i32) (size can vary because of T) to i32\n }\n \n unsafe fn h<T>(x: [T; 10]) {\n-    let _: isize = transmute(x);\n-//~^ ERROR differently sized types: [T; 10] (size can vary because of T) to isize\n+    let _: i32 = transmute(x);\n+//~^ ERROR differently sized types: [T; 10] (size can vary because of T) to i32\n }\n \n struct Bad<T> {\n     f: T,\n }\n \n unsafe fn i<T>(x: Bad<T>) {\n-    let _: isize = transmute(x);\n-//~^ ERROR differently sized types: Bad<T> (size can vary because of T) to isize\n+    let _: i32 = transmute(x);\n+//~^ ERROR differently sized types: Bad<T> (size can vary because of T) to i32\n }\n \n enum Worse<T> {\n@@ -42,13 +47,13 @@ enum Worse<T> {\n }\n \n unsafe fn j<T>(x: Worse<T>) {\n-    let _: isize = transmute(x);\n-//~^ ERROR differently sized types: Worse<T> (size can vary because of T) to isize\n+    let _: i32 = transmute(x);\n+//~^ ERROR differently sized types: Worse<T> (size can vary because of T) to i32\n }\n \n unsafe fn k<T>(x: Option<T>) {\n-    let _: isize = transmute(x);\n-//~^ ERROR differently sized types: std::option::Option<T> (size can vary because of T) to isize\n+    let _: i32 = transmute(x);\n+//~^ ERROR differently sized types: std::option::Option<T> (size can vary because of T) to i32\n }\n \n fn main() {}", "previous_filename": "src/test/compile-fail/transmute-type-parameters.rs"}, {"sha": "bb21cfd3e4c9d462adc5b1e731f22a13a86c2982", "filename": "src/test/ui/transmute/transmute-type-parameters.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/737962056a67329e0bc4f47d0f00c7071df16cbb/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.stderr?ref=737962056a67329e0bc4f47d0f00c7071df16cbb", "patch": "@@ -0,0 +1,56 @@\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-type-parameters.rs:21:18\n+   |\n+21 |     let _: i32 = transmute(x);\n+   |                  ^^^^^^^^^\n+   |\n+   = note: source type: T (this type's size can vary)\n+   = note: target type: i32 (32 bits)\n+\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-type-parameters.rs:26:18\n+   |\n+26 |     let _: i32 = transmute(x);\n+   |                  ^^^^^^^^^\n+   |\n+   = note: source type: (T, i32) (size can vary because of T)\n+   = note: target type: i32 (32 bits)\n+\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-type-parameters.rs:31:18\n+   |\n+31 |     let _: i32 = transmute(x);\n+   |                  ^^^^^^^^^\n+   |\n+   = note: source type: [T; 10] (size can vary because of T)\n+   = note: target type: i32 (32 bits)\n+\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-type-parameters.rs:40:18\n+   |\n+40 |     let _: i32 = transmute(x);\n+   |                  ^^^^^^^^^\n+   |\n+   = note: source type: Bad<T> (size can vary because of T)\n+   = note: target type: i32 (32 bits)\n+\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-type-parameters.rs:50:18\n+   |\n+50 |     let _: i32 = transmute(x);\n+   |                  ^^^^^^^^^\n+   |\n+   = note: source type: Worse<T> (size can vary because of T)\n+   = note: target type: i32 (32 bits)\n+\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-type-parameters.rs:55:18\n+   |\n+55 |     let _: i32 = transmute(x);\n+   |                  ^^^^^^^^^\n+   |\n+   = note: source type: std::option::Option<T> (size can vary because of T)\n+   = note: target type: i32 (32 bits)\n+\n+error: aborting due to previous error(s)\n+"}]}