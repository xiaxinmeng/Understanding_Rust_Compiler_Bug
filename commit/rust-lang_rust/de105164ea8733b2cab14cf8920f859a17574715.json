{"sha": "de105164ea8733b2cab14cf8920f859a17574715", "node_id": "C_kwDOAAsO6NoAKGRlMTA1MTY0ZWE4NzMzYjJjYWIxNGNmODkyMGY4NTlhMTc1NzQ3MTU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-03T18:38:40Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-03T20:34:47Z"}, "message": "Mention array<->tuple convs in docs", "tree": {"sha": "ea735ce9f2d0d57aaeff08520a8f3a053ca7af99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea735ce9f2d0d57aaeff08520a8f3a053ca7af99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de105164ea8733b2cab14cf8920f859a17574715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de105164ea8733b2cab14cf8920f859a17574715", "html_url": "https://github.com/rust-lang/rust/commit/de105164ea8733b2cab14cf8920f859a17574715", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de105164ea8733b2cab14cf8920f859a17574715/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36f86936b2aef9ae9abba614037c3ab96c9a5af4", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f86936b2aef9ae9abba614037c3ab96c9a5af4", "html_url": "https://github.com/rust-lang/rust/commit/36f86936b2aef9ae9abba614037c3ab96c9a5af4"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "e06ccb5b2870ca3fa67ba0d1d95bc3b3c6cff26b", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/de105164ea8733b2cab14cf8920f859a17574715/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de105164ea8733b2cab14cf8920f859a17574715/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=de105164ea8733b2cab14cf8920f859a17574715", "patch": "@@ -610,6 +610,9 @@ mod prim_pointer {}\n /// if the element type allows it. As a stopgap, trait implementations are\n /// statically generated up to size 32.\n ///\n+/// Arrays of sizes from 1 to 12 (inclusive) implement [`From<Tuple>`], where `Tuple`\n+/// is a homogenous [prim@tuple] of appropriate length.\n+///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays.\n ///\n@@ -672,6 +675,13 @@ mod prim_pointer {}\n /// move_away(roa);\n /// ```\n ///\n+/// Arrays can be created from homogenous tuples of appropriate length:\n+///\n+/// ```\n+/// let tuple: (u32, u32, u32) = (1, 2, 3);\n+/// let array: [u32; 3] = tuple.into();\n+/// ```\n+///\n /// # Editions\n ///\n /// Prior to Rust 1.53, arrays did not implement [`IntoIterator`] by value, so the method call\n@@ -774,6 +784,7 @@ mod prim_pointer {}\n /// [`Borrow`]: borrow::Borrow\n /// [`BorrowMut`]: borrow::BorrowMut\n /// [slice pattern]: ../reference/patterns.html#slice-patterns\n+/// [`From<Tuple>`]: convert::From\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n@@ -1000,7 +1011,9 @@ mod prim_str {}\n /// * [`Debug`]\n /// * [`Default`]\n /// * [`Hash`]\n+/// * [`From<[T; N]>`][from]\n ///\n+/// [from]: convert::From\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash\n ///\n@@ -1051,6 +1064,13 @@ mod prim_str {}\n /// assert_eq!(y, 5);\n /// ```\n ///\n+/// Homogenous tuples can be created from arrays of appropriate length:\n+///\n+/// ```\n+/// let array: [u32; 3] = [1, 2, 3];\n+/// let tuple: (u32, u32, u32) = array.into();\n+/// ```\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_tuple {}\n "}, {"sha": "e06ccb5b2870ca3fa67ba0d1d95bc3b3c6cff26b", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/de105164ea8733b2cab14cf8920f859a17574715/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de105164ea8733b2cab14cf8920f859a17574715/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=de105164ea8733b2cab14cf8920f859a17574715", "patch": "@@ -610,6 +610,9 @@ mod prim_pointer {}\n /// if the element type allows it. As a stopgap, trait implementations are\n /// statically generated up to size 32.\n ///\n+/// Arrays of sizes from 1 to 12 (inclusive) implement [`From<Tuple>`], where `Tuple`\n+/// is a homogenous [prim@tuple] of appropriate length.\n+///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays.\n ///\n@@ -672,6 +675,13 @@ mod prim_pointer {}\n /// move_away(roa);\n /// ```\n ///\n+/// Arrays can be created from homogenous tuples of appropriate length:\n+///\n+/// ```\n+/// let tuple: (u32, u32, u32) = (1, 2, 3);\n+/// let array: [u32; 3] = tuple.into();\n+/// ```\n+///\n /// # Editions\n ///\n /// Prior to Rust 1.53, arrays did not implement [`IntoIterator`] by value, so the method call\n@@ -774,6 +784,7 @@ mod prim_pointer {}\n /// [`Borrow`]: borrow::Borrow\n /// [`BorrowMut`]: borrow::BorrowMut\n /// [slice pattern]: ../reference/patterns.html#slice-patterns\n+/// [`From<Tuple>`]: convert::From\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n@@ -1000,7 +1011,9 @@ mod prim_str {}\n /// * [`Debug`]\n /// * [`Default`]\n /// * [`Hash`]\n+/// * [`From<[T; N]>`][from]\n ///\n+/// [from]: convert::From\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash\n ///\n@@ -1051,6 +1064,13 @@ mod prim_str {}\n /// assert_eq!(y, 5);\n /// ```\n ///\n+/// Homogenous tuples can be created from arrays of appropriate length:\n+///\n+/// ```\n+/// let array: [u32; 3] = [1, 2, 3];\n+/// let tuple: (u32, u32, u32) = array.into();\n+/// ```\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_tuple {}\n "}]}