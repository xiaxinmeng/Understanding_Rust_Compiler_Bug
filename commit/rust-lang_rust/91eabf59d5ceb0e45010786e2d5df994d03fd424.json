{"sha": "91eabf59d5ceb0e45010786e2d5df994d03fd424", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZWFiZjU5ZDVjZWIwZTQ1MDEwNzg2ZTJkNWRmOTk0ZDAzZmQ0MjQ=", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2020-11-11T23:15:39Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2020-11-11T23:15:39Z"}, "message": "Add a sane error for rust-call functions not taking tuples during type checking, and associated UI tests", "tree": {"sha": "28e4795236113cd71befb980e77f9608eb3f559e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28e4795236113cd71befb980e77f9608eb3f559e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91eabf59d5ceb0e45010786e2d5df994d03fd424", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAl+scKQACgkQfsyTL4ss\ncx4FqxAAgvN8mhKaDN2gNtWdYiXNp/vJV5VTzmP4j81hMNNnlz/eX8DqQZmcLbwk\nejMZcTwmaLQHiz9qcKYcczIevyjvNLLY50Z/JDdZ+j7x3sT6vdIybhv4OdIPpzCO\nYe2XFl+xM1yRYUNwV5Hph8Ei037WYzL3N+qTbtabcvtyFVfyYpRp+tYVwNeHCe1i\neESErLCcwoT9fmTrCMqvtC/wrgq0bRXD//4J3Ed4fXmokmsSQhivQl04EkUI/1gC\nKj/m710pT4f07OSC/2SyPQGDklTT6fzhnGSrz2DNNNm23ig+OflM3HuJX8a4B/eS\nWHnHeqv3ANQW4luj2g/GcNrvcn+88gw7nag0w78M+smSVw92wdeetc63kIiX7zZk\nNOZR/FfPzGMqViVpR9LwiUXUHOJQP9+sA31QDSm4or6T64+j7bOuBLx+Nqylcpnm\noWl9ZRWGTY86WideFUT7fd98ihEUuLIYOHeMcsOWrDbKsOoIRIls0U7QWFpbv8yK\nT8d7HKCGxGzEJtRTCY2Tyb69Cx9frDrnK4+uQ5lT4CFCdnmqXR9HuDkcoaMfSAYy\nn9M9ZjB+cAHZ6PP3drJQvc4osqBRt8Fo74vt4fxS7dn2atxUZN7CijaRZWXWBJyR\nIv9u4BEAwcgHpPKIdxU70lL3CSdUhtuWObFTy0EdMahv1q6wejk=\n=NC7m\n-----END PGP SIGNATURE-----", "payload": "tree 28e4795236113cd71befb980e77f9608eb3f559e\nparent 9d78d1d02761b906038ba4d54c5f3427f920f5fb\nauthor Rune Tynan <runetynan@gmail.com> 1605136539 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1605136539 -0500\n\nAdd a sane error for rust-call functions not taking tuples during type checking, and associated UI tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91eabf59d5ceb0e45010786e2d5df994d03fd424", "html_url": "https://github.com/rust-lang/rust/commit/91eabf59d5ceb0e45010786e2d5df994d03fd424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91eabf59d5ceb0e45010786e2d5df994d03fd424/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d78d1d02761b906038ba4d54c5f3427f920f5fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d78d1d02761b906038ba4d54c5f3427f920f5fb", "html_url": "https://github.com/rust-lang/rust/commit/9d78d1d02761b906038ba4d54c5f3427f920f5fb"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "67592fa7840b87a68a5d4adb98653b1b88439e54", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/91eabf59d5ceb0e45010786e2d5df994d03fd424/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91eabf59d5ceb0e45010786e2d5df994d03fd424/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=91eabf59d5ceb0e45010786e2d5df994d03fd424", "patch": "@@ -108,7 +108,7 @@ use rustc_hir::def::Res;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::{HirIdMap, Node};\n+use rustc_hir::{HirIdMap, ImplicitSelfKind, Node};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -137,6 +137,7 @@ use crate::util::common::indenter;\n \n use self::coercion::DynamicCoerceMany;\n pub use self::Expectation::*;\n+use rustc_target::spec::abi;\n \n #[macro_export]\n macro_rules! type_error_struct {\n@@ -520,6 +521,35 @@ fn typeck_with_fallback<'tcx>(\n \n             let fn_sig = fixup_opaque_types(tcx, &fn_sig);\n \n+            if fn_sig.abi == abi::Abi::RustCall {\n+                let expected_args = if let ImplicitSelfKind::None = decl.implicit_self { 1 } else { 2 };\n+\n+                let err = || {\n+                    if let Node::Item(item) = tcx.hir().get(id) {\n+                        if let hir::ItemKind::Fn(header, ..) = &item.kind {\n+                            tcx.sess.span_err(header.span, \"A function with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\")\n+                        }\n+                    } else {\n+                        bug!(\"Couldn't get span of FnHeader being checked\")\n+                    }\n+                };\n+\n+                if fn_sig.inputs().len() != expected_args {\n+                    err()\n+                } else {\n+                    match fn_sig.inputs()[expected_args - 1].kind() {\n+                        ty::Tuple(_) => (),\n+                        // FIXME(CraftSpider) Add a check on parameter expansion, so we don't just make the ICE happen later on\n+                        //   This will probably require wide-scale changes to support a TupleKind obligation\n+                        //   We can't resolve this without knowing the type of the param\n+                        ty::Param(_) => (),\n+                        _ => {\n+                            err()\n+                        }\n+                    }\n+                }\n+            }\n+\n             let fcx = check_fn(&inh, param_env, fn_sig, decl, id, body, None).0;\n             fcx\n         } else {"}, {"sha": "055d959b46e10288eb5d39a3a1bb1399cacf3bfc", "filename": "src/test/ui/abi/issues/issue-22565-rust-call.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91eabf59d5ceb0e45010786e2d5df994d03fd424/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91eabf59d5ceb0e45010786e2d5df994d03fd424/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs?ref=91eabf59d5ceb0e45010786e2d5df994d03fd424", "patch": "@@ -0,0 +1,8 @@\n+#![feature(unboxed_closures)]\n+\n+extern \"rust-call\" fn b(_i: i32) {}\n+//~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+\n+fn main () {\n+    b(10);\n+}"}, {"sha": "31fb035eb99afb87a66717805f6aa65c896cf683", "filename": "src/test/ui/abi/issues/issue-22565-rust-call.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91eabf59d5ceb0e45010786e2d5df994d03fd424/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91eabf59d5ceb0e45010786e2d5df994d03fd424/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr?ref=91eabf59d5ceb0e45010786e2d5df994d03fd424", "patch": "@@ -0,0 +1,8 @@\n+error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+  --> $DIR/issue-22565-rust-call.rs:3:1\n+   |\n+LL | extern \"rust-call\" fn b(_i: i32) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2fa41a7e35a74b563f87d28316ae894a8096a718", "filename": "src/test/ui/abi/rustcall-generic.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91eabf59d5ceb0e45010786e2d5df994d03fd424/src%2Ftest%2Fui%2Fabi%2Frustcall-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91eabf59d5ceb0e45010786e2d5df994d03fd424/src%2Ftest%2Fui%2Fabi%2Frustcall-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Frustcall-generic.rs?ref=91eabf59d5ceb0e45010786e2d5df994d03fd424", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+#![feature(unboxed_closures)]\n+\n+extern \"rust-call\" fn foo<T>(_: T) {}\n+\n+fn main() {\n+    foo(());\n+    foo((1, 2));\n+}"}, {"sha": "25f0c259d111cb9cdf6c1c9a7daf68132c616fd1", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91eabf59d5ceb0e45010786e2d5df994d03fd424/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91eabf59d5ceb0e45010786e2d5df994d03fd424/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=91eabf59d5ceb0e45010786e2d5df994d03fd424", "patch": "@@ -26,7 +26,7 @@ LL | extern \"vectorcall\" fn f3() {}\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:18:8\n    |\n-LL | extern \"rust-call\" fn f4() {}\n+LL | extern \"rust-call\" fn f4(_: ()) {}\n    |        ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n@@ -113,7 +113,7 @@ LL |     extern \"vectorcall\" fn m3();\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:33:12\n    |\n-LL |     extern \"rust-call\" fn m4();\n+LL |     extern \"rust-call\" fn m4(_: ());\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n@@ -183,7 +183,7 @@ LL |     extern \"vectorcall\" fn dm3() {}\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:42:12\n    |\n-LL |     extern \"rust-call\" fn dm4() {}\n+LL |     extern \"rust-call\" fn dm4(_: ()) {}\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n@@ -270,7 +270,7 @@ LL |     extern \"vectorcall\" fn m3() {}\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:60:12\n    |\n-LL |     extern \"rust-call\" fn m4() {}\n+LL |     extern \"rust-call\" fn m4(_: ()) {}\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n@@ -357,7 +357,7 @@ LL |     extern \"vectorcall\" fn im3() {}\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:76:12\n    |\n-LL |     extern \"rust-call\" fn im4() {}\n+LL |     extern \"rust-call\" fn im4(_: ()) {}\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n@@ -444,7 +444,7 @@ LL | type A3 = extern \"vectorcall\" fn();\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:89:18\n    |\n-LL | type A4 = extern \"rust-call\" fn();\n+LL | type A4 = extern \"rust-call\" fn(_: ());\n    |                  ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information"}]}