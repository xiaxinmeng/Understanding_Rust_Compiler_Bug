{"sha": "2a56323537442958008d0fddd78e33df425b11a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNTYzMjM1Mzc0NDI5NTgwMDhkMGZkZGQ3OGUzM2RmNDI1YjExYTk=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2020-06-23T13:17:53Z"}, "committer": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2020-06-23T16:13:50Z"}, "message": "Update injection mechanism and stop injecting through highlight element, switch to more general new highlight tag, generic", "tree": {"sha": "ee3a7043c21df2aab8be6b7bb2ab83dd6fe4b84f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee3a7043c21df2aab8be6b7bb2ab83dd6fe4b84f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a56323537442958008d0fddd78e33df425b11a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a56323537442958008d0fddd78e33df425b11a9", "html_url": "https://github.com/rust-lang/rust/commit/2a56323537442958008d0fddd78e33df425b11a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a56323537442958008d0fddd78e33df425b11a9/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8230acd84dc931f72b9dd32b8fbc2aa887d8b4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8230acd84dc931f72b9dd32b8fbc2aa887d8b4b", "html_url": "https://github.com/rust-lang/rust/commit/d8230acd84dc931f72b9dd32b8fbc2aa887d8b4b"}], "stats": {"total": 457, "additions": 239, "deletions": 218}, "files": [{"sha": "ecac5134e6970e599a410210b8eb7a46a42ec903", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -443,13 +443,13 @@ impl Analysis {\n \n     /// Computes syntax highlighting for the given file\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n-        self.with_db(|db| syntax_highlighting::highlight(db, file_id, None, false, false))\n+        self.with_db(|db| syntax_highlighting::highlight(db, file_id, None, false))\n     }\n \n     /// Computes syntax highlighting for the given file range.\n     pub fn highlight_range(&self, frange: FileRange) -> Cancelable<Vec<HighlightedRange>> {\n         self.with_db(|db| {\n-            syntax_highlighting::highlight(db, frange.file_id, Some(frange.range), false, false)\n+            syntax_highlighting::highlight(db, frange.file_id, Some(frange.range), false)\n         })\n     }\n "}, {"sha": "c5ab5a1d87ba18d94068ec8bceb6514525d998ec", "filename": "crates/ra_ide/src/prime_caches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -7,6 +7,6 @@ use crate::{FileId, RootDatabase};\n \n pub(crate) fn prime_caches(db: &RootDatabase, files: Vec<FileId>) {\n     for file in files {\n-        let _ = crate::syntax_highlighting::highlight(db, file, None, false, false);\n+        let _ = crate::syntax_highlighting::highlight(db, file, None, false);\n     }\n }"}, {"sha": "e8155def75eb6ccf9e52bf627b6a86bb5830372d", "filename": "crates/ra_ide/src/snapshots/highlight_doctest.html", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -35,67 +35,67 @@\n .control            { font-style: italic; }\n </style>\n <pre><code><span class=\"comment documentation\">/// ```</span>\n-<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span> <span class=\"punctuation injected\">_</span> <span class=\"punctuation injected\">=</span> <span class=\"string_literal injected\">\"early doctests should not go boom\"</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n-</span><span class=\"comment documentation\">/// ```</span>\n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"field declaration\">bar</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">bool</span><span class=\"punctuation\">,</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> _ = </span><span class=\"string_literal injected\">\"early doctests should not go boom\"</span><span class=\"generic injected\">;</span>\n+<span class=\"comment documentation\">/// ```</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> {\n+    <span class=\"field declaration\">bar</span>: <span class=\"builtin_type\">bool</span>,\n+}\n \n-<span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"constant declaration\">bar</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">bool</span> <span class=\"punctuation\">=</span> <span class=\"bool_literal\">true</span><span class=\"punctuation\">;</span>\n+<span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> {\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"constant declaration\">bar</span>: <span class=\"builtin_type\">bool</span> = <span class=\"bool_literal\">true</span>;\n \n     <span class=\"comment documentation\">/// Constructs a new `Foo`.</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// #</span> <span class=\"punctuation injected\">#</span><span class=\"punctuation injected\">!</span><span class=\"punctuation injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"punctuation injected\">(</span><span class=\"attribute injected\">unused_mut</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">]</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span> <span class=\"keyword injected\">mut</span> <span class=\"variable declaration injected mutable\">foo</span><span class=\"punctuation injected\">:</span> <span class=\"struct injected\">Foo</span> <span class=\"punctuation injected\">=</span> <span class=\"struct injected\">Foo</span><span class=\"punctuation injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n-</span>    <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">new</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n-        <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">bar</span><span class=\"punctuation\">:</span> <span class=\"bool_literal\">true</span> <span class=\"punctuation\">}</span>\n-    <span class=\"punctuation\">}</span>\n+    <span class=\"comment documentation\">/// #</span><span class=\"generic injected\"> </span><span class=\"attribute injected\">#![</span><span class=\"function attribute injected\">allow</span><span class=\"attribute injected\">(unused_mut)]</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"generic injected\">: </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\"> = </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\">::</span><span class=\"function injected\">new</span><span class=\"generic injected\">();</span>\n+    <span class=\"comment documentation\">/// ```</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">new</span>() -&gt; <span class=\"struct\">Foo</span> {\n+        <span class=\"struct\">Foo</span> { <span class=\"field\">bar</span>: <span class=\"bool_literal\">true</span> }\n+    }\n \n     <span class=\"comment documentation\">/// `bar` method on `Foo`.</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">use</span> <span class=\"module injected\">x</span><span class=\"punctuation injected\">::</span><span class=\"module injected\">y</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">use</span><span class=\"generic injected\"> </span><span class=\"module injected\">x</span><span class=\"generic injected\">::</span><span class=\"module injected\">y</span><span class=\"generic injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span> <span class=\"variable declaration injected\">foo</span> <span class=\"punctuation injected\">=</span> <span class=\"struct injected\">Foo</span><span class=\"punctuation injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">foo</span><span class=\"generic injected\"> = </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\">::</span><span class=\"function injected\">new</span><span class=\"generic injected\">();</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">// calls bar on foo</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"punctuation injected\">(</span>foo<span class=\"punctuation injected\">.</span>bar<span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"generic injected\">(foo.bar());</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span> <span class=\"variable declaration injected\">bar</span> <span class=\"punctuation injected\">=</span> <span class=\"variable injected\">foo</span><span class=\"punctuation injected\">.</span><span class=\"field injected\">bar</span> <span class=\"punctuation injected\">||</span> <span class=\"struct injected\">Foo</span><span class=\"punctuation injected\">::</span><span class=\"constant injected\">bar</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">bar</span><span class=\"generic injected\"> = </span><span class=\"variable injected\">foo</span><span class=\"generic injected\">.</span><span class=\"field injected\">bar</span><span class=\"generic injected\"> || </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\">::</span><span class=\"constant injected\">bar</span><span class=\"generic injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">/* multi-line\n     </span><span class=\"comment documentation\">/// </span><span class=\"comment injected\">       comment */</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span> <span class=\"variable declaration injected\">multi_line_string</span> <span class=\"punctuation injected\">=</span> <span class=\"string_literal injected\">\"Foo\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">multi_line_string</span><span class=\"generic injected\"> = </span><span class=\"string_literal injected\">\"Foo\n     </span><span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">  bar\n-    </span><span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">         \"</span><span class=\"punctuation injected\">;</span>\n+    </span><span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">         \"</span><span class=\"generic injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```rust,no_run</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span> <span class=\"variable declaration injected\">foobar</span> <span class=\"punctuation injected\">=</span> <span class=\"struct injected\">Foo</span><span class=\"punctuation injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">.</span><span class=\"function injected\">bar</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n-</span>    <span class=\"comment documentation\">/// ```</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"generic injected\"> = </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\">::</span><span class=\"function injected\">new</span><span class=\"generic injected\">().</span><span class=\"function injected\">bar</span><span class=\"generic injected\">();</span>\n+    <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```sh</span>\n     <span class=\"comment documentation\">/// echo 1</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>(&<span class=\"self_keyword\">self</span>) -&gt; <span class=\"builtin_type\">bool</span> {\n         <span class=\"bool_literal\">true</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+    }\n+}\n \n <span class=\"comment documentation\">/// ```</span>\n-<span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop!</span><span class=\"punctuation injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n-</span><span class=\"comment documentation\">/// ```</span>\n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">noop</span> <span class=\"punctuation\">{</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>expr<span class=\"punctuation\">:</span>expr<span class=\"punctuation\">)</span> <span class=\"punctuation\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n-        <span class=\"punctuation\">$</span>expr\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop!</span><span class=\"generic injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"generic injected\">);</span>\n+<span class=\"comment documentation\">/// ```</span>\n+<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">noop</span> {\n+    ($expr:expr) =&gt; {\n+        $expr\n+    }\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "1b0349bae2ee83a4e30f24444d4e454e487a8a3c", "filename": "crates/ra_ide/src/snapshots/highlight_injection.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -34,14 +34,14 @@\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n </style>\n-<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">fixture</span><span class=\"punctuation\">(</span><span class=\"variable declaration\">ra_fixture</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&</span><span class=\"builtin_type\">str</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">fixture</span>(<span class=\"variable declaration\">ra_fixture</span>: &<span class=\"builtin_type\">str</span>) {}\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"function\">fixture</span><span class=\"punctuation\">(</span><span class=\"string_literal\">r#\"</span>\n-        <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> <span class=\"punctuation\">{</span>\n-            <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-                <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"2 + 2 = {}\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">4</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-            <span class=\"punctuation\">}</span>\n-        <span class=\"punctuation\">}</span><span class=\"string_literal\">\"#</span>\n-    <span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n+    <span class=\"function\">fixture</span>(<span class=\"string_literal\">r#\"</span>\n+        <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> {\n+            <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>() {\n+                <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"2 + 2 = {}\"</span>, <span class=\"numeric_literal\">4</span>);\n+            }\n+        }<span class=\"string_literal\">\"#</span>\n+    );\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "d184b569102401c8831c1f806d3634ad2b26e6a2", "filename": "crates/ra_ide/src/snapshots/highlight_strings.html", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -34,62 +34,62 @@\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n </style>\n-<pre><code><span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">println</span> <span class=\"punctuation\">{</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>arg<span class=\"punctuation\">:</span>tt<span class=\"punctuation\">)</span>*<span class=\"punctuation\">)</span> <span class=\"punctuation\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">{</span>\n-        <span class=\"punctuation\">$</span><span class=\"keyword\">crate</span><span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>io<span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>_print<span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"keyword\">crate</span><span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>format_args_nl<span class=\"punctuation\">!</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>arg<span class=\"punctuation\">)</span>*<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">}</span><span class=\"punctuation\">)</span>\n-<span class=\"punctuation\">}</span>\n+<pre><code><span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">println</span> {\n+    ($($arg:tt)*) =&gt; ({\n+        $<span class=\"keyword\">crate</span>::io::_print($<span class=\"keyword\">crate</span>::format_args_nl!($($arg)*));\n+    })\n+}\n #[rustc_builtin_macro]\n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">format_args_nl</span> <span class=\"punctuation\">{</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"punctuation\">:</span>expr<span class=\"punctuation\">)</span> <span class=\"punctuation\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"punctuation\">:</span>expr<span class=\"punctuation\">,</span> <span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>args<span class=\"punctuation\">:</span>tt<span class=\"punctuation\">)</span>*<span class=\"punctuation\">)</span> <span class=\"punctuation\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">format_args_nl</span> {\n+    ($fmt:expr) =&gt; {{ <span class=\"comment\">/* compiler built-in */</span> }};\n+    ($fmt:expr, $($args:tt)*) =&gt; {{ <span class=\"comment\">/* compiler built-in */</span> }};\n+}\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n     <span class=\"comment\">// from https://doc.rust-lang.org/std/fmt/index.html</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>   <span class=\"comment\">// =&gt; \"Hello, world!\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"The number is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>   <span class=\"comment\">// =&gt; \"The number is 1\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">(</span><span class=\"numeric_literal\">3</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">4</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>          <span class=\"comment\">// =&gt; \"(3, 4)\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">value</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> value<span class=\"punctuation\">=</span><span class=\"numeric_literal\">4</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>      <span class=\"comment\">// =&gt; \"4\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>           <span class=\"comment\">// =&gt; \"1 2\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">4</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">42</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>             <span class=\"comment\">// =&gt; \"0042\" with leading zerosV</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>   <span class=\"comment\">// =&gt; \"2 1 1 2\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">argument</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> argument <span class=\"punctuation\">=</span> <span class=\"string_literal\">\"test\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>   <span class=\"comment\">// =&gt; \"test\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">,</span> name <span class=\"punctuation\">=</span> <span class=\"numeric_literal\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>          <span class=\"comment\">// =&gt; \"2 1\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">a</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">c</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">b</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> a<span class=\"punctuation\">=</span><span class=\"string_literal\">\"a\"</span><span class=\"punctuation\">,</span> b<span class=\"punctuation\">=</span><span class=\"char_literal\">'b'</span><span class=\"punctuation\">,</span> c<span class=\"punctuation\">=</span><span class=\"numeric_literal\">3</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>  <span class=\"comment\">// =&gt; \"a 3 b\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"{{</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">}}\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>                       <span class=\"comment\">// =&gt; \"{2}\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">width</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> width <span class=\"punctuation\">=</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">-</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">^</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">27</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">-</span><span class=\"numeric_literal\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">27</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> prec <span class=\"punctuation\">=</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">,</span> number <span class=\"punctuation\">=</span> <span class=\"numeric_literal\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">3</span><span class=\"punctuation\">,</span> name<span class=\"punctuation\">=</span><span class=\"numeric_literal\">1234.56</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">3</span><span class=\"punctuation\">,</span> name<span class=\"punctuation\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">3</span><span class=\"punctuation\">,</span> name<span class=\"punctuation\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello {{}}\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"{{ Hello\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello\"</span>);                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"world\"</span>);   <span class=\"comment\">// =&gt; \"Hello, world!\"</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"The number is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"numeric_literal\">1</span>);   <span class=\"comment\">// =&gt; \"The number is 1\"</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, (<span class=\"numeric_literal\">3</span>, <span class=\"numeric_literal\">4</span>));          <span class=\"comment\">// =&gt; \"(3, 4)\"</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">value</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, value=<span class=\"numeric_literal\">4</span>);      <span class=\"comment\">// =&gt; \"4\"</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"numeric_literal\">1</span>, <span class=\"numeric_literal\">2</span>);           <span class=\"comment\">// =&gt; \"1 2\"</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">4</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"numeric_literal\">42</span>);             <span class=\"comment\">// =&gt; \"0042\" with leading zerosV</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"numeric_literal\">1</span>, <span class=\"numeric_literal\">2</span>);   <span class=\"comment\">// =&gt; \"2 1 1 2\"</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">argument</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, argument = <span class=\"string_literal\">\"test\"</span>);   <span class=\"comment\">// =&gt; \"test\"</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"numeric_literal\">1</span>, name = <span class=\"numeric_literal\">2</span>);          <span class=\"comment\">// =&gt; \"2 1\"</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">a</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">c</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">b</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, a=<span class=\"string_literal\">\"a\"</span>, b=<span class=\"char_literal\">'b'</span>, c=<span class=\"numeric_literal\">3</span>);  <span class=\"comment\">// =&gt; \"a 3 b\"</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"{{</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">}}\"</span>, <span class=\"numeric_literal\">2</span>);                       <span class=\"comment\">// =&gt; \"{2}\"</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>, <span class=\"numeric_literal\">5</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">5</span>, <span class=\"string_literal\">\"x\"</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">width</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>, width = <span class=\"numeric_literal\">5</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">-</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">^</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">5</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">27</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">5</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, -<span class=\"numeric_literal\">5</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">27</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"string_literal\">\"x\"</span>, <span class=\"numeric_literal\">0.01</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"numeric_literal\">5</span>, <span class=\"string_literal\">\"x\"</span>, <span class=\"numeric_literal\">0.01</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"string_literal\">\"x\"</span>, <span class=\"numeric_literal\">5</span>, <span class=\"numeric_literal\">0.01</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>,    <span class=\"string_literal\">\"x\"</span>, <span class=\"numeric_literal\">5</span>, <span class=\"numeric_literal\">0.01</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>,   <span class=\"string_literal\">\"x\"</span>, <span class=\"numeric_literal\">5</span>, <span class=\"numeric_literal\">0.01</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"string_literal\">\"x\"</span>, prec = <span class=\"numeric_literal\">5</span>, number = <span class=\"numeric_literal\">0.01</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span>, <span class=\"string_literal\">\"Hello\"</span>, <span class=\"numeric_literal\">3</span>, name=<span class=\"numeric_literal\">1234.56</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span>, <span class=\"string_literal\">\"Hello\"</span>, <span class=\"numeric_literal\">3</span>, name=<span class=\"string_literal\">\"1234.56\"</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span>, <span class=\"string_literal\">\"Hello\"</span>, <span class=\"numeric_literal\">3</span>, name=<span class=\"string_literal\">\"1234.56\"</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello {{}}\"</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"{{ Hello\"</span>);\n \n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">r\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">r\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"world\"</span>);\n \n     <span class=\"comment\">// escape sequences</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">World\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\u{48}</span><span class=\"escape_sequence\">\\x65</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6F</span><span class=\"string_literal\"> World\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">World\"</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\u{48}</span><span class=\"escape_sequence\">\\x65</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6F</span><span class=\"string_literal\"> World\"</span>);\n \n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> A <span class=\"punctuation\">=</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"punctuation\">=</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, A = <span class=\"numeric_literal\">92</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, \u043d\u0438\u0447\u043e\u0441\u0438 = <span class=\"numeric_literal\">92</span>);\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "6936e949fe8e5a10653a2630b00f69885d124333", "filename": "crates/ra_ide/src/snapshots/highlight_unsafe.html", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -34,20 +34,20 @@\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n </style>\n-<pre><code><span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<pre><code><span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span>() {}\n \n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span><span class=\"punctuation\">;</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span>;\n \n-<span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> {\n+    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_method</span>(&<span class=\"self_keyword\">self</span>) {}\n+}\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"punctuation\">=</span> <span class=\"punctuation\">&</span><span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> *<span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword unsafe\">unsafe</span> <span class=\"punctuation\">{</span>\n-        <span class=\"function unsafe\">unsafe_fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"struct\">HasUnsafeFn</span><span class=\"punctuation\">.</span><span class=\"function unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"punctuation\">=</span> <span class=\"operator unsafe\">*</span><span class=\"punctuation\">(</span><span class=\"variable\">x</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> <span class=\"punctuation\">=</span> <span class=\"punctuation\">-</span><span class=\"variable\">x</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> = &<span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> *<span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span>;\n+    <span class=\"keyword unsafe\">unsafe</span> {\n+        <span class=\"function unsafe\">unsafe_fn</span>();\n+        <span class=\"struct\">HasUnsafeFn</span>.<span class=\"function unsafe\">unsafe_method</span>();\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> = <span class=\"operator unsafe\">*</span>(<span class=\"variable\">x</span>);\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> = -<span class=\"variable\">x</span>;\n+    }\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "8d0b38f958dcea4887e97477cfc5d756c8348a28", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -34,84 +34,84 @@\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n </style>\n-<pre><code><span class=\"punctuation\">#</span><span class=\"punctuation\">[</span><span class=\"function attribute\">derive</span><span class=\"punctuation\">(</span><span class=\"attribute\">Clone</span><span class=\"punctuation\">,</span><span class=\"attribute\"> Debug</span><span class=\"punctuation\">)</span><span class=\"punctuation\">]</span>\n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"field declaration\">x</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">,</span>\n-    <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">,</span>\n-<span class=\"punctuation\">}</span>\n-\n-<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span>\n-\n-<span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n-        <span class=\"self_keyword\">self</span><span class=\"punctuation\">.</span><span class=\"field\">x</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n-\n-<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable\">STATIC_MUT</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">=</span> <span class=\"numeric_literal\">0</span><span class=\"punctuation\">;</span>\n-\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">&lt;</span><span class=\"lifetime declaration\">'a</span><span class=\"punctuation\">,</span> <span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">-&gt;</span> <span class=\"type_param\">T</span> <span class=\"punctuation\">{</span>\n-    <span class=\"function\">foo</span><span class=\"punctuation\">::</span><span class=\"punctuation\">&lt;</span><span class=\"lifetime\">'a</span><span class=\"punctuation\">,</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>\n-<span class=\"punctuation\">}</span>\n-\n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">def_fn</span> <span class=\"punctuation\">{</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>tt<span class=\"punctuation\">:</span>tt<span class=\"punctuation\">)</span>*<span class=\"punctuation\">)</span> <span class=\"punctuation\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>tt<span class=\"punctuation\">)</span>*<span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n-\n-<span class=\"macro\">def_fn!</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">-</span><span class=\"punctuation\">&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"punctuation\">{</span>\n+<pre><code><span class=\"attribute\">#[</span><span class=\"function attribute\">derive</span><span class=\"attribute\">(Clone, Debug)]</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> {\n+    <span class=\"keyword\">pub</span> <span class=\"field declaration\">x</span>: <span class=\"builtin_type\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span>: <span class=\"builtin_type\">i32</span>,\n+}\n+\n+<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> {\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>(&<span class=\"self_keyword\">self</span>) -&gt; <span class=\"builtin_type\">i32</span>;\n+}\n+\n+<span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> {\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>(&<span class=\"self_keyword\">self</span>) -&gt; <span class=\"builtin_type\">i32</span> {\n+        <span class=\"self_keyword\">self</span>.<span class=\"field\">x</span>\n+    }\n+}\n+\n+<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable\">STATIC_MUT</span>: <span class=\"builtin_type\">i32</span> = <span class=\"numeric_literal\">0</span>;\n+\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>&lt;<span class=\"lifetime declaration\">'a</span>, <span class=\"type_param declaration\">T</span>&gt;() -&gt; <span class=\"type_param\">T</span> {\n+    <span class=\"function\">foo</span>::&lt;<span class=\"lifetime\">'a</span>, <span class=\"builtin_type\">i32</span>&gt;()\n+}\n+\n+<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">def_fn</span> {\n+    ($($tt:tt)*) =&gt; {$($tt)*}\n+}\n+\n+<span class=\"macro\">def_fn!</span> {\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>() -&gt; <span class=\"builtin_type\">u32</span> {\n         <span class=\"numeric_literal\">100</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+    }\n+}\n \n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">noop</span> <span class=\"punctuation\">{</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>expr<span class=\"punctuation\">:</span>expr<span class=\"punctuation\">)</span> <span class=\"punctuation\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n-        <span class=\"punctuation\">$</span>expr\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">noop</span> {\n+    ($expr:expr) =&gt; {\n+        $expr\n+    }\n+}\n \n <span class=\"comment\">// comment</span>\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> <span class=\"punctuation\">=</span> <span class=\"unresolved_reference\">Vec</span><span class=\"punctuation\">::</span><span class=\"unresolved_reference\">new</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword control\">if</span> <span class=\"bool_literal\">true</span> <span class=\"punctuation\">{</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"punctuation\">=</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">;</span>\n-        <span class=\"variable mutable\">vec</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">push</span><span class=\"punctuation\">(</span><span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">1</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">}</span>\n-    <span class=\"keyword unsafe\">unsafe</span> <span class=\"punctuation\">{</span>\n-        <span class=\"variable mutable\">vec</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">set_len</span><span class=\"punctuation\">(</span><span class=\"numeric_literal\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"static mutable\">STATIC_MUT</span> <span class=\"punctuation\">=</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">}</span>\n-\n-    <span class=\"keyword control\">for</span> <span class=\"variable declaration\">e</span> <span class=\"keyword control\">in</span> <span class=\"variable mutable\">vec</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello, {}!\"</span>, <span class=\"numeric_literal\">92</span>);\n+\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> = <span class=\"unresolved_reference\">Vec</span>::<span class=\"unresolved_reference\">new</span>();\n+    <span class=\"keyword control\">if</span> <span class=\"bool_literal\">true</span> {\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> = <span class=\"numeric_literal\">92</span>;\n+        <span class=\"variable mutable\">vec</span>.<span class=\"unresolved_reference\">push</span>(<span class=\"struct\">Foo</span> { <span class=\"field\">x</span>, <span class=\"field\">y</span>: <span class=\"numeric_literal\">1</span> });\n+    }\n+    <span class=\"keyword unsafe\">unsafe</span> {\n+        <span class=\"variable mutable\">vec</span>.<span class=\"unresolved_reference\">set_len</span>(<span class=\"numeric_literal\">0</span>);\n+        <span class=\"static mutable\">STATIC_MUT</span> = <span class=\"numeric_literal\">1</span>;\n+    }\n+\n+    <span class=\"keyword control\">for</span> <span class=\"variable declaration\">e</span> <span class=\"keyword control\">in</span> <span class=\"variable mutable\">vec</span> {\n         <span class=\"comment\">// Do nothing</span>\n-    <span class=\"punctuation\">}</span>\n+    }\n \n-    <span class=\"macro\">noop!</span><span class=\"punctuation\">(</span><span class=\"macro\">noop</span><span class=\"macro\">!</span><span class=\"punctuation\">(</span><span class=\"numeric_literal\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"macro\">noop!</span>(<span class=\"macro\">noop</span><span class=\"macro\">!</span>(<span class=\"numeric_literal\">1</span>));\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> <span class=\"punctuation\">=</span> <span class=\"numeric_literal\">42</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> <span class=\"punctuation\">=</span> <span class=\"punctuation\">&</span><span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> <span class=\"punctuation\">=</span> <span class=\"punctuation\">&</span><span class=\"variable mutable\">y</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> = <span class=\"numeric_literal\">42</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> = &<span class=\"variable mutable\">y</span>;\n \n-    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">:</span> <span class=\"variable declaration\">z</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span> <span class=\"punctuation\">}</span> <span class=\"punctuation\">=</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">:</span> <span class=\"variable\">z</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> { <span class=\"field\">x</span>: <span class=\"variable declaration\">z</span>, <span class=\"field\">y</span> } = <span class=\"struct\">Foo</span> { <span class=\"field\">x</span>: <span class=\"variable\">z</span>, <span class=\"field\">y</span> };\n \n-    <span class=\"variable\">y</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"variable\">y</span>;\n+}\n \n-<span class=\"keyword\">enum</span> <span class=\"enum declaration\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n-    <span class=\"enum_variant declaration\">Some</span><span class=\"punctuation\">(</span><span class=\"type_param\">T</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n-    <span class=\"enum_variant declaration\">None</span><span class=\"punctuation\">,</span>\n-<span class=\"punctuation\">}</span>\n-<span class=\"keyword\">use</span> <span class=\"enum\">Option</span><span class=\"punctuation\">::</span>*<span class=\"punctuation\">;</span>\n+<span class=\"keyword\">enum</span> <span class=\"enum declaration\">Option</span>&lt;<span class=\"type_param declaration\">T</span>&gt; {\n+    <span class=\"enum_variant declaration\">Some</span>(<span class=\"type_param\">T</span>),\n+    <span class=\"enum_variant declaration\">None</span>,\n+}\n+<span class=\"keyword\">use</span> <span class=\"enum\">Option</span>::*;\n \n-<span class=\"keyword\">impl</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">and</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">,</span> <span class=\"variable declaration\">other</span><span class=\"punctuation\">:</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param\">U</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"punctuation\">(</span><span class=\"type_param\">T</span><span class=\"punctuation\">,</span> <span class=\"type_param\">U</span><span class=\"punctuation\">)</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n-        <span class=\"keyword control\">match</span> <span class=\"variable\">other</span> <span class=\"punctuation\">{</span>\n-            <span class=\"enum_variant\">None</span> <span class=\"punctuation\">=&gt;</span> <span class=\"macro\">unimplemented!</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n-            <span class=\"variable declaration\">Nope</span> <span class=\"punctuation\">=&gt;</span> <span class=\"variable\">Nope</span><span class=\"punctuation\">,</span>\n-        <span class=\"punctuation\">}</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">impl</span>&lt;<span class=\"type_param declaration\">T</span>&gt; <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">T</span>&gt; {\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">and</span>&lt;<span class=\"type_param declaration\">U</span>&gt;(<span class=\"self_keyword\">self</span>, <span class=\"variable declaration\">other</span>: <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">U</span>&gt;) -&gt; <span class=\"enum\">Option</span>&lt;(<span class=\"type_param\">T</span>, <span class=\"type_param\">U</span>)&gt; {\n+        <span class=\"keyword control\">match</span> <span class=\"variable\">other</span> {\n+            <span class=\"enum_variant\">None</span> =&gt; <span class=\"macro\">unimplemented!</span>(),\n+            <span class=\"variable declaration\">Nope</span> =&gt; <span class=\"variable\">Nope</span>,\n+        }\n+    }\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "9516c7441040ac94306656a7c4f809b53a48a17e", "filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -34,15 +34,15 @@\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n </style>\n-<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> <span class=\"punctuation\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(17,51%,74%);\">x</span> <span class=\"punctuation\">=</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(127,76%,66%);\">y</span> <span class=\"punctuation\">=</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(17,51%,74%);\">x</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.<span class=\"unresolved_reference\">to_string</span>();\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(127,76%,66%);\">y</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.<span class=\"unresolved_reference\">to_string</span>();\n \n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span> <span class=\"punctuation\">=</span> <span class=\"string_literal\">\"other color please!\"</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(85,49%,84%);\">y</span> <span class=\"punctuation\">=</span> <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span> = <span class=\"string_literal\">\"other color please!\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(85,49%,84%);\">y</span> = <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span>.<span class=\"unresolved_reference\">to_string</span>();\n+}\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> <span class=\"punctuation\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>() {\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "3dffddce57a919e2212330865d53b4bab810aa31", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 38, "deletions": 17, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -45,7 +45,6 @@ pub(crate) fn highlight(\n     file_id: FileId,\n     range_to_highlight: Option<TextRange>,\n     syntactic_name_ref_highlighting: bool,\n-    should_highlight_punctuation: bool,\n ) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n     let sema = Semantics::new(db);\n@@ -108,7 +107,6 @@ pub(crate) fn highlight(\n                         &mut bindings_shadow_count,\n                         syntactic_name_ref_highlighting,\n                         name.syntax().clone().into(),\n-                        should_highlight_punctuation,\n                     ) {\n                         stack.add(HighlightedRange {\n                             range: name.syntax().text_range(),\n@@ -208,7 +206,6 @@ pub(crate) fn highlight(\n             &mut bindings_shadow_count,\n             syntactic_name_ref_highlighting,\n             element_to_highlight.clone(),\n-            true,\n         ) {\n             stack.add(HighlightedRange { range, highlight, binding_hash });\n             if let Some(string) =\n@@ -239,7 +236,7 @@ pub(crate) fn highlight(\n                             });\n                         }\n                     }\n-                    stack.pop_and_inject(false);\n+                    stack.pop_and_inject(None);\n                 }\n             } else if let Some(string) =\n                 element_to_highlight.as_token().cloned().and_then(ast::RawString::cast)\n@@ -327,6 +324,17 @@ impl HighlightedRangeStack {\n         cloned\n     }\n \n+    /// Remove the `HighlightRange` of `parent` that's currently covered by `child`.\n+    fn intersect_partial(parent: &mut HighlightedRange, child: &HighlightedRange) {\n+        assert!(\n+            parent.range.start() <= child.range.start()\n+                && parent.range.end() >= child.range.start()\n+                && child.range.end() > parent.range.end()\n+        );\n+\n+        parent.range = TextRange::new(parent.range.start(), child.range.start());\n+    }\n+\n     /// Similar to `pop`, but can modify arbitrary prior ranges (where `pop`)\n     /// can only modify the last range currently on the stack.\n     /// Can be used to do injections that span multiple ranges, like the\n@@ -336,7 +344,7 @@ impl HighlightedRangeStack {\n     ///\n     /// Note that `pop` can be simulated by `pop_and_inject(false)` but the\n     /// latter is computationally more expensive.\n-    fn pop_and_inject(&mut self, inject: bool) {\n+    fn pop_and_inject(&mut self, overwrite_parent: Option<Highlight>) {\n         let mut children = self.stack.pop().unwrap();\n         let prev = self.stack.last_mut().unwrap();\n         children.sort_by_key(|range| range.range.start());\n@@ -346,26 +354,41 @@ impl HighlightedRangeStack {\n             if let Some(idx) =\n                 prev.iter().position(|parent| parent.range.contains_range(child.range))\n             {\n+                if let Some(tag) = overwrite_parent {\n+                    prev[idx].highlight = tag;\n+                }\n+\n                 let cloned = Self::intersect(&mut prev[idx], &child);\n-                let insert_idx = if inject || prev[idx].range.is_empty() {\n+                let insert_idx = if prev[idx].range.is_empty() {\n                     prev.remove(idx);\n                     idx\n                 } else {\n                     idx + 1\n                 };\n                 prev.insert(insert_idx, child);\n-                if !inject && !cloned.range.is_empty() {\n+                if !cloned.range.is_empty() {\n                     prev.insert(insert_idx + 1, cloned);\n                 }\n-            } else if let Some(_idx) =\n-                prev.iter().position(|parent| parent.range.contains(child.range.start()))\n-            {\n-                unreachable!(\"child range should be completely contained in parent range\");\n             } else {\n-                let idx = prev\n-                    .binary_search_by_key(&child.range.start(), |range| range.range.start())\n-                    .unwrap_or_else(|x| x);\n-                prev.insert(idx, child);\n+                let maybe_idx =\n+                    prev.iter().position(|parent| parent.range.contains(child.range.start()));\n+                if let (Some(_), Some(idx)) = (overwrite_parent, maybe_idx) {\n+                    Self::intersect_partial(&mut prev[idx], &child);\n+                    let insert_idx = if prev[idx].range.is_empty() {\n+                        prev.remove(idx);\n+                        idx\n+                    } else {\n+                        idx + 1\n+                    };\n+                    prev.insert(insert_idx, child);\n+                } else if let None = maybe_idx {\n+                    let idx = prev\n+                        .binary_search_by_key(&child.range.start(), |range| range.range.start())\n+                        .unwrap_or_else(|x| x);\n+                    prev.insert(idx, child);\n+                } else {\n+                    unreachable!(\"child range should be completely contained in parent range\");\n+                }\n             }\n         }\n     }\n@@ -433,7 +456,6 @@ fn highlight_element(\n     bindings_shadow_count: &mut FxHashMap<Name, u32>,\n     syntactic_name_ref_highlighting: bool,\n     element: SyntaxElement,\n-    should_highlight_punctuation: bool,\n ) -> Option<(Highlight, Option<u64>)> {\n     let db = sema.db;\n     let mut binding_hash = None;\n@@ -550,7 +572,6 @@ fn highlight_element(\n             }\n         }\n \n-        p if should_highlight_punctuation && p.is_punct() => HighlightTag::Punctuation.into(),\n         _ => return None,\n     };\n "}, {"sha": "0c74f7370158162953d990d7e691d0ff99eba104", "filename": "crates/ra_ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         )\n     }\n \n-    let ranges = highlight(db, file_id, None, false, false);\n+    let ranges = highlight(db, file_id, None, false);\n     let text = parse.tree().syntax().to_string();\n     let mut prev_pos = TextSize::from(0);\n     let mut buf = String::new();"}, {"sha": "181c21256e0107de67f7b0260342f75d23c81c23", "filename": "crates/ra_ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -8,8 +8,8 @@ use ra_syntax::{ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize};\n use stdx::SepBy;\n \n use crate::{\n-    call_info::ActiveParameter, Analysis, HighlightModifier, HighlightTag, HighlightedRange,\n-    RootDatabase,\n+    call_info::ActiveParameter, Analysis, Highlight, HighlightModifier, HighlightTag,\n+    HighlightedRange, RootDatabase,\n };\n \n use super::HighlightedRangeStack;\n@@ -150,8 +150,7 @@ pub(super) fn highlight_doc_comment(\n     let (analysis, tmp_file_id) = Analysis::from_single_file(text);\n \n     stack.push();\n-    for mut h in analysis.with_db(|db| super::highlight(db, tmp_file_id, None, true, true)).unwrap()\n-    {\n+    for mut h in analysis.with_db(|db| super::highlight(db, tmp_file_id, None, true)).unwrap() {\n         // Determine start offset and end offset in case of multi-line ranges\n         let mut start_offset = None;\n         let mut end_offset = None;\n@@ -183,6 +182,7 @@ pub(super) fn highlight_doc_comment(\n     for comment in new_comments {\n         stack.add(comment);\n     }\n-    stack.pop_and_inject(false);\n-    stack.pop_and_inject(true);\n+    stack.pop_and_inject(None);\n+    stack\n+        .pop_and_inject(Some(Highlight::from(HighlightTag::Generic) | HighlightModifier::Injected));\n }"}, {"sha": "e8e251cfc00093870dbd67752ce8e72767aee457", "filename": "crates/ra_ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -27,13 +27,13 @@ pub enum HighlightTag {\n     Field,\n     FormatSpecifier,\n     Function,\n+    Generic,\n     Keyword,\n     Lifetime,\n     Macro,\n     Module,\n     NumericLiteral,\n     Operator,\n-    Punctuation,\n     SelfKeyword,\n     SelfType,\n     Static,\n@@ -79,13 +79,13 @@ impl HighlightTag {\n             HighlightTag::Field => \"field\",\n             HighlightTag::FormatSpecifier => \"format_specifier\",\n             HighlightTag::Function => \"function\",\n+            HighlightTag::Generic => \"generic\",\n             HighlightTag::Keyword => \"keyword\",\n             HighlightTag::Lifetime => \"lifetime\",\n             HighlightTag::Macro => \"macro\",\n             HighlightTag::Module => \"module\",\n             HighlightTag::NumericLiteral => \"numeric_literal\",\n             HighlightTag::Operator => \"operator\",\n-            HighlightTag::Punctuation => \"punctuation\",\n             HighlightTag::SelfKeyword => \"self_keyword\",\n             HighlightTag::SelfType => \"self_type\",\n             HighlightTag::Static => \"static\","}, {"sha": "10fe40cb50723d0c321a7e958f9c81460f4ececd", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -41,8 +41,8 @@ define_semantic_token_types![\n     (ENUM_MEMBER, \"enumMember\"),\n     (ESCAPE_SEQUENCE, \"escapeSequence\"),\n     (FORMAT_SPECIFIER, \"formatSpecifier\"),\n+    (GENERIC, \"generic\"),\n     (LIFETIME, \"lifetime\"),\n-    (PUNCTUATION, \"punctuation\"),\n     (SELF_KEYWORD, \"selfKeyword\"),\n     (TYPE_ALIAS, \"typeAlias\"),\n     (UNION, \"union\"),"}, {"sha": "da9887a9a316599a2047abdafaa549962471de7b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a56323537442958008d0fddd78e33df425b11a9/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a56323537442958008d0fddd78e33df425b11a9/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=2a56323537442958008d0fddd78e33df425b11a9", "patch": "@@ -295,6 +295,7 @@ fn semantic_token_type_and_modifiers(\n         HighlightTag::SelfType => lsp_types::SemanticTokenType::TYPE,\n         HighlightTag::Field => lsp_types::SemanticTokenType::PROPERTY,\n         HighlightTag::Function => lsp_types::SemanticTokenType::FUNCTION,\n+        HighlightTag::Generic => semantic_tokens::GENERIC,\n         HighlightTag::Module => lsp_types::SemanticTokenType::NAMESPACE,\n         HighlightTag::Constant => {\n             mods |= semantic_tokens::CONSTANT;\n@@ -323,7 +324,6 @@ fn semantic_token_type_and_modifiers(\n         HighlightTag::UnresolvedReference => semantic_tokens::UNRESOLVED_REFERENCE,\n         HighlightTag::FormatSpecifier => semantic_tokens::FORMAT_SPECIFIER,\n         HighlightTag::Operator => lsp_types::SemanticTokenType::OPERATOR,\n-        HighlightTag::Punctuation => semantic_tokens::PUNCTUATION,\n         HighlightTag::EscapeSequence => semantic_tokens::ESCAPE_SEQUENCE,\n     };\n "}]}