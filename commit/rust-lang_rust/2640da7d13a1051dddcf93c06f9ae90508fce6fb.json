{"sha": "2640da7d13a1051dddcf93c06f9ae90508fce6fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NDBkYTdkMTNhMTA1MWRkZGNmOTNjMDZmOWFlOTA1MDhmY2U2ZmI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-22T04:49:48Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-12-11T23:36:15Z"}, "message": "Remove `Session::sysroot()`.\n\nInstead of maybe storing its own sysroot and maybe deferring to the one\nin `Session::opts`, just clone the latter when necessary so one is\nalways directly available. This removes the need for the getter.", "tree": {"sha": "d0cec63297afc90780020789f4fb654cf21d47ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0cec63297afc90780020789f4fb654cf21d47ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2640da7d13a1051dddcf93c06f9ae90508fce6fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2640da7d13a1051dddcf93c06f9ae90508fce6fb", "html_url": "https://github.com/rust-lang/rust/commit/2640da7d13a1051dddcf93c06f9ae90508fce6fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2640da7d13a1051dddcf93c06f9ae90508fce6fb/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0238bcc60d943878244ef7221d338f13a35e2a45", "url": "https://api.github.com/repos/rust-lang/rust/commits/0238bcc60d943878244ef7221d338f13a35e2a45", "html_url": "https://github.com/rust-lang/rust/commit/0238bcc60d943878244ef7221d338f13a35e2a45"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "56a57b5375fd8fad02a2cc6438de69b0b66fe64c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2640da7d13a1051dddcf93c06f9ae90508fce6fb/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2640da7d13a1051dddcf93c06f9ae90508fce6fb/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=2640da7d13a1051dddcf93c06f9ae90508fce6fb", "patch": "@@ -48,7 +48,7 @@ use std::cell::{self, Cell, RefCell};\n use std::env;\n use std::fmt;\n use std::io::Write;\n-use std::path::{Path, PathBuf};\n+use std::path::PathBuf;\n use std::time::Duration;\n use std::sync::mpsc;\n use std::sync::atomic::{AtomicUsize, Ordering};\n@@ -69,7 +69,7 @@ pub struct Session {\n     pub entry_fn: Once<Option<(NodeId, Span, config::EntryFnType)>>,\n     pub plugin_registrar_fn: Once<Option<ast::NodeId>>,\n     pub proc_macro_decls_static: Once<Option<ast::NodeId>>,\n-    pub default_sysroot: Option<PathBuf>,\n+    pub sysroot: PathBuf,\n     /// The name of the root source file of the crate, in the local file system.\n     /// `None` means that there is no source file.\n     pub local_crate_source_file: Option<PathBuf>,\n@@ -694,25 +694,17 @@ impl Session {\n         )\n     }\n \n-    pub fn sysroot<'a>(&'a self) -> &'a Path {\n-        match self.opts.maybe_sysroot {\n-            Some(ref sysroot) => sysroot,\n-            None => self.default_sysroot\n-                        .as_ref()\n-                        .expect(\"missing sysroot and default_sysroot in Session\"),\n-        }\n-    }\n     pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch<'_> {\n         filesearch::FileSearch::new(\n-            self.sysroot(),\n+            &self.sysroot,\n             self.opts.target_triple.triple(),\n             &self.opts.search_paths,\n             kind,\n         )\n     }\n     pub fn host_filesearch(&self, kind: PathKind) -> filesearch::FileSearch<'_> {\n         filesearch::FileSearch::new(\n-            self.sysroot(),\n+            &self.sysroot,\n             config::host_triple(),\n             &self.opts.search_paths,\n             kind,\n@@ -1109,9 +1101,9 @@ pub fn build_session_(\n     let target_cfg = config::build_target_config(&sopts, &span_diagnostic);\n \n     let p_s = parse::ParseSess::with_span_handler(span_diagnostic, source_map);\n-    let default_sysroot = match sopts.maybe_sysroot {\n-        Some(_) => None,\n-        None => Some(filesearch::get_or_default_sysroot()),\n+    let sysroot = match &sopts.maybe_sysroot {\n+        Some(sysroot) => sysroot.clone(),\n+        None => filesearch::get_or_default_sysroot(),\n     };\n \n     let file_path_mapping = sopts.file_path_mapping();\n@@ -1147,7 +1139,7 @@ pub fn build_session_(\n         entry_fn: Once::new(),\n         plugin_registrar_fn: Once::new(),\n         proc_macro_decls_static: Once::new(),\n-        default_sysroot,\n+        sysroot,\n         local_crate_source_file,\n         working_dir,\n         lint_store: RwLock::new(lint::LintStore::new()),"}, {"sha": "20a7bf9a1a959e2301585014f59cae954624baaa", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2640da7d13a1051dddcf93c06f9ae90508fce6fb/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2640da7d13a1051dddcf93c06f9ae90508fce6fb/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=2640da7d13a1051dddcf93c06f9ae90508fce6fb", "patch": "@@ -1024,11 +1024,10 @@ fn link_args(cmd: &mut dyn Linker,\n     // where extern libraries might live, based on the\n     // addl_lib_search_paths\n     if sess.opts.cg.rpath {\n-        let sysroot = sess.sysroot();\n         let target_triple = sess.opts.target_triple.triple();\n         let mut get_install_prefix_lib_path = || {\n             let install_prefix = option_env!(\"CFG_PREFIX\").expect(\"CFG_PREFIX\");\n-            let tlib = filesearch::relative_target_lib_path(sysroot, target_triple);\n+            let tlib = filesearch::relative_target_lib_path(&sess.sysroot, target_triple);\n             let mut path = PathBuf::from(install_prefix);\n             path.push(&tlib);\n "}, {"sha": "4960c8922b9f98c879a687d033ddf929761d1b9b", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2640da7d13a1051dddcf93c06f9ae90508fce6fb/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2640da7d13a1051dddcf93c06f9ae90508fce6fb/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=2640da7d13a1051dddcf93c06f9ae90508fce6fb", "patch": "@@ -606,8 +606,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n         self.cmd.arg(\"/DEBUG\");\n \n         // This will cause the Microsoft linker to embed .natvis info into the PDB file\n-        let sysroot = self.sess.sysroot();\n-        let natvis_dir_path = sysroot.join(\"lib\\\\rustlib\\\\etc\");\n+        let natvis_dir_path = self.sess.sysroot.join(\"lib\\\\rustlib\\\\etc\");\n         if let Ok(natvis_dir) = fs::read_dir(&natvis_dir_path) {\n             // LLVM 5.0.0's lld-link frontend doesn't yet recognize, and chokes\n             // on, the /NATVIS:... flags.  LLVM 6 (or earlier) should at worst ignore"}, {"sha": "41c9b22afe06f968aaf489cf13e050db403db58d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2640da7d13a1051dddcf93c06f9ae90508fce6fb/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2640da7d13a1051dddcf93c06f9ae90508fce6fb/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=2640da7d13a1051dddcf93c06f9ae90508fce6fb", "patch": "@@ -1042,7 +1042,7 @@ impl RustcDefaultCalls {\n                     targets.sort();\n                     println!(\"{}\", targets.join(\"\\n\"));\n                 },\n-                Sysroot => println!(\"{}\", sess.sysroot().display()),\n+                Sysroot => println!(\"{}\", sess.sysroot.display()),\n                 TargetSpec => println!(\"{}\", sess.target.target.to_json().pretty()),\n                 FileNames | CrateName => {\n                     let input = input.unwrap_or_else(||"}, {"sha": "f01ed9e3ceef71384136111a9842f129786ffd82", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2640da7d13a1051dddcf93c06f9ae90508fce6fb/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2640da7d13a1051dddcf93c06f9ae90508fce6fb/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=2640da7d13a1051dddcf93c06f9ae90508fce6fb", "patch": "@@ -678,7 +678,7 @@ impl<'a> Context<'a> {\n             // candidates are all canonicalized, so we canonicalize the sysroot\n             // as well.\n             if let Some((ref prev, _)) = ret {\n-                let sysroot = self.sess.sysroot();\n+                let sysroot = &self.sess.sysroot;\n                 let sysroot = sysroot.canonicalize()\n                                      .unwrap_or_else(|_| sysroot.to_path_buf());\n                 if prev.starts_with(&sysroot) {"}]}