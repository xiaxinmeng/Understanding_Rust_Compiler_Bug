{"sha": "0b27dcc665c846d32db0b6da59dcf7ee1da5b02c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMjdkY2M2NjVjODQ2ZDMyZGIwYjZkYTU5ZGNmN2VlMWRhNWIwMmM=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-08T09:31:48Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-08T09:31:48Z"}, "message": "modify ExplicitSelf::determine to take an `is_self_type` predicate closure, instead of infcx", "tree": {"sha": "6e16b491290d969cc2c8570e9e4000bc92b175df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e16b491290d969cc2c8570e9e4000bc92b175df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b27dcc665c846d32db0b6da59dcf7ee1da5b02c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b27dcc665c846d32db0b6da59dcf7ee1da5b02c", "html_url": "https://github.com/rust-lang/rust/commit/0b27dcc665c846d32db0b6da59dcf7ee1da5b02c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b27dcc665c846d32db0b6da59dcf7ee1da5b02c/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d29966d3bf89a6b05f49005551def3b32987155", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d29966d3bf89a6b05f49005551def3b32987155", "html_url": "https://github.com/rust-lang/rust/commit/1d29966d3bf89a6b05f49005551def3b32987155"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "b93a3dc9ffc3df2fd30aa9800788d261c3e861c4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0b27dcc665c846d32db0b6da59dcf7ee1da5b02c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b27dcc665c846d32db0b6da59dcf7ee1da5b02c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=0b27dcc665c846d32db0b6da59dcf7ee1da5b02c", "patch": "@@ -19,7 +19,6 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use middle::resolve_lifetime as rl;\n use namespace::Namespace;\n-use rustc::infer::InferCtxt;\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n@@ -1415,9 +1414,10 @@ pub enum ExplicitSelf<'tcx> {\n impl<'tcx> ExplicitSelf<'tcx> {\n     /// Categorizes an explicit self declaration like `self: SomeType`\n     /// into either `self`, `&self`, `&mut self`, `Box<self>`, or\n-    /// `Other` (meaning the arbitrary_self_types feature is used).\n-    /// We do this here via a combination of pattern matching and\n-    /// `can_eq`. A more precise check is done in `check_method_receiver()`.\n+    /// `Other`.\n+    /// This is mainly used to require the arbitrary_self_types feature\n+    /// in the case of `Other`, to improve error messages in the common cases,\n+    /// and to make `Other` non-object-safe.\n     ///\n     /// Examples:\n     ///\n@@ -1436,21 +1436,19 @@ impl<'tcx> ExplicitSelf<'tcx> {\n     /// }\n     /// ```\n     ///\n-    pub fn determine<'a, 'gcx>(\n-        infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        self_ty: Ty<'tcx>,\n-        self_arg_ty: Ty<'tcx>\n+    pub fn determine<'a, 'gcx, P>(\n+        self_arg_ty: Ty<'tcx>,\n+        is_self_ty: P\n     ) -> ExplicitSelf<'tcx>\n+    where\n+        P: Fn(Ty<'tcx>) -> bool\n     {\n         use self::ExplicitSelf::*;\n \n-        let can_eq = |expected, actual| infcx.can_eq(param_env, expected, actual).is_ok();\n-\n         match self_arg_ty.sty {\n-            _ if can_eq(self_arg_ty, self_ty) => ByValue,\n-            ty::TyRef(region, ty::TypeAndMut { ty, mutbl}) if can_eq(ty, self_ty) => ByReference(region, mutbl),\n-            ty::TyAdt(def, _) if def.is_box() && can_eq(self_arg_ty.boxed_ty(), self_ty) => ByBox,\n+            _ if is_self_ty(self_arg_ty) => ByValue,\n+            ty::TyRef(region, ty::TypeAndMut { ty, mutbl}) if is_self_ty(ty) => ByReference(region, mutbl),\n+            ty::TyAdt(def, _) if def.is_box() && is_self_ty(self_arg_ty.boxed_ty()) => ByBox,\n             _ => Other\n         }\n     }"}, {"sha": "b5e7109efdd3b9075103a80da5458f22e594d7c3", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b27dcc665c846d32db0b6da59dcf7ee1da5b02c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b27dcc665c846d32db0b6da59dcf7ee1da5b02c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=0b27dcc665c846d32db0b6da59dcf7ee1da5b02c", "patch": "@@ -506,7 +506,8 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let param_env = ty::ParamEnv::empty(Reveal::All);\n \n         tcx.infer_ctxt().enter(|infcx| {\n-            match ExplicitSelf::determine(&infcx, param_env, untransformed_self_ty, self_arg_ty) {\n+            let can_eq_self = |ty| infcx.can_eq(param_env, untransformed_self_ty, ty).is_ok();\n+            match ExplicitSelf::determine(self_arg_ty, can_eq_self) {\n                 ExplicitSelf::ByValue => \"self\".to_string(),\n                 ExplicitSelf::ByReference(_, hir::MutImmutable) => \"&self\".to_string(),\n                 ExplicitSelf::ByReference(_, hir::MutMutable) => \"&mut self\".to_string(),"}, {"sha": "1718b2043a89e9c5c46ebd093a8ee5bde474f54e", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b27dcc665c846d32db0b6da59dcf7ee1da5b02c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b27dcc665c846d32db0b6da59dcf7ee1da5b02c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=0b27dcc665c846d32db0b6da59dcf7ee1da5b02c", "patch": "@@ -495,7 +495,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             }\n         }\n \n-        let self_kind = ExplicitSelf::determine(fcx, fcx.param_env, self_ty, self_arg_ty);\n+        let is_self_ty = |ty| fcx.infcx.can_eq(fcx.param_env, self_ty, ty).is_ok();\n+        let self_kind = ExplicitSelf::determine(self_arg_ty, is_self_ty);\n \n         if let ExplicitSelf::Other = self_kind {\n             if !fcx.tcx.sess.features.borrow().arbitrary_self_types {"}]}