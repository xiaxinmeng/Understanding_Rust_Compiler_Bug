{"sha": "63740548aa8887c92d8976ccf478cfb0c44611a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNzQwNTQ4YWE4ODg3YzkyZDg5NzZjY2Y0NzhjZmIwYzQ0NjExYTU=", "commit": {"author": {"name": "Youngsuk Kim", "email": "joseph942010@gmail.com", "date": "2020-06-21T02:53:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-21T02:53:51Z"}, "message": "Fix typos in doc comments\n\nThis commit fixes typos in the doc comments of 'librustc_mir/monomorphize/collector.rs'", "tree": {"sha": "da52adfe53ea32b52218ce7625c227ba7ff14df0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da52adfe53ea32b52218ce7625c227ba7ff14df0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63740548aa8887c92d8976ccf478cfb0c44611a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7su/CRBK7hj4Ov3rIwAAdHIIAEDcXFVb8RasDP8S/VGQGZrp\nPnKdoBujHFKAI1RNDrxpZdjAlmuBL6j1OFGvgrpIF0P9iL1kFXnL1kOORrymcv0T\ntAzXBuHgVoVXANkzsgF63hxW90CcwiVkkVDy+bWBzWnmTIsMLOUdP3MGbMiUrdel\nIwFPzqWtYUBzKEhEmpHfTgLzomEzSG1t5aV2w2kK8QPy+6UiALiQaDPaQJmmWdFK\n5MzSKuTs4bIrLzH70xkwR3ha5y4voPR7+3j5t6e+wwkCPq/EKLZ9W407F05NIKoz\nf1rQi6flcS1C0qRjNdaSW9mpdxH5OKLsGzoYCz5oz/UUntvSzmt5Y5qAHX/Ath8=\n=Ahdn\n-----END PGP SIGNATURE-----\n", "payload": "tree da52adfe53ea32b52218ce7625c227ba7ff14df0\nparent 7058471adec80a2a1e6092443e08546768c9c894\nauthor Youngsuk Kim <joseph942010@gmail.com> 1592708031 -0400\ncommitter GitHub <noreply@github.com> 1592708031 -0400\n\nFix typos in doc comments\n\nThis commit fixes typos in the doc comments of 'librustc_mir/monomorphize/collector.rs'"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63740548aa8887c92d8976ccf478cfb0c44611a5", "html_url": "https://github.com/rust-lang/rust/commit/63740548aa8887c92d8976ccf478cfb0c44611a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63740548aa8887c92d8976ccf478cfb0c44611a5/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7058471adec80a2a1e6092443e08546768c9c894", "url": "https://api.github.com/repos/rust-lang/rust/commits/7058471adec80a2a1e6092443e08546768c9c894", "html_url": "https://github.com/rust-lang/rust/commit/7058471adec80a2a1e6092443e08546768c9c894"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "448d8cdd6c6f673d3ddf5ce0c4b1bb20f7a70d92", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63740548aa8887c92d8976ccf478cfb0c44611a5/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63740548aa8887c92d8976ccf478cfb0c44611a5/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=63740548aa8887c92d8976ccf478cfb0c44611a5", "patch": "@@ -1,7 +1,7 @@\n //! Mono Item Collection\n //! ====================\n //!\n-//! This module is responsible for discovering all items that will contribute to\n+//! This module is responsible for discovering all items that will contribute\n //! to code generation of the crate. The important part here is that it not only\n //! needs to find syntax-level items (functions, structs, etc) but also all\n //! their monomorphized instantiations. Every non-generic, non-const function\n@@ -79,7 +79,7 @@\n //! function or method call (represented by a CALL terminator in MIR). But\n //! calls are not the only thing that might introduce a reference between two\n //! function mono items, and as we will see below, they are just a\n-//! specialized of the form described next, and consequently will don't get any\n+//! specialized of the form described next, and consequently will not get any\n //! special treatment in the algorithm.\n //!\n //! #### Taking a reference to a function or method\n@@ -158,7 +158,7 @@\n //! - Eager mode is meant to be used in conjunction with incremental compilation\n //!   where a stable set of mono items is more important than a minimal\n //!   one. Thus, eager mode will instantiate drop-glue for every drop-able type\n-//!   in the crate, even of no drop call for that type exists (yet). It will\n+//!   in the crate, even if no drop call for that type exists (yet). It will\n //!   also instantiate default implementations of trait methods, something that\n //!   otherwise is only done on demand.\n //!"}]}