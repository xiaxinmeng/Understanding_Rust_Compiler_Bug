{"sha": "7689857884c8d74f25517373f2d3d4c6fe055614", "node_id": "C_kwDOAAsO6NoAKDc2ODk4NTc4ODRjOGQ3NGYyNTUxNzM3M2YyZDNkNGM2ZmUwNTU2MTQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-23T10:56:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-13T17:42:53Z"}, "message": "rustdoc: Do not resolve associated item paths unnecessarily", "tree": {"sha": "511241e37c4d7ebca0d768bfe09b5a6d418754d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/511241e37c4d7ebca0d768bfe09b5a6d418754d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7689857884c8d74f25517373f2d3d4c6fe055614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7689857884c8d74f25517373f2d3d4c6fe055614", "html_url": "https://github.com/rust-lang/rust/commit/7689857884c8d74f25517373f2d3d4c6fe055614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7689857884c8d74f25517373f2d3d4c6fe055614/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c2283d3ca0e8c8c6f872f4eb06b43e5527db8dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c2283d3ca0e8c8c6f872f4eb06b43e5527db8dc", "html_url": "https://github.com/rust-lang/rust/commit/7c2283d3ca0e8c8c6f872f4eb06b43e5527db8dc"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "14929a3772a17f5214f5a088be70c70ff6f2a003", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7689857884c8d74f25517373f2d3d4c6fe055614/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7689857884c8d74f25517373f2d3d4c6fe055614/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=7689857884c8d74f25517373f2d3d4c6fe055614", "patch": "@@ -505,18 +505,16 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         module_id: DefId,\n     ) -> Result<(Res, Option<DefId>), UnresolvedPath<'path>> {\n         if let Some(res) = self.resolve_path(path_str, ns, item_id, module_id) {\n-            match res {\n-                // FIXME(#76467): make this fallthrough to lookup the associated\n-                // item a separate function.\n-                Res::Def(DefKind::AssocFn | DefKind::AssocConst, _) => assert_eq!(ns, ValueNS),\n-                Res::Def(DefKind::AssocTy, _) => assert_eq!(ns, TypeNS),\n-                Res::Def(DefKind::Variant, def_id) => {\n-                    let enum_def_id = self.cx.tcx.parent(def_id).expect(\"variant has no parent\");\n-                    return Ok((Res::Def(DefKind::Enum, enum_def_id), Some(def_id)));\n+            return Ok(match res {\n+                Res::Def(\n+                    DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Variant,\n+                    def_id,\n+                ) => {\n+                    let parent_def_id = self.cx.tcx.parent(def_id).unwrap();\n+                    (Res::from_def_id(self.cx.tcx, parent_def_id), Some(def_id))\n                 }\n-                // Not a trait item; just return what we found.\n-                _ => return Ok((res, None)),\n-            }\n+                _ => ((res, None)),\n+            });\n         } else if ns == MacroNS {\n             return Err(UnresolvedPath {\n                 item_id,"}]}