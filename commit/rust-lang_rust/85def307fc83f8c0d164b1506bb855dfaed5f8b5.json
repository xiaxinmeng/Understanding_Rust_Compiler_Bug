{"sha": "85def307fc83f8c0d164b1506bb855dfaed5f8b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZGVmMzA3ZmM4M2Y4YzBkMTY0YjE1MDZiYjg1NWRmYWVkNWY4YjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-21T21:01:48Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-21T21:01:48Z"}, "message": "shared_from_iter: Polish internal docs.", "tree": {"sha": "fee12b5068761cb42998537c029e287a4d325619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fee12b5068761cb42998537c029e287a4d325619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85def307fc83f8c0d164b1506bb855dfaed5f8b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85def307fc83f8c0d164b1506bb855dfaed5f8b5", "html_url": "https://github.com/rust-lang/rust/commit/85def307fc83f8c0d164b1506bb855dfaed5f8b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85def307fc83f8c0d164b1506bb855dfaed5f8b5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bbf1abd0ec903ff4408238e86d712aeba1cbd7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bbf1abd0ec903ff4408238e86d712aeba1cbd7f", "html_url": "https://github.com/rust-lang/rust/commit/8bbf1abd0ec903ff4408238e86d712aeba1cbd7f"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "94cc0b18133eec23d472b938388d4adcdf920cb3", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/85def307fc83f8c0d164b1506bb855dfaed5f8b5/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85def307fc83f8c0d164b1506bb855dfaed5f8b5/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=85def307fc83f8c0d164b1506bb855dfaed5f8b5", "patch": "@@ -699,11 +699,11 @@ impl Rc<dyn Any> {\n }\n \n impl<T: ?Sized> Rc<T> {\n-    // Allocates an `RcBox<T>` with sufficient space for\n-    // an unsized value where the value has the layout provided.\n-    //\n-    // The function `mem_to_rcbox` is called with the data pointer\n-    // and must return back a (potentially fat)-pointer for the `RcBox<T>`.\n+    /// Allocates an `RcBox<T>` with sufficient space for\n+    /// an unsized value where the value has the layout provided.\n+    ///\n+    /// The function `mem_to_rcbox` is called with the data pointer\n+    /// and must return back a (potentially fat)-pointer for the `RcBox<T>`.\n     unsafe fn allocate_for_unsized(\n         value_layout: Layout,\n         mem_to_rcbox: impl FnOnce(*mut u8) -> *mut RcBox<T>\n@@ -730,7 +730,7 @@ impl<T: ?Sized> Rc<T> {\n         inner\n     }\n \n-    // Allocates an `RcBox<T>` with sufficient space for an unsized value\n+    /// Allocates an `RcBox<T>` with sufficient space for an unsized value\n     unsafe fn allocate_for_ptr(ptr: *const T) -> *mut RcBox<T> {\n         // Allocate for the `RcBox<T>` using the given value.\n         Self::allocate_for_unsized(\n@@ -762,7 +762,7 @@ impl<T: ?Sized> Rc<T> {\n }\n \n impl<T> Rc<[T]> {\n-    // Allocates an `RcBox<[T]>` with the given length.\n+    /// Allocates an `RcBox<[T]>` with the given length.\n     unsafe fn allocate_for_slice(len: usize) -> *mut RcBox<[T]> {\n         Self::allocate_for_unsized(\n             Layout::array::<T>(len).unwrap(),\n@@ -771,19 +771,19 @@ impl<T> Rc<[T]> {\n     }\n }\n \n-// Sets the data pointer of a `?Sized` raw pointer.\n-//\n-// For a slice/trait object, this sets the `data` field and leaves the rest\n-// unchanged. For a sized raw pointer, this simply sets the pointer.\n+/// Sets the data pointer of a `?Sized` raw pointer.\n+///\n+/// For a slice/trait object, this sets the `data` field and leaves the rest\n+/// unchanged. For a sized raw pointer, this simply sets the pointer.\n unsafe fn set_data_ptr<T: ?Sized, U>(mut ptr: *mut T, data: *mut U) -> *mut T {\n     ptr::write(&mut ptr as *mut _ as *mut *mut u8, data as *mut u8);\n     ptr\n }\n \n impl<T> Rc<[T]> {\n-    // Copy elements from slice into newly allocated Rc<[T]>\n-    //\n-    // Unsafe because the caller must either take ownership or bind `T: Copy`\n+    /// Copy elements from slice into newly allocated Rc<[T]>\n+    ///\n+    /// Unsafe because the caller must either take ownership or bind `T: Copy`\n     unsafe fn copy_from_slice(v: &[T]) -> Rc<[T]> {\n         let ptr = Self::allocate_for_slice(v.len());\n \n@@ -847,6 +847,7 @@ impl<T> Rc<[T]> {\n     }\n }\n \n+/// Specialization trait used for `From<&[T]>`.\n trait RcFromSlice<T> {\n     fn from_slice(slice: &[T]) -> Self;\n }"}, {"sha": "0a9ce4379785336d8d38d6ea2aa1ac48a16636d7", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/85def307fc83f8c0d164b1506bb855dfaed5f8b5/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85def307fc83f8c0d164b1506bb855dfaed5f8b5/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=85def307fc83f8c0d164b1506bb855dfaed5f8b5", "patch": "@@ -588,11 +588,11 @@ impl<T: ?Sized> Arc<T> {\n }\n \n impl<T: ?Sized> Arc<T> {\n-    // Allocates an `ArcInner<T>` with sufficient space for\n-    // an unsized value where the value has the layout provided.\n-    //\n-    // The function `mem_to_arcinner` is called with the data pointer\n-    // and must return back a (potentially fat)-pointer for the `ArcInner<T>`.\n+    /// Allocates an `ArcInner<T>` with sufficient space for\n+    /// an unsized value where the value has the layout provided.\n+    ///\n+    /// The function `mem_to_arcinner` is called with the data pointer\n+    /// and must return back a (potentially fat)-pointer for the `ArcInner<T>`.\n     unsafe fn allocate_for_unsized(\n         value_layout: Layout,\n         mem_to_arcinner: impl FnOnce(*mut u8) -> *mut ArcInner<T>\n@@ -618,7 +618,7 @@ impl<T: ?Sized> Arc<T> {\n         inner\n     }\n \n-    // Allocates an `ArcInner<T>` with sufficient space for an unsized value\n+    /// Allocates an `ArcInner<T>` with sufficient space for an unsized value.\n     unsafe fn allocate_for_ptr(ptr: *const T) -> *mut ArcInner<T> {\n         // Allocate for the `ArcInner<T>` using the given value.\n         Self::allocate_for_unsized(\n@@ -650,7 +650,7 @@ impl<T: ?Sized> Arc<T> {\n }\n \n impl<T> Arc<[T]> {\n-    // Allocates an `ArcInner<[T]>` with the given length.\n+    /// Allocates an `ArcInner<[T]>` with the given length.\n     unsafe fn allocate_for_slice(len: usize) -> *mut ArcInner<[T]> {\n         Self::allocate_for_unsized(\n             Layout::array::<T>(len).unwrap(),\n@@ -659,19 +659,19 @@ impl<T> Arc<[T]> {\n     }\n }\n \n-// Sets the data pointer of a `?Sized` raw pointer.\n-//\n-// For a slice/trait object, this sets the `data` field and leaves the rest\n-// unchanged. For a sized raw pointer, this simply sets the pointer.\n+/// Sets the data pointer of a `?Sized` raw pointer.\n+///\n+/// For a slice/trait object, this sets the `data` field and leaves the rest\n+/// unchanged. For a sized raw pointer, this simply sets the pointer.\n unsafe fn set_data_ptr<T: ?Sized, U>(mut ptr: *mut T, data: *mut U) -> *mut T {\n     ptr::write(&mut ptr as *mut _ as *mut *mut u8, data as *mut u8);\n     ptr\n }\n \n impl<T> Arc<[T]> {\n-    // Copy elements from slice into newly allocated Arc<[T]>\n-    //\n-    // Unsafe because the caller must either take ownership or bind `T: Copy`\n+    /// Copy elements from slice into newly allocated Arc<[T]>\n+    ///\n+    /// Unsafe because the caller must either take ownership or bind `T: Copy`.\n     unsafe fn copy_from_slice(v: &[T]) -> Arc<[T]> {\n         let ptr = Self::allocate_for_slice(v.len());\n \n@@ -735,7 +735,7 @@ impl<T> Arc<[T]> {\n     }\n }\n \n-// Specialization trait used for From<&[T]>\n+/// Specialization trait used for `From<&[T]>`.\n trait ArcFromSlice<T> {\n     fn from_slice(slice: &[T]) -> Self;\n }\n@@ -1903,7 +1903,7 @@ impl<T, I: iter::TrustedLen<Item = T>> ArcFromIter<T, I> for Arc<[T]> {\n \n impl<'a, T: 'a + Clone> ArcFromIter<&'a T, slice::Iter<'a, T>> for Arc<[T]> {\n     fn from_iter(iter: slice::Iter<'a, T>) -> Self {\n-        // Delegate to `impl<T: Clone> From<&[T]> for Rc<[T]>`.\n+        // Delegate to `impl<T: Clone> From<&[T]> for Arc<[T]>`.\n         //\n         // In the case that `T: Copy`, we get to use `ptr::copy_nonoverlapping`\n         // which is even more performant."}, {"sha": "cf2ad2a8e60338620de2fb9f931006f14d13f594", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85def307fc83f8c0d164b1506bb855dfaed5f8b5/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85def307fc83f8c0d164b1506bb855dfaed5f8b5/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=85def307fc83f8c0d164b1506bb855dfaed5f8b5", "patch": "@@ -88,6 +88,8 @@ fn eq() {\n     assert_eq!(*x.0.borrow(), 0);\n }\n \n+// The test code below is identical to that in `rc.rs`.\n+// For better maintainability we therefore define this type alias.\n type Rc<T> = Arc<T>;\n \n const SHARED_ITER_MAX: u16 = 100;"}]}