{"sha": "2e81ce7dfa1c3429ee82f336bbec59e056702b3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlODFjZTdkZmExYzM0MjllZTgyZjMzNmJiZWM1OWUwNTY3MDJiM2Q=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2018-01-23T04:22:20Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2018-01-23T04:22:20Z"}, "message": "rustdoc: Hide methods from #[doc(masked)] crates from the search index", "tree": {"sha": "fec68d42960723c63b805d46784481d0f994ef31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fec68d42960723c63b805d46784481d0f994ef31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e81ce7dfa1c3429ee82f336bbec59e056702b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e81ce7dfa1c3429ee82f336bbec59e056702b3d", "html_url": "https://github.com/rust-lang/rust/commit/2e81ce7dfa1c3429ee82f336bbec59e056702b3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e81ce7dfa1c3429ee82f336bbec59e056702b3d/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdc18b3067b5bad257ccbe7400e3c4fb617e9e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc18b3067b5bad257ccbe7400e3c4fb617e9e18", "html_url": "https://github.com/rust-lang/rust/commit/fdc18b3067b5bad257ccbe7400e3c4fb617e9e18"}], "stats": {"total": 112, "additions": 87, "deletions": 25}, "files": [{"sha": "dd40f979fd1933f9caf7210204ff99fb69d3b67d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2e81ce7dfa1c3429ee82f336bbec59e056702b3d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e81ce7dfa1c3429ee82f336bbec59e056702b3d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2e81ce7dfa1c3429ee82f336bbec59e056702b3d", "patch": "@@ -1174,6 +1174,16 @@ impl DocFolder for Cache {\n             _ => self.stripped_mod,\n         };\n \n+        // If the impl is from a masked crate or references something from a\n+        // masked crate then remove it completely.\n+        if let clean::ImplItem(ref i) = item.inner {\n+            if self.masked_crates.contains(&item.def_id.krate) ||\n+               i.trait_.def_id().map_or(false, |d| self.masked_crates.contains(&d.krate)) ||\n+               i.for_.def_id().map_or(false, |d| self.masked_crates.contains(&d.krate)) {\n+                return None;\n+            }\n+        }\n+\n         // Register any generics to their corresponding string. This is used\n         // when pretty-printing types.\n         if let Some(generics) = item.inner.generics() {\n@@ -1188,14 +1198,10 @@ impl DocFolder for Cache {\n \n         // Collect all the implementors of traits.\n         if let clean::ImplItem(ref i) = item.inner {\n-            if !self.masked_crates.contains(&item.def_id.krate) {\n-                if let Some(did) = i.trait_.def_id() {\n-                    if i.for_.def_id().map_or(true, |d| !self.masked_crates.contains(&d.krate)) {\n-                        self.implementors.entry(did).or_insert(vec![]).push(Impl {\n-                            impl_item: item.clone(),\n-                        });\n-                    }\n-                }\n+            if let Some(did) = i.trait_.def_id() {\n+                self.implementors.entry(did).or_insert(vec![]).push(Impl {\n+                    impl_item: item.clone(),\n+                });\n             }\n         }\n \n@@ -1358,24 +1364,20 @@ impl DocFolder for Cache {\n                 // Note: matching twice to restrict the lifetime of the `i` borrow.\n                 let mut dids = FxHashSet();\n                 if let clean::Item { inner: clean::ImplItem(ref i), .. } = item {\n-                    let masked_trait = i.trait_.def_id().map_or(false,\n-                        |d| self.masked_crates.contains(&d.krate));\n-                    if !masked_trait {\n-                        match i.for_ {\n-                            clean::ResolvedPath { did, .. } |\n-                            clean::BorrowedRef {\n-                                type_: box clean::ResolvedPath { did, .. }, ..\n-                            } => {\n-                                dids.insert(did);\n-                            }\n-                            ref t => {\n-                                let did = t.primitive_type().and_then(|t| {\n-                                    self.primitive_locations.get(&t).cloned()\n-                                });\n+                    match i.for_ {\n+                        clean::ResolvedPath { did, .. } |\n+                        clean::BorrowedRef {\n+                            type_: box clean::ResolvedPath { did, .. }, ..\n+                        } => {\n+                            dids.insert(did);\n+                        }\n+                        ref t => {\n+                            let did = t.primitive_type().and_then(|t| {\n+                                self.primitive_locations.get(&t).cloned()\n+                            });\n \n-                                if let Some(did) = did {\n-                                    dids.insert(did);\n-                                }\n+                            if let Some(did) = did {\n+                                dids.insert(did);\n                             }\n                         }\n                     }"}, {"sha": "e0d53a72220f9629883571da0dbc312dcfdd6b48", "filename": "src/test/rustdoc/auxiliary/masked.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e81ce7dfa1c3429ee82f336bbec59e056702b3d/src%2Ftest%2Frustdoc%2Fauxiliary%2Fmasked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e81ce7dfa1c3429ee82f336bbec59e056702b3d/src%2Ftest%2Frustdoc%2Fauxiliary%2Fmasked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fmasked.rs?ref=2e81ce7dfa1c3429ee82f336bbec59e056702b3d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Clone)]\n+pub struct MaskedStruct;\n+\n+pub trait MaskedTrait {\n+    fn masked_method();\n+}\n+\n+impl MaskedTrait for String {\n+    fn masked_method() {}\n+}"}, {"sha": "1f398da84e57ed1e7eb86e34e0b554e7599aa118", "filename": "src/test/rustdoc/masked.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2e81ce7dfa1c3429ee82f336bbec59e056702b3d/src%2Ftest%2Frustdoc%2Fmasked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e81ce7dfa1c3429ee82f336bbec59e056702b3d/src%2Ftest%2Frustdoc%2Fmasked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmasked.rs?ref=2e81ce7dfa1c3429ee82f336bbec59e056702b3d", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:masked.rs\n+\n+#![feature(doc_masked)]\n+\n+#![crate_name = \"foo\"]\n+\n+#[doc(masked)]\n+extern crate masked;\n+\n+// @!has 'search-index.js' 'masked_method'\n+\n+// @!has 'foo/struct.String.html' 'MaskedTrait'\n+// @!has 'foo/struct.String.html' 'masked_method'\n+pub use std::string::String;\n+\n+// @!has 'foo/trait.Clone.html' 'MaskedStruct'\n+pub use std::clone::Clone;\n+\n+// @!has 'foo/struct.MyStruct.html' 'MaskedTrait'\n+// @!has 'foo/struct.MyStruct.html' 'masked_method'\n+pub struct MyStruct;\n+\n+impl masked::MaskedTrait for MyStruct {\n+    fn masked_method() {}\n+}\n+\n+// @!has 'foo/trait.MyTrait.html' 'MaskedStruct'\n+pub trait MyTrait {}\n+\n+impl MyTrait for masked::MaskedStruct {}"}]}