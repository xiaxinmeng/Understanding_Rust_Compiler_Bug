{"sha": "19fbf2c16b5c1f39e23c720a2655cfdb49c25135", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZmJmMmMxNmI1YzFmMzllMjNjNzIwYTI2NTVjZmRiNDljMjUxMzU=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-12T17:40:49Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-22T20:47:31Z"}, "message": "remove `unreachable!()`", "tree": {"sha": "9261c33f54e3459d80a32cf32e5bf48787f6dee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9261c33f54e3459d80a32cf32e5bf48787f6dee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19fbf2c16b5c1f39e23c720a2655cfdb49c25135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19fbf2c16b5c1f39e23c720a2655cfdb49c25135", "html_url": "https://github.com/rust-lang/rust/commit/19fbf2c16b5c1f39e23c720a2655cfdb49c25135", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19fbf2c16b5c1f39e23c720a2655cfdb49c25135/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "835173d065dbe1fdd7369ea49336c0b785be8cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/835173d065dbe1fdd7369ea49336c0b785be8cb8", "html_url": "https://github.com/rust-lang/rust/commit/835173d065dbe1fdd7369ea49336c0b785be8cb8"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "582617286257eeb5b5599a38286cf45198028500", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19fbf2c16b5c1f39e23c720a2655cfdb49c25135/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19fbf2c16b5c1f39e23c720a2655cfdb49c25135/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=19fbf2c16b5c1f39e23c720a2655cfdb49c25135", "patch": "@@ -54,7 +54,7 @@ pub(crate) fn reference_definition(\n ) -> ReferenceResult {\n     use self::ReferenceResult::*;\n \n-    let name_kind = classify_name_ref(db, file_id, &name_ref).and_then(|d| Some(d.item));\n+    let name_kind = classify_name_ref(db, file_id, &name_ref).map(|d| d.item);\n     match name_kind {\n         Some(Macro(mac)) => return Exact(NavigationTarget::from_macro_def(db, mac)),\n         Some(Field(field)) => return Exact(NavigationTarget::from_field(db, field)),"}, {"sha": "5cb194c0effacbb4e7635c63bba67f8f6abd03b9", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/19fbf2c16b5c1f39e23c720a2655cfdb49c25135/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19fbf2c16b5c1f39e23c720a2655cfdb49c25135/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=19fbf2c16b5c1f39e23c720a2655cfdb49c25135", "patch": "@@ -32,40 +32,40 @@ pub(crate) fn classify_name(\n                 let ast = hir::ModuleSource::Module(it);\n                 let src = hir::Source { file_id, ast };\n                 let def = hir::Module::from_definition(db, src)?;\n-                Some(from_module_def(db, def.into()))\n+                Some(from_module_def(db, def.into(), None))\n             },\n             ast::StructDef(it) => {\n                 let src = hir::Source { file_id, ast: it };\n                 let def = hir::Struct::from_source(db, src)?;\n-                Some(from_module_def(db, def.into()))\n+                Some(from_module_def(db, def.into(), None))\n             },\n             ast::EnumDef(it) => {\n                 let src = hir::Source { file_id, ast: it };\n                 let def = hir::Enum::from_source(db, src)?;\n-                Some(from_module_def(db, def.into()))\n+                Some(from_module_def(db, def.into(), None))\n             },\n             ast::TraitDef(it) => {\n                 let src = hir::Source { file_id, ast: it };\n                 let def = hir::Trait::from_source(db, src)?;\n-                Some(from_module_def(db, def.into()))\n+                Some(from_module_def(db, def.into(), None))\n             },\n             ast::StaticDef(it) => {\n                 let src = hir::Source { file_id, ast: it };\n                 let def = hir::Static::from_source(db, src)?;\n-                Some(from_module_def(db, def.into()))\n+                Some(from_module_def(db, def.into(), None))\n             },\n             ast::EnumVariant(it) => {\n                 let src = hir::Source { file_id, ast: it };\n                 let def = hir::EnumVariant::from_source(db, src)?;\n-                Some(from_module_def(db, def.into()))\n+                Some(from_module_def(db, def.into(), None))\n             },\n             ast::FnDef(it) => {\n                 let src = hir::Source { file_id, ast: it };\n                 let def = hir::Function::from_source(db, src)?;\n                 if parent.parent().and_then(ast::ItemList::cast).is_some() {\n                     Some(from_assoc_item(db, def.into()))\n                 } else {\n-                    Some(from_module_def(db, def.into()))\n+                    Some(from_module_def(db, def.into(), None))\n                 }\n             },\n             ast::ConstDef(it) => {\n@@ -74,7 +74,7 @@ pub(crate) fn classify_name(\n                 if parent.parent().and_then(ast::ItemList::cast).is_some() {\n                     Some(from_assoc_item(db, def.into()))\n                 } else {\n-                    Some(from_module_def(db, def.into()))\n+                    Some(from_module_def(db, def.into(), None))\n                 }\n             },\n             ast::TypeAliasDef(it) => {\n@@ -83,7 +83,7 @@ pub(crate) fn classify_name(\n                 if parent.parent().and_then(ast::ItemList::cast).is_some() {\n                     Some(from_assoc_item(db, def.into()))\n                 } else {\n-                    Some(from_module_def(db, def.into()))\n+                    Some(from_module_def(db, def.into(), None))\n                 }\n             },\n             _ => None,\n@@ -143,7 +143,7 @@ pub(crate) fn classify_name_ref(\n     let path = name_ref.syntax().ancestors().find_map(ast::Path::cast)?;\n     let resolved = analyzer.resolve_path(db, &path)?;\n     match resolved {\n-        Def(def) => Some(from_module_def(db, def)),\n+        Def(def) => Some(from_module_def(db, def, Some(container))),\n         AssocItem(item) => Some(from_assoc_item(db, item)),\n         LocalBinding(Either::A(pat)) => from_pat(db, file_id, pat),\n         LocalBinding(Either::B(par)) => {"}, {"sha": "58baf36868bd500aa71120e56c65203069e2c040", "filename": "crates/ra_ide_api/src/references/name_definition.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19fbf2c16b5c1f39e23c720a2655cfdb49c25135/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19fbf2c16b5c1f39e23c720a2655cfdb49c25135/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs?ref=19fbf2c16b5c1f39e23c720a2655cfdb49c25135", "patch": "@@ -77,7 +77,11 @@ pub(super) fn from_struct_field(db: &RootDatabase, field: StructField) -> NameDe\n     NameDefinition { item, container, visibility }\n }\n \n-pub(super) fn from_module_def(db: &RootDatabase, def: ModuleDef) -> NameDefinition {\n+pub(super) fn from_module_def(\n+    db: &RootDatabase,\n+    def: ModuleDef,\n+    module: Option<Module>,\n+) -> NameDefinition {\n     let item = NameKind::Def(def);\n     let (container, visibility) = match def {\n         ModuleDef::Module(it) => {\n@@ -98,7 +102,7 @@ pub(super) fn from_module_def(db: &RootDatabase, def: ModuleDef) -> NameDefiniti\n         ModuleDef::Adt(Adt::Struct(it)) => (it.module(db), it.source(db).ast.visibility()),\n         ModuleDef::Adt(Adt::Union(it)) => (it.module(db), it.source(db).ast.visibility()),\n         ModuleDef::Adt(Adt::Enum(it)) => (it.module(db), it.source(db).ast.visibility()),\n-        ModuleDef::BuiltinType(..) => unreachable!(),\n+        ModuleDef::BuiltinType(..) => (module.unwrap(), None),\n     };\n     NameDefinition { item, container, visibility }\n }"}, {"sha": "9254327f66b6266484af5027e5cd4e4e118fbd13", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19fbf2c16b5c1f39e23c720a2655cfdb49c25135/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19fbf2c16b5c1f39e23c720a2655cfdb49c25135/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=19fbf2c16b5c1f39e23c720a2655cfdb49c25135", "patch": "@@ -101,8 +101,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                     continue;\n                 }\n                 if let Some(name_ref) = node.as_node().cloned().and_then(ast::NameRef::cast) {\n-                    let name_kind =\n-                        classify_name_ref(db, file_id, &name_ref).and_then(|d| Some(d.item));\n+                    let name_kind = classify_name_ref(db, file_id, &name_ref).map(|d| d.item);\n                     match name_kind {\n                         Some(Macro(_)) => \"macro\",\n                         Some(Field(_)) => \"field\","}]}