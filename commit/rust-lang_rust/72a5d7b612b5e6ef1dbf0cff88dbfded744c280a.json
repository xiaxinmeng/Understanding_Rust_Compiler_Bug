{"sha": "72a5d7b612b5e6ef1dbf0cff88dbfded744c280a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYTVkN2I2MTJiNWU2ZWYxZGJmMGNmZjg4ZGJmZGVkNzQ0YzI4MGE=", "commit": {"author": {"name": "Matthias Seiffert", "email": "matthias-seiffert@hotmail.de", "date": "2019-10-05T14:45:02Z"}, "committer": {"name": "Matthias Seiffert", "email": "matthias-seiffert@hotmail.de", "date": "2019-10-07T17:13:10Z"}, "message": "Add message to replace assert!(false) help", "tree": {"sha": "9b3c503351cefc80b378f3ec79db85fa1998beed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b3c503351cefc80b378f3ec79db85fa1998beed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72a5d7b612b5e6ef1dbf0cff88dbfded744c280a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72a5d7b612b5e6ef1dbf0cff88dbfded744c280a", "html_url": "https://github.com/rust-lang/rust/commit/72a5d7b612b5e6ef1dbf0cff88dbfded744c280a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72a5d7b612b5e6ef1dbf0cff88dbfded744c280a/comments", "author": {"login": "Lythenas", "id": 32217236, "node_id": "MDQ6VXNlcjMyMjE3MjM2", "avatar_url": "https://avatars.githubusercontent.com/u/32217236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lythenas", "html_url": "https://github.com/Lythenas", "followers_url": "https://api.github.com/users/Lythenas/followers", "following_url": "https://api.github.com/users/Lythenas/following{/other_user}", "gists_url": "https://api.github.com/users/Lythenas/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lythenas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lythenas/subscriptions", "organizations_url": "https://api.github.com/users/Lythenas/orgs", "repos_url": "https://api.github.com/users/Lythenas/repos", "events_url": "https://api.github.com/users/Lythenas/events{/privacy}", "received_events_url": "https://api.github.com/users/Lythenas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lythenas", "id": 32217236, "node_id": "MDQ6VXNlcjMyMjE3MjM2", "avatar_url": "https://avatars.githubusercontent.com/u/32217236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lythenas", "html_url": "https://github.com/Lythenas", "followers_url": "https://api.github.com/users/Lythenas/followers", "following_url": "https://api.github.com/users/Lythenas/following{/other_user}", "gists_url": "https://api.github.com/users/Lythenas/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lythenas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lythenas/subscriptions", "organizations_url": "https://api.github.com/users/Lythenas/orgs", "repos_url": "https://api.github.com/users/Lythenas/repos", "events_url": "https://api.github.com/users/Lythenas/events{/privacy}", "received_events_url": "https://api.github.com/users/Lythenas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54bf4ffd626970e831bb80c037f804a3b3450835", "url": "https://api.github.com/repos/rust-lang/rust/commits/54bf4ffd626970e831bb80c037f804a3b3450835", "html_url": "https://github.com/rust-lang/rust/commit/54bf4ffd626970e831bb80c037f804a3b3450835"}], "stats": {"total": 115, "additions": 106, "deletions": 9}, "files": [{"sha": "79b584990f88833e2504be00d9302104ea137da7", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 93, "deletions": 5, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/72a5d7b612b5e6ef1dbf0cff88dbfded744c280a/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a5d7b612b5e6ef1dbf0cff88dbfded744c280a/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=72a5d7b612b5e6ef1dbf0cff88dbfded744c280a", "patch": "@@ -1,9 +1,11 @@\n-use rustc::hir::{Expr, ExprKind};\n+use crate::consts::{constant, Constant};\n+use crate::utils::{is_direct_expn_of, is_expn_of, match_qpath, span_help_and_lint};\n+use if_chain::if_chain;\n+use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n-\n-use crate::consts::{constant, Constant};\n-use crate::utils::{is_direct_expn_of, is_expn_of, span_help_and_lint};\n+use syntax::ast::LitKind;\n+use syntax::source_map::symbol::LocalInternedString;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `assert!(true)` and `assert!(false)` calls.\n@@ -63,7 +65,93 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n             if assert_span.from_expansion() {\n                 return;\n             }\n-            lint_assert_cb(false);\n+            if let Some((panic_message, is_true)) = assert_with_message(&cx, e) {\n+                if is_true {\n+                    span_help_and_lint(\n+                        cx,\n+                        ASSERTIONS_ON_CONSTANTS,\n+                        e.span,\n+                        \"`assert!(true)` will be optimized out by the compiler\",\n+                        \"remove it\",\n+                    );\n+                } else if panic_message.starts_with(\"assertion failed: \") {\n+                    span_help_and_lint(\n+                        cx,\n+                        ASSERTIONS_ON_CONSTANTS,\n+                        e.span,\n+                        \"`assert!(false)` should probably be replaced\",\n+                        \"use `panic!()` or `unreachable!()`\",\n+                    );\n+                } else {\n+                    span_help_and_lint(\n+                        cx,\n+                        ASSERTIONS_ON_CONSTANTS,\n+                        e.span,\n+                        &format!(\"`assert!(false, \\\"{}\\\")` should probably be replaced\", panic_message,),\n+                        &format!(\n+                            \"use `panic!(\\\"{}\\\")` or `unreachable!(\\\"{}\\\")`\",\n+                            panic_message, panic_message,\n+                        ),\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+// fn get_assert_args(snip: String) -> Option<Vec<String>> {\n+//\n+// }\n+\n+fn assert_with_message<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Option<(LocalInternedString, bool)> {\n+    if_chain! {\n+        if let ExprKind::Match(ref expr, ref arms, MatchSource::IfDesugar { contains_else_clause: false }) = expr.kind;\n+        // match expr\n+        if let ExprKind::DropTemps(ref expr) = expr.kind;\n+        if let ExprKind::Unary(UnOp::UnNot, ref expr) = expr.kind;\n+        //if let ExprKind::Lit(ref lit) = expr.kind;\n+        if let Some((Constant::Bool(is_true), _)) = constant(cx, cx.tables, expr);\n+        //if is_true;\n+        // match arms\n+        // arm 1 pattern\n+        if let PatKind::Lit(ref lit_expr) = arms[0].pat.kind;\n+        if let ExprKind::Lit(ref lit) = lit_expr.kind;\n+        if let LitKind::Bool(true) = lit.node;\n+        //if let LitKind::Bool(true) = lit1.node;\n+        // arm 1 block\n+        if let ExprKind::Block(ref block1, _) = arms[0].body.kind;\n+        if let Some(trailing_expr1) = &block1.expr;\n+        if block1.stmts.len() == 0;\n+        //\n+        if let ExprKind::Block(ref actual_block1, _) = trailing_expr1.kind;\n+        if let Some(block1_expr) = &actual_block1.expr;\n+        // function call\n+        if let ExprKind::Call(ref func, ref args) = block1_expr.kind;\n+        if let ExprKind::Path(ref path) = func.kind;\n+        // [\"{{root}}\", \"std\", \"rt\", \"begin_panic\"] does not work\n+        if match_qpath(path, &[\"$crate\", \"rt\", \"begin_panic\"]);\n+        // arguments\n+        if args.len() == 2;\n+        if let ExprKind::Lit(ref lit) = args[0].kind;\n+        if let LitKind::Str(ref s, _) = lit.node;\n+        let panic_message = s.as_str(); // bind the panic message\n+        if let ExprKind::AddrOf(MutImmutable, ref inner) = args[1].kind;\n+        if let ExprKind::Tup(ref elements) = inner.kind;\n+        if elements.len() == 3;\n+        if let ExprKind::Lit(ref lit1) = elements[0].kind;\n+        if let LitKind::Str(ref s1, _) = lit1.node;\n+        if let ExprKind::Lit(ref lit2) = elements[1].kind;\n+        if let LitKind::Int(_, _) = lit2.node;\n+        if let ExprKind::Lit(ref lit3) = elements[2].kind;\n+        if let LitKind::Int(_, _) = lit3.node;\n+        // arm 2 block\n+        if let PatKind::Wild = arms[1].pat.kind;\n+        if let ExprKind::Block(ref block2, _) = arms[1].body.kind;\n+        if let None = &block2.expr;\n+        if block2.stmts.len() == 0;\n+        then {\n+            return Some((panic_message, is_true));\n         }\n     }\n+    return None;\n }"}, {"sha": "0d9fe636bf9b5fc48ae5e1dc666f121d70d160e3", "filename": "tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72a5d7b612b5e6ef1dbf0cff88dbfded744c280a/tests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a5d7b612b5e6ef1dbf0cff88dbfded744c280a/tests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.rs?ref=72a5d7b612b5e6ef1dbf0cff88dbfded744c280a", "patch": "@@ -16,6 +16,7 @@ fn main() {\n \n     const C: bool = false;\n     assert!(C);\n+    assert!(C, \"C message\");\n \n     debug_assert!(true);\n     // Don't lint this, since there is no better way for expressing \"Only panic in debug mode\"."}, {"sha": "84a2533ccdccce598651bf655cb44673adc09452", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72a5d7b612b5e6ef1dbf0cff88dbfded744c280a/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72a5d7b612b5e6ef1dbf0cff88dbfded744c280a/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=72a5d7b612b5e6ef1dbf0cff88dbfded744c280a", "patch": "@@ -23,13 +23,13 @@ LL |     assert!(true, \"true message\");\n    |\n    = help: remove it\n \n-error: `assert!(false)` should probably be replaced\n+error: `assert!(false, \"false message\")` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:12:5\n    |\n LL |     assert!(false, \"false message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: use `panic!()` or `unreachable!()`\n+   = help: use `panic!(\"false message\")` or `unreachable!(\"false message\")`\n \n error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:15:5\n@@ -47,14 +47,22 @@ LL |     assert!(C);\n    |\n    = help: use `panic!()` or `unreachable!()`\n \n+error: `assert!(false, \"C message\")` should probably be replaced\n+  --> $DIR/assertions_on_constants.rs:19:5\n+   |\n+LL |     assert!(C, \"C message\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `panic!(\"C message\")` or `unreachable!(\"C message\")`\n+\n error: `assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:20:5\n+  --> $DIR/assertions_on_constants.rs:21:5\n    |\n LL |     debug_assert!(true);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}]}