{"sha": "c1550e3f8c57b0ebb0edb3a7ea64727e668f669c", "node_id": "C_kwDOAAsO6NoAKGMxNTUwZTNmOGM1N2IwZWJiMGVkYjNhN2VhNjQ3MjdlNjY4ZjY2OWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-02T23:39:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-02T23:39:25Z"}, "message": "Auto merge of #95590 - GuillaumeGomez:multi-line-attr-handling-doctest, r=notriddle\n\nFix multiline attributes handling in doctests\n\nFixes #55713.\n\nI needed to have access to the `unclosed_delims` field in order to check that the attribute was completely parsed and didn't have missing parts, so I created a getter for it.\n\nr? `@notriddle`", "tree": {"sha": "9dd00bf58606e2c3c98f2b2d18cd41fca19d92e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dd00bf58606e2c3c98f2b2d18cd41fca19d92e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c", "html_url": "https://github.com/rust-lang/rust/commit/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76d770ac21d9521db6a92a48c7b3d5b2cc535941", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d770ac21d9521db6a92a48c7b3d5b2cc535941", "html_url": "https://github.com/rust-lang/rust/commit/76d770ac21d9521db6a92a48c7b3d5b2cc535941"}, {"sha": "732ed2adc816eb600eac33a4cfcd2095c43be4f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/732ed2adc816eb600eac33a4cfcd2095c43be4f7", "html_url": "https://github.com/rust-lang/rust/commit/732ed2adc816eb600eac33a4cfcd2095c43be4f7"}], "stats": {"total": 92, "additions": 84, "deletions": 8}, "files": [{"sha": "0bbbd3a32c4090fa4bf6ac263c302850603f6813", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=c1550e3f8c57b0ebb0edb3a7ea64727e668f669c", "patch": "@@ -210,6 +210,10 @@ impl<'a> Parser<'a> {\n         self.unclosed_delims.extend(snapshot.unclosed_delims.clone());\n     }\n \n+    pub fn unclosed_delims(&self) -> &[UnmatchedBrace] {\n+        &self.unclosed_delims\n+    }\n+\n     /// Create a snapshot of the `Parser`.\n     pub(super) fn create_snapshot_for_diagnostic(&self) -> SnapshotParser<'a> {\n         let mut snapshot = self.clone();"}, {"sha": "c4201e222126ae0fe04873d30cbef089bbf8c894", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 62, "deletions": 8, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=c1550e3f8c57b0ebb0edb3a7ea64727e668f669c", "patch": "@@ -10,7 +10,10 @@ use rustc_interface::interface;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n+use rustc_parse::maybe_new_parser_from_source_str;\n+use rustc_parse::parser::attr::InnerAttrPolicy;\n use rustc_session::config::{self, CrateType, ErrorOutputType};\n+use rustc_session::parse::ParseSess;\n use rustc_session::{lint, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::SourceMap;\n@@ -493,7 +496,7 @@ crate fn make_test(\n     edition: Edition,\n     test_id: Option<&str>,\n ) -> (String, usize, bool) {\n-    let (crate_attrs, everything_else, crates) = partition_source(s);\n+    let (crate_attrs, everything_else, crates) = partition_source(s, edition);\n     let everything_else = everything_else.trim();\n     let mut line_offset = 0;\n     let mut prog = String::new();\n@@ -525,9 +528,7 @@ crate fn make_test(\n         rustc_span::create_session_if_not_set_then(edition, |_| {\n             use rustc_errors::emitter::{Emitter, EmitterWriter};\n             use rustc_errors::Handler;\n-            use rustc_parse::maybe_new_parser_from_source_str;\n             use rustc_parse::parser::ForceCollect;\n-            use rustc_session::parse::ParseSess;\n             use rustc_span::source_map::FilePathMapping;\n \n             let filename = FileName::anon_source_code(s);\n@@ -697,8 +698,39 @@ crate fn make_test(\n     (prog, line_offset, supports_color)\n }\n \n-// FIXME(aburka): use a real parser to deal with multiline attributes\n-fn partition_source(s: &str) -> (String, String, String) {\n+fn check_if_attr_is_complete(source: &str, edition: Edition) -> bool {\n+    if source.is_empty() {\n+        // Empty content so nothing to check in here...\n+        return true;\n+    }\n+    rustc_span::create_session_if_not_set_then(edition, |_| {\n+        let filename = FileName::anon_source_code(source);\n+        let sess = ParseSess::with_silent_emitter(None);\n+        let mut parser = match maybe_new_parser_from_source_str(&sess, filename, source.to_owned())\n+        {\n+            Ok(p) => p,\n+            Err(_) => {\n+                debug!(\"Cannot build a parser to check mod attr so skipping...\");\n+                return true;\n+            }\n+        };\n+        // If a parsing error happened, it's very likely that the attribute is incomplete.\n+        if !parser.parse_attribute(InnerAttrPolicy::Permitted).is_ok() {\n+            return false;\n+        }\n+        // We now check if there is an unclosed delimiter for the attribute. To do so, we look at\n+        // the `unclosed_delims` and see if the opening square bracket was closed.\n+        parser\n+            .unclosed_delims()\n+            .get(0)\n+            .map(|unclosed| {\n+                unclosed.unclosed_span.map(|s| s.lo()).unwrap_or(BytePos(0)) != BytePos(2)\n+            })\n+            .unwrap_or(true)\n+    })\n+}\n+\n+fn partition_source(s: &str, edition: Edition) -> (String, String, String) {\n     #[derive(Copy, Clone, PartialEq)]\n     enum PartitionState {\n         Attrs,\n@@ -710,15 +742,23 @@ fn partition_source(s: &str) -> (String, String, String) {\n     let mut crates = String::new();\n     let mut after = String::new();\n \n+    let mut mod_attr_pending = String::new();\n+\n     for line in s.lines() {\n         let trimline = line.trim();\n \n         // FIXME(misdreavus): if a doc comment is placed on an extern crate statement, it will be\n         // shunted into \"everything else\"\n         match state {\n             PartitionState::Attrs => {\n-                state = if trimline.starts_with(\"#![\")\n-                    || trimline.chars().all(|c| c.is_whitespace())\n+                state = if trimline.starts_with(\"#![\") {\n+                    if !check_if_attr_is_complete(line, edition) {\n+                        mod_attr_pending = line.to_owned();\n+                    } else {\n+                        mod_attr_pending.clear();\n+                    }\n+                    PartitionState::Attrs\n+                } else if trimline.chars().all(|c| c.is_whitespace())\n                     || (trimline.starts_with(\"//\") && !trimline.starts_with(\"///\"))\n                 {\n                     PartitionState::Attrs\n@@ -727,7 +767,21 @@ fn partition_source(s: &str) -> (String, String, String) {\n                 {\n                     PartitionState::Crates\n                 } else {\n-                    PartitionState::Other\n+                    // First we check if the previous attribute was \"complete\"...\n+                    if !mod_attr_pending.is_empty() {\n+                        // If not, then we append the new line into the pending attribute to check\n+                        // if this time it's complete...\n+                        mod_attr_pending.push_str(line);\n+                        if !trimline.is_empty() && check_if_attr_is_complete(line, edition) {\n+                            // If it's complete, then we can clear the pending content.\n+                            mod_attr_pending.clear();\n+                        }\n+                        // In any case, this is considered as `PartitionState::Attrs` so it's\n+                        // prepended before rustdoc's inserts.\n+                        PartitionState::Attrs\n+                    } else {\n+                        PartitionState::Other\n+                    }\n                 };\n             }\n             PartitionState::Crates => {"}, {"sha": "b2a8133c90e1217d6c259fa42e6cf074d3e7cf8b", "filename": "src/test/rustdoc-ui/doc-comment-multi-line-cfg-attr.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c/src%2Ftest%2Frustdoc-ui%2Fdoc-comment-multi-line-cfg-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c/src%2Ftest%2Frustdoc-ui%2Fdoc-comment-multi-line-cfg-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-comment-multi-line-cfg-attr.rs?ref=c1550e3f8c57b0ebb0edb3a7ea64727e668f669c", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags:--test\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+// check-pass\n+\n+/// ```\n+/// # #![cfg_attr(not(dox), deny(missing_abi,\n+/// # non_ascii_idents))]\n+///\n+/// pub struct Bar;\n+/// ```\n+pub struct Bar;"}, {"sha": "bf3521e4f9177b2e0e45a25f307f3bf59521591c", "filename": "src/test/rustdoc-ui/doc-comment-multi-line-cfg-attr.stdout", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c/src%2Ftest%2Frustdoc-ui%2Fdoc-comment-multi-line-cfg-attr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c/src%2Ftest%2Frustdoc-ui%2Fdoc-comment-multi-line-cfg-attr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-comment-multi-line-cfg-attr.stdout?ref=c1550e3f8c57b0ebb0edb3a7ea64727e668f669c", "patch": "@@ -0,0 +1,6 @@\n+\n+running 1 test\n+test $DIR/doc-comment-multi-line-cfg-attr.rs - Bar (line 6) ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}]}