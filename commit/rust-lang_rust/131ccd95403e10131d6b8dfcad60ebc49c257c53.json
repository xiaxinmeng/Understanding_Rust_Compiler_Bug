{"sha": "131ccd95403e10131d6b8dfcad60ebc49c257c53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMWNjZDk1NDAzZTEwMTMxZDZiOGRmY2FkNjBlYmM0OWMyNTdjNTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-02T11:58:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-02T11:58:28Z"}, "message": "Merge #4580\n\n4580: Fix invoking cargo without consulting CARGO env var or standard installation paths r=matklad a=Veetaha\n\nFollowup for #4329\r\n\r\nThe pr essentially fixes [this bug](https://youtu.be/EzQ7YIIo1rY?t=2189)\r\n\r\ncc @lefticus\n\nCo-authored-by: veetaha <veetaha2@gmail.com>", "tree": {"sha": "3c7d02c26198f71bcb9d018b57024090c1ffa22c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c7d02c26198f71bcb9d018b57024090c1ffa22c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/131ccd95403e10131d6b8dfcad60ebc49c257c53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe1j7kCRBK7hj4Ov3rIwAAdHIIAExBU0f9AgnHaheSyWp0mYz9\nvEoPAggXx1vpe1BW2oOcEnjvS6B4IFrxsNWE2toTyIVk0UThUkMwG2EIk0ST6EWi\nNLzWj7vbQbQbKY7BHn9/9PCy1AL6orhU/ECI8IMQZPGBHtIX9Fh0VbfLc3h4EbRn\nr1CPlwzdjOZRPpF2SMW9pJL224E95Ab+OeIqECAjJHx7VwiLvme6SCRD+AI/ychT\ni6lPfikq4hwfiQiwg4QwmjwS7RUiCVDstiTb5Oua1mz2rfIU6tKTGPFgMsp6kcQN\nZeyW0BEsHXiPxUNiUOCOr0k4rAIj57OUiIU+o/1/ZxvP5YBjtgp975F7/xuDvXA=\n=iFkD\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c7d02c26198f71bcb9d018b57024090c1ffa22c\nparent 21132a7a748a70351f5d1ae6d8c51a3a0065013e\nparent d605ec9c321392d9c7ee4b440c560e1e405d92e6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591099108 +0000\ncommitter GitHub <noreply@github.com> 1591099108 +0000\n\nMerge #4580\n\n4580: Fix invoking cargo without consulting CARGO env var or standard installation paths r=matklad a=Veetaha\n\nFollowup for #4329\r\n\r\nThe pr essentially fixes [this bug](https://youtu.be/EzQ7YIIo1rY?t=2189)\r\n\r\ncc @lefticus\n\nCo-authored-by: veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/131ccd95403e10131d6b8dfcad60ebc49c257c53", "html_url": "https://github.com/rust-lang/rust/commit/131ccd95403e10131d6b8dfcad60ebc49c257c53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/131ccd95403e10131d6b8dfcad60ebc49c257c53/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21132a7a748a70351f5d1ae6d8c51a3a0065013e", "url": "https://api.github.com/repos/rust-lang/rust/commits/21132a7a748a70351f5d1ae6d8c51a3a0065013e", "html_url": "https://github.com/rust-lang/rust/commit/21132a7a748a70351f5d1ae6d8c51a3a0065013e"}, {"sha": "d605ec9c321392d9c7ee4b440c560e1e405d92e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d605ec9c321392d9c7ee4b440c560e1e405d92e6", "html_url": "https://github.com/rust-lang/rust/commit/d605ec9c321392d9c7ee4b440c560e1e405d92e6"}], "stats": {"total": 201, "additions": 130, "deletions": 71}, "files": [{"sha": "af27bfc85e0b4a4b3e16521142812967bcbf9592", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -1119,6 +1119,7 @@ dependencies = [\n  \"memmap\",\n  \"ra_mbe\",\n  \"ra_proc_macro\",\n+ \"ra_toolchain\",\n  \"ra_tt\",\n  \"serde_derive\",\n  \"test_utils\","}, {"sha": "5821029450f5b0062bdbab907c684695c7f8609d", "filename": "crates/ra_proc_macro_srv/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/crates%2Fra_proc_macro_srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/crates%2Fra_proc_macro_srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2FCargo.toml?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -22,3 +22,4 @@ cargo_metadata = \"0.10.0\"\n difference = \"2.0.0\"\n # used as proc macro test target\n serde_derive = \"1.0.106\"\n+ra_toolchain = { path = \"../ra_toolchain\" }"}, {"sha": "8d85f2d8a77521d40c396c3fb55a9f0a22853694", "filename": "crates/ra_proc_macro_srv/src/tests/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -2,7 +2,6 @@\n \n use crate::dylib;\n use crate::ProcMacroSrv;\n-pub use difference::Changeset as __Changeset;\n use ra_proc_macro::ListMacrosTask;\n use std::str::FromStr;\n use test_utils::assert_eq_text;\n@@ -13,7 +12,7 @@ mod fixtures {\n \n     // Use current project metadata to get the proc-macro dylib path\n     pub fn dylib_path(crate_name: &str, version: &str) -> std::path::PathBuf {\n-        let command = Command::new(\"cargo\")\n+        let command = Command::new(ra_toolchain::cargo())\n             .args(&[\"check\", \"--message-format\", \"json\"])\n             .output()\n             .unwrap()"}, {"sha": "173c23b9e5d0bce7f07abc7ec1b98925619b6093", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -121,12 +121,21 @@ pub struct RunnablesParams {\n     pub position: Option<Position>,\n }\n \n+// Must strictly correspond to the executable name\n+#[derive(Serialize, Deserialize, Debug)]\n+#[serde(rename_all = \"lowercase\")]\n+pub enum RunnableKind {\n+    Cargo,\n+    Rustc,\n+    Rustup,\n+}\n+\n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n pub struct Runnable {\n     pub range: Range,\n     pub label: String,\n-    pub bin: String,\n+    pub kind: RunnableKind,\n     pub args: Vec<String>,\n     pub extra_args: Vec<String>,\n     pub env: FxHashMap<String, String>,"}, {"sha": "bc7c7f1ef5d5f306c11646b284623c63813b681c", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -426,7 +426,7 @@ pub fn handle_runnables(\n                 res.push(lsp_ext::Runnable {\n                     range: Default::default(),\n                     label: format!(\"cargo {} -p {}\", cmd, spec.package),\n-                    bin: \"cargo\".to_string(),\n+                    kind: lsp_ext::RunnableKind::Cargo,\n                     args: vec![cmd.to_string(), \"--package\".to_string(), spec.package.clone()],\n                     extra_args: Vec::new(),\n                     env: FxHashMap::default(),\n@@ -438,7 +438,7 @@ pub fn handle_runnables(\n             res.push(lsp_ext::Runnable {\n                 range: Default::default(),\n                 label: \"cargo check --workspace\".to_string(),\n-                bin: \"cargo\".to_string(),\n+                kind: lsp_ext::RunnableKind::Cargo,\n                 args: vec![\"check\".to_string(), \"--workspace\".to_string()],\n                 extra_args: Vec::new(),\n                 env: FxHashMap::default(),\n@@ -982,10 +982,11 @@ fn to_lsp_runnable(\n             target.map_or_else(|| \"run binary\".to_string(), |t| format!(\"run {}\", t))\n         }\n     };\n+\n     Ok(lsp_ext::Runnable {\n         range: to_proto::range(&line_index, runnable.range),\n         label,\n-        bin: \"cargo\".to_string(),\n+        kind: lsp_ext::RunnableKind::Cargo,\n         args,\n         extra_args,\n         env: {"}, {"sha": "8b473ff74cd1f37387d7b839e38b78b751e4c8a5", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -79,7 +79,7 @@ fn foo() {\n           {\n             \"args\": [ \"test\" ],\n             \"extraArgs\": [ \"foo\", \"--nocapture\" ],\n-            \"bin\": \"cargo\",\n+            \"kind\": \"cargo\",\n             \"env\": { \"RUST_BACKTRACE\": \"short\" },\n             \"cwd\": null,\n             \"label\": \"test foo\",\n@@ -91,7 +91,7 @@ fn foo() {\n           {\n             \"args\": [\"check\", \"--workspace\"],\n             \"extraArgs\": [],\n-            \"bin\": \"cargo\",\n+            \"kind\": \"cargo\",\n             \"env\": {},\n             \"cwd\": null,\n             \"label\": \"cargo check --workspace\",\n@@ -141,7 +141,7 @@ fn main() {}\n             {\n               \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\" ],\n               \"extraArgs\": [ \"test_eggs\", \"--exact\", \"--nocapture\" ],\n-              \"bin\": \"cargo\",\n+              \"kind\": \"cargo\",\n               \"env\": { \"RUST_BACKTRACE\": \"short\" },\n               \"label\": \"test test_eggs\",\n               \"range\": {\n@@ -153,7 +153,7 @@ fn main() {}\n             {\n               \"args\": [ \"check\", \"--package\", \"foo\" ],\n               \"extraArgs\": [],\n-              \"bin\": \"cargo\",\n+              \"kind\": \"cargo\",\n               \"env\": {},\n               \"label\": \"cargo check -p foo\",\n               \"range\": {\n@@ -165,7 +165,7 @@ fn main() {}\n             {\n               \"args\": [ \"test\", \"--package\", \"foo\" ],\n               \"extraArgs\": [],\n-              \"bin\": \"cargo\",\n+              \"kind\": \"cargo\",\n               \"env\": {},\n               \"label\": \"cargo test -p foo\",\n               \"range\": {"}, {"sha": "b7237ee90076235ed66bb64f500fbe15cc91c75f", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -427,7 +427,7 @@ interface Runnable {\n     /// The label to show in the UI.\n     label: string;\n     /// The following fields describe a process to spawn.\n-    bin: string;\n+    kind: \"cargo\" | \"rustc\" | \"rustup\";\n     args: string[];\n     /// Args for cargo after `--`.\n     extraArgs: string[];"}, {"sha": "bdec5b7357faa2467403b5843b3c41d56ec999fd", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -3,7 +3,7 @@ import * as vscode from 'vscode';\n import * as path from 'path';\n import * as ra from './lsp_ext';\n \n-import { Cargo } from './cargo';\n+import { Cargo } from './toolchain';\n import { Ctx } from \"./ctx\";\n \n const debugOutput = vscode.window.createOutputChannel(\"Debug\");"}, {"sha": "3e0b606997fb6512dd1b29bab52932d30a0c5e2a", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -45,10 +45,13 @@ export interface RunnablesParams {\n     textDocument: lc.TextDocumentIdentifier;\n     position: lc.Position | null;\n }\n+\n+export type RunnableKind = \"cargo\" | \"rustc\" | \"rustup\";\n+\n export interface Runnable {\n     range: lc.Range;\n     label: string;\n-    bin: string;\n+    kind: RunnableKind;\n     args: string[];\n     extraArgs: string[];\n     env: { [key: string]: string };"}, {"sha": "113354bab2ee7f97bf6192ee2d5813fea3df5577", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -1,6 +1,7 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n import * as ra from './lsp_ext';\n+import * as toolchain from \"./toolchain\";\n \n import { Ctx, Cmd } from './ctx';\n import { startDebugSession, getDebugConfiguration } from './debug';\n@@ -175,7 +176,7 @@ export function createTask(spec: ra.Runnable): vscode.Task {\n     const definition: CargoTaskDefinition = {\n         type: 'cargo',\n         label: spec.label,\n-        command: spec.bin,\n+        command: toolchain.getPathForExecutable(spec.kind),\n         args: spec.extraArgs ? [...spec.args, '--', ...spec.extraArgs] : spec.args,\n         env: Object.assign({}, process.env, spec.env),\n     };"}, {"sha": "9748824df38ffb662312d258308122fb40d023cf", "filename": "editors/code/src/tasks.ts", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -1,4 +1,5 @@\n import * as vscode from 'vscode';\n+import * as toolchain from \"./toolchain\";\n \n // This ends up as the `type` key in tasks.json. RLS also uses `cargo` and\n // our configuration should be compatible with it so use the same key.\n@@ -24,6 +25,8 @@ class CargoTaskProvider implements vscode.TaskProvider {\n         // set of tasks that always exist. These tasks cannot be removed in\n         // tasks.json - only tweaked.\n \n+        const cargoPath = toolchain.cargoPath();\n+\n         return [\n             { command: 'build', group: vscode.TaskGroup.Build },\n             { command: 'check', group: vscode.TaskGroup.Build },\n@@ -46,7 +49,7 @@ class CargoTaskProvider implements vscode.TaskProvider {\n                     `cargo ${command}`,\n                     'rust',\n                     // What to do when this command is executed.\n-                    new vscode.ShellExecution('cargo', [command]),\n+                    new vscode.ShellExecution(cargoPath, [command]),\n                     // Problem matchers.\n                     ['$rustc'],\n                 );\n@@ -80,4 +83,4 @@ class CargoTaskProvider implements vscode.TaskProvider {\n export function activateTaskProvider(target: vscode.WorkspaceFolder): vscode.Disposable {\n     const provider = new CargoTaskProvider(target);\n     return vscode.tasks.registerTaskProvider(TASK_TYPE, provider);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "80a7915e90e8972d30581ef419fc56ab8ce48526", "filename": "editors/code/src/toolchain.ts", "status": "renamed", "additions": 70, "deletions": 47, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -1,9 +1,10 @@\n import * as cp from 'child_process';\n import * as os from 'os';\n import * as path from 'path';\n+import * as fs from 'fs';\n import * as readline from 'readline';\n import { OutputChannel } from 'vscode';\n-import { isValidExecutable } from './util';\n+import { log, memoize } from './util';\n \n interface CompilationArtifact {\n     fileName: string;\n@@ -17,33 +18,34 @@ export interface ArtifactSpec {\n     filter?: (artifacts: CompilationArtifact[]) => CompilationArtifact[];\n }\n \n-export function artifactSpec(args: readonly string[]): ArtifactSpec {\n-    const cargoArgs = [...args, \"--message-format=json\"];\n+export class Cargo {\n+    constructor(readonly rootFolder: string, readonly output: OutputChannel) { }\n \n-    // arguments for a runnable from the quick pick should be updated.\n-    // see crates\\rust-analyzer\\src\\main_loop\\handlers.rs, handle_code_lens\n-    switch (cargoArgs[0]) {\n-        case \"run\": cargoArgs[0] = \"build\"; break;\n-        case \"test\": {\n-            if (!cargoArgs.includes(\"--no-run\")) {\n-                cargoArgs.push(\"--no-run\");\n+    // Made public for testing purposes\n+    static artifactSpec(args: readonly string[]): ArtifactSpec {\n+        const cargoArgs = [...args, \"--message-format=json\"];\n+\n+        // arguments for a runnable from the quick pick should be updated.\n+        // see crates\\rust-analyzer\\src\\main_loop\\handlers.rs, handle_code_lens\n+        switch (cargoArgs[0]) {\n+            case \"run\": cargoArgs[0] = \"build\"; break;\n+            case \"test\": {\n+                if (!cargoArgs.includes(\"--no-run\")) {\n+                    cargoArgs.push(\"--no-run\");\n+                }\n+                break;\n             }\n-            break;\n         }\n-    }\n \n-    const result: ArtifactSpec = { cargoArgs: cargoArgs };\n-    if (cargoArgs[0] === \"test\") {\n-        // for instance, `crates\\rust-analyzer\\tests\\heavy_tests\\main.rs` tests\n-        // produce 2 artifacts: {\"kind\": \"bin\"} and {\"kind\": \"test\"}\n-        result.filter = (artifacts) => artifacts.filter(it => it.isTest);\n-    }\n-\n-    return result;\n-}\n+        const result: ArtifactSpec = { cargoArgs: cargoArgs };\n+        if (cargoArgs[0] === \"test\") {\n+            // for instance, `crates\\rust-analyzer\\tests\\heavy_tests\\main.rs` tests\n+            // produce 2 artifacts: {\"kind\": \"bin\"} and {\"kind\": \"test\"}\n+            result.filter = (artifacts) => artifacts.filter(it => it.isTest);\n+        }\n \n-export class Cargo {\n-    constructor(readonly rootFolder: string, readonly output: OutputChannel) { }\n+        return result;\n+    }\n \n     private async getArtifacts(spec: ArtifactSpec): Promise<CompilationArtifact[]> {\n         const artifacts: CompilationArtifact[] = [];\n@@ -77,7 +79,7 @@ export class Cargo {\n     }\n \n     async executableFromArgs(args: readonly string[]): Promise<string> {\n-        const artifacts = await this.getArtifacts(artifactSpec(args));\n+        const artifacts = await this.getArtifacts(Cargo.artifactSpec(args));\n \n         if (artifacts.length === 0) {\n             throw new Error('No compilation artifacts');\n@@ -94,14 +96,7 @@ export class Cargo {\n         onStderrString: (data: string) => void\n     ): Promise<number> {\n         return new Promise((resolve, reject) => {\n-            let cargoPath;\n-            try {\n-                cargoPath = getCargoPathOrFail();\n-            } catch (err) {\n-                return reject(err);\n-            }\n-\n-            const cargo = cp.spawn(cargoPath, cargoArgs, {\n+            const cargo = cp.spawn(cargoPath(), cargoArgs, {\n                 stdio: ['ignore', 'pipe', 'pipe'],\n                 cwd: this.rootFolder\n             });\n@@ -126,26 +121,54 @@ export class Cargo {\n     }\n }\n \n-// Mirrors `ra_env::get_path_for_executable` implementation\n-function getCargoPathOrFail(): string {\n-    const envVar = process.env.CARGO;\n-    const executableName = \"cargo\";\n+/** Mirrors `ra_toolchain::cargo()` implementation */\n+export function cargoPath(): string {\n+    return getPathForExecutable(\"cargo\");\n+}\n+\n+/** Mirrors `ra_toolchain::get_path_for_executable()` implementation */\n+export const getPathForExecutable = memoize(\n+    // We apply caching to decrease file-system interactions\n+    (executableName: \"cargo\" | \"rustc\" | \"rustup\"): string => {\n+        {\n+            const envVar = process.env[executableName.toUpperCase()];\n+            if (envVar) return envVar;\n+        }\n+\n+        if (lookupInPath(executableName)) return executableName;\n \n-    if (envVar) {\n-        if (isValidExecutable(envVar)) return envVar;\n+        try {\n+            // hmm, `os.homedir()` seems to be infallible\n+            // it is not mentioned in docs and cannot be infered by the type signature...\n+            const standardPath = path.join(os.homedir(), \".cargo\", \"bin\", executableName);\n \n-        throw new Error(`\\`${envVar}\\` environment variable points to something that's not a valid executable`);\n+            if (isFile(standardPath)) return standardPath;\n+        } catch (err) {\n+            log.error(\"Failed to read the fs info\", err);\n+        }\n+        return executableName;\n     }\n+);\n \n-    if (isValidExecutable(executableName)) return executableName;\n+function lookupInPath(exec: string): boolean {\n+    const paths = process.env.PATH ?? \"\";;\n \n-    const standardLocation = path.join(os.homedir(), '.cargo', 'bin', executableName);\n+    const candidates = paths.split(path.delimiter).flatMap(dirInPath => {\n+        const candidate = path.join(dirInPath, exec);\n+        return os.type() === \"Windows_NT\"\n+            ? [candidate, `${candidate}.exe`]\n+            : [candidate];\n+    });\n \n-    if (isValidExecutable(standardLocation)) return standardLocation;\n+    return candidates.some(isFile);\n+}\n \n-    throw new Error(\n-        `Failed to find \\`${executableName}\\` executable. ` +\n-        `Make sure \\`${executableName}\\` is in \\`$PATH\\`, ` +\n-        `or set \\`${envVar}\\` to point to a valid executable.`\n-    );\n+function isFile(suspectPath: string): boolean {\n+    // It is not mentionned in docs, but `statSync()` throws an error when\n+    // the path doesn't exist\n+    try {\n+        return fs.statSync(suspectPath).isFile();\n+    } catch {\n+        return false;\n+    }\n }", "previous_filename": "editors/code/src/cargo.ts"}, {"sha": "fe3fb71cd7dc28c0b9493e61d81856e174d66ac2", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -99,3 +99,21 @@ export function isValidExecutable(path: string): boolean {\n export function setContextValue(key: string, value: any): Thenable<void> {\n     return vscode.commands.executeCommand('setContext', key, value);\n }\n+\n+/**\n+ * Returns a higher-order function that caches the results of invoking the\n+ * underlying function.\n+ */\n+export function memoize<Ret, TThis, Param extends string>(func: (this: TThis, arg: Param) => Ret) {\n+    const cache = new Map<string, Ret>();\n+\n+    return function(this: TThis, arg: Param) {\n+        const cached = cache.get(arg);\n+        if (cached) return cached;\n+\n+        const result = func.call(this, arg);\n+        cache.set(arg, result);\n+\n+        return result;\n+    };\n+}"}, {"sha": "68794d53ede11b9c1f062500460d24f7b2f99470", "filename": "editors/code/tests/unit/launch_config.test.ts", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Ftests%2Funit%2Flaunch_config.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/131ccd95403e10131d6b8dfcad60ebc49c257c53/editors%2Fcode%2Ftests%2Funit%2Flaunch_config.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Flaunch_config.test.ts?ref=131ccd95403e10131d6b8dfcad60ebc49c257c53", "patch": "@@ -1,25 +1,25 @@\n import * as assert from 'assert';\n-import * as cargo from '../../src/cargo';\n+import { Cargo } from '../../src/toolchain';\n \n suite('Launch configuration', () => {\n \n     suite('Lens', () => {\n         test('A binary', async () => {\n-            const args = cargo.artifactSpec([\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\"]);\n+            const args = Cargo.artifactSpec([\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\"]);\n \n             assert.deepEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\", \"--message-format=json\"]);\n             assert.deepEqual(args.filter, undefined);\n         });\n \n         test('One of Multiple Binaries', async () => {\n-            const args = cargo.artifactSpec([\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin1\"]);\n+            const args = Cargo.artifactSpec([\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin1\"]);\n \n             assert.deepEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin1\", \"--message-format=json\"]);\n             assert.deepEqual(args.filter, undefined);\n         });\n \n         test('A test', async () => {\n-            const args = cargo.artifactSpec([\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--no-run\"]);\n+            const args = Cargo.artifactSpec([\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--no-run\"]);\n \n             assert.deepEqual(args.cargoArgs, [\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--no-run\", \"--message-format=json\"]);\n             assert.notDeepEqual(args.filter, undefined);\n@@ -28,22 +28,22 @@ suite('Launch configuration', () => {\n \n     suite('QuickPick', () => {\n         test('A binary', async () => {\n-            const args = cargo.artifactSpec([\"run\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\"]);\n+            const args = Cargo.artifactSpec([\"run\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\"]);\n \n             assert.deepEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\", \"--message-format=json\"]);\n             assert.deepEqual(args.filter, undefined);\n         });\n \n \n         test('One of Multiple Binaries', async () => {\n-            const args = cargo.artifactSpec([\"run\", \"--package\", \"pkg_name\", \"--bin\", \"bin2\"]);\n+            const args = Cargo.artifactSpec([\"run\", \"--package\", \"pkg_name\", \"--bin\", \"bin2\"]);\n \n             assert.deepEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin2\", \"--message-format=json\"]);\n             assert.deepEqual(args.filter, undefined);\n         });\n \n         test('A test', async () => {\n-            const args = cargo.artifactSpec([\"test\", \"--package\", \"pkg_name\", \"--lib\"]);\n+            const args = Cargo.artifactSpec([\"test\", \"--package\", \"pkg_name\", \"--lib\"]);\n \n             assert.deepEqual(args.cargoArgs, [\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--message-format=json\", \"--no-run\"]);\n             assert.notDeepEqual(args.filter, undefined);"}]}