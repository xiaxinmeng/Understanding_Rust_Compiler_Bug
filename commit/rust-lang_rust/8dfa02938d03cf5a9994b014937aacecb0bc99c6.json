{"sha": "8dfa02938d03cf5a9994b014937aacecb0bc99c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZmEwMjkzOGQwM2NmNWE5OTk0YjAxNDkzN2FhY2VjYjBiYzk5YzY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-13T07:30:29Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-13T07:30:29Z"}, "message": "Merge branch 'pr-149'", "tree": {"sha": "3960346dc004a6b616fde0d03db6d772d3a045a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3960346dc004a6b616fde0d03db6d772d3a045a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dfa02938d03cf5a9994b014937aacecb0bc99c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfa02938d03cf5a9994b014937aacecb0bc99c6", "html_url": "https://github.com/rust-lang/rust/commit/8dfa02938d03cf5a9994b014937aacecb0bc99c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dfa02938d03cf5a9994b014937aacecb0bc99c6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "510ea0c5e5242883028d4141cde925d4daadb082", "url": "https://api.github.com/repos/rust-lang/rust/commits/510ea0c5e5242883028d4141cde925d4daadb082", "html_url": "https://github.com/rust-lang/rust/commit/510ea0c5e5242883028d4141cde925d4daadb082"}, {"sha": "a67e55f3f07d552233248a63d256535e095c7975", "url": "https://api.github.com/repos/rust-lang/rust/commits/a67e55f3f07d552233248a63d256535e095c7975", "html_url": "https://github.com/rust-lang/rust/commit/a67e55f3f07d552233248a63d256535e095c7975"}], "stats": {"total": 276, "additions": 139, "deletions": 137}, "files": [{"sha": "377c7e66ebd6a9c572b1c9739c5615c9459793fc", "filename": "src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fapprox_const.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -53,7 +53,7 @@ fn check_known_consts(cx: &Context, span: Span, str: &str, module: &str) {\n         for &(constant, name) in KNOWN_CONSTS {\n             if within_epsilon(constant, value) {\n                 span_lint(cx, APPROX_CONSTANT, span, &format!(\n-                    \"approximate value of `{}::{}` found. Consider using it directly.\", module, &name));\n+                    \"approximate value of `{}::{}` found. Consider using it directly\", module, &name));\n             }\n         }\n     }"}, {"sha": "eda38419d4dc7758c831959f90ff8b93d870c38c", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -51,7 +51,7 @@ impl LintPass for EtaPass {\n                         }\n                     }\n                     span_lint(cx, REDUNDANT_CLOSURE, expr.span,\n-                                 &format!(\"redundant closure found. Consider using `{}` in its place.\",\n+                                 &format!(\"redundant closure found. Consider using `{}` in its place\",\n                                           expr_to_string(caller))[..])\n                 }\n             }"}, {"sha": "8c6940e3df4909e86350331e9f1bad0612ace715", "filename": "src/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -49,7 +49,7 @@ impl LintPass for IdentityOp {\n fn check(cx: &Context, e: &Expr, m: i8, span: Span, arg: Span) {\n     if have_lit(cx, e, m) {\n         span_lint(cx, IDENTITY_OP, span, &format!(\n-            \"the operation is ineffective. Consider reducing it to `{}`.\",\n+            \"the operation is ineffective. Consider reducing it to `{}`\",\n            snippet(cx, arg, \"..\")));\n     }\n }"}, {"sha": "da230c1d28a7c5dd7bbccf9e1a05438dbbca169e", "filename": "src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -59,7 +59,7 @@ fn check_trait_items(cx: &Context, item: &Item, trait_items: &[P<TraitItem>]) {\n             if is_named_self(i, \"len\") {\n                 span_lint(cx, LEN_WITHOUT_IS_EMPTY, i.span,\n                           &format!(\"trait `{}` has a `.len(_: &Self)` method, but no \\\n-                                    `.is_empty(_: &Self)` method. Consider adding one.\",\n+                                    `.is_empty(_: &Self)` method. Consider adding one\",\n                                    item.ident.name));\n             }\n         };\n@@ -79,7 +79,7 @@ fn check_impl_items(cx: &Context, item: &Item, impl_items: &[P<ImplItem>]) {\n                 span_lint(cx, LEN_WITHOUT_IS_EMPTY,\n                           Span{ lo: s.lo, hi: s.lo, expn_id: s.expn_id },\n                           &format!(\"item `{}` has a `.len(_: &Self)` method, but no \\\n-                                    `.is_empty(_: &Self)` method. Consider adding one.\",\n+                                    `.is_empty(_: &Self)` method. Consider adding one\",\n                                    item.ident.name));\n                 return;\n             }"}, {"sha": "403845771a9ce69feacc725fab53270546b31266", "filename": "src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -30,12 +30,12 @@ impl LintPass for MethodsPass {\n                         span_lint(cx, OPTION_UNWRAP_USED, expr.span,\n                                   \"used unwrap() on an Option value. If you don't want \\\n                                    to handle the None case gracefully, consider using\n-                                   expect() to provide a better panic message.\");\n+                                   expect() to provide a better panic message\");\n                     }\n                     else if match_def_path(cx, did.did, &[\"core\", \"result\", \"Result\"]) {\n                         span_lint(cx, RESULT_UNWRAP_USED, expr.span,\n                                   \"used unwrap() on a Result value. Graceful handling \\\n-                                   of Err values is preferred.\");\n+                                   of Err values is preferred\");\n                     }\n                 }\n             }"}, {"sha": "925843a70466cfd379c2db482c0df7ffcae1aa87", "filename": "src/misc.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -129,7 +129,8 @@ impl LintPass for FloatCmp {\n             let op = cmp.node;\n             if (op == BiEq || op == BiNe) && (is_float(cx, left) || is_float(cx, right)) {\n                 span_lint(cx, FLOAT_CMP, expr.span, &format!(\n-                    \"{}-comparison of f32 or f64 detected. Consider changing this to `abs({} - {}) < epsilon` for some suitable value of epsilon.\",\n+                    \"{}-comparison of f32 or f64 detected. Consider changing this to \\\n+                     `abs({} - {}) < epsilon` for some suitable value of epsilon\",\n                     binop_to_string(op), snippet(cx, left.span, \"..\"),\n                     snippet(cx, right.span, \"..\")));\n             }\n@@ -146,7 +147,7 @@ fn is_float(cx: &Context, expr: &Expr) -> bool {\n }\n \n declare_lint!(pub PRECEDENCE, Warn,\n-              \"Warn on mixing bit ops with integer arithmetic without parenthesis\");\n+              \"Warn on mixing bit ops with integer arithmetic without parentheses\");\n \n #[derive(Copy,Clone)]\n pub struct Precedence;\n@@ -160,7 +161,8 @@ impl LintPass for Precedence {\n         if let ExprBinary(Spanned { node: op, ..}, ref left, ref right) = expr.node {\n             if is_bit_op(op) && (is_arith_expr(left) || is_arith_expr(right)) {\n                 span_lint(cx, PRECEDENCE, expr.span,\n-                    \"operator precedence can trip the unwary. Consider adding parenthesis to the subexpression.\");\n+                    \"operator precedence can trip the unwary. Consider adding parentheses \\\n+                     to the subexpression\");\n             }\n         }\n     }\n@@ -216,7 +218,7 @@ fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n                 name == \"to_owned\" && is_str_arg(cx, args) {\n                     span_lint(cx, CMP_OWNED, expr.span, &format!(\n                         \"this creates an owned instance just for comparison. \\\n-                         Consider using `{}.as_slice()` to compare without allocation.\",\n+                         Consider using `{}.as_slice()` to compare without allocation\",\n                         snippet(cx, other_span, \"..\")))\n                 }\n         },\n@@ -226,7 +228,7 @@ fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n                     match_path(path, &[\"String\", \"from\"]) {\n                         span_lint(cx, CMP_OWNED, expr.span, &format!(\n                             \"this creates an owned instance just for comparison. \\\n-                             Consider using `{}.as_slice()` to compare without allocation.\",\n+                             Consider using `{}.as_slice()` to compare without allocation\",\n                             snippet(cx, other_span, \"..\")))\n                     }\n             }"}, {"sha": "a2055bb655f1ddbcdf59347e1b4267844a94c639", "filename": "src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -46,7 +46,7 @@ fn check_expr_expd(cx: &Context, expr: &Expr, info: Option<&ExpnInfo>) {\n                 cx.tcx.expr_ty(e).sty {\n                     span_lint(cx, MUT_MUT, expr.span,\n                               \"this expression mutably borrows a mutable reference. \\\n-                               Consider reborrowing.\")\n+                               Consider reborrowing\")\n                 }\n         })\n     })"}, {"sha": "d97e819077a2a542a1041b2619215cf7b6826e79", "filename": "src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -37,7 +37,7 @@ impl LintPass for NeedlessBool {\n                               \"you can reduce your if statement to its predicate\"); },\n                 (Option::Some(false), Option::Some(true)) => {\n                     span_lint(cx, NEEDLESS_BOOL, e.span,\n-                              \"you can reduce your if statement to `!` + your predicate\"); },\n+                              \"you can reduce your if statement to `!` + its predicate\"); },\n                 (Option::Some(false), Option::Some(false)) => {\n                     span_lint(cx, NEEDLESS_BOOL, e.span,\n                               \"your if-then-else expression will always return false\"); },"}, {"sha": "3868854c7a108ff7f0bd27e4a0217edf4d50fb3b", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -61,9 +61,9 @@ fn check_ptr_subtype(cx: &Context, span: Span, ty: &Ty) {\n         &[\"String\"]).map_or((), |_| {\n             span_lint(cx, PTR_ARG, span,\n                       \"writing `&String` instead of `&str` involves a new object \\\n-                       where a slice will do. Consider changing the type to `&str`.\")\n+                       where a slice will do. Consider changing the type to `&str`\")\n         }), |_| span_lint(cx, PTR_ARG, span,\n                           \"writing `&Vec<_>` instead of \\\n                            `&[_]` involves one more reference and cannot be used with \\\n-                           non-Vec-based slices. Consider changing the type to `&[...]`.\"))\n+                           non-Vec-based slices. Consider changing the type to `&[...]`\"))\n }"}, {"sha": "afc444dd67f7f9b9aa760281a499bcc954716dae", "filename": "src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -30,7 +30,7 @@ impl LintPass for StringAdd {\n             if is_string(cx, target) && is_add(src, target) {\n                 span_lint(cx, STRING_ADD_ASSIGN, e.span,\n                     \"you assign the result of adding something to this string. \\\n-                    Consider using `String::push_str()` instead.\")\n+                    Consider using `String::push_str()` instead\")\n             }\n         }\n     }"}, {"sha": "c22d088ce5b88f6ff6657060cff512fcdfe7265f", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -90,7 +90,7 @@ fn check_let_unit(cx: &Context, decl: &Decl, info: Option<&ExpnInfo>) {\n         let bindtype = &cx.tcx.pat_ty(&*local.pat).sty;\n         if *bindtype == ty::TyTuple(vec![]) {\n             span_lint(cx, LET_UNIT_VALUE, decl.span, &format!(\n-                \"this let-binding has unit value. Consider omitting `let {} =`.\",\n+                \"this let-binding has unit value. Consider omitting `let {} =`\",\n                 snippet(cx, local.pat.span, \"..\")));\n         }\n     }"}, {"sha": "161e90d0f64e7fccba4dc7b646665e5c7f8b87da", "filename": "src/unicode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -27,11 +27,11 @@ fn check_str(cx: &Context, string: &str, span: Span) {\n     for (i, c) in string.char_indices() {\n         if c == '\\u{200B}' {\n             str_pos_lint(cx, ZERO_WIDTH_SPACE, span, i,\n-                         \"zero-width space detected. Consider using `\\\\u{200B}`.\");\n+                         \"zero-width space detected. Consider using `\\\\u{200B}`\");\n         }\n         if c as u32 > 0x7F {\n             str_pos_lint(cx, NON_ASCII_LITERAL, span, i, &format!(\n-                \"literal non-ASCII character detected. Consider using `\\\\u{{{:X}}}`.\", c as u32));\n+                \"literal non-ASCII character detected. Consider using `\\\\u{{{:X}}}`\", c as u32));\n         }\n     }\n }"}, {"sha": "799795becbd6946d13831bfeb7809e74b564d999", "filename": "tests/compile-fail/approx_const.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fapprox_const.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -4,53 +4,53 @@\n #[deny(approx_constant)]\n #[allow(unused)]\n fn main() {\n-    let my_e = 2.7182; //~ERROR\n-    let almost_e = 2.718; //~ERROR\n+    let my_e = 2.7182; //~ERROR approximate value of `f{32, 64}::E` found\n+    let almost_e = 2.718; //~ERROR approximate value of `f{32, 64}::E` found\n     let no_e = 2.71;\n \n-    let my_1_frac_pi = 0.3183; //~ERROR\n+    let my_1_frac_pi = 0.3183; //~ERROR approximate value of `f{32, 64}::FRAC_1_PI` found\n     let no_1_frac_pi = 0.31;\n \n-    let my_frac_1_sqrt_2 = 0.70710678; //~ERROR\n-    let almost_frac_1_sqrt_2 = 0.70711; //~ERROR\n+    let my_frac_1_sqrt_2 = 0.70710678; //~ERROR approximate value of `f{32, 64}::FRAC_1_SQRT_2` found\n+    let almost_frac_1_sqrt_2 = 0.70711; //~ERROR approximate value of `f{32, 64}::FRAC_1_SQRT_2` found\n     let my_frac_1_sqrt_2 = 0.707;\n \n-    let my_frac_2_pi = 0.63661977; //~ERROR\n+    let my_frac_2_pi = 0.63661977; //~ERROR approximate value of `f{32, 64}::FRAC_2_PI` found\n     let no_frac_2_pi = 0.636;\n \n-    let my_frac_2_sq_pi = 1.128379; //~ERROR\n+    let my_frac_2_sq_pi = 1.128379; //~ERROR approximate value of `f{32, 64}::FRAC_2_SQRT_PI` found\n     let no_frac_2_sq_pi = 1.128;\n \n-    let my_frac_2_pi = 1.57079632679; //~ERROR\n-    let no_frac_2_pi = 1.5705;\n+    let my_frac_pi_2 = 1.57079632679; //~ERROR approximate value of `f{32, 64}::FRAC_PI_2` found\n+    let no_frac_pi_2 = 1.5705;\n \n-    let my_frac_3_pi = 1.04719755119; //~ERROR\n-    let no_frac_3_pi = 1.047;\n+    let my_frac_pi_3 = 1.04719755119; //~ERROR approximate value of `f{32, 64}::FRAC_PI_3` found\n+    let no_frac_pi_3 = 1.047;\n \n-    let my_frac_4_pi = 0.785398163397; //~ERROR\n-    let no_frac_4_pi = 0.785;\n+    let my_frac_pi_4 = 0.785398163397; //~ERROR approximate value of `f{32, 64}::FRAC_PI_4` found\n+    let no_frac_pi_4 = 0.785;\n \n-    let my_frac_6_pi = 0.523598775598; //~ERROR\n-    let no_frac_6_pi = 0.523;\n+    let my_frac_pi_6 = 0.523598775598; //~ERROR approximate value of `f{32, 64}::FRAC_PI_6` found\n+    let no_frac_pi_6 = 0.523;\n \n-    let my_frac_8_pi = 0.3926990816987; //~ERROR\n-    let no_frac_8_pi = 0.392;\n+    let my_frac_pi_8 = 0.3926990816987; //~ERROR approximate value of `f{32, 64}::FRAC_PI_8` found\n+    let no_frac_pi_8 = 0.392;\n \n-    let my_ln_10 = 2.302585092994046; //~ERROR\n+    let my_ln_10 = 2.302585092994046; //~ERROR approximate value of `f{32, 64}::LN_10` found\n     let no_ln_10 = 2.303;\n \n-    let my_ln_2 = 0.6931471805599453; //~ERROR\n+    let my_ln_2 = 0.6931471805599453; //~ERROR approximate value of `f{32, 64}::LN_2` found\n     let no_ln_2 = 0.693;\n \n-    let my_log10_e = 0.43429448190325176; //~ERROR\n+    let my_log10_e = 0.43429448190325176; //~ERROR approximate value of `f{32, 64}::LOG10_E` found\n     let no_log10_e = 0.434;\n \n-    let my_log2_e = 1.4426950408889634; //~ERROR\n+    let my_log2_e = 1.4426950408889634; //~ERROR approximate value of `f{32, 64}::LOG2_E` found\n     let no_log2_e = 1.442;\n \n-    let my_pi = 3.1415; //~ERROR\n+    let my_pi = 3.1415; //~ERROR approximate value of `f{32, 64}::PI` found\n     let almost_pi = 3.141;\n \n-    let my_sq2 = 1.4142; //~ERROR\n+    let my_sq2 = 1.4142; //~ERROR approximate value of `f{32, 64}::SQRT_2` found\n     let no_sq2 = 1.414;\n }"}, {"sha": "bcbfe99e42ec24ba96223fd1db02965a85819200", "filename": "tests/compile-fail/bit_masks.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbit_masks.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -12,30 +12,30 @@ fn main() {\n     x & 0 == 0; //~ERROR &-masking with zero\n     x & 1 == 1; //ok, distinguishes bit 0\n     x & 1 == 0; //ok, compared with zero\n-    x & 2 == 1; //~ERROR\n+    x & 2 == 1; //~ERROR incompatible bit mask\n     x | 0 == 0; //ok, equals x == 0 (maybe warn?)\n     x | 1 == 3; //ok, equals x == 2 || x == 3\n     x | 3 == 3; //ok, equals x <= 3\n-    x | 3 == 2; //~ERROR\n+    x | 3 == 2; //~ERROR incompatible bit mask\n \n-    x & 1 > 1; //~ERROR\n+    x & 1 > 1; //~ERROR incompatible bit mask\n     x & 2 > 1; // ok, distinguishes x & 2 == 2 from x & 2 == 0\n     x & 2 < 1; // ok, distinguishes x & 2 == 2 from x & 2 == 0\n     x | 1 > 1; // ok (if a bit silly), equals x > 1\n-    x | 2 > 1; //~ERROR\n+    x | 2 > 1; //~ERROR incompatible bit mask\n     x | 2 <= 2; // ok (if a bit silly), equals x <= 2\n \n     // this also now works with constants\n-    x & THREE_BITS == 8; //~ERROR\n-    x | EVEN_MORE_REDIRECTION < 7; //~ERROR\n+    x & THREE_BITS == 8; //~ERROR incompatible bit mask\n+    x | EVEN_MORE_REDIRECTION < 7; //~ERROR incompatible bit mask\n \n-    0 & x == 0; //~ERROR\n+    0 & x == 0; //~ERROR &-masking with zero\n     1 | x > 1;\n \n     // and should now also match uncommon usage\n-    1 < 2 | x; //~ERROR\n-    2 == 3 | x; //~ERROR\n-    1 == x & 2; //~ERROR\n+    1 < 2 | x; //~ERROR incompatible bit mask\n+    2 == 3 | x; //~ERROR incompatible bit mask\n+    1 == x & 2; //~ERROR incompatible bit mask\n \n     x | 1 > 2; // no error, because we allowed ineffective bit masks\n     ineffective();\n@@ -46,8 +46,8 @@ fn main() {\n fn ineffective() {\n     let x = 5;\n \n-    x | 1 > 2; //~ERROR\n-    x | 1 < 3; //~ERROR\n-    x | 1 <= 3; //~ERROR\n-    x | 1 >= 2; //~ERROR\n+    x | 1 > 2; //~ERROR ineffective bit mask\n+    x | 1 < 3; //~ERROR ineffective bit mask\n+    x | 1 <= 3; //~ERROR ineffective bit mask\n+    x | 1 >= 2; //~ERROR ineffective bit mask\n }"}, {"sha": "b2369e164fff6369da3241a753ccf24955e02007", "filename": "tests/compile-fail/cmp_nan.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_nan.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -5,18 +5,18 @@\n #[allow(float_cmp)]\n fn main() {\n     let x = 5f32;\n-    x == std::f32::NAN; //~ERROR\n-    x != std::f32::NAN; //~ERROR\n-    x < std::f32::NAN; //~ERROR\n-    x > std::f32::NAN; //~ERROR\n-    x <= std::f32::NAN; //~ERROR\n-    x >= std::f32::NAN; //~ERROR\n+    x == std::f32::NAN; //~ERROR doomed comparison with NAN\n+    x != std::f32::NAN; //~ERROR doomed comparison with NAN\n+    x < std::f32::NAN;  //~ERROR doomed comparison with NAN\n+    x > std::f32::NAN;  //~ERROR doomed comparison with NAN\n+    x <= std::f32::NAN; //~ERROR doomed comparison with NAN\n+    x >= std::f32::NAN; //~ERROR doomed comparison with NAN\n \n     let y = 0f64;\n-    y == std::f64::NAN; //~ERROR\n-    y != std::f64::NAN; //~ERROR\n-    y < std::f64::NAN; //~ERROR\n-    y > std::f64::NAN; //~ERROR\n-    y <= std::f64::NAN; //~ERROR\n-    y >= std::f64::NAN; //~ERROR\n+    y == std::f64::NAN; //~ERROR doomed comparison with NAN\n+    y != std::f64::NAN; //~ERROR doomed comparison with NAN\n+    y < std::f64::NAN;  //~ERROR doomed comparison with NAN\n+    y > std::f64::NAN;  //~ERROR doomed comparison with NAN\n+    y <= std::f64::NAN; //~ERROR doomed comparison with NAN\n+    y >= std::f64::NAN; //~ERROR doomed comparison with NAN\n }"}, {"sha": "298132013a95ceca8409c95fdcbe7687f6c71c79", "filename": "tests/compile-fail/eq_op.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feq_op.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -9,29 +9,29 @@ fn id<X>(x: X) -> X {\n #[allow(identity_op)]\n fn main() {\n     // simple values and comparisons\n-    1 == 1; //~ERROR\n-    \"no\" == \"no\"; //~ERROR\n+    1 == 1; //~ERROR equal expressions\n+    \"no\" == \"no\"; //~ERROR equal expressions\n     // even though I agree that no means no ;-)\n-    false != false; //~ERROR\n-    1.5 < 1.5; //~ERROR\n-    1u64 >= 1u64; //~ERROR\n+    false != false; //~ERROR equal expressions\n+    1.5 < 1.5; //~ERROR equal expressions\n+    1u64 >= 1u64; //~ERROR equal expressions\n \n     // casts, methods, parenthesis\n-    (1 as u64) & (1 as u64); //~ERROR\n-    1 ^ ((((((1)))))); //~ERROR\n-    id((1)) | id(1); //~ERROR\n+    (1 as u64) & (1 as u64); //~ERROR equal expressions\n+    1 ^ ((((((1)))))); //~ERROR equal expressions\n+    id((1)) | id(1); //~ERROR equal expressions\n \n     // unary and binary operators\n-    (-(2) < -(2));  //~ERROR\n+    (-(2) < -(2));  //~ERROR equal expressions\n     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n-          //~^ ERROR\n-                    //~^^ ERROR\n-                               //~^^^ ERROR\n-    (1 * 2) + (3 * 4) == 1 * 2 + 3 * 4; //~ERROR\n+          //~^ ERROR equal expressions\n+                    //~^^ ERROR equal expressions\n+                               //~^^^ ERROR equal expressions\n+    (1 * 2) + (3 * 4) == 1 * 2 + 3 * 4; //~ERROR equal expressions\n \n     // various other things\n-    ([1] != [1]); //~ERROR\n-    ((1, 2) != (1, 2)); //~ERROR\n-    [1].len() == [1].len(); //~ERROR\n+    ([1] != [1]); //~ERROR equal expressions\n+    ((1, 2) != (1, 2)); //~ERROR equal expressions\n+    [1].len() == [1].len(); //~ERROR equal expressions\n     vec![1, 2, 3] == vec![1, 2, 3]; //no error yet, as we don't match macros\n }"}, {"sha": "419e500d0fcf26e3200f2a9bd6ba88ae240e0ba5", "filename": "tests/compile-fail/float_cmp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffloat_cmp.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -13,20 +13,20 @@ fn twice<T>(x : T) -> T where T : Add<T, Output = T>, T : Copy {\n #[deny(float_cmp)]\n #[allow(unused)]\n fn main() {\n-    ZERO == 0f32; //~ERROR\n-    ZERO == 0.0; //~ERROR\n-    ZERO + ZERO != 1.0; //~ERROR\n+    ZERO == 0f32; //~ERROR ==-comparison of f32 or f64\n+    ZERO == 0.0; //~ERROR ==-comparison of f32 or f64\n+    ZERO + ZERO != 1.0; //~ERROR !=-comparison of f32 or f64\n \n     ONE != 0.0; //~ERROR\n-    twice(ONE) != ONE; //~ERROR\n-    ONE as f64 != 0.0; //~ERROR\n+    twice(ONE) != ONE; //~ERROR !=-comparison of f32 or f64\n+    ONE as f64 != 0.0; //~ERROR !=-comparison of f32 or f64\n \n     let x : f64 = 1.0;\n \n-    x == 1.0; //~ERROR\n-    x != 0f64; //~ERROR\n+    x == 1.0; //~ERROR ==-comparison of f32 or f64\n+    x != 0f64; //~ERROR !=-comparison of f32 or f64\n \n-    twice(x) != twice(ONE as f64); //~ERROR\n+    twice(x) != twice(ONE as f64); //~ERROR !=-comparison of f32 or f64\n \n     x < 0.0;\n     x > 0.0;"}, {"sha": "987bada2eceba6160ad13779f3a7f50ac75225c2", "filename": "tests/compile-fail/identity_op.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fidentity_op.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -9,16 +9,16 @@ const ZERO : i64 = 0;\n fn main() {\n     let x = 0;\n \n-    x + 0; //~ERROR\n-    0 + x; //~ERROR\n-    x - ZERO; //~ERROR\n-    x | (0); //~ERROR\n-    ((ZERO)) | x; //~ERROR\n+    x + 0;        //~ERROR the operation is ineffective\n+    0 + x;        //~ERROR the operation is ineffective\n+    x - ZERO;     //~ERROR the operation is ineffective\n+    x | (0);      //~ERROR the operation is ineffective\n+    ((ZERO)) | x; //~ERROR the operation is ineffective\n \n-    x * 1; //~ERROR\n-    1 * x; //~ERROR\n-    x / ONE; //~ERROR\n+    x * 1;        //~ERROR the operation is ineffective\n+    1 * x;        //~ERROR the operation is ineffective\n+    x / ONE;      //~ERROR the operation is ineffective\n \n-    x & NEG_ONE; //~ERROR\n-    -1 & x; //~ERROR\n+    x & NEG_ONE;  //~ERROR the operation is ineffective\n+    -1 & x;       //~ERROR the operation is ineffective\n }"}, {"sha": "082378d21e2596e94275f0cf70342fe64c95fb82", "filename": "tests/compile-fail/let_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Flet_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Flet_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flet_return.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -6,7 +6,7 @@\n fn test() -> i32 {\n     let _y = 0; // no warning\n     let x = 5;   //~NOTE\n-    x            //~ERROR:\n+    x            //~ERROR returning the result of a let binding\n }\n \n fn test_nowarn_1() -> i32 {"}, {"sha": "f06a10bfe13d4b1afcaf63f922350977fa628809", "filename": "tests/compile-fail/let_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flet_unit.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -8,6 +8,6 @@ fn main() {\n     let _y = 1;   // this is fine\n     let _z = ((), 1);  // this as well\n     if true {\n-        let _a = ();  //~ERROR\n+        let _a = ();  //~ERROR this let-binding has unit value\n     }\n }"}, {"sha": "91d3b72de8409922255ca348d1377a7d71664fed", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -5,11 +5,11 @@\n #[deny(str_to_string, string_to_string)]\n fn main() {\n     let opt = Some(0);\n-    let _ = opt.unwrap();  //~ERROR\n+    let _ = opt.unwrap();  //~ERROR used unwrap() on an Option\n \n     let res: Result<i32, ()> = Ok(0);\n-    let _ = res.unwrap();  //~ERROR\n+    let _ = res.unwrap();  //~ERROR used unwrap() on a Result\n \n-    let string = \"str\".to_string();  //~ERROR\n-    let _again = string.to_string();  //~ERROR\n+    let string = \"str\".to_string();  //~ERROR `str.to_owned()` is faster\n+    let _again = string.to_string();  //~ERROR `String.to_string()` is a no-op\n }"}, {"sha": "8aa47769539418a4aeffc583e618c5549389eda8", "filename": "tests/compile-fail/mut_mut.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_mut.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -5,7 +5,7 @@\n //extern crate regex;\n \n #[deny(mut_mut)]\n-fn fun(x : &mut &mut u32) -> bool { //~ERROR\n+fn fun(x : &mut &mut u32) -> bool { //~ERROR generally you want to avoid `&mut &mut\n     **x > 0\n }\n \n@@ -16,19 +16,19 @@ macro_rules! mut_ptr {\n #[deny(mut_mut)]\n #[allow(unused_mut, unused_variables)]\n fn main() {\n-    let mut x = &mut &mut 1u32; //~ERROR\n+    let mut x = &mut &mut 1u32; //~ERROR generally you want to avoid `&mut &mut\n     {\n-        let mut y = &mut x; //~ERROR\n+        let mut y = &mut x; //~ERROR this expression mutably borrows a mutable reference\n     }\n \n     if fun(x) {\n         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n-                 //~^ ERROR\n-                      //~^^ ERROR\n-                                      //~^^^ ERROR\n-                                           //~^^^^ ERROR\n+                 //~^ ERROR generally you want to avoid `&mut &mut\n+                      //~^^ ERROR generally you want to avoid `&mut &mut\n+                                      //~^^^ ERROR generally you want to avoid `&mut &mut\n+                                           //~^^^^ ERROR generally you want to avoid `&mut &mut\n         ***y + **x;\n     }\n \n-    let mut z = mut_ptr!(&mut 3u32); //~ERROR\n+    let mut z = mut_ptr!(&mut 3u32); //~ERROR generally you want to avoid `&mut &mut\n }"}, {"sha": "6016f79ab0389579701c881067c3274736196d79", "filename": "tests/compile-fail/needless_bool.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_bool.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -4,9 +4,9 @@\n #[deny(needless_bool)]\n fn main() {\n     let x = true;\n-    if x { true } else { true }; //~ERROR\n-    if x { false } else { false }; //~ERROR\n-    if x { true } else { false }; //~ERROR\n-    if x { false } else { true }; //~ERROR\n+    if x { true } else { true }; //~ERROR your if-then-else expression will always return true\n+    if x { false } else { false }; //~ERROR your if-then-else expression will always return false\n+    if x { true } else { false }; //~ERROR you can reduce your if statement to its predicate\n+    if x { false } else { true }; //~ERROR you can reduce your if statement to `!` + its predicate\n     if x { x } else { false }; // would also be questionable, but we don't catch this yet\n }"}, {"sha": "e0012942906abe1592397fa2798eb0a56d4f6f8b", "filename": "tests/compile-fail/needless_return.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_return.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -8,35 +8,35 @@ fn test_end_of_fn() -> bool {\n         // no error!\n         return true;\n     }\n-    return true;           //~ERROR\n+    return true;           //~ERROR unneeded return statement\n }\n \n fn test_no_semicolon() -> bool {\n-    return true            //~ERROR\n+    return true            //~ERROR unneeded return statement\n }\n \n fn test_if_block() -> bool {\n     if true {\n-        return true;       //~ERROR\n+        return true;       //~ERROR unneeded return statement\n     } else {\n-        return false;      //~ERROR\n+        return false;      //~ERROR unneeded return statement\n     }\n }\n \n fn test_match(x: bool) -> bool {\n     match x {\n         true => {\n-            return false;  //~ERROR\n+            return false;  //~ERROR unneeded return statement\n         }\n         false => {\n-            return true    //~ERROR\n+            return true    //~ERROR unneeded return statement\n         }\n     }\n }\n \n fn test_closure() {\n     let _ = || {\n-        return true;       //~ERROR\n+        return true;       //~ERROR unneeded return statement\n     };\n }\n "}, {"sha": "4d57f119479413c93ba1b148b23737ce9056f7b0", "filename": "tests/compile-fail/precedence.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprecedence.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -4,12 +4,12 @@\n #[deny(precedence)]\n #[allow(eq_op)]\n fn main() {\n-    format!(\"{} vs. {}\", 1 << 2 + 3, (1 << 2) + 3); //~ERROR\n-    format!(\"{} vs. {}\", 1 + 2 << 3, 1 + (2 << 3)); //~ERROR\n-    format!(\"{} vs. {}\", 4 >> 1 + 1, (4 >> 1) + 1); //~ERROR\n-    format!(\"{} vs. {}\", 1 + 3 >> 2, 1 + (3 >> 2)); //~ERROR\n-    format!(\"{} vs. {}\", 1 ^ 1 - 1, (1 ^ 1) - 1);   //~ERROR\n-    format!(\"{} vs. {}\", 3 | 2 - 1, (3 | 2) - 1);   //~ERROR\n-    format!(\"{} vs. {}\", 3 & 5 - 2, (3 & 5) - 2);   //~ERROR\n+    format!(\"{} vs. {}\", 1 << 2 + 3, (1 << 2) + 3); //~ERROR operator precedence can trip\n+    format!(\"{} vs. {}\", 1 + 2 << 3, 1 + (2 << 3)); //~ERROR operator precedence can trip\n+    format!(\"{} vs. {}\", 4 >> 1 + 1, (4 >> 1) + 1); //~ERROR operator precedence can trip\n+    format!(\"{} vs. {}\", 1 + 3 >> 2, 1 + (3 >> 2)); //~ERROR operator precedence can trip\n+    format!(\"{} vs. {}\", 1 ^ 1 - 1, (1 ^ 1) - 1);   //~ERROR operator precedence can trip\n+    format!(\"{} vs. {}\", 3 | 2 - 1, (3 | 2) - 1);   //~ERROR operator precedence can trip\n+    format!(\"{} vs. {}\", 3 & 5 - 2, (3 & 5) - 2);   //~ERROR operator precedence can trip\n \n }"}, {"sha": "d4b6d22608f81a4326fbe97f334a1b025c63f21a", "filename": "tests/compile-fail/ptr_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfa02938d03cf5a9994b014937aacecb0bc99c6/tests%2Fcompile-fail%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_arg.rs?ref=8dfa02938d03cf5a9994b014937aacecb0bc99c6", "patch": "@@ -3,13 +3,13 @@\n \n #[deny(ptr_arg)]\n #[allow(unused)]\n-fn do_vec(x: &Vec<i64>) { //~ERROR: writing `&Vec<_>` instead of `&[_]`\n+fn do_vec(x: &Vec<i64>) { //~ERROR writing `&Vec<_>` instead of `&[_]`\n     //Nothing here\n }\n \n #[deny(ptr_arg)]\n #[allow(unused)]\n-fn do_str(x: &String) { //~ERROR\n+fn do_str(x: &String) { //~ERROR writing `&String` instead of `&str`\n     //Nothing here either\n }\n "}]}