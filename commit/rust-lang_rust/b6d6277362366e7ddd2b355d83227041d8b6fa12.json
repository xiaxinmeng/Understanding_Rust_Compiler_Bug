{"sha": "b6d6277362366e7ddd2b355d83227041d8b6fa12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZDYyNzczNjIzNjZlN2RkZDJiMzU1ZDgzMjI3MDQxZDhiNmZhMTI=", "commit": {"author": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-10T01:10:25Z"}, "committer": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-19T21:12:00Z"}, "message": "Completition for type name? #3418\n\nIterate through TupleStructPat's until a MatchArm if\none exists. Store in a new is_pat_bind_and_path bool\nand allow the `complete_scope` to find matches.\n\nAdded some tests to ensure it works in simple and nested cases.", "tree": {"sha": "fd90520d229f62aa44d1cfb817c3bf49b8566956", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd90520d229f62aa44d1cfb817c3bf49b8566956"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6d6277362366e7ddd2b355d83227041d8b6fa12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d6277362366e7ddd2b355d83227041d8b6fa12", "html_url": "https://github.com/rust-lang/rust/commit/b6d6277362366e7ddd2b355d83227041d8b6fa12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6d6277362366e7ddd2b355d83227041d8b6fa12/comments", "author": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ba03c6995015b3143a417ed07437f0c9028a97d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba03c6995015b3143a417ed07437f0c9028a97d", "html_url": "https://github.com/rust-lang/rust/commit/1ba03c6995015b3143a417ed07437f0c9028a97d"}], "stats": {"total": 123, "additions": 120, "deletions": 3}, "files": [{"sha": "82842e7e30e499d1ce727b31b4711cb99daa3541", "filename": "crates/ra_ide/src/completion/complete_scope.rs", "status": "modified", "additions": 106, "deletions": 1, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/b6d6277362366e7ddd2b355d83227041d8b6fa12/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d6277362366e7ddd2b355d83227041d8b6fa12/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=b6d6277362366e7ddd2b355d83227041d8b6fa12", "patch": "@@ -3,7 +3,7 @@\n use crate::completion::{CompletionContext, Completions};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_trivial_path {\n+    if !ctx.is_trivial_path && !ctx.is_pat_binding_and_path {\n         return;\n     }\n \n@@ -20,6 +20,111 @@ mod tests {\n         do_completion(ra_fixture, CompletionKind::Reference)\n     }\n \n+    #[test]\n+    fn nested_bind_pat_and_path() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                enum First {\n+                    A,\n+                    B,\n+                }\n+                enum Second {\n+                    A(First),\n+                    B(First),\n+                }\n+                fn quux(x: Option<Option<Second>>>) {\n+                    match x {\n+                        None => (),\n+                        Some(Some(Second(Fi<|>))) => (),\n+                    }\n+                }\n+                \"\n+            ),\n+            @r###\"\n+            [\n+                CompletionItem {\n+                    label: \"First\",\n+                    source_range: [363; 365),\n+                    delete: [363; 365),\n+                    insert: \"First\",\n+                    kind: Enum,\n+                },\n+                CompletionItem {\n+                    label: \"Second\",\n+                    source_range: [363; 365),\n+                    delete: [363; 365),\n+                    insert: \"Second\",\n+                    kind: Enum,\n+                },\n+                CompletionItem {\n+                    label: \"quux(\u2026)\",\n+                    source_range: [363; 365),\n+                    delete: [363; 365),\n+                    insert: \"quux(${1:x})$0\",\n+                    kind: Function,\n+                    lookup: \"quux\",\n+                    detail: \"fn quux(x: Option<Option<Second>>)\",\n+                },\n+            ]\n+            \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn bind_pat_and_path() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                enum Enum {\n+                    A,\n+                    B,\n+                }\n+                fn quux(x: Option<Enum>) {\n+                    match x {\n+                        None => (),\n+                        Some(en<|>) => (),\n+                    }\n+                }\n+                \"\n+            ),\n+            @r###\"\n+            [\n+                CompletionItem {\n+                    label: \"Enum\",\n+                    source_range: [231; 233),\n+                    delete: [231; 233),\n+                    insert: \"Enum\",\n+                    kind: Enum,\n+                },\n+                CompletionItem {\n+                    label: \"None\",\n+                    source_range: [231; 233),\n+                    delete: [231; 233),\n+                    insert: \"None\",\n+                    kind: Binding,\n+                },\n+                CompletionItem {\n+                    label: \"quux(\u2026)\",\n+                    source_range: [231; 233),\n+                    delete: [231; 233),\n+                    insert: \"quux(${1:x})$0\",\n+                    kind: Function,\n+                    lookup: \"quux\",\n+                    detail: \"fn quux(x: Option<Enum>)\",\n+                },\n+                CompletionItem {\n+                    label: \"x\",\n+                    source_range: [231; 233),\n+                    delete: [231; 233),\n+                    insert: \"x\",\n+                    kind: Binding,\n+                },\n+            ]\n+            \"###\n+        );\n+    }\n+\n     #[test]\n     fn completes_bindings_from_let() {\n         assert_debug_snapshot!("}, {"sha": "d867ff6b26bf713422316e7aed36e251d772b3d8", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6d6277362366e7ddd2b355d83227041d8b6fa12/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d6277362366e7ddd2b355d83227041d8b6fa12/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=b6d6277362366e7ddd2b355d83227041d8b6fa12", "patch": "@@ -36,6 +36,9 @@ pub(crate) struct CompletionContext<'a> {\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n     pub(super) is_pat_binding: bool,\n+    // A bind battern which may also be part of a path.\n+    // if let Some(En<|>) = Some(Enum::A)\n+    pub(super) is_pat_binding_and_path: bool,\n     /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n     pub(super) is_trivial_path: bool,\n     /// If not a trivial path, the prefix (qualifier).\n@@ -95,6 +98,7 @@ impl<'a> CompletionContext<'a> {\n             impl_def: None,\n             is_param: false,\n             is_pat_binding: false,\n+            is_pat_binding_and_path: false,\n             is_trivial_path: false,\n             path_prefix: None,\n             after_if: false,\n@@ -186,12 +190,20 @@ impl<'a> CompletionContext<'a> {\n         // suggest declaration names, see `CompletionKind::Magic`.\n         if let Some(name) = find_node_at_offset::<ast::Name>(&file_with_fake_ident, offset) {\n             if let Some(bind_pat) = name.syntax().ancestors().find_map(ast::BindPat::cast) {\n-                let parent = bind_pat.syntax().parent();\n+                let mut parent = bind_pat.syntax().parent();\n                 if parent.clone().and_then(ast::MatchArm::cast).is_some()\n-                    || parent.and_then(ast::Condition::cast).is_some()\n+                    || parent.clone().and_then(ast::Condition::cast).is_some()\n                 {\n                     self.is_pat_binding = true;\n                 }\n+\n+                while let Some(_) = parent.clone().and_then(ast::TupleStructPat::cast) {\n+                    parent = parent.and_then(|p| p.parent());\n+                    if parent.clone().and_then(ast::MatchArm::cast).is_some() {\n+                        self.is_pat_binding_and_path = true;\n+                        break;\n+                    }\n+                }\n             }\n             if is_node::<ast::Param>(name.syntax()) {\n                 self.is_param = true;"}]}