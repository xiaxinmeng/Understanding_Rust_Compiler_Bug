{"sha": "9ceb9bb20324630380153c1db5aeb56a433ab8d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZWI5YmIyMDMyNDYzMDM4MDE1M2MxZGI1YWViNTZhNDMzYWI4ZDk=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-06-02T20:35:31Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-06-11T16:33:42Z"}, "message": "Move copying of self-contained objects to new function", "tree": {"sha": "a4a3f1afcb8e41e474132f8b36a0d7348dd847d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4a3f1afcb8e41e474132f8b36a0d7348dd847d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ceb9bb20324630380153c1db5aeb56a433ab8d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ceb9bb20324630380153c1db5aeb56a433ab8d9", "html_url": "https://github.com/rust-lang/rust/commit/9ceb9bb20324630380153c1db5aeb56a433ab8d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ceb9bb20324630380153c1db5aeb56a433ab8d9/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50c0192c64241d723066add22c53d472e2b9cba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/50c0192c64241d723066add22c53d472e2b9cba9", "html_url": "https://github.com/rust-lang/rust/commit/50c0192c64241d723066add22c53d472e2b9cba9"}], "stats": {"total": 88, "additions": 63, "deletions": 25}, "files": [{"sha": "56d72d72b6109a1d3f74e210a79b202c07781aba", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 63, "deletions": 25, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/9ceb9bb20324630380153c1db5aeb56a433ab8d9/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ceb9bb20324630380153c1db5aeb56a433ab8d9/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=9ceb9bb20324630380153c1db5aeb56a433ab8d9", "patch": "@@ -74,6 +74,7 @@ impl Step for Std {\n             // Even if we're not building std this stage, the new sysroot must\n             // still contain the third party objects needed by various targets.\n             copy_third_party_objects(builder, &compiler, target);\n+            copy_self_contained_objects(builder, &compiler, target);\n \n             builder.ensure(StdLink {\n                 compiler: compiler_to_use,\n@@ -84,6 +85,7 @@ impl Step for Std {\n         }\n \n         target_deps.extend(copy_third_party_objects(builder, &compiler, target).into_iter());\n+        target_deps.extend(copy_self_contained_objects(builder, &compiler, target));\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n         std_cargo(builder, target, compiler.stage, &mut cargo);\n@@ -109,39 +111,28 @@ impl Step for Std {\n     }\n }\n \n+fn copy_and_stamp(\n+    builder: &Builder<'_>,\n+    libdir: &Path,\n+    sourcedir: &Path,\n+    name: &str,\n+    target_deps: &mut Vec<PathBuf>,\n+) {\n+    let target = libdir.join(name);\n+    builder.copy(&sourcedir.join(name), &target);\n+\n+    target_deps.push((target, dependency_type));\n+}\n+\n /// Copies third party objects needed by various targets.\n fn copy_third_party_objects(\n     builder: &Builder<'_>,\n     compiler: &Compiler,\n     target: Interned<String>,\n ) -> Vec<PathBuf> {\n     let libdir = builder.sysroot_libdir(*compiler, target);\n-\n     let mut target_deps = vec![];\n \n-    let mut copy_and_stamp = |sourcedir: &Path, name: &str| {\n-        let target = libdir.join(name);\n-        builder.copy(&sourcedir.join(name), &target);\n-        target_deps.push(target);\n-    };\n-\n-    // Copies the CRT objects.\n-    //\n-    // rustc historically provides a more self-contained installation for musl targets\n-    // not requiring the presence of a native musl toolchain. For example, it can fall back\n-    // to using gcc from a glibc-targeting toolchain for linking.\n-    // To do that we have to distribute musl startup objects as a part of Rust toolchain\n-    // and link with them manually in the self-contained mode.\n-    if target.contains(\"musl\") {\n-        let srcdir = builder.musl_root(target).unwrap().join(\"lib\");\n-        for &obj in &[\"crt1.o\", \"Scrt1.o\", \"rcrt1.o\", \"crti.o\", \"crtn.o\"] {\n-            copy_and_stamp(&srcdir, obj);\n-        }\n-    } else if target.ends_with(\"-wasi\") {\n-        let srcdir = builder.wasi_root(target).unwrap().join(\"lib/wasm32-wasi\");\n-        copy_and_stamp(&srcdir, \"crt1.o\");\n-    }\n-\n     // Copies libunwind.a compiled to be linked with x86_64-fortanix-unknown-sgx.\n     //\n     // This target needs to be linked to Fortanix's port of llvm's libunwind.\n@@ -151,7 +142,13 @@ fn copy_third_party_objects(\n         let src_path_env = \"X86_FORTANIX_SGX_LIBS\";\n         let src =\n             env::var(src_path_env).unwrap_or_else(|_| panic!(\"{} not found in env\", src_path_env));\n-        copy_and_stamp(Path::new(&src), \"libunwind.a\");\n+        copy_and_stamp(\n+            builder,\n+            &*libdir,\n+            Path::new(&src),\n+            \"libunwind.a\",\n+            &mut target_deps,\n+        );\n     }\n \n     if builder.config.sanitizers && compiler.stage != 0 {\n@@ -163,6 +160,47 @@ fn copy_third_party_objects(\n     target_deps\n }\n \n+/// Copies third party objects needed by various targets for self-contained linkage.\n+fn copy_self_contained_objects(\n+    builder: &Builder<'_>,\n+    compiler: &Compiler,\n+    target: Interned<String>,\n+) -> Vec<PathBuf> {\n+    let libdir = builder.sysroot_libdir(*compiler, target);\n+    let mut target_deps = vec![];\n+\n+    // Copies the CRT objects.\n+    //\n+    // rustc historically provides a more self-contained installation for musl targets\n+    // not requiring the presence of a native musl toolchain. For example, it can fall back\n+    // to using gcc from a glibc-targeting toolchain for linking.\n+    // To do that we have to distribute musl startup objects as a part of Rust toolchain\n+    // and link with them manually in the self-contained mode.\n+    if target.contains(\"musl\") {\n+        let srcdir = builder.musl_root(target).unwrap().join(\"lib\");\n+        for &obj in &[\"crt1.o\", \"Scrt1.o\", \"rcrt1.o\", \"crti.o\", \"crtn.o\"] {\n+            copy_and_stamp(\n+                builder,\n+                &libdir_self_contained,\n+                &srcdir,\n+                obj,\n+                &mut target_deps,\n+            );\n+        }\n+    } else if target.ends_with(\"-wasi\") {\n+        let srcdir = builder.wasi_root(target).unwrap().join(\"lib/wasm32-wasi\");\n+        copy_and_stamp(\n+            builder,\n+            &libdir_self_contained,\n+            &srcdir,\n+            \"crt1.o\",\n+            &mut target_deps,\n+        );\n+    }\n+\n+    target_deps\n+}\n+\n /// Configure cargo to compile the standard library, adding appropriate env vars\n /// and such.\n pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, stage: u32, cargo: &mut Cargo) {"}]}