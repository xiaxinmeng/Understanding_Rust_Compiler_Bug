{"sha": "adb7fc6283711c881186ca85bb9ac3bb8add099b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYjdmYzYyODM3MTFjODgxMTg2Y2E4NWJiOWFjM2JiOGFkZDA5OWI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-30T21:41:57Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:30Z"}, "message": "Fix tools", "tree": {"sha": "62c1064460d01fa04c535cbe388e9f94294986a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62c1064460d01fa04c535cbe388e9f94294986a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adb7fc6283711c881186ca85bb9ac3bb8add099b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adb7fc6283711c881186ca85bb9ac3bb8add099b", "html_url": "https://github.com/rust-lang/rust/commit/adb7fc6283711c881186ca85bb9ac3bb8add099b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adb7fc6283711c881186ca85bb9ac3bb8add099b/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22c5e0c34760b5d8f8a3c815f01ca2ed20d4ceeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/22c5e0c34760b5d8f8a3c815f01ca2ed20d4ceeb", "html_url": "https://github.com/rust-lang/rust/commit/22c5e0c34760b5d8f8a3c815f01ca2ed20d4ceeb"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "d2a322e1223c660c6ff0b5977769f0b71ee76750", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/adb7fc6283711c881186ca85bb9ac3bb8add099b/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb7fc6283711c881186ca85bb9ac3bb8add099b/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=adb7fc6283711c881186ca85bb9ac3bb8add099b", "patch": "@@ -3,6 +3,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{Opaque, PredicateAtom::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n@@ -62,9 +63,10 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         }\n         let ret_ty = utils::return_ty(cx, hir_id);\n         if let Opaque(id, subst) = *ret_ty.kind() {\n-            let preds = cx.tcx.predicates_of(id).instantiate(cx.tcx, subst);\n+            let preds = cx.tcx.explicit_item_bounds(id);\n             let mut is_future = false;\n-            for p in preds.predicates {\n+            for &(p, _span) in preds {\n+                let p = p.subst(cx.tcx, subst);\n                 if let Some(trait_ref) = p.to_opt_poly_trait_ref() {\n                     if Some(trait_ref.def_id()) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;\n@@ -90,8 +92,13 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                         |db| {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n-                                    infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                    if let Trait(trait_pred, _) = obligation.predicate.skip_binders() {\n+                                    infcx.maybe_note_obligation_cause_for_async_await(\n+                                        db,\n+                                        &obligation,\n+                                    );\n+                                    if let Trait(trait_pred, _) =\n+                                        obligation.predicate.skip_binders()\n+                                    {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "e0651f9ab5d6c7e58b1c2840167ca394c72efb0b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adb7fc6283711c881186ca85bb9ac3bb8add099b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb7fc6283711c881186ca85bb9ac3bb8add099b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=adb7fc6283711c881186ca85bb9ac3bb8add099b", "patch": "@@ -1667,8 +1667,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             // if return type is impl trait, check the associated types\n             if let ty::Opaque(def_id, _) = *ret_ty.kind() {\n                 // one of the associated types must be Self\n-                for &(predicate, _span) in cx.tcx.predicates_of(def_id).predicates {\n-                    if let ty::PredicateAtom::Projection(projection_predicate) = predicate.skip_binders() {\n+                for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n+                    if let ty::PredicateAtom::Projection(projection_predicate) =\n+                        predicate.skip_binders()\n+                    {\n                         // walk the associated type and check for Self\n                         if contains_ty(projection_predicate.ty, self_ty) {\n                             return;"}, {"sha": "247effde19b9c14302805ac6bc14f75fe74f5c94", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adb7fc6283711c881186ca85bb9ac3bb8add099b/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb7fc6283711c881186ca85bb9ac3bb8add099b/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=adb7fc6283711c881186ca85bb9ac3bb8add099b", "patch": "@@ -1285,9 +1285,10 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         },\n         ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n-            for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n+            for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateAtom::Trait(trait_predicate, _) = predicate.skip_binders() {\n-                    if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n+                    if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some()\n+                    {\n                         return true;\n                     }\n                 }"}]}