{"sha": "393ba2731168a22d947edb6f1fadc0644e1a424d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5M2JhMjczMTE2OGEyMmQ5NDdlZGI2ZjFmYWRjMDY0NGUxYTQyNGQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-25T04:23:07Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-25T04:23:07Z"}, "message": "Remove dependency on Itertools", "tree": {"sha": "c3ff1772bd9a86220a752d6499aa8dc40e8785fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3ff1772bd9a86220a752d6499aa8dc40e8785fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/393ba2731168a22d947edb6f1fadc0644e1a424d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/393ba2731168a22d947edb6f1fadc0644e1a424d", "html_url": "https://github.com/rust-lang/rust/commit/393ba2731168a22d947edb6f1fadc0644e1a424d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/393ba2731168a22d947edb6f1fadc0644e1a424d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80f3b3c9c415d55b01446476d2ef2e02ce15ae0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d", "html_url": "https://github.com/rust-lang/rust/commit/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d"}], "stats": {"total": 95, "additions": 33, "deletions": 62}, "files": [{"sha": "4a2e7a3b8433a7f4c1e75fc8bacc9c63fa24bad9", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/393ba2731168a22d947edb6f1fadc0644e1a424d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/393ba2731168a22d947edb6f1fadc0644e1a424d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=393ba2731168a22d947edb6f1fadc0644e1a424d", "patch": "@@ -5,7 +5,6 @@ dependencies = [\n  \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itertools 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -46,11 +45,6 @@ name = \"dtoa\"\n version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"either\"\n-version = \"1.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"env_logger\"\n version = \"0.4.2\"\n@@ -65,14 +59,6 @@ name = \"getopts\"\n version = \"0.2.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"itertools\"\n-version = \"0.5.10\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"either 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"itoa\"\n version = \"0.3.1\"\n@@ -328,10 +314,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1370e9fc2a6ae53aea8b7a5110edbd08836ed87c88736dfabccade1c2b44bff4\"\n \"checksum diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a515461b6c8c08419850ced27bc29e86166dcdcde8fbe76f8b1f0589bb49472\"\n \"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n-\"checksum either 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18785c1ba806c258137c937e44ada9ee7e69a37e3c72077542cd2f069d78562a\"\n \"checksum env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3856f1697098606fc6cb97a93de88ca3f3bc35bb878c725920e6e82ecf05e83\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n-\"checksum itertools 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4833d6978da405305126af4ac88569b5d71ff758581ce5a987dbfa3755f694fc\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum libc 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7eb6b826bfc1fdea7935d46556250d1799b7fe2d9f7951071f4291710665e3e\""}, {"sha": "d3016fbc4907dc939695f8d8b79ff8f312a99700", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/393ba2731168a22d947edb6f1fadc0644e1a424d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/393ba2731168a22d947edb6f1fadc0644e1a424d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=393ba2731168a22d947edb6f1fadc0644e1a424d", "patch": "@@ -33,7 +33,6 @@ syntex_errors = \"0.58\"\n log = \"0.3\"\n env_logger = \"0.4\"\n getopts = \"0.2\"\n-itertools = \"0.5.8\"\n \n [build-dependencies]\n walkdir = \"1.0.3\""}, {"sha": "285263932d37f3a93d78a2caee762426e77e3689", "filename": "src/chains.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/393ba2731168a22d947edb6f1fadc0644e1a424d/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393ba2731168a22d947edb6f1fadc0644e1a424d/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=393ba2731168a22d947edb6f1fadc0644e1a424d", "patch": "@@ -160,9 +160,10 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         .chain(::std::iter::repeat(other_child_shape)\n                    .take(subexpr_list.len() - 1));\n     let iter = subexpr_list.iter().rev().zip(child_shape_iter);\n-    let mut rewrites =\n-        try_opt!(iter.map(|(e, shape)| rewrite_chain_subexpr(e, total_span, context, shape))\n-                     .collect::<Option<Vec<_>>>());\n+    let mut rewrites = try_opt!(iter.map(|(e, shape)| {\n+                                             rewrite_chain_subexpr(e, total_span, context, shape)\n+                                         })\n+                                    .collect::<Option<Vec<_>>>());\n \n     // Total of all items excluding the last.\n     let almost_total = rewrites[..rewrites.len() - 1]"}, {"sha": "88e663403d6d6f9b825e365ffcf38e4aed07e826", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/393ba2731168a22d947edb6f1fadc0644e1a424d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393ba2731168a22d947edb6f1fadc0644e1a424d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=393ba2731168a22d947edb6f1fadc0644e1a424d", "patch": "@@ -22,7 +22,6 @@ use comment::{FindUncommented, contains_comment};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n use config::{Config, IndentStyle, Density, ReturnIndent, BraceStyle, Style, TypeDensity};\n-use itertools::Itertools;\n \n use syntax::{ast, abi, codemap, ptr, symbol};\n use syntax::codemap::{Span, BytePos, mk_sp};\n@@ -1324,8 +1323,8 @@ pub fn rewrite_associated_type(ident: ast::Ident,\n                                                    Shape::legacy(context.config.max_width(),\n                                                                  indent))\n                               })\n-                         .intersperse(Some(joiner.to_string()))\n-                         .collect::<Option<String>>());\n+                         .collect::<Option<Vec<_>>>())\n+                .join(joiner);\n         if bounds.len() > 0 {\n             format!(\": {}\", bound_str)\n         } else {\n@@ -2041,27 +2040,15 @@ fn rewrite_trait_bounds(context: &RewriteContext,\n     let bound_str = try_opt!(bounds\n                                  .iter()\n                                  .map(|ty_bound| ty_bound.rewrite(&context, shape))\n-                                 .intersperse(Some(joiner.to_string()))\n-                                 .collect::<Option<String>>());\n+                                 .collect::<Option<Vec<_>>>())\n+        .join(joiner);\n \n     let mut result = String::new();\n     result.push_str(\": \");\n     result.push_str(&bound_str);\n     Some(result)\n }\n \n-//   fn reflow_list_node_with_rule(\n-//        &self,\n-//        node: &CompoundNode,\n-//        rule: &Rule,\n-//        args: &[Arg],\n-//        shape: &Shape\n-//    ) -> Result<String, ()>\n-//    where\n-//        T: Foo,\n-//    {\n-\n-\n fn rewrite_where_clause_rfc_style(context: &RewriteContext,\n                                   where_clause: &ast::WhereClause,\n                                   shape: Shape,"}, {"sha": "49125e6ff9c343045e4bc474e91993dc6df8ecf1", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/393ba2731168a22d947edb6f1fadc0644e1a424d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393ba2731168a22d947edb6f1fadc0644e1a424d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=393ba2731168a22d947edb6f1fadc0644e1a424d", "patch": "@@ -29,7 +29,6 @@ extern crate unicode_segmentation;\n extern crate regex;\n extern crate diff;\n extern crate term;\n-extern crate itertools;\n \n use errors::{Handler, DiagnosticBuilder};\n use errors::emitter::{ColorConfig, EmitterWriter};"}, {"sha": "c46ed3d88c7695581ad5103da2bfb80aa377ceea", "filename": "src/macros.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/393ba2731168a22d947edb6f1fadc0644e1a424d/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393ba2731168a22d947edb6f1fadc0644e1a424d/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=393ba2731168a22d947edb6f1fadc0644e1a424d", "patch": "@@ -198,13 +198,17 @@ pub fn rewrite_macro(mac: &ast::Mac,\n             } else {\n                 // Format macro invocation as array literal.\n                 let rewrite =\n-                    try_opt!(rewrite_array(expr_vec.iter().map(|x| &**x),\n-                                           mk_sp(context.codemap.span_after(mac.span,\n-                                                                            original_style\n-                                                                                .opener()),\n-                                                 mac.span.hi - BytePos(1)),\n-                                           context,\n-                                           mac_shape));\n+                    try_opt!(rewrite_array(\n+                    expr_vec.iter().map(|x| &**x),\n+                    mk_sp(\n+                        context\n+                            .codemap\n+                            .span_after(mac.span, original_style.opener()),\n+                        mac.span.hi - BytePos(1)\n+                    ),\n+                    context,\n+                    mac_shape\n+                ));\n \n                 Some(format!(\"{}{}\", macro_name, rewrite))\n             }"}, {"sha": "82f68976225772e72fcc00b3383f668f87d2d9df", "filename": "src/types.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/393ba2731168a22d947edb6f1fadc0644e1a424d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393ba2731168a22d947edb6f1fadc0644e1a424d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=393ba2731168a22d947edb6f1fadc0644e1a424d", "patch": "@@ -24,7 +24,6 @@ use rewrite::{Rewrite, RewriteContext};\n use utils::{extra_offset, format_mutability, colon_spaces, wrap_str};\n use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple_type};\n use config::TypeDensity;\n-use itertools::Itertools;\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum PathContext {\n@@ -367,8 +366,8 @@ impl Rewrite for ast::WherePredicate {\n                     let lifetime_str: String = try_opt!(bound_lifetimes\n                                                             .iter()\n                                                             .map(|lt| lt.rewrite(context, shape))\n-                                                            .intersperse(Some(\", \".to_string()))\n-                                                            .collect());\n+                                                            .collect::<Option<Vec<_>>>())\n+                        .join(\", \");\n \n                     let joiner = match context.config.type_punctuation_density() {\n                         TypeDensity::Compressed => \"+\",\n@@ -382,8 +381,8 @@ impl Rewrite for ast::WherePredicate {\n                                                           .map(|ty_bound| {\n                         ty_bound.rewrite(context, Shape::legacy(budget, shape.indent + used_width))\n                     })\n-                                                          .intersperse(Some(joiner.to_string()))\n-                                                          .collect());\n+                                                          .collect::<Option<Vec<_>>>())\n+                        .join(joiner);\n \n                     if context.config.spaces_within_angle_brackets() && lifetime_str.len() > 0 {\n                         format!(\"for< {} > {}{}{}\",\n@@ -406,8 +405,8 @@ impl Rewrite for ast::WherePredicate {\n                                                           .map(|ty_bound| {\n                         ty_bound.rewrite(context, Shape::legacy(budget, shape.indent + used_width))\n                     })\n-                                                          .intersperse(Some(joiner.to_string()))\n-                                                          .collect());\n+                                                          .collect::<Option<Vec<_>>>())\n+                        .join(joiner);\n \n                     format!(\"{}{}{}\", type_str, colon, bounds_str)\n                 }\n@@ -526,8 +525,8 @@ impl Rewrite for ast::TyParam {\n             let bounds: String = try_opt!(self.bounds\n                                               .iter()\n                                               .map(|ty_bound| ty_bound.rewrite(context, shape))\n-                                              .intersperse(Some(joiner.to_string()))\n-                                              .collect());\n+                                              .collect::<Option<Vec<_>>>())\n+                .join(joiner);\n \n             result.push_str(&bounds);\n         }\n@@ -554,8 +553,8 @@ impl Rewrite for ast::PolyTraitRef {\n             let lifetime_str: String = try_opt!(self.bound_lifetimes\n                                                     .iter()\n                                                     .map(|lt| lt.rewrite(context, shape))\n-                                                    .intersperse(Some(\", \".to_string()))\n-                                                    .collect());\n+                                                    .collect::<Option<Vec<_>>>())\n+                .join(\", \");\n \n             // 6 is \"for<> \".len()\n             let extra_offset = lifetime_str.len() + 6;\n@@ -701,8 +700,8 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n             l.rewrite(context,\n                       Shape::legacy(try_opt!(shape.width.checked_sub(6)), shape.indent + 4))\n         })\n-                                      .intersperse(Some(\", \".to_string()))\n-                                      .collect::<Option<String>>()));\n+                                      .collect::<Option<Vec<_>>>())\n+                            .join(\", \"));\n         result.push_str(\"> \");\n     }\n "}, {"sha": "1192608c24a642591f33b4df03e6a70f8e3a822e", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/393ba2731168a22d947edb6f1fadc0644e1a424d/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393ba2731168a22d947edb6f1fadc0644e1a424d/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=393ba2731168a22d947edb6f1fadc0644e1a424d", "patch": "@@ -11,8 +11,6 @@\n use std::borrow::Cow;\n use std::cmp::Ordering;\n \n-use itertools::Itertools;\n-\n use syntax::ast::{self, Visibility, Attribute, MetaItem, MetaItemKind, NestedMetaItem,\n                   NestedMetaItemKind, Path};\n use syntax::codemap::BytePos;\n@@ -44,14 +42,14 @@ pub fn format_visibility(vis: &Visibility) -> Cow<'static, str> {\n         Visibility::Crate(_) => Cow::from(\"pub(crate) \"),\n         Visibility::Restricted { ref path, .. } => {\n             let Path { ref segments, .. } = **path;\n-            let mut segments_iter = segments.iter().map(|seg| seg.identifier.name.as_str());\n+            let mut segments_iter = segments.iter().map(|seg| seg.identifier.name.to_string());\n             if path.is_global() {\n                 segments_iter\n                     .next()\n                     .expect(\"Non-global path in pub(restricted)?\");\n             }\n \n-            Cow::from(format!(\"pub({}) \", segments_iter.join(\"::\")))\n+            Cow::from(format!(\"pub({}) \", segments_iter.collect::<Vec<_>>().join(\"::\")))\n         }\n     }\n }"}]}