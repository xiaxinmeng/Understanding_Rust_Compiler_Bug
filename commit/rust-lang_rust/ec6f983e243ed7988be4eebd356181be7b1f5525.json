{"sha": "ec6f983e243ed7988be4eebd356181be7b1f5525", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNmY5ODNlMjQzZWQ3OTg4YmU0ZWViZDM1NjE4MWJlN2IxZjU1MjU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-13T23:37:02Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-18T19:38:23Z"}, "message": "Rename typarams to param_names\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "405c0844c32a27a48ff3a49683309cb1958bf2c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/405c0844c32a27a48ff3a49683309cb1958bf2c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec6f983e243ed7988be4eebd356181be7b1f5525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6f983e243ed7988be4eebd356181be7b1f5525", "html_url": "https://github.com/rust-lang/rust/commit/ec6f983e243ed7988be4eebd356181be7b1f5525", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec6f983e243ed7988be4eebd356181be7b1f5525/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f88167f89fffe321590c5148f21b7d51d44388d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f88167f89fffe321590c5148f21b7d51d44388d", "html_url": "https://github.com/rust-lang/rust/commit/0f88167f89fffe321590c5148f21b7d51d44388d"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "bff4190ae7925cb6aa6002f62cf1f5f82ed99727", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec6f983e243ed7988be4eebd356181be7b1f5525/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6f983e243ed7988be4eebd356181be7b1f5525/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=ec6f983e243ed7988be4eebd356181be7b1f5525", "patch": "@@ -591,12 +591,12 @@ impl<'a> State<'a> {\n                 self.s.word(\";\")?;\n                 self.end()?; // end the outer cbox\n             }\n-            hir::ItemKind::Fn(ref decl, header, ref typarams, body) => {\n+            hir::ItemKind::Fn(ref decl, header, ref param_names, body) => {\n                 self.head(\"\")?;\n                 self.print_fn(decl,\n                               header,\n                               Some(item.ident.name),\n-                              typarams,\n+                              param_names,\n                               &item.vis,\n                               &[],\n                               Some(body))?;"}, {"sha": "23b5794fb1eef45e331171e02b20c1b5488cd12b", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec6f983e243ed7988be4eebd356181be7b1f5525/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6f983e243ed7988be4eebd356181be7b1f5525/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ec6f983e243ed7988be4eebd356181be7b1f5525", "patch": "@@ -435,7 +435,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     let new_ty = match &poly_trait.trait_ {\n                         &Type::ResolvedPath {\n                             ref path,\n-                            ref typarams,\n+                            ref param_names,\n                             ref did,\n                             ref is_generic,\n                         } => {\n@@ -469,7 +469,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n \n                             Type::ResolvedPath {\n                                 path: new_path,\n-                                typarams: typarams.clone(),\n+                                param_names: param_names.clone(),\n                                 did: did.clone(),\n                                 is_generic: *is_generic,\n                             }\n@@ -669,7 +669,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                             match **trait_ {\n                                 Type::ResolvedPath {\n                                     path: ref trait_path,\n-                                    ref typarams,\n+                                    ref param_names,\n                                     ref did,\n                                     ref is_generic,\n                                 } => {\n@@ -724,7 +724,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                         PolyTrait {\n                                             trait_: Type::ResolvedPath {\n                                                 path: new_trait_path,\n-                                                typarams: typarams.clone(),\n+                                                param_names: param_names.clone(),\n                                                 did: did.clone(),\n                                                 is_generic: *is_generic,\n                                             },"}, {"sha": "6739873c6044f8c8beae5be73e7d14c09af1ba26", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ec6f983e243ed7988be4eebd356181be7b1f5525/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6f983e243ed7988be4eebd356181be7b1f5525/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ec6f983e243ed7988be4eebd356181be7b1f5525", "patch": "@@ -1176,7 +1176,7 @@ impl<'a, 'tcx> Clean<GenericBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>\n             PolyTrait {\n                 trait_: ResolvedPath {\n                     path,\n-                    typarams: None,\n+                    param_names: None,\n                     did: trait_ref.def_id,\n                     is_generic: false,\n                 },\n@@ -2244,7 +2244,7 @@ pub enum Type {\n     /// Structs/enums/traits (most that'd be an `hir::TyKind::Path`).\n     ResolvedPath {\n         path: Path,\n-        typarams: Option<Vec<GenericBound>>,\n+        param_names: Option<Vec<GenericBound>>,\n         did: DefId,\n         /// `true` if is a `T::Name` path for associated types.\n         is_generic: bool,\n@@ -2706,15 +2706,15 @@ impl Clean<Type> for hir::Ty {\n             }\n             TyKind::TraitObject(ref bounds, ref lifetime) => {\n                 match bounds[0].clean(cx).trait_ {\n-                    ResolvedPath { path, typarams: None, did, is_generic } => {\n+                    ResolvedPath { path, param_names: None, did, is_generic } => {\n                         let mut bounds: Vec<self::GenericBound> = bounds[1..].iter().map(|bound| {\n                             self::GenericBound::TraitBound(bound.clean(cx),\n                                                            hir::TraitBoundModifier::None)\n                         }).collect();\n                         if !lifetime.is_elided() {\n                             bounds.push(self::GenericBound::Outlives(lifetime.clean(cx)));\n                         }\n-                        ResolvedPath { path, typarams: Some(bounds), did, is_generic, }\n+                        ResolvedPath { path, param_names: Some(bounds), did, is_generic, }\n                     }\n                     _ => Infer // shouldn't happen\n                 }\n@@ -2781,7 +2781,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                                          None, false, vec![], substs);\n                 ResolvedPath {\n                     path,\n-                    typarams: None,\n+                    param_names: None,\n                     did,\n                     is_generic: false,\n                 }\n@@ -2792,7 +2792,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                                          None, false, vec![], InternalSubsts::empty());\n                 ResolvedPath {\n                     path: path,\n-                    typarams: None,\n+                    param_names: None,\n                     did: did,\n                     is_generic: false,\n                 }\n@@ -2813,8 +2813,8 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n                 inline::record_extern_fqn(cx, did, TypeKind::Trait);\n \n-                let mut typarams = vec![];\n-                reg.clean(cx).map(|b| typarams.push(GenericBound::Outlives(b)));\n+                let mut param_names = vec![];\n+                reg.clean(cx).map(|b| param_names.push(GenericBound::Outlives(b)));\n                 for did in dids {\n                     let empty = cx.tcx.intern_substs(&[]);\n                     let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n@@ -2823,13 +2823,13 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     let bound = GenericBound::TraitBound(PolyTrait {\n                         trait_: ResolvedPath {\n                             path,\n-                            typarams: None,\n+                            param_names: None,\n                             did,\n                             is_generic: false,\n                         },\n                         generic_params: Vec::new(),\n                     }, hir::TraitBoundModifier::None);\n-                    typarams.push(bound);\n+                    param_names.push(bound);\n                 }\n \n                 let mut bindings = vec![];\n@@ -2844,7 +2844,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     false, bindings, substs);\n                 ResolvedPath {\n                     path,\n-                    typarams: Some(typarams),\n+                    param_names: Some(param_names),\n                     did,\n                     is_generic: false,\n                 }\n@@ -3294,8 +3294,8 @@ impl Clean<PathSegment> for hir::PathSegment {\n \n fn strip_type(ty: Type) -> Type {\n     match ty {\n-        Type::ResolvedPath { path, typarams, did, is_generic } => {\n-            Type::ResolvedPath { path: strip_path(&path), typarams, did, is_generic }\n+        Type::ResolvedPath { path, param_names, did, is_generic } => {\n+            Type::ResolvedPath { path: strip_path(&path), param_names, did, is_generic }\n         }\n         Type::Tuple(inner_tys) => {\n             Type::Tuple(inner_tys.iter().map(|t| strip_type(t.clone())).collect())\n@@ -3955,7 +3955,7 @@ fn resolve_type(cx: &DocContext<'_>,\n         _ => false,\n     };\n     let did = register_def(&*cx, path.def);\n-    ResolvedPath { path: path, typarams: None, did: did, is_generic: is_generic }\n+    ResolvedPath { path: path, param_names: None, did: did, is_generic: is_generic }\n }\n \n pub fn register_def(cx: &DocContext<'_>, def: Def) -> DefId {\n@@ -4381,9 +4381,9 @@ impl From<GenericBound> for SimpleBound {\n         match bound.clone() {\n             GenericBound::Outlives(l) => SimpleBound::Outlives(l),\n             GenericBound::TraitBound(t, mod_) => match t.trait_ {\n-                Type::ResolvedPath { path, typarams, .. } => {\n+                Type::ResolvedPath { path, param_names, .. } => {\n                     SimpleBound::TraitBound(path.segments,\n-                                            typarams\n+                                            param_names\n                                                 .map_or_else(|| Vec::new(), |v| v.iter()\n                                                         .map(|p| SimpleBound::from(p.clone()))\n                                                         .collect()),"}, {"sha": "36257914d192f37b2af3e018ffe599f31936cd7b", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec6f983e243ed7988be4eebd356181be7b1f5525/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6f983e243ed7988be4eebd356181be7b1f5525/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=ec6f983e243ed7988be4eebd356181be7b1f5525", "patch": "@@ -521,8 +521,8 @@ fn primitive_link(f: &mut fmt::Formatter<'_>,\n \n /// Helper to render type parameters\n fn tybounds(w: &mut fmt::Formatter<'_>,\n-            typarams: &Option<Vec<clean::GenericBound>>) -> fmt::Result {\n-    match *typarams {\n+            param_names: &Option<Vec<clean::GenericBound>>) -> fmt::Result {\n+    match *param_names {\n         Some(ref params) => {\n             for param in params {\n                 write!(w, \" + \")?;\n@@ -559,13 +559,13 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n         clean::Generic(ref name) => {\n             f.write_str(name)\n         }\n-        clean::ResolvedPath{ did, ref typarams, ref path, is_generic } => {\n-            if typarams.is_some() {\n+        clean::ResolvedPath{ did, ref param_names, ref path, is_generic } => {\n+            if param_names.is_some() {\n                 f.write_str(\"dyn \")?;\n             }\n             // Paths like T::Output and Self::Output should be rendered with all segments\n             resolved_path(f, did, path, is_generic, use_absolute)?;\n-            tybounds(f, typarams)\n+            tybounds(f, param_names)\n         }\n         clean::Infer => write!(f, \"_\"),\n         clean::Primitive(prim) => primitive_link(f, prim, prim.as_str()),\n@@ -663,7 +663,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n                         }\n                     }\n                 }\n-                clean::ResolvedPath { typarams: Some(ref v), .. } if !v.is_empty() => {\n+                clean::ResolvedPath { param_names: Some(ref v), .. } if !v.is_empty() => {\n                     write!(f, \"{}{}{}(\", amp, lt, m)?;\n                     fmt_type(&ty, f, use_absolute)?;\n                     write!(f, \")\")\n@@ -717,7 +717,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n                 //        the ugliness comes from inlining across crates where\n                 //        everything comes in as a fully resolved QPath (hard to\n                 //        look at).\n-                box clean::ResolvedPath { did, ref typarams, .. } => {\n+                box clean::ResolvedPath { did, ref param_names, .. } => {\n                     match href(did) {\n                         Some((ref url, _, ref path)) if !f.alternate() => {\n                             write!(f,\n@@ -731,8 +731,8 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n                         _ => write!(f, \"{}\", name)?,\n                     }\n \n-                    // FIXME: `typarams` are not rendered, and this seems bad?\n-                    drop(typarams);\n+                    // FIXME: `param_names` are not rendered, and this seems bad?\n+                    drop(param_names);\n                     Ok(())\n                 }\n                 _ => {\n@@ -771,7 +771,7 @@ fn fmt_impl(i: &clean::Impl,\n             fmt::Display::fmt(ty, f)?;\n         } else {\n             match *ty {\n-                clean::ResolvedPath { typarams: None, ref path, is_generic: false, .. } => {\n+                clean::ResolvedPath { param_names: None, ref path, is_generic: false, .. } => {\n                     let last = path.segments.last().unwrap();\n                     fmt::Display::fmt(&last.name, f)?;\n                     fmt::Display::fmt(&last.args, f)?;"}, {"sha": "b1c4a8fc1afbee643cf3872a97eb2ec393f20500", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec6f983e243ed7988be4eebd356181be7b1f5525/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6f983e243ed7988be4eebd356181be7b1f5525/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ec6f983e243ed7988be4eebd356181be7b1f5525", "patch": "@@ -271,7 +271,7 @@ pub struct Cache {\n     /// Mapping of typaram ids to the name of the type parameter. This is used\n     /// when pretty-printing a type (so pretty-printing doesn't have to\n     /// painfully maintain a context like this)\n-    pub typarams: FxHashMap<DefId, String>,\n+    pub param_names: FxHashMap<DefId, String>,\n \n     /// Maps a type ID to all known implementations for that type. This is only\n     /// recognized for intra-crate `ResolvedPath` types, and is used to print\n@@ -635,7 +635,7 @@ pub fn run(mut krate: clean::Crate,\n         deref_mut_trait_did,\n         owned_box_did,\n         masked_crates: mem::replace(&mut krate.masked_crates, Default::default()),\n-        typarams: external_typarams,\n+        param_names: external_param_names,\n         aliases: Default::default(),\n     };\n \n@@ -1751,7 +1751,7 @@ impl<'a> Cache {\n                 clean::GenericParamDefKind::Lifetime => {}\n                 clean::GenericParamDefKind::Type { did, .. } |\n                 clean::GenericParamDefKind::Const { did, .. } => {\n-                    self.typarams.insert(did, param.name.clone());\n+                    self.param_names.insert(did, param.name.clone());\n                 }\n             }\n         }"}, {"sha": "07df14ddc722cc50b85b9582307794aa0d8e0fb4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec6f983e243ed7988be4eebd356181be7b1f5525/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6f983e243ed7988be4eebd356181be7b1f5525/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ec6f983e243ed7988be4eebd356181be7b1f5525", "patch": "@@ -1263,13 +1263,13 @@ impl<'a> State<'a> {\n                 self.s.word(\";\")?;\n                 self.end()?; // end the outer cbox\n             }\n-            ast::ItemKind::Fn(ref decl, header, ref typarams, ref body) => {\n+            ast::ItemKind::Fn(ref decl, header, ref param_names, ref body) => {\n                 self.head(\"\")?;\n                 self.print_fn(\n                     decl,\n                     header,\n                     Some(item.ident),\n-                    typarams,\n+                    param_names,\n                     &item.vis\n                 )?;\n                 self.s.word(\" \")?;"}]}