{"sha": "daab6db1a02b680a71976fcbeed577ff102b31e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYWI2ZGIxYTAyYjY4MGE3MTk3NmZjYmVlZDU3N2ZmMTAyYjMxZTQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-09T22:28:09Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-09T22:28:09Z"}, "message": "Avoid repeating self type in placeholder error", "tree": {"sha": "4d84f19a720d8ccf91cda364fb09aa2566b6e7b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d84f19a720d8ccf91cda364fb09aa2566b6e7b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daab6db1a02b680a71976fcbeed577ff102b31e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daab6db1a02b680a71976fcbeed577ff102b31e4", "html_url": "https://github.com/rust-lang/rust/commit/daab6db1a02b680a71976fcbeed577ff102b31e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daab6db1a02b680a71976fcbeed577ff102b31e4/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2066cf0694c304c0fc43f17bebefb518b066619", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2066cf0694c304c0fc43f17bebefb518b066619", "html_url": "https://github.com/rust-lang/rust/commit/c2066cf0694c304c0fc43f17bebefb518b066619"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "09be0b076705c7e5ff0e8c4b7bd85f066fcec992", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/daab6db1a02b680a71976fcbeed577ff102b31e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daab6db1a02b680a71976fcbeed577ff102b31e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=daab6db1a02b680a71976fcbeed577ff102b31e4", "patch": "@@ -370,6 +370,8 @@ impl NiceRegionError<'me, 'tcx> {\n             value: trait_ref,\n         };\n \n+        let same_self_type = actual_trait_ref.self_ty() == expected_trait_ref.self_ty();\n+\n         let mut expected_trait_ref = highlight_trait_ref(expected_trait_ref);\n         expected_trait_ref.highlight.maybe_highlighting_region(sub_placeholder, has_sub);\n         expected_trait_ref.highlight.maybe_highlighting_region(sup_placeholder, has_sup);\n@@ -385,7 +387,16 @@ impl NiceRegionError<'me, 'tcx> {\n                 }\n             };\n \n-            let mut note = if passive_voice {\n+            let mut note = if same_self_type {\n+                let mut self_ty = expected_trait_ref.map(|tr| tr.self_ty());\n+                self_ty.highlight.maybe_highlighting_region(vid, actual_has_vid);\n+                format!(\n+                    \"{}`{}` must implement `{}`\",\n+                    if leading_ellipsis { \"...\" } else { \"\" },\n+                    self_ty,\n+                    expected_trait_ref.map(|tr| tr.print_only_trait_path()),\n+                )\n+            } else if passive_voice {\n                 format!(\n                     \"{}`{}` would have to be implemented for the type `{}`\",\n                     if leading_ellipsis { \"...\" } else { \"\" },\n@@ -431,7 +442,12 @@ impl NiceRegionError<'me, 'tcx> {\n                 None => true,\n             };\n \n-            let mut note = if passive_voice {\n+            let mut note = if same_self_type {\n+                format!(\n+                    \"...but it actually implements `{}`\",\n+                    actual_trait_ref.map(|tr| tr.print_only_trait_path()),\n+                )\n+            } else if passive_voice {\n                 format!(\n                     \"...but `{}` is actually implemented for the type `{}`\",\n                     actual_trait_ref.map(|tr| tr.print_only_trait_path()),"}, {"sha": "6897b31fe46857dd89de03866b7719553126c631", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/daab6db1a02b680a71976fcbeed577ff102b31e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daab6db1a02b680a71976fcbeed577ff102b31e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=daab6db1a02b680a71976fcbeed577ff102b31e4", "patch": "@@ -35,7 +35,7 @@ LL |     tuple_one::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:96:5\n@@ -44,7 +44,7 @@ LL |     tuple_one::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:102:5\n@@ -53,7 +53,7 @@ LL |     tuple_two::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:102:5\n@@ -62,7 +62,7 @@ LL |     tuple_two::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:112:5\n@@ -71,7 +71,7 @@ LL |     tuple_four::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "b1d4c0bf375059018da73037ace6791a091c262a", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daab6db1a02b680a71976fcbeed577ff102b31e4/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daab6db1a02b680a71976fcbeed577ff102b31e4/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=daab6db1a02b680a71976fcbeed577ff102b31e4", "patch": "@@ -5,7 +5,7 @@ LL | fn b() { want_foo2::<SomeStruct>(); }\n    |          ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `SomeStruct` must implement `Foo<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `SomeStruct` actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = note: ...but it actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n "}, {"sha": "613f4dc4951ec3f16ced03fdcb9f1b0ed25e7e8e", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daab6db1a02b680a71976fcbeed577ff102b31e4/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daab6db1a02b680a71976fcbeed577ff102b31e4/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=daab6db1a02b680a71976fcbeed577ff102b31e4", "patch": "@@ -5,7 +5,7 @@ LL |     foo::<()>();\n    |     ^^^^^^^^^ implementation of `Trait` is not general enough\n    |\n    = note: `()` must implement `Trait<for<'b> fn(&'b u32)>`\n-   = note: ...but `()` actually implements `Trait<fn(&'0 u32)>`, for some specific lifetime `'0`\n+   = note: ...but it actually implements `Trait<fn(&'0 u32)>`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n "}, {"sha": "b487ce3e0ffa1ce09b5f4dc8771a12e03c162217", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daab6db1a02b680a71976fcbeed577ff102b31e4/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daab6db1a02b680a71976fcbeed577ff102b31e4/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=daab6db1a02b680a71976fcbeed577ff102b31e4", "patch": "@@ -5,7 +5,7 @@ LL |     foo::<()>();\n    |     ^^^^^^^^^ implementation of `Trait` is not general enough\n    |\n    = note: `()` must implement `Trait<for<'b> fn(Cell<&'b u32>)>`\n-   = note: ...but `()` actually implements `Trait<fn(Cell<&'0 u32>)>`, for some specific lifetime `'0`\n+   = note: ...but it actually implements `Trait<fn(Cell<&'0 u32>)>`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n "}, {"sha": "38d7c12d4ec03159bfe078d0e045a6d4e48e042a", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daab6db1a02b680a71976fcbeed577ff102b31e4/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daab6db1a02b680a71976fcbeed577ff102b31e4/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=daab6db1a02b680a71976fcbeed577ff102b31e4", "patch": "@@ -5,7 +5,7 @@ LL |     want_hrtb::<StaticInt>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`...\n-   = note: ...but `StaticInt` actually implements `Foo<&'1 isize>`, for some specific lifetime `'1`\n+   = note: ...but it actually implements `Foo<&'1 isize>`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5"}]}