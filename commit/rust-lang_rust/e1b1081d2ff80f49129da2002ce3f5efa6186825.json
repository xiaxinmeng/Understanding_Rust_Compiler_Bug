{"sha": "e1b1081d2ff80f49129da2002ce3f5efa6186825", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYjEwODFkMmZmODBmNDkxMjlkYTIwMDJjZTNmNWVmYTYxODY4MjU=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-18T05:19:39Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-22T16:00:18Z"}, "message": "Document that `init` and `cleanup` are not guaranteed to run", "tree": {"sha": "dcc0b789e324332e48071fe55131a9d62e6ec03f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcc0b789e324332e48071fe55131a9d62e6ec03f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1b1081d2ff80f49129da2002ce3f5efa6186825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b1081d2ff80f49129da2002ce3f5efa6186825", "html_url": "https://github.com/rust-lang/rust/commit/e1b1081d2ff80f49129da2002ce3f5efa6186825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1b1081d2ff80f49129da2002ce3f5efa6186825/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aeea227daf4a78761c41bb32321e8b2e505d27e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aeea227daf4a78761c41bb32321e8b2e505d27e", "html_url": "https://github.com/rust-lang/rust/commit/8aeea227daf4a78761c41bb32321e8b2e505d27e"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "a70d1db7ca67240e2bce771b67cfd8a1cada39df", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b1081d2ff80f49129da2002ce3f5efa6186825/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b1081d2ff80f49129da2002ce3f5efa6186825/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=e1b1081d2ff80f49129da2002ce3f5efa6186825", "patch": "@@ -96,12 +96,14 @@ pub extern \"C\" fn __rust_abort() {\n }\n \n // SAFETY: must be called only once during runtime initialization.\n+// NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(argc: isize, argv: *const *const u8) {\n     let _ = net::init();\n     args::init(argc, argv);\n }\n \n // SAFETY: must be called only once during runtime cleanup.\n+// NOTE: this is not guaranteed to run, for example when the program aborts.\n pub unsafe fn cleanup() {\n     args::cleanup();\n }"}, {"sha": "059d6cb5ba13122994c69ee86439d1be1fe1181a", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b1081d2ff80f49129da2002ce3f5efa6186825/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b1081d2ff80f49129da2002ce3f5efa6186825/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=e1b1081d2ff80f49129da2002ce3f5efa6186825", "patch": "@@ -40,13 +40,15 @@ pub mod time;\n pub use crate::sys_common::os_str_bytes as os_str;\n \n // SAFETY: must be called only once during runtime initialization.\n+// NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(argc: isize, argv: *const *const u8) {\n     unsafe {\n         args::init(argc, argv);\n     }\n }\n \n // SAFETY: must be called only once during runtime cleanup.\n+// NOTE: this is not guaranteed to run, for example when the program aborts.\n pub unsafe fn cleanup() {}\n \n /// This function is used to implement functionality that simply doesn't exist."}, {"sha": "a0ee69c2f72ddf871b6fef8320c7097437dacf21", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b1081d2ff80f49129da2002ce3f5efa6186825/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b1081d2ff80f49129da2002ce3f5efa6186825/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=e1b1081d2ff80f49129da2002ce3f5efa6186825", "patch": "@@ -45,6 +45,7 @@ pub mod time;\n pub use crate::sys_common::os_str_bytes as os_str;\n \n // SAFETY: must be called only once during runtime initialization.\n+// NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(argc: isize, argv: *const *const u8) {\n     // The standard streams might be closed on application startup. To prevent\n     // std::io::{stdin, stdout,stderr} objects from using other unrelated file\n@@ -120,6 +121,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n }\n \n // SAFETY: must be called only once during runtime cleanup.\n+// NOTE: this is not guaranteed to run, for example when the program aborts.\n pub unsafe fn cleanup() {\n     args::cleanup();\n     stack_overflow::cleanup();"}, {"sha": "6e72a7c632ed0b4755d3f56034a75c0296e9f31d", "filename": "library/std/src/sys/unsupported/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b1081d2ff80f49129da2002ce3f5efa6186825/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b1081d2ff80f49129da2002ce3f5efa6186825/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs?ref=e1b1081d2ff80f49129da2002ce3f5efa6186825", "patch": "@@ -11,9 +11,11 @@ pub use crate::sys_common::os_str_bytes as os_str;\n use crate::os::raw::c_char;\n \n // SAFETY: must be called only once during runtime initialization.\n+// NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n \n // SAFETY: must be called only once during runtime cleanup.\n+// NOTE: this is not guaranteed to run, for example when the program aborts.\n pub unsafe fn cleanup() {}\n \n pub fn unsupported<T>() -> std_io::Result<T> {"}, {"sha": "ddb6ac5f55c0d9684f5bc00a65a07d0072bef437", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b1081d2ff80f49129da2002ce3f5efa6186825/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b1081d2ff80f49129da2002ce3f5efa6186825/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=e1b1081d2ff80f49129da2002ce3f5efa6186825", "patch": "@@ -50,11 +50,13 @@ cfg_if::cfg_if! {\n }\n \n // SAFETY: must be called only once during runtime initialization.\n+// NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n     stack_overflow::init();\n }\n \n // SAFETY: must be called only once during runtime cleanup.\n+// NOTE: this is not guaranteed to run, for example when the program aborts.\n pub unsafe fn cleanup() {\n     net::cleanup();\n }"}, {"sha": "c0c4a63cde9903964dab7f5677131900aa51676c", "filename": "library/std/src/sys_common/rt.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1b1081d2ff80f49129da2002ce3f5efa6186825/library%2Fstd%2Fsrc%2Fsys_common%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b1081d2ff80f49129da2002ce3f5efa6186825/library%2Fstd%2Fsrc%2Fsys_common%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frt.rs?ref=e1b1081d2ff80f49129da2002ce3f5efa6186825", "patch": "@@ -5,6 +5,7 @@ use crate::thread::Thread;\n \n // One-time runtime initialization.\n // Runs before `main`.\n+// NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n #[cfg_attr(test, allow(dead_code))]\n pub fn init(argc: isize, argv: *const *const u8) {\n     static INIT: Once = Once::new();\n@@ -23,8 +24,8 @@ pub fn init(argc: isize, argv: *const *const u8) {\n }\n \n // One-time runtime cleanup.\n-// Runs after `main` or at program exit. Note however that this is not guaranteed to run,\n-// for example when the program aborts.\n+// Runs after `main` or at program exit.\n+// NOTE: this is not guaranteed to run, for example when the program aborts.\n #[cfg_attr(test, allow(dead_code))]\n pub fn cleanup() {\n     static CLEANUP: Once = Once::new();"}]}