{"sha": "942649a26073bb84797f8831d39d0b35018e931b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MjY0OWEyNjA3M2JiODQ3OTdmODgzMWQzOWQwYjM1MDE4ZTkzMWI=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-14T23:28:23Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-16T23:46:20Z"}, "message": "Make wait_many work on selectable types instead.\n\nThis should avoid allocation in many select paths.", "tree": {"sha": "0b9a6d607867654ee0c6fb309a903d8989811484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b9a6d607867654ee0c6fb309a903d8989811484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/942649a26073bb84797f8831d39d0b35018e931b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/942649a26073bb84797f8831d39d0b35018e931b", "html_url": "https://github.com/rust-lang/rust/commit/942649a26073bb84797f8831d39d0b35018e931b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/942649a26073bb84797f8831d39d0b35018e931b/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b206920d9d8c46ee38d3d3930afc57d2a0cfb3f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b206920d9d8c46ee38d3d3930afc57d2a0cfb3f7", "html_url": "https://github.com/rust-lang/rust/commit/b206920d9d8c46ee38d3d3930afc57d2a0cfb3f7"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "de13051be2be269e9b157ee5f5f285a04390745d", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/942649a26073bb84797f8831d39d0b35018e931b/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942649a26073bb84797f8831d39d0b35018e931b/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=942649a26073bb84797f8831d39d0b35018e931b", "patch": "@@ -581,14 +581,14 @@ that vector. The index points to an endpoint that has either been\n closed by the sender or has a message waiting to be received.\n \n */\n-fn wait_many(pkts: &[*packet_header]) -> uint {\n+fn wait_many<T: selectable>(pkts: &[T]) -> uint {\n     let this = rustrt::rust_get_task();\n \n     rustrt::task_clear_event_reject(this);\n     let mut data_avail = false;\n     let mut ready_packet = pkts.len();\n     for pkts.eachi |i, p| unsafe {\n-        let p = unsafe { &*p };\n+        let p = unsafe { &*p.header() };\n         let old = p.mark_blocked(this);\n         match old {\n           full | terminated => {\n@@ -605,7 +605,7 @@ fn wait_many(pkts: &[*packet_header]) -> uint {\n     while !data_avail {\n         debug!{\"sleeping on %? packets\", pkts.len()};\n         let event = wait_event(this) as *packet_header;\n-        let pos = vec::position(pkts, |p| p == event);\n+        let pos = vec::position(pkts, |p| p.header() == event);\n \n         match pos {\n           some(i) => {\n@@ -618,13 +618,13 @@ fn wait_many(pkts: &[*packet_header]) -> uint {\n \n     debug!{\"%?\", pkts[ready_packet]};\n \n-    for pkts.each |p| { unsafe{ (*p).unblock()} }\n+    for pkts.each |p| { unsafe{ (*p.header()).unblock()} }\n \n     debug!(\"%?, %?\", ready_packet, pkts[ready_packet]);\n \n     unsafe {\n-        assert (*pkts[ready_packet]).state == full\n-            || (*pkts[ready_packet]).state == terminated;\n+        assert (*pkts[ready_packet].header()).state == full\n+            || (*pkts[ready_packet].header()).state == terminated;\n     }\n \n     ready_packet\n@@ -686,7 +686,7 @@ impl *packet_header: selectable {\n \n /// Returns the index of an endpoint that is ready to receive.\n fn selecti<T: selectable>(endpoints: &[T]) -> uint {\n-    wait_many(endpoints.map(|p| p.header()))\n+    wait_many(endpoints)\n }\n \n /// Returns 0 or 1 depending on which endpoint is ready to receive"}]}