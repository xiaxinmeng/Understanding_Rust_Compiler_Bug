{"sha": "69b352ef7749825abde2d8f8e31c05f681e61a10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YjM1MmVmNzc0OTgyNWFiZGUyZDhmOGUzMWMwNWY2ODFlNjFhMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-14T06:53:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-14T06:53:45Z"}, "message": "Auto merge of #85233 - FabianWolff:issue-85227, r=petrochenkov\n\nImprove error message for non-exhaustive matches on non-exhaustive enums\n\nThis pull request fixes #85227. For an enum marked with `#[non_exhaustive]` and not defined in the current crate, the error message for non-exhaustive matches now mentions the fact that the enum is marked as non-exhaustive:\n```\nerror[E0004]: non-exhaustive patterns: `_` not covered\n  --> main.rs:12:11\n   |\n12 |     match e {\n   |           ^ pattern `_` not covered\n   |\n   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   = note: the matched value is of type `E`, which is marked as non-exhaustive\n```", "tree": {"sha": "23aa88b23815441ecfe796f1c152fd3caa0c23e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23aa88b23815441ecfe796f1c152fd3caa0c23e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69b352ef7749825abde2d8f8e31c05f681e61a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69b352ef7749825abde2d8f8e31c05f681e61a10", "html_url": "https://github.com/rust-lang/rust/commit/69b352ef7749825abde2d8f8e31c05f681e61a10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69b352ef7749825abde2d8f8e31c05f681e61a10/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91f2e2d21820ff9946f27aa743911d7344caa0e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/91f2e2d21820ff9946f27aa743911d7344caa0e0", "html_url": "https://github.com/rust-lang/rust/commit/91f2e2d21820ff9946f27aa743911d7344caa0e0"}, {"sha": "57291b8c5eea1ac59d5c54e65358b8dd56639c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/57291b8c5eea1ac59d5c54e65358b8dd56639c31", "html_url": "https://github.com/rust-lang/rust/commit/57291b8c5eea1ac59d5c54e65358b8dd56639c31"}], "stats": {"total": 94, "additions": 88, "deletions": 6}, "files": [{"sha": "e4419070cbd08f3f9e01ae6704d0fe2afd4eda66", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69b352ef7749825abde2d8f8e31c05f681e61a10/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b352ef7749825abde2d8f8e31c05f681e61a10/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=69b352ef7749825abde2d8f8e31c05f681e61a10", "patch": "@@ -496,12 +496,21 @@ fn non_exhaustive_match<'p, 'tcx>(\n         err.span_label(sp, pattern_not_covered_label(&witnesses, &joined_patterns));\n     };\n \n+    let is_variant_list_non_exhaustive = match scrut_ty.kind() {\n+        ty::Adt(def, _) if def.is_variant_list_non_exhaustive() && !def.did.is_local() => true,\n+        _ => false,\n+    };\n+\n     adt_defined_here(cx, &mut err, scrut_ty, &witnesses);\n     err.help(\n         \"ensure that all possible cases are being handled, \\\n               possibly by adding wildcards or more match arms\",\n     );\n-    err.note(&format!(\"the matched value is of type `{}`\", scrut_ty));\n+    err.note(&format!(\n+        \"the matched value is of type `{}`{}\",\n+        scrut_ty,\n+        if is_variant_list_non_exhaustive { \", which is marked as non-exhaustive\" } else { \"\" }\n+    ));\n     if (scrut_ty == cx.tcx.types.usize || scrut_ty == cx.tcx.types.isize)\n         && !is_empty_match\n         && witnesses.len() == 1"}, {"sha": "3be72551e092f072f03a49f7b0b0fc326bd3394c", "filename": "src/test/ui/match/auxiliary/match_non_exhaustive_lib.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69b352ef7749825abde2d8f8e31c05f681e61a10/src%2Ftest%2Fui%2Fmatch%2Fauxiliary%2Fmatch_non_exhaustive_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b352ef7749825abde2d8f8e31c05f681e61a10/src%2Ftest%2Fui%2Fmatch%2Fauxiliary%2Fmatch_non_exhaustive_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fauxiliary%2Fmatch_non_exhaustive_lib.rs?ref=69b352ef7749825abde2d8f8e31c05f681e61a10", "patch": "@@ -0,0 +1,5 @@\n+#[non_exhaustive]\n+pub enum E1 {}\n+\n+#[non_exhaustive]\n+pub enum E2 { A, B }"}, {"sha": "8219f0eb13571aef7c3be4b49dcc4b18ab6fd1a9", "filename": "src/test/ui/match/match_non_exhaustive.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/69b352ef7749825abde2d8f8e31c05f681e61a10/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b352ef7749825abde2d8f8e31c05f681e61a10/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.rs?ref=69b352ef7749825abde2d8f8e31c05f681e61a10", "patch": "@@ -0,0 +1,32 @@\n+// aux-build:match_non_exhaustive_lib.rs\n+\n+/* The error message for non-exhaustive matches on non-local enums\n+ * marked as non-exhaustive should mention the fact that the enum\n+ * is marked as non-exhaustive (issue #85227).\n+ */\n+\n+// Ignore non_exhaustive in the same crate\n+#[non_exhaustive]\n+enum L { A, B }\n+\n+extern crate match_non_exhaustive_lib;\n+use match_non_exhaustive_lib::{E1, E2};\n+\n+fn foo() -> L {todo!()}\n+fn bar() -> (E1, E2) {todo!()}\n+\n+fn main() {\n+    let l = foo();\n+    // No error for enums defined in this crate\n+    match l { L::A => (), L::B => () };\n+    // (except if the match is already non-exhaustive)\n+    match l { L::A => () };\n+    //~^ ERROR: non-exhaustive patterns: `B` not covered [E0004]\n+\n+    // E1 is not visibly uninhabited from here\n+    let (e1, e2) = bar();\n+    match e1 {};\n+    //~^ ERROR: non-exhaustive patterns: type `E1` is non-empty [E0004]\n+    match e2 { E2::A => (), E2::B => () };\n+    //~^ ERROR: non-exhaustive patterns: `_` not covered [E0004]\n+}"}, {"sha": "5debfe1c566c4893f477988c03d7573eb2af6f71", "filename": "src/test/ui/match/match_non_exhaustive.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/69b352ef7749825abde2d8f8e31c05f681e61a10/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69b352ef7749825abde2d8f8e31c05f681e61a10/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr?ref=69b352ef7749825abde2d8f8e31c05f681e61a10", "patch": "@@ -0,0 +1,36 @@\n+error[E0004]: non-exhaustive patterns: `B` not covered\n+  --> $DIR/match_non_exhaustive.rs:23:11\n+   |\n+LL | enum L { A, B }\n+   | ---------------\n+   | |           |\n+   | |           not covered\n+   | `L` defined here\n+...\n+LL |     match l { L::A => () };\n+   |           ^ pattern `B` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `L`\n+\n+error[E0004]: non-exhaustive patterns: type `E1` is non-empty\n+  --> $DIR/match_non_exhaustive.rs:28:11\n+   |\n+LL |     match e1 {};\n+   |           ^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `E1`, which is marked as non-exhaustive\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match_non_exhaustive.rs:30:11\n+   |\n+LL |     match e2 { E2::A => (), E2::B => () };\n+   |           ^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `E2`, which is marked as non-exhaustive\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "cd9ded81e6a09e72c701039230308050a8293ba9", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69b352ef7749825abde2d8f8e31c05f681e61a10/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69b352ef7749825abde2d8f8e31c05f681e61a10/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr?ref=69b352ef7749825abde2d8f8e31c05f681e61a10", "patch": "@@ -5,7 +5,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `EmptyNonExhaustiveEnum`\n+   = note: the matched value is of type `EmptyNonExhaustiveEnum`, which is marked as non-exhaustive\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/enum.rs:16:11\n@@ -14,7 +14,7 @@ LL |     match enum_unit {\n    |           ^^^^^^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `NonExhaustiveEnum`\n+   = note: the matched value is of type `NonExhaustiveEnum`, which is marked as non-exhaustive\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/enum.rs:23:11\n@@ -23,7 +23,7 @@ LL |     match enum_unit {};\n    |           ^^^^^^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `NonExhaustiveEnum`\n+   = note: the matched value is of type `NonExhaustiveEnum`, which is marked as non-exhaustive\n \n error: aborting due to 3 previous errors\n "}, {"sha": "746c1fd4aceb7d77f7cb5c01f1d539705f9b8c3d", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69b352ef7749825abde2d8f8e31c05f681e61a10/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69b352ef7749825abde2d8f8e31c05f681e61a10/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr?ref=69b352ef7749825abde2d8f8e31c05f681e61a10", "patch": "@@ -5,7 +5,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `UninhabitedEnum`\n+   = note: the matched value is of type `UninhabitedEnum`, which is marked as non-exhaustive\n \n error[E0004]: non-exhaustive patterns: type `UninhabitedStruct` is non-empty\n   --> $DIR/match.rs:23:11"}, {"sha": "46e84dc09a3ead2763e20474005eea5717082be2", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69b352ef7749825abde2d8f8e31c05f681e61a10/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69b352ef7749825abde2d8f8e31c05f681e61a10/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=69b352ef7749825abde2d8f8e31c05f681e61a10", "patch": "@@ -5,7 +5,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `UninhabitedEnum`\n+   = note: the matched value is of type `UninhabitedEnum`, which is marked as non-exhaustive\n \n error[E0004]: non-exhaustive patterns: type `UninhabitedStruct` is non-empty\n   --> $DIR/match_with_exhaustive_patterns.rs:26:11"}]}