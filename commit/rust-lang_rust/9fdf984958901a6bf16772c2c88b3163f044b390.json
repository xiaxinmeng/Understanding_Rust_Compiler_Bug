{"sha": "9fdf984958901a6bf16772c2c88b3163f044b390", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZGY5ODQ5NTg5MDFhNmJmMTY3NzJjMmM4OGIzMTYzZjA0NGIzOTA=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-06T00:33:18Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-17T20:24:33Z"}, "message": "ra_syntax: reshape SyntaxError for the sake of removing redundancy", "tree": {"sha": "b3f86c533c6a9a86a9183cb117e23efd382c045e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3f86c533c6a9a86a9183cb117e23efd382c045e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fdf984958901a6bf16772c2c88b3163f044b390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdf984958901a6bf16772c2c88b3163f044b390", "html_url": "https://github.com/rust-lang/rust/commit/9fdf984958901a6bf16772c2c88b3163f044b390", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fdf984958901a6bf16772c2c88b3163f044b390/comments", "author": null, "committer": null, "parents": [{"sha": "9053003e3b298b38f6029b860efc5baed1996385", "url": "https://api.github.com/repos/rust-lang/rust/commits/9053003e3b298b38f6029b860efc5baed1996385", "html_url": "https://github.com/rust-lang/rust/commit/9053003e3b298b38f6029b860efc5baed1996385"}], "stats": {"total": 1041, "additions": 404, "deletions": 637}, "files": [{"sha": "97af984580326dc18937bc54e4139dedd4e0b246", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -10,7 +10,7 @@ use ra_prof::profile;\n use ra_syntax::{\n     algo,\n     ast::{self, make, AstNode},\n-    Location, SyntaxNode, TextRange, T,\n+    SyntaxNode, TextRange, T,\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n@@ -29,7 +29,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     let mut res = Vec::new();\n \n     res.extend(parse.errors().iter().map(|err| Diagnostic {\n-        range: location_to_range(err.location()),\n+        range: *err.range(),\n         message: format!(\"Syntax Error: {}\", err),\n         severity: Severity::Error,\n         fix: None,\n@@ -116,12 +116,6 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     drop(sink);\n     res.into_inner()\n }\n-fn location_to_range(location: Location) -> TextRange {\n-    match location {\n-        Location::Offset(offset) => TextRange::offset_len(offset, 1.into()),\n-        Location::Range(range) => range,\n-    }\n-}\n \n fn check_unnecessary_braces_in_use_statement(\n     acc: &mut Vec<Diagnostic>,"}, {"sha": "cc02c4be5b11ad7036810c8f4d7db89fdb4b0c2f", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -41,11 +41,9 @@ use crate::syntax_node::GreenNode;\n pub use crate::{\n     algo::InsertPosition,\n     ast::{AstNode, AstToken},\n-    parsing::{\n-        lex_single_syntax_kind, lex_single_valid_syntax_kind, tokenize, Token, TokenizeError,\n-    },\n+    parsing::{lex_single_syntax_kind, lex_single_valid_syntax_kind, tokenize, Token},\n     ptr::{AstPtr, SyntaxNodePtr},\n-    syntax_error::{Location, SyntaxError, SyntaxErrorKind},\n+    syntax_error::SyntaxError,\n     syntax_node::{\n         Direction, NodeOrToken, SyntaxElement, SyntaxNode, SyntaxToken, SyntaxTreeBuilder,\n     },\n@@ -117,7 +115,7 @@ impl Parse<SourceFile> {\n     pub fn debug_dump(&self) -> String {\n         let mut buf = format!(\"{:#?}\", self.tree().syntax());\n         for err in self.errors.iter() {\n-            writeln!(buf, \"error {:?}: {}\", err.location(), err.kind()).unwrap();\n+            writeln!(buf, \"error {:?}: {}\", err.range(), err.message()).unwrap();\n         }\n         buf\n     }"}, {"sha": "f2684c852a8c66dff8c6cd68fff191051ce6944a", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 26, "deletions": 66, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -2,7 +2,7 @@\n //! It is just a bridge to `rustc_lexer`.\n \n use crate::{\n-    SyntaxError, SyntaxErrorKind,\n+    SyntaxError,\n     SyntaxKind::{self, *},\n     TextRange, TextUnit,\n };\n@@ -41,13 +41,13 @@ pub fn tokenize(text: &str) -> (Vec<Token>, Vec<SyntaxError>) {\n         let token_len = TextUnit::from_usize(rustc_token.len);\n         let token_range = TextRange::offset_len(TextUnit::from_usize(offset), token_len);\n \n-        let (syntax_kind, error) =\n+        let (syntax_kind, err_message) =\n             rustc_token_kind_to_syntax_kind(&rustc_token.kind, &text[token_range]);\n \n         tokens.push(Token { kind: syntax_kind, len: token_len });\n \n-        if let Some(error) = error {\n-            errors.push(SyntaxError::new(SyntaxErrorKind::TokenizeError(error), token_range));\n+        if let Some(err_message) = err_message {\n+            errors.push(SyntaxError::new(err_message, token_range));\n         }\n \n         offset += rustc_token.len;\n@@ -94,76 +94,37 @@ fn lex_first_token(text: &str) -> Option<(Token, Option<SyntaxError>)> {\n     }\n \n     let rustc_token = rustc_lexer::first_token(text);\n-    let (syntax_kind, error) = rustc_token_kind_to_syntax_kind(&rustc_token.kind, text);\n+    let (syntax_kind, err_message) = rustc_token_kind_to_syntax_kind(&rustc_token.kind, text);\n \n     let token = Token { kind: syntax_kind, len: TextUnit::from_usize(rustc_token.len) };\n-    let error = error.map(|error| {\n-        SyntaxError::new(\n-            SyntaxErrorKind::TokenizeError(error),\n-            TextRange::from_to(TextUnit::from(0), TextUnit::of_str(text)),\n-        )\n+    let optional_error = err_message.map(|err_message| {\n+        SyntaxError::new(err_message, TextRange::from_to(0.into(), TextUnit::of_str(text)))\n     });\n \n-    Some((token, error))\n-}\n-\n-// FIXME: simplify TokenizeError to `SyntaxError(String, TextRange)` as per @matklad advice:\n-// https://github.com/rust-analyzer/rust-analyzer/pull/2911/files#r371175067\n-\n-/// Describes the values of `SyntaxErrorKind::TokenizeError` enum variant.\n-/// It describes all the types of errors that may happen during the tokenization\n-/// of Rust source.\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum TokenizeError {\n-    /// Base prefix was provided, but there were no digits\n-    /// after it, e.g. `0x`, `0b`.\n-    EmptyInt,\n-    /// Float exponent lacks digits e.g. `12.34e+`, `12.3E+`, `12e-`, `1_E-`,\n-    EmptyExponent,\n-\n-    /// Block comment lacks trailing delimiter `*/`\n-    UnterminatedBlockComment,\n-    /// Character literal lacks trailing delimiter `'`\n-    UnterminatedChar,\n-    /// Characterish byte literal lacks trailing delimiter `'`\n-    UnterminatedByte,\n-    /// String literal lacks trailing delimiter `\"`\n-    UnterminatedString,\n-    /// Byte string literal lacks trailing delimiter `\"`\n-    UnterminatedByteString,\n-    /// Raw literal lacks trailing delimiter e.g. `\"##`\n-    UnterminatedRawString,\n-    /// Raw byte string literal lacks trailing delimiter e.g. `\"##`\n-    UnterminatedRawByteString,\n-\n-    /// Raw string lacks a quote after the pound characters e.g. `r###`\n-    UnstartedRawString,\n-    /// Raw byte string lacks a quote after the pound characters e.g. `br###`\n-    UnstartedRawByteString,\n-\n-    /// Lifetime starts with a number e.g. `'4ever`\n-    LifetimeStartsWithNumber,\n+    Some((token, optional_error))\n }\n \n+/// Returns `SyntaxKind` and an optional tokenize error message.\n fn rustc_token_kind_to_syntax_kind(\n     rustc_token_kind: &rustc_lexer::TokenKind,\n     token_text: &str,\n-) -> (SyntaxKind, Option<TokenizeError>) {\n+) -> (SyntaxKind, Option<&'static str>) {\n     // A note on an intended tradeoff:\n     // We drop some useful infromation here (see patterns with double dots `..`)\n     // Storing that info in `SyntaxKind` is not possible due to its layout requirements of\n     // being `u16` that come from `rowan::SyntaxKind`.\n \n     let syntax_kind = {\n         use rustc_lexer::TokenKind as TK;\n-        use TokenizeError as TE;\n-\n         match rustc_token_kind {\n             TK::LineComment => COMMENT,\n \n             TK::BlockComment { terminated: true } => COMMENT,\n             TK::BlockComment { terminated: false } => {\n-                return (COMMENT, Some(TE::UnterminatedBlockComment));\n+                return (\n+                    COMMENT,\n+                    Some(\"Missing trailing `*/` symbols to terminate the block comment\"),\n+                );\n             }\n \n             TK::Whitespace => WHITESPACE,\n@@ -181,7 +142,7 @@ fn rustc_token_kind_to_syntax_kind(\n \n             TK::Lifetime { starts_with_number: false } => LIFETIME,\n             TK::Lifetime { starts_with_number: true } => {\n-                return (LIFETIME, Some(TE::LifetimeStartsWithNumber))\n+                return (LIFETIME, Some(\"Lifetime name cannot start with a number\"))\n             }\n \n             TK::Semi => SEMI,\n@@ -217,57 +178,56 @@ fn rustc_token_kind_to_syntax_kind(\n \n     return (syntax_kind, None);\n \n-    fn match_literal_kind(kind: &rustc_lexer::LiteralKind) -> (SyntaxKind, Option<TokenizeError>) {\n+    fn match_literal_kind(kind: &rustc_lexer::LiteralKind) -> (SyntaxKind, Option<&'static str>) {\n         use rustc_lexer::LiteralKind as LK;\n-        use TokenizeError as TE;\n \n         #[rustfmt::skip]\n         let syntax_kind = match *kind {\n             LK::Int { empty_int: false, .. } => INT_NUMBER,\n             LK::Int { empty_int: true, .. } => {\n-                return (INT_NUMBER, Some(TE::EmptyInt))\n+                return (INT_NUMBER, Some(\"Missing digits after the integer base prefix\"))\n             }\n \n             LK::Float { empty_exponent: false, .. } => FLOAT_NUMBER,\n             LK::Float { empty_exponent: true, .. } => {\n-                return (FLOAT_NUMBER, Some(TE::EmptyExponent))\n+                return (FLOAT_NUMBER, Some(\"Missing digits after the exponent symbol\"))\n             }\n \n             LK::Char { terminated: true } => CHAR,\n             LK::Char { terminated: false } => {\n-                return (CHAR, Some(TE::UnterminatedChar))\n+                return (CHAR, Some(\"Missing trailing `'` symbol to terminate the character literal\"))\n             }\n \n             LK::Byte { terminated: true } => BYTE,\n             LK::Byte { terminated: false } => {\n-                return (BYTE, Some(TE::UnterminatedByte))\n+                return (BYTE, Some(\"Missing trailing `'` symbol to terminate the byte literal\"))\n             }\n \n             LK::Str { terminated: true } => STRING,\n             LK::Str { terminated: false } => {\n-                return (STRING, Some(TE::UnterminatedString))\n+                return (STRING, Some(\"Missing trailing `\\\"` symbol to terminate the string literal\"))\n             }\n \n \n             LK::ByteStr { terminated: true } => BYTE_STRING,\n             LK::ByteStr { terminated: false } => {\n-                return (BYTE_STRING, Some(TE::UnterminatedByteString))\n+                return (BYTE_STRING, Some(\"Missing trailing `\\\"` symbol to terminate the byte string literal\"))\n             }\n \n             LK::RawStr { started: true, terminated: true, .. } => RAW_STRING,\n             LK::RawStr { started: true, terminated: false, .. } => {\n-                return (RAW_STRING, Some(TE::UnterminatedRawString))\n+                return (RAW_STRING, Some(\"Missing trailing `\\\"` with `#` symbols to terminate the raw string literal\"))\n             }\n             LK::RawStr { started: false, .. } => {\n-                return (RAW_STRING, Some(TE::UnstartedRawString))\n+                return (RAW_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\"))\n             }\n \n             LK::RawByteStr { started: true, terminated: true, .. } => RAW_BYTE_STRING,\n             LK::RawByteStr { started: true, terminated: false, .. } => {\n-                return (RAW_BYTE_STRING, Some(TE::UnterminatedRawByteString))\n+                return (RAW_BYTE_STRING, Some(\"Missing trailing `\\\"` with `#` symbols to terminate the raw byte string literal\"))\n             }\n             LK::RawByteStr { started: false, .. } => {\n-                return (RAW_BYTE_STRING, Some(TE::UnstartedRawByteString))\n+                return (RAW_BYTE_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\"))\n             }\n         };\n "}, {"sha": "41a355ec7a17e65c4a199971d20bcaed73f3a614", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -87,7 +87,7 @@ fn reparse_block<'node>(\n     edit: &AtomTextEdit,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     let (node, reparser) = find_reparsable_node(root, edit.delete)?;\n-    let text = get_text_after_edit(node.clone().into(), &edit);\n+    let text = get_text_after_edit(node.clone().into(), edit);\n \n     let (tokens, new_lexer_errors) = tokenize(&text);\n     if !is_balanced(&tokens) {\n@@ -162,20 +162,27 @@ fn is_balanced(tokens: &[Token]) -> bool {\n fn merge_errors(\n     old_errors: Vec<SyntaxError>,\n     new_errors: Vec<SyntaxError>,\n-    old_range: TextRange,\n+    range_before_reparse: TextRange,\n     edit: &AtomTextEdit,\n ) -> Vec<SyntaxError> {\n     let mut res = Vec::new();\n-    for e in old_errors {\n-        if e.offset() <= old_range.start() {\n-            res.push(e)\n-        } else if e.offset() >= old_range.end() {\n-            res.push(e.add_offset(TextUnit::of_str(&edit.insert), edit.delete.len()));\n+\n+    for old_err in old_errors {\n+        let old_err_range = *old_err.range();\n+        // FIXME: make sure that .start() was here previously by a mistake\n+        if old_err_range.end() <= range_before_reparse.start() {\n+            res.push(old_err);\n+        } else if old_err_range.start() >= range_before_reparse.end() {\n+            let inserted_len = TextUnit::of_str(&edit.insert);\n+            res.push(old_err.with_range((old_err_range + inserted_len) - edit.delete.len()));\n+            // Note: extra parens are intentional to prevent uint underflow, HWAB (here was a bug)\n         }\n     }\n-    for e in new_errors {\n-        res.push(e.add_offset(old_range.start(), 0.into()));\n-    }\n+    res.extend(new_errors.into_iter().map(|new_err| {\n+        // fighting borrow checker with a variable ;)\n+        let offseted_range = *new_err.range() + range_before_reparse.start();\n+        new_err.with_range(offseted_range)\n+    }));\n     res\n }\n "}, {"sha": "460552103c1621e84ae6d86bc0fbb134b563b9a9", "filename": "crates/ra_syntax/src/syntax_error.rs", "status": "modified", "additions": 26, "deletions": 188, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -1,209 +1,47 @@\n-//! FIXME: write short doc here\n+//! Module that defines `SyntaxError`.\n \n use std::fmt;\n \n-use ra_parser::ParseError;\n-\n-use crate::{validation::EscapeError, TextRange, TextUnit, TokenizeError};\n+use crate::{TextRange, TextUnit};\n \n+/// Represents the result of unsuccessful tokenization, parsing\n+/// or semmantical analyzis.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct SyntaxError {\n-    kind: SyntaxErrorKind,\n-    location: Location,\n-}\n-\n-// FIXME: Location should be just `Location(TextRange)`\n-// TextUnit enum member just unnecessarily compicates things,\n-// we should'n treat it specially, it just as a `TextRange { start: x, end: x + 1 }`\n-// see `location_to_range()` in ra_ide/src/diagnostics\n-#[derive(Clone, PartialEq, Eq, Hash)]\n-pub enum Location {\n-    Offset(TextUnit),\n-    Range(TextRange),\n-}\n-\n-impl From<TextUnit> for Location {\n-    fn from(offset: TextUnit) -> Location {\n-        Location::Offset(offset)\n-    }\n-}\n-\n-impl From<TextRange> for Location {\n-    fn from(range: TextRange) -> Location {\n-        Location::Range(range)\n-    }\n-}\n-\n-impl fmt::Debug for Location {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match self {\n-            Location::Offset(it) => fmt::Debug::fmt(it, f),\n-            Location::Range(it) => fmt::Debug::fmt(it, f),\n-        }\n-    }\n-}\n+pub struct SyntaxError(String, TextRange);\n+\n+// FIXME: there was an unused SyntaxErrorKind previously (before this enum was removed)\n+// It was introduced in this PR: https://github.com/rust-analyzer/rust-analyzer/pull/846/files#diff-827da9b03b8f9faa1bade5cdd44d5dafR95\n+// but it was not removed by a mistake.\n+//\n+// So, we need to find a place where to stick validation for attributes in match clauses.\n+// Code before refactor:\n+// InvalidMatchInnerAttr => {\n+//    write!(f, \"Inner attributes are only allowed directly after the opening brace of the match expression\")\n+// }\n \n impl SyntaxError {\n-    pub fn new<L: Into<Location>>(kind: SyntaxErrorKind, loc: L) -> SyntaxError {\n-        SyntaxError { kind, location: loc.into() }\n+    pub fn new(message: impl Into<String>, range: TextRange) -> Self {\n+        Self(message.into(), range)\n     }\n-\n-    pub fn kind(&self) -> SyntaxErrorKind {\n-        self.kind.clone()\n+    pub fn new_at_offset(message: impl Into<String>, offset: TextUnit) -> Self {\n+        Self(message.into(), TextRange::offset_len(offset, 1.into()))\n     }\n \n-    pub fn location(&self) -> Location {\n-        self.location.clone()\n+    pub fn message(&self) -> &str {\n+        &self.0\n     }\n-\n-    pub fn offset(&self) -> TextUnit {\n-        match self.location {\n-            Location::Offset(offset) => offset,\n-            Location::Range(range) => range.start(),\n-        }\n+    pub fn range(&self) -> &TextRange {\n+        &self.1\n     }\n \n-    pub fn add_offset(mut self, plus_offset: TextUnit, minus_offset: TextUnit) -> SyntaxError {\n-        self.location = match self.location {\n-            Location::Range(range) => Location::Range(range + plus_offset - minus_offset),\n-            Location::Offset(offset) => Location::Offset(offset + plus_offset - minus_offset),\n-        };\n-\n+    pub fn with_range(mut self, range: TextRange) -> Self {\n+        self.1 = range;\n         self\n     }\n-\n-    pub fn debug_dump(&self, acc: &mut impl fmt::Write) {\n-        writeln!(acc, \"error {:?}: {}\", self.location(), self.kind()).unwrap();\n-    }\n }\n \n impl fmt::Display for SyntaxError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.kind.fmt(f)\n-    }\n-}\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum SyntaxErrorKind {\n-    ParseError(ParseError),\n-    EscapeError(EscapeError),\n-    TokenizeError(TokenizeError),\n-    // FIXME: the obvious pattern of this enum dictates that the following enum variants\n-    // should be wrapped into something like `SemmanticError(SemmanticError)`\n-    // or `ValidateError(ValidateError)` or `SemmanticValidateError(...)`\n-    InvalidBlockAttr,\n-    InvalidMatchInnerAttr,\n-    InvalidTupleIndexFormat,\n-    VisibilityNotAllowed,\n-    InclusiveRangeMissingEnd,\n-}\n-\n-impl fmt::Display for SyntaxErrorKind {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        use self::SyntaxErrorKind::*;\n-        match self {\n-            InvalidBlockAttr => {\n-                write!(f, \"A block in this position cannot accept inner attributes\")\n-            }\n-            InvalidMatchInnerAttr => {\n-                write!(f, \"Inner attributes are only allowed directly after the opening brace of the match expression\")\n-            }\n-            InvalidTupleIndexFormat => {\n-                write!(f, \"Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix\")\n-            }\n-            ParseError(msg) => write!(f, \"{}\", msg.0),\n-            EscapeError(err) => write!(f, \"{}\", err),\n-            TokenizeError(err) => write!(f, \"{}\", err),\n-            VisibilityNotAllowed => {\n-                write!(f, \"unnecessary visibility qualifier\")\n-            }\n-            InclusiveRangeMissingEnd => {\n-                write!(f, \"An inclusive range must have an end expression\")\n-            }\n-        }\n-    }\n-}\n-\n-impl fmt::Display for TokenizeError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        #[rustfmt::skip]\n-        let msg = match self {\n-            TokenizeError::EmptyInt => {\n-                \"Missing digits after the integer base prefix\"\n-            }\n-            TokenizeError::EmptyExponent => {\n-                \"Missing digits after the exponent symbol\"\n-            }\n-            TokenizeError::UnterminatedBlockComment => {\n-                \"Missing trailing `*/` symbols to terminate the block comment\"\n-            }\n-            TokenizeError::UnterminatedChar => {\n-                \"Missing trailing `'` symbol to terminate the character literal\"\n-            }\n-            TokenizeError::UnterminatedByte => {\n-                \"Missing trailing `'` symbol to terminate the byte literal\"\n-            }\n-            TokenizeError::UnterminatedString => {\n-                \"Missing trailing `\\\"` symbol to terminate the string literal\"\n-            }\n-            TokenizeError::UnterminatedByteString => {\n-                \"Missing trailing `\\\"` symbol to terminate the byte string literal\"\n-            }\n-            TokenizeError::UnterminatedRawString => {\n-                \"Missing trailing `\\\"` with `#` symbols to terminate the raw string literal\"\n-            }\n-            TokenizeError::UnterminatedRawByteString => {\n-                \"Missing trailing `\\\"` with `#` symbols to terminate the raw byte string literal\"\n-            }\n-            TokenizeError::UnstartedRawString => {\n-                \"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\"\n-            }\n-            TokenizeError::UnstartedRawByteString => {\n-                \"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\"\n-            }\n-            TokenizeError::LifetimeStartsWithNumber => {\n-                \"Lifetime name cannot start with a number\"\n-            }\n-        };\n-        write!(f, \"{}\", msg)\n-    }\n-}\n-\n-impl fmt::Display for EscapeError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let msg = match self {\n-            EscapeError::ZeroChars => \"Empty literal\",\n-            EscapeError::MoreThanOneChar => \"Literal should be one character long\",\n-            EscapeError::LoneSlash => \"Character must be escaped: '\\\\'\",\n-            EscapeError::InvalidEscape => \"Invalid escape sequence\",\n-            EscapeError::BareCarriageReturn => \"Character must be escaped: '\\r'\",\n-            EscapeError::EscapeOnlyChar => \"Character must be escaped\",\n-            EscapeError::TooShortHexEscape => \"Escape sequence should have two digits\",\n-            EscapeError::InvalidCharInHexEscape => \"Escape sequence should be a hexadecimal number\",\n-            EscapeError::OutOfRangeHexEscape => \"Escape sequence should be ASCII\",\n-            EscapeError::NoBraceInUnicodeEscape => \"Invalid escape sequence\",\n-            EscapeError::InvalidCharInUnicodeEscape => \"Invalid escape sequence\",\n-            EscapeError::EmptyUnicodeEscape => \"Invalid escape sequence\",\n-            EscapeError::UnclosedUnicodeEscape => \"Missing '}'\",\n-            EscapeError::LeadingUnderscoreUnicodeEscape => \"Invalid escape sequence\",\n-            EscapeError::OverlongUnicodeEscape => {\n-                \"Unicode escape sequence should have at most 6 digits\"\n-            }\n-            EscapeError::LoneSurrogateUnicodeEscape => {\n-                \"Unicode escape code should not be a surrogate\"\n-            }\n-            EscapeError::OutOfRangeUnicodeEscape => {\n-                \"Unicode escape code should be at most 0x10FFFF\"\n-            }\n-            EscapeError::UnicodeEscapeInByte => \"Unicode escapes are not allowed in bytes\",\n-            EscapeError::NonAsciiCharInByte => \"Non ASCII characters are not allowed in bytes\",\n-        };\n-        write!(f, \"{}\", msg)\n-    }\n-}\n-\n-impl From<EscapeError> for SyntaxErrorKind {\n-    fn from(err: EscapeError) -> Self {\n-        SyntaxErrorKind::EscapeError(err)\n+        self.0.fmt(f)\n     }\n }"}, {"sha": "2516689967e38892da65586aac76f510bb3e9e62", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -6,15 +6,10 @@\n //! The *real* implementation is in the (language-agnostic) `rowan` crate, this\n //! module just wraps its API.\n \n-use ra_parser::ParseError;\n+pub(crate) use rowan::{GreenNode, GreenToken};\n use rowan::{GreenNodeBuilder, Language};\n \n-use crate::{\n-    syntax_error::{SyntaxError, SyntaxErrorKind},\n-    Parse, SmolStr, SyntaxKind, TextUnit,\n-};\n-\n-pub(crate) use rowan::{GreenNode, GreenToken};\n+use crate::{Parse, SmolStr, SyntaxError, SyntaxKind, TextUnit};\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum RustLanguage {}\n@@ -73,8 +68,7 @@ impl SyntaxTreeBuilder {\n         self.inner.finish_node()\n     }\n \n-    pub fn error(&mut self, error: ParseError, text_pos: TextUnit) {\n-        let error = SyntaxError::new(SyntaxErrorKind::ParseError(error), text_pos);\n-        self.errors.push(error)\n+    pub fn error(&mut self, error: ra_parser::ParseError, text_pos: TextUnit) {\n+        self.errors.push(SyntaxError::new_at_offset(error.0, text_pos))\n     }\n }"}, {"sha": "2533d0c448c0592d100dd5807e2b6f8e30e4a7f0", "filename": "crates/ra_syntax/src/tests.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftests.rs?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -5,7 +5,7 @@ use std::{\n \n use test_utils::{collect_tests, dir_tests, project_dir, read_text};\n \n-use crate::{fuzz, tokenize, Location, SourceFile, SyntaxError, TextRange, Token};\n+use crate::{fuzz, tokenize, SourceFile, SyntaxError, Token};\n \n #[test]\n fn lexer_tests() {\n@@ -128,25 +128,14 @@ fn dump_tokens_and_errors(tokens: &[Token], errors: &[SyntaxError], text: &str)\n         writeln!(acc, \"{:?} {} {:?}\", token.kind, token_len, token_text).unwrap();\n     }\n     for err in errors {\n-        let err_range = location_to_range(err.location());\n         writeln!(\n             acc,\n             \"> error{:?} token({:?}) msg({})\",\n-            err.location(),\n-            &text[err_range],\n-            err.kind()\n+            err.range(),\n+            &text[*err.range()],\n+            err.message()\n         )\n         .unwrap();\n     }\n-    return acc;\n-\n-    // FIXME: copy-pasted this from `ra_ide/src/diagnostics.rs`\n-    // `Location` will be refactored soon in new PR, see todos here:\n-    // https://github.com/rust-analyzer/rust-analyzer/issues/223\n-    fn location_to_range(location: Location) -> TextRange {\n-        match location {\n-            Location::Offset(offset) => TextRange::offset_len(offset, 1.into()),\n-            Location::Range(range) => range,\n-        }\n-    }\n+    acc\n }"}, {"sha": "863859dcaa2437544d9ec3169c5842d78e2ac13a", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 71, "deletions": 84, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -5,92 +5,76 @@ mod block;\n use rustc_lexer::unescape;\n \n use crate::{\n-    ast, match_ast, AstNode, SyntaxError, SyntaxErrorKind,\n+    ast, match_ast, AstNode, SyntaxError,\n     SyntaxKind::{BYTE, BYTE_STRING, CHAR, CONST_DEF, FN_DEF, INT_NUMBER, STRING, TYPE_ALIAS_DEF},\n     SyntaxNode, SyntaxToken, TextUnit, T,\n };\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub enum EscapeError {\n-    ZeroChars,\n-    MoreThanOneChar,\n-    LoneSlash,\n-    InvalidEscape,\n-    BareCarriageReturn,\n-    EscapeOnlyChar,\n-    TooShortHexEscape,\n-    InvalidCharInHexEscape,\n-    OutOfRangeHexEscape,\n-    NoBraceInUnicodeEscape,\n-    InvalidCharInUnicodeEscape,\n-    EmptyUnicodeEscape,\n-    UnclosedUnicodeEscape,\n-    LeadingUnderscoreUnicodeEscape,\n-    OverlongUnicodeEscape,\n-    LoneSurrogateUnicodeEscape,\n-    OutOfRangeUnicodeEscape,\n-    UnicodeEscapeInByte,\n-    NonAsciiCharInByte,\n-}\n+fn rustc_unescape_error_to_string(err: unescape::EscapeError) -> &'static str {\n+    use unescape::EscapeError as EE;\n \n-impl From<rustc_lexer::unescape::EscapeError> for EscapeError {\n-    fn from(err: rustc_lexer::unescape::EscapeError) -> Self {\n-        match err {\n-            rustc_lexer::unescape::EscapeError::ZeroChars => EscapeError::ZeroChars,\n-            rustc_lexer::unescape::EscapeError::MoreThanOneChar => EscapeError::MoreThanOneChar,\n-            rustc_lexer::unescape::EscapeError::LoneSlash => EscapeError::LoneSlash,\n-            rustc_lexer::unescape::EscapeError::InvalidEscape => EscapeError::InvalidEscape,\n-            rustc_lexer::unescape::EscapeError::BareCarriageReturn\n-            | rustc_lexer::unescape::EscapeError::BareCarriageReturnInRawString => {\n-                EscapeError::BareCarriageReturn\n-            }\n-            rustc_lexer::unescape::EscapeError::EscapeOnlyChar => EscapeError::EscapeOnlyChar,\n-            rustc_lexer::unescape::EscapeError::TooShortHexEscape => EscapeError::TooShortHexEscape,\n-            rustc_lexer::unescape::EscapeError::InvalidCharInHexEscape => {\n-                EscapeError::InvalidCharInHexEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::OutOfRangeHexEscape => {\n-                EscapeError::OutOfRangeHexEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::NoBraceInUnicodeEscape => {\n-                EscapeError::NoBraceInUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::InvalidCharInUnicodeEscape => {\n-                EscapeError::InvalidCharInUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::EmptyUnicodeEscape => {\n-                EscapeError::EmptyUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::UnclosedUnicodeEscape => {\n-                EscapeError::UnclosedUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::LeadingUnderscoreUnicodeEscape => {\n-                EscapeError::LeadingUnderscoreUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::OverlongUnicodeEscape => {\n-                EscapeError::OverlongUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::LoneSurrogateUnicodeEscape => {\n-                EscapeError::LoneSurrogateUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::OutOfRangeUnicodeEscape => {\n-                EscapeError::OutOfRangeUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::UnicodeEscapeInByte => {\n-                EscapeError::UnicodeEscapeInByte\n-            }\n-            rustc_lexer::unescape::EscapeError::NonAsciiCharInByte\n-            | rustc_lexer::unescape::EscapeError::NonAsciiCharInByteString => {\n-                EscapeError::NonAsciiCharInByte\n-            }\n+    #[rustfmt::skip]\n+    let err_message = match err {\n+        EE::ZeroChars => {\n+            \"Literal must not be empty\"\n         }\n-    }\n-}\n+        EE::MoreThanOneChar => {\n+            \"Literal must be one character long\"\n+        }\n+        EE::LoneSlash => {\n+            \"Character must be escaped: `\\\\`\"\n+        }\n+        EE::InvalidEscape => {\n+            \"Invalid escape\"\n+        }\n+        EE::BareCarriageReturn | EE::BareCarriageReturnInRawString => {\n+            \"Character must be escaped: `\\r`\"\n+        }\n+        EE::EscapeOnlyChar => {\n+            \"Escape character `\\\\` must be escaped itself\"\n+        }\n+        EE::TooShortHexEscape => {\n+            \"ASCII hex escape code must have exactly two digits\"\n+        }\n+        EE::InvalidCharInHexEscape => {\n+            \"ASCII hex escape code must contain only hex characters\"\n+        }\n+        EE::OutOfRangeHexEscape => {\n+            \"ASCII hex escape code must be at most 0x7F\"\n+        }\n+        EE::NoBraceInUnicodeEscape => {\n+            \"Missing `{` to begin the unicode escape\"\n+        }\n+        EE::InvalidCharInUnicodeEscape => {\n+            \"Unicode escape must contain only hex characters and underscores\"\n+        }\n+        EE::EmptyUnicodeEscape => {\n+            \"Unicode escape must not be empty\"\n+        }\n+        EE::UnclosedUnicodeEscape => {\n+            \"Missing '}' to terminate the unicode escape\"\n+        }\n+        EE::LeadingUnderscoreUnicodeEscape => {\n+            \"Unicode escape code must not begin with an underscore\"\n+        }\n+        EE::OverlongUnicodeEscape => {\n+            \"Unicode escape code must have at most 6 digits\"\n+        }\n+        EE::LoneSurrogateUnicodeEscape => {\n+            \"Unicode escape code must not be a surrogate\"\n+        }\n+        EE::OutOfRangeUnicodeEscape => {\n+            \"Unicode escape code must be at most 0x10FFFF\"\n+        }\n+        EE::UnicodeEscapeInByte => {\n+            \"Byte literals must not contain unicode escapes\"\n+        }\n+        EE::NonAsciiCharInByte | EE::NonAsciiCharInByteString => {\n+            \"Byte literals must not contain non-ASCII characters\"\n+        }\n+    };\n \n-impl From<rustc_lexer::unescape::EscapeError> for SyntaxErrorKind {\n-    fn from(err: rustc_lexer::unescape::EscapeError) -> Self {\n-        SyntaxErrorKind::EscapeError(err.into())\n-    }\n+    err_message\n }\n \n pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n@@ -118,16 +102,18 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n }\n \n fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n+    // FIXME: move this function to outer scope (https://github.com/rust-analyzer/rust-analyzer/pull/2834#discussion_r366196658)\n     fn unquote(text: &str, prefix_len: usize, end_delimiter: char) -> Option<&str> {\n         text.rfind(end_delimiter).and_then(|end| text.get(prefix_len..end))\n     }\n \n     let token = literal.token();\n     let text = token.text().as_str();\n \n+    // FIXME: lift this lambda refactor to `fn` (https://github.com/rust-analyzer/rust-analyzer/pull/2834#discussion_r366199205)\n     let mut push_err = |prefix_len, (off, err): (usize, unescape::EscapeError)| {\n         let off = token.text_range().start() + TextUnit::from_usize(off + prefix_len);\n-        acc.push(SyntaxError::new(err.into(), off));\n+        acc.push(SyntaxError::new_at_offset(rustc_unescape_error_to_string(err), off));\n     };\n \n     match token.kind() {\n@@ -195,7 +181,8 @@ fn validate_numeric_name(name_ref: Option<ast::NameRef>, errors: &mut Vec<Syntax\n     if let Some(int_token) = int_token(name_ref) {\n         if int_token.text().chars().any(|c| !c.is_digit(10)) {\n             errors.push(SyntaxError::new(\n-                SyntaxErrorKind::InvalidTupleIndexFormat,\n+                \"Tuple (struct) field access is only allowed through \\\n+                decimal integers with no underscores or suffix\",\n                 int_token.text_range(),\n             ));\n         }\n@@ -215,21 +202,21 @@ fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n         FN_DEF | CONST_DEF | TYPE_ALIAS_DEF => (),\n         _ => return,\n     }\n+\n     let impl_block = match parent.parent().and_then(|it| it.parent()).and_then(ast::ImplBlock::cast)\n     {\n         Some(it) => it,\n         None => return,\n     };\n     if impl_block.target_trait().is_some() {\n-        errors\n-            .push(SyntaxError::new(SyntaxErrorKind::VisibilityNotAllowed, vis.syntax.text_range()))\n+        errors.push(SyntaxError::new(\"Unnecessary visibility qualifier\", vis.syntax.text_range()));\n     }\n }\n \n fn validate_range_expr(expr: ast::RangeExpr, errors: &mut Vec<SyntaxError>) {\n     if expr.op_kind() == Some(ast::RangeOp::Inclusive) && expr.end().is_none() {\n         errors.push(SyntaxError::new(\n-            SyntaxErrorKind::InclusiveRangeMissingEnd,\n+            \"An inclusive range must have an end expression\",\n             expr.syntax().text_range(),\n         ));\n     }"}, {"sha": "8e962ab5b77cd42f2dd3c73854267da407ff490e", "filename": "crates/ra_syntax/src/validation/block.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -1,9 +1,8 @@\n-//! FIXME: write short doc here\n+//! Logic for validating block expressions i.e. `ast::BlockExpr`.\n \n use crate::{\n     ast::{self, AstNode, AttrsOwner},\n     SyntaxError,\n-    SyntaxErrorKind::*,\n     SyntaxKind::*,\n };\n \n@@ -15,10 +14,11 @@ pub(crate) fn validate_block_expr(expr: ast::BlockExpr, errors: &mut Vec<SyntaxE\n         }\n     }\n     if let Some(block) = expr.block() {\n-        errors.extend(\n-            block\n-                .attrs()\n-                .map(|attr| SyntaxError::new(InvalidBlockAttr, attr.syntax().text_range())),\n-        )\n+        errors.extend(block.attrs().map(|attr| {\n+            SyntaxError::new(\n+                \"A block in this position cannot accept inner attributes\",\n+                attr.syntax().text_range(),\n+            )\n+        }))\n     }\n }"}, {"sha": "caf794ed2b8566fb9e85043791fc80682a6e7f2b", "filename": "crates/ra_syntax/test_data/parser/err/0000_struct_field_missing_comma.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -31,4 +31,4 @@ SOURCE_FILE@[0; 34)\n                 IDENT@[29; 32) \"u32\"\n       WHITESPACE@[32; 33) \"\\n\"\n       R_CURLY@[33; 34) \"}\"\n-error 21: expected COMMA\n+error [21; 22): expected COMMA"}, {"sha": "01d71db8f6772a9e24b12488f35889df5834cd18", "filename": "crates/ra_syntax/test_data/parser/err/0001_item_recovery_in_file.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -14,5 +14,5 @@ SOURCE_FILE@[0; 21)\n     RECORD_FIELD_DEF_LIST@[19; 21)\n       L_CURLY@[19; 20) \"{\"\n       R_CURLY@[20; 21) \"}\"\n-error 0: expected an item\n-error 3: expected an item\n+error [0; 1): expected an item\n+error [3; 4): expected an item"}, {"sha": "d493d60d4159ba5fde8ceae44fecbd62b5a9ec76", "filename": "crates/ra_syntax/test_data/parser/err/0002_duplicate_shebang.txt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -26,14 +26,14 @@ SOURCE_FILE@[0; 42)\n     NAME@[36; 41)\n       IDENT@[36; 41) \"rusti\"\n   WHITESPACE@[41; 42) \"\\n\"\n-error 23: expected `[`\n-error 23: expected an item\n-error 27: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error 28: expected SEMI\n-error 31: expected EXCL\n-error 31: expected `{`, `[`, `(`\n-error 31: expected SEMI\n-error 31: expected an item\n-error 35: expected EXCL\n-error 41: expected `{`, `[`, `(`\n-error 41: expected SEMI\n+error [23; 24): expected `[`\n+error [23; 24): expected an item\n+error [27; 28): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n+error [28; 29): expected SEMI\n+error [31; 32): expected EXCL\n+error [31; 32): expected `{`, `[`, `(`\n+error [31; 32): expected SEMI\n+error [31; 32): expected an item\n+error [35; 36): expected EXCL\n+error [41; 42): expected `{`, `[`, `(`\n+error [41; 42): expected SEMI"}, {"sha": "b25010b503c87110217c92884108dc49bd164978", "filename": "crates/ra_syntax/test_data/parser/err/0003_C++_semicolon.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -35,5 +35,5 @@ SOURCE_FILE@[0; 40)\n       R_CURLY@[38; 39) \"}\"\n   ERROR@[39; 40)\n     SEMI@[39; 40) \";\"\n-error 39: expected item, found `;`\n+error [39; 40): expected item, found `;`\n consider removing this semicolon"}, {"sha": "16a542b95e69e20b3a3895d5b0d817dbdbc71755", "filename": "crates/ra_syntax/test_data/parser/err/0004_use_path_bad_segment.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -13,4 +13,4 @@ SOURCE_FILE@[0; 12)\n           ERROR@[9; 11)\n             INT_NUMBER@[9; 11) \"92\"\n     SEMI@[11; 12) \";\"\n-error 9: expected identifier\n+error [9; 10): expected identifier"}, {"sha": "f20e6e911bb11628fe0c33c4a8756310152db557", "filename": "crates/ra_syntax/test_data/parser/err/0005_attribute_recover.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0005_attribute_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0005_attribute_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0005_attribute_recover.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -55,6 +55,6 @@ SOURCE_FILE@[0; 54)\n         WHITESPACE@[51; 52) \"\\n\"\n         R_CURLY@[52; 53) \"}\"\n   WHITESPACE@[53; 54) \"\\n\"\n-error 53: expected R_PAREN\n-error 53: expected `]`\n-error 53: expected an item\n+error [53; 54): expected R_PAREN\n+error [53; 54): expected `]`\n+error [53; 54): expected an item"}, {"sha": "b9d7bbe45938e4456d23e04d381b3fcb0facd596", "filename": "crates/ra_syntax/test_data/parser/err/0006_named_field_recovery.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -64,11 +64,11 @@ SOURCE_FILE@[0; 74)\n       WHITESPACE@[71; 72) \"\\n\"\n       R_CURLY@[72; 73) \"}\"\n   WHITESPACE@[73; 74) \"\\n\"\n-error 31: expected field declaration\n-error 33: expected COMMA\n-error 38: expected field declaration\n-error 39: expected COMMA\n-error 40: expected field declaration\n-error 41: expected COMMA\n-error 42: expected field declaration\n-error 43: expected COMMA\n+error [31; 32): expected field declaration\n+error [33; 34): expected COMMA\n+error [38; 39): expected field declaration\n+error [39; 40): expected COMMA\n+error [40; 41): expected field declaration\n+error [41; 42): expected COMMA\n+error [42; 43): expected field declaration\n+error [43; 44): expected COMMA"}, {"sha": "41b8e3890f1be29b6fcc124625498883483a4762", "filename": "crates/ra_syntax/test_data/parser/err/0007_stray_curly_in_file.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -28,6 +28,6 @@ SOURCE_FILE@[0; 31)\n   ERROR@[29; 30)\n     R_CURLY@[29; 30) \"}\"\n   WHITESPACE@[30; 31) \"\\n\"\n-error 0: unmatched `}`\n-error 14: unmatched `}`\n-error 29: unmatched `}`\n+error [0; 1): unmatched `}`\n+error [14; 15): unmatched `}`\n+error [29; 30): unmatched `}`"}, {"sha": "071786b3ce52227c59d30645fabb9ad6eef5b8bb", "filename": "crates/ra_syntax/test_data/parser/err/0008_item_block_recovery.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -76,6 +76,6 @@ SOURCE_FILE@[0; 95)\n         WHITESPACE@[92; 93) \"\\n\"\n         R_CURLY@[93; 94) \"}\"\n   WHITESPACE@[94; 95) \"\\n\"\n-error 17: expected EXCL\n-error 19: expected SEMI\n-error 20: expected an item\n+error [17; 18): expected EXCL\n+error [19; 20): expected SEMI\n+error [20; 21): expected an item"}, {"sha": "04a091fb9bbb25a7c33f23fa8ce6c59b7cb224ca", "filename": "crates/ra_syntax/test_data/parser/err/0009_broken_struct_type_parameter.txt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -45,14 +45,14 @@ SOURCE_FILE@[0; 43)\n       IDENT@[40; 41) \"T\"\n     SEMI@[41; 42) \";\"\n   WHITESPACE@[42; 43) \"\\n\"\n-error 9: expected type parameter\n-error 11: expected COMMA\n-error 11: expected R_ANGLE\n-error 11: expected `;`, `{`, or `(`\n-error 12: expected an item\n-error 14: expected an item\n-error 15: expected an item\n-error 17: expected an item\n-error 24: expected SEMI\n-error 24: expected expression\n-error 25: expected SEMI\n+error [9; 10): expected type parameter\n+error [11; 12): expected COMMA\n+error [11; 12): expected R_ANGLE\n+error [11; 12): expected `;`, `{`, or `(`\n+error [12; 13): expected an item\n+error [14; 15): expected an item\n+error [15; 16): expected an item\n+error [17; 18): expected an item\n+error [24; 25): expected SEMI\n+error [24; 25): expected expression\n+error [25; 26): expected SEMI"}, {"sha": "e2316c52d5e831b7ec6711be897b7445388d8c11", "filename": "crates/ra_syntax/test_data/parser/err/0010_unsafe_lambda_block.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -40,4 +40,4 @@ SOURCE_FILE@[0; 42)\n         WHITESPACE@[39; 40) \"\\n\"\n         R_CURLY@[40; 41) \"}\"\n   WHITESPACE@[41; 42) \"\\n\"\n-error 24: expected `{`\n+error [24; 25): expected `{`"}, {"sha": "f082ed40dc5a72bca24842942dd6f72ecf70edff", "filename": "crates/ra_syntax/test_data/parser/err/0011_extern_struct.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -10,4 +10,4 @@ SOURCE_FILE@[0; 19)\n       IDENT@[14; 17) \"Foo\"\n     SEMI@[17; 18) \";\"\n   WHITESPACE@[18; 19) \"\\n\"\n-error 6: expected existential, fn, trait or impl\n+error [6; 7): expected existential, fn, trait or impl"}, {"sha": "06c9f7cf80b5918bd5121c2bfd9573810cc8ef7d", "filename": "crates/ra_syntax/test_data/parser/err/0013_invalid_type.txt", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -69,21 +69,21 @@ SOURCE_FILE@[0; 86)\n   ERROR@[83; 84)\n     SEMI@[83; 84) \";\"\n   WHITESPACE@[84; 86) \"\\n\\n\"\n-error 67: expected type\n-error 68: expected COMMA\n-error 68: expected R_ANGLE\n-error 68: expected COMMA\n-error 68: expected R_ANGLE\n-error 68: expected COMMA\n-error 68: expected R_ANGLE\n-error 68: expected COMMA\n-error 72: expected COMMA\n-error 72: expected a type\n-error 72: expected R_PAREN\n-error 72: expected SEMI\n-error 72: expected an item\n-error 73: expected an item\n-error 79: expected an item\n-error 80: expected an item\n-error 82: expected an item\n-error 83: expected an item\n+error [67; 68): expected type\n+error [68; 69): expected COMMA\n+error [68; 69): expected R_ANGLE\n+error [68; 69): expected COMMA\n+error [68; 69): expected R_ANGLE\n+error [68; 69): expected COMMA\n+error [68; 69): expected R_ANGLE\n+error [68; 69): expected COMMA\n+error [72; 73): expected COMMA\n+error [72; 73): expected a type\n+error [72; 73): expected R_PAREN\n+error [72; 73): expected SEMI\n+error [72; 73): expected an item\n+error [73; 74): expected an item\n+error [79; 80): expected an item\n+error [80; 81): expected an item\n+error [82; 83): expected an item\n+error [83; 84): expected an item"}, {"sha": "690fdd3224a17e7101898ebffed5c75240272470", "filename": "crates/ra_syntax/test_data/parser/err/0014_where_no_bounds.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0014_where_no_bounds.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0014_where_no_bounds.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0014_where_no_bounds.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -29,4 +29,4 @@ SOURCE_FILE@[0; 23)\n         L_CURLY@[20; 21) \"{\"\n         R_CURLY@[21; 22) \"}\"\n   WHITESPACE@[22; 23) \"\\n\"\n-error 19: expected colon\n+error [19; 20): expected colon"}, {"sha": "583de5f00ba93f81d2b5cbe52373dee3543e3be8", "filename": "crates/ra_syntax/test_data/parser/err/0015_curly_in_params.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0015_curly_in_params.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0015_curly_in_params.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0015_curly_in_params.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -16,9 +16,9 @@ SOURCE_FILE@[0; 14)\n     WHITESPACE@[11; 12) \"\\n\"\n     R_CURLY@[12; 13) \"}\"\n   WHITESPACE@[13; 14) \"\\n\"\n-error 7: expected value parameter\n-error 7: expected R_PAREN\n-error 7: expected a block\n-error 7: unmatched `}`\n-error 8: expected an item\n-error 10: expected an item\n+error [7; 8): expected value parameter\n+error [7; 8): expected R_PAREN\n+error [7; 8): expected a block\n+error [7; 8): unmatched `}`\n+error [8; 9): expected an item\n+error [10; 11): expected an item"}, {"sha": "83bb0e0fe78a050a330064c324137713dddec3fa", "filename": "crates/ra_syntax/test_data/parser/err/0016_missing_semi.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -41,4 +41,4 @@ SOURCE_FILE@[0; 56)\n         WHITESPACE@[53; 54) \"\\n\"\n         R_CURLY@[54; 55) \"}\"\n   WHITESPACE@[55; 56) \"\\n\"\n-error 38: expected SEMI\n+error [38; 39): expected SEMI"}, {"sha": "7423c2d612ee27fc7eedf1237bc1b21c4e1ee6cc", "filename": "crates/ra_syntax/test_data/parser/err/0017_incomplete_binexpr.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -44,4 +44,4 @@ SOURCE_FILE@[0; 47)\n         WHITESPACE@[44; 45) \"\\n\"\n         R_CURLY@[45; 46) \"}\"\n   WHITESPACE@[46; 47) \"\\n\"\n-error 44: expected expression\n+error [44; 45): expected expression"}, {"sha": "81d4452540313d6faae71955804f1dee282060bd", "filename": "crates/ra_syntax/test_data/parser/err/0018_incomplete_fn.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -125,8 +125,8 @@ SOURCE_FILE@[0; 183)\n       WHITESPACE@[180; 181) \"\\n\"\n       R_CURLY@[181; 182) \"}\"\n   WHITESPACE@[182; 183) \"\\n\"\n-error 34: expected pattern\n-error 34: expected COLON\n-error 34: expected type\n-error 180: expected function arguments\n-error 180: expected a block\n+error [34; 35): expected pattern\n+error [34; 35): expected COLON\n+error [34; 35): expected type\n+error [180; 181): expected function arguments\n+error [180; 181): expected a block"}, {"sha": "3e6f82dc4a2393a1e79356e22392610e49ec5a4f", "filename": "crates/ra_syntax/test_data/parser/err/0019_let_recover.txt", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -95,13 +95,13 @@ SOURCE_FILE@[0; 139)\n         WHITESPACE@[136; 137) \"\\n\"\n         R_CURLY@[137; 138) \"}\"\n   WHITESPACE@[138; 139) \"\\n\"\n-error 24: expected expression\n-error 24: expected SEMI\n-error 49: expected pattern\n-error 49: expected SEMI\n-error 75: expected pattern\n-error 75: expected SEMI\n-error 98: expected pattern\n-error 98: expected SEMI\n-error 124: expected pattern\n-error 124: expected SEMI\n+error [24; 25): expected expression\n+error [24; 25): expected SEMI\n+error [49; 50): expected pattern\n+error [49; 50): expected SEMI\n+error [75; 76): expected pattern\n+error [75; 76): expected SEMI\n+error [98; 99): expected pattern\n+error [98; 99): expected SEMI\n+error [124; 125): expected pattern\n+error [124; 125): expected SEMI"}, {"sha": "1ef36c9bd1b472cad961b860151083858f77566c", "filename": "crates/ra_syntax/test_data/parser/err/0020_fn_recover.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0020_fn_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0020_fn_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0020_fn_recover.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -16,6 +16,6 @@ SOURCE_FILE@[0; 16)\n         L_CURLY@[13; 14) \"{\"\n         R_CURLY@[14; 15) \"}\"\n   WHITESPACE@[15; 16) \"\\n\"\n-error 2: expected a name\n-error 2: expected function arguments\n-error 2: expected a block\n+error [2; 3): expected a name\n+error [2; 3): expected function arguments\n+error [2; 3): expected a block"}, {"sha": "8035b87117cea24b3e3c3ff4b4e28885fff9e857", "filename": "crates/ra_syntax/test_data/parser/err/0021_incomplete_param.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -31,5 +31,5 @@ SOURCE_FILE@[0; 22)\n         WHITESPACE@[19; 20) \"\\n\"\n         R_CURLY@[20; 21) \"}\"\n   WHITESPACE@[21; 22) \"\\n\"\n-error 16: expected COLON\n-error 16: expected type\n+error [16; 17): expected COLON\n+error [16; 17): expected type"}, {"sha": "e4f318957947a8efca5ca07144f3a67f7255d806", "filename": "crates/ra_syntax/test_data/parser/err/0022_bad_exprs.txt", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -148,36 +148,36 @@ SOURCE_FILE@[0; 112)\n         WHITESPACE@[109; 110) \" \"\n         R_CURLY@[110; 111) \"}\"\n   WHITESPACE@[111; 112) \"\\n\"\n-error 16: expected expression\n-error 17: expected R_BRACK\n-error 17: expected SEMI\n-error 17: expected expression\n-error 18: expected SEMI\n-error 25: expected a name\n-error 26: expected `;`, `{`, or `(`\n-error 30: expected pattern\n-error 31: expected SEMI\n-error 53: expected expression\n-error 54: expected SEMI\n-error 54: expected expression\n-error 55: expected SEMI\n-error 60: expected type\n-error 60: expected `{`\n-error 60: expected expression\n-error 61: expected SEMI\n-error 65: expected pattern\n-error 65: expected SEMI\n-error 65: expected expression\n-error 92: expected expression\n-error 93: expected SEMI\n-error 93: expected expression\n-error 94: expected SEMI\n-error 95: expected expression\n-error 96: expected SEMI\n-error 96: expected expression\n-error 97: expected SEMI\n-error 103: expected a name\n-error 104: expected `{`\n-error 108: expected pattern\n-error 108: expected SEMI\n-error 108: expected expression\n+error [16; 17): expected expression\n+error [17; 18): expected R_BRACK\n+error [17; 18): expected SEMI\n+error [17; 18): expected expression\n+error [18; 19): expected SEMI\n+error [25; 26): expected a name\n+error [26; 27): expected `;`, `{`, or `(`\n+error [30; 31): expected pattern\n+error [31; 32): expected SEMI\n+error [53; 54): expected expression\n+error [54; 55): expected SEMI\n+error [54; 55): expected expression\n+error [55; 56): expected SEMI\n+error [60; 61): expected type\n+error [60; 61): expected `{`\n+error [60; 61): expected expression\n+error [61; 62): expected SEMI\n+error [65; 66): expected pattern\n+error [65; 66): expected SEMI\n+error [65; 66): expected expression\n+error [92; 93): expected expression\n+error [93; 94): expected SEMI\n+error [93; 94): expected expression\n+error [94; 95): expected SEMI\n+error [95; 96): expected expression\n+error [96; 97): expected SEMI\n+error [96; 97): expected expression\n+error [97; 98): expected SEMI\n+error [103; 104): expected a name\n+error [104; 105): expected `{`\n+error [108; 109): expected pattern\n+error [108; 109): expected SEMI\n+error [108; 109): expected expression"}, {"sha": "7616ca59c28037668e57177d20d924a7ba7f2c70", "filename": "crates/ra_syntax/test_data/parser/err/0023_mismatched_paren.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -40,5 +40,5 @@ SOURCE_FILE@[0; 94)\n   ERROR@[92; 93)\n     R_CURLY@[92; 93) \"}\"\n   WHITESPACE@[93; 94) \"\\n\"\n-error 49: unmatched `}`\n-error 92: unmatched `}`\n+error [49; 50): unmatched `}`\n+error [92; 93): unmatched `}`"}, {"sha": "c4170e9d8b6883882f993d9adace6e910ebce736", "filename": "crates/ra_syntax/test_data/parser/err/0024_many_type_parens.txt", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -290,32 +290,32 @@ SOURCE_FILE@[0; 240)\n         WHITESPACE@[237; 238) \"\\n\"\n         R_CURLY@[238; 239) \"}\"\n   WHITESPACE@[239; 240) \"\\n\"\n-error 88: expected COMMA\n-error 88: expected R_ANGLE\n-error 121: expected SEMI\n-error 121: expected expression\n-error 140: expected type\n-error 141: expected R_PAREN\n-error 141: expected COMMA\n-error 141: expected R_ANGLE\n-error 141: expected SEMI\n-error 146: expected SEMI\n-error 146: expected expression\n-error 147: expected SEMI\n-error 148: expected expression\n-error 149: expected SEMI\n-error 154: expected pattern\n-error 155: expected IN_KW\n-error 155: expected expression\n-error 157: expected a block\n-error 165: expected expression\n-error 168: expected expression\n-error 179: expected expression\n-error 180: expected COMMA\n-error 180: expected expression\n-error 180: expected R_PAREN\n-error 180: expected SEMI\n-error 215: expected COMMA\n-error 215: expected R_ANGLE\n-error 235: expected SEMI\n-error 235: expected expression\n+error [88; 89): expected COMMA\n+error [88; 89): expected R_ANGLE\n+error [121; 122): expected SEMI\n+error [121; 122): expected expression\n+error [140; 141): expected type\n+error [141; 142): expected R_PAREN\n+error [141; 142): expected COMMA\n+error [141; 142): expected R_ANGLE\n+error [141; 142): expected SEMI\n+error [146; 147): expected SEMI\n+error [146; 147): expected expression\n+error [147; 148): expected SEMI\n+error [148; 149): expected expression\n+error [149; 150): expected SEMI\n+error [154; 155): expected pattern\n+error [155; 156): expected IN_KW\n+error [155; 156): expected expression\n+error [157; 158): expected a block\n+error [165; 166): expected expression\n+error [168; 169): expected expression\n+error [179; 180): expected expression\n+error [180; 181): expected COMMA\n+error [180; 181): expected expression\n+error [180; 181): expected R_PAREN\n+error [180; 181): expected SEMI\n+error [215; 216): expected COMMA\n+error [215; 216): expected R_ANGLE\n+error [235; 236): expected SEMI\n+error [235; 236): expected expression"}, {"sha": "5ece9489b210051f3f45edc188acc3c07c8e4e05", "filename": "crates/ra_syntax/test_data/parser/err/0025_nope.txt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -191,14 +191,14 @@ SOURCE_FILE@[0; 575)\n         WHITESPACE@[572; 573) \"\\n\"\n         R_CURLY@[573; 574) \"}\"\n   WHITESPACE@[574; 575) \"\\n\"\n-error 95: expected type\n-error 95: expected COMMA\n-error 96: expected field\n-error 98: expected field declaration\n-error 371: expected COMMA\n-error 372: expected a type\n-error 372: expected R_PAREN\n-error 372: expected COMMA\n-error 372: expected enum variant\n-error 374: expected enum variant\n-error 508: expected expression\n+error [95; 96): expected type\n+error [95; 96): expected COMMA\n+error [96; 97): expected field\n+error [98; 99): expected field declaration\n+error [371; 372): expected COMMA\n+error [372; 373): expected a type\n+error [372; 373): expected R_PAREN\n+error [372; 373): expected COMMA\n+error [372; 373): expected enum variant\n+error [374; 375): expected enum variant\n+error [508; 509): expected expression"}, {"sha": "46985fc8e0611f8a41a65ba391a539a7be309fcf", "filename": "crates/ra_syntax/test_data/parser/err/0026_imp_recovery.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -45,5 +45,5 @@ SOURCE_FILE@[0; 38)\n       L_CURLY@[35; 36) \"{\"\n       R_CURLY@[36; 37) \"}\"\n   WHITESPACE@[37; 38) \"\\n\"\n-error 14: expected trait or type\n-error 14: expected `{`\n+error [14; 15): expected trait or type\n+error [14; 15): expected `{`"}, {"sha": "26f10d426ad03b3122feb4c40cf689fdb96f522d", "filename": "crates/ra_syntax/test_data/parser/err/0027_incomplere_where_for.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -25,5 +25,5 @@ SOURCE_FILE@[0; 30)\n         L_CURLY@[27; 28) \"{\"\n         R_CURLY@[28; 29) \"}\"\n   WHITESPACE@[29; 30) \"\\n\"\n-error 26: expected a path\n-error 26: expected colon\n+error [26; 27): expected a path\n+error [26; 27): expected colon"}, {"sha": "ab300283f7f4465cbc973796ecf497d399b1d928", "filename": "crates/ra_syntax/test_data/parser/err/0029_field_completion.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0029_field_completion.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0029_field_completion.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0029_field_completion.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -33,4 +33,4 @@ SOURCE_FILE@[0; 24)\n         WHITESPACE@[21; 22) \"\\n\"\n         R_CURLY@[22; 23) \"}\"\n   WHITESPACE@[23; 24) \"\\n\"\n-error 21: expected field name or number\n+error [21; 22): expected field name or number"}, {"sha": "eb9d632ade5c7a0046b8a91df888f0bbad173a6e", "filename": "crates/ra_syntax/test_data/parser/err/0032_match_arms_inner_attrs.txt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -191,14 +191,14 @@ SOURCE_FILE@[0; 293)\n         WHITESPACE@[290; 291) \"\\n\"\n         R_CURLY@[291; 292) \"}\"\n   WHITESPACE@[292; 293) \"\\n\"\n-error 52: expected `[`\n-error 52: expected pattern\n-error 53: expected FAT_ARROW\n-error 78: expected COMMA\n-error 161: expected `[`\n-error 161: expected pattern\n-error 162: expected FAT_ARROW\n-error 232: expected `[`\n-error 232: expected pattern\n-error 233: expected FAT_ARROW\n-error 250: expected COMMA\n+error [52; 53): expected `[`\n+error [52; 53): expected pattern\n+error [53; 54): expected FAT_ARROW\n+error [78; 79): expected COMMA\n+error [161; 162): expected `[`\n+error [161; 162): expected pattern\n+error [162; 163): expected FAT_ARROW\n+error [232; 233): expected `[`\n+error [232; 233): expected pattern\n+error [233; 234): expected FAT_ARROW\n+error [250; 251): expected COMMA"}, {"sha": "33eeee7635b2298b714aa58cc0558cf7b2151b77", "filename": "crates/ra_syntax/test_data/parser/err/0033_match_arms_outer_attrs.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -62,6 +62,6 @@ SOURCE_FILE@[0; 89)\n         WHITESPACE@[86; 87) \"\\n\"\n         R_CURLY@[87; 88) \"}\"\n   WHITESPACE@[88; 89) \"\\n\"\n-error 80: expected pattern\n-error 80: expected FAT_ARROW\n-error 80: expected expression\n+error [80; 81): expected pattern\n+error [80; 81): expected FAT_ARROW\n+error [80; 81): expected expression"}, {"sha": "301339244be093675387b39671e5637123446837", "filename": "crates/ra_syntax/test_data/parser/err/0034_bad_box_pattern.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -88,9 +88,9 @@ SOURCE_FILE@[0; 91)\n         WHITESPACE@[87; 88) \"\\n\"\n         R_CURLY@[88; 89) \"}\"\n   WHITESPACE@[89; 91) \"\\n\\n\"\n-error 24: expected a name\n-error 27: expected SEMI\n-error 48: expected a name\n-error 51: expected SEMI\n-error 76: expected a name\n-error 79: expected SEMI\n+error [24; 25): expected a name\n+error [27; 28): expected SEMI\n+error [48; 49): expected a name\n+error [51; 52): expected SEMI\n+error [76; 77): expected a name\n+error [79; 80): expected SEMI"}, {"sha": "93365a5321c59b7f6b617ac02dca8ce66e8598ad", "filename": "crates/ra_syntax/test_data/parser/err/0035_use_recover.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -48,7 +48,7 @@ SOURCE_FILE@[0; 48)\n         L_CURLY@[45; 46) \"{\"\n         R_CURLY@[46; 47) \"}\"\n   WHITESPACE@[47; 48) \"\\n\"\n-error 17: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error 17: expected SEMI\n-error 37: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error 37: expected SEMI\n+error [17; 18): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n+error [17; 18): expected SEMI\n+error [37; 38): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n+error [37; 38): expected SEMI"}, {"sha": "e7348f9110e7146a118cfbf6dd3101d4d31ab1f3", "filename": "crates/ra_syntax/test_data/parser/err/0036_partial_use.txt", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -39,13 +39,13 @@ SOURCE_FILE@[0; 37)\n         ERROR@[35; 36)\n           SEMI@[35; 36) \";\"\n   WHITESPACE@[36; 37) \"\\n\"\n-error 22: expected COMMA\n-error 22: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error 23: expected COMMA\n-error 24: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error 27: expected COMMA\n-error 35: expected COMMA\n-error 35: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error 36: expected COMMA\n-error 36: expected R_CURLY\n-error 36: expected SEMI\n+error [22; 23): expected COMMA\n+error [22; 23): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n+error [23; 24): expected COMMA\n+error [24; 25): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n+error [27; 28): expected COMMA\n+error [35; 36): expected COMMA\n+error [35; 36): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n+error [36; 37): expected COMMA\n+error [36; 37): expected R_CURLY\n+error [36; 37): expected SEMI"}, {"sha": "d0a128a5fb261d85e96ec1111ab82a6bd8ad93f6", "filename": "crates/ra_syntax/test_data/parser/err/0037_visibility_in_traits.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -94,6 +94,6 @@ SOURCE_FILE@[0; 118)\n       WHITESPACE@[115; 116) \"\\n\"\n       R_CURLY@[116; 117) \"}\"\n   WHITESPACE@[117; 118) \"\\n\"\n-error [36; 39): unnecessary visibility qualifier\n-error [56; 66): unnecessary visibility qualifier\n-error [86; 96): unnecessary visibility qualifier\n+error [36; 39): Unnecessary visibility qualifier\n+error [56; 66): Unnecessary visibility qualifier\n+error [86; 96): Unnecessary visibility qualifier"}, {"sha": "e0a95f0d3250290b416dbab4b2584d6094cd50fa", "filename": "crates/ra_syntax/test_data/parser/err/0039_lambda_recovery.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -80,4 +80,4 @@ SOURCE_FILE@[0; 83)\n         WHITESPACE@[80; 81) \"\\n\"\n         R_CURLY@[81; 82) \"}\"\n   WHITESPACE@[82; 83) \"\\n\"\n-error 56: expected expression\n+error [56; 57): expected expression"}, {"sha": "b3baee30d2e122afbe1cfff06325ffc5d5d960c7", "filename": "crates/ra_syntax/test_data/parser/inline/err/0001_array_type_missing_semi.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -20,8 +20,8 @@ SOURCE_FILE@[0; 18)\n   ERROR@[16; 17)\n     SEMI@[16; 17) \";\"\n   WHITESPACE@[17; 18) \"\\n\"\n-error 12: expected `;` or `]`\n-error 12: expected SEMI\n-error 13: expected an item\n-error 15: expected an item\n-error 16: expected an item\n+error [12; 13): expected `;` or `]`\n+error [12; 13): expected SEMI\n+error [13; 14): expected an item\n+error [15; 16): expected an item\n+error [16; 17): expected an item"}, {"sha": "50f37416e80145dca73467e6c0d7f3fa53c55970", "filename": "crates/ra_syntax/test_data/parser/inline/err/0002_misplaced_label_err.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -23,7 +23,7 @@ SOURCE_FILE@[0; 30)\n         WHITESPACE@[27; 28) \"\\n\"\n         R_CURLY@[28; 29) \"}\"\n   WHITESPACE@[29; 30) \"\\n\"\n-error 22: expected a loop\n-error 22: expected SEMI\n-error 27: expected type\n-error 27: expected `{`\n+error [22; 23): expected a loop\n+error [22; 23): expected SEMI\n+error [27; 28): expected type\n+error [27; 28): expected `{`"}, {"sha": "c770166ebd3acf435dc106206ee8ec8bd14e986a", "filename": "crates/ra_syntax/test_data/parser/inline/err/0003_pointer_type_no_mutability.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -14,4 +14,4 @@ SOURCE_FILE@[0; 14)\n         R_PAREN@[11; 12) \")\"\n     SEMI@[12; 13) \";\"\n   WHITESPACE@[13; 14) \"\\n\"\n-error 10: expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)\n+error [10; 11): expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)"}, {"sha": "c1eac055a30e32251037c299e5ae0386a1a47307", "filename": "crates/ra_syntax/test_data/parser/inline/err/0004_impl_type.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -73,7 +73,7 @@ SOURCE_FILE@[0; 87)\n       L_CURLY@[84; 85) \"{\"\n       R_CURLY@[85; 86) \"}\"\n   WHITESPACE@[86; 87) \"\\n\"\n-error 38: expected trait or type\n-error 38: expected `{`\n-error 70: expected trait or type\n-error 70: expected `{`\n+error [38; 39): expected trait or type\n+error [38; 39): expected `{`\n+error [70; 71): expected trait or type\n+error [70; 71): expected `{`"}, {"sha": "961648a1dbf614a1b277ba00871e5cf509c275ad", "filename": "crates/ra_syntax/test_data/parser/inline/err/0005_fn_pointer_type_missing_fn.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -16,8 +16,8 @@ SOURCE_FILE@[0; 20)\n   ERROR@[18; 19)\n     SEMI@[18; 19) \";\"\n   WHITESPACE@[19; 20) \"\\n\"\n-error 15: expected `fn`\n-error 15: expected SEMI\n-error 16: expected an item\n-error 17: expected an item\n-error 18: expected an item\n+error [15; 16): expected `fn`\n+error [15; 16): expected SEMI\n+error [16; 17): expected an item\n+error [17; 18): expected an item\n+error [18; 19): expected an item"}, {"sha": "3e5a36db806058f11a0077a53f3dc02031e319ed", "filename": "crates/ra_syntax/test_data/parser/inline/err/0006_unsafe_block_in_mod.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -33,5 +33,5 @@ SOURCE_FILE@[0; 33)\n         L_CURLY@[30; 31) \"{\"\n         R_CURLY@[31; 32) \"}\"\n   WHITESPACE@[32; 33) \"\\n\"\n-error 11: expected an item\n-error 18: expected an item\n+error [11; 12): expected an item\n+error [18; 19): expected an item"}, {"sha": "8b7fd43ae224c78cdd8b25357c3f41b977f4edb0", "filename": "crates/ra_syntax/test_data/parser/inline/err/0007_async_without_semicolon.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -29,4 +29,4 @@ SOURCE_FILE@[0; 30)\n         WHITESPACE@[27; 28) \" \"\n         R_CURLY@[28; 29) \"}\"\n   WHITESPACE@[29; 30) \"\\n\"\n-error 27: expected SEMI\n+error [27; 28): expected SEMI"}, {"sha": "63362e74b91344b1a2864db3dc24f7035f8beb0d", "filename": "crates/ra_syntax/test_data/parser/inline/err/0008_pub_expr.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -23,4 +23,4 @@ SOURCE_FILE@[0; 21)\n         WHITESPACE@[18; 19) \" \"\n         R_CURLY@[19; 20) \"}\"\n   WHITESPACE@[20; 21) \"\\n\"\n-error 14: expected an item\n+error [14; 15): expected an item"}, {"sha": "736a2f40ee3938365c8d9bf89b2558b32eb0347a", "filename": "crates/ra_syntax/test_data/parser/inline/err/0009_attr_on_expr_not_allowed.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -57,5 +57,5 @@ SOURCE_FILE@[0; 48)\n         WHITESPACE@[45; 46) \"\\n\"\n         R_CURLY@[46; 47) \"}\"\n   WHITESPACE@[47; 48) \"\\n\"\n-error 24: attributes are not allowed on BIN_EXPR\n-error 44: attributes are not allowed on IF_EXPR\n+error [24; 25): attributes are not allowed on BIN_EXPR\n+error [44; 45): attributes are not allowed on IF_EXPR"}, {"sha": "58fafff13fb28499f3b9b25f018d87a081e7db90", "filename": "crates/ra_syntax/test_data/parser/inline/err/0013_static_underscore.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -18,4 +18,4 @@ SOURCE_FILE@[0; 19)\n       INT_NUMBER@[16; 17) \"5\"\n     SEMI@[17; 18) \";\"\n   WHITESPACE@[18; 19) \"\\n\"\n-error 7: expected a name\n+error [7; 8): expected a name"}, {"sha": "ff53f8f4cfe3a69cea5349f8a7130cda3e140f9f", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_default_fn_type.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fdf984958901a6bf16772c2c88b3163f044b390/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.txt?ref=9fdf984958901a6bf16772c2c88b3163f044b390", "patch": "@@ -51,9 +51,9 @@ SOURCE_FILE@[0; 62)\n       WHITESPACE@[59; 60) \"\\n\"\n       R_CURLY@[60; 61) \"}\"\n   WHITESPACE@[61; 62) \"\\n\"\n-error 21: expected EXCL\n-error 21: expected `{`, `[`, `(`\n-error 21: expected SEMI\n-error 47: expected EXCL\n-error 47: expected `{`, `[`, `(`\n-error 47: expected SEMI\n+error [21; 22): expected EXCL\n+error [21; 22): expected `{`, `[`, `(`\n+error [21; 22): expected SEMI\n+error [47; 48): expected EXCL\n+error [47; 48): expected `{`, `[`, `(`\n+error [47; 48): expected SEMI"}]}