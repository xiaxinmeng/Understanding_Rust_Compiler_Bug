{"sha": "0b9b2532d262bf590b769a7cd2f32602b8925183", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOWIyNTMyZDI2MmJmNTkwYjc2OWE3Y2QyZjMyNjAyYjg5MjUxODM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-25T10:49:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-25T10:49:50Z"}, "message": "Move finalize CodegenCx timer out of codegen mono items timer", "tree": {"sha": "541dd4ac610075c05a833b89af26a36e0c840b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/541dd4ac610075c05a833b89af26a36e0c840b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b9b2532d262bf590b769a7cd2f32602b8925183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9b2532d262bf590b769a7cd2f32602b8925183", "html_url": "https://github.com/rust-lang/rust/commit/0b9b2532d262bf590b769a7cd2f32602b8925183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b9b2532d262bf590b769a7cd2f32602b8925183/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20ffea6b8a9f614eed854adbba75626effc1f111", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ffea6b8a9f614eed854adbba75626effc1f111", "html_url": "https://github.com/rust-lang/rust/commit/20ffea6b8a9f614eed854adbba75626effc1f111"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "cb386ea83b981fecb3a79319eaca9d22d88223eb", "filename": "src/driver/jit.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0b9b2532d262bf590b769a7cd2f32602b8925183/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9b2532d262bf590b769a7cd2f32602b8925183/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=0b9b2532d262bf590b769a7cd2f32602b8925183", "patch": "@@ -69,32 +69,36 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     let mut cx = crate::CodegenCx::new(tcx, jit_module, false, false);\n \n-    let (mut jit_module, global_asm, _debug, mut unwind_context) =\n-        super::time(tcx, \"codegen mono items\", || {\n-            super::predefine_mono_items(&mut cx, &mono_items);\n-            for (mono_item, (linkage, visibility)) in mono_items {\n-                let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-                match mono_item {\n-                    MonoItem::Fn(inst) => {\n-                        cx.tcx.sess.time(\"codegen fn\", || {\n-                            crate::base::codegen_fn(&mut cx, inst, linkage)\n-                        });\n-                    }\n-                    MonoItem::Static(def_id) => {\n-                        crate::constant::codegen_static(&mut cx.constants_cx, def_id)\n-                    }\n-                    MonoItem::GlobalAsm(hir_id) => {\n-                        let item = cx.tcx.hir().expect_item(hir_id);\n-                        tcx.sess\n-                            .span_fatal(item.span, \"Global asm is not supported in JIT mode\");\n-                    }\n+    super::time(tcx, \"codegen mono items\", || {\n+        super::predefine_mono_items(&mut cx, &mono_items);\n+        for (mono_item, (linkage, visibility)) in mono_items {\n+            let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+            match mono_item {\n+                MonoItem::Fn(inst) => {\n+                    cx.tcx.sess.time(\"codegen fn\", || {\n+                        crate::base::codegen_fn(&mut cx, inst, linkage)\n+                    });\n+                }\n+                MonoItem::Static(def_id) => {\n+                    crate::constant::codegen_static(&mut cx.constants_cx, def_id)\n+                }\n+                MonoItem::GlobalAsm(hir_id) => {\n+                    let item = cx.tcx.hir().expect_item(hir_id);\n+                    tcx.sess\n+                        .span_fatal(item.span, \"Global asm is not supported in JIT mode\");\n                 }\n             }\n-            tcx.sess.time(\"finalize CodegenCx\", || cx.finalize())\n-        });\n+        }\n+    });\n+\n+    let (mut jit_module, global_asm, _debug, mut unwind_context) =\n+        tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n+    jit_module.finalize_definitions();\n+\n     if !global_asm.is_empty() {\n         tcx.sess.fatal(\"Inline asm is not supported in JIT mode\");\n     }\n+\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context, true);\n     crate::allocator::codegen(tcx, &mut jit_module, &mut unwind_context);\n "}]}