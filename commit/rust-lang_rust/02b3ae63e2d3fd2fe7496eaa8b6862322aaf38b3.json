{"sha": "02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYjNhZTYzZTJkM2ZkMmZlNzQ5NmVhYThiNjg2MjMyMmFhZjM4YjM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-08-30T21:12:34Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-09-03T10:10:54Z"}, "message": "enable desugaring-sensitive error messages and use them in Try\n\nMaybe I should allow error messages to check the *specific* desugaring?\nThanks @huntiep for the idea!", "tree": {"sha": "6e1a3525e66f0c7a6da07c26769bcda7d0eaf4d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e1a3525e66f0c7a6da07c26769bcda7d0eaf4d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3", "html_url": "https://github.com/rust-lang/rust/commit/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6866aea5af0cebe3c3a942585e36c9033e1122ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/6866aea5af0cebe3c3a942585e36c9033e1122ef", "html_url": "https://github.com/rust-lang/rust/commit/6866aea5af0cebe3c3a942585e36c9033e1122ef"}], "stats": {"total": 83, "additions": 74, "deletions": 9}, "files": [{"sha": "694d5b8296f1ebdb82fff4af7bc100c939d311f2", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3", "patch": "@@ -15,8 +15,16 @@\n /// extracting those success or failure values from an existing instance and\n /// creating a new instance from a success or failure value.\n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-#[rustc_on_unimplemented = \"the `?` operator can only be used in a function that returns `Result` \\\n-                            (or another type that implements `{Try}`)\"]\n+#[cfg_attr(stage0,\n+           rustc_on_unimplemented = \"the `?` operator can only be used in a \\\n+                                     function that returns `Result` \\\n+                                     (or another type that implements `{Try}`)\")]\n+#[cfg_attr(not(stage0),\n+           rustc_on_unimplemented(\n+               on(all(direct, from_desugaring),\n+                  message=\"the `?` operator can only be used in a \\\n+                           function that returns `Result` \\\n+                           (or another type that implements `{Try}`)\")))]\n pub trait Try {\n     /// The type of this value when viewed as successful.\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]"}, {"sha": "b5f9f4d1436d5fdc8c77f09ea603720d2414576f", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3", "patch": "@@ -327,10 +327,26 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             .unwrap_or(trait_ref.def_id());\n         let trait_ref = *trait_ref.skip_binder();\n \n+        let mut flags = vec![];\n+        let direct = match obligation.cause.code {\n+            ObligationCauseCode::BuiltinDerivedObligation(..) |\n+            ObligationCauseCode::ImplDerivedObligation(..) => false,\n+            _ => true\n+        };\n+        if direct {\n+            // this is a \"direct\", user-specified, rather than derived,\n+            // obligation.\n+            flags.push(\"direct\");\n+        }\n+\n+        if let Some(_) = obligation.cause.span.compiler_desugaring_kind() {\n+            flags.push(\"from_desugaring\");\n+        }\n+\n         if let Ok(Some(command)) = OnUnimplementedDirective::of_item(\n             self.tcx, trait_ref.def_id, def_id\n         ) {\n-            command.evaluate(self.tcx, trait_ref, &[])\n+            command.evaluate(self.tcx, trait_ref, &flags)\n         } else {\n             OnUnimplementedNote::empty()\n         }"}, {"sha": "cba5c812b07ce94b46dc8aa9b21fb8781b94680f", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3", "patch": "@@ -205,6 +205,18 @@ impl Span {\n         }\n     }\n \n+    /// Return the compiler desugaring that created this span, or None\n+    /// if this span is not from a desugaring.\n+    pub fn compiler_desugaring_kind(&self) -> Option<CompilerDesugaringKind> {\n+        match self.ctxt().outer().expn_info() {\n+            Some(info) => match info.callee.format {\n+                ExpnFormat::CompilerDesugaring(k) => Some(k),\n+                _ => None\n+            },\n+            None => None\n+        }\n+    }\n+\n     /// Check if a span is \"internal\" to a macro in which `unsafe`\n     /// can be used without triggering the `unsafe_code` lint\n     //  (that is, a macro marked with `#[allow_internal_unsafe]`)."}, {"sha": "c6b4c091901925a914548f7c7a5249a8ce78ee2d", "filename": "src/test/ui/suggestions/try-operator-on-main.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.rs?ref=02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3", "patch": "@@ -8,6 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::Try;\n+\n fn main() {\n     std::fs::File::open(\"foo\")?;\n+\n+    try_trait_generic::<()>();\n }\n+\n+fn try_trait_generic<T: Try>() {}"}, {"sha": "66bd77bb69006cb2c08b3449868474e33ff09565", "filename": "src/test/ui/suggestions/try-operator-on-main.stderr", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr?ref=02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3", "patch": "@@ -1,14 +1,37 @@\n-error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n-  --> $DIR/try-operator-on-main.rs:12:5\n+error: use of unstable library feature 'try_trait' (see issue #42327)\n+  --> $DIR/try-operator-on-main.rs:11:5\n+   |\n+11 | use std::ops::Try;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(try_trait)] to the crate attributes to enable\n+\n+error: use of unstable library feature 'try_trait' (see issue #42327)\n+  --> $DIR/try-operator-on-main.rs:19:25\n+   |\n+19 | fn try_trait_generic<T: Try>() {}\n+   |                         ^^^\n    |\n-12 |     std::fs::File::open(\"foo\")?;\n+   = help: add #![feature(try_trait)] to the crate attributes to enable\n+\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n+  --> $DIR/try-operator-on-main.rs:14:5\n+   |\n+14 |     std::fs::File::open(\"foo\")?;\n    |     ---------------------------\n    |     |\n-   |     the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n+   |     the trait `std::ops::Try` is not implemented for `()`\n    |     in this macro invocation\n    |\n-   = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::from_error`\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n+  --> $DIR/try-operator-on-main.rs:16:5\n+   |\n+16 |     try_trait_generic::<()>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Try` is not implemented for `()`\n+   |\n+   = note: required by `try_trait_generic`\n+\n+error: aborting due to 4 previous errors\n "}]}