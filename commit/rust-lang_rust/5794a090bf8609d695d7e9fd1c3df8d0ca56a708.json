{"sha": "5794a090bf8609d695d7e9fd1c3df8d0ca56a708", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OTRhMDkwYmY4NjA5ZDY5NWQ3ZTlmZDFjM2RmOGQwY2E1NmE3MDg=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-07T19:16:18Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T12:08:55Z"}, "message": "Get rid of walk_mut [not compiling]", "tree": {"sha": "5130a8d12c579a87f5e7dbe49b13d8698d4e6cc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5130a8d12c579a87f5e7dbe49b13d8698d4e6cc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5794a090bf8609d695d7e9fd1c3df8d0ca56a708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5794a090bf8609d695d7e9fd1c3df8d0ca56a708", "html_url": "https://github.com/rust-lang/rust/commit/5794a090bf8609d695d7e9fd1c3df8d0ca56a708", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5794a090bf8609d695d7e9fd1c3df8d0ca56a708/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1332e72d09036e31961bb0ab5a7175d34c2fbf68", "url": "https://api.github.com/repos/rust-lang/rust/commits/1332e72d09036e31961bb0ab5a7175d34c2fbf68", "html_url": "https://github.com/rust-lang/rust/commit/1332e72d09036e31961bb0ab5a7175d34c2fbf68"}], "stats": {"total": 272, "additions": 0, "deletions": 272}, "files": [{"sha": "28875dbe03c933f4cfeee4195378e3f7b22cfc3f", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 0, "deletions": 272, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/5794a090bf8609d695d7e9fd1c3df8d0ca56a708/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5794a090bf8609d695d7e9fd1c3df8d0ca56a708/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=5794a090bf8609d695d7e9fd1c3df8d0ca56a708", "patch": "@@ -15,124 +15,6 @@ use crate::{\n /// types, similar to Chalk's `Fold` trait.\n pub trait TypeWalk {\n     fn walk(&self, f: &mut impl FnMut(&Ty));\n-    fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n-        self.walk_mut_binders(&mut |ty, _binders| f(ty), DebruijnIndex::INNERMOST);\n-    }\n-    /// Walk the type, counting entered binders.\n-    ///\n-    /// `TyKind::Bound` variables use DeBruijn indexing, which means that 0 refers\n-    /// to the innermost binder, 1 to the next, etc.. So when we want to\n-    /// substitute a certain bound variable, we can't just walk the whole type\n-    /// and blindly replace each instance of a certain index; when we 'enter'\n-    /// things that introduce new bound variables, we have to keep track of\n-    /// that. Currently, the only thing that introduces bound variables on our\n-    /// side are `TyKind::Dyn` and `TyKind::Opaque`, which each introduce a bound\n-    /// variable for the self type.\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    );\n-\n-    fn fold_binders(\n-        mut self,\n-        f: &mut impl FnMut(Ty, DebruijnIndex) -> Ty,\n-        binders: DebruijnIndex,\n-    ) -> Self\n-    where\n-        Self: Sized,\n-    {\n-        self.walk_mut_binders(\n-            &mut |ty_mut, binders| {\n-                let ty = mem::replace(ty_mut, TyKind::Error.intern(&Interner));\n-                *ty_mut = f(ty, binders);\n-            },\n-            binders,\n-        );\n-        self\n-    }\n-\n-    fn fold(mut self, f: &mut impl FnMut(Ty) -> Ty) -> Self\n-    where\n-        Self: Sized,\n-    {\n-        self.walk_mut(&mut |ty_mut| {\n-            let ty = mem::replace(ty_mut, TyKind::Error.intern(&Interner));\n-            *ty_mut = f(ty);\n-        });\n-        self\n-    }\n-\n-    /// Substitutes `TyKind::Bound` vars with the given substitution.\n-    fn subst_bound_vars(self, substs: &Substitution) -> Self\n-    where\n-        Self: Sized,\n-    {\n-        self.subst_bound_vars_at_depth(substs, DebruijnIndex::INNERMOST)\n-    }\n-\n-    /// Substitutes `TyKind::Bound` vars with the given substitution.\n-    fn subst_bound_vars_at_depth(mut self, substs: &Substitution, depth: DebruijnIndex) -> Self\n-    where\n-        Self: Sized,\n-    {\n-        self.walk_mut_binders(\n-            &mut |ty, binders| {\n-                if let &mut TyKind::BoundVar(bound) = ty.interned_mut() {\n-                    if bound.debruijn >= binders {\n-                        *ty = substs.interned()[bound.index]\n-                            .assert_ty_ref(&Interner)\n-                            .clone()\n-                            .shifted_in_from(binders);\n-                    }\n-                }\n-            },\n-            depth,\n-        );\n-        self\n-    }\n-\n-    fn shifted_in(self, _interner: &Interner) -> Self\n-    where\n-        Self: Sized,\n-    {\n-        self.shifted_in_from(DebruijnIndex::ONE)\n-    }\n-\n-    /// Shifts up debruijn indices of `TyKind::Bound` vars by `n`.\n-    fn shifted_in_from(self, n: DebruijnIndex) -> Self\n-    where\n-        Self: Sized,\n-    {\n-        self.fold_binders(\n-            &mut |ty, binders| match ty.kind(&Interner) {\n-                TyKind::BoundVar(bound) if bound.debruijn >= binders => {\n-                    TyKind::BoundVar(bound.shifted_in_from(n)).intern(&Interner)\n-                }\n-                _ => ty,\n-            },\n-            DebruijnIndex::INNERMOST,\n-        )\n-    }\n-\n-    /// Shifts debruijn indices of `TyKind::Bound` vars out (down) by `n`.\n-    fn shifted_out_to(self, n: DebruijnIndex) -> Option<Self>\n-    where\n-        Self: Sized + std::fmt::Debug,\n-    {\n-        Some(self.fold_binders(\n-            &mut |ty, binders| {\n-                match ty.kind(&Interner) {\n-                    TyKind::BoundVar(bound) if bound.debruijn >= binders => {\n-                        TyKind::BoundVar(bound.shifted_out_to(n).unwrap_or(bound.clone()))\n-                            .intern(&Interner)\n-                    }\n-                    _ => ty,\n-                }\n-            },\n-            DebruijnIndex::INNERMOST,\n-        ))\n-    }\n }\n \n impl TypeWalk for Ty {\n@@ -174,45 +56,6 @@ impl TypeWalk for Ty {\n         }\n         f(self);\n     }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        match self.interned_mut() {\n-            TyKind::Alias(AliasTy::Projection(p_ty)) => {\n-                p_ty.substitution.walk_mut_binders(f, binders);\n-            }\n-            TyKind::Dyn(dyn_ty) => {\n-                for p in make_mut_slice(dyn_ty.bounds.skip_binders_mut().interned_mut()) {\n-                    p.walk_mut_binders(f, binders.shifted_in());\n-                }\n-            }\n-            TyKind::Alias(AliasTy::Opaque(o_ty)) => {\n-                o_ty.substitution.walk_mut_binders(f, binders);\n-            }\n-            TyKind::Slice(ty)\n-            | TyKind::Array(ty, _)\n-            | TyKind::Ref(_, _, ty)\n-            | TyKind::Raw(_, ty) => {\n-                ty.walk_mut_binders(f, binders);\n-            }\n-            TyKind::Function(fn_pointer) => {\n-                fn_pointer.substitution.0.walk_mut_binders(f, binders.shifted_in());\n-            }\n-            TyKind::Adt(_, substs)\n-            | TyKind::FnDef(_, substs)\n-            | TyKind::Tuple(_, substs)\n-            | TyKind::OpaqueType(_, substs)\n-            | TyKind::AssociatedType(_, substs)\n-            | TyKind::Closure(.., substs) => {\n-                substs.walk_mut_binders(f, binders);\n-            }\n-            _ => {}\n-        }\n-        f(self, binders);\n-    }\n }\n \n impl<T: TypeWalk> TypeWalk for Vec<T> {\n@@ -221,43 +64,18 @@ impl<T: TypeWalk> TypeWalk for Vec<T> {\n             t.walk(f);\n         }\n     }\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        for t in self {\n-            t.walk_mut_binders(f, binders);\n-        }\n-    }\n }\n \n impl TypeWalk for OpaqueTy {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n         self.substitution.walk(f);\n     }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        self.substitution.walk_mut_binders(f, binders);\n-    }\n }\n \n impl TypeWalk for ProjectionTy {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n         self.substitution.walk(f);\n     }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        self.substitution.walk_mut_binders(f, binders);\n-    }\n }\n \n impl TypeWalk for AliasTy {\n@@ -267,17 +85,6 @@ impl TypeWalk for AliasTy {\n             AliasTy::Opaque(it) => it.walk(f),\n         }\n     }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        match self {\n-            AliasTy::Projection(it) => it.walk_mut_binders(f, binders),\n-            AliasTy::Opaque(it) => it.walk_mut_binders(f, binders),\n-        }\n-    }\n }\n \n impl TypeWalk for GenericArg {\n@@ -288,18 +95,6 @@ impl TypeWalk for GenericArg {\n             }\n         }\n     }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        match self.interned_mut() {\n-            GenericArgData::Ty(ty) => {\n-                ty.walk_mut_binders(f, binders);\n-            }\n-        }\n-    }\n }\n \n impl TypeWalk for Substitution {\n@@ -308,44 +103,18 @@ impl TypeWalk for Substitution {\n             t.walk(f);\n         }\n     }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        for t in self.interned_mut() {\n-            t.walk_mut_binders(f, binders);\n-        }\n-    }\n }\n \n impl<T: TypeWalk + HasInterner<Interner = Interner>> TypeWalk for Binders<T> {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n         self.skip_binders().walk(f);\n     }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        self.skip_binders_mut().walk_mut_binders(f, binders.shifted_in())\n-    }\n }\n \n impl TypeWalk for TraitRef {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n         self.substitution.walk(f);\n     }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        self.substitution.walk_mut_binders(f, binders);\n-    }\n }\n \n impl TypeWalk for WhereClause {\n@@ -355,17 +124,6 @@ impl TypeWalk for WhereClause {\n             WhereClause::AliasEq(alias_eq) => alias_eq.walk(f),\n         }\n     }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        match self {\n-            WhereClause::Implemented(trait_ref) => trait_ref.walk_mut_binders(f, binders),\n-            WhereClause::AliasEq(alias_eq) => alias_eq.walk_mut_binders(f, binders),\n-        }\n-    }\n }\n \n impl TypeWalk for CallableSig {\n@@ -374,16 +132,6 @@ impl TypeWalk for CallableSig {\n             t.walk(f);\n         }\n     }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        for t in make_mut_slice(&mut self.params_and_return) {\n-            t.walk_mut_binders(f, binders);\n-        }\n-    }\n }\n \n impl TypeWalk for AliasEq {\n@@ -394,30 +142,10 @@ impl TypeWalk for AliasEq {\n             AliasTy::Opaque(opaque) => opaque.walk(f),\n         }\n     }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        self.ty.walk_mut_binders(f, binders);\n-        match &mut self.alias {\n-            AliasTy::Projection(projection_ty) => projection_ty.walk_mut_binders(f, binders),\n-            AliasTy::Opaque(opaque) => opaque.walk_mut_binders(f, binders),\n-        }\n-    }\n }\n \n impl TypeWalk for FnSubst<Interner> {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n         self.0.walk(f)\n     }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        self.0.walk_mut_binders(f, binders)\n-    }\n }"}]}