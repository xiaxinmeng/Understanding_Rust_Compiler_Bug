{"sha": "ab239f37aaade0764ee1ace12828d2f766600296", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMjM5ZjM3YWFhZGUwNzY0ZWUxYWNlMTI4MjhkMmY3NjY2MDAyOTY=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-26T16:15:42Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-26T21:56:42Z"}, "message": "Minor cosmetic changes", "tree": {"sha": "98a5e935851d496fbb7a740bb808a0f8dae04ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98a5e935851d496fbb7a740bb808a0f8dae04ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab239f37aaade0764ee1ace12828d2f766600296", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab239f37aaade0764ee1ace12828d2f766600296", "html_url": "https://github.com/rust-lang/rust/commit/ab239f37aaade0764ee1ace12828d2f766600296", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab239f37aaade0764ee1ace12828d2f766600296/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87532e99e5ff2d63e78d7b67cae8c65d12ce5995", "url": "https://api.github.com/repos/rust-lang/rust/commits/87532e99e5ff2d63e78d7b67cae8c65d12ce5995", "html_url": "https://github.com/rust-lang/rust/commit/87532e99e5ff2d63e78d7b67cae8c65d12ce5995"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "b66c383edb51e85d2deee7586469c723c1612b45", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab239f37aaade0764ee1ace12828d2f766600296/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab239f37aaade0764ee1ace12828d2f766600296/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=ab239f37aaade0764ee1ace12828d2f766600296", "patch": "@@ -275,7 +275,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             PatKind::Tuple(ref elements, ddpos) => {\n                 let mut expected_len = elements.len();\n                 if ddpos.is_some() {\n-                    // Require known type only when `..` is present\n+                    // Require known type only when `..` is present.\n                     if let ty::Tuple(ref tys) =\n                             self.structurally_resolved_type(pat.span, expected).sty {\n                         expected_len = tys.len();\n@@ -284,8 +284,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let max_len = cmp::max(expected_len, elements.len());\n \n                 let element_tys_iter = (0..max_len).map(|_| self.next_ty_var(\n-                    // FIXME: MiscVariable for now, obtaining the span and name information\n-                    //        from all tuple elements isn't trivial.\n+                    // FIXME: `MiscVariable` for now -- obtaining the span and name information\n+                    // from all tuple elements isn't trivial.\n                     TypeVariableOrigin::TypeInference(pat.span)));\n                 let element_tys = tcx.mk_type_list(element_tys_iter);\n                 let pat_ty = tcx.mk_ty(ty::Tuple(element_tys));"}, {"sha": "060b37fa0b87f5025d84c17968d151821ba63d19", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab239f37aaade0764ee1ace12828d2f766600296/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab239f37aaade0764ee1ace12828d2f766600296/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ab239f37aaade0764ee1ace12828d2f766600296", "patch": "@@ -4615,7 +4615,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   local: &'gcx hir::Local,\n                                   init: &'gcx hir::Expr) -> Ty<'tcx>\n     {\n-        // FIXME(tschottdorf): contains_explicit_ref_binding() must be removed\n+        // FIXME(tschottdorf): `contains_explicit_ref_binding()` must be removed\n         // for #42640 (default match binding modes).\n         //\n         // See #44848.\n@@ -4660,7 +4660,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn check_stmt(&self, stmt: &'gcx hir::Stmt) {\n-        // Don't do all the complex logic below for DeclItem.\n+        // Don't do all the complex logic below for `DeclItem`.\n         match stmt.node {\n             hir::StmtKind::Decl(ref decl, _) => {\n                 if let hir::DeclKind::Item(_) = decl.node {\n@@ -4672,7 +4672,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         self.warn_if_unreachable(stmt.node.id(), stmt.span, \"statement\");\n \n-        // Hide the outer diverging and has_errors flags.\n+        // Hide the outer diverging and `has_errors` flags.\n         let old_diverges = self.diverges.get();\n         let old_has_errors = self.has_errors.get();\n         self.diverges.set(Diverges::Maybe);\n@@ -4684,19 +4684,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     hir::DeclKind::Local(ref l) => {\n                         self.check_decl_local(&l);\n                     }\n-                    hir::DeclKind::Item(_) => {/* ignore for now */}\n+                    // Ignore for now.\n+                    hir::DeclKind::Item(_) => ()\n                 }\n             }\n             hir::StmtKind::Expr(ref expr, _) => {\n-                // Check with expected type of ()\n+                // Check with expected type of `()`.\n                 self.check_expr_has_type_or_error(&expr, self.tcx.mk_unit());\n             }\n             hir::StmtKind::Semi(ref expr, _) => {\n                 self.check_expr(&expr);\n             }\n         }\n \n-        // Combine the diverging and has_error flags.\n+        // Combine the diverging and `has_error` flags.\n         self.diverges.set(self.diverges.get() | old_diverges);\n         self.has_errors.set(self.has_errors.get() | old_has_errors);\n     }"}]}