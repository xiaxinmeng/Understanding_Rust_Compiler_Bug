{"sha": "409182de6d74889134209e7fc98174eb8f267170", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwOTE4MmRlNmQ3NDg4OTEzNDIwOWU3ZmM5ODE3NGViOGYyNjcxNzA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-25T05:16:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-27T00:05:59Z"}, "message": "Update the compiler to not use printf/printfln", "tree": {"sha": "8f8c542b198cdb323038aa803ff6bff7433bd3bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f8c542b198cdb323038aa803ff6bff7433bd3bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409182de6d74889134209e7fc98174eb8f267170", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409182de6d74889134209e7fc98174eb8f267170", "html_url": "https://github.com/rust-lang/rust/commit/409182de6d74889134209e7fc98174eb8f267170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409182de6d74889134209e7fc98174eb8f267170/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09a53381974bcf42c0b081cbfcd9f20f1e5d4f04", "url": "https://api.github.com/repos/rust-lang/rust/commits/09a53381974bcf42c0b081cbfcd9f20f1e5d4f04", "html_url": "https://github.com/rust-lang/rust/commit/09a53381974bcf42c0b081cbfcd9f20f1e5d4f04"}], "stats": {"total": 344, "additions": 170, "deletions": 174}, "files": [{"sha": "7a113f1a292c12f8995baa348a394adc9d9533f5", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -68,7 +68,7 @@ impl<'self> ToBase64 for &'self [u8] {\n      *\n      * fn main () {\n      *     let str = [52,32].to_base64(standard);\n-     *     printfln!(\"%s\", str);\n+     *     println!(\"{}\", str);\n      * }\n      * ```\n      */\n@@ -177,11 +177,11 @@ impl<'self> FromBase64 for &'self str {\n      *\n      * fn main () {\n      *     let hello_str = \"Hello, World\".to_base64(standard);\n-     *     printfln!(\"%s\", hello_str);\n+     *     println!(\"{}\", hello_str);\n      *     let bytes = hello_str.from_base64();\n-     *     printfln!(\"%?\", bytes);\n+     *     println!(\"{:?}\", bytes);\n      *     let result_str = str::from_utf8(bytes);\n-     *     printfln!(\"%s\", result_str);\n+     *     println!(\"{}\", result_str);\n      * }\n      * ```\n      */"}, {"sha": "fdb296e5f403b3d84693bd59158047257d146270", "filename": "src/libextra/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -19,7 +19,7 @@\n  * # fn make_a_sandwich() {};\n  * let mut delayed_fib = extra::future::spawn (|| fib(5000) );\n  * make_a_sandwich();\n- * printfln!(\"fib(5000) = %?\", delayed_fib.get())\n+ * println!(\"fib(5000) = {}\", delayed_fib.get())\n  * ```\n  */\n "}, {"sha": "aa37c78cc57a35a243433d71c39569c6f51c8865", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -43,7 +43,7 @@\n //! }\n //!\n //! fn print_usage(program: &str, _opts: &[Opt]) {\n-//!     printfln!(\"Usage: %s [options]\", program);\n+//!     println!(\"Usage: {} [options]\", program);\n //!     println(\"-o\\t\\tOutput\");\n //!     println(\"-h --help\\tUsage\");\n //! }"}, {"sha": "ad812513f840e5b0896b5a428a97b4d908567d29", "filename": "src/libextra/hex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibextra%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibextra%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fhex.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -33,7 +33,7 @@ impl<'self> ToHex for &'self [u8] {\n      *\n      * fn main () {\n      *     let str = [52,32].to_hex();\n-     *     printfln!(\"%s\", str);\n+     *     println!(\"{}\", str);\n      * }\n      * ```\n      */\n@@ -77,11 +77,11 @@ impl<'self> FromHex for &'self str {\n      *\n      * fn main () {\n      *     let hello_str = \"Hello, World\".to_hex();\n-     *     printfln!(\"%s\", hello_str);\n+     *     println!(\"{}\", hello_str);\n      *     let bytes = hello_str.from_hex().unwrap();\n-     *     printfln!(\"%?\", bytes);\n+     *     println!(\"{:?}\", bytes);\n      *     let result_str = str::from_utf8(bytes);\n-     *     printfln!(\"%s\", result_str);\n+     *     println!(\"{}\", result_str);\n      * }\n      * ```\n      */"}, {"sha": "804ccd2a9fde3c458e1fdba3885f3b0579d8004d", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -103,6 +103,6 @@ fn test_task_pool() {\n     };\n     let mut pool = TaskPool::new(4, Some(SingleThreaded), f);\n     do 8.times {\n-        pool.execute(|i| printfln!(\"Hello from thread %u!\", *i));\n+        pool.execute(|i| println!(\"Hello from thread {}!\", *i));\n     }\n }"}, {"sha": "dcbeb03caefe4767b7abb8376d5968918bcfbe9d", "filename": "src/librust/rust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -136,13 +136,13 @@ fn cmd_help(args: &[~str]) -> ValidUsage {\n         match find_cmd(command_string) {\n             Some(command) => {\n                 match command.action {\n-                    CallMain(prog, _) => printfln!(\n-                        \"The %s command is an alias for the %s program.\",\n+                    CallMain(prog, _) => println!(\n+                        \"The {} command is an alias for the {} program.\",\n                         command.cmd, prog),\n                     _       => ()\n                 }\n                 match command.usage_full {\n-                    UsgStr(msg) => printfln!(\"%s\\n\", msg),\n+                    UsgStr(msg) => println!(\"{}\\n\", msg),\n                     UsgCall(f)  => f(),\n                 }\n                 Valid(0)\n@@ -215,7 +215,7 @@ fn usage() {\n \n     for command in COMMANDS.iter() {\n         let padding = \" \".repeat(INDENT - command.cmd.len());\n-        printfln!(\"    %s%s%s\", command.cmd, padding, command.usage_line);\n+        println!(\"    {}{}{}\", command.cmd, padding, command.usage_line);\n     }\n \n     io::print("}, {"sha": "a32b21233282eb5bf2a2a6e80643f7597b1e4266", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -1822,17 +1822,17 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         }\n \n         io::println(\"metadata stats:\");\n-        printfln!(\"    inline bytes: %u\", ecx.stats.inline_bytes);\n-        printfln!(\" attribute bytes: %u\", ecx.stats.attr_bytes);\n-        printfln!(\"       dep bytes: %u\", ecx.stats.dep_bytes);\n-        printfln!(\" lang item bytes: %u\", ecx.stats.lang_item_bytes);\n-        printfln!(\" link args bytes: %u\", ecx.stats.link_args_bytes);\n-        printfln!(\"      impl bytes: %u\", ecx.stats.impl_bytes);\n-        printfln!(\"      misc bytes: %u\", ecx.stats.misc_bytes);\n-        printfln!(\"      item bytes: %u\", ecx.stats.item_bytes);\n-        printfln!(\"     index bytes: %u\", ecx.stats.index_bytes);\n-        printfln!(\"      zero bytes: %u\", ecx.stats.zero_bytes);\n-        printfln!(\"     total bytes: %u\", ecx.stats.total_bytes);\n+        println!(\"    inline bytes: {}\", ecx.stats.inline_bytes);\n+        println!(\" attribute bytes: {}\", ecx.stats.attr_bytes);\n+        println!(\"       dep bytes: {}\", ecx.stats.dep_bytes);\n+        println!(\" lang item bytes: {}\", ecx.stats.lang_item_bytes);\n+        println!(\" link args bytes: {}\", ecx.stats.link_args_bytes);\n+        println!(\"      impl bytes: {}\", ecx.stats.impl_bytes);\n+        println!(\"      misc bytes: {}\", ecx.stats.misc_bytes);\n+        println!(\"      item bytes: {}\", ecx.stats.item_bytes);\n+        println!(\"     index bytes: {}\", ecx.stats.index_bytes);\n+        println!(\"      zero bytes: {}\", ecx.stats.zero_bytes);\n+        println!(\"     total bytes: {}\", ecx.stats.total_bytes);\n     }\n \n     // Pad this, since something (LLVM, presumably) is cutting off the"}, {"sha": "8b9dc40777a8864b2e073affdfa5404b6445c5f2", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -100,16 +100,16 @@ pub fn check_crate(\n \n     if tcx.sess.borrowck_stats() {\n         io::println(\"--- borrowck stats ---\");\n-        printfln!(\"paths requiring guarantees: %u\",\n-                  bccx.stats.guaranteed_paths);\n-        printfln!(\"paths requiring loans     : %s\",\n-                  make_stat(bccx, bccx.stats.loaned_paths_same));\n-        printfln!(\"paths requiring imm loans : %s\",\n-                  make_stat(bccx, bccx.stats.loaned_paths_imm));\n-        printfln!(\"stable paths              : %s\",\n-                  make_stat(bccx, bccx.stats.stable_paths));\n-        printfln!(\"paths requiring purity    : %s\",\n-                  make_stat(bccx, bccx.stats.req_pure_paths));\n+        println!(\"paths requiring guarantees: {}\",\n+                 bccx.stats.guaranteed_paths);\n+        println!(\"paths requiring loans     : {}\",\n+                 make_stat(bccx, bccx.stats.loaned_paths_same));\n+        println!(\"paths requiring imm loans : {}\",\n+                 make_stat(bccx, bccx.stats.loaned_paths_imm));\n+        println!(\"stable paths              : {}\",\n+                 make_stat(bccx, bccx.stats.stable_paths));\n+        println!(\"paths requiring purity    : {}\",\n+                 make_stat(bccx, bccx.stats.req_pure_paths));\n     }\n \n     return (bccx.root_map, bccx.write_guard_map);"}, {"sha": "04873dfa6ae9fea3e565355a5ff7451e47070841", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -121,7 +121,7 @@ impl Drop for _InsnCtxt {\n }\n \n pub fn push_ctxt(s: &'static str) -> _InsnCtxt {\n-    debug!(\"new InsnCtxt: %s\", s);\n+    debug2!(\"new InsnCtxt: {}\", s);\n     do local_data::modify(task_local_insn_key) |c| {\n         do c.map_move |ctx| {\n             let mut ctx = (*ctx).clone();\n@@ -3156,30 +3156,30 @@ pub fn trans_crate(sess: session::Session,\n     write_metadata(ccx, crate);\n     if ccx.sess.trans_stats() {\n         io::println(\"--- trans stats ---\");\n-        printfln!(\"n_static_tydescs: %u\", ccx.stats.n_static_tydescs);\n-        printfln!(\"n_glues_created: %u\", ccx.stats.n_glues_created);\n-        printfln!(\"n_null_glues: %u\", ccx.stats.n_null_glues);\n-        printfln!(\"n_real_glues: %u\", ccx.stats.n_real_glues);\n-\n-        printfln!(\"n_fns: %u\", ccx.stats.n_fns);\n-        printfln!(\"n_monos: %u\", ccx.stats.n_monos);\n-        printfln!(\"n_inlines: %u\", ccx.stats.n_inlines);\n-        printfln!(\"n_closures: %u\", ccx.stats.n_closures);\n+        println!(\"n_static_tydescs: {}\", ccx.stats.n_static_tydescs);\n+        println!(\"n_glues_created: {}\", ccx.stats.n_glues_created);\n+        println!(\"n_null_glues: {}\", ccx.stats.n_null_glues);\n+        println!(\"n_real_glues: {}\", ccx.stats.n_real_glues);\n+\n+        println!(\"n_fns: {}\", ccx.stats.n_fns);\n+        println!(\"n_monos: {}\", ccx.stats.n_monos);\n+        println!(\"n_inlines: {}\", ccx.stats.n_inlines);\n+        println!(\"n_closures: {}\", ccx.stats.n_closures);\n         io::println(\"fn stats:\");\n         do sort::quick_sort(ccx.stats.fn_stats) |&(_, _, insns_a), &(_, _, insns_b)| {\n             insns_a > insns_b\n         }\n         for tuple in ccx.stats.fn_stats.iter() {\n             match *tuple {\n                 (ref name, ms, insns) => {\n-                    printfln!(\"%u insns, %u ms, %s\", insns, ms, *name);\n+                    println!(\"{} insns, {} ms, {}\", insns, ms, *name);\n                 }\n             }\n         }\n     }\n     if ccx.sess.count_llvm_insns() {\n         for (k, v) in ccx.stats.llvm_insns.iter() {\n-            printfln!(\"%-7u %s\", *v, *k);\n+            println!(\"{:7u} {}\", *v, *k);\n         }\n     }\n "}, {"sha": "28fffb6a80a2d74fa5895647aaa464ae0d5210d9", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -646,8 +646,8 @@ pub fn declare_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n     let llty = type_of(ccx, t);\n \n     if ccx.sess.count_type_sizes() {\n-        printfln!(\"%u\\t%s\", llsize_of_real(ccx, llty),\n-                  ppaux::ty_to_str(ccx.tcx, t));\n+        println!(\"{}\\t{}\", llsize_of_real(ccx, llty),\n+                 ppaux::ty_to_str(ccx.tcx, t));\n     }\n \n     let has_header = match ty::get(t).sty {"}, {"sha": "9602c189455766d9b6357fb7f5cb76d146e88a23", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -130,13 +130,13 @@ pub fn version(argv0: &str) {\n         Some(vers) => vers,\n         None => \"unknown version\"\n     };\n-    printfln!(\"%s %s\", argv0, vers);\n-    printfln!(\"host: %s\", host_triple());\n+    println!(\"{} {}\", argv0, vers);\n+    println!(\"host: {}\", host_triple());\n }\n \n pub fn usage(argv0: &str) {\n     let message = fmt!(\"Usage: %s [OPTIONS] INPUT\", argv0);\n-    printfln!(\"%s\\n\\\n+    println!(\"{}\\n\\\n Additional help:\n     -W help             Print 'lint' options and default settings\n     -Z help             Print internal options for debugging rustc\\n\",\n@@ -167,16 +167,16 @@ Available lint options:\n         str::from_utf8(vec::from_elem(max - s.len(), ' ' as u8)) + s\n     }\n     println(\"\\nAvailable lint checks:\\n\");\n-    printfln!(\"    %s  %7.7s  %s\",\n-              padded(max_key, \"name\"), \"default\", \"meaning\");\n-    printfln!(\"    %s  %7.7s  %s\\n\",\n-              padded(max_key, \"----\"), \"-------\", \"-------\");\n+    println!(\"    {}  {:7.7s}  {}\",\n+             padded(max_key, \"name\"), \"default\", \"meaning\");\n+    println!(\"    {}  {:7.7s}  {}\\n\",\n+             padded(max_key, \"----\"), \"-------\", \"-------\");\n     for (spec, name) in lint_dict.move_iter() {\n         let name = name.replace(\"_\", \"-\");\n-        printfln!(\"    %s  %7.7s  %s\",\n-                  padded(max_key, name),\n-                  lint::level_to_str(spec.default),\n-                  spec.desc);\n+        println!(\"    {}  {:7.7s}  {}\",\n+                 padded(max_key, name),\n+                 lint::level_to_str(spec.default),\n+                 spec.desc);\n     }\n     io::println(\"\");\n }\n@@ -187,7 +187,7 @@ pub fn describe_debug_flags() {\n     for tuple in r.iter() {\n         match *tuple {\n             (ref name, ref desc, _) => {\n-                printfln!(\"    -Z %-20s -- %s\", *name, *desc);\n+                println!(\"    -Z {:>20s} -- {}\", *name, *desc);\n             }\n         }\n     }"}, {"sha": "bd7ca3a552975a81b11507800a4974cccd581f25", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -22,7 +22,7 @@ pub fn time<T>(do_it: bool, what: ~str, thunk: &fn() -> T) -> T {\n     let start = extra::time::precise_time_s();\n     let rv = thunk();\n     let end = extra::time::precise_time_s();\n-    printfln!(\"time: %3.3f s\\t%s\", end - start, what);\n+    println!(\"time: {:3.3f} s\\t{}\", end - start, what);\n     rv\n }\n "}, {"sha": "bb7ad99006c970ea0823acb0e14187bbea205ba1", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -437,7 +437,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n             if loaded_crates.is_empty() {\n                 println(\"no crates loaded\");\n             } else {\n-                printfln!(\"crates loaded: %s\", loaded_crates.connect(\", \"));\n+                println!(\"crates loaded: {}\", loaded_crates.connect(\", \"));\n             }\n         }\n         ~\"{\" => {"}, {"sha": "db11ffa0cc644ff3c6b5c47ce253e8a0f9ba7e7f", "filename": "src/librustpkg/testsuite/pass/src/fancy-lib/pkg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     }\n \n     if args[2] != ~\"install\" {\n-        printfln!(\"Warning: I don't know how to %s\", args[2]);\n+        println!(\"Warning: I don't know how to {}\", args[2]);\n         return;\n     }\n "}, {"sha": "4695123548bd9c90cddfbf505671d5636e57b2ce", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -413,7 +413,7 @@ pub trait Iterator<A> {\n     /// use std::iter::count;\n     ///\n     /// for i in count(0, 10) {\n-    ///     printfln!(\"%d\", i);\n+    ///     println!(\"{}\", i);\n     /// }\n     /// ```\n     #[inline]"}, {"sha": "0902100dca60a3dd0239ea9752f1dce5bf425321", "filename": "src/libstd/rand/distributions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -70,7 +70,7 @@ fn ziggurat<R:Rng>(rng: &mut R,\n ///\n /// fn main() {\n ///     let normal = 2.0 + (*rand::random::<StandardNormal>()) * 3.0;\n-///     printfln!(\"%f is from a N(2, 9) distribution\", normal)\n+///     println!(\"{} is from a N(2, 9) distribution\", normal)\n /// }\n /// ```\n pub struct StandardNormal(f64);\n@@ -124,7 +124,7 @@ impl Rand for StandardNormal {\n ///\n /// fn main() {\n ///     let exp2 = (*rand::random::<Exp1>()) * 0.5;\n-///     printfln!(\"%f is from a Exp(2) distribution\", exp2);\n+///     println!(\"{} is from a Exp(2) distribution\", exp2);\n /// }\n /// ```\n pub struct Exp1(f64);"}, {"sha": "2b9727f6eb0e4da88e55bf6dad04f8a5e6fcbda1", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -28,7 +28,7 @@ use std::rand::Rng;\n fn main() {\n     let mut rng = rand::rng();\n     if rng.gen() { // bool\n-        printfln!(\"int: %d, uint: %u\", rng.gen(), rng.gen())\n+        println!(\"int: {}, uint: {}\", rng.gen::<int>(), rng.gen::<uint>())\n     }\n }\n  ```\n@@ -38,7 +38,7 @@ use std::rand;\n \n fn main () {\n     let tuple_ptr = rand::random::<~(f64, char)>();\n-    printfln!(tuple_ptr)\n+    println!(tuple_ptr)\n }\n  ```\n */\n@@ -270,8 +270,8 @@ pub trait Rng {\n     /// fn main() {\n     ///    let rng = rand::task_rng();\n     ///    let x: uint = rng.gen();\n-    ///    printfln!(x);\n-    ///    printfln!(rng.gen::<(float, bool)>());\n+    ///    println!(\"{}\", x);\n+    ///    println!(\"{:?}\", rng.gen::<(float, bool)>());\n     /// }\n     /// ```\n     #[inline(always)]\n@@ -289,8 +289,8 @@ pub trait Rng {\n     /// fn main() {\n     ///    let rng = rand::task_rng();\n     ///    let x: ~[uint] = rng.gen_vec(10);\n-    ///    printfln!(x);\n-    ///    printfln!(rng.gen_vec::<(float, bool)>(5));\n+    ///    println!(\"{:?}\", x);\n+    ///    println!(\"{:?}\", rng.gen_vec::<(float, bool)>(5));\n     /// }\n     /// ```\n     fn gen_vec<T: Rand>(&mut self, len: uint) -> ~[T] {\n@@ -314,9 +314,9 @@ pub trait Rng {\n     /// fn main() {\n     ///    let rng = rand::task_rng();\n     ///    let n: uint = rng.gen_integer_range(0u, 10);\n-    ///    printfln!(n);\n+    ///    println!(\"{}\", n);\n     ///    let m: i16 = rng.gen_integer_range(-40, 400);\n-    ///    printfln!(m);\n+    ///    println!(\"{}\", m);\n     /// }\n     /// ```\n     fn gen_integer_range<T: Rand + Int>(&mut self, low: T, high: T) -> T {\n@@ -341,7 +341,7 @@ pub trait Rng {\n     ///\n     /// fn main() {\n     ///     let mut rng = rand::rng();\n-    ///     printfln!(\"%b\", rng.gen_weighted_bool(3));\n+    ///     println!(\"{:b}\", rng.gen_weighted_bool(3));\n     /// }\n     /// ```\n     fn gen_weighted_bool(&mut self, n: uint) -> bool {\n@@ -385,8 +385,8 @@ pub trait Rng {\n     /// use std::rand;\n     ///\n     /// fn main() {\n-    ///     printfln!(rand::task_rng().choose_option([1,2,4,8,16,32]));\n-    ///     printfln!(rand::task_rng().choose_option([]));\n+    ///     println!(\"{:?}\", rand::task_rng().choose_option([1,2,4,8,16,32]));\n+    ///     println!(\"{:?}\", rand::task_rng().choose_option([]));\n     /// }\n     /// ```\n     fn choose_option<'a, T>(&mut self, values: &'a [T]) -> Option<&'a T> {\n@@ -411,7 +411,7 @@ pub trait Rng {\n     ///     let x = [rand::Weighted {weight: 4, item: 'a'},\n     ///              rand::Weighted {weight: 2, item: 'b'},\n     ///              rand::Weighted {weight: 2, item: 'c'}];\n-    ///     printfln!(\"%c\", rng.choose_weighted(x));\n+    ///     println!(\"{}\", rng.choose_weighted(x));\n     /// }\n     /// ```\n     fn choose_weighted<T:Clone>(&mut self, v: &[Weighted<T>]) -> T {\n@@ -432,7 +432,7 @@ pub trait Rng {\n     ///     let x = [rand::Weighted {weight: 4, item: 'a'},\n     ///              rand::Weighted {weight: 2, item: 'b'},\n     ///              rand::Weighted {weight: 2, item: 'c'}];\n-    ///     printfln!(rng.choose_weighted_option(x));\n+    ///     println!(\"{:?}\", rng.choose_weighted_option(x));\n     /// }\n     /// ```\n     fn choose_weighted_option<T:Clone>(&mut self, v: &[Weighted<T>])\n@@ -469,7 +469,7 @@ pub trait Rng {\n     ///     let x = [rand::Weighted {weight: 4, item: 'a'},\n     ///              rand::Weighted {weight: 2, item: 'b'},\n     ///              rand::Weighted {weight: 2, item: 'c'}];\n-    ///     printfln!(rng.weighted_vec(x));\n+    ///     println!(\"{}\", rng.weighted_vec(x));\n     /// }\n     /// ```\n     fn weighted_vec<T:Clone>(&mut self, v: &[Weighted<T>]) -> ~[T] {\n@@ -490,7 +490,7 @@ pub trait Rng {\n     /// use std::rand;\n     ///\n     /// fn main() {\n-    ///     printfln!(rand::task_rng().shuffle(~[1,2,3]));\n+    ///     println!(\"{:?}\", rand::task_rng().shuffle(~[1,2,3]));\n     /// }\n     /// ```\n     fn shuffle<T>(&mut self, values: ~[T]) -> ~[T] {\n@@ -510,9 +510,9 @@ pub trait Rng {\n     ///    let rng = rand::task_rng();\n     ///    let mut y = [1,2,3];\n     ///    rng.shuffle_mut(y);\n-    ///    printfln!(y);\n+    ///    println!(\"{:?}\", y);\n     ///    rng.shuffle_mut(y);\n-    ///    printfln!(y);\n+    ///    println!(\"{:?}\", y);\n     /// }\n     /// ```\n     fn shuffle_mut<T>(&mut self, values: &mut [T]) {\n@@ -535,7 +535,7 @@ pub trait Rng {\n     /// fn main() {\n     ///    let rng = rand::task_rng();\n     ///    let sample = rng.sample(range(1, 100), 5);\n-    ///    printfln!(sample);\n+    ///    println!(\"{:?}\", sample);\n     /// }\n     /// ```\n     fn sample<A, T: Iterator<A>>(&mut self, iter: T, n: uint) -> ~[A] {"}, {"sha": "e22b376e44ffb39a7ebf383bb4cf8451a99cdbca", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -1695,7 +1695,7 @@ pub trait StrSlice<'self> {\n     /// let i = 0u;\n     /// while i < s.len() {\n     ///     let CharRange {ch, next} = s.char_range_at(i);\n-    ///     printfln!(\"%u: %c\", i, ch);\n+    ///     println!(\"{}: {}\", i, ch);\n     ///     i = next;\n     /// }\n     /// ```"}, {"sha": "be5ab35ff88619b170cdcb6010a073b6ca02cff7", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -1003,7 +1003,7 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n      * ```rust\n      * let v = &[1,2,3,4];\n      * for win in v.window_iter() {\n-     *     printfln!(win);\n+     *     println!(\"{:?}\", win);\n      * }\n      * ```\n      *\n@@ -1032,7 +1032,7 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n      * ```rust\n      * let v = &[1,2,3,4,5];\n      * for win in v.chunk_iter() {\n-     *     printfln!(win);\n+     *     println!(\"{:?}\", win);\n      * }\n      * ```\n      *"}, {"sha": "57ecfed15b8a092833aefaf376da92f3cdd22a2d", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -66,7 +66,7 @@ fn generic_extension(cx: @ExtCtxt,\n                      rhses: &[@named_match])\n                      -> MacResult {\n     if cx.trace_macros() {\n-        printfln!(\"%s! { %s }\",\n+        println!(\"{}! \\\\{ {} \\\\}\",\n                   cx.str_of(name),\n                   print::pprust::tt_to_str(\n                       &ast::tt_delim(@mut arg.to_owned()),\n@@ -194,7 +194,7 @@ pub fn add_new_extension(cx: @ExtCtxt,\n                          rhses: &[@named_match])\n                          -> MacResult {\n         if cx.trace_macros() {\n-            printfln!(\"%s! { %s }\",\n+            println!(\"{}! \\\\{ {} \\\\}\",\n                       cx.str_of(name),\n                       print::pprust::tt_to_str(\n                           &ast::tt_delim(@mut arg.to_owned()),"}, {"sha": "3a3466eebff12f669d77f3c93cb5cb509ac871cf", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -24,7 +24,7 @@ fn timed(label: &str, f: &fn()) {\n     let start = time::precise_time_s();\n     f();\n     let end = time::precise_time_s();\n-    printfln!(\"  %s: %f\", label, end - start);\n+    println!(\"  {}: {}\", label, end - start);\n }\n \n fn ascending<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint) {\n@@ -116,7 +116,7 @@ fn main() {\n         }\n     }\n \n-    printfln!(\"%? keys\", n_keys);\n+    println!(\"{} keys\", n_keys);\n \n     io::println(\"\\nTreeMap:\");\n "}, {"sha": "82c1b196c1257bddf2bf2ff75f90be152588a82b", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -55,7 +55,7 @@ fn maybe_run_test(argv: &[~str], name: ~str, test: &fn()) {\n     test();\n     let stop = precise_time_s();\n \n-    printfln!(\"%s:\\t\\t%f ms\", name, (stop - start) * 1000f);\n+    println!(\"{}:\\t\\t{} ms\", name, (stop - start) * 1000f);\n }\n \n fn shift_push() {"}, {"sha": "a676e01d9271d11c17117916f16667933a528856", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -118,7 +118,7 @@ fn main() {\n     let elapsed = (stop - start);\n     let rate = (num_msgs as float) / elapsed;\n \n-    printfln!(\"Sent %? messages in %? seconds\", num_msgs, elapsed);\n-    printfln!(\"  %? messages / second\", rate);\n-    printfln!(\"  %? \u03bcs / message\", 1000000. / rate);\n+    println!(\"Sent {} messages in {} seconds\", num_msgs, elapsed);\n+    println!(\"  {} messages / second\", rate);\n+    println!(\"  {} \u03bcs / message\", 1000000. / rate);\n }"}, {"sha": "1f95e4232ad4738f31dffeebf0634905915fe555", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -114,7 +114,7 @@ fn main() {\n     let elapsed = (stop - start);\n     let rate = (num_msgs as float) / elapsed;\n \n-    printfln!(\"Sent %? messages in %? seconds\", num_msgs, elapsed);\n-    printfln!(\"  %? messages / second\", rate);\n-    printfln!(\"  %? \u03bcs / message\", 1000000. / rate);\n+    println!(\"Sent {} messages in {} seconds\", num_msgs, elapsed);\n+    println!(\"  {} messages / second\", rate);\n+    println!(\"  {} \u03bcs / message\", 1000000. / rate);\n }"}, {"sha": "9183bd5551a078061019cc4f56b5d005c18f446b", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -35,5 +35,5 @@ fn main() {\n         args\n     };\n     let n = from_str::<int>(args[1]).unwrap();\n-    printfln!(\"Ack(3,%d): %d\\n\", n, ack(3, n));\n+    println!(\"Ack(3,{}): {}\\n\", n, ack(3, n));\n }"}, {"sha": "5d4ddec17f5054ea9a3443f079816e3a3e965699", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -61,7 +61,7 @@ fn main() {\n     let stretch_depth = max_depth + 1;\n     let stretch_tree = bottom_up_tree(&stretch_arena, 0, stretch_depth);\n \n-    printfln!(\"stretch tree of depth %d\\t check: %d\",\n+    println!(\"stretch tree of depth {}\\t check: {}\",\n               stretch_depth,\n               item_check(stretch_tree));\n \n@@ -79,11 +79,11 @@ fn main() {\n             chk += item_check(temp_tree);\n             i += 1;\n         }\n-        printfln!(\"%d\\t trees of depth %d\\t check: %d\",\n+        println!(\"{}\\t trees of depth {}\\t check: {}\",\n                   iterations * 2, depth, chk);\n         depth += 2;\n     }\n-    printfln!(\"long lived tree of depth %d\\t check: %d\",\n+    println!(\"long lived tree of depth {}\\t check: {}\",\n               max_depth,\n               item_check(long_lived_tree));\n }"}, {"sha": "f93ce2e93b94a3446aa5129de49088df6ffb2e07", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -94,5 +94,5 @@ fn fannkuch_redux(n: i32) -> i32 {\n #[fixed_stack_segment]\n fn main() {\n     let n: i32 = FromStr::from_str(os::args()[1]).unwrap();\n-    printfln!(\"Pfannkuchen(%d) = %d\", n as int, fannkuch_redux(n) as int);\n+    println!(\"Pfannkuchen({}) = {}\", n as int, fannkuch_redux(n) as int);\n }"}, {"sha": "616ec3fa69411901268a516769243e0949637604", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -31,5 +31,5 @@ fn main() {\n         args\n     };\n     let n = from_str::<int>(args[1]).unwrap();\n-    printfln!(\"%d\\n\", fib(n));\n+    println!(\"{}\\n\", fib(n));\n }"}, {"sha": "5c2176e30ffb649b6c45dfe7aed187f97ec24ea8", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -82,7 +82,7 @@ struct PrintCallback(&'static str);\n \n impl TableCallback for PrintCallback {\n     fn f(&self, entry: &mut Entry) {\n-        printfln!(\"%d\\t%s\", entry.count as int, **self);\n+        println!(\"{}\\t{}\", entry.count as int, **self);\n     }\n }\n \n@@ -279,9 +279,9 @@ fn print_frequencies(frequencies: &Table, frame: i32) {\n     }\n \n     for vector.each |&(key, count)| {\n-        printfln!(\"%s %.3f\",\n-                  key.unpack(frame),\n-                  (count as float * 100.0) / (total_count as float));\n+        println!(\"{} {:.3f}\",\n+                 key.unpack(frame),\n+                 (count as float * 100.0) / (total_count as float));\n     }\n }\n "}, {"sha": "83ffa058b3280db1e5aef20ecc4a0efc36ce75d7", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -16,7 +16,7 @@ fn main() {\n         let mut byte_acc: i8 = 0;\n         let mut bit_num: i32 = 0;\n \n-        printfln!(\"P4\\n%d %d\", w as int, h as int);\n+        println!(\"P4\\n{} {}\", w, h);\n \n         let mode = \"w\";\n         let stdout = fdopen(STDOUT_FILENO as c_int, transmute(&mode[0]));"}, {"sha": "ab5c7377bd8868aff32aee0cc49cf3168a073fa7", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -143,9 +143,9 @@ fn main() {\n     let mut bodies = BODIES;\n \n     offset_momentum(&mut bodies);\n-    printfln!(\"%.9f\", energy(&bodies) as float);\n+    println!(\"{:.9f}\", energy(&bodies) as float);\n \n     advance(&mut bodies, 0.01, n);\n \n-    printfln!(\"%.9f\", energy(&bodies) as float);\n+    println!(\"{:.9f}\", energy(&bodies) as float);\n }"}, {"sha": "105972591f33076a538ecc4f94702eec6b8d3b60", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -63,5 +63,5 @@ fn main() {\n         mult_AtAv(v, u, tmp);\n     }\n \n-    printfln!(\"%.9f\", (dot(u,v) / dot(v,v)).sqrt() as float);\n+    println!(\"{:.9f}\", (dot(u,v) / dot(v,v)).sqrt() as float);\n }"}, {"sha": "0c0c5226dcea08844a7da91133d5a9e350a96c3b", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -40,11 +40,11 @@ fn roundtrip(id: int, n_tasks: int, p: &Port<int>, ch: &Chan<int>) {\n     while (true) {\n         match p.recv() {\n           1 => {\n-            printfln!(\"%d\\n\", id);\n+            println!(\"{}\\n\", id);\n             return;\n           }\n           token => {\n-            info!(\"thread: %d   got token: %d\", id, token);\n+            info2!(\"thread: {}   got token: {}\", id, token);\n             ch.send(token - 1);\n             if token <= n_tasks {\n                 return;"}, {"sha": "76e700609291e79fb707db1d022f2c77d7e6753c", "filename": "src/test/compile-fail/borrowck-auto-mut-ref-to-immut-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -18,7 +18,7 @@ struct Foo {\n \n impl Foo {\n     pub fn printme(&mut self) {\n-        printfln!(\"%d\", self.x);\n+        println!(\"{}\", self.x);\n     }\n }\n "}, {"sha": "e542238d035665c2b56f238f167877663d939223", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -9,5 +9,5 @@ fn a() -> &int {\n \n fn main() {\n     let fifth = a();\n-    printfln!(\"%d\", *fifth);\n+    println!(\"{}\", *fifth);\n }"}, {"sha": "195585dd8975fe9a921b4db038047d30bc7429e5", "filename": "src/test/compile-fail/issue-3820.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -22,5 +22,4 @@ fn main() {\n     let u = Thing {x: 2};\n     let _v = u.mul(&3); // This is ok\n     let w = u * 3; //~ ERROR binary operation * cannot be applied to type `Thing`\n-    printfln!(\"%i\", w.x);\n }"}, {"sha": "5b6240d8ac83b5457ee57e2e3841ab0babd9fa65", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -14,5 +14,5 @@ fn f<'r, T>(v: &'r T) -> &'r fn()->T { id::<&'r fn()->T>(|| *v) } //~ ERROR cann\n \n fn main() {\n     let v = &5;\n-    printfln!(\"%d\", f(v)());\n+    println!(\"{}\", f(v)());\n }"}, {"sha": "2762140be3793c04fc2010aa596b6491d09b4dae", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -28,7 +28,7 @@ fn innocent_looking_victim() {\n             match x {\n                 Some(ref msg) => {\n                     (f.c)(f, true);\n-                    printfln!(msg);\n+                    println!(\"{:?}\", msg);\n                 },\n                 None => fail!(\"oops\"),\n             }"}, {"sha": "1f14fbb27adee70740941eb8fd18b8b92b712eb6", "filename": "src/test/compile-fail/tuple-struct-nonexhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fcompile-fail%2Ftuple-struct-nonexhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Fcompile-fail%2Ftuple-struct-nonexhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-struct-nonexhaustive.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -13,7 +13,7 @@ struct Foo(int, int);\n fn main() {\n     let x = Foo(1, 2);\n     match x {   //~ ERROR non-exhaustive\n-        Foo(1, b) => printfln!(\"%d\", b),\n-        Foo(2, b) => printfln!(\"%d\", b)\n+        Foo(1, b) => println!(\"{}\", b),\n+        Foo(2, b) => println!(\"{}\", b)\n     }\n }"}, {"sha": "88ff00e86faf9531ac6d3715b5630c1ad2f9ef75", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm-slice-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -33,5 +33,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(z.my_mut_slice(), z2.my_slice());\n-    printfln!(\"%d\", z[0]);\n+    println!(\"{}\", z[0]);\n }"}, {"sha": "ef410fb533923bda5a249dcbd93794e2d889fe9d", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -12,5 +12,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(z, z2);\n-    printfln!(\"%d\", z[0]);\n+    println!(\"{}\", z[0]);\n }"}, {"sha": "9e52c3ae928dc832c61c810fa03673803bbc1c43", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -13,5 +13,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(&mut z[0], &z2[0]);\n-    printfln!(\"%d\", z[0]);\n+    println!(\"{}\", z[0]);\n }"}, {"sha": "a41e529d0628b42e9f669a6e512e6b2b6cc998e2", "filename": "src/test/run-fail/borrowck-wg-two-array-indices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -13,5 +13,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(&mut z[0], &mut z2[0]);\n-    printfln!(\"%d\", z[0]);\n+    println!(\"{}\", z[0]);\n }"}, {"sha": "6dc679054275fbe47206761b2f861be9611466e5", "filename": "src/test/run-pass/auto-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fauto-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fauto-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -18,7 +18,7 @@ trait Stuff {\n \n impl Stuff for Foo {\n     fn printme(&self) {\n-        printfln!(\"%d\", self.x);\n+        println!(\"{}\", self.x);\n     }\n }\n "}, {"sha": "3d2988202f3bb5c74e25c7baba31f30bb659063e", "filename": "src/test/run-pass/borrowck-wg-two-imm-borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -10,5 +10,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(&z[0], &z2[0]);\n-    printfln!(\"%d\", z[0]);\n+    println!(\"{}\", z[0]);\n }"}, {"sha": "b85d53991eafee8be38ec5abd33af57641766ecb", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     //info!(\"%?\", bt0);\n \n     do 3u.to(10u) |i| {\n-        printfln!(\"%u\", i);\n+        println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();\n         //info!(\"%?\", bt1);"}, {"sha": "ea313a48bb3ca70740885f5b2776df94c2e42e13", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n     //let bt0 = sys::rusti::frame_address(1u32);\n     //info!(\"%?\", bt0);\n     do cci_iter_lib::iter([1, 2, 3]) |i| {\n-        printf!(\"%d\", *i);\n+        println!(\"{}\", *i);\n         //assert!(bt0 == sys::rusti::frame_address(2u32));\n     }\n }"}, {"sha": "53c67e4802be1fa42762916251afaa96c34e1541", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n     //let bt0 = sys::frame_address();\n     //info!(\"%?\", bt0);\n     do iter(~[1u, 2u, 3u]) |i| {\n-        printfln!(\"%u\", i);\n+        println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();\n         //info!(\"%?\", bt1);"}, {"sha": "e99b0ed185b398b49f15d7fc55f5db8d61723d28", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -25,9 +25,9 @@ static k : K = K {a: 10, b: 20, c: D {d: 30, e: 40}};\n static m : int = k.c.e;\n \n pub fn main() {\n-    printfln!(p);\n-    printfln!(q);\n-    printfln!(t);\n+    println!(\"{:?}\", p);\n+    println!(\"{:?}\", q);\n+    println!(\"{:?}\", t);\n     assert_eq!(p, 3);\n     assert_eq!(q, 3);\n     assert_eq!(t, 20);"}, {"sha": "c893a3ea8da35d136563ecfddc43c01dbd7f95a0", "filename": "src/test/run-pass/const-rec-and-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -21,5 +21,5 @@ static y : AnotherPair = AnotherPair{ x: (0xf0f0f0f0_f0f0f0f0,\n pub fn main() {\n     let (p, _) = y.x;\n     assert_eq!(p, - 1085102592571150096);\n-    printfln!(\"0x%x\", p as uint);\n+    println!(\"{:#x}\", p);\n }"}, {"sha": "c5884ae6e93be8072407fe6ccc7d59eaf015f766", "filename": "src/test/run-pass/const-region-ptrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -15,8 +15,8 @@ static x: &'static int = &10;\n static y: &'static Pair<'static> = &Pair {a: 15, b: x};\n \n pub fn main() {\n-    printfln!(\"x = %?\", *x);\n-    printfln!(\"y = {a: %?, b: %?}\", y.a, *(y.b));\n+    println!(\"x = {}\", *x);\n+    println!(\"y = \\\\{a: {}, b: {}\\\\}\", y.a, *(y.b));\n     assert_eq!(*x, 10);\n     assert_eq!(*(y.b), 10);\n }"}, {"sha": "af6dd4029f5008dac90e092de598bd1dd6530026", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -32,6 +32,6 @@ pub fn main() {\n     assert_eq!(z.b, 22);\n     assert_eq!(w.a, 5);\n     assert_eq!(w.c, 3);\n-    printfln!(\"0x%x\", x.b as uint);\n-    printfln!(\"0x%x\", z.c as uint);\n+    println!(\"{:#x}\", x.b);\n+    println!(\"{:#x}\", z.c);\n }"}, {"sha": "3935bb241c75134760d1c77d0010b6691985c2ad", "filename": "src/test/run-pass/const-vecs-and-slices.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -12,8 +12,8 @@ static x : [int, ..4] = [1,2,3,4];\n static y : &'static [int] = &[1,2,3,4];\n \n pub fn main() {\n-    printfln!(x[1]);\n-    printfln!(y[1]);\n+    println!(\"{:?}\", x[1]);\n+    println!(\"{:?}\", y[1]);\n     assert_eq!(x[1], 2);\n     assert_eq!(x[3], 4);\n     assert_eq!(x[3], y[3]);"}, {"sha": "10efc0b53f228b2f3f219e3e32bf99354dd314ec", "filename": "src/test/run-pass/functional-struct-upd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -16,5 +16,5 @@ struct Foo {\n pub fn main() {\n     let a = Foo { x: 1, y: 2 };\n     let c = Foo { x: 4, .. a};\n-    printfln!(c);\n+    println!(\"{:?}\", c);\n }"}, {"sha": "fdf88f414ecfc798e3c8c9660db2398c803e2e0a", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -82,5 +82,5 @@ pub fn main() {\n         a);\n     let sum = foldl(filt, 0u, |accum, &&n: uint| accum + n );\n \n-    printfln!(\"%u\", sum);\n+    println!(\"{}\", sum);\n }"}, {"sha": "9b667ab433b10c4ef9b902cb0d2d0185910eb2a1", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -40,7 +40,7 @@ pub fn main() {\n     let bools2 = to_bools(Storage{storage: ~[0b01100100]});\n \n     for i in range(0u, 8) {\n-        printfln!(\"%u => %u vs %u\", i, bools[i] as uint, bools2[i] as uint);\n+        println!(\"{} => {} vs {}\", i, bools[i], bools2[i]);\n     }\n \n     assert_eq!(bools, bools2);"}, {"sha": "5e89cb2dd367623514551938856a6aec0a8e6749", "filename": "src/test/run-pass/issue-3211.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3211.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -4,5 +4,5 @@ pub fn main() {\n         x += 1;\n     }\n     assert_eq!(x, 4096);\n-    printfln!(\"x = %u\", x);\n+    println!(\"x = {}\", x);\n }"}, {"sha": "be136160df43a77a492e537c3d9bd22d7917adff", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -40,11 +40,11 @@ pub fn main() {\n \n     // the following compiles and works properly\n     let v1: Vec2 = a * 3f;\n-    printfln!(\"%f %f\", v1.x, v1.y);\n+    println!(\"{} {}\", v1.x, v1.y);\n \n     // the following compiles but v2 will not be Vec2 yet and\n     // using it later will cause an error that the type of v2\n     // must be known\n     let v2 = a * 3f;\n-    printfln!(\"%f %f\", v2.x, v2.y); // error regarding v2's type\n+    println!(\"{} {}\", v2.x, v2.y); // error regarding v2's type\n }"}, {"sha": "0a35120cd1e571a023506ca106ec0ca543327210", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -35,5 +35,5 @@ impl Shape {\n \n pub fn main(){\n     let s = Circle(Point { x: 1f, y: 2f }, 3f);\n-    printfln!(\"%f\", s.area(s));\n+    println!(\"{}\", s.area(s));\n }"}, {"sha": "61e6bd264e2aac97b91380819a7ad0a7b3149090", "filename": "src/test/run-pass/issue-3794.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3794.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -18,7 +18,7 @@ struct S {\n \n impl T for S {\n     fn print(&self) {\n-        printfln!(self);\n+        println!(\"{:?}\", self);\n     }\n }\n "}, {"sha": "6b678ffdb1c4ae631cf9b1f0691e9bf0d5e40b77", "filename": "src/test/run-pass/issue-3904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3904.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -12,7 +12,7 @@\n type ErrPrinter = &fn(&str, &str);\n \n fn example_err(prog: &str, arg: &str) {\n-    printfln!(\"%s: %s\", prog, arg)\n+    println!(\"{}: {}\", prog, arg)\n }\n \n fn exit(+print: ErrPrinter, prog: &str, arg: &str) {"}, {"sha": "b53036d091fd26d341604c6ed2577d0cbc18b573", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -114,15 +114,14 @@ fn query(cmd: ~[~str], sb: TcpSocketBuf) -> Result {\n   //io::println(cmd);\n   sb.write_str(cmd);\n   let res = parse_response(@sb as @io::Reader);\n-  //printfln!(res);\n   res\n }\n \n fn query2(cmd: ~[~str]) -> Result {\n   let _cmd = cmd_to_str(cmd);\n     do io::with_str_reader(~\"$3\\r\\nXXX\\r\\n\") |sb| {\n     let res = parse_response(@sb as @io::Reader);\n-    printfln!(res);\n+    println!(\"{:?}\", res);\n     res\n     }\n }"}, {"sha": "ab38d7650dad34e16aceabd9e95c18e4b483e285", "filename": "src/test/run-pass/issue-4401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4401.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -4,5 +4,5 @@ pub fn main() {\n         count += 1;\n     }\n     assert_eq!(count, 999_999);\n-    printfln!(\"%u\", count);\n+    println!(\"{}\", count);\n }"}, {"sha": "0a1d28b2ef1fbdecc7d47ef8ab2a1e25bc24ec39", "filename": "src/test/run-pass/link-section.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Flink-section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Flink-section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flink-section.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -29,6 +29,6 @@ static mut frobulator: uint = 0xdeadbeef;\n pub fn main() {\n     unsafe {\n         frobulator = 0xcafebabe;\n-        printfln!(\"%? %? %?\", i_live_in_more_text(), magic, frobulator);\n+        println!(\"{} {} {}\", i_live_in_more_text(), magic, frobulator);\n     }\n }"}, {"sha": "e3c375f8b0fdea321aa5019b6ae821bb6cf367fc", "filename": "src/test/run-pass/max-min-classes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -35,5 +35,5 @@ fn Foo(x: int, y: int) -> Foo {\n \n pub fn main() {\n     let foo = Foo(3, 20);\n-    printfln!(\"%d %d\", foo.sum(), foo.product());\n+    println!(\"{} {}\", foo.sum(), foo.product());\n }"}, {"sha": "e2402080bc3c8b2bbe7db65f9c9f57ae062386c7", "filename": "src/test/run-pass/new-style-constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -13,5 +13,5 @@ use std::io::println;\n static FOO: int = 3;\n \n pub fn main() {\n-    printfln!(\"%d\", FOO);\n+    println!(\"{}\", FOO);\n }"}, {"sha": "a689fb0cf7c2b24f75c814ea4566c15012222bf2", "filename": "src/test/run-pass/new-style-fixed-length-vec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::println;\n-\n static FOO: [int, ..3] = [1, 2, 3];\n \n pub fn main() {\n-    printfln!(\"%d %d %d\", FOO[0], FOO[1], FOO[2]);\n+    println!(\"{} {} {}\", FOO[0], FOO[1], FOO[2]);\n }"}, {"sha": "f7c879759dfb05251e472075b7501a07f5fd366a", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -16,6 +16,6 @@ fn compute(i: mytype) -> int { return i.val + 20; }\n \n pub fn main() {\n     let myval = mytype(Mytype{compute: compute, val: 30});\n-    printfln!(\"%d\", compute(myval));\n+    println!(\"{}\", compute(myval));\n     assert_eq!((myval.compute)(myval), 50);\n }"}, {"sha": "238ea7485c944b7d007f4db40cf6581b90bcc4e9", "filename": "src/test/run-pass/placement-new-arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -17,6 +17,6 @@ pub fn main() {\n     let mut arena = Arena::new();\n     let p = &mut arena;\n     let x = p.alloc(|| 4u);\n-    printf!(\"%u\", *x);\n+    println!(\"{}\", *x);\n     assert_eq!(*x, 4u);\n }"}, {"sha": "5ecd09f8bbbb285680416b345b28a03e7ca0456f", "filename": "src/test/run-pass/recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Frecursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Frecursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frecursion.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -30,5 +30,5 @@ fn test<T:Dot> (n:int, i:int, first:T, second:T) ->int {\n }\n pub fn main() {\n   let n = test(1, 0, Nil, Nil);\n-  printfln!(\"%d\", n);\n+  println!(\"{}\", n);\n }"}, {"sha": "919fd3511610391167637c06dca9fdd9dd535fce", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -647,9 +647,9 @@ pub fn main() {\n \n         let r = u.vals.clone();\n         for s in r.iter() {\n-            printfln!(\"val: %s\", *s);\n+            println!(\"val: {}\", *s);\n         }\n-        error!(\"%?\", u.vals.clone());\n+        error2!(\"{:?}\", u.vals.clone());\n         assert_eq!(u.vals.clone(),\n                    ~[ ~\"1\", ~\"2\", ~\"3\", ~\"true\", ~\"false\", ~\"5\", ~\"4\", ~\"3\", ~\"12\"]);\n     }"}, {"sha": "258afaa3f8d12938e66026ff8c90a4c5dbf23699", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -161,7 +161,7 @@ pub fn main() {\n     visit_ty::<~[int]>(&mut v);\n \n     for s in v.types.iter() {\n-        printfln!(\"type: %s\", (*s).clone());\n+        println!(\"type: {}\", (*s).clone());\n     }\n     assert_eq!((*v.types).clone(), ~[~\"bool\", ~\"int\", ~\"i8\", ~\"i16\", ~\"[\", ~\"int\", ~\"]\"]);\n }"}, {"sha": "d2b038fab0e9d0d58e92cbdf32d4f2b8b104e2c4", "filename": "src/test/run-pass/struct-pattern-matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -16,6 +16,6 @@ struct Foo {\n pub fn main() {\n     let a = Foo { x: 1, y: 2 };\n     match a {\n-        Foo { x: x, y: y } => printfln!(\"yes, %d, %d\", x, y)\n+        Foo { x: x, y: y } => println!(\"yes, {}, {}\", x, y)\n     }\n }"}, {"sha": "babe1a18fa123522094da14761f51e1a43be9716", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -99,7 +99,7 @@ impl FloatExt for f64 {}\n impl FloatExt for float {}\n \n \n-fn test_float_ext<T:FloatExt>(n: T) { printfln!(n < n) }\n+fn test_float_ext<T:FloatExt>(n: T) { println!(\"{}\", n < n) }\n \n pub fn main() {\n     test_float_ext(1f32);"}, {"sha": "b7150e873a542daf9533386984679464bac9e158", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -16,7 +16,7 @@ pub trait NumExt: Eq + Ord + Num + NumCast {}\n impl NumExt for f32 {}\n \n fn num_eq_one<T:NumExt>(n: T) {\n-    printfln!(n == NumCast::from(1))\n+    println!(\"{}\", n == NumCast::from(1))\n }\n \n pub fn main() {"}, {"sha": "3c15bc0bd6bf404ffcaa43eee6c8fdeb635b2853", "filename": "src/test/run-pass/tuple-struct-construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -12,5 +12,5 @@ struct Foo(int, int);\n \n pub fn main() {\n     let x = Foo(1, 2);\n-    printfln!(x);\n+    println!(\"{:?}\", x);\n }"}, {"sha": "ec7675abf833738c4278267255bf14ec9d174369", "filename": "src/test/run-pass/tuple-struct-destructuring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Ftuple-struct-destructuring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Ftuple-struct-destructuring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-destructuring.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -13,7 +13,7 @@ struct Foo(int, int);\n pub fn main() {\n     let x = Foo(1, 2);\n     let Foo(y, z) = x;\n-    printfln!(\"%d %d\", y, z);\n+    println!(\"{} {}\", y, z);\n     assert_eq!(y, 1);\n     assert_eq!(z, 2);\n }"}, {"sha": "f50b04059532d009c37b0c1d6d389078113b667d", "filename": "src/test/run-pass/tuple-struct-matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Ftuple-struct-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Ftuple-struct-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-matching.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n         Foo(a, b) => {\n             assert_eq!(a, 1);\n             assert_eq!(b, 2);\n-            printfln!(\"%d %d\", a, b);\n+            println!(\"{} {}\", a, b);\n         }\n     }\n }"}, {"sha": "8e22be1b4325c5325af76f7fc3c5225643249ace", "filename": "src/test/run-pass/vec-fixed-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let x: [int, ..4] = [1, 2, 3, 4];\n-    printfln!(\"%d\", x[0]);\n+    println!(\"{}\", x[0]);\n }"}, {"sha": "d90abe31b2767755970930e695fcc97f44a3ef6a", "filename": "src/test/run-pass/vec-matching-legal-tail-element-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409182de6d74889134209e7fc98174eb8f267170/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs?ref=409182de6d74889134209e7fc98174eb8f267170", "patch": "@@ -5,6 +5,6 @@ pub fn main() {\n             [1, ..ref tail] => &tail[0],\n             _ => unreachable!()\n         };\n-        printfln!(\"%d\", *el);\n+        println!(\"{}\", *el);\n     }\n }"}]}