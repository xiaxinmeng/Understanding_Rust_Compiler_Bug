{"sha": "ecfe7c04888a9c2567773370b127d2e6e1cdaa22", "node_id": "C_kwDOAAsO6NoAKGVjZmU3YzA0ODg4YTljMjU2Nzc3MzM3MGIxMjdkMmU2ZTFjZGFhMjI", "commit": {"author": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T14:24:08Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T14:24:08Z"}, "message": "last fixes after rebase", "tree": {"sha": "dfc55edf778735df9e4f3f276c75e707075204a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfc55edf778735df9e4f3f276c75e707075204a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecfe7c04888a9c2567773370b127d2e6e1cdaa22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecfe7c04888a9c2567773370b127d2e6e1cdaa22", "html_url": "https://github.com/rust-lang/rust/commit/ecfe7c04888a9c2567773370b127d2e6e1cdaa22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecfe7c04888a9c2567773370b127d2e6e1cdaa22/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aed507f1632703a0d3e123fd250fd2eba3ef446", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aed507f1632703a0d3e123fd250fd2eba3ef446", "html_url": "https://github.com/rust-lang/rust/commit/0aed507f1632703a0d3e123fd250fd2eba3ef446"}], "stats": {"total": 123, "additions": 61, "deletions": 62}, "files": [{"sha": "c19be1965444a0a858d5b99b5b6c4ba13be05ab8", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 5, "deletions": 59, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ecfe7c04888a9c2567773370b127d2e6e1cdaa22/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecfe7c04888a9c2567773370b127d2e6e1cdaa22/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=ecfe7c04888a9c2567773370b127d2e6e1cdaa22", "patch": "@@ -3,16 +3,11 @@\n //! `ide` crate.\n \n use ide::AssistResolveStrategy;\n-use lsp_types::{Diagnostic, DiagnosticTag, NumberOrString};\n-use vfs::FileId;\n+use lsp_types::{Diagnostic, DiagnosticTag, NumberOrString, Url};\n \n-use crate::{\n-    global_state::GlobalStateSnapshot, to_proto, Result,\n-    lsp_ext::{\n-        CrateInfoResult, FetchDependencyListResult, FetchDependencyListParams,\n-    },\n-};\n+use vfs::FileId;\n \n+use crate::{global_state::GlobalStateSnapshot, to_proto, Result};\n \n pub(crate) mod request;\n pub(crate) mod notification;\n@@ -33,11 +28,11 @@ pub(crate) fn publish_diagnostics(\n             severity: Some(to_proto::diagnostic_severity(d.severity)),\n             code: Some(NumberOrString::String(d.code.as_str().to_string())),\n             code_description: Some(lsp_types::CodeDescription {\n-                href: lsp_types::Url::parse(&format!(\n+                href: Url::parse(&format!(\n                     \"https://rust-analyzer.github.io/manual.html#{}\",\n                     d.code.as_str()\n                 ))\n-                    .unwrap(),\n+                .unwrap(),\n             }),\n             source: Some(\"rust-analyzer\".to_string()),\n             message: d.message,\n@@ -48,52 +43,3 @@ pub(crate) fn publish_diagnostics(\n         .collect();\n     Ok(diagnostics)\n }\n-\n-pub(crate) fn fetch_dependency_list(\n-    state: GlobalStateSnapshot,\n-    _params: lsp_ext::FetchDependencyListParams,\n-) -> Result<lsp_ext::FetchDependencyListResult> {\n-    let crates = state.analysis.fetch_crates()?;\n-    let crate_infos = crates\n-        .into_iter()\n-        .filter_map(|it| {\n-            let root_file_path = state.file_id_to_file_path(it.root_file_id);\n-            crate_path(root_file_path).and_then(to_url).map(|path| CrateInfoResult {\n-                name: it.name,\n-                version: it.version,\n-                path,\n-            })\n-        })\n-        .collect();\n-    Ok(FetchDependencyListResult { crates: crate_infos })\n-}\n-\n-/// Searches for the directory of a Rust crate given this crate's root file path.\n-///\n-/// # Arguments\n-///\n-/// * `root_file_path`: The path to the root file of the crate.\n-///\n-/// # Returns\n-///\n-/// An `Option` value representing the path to the directory of the crate with the given\n-/// name, if such a crate is found. If no crate with the given name is found, this function\n-/// returns `None`.\n-fn crate_path(root_file_path: VfsPath) -> Option<VfsPath> {\n-    let mut current_dir = root_file_path.parent();\n-    while let Some(path) = current_dir {\n-        let cargo_toml_path = path.join(\"../Cargo.toml\")?;\n-        if fs::metadata(cargo_toml_path.as_path()?).is_ok() {\n-            let crate_path = cargo_toml_path.parent()?;\n-            return Some(crate_path);\n-        }\n-        current_dir = path.parent();\n-    }\n-    None\n-}\n-\n-fn to_url(path: VfsPath) -> Option<Url> {\n-    let path = path.as_path()?;\n-    let str_path = path.as_os_str().to_str()?;\n-    Url::from_file_path(str_path).ok()\n-}\n\\ No newline at end of file"}, {"sha": "f25dc74a142b84e5cd99a90e9efac9aa2d8b9e53", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ecfe7c04888a9c2567773370b127d2e6e1cdaa22/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecfe7c04888a9c2567773370b127d2e6e1cdaa22/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=ecfe7c04888a9c2567773370b127d2e6e1cdaa22", "patch": "@@ -2,6 +2,7 @@\n //! Protocol. This module specifically handles requests.\n \n use std::{\n+    fs,\n     io::Write as _,\n     process::{self, Stdio},\n     sync::Arc,\n@@ -29,7 +30,7 @@ use project_model::{ManifestPath, ProjectWorkspace, TargetKind};\n use serde_json::json;\n use stdx::{format_to, never};\n use syntax::{algo, ast, AstNode, TextRange, TextSize};\n-use vfs::{AbsPath, AbsPathBuf};\n+use vfs::{AbsPath, AbsPathBuf, VfsPath};\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n@@ -38,7 +39,10 @@ use crate::{\n     from_proto,\n     global_state::{GlobalState, GlobalStateSnapshot},\n     line_index::LineEndings,\n-    lsp_ext::{self, PositionOrRange, ViewCrateGraphParams, WorkspaceSymbolParams},\n+    lsp_ext::{\n+        self, CrateInfoResult, FetchDependencyListParams, FetchDependencyListResult,\n+        PositionOrRange, ViewCrateGraphParams, WorkspaceSymbolParams,\n+    },\n     lsp_utils::{all_edits_are_disjoint, invalid_params_error},\n     to_proto, LspError, Result,\n };\n@@ -1881,3 +1885,52 @@ fn run_rustfmt(\n         Ok(Some(to_proto::text_edit_vec(&line_index, diff(&file, &new_text))))\n     }\n }\n+\n+pub(crate) fn fetch_dependency_list(\n+    state: GlobalStateSnapshot,\n+    _params: FetchDependencyListParams,\n+) -> Result<FetchDependencyListResult> {\n+    let crates = state.analysis.fetch_crates()?;\n+    let crate_infos = crates\n+        .into_iter()\n+        .filter_map(|it| {\n+            let root_file_path = state.file_id_to_file_path(it.root_file_id);\n+            crate_path(root_file_path).and_then(to_url).map(|path| CrateInfoResult {\n+                name: it.name,\n+                version: it.version,\n+                path,\n+            })\n+        })\n+        .collect();\n+    Ok(FetchDependencyListResult { crates: crate_infos })\n+}\n+\n+/// Searches for the directory of a Rust crate given this crate's root file path.\n+///\n+/// # Arguments\n+///\n+/// * `root_file_path`: The path to the root file of the crate.\n+///\n+/// # Returns\n+///\n+/// An `Option` value representing the path to the directory of the crate with the given\n+/// name, if such a crate is found. If no crate with the given name is found, this function\n+/// returns `None`.\n+fn crate_path(root_file_path: VfsPath) -> Option<VfsPath> {\n+    let mut current_dir = root_file_path.parent();\n+    while let Some(path) = current_dir {\n+        let cargo_toml_path = path.join(\"../Cargo.toml\")?;\n+        if fs::metadata(cargo_toml_path.as_path()?).is_ok() {\n+            let crate_path = cargo_toml_path.parent()?;\n+            return Some(crate_path);\n+        }\n+        current_dir = path.parent();\n+    }\n+    None\n+}\n+\n+fn to_url(path: VfsPath) -> Option<Url> {\n+    let path = path.as_path()?;\n+    let str_path = path.as_os_str().to_str()?;\n+    Url::from_file_path(str_path).ok()\n+}"}, {"sha": "a4ad3e5a553ce7200a671c05265ce5e898d443f4", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecfe7c04888a9c2567773370b127d2e6e1cdaa22/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/ecfe7c04888a9c2567773370b127d2e6e1cdaa22/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=ecfe7c04888a9c2567773370b127d2e6e1cdaa22", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 31ca513a249753ab\n+lsp_ext.rs hash: fdf1afd34548abbc\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}]}