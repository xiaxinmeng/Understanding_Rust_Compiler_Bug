{"sha": "1d34f2c22879886fcd452da096317861f8a0c9e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMzRmMmMyMjg3OTg4NmZjZDQ1MmRhMDk2MzE3ODYxZjhhMGM5ZTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-25T07:52:46Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-25T07:52:46Z"}, "message": "librustc_codegen_ssa: deny(elided_lifetimes_in_paths)", "tree": {"sha": "35a9a352169d9ce778bdc08cec9612ba837495b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a9a352169d9ce778bdc08cec9612ba837495b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d34f2c22879886fcd452da096317861f8a0c9e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d34f2c22879886fcd452da096317861f8a0c9e6", "html_url": "https://github.com/rust-lang/rust/commit/1d34f2c22879886fcd452da096317861f8a0c9e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d34f2c22879886fcd452da096317861f8a0c9e6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1911babed0364ede7dedc646dbca63fac03d5c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1911babed0364ede7dedc646dbca63fac03d5c5", "html_url": "https://github.com/rust-lang/rust/commit/c1911babed0364ede7dedc646dbca63fac03d5c5"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "78570cce57dd9ea9d88ea6ddd73aa4dda8d2b382", "filename": "src/librustc_codegen_ssa/back/command.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs?ref=1d34f2c22879886fcd452da096317861f8a0c9e6", "patch": "@@ -159,7 +159,7 @@ impl Command {\n }\n \n impl fmt::Debug for Command {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.command().fmt(f)\n     }\n }"}, {"sha": "1f4c5543fa9aa05d2481752264a44d561698a630", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=1d34f2c22879886fcd452da096317861f8a0c9e6", "patch": "@@ -25,7 +25,7 @@ pub struct LinkerInfo {\n }\n \n impl LinkerInfo {\n-    pub fn new(tcx: TyCtxt) -> LinkerInfo {\n+    pub fn new(tcx: TyCtxt<'_, '_, '_>) -> LinkerInfo {\n         LinkerInfo {\n             exports: tcx.sess.crate_types.borrow().iter().map(|&c| {\n                 (c, exported_symbols(tcx, c))\n@@ -1052,7 +1052,7 @@ impl<'a> Linker for WasmLd<'a> {\n     }\n }\n \n-fn exported_symbols(tcx: TyCtxt, crate_type: CrateType) -> Vec<String> {\n+fn exported_symbols(tcx: TyCtxt<'_, '_, '_>, crate_type: CrateType) -> Vec<String> {\n     if let Some(ref exports) = tcx.sess.target.target.options.override_export_symbols {\n         return exports.clone()\n     }"}, {"sha": "16f5880b13f5bd70dc6878469361ef0a00fe3c9a", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=1d34f2c22879886fcd452da096317861f8a0c9e6", "patch": "@@ -22,7 +22,7 @@ pub type ExportedSymbols = FxHashMap<\n     Arc<Vec<(String, SymbolExportLevel)>>,\n >;\n \n-pub fn threshold(tcx: TyCtxt) -> SymbolExportLevel {\n+pub fn threshold(tcx: TyCtxt<'_, '_, '_>) -> SymbolExportLevel {\n     crates_export_threshold(&tcx.sess.crate_types.borrow())\n }\n \n@@ -342,7 +342,7 @@ fn upstream_monomorphizations_for_provider<'a, 'tcx>(\n        .cloned()\n }\n \n-fn is_unreachable_local_definition_provider(tcx: TyCtxt, def_id: DefId) -> bool {\n+fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> bool {\n     if let Some(node_id) = tcx.hir().as_local_node_id(def_id) {\n         !tcx.reachable_set(LOCAL_CRATE).0.contains(&node_id)\n     } else {\n@@ -351,20 +351,20 @@ fn is_unreachable_local_definition_provider(tcx: TyCtxt, def_id: DefId) -> bool\n     }\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     providers.reachable_non_generics = reachable_non_generics_provider;\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider_local;\n     providers.exported_symbols = exported_symbols_provider_local;\n     providers.upstream_monomorphizations = upstream_monomorphizations_provider;\n     providers.is_unreachable_local_definition = is_unreachable_local_definition_provider;\n }\n \n-pub fn provide_extern(providers: &mut Providers) {\n+pub fn provide_extern(providers: &mut Providers<'_>) {\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider_extern;\n     providers.upstream_monomorphizations_for = upstream_monomorphizations_for_provider;\n }\n \n-fn symbol_export_level(tcx: TyCtxt, sym_def_id: DefId) -> SymbolExportLevel {\n+fn symbol_export_level(tcx: TyCtxt<'_, '_, '_>, sym_def_id: DefId) -> SymbolExportLevel {\n     // We export anything that's not mangled at the \"C\" layer as it probably has\n     // to do with ABI concerns. We do not, however, apply such treatment to\n     // special symbols in the standard library for various plumbing between"}, {"sha": "908ee95efcba3ffa0e1a92cf1f2216534ad35b17", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=1d34f2c22879886fcd452da096317861f8a0c9e6", "patch": "@@ -321,7 +321,7 @@ fn need_pre_lto_bitcode_for_incr_comp(sess: &Session) -> bool {\n \n pub fn start_async_codegen<B: ExtraBackendMethods>(\n     backend: B,\n-    tcx: TyCtxt,\n+    tcx: TyCtxt<'_, '_, '_>,\n     time_graph: Option<TimeGraph>,\n     metadata: EncodedMetadata,\n     coordinator_receive: Receiver<Box<dyn Any + Send>>,\n@@ -947,7 +947,7 @@ enum MainThreadWorkerState {\n \n fn start_executing_work<B: ExtraBackendMethods>(\n     backend: B,\n-    tcx: TyCtxt,\n+    tcx: TyCtxt<'_, '_, '_>,\n     crate_info: &CrateInfo,\n     shared_emitter: SharedEmitter,\n     codegen_worker_send: Sender<Message<B>>,\n@@ -1683,7 +1683,7 @@ impl SharedEmitter {\n }\n \n impl Emitter for SharedEmitter {\n-    fn emit(&mut self, db: &DiagnosticBuilder) {\n+    fn emit(&mut self, db: &DiagnosticBuilder<'_>) {\n         drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n             msg: db.message(),\n             code: db.code.clone(),\n@@ -1822,7 +1822,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n     }\n \n     pub fn submit_pre_codegened_module_to_llvm(&self,\n-                                                       tcx: TyCtxt,\n+                                                       tcx: TyCtxt<'_, '_, '_>,\n                                                        module: ModuleCodegen<B::Module>) {\n         self.wait_for_signal_to_codegen_item();\n         self.check_for_errors(tcx.sess);\n@@ -1832,7 +1832,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n         submit_codegened_module_to_llvm(&self.backend, tcx, module, cost);\n     }\n \n-    pub fn codegen_finished(&self, tcx: TyCtxt) {\n+    pub fn codegen_finished(&self, tcx: TyCtxt<'_, '_, '_>) {\n         self.wait_for_signal_to_codegen_item();\n         self.check_for_errors(tcx.sess);\n         drop(self.coordinator_send.send(Box::new(Message::CodegenComplete::<B>)));\n@@ -1871,7 +1871,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n \n pub fn submit_codegened_module_to_llvm<B: ExtraBackendMethods>(\n     _backend: &B,\n-    tcx: TyCtxt,\n+    tcx: TyCtxt<'_, '_, '_>,\n     module: ModuleCodegen<B::Module>,\n     cost: u64\n ) {\n@@ -1884,7 +1884,7 @@ pub fn submit_codegened_module_to_llvm<B: ExtraBackendMethods>(\n \n pub fn submit_post_lto_module_to_llvm<B: ExtraBackendMethods>(\n     _backend: &B,\n-    tcx: TyCtxt,\n+    tcx: TyCtxt<'_, '_, '_>,\n     module: CachedModuleCodegen\n ) {\n     let llvm_work_item = WorkItem::CopyPostLtoArtifacts(module);\n@@ -1896,7 +1896,7 @@ pub fn submit_post_lto_module_to_llvm<B: ExtraBackendMethods>(\n \n pub fn submit_pre_lto_module_to_llvm<B: ExtraBackendMethods>(\n     _backend: &B,\n-    tcx: TyCtxt,\n+    tcx: TyCtxt<'_, '_, '_>,\n     module: CachedModuleCodegen\n ) {\n     let filename = pre_lto_bitcode_filename(&module.name);\n@@ -1921,7 +1921,7 @@ pub fn pre_lto_bitcode_filename(module_name: &str) -> String {\n     format!(\"{}.{}\", module_name, PRE_LTO_BC_EXT)\n }\n \n-fn msvc_imps_needed(tcx: TyCtxt) -> bool {\n+fn msvc_imps_needed(tcx: TyCtxt<'_, '_, '_>) -> bool {\n     // This should never be true (because it's not supported). If it is true,\n     // something is wrong with commandline arg validation.\n     assert!(!(tcx.sess.opts.cg.linker_plugin_lto.enabled() &&"}, {"sha": "fad41a11a82ba126351146f3b678f0bf2abcb9e3", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=1d34f2c22879886fcd452da096317861f8a0c9e6", "patch": "@@ -370,7 +370,7 @@ pub fn from_immediate<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n pub fn to_immediate<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     val: Bx::Value,\n-    layout: layout::TyLayout,\n+    layout: layout::TyLayout<'_>,\n ) -> Bx::Value {\n     if let layout::Abi::Scalar(ref scalar) = layout.abi {\n         return to_immediate_scalar(bx, val, scalar);\n@@ -802,7 +802,7 @@ fn assert_and_save_dep_graph<'ll, 'tcx>(tcx: TyCtxt<'ll, 'tcx, 'tcx>) {\n }\n \n impl CrateInfo {\n-    pub fn new(tcx: TyCtxt) -> CrateInfo {\n+    pub fn new(tcx: TyCtxt<'_, '_, '_>) -> CrateInfo {\n         let mut info = CrateInfo {\n             panic_runtime: None,\n             compiler_builtins: None,\n@@ -880,7 +880,7 @@ impl CrateInfo {\n         return info\n     }\n \n-    fn load_wasm_imports(&mut self, tcx: TyCtxt, cnum: CrateNum) {\n+    fn load_wasm_imports(&mut self, tcx: TyCtxt<'_, '_, '_>, cnum: CrateNum) {\n         self.wasm_imports.extend(tcx.wasm_import_module_map(cnum).iter().map(|(&id, module)| {\n             let instance = Instance::mono(tcx, id);\n             let import_name = tcx.symbol_name(instance);\n@@ -890,13 +890,13 @@ impl CrateInfo {\n     }\n }\n \n-fn is_codegened_item(tcx: TyCtxt, id: DefId) -> bool {\n+fn is_codegened_item(tcx: TyCtxt<'_, '_, '_>, id: DefId) -> bool {\n     let (all_mono_items, _) =\n         tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n     all_mono_items.contains(&id)\n }\n \n-pub fn provide_both(providers: &mut Providers) {\n+pub fn provide_both(providers: &mut Providers<'_>) {\n     providers.backend_optimization_level = |tcx, cratenum| {\n         let for_speed = match tcx.sess.opts.optimize {\n             // If globally no optimisation is done, #[optimize] has no effect."}, {"sha": "db77074deef9415526a6bfac2d7a3c19ac40b753", "filename": "src/librustc_codegen_ssa/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=1d34f2c22879886fcd452da096317861f8a0c9e6", "patch": "@@ -134,7 +134,7 @@ mod temp_stable_hash_impls {\n     }\n }\n \n-pub fn langcall(tcx: TyCtxt,\n+pub fn langcall(tcx: TyCtxt<'_, '_, '_>,\n                 span: Option<Span>,\n                 msg: &str,\n                 li: LangItem)"}, {"sha": "92fa2766f8727a535d1d6c548fdc4a8a33c830dd", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=1d34f2c22879886fcd452da096317861f8a0c9e6", "patch": "@@ -11,7 +11,6 @@\n #![allow(dead_code)]\n #![deny(rust_2018_idioms)]\n #![allow(explicit_outlives_requirements)]\n-#![allow(elided_lifetimes_in_paths)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "0e8cdc83b486e24aed97a27d18e12f73bc6d30b0", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=1d34f2c22879886fcd452da096317861f8a0c9e6", "patch": "@@ -48,7 +48,7 @@ pub struct OperandRef<'tcx, V> {\n }\n \n impl<V: CodegenObject> fmt::Debug for OperandRef<'tcx, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"OperandRef({:?} @ {:?})\", self.val, self.layout)\n     }\n }"}, {"sha": "00eae9098e74fdd0abd4e77c8011c9adedcca4a3", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=1d34f2c22879886fcd452da096317861f8a0c9e6", "patch": "@@ -32,13 +32,18 @@ impl<'tcx, T> Backend<'tcx> for T where\n }\n \n pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send {\n-    fn new_metadata(&self, sess: TyCtxt, mod_name: &str) -> Self::Module;\n+    fn new_metadata(&self, sess: TyCtxt<'_, '_, '_>, mod_name: &str) -> Self::Module;\n     fn write_metadata<'b, 'gcx>(\n         &self,\n         tcx: TyCtxt<'b, 'gcx, 'gcx>,\n         metadata: &mut Self::Module,\n     ) -> EncodedMetadata;\n-    fn codegen_allocator(&self, tcx: TyCtxt, mods: &mut Self::Module, kind: AllocatorKind);\n+    fn codegen_allocator(\n+        &self,\n+        tcx: TyCtxt<'_, '_, '_>,\n+        mods: &mut Self::Module,\n+        kind: AllocatorKind\n+    );\n     fn compile_codegen_unit<'a, 'tcx: 'a>(\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "5099107a393036a28b2cbee10b7304e670897450", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=1d34f2c22879886fcd452da096317861f8a0c9e6", "patch": "@@ -100,7 +100,7 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     fn checked_binop(\n         &mut self,\n         oop: OverflowOp,\n-        ty: Ty,\n+        ty: Ty<'_>,\n         lhs: Self::Value,\n         rhs: Self::Value,\n     ) -> (Self::Value, Self::Value);"}, {"sha": "135188e98c71c57e6183c17f412c9a9c89c4cda8", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d34f2c22879886fcd452da096317861f8a0c9e6/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=1d34f2c22879886fcd452da096317861f8a0c9e6", "patch": "@@ -22,12 +22,12 @@ pub trait DebugInfoMethods<'tcx>: BackendTypes {\n         instance: Instance<'tcx>,\n         sig: ty::FnSig<'tcx>,\n         llfn: Self::Value,\n-        mir: &mir::Mir,\n+        mir: &mir::Mir<'_>,\n     ) -> FunctionDebugContext<Self::DIScope>;\n \n     fn create_mir_scopes(\n         &self,\n-        mir: &mir::Mir,\n+        mir: &mir::Mir<'_>,\n         debug_context: &FunctionDebugContext<Self::DIScope>,\n     ) -> IndexVec<mir::SourceScope, MirDebugScope<Self::DIScope>>;\n     fn extend_scope_to_file("}]}