{"sha": "6ed8cb6616694244efebd84f70c4e8b41eab6bbf", "node_id": "C_kwDOAAsO6NoAKDZlZDhjYjY2MTY2OTQyNDRlZmViZDg0ZjcwYzRlOGI0MWVhYjZiYmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-11T22:36:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-11T22:36:46Z"}, "message": "Rollup merge of #105472 - spastorino:make-encoder-use-queries, r=oli-obk\n\nMake encode_info_for_trait_item use queries instead of accessing the HIR\n\nThis change avoids accessing the HIR on `encode_info_for_trait_item` and uses queries. We will need to execute this function for elements that have no HIR and by using queries we will be able to feed for definitions that have no HIR.\n\nr? ``@oli-obk``", "tree": {"sha": "6e4276aacaa18843f5c7e7f0feb5d53770c85c59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e4276aacaa18843f5c7e7f0feb5d53770c85c59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ed8cb6616694244efebd84f70c4e8b41eab6bbf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjllt+CRBK7hj4Ov3rIwAAJpgIABRgCJlzzF7tt/IQH+lBzIDm\n2RcTKqZOiFMyIpDfs7qIaHycW6rZlaIl6kxWxIo2WmsCUfB+63LT18FEQvRj6zNY\n6p85Sf9D9yR9y6ihkFD01X+DYI2JJotoPtiIawYk3nyGr596luiji6AK1mArIPwu\n6TCp1uzjABjg4FxJhbv3FS8BWB/YDTdU1MXSdXIP5ioYxhwqeNZEarcZ8dydS7ih\nauQFCRs7AP/7HlxOA+53JyphFClNWk4zCqK7zFSdmqGj26QJxCSVA/xa9Bpe2TaY\nF0JoDCnDuBIr0u8qm5TtRuNiJQ9ftWeuJP/Tjrzhh1uktmhDYqDWrq7F2RKvtRY=\n=h2yf\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e4276aacaa18843f5c7e7f0feb5d53770c85c59\nparent 4154e14f9ac586b4bb8c67db1d474b4d8c960e23\nparent 99d229095e856c7f9a2ec3663e17f30967e4098e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670798206 +0100\ncommitter GitHub <noreply@github.com> 1670798206 +0100\n\nRollup merge of #105472 - spastorino:make-encoder-use-queries, r=oli-obk\n\nMake encode_info_for_trait_item use queries instead of accessing the HIR\n\nThis change avoids accessing the HIR on `encode_info_for_trait_item` and uses queries. We will need to execute this function for elements that have no HIR and by using queries we will be able to feed for definitions that have no HIR.\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed8cb6616694244efebd84f70c4e8b41eab6bbf", "html_url": "https://github.com/rust-lang/rust/commit/6ed8cb6616694244efebd84f70c4e8b41eab6bbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ed8cb6616694244efebd84f70c4e8b41eab6bbf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4154e14f9ac586b4bb8c67db1d474b4d8c960e23", "url": "https://api.github.com/repos/rust-lang/rust/commits/4154e14f9ac586b4bb8c67db1d474b4d8c960e23", "html_url": "https://github.com/rust-lang/rust/commit/4154e14f9ac586b4bb8c67db1d474b4d8c960e23"}, {"sha": "99d229095e856c7f9a2ec3663e17f30967e4098e", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d229095e856c7f9a2ec3663e17f30967e4098e", "html_url": "https://github.com/rust-lang/rust/commit/99d229095e856c7f9a2ec3663e17f30967e4098e"}], "stats": {"total": 16, "additions": 4, "deletions": 12}, "files": [{"sha": "29f9e82da75cc58b9b6f50b2f090dde45e50d7d2", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ed8cb6616694244efebd84f70c4e8b41eab6bbf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed8cb6616694244efebd84f70c4e8b41eab6bbf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6ed8cb6616694244efebd84f70c4e8b41eab6bbf", "patch": "@@ -1337,24 +1337,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_info_for_trait_item({:?})\", def_id);\n         let tcx = self.tcx;\n \n-        let ast_item = tcx.hir().expect_trait_item(def_id.expect_local());\n-        self.tables.impl_defaultness.set(def_id.index, ast_item.defaultness);\n+        let impl_defaultness = tcx.impl_defaultness(def_id.expect_local());\n+        self.tables.impl_defaultness.set(def_id.index, impl_defaultness);\n         let trait_item = tcx.associated_item(def_id);\n         self.tables.assoc_container.set(def_id.index, trait_item.container);\n \n         match trait_item.kind {\n             ty::AssocKind::Const => {}\n             ty::AssocKind::Fn => {\n-                let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind else { bug!() };\n-                match *m {\n-                    hir::TraitFn::Required(ref names) => {\n-                        record_array!(self.tables.fn_arg_names[def_id] <- *names)\n-                    }\n-                    hir::TraitFn::Provided(body) => {\n-                        record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body))\n-                    }\n-                };\n-                self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n+                record_array!(self.tables.fn_arg_names[def_id] <- tcx.fn_arg_names(def_id));\n+                self.tables.asyncness.set(def_id.index, tcx.asyncness(def_id));\n                 self.tables.constness.set(def_id.index, hir::Constness::NotConst);\n             }\n             ty::AssocKind::Type => {"}]}