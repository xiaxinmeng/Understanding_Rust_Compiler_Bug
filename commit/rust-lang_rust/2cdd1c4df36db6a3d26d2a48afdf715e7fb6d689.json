{"sha": "2cdd1c4df36db6a3d26d2a48afdf715e7fb6d689", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZGQxYzRkZjM2ZGI2YTNkMjZkMmE0OGFmZGY3MTVlN2ZiNmQ2ODk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-12-26T22:26:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-12-26T22:26:03Z"}, "message": "rustc: Switch `start_fn` to hidden visibility\n\nThis'll avoid exporting a symbol from binaries unnecessarily and should help the\nlinker clean things up if it can.", "tree": {"sha": "4badf6082a49793ad62c0f836eb3ddd77f82e67b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4badf6082a49793ad62c0f836eb3ddd77f82e67b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cdd1c4df36db6a3d26d2a48afdf715e7fb6d689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cdd1c4df36db6a3d26d2a48afdf715e7fb6d689", "html_url": "https://github.com/rust-lang/rust/commit/2cdd1c4df36db6a3d26d2a48afdf715e7fb6d689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cdd1c4df36db6a3d26d2a48afdf715e7fb6d689/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81e375dba5e7915548dc6067cf16c62cdbce4853", "url": "https://api.github.com/repos/rust-lang/rust/commits/81e375dba5e7915548dc6067cf16c62cdbce4853", "html_url": "https://github.com/rust-lang/rust/commit/81e375dba5e7915548dc6067cf16c62cdbce4853"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "55c194ae7a58482f1e0a1cb3d6fbc52aee7fb8cb", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2cdd1c4df36db6a3d26d2a48afdf715e7fb6d689/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdd1c4df36db6a3d26d2a48afdf715e7fb6d689/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=2cdd1c4df36db6a3d26d2a48afdf715e7fb6d689", "patch": "@@ -305,17 +305,35 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n                                             .or_insert_with(make_codegen_unit);\n \n+        let mut can_be_internalized = true;\n         let (linkage, visibility) = match trans_item.explicit_linkage(tcx) {\n             Some(explicit_linkage) => (explicit_linkage, Visibility::Default),\n             None => {\n                 match trans_item {\n                     MonoItem::Fn(ref instance) => {\n                         let visibility = match instance.def {\n                             InstanceDef::Item(def_id) => {\n-                                // If we encounter the lang start item, we set the visibility to\n-                                // default.\n+                                // The `start_fn` lang item is actually a\n+                                // monomorphized instance of a function in the\n+                                // standard library, used for the `main`\n+                                // function. We don't want to export it so we\n+                                // tag it with `Hidden` visibility but this\n+                                // symbol is only referenced from the actual\n+                                // `main` symbol which we unfortunately don't\n+                                // know anything about during\n+                                // partitioning/collection. As a result we\n+                                // forcibly keep this symbol out of the\n+                                // `internalization_candidates` set.\n+                                //\n+                                // FIXME: eventually we don't want to always\n+                                // force this symbol to have hidden\n+                                // visibility, it should indeed be a candidate\n+                                // for internalization, but we have to\n+                                // understand that it's referenced from the\n+                                // `main` symbol we'll generate later.\n                                 if tcx.lang_items().start_fn() == Some(def_id) {\n-                                    Visibility::Default\n+                                    can_be_internalized = false;\n+                                    Visibility::Hidden\n                                 } else if def_id.is_local() {\n                                     if tcx.is_exported_symbol(def_id) {\n                                         Visibility::Default\n@@ -350,7 +368,7 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }\n             }\n         };\n-        if visibility == Visibility::Hidden {\n+        if visibility == Visibility::Hidden && can_be_internalized {\n             internalization_candidates.insert(trans_item);\n         }\n "}]}