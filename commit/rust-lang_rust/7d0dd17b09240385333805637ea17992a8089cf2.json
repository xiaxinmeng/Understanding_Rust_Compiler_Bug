{"sha": "7d0dd17b09240385333805637ea17992a8089cf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMGRkMTdiMDkyNDAzODUzMzM4MDU2MzdlYTE3OTkyYTgwODljZjI=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-03T11:15:54Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-05T11:59:26Z"}, "message": "Add hover actions as LSP extension", "tree": {"sha": "605249f14a8d7c8071362e31be28ca9c17b55173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/605249f14a8d7c8071362e31be28ca9c17b55173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d0dd17b09240385333805637ea17992a8089cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d0dd17b09240385333805637ea17992a8089cf2", "html_url": "https://github.com/rust-lang/rust/commit/7d0dd17b09240385333805637ea17992a8089cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d0dd17b09240385333805637ea17992a8089cf2/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "913a623281ed4cd190ca04845c64e5054d176a2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/913a623281ed4cd190ca04845c64e5054d176a2a", "html_url": "https://github.com/rust-lang/rust/commit/913a623281ed4cd190ca04845c64e5054d176a2a"}], "stats": {"total": 407, "additions": 351, "deletions": 56}, "files": [{"sha": "baa9fc8a8ff958c8db98553a94751ab6992ec745", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 122, "deletions": 12, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=7d0dd17b09240385333805637ea17992a8089cf2", "patch": "@@ -13,14 +13,43 @@ use ra_ide_db::{\n use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset};\n \n use crate::{\n-    display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n-    FilePosition, RangeInfo,\n+    display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel, ToNav},\n+    FilePosition, RangeInfo, NavigationTarget,\n };\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct HoverConfig {\n+    pub implementations: bool,\n+}\n+\n+impl Default for HoverConfig {\n+    fn default() -> Self {\n+        Self { implementations: true }\n+    }\n+}\n+\n+impl HoverConfig {\n+    pub const NO_ACTIONS: Self = Self { implementations: false };\n+\n+    pub fn any(&self) -> bool {\n+        self.implementations\n+    }\n+\n+    pub fn none(&self) -> bool {\n+        !self.any()\n+    }\n+}\n+\n+#[derive(Debug, Clone)]\n+pub enum HoverAction {\n+    Implementaion(FilePosition),\n+}\n+\n /// Contains the results when hovering over an item\n #[derive(Debug, Default)]\n pub struct HoverResult {\n     results: Vec<String>,\n+    actions: Vec<HoverAction>,\n }\n \n impl HoverResult {\n@@ -48,10 +77,20 @@ impl HoverResult {\n         &self.results\n     }\n \n+    pub fn actions(&self) -> &[HoverAction] {\n+        &self.actions\n+    }\n+\n+    pub fn push_action(&mut self, action: HoverAction) {\n+        self.actions.push(action);\n+    }\n+\n     /// Returns the results converted into markup\n     /// for displaying in a UI\n+    ///\n+    /// Does not process actions!\n     pub fn to_markup(&self) -> String {\n-        self.results.join(\"\\n\\n---\\n\")\n+        self.results.join(\"\\n\\n___\\n\")\n     }\n }\n \n@@ -82,6 +121,10 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         res.extend(hover_text_from_name_kind(db, name_kind));\n \n         if !res.is_empty() {\n+            if let Some(action) = show_implementations_action(db, name_kind) {\n+                res.push_action(action);\n+            }\n+\n             return Some(RangeInfo::new(range, res));\n         }\n     }\n@@ -112,6 +155,26 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     Some(RangeInfo::new(range, res))\n }\n \n+fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n+    fn to_action(nav_target: NavigationTarget) -> HoverAction {\n+        HoverAction::Implementaion(FilePosition {\n+            file_id: nav_target.file_id(),\n+            offset: nav_target.range().start(),\n+        })\n+    }\n+\n+    match def {\n+        Definition::ModuleDef(it) => match it {\n+            ModuleDef::Adt(Adt::Struct(it)) => Some(to_action(it.to_nav(db))),\n+            ModuleDef::Adt(Adt::Union(it)) => Some(to_action(it.to_nav(db))),\n+            ModuleDef::Adt(Adt::Enum(it)) => Some(to_action(it.to_nav(db))),\n+            ModuleDef::Trait(it) => Some(to_action(it.to_nav(db))),\n+            _ => None,\n+        },\n+        _ => None,\n+    }\n+}\n+\n fn hover_text(\n     docs: Option<String>,\n     desc: Option<String>,\n@@ -228,6 +291,8 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n \n #[cfg(test)]\n mod tests {\n+    use super::*;\n+\n     use ra_db::FileLoader;\n     use ra_syntax::TextRange;\n \n@@ -241,7 +306,14 @@ mod tests {\n         s.map(trim_markup)\n     }\n \n-    fn check_hover_result(fixture: &str, expected: &[&str]) -> String {\n+    fn assert_impl_action(action: &HoverAction, position: u32) {\n+        let offset = match action {\n+            HoverAction::Implementaion(pos) => pos.offset\n+        };\n+        assert_eq!(offset, position.into());\n+    }\n+\n+    fn check_hover_result(fixture: &str, expected: &[&str]) -> (String, Vec<HoverAction>) {\n         let (analysis, position) = analysis_and_position(fixture);\n         let hover = analysis.hover(position).unwrap().unwrap();\n         let mut results = Vec::from(hover.info.results());\n@@ -256,7 +328,7 @@ mod tests {\n         assert_eq!(hover.info.len(), expected.len());\n \n         let content = analysis.db.file_text(position.file_id);\n-        content[hover.range].to_string()\n+        (content[hover.range].to_string(), hover.info.actions().to_vec())\n     }\n \n     fn check_hover_no_result(fixture: &str) {\n@@ -746,7 +818,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_through_macro() {\n-        let hover_on = check_hover_result(\n+        let (hover_on, _) = check_hover_result(\n             \"\n             //- /lib.rs\n             macro_rules! id {\n@@ -767,7 +839,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_through_expr_in_macro() {\n-        let hover_on = check_hover_result(\n+        let (hover_on, _) = check_hover_result(\n             \"\n             //- /lib.rs\n             macro_rules! id {\n@@ -785,7 +857,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_through_expr_in_macro_recursive() {\n-        let hover_on = check_hover_result(\n+        let (hover_on, _) = check_hover_result(\n             \"\n             //- /lib.rs\n             macro_rules! id_deep {\n@@ -806,7 +878,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_through_func_in_macro_recursive() {\n-        let hover_on = check_hover_result(\n+        let (hover_on, _) = check_hover_result(\n             \"\n             //- /lib.rs\n             macro_rules! id_deep {\n@@ -830,7 +902,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_through_literal_string_in_macro() {\n-        let hover_on = check_hover_result(\n+        let (hover_on, _) = check_hover_result(\n             r#\"\n             //- /lib.rs\n             macro_rules! arr {\n@@ -849,7 +921,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_through_assert_macro() {\n-        let hover_on = check_hover_result(\n+        let (hover_on, _) = check_hover_result(\n             r#\"\n             //- /lib.rs\n             #[rustc_builtin_macro]\n@@ -925,13 +997,14 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_trait_show_qualifiers() {\n-        check_hover_result(\n+        let (_, actions) = check_hover_result(\n             \"\n             //- /lib.rs\n             unsafe trait foo<|>() {}\n             \",\n             &[\"unsafe trait foo\"],\n         );\n+        assert_impl_action(&actions[0], 13);\n     }\n \n     #[test]\n@@ -1052,4 +1125,41 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             &[\"Bar\\n```\\n\\n```rust\\nfn foo(&self)\\n```\\n___\\n\\nDo the foo\"],\n         );\n     }\n+\n+    #[test]\n+    fn test_hover_trait_hash_impl_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            trait foo<|>() {}\n+            \",\n+            &[\"trait foo\"],\n+        );\n+        assert_impl_action(&actions[0], 6);\n+    }\n+\n+    #[test]\n+    fn test_hover_struct_hash_impl_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            struct foo<|>() {}\n+            \",\n+            &[\"struct foo\"],\n+        );\n+        assert_impl_action(&actions[0], 7);\n+    }\n+\n+    #[test]\n+    fn test_hover_union_hash_impl_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            union foo<|>() {}\n+            \",\n+            &[\"union foo\"],\n+        );\n+        assert_impl_action(&actions[0], 6);\n+    }\n+\n }"}, {"sha": "a9601400f1884468acf4b6db14270896b6a1eff7", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=7d0dd17b09240385333805637ea17992a8089cf2", "patch": "@@ -66,7 +66,7 @@ pub use crate::{\n     display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n     expand_macro::ExpandedMacro,\n     folding_ranges::{Fold, FoldKind},\n-    hover::HoverResult,\n+    hover::{HoverResult, HoverAction, HoverConfig},\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     references::{Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},"}, {"sha": "1db60b87fb82b9a6804b0d5817ee7081df872285", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=7d0dd17b09240385333805637ea17992a8089cf2", "patch": "@@ -18,7 +18,7 @@ use ra_syntax::{\n use crate::RootDatabase;\n \n // FIXME: a more precise name would probably be `Symbol`?\n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n pub enum Definition {\n     Macro(MacroDef),\n     Field(Field),"}, {"sha": "e7c8595772ce01dc98184a08f0e1e2b15912fcb5", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=7d0dd17b09240385333805637ea17992a8089cf2", "patch": "@@ -11,7 +11,7 @@ use std::{ffi::OsString, path::PathBuf};\n \n use lsp_types::ClientCapabilities;\n use ra_flycheck::FlycheckConfig;\n-use ra_ide::{AssistConfig, CompletionConfig, InlayHintsConfig};\n+use ra_ide::{AssistConfig, CompletionConfig, InlayHintsConfig, HoverConfig};\n use ra_project_model::{CargoConfig, JsonProject, ProjectManifest};\n use serde::Deserialize;\n \n@@ -34,6 +34,7 @@ pub struct Config {\n     pub assist: AssistConfig,\n     pub call_info_full: bool,\n     pub lens: LensConfig,\n+    pub hover: HoverConfig,\n \n     pub with_sysroot: bool,\n     pub linked_projects: Vec<LinkedProject>,\n@@ -124,6 +125,7 @@ pub struct ClientCapsConfig {\n     pub work_done_progress: bool,\n     pub code_action_group: bool,\n     pub resolve_code_action: bool,\n+    pub hover_actions: bool,\n }\n \n impl Default for Config {\n@@ -162,6 +164,7 @@ impl Default for Config {\n             assist: AssistConfig::default(),\n             call_info_full: true,\n             lens: LensConfig::default(),\n+            hover: HoverConfig::default(),\n             linked_projects: Vec::new(),\n         }\n     }\n@@ -278,6 +281,14 @@ impl Config {\n             }\n         }\n \n+        let mut use_hover_actions = false;\n+        set(value, \"/hoverActions/enable\", &mut use_hover_actions);\n+        if use_hover_actions {\n+            set(value, \"/hoverActions/implementations\", &mut self.hover.implementations);\n+        } else {\n+            self.hover = HoverConfig::NO_ACTIONS;\n+        }\n+\n         log::info!(\"Config::update() = {:#?}\", self);\n \n         fn get<'a, T: Deserialize<'a>>(value: &'a serde_json::Value, pointer: &str) -> Option<T> {\n@@ -331,17 +342,14 @@ impl Config {\n \n         self.assist.allow_snippets(false);\n         if let Some(experimental) = &caps.experimental {\n-            let snippet_text_edit =\n-                experimental.get(\"snippetTextEdit\").and_then(|it| it.as_bool()) == Some(true);\n-            self.assist.allow_snippets(snippet_text_edit);\n+            let get_bool = |index: &str| experimental.get(index).and_then(|it| it.as_bool()) == Some(true);\n \n-            let code_action_group =\n-                experimental.get(\"codeActionGroup\").and_then(|it| it.as_bool()) == Some(true);\n-            self.client_caps.code_action_group = code_action_group;\n+            let snippet_text_edit = get_bool(\"snippetTextEdit\");\n+            self.assist.allow_snippets(snippet_text_edit);\n \n-            let resolve_code_action =\n-                experimental.get(\"resolveCodeAction\").and_then(|it| it.as_bool()) == Some(true);\n-            self.client_caps.resolve_code_action = resolve_code_action;\n+            self.client_caps.code_action_group = get_bool(\"codeActionGroup\");\n+\t\t\tself.client_caps.resolve_code_action = get_bool(\"resolveCodeAction\");\n+            self.client_caps.hover_actions = get_bool(\"hoverActions\");\n         }\n     }\n }"}, {"sha": "145a389ce176e375082e755d1c1775dfdb8e315e", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=7d0dd17b09240385333805637ea17992a8089cf2", "patch": "@@ -260,3 +260,37 @@ pub struct SnippetTextEdit {\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub insert_text_format: Option<lsp_types::InsertTextFormat>,\n }\n+\n+pub enum HoverRequest {}\n+\n+impl Request for HoverRequest {\n+    type Params = lsp_types::HoverParams;\n+    type Result = Option<Hover>;\n+    const METHOD: &'static str = \"textDocument/hover\";\n+}\n+\n+#[derive(Debug, PartialEq, Clone, Deserialize, Serialize)]\n+pub struct Hover {\n+    pub contents: lsp_types::HoverContents,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub range: Option<Range>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub actions: Option<Vec<CommandLinkGroup>>,\n+}\n+\n+#[derive(Debug, PartialEq, Eq, Clone, Default, Deserialize, Serialize)]\n+pub struct CommandLinkGroup {\n+    pub title: Option<String>,\n+    pub commands: Vec<CommandLink>,\n+}\n+\n+// LSP v3.15 Command does not have a `tooltip` field, vscode supports one.\n+#[derive(Debug, PartialEq, Eq, Clone, Default, Deserialize, Serialize)]\n+pub struct CommandLink {\n+    pub title: String,\n+    pub command: String,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub tooltip: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub arguments: Option<Vec<serde_json::Value>>,\n+}"}, {"sha": "752dbf145298add27dddd11e7f4a0802880587fe", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=7d0dd17b09240385333805637ea17992a8089cf2", "patch": "@@ -510,6 +510,7 @@ fn on_request(\n         .on::<lsp_ext::InlayHints>(handlers::handle_inlay_hints)?\n         .on::<lsp_ext::CodeActionRequest>(handlers::handle_code_action)?\n         .on::<lsp_ext::ResolveCodeActionRequest>(handlers::handle_resolve_code_action)?\n+        .on::<lsp_ext::HoverRequest>(handlers::handle_hover)?\n         .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)?\n         .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)?\n         .on::<lsp_types::request::WorkspaceSymbol>(handlers::handle_workspace_symbol)?\n@@ -521,7 +522,6 @@ fn on_request(\n         .on::<lsp_types::request::CodeLensResolve>(handlers::handle_code_lens_resolve)?\n         .on::<lsp_types::request::FoldingRangeRequest>(handlers::handle_folding_range)?\n         .on::<lsp_types::request::SignatureHelpRequest>(handlers::handle_signature_help)?\n-        .on::<lsp_types::request::HoverRequest>(handlers::handle_hover)?\n         .on::<lsp_types::request::PrepareRenameRequest>(handlers::handle_prepare_rename)?\n         .on::<lsp_types::request::Rename>(handlers::handle_rename)?\n         .on::<lsp_types::request::References>(handlers::handle_references)?"}, {"sha": "0958a231fd6aeb143790ad8b7581ab170c2f6bb5", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 95, "deletions": 24, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0dd17b09240385333805637ea17992a8089cf2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=7d0dd17b09240385333805637ea17992a8089cf2", "patch": "@@ -12,13 +12,14 @@ use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n     CodeLens, Command, CompletionItem, Diagnostic, DocumentFormattingParams, DocumentHighlight,\n-    DocumentSymbol, FoldingRange, FoldingRangeParams, Hover, HoverContents, Location,\n-    MarkupContent, MarkupKind, Position, PrepareRenameResponse, Range, RenameParams,\n-    SemanticTokensParams, SemanticTokensRangeParams, SemanticTokensRangeResult,\n-    SemanticTokensResult, SymbolInformation, TextDocumentIdentifier, Url, WorkspaceEdit,\n+    DocumentSymbol, FoldingRange, FoldingRangeParams, HoverContents, Location, MarkupContent,\n+    MarkupKind, Position, PrepareRenameResponse, Range, RenameParams, SemanticTokensParams,\n+    SemanticTokensRangeParams, SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation,\n+    TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use ra_ide::{\n-    FileId, FilePosition, FileRange, Query, RangeInfo, RunnableKind, SearchScope, TextEdit,\n+    FileId, FilePosition, FileRange, HoverAction, Query, RangeInfo, RunnableKind, SearchScope,\n+    TextEdit,\n };\n use ra_prof::profile;\n use ra_project_model::TargetKind;\n@@ -537,7 +538,7 @@ pub fn handle_signature_help(\n pub fn handle_hover(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::HoverParams,\n-) -> Result<Option<Hover>> {\n+) -> Result<Option<lsp_ext::Hover>> {\n     let _p = profile(\"handle_hover\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n     let info = match snap.analysis().hover(position)? {\n@@ -546,12 +547,13 @@ pub fn handle_hover(\n     };\n     let line_index = snap.analysis.file_line_index(position.file_id)?;\n     let range = to_proto::range(&line_index, info.range);\n-    let res = Hover {\n+    let res = lsp_ext::Hover {\n         contents: HoverContents::Markup(MarkupContent {\n             kind: MarkupKind::Markdown,\n             value: crate::markdown::format_docs(&info.info.to_markup()),\n         }),\n         range: Some(range),\n+        actions: Some(prepare_hover_actions(&world, info.info.actions())),\n     };\n     Ok(Some(res))\n }\n@@ -924,24 +926,13 @@ pub fn handle_code_lens_resolve(\n                     _ => vec![],\n                 };\n \n-            let title = if locations.len() == 1 {\n-                \"1 implementation\".into()\n-            } else {\n-                format!(\"{} implementations\", locations.len())\n-            };\n-\n-            // We cannot use the 'editor.action.showReferences' command directly\n-            // because that command requires vscode types which we convert in the handler\n-            // on the client side.\n-            let cmd = Command {\n+            let title = implementation_title(locations.len());\n+            let cmd = show_references_command(\n                 title,\n-                command: \"rust-analyzer.showReferences\".into(),\n-                arguments: Some(vec![\n-                    to_value(&lens_params.text_document_position_params.text_document.uri).unwrap(),\n-                    to_value(code_lens.range.start).unwrap(),\n-                    to_value(locations).unwrap(),\n-                ]),\n-            };\n+                &lens_params.text_document_position_params.text_document.uri,\n+                code_lens.range.start,\n+                locations,\n+            );\n             Ok(CodeLens { range: code_lens.range, command: Some(cmd), data: None })\n         }\n         None => Ok(CodeLens {\n@@ -1145,3 +1136,83 @@ pub fn handle_semantic_tokens_range(\n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n     Ok(Some(semantic_tokens.into()))\n }\n+\n+fn implementation_title(count: usize) -> String {\n+    if count == 1 {\n+        \"1 implementation\".into()\n+    } else {\n+        format!(\"{} implementations\", count)\n+    }\n+}\n+\n+fn show_references_command(\n+    title: String,\n+    uri: &lsp_types::Url,\n+    position: lsp_types::Position,\n+    locations: Vec<lsp_types::Location>,\n+) -> Command {\n+    // We cannot use the 'editor.action.showReferences' command directly\n+    // because that command requires vscode types which we convert in the handler\n+    // on the client side.\n+\n+    Command {\n+        title,\n+        command: \"rust-analyzer.showReferences\".into(),\n+        arguments: Some(vec![\n+            to_value(uri).unwrap(),\n+            to_value(position).unwrap(),\n+            to_value(locations).unwrap(),\n+        ]),\n+    }\n+}\n+\n+fn to_command_link(command: Command, tooltip: String) -> lsp_ext::CommandLink {\n+    lsp_ext::CommandLink {\n+        tooltip: Some(tooltip),\n+        title: command.title,\n+        command: command.command,\n+        arguments: command.arguments,\n+    }\n+}\n+\n+fn show_impl_command_link(\n+    world: &WorldSnapshot,\n+    position: &FilePosition,\n+) -> Option<lsp_ext::CommandLinkGroup> {\n+    if world.config.hover.implementations {\n+        if let Some(nav_data) = world.analysis().goto_implementation(*position).unwrap_or(None) {\n+            let uri = to_proto::url(world, position.file_id).ok()?;\n+            let line_index = world.analysis().file_line_index(position.file_id).ok()?;\n+            let position = to_proto::position(&line_index, position.offset);\n+            let locations: Vec<_> = nav_data\n+                .info\n+                .iter()\n+                .filter_map(|it| to_proto::location(world, it.file_range()).ok())\n+                .collect();\n+            let title = implementation_title(locations.len());\n+            let command = show_references_command(title, &uri, position, locations);\n+\n+            return Some(lsp_ext::CommandLinkGroup {\n+                commands: vec![to_command_link(command, \"Go to implementations\".into())],\n+                ..Default::default()\n+            });\n+        }\n+    }\n+    None\n+}\n+\n+fn prepare_hover_actions(\n+    world: &WorldSnapshot,\n+    actions: &[HoverAction],\n+) -> Vec<lsp_ext::CommandLinkGroup> {\n+    if world.config.hover.none() || !world.config.client_caps.hover_actions {\n+        return Vec::new();\n+    }\n+\n+    actions\n+        .iter()\n+        .filter_map(|it| match it {\n+            HoverAction::Implementaion(position) => show_impl_command_link(world, position),\n+        })\n+        .collect()\n+}"}, {"sha": "b9c57db3bcf74485248c99de1e9b9c72b92e190b", "filename": "editors/code/package.json", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d0dd17b09240385333805637ea17992a8089cf2/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/7d0dd17b09240385333805637ea17992a8089cf2/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=7d0dd17b09240385333805637ea17992a8089cf2", "patch": "@@ -462,17 +462,27 @@\n                     \"default\": true\n                 },\n                 \"rust-analyzer.lens.run\": {\n-                    \"markdownDescription\": \"Whether to show Run lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"markdownDescription\": \"Whether to show `Run` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n                     \"type\": \"boolean\",\n                     \"default\": true\n                 },\n                 \"rust-analyzer.lens.debug\": {\n-                    \"markdownDescription\": \"Whether to show Debug lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"markdownDescription\": \"Whether to show `Debug` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n                     \"type\": \"boolean\",\n                     \"default\": true\n                 },\n                 \"rust-analyzer.lens.implementations\": {\n-                    \"markdownDescription\": \"Whether to show Implementations lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"markdownDescription\": \"Whether to show `Implementations` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n+                \"rust-analyzer.hoverActions.enable\": {\n+                    \"description\": \"Whether to show HoverActions in Rust files.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n+                \"rust-analyzer.hoverActions.implementations\": {\n+                    \"markdownDescription\": \"Whether to show `Implementations` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"type\": \"boolean\",\n                     \"default\": true\n                 },"}, {"sha": "9df6702839b4963e4f7a8cff7b9b6d7824061514", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7d0dd17b09240385333805637ea17992a8089cf2/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7d0dd17b09240385333805637ea17992a8089cf2/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=7d0dd17b09240385333805637ea17992a8089cf2", "patch": "@@ -7,6 +7,29 @@ import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.pr\n import { SemanticTokensFeature, DocumentSemanticsTokensSignature } from 'vscode-languageclient/lib/semanticTokens.proposed';\n import { assert } from './util';\n \n+function toTrusted(obj: vscode.MarkedString): vscode.MarkedString {\n+    const md = <vscode.MarkdownString>obj;\n+    if (md && md.value.includes(\"```rust\")) {\n+        md.isTrusted = true;\n+        return md;\n+    }\n+    return obj;\n+}\n+\n+function renderCommand(cmd: CommandLink) {\n+    return `[${cmd.title}](command:${cmd.command}?${encodeURIComponent(JSON.stringify(cmd.arguments))} '${cmd.tooltip!}')`;\n+}\n+\n+function renderHoverActions(actions: CommandLinkGroup[]): vscode.MarkdownString {\n+    const text = actions.map(group =>\n+        (group.title ? (group.title + \" \") : \"\") + group.commands.map(renderCommand).join(' | ')\n+    ).join('___');\n+\n+    const result = new vscode.MarkdownString(text);\n+    result.isTrusted = true;\n+    return result;\n+}\n+\n export function createClient(serverPath: string, cwd: string): lc.LanguageClient {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n@@ -35,6 +58,27 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                 if (res === undefined) throw new Error('busy');\n                 return res;\n             },\n+            async provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, _next: lc.ProvideHoverSignature) {\n+                return client.sendRequest(lc.HoverRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(\n+                    (result) => {\n+                        const hover = client.protocol2CodeConverter.asHover(result);\n+                        if (hover) {\n+                            // Workaround to support command links (trusted vscode.MarkdownString) in hovers\n+                            // https://github.com/microsoft/vscode/issues/33577\n+                            hover.contents = hover.contents.map(toTrusted);\n+                            \n+                            const actions = (<any>result).actions;\n+                            if (actions) {\n+                                hover.contents.push(renderHoverActions(actions));\n+                            }\n+                        }\n+                        return hover;\n+                    },\n+                    (error) => {\n+                        client.logFailedRequest(lc.HoverRequest.type, error);\n+                        return Promise.resolve(null);\n+                    });\n+            },\n             // Using custom handling of CodeActions where each code action is resloved lazily\n             // That's why we are not waiting for any command or edits\n             async provideCodeActions(document: vscode.TextDocument, range: vscode.Range, context: vscode.CodeActionContext, token: vscode.CancellationToken, _next: lc.ProvideCodeActionsSignature) {\n@@ -129,6 +173,7 @@ class ExperimentalFeatures implements lc.StaticFeature {\n         caps.snippetTextEdit = true;\n         caps.codeActionGroup = true;\n         caps.resolveCodeAction = true;\n+        caps.hoverActions = true;\n         capabilities.experimental = caps;\n     }\n     initialize(_capabilities: lc.ServerCapabilities<any>, _documentSelector: lc.DocumentSelector | undefined): void {"}, {"sha": "d8f0037d4c9516b27b71eb1a86443a7093ad6600", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7d0dd17b09240385333805637ea17992a8089cf2/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7d0dd17b09240385333805637ea17992a8089cf2/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=7d0dd17b09240385333805637ea17992a8089cf2", "patch": "@@ -16,10 +16,8 @@ export class Config {\n         \"files\",\n         \"highlighting\",\n         \"updates.channel\",\n-        \"lens.enable\",\n-        \"lens.run\",\n-        \"lens.debug\",\n-        \"lens.implementations\",\n+        \"lens\", // works as lens.*\n+        \"hoverActions\", // works as hoverActions.*\n     ]\n         .map(opt => `${this.rootSection}.${opt}`);\n \n@@ -132,4 +130,11 @@ export class Config {\n             implementations: this.get<boolean>(\"lens.implementations\"),\n         };\n     }\n+\n+    get hoverActions() {\n+        return {\n+            enable: this.get<boolean>(\"hoverActions.enable\"),\n+            implementations: this.get<boolean>(\"hoverActions.implementations\"),\n+        };\n+    }\n }"}, {"sha": "e16ea799ce015bef81a14cb22785e24cd2eee351", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d0dd17b09240385333805637ea17992a8089cf2/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7d0dd17b09240385333805637ea17992a8089cf2/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=7d0dd17b09240385333805637ea17992a8089cf2", "patch": "@@ -90,3 +90,15 @@ export interface SsrParams {\n     parseOnly: boolean;\n }\n export const ssr = new lc.RequestType<SsrParams, lc.WorkspaceEdit, void>('experimental/ssr');\n+\n+export interface CommandLink extends lc.Command {\n+    /**\n+     * A tooltip for the command, when represented in the UI.\n+     */\n+    tooltip?: string;\n+}\n+\n+export interface CommandLinkGroup {\n+    title?: string;\n+    commands: CommandLink[];\n+}"}]}