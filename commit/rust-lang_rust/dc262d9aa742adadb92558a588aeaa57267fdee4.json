{"sha": "dc262d9aa742adadb92558a588aeaa57267fdee4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMjYyZDlhYTc0MmFkYWRiOTI1NThhNTg4YWVhYTU3MjY3ZmRlZTQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-19T18:28:42Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-20T21:53:26Z"}, "message": "Avoid unnecessary scratch datums for by-copy function arguments\n\nCurrently, by-copy function arguments are always stored into a scratch\ndatum, which serves two purposes.  First, it is required to be able to\nhave a temporary cleanup, in case that the call fails before the callee\nactually takes ownership of the value. Second, if the argument is to be\npassed by reference, the copy is required, so that the function doesn't\nget a reference to the original value.\n\nBut in case that the datum does not need a drop glue call and it is\npassed by value, there's no need to perform the extra copy.", "tree": {"sha": "df5a5944b64e3b24f3548f5ce5c79bc32a528e42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df5a5944b64e3b24f3548f5ce5c79bc32a528e42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc262d9aa742adadb92558a588aeaa57267fdee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc262d9aa742adadb92558a588aeaa57267fdee4", "html_url": "https://github.com/rust-lang/rust/commit/dc262d9aa742adadb92558a588aeaa57267fdee4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc262d9aa742adadb92558a588aeaa57267fdee4/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f348465283d6cd85b69bcdc1711d14985d154c39", "url": "https://api.github.com/repos/rust-lang/rust/commits/f348465283d6cd85b69bcdc1711d14985d154c39", "html_url": "https://github.com/rust-lang/rust/commit/f348465283d6cd85b69bcdc1711d14985d154c39"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "47e5f9bf35f8004b9f738299b1fa1c7d7d1dd7a7", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dc262d9aa742adadb92558a588aeaa57267fdee4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc262d9aa742adadb92558a588aeaa57267fdee4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=dc262d9aa742adadb92558a588aeaa57267fdee4", "patch": "@@ -826,24 +826,33 @@ pub fn trans_arg_expr(bcx: block,\n                         val = arg_datum.to_ref_llval(bcx);\n                     }\n                     ty::ByCopy => {\n-                        debug!(\"by copy arg with type %s, storing to scratch\",\n-                               bcx.ty_to_str(arg_datum.ty));\n-                        let scratch = scratch_datum(bcx, arg_datum.ty, false);\n-\n-                        arg_datum.store_to_datum(bcx,\n-                                                 arg_expr.id,\n-                                                 INIT,\n-                                                 scratch);\n-\n-                        // Technically, ownership of val passes to the callee.\n-                        // However, we must cleanup should we fail before the\n-                        // callee is actually invoked.\n-                        scratch.add_clean(bcx);\n-                        temp_cleanups.push(scratch.val);\n-\n-                        match arg_datum.appropriate_mode() {\n-                            ByValue => val = Load(bcx, scratch.val),\n-                            ByRef(_) => val = scratch.val,\n+                        if ty::type_needs_drop(bcx.tcx(), arg_datum.ty) ||\n+                                arg_datum.appropriate_mode().is_by_ref() {\n+                            debug!(\"by copy arg with type %s, storing to scratch\",\n+                                   bcx.ty_to_str(arg_datum.ty));\n+                            let scratch = scratch_datum(bcx, arg_datum.ty, false);\n+\n+                            arg_datum.store_to_datum(bcx,\n+                                                     arg_expr.id,\n+                                                     INIT,\n+                                                     scratch);\n+\n+                            // Technically, ownership of val passes to the callee.\n+                            // However, we must cleanup should we fail before the\n+                            // callee is actually invoked.\n+                            scratch.add_clean(bcx);\n+                            temp_cleanups.push(scratch.val);\n+\n+                            match scratch.appropriate_mode() {\n+                                ByValue => val = Load(bcx, scratch.val),\n+                                ByRef(_) => val = scratch.val,\n+                            }\n+                        } else {\n+                            debug!(\"by copy arg with type %s\");\n+                            match arg_datum.mode {\n+                                ByRef(_) => val = Load(bcx, arg_datum.val),\n+                                ByValue => val = arg_datum.val,\n+                            }\n                         }\n                     }\n                 }"}]}