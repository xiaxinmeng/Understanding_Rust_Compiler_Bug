{"sha": "1fe0d4e3839883bb88777173cd7775425a251085", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZTBkNGUzODM5ODgzYmI4ODc3NzE3M2NkNzc3NTQyNWEyNTEwODU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-11-30T18:55:11Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-25T16:23:34Z"}, "message": "Update mir_const_qualif", "tree": {"sha": "038dc2b39c0241ae0a0266aff103de9cc82d462a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/038dc2b39c0241ae0a0266aff103de9cc82d462a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fe0d4e3839883bb88777173cd7775425a251085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe0d4e3839883bb88777173cd7775425a251085", "html_url": "https://github.com/rust-lang/rust/commit/1fe0d4e3839883bb88777173cd7775425a251085", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fe0d4e3839883bb88777173cd7775425a251085/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d56d2fbaeac03d5f9cdebf65071ec199b8b80c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56d2fbaeac03d5f9cdebf65071ec199b8b80c4e", "html_url": "https://github.com/rust-lang/rust/commit/d56d2fbaeac03d5f9cdebf65071ec199b8b80c4e"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "af212741e9f6acc76a3fa9cc1b0ca210ca42cf35", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fe0d4e3839883bb88777173cd7775425a251085/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe0d4e3839883bb88777173cd7775425a251085/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=1fe0d4e3839883bb88777173cd7775425a251085", "patch": "@@ -18,6 +18,7 @@ macro_rules! arena_types {\n             [decode] specialization_graph: rustc::traits::specialization_graph::Graph,\n             [] region_scope_tree: rustc::middle::region::ScopeTree,\n             [] item_local_set: rustc::util::nodemap::ItemLocalSet,\n+            [decode] mir_const_qualif: rustc_data_structures::bit_set::BitSet<rustc::mir::Local>,\n         ], $tcx);\n     )\n }"}, {"sha": "d7e37862b8800fc03ec605afc5d527af1713c9aa", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe0d4e3839883bb88777173cd7775425a251085/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe0d4e3839883bb88777173cd7775425a251085/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=1fe0d4e3839883bb88777173cd7775425a251085", "patch": "@@ -91,7 +91,7 @@ rustc_queries! {\n         /// Maps DefId's that have an associated Mir to the result\n         /// of the MIR qualify_consts pass. The actual meaning of\n         /// the value isn't known except to the pass itself.\n-        query mir_const_qualif(key: DefId) -> (u8, Lrc<BitSet<mir::Local>>) {\n+        query mir_const_qualif(key: DefId) -> (u8, &'tcx BitSet<mir::Local>) {\n             cache { key.is_local() }\n         }\n "}, {"sha": "53f06baaa9dd7e3390bb2cf9051fb238131e3530", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe0d4e3839883bb88777173cd7775425a251085/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe0d4e3839883bb88777173cd7775425a251085/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=1fe0d4e3839883bb88777173cd7775425a251085", "patch": "@@ -131,7 +131,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         mir\n     }\n     mir_const_qualif => {\n-        (cdata.mir_const_qualif(def_id.index), Lrc::new(BitSet::new_empty(0)))\n+        (cdata.mir_const_qualif(def_id.index), tcx.arena.alloc(BitSet::new_empty(0)))\n     }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { Lrc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }"}, {"sha": "18ad89be3c30621d1536e39f1b2352b77de800ff", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1fe0d4e3839883bb88777173cd7775425a251085/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe0d4e3839883bb88777173cd7775425a251085/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=1fe0d4e3839883bb88777173cd7775425a251085", "patch": "@@ -7,7 +7,6 @@\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi::Abi;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -833,7 +832,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n     }\n \n     /// Check a whole const, static initializer or const fn.\n-    fn check_const(&mut self) -> (u8, Lrc<BitSet<Local>>) {\n+    fn check_const(&mut self) -> (u8, &'tcx BitSet<Local>) {\n         debug!(\"const-checking {} {:?}\", self.mode, self.def_id);\n \n         let mir = self.mir;\n@@ -907,8 +906,6 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             }\n         }\n \n-        let promoted_temps = Lrc::new(promoted_temps);\n-\n         let mut qualifs = self.qualifs_in_local(RETURN_PLACE);\n \n         // Account for errors in consts by using the\n@@ -917,7 +914,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             qualifs = self.qualifs_in_any_value_of_ty(mir.return_ty());\n         }\n \n-        (qualifs.encode_to_bits(), promoted_temps)\n+        (qualifs.encode_to_bits(), self.tcx.arena.alloc(promoted_temps))\n     }\n }\n \n@@ -1433,7 +1430,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n \n fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               def_id: DefId)\n-                              -> (u8, Lrc<BitSet<Local>>) {\n+                              -> (u8, &'tcx BitSet<Local>) {\n     // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n     // cannot yet be stolen), because `mir_validated()`, which steals\n     // from `mir_const(), forces this query to execute before\n@@ -1442,7 +1439,7 @@ fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     if mir.return_ty().references_error() {\n         tcx.sess.delay_span_bug(mir.span, \"mir_const_qualif: Mir had errors\");\n-        return (1 << IsNotPromotable::IDX, Lrc::new(BitSet::new_empty(0)));\n+        return (1 << IsNotPromotable::IDX, tcx.arena.alloc(BitSet::new_empty(0)));\n     }\n \n     Checker::new(tcx, def_id, mir, Mode::Const).check_const()"}]}