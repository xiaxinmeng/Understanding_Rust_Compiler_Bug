{"sha": "9c923068fbdb79fcdb86de707177f4814018aa08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljOTIzMDY4ZmJkYjc5ZmNkYjg2ZGU3MDcxNzdmNDgxNDAxOGFhMDg=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-03T10:16:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-03T10:16:07Z"}, "message": "Don't hide meta lines", "tree": {"sha": "89678c3fd09aa30f25f3973d24c1605f9d35a606", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89678c3fd09aa30f25f3973d24c1605f9d35a606"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c923068fbdb79fcdb86de707177f4814018aa08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c923068fbdb79fcdb86de707177f4814018aa08", "html_url": "https://github.com/rust-lang/rust/commit/9c923068fbdb79fcdb86de707177f4814018aa08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c923068fbdb79fcdb86de707177f4814018aa08/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96074f627b6bcbdb78767e0b3a9c8e47fe4d47fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/96074f627b6bcbdb78767e0b3a9c8e47fe4d47fb", "html_url": "https://github.com/rust-lang/rust/commit/96074f627b6bcbdb78767e0b3a9c8e47fe4d47fb"}], "stats": {"total": 145, "additions": 105, "deletions": 40}, "files": [{"sha": "22853b7e360d7afa247657e26e8de58d0a65b875", "filename": "crates/ide_assists/src/handlers/unmerge_use.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c923068fbdb79fcdb86de707177f4814018aa08/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c923068fbdb79fcdb86de707177f4814018aa08/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funmerge_use.rs?ref=9c923068fbdb79fcdb86de707177f4814018aa08", "patch": "@@ -1,7 +1,6 @@\n-use ast::make;\n use itertools::Itertools;\n use syntax::{\n-    ast::{self, VisibilityOwner},\n+    ast::{self, make, VisibilityOwner},\n     ted::{self, Position},\n     AstNode, SyntaxKind,\n };"}, {"sha": "7ad3de2c5764de58310f2fb7ba1e55dc50a6935f", "filename": "crates/ide_assists/src/handlers/wrap_return_type_in_result.rs", "status": "modified", "additions": 104, "deletions": 38, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/9c923068fbdb79fcdb86de707177f4814018aa08/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c923068fbdb79fcdb86de707177f4814018aa08/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs?ref=9c923068fbdb79fcdb86de707177f4814018aa08", "patch": "@@ -105,18 +105,12 @@ mod tests {\n \n     use super::*;\n \n-    fn check(ra_fixture_before: &str, ra_fixture_after: &str) {\n-        check_assist(\n-            wrap_return_type_in_result,\n-            &format!(\"//- minicore: result\\n{}\", ra_fixture_before.trim_start()),\n-            ra_fixture_after,\n-        );\n-    }\n-\n     #[test]\n     fn wrap_return_type_in_result_simple() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i3$02 {\n     let test = \"test\";\n     return 42i32;\n@@ -133,8 +127,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_break_split_tail() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i3$02 {\n     loop {\n         break if true {\n@@ -161,8 +157,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_closure() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() {\n     || -> i32$0 {\n         let test = \"test\";\n@@ -186,6 +184,7 @@ fn foo() {\n         check_assist_not_applicable(\n             wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i32 {\n     let test = \"test\";$0\n     return 42i32;\n@@ -199,6 +198,7 @@ fn foo() -> i32 {\n         check_assist_not_applicable(\n             wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() {\n     || -> i32 {\n         let test = \"test\";$0\n@@ -211,7 +211,13 @@ fn foo() {\n \n     #[test]\n     fn wrap_return_type_in_result_closure_non_block() {\n-        check_assist_not_applicable(wrap_return_type_in_result, r#\"fn foo() { || -> i$032 3; }\"#);\n+        check_assist_not_applicable(\n+            wrap_return_type_in_result,\n+            r#\"\n+//- minicore: result\n+fn foo() { || -> i$032 3; }\n+\"#,\n+        );\n     }\n \n     #[test]\n@@ -248,6 +254,7 @@ fn foo() -> Result<i32$0, String> {\n         check_assist_not_applicable(\n             wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() {\n     || -> Result<i32$0, String> {\n         let test = \"test\";\n@@ -260,8 +267,10 @@ fn foo() {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_cursor() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> $0i32 {\n     let test = \"test\";\n     return 42i32;\n@@ -278,8 +287,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() ->$0 i32 {\n     let test = \"test\";\n     42i32\n@@ -296,8 +307,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_closure() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() {\n     || ->$0 i32 {\n         let test = \"test\";\n@@ -318,13 +331,24 @@ fn foo() {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_only() {\n-        check(r#\"fn foo() -> i32$0 { 42i32 }\"#, r#\"fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\"#);\n+        check_assist(\n+            wrap_return_type_in_result,\n+            r#\"\n+//- minicore: result\n+fn foo() -> i32$0 { 42i32 }\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\n+\"#,\n+        );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i32$0 {\n     if true {\n         42i32\n@@ -347,8 +371,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_without_block_closure() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() {\n     || -> i32$0 {\n         if true {\n@@ -375,8 +401,10 @@ fn foo() {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_nested_if() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i32$0 {\n     if true {\n         if false {\n@@ -407,8 +435,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_await() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n async fn foo() -> i$032 {\n     if true {\n         if false {\n@@ -439,16 +469,24 @@ async fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_array() {\n-        check(\n-            r#\"fn foo() -> [i32;$0 3] { [1, 2, 3] }\"#,\n-            r#\"fn foo() -> Result<[i32; 3], ${0:_}> { Ok([1, 2, 3]) }\"#,\n+        check_assist(\n+            wrap_return_type_in_result,\n+            r#\"\n+//- minicore: result\n+fn foo() -> [i32;$0 3] { [1, 2, 3] }\n+\"#,\n+            r#\"\n+fn foo() -> Result<[i32; 3], ${0:_}> { Ok([1, 2, 3]) }\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_cast() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -$0> i32 {\n     if true {\n         if false {\n@@ -479,8 +517,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like_match() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i32$0 {\n     let my_var = 5;\n     match my_var {\n@@ -503,8 +543,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_loop_with_tail() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i32$0 {\n     let my_var = 5;\n     loop {\n@@ -529,8 +571,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_loop_in_let_stmt() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i32$0 {\n     let my_var = let x = loop {\n         break 1;\n@@ -551,8 +595,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like_match_return_expr() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i32$0 {\n     let my_var = 5;\n     let res = match my_var {\n@@ -574,8 +620,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \"#,\n         );\n \n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i32$0 {\n     let my_var = 5;\n     let res = if my_var == 5 {\n@@ -602,8 +650,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like_match_deeper() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i32$0 {\n     let my_var = 5;\n     match my_var {\n@@ -650,8 +700,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like_early_return() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i$032 {\n     let test = \"test\";\n     if test == \"test\" {\n@@ -674,8 +726,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_closure() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo(the_field: u32) ->$0 u32 {\n     let true_closure = || { return true; };\n     if the_field < 5 {\n@@ -705,8 +759,10 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n \"#,\n         );\n \n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo(the_field: u32) -> u32$0 {\n     let true_closure = || {\n         return true;\n@@ -751,8 +807,10 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_weird_forms() {\n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> i32$0 {\n     let test = \"test\";\n     if test == \"test\" {\n@@ -784,8 +842,10 @@ fn foo() -> Result<i32, ${0:_}> {\n \"#,\n         );\n \n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo(the_field: u32) -> u32$0 {\n     if the_field < 5 {\n         let mut i = 0;\n@@ -823,8 +883,10 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n \"#,\n         );\n \n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo(the_field: u32) -> u3$02 {\n     if the_field < 5 {\n         let mut i = 0;\n@@ -850,8 +912,10 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n \"#,\n         );\n \n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo(the_field: u32) -> u32$0 {\n     if the_field < 5 {\n         let mut i = 0;\n@@ -879,8 +943,10 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n \"#,\n         );\n \n-        check(\n+        check_assist(\n+            wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo(the_field: u32) -> $0u32 {\n     if the_field < 5 {\n         let mut i = 0;"}]}