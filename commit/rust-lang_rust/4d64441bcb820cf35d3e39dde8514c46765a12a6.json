{"sha": "4d64441bcb820cf35d3e39dde8514c46765a12a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNjQ0NDFiY2I4MjBjZjM1ZDNlMzlkZGU4NTE0YzQ2NzY1YTEyYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-12T22:07:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-12T22:07:06Z"}, "message": "auto merge of #12848 : alexcrichton/rust/rollup, r=alexcrichton", "tree": {"sha": "541bf3eb9112d8e40475b90f6da342980bbde7f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/541bf3eb9112d8e40475b90f6da342980bbde7f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d64441bcb820cf35d3e39dde8514c46765a12a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d64441bcb820cf35d3e39dde8514c46765a12a6", "html_url": "https://github.com/rust-lang/rust/commit/4d64441bcb820cf35d3e39dde8514c46765a12a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d64441bcb820cf35d3e39dde8514c46765a12a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3316a0e6b2ad9352bab58e7c046ef3d212411d82", "url": "https://api.github.com/repos/rust-lang/rust/commits/3316a0e6b2ad9352bab58e7c046ef3d212411d82", "html_url": "https://github.com/rust-lang/rust/commit/3316a0e6b2ad9352bab58e7c046ef3d212411d82"}, {"sha": "3f2434eee3f7fa72bf7a8693aef3932d563cf8d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2434eee3f7fa72bf7a8693aef3932d563cf8d5", "html_url": "https://github.com/rust-lang/rust/commit/3f2434eee3f7fa72bf7a8693aef3932d563cf8d5"}], "stats": {"total": 406, "additions": 266, "deletions": 140}, "files": [{"sha": "5b9e8407a582272600f65205c41eea94b02e33f5", "filename": "mk/docs.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -147,6 +147,10 @@ SHOULD_BUILD_PDF_DOC_$(1) = 1\n endef\n $(foreach docname,$(PDF_DOCS),$(eval $(call DEF_SHOULD_BUILD_PDF_DOC,$(docname))))\n \n+doc/footer.tex: $(D)/footer.inc | doc/\n+\t@$(call E, pandoc: $@)\n+\t$(CFG_PANDOC) --from=html --to=latex $< --output=$@\n+\n define DEF_DOC\n \n # HTML (rustdoc)\n@@ -163,10 +167,6 @@ doc/$(1).epub: $$(D)/$(1).md | doc/\n \t@$$(call E, pandoc: $$@)\n \t$$(CFG_PANDOC) $$(PANDOC_EPUB_OPTS) $$< --output=$$@\n \n-doc/footer.tex: $(D)/footer.inc | doc/\n-\t@$$(call E, pandoc: $$@)\n-\t$$(CFG_PANDOC) --from=html --to=latex $$< --output=$$@\n-\n # PDF (md =(pandoc)=> tex =(pdflatex)=> pdf)\n DOC_TARGETS += doc/$(1).tex\n doc/$(1).tex: $$(D)/$(1).md doc/footer.tex doc/version.tex | doc/"}, {"sha": "748f3ffb2dc06977bdb11fc462119be2f3ec866c", "filename": "src/doc/index.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -35,8 +35,10 @@ li {list-style-type: none; }\n * [The `getopts` argument parsing library](getopts/index.html)\n * [The `glob` file path matching library](glob/index.html)\n * [The `green` M:N runtime library](green/index.html)\n+* [The `hexfloat` library for hexadecimal floating-point literals](hexfloat/index.html)\n * [The `native` 1:1 threading runtime](native/index.html)\n * [The `num` arbitrary precision numerics library](num/index.html)\n+* [The `rand` library for random numbers and distributions](rand/index.html)\n * [The `rustc` compiler](rustc/index.html)\n * [The `rustuv` M:N I/O library](rustuv/index.html)\n * [The `semver` version collation library](semver/index.html)"}, {"sha": "9e2b934d0abc4ab9080229a7db1d4bba2dfb7d68", "filename": "src/doc/rust.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -1472,7 +1472,6 @@ and are instead terminated by a semicolon.\n \n ~~~~\n # use std::libc::{c_char, FILE};\n-# #[nolink]\n \n extern {\n     fn fopen(filename: *c_char, mode: *c_char) -> *FILE;"}, {"sha": "a4e837958c91b30030b1e665b909abc2df817b49", "filename": "src/etc/emacs/rust-mode-tests.el", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Fetc%2Femacs%2Frust-mode-tests.el", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Fetc%2Femacs%2Frust-mode-tests.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode-tests.el?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -570,6 +570,11 @@ fn indenting_middle_of_line() {\n                pull_me_back_in();\n }\n }\n+\n+fn indented_already() {\n+    \n+    // The previous line already has its spaces\n+}\n \"\n \n       ;; Symbol -> (line column)\n@@ -596,7 +601,15 @@ fn indenting_middle_of_line() {\n                                   (after-whitespace-indent-start (13 1))\n                                   (after-whitespace-indent-target (13 8))\n                                   (middle-pull-indent-start (15 19))\n-                                  (middle-pull-indent-target (15 12))))\n+                                  (middle-pull-indent-target (15 12))\n+                                  (blank-line-indented-already-bol-start (20 0))\n+                                  (blank-line-indented-already-bol-target (20 4))\n+                                  (blank-line-indented-already-middle-start (20 2))\n+                                  (blank-line-indented-already-middle-target (20 4))\n+                                  (nonblank-line-indented-already-bol-start (21 0))\n+                                  (nonblank-line-indented-already-bol-target (21 4))\n+                                  (nonblank-line-indented-already-middle-start (21 2))\n+                                  (nonblank-line-indented-already-middle-target (21 4))))\n \n (defun rust-get-buffer-pos (pos-symbol)\n   \"Get buffer position from POS-SYMBOL.\n@@ -793,3 +806,31 @@ All positions are position symbols found in `rust-test-positions-alist'.\"\n    'middle-pull-indent-start\n    'middle-pull-indent-target\n    #'indent-for-tab-command))\n+\n+(ert-deftest indent-line-blank-line-indented-already-bol ()\n+  (rust-test-motion\n+   rust-test-indent-motion-string\n+   'blank-line-indented-already-bol-start\n+   'blank-line-indented-already-bol-target\n+   #'indent-for-tab-command))\n+\n+(ert-deftest indent-line-blank-line-indented-already-middle ()\n+  (rust-test-motion\n+   rust-test-indent-motion-string\n+   'blank-line-indented-already-middle-start\n+   'blank-line-indented-already-middle-target\n+   #'indent-for-tab-command))\n+\n+(ert-deftest indent-line-nonblank-line-indented-already-bol ()\n+  (rust-test-motion\n+   rust-test-indent-motion-string\n+   'nonblank-line-indented-already-bol-start\n+   'nonblank-line-indented-already-bol-target\n+   #'indent-for-tab-command))\n+\n+(ert-deftest indent-line-nonblank-line-indented-already-middle ()\n+  (rust-test-motion\n+   rust-test-indent-motion-string\n+   'nonblank-line-indented-already-middle-start\n+   'nonblank-line-indented-already-middle-target\n+   #'indent-for-tab-command))"}, {"sha": "3a99af3446c2e173da9d22e794d126cd46b9ee66", "filename": "src/etc/emacs/rust-mode.el", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Fetc%2Femacs%2Frust-mode.el", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Fetc%2Femacs%2Frust-mode.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode.el?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -140,14 +140,14 @@\n                     ;; Otherwise, we are continuing the same expression from the previous line,\n                     ;; so add one additional indent level\n                     (+ baseline rust-indent-offset))))))))))\n-    (when (not (eq (current-indentation) indent))\n-      ;; If we're at the beginning of the line (before or at the current\n-      ;; indentation), jump with the indentation change.  Otherwise, save the\n-      ;; excursion so that adding the indentations will leave us at the\n-      ;; equivalent position within the line to where we were before.\n-      (if (<= (current-column) (current-indentation))\n-          (indent-line-to indent)\n-        (save-excursion (indent-line-to indent))))))\n+\n+    ;; If we're at the beginning of the line (before or at the current\n+    ;; indentation), jump with the indentation change.  Otherwise, save the\n+    ;; excursion so that adding the indentations will leave us at the\n+    ;; equivalent position within the line to where we were before.\n+    (if (<= (current-column) (current-indentation))\n+        (indent-line-to indent)\n+      (save-excursion (indent-line-to indent)))))\n \n \n ;; Font-locking definitions and helpers"}, {"sha": "28ea36fa2317a2a2597d47e05ff626bfae3beb6a", "filename": "src/libcollections/lru_cache.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flru_cache.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -39,7 +39,7 @@\n \n use std::cast;\n use std::container::Container;\n-use std::hash::{Hash, sip};\n+use std::hash::Hash;\n use std::fmt;\n use std::ptr;\n \n@@ -62,9 +62,9 @@ pub struct LruCache<K, V> {\n     priv tail: *mut LruEntry<K, V>,\n }\n \n-impl<K: Hash> Hash for KeyRef<K> {\n-    fn hash(&self, s: &mut sip::SipState) {\n-        unsafe {(*self.k).hash(s)}\n+impl<S, K: Hash<S>> Hash<S> for KeyRef<K> {\n+    fn hash(&self, state: &mut S) {\n+        unsafe { (*self.k).hash(state) }\n     }\n }\n "}, {"sha": "32de7bf08667fb941372fef7437ab62c3a6e4bcf", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -29,7 +29,7 @@ Rust extras are part of the standard Rust distribution.\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n-#[feature(macro_rules, globs, managed_boxes, asm)];\n+#[feature(macro_rules, globs, managed_boxes, asm, default_type_params)];\n \n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];"}, {"sha": "6be90c0056d11774149f88929f404a6e45b9d106", "filename": "src/libextra/url.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -14,7 +14,7 @@\n \n use std::cmp::Eq;\n use std::fmt;\n-use std::hash::{Hash, sip};\n+use std::hash::Hash;\n use std::io::BufReader;\n use std::from_str::FromStr;\n use std::uint;\n@@ -849,15 +849,15 @@ impl fmt::Show for Path {\n     }\n }\n \n-impl Hash for Url {\n-    fn hash(&self, s: &mut sip::SipState) {\n-        self.to_str().hash(s)\n+impl<S: Writer> Hash<S> for Url {\n+    fn hash(&self, state: &mut S) {\n+        self.to_str().hash(state)\n     }\n }\n \n-impl Hash for Path {\n-    fn hash(&self, s: &mut sip::SipState) {\n-        self.to_str().hash(s)\n+impl<S: Writer> Hash<S> for Path {\n+    fn hash(&self, state: &mut S) {\n+        self.to_str().hash(state)\n     }\n }\n "}, {"sha": "872d6de17582071cf26eac57d146c4cddae0291a", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -832,6 +832,20 @@ impl Scheduler {\n     }\n \n     pub fn maybe_yield(mut ~self, cur: ~GreenTask) {\n+        // It's possible for sched tasks to possibly call this function, and it\n+        // just means that they're likely sending on channels (which\n+        // occasionally call this function). Sched tasks follow different paths\n+        // when executing yield_now(), which may possibly trip the assertion\n+        // below. For this reason, we just have sched tasks bail out soon.\n+        //\n+        // Sched tasks have no need to yield anyway because as soon as they\n+        // return they'll yield to other threads by falling back to the event\n+        // loop. Additionally, we completely control sched tasks, so we can make\n+        // sure that they never execute more than enough code.\n+        if cur.is_sched() {\n+            return cur.put_with_sched(self)\n+        }\n+\n         // The number of times to do the yield check before yielding, chosen\n         // arbitrarily.\n         rtassert!(self.yield_check_count > 0);"}, {"sha": "8f4f9259ab7ac9269e6e77d6172f5ba529038b55", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -335,7 +335,6 @@ pub fn readdir(p: &CString) -> IoResult<~[Path]> {\n         }).map(|path| root.join(path)).collect()\n     }\n \n-    #[nolink]\n     extern {\n         fn rust_list_dir_wfd_size() -> libc::size_t;\n         fn rust_list_dir_wfd_fp_buf(wfd: *libc::c_void) -> *u16;"}, {"sha": "3e3a94f7f0f66472badc76cef9be48d09d1fc0b9", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -979,7 +979,7 @@ static other_attrs: &'static [&'static str] = &[\n     \"macro_export\", \"must_use\",\n \n     //mod-level\n-    \"path\", \"link_name\", \"link_args\", \"nolink\", \"macro_escape\", \"no_implicit_prelude\",\n+    \"path\", \"link_name\", \"link_args\", \"macro_escape\", \"no_implicit_prelude\",\n \n     // fn-level\n     \"test\", \"bench\", \"should_fail\", \"ignore\", \"inline\", \"lang\", \"main\", \"start\","}, {"sha": "8780b16918b98ae949ab7754a5924cba61c62886", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -209,7 +209,7 @@ pub fn render(w: &mut io::Writer, s: &str, print_toc: bool) -> fmt::Result {\n         };\n \n         // Render the HTML\n-        let text = format!(r#\"<h{lvl} id=\"{id}\"><a\n+        let text = format!(r#\"<h{lvl} id=\"{id}\" class='section-link'><a\n                            href=\"\\#{id}\">{sec_len,plural,=0{}other{{sec} }}{}</a></h{lvl}>\"#,\n                            s, lvl = level, id = id,\n                            sec_len = sec.len(), sec = sec);"}, {"sha": "32f83f217c5ba854fbb8818dc63a4d817d3c5cf2", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -1064,7 +1064,9 @@ fn item_module(w: &mut Writer, cx: &Context,\n                 clean::ForeignStaticItem(..)   => (\"ffi-statics\", \"Foreign Statics\"),\n                 clean::MacroItem(..)           => (\"macros\", \"Macros\"),\n             };\n-            try!(write!(w, \"<h2 id='{id}'><a href=\\\"\\\\#{id}\\\">{name}</a></h2>\\n<table>\",\n+            try!(write!(w,\n+                        \"<h2 id='{id}' class='section-link'>\\\n+                        <a href=\\\"\\\\#{id}\\\">{name}</a></h2>\\n<table>\",\n                         id = short, name = name));\n         }\n "}, {"sha": "2c7e5f0f675108b019b8b4b7e921ad82ff00615c", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -317,16 +317,11 @@ pre.rust .doccomment { color: #4D4D4C; }\n pre.rust .macro, pre.rust .macro-nonterminal { color: #3E999F; }\n pre.rust .lifetime { color: #B76514; }\n \n-h1:hover a:after,\n-h2:hover a:after,\n-h3:hover a:after,\n-h4:hover a:after,\n-h5:hover a:after,\n-h6:hover a:after {\n+h1.section-link:hover a:after,\n+h2.section-link:hover a:after,\n+h3.section-link:hover a:after,\n+h4.section-link:hover a:after,\n+h5.section-link:hover a:after,\n+h6.section-link:hover a:after {\n   content: '\u2002\u00a7\u2002';\n }\n-\n-h1.fqn:hover a:after,\n-:hover a.fnname:after {\n-  content: none;\n-}"}, {"sha": "6ce555ba9f74aade5af82959f5ce62f5393cc44d", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 24, "deletions": 35, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -720,10 +720,17 @@ impl Json {\n     }\n \n     /// Attempts to get a nested Json Object for each key in `keys`.\n-    /// If any key is found not to exist, get_path will return None.\n+    /// If any key is found not to exist, find_path will return None.\n     /// Otherwise, it will return the Json value associated with the final key.\n     pub fn find_path<'a>(&'a self, keys: &[&~str]) -> Option<&'a Json>{\n-        keys.iter().fold(Some(self), |target, key| target.map_or(None, |t| t.find(*key)))\n+        let mut target = self;\n+        for key in keys.iter() {\n+            match target.find(*key) {\n+                Some(t) => { target = t; },\n+                None => return None\n+            }\n+        }\n+        Some(target)\n     }\n \n     /// If the Json value is an Object, performs a depth-first search until\n@@ -752,10 +759,7 @@ impl Json {\n \n     /// Returns true if the Json value is an Object. Returns false otherwise.\n     pub fn is_object<'a>(&'a self) -> bool {\n-        match self {\n-            &Object(_) => true,\n-            _ => false\n-        }\n+        self.as_object().is_some()\n     }\n \n     /// If the Json value is an Object, returns the associated TreeMap.\n@@ -769,10 +773,7 @@ impl Json {\n \n     /// Returns true if the Json value is a List. Returns false otherwise.\n     pub fn is_list<'a>(&'a self) -> bool {\n-        match self {\n-            &List(_) => true,\n-            _ => false\n-        }\n+        self.as_list().is_some()\n     }\n \n     /// If the Json value is a List, returns the associated vector.\n@@ -785,16 +786,13 @@ impl Json {\n     }\n \n     /// Returns true if the Json value is a String. Returns false otherwise.\n-    pub fn is_str<'a>(&'a self) -> bool {\n-        match self {\n-            &String(_) => true,\n-            _ => false\n-        }\n+    pub fn is_string<'a>(&'a self) -> bool {\n+        self.as_string().is_some()\n     }\n \n     /// If the Json value is a String, returns the associated str.\n     /// Returns None otherwise.\n-    pub fn as_str<'a>(&'a self) -> Option<&'a str> {\n+    pub fn as_string<'a>(&'a self) -> Option<&'a str> {\n         match *self {\n             String(ref s) => Some(s.as_slice()),\n             _ => None\n@@ -803,10 +801,7 @@ impl Json {\n \n     /// Returns true if the Json value is a Number. Returns false otherwise.\n     pub fn is_number(&self) -> bool {\n-        match self {\n-            &Number(_) => true,\n-            _ => false\n-        }\n+        self.as_number().is_some()\n     }\n \n     /// If the Json value is a Number, returns the associated f64.\n@@ -820,10 +815,7 @@ impl Json {\n \n     /// Returns true if the Json value is a Boolean. Returns false otherwise.\n     pub fn is_boolean(&self) -> bool {\n-        match self {\n-            &Boolean(_) => true,\n-            _ => false\n-        }\n+        self.as_boolean().is_some()\n     }\n \n     /// If the Json value is a Boolean, returns the associated bool.\n@@ -837,10 +829,7 @@ impl Json {\n \n     /// Returns true if the Json value is a Null. Returns false otherwise.\n     pub fn is_null(&self) -> bool {\n-        match self {\n-            &Null => true,\n-            _ => false\n-        }\n+        self.as_null().is_some()\n     }\n \n     /// If the Json value is a Null, returns ().\n@@ -2430,20 +2419,20 @@ mod tests {\n     fn test_find(){\n         let json_value = from_str(\"{\\\"dog\\\" : \\\"cat\\\"}\").unwrap();\n         let found_str = json_value.find(&~\"dog\");\n-        assert!(found_str.is_some() && found_str.unwrap().as_str().unwrap() == &\"cat\");\n+        assert!(found_str.is_some() && found_str.unwrap().as_string().unwrap() == &\"cat\");\n     }\n \n     #[test]\n     fn test_find_path(){\n         let json_value = from_str(\"{\\\"dog\\\":{\\\"cat\\\": {\\\"mouse\\\" : \\\"cheese\\\"}}}\").unwrap();\n         let found_str = json_value.find_path(&[&~\"dog\", &~\"cat\", &~\"mouse\"]);\n-        assert!(found_str.is_some() && found_str.unwrap().as_str().unwrap() == &\"cheese\");\n+        assert!(found_str.is_some() && found_str.unwrap().as_string().unwrap() == &\"cheese\");\n     }\n \n     #[test]\n     fn test_search(){\n         let json_value = from_str(\"{\\\"dog\\\":{\\\"cat\\\": {\\\"mouse\\\" : \\\"cheese\\\"}}}\").unwrap();\n-        let found_str = json_value.search(&~\"mouse\").and_then(|j| j.as_str());\n+        let found_str = json_value.search(&~\"mouse\").and_then(|j| j.as_string());\n         assert!(found_str.is_some());\n         assert!(found_str.unwrap() == &\"cheese\");\n     }\n@@ -2476,15 +2465,15 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_is_str(){\n+    fn test_is_string(){\n         let json_value = from_str(\"\\\"dog\\\"\").unwrap();\n-        assert!(json_value.is_str());\n+        assert!(json_value.is_string());\n     }\n \n     #[test]\n-    fn test_as_str(){\n+    fn test_as_string(){\n         let json_value = from_str(\"\\\"dog\\\"\").unwrap();\n-        let json_str = json_value.as_str();\n+        let json_str = json_value.as_string();\n         let expected_str = &\"dog\";\n         assert_eq!(json_str, Some(expected_str));\n     }"}, {"sha": "0f78c1971bcebea277282940528da96dfd99483d", "filename": "src/libstd/comm/oneshot.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fcomm%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fcomm%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Foneshot.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -339,14 +339,19 @@ impl<T: Send> Packet<T> {\n             DATA => Ok(true),\n \n             // If the other end has hung up, then we have complete ownership\n-            // of the port. We need to check to see if there was an upgrade\n-            // requested, and if so, the other end needs to have its selection\n-            // aborted.\n+            // of the port. First, check if there was data waiting for us. This\n+            // is possible if the other end sent something and then hung up.\n+            //\n+            // We then need to check to see if there was an upgrade requested,\n+            // and if so, the upgraded port needs to have its selection aborted.\n             DISCONNECTED => {\n-                assert!(self.data.is_none());\n-                match mem::replace(&mut self.upgrade, SendUsed) {\n-                    GoUp(port) => Err(port),\n-                    _ => Ok(true),\n+                if self.data.is_some() {\n+                    Ok(true)\n+                } else {\n+                    match mem::replace(&mut self.upgrade, SendUsed) {\n+                        GoUp(port) => Err(port),\n+                        _ => Ok(true),\n+                    }\n                 }\n             }\n "}, {"sha": "3c6828fc14fa0c810aa8f1bb15c19309283612b5", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -597,4 +597,56 @@ mod test {\n         unsafe { h.add(); }\n         assert_eq!(s.wait2(false), h.id);\n     })\n+\n+    test!(fn oneshot_data_waiting() {\n+        let (p, c) = Chan::new();\n+        let (p2, c2) = Chan::new();\n+        spawn(proc() {\n+            select! {\n+                () = p.recv() => {}\n+            }\n+            c2.send(());\n+        });\n+\n+        for _ in range(0, 100) { task::deschedule() }\n+        c.send(());\n+        p2.recv();\n+    })\n+\n+    test!(fn stream_data_waiting() {\n+        let (p, c) = Chan::new();\n+        let (p2, c2) = Chan::new();\n+        c.send(());\n+        c.send(());\n+        p.recv();\n+        p.recv();\n+        spawn(proc() {\n+            select! {\n+                () = p.recv() => {}\n+            }\n+            c2.send(());\n+        });\n+\n+        for _ in range(0, 100) { task::deschedule() }\n+        c.send(());\n+        p2.recv();\n+    })\n+\n+    test!(fn shared_data_waiting() {\n+        let (p, c) = Chan::new();\n+        let (p2, c2) = Chan::new();\n+        drop(c.clone());\n+        c.send(());\n+        p.recv();\n+        spawn(proc() {\n+            select! {\n+                () = p.recv() => {}\n+            }\n+            c2.send(());\n+        });\n+\n+        for _ in range(0, 100) { task::deschedule() }\n+        c.send(());\n+        p2.recv();\n+    })\n }"}, {"sha": "1c10c7b61c364fb3c6f0591f6cf697a37609b7b0", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -172,6 +172,40 @@ need to inspect or unwrap the `IoResult<File>` and we simply call `write_line`\n on it. If `new` returned an `Err(..)` then the followup call to `write_line`\n will also return an error.\n \n+## `try!`\n+\n+Explicit pattern matching on `IoResult`s can get quite verbose, especially\n+when performing many I/O operations. Some examples (like those above) are\n+alleviated with extra methods implemented on `IoResult`, but others have more\n+complex interdependencies among each I/O operation.\n+\n+The `try!` macro from `std::macros` is provided as a method of early-return\n+inside `Result`-returning functions. It expands to an early-return on `Err`\n+and otherwise unwraps the contained `Ok` value.\n+\n+If you wanted to read several `u32`s from a file and return their product:\n+\n+```rust\n+use std::io::{File, IoResult};\n+\n+fn file_product(p: &Path) -> IoResult<u32> {\n+    let mut f = File::open(p);\n+    let x1 = try!(f.read_le_u32());\n+    let x2 = try!(f.read_le_u32());\n+\n+    Ok(x1 * x2)\n+}\n+\n+match file_product(&Path::new(\"numbers.bin\")) {\n+    Ok(x) => println!(\"{}\", x),\n+    Err(e) => println!(\"Failed to read numbers!\")\n+}\n+```\n+\n+With `try!` in `file_product`, each `read_le_u32` need not be directly\n+concerned with error handling; instead its caller is responsible for\n+responding to errors that may occur while attempting to read the numbers.\n+\n */\n \n #[deny(unused_must_use)];"}, {"sha": "73d52654ebf33d0ffb44ef99b03abffc9a78e395", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -150,7 +150,6 @@ mod darwin_fd_limit {\n         rlim_cur: rlim_t,\n         rlim_max: rlim_t\n     }\n-    #[nolink]\n     extern {\n         // name probably doesn't need to be mut, but the C function doesn't specify const\n         fn sysctl(name: *mut libc::c_int, namelen: libc::c_uint,"}, {"sha": "c602c2fc27f8e5da236bb5f57a5cea9a3d49746d", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -3306,7 +3306,6 @@ pub mod funcs {\n     // or anything. The same is not true of POSIX.\n \n     pub mod c95 {\n-        #[nolink]\n         pub mod ctype {\n             use libc::types::os::arch::c95::{c_char, c_int};\n \n@@ -3327,7 +3326,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod stdio {\n             use libc::types::common::c95::{FILE, c_void, fpos_t};\n             use libc::types::os::arch::c95::{c_char, c_int, c_long, size_t};\n@@ -3383,7 +3381,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod stdlib {\n             use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_char, c_double, c_int};\n@@ -3416,7 +3413,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod string {\n             use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_char, c_int, size_t};\n@@ -3461,7 +3457,6 @@ pub mod funcs {\n \n     #[cfg(target_os = \"win32\")]\n     pub mod posix88 {\n-        #[nolink]\n         pub mod stat_ {\n             use libc::types::os::common::posix01::{stat, utimbuf};\n             use libc::types::os::arch::c95::{c_int, c_char, wchar_t};\n@@ -3486,7 +3481,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod stdio {\n             use libc::types::common::c95::FILE;\n             use libc::types::os::arch::c95::{c_int, c_char};\n@@ -3503,7 +3497,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod fcntl {\n             use libc::types::os::arch::c95::{c_int, c_char, wchar_t};\n             extern {\n@@ -3518,12 +3511,10 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod dirent {\n             // Not supplied at all.\n         }\n \n-        #[nolink]\n         pub mod unistd {\n             use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_int, c_uint, c_char,\n@@ -3590,7 +3581,6 @@ pub mod funcs {\n             use libc::types::os::arch::posix01::stat;\n             use libc::types::os::arch::posix88::mode_t;\n \n-            #[nolink]\n             extern {\n                 pub fn chmod(path: *c_char, mode: mode_t) -> c_int;\n                 pub fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n@@ -3618,7 +3608,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod stdio {\n             use libc::types::common::c95::FILE;\n             use libc::types::os::arch::c95::{c_char, c_int};\n@@ -3631,7 +3620,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod fcntl {\n             use libc::types::os::arch::c95::{c_char, c_int};\n             use libc::types::os::arch::posix88::mode_t;\n@@ -3644,7 +3632,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod dirent {\n             use libc::types::common::posix88::{DIR, dirent_t};\n             use libc::types::os::arch::c95::{c_char, c_int, c_long};\n@@ -3678,7 +3665,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod unistd {\n             use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_char, c_int, c_long, c_uint};\n@@ -3748,7 +3734,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod signal {\n             use libc::types::os::arch::c95::{c_int};\n             use libc::types::os::arch::posix88::{pid_t};\n@@ -3758,7 +3743,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod mman {\n             use libc::types::common::c95::{c_void};\n             use libc::types::os::arch::c95::{size_t, c_int, c_char};\n@@ -3796,7 +3780,6 @@ pub mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     pub mod posix01 {\n-        #[nolink]\n         pub mod stat_ {\n             use libc::types::os::arch::c95::{c_char, c_int};\n             use libc::types::os::arch::posix01::stat;\n@@ -3813,7 +3796,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod unistd {\n             use libc::types::os::arch::c95::{c_char, c_int, size_t};\n             use libc::types::os::arch::posix88::{ssize_t, off_t};\n@@ -3841,7 +3823,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod wait {\n             use libc::types::os::arch::c95::{c_int};\n             use libc::types::os::arch::posix88::{pid_t};\n@@ -3852,7 +3833,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod glob {\n             use libc::types::os::arch::c95::{c_char, c_int};\n             use libc::types::os::common::posix01::{glob_t};\n@@ -3867,7 +3847,6 @@ pub mod funcs {\n             }\n         }\n \n-        #[nolink]\n         pub mod mman {\n             use libc::types::common::c95::{c_void};\n             use libc::types::os::arch::c95::{c_int, size_t};\n@@ -4032,7 +4011,6 @@ pub mod funcs {\n     }\n \n     #[cfg(target_os = \"macos\")]\n-    #[nolink]\n     pub mod extra {\n         use libc::types::os::arch::c95::{c_char, c_int};\n \n@@ -4256,7 +4234,6 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_int, c_long};\n             use libc::types::os::arch::c99::intptr_t;\n \n-            #[nolink]\n             extern {\n                 #[link_name = \"_commit\"]\n                 pub fn commit(fd: c_int) -> c_int;"}, {"sha": "3a86aa3d6b68943860a30c8480a9e8a2d3d661fa", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -615,7 +615,6 @@ pub fn errno() -> int {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     fn errno_location() -> *c_int {\n-        #[nolink]\n         extern {\n             fn __error() -> *c_int;\n         }\n@@ -627,7 +626,6 @@ pub fn errno() -> int {\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"android\")]\n     fn errno_location() -> *c_int {\n-        #[nolink]\n         extern {\n             fn __errno_location() -> *c_int;\n         }\n@@ -665,7 +663,6 @@ pub fn last_os_error() -> ~str {\n         #[cfg(target_os = \"freebsd\")]\n         fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: libc::size_t)\n                       -> c_int {\n-            #[nolink]\n             extern {\n                 fn strerror_r(errnum: c_int, buf: *mut c_char,\n                               buflen: libc::size_t) -> c_int;\n@@ -681,7 +678,6 @@ pub fn last_os_error() -> ~str {\n         #[cfg(target_os = \"linux\")]\n         fn strerror_r(errnum: c_int, buf: *mut c_char,\n                       buflen: libc::size_t) -> c_int {\n-            #[nolink]\n             extern {\n                 fn __xpg_strerror_r(errnum: c_int,\n                                     buf: *mut c_char,"}, {"sha": "f7588f6ca599c70e066cf6321c6e4a2ea33b8813", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -15,7 +15,7 @@ use c_str::{CString, ToCStr};\n use clone::Clone;\n use cmp::Eq;\n use from_str::FromStr;\n-use hash::{Hash, sip};\n+use io::Writer;\n use iter::{AdditiveIterator, Extendable, Iterator, Map};\n use option::{Option, None, Some};\n use str;\n@@ -88,10 +88,10 @@ impl ToCStr for Path {\n     }\n }\n \n-impl Hash for Path {\n+impl<H: Writer> ::hash::Hash<H> for Path {\n     #[inline]\n-    fn hash(&self, s: &mut sip::SipState) {\n-        self.repr.hash(s)\n+    fn hash(&self, hasher: &mut H) {\n+        self.repr.hash(hasher)\n     }\n }\n "}, {"sha": "6d05001beab927aba5702a17cf885021251ce59a", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -17,7 +17,7 @@ use clone::Clone;\n use container::Container;\n use cmp::Eq;\n use from_str::FromStr;\n-use hash::{Hash, sip};\n+use io::Writer;\n use iter::{AdditiveIterator, DoubleEndedIterator, Extendable, Rev, Iterator, Map};\n use option::{Option, Some, None};\n use str;\n@@ -112,10 +112,10 @@ impl ToCStr for Path {\n     }\n }\n \n-impl Hash for Path {\n+impl<H: Writer> ::hash::Hash<H> for Path {\n     #[inline]\n-    fn hash(&self, s: &mut sip::SipState) {\n-        self.repr.hash(s)\n+    fn hash(&self, hasher: &mut H) {\n+        self.repr.hash(hasher)\n     }\n }\n "}, {"sha": "1900d0ffedd4ff595e77c26d1dac8493620a7859", "filename": "src/libstd/str.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -89,7 +89,7 @@ use clone::Clone;\n use cmp::{Eq, TotalEq, Ord, TotalOrd, Equiv, Ordering};\n use container::{Container, Mutable};\n use fmt;\n-use hash::{Hash, sip};\n+use io::Writer;\n use iter::{Iterator, FromIterator, Extendable, range};\n use iter::{Filter, AdditiveIterator, Map};\n use iter::{Rev, DoubleEndedIterator, ExactSize};\n@@ -1331,10 +1331,13 @@ impl<'a> Default for MaybeOwned<'a> {\n     fn default() -> MaybeOwned<'a> { Slice(\"\") }\n }\n \n-impl<'a> Hash for MaybeOwned<'a> {\n+impl<'a, H: Writer> ::hash::Hash<H> for MaybeOwned<'a> {\n     #[inline]\n-    fn hash(&self, s: &mut sip::SipState) {\n-        self.as_slice().hash(s)\n+    fn hash(&self, hasher: &mut H) {\n+        match *self {\n+            Slice(s) => s.hash(hasher),\n+            Owned(ref s) => s.hash(hasher),\n+        }\n     }\n }\n "}, {"sha": "922393d8bb3af09a44a7d64773a696ff2d3101e3", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -59,6 +59,12 @@ Examples of string representations:\n #[crate_type = \"dylib\"];\n #[license = \"MIT/ASL2\"];\n \n+#[feature(default_type_params)];\n+\n+// NOTE remove the following two attributes after the next snapshot.\n+#[allow(unrecognized_lint)];\n+#[allow(default_type_param_usage)];\n+\n // test harness access\n #[cfg(test)]\n extern crate test;\n@@ -71,7 +77,7 @@ use std::char::Char;\n use std::default::Default;\n use std::fmt;\n use std::from_str::FromStr;\n-use std::hash::{Hash, sip};\n+use std::hash::Hash;\n use std::num::FromStrRadix;\n use std::str;\n use std::vec;\n@@ -116,9 +122,10 @@ pub struct Uuid {\n     /// The 128-bit number stored in 16 bytes\n     bytes: UuidBytes\n }\n-impl Hash for Uuid {\n-    fn hash(&self, s: &mut sip::SipState) {\n-        self.bytes.slice_from(0).hash(s)\n+\n+impl<S: Writer> Hash<S> for Uuid {\n+    fn hash(&self, state: &mut S) {\n+        self.bytes.hash(state)\n     }\n }\n "}, {"sha": "44b6ecdee7073a6f5a2129dcc058b413ac75bc1a", "filename": "src/test/compile-fail/attrs-after-extern-mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Fcompile-fail%2Fattrs-after-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Fcompile-fail%2Fattrs-after-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-after-extern-mod.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -14,7 +14,6 @@\n \n use std::libc;\n \n-#[nolink]\n extern {\n     static mut rust_dbg_static_mut: libc::c_int;\n     pub fn rust_dbg_static_mut_check_four();"}, {"sha": "0a1b78c8d5d0afed5f68fb7c11ac1546944eda3a", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -12,7 +12,6 @@\n \n use std::libc;\n \n-#[nolink]\n extern {\n     pub fn bare_type1(size: int); //~ ERROR: found rust type\n     pub fn bare_type2(size: uint); //~ ERROR: found rust type"}, {"sha": "de929b8bfc923747b644c2b481520c6d46a5b2a4", "filename": "src/test/compile-fail/nolink-with-link-args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -17,7 +17,6 @@ the compiler output. */\n #[feature(link_args)];\n \n #[link_args = \"aFdEfSeVEEE\"]\n-#[nolink]\n extern {}\n \n fn main() { }"}, {"sha": "9a02768faebe16758370daf62205ed0a8890c8bc", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -11,7 +11,6 @@\n mod libc {\n     use std::libc::{c_char, c_long, c_longlong};\n \n-    #[nolink]\n     extern {\n         pub fn atol(x: *c_char) -> c_long;\n         pub fn atoll(x: *c_char) -> c_longlong;"}, {"sha": "7e480f1c32b50f0598ee62365fddd697ffa4d688", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -13,7 +13,6 @@ extern crate extra;\n mod libc {\n     use std::libc::{c_char, size_t};\n \n-    #[nolink]\n     extern {\n         #[link_name = \"strlen\"]\n         pub fn my_strlen(str: *c_char) -> size_t;"}, {"sha": "2f58765394131c916eef0980f2efc287c00286c3", "filename": "src/test/run-pass/foreign-mod-unused-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -11,7 +11,6 @@\n mod foo {\n     use std::libc::c_int;\n \n-    #[nolink]\n     extern {\n         pub static errno: c_int;\n     }"}, {"sha": "e242071fb26bc42d37f21749da066166631b55ab", "filename": "src/test/run-pass/foreign-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-struct.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -15,7 +15,6 @@ pub enum void { }\n mod bindgen {\n     use super::void;\n \n-    #[nolink]\n     extern {\n         pub fn printf(v: void);\n     }"}, {"sha": "7c9d2dfa87cd1a4ae7ac21815bae48cafa425c99", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -9,26 +9,22 @@\n // except according to those terms.\n \n mod bar {\n-    #[nolink]\n     extern {}\n }\n \n mod zed {\n-    #[nolink]\n     extern {}\n }\n \n mod libc {\n     use std::libc::{c_int, c_void, size_t, ssize_t};\n \n-    #[nolink]\n     extern {\n         pub fn write(fd: c_int, buf: *c_void, count: size_t) -> ssize_t;\n     }\n }\n \n mod baz {\n-    #[nolink]\n     extern {}\n }\n "}, {"sha": "53659a72132ef7b6a0726ee18eaefae158f81cb7", "filename": "src/test/run-pass/issue-11267.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fissue-11267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fissue-11267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11267.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that unary structs can be mutably borrowed.\n+\n+struct Empty;\n+\n+impl Iterator<int> for Empty {\n+    fn next(&mut self) -> Option<int> { None }\n+}\n+\n+fn do_something_with(a : &mut Iterator<int>) {\n+    println!(\"{}\", a.next())\n+}\n+\n+pub fn main() {\n+    do_something_with(&mut Empty);\n+}"}, {"sha": "e23c970e29a582baa3e827fee9ebc3225edaa692", "filename": "src/test/run-pass/nil-decl-in-foreign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -10,7 +10,6 @@\n \n // Issue #901\n mod libc {\n-    #[nolink]\n     extern {\n         pub fn printf(x: ());\n     }"}, {"sha": "30ce77153116fb70f54f8bca95621966427ddff0", "filename": "src/test/run-pass/warn-ctypes-inhibit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d64441bcb820cf35d3e39dde8514c46765a12a6/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs?ref=4d64441bcb820cf35d3e39dde8514c46765a12a6", "patch": "@@ -13,7 +13,6 @@\n #[allow(ctypes)];\n \n mod libc {\n-    #[nolink]\n     extern {\n         pub fn malloc(size: int) -> *u8;\n     }"}]}