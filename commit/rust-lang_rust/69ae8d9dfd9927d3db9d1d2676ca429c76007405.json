{"sha": "69ae8d9dfd9927d3db9d1d2676ca429c76007405", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YWU4ZDlkZmQ5OTI3ZDNkYjlkMWQyNjc2Y2E0MjljNzYwMDc0MDU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-03T23:13:56Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-04T04:23:45Z"}, "message": "Remove `LocalInternedString::as_interned_str()`.\n\nIt's unused.", "tree": {"sha": "11099865953367090ca04a488020bdb05b4d3deb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11099865953367090ca04a488020bdb05b4d3deb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ae8d9dfd9927d3db9d1d2676ca429c76007405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ae8d9dfd9927d3db9d1d2676ca429c76007405", "html_url": "https://github.com/rust-lang/rust/commit/69ae8d9dfd9927d3db9d1d2676ca429c76007405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ae8d9dfd9927d3db9d1d2676ca429c76007405/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf536dde3b603a0eb4ab9d351010c29799e28676", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf536dde3b603a0eb4ab9d351010c29799e28676", "html_url": "https://github.com/rust-lang/rust/commit/bf536dde3b603a0eb4ab9d351010c29799e28676"}], "stats": {"total": 6, "additions": 0, "deletions": 6}, "files": [{"sha": "42db2d21991e4e528e64e8e0b007d2ec1296298b", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ae8d9dfd9927d3db9d1d2676ca429c76007405/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ae8d9dfd9927d3db9d1d2676ca429c76007405/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=69ae8d9dfd9927d3db9d1d2676ca429c76007405", "patch": "@@ -1169,12 +1169,6 @@ impl LocalInternedString {\n         }\n     }\n \n-    pub fn as_interned_str(self) -> InternedString {\n-        InternedString {\n-            symbol: Symbol::intern(self.string)\n-        }\n-    }\n-\n     #[inline]\n     pub fn get(&self) -> &str {\n         // This returns a valid string since we ensure that `self` outlives the interner"}]}