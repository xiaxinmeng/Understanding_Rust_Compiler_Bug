{"sha": "eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc", "node_id": "C_kwDOAAsO6NoAKGViNWQ4MmJjOWM5OGZhMzZkZWFmMzlkZTJiNWI2ZGQ5ZmM0OGMwY2M", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-02-20T18:18:49Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-02-20T18:18:49Z"}, "message": "Use named arguments for `int_impl` macro\n\nThis makes it easier to understand.", "tree": {"sha": "66af38bf1542dabb7c03799d4dbe9f55f4935ff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66af38bf1542dabb7c03799d4dbe9f55f4935ff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc", "html_url": "https://github.com/rust-lang/rust/commit/eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3b46bb74ec53f9d135cdf90a0aafcd03ac97277", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b46bb74ec53f9d135cdf90a0aafcd03ac97277", "html_url": "https://github.com/rust-lang/rust/commit/d3b46bb74ec53f9d135cdf90a0aafcd03ac97277"}], "stats": {"total": 221, "additions": 182, "deletions": 39}, "files": [{"sha": "572191d0f9bbbf9d2ee00246fd2df1967ee47c21", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc", "patch": "@@ -1,9 +1,24 @@\n macro_rules! int_impl {\n-    ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $BITS_MINUS_ONE:expr, $Min:expr, $Max:expr,\n-     $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n-     $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n-     $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr,\n-     $bound_condition:expr) => {\n+    (\n+        Self = $SelfT:ty,\n+        ActualT = $ActualT:ident,\n+        UnsignedT = $UnsignedT:ty,\n+        BITS = $BITS:expr,\n+        BITS_MINUS_ONE = $BITS_MINUS_ONE:expr,\n+        Min = $Min:expr,\n+        Max = $Max:expr,\n+        rot = $rot:expr,\n+        rot_op = $rot_op:expr,\n+        rot_result = $rot_result:expr,\n+        swap_op = $swap_op:expr,\n+        swapped = $swapped:expr,\n+        reversed = $reversed:expr,\n+        le_bytes = $le_bytes:expr,\n+        be_bytes = $be_bytes:expr,\n+        to_xe_bytes_doc = $to_xe_bytes_doc:expr,\n+        from_xe_bytes_doc = $from_xe_bytes_doc:expr,\n+        bound_condition = $bound_condition:expr,\n+    ) => {\n         /// The smallest value that can be represented by this integer type\n         #[doc = concat!(\"(&minus;2<sup>\", $BITS_MINUS_ONE, \"</sup>\", $bound_condition, \").\")]\n         ///"}, {"sha": "a50c91579fa76818e4c467148616f9654464b738", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 162, "deletions": 34, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc", "patch": "@@ -226,64 +226,192 @@ macro_rules! widening_impl {\n }\n \n impl i8 {\n-    int_impl! { i8, i8, u8, 8, 7, -128, 127, 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n-    \"[0x12]\", \"[0x12]\", \"\", \"\", \"\" }\n+    int_impl! {\n+        Self = i8,\n+        ActualT = i8,\n+        UnsignedT = u8,\n+        BITS = 8,\n+        BITS_MINUS_ONE = 7,\n+        Min = -128,\n+        Max = 127,\n+        rot = 2,\n+        rot_op = \"-0x7e\",\n+        rot_result = \"0xa\",\n+        swap_op = \"0x12\",\n+        swapped = \"0x12\",\n+        reversed = \"0x48\",\n+        le_bytes = \"[0x12]\",\n+        be_bytes = \"[0x12]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n }\n \n impl i16 {\n-    int_impl! { i16, i16, u16, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n-    \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\", \"\" }\n+    int_impl! {\n+        Self = i16,\n+        ActualT = i16,\n+        UnsignedT = u16,\n+        BITS = 16,\n+        BITS_MINUS_ONE = 15,\n+        Min = -32768,\n+        Max = 32767,\n+        rot = 4,\n+        rot_op = \"-0x5ffd\",\n+        rot_result = \"0x3a\",\n+        swap_op = \"0x1234\",\n+        swapped = \"0x3412\",\n+        reversed = \"0x2c48\",\n+        le_bytes = \"[0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n }\n \n impl i32 {\n-    int_impl! { i32, i32, u32, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n-    \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\", \"\" }\n+    int_impl! {\n+        Self = i32,\n+        ActualT = i32,\n+        UnsignedT = u32,\n+        BITS = 32,\n+        BITS_MINUS_ONE = 31,\n+        Min = -2147483648,\n+        Max = 2147483647,\n+        rot = 8,\n+        rot_op = \"0x10000b3\",\n+        rot_result = \"0xb301\",\n+        swap_op = \"0x12345678\",\n+        swapped = \"0x78563412\",\n+        reversed = \"0x1e6a2c48\",\n+        le_bytes = \"[0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n }\n \n impl i64 {\n-    int_impl! { i64, i64, u64, 64, 63, -9223372036854775808, 9223372036854775807, 12,\n-    \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n-    \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\", \"\", \"\", \"\" }\n+    int_impl! {\n+        Self = i64,\n+        ActualT = i64,\n+        UnsignedT = u64,\n+        BITS = 64,\n+        BITS_MINUS_ONE = 63,\n+        Min = -9223372036854775808,\n+        Max = 9223372036854775807,\n+        rot = 12,\n+        rot_op = \"0xaa00000000006e1\",\n+        rot_result = \"0x6e10aa\",\n+        swap_op = \"0x1234567890123456\",\n+        swapped = \"0x5634129078563412\",\n+        reversed = \"0x6a2c48091e6a2c48\",\n+        le_bytes = \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n }\n \n impl i128 {\n-    int_impl! { i128, i128, u128, 128, 127, -170141183460469231731687303715884105728,\n-    170141183460469231731687303715884105727, 16,\n-    \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n-    \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n-    \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n-      0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n-      0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\", \"\", \"\", \"\" }\n+    int_impl! {\n+        Self = i128,\n+        ActualT = i128,\n+        UnsignedT = u128,\n+        BITS = 128,\n+        BITS_MINUS_ONE = 127,\n+        Min = -170141183460469231731687303715884105728,\n+        Max = 170141183460469231731687303715884105727,\n+        rot = 16,\n+        rot_op = \"0x13f40000000000000000000000004f76\",\n+        rot_result = \"0x4f7613f4\",\n+        swap_op = \"0x12345678901234567890123456789012\",\n+        swapped = \"0x12907856341290785634129078563412\",\n+        reversed = \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n+        le_bytes = \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n+            0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n+            0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n impl isize {\n-    int_impl! { isize, i16, usize, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n-    \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n-    \" on 16-bit targets\" }\n+    int_impl! {\n+        Self = isize,\n+        ActualT = i16,\n+        UnsignedT = usize,\n+        BITS = 16,\n+        BITS_MINUS_ONE = 15,\n+        Min = -32768,\n+        Max = 32767,\n+        rot = 4,\n+        rot_op = \"-0x5ffd\",\n+        rot_result = \"0x3a\",\n+        swap_op = \"0x1234\",\n+        swapped = \"0x3412\",\n+        reversed = \"0x2c48\",\n+        le_bytes = \"[0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34]\",\n+        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n+        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n+        bound_condition = \" on 16-bit targets\",\n+    }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n impl isize {\n-    int_impl! { isize, i32, usize, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n-    \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n-    \" on 32-bit targets\" }\n+    int_impl! {\n+        Self = isize,\n+        ActualT = i32,\n+        UnsignedT = usize,\n+        BITS = 32,\n+        BITS_MINUS_ONE = 31,\n+        Min = -2147483648,\n+        Max = 2147483647,\n+        rot = 8,\n+        rot_op = \"0x10000b3\",\n+        rot_result = \"0xb301\",\n+        swap_op = \"0x12345678\",\n+        swapped = \"0x78563412\",\n+        reversed = \"0x1e6a2c48\",\n+        le_bytes = \"[0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78]\",\n+        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n+        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n+        bound_condition = \" on 32-bit targets\",\n+    }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n impl isize {\n-    int_impl! { isize, i64, usize, 64, 63, -9223372036854775808, 9223372036854775807,\n-    12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n-    \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n-    \" on 64-bit targets\" }\n+    int_impl! {\n+        Self = isize,\n+        ActualT = i64,\n+        UnsignedT = usize,\n+        BITS = 64,\n+        BITS_MINUS_ONE = 63,\n+        Min = -9223372036854775808,\n+        Max = 9223372036854775807,\n+        rot = 12,\n+        rot_op = \"0xaa00000000006e1\",\n+        rot_result = \"0x6e10aa\",\n+        swap_op = \"0x1234567890123456\",\n+        swapped = \"0x5634129078563412\",\n+        reversed = \"0x6a2c48091e6a2c48\",\n+        le_bytes = \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n+        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n+        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n+        bound_condition = \" on 64-bit targets\",\n+    }\n }\n \n /// If 6th bit set ascii is upper case."}]}