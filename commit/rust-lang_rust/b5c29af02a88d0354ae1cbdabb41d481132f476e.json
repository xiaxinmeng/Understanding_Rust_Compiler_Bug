{"sha": "b5c29af02a88d0354ae1cbdabb41d481132f476e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YzI5YWYwMmE4OGQwMzU0YWUxY2JkYWJiNDFkNDgxMTMyZjQ3NmU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-12-28T10:51:43Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-12-28T10:51:43Z"}, "message": "Special case underscore in mbe meta op", "tree": {"sha": "790b2474b24c320418f6b4c70dce79ae2a6d26e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/790b2474b24c320418f6b4c70dce79ae2a6d26e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5c29af02a88d0354ae1cbdabb41d481132f476e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c29af02a88d0354ae1cbdabb41d481132f476e", "html_url": "https://github.com/rust-lang/rust/commit/b5c29af02a88d0354ae1cbdabb41d481132f476e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5c29af02a88d0354ae1cbdabb41d481132f476e/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b33453f8445d07ecc81f9f19ad66a0c43286c3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b33453f8445d07ecc81f9f19ad66a0c43286c3a5", "html_url": "https://github.com/rust-lang/rust/commit/b33453f8445d07ecc81f9f19ad66a0c43286c3a5"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "d681905f5728f1b093c0ca88763edc2edfb1353c", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b5c29af02a88d0354ae1cbdabb41d481132f476e/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c29af02a88d0354ae1cbdabb41d481132f476e/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=b5c29af02a88d0354ae1cbdabb41d481132f476e", "patch": "@@ -101,8 +101,15 @@ fn next_op<'a>(\n                     Op::Repeat { subtree, separator, kind }\n                 }\n                 tt::TokenTree::Leaf(leaf) => match leaf {\n-                    tt::Leaf::Punct(_) => {\n-                        return Err(ExpandError::UnexpectedToken);\n+                    tt::Leaf::Punct(punct) => {\n+                        static UNDERSCORE: SmolStr = SmolStr::new_inline(\"_\");\n+\n+                        if punct.char != '_' {\n+                            return Err(ExpandError::UnexpectedToken);\n+                        }\n+                        let name = &UNDERSCORE;\n+                        let kind = eat_fragment_kind(src, mode)?;\n+                        Op::Var { name, kind }\n                     }\n                     tt::Leaf::Ident(ident) => {\n                         let name = &ident.text;"}, {"sha": "9958a33a08d0fffd01802a8bf5e4fda2dacaf6ab", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b5c29af02a88d0354ae1cbdabb41d481132f476e/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c29af02a88d0354ae1cbdabb41d481132f476e/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=b5c29af02a88d0354ae1cbdabb41d481132f476e", "patch": "@@ -1019,6 +1019,42 @@ fn test_underscore() {\n     .assert_expand_items(r#\"foo! { => }\"#, r#\"0\"#);\n }\n \n+#[test]\n+fn test_underscore_not_greedily() {\n+    parse_macro(\n+        r#\"\n+macro_rules! q {\n+    ($($a:ident)* _) => {0};\n+}\n+\"#,\n+    )\n+    // `_` overlaps with `$a:ident` but rustc matches it under the `_` token\n+    .assert_expand_items(r#\"q![a b c d _]\"#, r#\"0\"#);\n+\n+    parse_macro(\n+        r#\"\n+macro_rules! q {\n+    ($($a:expr => $b:ident)* _ => $c:expr) => {0};\n+}\n+\"#,\n+    )\n+    // `_ => ou` overlaps with `$a:expr => $b:ident` but rustc matches it under `_ => $c:expr`\n+    .assert_expand_items(r#\"q![a => b c => d _ => ou]\"#, r#\"0\"#);\n+}\n+\n+#[test]\n+fn test_underscore_as_type() {\n+    parse_macro(\n+        r#\"\n+macro_rules! q {\n+    ($a:ty) => {0};\n+}\n+\"#,\n+    )\n+    // Underscore is a type\n+    .assert_expand_items(r#\"q![_]\"#, r#\"0\"#);\n+}\n+\n #[test]\n fn test_vertical_bar_with_pat() {\n     parse_macro("}]}