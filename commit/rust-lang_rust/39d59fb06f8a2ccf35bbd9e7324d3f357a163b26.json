{"sha": "39d59fb06f8a2ccf35bbd9e7324d3f357a163b26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZDU5ZmIwNmY4YTJjY2YzNWJiZDllNzMyNGQzZjM1N2ExNjNiMjY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-07T14:44:25Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-07T14:44:25Z"}, "message": "Make better use of `stdx::always`", "tree": {"sha": "c200e1c9e8c775fbf3e66b37f806f902c5ddf649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c200e1c9e8c775fbf3e66b37f806f902c5ddf649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d59fb06f8a2ccf35bbd9e7324d3f357a163b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d59fb06f8a2ccf35bbd9e7324d3f357a163b26", "html_url": "https://github.com/rust-lang/rust/commit/39d59fb06f8a2ccf35bbd9e7324d3f357a163b26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d59fb06f8a2ccf35bbd9e7324d3f357a163b26/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f599ae4ed93691c07bc24030a3c0d9e8508ed4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f599ae4ed93691c07bc24030a3c0d9e8508ed4a", "html_url": "https://github.com/rust-lang/rust/commit/3f599ae4ed93691c07bc24030a3c0d9e8508ed4a"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "809ff7d2094abaa864e9bcd1f77fe5e7f4a742ef", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/39d59fb06f8a2ccf35bbd9e7324d3f357a163b26/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d59fb06f8a2ccf35bbd9e7324d3f357a163b26/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=39d59fb06f8a2ccf35bbd9e7324d3f357a163b26", "patch": "@@ -58,9 +58,13 @@ pub(crate) fn on_char_typed(\n     position: FilePosition,\n     char_typed: char,\n ) -> Option<SourceChange> {\n-    assert!(TRIGGER_CHARS.contains(char_typed));\n+    if !stdx::always!(TRIGGER_CHARS.contains(char_typed)) {\n+        return None;\n+    }\n     let file = &db.parse(position.file_id);\n-    assert_eq!(file.tree().syntax().text().char_at(position.offset), Some(char_typed));\n+    if !stdx::always!(file.tree().syntax().text().char_at(position.offset) == Some(char_typed)) {\n+        return None;\n+    }\n     let edit = on_char_typed_inner(file, position.offset, char_typed)?;\n     Some(SourceChange::from_text_edit(position.file_id, edit))\n }\n@@ -70,7 +74,9 @@ fn on_char_typed_inner(\n     offset: TextSize,\n     char_typed: char,\n ) -> Option<TextEdit> {\n-    assert!(TRIGGER_CHARS.contains(char_typed));\n+    if !stdx::always!(TRIGGER_CHARS.contains(char_typed)) {\n+        return None;\n+    }\n     match char_typed {\n         '.' => on_dot_typed(&file.tree(), offset),\n         '=' => on_eq_typed(&file.tree(), offset),\n@@ -83,7 +89,9 @@ fn on_char_typed_inner(\n /// Inserts a closing `}` when the user types an opening `{`, wrapping an existing expression in a\n /// block.\n fn on_opening_brace_typed(file: &Parse<SourceFile>, offset: TextSize) -> Option<TextEdit> {\n-    stdx::always!(file.tree().syntax().text().char_at(offset) == Some('{'));\n+    if !stdx::always!(file.tree().syntax().text().char_at(offset) == Some('{')) {\n+        return None;\n+    }\n \n     let brace_token = file.tree().syntax().token_at_offset(offset).right_biased()?;\n \n@@ -120,7 +128,9 @@ fn on_opening_brace_typed(file: &Parse<SourceFile>, offset: TextSize) -> Option<\n /// this works when adding `let =`.\n // FIXME: use a snippet completion instead of this hack here.\n fn on_eq_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n-    stdx::always!(file.syntax().text().char_at(offset) == Some('='));\n+    if !stdx::always!(file.syntax().text().char_at(offset) == Some('=')) {\n+        return None;\n+    }\n     let let_stmt: ast::LetStmt = find_node_at_offset(file.syntax(), offset)?;\n     if let_stmt.semicolon_token().is_some() {\n         return None;\n@@ -142,7 +152,9 @@ fn on_eq_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n \n /// Returns an edit which should be applied when a dot ('.') is typed on a blank line, indenting the line appropriately.\n fn on_dot_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n-    stdx::always!(file.syntax().text().char_at(offset) == Some('.'));\n+    if !stdx::always!(file.syntax().text().char_at(offset) == Some('.')) {\n+        return None;\n+    }\n     let whitespace =\n         file.syntax().token_at_offset(offset).left_biased().and_then(ast::Whitespace::cast)?;\n \n@@ -171,7 +183,9 @@ fn on_dot_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n /// Adds a space after an arrow when `fn foo() { ... }` is turned into `fn foo() -> { ... }`\n fn on_arrow_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n     let file_text = file.syntax().text();\n-    stdx::always!(file_text.char_at(offset) == Some('>'));\n+    if !stdx::always!(file_text.char_at(offset) == Some('>')) {\n+        return None;\n+    }\n     let after_arrow = offset + TextSize::of('>');\n     if file_text.char_at(after_arrow) != Some('{') {\n         return None;"}]}