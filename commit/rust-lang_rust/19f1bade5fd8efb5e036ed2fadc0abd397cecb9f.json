{"sha": "19f1bade5fd8efb5e036ed2fadc0abd397cecb9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZjFiYWRlNWZkOGVmYjVlMDM2ZWQyZmFkYzBhYmQzOTdjZWNiOWY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-04-18T21:06:49Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-04-18T21:06:49Z"}, "message": "Fix items alignment", "tree": {"sha": "9165cad14f13b70b8690cbac190f46f8d89bc770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9165cad14f13b70b8690cbac190f46f8d89bc770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19f1bade5fd8efb5e036ed2fadc0abd397cecb9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19f1bade5fd8efb5e036ed2fadc0abd397cecb9f", "html_url": "https://github.com/rust-lang/rust/commit/19f1bade5fd8efb5e036ed2fadc0abd397cecb9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19f1bade5fd8efb5e036ed2fadc0abd397cecb9f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5971266301e76a0f9ea131996cf699b18eaa7c89", "url": "https://api.github.com/repos/rust-lang/rust/commits/5971266301e76a0f9ea131996cf699b18eaa7c89", "html_url": "https://github.com/rust-lang/rust/commit/5971266301e76a0f9ea131996cf699b18eaa7c89"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "a2e843828f7a351f62b1dec2cf4b0774561ff793", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/19f1bade5fd8efb5e036ed2fadc0abd397cecb9f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f1bade5fd8efb5e036ed2fadc0abd397cecb9f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=19f1bade5fd8efb5e036ed2fadc0abd397cecb9f", "patch": "@@ -3389,8 +3389,10 @@ fn assoc_const(w: &mut fmt::Formatter<'_>,\n                it: &clean::Item,\n                ty: &clean::Type,\n                _default: Option<&String>,\n-               link: AssocItemLink<'_>) -> fmt::Result {\n-    write!(w, \"{}const <a href='{}' class=\\\"constant\\\"><b>{}</b></a>: {}\",\n+               link: AssocItemLink<'_>,\n+               extra: &str) -> fmt::Result {\n+    write!(w, \"{}{}const <a href='{}' class=\\\"constant\\\"><b>{}</b></a>: {}\",\n+           extra,\n            VisSpace(&it.visibility),\n            naive_assoc_href(it, link),\n            it.name.as_ref().unwrap(),\n@@ -3401,8 +3403,10 @@ fn assoc_const(w: &mut fmt::Formatter<'_>,\n fn assoc_type<W: fmt::Write>(w: &mut W, it: &clean::Item,\n                              bounds: &[clean::GenericBound],\n                              default: Option<&clean::Type>,\n-                             link: AssocItemLink<'_>) -> fmt::Result {\n-    write!(w, \"type <a href='{}' class=\\\"type\\\">{}</a>\",\n+                             link: AssocItemLink<'_>,\n+                             extra: &str) -> fmt::Result {\n+    write!(w, \"{}type <a href='{}' class=\\\"type\\\">{}</a>\",\n+           extra,\n            naive_assoc_href(it, link),\n            it.name.as_ref().unwrap())?;\n     if !bounds.is_empty() {\n@@ -3513,10 +3517,12 @@ fn render_assoc_item(w: &mut fmt::Formatter<'_>,\n             method(w, item, m.header, &m.generics, &m.decl, link, parent)\n         }\n         clean::AssociatedConstItem(ref ty, ref default) => {\n-            assoc_const(w, item, ty, default.as_ref(), link)\n+            assoc_const(w, item, ty, default.as_ref(), link,\n+                        if parent == ItemType::Trait { \"    \" } else { \"\" })\n         }\n         clean::AssociatedTypeItem(ref bounds, ref default) => {\n-            assoc_type(w, item, bounds, default.as_ref(), link)\n+            assoc_type(w, item, bounds, default.as_ref(), link,\n+                       if parent == ItemType::Trait { \"    \" } else { \"\" })\n         }\n         _ => panic!(\"render_assoc_item called on non-associated-item\")\n     }\n@@ -4129,7 +4135,8 @@ fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n                             out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n                             assoc_type(&mut out, it, &[],\n                                        Some(&tydef.type_),\n-                                       AssocItemLink::GotoSource(t_did, &FxHashSet::default()))?;\n+                                       AssocItemLink::GotoSource(t_did, &FxHashSet::default()),\n+                                       \"\")?;\n                             out.push_str(\";</span>\");\n                         }\n                     }\n@@ -4165,7 +4172,8 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n                     if let clean::TypedefItem(ref tydef, _) = it.inner {\n                         write!(w, \"<span class=\\\"where fmt-newline\\\">  \")?;\n                         assoc_type(w, it, &vec![], Some(&tydef.type_),\n-                                   AssocItemLink::Anchor(None))?;\n+                                   AssocItemLink::Anchor(None),\n+                                   \"\")?;\n                         write!(w, \";</span>\")?;\n                     }\n                 }\n@@ -4235,15 +4243,15 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<code id='{}'>\", ns_id)?;\n-                assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id))?;\n+                assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id), \"\")?;\n                 write!(w, \"</code></h4>\")?;\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<code id='{}'>\", ns_id)?;\n-                assoc_const(w, item, ty, default.as_ref(), link.anchor(&id))?;\n+                assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\")?;\n                 write!(w, \"</code>\")?;\n                 render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                 if let Some(l) = (Item { cx, item }).src_href() {\n@@ -4257,7 +4265,7 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<code id='{}'>\", ns_id)?;\n-                assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id))?;\n+                assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id), \"\")?;\n                 write!(w, \"</code></h4>\")?;\n             }\n             clean::StrippedItem(..) => return Ok(()),"}]}