{"sha": "7c8b9413b8ce457b53e2c4ab5f3b9f1ce96195f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOGI5NDEzYjhjZTQ1N2I1M2UyYzRhYjVmM2I5ZjFjZTk2MTk1Zjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-15T10:01:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-15T10:01:07Z"}, "message": "Rollup merge of #73104 - poliorcetics:explicit-mutex-drop-example, r=dtolnay\n\nExample about explicit mutex dropping\n\nFixes #67457.\n\nFollowing the remarks made in #73074, I added an example on the main `Mutex` type, with a situation where there is mutable data and a computation result.\n\nIn my testing it is effectively needed to explicitly drop the lock, else it deadlocks.\n\nr? @dtolnay because you were the one to review the previous PR.", "tree": {"sha": "171d59b4523d9443224613956d0c148358ae358d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/171d59b4523d9443224613956d0c148358ae358d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c8b9413b8ce457b53e2c4ab5f3b9f1ce96195f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe50bjCRBK7hj4Ov3rIwAAdHIIAF1gHbJ0aO3dR8e8OgcIDfEX\n/f8EliuUZ38T5rJfFY7/edqzCBY2cdlFjE/8cL49NljLCuacIMgD/KG3BczHjXVN\nYuu5kd3ZlUu3WYrmZmHe3lN+PQTkSQu+ryqctt1dRjkGtCcFrmmXcHTCxZtXKvrn\nUDgkdnEGdf/7zamzjOlk7ryI/QBIJX5qZXgvrmtQViDBqYICIJNws+MoI7oo/atJ\nRi6KFhrQeUGWT6flU2FXs+bUMpWyXSVIMIqoGe/mNMwTTj3IzmPgALRJMS5vF12l\nuJNhuBfhokUIAuHFxFuYyC8LFdMtVzUzD5KaZhKM2R2m5LKP82OP8YrRg7KsqfQ=\n=VZSw\n-----END PGP SIGNATURE-----\n", "payload": "tree 171d59b4523d9443224613956d0c148358ae358d\nparent 344095715fb9e8004c91a1b5d857bd18c5d07a6f\nparent c010e711ca5ec02012afb83c0d99aec9d26a9eea\nauthor Ralf Jung <post@ralfj.de> 1592215267 +0200\ncommitter GitHub <noreply@github.com> 1592215267 +0200\n\nRollup merge of #73104 - poliorcetics:explicit-mutex-drop-example, r=dtolnay\n\nExample about explicit mutex dropping\n\nFixes #67457.\n\nFollowing the remarks made in #73074, I added an example on the main `Mutex` type, with a situation where there is mutable data and a computation result.\n\nIn my testing it is effectively needed to explicitly drop the lock, else it deadlocks.\n\nr? @dtolnay because you were the one to review the previous PR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8b9413b8ce457b53e2c4ab5f3b9f1ce96195f7", "html_url": "https://github.com/rust-lang/rust/commit/7c8b9413b8ce457b53e2c4ab5f3b9f1ce96195f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c8b9413b8ce457b53e2c4ab5f3b9f1ce96195f7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "344095715fb9e8004c91a1b5d857bd18c5d07a6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/344095715fb9e8004c91a1b5d857bd18c5d07a6f", "html_url": "https://github.com/rust-lang/rust/commit/344095715fb9e8004c91a1b5d857bd18c5d07a6f"}, {"sha": "c010e711ca5ec02012afb83c0d99aec9d26a9eea", "url": "https://api.github.com/repos/rust-lang/rust/commits/c010e711ca5ec02012afb83c0d99aec9d26a9eea", "html_url": "https://github.com/rust-lang/rust/commit/c010e711ca5ec02012afb83c0d99aec9d26a9eea"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "8478457eabfc2e8d0d5e68eeea7ba273e1f0f6bc", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b9413b8ce457b53e2c4ab5f3b9f1ce96195f7/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b9413b8ce457b53e2c4ab5f3b9f1ce96195f7/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=7c8b9413b8ce457b53e2c4ab5f3b9f1ce96195f7", "patch": "@@ -107,6 +107,60 @@ use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n ///\n /// *guard += 1;\n /// ```\n+///\n+/// It is sometimes necessary to manually drop the mutex guard to unlock it\n+/// sooner than the end of the enclosing scope.\n+///\n+/// ```\n+/// use std::sync::{Arc, Mutex};\n+/// use std::thread;\n+///\n+/// const N: usize = 3;\n+///\n+/// let data_mutex = Arc::new(Mutex::new(vec![1, 2, 3, 4]));\n+/// let res_mutex = Arc::new(Mutex::new(0));\n+///\n+/// let mut threads = Vec::with_capacity(N);\n+/// (0..N).for_each(|_| {\n+///     let data_mutex_clone = Arc::clone(&data_mutex);\n+///     let res_mutex_clone = Arc::clone(&res_mutex);\n+///\n+///     threads.push(thread::spawn(move || {\n+///         let mut data = data_mutex_clone.lock().unwrap();\n+///         // This is the result of some important and long-ish work.\n+///         let result = data.iter().fold(0, |acc, x| acc + x * 2);\n+///         data.push(result);\n+///         drop(data);\n+///         *res_mutex_clone.lock().unwrap() += result;\n+///     }));\n+/// });\n+///\n+/// let mut data = data_mutex.lock().unwrap();\n+/// // This is the result of some important and long-ish work.\n+/// let result = data.iter().fold(0, |acc, x| acc + x * 2);\n+/// data.push(result);\n+/// // We drop the `data` explicitly because it's not necessary anymore and the\n+/// // thread still has work to do. This allow other threads to start working on\n+/// // the data immediately, without waiting for the rest of the unrelated work\n+/// // to be done here.\n+/// //\n+/// // It's even more important here than in the threads because we `.join` the\n+/// // threads after that. If we had not dropped the mutex guard, a thread could\n+/// // be waiting forever for it, causing a deadlock.\n+/// drop(data);\n+/// // Here the mutex guard is not assigned to a variable and so, even if the\n+/// // scope does not end after this line, the mutex is still released: there is\n+/// // no deadlock.\n+/// *res_mutex.lock().unwrap() += result;\n+///\n+/// threads.into_iter().for_each(|thread| {\n+///     thread\n+///         .join()\n+///         .expect(\"The thread creating or execution failed !\")\n+/// });\n+///\n+/// assert_eq!(*res_mutex.lock().unwrap(), 800);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"mutex_type\")]\n pub struct Mutex<T: ?Sized> {"}]}