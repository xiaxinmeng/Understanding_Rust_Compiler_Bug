{"sha": "ca7dfb1cfad71598992af03f9582200531446ee6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhN2RmYjFjZmFkNzE1OTg5OTJhZjAzZjk1ODIyMDA1MzE0NDZlZTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-26T02:21:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-26T02:21:30Z"}, "message": "Rollup merge of #70386 - Centril:patty, r=estebank\n\ntypeck: minor pattern typing improvements\n\nr? @estebank", "tree": {"sha": "7d9d818d1d15a6e4f46183b49c823d7d947195e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d9d818d1d15a6e4f46183b49c823d7d947195e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca7dfb1cfad71598992af03f9582200531446ee6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefBGqCRBK7hj4Ov3rIwAAdHIIABaf00a68lLFkgBiDn9jr0ww\nTv9SwSszJaSo9+QIN20ckCMmdtggnh9TzHTIumNueD/lUcKKwtEs8NI3KYfZDjvq\ntsWbDcyTNCSsXvZOp3r1CX5m/+Yrkhoyuu9bUgbFAbXrvbxtrSZ0dwKxMR4ZLWpn\nb7O0R99AsLWaE2jkxqfq1eBasE1/9NhaqaLrnkB4CbULF3U07gFiVy03KCFYiHTM\n6GXKJ/fpTb7RLj6slGj+K5oGtsxec+gntzzrBcshhUSqmxtg5Bv1LBzJgc/3e/xd\njVQ7RbPbpVA1dHBsviOpY2zEI7YL0d3039H7OwYLn+bbcjyt7yN0TtIS5MrazHw=\n=b5CQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d9d818d1d15a6e4f46183b49c823d7d947195e0\nparent ef01fe6bbc0f675bb2795fb86113ae5ae0c92d3b\nparent da10963357f91eb1aa8100f224d5ce19a0d4424b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585189290 +0100\ncommitter GitHub <noreply@github.com> 1585189290 +0100\n\nRollup merge of #70386 - Centril:patty, r=estebank\n\ntypeck: minor pattern typing improvements\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7dfb1cfad71598992af03f9582200531446ee6", "html_url": "https://github.com/rust-lang/rust/commit/ca7dfb1cfad71598992af03f9582200531446ee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca7dfb1cfad71598992af03f9582200531446ee6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef01fe6bbc0f675bb2795fb86113ae5ae0c92d3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef01fe6bbc0f675bb2795fb86113ae5ae0c92d3b", "html_url": "https://github.com/rust-lang/rust/commit/ef01fe6bbc0f675bb2795fb86113ae5ae0c92d3b"}, {"sha": "da10963357f91eb1aa8100f224d5ce19a0d4424b", "url": "https://api.github.com/repos/rust-lang/rust/commits/da10963357f91eb1aa8100f224d5ce19a0d4424b", "html_url": "https://github.com/rust-lang/rust/commit/da10963357f91eb1aa8100f224d5ce19a0d4424b"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "0c4a05e61814df19888398b49fe6edc8dfb7dcfa", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ca7dfb1cfad71598992af03f9582200531446ee6/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7dfb1cfad71598992af03f9582200531446ee6/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=ca7dfb1cfad71598992af03f9582200531446ee6", "patch": "@@ -835,7 +835,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 on_error();\n                 return tcx.types.err;\n             }\n-            Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::AssocFn, _) => {\n+            Res::Def(DefKind::AssocConst | DefKind::AssocFn, _) => {\n                 report_unexpected_res(res);\n                 return tcx.types.err;\n             }\n@@ -1020,7 +1020,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Adt(adt, substs) => (substs, adt),\n             _ => span_bug!(pat.span, \"struct pattern is not an ADT\"),\n         };\n-        let kind_name = adt.variant_descr();\n \n         // Index the struct fields' types.\n         let field_map = variant\n@@ -1074,7 +1073,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if !inexistent_fields.is_empty() && !variant.recovered {\n             self.error_inexistent_fields(\n-                kind_name,\n+                adt.variant_descr(),\n                 &inexistent_fields,\n                 &mut unmentioned_fields,\n                 variant,\n@@ -1083,18 +1082,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Require `..` if struct has non_exhaustive attribute.\n         if variant.is_field_list_non_exhaustive() && !adt.did.is_local() && !etc {\n-            struct_span_err!(\n-                tcx.sess,\n-                pat.span,\n-                E0638,\n-                \"`..` required with {} marked as non-exhaustive\",\n-                kind_name\n-            )\n-            .emit();\n+            self.error_foreign_non_exhaustive_spat(pat, adt.variant_descr(), fields.is_empty());\n         }\n \n         // Report an error if incorrect number of the fields were specified.\n-        if kind_name == \"union\" {\n+        if adt.is_union() {\n             if fields.len() != 1 {\n                 tcx.sess\n                     .struct_span_err(pat.span, \"union patterns should have exactly one field\")\n@@ -1109,6 +1101,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         no_field_errors\n     }\n \n+    fn error_foreign_non_exhaustive_spat(&self, pat: &Pat<'_>, descr: &str, no_fields: bool) {\n+        let sess = self.tcx.sess;\n+        let sm = sess.source_map();\n+        let sp_brace = sm.end_point(pat.span);\n+        let sp_comma = sm.end_point(pat.span.with_hi(sp_brace.hi()));\n+        let sugg = if no_fields || sp_brace != sp_comma { \".. }\" } else { \", .. }\" };\n+\n+        let mut err = struct_span_err!(\n+            sess,\n+            pat.span,\n+            E0638,\n+            \"`..` required with {} marked as non-exhaustive\",\n+            descr\n+        );\n+        err.span_suggestion_verbose(\n+            sp_comma,\n+            \"add `..` at the end of the field list to ignore all other fields\",\n+            sugg.to_string(),\n+            Applicability::MachineApplicable,\n+        );\n+        err.emit();\n+    }\n+\n     fn error_field_already_bound(&self, span: Span, ident: ast::Ident, other_field: Span) {\n         struct_span_err!(\n             self.tcx.sess,"}, {"sha": "3bc38830537cf2cab5850de81588d1b022192175", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ca7dfb1cfad71598992af03f9582200531446ee6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca7dfb1cfad71598992af03f9582200531446ee6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=ca7dfb1cfad71598992af03f9582200531446ee6", "patch": "@@ -62,18 +62,33 @@ error[E0638]: `..` required with struct marked as non-exhaustive\n    |\n LL |     let NormalStruct { first_field, second_field } = ns;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: add `..` at the end of the field list to ignore all other fields\n+   |\n+LL |     let NormalStruct { first_field, second_field , .. } = ns;\n+   |                                                  ^^^^^^\n \n error[E0638]: `..` required with struct marked as non-exhaustive\n   --> $DIR/struct.rs:26:9\n    |\n LL |     let TupleStruct { 0: first_field, 1: second_field } = ts;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: add `..` at the end of the field list to ignore all other fields\n+   |\n+LL |     let TupleStruct { 0: first_field, 1: second_field , .. } = ts;\n+   |                                                       ^^^^^^\n \n error[E0638]: `..` required with struct marked as non-exhaustive\n   --> $DIR/struct.rs:35:9\n    |\n LL |     let UnitStruct { } = us;\n    |         ^^^^^^^^^^^^^^\n+   |\n+help: add `..` at the end of the field list to ignore all other fields\n+   |\n+LL |     let UnitStruct { .. } = us;\n+   |                      ^^^^\n \n error: aborting due to 9 previous errors\n "}, {"sha": "fbdbb0c9930a6a6d1ed89f91b3883289c62afa85", "filename": "src/test/ui/rfc-2008-non-exhaustive/variant.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca7dfb1cfad71598992af03f9582200531446ee6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca7dfb1cfad71598992af03f9582200531446ee6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr?ref=ca7dfb1cfad71598992af03f9582200531446ee6", "patch": "@@ -69,12 +69,22 @@ error[E0638]: `..` required with variant marked as non-exhaustive\n    |\n LL |         NonExhaustiveVariants::Struct { field } => \"\"\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: add `..` at the end of the field list to ignore all other fields\n+   |\n+LL |         NonExhaustiveVariants::Struct { field , .. } => \"\"\n+   |                                               ^^^^^^\n \n error[E0638]: `..` required with variant marked as non-exhaustive\n   --> $DIR/variant.rs:30:12\n    |\n LL |     if let NonExhaustiveVariants::Struct { field } = variant_struct {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: add `..` at the end of the field list to ignore all other fields\n+   |\n+LL |     if let NonExhaustiveVariants::Struct { field , .. } = variant_struct {\n+   |                                                  ^^^^^^\n \n error: aborting due to 8 previous errors\n "}]}