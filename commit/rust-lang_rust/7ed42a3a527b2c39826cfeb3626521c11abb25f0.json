{"sha": "7ed42a3a527b2c39826cfeb3626521c11abb25f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZDQyYTNhNTI3YjJjMzk4MjZjZmViMzYyNjUyMWMxMWFiYjI1ZjA=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-04-17T15:38:38Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-04-17T15:38:45Z"}, "message": "hir_def: refactor expand_macro_type and cleanups", "tree": {"sha": "81c956d98c4990b0555540ad9cc1c94efa68deac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81c956d98c4990b0555540ad9cc1c94efa68deac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ed42a3a527b2c39826cfeb3626521c11abb25f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ed42a3a527b2c39826cfeb3626521c11abb25f0", "html_url": "https://github.com/rust-lang/rust/commit/7ed42a3a527b2c39826cfeb3626521c11abb25f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ed42a3a527b2c39826cfeb3626521c11abb25f0/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14918a3870d568778473f0a5697a547b85acf20a", "url": "https://api.github.com/repos/rust-lang/rust/commits/14918a3870d568778473f0a5697a547b85acf20a", "html_url": "https://github.com/rust-lang/rust/commit/14918a3870d568778473f0a5697a547b85acf20a"}], "stats": {"total": 156, "additions": 33, "deletions": 123}, "files": [{"sha": "8a9b936ea40474b446e4e523222e4c8a735fd2d0", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 16, "deletions": 56, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7ed42a3a527b2c39826cfeb3626521c11abb25f0/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed42a3a527b2c39826cfeb3626521c11abb25f0/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=7ed42a3a527b2c39826cfeb3626521c11abb25f0", "patch": "@@ -19,7 +19,7 @@ use hir_expand::{\n use la_arena::{Arena, ArenaMap};\n use profile::Count;\n use rustc_hash::FxHashMap;\n-use syntax::{ast, AstNode, AstPtr, SyntaxNode};\n+use syntax::{ast, AstNode, AstPtr};\n \n pub use lower::LowerCtx;\n \n@@ -98,14 +98,11 @@ impl Expander {\n         }\n     }\n \n-    fn enter_expand_intern(\n+    pub(crate) fn enter_expand<T: ast::AstNode>(\n         &mut self,\n         db: &dyn DefDatabase,\n         macro_call: ast::MacroCall,\n-    ) -> Result<\n-        ExpandResult<Option<(SyntaxNode, impl FnMut(&dyn DefDatabase) -> Mark + '_)>>,\n-        UnresolvedMacro,\n-    > {\n+    ) -> Result<ExpandResult<Option<(Mark, T)>>, UnresolvedMacro> {\n         if self.recursion_limit + 1 > EXPANSION_RECURSION_LIMIT {\n             cov_mark::hit!(your_stack_belongs_to_me);\n             return Ok(ExpandResult::str_err(\n@@ -150,55 +147,6 @@ impl Expander {\n             }\n         };\n \n-        let this = self;\n-\n-        let advance_state = move |db: &dyn DefDatabase| {\n-            this.recursion_limit += 1;\n-            let mark = Mark {\n-                file_id: this.current_file_id,\n-                ast_id_map: mem::take(&mut this.ast_id_map),\n-                bomb: DropBomb::new(\"expansion mark dropped\"),\n-            };\n-            this.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n-            this.current_file_id = file_id;\n-            this.ast_id_map = db.ast_id_map(file_id);\n-            mark\n-        };\n-\n-        Ok(ExpandResult { value: Some((raw_node, advance_state)), err })\n-    }\n-\n-    pub(crate) fn enter_expand_raw(\n-        &mut self,\n-        db: &dyn DefDatabase,\n-        macro_call: ast::MacroCall,\n-    ) -> Result<ExpandResult<Option<(Mark, SyntaxNode)>>, UnresolvedMacro> {\n-        let (raw_node, mut advance_state, err) = match self.enter_expand_intern(db, macro_call)? {\n-            ExpandResult { value: Some((raw_node, advance_state)), err } => {\n-                (raw_node, advance_state, err)\n-            }\n-            ExpandResult { value: None, err } => return Ok(ExpandResult { value: None, err }),\n-        };\n-\n-        log::debug!(\"macro expansion {:#?}\", raw_node);\n-\n-        let mark = advance_state(db);\n-\n-        Ok(ExpandResult { value: Some((mark, raw_node)), err })\n-    }\n-\n-    pub(crate) fn enter_expand<T: ast::AstNode>(\n-        &mut self,\n-        db: &dyn DefDatabase,\n-        macro_call: ast::MacroCall,\n-    ) -> Result<ExpandResult<Option<(Mark, T)>>, UnresolvedMacro> {\n-        let (raw_node, mut advance_state, err) = match self.enter_expand_intern(db, macro_call)? {\n-            ExpandResult { value: Some((raw_node, advance_state)), err } => {\n-                (raw_node, advance_state, err)\n-            }\n-            ExpandResult { value: None, err } => return Ok(ExpandResult { value: None, err }),\n-        };\n-\n         let node = match T::cast(raw_node) {\n             Some(it) => it,\n             None => {\n@@ -209,7 +157,15 @@ impl Expander {\n \n         log::debug!(\"macro expansion {:#?}\", node.syntax());\n \n-        let mark = advance_state(db);\n+        self.recursion_limit += 1;\n+        let mark = Mark {\n+            file_id: self.current_file_id,\n+            ast_id_map: mem::take(&mut self.ast_id_map),\n+            bomb: DropBomb::new(\"expansion mark dropped\"),\n+        };\n+        self.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n+        self.current_file_id = file_id;\n+        self.ast_id_map = db.ast_id_map(file_id);\n \n         Ok(ExpandResult { value: Some((mark, node)), err })\n     }\n@@ -234,6 +190,10 @@ impl Expander {\n         &self.cfg_expander.cfg_options\n     }\n \n+    pub(crate) fn current_file_id(&self) -> HirFileId {\n+        self.current_file_id\n+    }\n+\n     fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n         let ctx = LowerCtx::with_hygiene(&self.cfg_expander.hygiene);\n         Path::from_src(path, &ctx)"}, {"sha": "cf8a584ab67732bc14f873f12ca3268b5670984a", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 14, "deletions": 64, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7ed42a3a527b2c39826cfeb3626521c11abb25f0/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed42a3a527b2c39826cfeb3626521c11abb25f0/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=7ed42a3a527b2c39826cfeb3626521c11abb25f0", "patch": "@@ -1,9 +1,8 @@\n //! HIR for references to types. Paths in these are not yet resolved. They can\n //! be directly created from an ast::TypeRef, without further queries.\n-use std::borrow::Cow;\n \n use hir_expand::{ast_id_map::FileAstId, name::Name, ExpandResult, InFile};\n-use syntax::{algo::SyntaxRewriter, ast, AstNode, SyntaxKind, SyntaxNode};\n+use syntax::ast;\n \n use crate::{\n     body::{Expander, LowerCtx},\n@@ -207,16 +206,6 @@ impl TypeRef {\n         TypeRef::Tuple(Vec::new())\n     }\n \n-    pub fn has_macro_calls(&self) -> bool {\n-        let mut has_macro_call = false;\n-        self.walk(&mut |ty_ref| {\n-            if let TypeRef::Macro(_) = ty_ref {\n-                has_macro_call |= true\n-            }\n-        });\n-        has_macro_call\n-    }\n-\n     pub fn walk(&self, f: &mut impl FnMut(&TypeRef)) {\n         go(self, f);\n \n@@ -315,68 +304,29 @@ impl TypeBound {\n     }\n }\n \n-pub fn expand_type_ref<'a>(\n+pub fn expand_macro_type(\n     db: &dyn DefDatabase,\n     module_id: ModuleId,\n-    type_ref: &'a TypeRef,\n-) -> Option<Cow<'a, TypeRef>> {\n-    let macro_call = match type_ref {\n+    macro_type: &TypeRef,\n+) -> Option<TypeRef> {\n+    let macro_call = match macro_type {\n         TypeRef::Macro(macro_call) => macro_call,\n-        _ => return Some(Cow::Borrowed(type_ref)),\n+        _ => panic!(\"expected TypeRef::Macro\"),\n     };\n \n     let file_id = macro_call.file_id;\n     let macro_call = macro_call.to_node(db.upcast());\n \n     let mut expander = Expander::new(db, file_id, module_id);\n-    let expanded = expand(db, &mut expander, &macro_call, true)?;\n-\n-    let node = ast::Type::cast(expanded)?;\n-\n-    let ctx = LowerCtx::new(db, file_id);\n-    return Some(Cow::Owned(TypeRef::from_ast(&ctx, node)));\n-\n-    fn expand(\n-        db: &dyn DefDatabase,\n-        expander: &mut Expander,\n-        macro_call: &ast::MacroCall,\n-        expect_type: bool,\n-    ) -> Option<SyntaxNode> {\n-        let (mark, mut expanded) = match expander.enter_expand_raw(db, macro_call.clone()) {\n-            Ok(ExpandResult { value: Some((mark, expanded)), .. }) => (mark, expanded),\n-            _ => return None,\n-        };\n-\n-        if expect_type && !ast::Type::can_cast(expanded.kind()) {\n+    let (file_id, expanded) = match expander.enter_expand::<ast::Type>(db, macro_call.clone()) {\n+        Ok(ExpandResult { value: Some((mark, expanded)), .. }) => {\n+            let file_id = expander.current_file_id();\n             expander.exit(db, mark);\n-            return None;\n-        }\n-\n-        if ast::MacroType::can_cast(expanded.kind()) {\n-            expanded = expanded.first_child()?; // MACRO_CALL\n+            (file_id, expanded)\n         }\n+        _ => return None,\n+    };\n \n-        let mut rewriter = SyntaxRewriter::default();\n-\n-        let children = expanded.descendants().filter_map(ast::MacroCall::cast);\n-        for child in children {\n-            if let Some(new_node) = expand(db, expander, &child, false) {\n-                if expanded == *child.syntax() {\n-                    expanded = new_node;\n-                } else {\n-                    let parent = child.syntax().parent();\n-                    let old_node = match &parent {\n-                        Some(node) if node.kind() == SyntaxKind::MACRO_TYPE => node,\n-                        _ => child.syntax(),\n-                    };\n-                    rewriter.replace(old_node, &new_node)\n-                }\n-            }\n-        }\n-\n-        expander.exit(db, mark);\n-\n-        let res = rewriter.rewrite(&expanded);\n-        Some(res)\n-    }\n+    let ctx = LowerCtx::new(db, file_id);\n+    return Some(TypeRef::from_ast(&ctx, expanded));\n }"}, {"sha": "e01b7aa91906d25461e1ea9eabc6f4c021e6e343", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ed42a3a527b2c39826cfeb3626521c11abb25f0/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed42a3a527b2c39826cfeb3626521c11abb25f0/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=7ed42a3a527b2c39826cfeb3626521c11abb25f0", "patch": "@@ -15,7 +15,7 @@ use hir_def::{\n     generics::{TypeParamProvenance, WherePredicate, WherePredicateTypeTarget},\n     path::{GenericArg, Path, PathSegment, PathSegments},\n     resolver::{HasResolver, Resolver, TypeNs},\n-    type_ref::{expand_type_ref, TraitRef as HirTraitRef, TypeBound, TypeRef},\n+    type_ref::{expand_macro_type, TraitRef as HirTraitRef, TypeBound, TypeRef},\n     AdtId, AssocContainerId, AssocItemId, ConstId, ConstParamId, EnumId, EnumVariantId, FunctionId,\n     GenericDefId, HasModule, ImplId, LocalFieldId, Lookup, StaticId, StructId, TraitId,\n     TypeAliasId, TypeParamId, UnionId, VariantId,\n@@ -289,8 +289,8 @@ impl<'a> TyLoweringContext<'a> {\n             }\n             mt @ TypeRef::Macro(_) => {\n                 if let Some(module_id) = self.resolver.module() {\n-                    match expand_type_ref(self.db.upcast(), module_id, mt) {\n-                        Some(type_ref) => self.lower_ty(type_ref.as_ref()),\n+                    match expand_macro_type(self.db.upcast(), module_id, mt) {\n+                        Some(type_ref) => self.lower_ty(&type_ref),\n                         None => TyKind::Error.intern(&Interner),\n                     }\n                 } else {"}]}