{"sha": "d09f6923009943cee1b24571c2905c3c0bfb49c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOWY2OTIzMDA5OTQzY2VlMWIyNDU3MWMyOTA1YzNjMGJmYjQ5Yzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-03T17:14:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-03T17:32:18Z"}, "message": "Add AssistKind::Generate", "tree": {"sha": "3e2e02e862af35b6e0e6f859eb22c1b32938d958", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e2e02e862af35b6e0e6f859eb22c1b32938d958"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d09f6923009943cee1b24571c2905c3c0bfb49c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d09f6923009943cee1b24571c2905c3c0bfb49c7", "html_url": "https://github.com/rust-lang/rust/commit/d09f6923009943cee1b24571c2905c3c0bfb49c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d09f6923009943cee1b24571c2905c3c0bfb49c7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66b6a433c6243b8be72bbd04a40d0a38cedb11b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/66b6a433c6243b8be72bbd04a40d0a38cedb11b4", "html_url": "https://github.com/rust-lang/rust/commit/66b6a433c6243b8be72bbd04a40d0a38cedb11b4"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "6ccf39900baddb2533a5550856f742ddcc99cc11", "filename": "crates/ra_assists/src/handlers/generate_derive.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs?ref=d09f6923009943cee1b24571c2905c3c0bfb49c7", "patch": "@@ -29,27 +29,32 @@ pub(crate) fn generate_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     let target = nominal.syntax().text_range();\n-    acc.add(AssistId(\"generate_derive\", AssistKind::None), \"Add `#[derive]`\", target, |builder| {\n-        let derive_attr = nominal\n-            .attrs()\n-            .filter_map(|x| x.as_simple_call())\n-            .filter(|(name, _arg)| name == \"derive\")\n-            .map(|(_name, arg)| arg)\n-            .next();\n-        match derive_attr {\n-            None => {\n-                builder.insert_snippet(cap, node_start, \"#[derive($0)]\\n\");\n-            }\n-            Some(tt) => {\n-                // Just move the cursor.\n-                builder.insert_snippet(\n-                    cap,\n-                    tt.syntax().text_range().end() - TextSize::of(')'),\n-                    \"$0\",\n-                )\n-            }\n-        };\n-    })\n+    acc.add(\n+        AssistId(\"generate_derive\", AssistKind::Generate),\n+        \"Add `#[derive]`\",\n+        target,\n+        |builder| {\n+            let derive_attr = nominal\n+                .attrs()\n+                .filter_map(|x| x.as_simple_call())\n+                .filter(|(name, _arg)| name == \"derive\")\n+                .map(|(_name, arg)| arg)\n+                .next();\n+            match derive_attr {\n+                None => {\n+                    builder.insert_snippet(cap, node_start, \"#[derive($0)]\\n\");\n+                }\n+                Some(tt) => {\n+                    // Just move the cursor.\n+                    builder.insert_snippet(\n+                        cap,\n+                        tt.syntax().text_range().end() - TextSize::of(')'),\n+                        \"$0\",\n+                    )\n+                }\n+            };\n+        },\n+    )\n }\n \n // Insert `derive` after doc comments."}, {"sha": "a347e3c2efef08a3d749964034c76f2ff7da0340", "filename": "crates/ra_assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=d09f6923009943cee1b24571c2905c3c0bfb49c7", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext\n \n     let target = variant.syntax().text_range();\n     acc.add(\n-        AssistId(\"generate_from_impl_for_enum\", AssistKind::Refactor),\n+        AssistId(\"generate_from_impl_for_enum\", AssistKind::Generate),\n         \"Generate `From` impl for this enum variant\",\n         target,\n         |edit| {"}, {"sha": "b721b96bbb9de64f138eeefa067c6b9e6a358174", "filename": "crates/ra_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=d09f6923009943cee1b24571c2905c3c0bfb49c7", "patch": "@@ -63,7 +63,7 @@ pub(crate) fn generate_function(acc: &mut Assists, ctx: &AssistContext) -> Optio\n \n     let target = call.syntax().text_range();\n     acc.add(\n-        AssistId(\"generate_function\", AssistKind::None),\n+        AssistId(\"generate_function\", AssistKind::Generate),\n         format!(\"Generate `{}` function\", function_builder.fn_name),\n         target,\n         |builder| {"}, {"sha": "cbbac1d7ff14edc07732547cf9594147fa05013a", "filename": "crates/ra_assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=d09f6923009943cee1b24571c2905c3c0bfb49c7", "patch": "@@ -27,7 +27,7 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     let name = nominal.name()?;\n     let target = nominal.syntax().text_range();\n     acc.add(\n-        AssistId(\"generate_impl\", AssistKind::Refactor),\n+        AssistId(\"generate_impl\", AssistKind::Generate),\n         format!(\"Generate impl for `{}`\", name),\n         target,\n         |edit| {"}, {"sha": "e27def1d8ab66af12b7134ea0af54dd9c886924a", "filename": "crates/ra_assists/src/handlers/generate_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=d09f6923009943cee1b24571c2905c3c0bfb49c7", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let impl_def = find_struct_impl(&ctx, &strukt)?;\n \n     let target = strukt.syntax().text_range();\n-    acc.add(AssistId(\"generate_new\", AssistKind::None), \"Generate `new`\", target, |builder| {\n+    acc.add(AssistId(\"generate_new\", AssistKind::Generate), \"Generate `new`\", target, |builder| {\n         let mut buf = String::with_capacity(512);\n \n         if impl_def.is_some() {"}, {"sha": "3d61fbdedf762a324073282fff3b720a66b65ff0", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=d09f6923009943cee1b24571c2905c3c0bfb49c7", "patch": "@@ -30,6 +30,7 @@ pub use assist_config::AssistConfig;\n pub enum AssistKind {\n     None,\n     QuickFix,\n+    Generate,\n     Refactor,\n     RefactorExtract,\n     RefactorInline,"}, {"sha": "83c9ac35c897ee777b14cc68c29cb895247c930a", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f6923009943cee1b24571c2905c3c0bfb49c7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=d09f6923009943cee1b24571c2905c3c0bfb49c7", "patch": "@@ -629,7 +629,7 @@ pub(crate) fn call_hierarchy_item(\n \n pub(crate) fn code_action_kind(kind: AssistKind) -> String {\n     match kind {\n-        AssistKind::None => lsp_types::code_action_kind::EMPTY,\n+        AssistKind::None | AssistKind::Generate => lsp_types::code_action_kind::EMPTY,\n         AssistKind::QuickFix => lsp_types::code_action_kind::QUICKFIX,\n         AssistKind::Refactor => lsp_types::code_action_kind::REFACTOR,\n         AssistKind::RefactorExtract => lsp_types::code_action_kind::REFACTOR_EXTRACT,"}]}