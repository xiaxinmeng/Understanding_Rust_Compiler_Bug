{"sha": "3e25e628a152bb78cd42b0b81852a63d6e0ab204", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMjVlNjI4YTE1MmJiNzhjZDQyYjBiODE4NTJhNjNkNmUwYWIyMDQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-06-04T03:26:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-04T03:26:26Z"}, "message": "Merge pull request #1619 from topecongiro/config/format_if_else_cond_comment\n\nAdd format_if_else_cond_comment config option", "tree": {"sha": "df7056866d39448e6200b806157630b68e5c1423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df7056866d39448e6200b806157630b68e5c1423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e25e628a152bb78cd42b0b81852a63d6e0ab204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e25e628a152bb78cd42b0b81852a63d6e0ab204", "html_url": "https://github.com/rust-lang/rust/commit/3e25e628a152bb78cd42b0b81852a63d6e0ab204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e25e628a152bb78cd42b0b81852a63d6e0ab204/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f1cb950d6fc91cf2938fc4aea300ed12d49b735", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1cb950d6fc91cf2938fc4aea300ed12d49b735", "html_url": "https://github.com/rust-lang/rust/commit/6f1cb950d6fc91cf2938fc4aea300ed12d49b735"}, {"sha": "aadd3e11f40e41753c52781d73aa9b228461a303", "url": "https://api.github.com/repos/rust-lang/rust/commits/aadd3e11f40e41753c52781d73aa9b228461a303", "html_url": "https://github.com/rust-lang/rust/commit/aadd3e11f40e41753c52781d73aa9b228461a303"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "16dfe6fcaa62a72c978968e47cb1e375b31d22b3", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e25e628a152bb78cd42b0b81852a63d6e0ab204/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e25e628a152bb78cd42b0b81852a63d6e0ab204/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=3e25e628a152bb78cd42b0b81852a63d6e0ab204", "patch": "@@ -666,6 +666,7 @@ impl Rewrite for ast::Block {\n \n         let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config);\n         visitor.block_indent = shape.indent;\n+        visitor.is_if_else_block = context.is_if_else_block;\n \n         let prefix = match self.rules {\n             ast::BlockCheckMode::Unsafe(..) => {\n@@ -965,7 +966,10 @@ impl<'a> Rewrite for ControlFlow<'a> {\n             width: block_width,\n             ..shape\n         };\n-        let block_str = try_opt!(self.block.rewrite(context, block_shape));\n+        let mut block_context = context.clone();\n+        block_context.is_if_else_block = self.else_block.is_some();\n+\n+        let block_str = try_opt!(self.block.rewrite(&block_context, block_shape));\n \n         let cond_span = if let Some(cond) = self.cond {\n             cond.span"}, {"sha": "9713871880e39c4905b628abb7c281917e628c3f", "filename": "src/rewrite.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e25e628a152bb78cd42b0b81852a63d6e0ab204/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e25e628a152bb78cd42b0b81852a63d6e0ab204/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=3e25e628a152bb78cd42b0b81852a63d6e0ab204", "patch": "@@ -27,7 +27,11 @@ pub struct RewriteContext<'a> {\n     pub codemap: &'a CodeMap,\n     pub config: &'a Config,\n     pub inside_macro: bool,\n+    // Force block indent style even if we are using visual indent style.\n     pub use_block: bool,\n+    // When `format_if_else_cond_comment` is true, unindent the comment on top\n+    // of the `else` or `else if`.\n+    pub is_if_else_block: bool,\n }\n \n impl<'a> RewriteContext<'a> {"}, {"sha": "33e9812ee1fb7ee3ea4aa4cf642fcb54da93dc4d", "filename": "src/visitor.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3e25e628a152bb78cd42b0b81852a63d6e0ab204/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e25e628a152bb78cd42b0b81852a63d6e0ab204/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=3e25e628a152bb78cd42b0b81852a63d6e0ab204", "patch": "@@ -56,6 +56,7 @@ pub struct FmtVisitor<'a> {\n     pub block_indent: Indent,\n     pub config: &'a Config,\n     pub failed: bool,\n+    pub is_if_else_block: bool,\n }\n \n impl<'a> FmtVisitor<'a> {\n@@ -117,19 +118,34 @@ impl<'a> FmtVisitor<'a> {\n             }\n         }\n \n+        let mut unindent_comment = self.is_if_else_block && !b.stmts.is_empty();\n+        if unindent_comment {\n+            let end_pos = source!(self, b.span).hi - brace_compensation;\n+            let snippet = self.get_context()\n+                .snippet(codemap::mk_sp(self.last_pos, end_pos));\n+            unindent_comment = snippet.contains(\"//\") || snippet.contains(\"/*\");\n+        }\n         // FIXME: we should compress any newlines here to just one\n+        if unindent_comment {\n+            self.block_indent = self.block_indent.block_unindent(self.config);\n+        }\n         self.format_missing_with_indent(source!(self, b.span).hi - brace_compensation);\n-        self.close_block();\n+        if unindent_comment {\n+            self.block_indent = self.block_indent.block_indent(self.config);\n+        }\n+        self.close_block(unindent_comment);\n         self.last_pos = source!(self, b.span).hi;\n     }\n \n     // FIXME: this is a terrible hack to indent the comments between the last\n     // item in the block and the closing brace to the block's level.\n     // The closing brace itself, however, should be indented at a shallower\n     // level.\n-    fn close_block(&mut self) {\n+    fn close_block(&mut self, unindent_comment: bool) {\n         let total_len = self.buffer.len;\n-        let chars_too_many = if self.config.hard_tabs() {\n+        let chars_too_many = if unindent_comment {\n+            0\n+        } else if self.config.hard_tabs() {\n             1\n         } else {\n             self.config.tab_spaces()\n@@ -484,6 +500,7 @@ impl<'a> FmtVisitor<'a> {\n             block_indent: Indent::empty(),\n             config: config,\n             failed: false,\n+            is_if_else_block: false,\n         }\n     }\n \n@@ -587,7 +604,7 @@ impl<'a> FmtVisitor<'a> {\n                 self.block_indent = self.block_indent.block_indent(self.config);\n                 self.walk_mod_items(m);\n                 self.format_missing_with_indent(source!(self, m.inner).hi - BytePos(1));\n-                self.close_block();\n+                self.close_block(false);\n             }\n             self.last_pos = source!(self, m.inner).hi;\n         } else {\n@@ -611,6 +628,7 @@ impl<'a> FmtVisitor<'a> {\n             config: self.config,\n             inside_macro: false,\n             use_block: false,\n+            is_if_else_block: false,\n         }\n     }\n }"}, {"sha": "98621b1eed150f437766f4afd4eaee867adbbaf5", "filename": "tests/target/unindent_if_else_cond_comment.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3e25e628a152bb78cd42b0b81852a63d6e0ab204/tests%2Ftarget%2Funindent_if_else_cond_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e25e628a152bb78cd42b0b81852a63d6e0ab204/tests%2Ftarget%2Funindent_if_else_cond_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Funindent_if_else_cond_comment.rs?ref=3e25e628a152bb78cd42b0b81852a63d6e0ab204", "patch": "@@ -0,0 +1,27 @@\n+// Comments on else block. See #1575.\n+\n+fn example() {\n+    // `if` comment\n+    if x {\n+        foo();\n+    // `else if` comment\n+    } else if y {\n+        foo();\n+    // Comment on `else if`.\n+    // Comment on `else if`.\n+    } else if z {\n+        bar();\n+    /*\n+     *  Multi line comment on `else if`\n+     */\n+    } else if xx {\n+        bar();\n+    /* Single line comment on `else if` */\n+    } else if yy {\n+        foo();\n+    // `else` comment\n+    } else {\n+        foo();\n+        // Comment at the end of `else` block\n+    };\n+}"}]}