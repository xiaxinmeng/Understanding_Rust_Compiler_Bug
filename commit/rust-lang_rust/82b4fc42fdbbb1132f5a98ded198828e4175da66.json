{"sha": "82b4fc42fdbbb1132f5a98ded198828e4175da66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYjRmYzQyZmRiYmIxMTMyZjVhOThkZWQxOTg4MjhlNDE3NWRhNjY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-23T22:06:04Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-23T22:06:04Z"}, "message": "small select cleanup", "tree": {"sha": "5a25673408d3ac958fc20134756377845980634d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a25673408d3ac958fc20134756377845980634d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82b4fc42fdbbb1132f5a98ded198828e4175da66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82b4fc42fdbbb1132f5a98ded198828e4175da66", "html_url": "https://github.com/rust-lang/rust/commit/82b4fc42fdbbb1132f5a98ded198828e4175da66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82b4fc42fdbbb1132f5a98ded198828e4175da66/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b0a68f35a06fc7aed8aa95831df8eace4afffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b0a68f35a06fc7aed8aa95831df8eace4afffb", "html_url": "https://github.com/rust-lang/rust/commit/75b0a68f35a06fc7aed8aa95831df8eace4afffb"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "9b3381066a17b6f4ca8357f7141968963f6602a3", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/82b4fc42fdbbb1132f5a98ded198828e4175da66/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b4fc42fdbbb1132f5a98ded198828e4175da66/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=82b4fc42fdbbb1132f5a98ded198828e4175da66", "patch": "@@ -1058,20 +1058,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // Heuristics: show the diagnostics when there are no candidates in crate.\n                 if let Ok(candidate_set) = self.assemble_candidates(stack) {\n                     let mut no_candidates_apply = true;\n-                    {\n-                        let evaluated_candidates =\n-                            candidate_set.vec.iter().map(|c| self.evaluate_candidate(stack, &c));\n-\n-                        for ec in evaluated_candidates {\n-                            match ec {\n-                                Ok(c) => {\n-                                    if c.may_apply() {\n-                                        no_candidates_apply = false;\n-                                        break;\n-                                    }\n-                                }\n-                                Err(e) => return Err(e.into()),\n-                            }\n+\n+                    for c in candidate_set.vec.iter() {\n+                        if self.evaluate_candidate(stack, &c)?.may_apply() {\n+                            no_candidates_apply = false;\n+                            break;\n                         }\n                     }\n \n@@ -3182,11 +3173,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 assert_eq!(tys_a.len(), tys_b.len());\n \n                 // The last field of the tuple has to exist.\n-                let (&a_last, a_mid) = if let Some(x) = tys_a.split_last() {\n-                    x\n-                } else {\n-                    return Err(Unimplemented);\n-                };\n+                let (&a_last, a_mid) = tys_a.split_last().ok_or(Unimplemented)?;\n                 let &b_last = tys_b.last().unwrap();\n \n                 // Check that the source tuple with the target's"}]}