{"sha": "83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "node_id": "C_kwDOAAsO6NoAKDgzNDYwZDVlNjI0ZTlkZmY3MmVhOGM4ZjZlNzljMTBhZjEwYTNhYTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-15T16:26:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-15T16:26:10Z"}, "message": "Auto merge of #94966 - matthiaskrgr:rollup-iqzswh3, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #94810 (debuginfo: Fix bug in type name generation for dyn types with associated types but no other generic arguments.)\n - #94947 (fix typos)\n - #94956 (Fix small typo in FIXME)\n - #94958 (Support other types of pluralization in pluralize macro)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f2d074688426dbc31be510967d35521632a7346d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2d074688426dbc31be510967d35521632a7346d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "html_url": "https://github.com/rust-lang/rust/commit/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be52b4af5ec7e49572cb16519b7e144d6bcb051d", "url": "https://api.github.com/repos/rust-lang/rust/commits/be52b4af5ec7e49572cb16519b7e144d6bcb051d", "html_url": "https://github.com/rust-lang/rust/commit/be52b4af5ec7e49572cb16519b7e144d6bcb051d"}, {"sha": "183262d8d3e2af06f07c5d601b71f407846a267b", "url": "https://api.github.com/repos/rust-lang/rust/commits/183262d8d3e2af06f07c5d601b71f407846a267b", "html_url": "https://github.com/rust-lang/rust/commit/183262d8d3e2af06f07c5d601b71f407846a267b"}], "stats": {"total": 130, "additions": 78, "deletions": 52}, "files": [{"sha": "4b1563ca3c97fe3821a8d172fcd907ec7613618f", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -226,13 +226,18 @@ fn push_debuginfo_type_name<'tcx>(\n                 if projection_bounds.len() != 0 {\n                     if principal_has_generic_params {\n                         // push_generic_params_internal() above added a `>` but we actually\n-                        // want to add more items to that list, so remove that again.\n+                        // want to add more items to that list, so remove that again...\n                         pop_close_angle_bracket(output);\n+                        // .. and add a comma to separate the regular generic args from the\n+                        // associated types.\n+                        push_arg_separator(cpp_like_debuginfo, output);\n+                    } else {\n+                        // push_generic_params_internal() did not add `<...>`, so we open\n+                        // angle brackets here.\n+                        output.push('<');\n                     }\n \n                     for (item_def_id, ty) in projection_bounds {\n-                        push_arg_separator(cpp_like_debuginfo, output);\n-\n                         if cpp_like_debuginfo {\n                             output.push_str(\"assoc$<\");\n                             push_item_name(tcx, item_def_id, false, output);\n@@ -244,8 +249,10 @@ fn push_debuginfo_type_name<'tcx>(\n                             output.push('=');\n                             push_debuginfo_type_name(tcx, ty, true, output, visited);\n                         }\n+                        push_arg_separator(cpp_like_debuginfo, output);\n                     }\n \n+                    pop_arg_separator(output);\n                     push_close_angle_bracket(cpp_like_debuginfo, output);\n                 }\n "}, {"sha": "f1b51da05822e4df7ceb34620c49b28247d2c72f", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -656,7 +656,7 @@ impl<T: Idx> BitRelations<HybridBitSet<T>> for ChunkedBitSet<T> {\n     fn union(&mut self, other: &HybridBitSet<T>) -> bool {\n         // FIXME: This is slow if `other` is dense, but it hasn't been a problem\n         // in practice so far.\n-        // If a a faster implementation of this operation is required, consider\n+        // If a faster implementation of this operation is required, consider\n         // reopening https://github.com/rust-lang/rust/pull/94625\n         assert_eq!(self.domain_size, other.domain_size());\n         sequential_update(|elem| self.insert(elem), other.iter())\n@@ -665,7 +665,7 @@ impl<T: Idx> BitRelations<HybridBitSet<T>> for ChunkedBitSet<T> {\n     fn subtract(&mut self, other: &HybridBitSet<T>) -> bool {\n         // FIXME: This is slow if `other` is dense, but it hasn't been a problem\n         // in practice so far.\n-        // If a a faster implementation of this operation is required, consider\n+        // If a faster implementation of this operation is required, consider\n         // reopening https://github.com/rust-lang/rust/pull/94625\n         assert_eq!(self.domain_size, other.domain_size());\n         sequential_update(|elem| self.remove(elem), other.iter())"}, {"sha": "47de4c9be26feb1b726969f6ec6948a7587f90db", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -328,7 +328,7 @@ impl UnsafeCode {\n         cx.struct_span_lint(UNSAFE_CODE, span, decorate);\n     }\n \n-    fn report_overriden_symbol_name(&self, cx: &EarlyContext<'_>, span: Span, msg: &str) {\n+    fn report_overridden_symbol_name(&self, cx: &EarlyContext<'_>, span: Span, msg: &str) {\n         self.report_unsafe(cx, span, |lint| {\n             lint.build(msg)\n                 .note(\n@@ -380,14 +380,14 @@ impl EarlyLintPass for UnsafeCode {\n \n             ast::ItemKind::Fn(..) => {\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n-                    self.report_overriden_symbol_name(\n+                    self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n                         \"declaration of a `no_mangle` function\",\n                     );\n                 }\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n-                    self.report_overriden_symbol_name(\n+                    self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n                         \"declaration of a function with `export_name`\",\n@@ -397,14 +397,14 @@ impl EarlyLintPass for UnsafeCode {\n \n             ast::ItemKind::Static(..) => {\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n-                    self.report_overriden_symbol_name(\n+                    self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n                         \"declaration of a `no_mangle` static\",\n                     );\n                 }\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n-                    self.report_overriden_symbol_name(\n+                    self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n                         \"declaration of a static with `export_name`\",\n@@ -419,14 +419,14 @@ impl EarlyLintPass for UnsafeCode {\n     fn check_impl_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n         if let ast::AssocItemKind::Fn(..) = it.kind {\n             if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n-                self.report_overriden_symbol_name(\n+                self.report_overridden_symbol_name(\n                     cx,\n                     attr.span,\n                     \"declaration of a `no_mangle` method\",\n                 );\n             }\n             if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n-                self.report_overriden_symbol_name(\n+                self.report_overridden_symbol_name(\n                     cx,\n                     attr.span,\n                     \"declaration of a method with `export_name`\","}, {"sha": "0d790e38206084918c7275ee1cddbb5835a0609e", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -116,7 +116,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                 continue\n             };\n             for id in ids {\n-                // ForceWarn and Forbid cannot be overriden\n+                // ForceWarn and Forbid cannot be overridden\n                 if let Some((Level::ForceWarn | Level::Forbid, _)) = self.current_specs().get(&id) {\n                     continue;\n                 }\n@@ -137,7 +137,7 @@ impl<'s> LintLevelsBuilder<'s> {\n             self.sets.get_lint_level(id.lint, self.cur, Some(self.current_specs()), &self.sess);\n         // Setting to a non-forbid level is an error if the lint previously had\n         // a forbid level. Note that this is not necessarily true even with a\n-        // `#[forbid(..)]` attribute present, as that is overriden by `--cap-lints`.\n+        // `#[forbid(..)]` attribute present, as that is overridden by `--cap-lints`.\n         //\n         // This means that this only errors if we're truly lowering the lint\n         // level from forbid."}, {"sha": "f0eb27c90025c3fbed84877762ff5b4d38d749e3", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -20,6 +20,12 @@ macro_rules! pluralize {\n     ($x:expr) => {\n         if $x != 1 { \"s\" } else { \"\" }\n     };\n+    (\"is\", $x:expr) => {\n+        if $x == 1 { \"is\" } else { \"are\" }\n+    };\n+    (\"this\", $x:expr) => {\n+        if $x == 1 { \"this\" } else { \"these\" }\n+    };\n }\n \n /// Indicates the confidence in the correctness of a suggestion."}, {"sha": "dbebed67c2bd1c6d4759e328c0814ddb7a9363ca", "filename": "compiler/rustc_middle/src/mir/generic_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -50,7 +50,7 @@ fn bb_to_graph_node(block: BasicBlock, body: &Body<'_>, dark_mode: bool) -> Node\n     let style = NodeStyle { title_bg: Some(bgcolor.to_owned()), ..Default::default() };\n     let mut stmts: Vec<String> = data.statements.iter().map(|x| format!(\"{:?}\", x)).collect();\n \n-    // add the terminator to the stmts, gsgdt can print it out seperately\n+    // add the terminator to the stmts, gsgdt can print it out separately\n     let mut terminator_head = String::new();\n     data.terminator().kind.fmt_head(&mut terminator_head).unwrap();\n     stmts.push(terminator_head);"}, {"sha": "2c3c61259c473b604587a8a6efb2811fe4440fc2", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -400,7 +400,7 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n                 Pointer::new(*alloc, access.access_offset),\n                 access.uninit_size.bytes(),\n                 pluralize!(access.uninit_size.bytes()),\n-                if access.uninit_size.bytes() != 1 { \"are\" } else { \"is\" },\n+                pluralize!(\"is\", access.uninit_size.bytes()),\n                 Pointer::new(*alloc, access.uninit_offset),\n             ),\n             InvalidUninitBytes(None) => write!("}, {"sha": "00d1370625f9c04786024081c700b1584169e016", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -250,7 +250,7 @@ pub struct BorrowCheckResult<'tcx> {\n \n /// The result of the `mir_const_qualif` query.\n ///\n-/// Each field (except `error_occured`) corresponds to an implementer of the `Qualif` trait in\n+/// Each field (except `error_occurred`) corresponds to an implementer of the `Qualif` trait in\n /// `rustc_const_eval/src/transform/check_consts/qualifs.rs`. See that file for more information on each\n /// `Qualif`.\n #[derive(Clone, Copy, Debug, Default, TyEncodable, TyDecodable, HashStable)]"}, {"sha": "3aad189b222ea7636558b6797c381da8b8d75c68", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -847,7 +847,7 @@ fn foo(&self) -> Self::T { String::new() }\n                 \"{some} method{s} {are} available that return{r} `{ty}`\",\n                 some = if methods.len() == 1 { \"a\" } else { \"some\" },\n                 s = pluralize!(methods.len()),\n-                are = if methods.len() == 1 { \"is\" } else { \"are\" },\n+                are = pluralize!(\"is\", methods.len()),\n                 r = if methods.len() == 1 { \"s\" } else { \"\" },\n                 ty = expected\n             );"}, {"sha": "a96bb4e03d97ae81b5193f00f8cb5d24696f2f43", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -608,7 +608,7 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n \n     let (thir, expr) = tcx.thir_body(def);\n     let thir = &thir.borrow();\n-    // If `thir` is empty, a type error occured, skip this body.\n+    // If `thir` is empty, a type error occurred, skip this body.\n     if thir.exprs.is_empty() {\n         return;\n     }"}, {"sha": "06184b4797255a7f98855ea2269990b5bfc66dad", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -1410,7 +1410,7 @@ impl CheckAttrVisitor<'_> {\n                             span,\n                             format!(\n                                 \"there {} only {} argument{}\",\n-                                if arg_count != 1 { \"are\" } else { \"is\" },\n+                                pluralize!(\"is\", arg_count),\n                                 arg_count,\n                                 pluralize!(arg_count)\n                             ),"}, {"sha": "8dec28c8ae283bef8913b1d496bc401bc73a199b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -504,9 +504,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     for sp in spans {\n                         let msg = if sp == last_bound_span {\n                             format!(\n-                                \"...because of {} bound{}\",\n-                                if bounds.len() <= 2 { \"this\" } else { \"these\" },\n-                                if bounds.len() <= 2 { \"\" } else { \"s\" },\n+                                \"...because of {these} bound{s}\",\n+                                these = pluralize!(\"this\", bounds.len() - 1),\n+                                s = pluralize!(bounds.len() - 1),\n                             )\n                         } else {\n                             String::new()"}, {"sha": "a6506dbad1600fc1ed60f734614f4fbbac114913", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -394,7 +394,7 @@ mod desc {\n     pub const parse_linker_plugin_lto: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), or the path to the linker plugin\";\n     pub const parse_location_detail: &str =\n-        \"comma seperated list of location details to track: `file`, `line`, or `column`\";\n+        \"comma separated list of location details to track: `file`, `line`, or `column`\";\n     pub const parse_switch_with_opt_path: &str =\n         \"an optional path to the profiling data output directory\";\n     pub const parse_merge_functions: &str = \"one of: `disabled`, `trampolines`, or `aliases`\";\n@@ -1283,7 +1283,7 @@ options! {\n     llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],\n         \"generate JSON tracing data file from LLVM data (default: no)\"),\n     location_detail: LocationDetail = (LocationDetail::all(), parse_location_detail, [TRACKED],\n-        \"comma seperated list of location details to be tracked when using caller_location \\\n+        \"comma separated list of location details to be tracked when using caller_location \\\n         valid options are `file`, `line`, and `column` (default: all)\"),\n     ls: bool = (false, parse_bool, [UNTRACKED],\n         \"list the symbols defined by a library crate (default: no)\"),"}, {"sha": "707c609d8bfb85afee7cc5f2040b870826a38a3a", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -69,7 +69,7 @@ pub struct SymbolGallery {\n \n impl SymbolGallery {\n     /// Insert a symbol and its span into symbol gallery.\n-    /// If the symbol has occurred before, ignore the new occurance.\n+    /// If the symbol has occurred before, ignore the new occurrance.\n     pub fn insert(&self, symbol: Symbol, span: Span) {\n         self.symbols.lock().entry(symbol).or_insert(span);\n     }"}, {"sha": "55201d17f714d72c2349fa6adfe5ac74d7b415c8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -369,7 +369,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                         (true, Some(None)) => {\n                                             Some(format!(\"{cannot_do_this} in const contexts\"))\n                                         }\n-                                        // overriden post message\n+                                        // overridden post message\n                                         (true, Some(Some(post_message))) => {\n                                             Some(format!(\"{cannot_do_this}{post_message}\"))\n                                         }"}, {"sha": "c16be38d5fc3d2c5f86a3bf701a8d68cd3ff74a6", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -1761,7 +1761,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             sp,\n             &format!(\n                 \"include the missing field{} in the pattern{}\",\n-                if len == 1 { \"\" } else { \"s\" },\n+                pluralize!(len),\n                 if have_inaccessible_fields { \" and ignore the inaccessible fields\" } else { \"\" }\n             ),\n             format!(\n@@ -1780,10 +1780,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.span_suggestion(\n             sp,\n             &format!(\n-                \"if you don't care about {} missing field{}, you can explicitly ignore {}\",\n-                if len == 1 { \"this\" } else { \"these\" },\n-                if len == 1 { \"\" } else { \"s\" },\n-                if len == 1 { \"it\" } else { \"them\" },\n+                \"if you don't care about {these} missing field{s}, you can explicitly ignore {them}\",\n+                these = pluralize!(\"this\", len),\n+                s = pluralize!(len),\n+                them = if len == 1 { \"it\" } else { \"them\" },\n             ),\n             format!(\"{}..{}\", prefix, postfix),\n             Applicability::MachineApplicable,"}, {"sha": "303ec910a9f09e2b548f35ec6f2b4430acf087c2", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -7,7 +7,7 @@\n //! `tcx.inherent_impls(def_id)`). That value, however,\n //! is computed by selecting an idea from this table.\n \n-use rustc_errors::struct_span_err;\n+use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -410,7 +410,6 @@ impl<'tcx> InherentCollect<'tcx> {\n                 let to_implement = if assoc_items.is_empty() {\n                     String::new()\n                 } else {\n-                    let plural = assoc_items.len() > 1;\n                     let assoc_items_kind = {\n                         let item_types = assoc_items.iter().map(|x| x.kind);\n                         if item_types.clone().all(|x| x == hir::AssocItemKind::Const) {\n@@ -427,9 +426,9 @@ impl<'tcx> InherentCollect<'tcx> {\n \n                     format!(\n                         \" to implement {} {}{}\",\n-                        if plural { \"these\" } else { \"this\" },\n+                        pluralize!(\"this\", assoc_items.len()),\n                         assoc_items_kind,\n-                        if plural { \"s\" } else { \"\" }\n+                        pluralize!(assoc_items.len()),\n                     )\n                 };\n "}, {"sha": "05b57592572a95a4e6c1af59e9937586ad522a50", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -657,10 +657,9 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n             let num_redundant_lt_args = lt_arg_spans.len() - self.num_expected_lifetime_args();\n             let msg_lifetimes = format!(\n-                \"remove {} {} argument{}\",\n-                if num_redundant_lt_args == 1 { \"this\" } else { \"these\" },\n-                \"lifetime\",\n-                pluralize!(num_redundant_lt_args),\n+                \"remove {these} lifetime argument{s}\",\n+                these = pluralize!(\"this\", num_redundant_lt_args),\n+                s = pluralize!(num_redundant_lt_args),\n             );\n \n             err.span_suggestion(\n@@ -700,10 +699,9 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             let num_redundant_gen_args =\n                 gen_arg_spans.len() - self.num_expected_type_or_const_args();\n             let msg_types_or_consts = format!(\n-                \"remove {} {} argument{}\",\n-                if num_redundant_gen_args == 1 { \"this\" } else { \"these\" },\n-                \"generic\",\n-                pluralize!(num_redundant_type_or_const_args),\n+                \"remove {these} generic argument{s}\",\n+                these = pluralize!(\"this\", num_redundant_gen_args),\n+                s = pluralize!(num_redundant_gen_args),\n             );\n \n             err.span_suggestion("}, {"sha": "00a2a0aaa14ce4f8023047fb9f01b38d1760e23f", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -609,7 +609,7 @@ fn assert_send() {\n \n #[allow(dead_code)]\n // Check that the member-like functions conditionally provided by #[derive()]\n-// are not overriden by genuine member functions with a different signature.\n+// are not overridden by genuine member functions with a different signature.\n fn assert_derives() {\n     fn hash<T: Hash, H: Hasher>(v: BTreeSet<T>, state: &mut H) {\n         v.hash(state);"}, {"sha": "7846c6db898a81087671a3697f36c0bacadfa6c2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -1795,7 +1795,7 @@ impl Rustflags {\n     }\n \n     /// By default, cargo will pick up on various variables in the environment. However, bootstrap\n-    /// reuses those variables to pass additional flags to rustdoc, so by default they get overriden.\n+    /// reuses those variables to pass additional flags to rustdoc, so by default they get overridden.\n     /// Explicitly add back any previous value in the environment.\n     ///\n     /// `prefix` is usually `RUSTFLAGS` or `RUSTDOCFLAGS`."}, {"sha": "3d8a62d50e06da0288373f4aecddb1fac433de8f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -948,7 +948,7 @@ fn resolve_associated_trait_item<'a>(\n ///\n /// This function returns `None` if no associated item was found in the impl.\n /// This can occur when the trait associated item has a default value that is\n-/// not overriden in the impl.\n+/// not overridden in the impl.\n ///\n /// This is just a wrapper around [`TyCtxt::impl_item_implementor_ids()`] and\n /// [`TyCtxt::associated_item()`] (with some helpful logging added)."}, {"sha": "e793ee75fd2e0a5642a5bb068ee76b6b0bab0e95", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -326,7 +326,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.items.push((item, renamed))\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n-                // `#[macro_export] macro_rules!` items are handled seperately in `visit()`,\n+                // `#[macro_export] macro_rules!` items are handled separately in `visit()`,\n                 // above, since they need to be documented at the module top level. Accordingly,\n                 // we only want to handle macros if one of three conditions holds:\n                 //"}, {"sha": "b040a6e74947ddaa5cb5ab72de1eaf54d0f9e479", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -122,6 +122,9 @@\n // gdb-command:whatis has_associated_type_trait\n // gdb-check:type = &(dyn type_names::Trait3<u32, AssocType=isize> + core::marker::Send)\n \n+// gdb-command:whatis has_associated_type_but_no_generics_trait\n+// gdb-check:type = &dyn type_names::TraitNoGenericsButWithAssocType<Output=isize>\n+\n // BARE FUNCTIONS\n // gdb-command:whatis rust_fn\n // gdb-check:type = (fn(core::option::Option<isize>, core::option::Option<&type_names::mod1::Struct2>), usize)\n@@ -228,6 +231,7 @@\n // cdb-check:struct ref_mut$<dyn$<type_names::Trait1> > mut_ref_trait = [...]\n // cdb-check:struct alloc::boxed::Box<dyn$<core::marker::Send,core::marker::Sync>,alloc::alloc::Global> no_principal_trait = [...]\n // cdb-check:struct ref$<dyn$<type_names::Trait3<u32,assoc$<AssocType,isize> >,core::marker::Send> > has_associated_type_trait = struct ref$<dyn$<type_names::Trait3<u32,assoc$<AssocType,isize> >,core::marker::Send> >\n+// cdb-check:struct ref$<dyn$<type_names::TraitNoGenericsButWithAssocType<assoc$<Output,isize> > > > has_associated_type_but_no_generics_trait = struct ref$<dyn$<type_names::TraitNoGenericsButWithAssocType<assoc$<Output,isize> > > >\n \n // BARE FUNCTIONS\n // cdb-command:dv /t *_fn*\n@@ -317,12 +321,22 @@ trait Trait3<T> {\n         panic!()\n     }\n }\n+trait TraitNoGenericsButWithAssocType {\n+    type Output;\n+    fn foo(&self) -> Self::Output;\n+}\n \n impl Trait1 for isize {}\n impl<T1, T2> Trait2<T1, T2> for isize {}\n impl<T> Trait3<T> for isize {\n     type AssocType = isize;\n }\n+impl TraitNoGenericsButWithAssocType for isize {\n+    type Output = isize;\n+    fn foo(&self) -> Self::Output {\n+        *self\n+    }\n+}\n \n fn rust_fn(_: Option<isize>, _: Option<&mod1::Struct2>) {}\n extern \"C\" fn extern_c_fn(_: isize) {}\n@@ -413,6 +427,8 @@ fn main() {\n     let mut_ref_trait = (&mut mut_int1) as &mut dyn Trait1;\n     let no_principal_trait = Box::new(0_isize) as Box<(dyn Send + Sync)>;\n     let has_associated_type_trait = &0_isize as &(dyn Trait3<u32, AssocType = isize> + Send);\n+    let has_associated_type_but_no_generics_trait =\n+        &0_isize as &dyn TraitNoGenericsButWithAssocType<Output = isize>;\n \n     let generic_box_trait = Box::new(0_isize) as Box<dyn Trait2<i32, mod1::Struct2>>;\n     let generic_ref_trait = (&0_isize) as &dyn Trait2<Struct1, Struct1>;"}, {"sha": "ec27a9f6ba31c499670d2e643825793513f4cd94", "filename": "src/test/rustdoc-ui/display-output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -1,4 +1,4 @@\n-// Test that `--show-output` has an effect and `allow(unused)` can be overriden.\n+// Test that `--show-output` has an effect and `allow(unused)` can be overridden.\n \n // check-pass\n // edition:2018"}, {"sha": "a0e853fc3848905d48c3c6cc5111949dbb685d47", "filename": "src/test/ui/lint/cli-lint-override.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -1,5 +1,5 @@\n // Tests that subsequent lints specified via the command line override\n-// each other, except for ForceWarn and Forbid, which cannot be overriden.\n+// each other, except for ForceWarn and Forbid, which cannot be overridden.\n //\n // revisions: warn_deny forbid_warn force_warn_deny\n //"}, {"sha": "81bd9c5e032780eb306c9e5c245939f2aa1a4850", "filename": "src/tools/clippy/.github/ISSUE_TEMPLATE/ice.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fice.yml", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fice.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fice.yml?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -10,7 +10,7 @@ body:\n     attributes:\n       label: Summary\n       description: |\n-        If possible, try to provide a minimal verifiable example. You can read [\"Rust Bug Minimization Patterns\"][mve] for how to create smaller examples. Otherwise, provide the crate where the ICE occured.\n+        If possible, try to provide a minimal verifiable example. You can read [\"Rust Bug Minimization Patterns\"][mve] for how to create smaller examples. Otherwise, provide the crate where the ICE occurred.\n \n         [mve]: http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\n     validations:"}, {"sha": "02bf09ed5068c152710bc2c32153f2241ab1649b", "filename": "src/tools/clippy/clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83460d5e624e9dff72ea8c8f6e79c10af10a3aa1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=83460d5e624e9dff72ea8c8f6e79c10af10a3aa1", "patch": "@@ -114,7 +114,7 @@ impl LateLintPass<'_> for UpperCaseAcronyms {\n                 check_ident(cx, &it.ident, self.upper_case_acronyms_aggressive);\n             },\n             ItemKind::Enum(ref enumdef, _) => {\n-                // check enum variants seperately because again we only want to lint on private enums and\n+                // check enum variants separately because again we only want to lint on private enums and\n                 // the fn check_variant does not know about the vis of the enum of its variants\n                 enumdef\n                     .variants"}]}