{"sha": "05330aaf42c794d441a91dc261e3202f965e0ce2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MzMwYWFmNDJjNzk0ZDQ0MWE5MWRjMjYxZTMyMDJmOTY1ZTBjZTI=", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-03-08T22:35:37Z"}, "committer": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-03-08T22:35:37Z"}, "message": "Closer similarities.", "tree": {"sha": "69e23bb902fecd5565d0556bcaac0d94d6525c42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e23bb902fecd5565d0556bcaac0d94d6525c42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05330aaf42c794d441a91dc261e3202f965e0ce2", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEElfpt1fswGixBWxap34UWHa4P82sFAmBGprkACgkQ34UWHa4P\n82uKzQ//TtusPoikn/XwoELX98miSjtfnaDGwMZ3Eo5aXeZ6JtNemSDwTnIwYA0T\n4WE6cf0tXzv66DNNBfrk/4hvVOZ8BtuGf8t+ZrZSXCKvYhi3f15zkETeY5QGxZ8t\noxWx30gcjlEjODPg8aBW/CejBA91+6PUGMqrCASGOUBAktgFfCvYhCRxKp2vusMO\nNxjpd0N7Tqf/5+7olXblzSJs8z8izbl2L6fjpXR4aOErLRf318ERI5lXbv33sozP\nTbrNM478K/3SAFCLgFk7VALWBeWlId+UGqHUXf43Zn9Yuzx3g/WMzGPlZft5s/pc\nME2CKG0J3IG1JQt6435tnQn0ywW45Hn/AWp+CADvTi9s52ZHL8IQctefJ1K8vZ9R\n8x9aUjbUqSIHy6Qt4k2OuGWM+sfOlnyYiwtblTxjVBXxlWywKKkpEFduqdsUGAnK\n9a1z4+7hsel4AW8PB0/8VN/C7AXXsrtGb0ax9OgjzEPC/VPFS+D6U/9Q0sxZnCAX\nTkaxX1aA1onWCRc8WPVLZdcVjVkehlMNkyRdWWX9qZZrAuwj/YxTEtOeXVD6z7lD\n0ahoEq/mqcH1yDhvPSBlzkpG+yQSf2lqJmQmWYBO+YPslu88IkSOEF6CrmnX7OrQ\n3SvlEy0hNY7Cfcw0I2yKhYiuH/w9QCrp68tkA3MPAQ7qM0z5yNM=\n=m0+Y\n-----END PGP SIGNATURE-----", "payload": "tree 69e23bb902fecd5565d0556bcaac0d94d6525c42\nparent 6a58b6af3231505344d450fba99a50c1d5c5ec01\nauthor Giles Cope <gilescope@gmail.com> 1615242937 +0000\ncommitter Giles Cope <gilescope@gmail.com> 1615242937 +0000\n\nCloser similarities.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05330aaf42c794d441a91dc261e3202f965e0ce2", "html_url": "https://github.com/rust-lang/rust/commit/05330aaf42c794d441a91dc261e3202f965e0ce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05330aaf42c794d441a91dc261e3202f965e0ce2/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a58b6af3231505344d450fba99a50c1d5c5ec01", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a58b6af3231505344d450fba99a50c1d5c5ec01", "html_url": "https://github.com/rust-lang/rust/commit/6a58b6af3231505344d450fba99a50c1d5c5ec01"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "8b0f3047a0a8b8f23e0b1ec1d4d86b89c209dad2", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/05330aaf42c794d441a91dc261e3202f965e0ce2/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05330aaf42c794d441a91dc261e3202f965e0ce2/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=05330aaf42c794d441a91dc261e3202f965e0ce2", "patch": "@@ -2228,50 +2228,40 @@ impl ToString for char {\n impl ToString for u8 {\n     #[inline]\n     fn to_string(&self) -> String {\n-        let mut result = String::with_capacity(3);\n+        let mut buf = String::with_capacity(3);\n         let mut n = *self;\n-        if n >= 100 {\n-            result.push((b'0' + n / 100) as char);\n-            n %= 100;\n-        }\n-        if !result.is_empty() || n >= 10 {\n-            result.push((b'0' + n / 10) as char);\n+        if n >= 10 {\n+            if n >= 100 {\n+                buf.push((b'0' + n / 100) as char);\n+                n %= 100;\n+            }\n+            buf.push((b'0' + n / 10) as char);\n             n %= 10;\n-        };\n-        result.push((b'0' + n) as char);\n-        result\n+        }\n+        buf.push((b'0' + n) as char);\n+        buf\n     }\n }\n \n #[stable(feature = \"i8_to_string_specialization\", since = \"1.999.0\")]\n impl ToString for i8 {\n     #[inline]\n     fn to_string(&self) -> String {\n-        let mut vec = vec![0; 4];\n-        let mut free = 0;\n+        let mut buf = String::with_capacity(4);\n         if self.is_negative() {\n-            vec[free] = b'-';\n-            free += 1;\n+            buf.push('-');\n         }\n         let mut n = self.unsigned_abs();\n         if n >= 10 {\n             if n >= 100 {\n+                buf.push('1');\n                 n -= 100;\n-                vec[free] = b'1';\n-                free += 1;\n             }\n-            debug_assert!(n < 100);\n-            vec[free] = b'0' + n / 10;\n-            free += 1;\n+            buf.push((b'0' + n / 10) as char);\n             n %= 10;\n         }\n-        debug_assert!(n < 10);\n-        vec[free] = b'0' + n;\n-        free += 1;\n-        vec.truncate(free);\n-\n-        // SAFETY: Vec only contains ascii so valid utf8\n-        unsafe { String::from_utf8_unchecked(vec) }\n+        buf.push((b'0' + n) as char);\n+        buf\n     }\n }\n "}]}