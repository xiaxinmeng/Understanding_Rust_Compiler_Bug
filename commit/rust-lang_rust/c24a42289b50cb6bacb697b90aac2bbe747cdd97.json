{"sha": "c24a42289b50cb6bacb697b90aac2bbe747cdd97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNGE0MjI4OWI1MGNiNmJhY2I2OTdiOTBhYWMyYmJlNzQ3Y2RkOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-13T22:09:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-13T22:09:39Z"}, "message": "Auto merge of #4543 - xiongmao86:issue4503, r=flip1995\n\nFix issue4503\n\nFixes #4503.\n\nchangelog: Add a lint checking user are using FileType.is_file() method and suggest using !FileType.is_dir().\n\n- [x] Followed [lint naming conventions][lint_naming]\n- [x] Added passing UI tests (including committed `.stderr` file)\n- [x] `cargo test` passes locally\n- [x] Executed `./util/dev update_lints`\n- [x] Added lint documentation\n- [x] Run `./util/dev fmt`", "tree": {"sha": "c74cb6ec83db22e0acc4039912f5a2beb191e63c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c74cb6ec83db22e0acc4039912f5a2beb191e63c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c24a42289b50cb6bacb697b90aac2bbe747cdd97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c24a42289b50cb6bacb697b90aac2bbe747cdd97", "html_url": "https://github.com/rust-lang/rust/commit/c24a42289b50cb6bacb697b90aac2bbe747cdd97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c24a42289b50cb6bacb697b90aac2bbe747cdd97/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05cb0df748dbc14c43dea4d627d68721a52861c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/05cb0df748dbc14c43dea4d627d68721a52861c6", "html_url": "https://github.com/rust-lang/rust/commit/05cb0df748dbc14c43dea4d627d68721a52861c6"}, {"sha": "bba468887bb3c20ff8e38a61bb0f2222836cb451", "url": "https://api.github.com/repos/rust-lang/rust/commits/bba468887bb3c20ff8e38a61bb0f2222836cb451", "html_url": "https://github.com/rust-lang/rust/commit/bba468887bb3c20ff8e38a61bb0f2222836cb451"}], "stats": {"total": 135, "additions": 132, "deletions": 3}, "files": [{"sha": "11d745a4c23cf73edaef007f13cf223f5a865d88", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c24a42289b50cb6bacb697b90aac2bbe747cdd97/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c24a42289b50cb6bacb697b90aac2bbe747cdd97/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c24a42289b50cb6bacb697b90aac2bbe747cdd97", "patch": "@@ -1093,6 +1093,7 @@ Released 2018-09-13\n [`extend_from_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#extend_from_slice\n [`extra_unused_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n [`fallible_impl_from`]: https://rust-lang.github.io/rust-clippy/master/index.html#fallible_impl_from\n+[`filetype_is_file`]: https://rust-lang.github.io/rust-clippy/master/index.html#filetype_is_file\n [`filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_map\n [`filter_map_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_next\n [`filter_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_next"}, {"sha": "7b1d14e9afca5b1c8fb2352b361d05481cfae0a5", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24a42289b50cb6bacb697b90aac2bbe747cdd97/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c24a42289b50cb6bacb697b90aac2bbe747cdd97/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c24a42289b50cb6bacb697b90aac2bbe747cdd97", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 346 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 347 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "576a4a8cd7c2b931066c62d3a99e1da604a461f9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24a42289b50cb6bacb697b90aac2bbe747cdd97/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24a42289b50cb6bacb697b90aac2bbe747cdd97/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c24a42289b50cb6bacb697b90aac2bbe747cdd97", "patch": "@@ -614,6 +614,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::CLONE_ON_COPY,\n         &methods::CLONE_ON_REF_PTR,\n         &methods::EXPECT_FUN_CALL,\n+        &methods::FILETYPE_IS_FILE,\n         &methods::FILTER_MAP,\n         &methods::FILTER_MAP_NEXT,\n         &methods::FILTER_NEXT,\n@@ -1007,6 +1008,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::WILDCARD_ENUM_MATCH_ARM),\n         LintId::of(&mem_forget::MEM_FORGET),\n         LintId::of(&methods::CLONE_ON_REF_PTR),\n+        LintId::of(&methods::FILETYPE_IS_FILE),\n         LintId::of(&methods::GET_UNWRAP),\n         LintId::of(&methods::OPTION_EXPECT_USED),\n         LintId::of(&methods::OPTION_UNWRAP_USED),"}, {"sha": "30322ec8ebb938cffb6311094531cdfb17401f69", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c24a42289b50cb6bacb697b90aac2bbe747cdd97/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24a42289b50cb6bacb697b90aac2bbe747cdd97/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c24a42289b50cb6bacb697b90aac2bbe747cdd97", "patch": "@@ -1131,6 +1131,40 @@ declare_clippy_lint! {\n     \"Check for offset calculations on raw pointers to zero-sized types\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `FileType::is_file()`.\n+    ///\n+    /// **Why is this bad?** When people testing a file type with `FileType::is_file`\n+    /// they are testing whether a path is something they can get bytes from. But\n+    /// `is_file` doesn't cover special file types in unix-like systems, and doesn't cover\n+    /// symlink in windows. Using `!FileType::is_dir()` is a better way to that intention.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// let metadata = std::fs::metadata(\"foo.txt\")?;\n+    /// let filetype = metadata.file_type();\n+    ///\n+    /// if filetype.is_file() {\n+    ///     // read file\n+    /// }\n+    /// ```\n+    ///\n+    /// should be written as:\n+    ///\n+    /// ```rust,ignore\n+    /// let metadata = std::fs::metadata(\"foo.txt\")?;\n+    /// let filetype = metadata.file_type();\n+    ///\n+    /// if !filetype.is_dir() {\n+    ///     // read file\n+    /// }\n+    /// ```\n+    pub FILETYPE_IS_FILE,\n+    restriction,\n+    \"`FileType::is_file` is not recommended to test for readable file type\"\n+}\n+\n declare_lint_pass!(Methods => [\n     OPTION_UNWRAP_USED,\n     RESULT_UNWRAP_USED,\n@@ -1178,6 +1212,7 @@ declare_lint_pass!(Methods => [\n     UNINIT_ASSUMED_INIT,\n     MANUAL_SATURATING_ARITHMETIC,\n     ZST_OFFSET,\n+    FILETYPE_IS_FILE,\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n@@ -1241,6 +1276,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"add\"] | [\"offset\"] | [\"sub\"] | [\"wrapping_offset\"] | [\"wrapping_add\"] | [\"wrapping_sub\"] => {\n                 check_pointer_offset(cx, expr, arg_lists[0])\n             },\n+            [\"is_file\", ..] => lint_filetype_is_file(cx, expr, arg_lists[0]),\n             _ => {},\n         }\n \n@@ -3225,3 +3261,35 @@ fn check_pointer_offset(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, args: &[\n         }\n     }\n }\n+\n+fn lint_filetype_is_file(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n+    let ty = cx.tables.expr_ty(&args[0]);\n+\n+    if !match_type(cx, ty, &paths::FILE_TYPE) {\n+        return;\n+    }\n+\n+    let span: Span;\n+    let verb: &str;\n+    let lint_unary: &str;\n+    let help_unary: &str;\n+    if_chain! {\n+        if let Some(parent) = get_parent_expr(cx, expr);\n+        if let hir::ExprKind::Unary(op, _) = parent.kind;\n+        if op == hir::UnOp::UnNot;\n+        then {\n+            lint_unary = \"!\";\n+            verb = \"denies\";\n+            help_unary = \"\";\n+            span = parent.span;\n+        } else {\n+            lint_unary = \"\";\n+            verb = \"covers\";\n+            help_unary = \"!\";\n+            span = expr.span;\n+        }\n+    }\n+    let lint_msg = format!(\"`{}FileType::is_file()` only {} regular files\", lint_unary, verb);\n+    let help_msg = format!(\"use `{}FileType::is_dir()` instead\", help_unary);\n+    span_help_and_lint(cx, FILETYPE_IS_FILE, span, &lint_msg, &help_msg);\n+}"}, {"sha": "4f8fe02dfd202d53960c40bb7aefaddd7f5a1d86", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c24a42289b50cb6bacb697b90aac2bbe747cdd97/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24a42289b50cb6bacb697b90aac2bbe747cdd97/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=c24a42289b50cb6bacb697b90aac2bbe747cdd97", "patch": "@@ -28,6 +28,7 @@ pub const DROP_TRAIT: [&str; 4] = [\"core\", \"ops\", \"drop\", \"Drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n pub const EARLY_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"EarlyContext\"];\n pub const EXIT: [&str; 3] = [\"std\", \"process\", \"exit\"];\n+pub const FILE_TYPE: [&str; 3] = [\"std\", \"fs\", \"FileType\"];\n pub const FMT_ARGUMENTS_NEW_V1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n pub const FMT_ARGUMENTS_NEW_V1_FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1_formatted\"];\n pub const FMT_ARGUMENTV1_NEW: [&str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];"}, {"sha": "9cad1ac786afb6c92c65116d823dcd8e995a2f1b", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c24a42289b50cb6bacb697b90aac2bbe747cdd97/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24a42289b50cb6bacb697b90aac2bbe747cdd97/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c24a42289b50cb6bacb697b90aac2bbe747cdd97", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 346] = [\n+pub const ALL_LINTS: [Lint; 347] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -560,6 +560,13 @@ pub const ALL_LINTS: [Lint; 346] = [\n         deprecation: None,\n         module: \"fallible_impl_from\",\n     },\n+    Lint {\n+        name: \"filetype_is_file\",\n+        group: \"restriction\",\n+        desc: \"`FileType::is_file` is not recommended to test for readable file type\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"filter_map\",\n         group: \"pedantic\","}, {"sha": "5c05e74dcb6d01bb1c74931db913f7905842bacf", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24a42289b50cb6bacb697b90aac2bbe747cdd97/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24a42289b50cb6bacb697b90aac2bbe747cdd97/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=c24a42289b50cb6bacb697b90aac2bbe747cdd97", "patch": "@@ -121,7 +121,7 @@ fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<test::TestDesc\n         for file in fs::read_dir(&dir_path)? {\n             let file = file?;\n             let file_path = file.path();\n-            if !file.file_type()?.is_file() {\n+            if file.file_type()?.is_dir() {\n                 continue;\n             }\n             if file_path.extension() != Some(OsStr::new(\"rs\")) {"}, {"sha": "5de8fe8cdd7b0e128aca9f2502d1906414f6f4bc", "filename": "tests/ui/filetype_is_file.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c24a42289b50cb6bacb697b90aac2bbe747cdd97/tests%2Fui%2Ffiletype_is_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24a42289b50cb6bacb697b90aac2bbe747cdd97/tests%2Fui%2Ffiletype_is_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffiletype_is_file.rs?ref=c24a42289b50cb6bacb697b90aac2bbe747cdd97", "patch": "@@ -0,0 +1,23 @@\n+#![warn(clippy::filetype_is_file)]\n+\n+fn main() -> std::io::Result<()> {\n+    use std::fs;\n+    use std::ops::BitOr;\n+\n+    // !filetype.is_dir()\n+    if fs::metadata(\"foo.txt\")?.file_type().is_file() {\n+        // read file\n+    }\n+\n+    // positive of filetype.is_dir()\n+    if !fs::metadata(\"foo.txt\")?.file_type().is_file() {\n+        // handle dir\n+    }\n+\n+    // false positive of filetype.is_dir()\n+    if !fs::metadata(\"foo.txt\")?.file_type().is_file().bitor(true) {\n+        // ...\n+    }\n+\n+    Ok(())\n+}"}, {"sha": "cd1e3ac37fe8636a0bf4e7f36192557412cf17c1", "filename": "tests/ui/filetype_is_file.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c24a42289b50cb6bacb697b90aac2bbe747cdd97/tests%2Fui%2Ffiletype_is_file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c24a42289b50cb6bacb697b90aac2bbe747cdd97/tests%2Fui%2Ffiletype_is_file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffiletype_is_file.stderr?ref=c24a42289b50cb6bacb697b90aac2bbe747cdd97", "patch": "@@ -0,0 +1,27 @@\n+error: `FileType::is_file()` only covers regular files\n+  --> $DIR/filetype_is_file.rs:8:8\n+   |\n+LL |     if fs::metadata(\"foo.txt\")?.file_type().is_file() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::filetype-is-file` implied by `-D warnings`\n+   = help: use `!FileType::is_dir()` instead\n+\n+error: `!FileType::is_file()` only denies regular files\n+  --> $DIR/filetype_is_file.rs:13:8\n+   |\n+LL |     if !fs::metadata(\"foo.txt\")?.file_type().is_file() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `FileType::is_dir()` instead\n+\n+error: `FileType::is_file()` only covers regular files\n+  --> $DIR/filetype_is_file.rs:18:9\n+   |\n+LL |     if !fs::metadata(\"foo.txt\")?.file_type().is_file().bitor(true) {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `!FileType::is_dir()` instead\n+\n+error: aborting due to 3 previous errors\n+"}]}