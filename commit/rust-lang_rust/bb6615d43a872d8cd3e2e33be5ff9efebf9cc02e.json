{"sha": "bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNjYxNWQ0M2E4NzJkOGNkM2UyZTMzYmU1ZmY5ZWZlYmY5Y2MwMmU=", "commit": {"author": {"name": "=Mark Sinclair", "email": "mark.edward.x@gmail.com", "date": "2013-07-14T16:20:48Z"}, "committer": {"name": "=Mark Sinclair", "email": "mark.edward.x@gmail.com", "date": "2013-07-14T16:20:48Z"}, "message": "Implemented FromIterator for TrieMap and TrieSet", "tree": {"sha": "9afe703e797127c50b2304596b8a4a06b20df345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9afe703e797127c50b2304596b8a4a06b20df345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e", "html_url": "https://github.com/rust-lang/rust/commit/bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e/comments", "author": {"login": "MarkJr94", "id": 1462602, "node_id": "MDQ6VXNlcjE0NjI2MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkJr94", "html_url": "https://github.com/MarkJr94", "followers_url": "https://api.github.com/users/MarkJr94/followers", "following_url": "https://api.github.com/users/MarkJr94/following{/other_user}", "gists_url": "https://api.github.com/users/MarkJr94/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkJr94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkJr94/subscriptions", "organizations_url": "https://api.github.com/users/MarkJr94/orgs", "repos_url": "https://api.github.com/users/MarkJr94/repos", "events_url": "https://api.github.com/users/MarkJr94/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkJr94/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MarkJr94", "id": 1462602, "node_id": "MDQ6VXNlcjE0NjI2MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkJr94", "html_url": "https://github.com/MarkJr94", "followers_url": "https://api.github.com/users/MarkJr94/followers", "following_url": "https://api.github.com/users/MarkJr94/following{/other_user}", "gists_url": "https://api.github.com/users/MarkJr94/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkJr94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkJr94/subscriptions", "organizations_url": "https://api.github.com/users/MarkJr94/orgs", "repos_url": "https://api.github.com/users/MarkJr94/repos", "events_url": "https://api.github.com/users/MarkJr94/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkJr94/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ff7ef434ff5805dc8636fa0bb821feeb0705d22", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff7ef434ff5805dc8636fa0bb821feeb0705d22", "html_url": "https://github.com/rust-lang/rust/commit/4ff7ef434ff5805dc8636fa0bb821feeb0705d22"}], "stats": {"total": 105, "additions": 91, "deletions": 14}, "files": [{"sha": "c219886cd03bfa30f02b30ea8edd7b1a6cfef551", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e", "patch": "@@ -735,6 +735,20 @@ impl<T:Hash + Eq> HashSet<T> {\n     }\n }\n \n+impl<K: Eq + Hash, T: Iterator<K>> FromIterator<K, T> for HashSet<K> {\n+    pub fn from_iterator(iter: &mut T) -> HashSet<K> {\n+        let (lower, _) = iter.size_hint();\n+        let mut set = HashSet::with_capacity(lower);\n+\n+        for iter.advance |k| {\n+            set.insert(k);\n+        }\n+\n+        set\n+    }\n+}\n+  \n+\n #[cfg(test)]\n mod test_map {\n     use container::{Container, Map, Set};\n@@ -1139,4 +1153,15 @@ mod test_set {\n         }\n         assert_eq!(i, expected.len());\n     }\n+\n+    #[test]\n+    fn test_from_iter() {\n+        let xs = ~[1, 2, 3, 4, 5, 6, 7, 8, 9];\n+        \n+        let set: HashSet<int> = xs.iter().transform(|&x| x).collect();\n+\n+        for xs.iter().advance |x: &int| {\n+            assert!(set.contains(x));\n+        }\n+    }\n }"}, {"sha": "fd2cfa08b3095c7c4644755caf193e49a2db854b", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 66, "deletions": 14, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e", "patch": "@@ -11,7 +11,7 @@\n //! An ordered map and set for integer keys implemented as a radix trie\n \n use prelude::*;\n-use iterator::IteratorUtil;\n+use iterator::{IteratorUtil, FromIterator};\n use uint;\n use util::{swap, replace};\n \n@@ -171,6 +171,18 @@ impl<T> TrieMap<T> {\n     }\n }\n \n+impl<T, Iter: Iterator<(uint, T)>> FromIterator<(uint, T), Iter> for TrieMap<T> {\n+    pub fn from_iterator(iter: &mut Iter) -> TrieMap<T> {\n+        let mut map = TrieMap::new();\n+\n+        for iter.advance |(k, v)| {\n+            map.insert(k, v);\n+        }\n+\n+        map\n+    }\n+}\n+\n #[allow(missing_doc)]\n pub struct TrieSet {\n     priv map: TrieMap<()>\n@@ -230,6 +242,18 @@ impl TrieSet {\n     }\n }\n \n+impl<Iter: Iterator<uint>> FromIterator<uint, Iter> for TrieSet {\n+    pub fn from_iterator(iter: &mut Iter) -> TrieSet {\n+        let mut set = TrieSet::new();\n+\n+        for iter.advance |elem| {\n+            set.insert(elem);\n+        }\n+\n+        set\n+    }\n+}\n+\n struct TrieNode<T> {\n     count: uint,\n     children: [Child<T>, ..SIZE]\n@@ -382,7 +406,7 @@ pub fn check_integrity<T>(trie: &TrieNode<T>) {\n }\n \n #[cfg(test)]\n-mod tests {\n+mod test_map {\n     use super::*;\n     use core::option::{Some, None};\n     use uint;\n@@ -510,6 +534,39 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_swap() {\n+        let mut m = TrieMap::new();\n+        assert_eq!(m.swap(1, 2), None);\n+        assert_eq!(m.swap(1, 3), Some(2));\n+        assert_eq!(m.swap(1, 4), Some(3));\n+    }\n+\n+    #[test]\n+    fn test_pop() {\n+        let mut m = TrieMap::new();\n+        m.insert(1, 2);\n+        assert_eq!(m.pop(&1), Some(2));\n+        assert_eq!(m.pop(&1), None);\n+    }\n+\n+    #[test]\n+    fn test_from_iter() {\n+        let xs = ~[(1u, 1i), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n+        \n+        let map: TrieMap<int> = xs.iter().transform(|&x| x).collect();\n+\n+        for xs.iter().advance |&(k, v)| {\n+            assert_eq!(map.find(&k), Some(&v));\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test_set {\n+    use super::*;\n+    use uint;\n+\n     #[test]\n     fn test_sane_chunk() {\n         let x = 1;\n@@ -533,18 +590,13 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_swap() {\n-        let mut m = TrieMap::new();\n-        assert_eq!(m.swap(1, 2), None);\n-        assert_eq!(m.swap(1, 3), Some(2));\n-        assert_eq!(m.swap(1, 4), Some(3));\n-    }\n+    fn test_from_iter() {\n+        let xs = ~[9u, 8, 7, 6, 5, 4, 3, 2, 1];\n+        \n+        let set: TrieSet = xs.iter().transform(|&x| x).collect();\n \n-    #[test]\n-    fn test_pop() {\n-        let mut m = TrieMap::new();\n-        m.insert(1, 2);\n-        assert_eq!(m.pop(&1), Some(2));\n-        assert_eq!(m.pop(&1), None);\n+        for xs.iter().advance |x| {\n+            assert!(set.contains(x));\n+        }\n     }\n }"}]}