{"sha": "12bce479b31760d4f92e82adca31b99c2185ec41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYmNlNDc5YjMxNzYwZDRmOTJlODJhZGNhMzFiOTljMjE4NWVjNDE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-21T07:07:32Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-21T07:07:32Z"}, "message": "Support ADT aggregate rvalues and allocation.", "tree": {"sha": "298b37a31b4f31f11cc5e4b9e2409b70511ef517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/298b37a31b4f31f11cc5e4b9e2409b70511ef517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12bce479b31760d4f92e82adca31b99c2185ec41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12bce479b31760d4f92e82adca31b99c2185ec41", "html_url": "https://github.com/rust-lang/rust/commit/12bce479b31760d4f92e82adca31b99c2185ec41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12bce479b31760d4f92e82adca31b99c2185ec41/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e05df509fb62a0398669b8e08f6e70dea8231306", "url": "https://api.github.com/repos/rust-lang/rust/commits/e05df509fb62a0398669b8e08f6e70dea8231306", "html_url": "https://github.com/rust-lang/rust/commit/e05df509fb62a0398669b8e08f6e70dea8231306"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "0939909968c9e185c20b9763e40dc2c26eee217e", "filename": "src/interpreter.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/12bce479b31760d4f92e82adca31b99c2185ec41/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12bce479b31760d4f92e82adca31b99c2185ec41/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=12bce479b31760d4f92e82adca31b99c2185ec41", "patch": "@@ -13,6 +13,7 @@ enum Value {\n     Uninit,\n     Bool(bool),\n     Int(i64), // FIXME: Should be bit-width aware.\n+    Adt { variant: usize, data: Pointer },\n     Func(def_id::DefId),\n }\n \n@@ -22,6 +23,14 @@ enum Pointer {\n     // TODO(tsion): Heap\n }\n \n+impl Pointer {\n+    fn offset(self, i: usize) -> Self {\n+        match self {\n+            Pointer::Stack(p) => Pointer::Stack(p + i),\n+        }\n+    }\n+}\n+\n /// A stack frame:\n ///\n /// ```text\n@@ -51,12 +60,12 @@ struct Frame {\n     num_args: usize,\n     num_vars: usize,\n     num_temps: usize,\n-    // aggregates\n+    num_aggregate_fields: usize,\n }\n \n impl Frame {\n     fn size(&self) -> usize {\n-        self.num_args + self.num_vars + self.num_temps\n+        self.num_args + self.num_vars + self.num_temps + self.num_aggregate_fields\n     }\n \n     fn arg_offset(&self, i: usize) -> usize {\n@@ -96,6 +105,7 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n             num_args: mir.arg_decls.len(),\n             num_vars: mir.var_decls.len(),\n             num_temps: mir.temp_decls.len(),\n+            num_aggregate_fields: 0,\n         };\n \n         self.value_stack.extend(iter::repeat(Value::Uninit).take(frame.size()));\n@@ -113,6 +123,13 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n         self.value_stack.truncate(frame.offset);\n     }\n \n+    fn allocate_aggregate(&mut self, size: usize) -> Pointer {\n+        let frame = self.call_stack.last_mut().expect(\"missing call frame\");\n+        let ptr = Pointer::Stack(self.value_stack.len());\n+        self.value_stack.extend(iter::repeat(Value::Uninit).take(frame.size()));\n+        ptr\n+    }\n+\n     fn call(&mut self, mir: &Mir, args: &[Value], return_ptr: Pointer) {\n         self.push_stack_frame(mir, args, return_ptr);\n         let mut block = mir::START_BLOCK;\n@@ -245,14 +262,23 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                 }\n             }\n \n-            // mir::Rvalue::Aggregate(mir::AggregateKind::Adt(ref adt_def, variant, substs),\n-            //                        ref operands) => {\n-            //     let num_fields = adt_def.variants[variant].fields.len();\n-            //     debug_assert_eq!(num_fields, operands.len());\n+            mir::Rvalue::Aggregate(mir::AggregateKind::Adt(ref adt_def, variant, substs),\n+                                   ref operands) => {\n+                let max_fields = adt_def.variants\n+                    .iter()\n+                    .map(|v| v.fields.len())\n+                    .max()\n+                    .unwrap_or(0);\n+\n+                let ptr = self.allocate_aggregate(max_fields);\n \n-            //     let data = operands.iter().map(|op| self.eval_operand(op)).collect();\n-            //     Value::Adt(variant, data)\n-            // }\n+                for (i, operand) in operands.iter().enumerate() {\n+                    let val = self.eval_operand(operand);\n+                    self.write_pointer(ptr.offset(i), val);\n+                }\n+\n+                Value::Adt { variant: variant, data: ptr }\n+            }\n \n             _ => unimplemented!(),\n         }"}]}