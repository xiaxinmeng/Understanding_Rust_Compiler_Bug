{"sha": "4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e", "node_id": "C_kwDOAAsO6NoAKDRiNmUxZDFjNWZjOWVhZWRjMTE5NzU5ZDk5YjYxMDViNGY3ZjVkMWU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-22T18:31:23Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-27T07:19:29Z"}, "message": "Add `TyCtxt::is_fn_trait`", "tree": {"sha": "53635be53f8ae6825e2bda5351edaa58887b087e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53635be53f8ae6825e2bda5351edaa58887b087e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e", "html_url": "https://github.com/rust-lang/rust/commit/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc", "html_url": "https://github.com/rust-lang/rust/commit/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "e584d413c4190688fe8559af7bd28987f6e478ba", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let trait_def_id = projection.trait_def_id(tcx);\n \n-        let is_fn = tcx.fn_trait_kind_from_def_id(trait_def_id).is_some();\n+        let is_fn = tcx.is_fn_trait(trait_def_id);\n         let gen_trait = tcx.require_lang_item(LangItem::Generator, cause_span);\n         let is_gen = gen_trait == trait_def_id;\n         if !is_fn && !is_gen {"}, {"sha": "86384c7b93e717692b04087fe27038904e501673", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e", "patch": "@@ -2115,7 +2115,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         {\n                             if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) = predicate.kind().skip_binder()\n                                 && pred.self_ty().peel_refs() == callee_ty\n-                                && self.tcx.fn_trait_kind_from_def_id(pred.def_id()).is_some()\n+                                && self.tcx.is_fn_trait(pred.def_id())\n                             {\n                                 err.span_note(span, \"callable defined here\");\n                                 return;"}, {"sha": "343ea1f00f58bc7c4b982485e284593cb13e8c5f", "filename": "compiler/rustc_middle/src/middle/lang_items.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs?ref=4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e", "patch": "@@ -27,6 +27,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n+    /// Given a [`DefId`] of a [`Fn`], [`FnMut`] or [`FnOnce`] traits,\n+    /// returns a corresponding [`ty::ClosureKind`].\n+    /// For any other [`DefId`] return `None`.\n     pub fn fn_trait_kind_from_def_id(self, id: DefId) -> Option<ty::ClosureKind> {\n         let items = self.lang_items();\n         match Some(id) {\n@@ -36,6 +39,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             _ => None,\n         }\n     }\n+\n+    /// Returns `true` if `id` is a `DefId` of [`Fn`], [`FnMut`] or [`FnOnce`] traits.\n+    pub fn is_fn_trait(self, id: DefId) -> bool {\n+        self.fn_trait_kind_from_def_id(id).is_some()\n+    }\n }\n \n /// Returns `true` if the specified `lang_item` must be present for this"}, {"sha": "e96b9b64e78749c0b16184d53682699986b1380d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e", "patch": "@@ -687,7 +687,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 }\n                                 ObligationCauseCode::BindingObligation(def_id, _)\n                                 | ObligationCauseCode::ItemObligation(def_id)\n-                                    if tcx.fn_trait_kind_from_def_id(*def_id).is_some() =>\n+                                    if tcx.is_fn_trait(*def_id) =>\n                                 {\n                                     err.code(rustc_errors::error_code!(E0059));\n                                     err.set_primary_message(format!(\n@@ -847,8 +847,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             );\n                         }\n \n-                        let is_fn_trait =\n-                            tcx.fn_trait_kind_from_def_id(trait_ref.def_id()).is_some();\n+                        let is_fn_trait = tcx.is_fn_trait(trait_ref.def_id());\n                         let is_target_feature_fn = if let ty::FnDef(def_id, _) =\n                             *trait_ref.skip_binder().self_ty().kind()\n                         {\n@@ -2156,7 +2155,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     if generics.params.iter().any(|p| p.name != kw::SelfUpper)\n                         && !snippet.ends_with('>')\n                         && !generics.has_impl_trait()\n-                        && !self.tcx.fn_trait_kind_from_def_id(def_id).is_some()\n+                        && !self.tcx.is_fn_trait(def_id)\n                     {\n                         // FIXME: To avoid spurious suggestions in functions where type arguments\n                         // where already supplied, we check the snippet to make sure it doesn't"}, {"sha": "ddffe25bc263c5e95c8b02029205824a75e33217", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e", "patch": "@@ -1679,9 +1679,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         ) -> Ty<'tcx> {\n             let inputs = trait_ref.skip_binder().substs.type_at(1);\n             let sig = match inputs.kind() {\n-                ty::Tuple(inputs)\n-                    if infcx.tcx.fn_trait_kind_from_def_id(trait_ref.def_id()).is_some() =>\n-                {\n+                ty::Tuple(inputs) if infcx.tcx.is_fn_trait(trait_ref.def_id()) => {\n                     infcx.tcx.mk_fn_sig(\n                         inputs.iter(),\n                         infcx.next_ty_var(TypeVariableOrigin {\n@@ -1752,7 +1750,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             && let predicates = self.tcx.predicates_of(def_id).instantiate_identity(self.tcx)\n             && let Some(pred) = predicates.predicates.get(*idx)\n             && let ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) = pred.kind().skip_binder()\n-            && self.tcx.fn_trait_kind_from_def_id(trait_pred.def_id()).is_some()\n+            && self.tcx.is_fn_trait(trait_pred.def_id())\n         {\n             let expected_self =\n                 self.tcx.anonymize_late_bound_regions(pred.kind().rebind(trait_pred.self_ty()));"}, {"sha": "adce549a858cb54b9e31bc2508c846d155474b12", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=4b6e1d1c5fc9eaedc119759d99b6105b4f7f5d1e", "patch": "@@ -489,7 +489,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n         // We provide impl of all fn traits for fn pointers.\n-        if self.tcx().fn_trait_kind_from_def_id(obligation.predicate.def_id()).is_none() {\n+        if !self.tcx().is_fn_trait(obligation.predicate.def_id()) {\n             return;\n         }\n "}]}