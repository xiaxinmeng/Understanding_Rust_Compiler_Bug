{"sha": "0d3bad85e60d011b35da0a8e5dd6611934f6816d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkM2JhZDg1ZTYwZDAxMWIzNWRhMGE4ZTVkZDY2MTE5MzRmNjgxNmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-18T21:58:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-18T21:58:35Z"}, "message": "Merge #9335\n\n9335: feat: Don't insert imports outside of cfg attributed items r=Veykril a=Veykril\n\nCloses #6939\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "26403f2e9927f32698009cad0d8995ffa9cb058b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26403f2e9927f32698009cad0d8995ffa9cb058b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d3bad85e60d011b35da0a8e5dd6611934f6816d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgzRcLCRBK7hj4Ov3rIwAAhGoIADQrxhC0wjo5bskIfyd1Vmzo\njnjlQ+noloa7NBLLgVsXtTRnYT8p+wAPilDPF8YTP16qrDHD8OxOQUo06O28lIlC\nD6zzVo6QplksLrxyAK2KsUjuYv7uHJC11TkK0IU+FOlpJB2KniY8ojoRIZFI6qrD\nzRDmIgnV7HNxQnX/4iWTzp5Yq25Yd5KeuBt263xglVakqg22Dm1Lx3c5nUAHdDJX\n+pzG092kytl3TDUpB1lz07YhtOTRSZQ8SdUBfFeIKJq0kDEG0uPHseG8iJEV6NIx\nNRDdPyKqmMn+T3wzwGTxhyrKVF4R0tpoiH4GdP2GTcm1hLt8E0MRlhK6mmPt/PU=\n=RXB+\n-----END PGP SIGNATURE-----\n", "payload": "tree 26403f2e9927f32698009cad0d8995ffa9cb058b\nparent d9666ce5098442ab0cbac4d4363435074eb12923\nparent 344cb5e76a31b8ef7ae80ce0ef39c54248ad8df7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624053515 +0000\ncommitter GitHub <noreply@github.com> 1624053515 +0000\n\nMerge #9335\n\n9335: feat: Don't insert imports outside of cfg attributed items r=Veykril a=Veykril\n\nCloses #6939\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d3bad85e60d011b35da0a8e5dd6611934f6816d", "html_url": "https://github.com/rust-lang/rust/commit/0d3bad85e60d011b35da0a8e5dd6611934f6816d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d3bad85e60d011b35da0a8e5dd6611934f6816d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9666ce5098442ab0cbac4d4363435074eb12923", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9666ce5098442ab0cbac4d4363435074eb12923", "html_url": "https://github.com/rust-lang/rust/commit/d9666ce5098442ab0cbac4d4363435074eb12923"}, {"sha": "344cb5e76a31b8ef7ae80ce0ef39c54248ad8df7", "url": "https://api.github.com/repos/rust-lang/rust/commits/344cb5e76a31b8ef7ae80ce0ef39c54248ad8df7", "html_url": "https://github.com/rust-lang/rust/commit/344cb5e76a31b8ef7ae80ce0ef39c54248ad8df7"}], "stats": {"total": 150, "additions": 118, "deletions": 32}, "files": [{"sha": "8df8b060d97b6894719433ddb41d2bcd4696467b", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bad85e60d011b35da0a8e5dd6611934f6816d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bad85e60d011b35da0a8e5dd6611934f6816d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=0d3bad85e60d011b35da0a8e5dd6611934f6816d", "patch": "@@ -103,6 +103,7 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                 let scope = match scope.clone() {\n                     ImportScope::File(it) => ImportScope::File(builder.make_mut(it)),\n                     ImportScope::Module(it) => ImportScope::Module(builder.make_mut(it)),\n+                    ImportScope::Block(it) => ImportScope::Block(builder.make_mut(it)),\n                 };\n                 insert_use(&scope, mod_path_to_ast(&import.import_path), &ctx.config.insert_use);\n             },\n@@ -991,6 +992,64 @@ mod foo {}\n const _: () = {\n     Foo\n };\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn respects_cfg_attr() {\n+        check_assist(\n+            auto_import,\n+            r#\"\n+mod bar {\n+    pub struct Bar;\n+}\n+\n+#[cfg(test)]\n+fn foo() {\n+    Bar$0\n+}\n+\"#,\n+            r#\"\n+mod bar {\n+    pub struct Bar;\n+}\n+\n+#[cfg(test)]\n+fn foo() {\n+use bar::Bar;\n+\n+    Bar\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn respects_cfg_attr2() {\n+        check_assist(\n+            auto_import,\n+            r#\"\n+mod bar {\n+    pub struct Bar;\n+}\n+\n+#[cfg(test)]\n+const FOO: Bar = {\n+    Bar$0\n+}\n+\"#,\n+            r#\"\n+mod bar {\n+    pub struct Bar;\n+}\n+\n+#[cfg(test)]\n+const FOO: Bar = {\n+use bar::Bar;\n+\n+    Bar\n+}\n \"#,\n         );\n     }"}, {"sha": "26778ee743eb7a27b1466a50fa6d1a840825844c", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bad85e60d011b35da0a8e5dd6611934f6816d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bad85e60d011b35da0a8e5dd6611934f6816d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=0d3bad85e60d011b35da0a8e5dd6611934f6816d", "patch": "@@ -32,19 +32,20 @@ pub(crate) fn replace_qualified_name_with_use(\n \n     let target = path.syntax().text_range();\n     let scope = ImportScope::find_insert_use_container_with_macros(path.syntax(), &ctx.sema)?;\n-    let syntax = scope.as_syntax_node();\n     acc.add(\n         AssistId(\"replace_qualified_name_with_use\", AssistKind::RefactorRewrite),\n         \"Replace qualified path with use\",\n         target,\n         |builder| {\n             // Now that we've brought the name into scope, re-qualify all paths that could be\n             // affected (that is, all paths inside the node we added the `use` to).\n-            let syntax = builder.make_syntax_mut(syntax.clone());\n-            if let Some(ref import_scope) = ImportScope::from(syntax.clone()) {\n-                shorten_paths(&syntax, &path.clone_for_update());\n-                insert_use(import_scope, path, &ctx.config.insert_use);\n-            }\n+            let scope = match scope {\n+                ImportScope::File(it) => ImportScope::File(builder.make_mut(it)),\n+                ImportScope::Module(it) => ImportScope::Module(builder.make_mut(it)),\n+                ImportScope::Block(it) => ImportScope::Block(builder.make_mut(it)),\n+            };\n+            shorten_paths(scope.as_syntax_node(), &path.clone_for_update());\n+            insert_use(&scope, path, &ctx.config.insert_use);\n         },\n     )\n }"}, {"sha": "e6b4832e7db59eee41bbfdf75c4b3e742933e803", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 45, "deletions": 25, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bad85e60d011b35da0a8e5dd6611934f6816d/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bad85e60d011b35da0a8e5dd6611934f6816d/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=0d3bad85e60d011b35da0a8e5dd6611934f6816d", "patch": "@@ -5,7 +5,7 @@ use hir::Semantics;\n use syntax::{\n     algo,\n     ast::{self, make, AstNode, AttrsOwner, ModuleItemOwner, PathSegmentKind, VisibilityOwner},\n-    ted, AstToken, Direction, NodeOrToken, SyntaxNode, SyntaxToken,\n+    match_ast, ted, AstToken, Direction, NodeOrToken, SyntaxNode, SyntaxToken,\n };\n \n use crate::{\n@@ -43,16 +43,32 @@ pub struct InsertUseConfig {\n pub enum ImportScope {\n     File(ast::SourceFile),\n     Module(ast::ItemList),\n+    Block(ast::BlockExpr),\n }\n \n impl ImportScope {\n-    pub fn from(syntax: SyntaxNode) -> Option<Self> {\n-        if let Some(module) = ast::Module::cast(syntax.clone()) {\n-            module.item_list().map(ImportScope::Module)\n-        } else if let this @ Some(_) = ast::SourceFile::cast(syntax.clone()) {\n-            this.map(ImportScope::File)\n-        } else {\n-            ast::ItemList::cast(syntax).map(ImportScope::Module)\n+    fn from(syntax: SyntaxNode) -> Option<Self> {\n+        fn contains_cfg_attr(attrs: &dyn AttrsOwner) -> bool {\n+            attrs\n+                .attrs()\n+                .any(|attr| attr.as_simple_call().map_or(false, |(ident, _)| ident == \"cfg\"))\n+        }\n+        match_ast! {\n+            match syntax {\n+                ast::Module(module) => module.item_list().map(ImportScope::Module),\n+                ast::SourceFile(file) => Some(ImportScope::File(file)),\n+                ast::Fn(func) => contains_cfg_attr(&func).then(|| func.body().map(ImportScope::Block)).flatten(),\n+                ast::Const(konst) => contains_cfg_attr(&konst).then(|| match konst.body()? {\n+                    ast::Expr::BlockExpr(block) => Some(block),\n+                    _ => None,\n+                }).flatten().map(ImportScope::Block),\n+                ast::Static(statik) => contains_cfg_attr(&statik).then(|| match statik.body()? {\n+                    ast::Expr::BlockExpr(block) => Some(block),\n+                    _ => None,\n+                }).flatten().map(ImportScope::Block),\n+                _ => None,\n+\n+            }\n         }\n     }\n \n@@ -73,13 +89,15 @@ impl ImportScope {\n         match self {\n             ImportScope::File(file) => file.syntax(),\n             ImportScope::Module(item_list) => item_list.syntax(),\n+            ImportScope::Block(block) => block.syntax(),\n         }\n     }\n \n     pub fn clone_for_update(&self) -> Self {\n         match self {\n             ImportScope::File(file) => ImportScope::File(file.clone_for_update()),\n             ImportScope::Module(item_list) => ImportScope::Module(item_list.clone_for_update()),\n+            ImportScope::Block(block) => ImportScope::Block(block.clone_for_update()),\n         }\n     }\n \n@@ -96,6 +114,7 @@ impl ImportScope {\n         let mut use_stmts = match self {\n             ImportScope::File(f) => f.items(),\n             ImportScope::Module(m) => m.items(),\n+            ImportScope::Block(b) => b.items(),\n         }\n         .filter_map(use_stmt);\n         let mut res = ImportGranularityGuess::Unknown;\n@@ -319,28 +338,29 @@ fn insert_use_(\n         ted::insert(ted::Position::after(last_inner_element), make::tokens::single_newline());\n         return;\n     }\n-    match scope {\n+    let l_curly = match scope {\n         ImportScope::File(_) => {\n             cov_mark::hit!(insert_group_empty_file);\n             ted::insert(ted::Position::first_child_of(scope_syntax), make::tokens::blank_line());\n-            ted::insert(ted::Position::first_child_of(scope_syntax), use_item.syntax())\n+            ted::insert(ted::Position::first_child_of(scope_syntax), use_item.syntax());\n+            return;\n         }\n+        // don't insert the imports before the item list/block expr's opening curly brace\n+        ImportScope::Module(item_list) => item_list.l_curly_token(),\n         // don't insert the imports before the item list's opening curly brace\n-        ImportScope::Module(item_list) => match item_list.l_curly_token() {\n-            Some(b) => {\n-                cov_mark::hit!(insert_group_empty_module);\n-                ted::insert(ted::Position::after(&b), make::tokens::single_newline());\n-                ted::insert(ted::Position::after(&b), use_item.syntax());\n-            }\n-            None => {\n-                // This should never happens, broken module syntax node\n-                ted::insert(\n-                    ted::Position::first_child_of(scope_syntax),\n-                    make::tokens::blank_line(),\n-                );\n-                ted::insert(ted::Position::first_child_of(scope_syntax), use_item.syntax());\n-            }\n-        },\n+        ImportScope::Block(block) => block.l_curly_token(),\n+    };\n+    match l_curly {\n+        Some(b) => {\n+            cov_mark::hit!(insert_group_empty_module);\n+            ted::insert(ted::Position::after(&b), make::tokens::single_newline());\n+            ted::insert(ted::Position::after(&b), use_item.syntax());\n+        }\n+        None => {\n+            // This should never happens, broken module syntax node\n+            ted::insert(ted::Position::first_child_of(scope_syntax), make::tokens::blank_line());\n+            ted::insert(ted::Position::first_child_of(scope_syntax), use_item.syntax());\n+        }\n     }\n }\n "}, {"sha": "e33e5bb037b8dd5e5825b6ab66cda4fe85d74f86", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bad85e60d011b35da0a8e5dd6611934f6816d/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bad85e60d011b35da0a8e5dd6611934f6816d/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=0d3bad85e60d011b35da0a8e5dd6611934f6816d", "patch": "@@ -8,7 +8,7 @@ use parser::SyntaxKind;\n use rowan::{GreenNodeData, GreenTokenData};\n \n use crate::{\n-    ast::{self, support, AstNode, AstToken, AttrsOwner, NameOwner, SyntaxNode},\n+    ast::{self, support, AstChildren, AstNode, AstToken, AttrsOwner, NameOwner, SyntaxNode},\n     NodeOrToken, SmolStr, SyntaxElement, SyntaxToken, TokenText, T,\n };\n \n@@ -45,6 +45,12 @@ fn text_of_first_token(node: &SyntaxNode) -> TokenText<'_> {\n     }\n }\n \n+impl ast::BlockExpr {\n+    pub fn items(&self) -> AstChildren<ast::Item> {\n+        support::children(self.syntax())\n+    }\n+}\n+\n #[derive(Debug, PartialEq, Eq, Clone)]\n pub enum Macro {\n     MacroRules(ast::MacroRules),"}]}