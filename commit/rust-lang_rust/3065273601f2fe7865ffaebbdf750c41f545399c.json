{"sha": "3065273601f2fe7865ffaebbdf750c41f545399c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNjUyNzM2MDFmMmZlNzg2NWZmYWViYmRmNzUwYzQxZjU0NTM5OWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-07T08:19:14Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-07T08:19:14Z"}, "message": "simplify the interpreter locals, since they always must be backed by an allocation", "tree": {"sha": "397a90a7f5cc406bcf89ab146274a73d723451e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/397a90a7f5cc406bcf89ab146274a73d723451e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3065273601f2fe7865ffaebbdf750c41f545399c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYR8YCAAoJEFbW7qD8Z6xG9RIQAK7N2rGcElpux+zgB7n8F5xJ\nwUkhlS/toDHK18ipZ0YnYJ/YFAfxAu8VMglSph0Y96SIh7PA4m2Bn2SEUaIht//U\nGC0//bGJomeqwSnhVzoPb1+pWXNQ7ox9N2G31qyKQoKyW/On+x3zGknbUTfjNCVN\ndIT/8jQPMQovL4mh3VdNikWR7Y1I63YtbqlgdNavR35JzOmvnkdokkmjyq8hrAod\nIxdlseeAOEDlwKJtDdqIxaW+zwV3DTxIK+f4K6Y2b4uzr/uP246m7cZgzsf0UYB9\nxdlOEbYCdGNPov2N+cqqLFUtW5REhmXEGkOterqE5Di6NFgcsZBOmBdLznvnFIOx\ng5+JBaqtO4Srf5+5GLjBqGkYrBr1U8oVd/+H0MDrJimAbEOSfgxKkzxCX3jd1c4z\nBC4zsNDhWQHyhvatuN9+1wNhu5+n2qjFExzuAkfcVuR0VVm627qhlmVXh4WDG/lR\nrHtzXqZPpOXJcGoO83fdHVWQ0xlJQnqSuHHjDWbGQP4V7QfGvmmfW97ms0r+CMo2\n9Sce7AT0YcYywXss9rJ142bRXrlzYcNYmuXiw8K1V7wAUPAcj6Tutbh0P5m9IDmr\nUa6NLeIiR3H0dP+jHlInbfvQxqdsGOmuPPvG3ASnJVYyEyI3WA0yomlXjaoIpaqh\nMqNSiJ2KUbX+oGLMbaqh\n=J0Pj\n-----END PGP SIGNATURE-----", "payload": "tree 397a90a7f5cc406bcf89ab146274a73d723451e7\nparent bfe1efcbf8a30974800ec797bc9fb7307e4b38fb\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1481098754 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1481098754 +0100\n\nsimplify the interpreter locals, since they always must be backed by an allocation"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3065273601f2fe7865ffaebbdf750c41f545399c", "html_url": "https://github.com/rust-lang/rust/commit/3065273601f2fe7865ffaebbdf750c41f545399c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3065273601f2fe7865ffaebbdf750c41f545399c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe1efcbf8a30974800ec797bc9fb7307e4b38fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe1efcbf8a30974800ec797bc9fb7307e4b38fb", "html_url": "https://github.com/rust-lang/rust/commit/bfe1efcbf8a30974800ec797bc9fb7307e4b38fb"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "a8ccfae3dc7be7f54401d3a662d44620386942f2", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3065273601f2fe7865ffaebbdf750c41f545399c/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3065273601f2fe7865ffaebbdf750c41f545399c/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=3065273601f2fe7865ffaebbdf750c41f545399c", "patch": "@@ -86,7 +86,7 @@ pub struct Frame<'tcx> {\n     /// This is pure interpreter magic and has nothing to do with how rustc does it\n     /// An example is calling an FnMut closure that has been converted to a FnOnce closure\n     /// If they are Value::ByRef, their memory will be freed when the stackframe finishes\n-    pub interpreter_temporaries: Vec<Value>,\n+    pub interpreter_temporaries: Vec<Pointer>,\n \n     ////////////////////////////////////////////////////////////////////////////////\n     // Current position within the function\n@@ -333,7 +333,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         substs: &'tcx Substs<'tcx>,\n         return_lvalue: Lvalue<'tcx>,\n         return_to_block: StackPopCleanup,\n-        temporaries: Vec<Value>,\n+        temporaries: Vec<Pointer>,\n     ) -> EvalResult<'tcx, ()> {\n         ::log_settings::settings().indentation += 1;\n \n@@ -393,8 +393,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             StackPopCleanup::None => {},\n         }\n         // deallocate all locals that are backed by an allocation\n-        for local in frame.locals.into_iter().filter_map(|l| l).chain(frame.interpreter_temporaries) {\n-            if let Value::ByRef(ptr) = local {\n+        for local in frame.locals.into_iter() {\n+            if let Some(Value::ByRef(ptr)) = local {\n+                trace!(\"deallocating local\");\n                 self.memory.dump(ptr.alloc_id);\n                 match self.memory.deallocate(ptr) {\n                     // Any frozen memory means that it belongs to a constant or something referenced\n@@ -406,6 +407,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n         }\n+        // deallocate all temporary allocations\n+        for ptr in frame.interpreter_temporaries {\n+            trace!(\"deallocating temporary allocation\");\n+            self.memory.dump(ptr.alloc_id);\n+            self.memory.deallocate(ptr)?;\n+        }\n         Ok(())\n     }\n "}, {"sha": "837c7011125274f6a17105bcb8d45491b5bf45b6", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3065273601f2fe7865ffaebbdf750c41f545399c/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3065273601f2fe7865ffaebbdf750c41f545399c/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=3065273601f2fe7865ffaebbdf750c41f545399c", "patch": "@@ -432,7 +432,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         def_id: DefId,\n         substs: &'tcx Substs<'tcx>,\n         args: &mut Vec<(Value, Ty<'tcx>)>,\n-    ) -> EvalResult<'tcx, (DefId, &'tcx Substs<'tcx>, Vec<Value>)> {\n+    ) -> EvalResult<'tcx, (DefId, &'tcx Substs<'tcx>, Vec<Pointer>)> {\n         let trait_ref = ty::TraitRef::from_method(self.tcx, trait_id, substs);\n         let trait_ref = self.tcx.normalize_associated_type(&ty::Binder(trait_ref));\n \n@@ -481,13 +481,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 let ptr = self.alloc_ptr(args[0].1)?;\n                                 let kind = self.ty_to_primval_kind(args[0].1)?;\n                                 self.memory.write_primval(ptr, primval, kind)?;\n-                                temporaries.push(Value::ByRef(ptr));\n+                                temporaries.push(ptr);\n                                 ptr\n                             },\n                             Value::ByValPair(a, b) => {\n                                 let ptr = self.alloc_ptr(args[0].1)?;\n                                 self.write_pair_to_ptr(a, b, ptr, args[0].1)?;\n-                                temporaries.push(Value::ByRef(ptr));\n+                                temporaries.push(ptr);\n                                 ptr\n                             },\n                         };"}]}