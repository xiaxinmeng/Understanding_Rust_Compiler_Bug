{"sha": "9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZDdkYTkwNGI0NmZmN2FhNzhjMmUyY2MxOTg2YzQ5NzVhZWNjYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-25T15:27:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-25T15:27:18Z"}, "message": "Auto merge of #47740 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 10 pull requests\n\n- Successful merges: #47534, #47609, #47679, #47691, #47700, #47702, #47717, #47721, #47726, #47729\n- Failed merges:", "tree": {"sha": "571e826bfff65a9f2ec98b0d3b63086890e4bbc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/571e826bfff65a9f2ec98b0d3b63086890e4bbc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "html_url": "https://github.com/rust-lang/rust/commit/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf26f8a133039bfeb5b9f684df9f547278db206", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf26f8a133039bfeb5b9f684df9f547278db206", "html_url": "https://github.com/rust-lang/rust/commit/4cf26f8a133039bfeb5b9f684df9f547278db206"}, {"sha": "89ff1226e539252f15d4e33de99fa6410a2c83f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/89ff1226e539252f15d4e33de99fa6410a2c83f1", "html_url": "https://github.com/rust-lang/rust/commit/89ff1226e539252f15d4e33de99fa6410a2c83f1"}], "stats": {"total": 298, "additions": 215, "deletions": 83}, "files": [{"sha": "7bf343ba3f61f9a66c5f3d338380a1b4c1ff821d", "filename": "src/Cargo.lock", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -179,7 +179,7 @@ dependencies = [\n  \"crypto-hash 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"docopt 0.8.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -265,6 +265,15 @@ name = \"cfg-if\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"chrono\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"time 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"clap\"\n version = \"2.29.0\"\n@@ -601,6 +610,18 @@ dependencies = [\n  \"regex 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"env_logger\"\n+version = \"0.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"atty 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"error-chain\"\n version = \"0.8.1\"\n@@ -2654,6 +2675,16 @@ dependencies = [\n name = \"tidy\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"time\"\n+version = \"0.1.39\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"toml\"\n version = \"0.2.1\"\n@@ -2903,6 +2934,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cargo_metadata 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20d6fb2b5574726329c85cdba0df0347fddfec3cf9c8b588f9931708280f5643\"\n \"checksum cc 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"deaf9ec656256bb25b404c51ef50097207b9cbb29c933d31f92cae5a8a0ffee0\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n+\"checksum chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c20ebe0b2b08b0aeddba49c609fe7957ba2e33449882cb186a180bc60682fa9\"\n \"checksum clap 2.29.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"110d43e343eb29f4f51c1db31beb879d546db27998577e5715270a54bcf41d3f\"\n \"checksum cmake 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56d741ea7a69e577f6d06b36b7dff4738f680593dc27a701ffa8506b73ce28bb\"\n \"checksum coco 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c06169f5beb7e31c7c67ebf5540b8b472d23e3eade3b2ec7d1f5b504a85f91bd\"\n@@ -2929,6 +2961,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be4551092f4d519593039259a9ed8daedf0da12e5109c5280338073eaeb81180\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ddf21e73e016298f5cb37d6ef8e8da8e39f91f9ec8b0df44b7deb16a9f8cd5b\"\n+\"checksum env_logger 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f15f0b172cb4f52ed5dbf47f774a387cd2315d1bf7894ab5af9b083ae27efa5a\"\n \"checksum error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff511d5dc435d703f4971bc399647c9bc38e20cb41452e3b9feb4765419ed3f3\"\n \"checksum error-chain 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6930e04918388a9a2e41d518c25cf679ccafe26733fb4127dbf21993f2575d46\"\n \"checksum failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"934799b6c1de475a012a02dab0ace1ace43789ee4b99bcfbf1a2e3e8ced5de82\"\n@@ -3085,6 +3118,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n \"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n \"checksum thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"279ef31c19ededf577bfd12dfae728040a21f635b06a24cd670ff510edd38963\"\n+\"checksum time 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a15375f1df02096fb3317256ce2cee6a1f42fc84ea5ad5fc8c421cfe40c73098\"\n \"checksum toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"736b60249cb25337bc196faa43ee12c705e426f3d55c214d73a4e7be06f92cb4\"\n \"checksum toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7540f4ffc193e0d3c94121edb19b055670d369f77d5804db11ae053a45b6e7e\"\n \"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\""}, {"sha": "5f342eb570502bd4897e896d20b6692ab201b0c8", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -47,13 +47,6 @@ ENV \\\n     CC_x86_64_sun_solaris=x86_64-sun-solaris2.10-gcc \\\n     CXX_x86_64_sun_solaris=x86_64-sun-solaris2.10-g++\n \n-# FIXME(EdSchouten): Remove this once cc \u22651.0.4 has been merged. It can\n-# automatically pick the right compiler path.\n-ENV \\\n-    AR_x86_64_unknown_cloudabi=x86_64-unknown-cloudabi-ar \\\n-    CC_x86_64_unknown_cloudabi=x86_64-unknown-cloudabi-clang \\\n-    CXX_x86_64_unknown_cloudabi=x86_64-unknown-cloudabi-clang++\n-\n ENV TARGETS=x86_64-unknown-fuchsia\n ENV TARGETS=$TARGETS,aarch64-unknown-fuchsia\n ENV TARGETS=$TARGETS,sparcv9-sun-solaris"}, {"sha": "8c04d849e8d0a9d5f800c4c8878ed2cde026d22e", "filename": "src/ci/docker/dist-various-2/build-cloudabi-toolchain.sh", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-cloudabi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-cloudabi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-cloudabi-toolchain.sh?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -40,12 +40,6 @@ ln -s ../lib/llvm-5.0/bin/clang /usr/bin/${target}-c++\n ln -s ../lib/llvm-5.0/bin/lld /usr/bin/${target}-ld\n ln -s ../../${target} /usr/lib/llvm-5.0/${target}\n \n-# FIXME(EdSchouten): Remove this once cc \u22651.0.4 has been merged. It\n-# can make use of ${target}-cc and ${target}-c++, without incorrectly\n-# assuming it's MSVC.\n-ln -s ../lib/llvm-5.0/bin/clang /usr/bin/${target}-clang\n-ln -s ../lib/llvm-5.0/bin/clang /usr/bin/${target}-clang++\n-\n # Install the C++ runtime libraries from CloudABI Ports.\n echo deb https://nuxi.nl/distfiles/cloudabi-ports/debian/ cloudabi cloudabi > \\\n     /etc/apt/sources.list.d/cloudabi.list"}, {"sha": "5f25894afd76d4bbb5437fbc4c23b7590d250e8a", "filename": "src/doc/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Fdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Fdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2FREADME.md?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -29,4 +29,4 @@ rustdoc reference.md\n An overview of how to use the `rustdoc` command is available [in the docs][1].\n Further details are available from the command line by with `rustdoc --help`.\n \n-[1]: https://github.com/rust-lang/rust/blob/master/src/doc/book/documentation.md\n+[1]: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md"}, {"sha": "447ce46ee5c5c46415e41411780202aff027ee5b", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -28,6 +28,7 @@ use util::nodemap::FxHashMap;\n \n use syntax::ast;\n use syntax::symbol::Symbol;\n+use syntax_pos::Span;\n use hir::itemlikevisit::ItemLikeVisitor;\n use hir;\n \n@@ -104,17 +105,18 @@ struct LanguageItemCollector<'a, 'tcx: 'a> {\n \n impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n-        if let Some(value) = extract(&item.attrs) {\n+        if let Some((value, span)) = extract(&item.attrs) {\n             let item_index = self.item_refs.get(&*value.as_str()).cloned();\n \n             if let Some(item_index) = item_index {\n                 let def_id = self.tcx.hir.local_def_id(item.id);\n                 self.collect_item(item_index, def_id);\n             } else {\n-                let span = self.tcx.hir.span(item.id);\n-                span_err!(self.tcx.sess, span, E0522,\n-                          \"definition of an unknown language item: `{}`.\",\n-                          value);\n+                let mut err = struct_span_err!(self.tcx.sess, span, E0522,\n+                                               \"definition of an unknown language item: `{}`\",\n+                                               value);\n+                err.span_label(span, format!(\"definition of unknown language item `{}`\", value));\n+                err.emit();\n             }\n         }\n     }\n@@ -177,11 +179,11 @@ impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> {\n     }\n }\n \n-pub fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n+pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n     for attribute in attrs {\n         if attribute.check_name(\"lang\") {\n             if let Some(value) = attribute.value_str() {\n-                return Some(value)\n+                return Some((value, attribute.span));\n             }\n         }\n     }"}, {"sha": "95e75b4f0646efc42442ce7a60c425aad22fa152", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -55,7 +55,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n pub fn link_name(attrs: &[ast::Attribute]) -> Option<Symbol> {\n-    lang_items::extract(attrs).and_then(|name| {\n+    lang_items::extract(attrs).and_then(|(name, _)| {\n         $(if name == stringify!($name) {\n             Some(Symbol::intern(stringify!($sym)))\n         } else)* {\n@@ -129,7 +129,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem) {\n-        if let Some(lang_item) = lang_items::extract(&i.attrs) {\n+        if let Some((lang_item, _)) = lang_items::extract(&i.attrs) {\n             self.register(&lang_item.as_str(), i.span);\n         }\n         intravisit::walk_foreign_item(self, i)"}, {"sha": "e737328b75ea6befe321217d76fcef7aa24105d4", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -1273,14 +1273,6 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n                              &note,\n                              errors::Level::Note);\n             }\n-            if match env::var_os(\"RUST_BACKTRACE\") {\n-                Some(val) => &val != \"0\",\n-                None => false,\n-            } {\n-                handler.emit(&MultiSpan::new(),\n-                             \"run with `RUST_BACKTRACE=1` for a backtrace\",\n-                             errors::Level::Note);\n-            }\n \n             eprintln!(\"{}\", str::from_utf8(&data.lock().unwrap()).unwrap());\n         }"}, {"sha": "5a321053b7ae8a2ece1c295d1ad67755455faf2a", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -102,11 +102,18 @@ impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n         }\n \n         if let ast::UseTreeKind::Nested(ref items) = use_tree.kind {\n+            // If it's the parent group, cover the entire use item\n+            let span = if nested {\n+                use_tree.span\n+            } else {\n+                self.item_span\n+            };\n+\n             if items.len() == 0 {\n                 self.unused_imports\n                     .entry(self.base_id)\n                     .or_insert_with(NodeMap)\n-                    .insert(id, self.item_span);\n+                    .insert(id, span);\n             }\n         } else {\n             let base_id = self.base_id;"}, {"sha": "d2702d0810ed9253d3a6271b482458dcf797afc8", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -15,7 +15,7 @@ use rustc::infer::InferOk;\n use rustc::traits::ObligationCause;\n \n use syntax::ast;\n-use syntax::util::parser::AssocOp;\n+use syntax::util::parser::PREC_POSTFIX;\n use syntax_pos::{self, Span};\n use rustc::hir;\n use rustc::hir::print;\n@@ -336,7 +336,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // For now, don't suggest casting with `as`.\n         let can_cast = false;\n \n-        let needs_paren = expr.precedence().order() < (AssocOp::As.precedence() as i8);\n+        let needs_paren = expr.precedence().order() < (PREC_POSTFIX as i8);\n \n         if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n             let msg = format!(\"you can cast an `{}` to `{}`\", checked_ty, expected_ty);"}, {"sha": "4556b5a42b3d61fd6946fc5bdd5755baeb5a5dd4", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -513,8 +513,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // this isn't perfect (that is, there are cases when\n                 // implementing a trait would be legal but is rejected\n                 // here).\n-                (type_is_local || info.def_id.is_local())\n-                    && self.associated_item(info.def_id, item_name, Namespace::Value).is_some()\n+                (type_is_local || info.def_id.is_local()) &&\n+                    self.associated_item(info.def_id, item_name, Namespace::Value)\n+                        .filter(|item| {\n+                            // We only want to suggest public or local traits (#45781).\n+                            item.vis == ty::Visibility::Public || info.def_id.is_local()\n+                        })\n+                        .is_some()\n             })\n             .collect::<Vec<_>>();\n "}, {"sha": "75a74e1069c3182afacc04e056a23d239da21410", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -75,12 +75,13 @@ This API is completely unstable and subject to change.\n #![feature(advanced_slice_patterns)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(crate_visibility_modifier)]\n #![feature(conservative_impl_trait)]\n #![feature(copy_closures, clone_closures)]\n+#![feature(crate_visibility_modifier)]\n #![feature(from_ref)]\n #![feature(match_default_bindings)]\n #![feature(never_type)]\n+#![feature(option_filter)]\n #![feature(quote)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "e0764640e916514db1a788007276c3060010b5cf", "filename": "src/librustdoc/html/static/themes/main.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fmain.css?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -189,6 +189,10 @@ a.test-arrow {\n .stab.deprecated { background: #F3DFFF; border-color: #7F0087; }\n .stab.portability { background: #C4ECFF; border-color: #7BA5DB; }\n \n+.module-item .stab {\n+\tcolor: #000;\n+}\n+\n #help > div {\n \tbackground: #e9e9e9;\n \tborder-color: #bfbfbf;"}, {"sha": "3d4377853464b84b2cdeafddbca7efe22f155541", "filename": "src/test/compile-fail/E0522.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fcompile-fail%2FE0522.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fcompile-fail%2FE0522.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0522.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -11,6 +11,7 @@\n #![feature(lang_items)]\n \n #[lang = \"cookie\"]\n-fn cookie() -> ! { //~ E0522\n+fn cookie() -> ! {\n+//~^^ ERROR definition of an unknown language item: `cookie` [E0522]\n     loop {}\n }"}, {"sha": "96b7362e4d93942b791f7e0550d3c1d96a3dde13", "filename": "src/test/run-pass/nll/mutating_references.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Frun-pass%2Fnll%2Fmutating_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Frun-pass%2Fnll%2Fmutating_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fmutating_references.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,17 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z borrowck=mir -Z nll\n-\n-// This example comes from the NLL RFC.\n+#![feature(nll)]\n \n struct List<T> {\n     value: T,\n     next: Option<Box<List<T>>>,\n }\n \n-fn to_refs<T>(list: &mut List<T>) -> Vec<&mut T> {\n-    let mut list = list;\n+fn to_refs<T>(mut list: &mut List<T>) -> Vec<&mut T> {\n     let mut result = vec![];\n     loop {\n         result.push(&mut list.value);\n@@ -31,4 +28,7 @@ fn to_refs<T>(list: &mut List<T>) -> Vec<&mut T> {\n }\n \n fn main() {\n+    let mut list = List { value: 1, next: None };\n+    let vec = to_refs(&mut list);\n+    assert_eq!(vec![&mut 1], vec);\n }", "previous_filename": "src/test/run-pass/borrowck/borrowck-nll-iterating-and-updating.rs"}, {"sha": "882113b8176ea5ccd2648a87d1abc3446cbe6b47", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -95,10 +95,8 @@ error[E0599]: no method named `method` found for type `Foo` in the current scope\n    = note: the following traits define an item `method`, perhaps you need to implement one of them:\n            candidate #1: `foo::Bar`\n            candidate #2: `no_method_suggested_traits::foo::PubPub`\n-           candidate #3: `no_method_suggested_traits::bar::PubPriv`\n-           candidate #4: `no_method_suggested_traits::qux::PrivPub`\n-           candidate #5: `no_method_suggested_traits::quz::PrivPriv`\n-           candidate #6: `no_method_suggested_traits::Reexported`\n+           candidate #3: `no_method_suggested_traits::qux::PrivPub`\n+           candidate #4: `no_method_suggested_traits::Reexported`\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&Foo>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:52:43\n@@ -110,10 +108,8 @@ error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::box\n    = note: the following traits define an item `method`, perhaps you need to implement one of them:\n            candidate #1: `foo::Bar`\n            candidate #2: `no_method_suggested_traits::foo::PubPub`\n-           candidate #3: `no_method_suggested_traits::bar::PubPriv`\n-           candidate #4: `no_method_suggested_traits::qux::PrivPub`\n-           candidate #5: `no_method_suggested_traits::quz::PrivPriv`\n-           candidate #6: `no_method_suggested_traits::Reexported`\n+           candidate #3: `no_method_suggested_traits::qux::PrivPub`\n+           candidate #4: `no_method_suggested_traits::Reexported`\n \n error[E0599]: no method named `method2` found for type `u64` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:55:10"}, {"sha": "f9524696ed724c80e8fb061dc93478f612ba3300", "filename": "src/test/ui/method-call-err-msg.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -38,10 +38,8 @@ error[E0599]: no method named `take` found for type `Foo` in the current scope\n            `&mut Foo : std::iter::Iterator`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following traits define an item `take`, perhaps you need to implement one of them:\n-           candidate #1: `std::collections::hash::Recover`\n-           candidate #2: `std::io::Read`\n-           candidate #3: `std::iter::Iterator`\n-           candidate #4: `alloc::btree::Recover`\n+           candidate #1: `std::io::Read`\n+           candidate #2: `std::iter::Iterator`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "79089b2a93c7340e5bda63c953be4e11905e137d", "filename": "src/test/ui/owl-import-generates-unused-import-lint.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4cf26f8a133039bfeb5b9f684df9f547278db206/src%2Ftest%2Fui%2Fowl-import-generates-unused-import-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cf26f8a133039bfeb5b9f684df9f547278db206/src%2Ftest%2Fui%2Fowl-import-generates-unused-import-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fowl-import-generates-unused-import-lint.stderr?ref=4cf26f8a133039bfeb5b9f684df9f547278db206", "patch": "@@ -1,14 +0,0 @@\n-error: unused import: `*`\n-  --> $DIR/owl-import-generates-unused-import-lint.rs:18:14\n-   |\n-18 | use foo::{*, *}; //~ ERROR unused import: `*`\n-   |              ^\n-   |\n-note: lint level defined here\n-  --> $DIR/owl-import-generates-unused-import-lint.rs:12:9\n-   |\n-12 | #![deny(unused_imports)]\n-   |         ^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "99bee0d3c59e2a488f0ad3a14677cace7ac5c210", "filename": "src/test/ui/suggestions/dont-suggest-private-trait-method.rs", "status": "renamed", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-private-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-private-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-private-trait-method.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,15 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_nested_groups)]\n-#![deny(unused_imports)]\n-\n-mod foo {\n-    pub enum Bar {}\n-}\n-\n-use foo::{*, *}; //~ ERROR unused import: `*`\n+struct T;\n \n fn main() {\n-    let _: Bar;\n+    T::new();\n+    //~^ ERROR no function or associated item named `new` found for type `T` in the current scope\n }", "previous_filename": "src/test/ui/owl-import-generates-unused-import-lint.rs"}, {"sha": "97f424f9fbf6d49afb4ea4411849443b306fd0a5", "filename": "src/test/ui/suggestions/dont-suggest-private-trait-method.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-private-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-private-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-private-trait-method.stderr?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -0,0 +1,11 @@\n+error[E0599]: no function or associated item named `new` found for type `T` in the current scope\n+  --> $DIR/dont-suggest-private-trait-method.rs:14:5\n+   |\n+11 | struct T;\n+   | --------- function or associated item `new` not found for this\n+...\n+14 |     T::new();\n+   |     ^^^^^^ function or associated item not found in `T`\n+\n+error: aborting due to previous error\n+"}, {"sha": "69bfdfa94b13e0866c55986063d6e22ab7328f71", "filename": "src/test/ui/suggestions/numeric-cast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -312,4 +312,9 @@ fn main() {\n     foo::<f32>(x_f64);\n     //~^ ERROR mismatched types\n     foo::<f32>(x_f32);\n+\n+    foo::<u32>(x_u8 as u16);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(-x_i8);\n+    //~^ ERROR mismatched types\n }"}, {"sha": "cef22ad922e849a23406cb4014e9e2929a98ad27", "filename": "src/test/ui/suggestions/numeric-cast.stderr", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -882,5 +882,25 @@ error[E0308]: mismatched types\n 312 |     foo::<f32>(x_f64);\n     |                ^^^^^ expected f32, found f64\n \n-error: aborting due to 132 previous errors\n+error[E0308]: mismatched types\n+   --> $DIR/numeric-cast.rs:316:16\n+    |\n+316 |     foo::<u32>(x_u8 as u16);\n+    |                ^^^^^^^^^^^ expected u32, found u16\n+help: you can cast an `u16` to `u32`, which will zero-extend the source value\n+    |\n+316 |     foo::<u32>((x_u8 as u16).into());\n+    |                ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+   --> $DIR/numeric-cast.rs:318:16\n+    |\n+318 |     foo::<i32>(-x_i8);\n+    |                ^^^^^ expected i32, found i8\n+help: you can cast an `i8` to `i32`, which will sign-extend the source value\n+    |\n+318 |     foo::<i32>((-x_i8).into());\n+    |                ^^^^^^^^^^^^^^\n+\n+error: aborting due to 134 previous errors\n "}, {"sha": "3c2105997127d663c0aef2425346f44d1038e004", "filename": "src/test/ui/unknown-language-item.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Funknown-language-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Funknown-language-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-language-item.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+#![feature(lang_items)]\n+\n+#[lang = \"foo\"]\n+fn bar() -> ! {\n+//~^^ ERROR definition of an unknown language item: `foo`\n+    loop {}\n+}\n+\n+fn main() {}"}, {"sha": "c4b4a789c3dcc398f2bc8538292a3108738dab4d", "filename": "src/test/ui/unknown-language-item.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Funknown-language-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Funknown-language-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-language-item.stderr?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -0,0 +1,8 @@\n+error[E0522]: definition of an unknown language item: `foo`\n+  --> $DIR/unknown-language-item.rs:14:1\n+   |\n+14 | #[lang = \"foo\"]\n+   | ^^^^^^^^^^^^^^^ definition of unknown language item `foo`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ddbf54fdd48b1150273b96fbd687427e825205a5", "filename": "src/test/ui/use-nested-groups-unused-imports.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fuse-nested-groups-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fuse-nested-groups-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-nested-groups-unused-imports.rs?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(use_nested_groups)]\n+#![allow(dead_code)]\n+#![deny(unused_imports)]\n+\n+mod foo {\n+    pub mod bar {\n+        pub mod baz {\n+            pub struct Bar();\n+        }\n+        pub mod foobar {}\n+    }\n+\n+    pub struct Foo();\n+}\n+\n+use foo::{Foo, bar::{baz::{}, foobar::*}, *};\n+    //~^ ERROR unused imports: `*`, `Foo`, `baz::{}`, `foobar::*`\n+use foo::bar::baz::{*, *};\n+    //~^ ERROR unused import: `*`\n+use foo::{};\n+    //~^ ERROR unused import: `use foo::{};`\n+\n+fn main() {\n+    let _: Bar;\n+}"}, {"sha": "0686310dbf53a1c58bd9e4f6769992c0969d0759", "filename": "src/test/ui/use-nested-groups-unused-imports.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fuse-nested-groups-unused-imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6/src%2Ftest%2Fui%2Fuse-nested-groups-unused-imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-nested-groups-unused-imports.stderr?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -0,0 +1,26 @@\n+error: unused imports: `*`, `Foo`, `baz::{}`, `foobar::*`\n+  --> $DIR/use-nested-groups-unused-imports.rs:26:11\n+   |\n+26 | use foo::{Foo, bar::{baz::{}, foobar::*}, *};\n+   |           ^^^        ^^^^^^^  ^^^^^^^^^   ^\n+   |\n+note: lint level defined here\n+  --> $DIR/use-nested-groups-unused-imports.rs:13:9\n+   |\n+13 | #![deny(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: unused import: `*`\n+  --> $DIR/use-nested-groups-unused-imports.rs:28:24\n+   |\n+28 | use foo::bar::baz::{*, *};\n+   |                        ^\n+\n+error: unused import: `use foo::{};`\n+  --> $DIR/use-nested-groups-unused-imports.rs:30:1\n+   |\n+30 | use foo::{};\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "91e36aa86c7037de50642f2fec1cf47c3d18af02", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "patch": "@@ -1 +1 @@\n-Subproject commit 6a8eb71f6d226f9ac869dbacd5ff6aa76deef1c4\n+Subproject commit 91e36aa86c7037de50642f2fec1cf47c3d18af02"}]}