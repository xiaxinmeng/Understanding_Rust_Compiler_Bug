{"sha": "4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNGY4ZmYwYTNlZWIwODU1ZjAzYWQ4OGMyZjExZjEyNzYxMDQxZjA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-21T19:44:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-30T20:14:15Z"}, "message": "Implement Drop for Box", "tree": {"sha": "a3754f8245c5d5ecad4afac3db82eb8445ef523e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3754f8245c5d5ecad4afac3db82eb8445ef523e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "html_url": "https://github.com/rust-lang/rust/commit/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffba0cea621c2609582b4e201b76b3b19860ec4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffba0cea621c2609582b4e201b76b3b19860ec4f", "html_url": "https://github.com/rust-lang/rust/commit/ffba0cea621c2609582b4e201b76b3b19860ec4f"}], "stats": {"total": 51, "additions": 18, "deletions": 33}, "files": [{"sha": "b6f490e09cddf645b9daaa00864b87e6b63e1bf9", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "patch": "@@ -293,6 +293,14 @@ impl<T: ?Sized> Box<T> {\n     }\n }\n \n+#[cfg(not(stage0))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+unsafe impl<#[may_dangle] T: ?Sized> Drop for Box<T> {\n+    fn drop(&mut self) {\n+        // FIXME: Do nothing, drop is currently performed by compiler.\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Default> Default for Box<T> {\n     /// Creates a `Box<T>`, with the `Default` value for T."}, {"sha": "00c6dca21b1ef4f5f2a031973b1008498785b420", "filename": "src/librustc/ty/contents.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontents.rs?ref=4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "patch": "@@ -56,12 +56,8 @@ def_type_content_sets! {\n         // InteriorAll                         = 0b00000000__00000000__1111,\n \n         // Things that are owned by the value (second and third nibbles):\n-        OwnsOwned                           = 0b0000_0000__0000_0001__0000,\n         OwnsDtor                            = 0b0000_0000__0000_0010__0000,\n-        OwnsAll                             = 0b0000_0000__1111_1111__0000,\n-\n-        // Things that mean drop glue is necessary\n-        NeedsDrop                           = 0b0000_0000__0000_0111__0000,\n+        // OwnsAll                             = 0b0000_0000__1111_1111__0000,\n \n         // All bits\n         All                                 = 0b1111_1111__1111_1111__1111\n@@ -77,10 +73,6 @@ impl TypeContents {\n         (self.bits & tc.bits) != 0\n     }\n \n-    pub fn owns_owned(&self) -> bool {\n-        self.intersects(TC::OwnsOwned)\n-    }\n-\n     pub fn interior_param(&self) -> bool {\n         self.intersects(TC::InteriorParam)\n     }\n@@ -90,12 +82,7 @@ impl TypeContents {\n     }\n \n     pub fn needs_drop(&self, _: TyCtxt) -> bool {\n-        self.intersects(TC::NeedsDrop)\n-    }\n-\n-    /// Includes only those bits that still apply when indirected through a `Box` pointer\n-    pub fn owned_pointer(&self) -> TypeContents {\n-        TC::OwnsOwned | (*self & TC::OwnsAll)\n+        self.intersects(TC::OwnsDtor)\n     }\n \n     pub fn union<I, T, F>(v: I, mut f: F) -> TypeContents where\n@@ -104,10 +91,6 @@ impl TypeContents {\n     {\n         v.into_iter().fold(TC::None, |tc, ty| tc | f(ty))\n     }\n-\n-    pub fn has_dtor(&self) -> bool {\n-        self.intersects(TC::OwnsDtor)\n-    }\n }\n \n impl ops::BitOr for TypeContents {\n@@ -223,10 +206,6 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                                         |ty| tc_ty(tcx, *ty, cache))\n                 }\n \n-                ty::TyAdt(def, _) if def.is_box() => {\n-                    tc_ty(tcx, ty.boxed_ty(), cache).owned_pointer()\n-                }\n-\n                 ty::TyAdt(def, substs) => {\n                     let mut res =\n                         TypeContents::union(&def.variants, |v| {\n@@ -237,7 +216,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n                     if def.is_union() {\n                         // unions don't have destructors regardless of the child types\n-                        res = res - TC::NeedsDrop;\n+                        res = res - TC::OwnsDtor;\n                     }\n \n                     if def.has_dtor() {"}, {"sha": "113534e4529cdc6c87c8855cbd11c366b392bd76", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "patch": "@@ -1142,8 +1142,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn boxed_ty(&self) -> Ty<'tcx> {\n         match self.sty {\n-            TyAdt(def, substs) if def.is_box() =>\n-                substs.types().next().expect(\"Box<T> doesn't have type parameters\"),\n+            TyAdt(def, substs) if def.is_box() => substs.type_at(0),\n             _ => bug!(\"`boxed_ty` is called on non-box type {:?}\", self),\n         }\n     }"}, {"sha": "9e89a3689c7acd23c7894a16270052336813d430", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "patch": "@@ -895,7 +895,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n         match ty.sty {\n             ty::TyAdt(def, _) => {\n-                if def.has_dtor() {\n+                if def.has_dtor() && !def.is_box() {\n                     self.tcx.sess.span_warn(\n                         c.source_info.span,\n                         &format!(\"dataflow bug??? moving out of type with dtor {:?}\","}, {"sha": "7cf6ab2999c05df88e809b115ae301d691dcb0c1", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             // error: can't move out of borrowed content\n             ty::TyRef(..) | ty::TyRawPtr(..) => return Err(MovePathError::IllegalMove),\n             // error: can't move out of struct with destructor\n-            ty::TyAdt(adt, _) if adt.has_dtor() =>\n+            ty::TyAdt(adt, _) if adt.has_dtor() && !adt.is_box() =>\n                 return Err(MovePathError::IllegalMove),\n             // move out of union - always move the entire union\n             ty::TyAdt(adt, _) if adt.is_union() =>"}, {"sha": "a0c36139ddcd2ec8c8eac363f737b58e0577ac9f", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "patch": "@@ -248,7 +248,7 @@ fn lvalue_contents_drop_state_cannot_differ<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n                    lv, ty);\n             true\n         }\n-        ty::TyAdt(def, _) if def.has_dtor() || def.is_union() => {\n+        ty::TyAdt(def, _) if (def.has_dtor() && !def.is_box()) || def.is_union() => {\n             debug!(\"lvalue_contents_drop_state_cannot_differ lv: {:?} ty: {:?} Drop => true\",\n                    lv, ty);\n             true"}, {"sha": "392c270c130a857b09886bc64e51ad349a910fb2", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "patch": "@@ -740,7 +740,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         _ => None\n     };\n \n-    if let Some(destructor_did) = destructor_did {\n+    if let (Some(destructor_did), false) = (destructor_did, ty.is_box()) {\n         use rustc::ty::ToPolyTraitRef;\n \n         let drop_trait_def_id = scx.tcx()"}, {"sha": "350c8f950ddf45592fc3c9ec80912f70bd7e6d1b", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "patch": "@@ -211,9 +211,8 @@ pub fn implement_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, g: DropGlueKi\n \n     let bcx = match t.sty {\n         ty::TyAdt(def, _) if def.is_box() => {\n-            // Support for Box is built-in and its drop glue is\n-            // special. It may move to library and have Drop impl. As\n-            // a safe-guard, assert Box not used with TyContents.\n+            // Support for Box is built-in as yet and its drop glue is special\n+            // despite having a dummy Drop impl in the library.\n             assert!(!skip_dtor);\n             let content_ty = t.boxed_ty();\n             let ptr = if !bcx.ccx.shared().type_is_sized(content_ty) {"}]}