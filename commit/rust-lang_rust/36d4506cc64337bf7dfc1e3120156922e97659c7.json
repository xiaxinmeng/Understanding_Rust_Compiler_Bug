{"sha": "36d4506cc64337bf7dfc1e3120156922e97659c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZDQ1MDZjYzY0MzM3YmY3ZGZjMWUzMTIwMTU2OTIyZTk3NjU5Yzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-13T21:35:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-13T21:35:39Z"}, "message": "Auto merge of #65342 - Mark-Simulacrum:revert-rustc-dev, r=pietroalbini\n\nRevert \"Auto merge of #64823 - cuviper:min-std, r=Mark-Simulacrum\"\n\nThis reverts commit 000d90b11f7be70ffb7812680f7abc6deb52ec88, reversing\nchanges made to 898f36c83cc28d7921a1d7b3605323dc5cfcf533.\n\nThis turned out to break quite a few targets, cc https://github.com/rust-lang/rust/issues/65335", "tree": {"sha": "ee0474fc2594c785c99e92791e5cacacd706e705", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee0474fc2594c785c99e92791e5cacacd706e705"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36d4506cc64337bf7dfc1e3120156922e97659c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36d4506cc64337bf7dfc1e3120156922e97659c7", "html_url": "https://github.com/rust-lang/rust/commit/36d4506cc64337bf7dfc1e3120156922e97659c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36d4506cc64337bf7dfc1e3120156922e97659c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c27f7568bc74c418996892028a629eed5a7f5f00", "url": "https://api.github.com/repos/rust-lang/rust/commits/c27f7568bc74c418996892028a629eed5a7f5f00", "html_url": "https://github.com/rust-lang/rust/commit/c27f7568bc74c418996892028a629eed5a7f5f00"}, {"sha": "fabba8f76491698ea93ee5b71791709075d155ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/fabba8f76491698ea93ee5b71791709075d155ba", "html_url": "https://github.com/rust-lang/rust/commit/fabba8f76491698ea93ee5b71791709075d155ba"}], "stats": {"total": 160, "additions": 33, "deletions": 127}, "files": [{"sha": "0caf2d9b6db5a3f64db44e2e50e207437b6332c0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36d4506cc64337bf7dfc1e3120156922e97659c7/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d4506cc64337bf7dfc1e3120156922e97659c7/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=36d4506cc64337bf7dfc1e3120156922e97659c7", "patch": "@@ -443,7 +443,6 @@ impl<'a> Builder<'a> {\n                 dist::Rustc,\n                 dist::DebuggerScripts,\n                 dist::Std,\n-                dist::RustcDev,\n                 dist::Analysis,\n                 dist::Src,\n                 dist::PlainSourceTarball,"}, {"sha": "d9dff77a30e6bd0fdd9c5951ffab3e5ca1bb43ac", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 33, "deletions": 96, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/36d4506cc64337bf7dfc1e3120156922e97659c7/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d4506cc64337bf7dfc1e3120156922e97659c7/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=36d4506cc64337bf7dfc1e3120156922e97659c7", "patch": "@@ -637,28 +637,6 @@ impl Step for DebuggerScripts {\n     }\n }\n \n-fn skip_host_target_lib(builder: &Builder<'_>, compiler: Compiler) -> bool {\n-    // The only true set of target libraries came from the build triple, so\n-    // let's reduce redundant work by only producing archives from that host.\n-    if compiler.host != builder.config.build {\n-        builder.info(\"\\tskipping, not a build host\");\n-        true\n-    } else {\n-        false\n-    }\n-}\n-\n-/// Copy stamped files into an image's `target/lib` directory.\n-fn copy_target_libs(builder: &Builder<'_>, target: &str, image: &Path, stamp: &Path) {\n-    let dst = image.join(\"lib/rustlib\").join(target).join(\"lib\");\n-    t!(fs::create_dir_all(&dst));\n-    for (path, host) in builder.read_stamp_file(stamp) {\n-        if !host || builder.config.build == target {\n-            builder.copy(&path, &dst.join(path.file_name().unwrap()));\n-        }\n-    }\n-}\n-\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Std {\n     pub compiler: Compiler,\n@@ -689,19 +667,44 @@ impl Step for Std {\n         let target = self.target;\n \n         let name = pkgname(builder, \"rust-std\");\n-        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n-        if skip_host_target_lib(builder, compiler) {\n-            return archive;\n+\n+        // The only true set of target libraries came from the build triple, so\n+        // let's reduce redundant work by only producing archives from that host.\n+        if compiler.host != builder.config.build {\n+            builder.info(\"\\tskipping, not a build host\");\n+            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n         }\n \n-        builder.ensure(compile::Std { compiler, target });\n+        // We want to package up as many target libraries as possible\n+        // for the `rust-std` package, so if this is a host target we\n+        // depend on librustc and otherwise we just depend on libtest.\n+        if builder.hosts.iter().any(|t| t == target) {\n+            builder.ensure(compile::Rustc { compiler, target });\n+        } else {\n+            builder.ensure(compile::Std { compiler, target });\n+        }\n \n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n         let _ = fs::remove_dir_all(&image);\n \n-        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n-        let stamp = compile::libstd_stamp(builder, compiler_to_use, target);\n-        copy_target_libs(builder, &target, &image, &stamp);\n+        let dst = image.join(\"lib/rustlib\").join(target);\n+        t!(fs::create_dir_all(&dst));\n+        let mut src = builder.sysroot_libdir(compiler, target).to_path_buf();\n+        src.pop(); // Remove the trailing /lib folder from the sysroot_libdir\n+        builder.cp_filtered(&src, &dst, &|path| {\n+            if let Some(name) = path.file_name().and_then(|s| s.to_str()) {\n+                if name == builder.config.rust_codegen_backends_dir.as_str() {\n+                    return false\n+                }\n+                if name == \"bin\" {\n+                    return false\n+                }\n+                if name.contains(\"LLVM\") {\n+                    return false\n+                }\n+            }\n+            true\n+        });\n \n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"generate\")\n@@ -720,73 +723,7 @@ impl Step for Std {\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n-        archive\n-    }\n-}\n-\n-#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct RustcDev {\n-    pub compiler: Compiler,\n-    pub target: Interned<String>,\n-}\n-\n-impl Step for RustcDev {\n-    type Output = PathBuf;\n-    const DEFAULT: bool = true;\n-    const ONLY_HOSTS: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rustc-dev\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(RustcDev {\n-            compiler: run.builder.compiler_for(\n-                run.builder.top_stage,\n-                run.builder.config.build,\n-                run.target,\n-            ),\n-            target: run.target,\n-        });\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        let compiler = self.compiler;\n-        let target = self.target;\n-\n-        let name = pkgname(builder, \"rustc-dev\");\n-        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n-        if skip_host_target_lib(builder, compiler) {\n-            return archive;\n-        }\n-\n-        builder.ensure(compile::Rustc { compiler, target });\n-\n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n-        let _ = fs::remove_dir_all(&image);\n-\n-        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n-        let stamp = compile::librustc_stamp(builder, compiler_to_use, target);\n-        copy_target_libs(builder, &target, &image, &stamp);\n-\n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"generate\")\n-           .arg(\"--product-name=Rust\")\n-           .arg(\"--rel-manifest-dir=rustlib\")\n-           .arg(\"--success-message=Rust-is-ready-to-develop.\")\n-           .arg(\"--image-dir\").arg(&image)\n-           .arg(\"--work-dir\").arg(&tmpdir(builder))\n-           .arg(\"--output-dir\").arg(&distdir(builder))\n-           .arg(format!(\"--package-name={}-{}\", name, target))\n-           .arg(format!(\"--component-name=rustc-dev-{}\", target))\n-           .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n-\n-        builder.info(&format!(\"Dist rustc-dev stage{} ({} -> {})\",\n-            compiler.stage, &compiler.host, target));\n-        let _time = timeit(builder);\n-        builder.run(&mut cmd);\n-        builder.remove_dir(&image);\n-        archive\n+        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n     }\n }\n "}, {"sha": "f41e7dd17ede6d0a93a5174f23fc5e1ab99e06d6", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/36d4506cc64337bf7dfc1e3120156922e97659c7/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d4506cc64337bf7dfc1e3120156922e97659c7/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=36d4506cc64337bf7dfc1e3120156922e97659c7", "patch": "@@ -399,7 +399,6 @@ impl Builder {\n     fn add_packages_to(&mut self, manifest: &mut Manifest) {\n         let mut package = |name, targets| self.package(name, &mut manifest.pkg, targets);\n         package(\"rustc\", HOSTS);\n-        package(\"rustc-dev\", HOSTS);\n         package(\"cargo\", HOSTS);\n         package(\"rust-mingw\", MINGW);\n         package(\"rust-std\", TARGETS);\n@@ -427,13 +426,6 @@ impl Builder {\n             \"rls-preview\", \"rust-src\", \"llvm-tools-preview\",\n             \"lldb-preview\", \"rust-analysis\", \"miri-preview\"\n         ]);\n-\n-        // The compiler libraries are not stable for end users, but `rustc-dev` was only recently\n-        // split out of `rust-std`. We'll include it by default as a transition for nightly users.\n-        if self.rust_release == \"nightly\" {\n-            self.extend_profile(\"default\", &mut manifest.profiles, &[\"rustc-dev\"]);\n-            self.extend_profile(\"complete\", &mut manifest.profiles, &[\"rustc-dev\"]);\n-        }\n     }\n \n     fn add_renames_to(&self, manifest: &mut Manifest) {\n@@ -489,15 +481,6 @@ impl Builder {\n             components.push(host_component(\"rust-mingw\"));\n         }\n \n-        // The compiler libraries are not stable for end users, but `rustc-dev` was only recently\n-        // split out of `rust-std`. We'll include it by default as a transition for nightly users,\n-        // but ship it as an optional component on the beta and stable channels.\n-        if self.rust_release == \"nightly\" {\n-            components.push(host_component(\"rustc-dev\"));\n-        } else {\n-            extensions.push(host_component(\"rustc-dev\"));\n-        }\n-\n         // Tools are always present in the manifest,\n         // but might be marked as unavailable if they weren't built.\n         extensions.extend(vec![\n@@ -515,11 +498,6 @@ impl Builder {\n                 .filter(|&&target| target != host)\n                 .map(|target| Component::from_str(\"rust-std\", target))\n         );\n-        extensions.extend(\n-            HOSTS.iter()\n-                .filter(|&&target| target != host)\n-                .map(|target| Component::from_str(\"rustc-dev\", target))\n-        );\n         extensions.push(Component::from_str(\"rust-src\", \"*\"));\n \n         // If the components/extensions don't actually exist for this\n@@ -556,14 +534,6 @@ impl Builder {\n         dst.insert(profile_name.to_owned(), pkgs.iter().map(|s| (*s).to_owned()).collect());\n     }\n \n-    fn extend_profile(&mut self,\n-               profile_name: &str,\n-               dst: &mut BTreeMap<String, Vec<String>>,\n-               pkgs: &[&str]) {\n-        dst.get_mut(profile_name).expect(\"existing profile\")\n-            .extend(pkgs.iter().map(|s| (*s).to_owned()));\n-    }\n-\n     fn package(&mut self,\n                pkgname: &str,\n                dst: &mut BTreeMap<String, Package>,"}]}