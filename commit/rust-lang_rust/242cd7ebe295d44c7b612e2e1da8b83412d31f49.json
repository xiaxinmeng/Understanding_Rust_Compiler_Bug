{"sha": "242cd7ebe295d44c7b612e2e1da8b83412d31f49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MmNkN2ViZTI5NWQ0NGM3YjYxMmUyZTFkYThiODM0MTJkMzFmNDk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-11-15T21:25:59Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-12-01T22:54:22Z"}, "message": "limit the length of types in monomorphization\n\nThis adds the new insta-stable `#![type_size_limit]` crate attribute to control\nthe limit, and is obviously a [breaking-change] fixable by that.", "tree": {"sha": "efd32ff8f3e43532eb32d66e57c676375920885e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efd32ff8f3e43532eb32d66e57c676375920885e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/242cd7ebe295d44c7b612e2e1da8b83412d31f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/242cd7ebe295d44c7b612e2e1da8b83412d31f49", "html_url": "https://github.com/rust-lang/rust/commit/242cd7ebe295d44c7b612e2e1da8b83412d31f49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/242cd7ebe295d44c7b612e2e1da8b83412d31f49/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "908dba0c9477b7dd022a236cb1514ddfca9369f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/908dba0c9477b7dd022a236cb1514ddfca9369f2", "html_url": "https://github.com/rust-lang/rust/commit/908dba0c9477b7dd022a236cb1514ddfca9369f2"}], "stats": {"total": 144, "additions": 137, "deletions": 7}, "files": [{"sha": "6c87f750376faaea4fd60d411edb8088bf45e83d", "filename": "src/librustc/middle/recursion_limit.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs?ref=242cd7ebe295d44c7b612e2e1da8b83412d31f49", "patch": "@@ -18,20 +18,31 @@\n use session::Session;\n use syntax::ast;\n \n-pub fn update_recursion_limit(sess: &Session, krate: &ast::Crate) {\n+use std::cell::Cell;\n+\n+pub fn update_limits(sess: &Session, krate: &ast::Crate) {\n+    update_limit(sess, krate, &sess.recursion_limit, \"recursion_limit\",\n+                 \"recursion limit\");\n+    update_limit(sess, krate, &sess.type_length_limit, \"type_length_limit\",\n+                 \"type length limit\");\n+}\n+\n+fn update_limit(sess: &Session, krate: &ast::Crate, limit: &Cell<usize>,\n+                name: &str, description: &str) {\n     for attr in &krate.attrs {\n-        if !attr.check_name(\"recursion_limit\") {\n+        if !attr.check_name(name) {\n             continue;\n         }\n \n         if let Some(s) = attr.value_str() {\n             if let Some(n) = s.as_str().parse().ok() {\n-                sess.recursion_limit.set(n);\n+                limit.set(n);\n                 return;\n             }\n         }\n \n-        span_err!(sess, attr.span, E0296, \"malformed recursion limit attribute, \\\n-                                  expected #![recursion_limit=\\\"N\\\"]\");\n+        span_err!(sess, attr.span, E0296,\n+                  \"malformed {} attribute, expected #![{}=\\\"N\\\"]\",\n+                  description, name);\n     }\n }"}, {"sha": "91765e68ae6e1a678c04f9cc34af957111da7dcb", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=242cd7ebe295d44c7b612e2e1da8b83412d31f49", "patch": "@@ -100,6 +100,9 @@ pub struct Session {\n     /// operations such as auto-dereference and monomorphization.\n     pub recursion_limit: Cell<usize>,\n \n+    /// The maximum length of types during monomorphization.\n+    pub type_length_limit: Cell<usize>,\n+\n     /// The metadata::creader module may inject an allocator/panic_runtime\n     /// dependency if it didn't already find one, and this tracks what was\n     /// injected.\n@@ -620,6 +623,7 @@ pub fn build_session_(sopts: config::Options,\n         crate_disambiguator: RefCell::new(Symbol::intern(\"\")),\n         features: RefCell::new(feature_gate::Features::new()),\n         recursion_limit: Cell::new(64),\n+        type_length_limit: Cell::new(1048576),\n         next_node_id: Cell::new(NodeId::new(1)),\n         injected_allocator: Cell::new(None),\n         injected_panic_runtime: Cell::new(None),"}, {"sha": "069f0a89bef08d0d5526b114bfce01c6b56a311a", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=242cd7ebe295d44c7b612e2e1da8b83412d31f49", "patch": "@@ -566,7 +566,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n     *sess.crate_disambiguator.borrow_mut() = Symbol::intern(&compute_crate_disambiguator(sess));\n \n     time(time_passes, \"recursion limit\", || {\n-        middle::recursion_limit::update_recursion_limit(sess, &krate);\n+        middle::recursion_limit::update_limits(sess, &krate);\n     });\n \n     krate = time(time_passes, \"crate injection\", || {"}, {"sha": "7416b86bfebf3a880da4bd5773f7a2e2336bc3cc", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=242cd7ebe295d44c7b612e2e1da8b83412d31f49", "patch": "@@ -361,6 +361,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(scx: &SharedCrateContext<'a, 'tcx>,\n             recursion_depth_reset = Some(check_recursion_limit(scx.tcx(),\n                                                                instance,\n                                                                recursion_depths));\n+            check_type_length_limit(scx.tcx(), instance);\n \n             // Scan the MIR in order to find function calls, closures, and\n             // drop-glue\n@@ -432,6 +433,40 @@ fn check_recursion_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     (instance.def, recursion_depth)\n }\n \n+fn check_type_length_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                     instance: Instance<'tcx>)\n+{\n+    let type_length = instance.substs.types().flat_map(|ty| ty.walk()).count();\n+    debug!(\" => type length={}\", type_length);\n+\n+    // Rust code can easily create exponentially-long types using only a\n+    // polynomial recursion depth. Even with the default recursion\n+    // depth, you can easily get cases that take >2^60 steps to run,\n+    // which means that rustc basically hangs.\n+    //\n+    // Bail out in these cases to avoid that bad user experience.\n+    let type_length_limit = tcx.sess.type_length_limit.get();\n+    if type_length > type_length_limit {\n+        // The instance name is already known to be too long for rustc. Use\n+        // `{:.64}` to avoid blasting the user's terminal with thousands of\n+        // lines of type-name.\n+        let instance_name = instance.to_string();\n+        let msg = format!(\"reached the type-length limit while instantiating `{:.64}...`\",\n+                          instance_name);\n+        let mut diag = if let Some(node_id) = tcx.map.as_local_node_id(instance.def) {\n+            tcx.sess.struct_span_fatal(tcx.map.span(node_id), &msg)\n+        } else {\n+            tcx.sess.struct_fatal(&msg)\n+        };\n+\n+        diag.note(&format!(\n+            \"consider adding a `#![type_length_limit=\\\"{}\\\"]` attribute to your crate\",\n+            type_length_limit*2));\n+        diag.emit();\n+        tcx.sess.abort_if_errors();\n+    }\n+}\n+\n struct MirNeighborCollector<'a, 'tcx: 'a> {\n     scx: &'a SharedCrateContext<'a, 'tcx>,\n     mir: &'a mir::Mir<'tcx>,"}, {"sha": "2a745e979a72dd29aced1484b2bd73daf778e29d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=242cd7ebe295d44c7b612e2e1da8b83412d31f49", "patch": "@@ -738,6 +738,7 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n     (\"no_main\", CrateLevel, Ungated),\n     (\"no_builtins\", CrateLevel, Ungated),\n     (\"recursion_limit\", CrateLevel, Ungated),\n+    (\"type_length_limit\", CrateLevel, Ungated),\n ];\n \n // cfg(...)'s that are feature gated"}, {"sha": "65d1d837d7dc3ea9685487617ef40dda2ddf0668", "filename": "src/test/compile-fail/issue-22638.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs?ref=242cd7ebe295d44c7b612e2e1da8b83412d31f49", "patch": "@@ -10,7 +10,8 @@\n \n #![allow(unused)]\n \n-#![recursion_limit = \"32\"]\n+#![recursion_limit = \"20\"]\n+#![type_length_limit = \"20000000\"]\n \n #[derive(Clone)]\n struct A (B);"}, {"sha": "d283f392d762879680388e5d206d88dbb93e8e08", "filename": "src/test/compile-fail/type_length_limit.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Ftest%2Fcompile-fail%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Ftest%2Fcompile-fail%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype_length_limit.rs?ref=242cd7ebe295d44c7b612e2e1da8b83412d31f49", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: reached the type-length limit while instantiating\n+\n+// Test that the type length limit can be changed.\n+\n+#![allow(dead_code)]\n+#![type_length_limit=\"256\"]\n+\n+macro_rules! link {\n+    ($id:ident, $t:ty) => {\n+        pub type $id = ($t, $t, $t);\n+    }\n+}\n+\n+link! { A, B }\n+link! { B, C }\n+link! { C, D }\n+link! { D, E }\n+link! { E, F }\n+link! { F, G }\n+\n+pub struct G;\n+\n+fn main() {\n+    drop::<Option<A>>(None);\n+}"}, {"sha": "add96461f1bfedd014bfd66f2c90cf06611c513f", "filename": "src/test/ui/issue-37311-type-length-limit/issue-37311.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.rs?ref=242cd7ebe295d44c7b612e2e1da8b83412d31f49", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Mirror {\n+    type Image;\n+}\n+\n+impl<T> Mirror for T { type Image = T; }\n+\n+trait Foo {\n+    fn recurse(&self);\n+}\n+\n+impl<T> Foo for T {\n+    #[allow(unconditional_recursion)]\n+    fn recurse(&self) {\n+        (self, self).recurse();\n+    }\n+}\n+\n+fn main() {\n+    ().recurse();\n+}"}, {"sha": "5a63d235a7f0736f0b191a987a39ee7b6d168171", "filename": "src/test/ui/issue-37311-type-length-limit/issue-37311.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/242cd7ebe295d44c7b612e2e1da8b83412d31f49/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=242cd7ebe295d44c7b612e2e1da8b83412d31f49", "patch": "@@ -0,0 +1,13 @@\n+error: reached the type-length limit while instantiating `<T as Foo><(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(), &()), &(&()...`\n+  --> $DIR/issue-37311.rs:23:5\n+   |\n+23 |       fn recurse(&self) {\n+   |  _____^ starting here...\n+24 | |         (self, self).recurse();\n+25 | |     }\n+   | |_____^ ...ending here\n+   |\n+   = note: consider adding a `#![type_length_limit=\"2097152\"]` attribute to your crate\n+\n+error: aborting due to previous error\n+"}]}