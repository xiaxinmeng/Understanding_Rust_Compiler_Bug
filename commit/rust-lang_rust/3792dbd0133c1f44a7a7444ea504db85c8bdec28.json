{"sha": "3792dbd0133c1f44a7a7444ea504db85c8bdec28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OTJkYmQwMTMzYzFmNDRhN2E3NDQ0ZWE1MDRkYjg1YzhiZGVjMjg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-07T05:47:11Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-07T07:26:42Z"}, "message": "Rollup merge of #53860 - pnkfelix:issue-53764-migrate-run-pass-to-ui, r=nikomatsakis\n\nMigrate (some) of run-pass/ to ui\n\nThis is a step towards addressing #53764. Much still remains.\n\nI went through a large portion of the `*.rs` files that were directly stored into `src/test/run-pass/` and moved them into various subdirectories of a newly created `src/test/ui/run-pass/`.\n\n(yes, it would have perhaps been nice to meld it more directly with directories already in `src/test/ui/`; but the sad truth is that opens up the reality of filename collisions, and one of my short term goals for resolving #53764 is to keep the *filenames* invariant, even as their parents directories and contents are mildly revised...)", "tree": {"sha": "2b4c4c07c74d149a820892aaee0bfdda9aaf0a0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b4c4c07c74d149a820892aaee0bfdda9aaf0a0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3792dbd0133c1f44a7a7444ea504db85c8bdec28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAluSKDYACgkQ/vbIBR0O\nATzhAg/9EPJFzlYRI8Lq6+HmrkKZaB2kndWQ3B26cfj6JjB5xVlWfHXXj5IsPVAo\ns82Ech43MFKs8PbgcKWYyj2Bhtg5N8fHPKOcRiJ0ft1p2PWO40rV/EJb5SeVGJif\nYcULm8m/GuUS/HUvD/4BFNEDjnb4/6mXXaUWIseTRELpJYY4oOMu3AWJcnuz0mB3\nuMobYEmk4iDrvM68QAMfYE6qKwKE7QWpskC546VVp9fgDsq7vPKu5GWN2yiLpkMM\nQb5P6BBVCgnmgAo7lcbHabhPwtUMvDea74e+zjvkOmPcS/YxumejjDV2d9kmlq9l\nUw5mkmLko9t4z0cEdfIn3EAfK8mlManz0div04eaNPGcIv5CfZpxJq2ef7oC99t7\nu3wIyLd134Mj3hWOxYdm2sC4CjCOrBPLmI0qPvVUrt4Yi0UpQxT/v8S1jJyxg3Hj\nEYpW6kEMJLO+ODVKm6xJFuhz1bpdCggxlSedZxApOwXigwDHUZxFQ9XuSUFklwPH\n3H4OrnqlZB0SmVS1VxLlP5EFaLZiUG70VrQLDwbUBuJHd+IsNgKsX6H4EoHJPxwF\n355QnGze1pmRERsuNygtt8moSbwgKPj8u//sar3gJY00Y1yS0a8KlEYMU14RQ2mI\nkPNI1SN/CZvyDxYs8mZY1OOnb4pHDt9IsNQmGa5c0WA59Wpxj2Y=\n=GKi7\n-----END PGP SIGNATURE-----", "payload": "tree 2b4c4c07c74d149a820892aaee0bfdda9aaf0a0b\nparent 1805f3c2fba620b60930ba2cdf642e2e035c2b70\nparent 5fe0851548357bae39b01a5e3224bdc8da7f7aae\nauthor kennytm <kennytm@gmail.com> 1536299231 +0800\ncommitter kennytm <kennytm@gmail.com> 1536305202 +0800\n\nRollup merge of #53860 - pnkfelix:issue-53764-migrate-run-pass-to-ui, r=nikomatsakis\n\nMigrate (some) of run-pass/ to ui\n\nThis is a step towards addressing #53764. Much still remains.\n\nI went through a large portion of the `*.rs` files that were directly stored into `src/test/run-pass/` and moved them into various subdirectories of a newly created `src/test/ui/run-pass/`.\n\n(yes, it would have perhaps been nice to meld it more directly with directories already in `src/test/ui/`; but the sad truth is that opens up the reality of filename collisions, and one of my short term goals for resolving #53764 is to keep the *filenames* invariant, even as their parents directories and contents are mildly revised...)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3792dbd0133c1f44a7a7444ea504db85c8bdec28", "html_url": "https://github.com/rust-lang/rust/commit/3792dbd0133c1f44a7a7444ea504db85c8bdec28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3792dbd0133c1f44a7a7444ea504db85c8bdec28/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1805f3c2fba620b60930ba2cdf642e2e035c2b70", "url": "https://api.github.com/repos/rust-lang/rust/commits/1805f3c2fba620b60930ba2cdf642e2e035c2b70", "html_url": "https://github.com/rust-lang/rust/commit/1805f3c2fba620b60930ba2cdf642e2e035c2b70"}, {"sha": "5fe0851548357bae39b01a5e3224bdc8da7f7aae", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe0851548357bae39b01a5e3224bdc8da7f7aae", "html_url": "https://github.com/rust-lang/rust/commit/5fe0851548357bae39b01a5e3224bdc8da7f7aae"}], "stats": {"total": 3971, "additions": 3898, "deletions": 73}, "files": [{"sha": "4029a270c8d18c397743328b204018a7bdbe9c97", "filename": "src/test/ui/run-pass/array-slice-vec/arr_cycle.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Farr_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Farr_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Farr_cycle.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n use std::cell::Cell;\n \n #[derive(Debug)]", "previous_filename": "src/test/run-pass/arr_cycle.rs"}, {"sha": "c026a47c4f9ec03fb923fccfde61d69451fa3775", "filename": "src/test/ui/run-pass/array-slice-vec/array_const_index-1.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Farray_const_index-1.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(stable_features)]\n+\n #![feature(const_indexing)]\n \n fn main() {", "previous_filename": "src/test/run-pass/array_const_index-1.rs"}, {"sha": "5d6cc5f686e7fbfefab0aad3437f6c4d20be7bea", "filename": "src/test/ui/run-pass/array-slice-vec/box-of-array-of-drop-1.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fbox-of-array-of-drop-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fbox-of-array-of-drop-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fbox-of-array-of-drop-1.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(overflowing_literals)]\n+\n // Test that we cleanup a fixed size Box<[D; k]> properly when D has a\n // destructor.\n ", "previous_filename": "src/test/run-pass/box-of-array-of-drop-1.rs"}, {"sha": "d2dedc4602aaea020b8ec165c431ded13cdbeacd", "filename": "src/test/ui/run-pass/array-slice-vec/box-of-array-of-drop-2.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fbox-of-array-of-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fbox-of-array-of-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fbox-of-array-of-drop-2.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(overflowing_literals)]\n+\n // Test that we cleanup dynamic sized Box<[D]> properly when D has a\n // destructor.\n ", "previous_filename": "src/test/run-pass/box-of-array-of-drop-2.rs"}, {"sha": "d78bc0b0072d3f4ffc0efeb71aa7bc8147271e35", "filename": "src/test/ui/run-pass/array-slice-vec/cast-in-array-size.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcast-in-array-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcast-in-array-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcast-in-array-size.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n // issues #10618 and #16382\n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/cast-in-array-size.rs"}, {"sha": "3d2fc8195eb287cca5bf60075fdef2cc09230aff", "filename": "src/test/ui/run-pass/array-slice-vec/check-static-mut-slices.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcheck-static-mut-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcheck-static-mut-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcheck-static-mut-slices.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Checks that mutable static items can have mutable slices\n \n ", "previous_filename": "src/test/run-pass/check-static-mut-slices.rs"}, {"sha": "6627095c32bccbbb498dc233899f80b5167abbb5", "filename": "src/test/ui/run-pass/array-slice-vec/check-static-slice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcheck-static-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcheck-static-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcheck-static-slice.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Check that the various ways of getting to a reference to a vec (both sized\n // and unsized) work properly.\n ", "previous_filename": "src/test/run-pass/check-static-slice.rs"}, {"sha": "917683e4eeb93b3439b48b6d1c6d46807738926b", "filename": "src/test/ui/run-pass/array-slice-vec/copy-out-of-array-1.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcopy-out-of-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcopy-out-of-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcopy-out-of-array-1.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Ensure that we can copy out of a fixed-size array.\n //\n // (Compare with compile-fail/move-out-of-array-1.rs)", "previous_filename": "src/test/run-pass/copy-out-of-array-1.rs"}, {"sha": "17620f62be6a06686658f5555fc5ac2e7db6c7d9", "filename": "src/test/ui/run-pass/array-slice-vec/destructure-array-1.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fdestructure-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fdestructure-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fdestructure-array-1.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Ensure that we can do a destructuring bind of a fixed-size array,\n // even when the element type has a destructor.\n ", "previous_filename": "src/test/run-pass/destructure-array-1.rs"}, {"sha": "7411d5743212d0b84caca106892db79b6b8a3155", "filename": "src/test/ui/run-pass/array-slice-vec/empty-mutable-vec.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fempty-mutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fempty-mutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fempty-mutable-vec.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // pretty-expanded FIXME #23616\n \n #![allow(unused_mut)]", "previous_filename": "src/test/run-pass/empty-mutable-vec.rs"}, {"sha": "768229aafbf57c37d89dea5f08f3a0fdc746bc41", "filename": "src/test/ui/run-pass/array-slice-vec/estr-slice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Festr-slice.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n pub fn main() {\n     let x = \"hello\";", "previous_filename": "src/test/run-pass/estr-slice.rs"}, {"sha": "7f54801910b73d0f5ec8ea1c624338f348080396", "filename": "src/test/ui/run-pass/array-slice-vec/evec-slice.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fevec-slice.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_assignment)]\n+// run-pass\n \n pub fn main() {\n     let x : &[isize] = &[1,2,3,4,5];", "previous_filename": "src/test/run-pass/evec-slice.rs"}, {"sha": "09492e37e28b84e882e543f2b6744678c46fd8b5", "filename": "src/test/ui/run-pass/array-slice-vec/fixed_length_copy.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Ffixed_length_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Ffixed_length_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Ffixed_length_copy.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n pub fn main() {\n     let arr = [1,2,3];", "previous_filename": "src/test/run-pass/fixed_length_copy.rs"}, {"sha": "27b4e68e771c8b2bc7beeaac80d429ab5040b990", "filename": "src/test/ui/run-pass/array-slice-vec/huge-largest-array.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fhuge-largest-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fhuge-largest-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fhuge-largest-array.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n use std::mem::size_of;\n ", "previous_filename": "src/test/run-pass/huge-largest-array.rs"}, {"sha": "2f3efef56369d832a6f4df060d08ad39f930bbfc", "filename": "src/test/ui/run-pass/array-slice-vec/ivec-pass-by-value.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fivec-pass-by-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fivec-pass-by-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fivec-pass-by-value.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,5 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n fn f(_a: Vec<isize> ) { }\n pub fn main() { f(vec![1, 2, 3, 4, 5]); }", "previous_filename": "src/test/run-pass/ivec-pass-by-value.rs"}, {"sha": "49dc348952ba16ca8be98dd8a453503379c2f363", "filename": "src/test/ui/run-pass/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fmutability-inherits-through-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fmutability-inherits-through-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fmutability-inherits-through-fixed-length-vec.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n fn test1() {\n     let mut ints = [0; 32];", "previous_filename": "src/test/run-pass/mutability-inherits-through-fixed-length-vec.rs"}, {"sha": "dc2548ad53c4d9398b9c2966c54d409480c5b468", "filename": "src/test/ui/run-pass/array-slice-vec/mutable-alias-vec.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fmutable-alias-vec.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n fn grow(v: &mut Vec<isize> ) {\n     v.push(1);\n }", "previous_filename": "src/test/run-pass/mutable-alias-vec.rs"}, {"sha": "62bcc5f72543fa3d2c6f261d7b483bd565a47b65", "filename": "src/test/ui/run-pass/array-slice-vec/nested-vec-1.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-1.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Test that using the `vec!` macro nested within itself works\n \n fn main() {", "previous_filename": "src/test/run-pass/nested-vec-1.rs"}, {"sha": "4af2350cc369b0d051e54b68c71058f71e85b4d9", "filename": "src/test/ui/run-pass/array-slice-vec/nested-vec-2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-2.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Test that using the `vec!` macro nested within itself works\n // when the contents implement Drop\n ", "previous_filename": "src/test/run-pass/nested-vec-2.rs"}, {"sha": "dc3146a2b351760c5b9ed4ca849f8698066b3f7b", "filename": "src/test/ui/run-pass/array-slice-vec/nested-vec-3.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-3.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(overflowing_literals)]\n+\n // ignore-emscripten no threads support\n \n // Test that using the `vec!` macro nested within itself works when", "previous_filename": "src/test/run-pass/nested-vec-3.rs"}, {"sha": "268fa5c4b59ac22c2a295cb56c1f6e3716ccae04", "filename": "src/test/ui/run-pass/array-slice-vec/new-style-fixed-length-vec.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnew-style-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnew-style-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnew-style-fixed-length-vec.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n static FOO: [isize; 3] = [1, 2, 3];\n \n pub fn main() {", "previous_filename": "src/test/run-pass/new-style-fixed-length-vec.rs"}, {"sha": "76302b92ed0349f109549c1f0fe2f8ce8014e5dc", "filename": "src/test/ui/run-pass/array-slice-vec/rcvr-borrowed-to-slice.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Frcvr-borrowed-to-slice.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n+#![allow(non_camel_case_types)]\n \n trait sum {\n     fn sum_(self) -> isize;", "previous_filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs"}, {"sha": "d706be4c3367634b2c31d8a39381fab44761822e", "filename": "src/test/ui/run-pass/array-slice-vec/repeated-vector-syntax.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Frepeated-vector-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Frepeated-vector-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Frepeated-vector-syntax.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n pub fn main() {\n     let x = [ [true]; 512 ];\n     let y = [ 0; 1 ];", "previous_filename": "src/test/run-pass/repeated-vector-syntax.rs"}, {"sha": "dda4ce9f227b1195738aa5f759a19c3b52cf6070", "filename": "src/test/ui/run-pass/array-slice-vec/show-boxed-slice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fshow-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fshow-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fshow-boxed-slice.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #[derive(Debug)]\n struct Foo(Box<[u8]>);\n ", "previous_filename": "src/test/run-pass/show-boxed-slice.rs"}, {"sha": "1f71ceac04f9dc09842f8d888f9be06a1d8f1a73", "filename": "src/test/ui/run-pass/array-slice-vec/slice-2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-2.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Test slicing expressions on slices and Vecs.\n \n ", "previous_filename": "src/test/run-pass/slice-2.rs"}, {"sha": "671246f6a63a2f6078ea34849d49ce772e62fdc4", "filename": "src/test/ui/run-pass/array-slice-vec/slice-of-zero-size-elements.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-of-zero-size-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-of-zero-size-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-of-zero-size-elements.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(stable_features)]\n+\n // compile-flags: -C debug-assertions\n \n #![feature(iter_to_slice)]", "previous_filename": "src/test/run-pass/slice-of-zero-size-elements.rs"}, {"sha": "b9d816acaa2284ee5858cbef3b3f8bafc8b85a94", "filename": "src/test/ui/run-pass/array-slice-vec/slice-panic-1.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-panic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-panic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-panic-1.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // ignore-emscripten no threads support\n \n // Test that if a slicing expr[..] fails, the correct cleanups happen.", "previous_filename": "src/test/run-pass/slice-panic-1.rs"}, {"sha": "787d10b042f8c035a8fc34c2336f8e34dc77f6e8", "filename": "src/test/ui/run-pass/array-slice-vec/slice-panic-2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-panic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-panic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-panic-2.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // ignore-emscripten no threads support\n \n // Test that if a slicing expr[..] fails, the correct cleanups happen.", "previous_filename": "src/test/run-pass/slice-panic-2.rs"}, {"sha": "6c43d8832302845cff196efca3f2f08ab8ff793f", "filename": "src/test/ui/run-pass/array-slice-vec/slice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Test slicing sugar.\n \n extern crate core;", "previous_filename": "src/test/run-pass/slice.rs"}, {"sha": "081b06bea5c17fcfa141a2342c4abd1ecdd0b002", "filename": "src/test/ui/run-pass/array-slice-vec/slice_binary_search.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice_binary_search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice_binary_search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice_binary_search.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Test binary_search_by_key lifetime. Issue #34683\n \n #[derive(Debug)]", "previous_filename": "src/test/run-pass/slice_binary_search.rs"}, {"sha": "5cf52006f3c2cda65009c259978e53a8317c75e2", "filename": "src/test/ui/run-pass/array-slice-vec/variance-vec-covariant.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvariance-vec-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvariance-vec-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvariance-vec-covariant.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Test that vec is now covariant in its argument type.\n \n #![allow(dead_code)]", "previous_filename": "src/test/run-pass/variance-vec-covariant.rs"}, {"sha": "7c734d8d6a2bb2035cde8c177d4a054919200740", "filename": "src/test/ui/run-pass/array-slice-vec/vec-concat.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-concat.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n use std::vec;\n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec-concat.rs"}, {"sha": "6421b69d22e3fa2f2a3bdb20422417ff949705f9", "filename": "src/test/ui/run-pass/array-slice-vec/vec-dst.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-dst.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(box_syntax)]\n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec-dst.rs"}, {"sha": "a7b867941323fe7a0b051a7ce173b5372167dccc", "filename": "src/test/ui/run-pass/array-slice-vec/vec-fixed-length.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-fixed-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-fixed-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-fixed-length.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n use std::mem::size_of;\n ", "previous_filename": "src/test/run-pass/vec-fixed-length.rs"}, {"sha": "e783a799c056201bcaab8a24f34a3b535d8406d9", "filename": "src/test/ui/run-pass/array-slice-vec/vec-growth.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-growth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-growth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-growth.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec-growth.rs"}, {"sha": "dc7241a0e05c040a930ca4db33937a16e5b35a30", "filename": "src/test/ui/run-pass/array-slice-vec/vec-late-init.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-late-init.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n pub fn main() {\n     let mut later: Vec<isize> ;", "previous_filename": "src/test/run-pass/vec-late-init.rs"}, {"sha": "509167413b6f4b67825567f0c579c8c5b4c18013", "filename": "src/test/ui/run-pass/array-slice-vec/vec-macro-no-std.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-no-std.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // ignore-emscripten no no_std executables\n \n #![feature(lang_items, start, libc, alloc)]", "previous_filename": "src/test/run-pass/vec-macro-no-std.rs"}, {"sha": "36c8b7cffabec47f85fcc44c6cb06686ba27b20a", "filename": "src/test/ui/run-pass/array-slice-vec/vec-macro-repeat.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-repeat.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec-macro-repeat.rs"}, {"sha": "8ccf22e62887cd2942e55e86ee9003b9bed7e598", "filename": "src/test/ui/run-pass/array-slice-vec/vec-macro-rvalue-scope.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-rvalue-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-rvalue-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-rvalue-scope.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n fn one() -> i32 { 1 }\n ", "previous_filename": "src/test/run-pass/vec-macro-rvalue-scope.rs"}, {"sha": "b5d1459300aeb2ba720b24fafd11fb932180ff70", "filename": "src/test/ui/run-pass/array-slice-vec/vec-macro-with-brackets.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-brackets.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // pretty-expanded FIXME #23616\n \n macro_rules! vec [", "previous_filename": "src/test/run-pass/vec-macro-with-brackets.rs"}, {"sha": "046d634b19d467a1025b0875d667d804402a5d3f", "filename": "src/test/ui/run-pass/array-slice-vec/vec-macro-with-trailing-comma.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-trailing-comma.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec-macro-with-trailing-comma.rs"}, {"sha": "b5cefb48ce79660dc33209cab9ad09b803c180f0", "filename": "src/test/ui/run-pass/array-slice-vec/vec-matching-autoslice.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-autoslice.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(illegal_floating_point_literal_pattern)] // FIXME #41620\n+\n pub fn main() {\n     let x = [1, 2, 3];\n     match x {", "previous_filename": "src/test/run-pass/vec-matching-autoslice.rs"}, {"sha": "7bfecdd2c7f3cb21554f30478033ab90407d602c", "filename": "src/test/ui/run-pass/array-slice-vec/vec-matching-fixed.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-fixed.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(slice_patterns)]\n \n fn a() {", "previous_filename": "src/test/run-pass/vec-matching-fixed.rs"}, {"sha": "b1aa7f1b70c86d0c644e9a61611244cf9f9aacd3", "filename": "src/test/ui/run-pass/array-slice-vec/vec-matching-fold.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-fold.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(slice_patterns)]\n \n use std::fmt::Debug;", "previous_filename": "src/test/run-pass/vec-matching-fold.rs"}, {"sha": "e727e56c0f8e8e2f04250ab5ff85990754b0ac53", "filename": "src/test/ui/run-pass/array-slice-vec/vec-matching-legal-tail-element-borrow.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(slice_patterns)]\n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec-matching-legal-tail-element-borrow.rs"}, {"sha": "8d1ef6f755a356439997869754a2ab58a0f85284", "filename": "src/test/ui/run-pass/array-slice-vec/vec-matching.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(slice_patterns)]\n \n fn a() {", "previous_filename": "src/test/run-pass/vec-matching.rs"}, {"sha": "360568048c0899345e8970950c608d7df509ff4c", "filename": "src/test/ui/run-pass/array-slice-vec/vec-push.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-push.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,4 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n pub fn main() { let mut v = vec![1, 2, 3]; v.push(1); }", "previous_filename": "src/test/run-pass/vec-push.rs"}, {"sha": "650de32fe6146c469bfee741e7ed612abb9ee5bb", "filename": "src/test/ui/run-pass/array-slice-vec/vec-repeat-with-cast.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-repeat-with-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-repeat-with-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-repeat-with-cast.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // pretty-expanded FIXME #23616\n \n pub fn main() { let _a = [0; 1 as usize]; }", "previous_filename": "src/test/run-pass/vec-repeat-with-cast.rs"}, {"sha": "189d5a38ae3cac9584234de0aafafbbd48c43a1b", "filename": "src/test/ui/run-pass/array-slice-vec/vec-slice-drop.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-slice-drop.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n+#![allow(non_camel_case_types)]\n+\n use std::cell::Cell;\n \n // Make sure that destructors get run on slice literals", "previous_filename": "src/test/run-pass/vec-slice-drop.rs"}, {"sha": "8ad662f0c6348ab9d472c105dbcbeec37e023900", "filename": "src/test/ui/run-pass/array-slice-vec/vec-slice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-slice.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n pub fn main() {\n     let  v = vec![1,2,3,4,5];", "previous_filename": "src/test/run-pass/vec-slice.rs"}, {"sha": "46a882a2ae1b4fac1134b8022fa92b6715ab60c0", "filename": "src/test/ui/run-pass/array-slice-vec/vec-tail-matching.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-tail-matching.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(slice_patterns)]\n \n struct Foo {", "previous_filename": "src/test/run-pass/vec-tail-matching.rs"}, {"sha": "4facc0e6892e6d67f6ecf52947756689ebb04ef1", "filename": "src/test/ui/run-pass/array-slice-vec/vec-to_str.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-to_str.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n pub fn main() {\n     assert_eq!(format!(\"{:?}\", vec![0, 1]), \"[0, 1]\".to_string());", "previous_filename": "src/test/run-pass/vec-to_str.rs"}, {"sha": "34a8e125a5ceb9530a26dbef02276d47c6fcfe22", "filename": "src/test/ui/run-pass/array-slice-vec/vec.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec.rs"}, {"sha": "3222b0e789d0c96120ceb069ad5fc9f22c432d13", "filename": "src/test/ui/run-pass/array-slice-vec/vec_cycle.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec_cycle.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n use std::cell::Cell;\n \n #[derive(Debug)]", "previous_filename": "src/test/run-pass/vec_cycle.rs"}, {"sha": "355f9d3e40ed6d345ddb8dcf0a1a86528868db51", "filename": "src/test/ui/run-pass/array-slice-vec/vec_cycle_wrapped.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec_cycle_wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec_cycle_wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec_cycle_wrapped.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n use std::cell::Cell;\n \n #[derive(Debug)]", "previous_filename": "src/test/run-pass/vec_cycle_wrapped.rs"}, {"sha": "0b09545c0aa64cc4401e2277a1818b80d6ba474d", "filename": "src/test/ui/run-pass/array-slice-vec/vector-no-ann-2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvector-no-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvector-no-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvector-no-ann-2.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // pretty-expanded FIXME #23616\n \n #![feature(box_syntax)]", "previous_filename": "src/test/run-pass/vector-no-ann-2.rs"}, {"sha": "3ef8e6c2478c8ccc3629ab374dbdc02e51f1cd6d", "filename": "src/test/ui/run-pass/associated-consts/associated-const-const-eval.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-const-eval.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Foo {\n     const NUM: usize;", "previous_filename": "src/test/run-pass/associated-const-const-eval.rs"}, {"sha": "c0f1d93c25398b6a0bcb2c712cf570befe201d3e", "filename": "src/test/ui/run-pass/associated-consts/associated-const-cross-crate-const-eval.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate-const-eval.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:associated-const-cc-lib.rs\n \n ", "previous_filename": "src/test/run-pass/associated-const-cross-crate-const-eval.rs"}, {"sha": "7d85c7021ab63152de965815cd3d8e7182da2dd6", "filename": "src/test/ui/run-pass/associated-consts/associated-const-cross-crate-defaults.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate-defaults.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:associated-const-cc-lib.rs\n \n ", "previous_filename": "src/test/run-pass/associated-const-cross-crate-defaults.rs"}, {"sha": "0f1bde4b4db746c9c6485da3eecd0cf82bcdd062", "filename": "src/test/ui/run-pass/associated-consts/associated-const-cross-crate.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:associated-const-cc-lib.rs\n \n ", "previous_filename": "src/test/run-pass/associated-const-cross-crate.rs"}, {"sha": "089bf07b9c78488e32df6931dcddc98d143d62d0", "filename": "src/test/ui/run-pass/associated-consts/associated-const-in-global-const.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-in-global-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-in-global-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-in-global-const.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n struct Foo;\n ", "previous_filename": "src/test/run-pass/associated-const-in-global-const.rs"}, {"sha": "60b794015f9c550c67a1bd2e323405196f4ae5e8", "filename": "src/test/ui/run-pass/associated-consts/associated-const-inherent-impl.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-inherent-impl.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n struct Foo;\n ", "previous_filename": "src/test/run-pass/associated-const-inherent-impl.rs"}, {"sha": "de9edfc679e99a2c07b0d70add30eb74a584fd91", "filename": "src/test/ui/run-pass/associated-consts/associated-const-marks-live-code.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-marks-live-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-marks-live-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-marks-live-code.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n #![deny(dead_code)]\n ", "previous_filename": "src/test/run-pass/associated-const-marks-live-code.rs"}, {"sha": "9fbce1cebf3181642b1b23aad4bd25bb976cb0fa", "filename": "src/test/ui/run-pass/associated-consts/associated-const-match-patterns.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-match-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-match-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-match-patterns.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:empty-struct.rs\n \n ", "previous_filename": "src/test/run-pass/associated-const-match-patterns.rs"}, {"sha": "c62e073a6a711fa97afcab5c951d46404de46d81", "filename": "src/test/ui/run-pass/associated-consts/associated-const-outer-ty-refs.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-outer-ty-refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-outer-ty-refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-outer-ty-refs.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n trait Lattice {\n     const BOTTOM: Self;\n }", "previous_filename": "src/test/run-pass/associated-const-outer-ty-refs.rs"}, {"sha": "0e225d7117e6c2989cf4a80387b9a2cb4887a526", "filename": "src/test/ui/run-pass/associated-consts/associated-const-overwrite-default.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-overwrite-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-overwrite-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-overwrite-default.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Foo {\n     const ID: i32 = 2;", "previous_filename": "src/test/run-pass/associated-const-overwrite-default.rs"}, {"sha": "8c11ae69ded769f5b26e963413bf5e2e99e3dd4a", "filename": "src/test/ui/run-pass/associated-consts/associated-const-public-impl.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-public-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-public-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-public-impl.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n mod bar1 {\n     pub use self::bar2::Foo;", "previous_filename": "src/test/run-pass/associated-const-public-impl.rs"}, {"sha": "eeff27753235e621f62b6d0d7f4cbe7f0be7c2ae", "filename": "src/test/ui/run-pass/associated-consts/associated-const-range-match-patterns.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n struct Foo;\n ", "previous_filename": "src/test/run-pass/associated-const-range-match-patterns.rs"}, {"sha": "ed02644c6a11901e8baed132372eac35df6804c0", "filename": "src/test/ui/run-pass/associated-consts/associated-const-resolution-order.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-resolution-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-resolution-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-resolution-order.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n struct MyType;\n ", "previous_filename": "src/test/run-pass/associated-const-resolution-order.rs"}, {"sha": "52d9574edde284e8b487f4879e05a8b2aadf0d9b", "filename": "src/test/ui/run-pass/associated-consts/associated-const-self-type.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-self-type.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait MyInt {\n     const ONE: Self;", "previous_filename": "src/test/run-pass/associated-const-self-type.rs"}, {"sha": "37407b6bf9f9863abdaf343eec8542297cc0028b", "filename": "src/test/ui/run-pass/associated-consts/associated-const-type-parameters.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-type-parameters.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Foo {\n     const X: i32;", "previous_filename": "src/test/run-pass/associated-const-type-parameters.rs"}, {"sha": "6269222fb8e9e249bf727bdc951279a52dd55aa9", "filename": "src/test/ui/run-pass/associated-consts/associated-const-ufcs-infer-trait.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-ufcs-infer-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-ufcs-infer-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-ufcs-infer-trait.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Foo {\n     const ID: i32;", "previous_filename": "src/test/run-pass/associated-const-ufcs-infer-trait.rs"}, {"sha": "623949b2418c1aceb7829f3f9e09dd67000c88dd", "filename": "src/test/ui/run-pass/associated-consts/associated-const-use-default.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-use-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-use-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-use-default.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Foo {\n     const ID: i32 = 1;", "previous_filename": "src/test/run-pass/associated-const-use-default.rs"}, {"sha": "80848e5653fb544aafb0e1487d7fa151b9fe173a", "filename": "src/test/ui/run-pass/associated-consts/associated-const-use-impl-of-same-trait.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-use-impl-of-same-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-use-impl-of-same-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-use-impl-of-same-trait.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n // The main purpose of this test is to ensure that different impls of the same\n // trait can refer to each other without setting off the static recursion check", "previous_filename": "src/test/run-pass/associated-const-use-impl-of-same-trait.rs"}, {"sha": "c20025c385ac49589eba89f22c0efda8b0f99ed4", "filename": "src/test/ui/run-pass/associated-consts/associated-const.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Foo {\n     const ID: i32;", "previous_filename": "src/test/run-pass/associated-const.rs"}, {"sha": "e4cada40db3c99c800dd8f90c9eac5656167e380", "filename": "src/test/ui/run-pass/associated-consts/auxiliary/associated-const-cc-lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fauxiliary%2Fassociated-const-cc-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fauxiliary%2Fassociated-const-cc-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fauxiliary%2Fassociated-const-cc-lib.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "previous_filename": "src/test/run-pass/auxiliary/associated-const-cc-lib.rs"}, {"sha": "734e57a774d87935a50b08162effe599960a69e0", "filename": "src/test/ui/run-pass/associated-consts/auxiliary/empty-struct.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fauxiliary%2Fempty-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fauxiliary%2Fempty-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fauxiliary%2Fempty-struct.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "previous_filename": "src/test/run-pass/auxiliary/empty-struct.rs"}, {"sha": "3628f9ce183f8ebe0ec9b0aad9ae48d45b7df80c", "filename": "src/test/ui/run-pass/associated-types/associated-types-basic.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-basic.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n trait Foo {\n     type T;\n }", "previous_filename": "src/test/run-pass/associated-types-basic.rs"}, {"sha": "63ac60e62d91fd68c12c41966f51ed6558b35c44", "filename": "src/test/ui/run-pass/associated-types/associated-types-binding-in-trait.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-binding-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-binding-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-binding-in-trait.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test a case where the associated type binding (to `bool`, in this\n // case) is derived from the trait definition. Issue #21636.\n ", "previous_filename": "src/test/run-pass/associated-types-binding-in-trait.rs"}, {"sha": "7b735520efb2d6f49368322d327426d90a2d75ab", "filename": "src/test/ui/run-pass/associated-types/associated-types-binding-in-where-clause.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-binding-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-binding-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-binding-in-where-clause.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test equality constraints on associated types in a where clause.\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/associated-types-binding-in-where-clause.rs"}, {"sha": "56ce378da65fbb09e075f7ab98f12e8c7d585206", "filename": "src/test/ui/run-pass/associated-types/associated-types-bound.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-bound.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test equality constrai32s on associated types in a where clause.\n \n ", "previous_filename": "src/test/run-pass/associated-types-bound.rs"}, {"sha": "a8c7caa9361bdd6e20d33d9baea1ca2295f69e99", "filename": "src/test/ui/run-pass/associated-types/associated-types-cc.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-cc.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:associated-types-cc-lib.rs\n \n // Test that we are able to reference cross-crate traits that employ", "previous_filename": "src/test/run-pass/associated-types-cc.rs"}, {"sha": "a795ee2c5ef05441f2ab0e1469b9690ee8fc7627", "filename": "src/test/ui/run-pass/associated-types/associated-types-conditional-dispatch.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-conditional-dispatch.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we evaluate projection predicates to winnow out\n // candidates during trait selection and method resolution (#20296).\n // If we don't properly winnow out candidates based on the output type", "previous_filename": "src/test/run-pass/associated-types-conditional-dispatch.rs"}, {"sha": "3581a6c43888db613df9d4c60945fc1aa5d245c4", "filename": "src/test/ui/run-pass/associated-types/associated-types-constant-type.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-constant-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-constant-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-constant-type.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait SignedUnsigned {\n     type Opposite;", "previous_filename": "src/test/run-pass/associated-types-constant-type.rs"}, {"sha": "4b8ceda9b811cac578fd92d9c251572545fde306", "filename": "src/test/ui/run-pass/associated-types/associated-types-doubleendediterator-object.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n fn pairwise_sub(mut t: Box<DoubleEndedIterator<Item=isize>>) -> isize {", "previous_filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs"}, {"sha": "e6175dc34ecc53f2e9838613c6b101319bf930e1", "filename": "src/test/ui/run-pass/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env-hrtb.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Check that we do not report ambiguities when equivalent predicates\n // (modulo bound lifetime names) appears in the environment\n // twice. Issue #21965.", "previous_filename": "src/test/run-pass/associated-types-duplicate-binding-in-env-hrtb.rs"}, {"sha": "6836d2860b51913f663c06392c8dc30b29d4f7f7", "filename": "src/test/ui/run-pass/associated-types/associated-types-duplicate-binding-in-env.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Check that we do not report ambiguities when the same predicate\n // appears in the environment twice. Issue #21965.\n ", "previous_filename": "src/test/run-pass/associated-types-duplicate-binding-in-env.rs"}, {"sha": "d21195c3d3a6cc6055320bd4a7baf72ea5619950", "filename": "src/test/ui/run-pass/associated-types/associated-types-enum-field-named.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-enum-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-enum-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-enum-field-named.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test associated types appearing in struct-like enum variants.\n \n ", "previous_filename": "src/test/run-pass/associated-types-enum-field-named.rs"}, {"sha": "9a91a998201fe1255b179f7f02edcdca8f6aea3c", "filename": "src/test/ui/run-pass/associated-types/associated-types-enum-field-numbered.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-enum-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-enum-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-enum-field-numbered.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test associated types appearing in tuple-like enum variants.\n \n ", "previous_filename": "src/test/run-pass/associated-types-enum-field-numbered.rs"}, {"sha": "75fe2093da99ff76b56c05e80d444dd3b4c03d16", "filename": "src/test/ui/run-pass/associated-types/associated-types-eq-obj.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-eq-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-eq-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-eq-obj.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test equality constraints on associated types inside of an object type\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/associated-types-eq-obj.rs"}, {"sha": "aca7674892586131bc7a2f9d1b15b47db6c79236", "filename": "src/test/ui/run-pass/associated-types/associated-types-impl-redirect.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-impl-redirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-impl-redirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-impl-redirect.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test how resolving a projection interacts with inference.  In this\n // case, we were eagerly unifying the type variable for the iterator\n // type with `I` from the where clause, ignoring the in-scope `impl`", "previous_filename": "src/test/run-pass/associated-types-impl-redirect.rs"}, {"sha": "a80350a596e5d41c17bacb1426dfcb517a33ac32", "filename": "src/test/ui/run-pass/associated-types/associated-types-in-bound-type-arg.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-bound-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-bound-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-bound-type-arg.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test the case where we resolve `C::Result` and the trait bound\n // itself includes a `Self::Item` shorthand.\n //", "previous_filename": "src/test/run-pass/associated-types-in-bound-type-arg.rs"}, {"sha": "846dfcd2141c4fc2bafec41e68947420e36fdfb2", "filename": "src/test/ui/run-pass/associated-types/associated-types-in-default-method.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-default-method.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Get {\n     type Value;", "previous_filename": "src/test/run-pass/associated-types-in-default-method.rs"}, {"sha": "555c74dd70a71cb72db18114245c44c9278bf620", "filename": "src/test/ui/run-pass/associated-types/associated-types-in-fn.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-fn.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Get {\n     type Value;", "previous_filename": "src/test/run-pass/associated-types-in-fn.rs"}, {"sha": "d27c1dd296e498de5806a26c7b61e8aab99a14b9", "filename": "src/test/ui/run-pass/associated-types/associated-types-in-impl-generics.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-impl-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-impl-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-impl-generics.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Get {\n     type Value;", "previous_filename": "src/test/run-pass/associated-types-in-impl-generics.rs"}, {"sha": "f68ab8cd610cccec88f4208553a5172f00209ec0", "filename": "src/test/ui/run-pass/associated-types/associated-types-in-inherent-method.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-inherent-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-inherent-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-inherent-method.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Get {\n     type Value;", "previous_filename": "src/test/run-pass/associated-types-in-inherent-method.rs"}, {"sha": "e2a87382fba9f8d8c3c92b8d0320b458b499b123", "filename": "src/test/ui/run-pass/associated-types/associated-types-issue-20220.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-20220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-20220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-20220.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test references to `Self::Item` in the trait. Issue #20220.\n \n ", "previous_filename": "src/test/run-pass/associated-types-issue-20220.rs"}, {"sha": "54f1d2e81260b240ba9bc483a7f3ea193085b181", "filename": "src/test/ui/run-pass/associated-types/associated-types-issue-20371.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-20371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-20371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-20371.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we are able to have an impl that defines an associated type\n // before the actual trait.\n ", "previous_filename": "src/test/run-pass/associated-types-issue-20371.rs"}, {"sha": "259661dc058cd8acc27ecf6ce4cec54b7a35ef88", "filename": "src/test/ui/run-pass/associated-types/associated-types-issue-21212.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-21212.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-21212.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-21212.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Regression test for #21212: an overflow occurred during trait\n // checking where normalizing `Self::Input` led to normalizing the\n // where clauses in the environment which in turn required normalizing", "previous_filename": "src/test/run-pass/associated-types-issue-21212.rs"}, {"sha": "eab66a9412917eaf48d85058fdfe07e199c352a2", "filename": "src/test/ui/run-pass/associated-types/associated-types-iterator-binding.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-iterator-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-iterator-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-iterator-binding.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn pairwise_sub<T:DoubleEndedIterator<Item=isize>>(mut t: T) -> isize {\n     let mut result = 0;", "previous_filename": "src/test/run-pass/associated-types-iterator-binding.rs"}, {"sha": "73d075313ad5f395e72311a4e4a33026c9dcfb46", "filename": "src/test/ui/run-pass/associated-types/associated-types-method.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-method.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that methods whose impl-trait-ref contains associated types\n // are supported.\n ", "previous_filename": "src/test/run-pass/associated-types-method.rs"}, {"sha": "a877a3cfa9ddad2677bf60167eb4b7e83c76260c", "filename": "src/test/ui/run-pass/associated-types/associated-types-nested-projections.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-nested-projections.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we can resolve nested projection types. Issue #20666.\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/associated-types-nested-projections.rs"}, {"sha": "d989e08e8083c066db697b52fc3a143d8474383b", "filename": "src/test/ui/run-pass/associated-types/associated-types-normalize-in-bounds-binding.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-binding.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we normalize associated types that appear in a bound that\n // contains a binding. Issue #21664.\n ", "previous_filename": "src/test/run-pass/associated-types-normalize-in-bounds-binding.rs"}, {"sha": "3d3540bbf72bfb3552e5a196bdb59a5eb573afc8", "filename": "src/test/ui/run-pass/associated-types/associated-types-normalize-in-bounds-ufcs.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-ufcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-ufcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-ufcs.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n ", "previous_filename": "src/test/run-pass/associated-types-normalize-in-bounds-ufcs.rs"}, {"sha": "79d23c3999e6bcb60a441c2ce82be62ea8390a4c", "filename": "src/test/ui/run-pass/associated-types/associated-types-normalize-in-bounds.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n ", "previous_filename": "src/test/run-pass/associated-types-normalize-in-bounds.rs"}, {"sha": "03d712b110dc2a0ff15b7c6c9e0d9488f27d3544", "filename": "src/test/ui/run-pass/associated-types/associated-types-normalize-unifield-struct.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-unifield-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-unifield-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-unifield-struct.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Regression test for issue #21010: Normalize associated types in\n // various special paths in the `type_is_immediate` function.\n ", "previous_filename": "src/test/run-pass/associated-types-normalize-unifield-struct.rs"}, {"sha": "f21bbddc4ddc5489a797f63456ca1322c0d9e9f5", "filename": "src/test/ui/run-pass/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-project-from-type-param-via-bound-in-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-project-from-type-param-via-bound-in-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-project-from-type-param-via-bound-in-where.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Various uses of `T::Item` syntax where the bound that supplies\n // `Item` originates in a where-clause, not the declaration of\n // `T`. Issue #20300.", "previous_filename": "src/test/run-pass/associated-types-project-from-type-param-via-bound-in-where.rs"}, {"sha": "57c7f557ffaf147f19dd50641a2467bac6de1926", "filename": "src/test/ui/run-pass/associated-types/associated-types-projection-bound-in-supertraits.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-bound-in-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-bound-in-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-bound-in-supertraits.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we correctly handle projection bounds appearing in the\n // supertrait list (and in conjunction with overloaded operators). In\n // this case, the `Result=Self` binding in the supertrait listing of", "previous_filename": "src/test/run-pass/associated-types-projection-bound-in-supertraits.rs"}, {"sha": "964eb886236058839b743f6d5460b91d7dd9ceae", "filename": "src/test/ui/run-pass/associated-types/associated-types-projection-from-known-type-in-impl.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-from-known-type-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-from-known-type-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-from-known-type-in-impl.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test where the impl self type uses a projection from a constant type.\n \n ", "previous_filename": "src/test/run-pass/associated-types-projection-from-known-type-in-impl.rs"}, {"sha": "8b98325598c8a8fc996841e3e38743f3f0247aef", "filename": "src/test/ui/run-pass/associated-types/associated-types-projection-in-object-type.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Corrected regression test for #20831. The original did not compile.\n // When fixed, it revealed another problem concerning projections that\n // appear in associated type bindings in object types, which were not", "previous_filename": "src/test/run-pass/associated-types-projection-in-object-type.rs"}, {"sha": "001faef7f4816b9184744e2bdea4e390538b23d9", "filename": "src/test/ui/run-pass/associated-types/associated-types-projection-in-supertrait.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-supertrait.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we are handle to correctly handle a projection type\n // that appears in a supertrait bound. Issue #20559.\n ", "previous_filename": "src/test/run-pass/associated-types-projection-in-supertrait.rs"}, {"sha": "c2379e0f07829c4030196600c715ae89edcf2f58", "filename": "src/test/ui/run-pass/associated-types/associated-types-projection-in-where-clause.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-where-clause.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test a where clause that uses a non-normalized projection type.\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/associated-types-projection-in-where-clause.rs"}, {"sha": "f6951b48ae79525169c6fe5e204433417188438e", "filename": "src/test/ui/run-pass/associated-types/associated-types-projection-to-unrelated-trait.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Check that we do not get an error when you use `<Self as Get>::Value` in\n // the trait definition if there is no default method and for every impl,\n // `Self` does implement `Get`.", "previous_filename": "src/test/run-pass/associated-types-projection-to-unrelated-trait.rs"}, {"sha": "b3d5c3539894095dc6072d0154bc02b34de71b82", "filename": "src/test/ui/run-pass/associated-types/associated-types-qualified-path-with-trait-with-type-parameters.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n trait Foo<T> {", "previous_filename": "src/test/run-pass/associated-types-qualified-path-with-trait-with-type-parameters.rs"}, {"sha": "e45766adc2ca2cc09768088f170cf9e3bd59d881", "filename": "src/test/ui/run-pass/associated-types/associated-types-ref-from-struct.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-ref-from-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-ref-from-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-ref-from-struct.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test associated type references in structure fields.\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/associated-types-ref-from-struct.rs"}, {"sha": "02e1d74db47d41363e0d0b28bc15dda7dfa185a0", "filename": "src/test/ui/run-pass/associated-types/associated-types-ref-in-struct-literal.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-ref-in-struct-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-ref-in-struct-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-ref-in-struct-literal.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test associated type references in a struct literal. Issue #20535.\n \n ", "previous_filename": "src/test/run-pass/associated-types-ref-in-struct-literal.rs"}, {"sha": "b4038a21828c6adbac3eaf615cb84e478955d3fb", "filename": "src/test/ui/run-pass/associated-types/associated-types-region-erasure-issue-20582.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-region-erasure-issue-20582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-region-erasure-issue-20582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-region-erasure-issue-20582.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Regression test for #20582. This test caused an ICE related to\n // inconsistent region erasure in codegen.\n ", "previous_filename": "src/test/run-pass/associated-types-region-erasure-issue-20582.rs"}, {"sha": "b77f3fcd295fbc06d5e0226ad16a73ba0d18bada", "filename": "src/test/ui/run-pass/associated-types/associated-types-resolve-lifetime.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-resolve-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-resolve-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-resolve-lifetime.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n trait Get<T> {", "previous_filename": "src/test/run-pass/associated-types-resolve-lifetime.rs"}, {"sha": "18b05987715a4083ac725299f6f3c4ddf5d9201c", "filename": "src/test/ui/run-pass/associated-types/associated-types-return.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-return.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test equality constraints on associated types in a where clause.\n \n ", "previous_filename": "src/test/run-pass/associated-types-return.rs"}, {"sha": "8e9b2367fcd0917e0d05ca1b3b8f8d2f5a4ccbd5", "filename": "src/test/ui/run-pass/associated-types/associated-types-simple.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-simple.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Get {\n     type Value;", "previous_filename": "src/test/run-pass/associated-types-simple.rs"}, {"sha": "c486e3463515e3268ac91131d35c07ce0e590273", "filename": "src/test/ui/run-pass/associated-types/associated-types-stream.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-stream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-stream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-stream.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test references to the trait `Stream` in the bounds for associated\n // types defined on `Stream`. Issue #20551.\n ", "previous_filename": "src/test/run-pass/associated-types-stream.rs"}, {"sha": "384ec8ef44f0e0db2e5ae872da43c9ed7e0bdbef", "filename": "src/test/ui/run-pass/associated-types/associated-types-struct-field-named.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-struct-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-struct-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-struct-field-named.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we correctly normalize the type of a struct field\n // which has an associated type.\n ", "previous_filename": "src/test/run-pass/associated-types-struct-field-named.rs"}, {"sha": "54d0c8839a37847e9389765e0051ce9e667f8abd", "filename": "src/test/ui/run-pass/associated-types/associated-types-struct-field-numbered.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-struct-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-struct-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-struct-field-numbered.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we correctly normalize the type of a struct field\n // which has an associated type.\n ", "previous_filename": "src/test/run-pass/associated-types-struct-field-numbered.rs"}, {"sha": "3b148c5e1065468c1c4c43edc18b4bbf2f284286", "filename": "src/test/ui/run-pass/associated-types/associated-types-sugar-path.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-sugar-path.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test paths to associated types using the type-parameter-only sugar.\n \n use std::ops::Deref;", "previous_filename": "src/test/run-pass/associated-types-sugar-path.rs"}, {"sha": "5f24a44c14b5c709c06a252e525f40246a18c3c1", "filename": "src/test/ui/run-pass/associated-types/associated-types-where-clause-impl-ambiguity.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-where-clause-impl-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-where-clause-impl-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-where-clause-impl-ambiguity.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test how resolving a projection interacts with inference.  In this\n // case, we were eagerly unifying the type variable for the iterator\n // type with `I` from the where clause, ignoring the in-scope `impl`", "previous_filename": "src/test/run-pass/associated-types-where-clause-impl-ambiguity.rs"}, {"sha": "175e8730cbcd3f8ccbed893ace5b4d98dd8d1641", "filename": "src/test/ui/run-pass/associated-types/auxiliary/associated-types-cc-lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fauxiliary%2Fassociated-types-cc-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fauxiliary%2Fassociated-types-cc-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fauxiliary%2Fassociated-types-cc-lib.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "previous_filename": "src/test/run-pass/auxiliary/associated-types-cc-lib.rs"}, {"sha": "d984531b8bbf4b375ccbc7beaebe6c033471ff56", "filename": "src/test/ui/run-pass/autoref-autoderef/auto-ref-bounded-ty-param.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref-bounded-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref-bounded-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref-bounded-ty-param.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n trait Foo {\n     fn f(&self);\n }", "previous_filename": "src/test/run-pass/auto-ref-bounded-ty-param.rs"}, {"sha": "6e665b0765680a48409760113f796b0b7e0f8e00", "filename": "src/test/ui/run-pass/autoref-autoderef/auto-ref-sliceable.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref-sliceable.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n trait Pushable<T> {", "previous_filename": "src/test/run-pass/auto-ref-sliceable.rs"}, {"sha": "afc79cce35e0e1f1b9f95b3bbcb670cff10c1ab8", "filename": "src/test/ui/run-pass/autoref-autoderef/auto-ref.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n struct Foo {\n     x: isize,\n }", "previous_filename": "src/test/run-pass/auto-ref.rs"}, {"sha": "0ce3ef7fd7b3e9710dd866eae54694322e762def", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-and-borrow-method-receiver.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-and-borrow-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-and-borrow-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-and-borrow-method-receiver.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n struct Foo {", "previous_filename": "src/test/run-pass/autoderef-and-borrow-method-receiver.rs"}, {"sha": "8116a311eb458a5695819f1ad53418e5ced29ca0", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-method-on-trait.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n #![feature(box_syntax)]\n \n trait double {", "previous_filename": "src/test/run-pass/autoderef-method-on-trait.rs"}, {"sha": "2b14839500397781d2d9912b6e43045ed0be569f", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-method-priority.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-priority.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n #![feature(box_syntax)]\n \n trait double {", "previous_filename": "src/test/run-pass/autoderef-method-priority.rs"}, {"sha": "14c57b075195ae2666c3ad62955d989fbdbffb35", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-twice-but-not-thrice.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n #![feature(box_syntax)]\n \n trait double {", "previous_filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs"}, {"sha": "5185d0ee749a4b266df04821cd08ff36bf39fe5b", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-method-twice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-twice.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n #![feature(box_syntax)]\n \n trait double {", "previous_filename": "src/test/run-pass/autoderef-method-twice.rs"}, {"sha": "398ccde889483ca79f9cf24237df003ab3de76b7", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-method.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n #![feature(box_syntax)]\n \n trait double {", "previous_filename": "src/test/run-pass/autoderef-method.rs"}, {"sha": "cfbc7744a4cf36adbf01c449d5e8698f9b87a13b", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-privacy.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-privacy.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Check we do not select a private method or field when computing autoderefs\n \n #![allow(unused)]", "previous_filename": "src/test/run-pass/autoderef-privacy.rs"}, {"sha": "e32738e8f152a2ba294a7ac15cc93c411b4606d9", "filename": "src/test/ui/run-pass/autoref-autoderef/autoref-intermediate-types-issue-3585.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoref-intermediate-types-issue-3585.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n trait Foo {", "previous_filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs"}, {"sha": "866784e517c7d4d1429665ea51237b7f45c1fbc2", "filename": "src/test/ui/run-pass/binding/allow_irrefutable_let_patterns.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fallow_irrefutable_let_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fallow_irrefutable_let_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fallow_irrefutable_let_patterns.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(irrefutable_let_patterns)]\n \n // must-compile-successfully-irrefutable_let_patterns_with_gate", "previous_filename": "src/test/run-pass/allow_irrefutable_let_patterns.rs"}, {"sha": "24f037742708d3614033efbea2ce52222f8e4f3e", "filename": "src/test/ui/run-pass/binding/bind-field-short-with-modifiers.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fbind-field-short-with-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fbind-field-short-with-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fbind-field-short-with-modifiers.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_shorthand_field_patterns)]\n \n pub fn main() {\n     struct Foo { x: isize, y: isize }", "previous_filename": "src/test/run-pass/bind-field-short-with-modifiers.rs"}, {"sha": "6a23d159047ac584e109003493aeacf70a749f13", "filename": "src/test/ui/run-pass/binding/borrowed-ptr-pattern-2.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-2.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn foo(s: &String) -> bool {\n     match &**s {", "previous_filename": "src/test/run-pass/borrowed-ptr-pattern-2.rs"}, {"sha": "cb40b3a00991a7b4ecfce3b8125ddadec337a64e", "filename": "src/test/ui/run-pass/binding/borrowed-ptr-pattern-3.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-3.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn foo<'r>(s: &'r usize) -> bool {\n     match s {", "previous_filename": "src/test/run-pass/borrowed-ptr-pattern-3.rs"}, {"sha": "5f906903ed2519203a1464b5c20b0f01e79c5569", "filename": "src/test/ui/run-pass/binding/borrowed-ptr-pattern-infallible.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-infallible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-infallible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-infallible.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n pub fn main() {", "previous_filename": "src/test/run-pass/borrowed-ptr-pattern-infallible.rs"}, {"sha": "1372a7a078935688dea0740fad818b42c37b714f", "filename": "src/test/ui/run-pass/binding/borrowed-ptr-pattern-option.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-option.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn select<'r>(x: &'r Option<isize>, y: &'r Option<isize>) -> &'r Option<isize> {\n     match (x, y) {", "previous_filename": "src/test/run-pass/borrowed-ptr-pattern-option.rs"}, {"sha": "f363bef36d642d3d8a2c6c05c8bc7e6c7916cde2", "filename": "src/test/ui/run-pass/binding/borrowed-ptr-pattern.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn foo<T:Clone>(x: &T) -> T{\n     match x {", "previous_filename": "src/test/run-pass/borrowed-ptr-pattern.rs"}, {"sha": "c230442eecc58aca9f1b574a6008b0a731157b05", "filename": "src/test/ui/run-pass/binding/empty-types-in-patterns.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fempty-types-in-patterns.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]", "previous_filename": "src/test/run-pass/empty-types-in-patterns.rs"}, {"sha": "26e852eff2350b02ac41b733759412ce7e653bbb", "filename": "src/test/ui/run-pass/binding/exhaustive-bool-match-sanity.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexhaustive-bool-match-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexhaustive-bool-match-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexhaustive-bool-match-sanity.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Issue #33540\n // We previously used to generate a 3-armed boolean `SwitchInt` in the\n // MIR of the function `foo` below. #33583 changed rustc to", "previous_filename": "src/test/run-pass/exhaustive-bool-match-sanity.rs"}, {"sha": "3325aa7b3df8f4e3649c3e8b3c20fe487154f8b4", "filename": "src/test/ui/run-pass/binding/expr-match-generic-unique1.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic-unique1.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n fn test_generic<T: Clone, F>(expected: Box<T>, eq: F) where F: FnOnce(Box<T>, Box<T>) -> bool {", "previous_filename": "src/test/run-pass/expr-match-generic-unique1.rs"}, {"sha": "8daa33e6227314b0e026c9adc8537bb5f3e25008", "filename": "src/test/ui/run-pass/binding/expr-match-generic-unique2.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic-unique2.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {", "previous_filename": "src/test/run-pass/expr-match-generic-unique2.rs"}, {"sha": "11c907b9b2da109552c6d470656bd5186a4b471d", "filename": "src/test/ui/run-pass/binding/expr-match-generic.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+// run-pass\n+#![allow(non_camel_case_types)]\n \n type compare<T> = extern \"Rust\" fn(T, T) -> bool;\n ", "previous_filename": "src/test/run-pass/expr-match-generic.rs"}, {"sha": "f283fdddb6a1b9b2b7065a485b16a8962718c6fb", "filename": "src/test/ui/run-pass/binding/expr-match-panic-all.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-panic-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-panic-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-panic-all.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n ", "previous_filename": "src/test/run-pass/expr-match-panic-all.rs"}, {"sha": "c6f8ae7bca684d64102c48bda16adcff089d2a68", "filename": "src/test/ui/run-pass/binding/expr-match-panic.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-panic.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n fn test_simple() {", "previous_filename": "src/test/run-pass/expr-match-panic.rs"}, {"sha": "b67b9fa3ddac861ea334ca3c042f54e67a81e7f7", "filename": "src/test/ui/run-pass/binding/expr-match-unique.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-unique.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n // Tests for match as expressions resulting in boxed types", "previous_filename": "src/test/run-pass/expr-match-unique.rs"}, {"sha": "83d44e42b3272bfdf285b578950cbe18fc637a77", "filename": "src/test/ui/run-pass/binding/expr-match.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n ", "previous_filename": "src/test/run-pass/expr-match.rs"}, {"sha": "c0e68f99ad0e70fb5fd147fef2aa5eba7a698704", "filename": "src/test/ui/run-pass/binding/fat-arrow-match.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffat-arrow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffat-arrow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffat-arrow-match.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n \n enum color {\n     red,", "previous_filename": "src/test/run-pass/fat-arrow-match.rs"}, {"sha": "7926234161f52a91a2bcd66082d1aafb3042393b", "filename": "src/test/ui/run-pass/binding/fn-pattern-expected-type-2.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffn-pattern-expected-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffn-pattern-expected-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffn-pattern-expected-type-2.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n pub fn main() {\n     let v : &[(isize,isize)] = &[ (1, 2), (3, 4), (5, 6) ];\n     for &(x, y) in v {", "previous_filename": "src/test/run-pass/fn-pattern-expected-type-2.rs"}, {"sha": "a868267f37169baf730a1d4cf25ea4b3df936dc4", "filename": "src/test/ui/run-pass/binding/fn-pattern-expected-type.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffn-pattern-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffn-pattern-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffn-pattern-expected-type.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let f = |(x, y): (isize, isize)| {", "previous_filename": "src/test/run-pass/fn-pattern-expected-type.rs"}, {"sha": "d766feeb72c907962df9eb30d2efe0034e4f72eb", "filename": "src/test/ui/run-pass/binding/func-arg-incomplete-pattern.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-incomplete-pattern.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we do not leak when the arg pattern must drop part of the\n // argument (in this case, the `y` field).\n ", "previous_filename": "src/test/run-pass/func-arg-incomplete-pattern.rs"}, {"sha": "7e87f14e2c5300ffa43ff1a8a4b1d95728539944", "filename": "src/test/ui/run-pass/binding/func-arg-ref-pattern.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-ref-pattern.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // exec-env:RUST_POISON_ON_FREE=1\n \n // Test argument patterns where we create refs to the inside of", "previous_filename": "src/test/run-pass/func-arg-ref-pattern.rs"}, {"sha": "18a1909b51e0b29f1165ddce78e58033f329bfa9", "filename": "src/test/ui/run-pass/binding/func-arg-wild-pattern.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-wild-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-wild-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-wild-pattern.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we can compile code that uses a `_` in function argument\n // patterns.\n ", "previous_filename": "src/test/run-pass/func-arg-wild-pattern.rs"}, {"sha": "9147bf14cadbcb0140200754da73575ab75db604", "filename": "src/test/ui/run-pass/binding/if-let.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fif-let.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let x = Some(3);", "previous_filename": "src/test/run-pass/if-let.rs"}, {"sha": "9e9fc8b4249092f72cdee6521016f8665d343e14", "filename": "src/test/ui/run-pass/binding/inconsistent-lifetime-mismatch.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Finconsistent-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Finconsistent-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Finconsistent-lifetime-mismatch.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n fn foo(_: &[&str]) {}", "previous_filename": "src/test/run-pass/inconsistent-lifetime-mismatch.rs"}, {"sha": "3be0991aea6a1b04e61a5fca740509e8880b25b3", "filename": "src/test/ui/run-pass/binding/inferred-suffix-in-pattern-range.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Finferred-suffix-in-pattern-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Finferred-suffix-in-pattern-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Finferred-suffix-in-pattern-range.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let x = 2;", "previous_filename": "src/test/run-pass/inferred-suffix-in-pattern-range.rs"}, {"sha": "9cd62f9a90106126d0db74703994b0ead6d7374a", "filename": "src/test/ui/run-pass/binding/irrefutable-slice-patterns.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Firrefutable-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Firrefutable-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Firrefutable-slice-patterns.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // #47096\n \n #![feature(slice_patterns)]", "previous_filename": "src/test/run-pass/irrefutable-slice-patterns.rs"}, {"sha": "99fc172892c2d2873b1c0d830d2763ca11458015", "filename": "src/test/ui/run-pass/binding/let-assignability.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-assignability.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n fn f() {", "previous_filename": "src/test/run-pass/let-assignability.rs"}, {"sha": "1c1b1a397692732f35525d8b4bae284a827a2d12", "filename": "src/test/ui/run-pass/binding/let-destruct-ref.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-destruct-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-destruct-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-destruct-ref.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let x = 3_usize;", "previous_filename": "src/test/run-pass/let-destruct-ref.rs"}, {"sha": "d432dbe86b91d482002334a670af2a4701de0b4d", "filename": "src/test/ui/run-pass/binding/let-var-hygiene.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-var-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-var-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-var-hygiene.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // shouldn't affect evaluation of $ex:\n \n macro_rules! bad_macro {", "previous_filename": "src/test/run-pass/let-var-hygiene.rs"}, {"sha": "c5111073ca8b2b5b41718fe4053f2f88f5e4af40", "filename": "src/test/ui/run-pass/binding/match-arm-statics.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // compile-flags: -g\n \n #[derive(PartialEq, Eq)]", "previous_filename": "src/test/run-pass/match-arm-statics.rs"}, {"sha": "16954f85752aeb11b6549768d423bce9878aa884", "filename": "src/test/ui/run-pass/binding/match-beginning-vert.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-beginning-vert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-beginning-vert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-beginning-vert.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n enum Foo {\n     A,\n     B,", "previous_filename": "src/test/run-pass/match-beginning-vert.rs"}, {"sha": "0871ff836cca55a7ffb8946705b743955491b4b8", "filename": "src/test/ui/run-pass/binding/match-borrowed_str.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-borrowed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-borrowed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-borrowed_str.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unnecessary_allocation)]\n+// run-pass\n \n fn f1(ref_string: &str) -> String {\n     match ref_string {", "previous_filename": "src/test/run-pass/match-borrowed_str.rs"}, {"sha": "8f9a8d2cfcca1cdb9ba99ceca883a2067effee7a", "filename": "src/test/ui/run-pass/binding/match-bot-2.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-bot-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-bot-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-bot-2.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // n.b. This was only ever failing with optimization disabled.\n \n fn a() -> isize { match return 1 { 2 => 3, _ => panic!() } }", "previous_filename": "src/test/run-pass/match-bot-2.rs"}, {"sha": "d91d95b826a16a3398165fe09f047869418384a7", "filename": "src/test/ui/run-pass/binding/match-bot.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-bot.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let i: isize =", "previous_filename": "src/test/run-pass/match-bot.rs"}, {"sha": "728d4a241fefef63c27a508dd249dbf41023c7ac", "filename": "src/test/ui/run-pass/binding/match-byte-array-patterns.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-byte-array-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-byte-array-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-byte-array-patterns.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(slice_patterns)]\n \n fn main() {", "previous_filename": "src/test/run-pass/match-byte-array-patterns.rs"}, {"sha": "9ddf3b421d5e8867927913cc6ce94031e9275be9", "filename": "src/test/ui/run-pass/binding/match-enum-struct-0.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-enum-struct-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-enum-struct-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-enum-struct-0.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // regression test for issue #5625\n \n ", "previous_filename": "src/test/run-pass/match-enum-struct-0.rs"}, {"sha": "46d9c19bf849a774578f3ecfc5ed9a59f10d42c4", "filename": "src/test/ui/run-pass/binding/match-enum-struct-1.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-enum-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-enum-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-enum-struct-1.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n enum E {\n     Foo{f : isize},", "previous_filename": "src/test/run-pass/match-enum-struct-1.rs"}, {"sha": "68edbea34717255c75248845fd0b3cd1fff6f748", "filename": "src/test/ui/run-pass/binding/match-implicit-copy-unique.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-implicit-copy-unique.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_shorthand_field_patterns)]\n #![feature(box_syntax)]\n \n struct Pair { a: Box<isize>, b: Box<isize> }", "previous_filename": "src/test/run-pass/match-implicit-copy-unique.rs"}, {"sha": "5c4c7c048ef7302c26adbcf65b81393be50c7dad", "filename": "src/test/ui/run-pass/binding/match-in-macro.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-in-macro.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n enum Foo {\n     B { b1: isize, bb1: isize},", "previous_filename": "src/test/run-pass/match-in-macro.rs"}, {"sha": "94ea8edd70f41c21f269db3c187198cb32cb88a9", "filename": "src/test/ui/run-pass/binding/match-join.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-join.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn foo<T>(y: Option<T>) {\n     let mut x: isize;\n     let mut rs: Vec<isize> = Vec::new();", "previous_filename": "src/test/run-pass/match-join.rs"}, {"sha": "f649ce0ee0e021c600546e25bfde9a7938b5c34a", "filename": "src/test/ui/run-pass/binding/match-larger-const.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-larger-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-larger-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-larger-const.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #[derive(Eq, PartialEq)]\n pub struct Data([u8; 4]);\n ", "previous_filename": "src/test/run-pass/match-larger-const.rs"}, {"sha": "f016ca8e43ce512bfc8ba911b9b6182c96ee9eca", "filename": "src/test/ui/run-pass/binding/match-naked-record-expr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-naked-record-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-naked-record-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-naked-record-expr.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n struct X { x: isize }", "previous_filename": "src/test/run-pass/match-naked-record-expr.rs"}, {"sha": "550ace8b64958848a14cedc4fdd9d457f38fe4c7", "filename": "src/test/ui/run-pass/binding/match-naked-record.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-naked-record.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-naked-record.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-naked-record.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n struct X { x: isize }", "previous_filename": "src/test/run-pass/match-naked-record.rs"}, {"sha": "06d7095a9248f006bd94f0658a13c4b8277a3f18", "filename": "src/test/ui/run-pass/binding/match-path.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-path.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n \n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/match-path.rs"}, {"sha": "e6242a0ee587c9b318579ec3a839a941f66f3663", "filename": "src/test/ui/run-pass/binding/match-pattern-bindings.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-bindings.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn main() {\n     let value = Some(1);", "previous_filename": "src/test/run-pass/match-pattern-bindings.rs"}, {"sha": "8e6129d60b5860b5779ea98a203ca9e6795a2a07", "filename": "src/test/ui/run-pass/binding/match-pattern-lit.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-lit.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n fn altlit(f: isize) -> isize {", "previous_filename": "src/test/run-pass/match-pattern-lit.rs"}, {"sha": "2486fa782e0f9dcd01d70b18578bb861f644b38e", "filename": "src/test/ui/run-pass/binding/match-pattern-no-type-params.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-no-type-params.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n+\n enum maybe<T> { nothing, just(T), }\n \n fn foo(x: maybe<isize>) {", "previous_filename": "src/test/run-pass/match-pattern-no-type-params.rs"}, {"sha": "d15256612692b23c7f50e4379da97970e5964a8c", "filename": "src/test/ui/run-pass/binding/match-pattern-simple.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-simple.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/match-pattern-simple.rs"}, {"sha": "06a011c0fa277df43b2ba7174faa4c036754ad3d", "filename": "src/test/ui/run-pass/binding/match-phi.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-phi.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n-\n-#![allow(dead_assignment)]\n+#![allow(non_camel_case_types)]\n #![allow(unused_variables)]\n \n enum thing { a, b, c, }", "previous_filename": "src/test/run-pass/match-phi.rs"}, {"sha": "577e5c97e42a75e68a41835f5e3fffa6f785e80b", "filename": "src/test/ui/run-pass/binding/match-pipe-binding.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pipe-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pipe-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pipe-binding.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // compile-flags: -Z borrowck=compare\n \n fn test1() {", "previous_filename": "src/test/run-pass/match-pipe-binding.rs"}, {"sha": "7178d1837c7abfa9b80e30b0073351f7325c8706", "filename": "src/test/ui/run-pass/binding/match-range-infer.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range-infer.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that type inference for range patterns works correctly (is bi-directional).\n \n pub fn main() {", "previous_filename": "src/test/run-pass/match-range-infer.rs"}, {"sha": "5be8db5fc86baa5e36120fa11d55104722483d4a", "filename": "src/test/ui/run-pass/binding/match-range-static.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range-static.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n+#![allow(non_upper_case_globals)]\n \n const s: isize = 1;\n const e: isize = 42;", "previous_filename": "src/test/run-pass/match-range-static.rs"}, {"sha": "a9687943e99373994caf2195b713ff0f6a403fa4", "filename": "src/test/ui/run-pass/binding/match-range.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(illegal_floating_point_literal_pattern)] // FIXME #41620\n #![feature(exclusive_range_pattern)]\n \n pub fn main() {", "previous_filename": "src/test/run-pass/match-range.rs"}, {"sha": "89b12976355bf3c59a92496856c998904951b01a", "filename": "src/test/ui/run-pass/binding/match-reassign.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-reassign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-reassign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-reassign.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Regression test for #23698: The reassignment checker only cared\n // about the last assignment in a match arm body\n ", "previous_filename": "src/test/run-pass/match-reassign.rs"}, {"sha": "2da75d941b4c380037361f3c670808085ca02455", "filename": "src/test/ui/run-pass/binding/match-ref-binding-in-guard-3256.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-in-guard-3256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-in-guard-3256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-in-guard-3256.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n use std::sync::Mutex;\n ", "previous_filename": "src/test/run-pass/match-ref-binding-in-guard-3256.rs"}, {"sha": "a3d26024732d2625c21f59d366c7e5faba303441", "filename": "src/test/ui/run-pass/binding/match-ref-binding-mut-option.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-mut-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-mut-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-mut-option.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let mut v = Some(22);", "previous_filename": "src/test/run-pass/match-ref-binding-mut-option.rs"}, {"sha": "c1f09502542ab44d0575a6c5f8a3b671e8ca43d0", "filename": "src/test/ui/run-pass/binding/match-ref-binding-mut.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-mut.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_shorthand_field_patterns)]\n \n struct Rec {\n     f: isize", "previous_filename": "src/test/run-pass/match-ref-binding-mut.rs"}, {"sha": "bc36b8102ce0421c04f9d78a7a84a514d972477c", "filename": "src/test/ui/run-pass/binding/match-ref-binding.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn destructure(x: Option<isize>) -> isize {\n     match x {", "previous_filename": "src/test/run-pass/match-ref-binding.rs"}, {"sha": "7ef1933001504c5af944172582e7c4f5484319c6", "filename": "src/test/ui/run-pass/binding/match-ref-unsized.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-unsized.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Binding unsized expressions to ref patterns\n \n pub fn main() {", "previous_filename": "src/test/run-pass/match-ref-unsized.rs"}, {"sha": "0d75c81b1e6db7a5bcfa7614b390c523a765ff86", "filename": "src/test/ui/run-pass/binding/match-static-const-rename.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-static-const-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-static-const-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-static-const-rename.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Issue #7526: lowercase static constants in patterns look like bindings\n \n // This is similar to compile-fail/match-static-const-lc, except it", "previous_filename": "src/test/run-pass/match-static-const-rename.rs"}, {"sha": "0722a6f0b32ef380d0da0774e4bfcde11cc4f081", "filename": "src/test/ui/run-pass/binding/match-str.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-str.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Issue #53\n+#![allow(non_camel_case_types)]\n \n \n pub fn main() {", "previous_filename": "src/test/run-pass/match-str.rs"}, {"sha": "facfaae54051631320d9727241a4be85c42729f9", "filename": "src/test/ui/run-pass/binding/match-struct-0.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-struct-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-struct-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-struct-0.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n struct Foo{\n     f : isize,", "previous_filename": "src/test/run-pass/match-struct-0.rs"}, {"sha": "aeeb7dd4bc9eda33e49c3bdeb283d6a4fca80055", "filename": "src/test/ui/run-pass/binding/match-tag.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-tag.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+// run-pass\n+#![allow(non_camel_case_types)]\n \n \n ", "previous_filename": "src/test/run-pass/match-tag.rs"}, {"sha": "a543527586f88e9e3f7f0da3b38e335bb1176bff", "filename": "src/test/ui/run-pass/binding/match-unique-bind.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-unique-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-unique-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-unique-bind.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n ", "previous_filename": "src/test/run-pass/match-unique-bind.rs"}, {"sha": "2e2f0f0b7ea45039b8b8ea537f5b5ea6e0d14592", "filename": "src/test/ui/run-pass/binding/match-unsized.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-unsized.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn main() {\n     let data: &'static str = \"Hello, World!\";\n     match data {", "previous_filename": "src/test/run-pass/match-unsized.rs"}, {"sha": "a24a38af22f1e159ce57270017987991b4a056ab", "filename": "src/test/ui/run-pass/binding/match-value-binding-in-guard-3291.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-value-binding-in-guard-3291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-value-binding-in-guard-3291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-value-binding-in-guard-3291.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n #![feature(box_syntax)]", "previous_filename": "src/test/run-pass/match-value-binding-in-guard-3291.rs"}, {"sha": "5d4347559f788841d49ba3d24c0476a1487d2fde", "filename": "src/test/ui/run-pass/binding/match-var-hygiene.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-var-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-var-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-var-hygiene.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // shouldn't affect evaluation of $ex.\n macro_rules! bad_macro { ($ex:expr) => (\n     {match 9 {_x => $ex}}", "previous_filename": "src/test/run-pass/match-var-hygiene.rs"}, {"sha": "4c7289245568d92f3eb458b152960d3ec3f7a5c5", "filename": "src/test/ui/run-pass/binding/match-vec-alternatives.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-vec-alternatives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-vec-alternatives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-vec-alternatives.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(slice_patterns)]\n \n fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) -> &'static str {", "previous_filename": "src/test/run-pass/match-vec-alternatives.rs"}, {"sha": "308a4938b3aa59870b076a114e17a2876f20ff26", "filename": "src/test/ui/run-pass/binding/match-vec-rvalue.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-vec-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-vec-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-vec-rvalue.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Tests that matching rvalues with drops does not crash.\n \n ", "previous_filename": "src/test/run-pass/match-vec-rvalue.rs"}, {"sha": "fe7aa288d52b8a2d26dbf181ee19475955f762d8", "filename": "src/test/ui/run-pass/binding/match-with-ret-arm.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-with-ret-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-with-ret-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-with-ret-arm.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n pub fn main() {\n     // sometimes we have had trouble finding\n     // the right type for f, as we unified", "previous_filename": "src/test/run-pass/match-with-ret-arm.rs"}, {"sha": "6ecd84d8c58bfc7738457ba2452e771884bd21e1", "filename": "src/test/ui/run-pass/binding/multi-let.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmulti-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmulti-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmulti-let.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let x = 10;", "previous_filename": "src/test/run-pass/multi-let.rs"}, {"sha": "1e28b77f2ce0fb8266927fd04920557e95497ab2", "filename": "src/test/ui/run-pass/binding/mut-in-ident-patterns.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmut-in-ident-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmut-in-ident-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmut-in-ident-patterns.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n+#![allow(non_shorthand_field_patterns)]\n \n trait Foo {\n     fn foo(&self, mut x: isize) -> isize {", "previous_filename": "src/test/run-pass/mut-in-ident-patterns.rs"}, {"sha": "8456e63d4c7ba80c4aa5cb25615bf873d81b9724", "filename": "src/test/ui/run-pass/binding/nested-exhaustive-match.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-exhaustive-match.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n struct Foo { foo: bool, bar: Option<isize>, baz: isize }", "previous_filename": "src/test/run-pass/nested-exhaustive-match.rs"}, {"sha": "e1012f3b384c9cee8cd560de5b10daea27dcb730", "filename": "src/test/ui/run-pass/binding/nested-matchs.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-matchs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-matchs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-matchs.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn baz() -> ! { panic!(); }\n \n fn foo() {", "previous_filename": "src/test/run-pass/nested-matchs.rs"}, {"sha": "5bf558a4871297e6a6fdddaa6e38617b1c2d8cab", "filename": "src/test/ui/run-pass/binding/nested-pattern.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-pattern.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+// run-pass\n+#![allow(non_camel_case_types)]\n \n // a bug was causing this to complain about leaked memory on exit\n ", "previous_filename": "src/test/run-pass/nested-pattern.rs"}, {"sha": "39b2f2da6244543fe1bec4e60cdeb28511077705", "filename": "src/test/ui/run-pass/binding/nil-pattern.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnil-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnil-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnil-pattern.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n pub fn main() { let x = (); match x { () => { } } }", "previous_filename": "src/test/run-pass/nil-pattern.rs"}, {"sha": "892464dd1dbf99af2e054b2e3ad6ae3c502283f9", "filename": "src/test/ui/run-pass/binding/nullary-or-pattern.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnullary-or-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnullary-or-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnullary-or-pattern.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n \n enum blah { a, b, }\n ", "previous_filename": "src/test/run-pass/nullary-or-pattern.rs"}, {"sha": "90ef3c2b7eafda5158349be24cbf72b5a7e77015", "filename": "src/test/ui/run-pass/binding/optional_comma_in_match_arm.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Foptional_comma_in_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Foptional_comma_in_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Foptional_comma_in_match_arm.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // ignore-pretty issue #37199\n+#![allow(while_true)]\n \n fn main() {\n     let x = 1;", "previous_filename": "src/test/run-pass/optional_comma_in_match_arm.rs"}, {"sha": "a9b3e27865246a3e4a4bdb2db5636d695a19fc84", "filename": "src/test/ui/run-pass/binding/or-pattern.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2For-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2For-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2For-pattern.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n \n enum blah { a(isize, isize, usize), b(isize, isize), c, }\n ", "previous_filename": "src/test/run-pass/or-pattern.rs"}, {"sha": "7bb929325ad689add626afd26aa31db8d1043752", "filename": "src/test/ui/run-pass/binding/order-drop-with-match.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Forder-drop-with-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Forder-drop-with-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Forder-drop-with-match.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n // Test to make sure the destructors run in the right order.\n // Each destructor sets it's tag in the corresponding entry", "previous_filename": "src/test/run-pass/order-drop-with-match.rs"}, {"sha": "44666eda3ca7158768ef6fde970efc05a3c4dfb0", "filename": "src/test/ui/run-pass/binding/pat-ranges.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-ranges.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Parsing of range patterns\n \n const NUM1: i32 = 10;", "previous_filename": "src/test/run-pass/pat-ranges.rs"}, {"sha": "dc8a7ff7a07d6c16f65bc3b06455e995e6a0545e", "filename": "src/test/ui/run-pass/binding/pat-tuple-1.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-1.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn tuple() {\n     let x = (1, 2, 3);\n     match x {", "previous_filename": "src/test/run-pass/pat-tuple-1.rs"}, {"sha": "0428e32c43b41bbcaee2fcf0ca60666f6683cffb", "filename": "src/test/ui/run-pass/binding/pat-tuple-2.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-2.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn tuple() {\n     let x = (1,);\n     match x {", "previous_filename": "src/test/run-pass/pat-tuple-2.rs"}, {"sha": "60b933e4ce448289e928b401829cdc2863d3c2f9", "filename": "src/test/ui/run-pass/binding/pat-tuple-3.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-3.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn tuple() {\n     let x = (1, 2, 3);\n     let branch = match x {", "previous_filename": "src/test/run-pass/pat-tuple-3.rs"}, {"sha": "cd19f2c67a12266ac3e64af5aa34b4b7625caa45", "filename": "src/test/ui/run-pass/binding/pat-tuple-4.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-4.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn tuple() {\n     let x = (1, 2, 3);\n     match x {", "previous_filename": "src/test/run-pass/pat-tuple-4.rs"}, {"sha": "0ac4c24c4eef268d970a039901808752a0648c9b", "filename": "src/test/ui/run-pass/binding/pat-tuple-5.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-5.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn tuple() {\n     struct S;\n     struct Z;", "previous_filename": "src/test/run-pass/pat-tuple-5.rs"}, {"sha": "b3cd0e1b5431da2c4963e63b2d0aaccdfa000de5", "filename": "src/test/ui/run-pass/binding/pat-tuple-6.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-6.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn tuple() {\n     let x = (1, 2, 3, 4, 5);\n     match x {", "previous_filename": "src/test/run-pass/pat-tuple-6.rs"}, {"sha": "c6730f14bc4c36b9396dce05d79593f80bcedd26", "filename": "src/test/ui/run-pass/binding/pat-tuple-7.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(pattern_parentheses)]\n \n fn main() {", "previous_filename": "src/test/run-pass/pat-tuple-7.rs"}, {"sha": "2ee697fe2ff05018c6aad06fe904b078cdbd59f9", "filename": "src/test/ui/run-pass/binding/pattern-bound-var-in-for-each.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpattern-bound-var-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpattern-bound-var-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpattern-bound-var-in-for-each.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Tests that codegen_path checks whether a\n // pattern-bound var is an upvar (when codegenning\n // the for-each body)", "previous_filename": "src/test/run-pass/pattern-bound-var-in-for-each.rs"}, {"sha": "9a5a420a80ba0b54708ea53fee883c744e060f70", "filename": "src/test/ui/run-pass/binding/pattern-in-closure.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpattern-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpattern-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpattern-in-closure.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_shorthand_field_patterns)]\n+\n struct Foo {\n     x: isize,\n     y: isize", "previous_filename": "src/test/run-pass/pattern-in-closure.rs"}, {"sha": "350a64781cdb00000ffd15b0c5be235c794bc788", "filename": "src/test/ui/run-pass/binding/range-inclusive-pattern-precedence.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Frange-inclusive-pattern-precedence.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_patterns, pattern_parentheses)]\n \n const VALUE: usize = 21;", "previous_filename": "src/test/run-pass/range-inclusive-pattern-precedence.rs"}, {"sha": "13c16790e09b460291772466a4a1836ccf60e815", "filename": "src/test/ui/run-pass/binding/simple-generic-match.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fsimple-generic-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fsimple-generic-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fsimple-generic-match.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+// run-pass\n+#![allow(non_camel_case_types)]\n \n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/simple-generic-match.rs"}, {"sha": "1fc597b636ecfbfcdb9f6defbc5addf1c74af553", "filename": "src/test/ui/run-pass/binding/use-uninit-match.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fuse-uninit-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fuse-uninit-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fuse-uninit-match.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n \n \n fn foo<T>(o: myoption<T>) -> isize {", "previous_filename": "src/test/run-pass/use-uninit-match.rs"}, {"sha": "8eb44fd76e1d28b118e151c4d9eca9bf06a9967c", "filename": "src/test/ui/run-pass/binding/use-uninit-match2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fuse-uninit-match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fuse-uninit-match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fuse-uninit-match2.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n \n \n fn foo<T>(o: myoption<T>) -> isize {", "previous_filename": "src/test/run-pass/use-uninit-match2.rs"}, {"sha": "db71d97a19d46e4e76d084460c41c9d905e6089e", "filename": "src/test/ui/run-pass/binding/zero_sized_subslice_match.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fzero_sized_subslice_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fzero_sized_subslice_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fzero_sized_subslice_match.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(slice_patterns)]\n \n fn main() {", "previous_filename": "src/test/run-pass/zero_sized_subslice_match.rs"}, {"sha": "b5b4390657b4f18d648421a75cf7286dbd28dd72", "filename": "src/test/ui/run-pass/cfg/auxiliary/cfg_inner_static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fauxiliary%2Fcfg_inner_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fauxiliary%2Fcfg_inner_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fauxiliary%2Fcfg_inner_static.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "previous_filename": "src/test/run-pass/auxiliary/cfg_inner_static.rs"}, {"sha": "0028b51f9d1ee8d6cfc0b56c2944336c70e78afa", "filename": "src/test/ui/run-pass/cfg/auxiliary/crate-attributes-using-cfg_attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fauxiliary%2Fcrate-attributes-using-cfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fauxiliary%2Fcrate-attributes-using-cfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fauxiliary%2Fcrate-attributes-using-cfg_attr.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "previous_filename": "src/test/run-pass/auxiliary/crate-attributes-using-cfg_attr.rs"}, {"sha": "6e3d8f2e7f124880c8b27d0540c547be45e3b4a0", "filename": "src/test/ui/run-pass/cfg/cfg-attr-cfg.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-attr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-attr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-attr-cfg.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // main is conditionally compiled, but the conditional compilation\n // is conditional too!\n ", "previous_filename": "src/test/run-pass/cfg-attr-cfg.rs"}, {"sha": "d352e53f231acfa17fa1c6f80e1082840e63bfa4", "filename": "src/test/ui/run-pass/cfg/cfg-attr-crate.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-attr-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-attr-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-attr-crate.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // https://github.com/rust-lang/rust/issues/21833#issuecomment-72353044\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/cfg-attr-crate.rs"}, {"sha": "0a1241cccb82a272a123584f5fe57fcc3445f49b", "filename": "src/test/ui/run-pass/cfg/cfg-family.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-family.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n // ignore-cloudabi no target_family\n // ignore-wasm32-bare no target_family", "previous_filename": "src/test/run-pass/cfg-family.rs"}, {"sha": "e66c8324f366e201e9e94d192807b9572d305b63", "filename": "src/test/ui/run-pass/cfg/cfg-in-crate-1.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-in-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-in-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-in-crate-1.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // compile-flags: --cfg bar -D warnings\n #![cfg(bar)]\n ", "previous_filename": "src/test/run-pass/cfg-in-crate-1.rs"}, {"sha": "6729d205410c870401a6a49355ae8275d075ae1d", "filename": "src/test/ui/run-pass/cfg/cfg-macros-foo.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-macros-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-macros-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-macros-foo.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // compile-flags: --cfg foo\n \n // check that cfg correctly chooses between the macro impls (see also", "previous_filename": "src/test/run-pass/cfg-macros-foo.rs"}, {"sha": "2e9614cf8af7574050c494a4fec347fe921b3469", "filename": "src/test/ui/run-pass/cfg/cfg-macros-notfoo.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-macros-notfoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-macros-notfoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-macros-notfoo.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // compile-flags:\n \n // check that cfg correctly chooses between the macro impls (see also", "previous_filename": "src/test/run-pass/cfg-macros-notfoo.rs"}, {"sha": "8443d59e86977a0211937634c7c9cddf98be5429", "filename": "src/test/ui/run-pass/cfg/cfg-match-arm.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-match-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-match-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-match-arm.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n enum Foo {", "previous_filename": "src/test/run-pass/cfg-match-arm.rs"}, {"sha": "3345df69d87a349048e19ec1a96a1c595d5606d9", "filename": "src/test/ui/run-pass/cfg/cfg-target-family.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-target-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-target-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-target-family.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // ignore-cloudabi no target_family\n // ignore-wasm32-bare no target_family\n ", "previous_filename": "src/test/run-pass/cfg-target-family.rs"}, {"sha": "08daa67827b10f29e317edb87a9b7449aff8c8b4", "filename": "src/test/ui/run-pass/cfg/cfg-target-vendor.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-target-vendor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-target-vendor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg-target-vendor.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(cfg_target_vendor)]\n \n #[cfg(target_vendor = \"unknown\")]", "previous_filename": "src/test/run-pass/cfg-target-vendor.rs"}, {"sha": "e9f83e1112f234f1350ea50ee6f659eda69f512b", "filename": "src/test/ui/run-pass/cfg/cfg_attr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg_attr.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // compile-flags:--cfg set1 --cfg set2\n #![allow(dead_code)]\n use std::fmt::Debug;", "previous_filename": "src/test/run-pass/cfg_attr.rs"}, {"sha": "e711132e16a87ad809493033dd2dcaf29c66dc75", "filename": "src/test/ui/run-pass/cfg/cfg_inner_static.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg_inner_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg_inner_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg_inner_static.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:cfg_inner_static.rs\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/cfg_inner_static.rs"}, {"sha": "102ca22f0bd7b0b2aafeada1bfaa875cbc3083a0", "filename": "src/test/ui/run-pass/cfg/cfg_stmt_expr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg_stmt_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg_stmt_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfg_stmt_expr.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![deny(non_snake_case)]\n #![feature(stmt_expr_attributes)]\n ", "previous_filename": "src/test/run-pass/cfg_stmt_expr.rs"}, {"sha": "d8011827f66231cb46c48da2aa6fcd51df4b7977", "filename": "src/test/ui/run-pass/cfg/cfgs-on-items.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfgs-on-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfgs-on-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcfgs-on-items.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // compile-flags: --cfg fooA --cfg fooB\n \n // fooA AND !bar", "previous_filename": "src/test/run-pass/cfgs-on-items.rs"}, {"sha": "2eafd8f854d632bb4413e8802b59f555f9766cb8", "filename": "src/test/ui/run-pass/cfg/conditional-compile-arch.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fconditional-compile-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fconditional-compile-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fconditional-compile-arch.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n #[cfg(target_arch = \"x86\")]", "previous_filename": "src/test/run-pass/conditional-compile-arch.rs"}, {"sha": "203624624845b81d929cff276bfbc79fc23bd084", "filename": "src/test/ui/run-pass/cfg/conditional-compile.rs", "status": "renamed", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fconditional-compile.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_upper_case_globals)]\n+#![allow(non_camel_case_types)]\n+#![allow(improper_ctypes)]\n+\n // Crate use statements\n \n #[cfg(bogus)]", "previous_filename": "src/test/run-pass/conditional-compile.rs"}, {"sha": "0d817df7cdc927b025a19b0c464ec88b6fe55c11", "filename": "src/test/ui/run-pass/cfg/crate-attributes-using-cfg_attr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcrate-attributes-using-cfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcrate-attributes-using-cfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fcrate-attributes-using-cfg_attr.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:crate-attributes-using-cfg_attr.rs\n \n extern crate crate_attributes_using_cfg_attr;", "previous_filename": "src/test/run-pass/crate-attributes-using-cfg_attr.rs"}, {"sha": "cb0fd0b75046584720a02b10bf7b9fe2eae3781a", "filename": "src/test/ui/run-pass/coerce/coerce-expect-unsized.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-expect-unsized.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n use std::cell::RefCell;", "previous_filename": "src/test/run-pass/coerce-expect-unsized.rs"}, {"sha": "c6b9e61dae1c5c72d25f3134e1eb19b966763747", "filename": "src/test/ui/run-pass/coerce/coerce-overloaded-autoderef.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-overloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-overloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-overloaded-autoderef.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n use std::rc::Rc;", "previous_filename": "src/test/run-pass/coerce-overloaded-autoderef.rs"}, {"sha": "be5e55afbc57c11482c77db13123b092ca748295", "filename": "src/test/ui/run-pass/coerce/coerce-reborrow-imm-ptr-arg.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-ptr-arg.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n fn negate(x: &isize) -> isize {", "previous_filename": "src/test/run-pass/coerce-reborrow-imm-ptr-arg.rs"}, {"sha": "0b76375fba1d1a97d46d002d032a8562b520ebb2", "filename": "src/test/ui/run-pass/coerce/coerce-reborrow-imm-ptr-rcvr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-ptr-rcvr.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n struct SpeechMaker {\n     speeches: usize", "previous_filename": "src/test/run-pass/coerce-reborrow-imm-ptr-rcvr.rs"}, {"sha": "f8849e6af866d1c9be5e11eaa5e22d6999788bc4", "filename": "src/test/ui/run-pass/coerce/coerce-reborrow-imm-vec-arg.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-vec-arg.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n fn sum(x: &[isize]) -> isize {", "previous_filename": "src/test/run-pass/coerce-reborrow-imm-vec-arg.rs"}, {"sha": "4faf6dadbef1cf184fbb1006ea26af8c77fd94dd", "filename": "src/test/ui/run-pass/coerce/coerce-reborrow-imm-vec-rcvr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n fn bar(v: &mut [usize]) -> Vec<usize> {", "previous_filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs"}, {"sha": "7d851bb8bd2873173efa8a4337e329fc84829e7b", "filename": "src/test/ui/run-pass/coerce/coerce-reborrow-mut-ptr-arg.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-mut-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-mut-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-mut-ptr-arg.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n struct SpeechMaker {", "previous_filename": "src/test/run-pass/coerce-reborrow-mut-ptr-arg.rs"}, {"sha": "42f710299ffb971ce4a64d0d5be93c468d9dc3da", "filename": "src/test/ui/run-pass/coerce/coerce-reborrow-mut-ptr-rcvr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-mut-ptr-rcvr.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n struct SpeechMaker {", "previous_filename": "src/test/run-pass/coerce-reborrow-mut-ptr-rcvr.rs"}, {"sha": "25a73c3d2d698603c90f3a1ca20c8ef1633bb3b1", "filename": "src/test/ui/run-pass/coerce/coerce-reborrow-mut-vec-arg.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-mut-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-mut-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-mut-vec-arg.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n fn reverse(v: &mut [usize]) {", "previous_filename": "src/test/run-pass/coerce-reborrow-mut-vec-arg.rs"}, {"sha": "04b884620b68c6235581f63a2625373c8270bb40", "filename": "src/test/ui/run-pass/coerce/coerce-reborrow-mut-vec-rcvr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n fn bar(v: &mut [usize]) {", "previous_filename": "src/test/run-pass/coerce-reborrow-mut-vec-rcvr.rs"}, {"sha": "2b276f2cfe437887fbc05ba88b0156d96b098ac9", "filename": "src/test/ui/run-pass/coerce/coerce-unify-return.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-unify-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-unify-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-unify-return.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Check that coercions unify the expected return type of a polymorphic\n // function call, instead of leaving the type variables as they were.\n ", "previous_filename": "src/test/run-pass/coerce-unify-return.rs"}, {"sha": "575d672e092a043c51e1188a9e83bd1d16d32b92", "filename": "src/test/ui/run-pass/coerce/coerce-unify.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-unify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-unify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-unify.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Check that coercions can unify if-else, match arms and array elements.\n \n // Try to construct if-else chains, matches and arrays out of given expressions.", "previous_filename": "src/test/run-pass/coerce-unify.rs"}, {"sha": "ab571a8b40dcde3066ab227ed0d52a676de23cfc", "filename": "src/test/ui/run-pass/coerce/coerce-unsize-subtype.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-unsize-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-unsize-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoerce%2Fcoerce-unsize-subtype.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n use std::rc::Rc;", "previous_filename": "src/test/run-pass/coerce-unsize-subtype.rs"}, {"sha": "d3d389c6a8bd52da51a2579ea7bf4c6408ee2c69", "filename": "src/test/ui/run-pass/coherence/auxiliary/coherence_copy_like_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fauxiliary%2Fcoherence_copy_like_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fauxiliary%2Fcoherence_copy_like_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fauxiliary%2Fcoherence_copy_like_lib.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "previous_filename": "src/test/run-pass/auxiliary/coherence_copy_like_lib.rs"}, {"sha": "daa123849e4e797d539db3433a7908c97f18887f", "filename": "src/test/ui/run-pass/coherence/auxiliary/coherence_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fauxiliary%2Fcoherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fauxiliary%2Fcoherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fauxiliary%2Fcoherence_lib.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "previous_filename": "src/test/run-pass/auxiliary/coherence_lib.rs"}, {"sha": "62736b1f368cf9c8041da5ee72efe593d9b41238", "filename": "src/test/ui/run-pass/coherence/coherence-bigint-int.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-bigint-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-bigint-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-bigint-int.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/coherence-bigint-int.rs"}, {"sha": "372f38738e51701933cdaa238f2fa8e15f5a3b11", "filename": "src/test/ui/run-pass/coherence/coherence-bigint-vecint.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-bigint-vecint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-bigint-vecint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-bigint-vecint.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/coherence-bigint-vecint.rs"}, {"sha": "fa09b13bf67303868a2a7fdd694d8b583ab145ab", "filename": "src/test/ui/run-pass/coherence/coherence-blanket.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-blanket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-blanket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-blanket.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/coherence-blanket.rs"}, {"sha": "3ddeb58dddc805f46f820ac20e5c4a5a0f2cc2bf", "filename": "src/test/ui/run-pass/coherence/coherence-covered-type-parameter.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-covered-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-covered-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-covered-type-parameter.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/coherence-covered-type-parameter.rs"}, {"sha": "de7cb7664b646c29c9c189ecfed48809f456e50a", "filename": "src/test/ui/run-pass/coherence/coherence-impl-in-fn.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-impl-in-fn.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n+\n pub fn main() {\n     #[derive(Copy, Clone)]\n     enum x { foo }", "previous_filename": "src/test/run-pass/coherence-impl-in-fn.rs"}, {"sha": "d446f0dca9ab521ce249abb26fa6a08d1f3c39cb", "filename": "src/test/ui/run-pass/coherence/coherence-iterator-vec-any-elem.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec-any-elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec-any-elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec-any-elem.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/coherence-iterator-vec-any-elem.rs"}, {"sha": "38ad5b8115a7d3c15560ac6dbc2dda8c81c26fd4", "filename": "src/test/ui/run-pass/coherence/coherence-iterator-vec.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/coherence-iterator-vec.rs"}, {"sha": "ab04f946fa626f003c9ac68d8490bac7dfc8ba5a", "filename": "src/test/ui/run-pass/coherence/coherence-multidispatch-tuple.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-multidispatch-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-multidispatch-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-multidispatch-tuple.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n use std::fmt::Debug;", "previous_filename": "src/test/run-pass/coherence-multidispatch-tuple.rs"}, {"sha": "7984193862e44359f6c7df55269e53fb2f65802b", "filename": "src/test/ui/run-pass/coherence/coherence-negative-impls-safe.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-negative-impls-safe.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n #![feature(optin_builtin_traits)]", "previous_filename": "src/test/run-pass/coherence-negative-impls-safe.rs"}, {"sha": "5db8188e1ffa9b69555db4ee12bb54887325e07e", "filename": "src/test/ui/run-pass/coherence/coherence-rfc447-constrained.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-rfc447-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-rfc447-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-rfc447-constrained.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // check that trait matching can handle impls whose types are only\n // constrained by a projection.\n ", "previous_filename": "src/test/run-pass/coherence-rfc447-constrained.rs"}, {"sha": "0dcd83f87b89f5ba7f190a51a6715f4e042c7a38", "filename": "src/test/ui/run-pass/coherence/coherence-subtyping.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-subtyping.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that two distinct impls which match subtypes of one another\n // yield coherence errors (or not) depending on the variance.\n ", "previous_filename": "src/test/run-pass/coherence-subtyping.rs"}, {"sha": "9691978466b8a24626b1ddcfcb273496a70d85a5", "filename": "src/test/ui/run-pass/coherence/coherence-where-clause.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence-where-clause.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n use std::fmt::Debug;\n use std::default::Default;\n ", "previous_filename": "src/test/run-pass/coherence-where-clause.rs"}, {"sha": "c6903d911f981517f87e66e3b60b8500225d6cd7", "filename": "src/test/ui/run-pass/coherence/coherence_copy_like.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence_copy_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence_copy_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcoherence%2Fcoherence_copy_like.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we are able to introduce a negative constraint that\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n ", "previous_filename": "src/test/run-pass/coherence_copy_like.rs"}, {"sha": "741ce351da38e090cda35b208aa84c418ab9e73b", "filename": "src/test/ui/run-pass/consts/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"anonexternmod\"]\n+#![feature(libc)]\n+\n+extern crate libc;\n+\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n+extern {\n+    pub fn rust_get_test_int() -> libc::intptr_t;\n+}"}, {"sha": "9c90510a8573e7bb5dab27678bc5c84d2a537b16", "filename": "src/test/ui/run-pass/consts/auxiliary/cci_borrow_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fcci_borrow_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fcci_borrow_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fcci_borrow_lib.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "previous_filename": "src/test/run-pass/auxiliary/cci_borrow_lib.rs"}, {"sha": "ee8290050f91babafb87664c20cd087fa1262b58", "filename": "src/test/ui/run-pass/consts/auxiliary/cci_const.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fcci_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fcci_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fcci_const.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "previous_filename": "src/test/run-pass/auxiliary/cci_const.rs"}, {"sha": "76fe9fe5aa40a6a73b8c8f7dd8a90c12b75fead0", "filename": "src/test/ui/run-pass/consts/auxiliary/cci_const_block.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fcci_const_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fcci_const_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fcci_const_block.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "previous_filename": "src/test/run-pass/auxiliary/cci_const_block.rs"}, {"sha": "6985a6527c874eb51562d2a2da695af198692421", "filename": "src/test/ui/run-pass/consts/auxiliary/const_fn_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "previous_filename": "src/test/run-pass/auxiliary/const_fn_lib.rs"}, {"sha": "10875d5046ca68be37ac9303520f1037ea07998c", "filename": "src/test/ui/run-pass/consts/const-adt-align-mismatch.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-adt-align-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-adt-align-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-adt-align-mismatch.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(deprecated)]\n+\n use std::mem;\n \n #[derive(PartialEq, Debug)]", "previous_filename": "src/test/run-pass/const-adt-align-mismatch.rs"}, {"sha": "939f7d4441ad29f6788de023f9a784f833f62aae", "filename": "src/test/ui/run-pass/consts/const-autoderef.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-autoderef.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n const A: [u8; 1] = ['h' as u8];\n const B: u8 = (&A)[0];", "previous_filename": "src/test/run-pass/const-autoderef.rs"}, {"sha": "1ad46fa4106ffca14582affd7c4d5db1d3696d10", "filename": "src/test/ui/run-pass/consts/const-big-enum.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-big-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-big-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-big-enum.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n enum Foo {\n     Bar(u32),", "previous_filename": "src/test/run-pass/const-big-enum.rs"}, {"sha": "2e90a458aeebb7935a495f3d530628aedb4a331e", "filename": "src/test/ui/run-pass/consts/const-binops.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-binops.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n macro_rules! assert_approx_eq {\n     ($a:expr, $b:expr) => ({", "previous_filename": "src/test/run-pass/const-binops.rs"}, {"sha": "63b8af77326174f127788dd2ce4413fe0327da7a", "filename": "src/test/ui/run-pass/consts/const-bitshift-rhs-inference.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-bitshift-rhs-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-bitshift-rhs-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-bitshift-rhs-inference.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n const RHS: u8 = 8;\n const IRHS: i8 = 8;\n const RHS16: u16 = 8;", "previous_filename": "src/test/run-pass/const-bitshift-rhs-inference.rs"}, {"sha": "c7d156fcf198ed51ca57c344b8a924193755ab9c", "filename": "src/test/ui/run-pass/consts/const-block-cross-crate-fn.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-block-cross-crate-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-block-cross-crate-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-block-cross-crate-fn.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:cci_const_block.rs\n \n ", "previous_filename": "src/test/run-pass/const-block-cross-crate-fn.rs"}, {"sha": "ab452e4fe46895e23b4bd5611d3782c816bcc559", "filename": "src/test/ui/run-pass/consts/const-block-item-macro-codegen.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-block-item-macro-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-block-item-macro-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-block-item-macro-codegen.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // General test that function items in static blocks\n // can be generated with a macro.\n ", "previous_filename": "src/test/run-pass/const-block-item-macro-codegen.rs"}, {"sha": "fe3483ae9f0d2953526191bd6e5d0d092eb763e7", "filename": "src/test/ui/run-pass/consts/const-block-item.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-block-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-block-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-block-item.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n mod foo {\n     pub trait Value {", "previous_filename": "src/test/run-pass/const-block-item.rs"}, {"sha": "1b9330a6ebff3e1c38d0ab8d84b8cf8f1ce32111", "filename": "src/test/ui/run-pass/consts/const-block.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-block.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n #![allow(dead_code)]\n #![allow(unused_unsafe)]", "previous_filename": "src/test/run-pass/const-block.rs"}, {"sha": "a4ac766a740ff50f19641eea16cb71a663acff21", "filename": "src/test/ui/run-pass/consts/const-bound.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-bound.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Make sure const bounds work on things, and test that a few types\n // are const.\n ", "previous_filename": "src/test/run-pass/const-bound.rs"}, {"sha": "175d48e5c01a3612bdf84ae4ba5674f7e438e870", "filename": "src/test/ui/run-pass/consts/const-byte-str-cast.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-byte-str-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-byte-str-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-byte-str-cast.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #[deny(warnings)]\n \n pub fn main() {", "previous_filename": "src/test/run-pass/const-byte-str-cast.rs"}, {"sha": "f12a73f0ea61195215956ca04a3a14904ce19380", "filename": "src/test/ui/run-pass/consts/const-cast-ptr-int.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-cast-ptr-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-cast-ptr-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-cast-ptr-int.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_upper_case_globals)]\n \n use std::ptr;\n ", "previous_filename": "src/test/run-pass/const-cast-ptr-int.rs"}, {"sha": "100034ccc3006591f5df6cb524e2859dbdb2361e", "filename": "src/test/ui/run-pass/consts/const-cast.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-cast.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_upper_case_globals)]\n+\n struct TestStruct {\n     x: *const u8,\n }", "previous_filename": "src/test/run-pass/const-cast.rs"}, {"sha": "160d10d3b1141e1bb4b866444e9364580f1b3d6e", "filename": "src/test/ui/run-pass/consts/const-const.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-const.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_upper_case_globals)]\n \n const a: isize = 1;\n const b: isize = a + 2;", "previous_filename": "src/test/run-pass/const-const.rs"}, {"sha": "3d99af9ee6600497bacdfa9623b9bd034f4c829c", "filename": "src/test/ui/run-pass/consts/const-contents.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-contents.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Issue #570\n-\n+#![allow(non_upper_case_globals)]\n \n static lsl : isize = 1 << 2;\n static add : isize = 1 + 2;", "previous_filename": "src/test/run-pass/const-contents.rs"}, {"sha": "3e8eb9a422d1278f0339546ebed239b876160fad", "filename": "src/test/ui/run-pass/consts/const-cross-crate-const.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-cross-crate-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-cross-crate-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-cross-crate-const.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:cci_const.rs\n-\n+#![allow(non_upper_case_globals)]\n \n extern crate cci_const;\n static foo: &'static str = cci_const::foopy;", "previous_filename": "src/test/run-pass/const-cross-crate-const.rs"}, {"sha": "504b872782bac9081bff5c1af7f95f138b45a4ee", "filename": "src/test/ui/run-pass/consts/const-cross-crate-extern.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3792dbd0133c1f44a7a7444ea504db85c8bdec28/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fconsts%2Fconst-cross-crate-extern.rs?ref=3792dbd0133c1f44a7a7444ea504db85c8bdec28", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:cci_const.rs\n-\n+#![allow(non_upper_case_globals)]\n \n extern crate cci_const;\n use cci_const::bar;", "previous_filename": "src/test/run-pass/const-cross-crate-extern.rs"}]}