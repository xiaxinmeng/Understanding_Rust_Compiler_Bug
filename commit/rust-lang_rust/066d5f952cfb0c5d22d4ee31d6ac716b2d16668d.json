{"sha": "066d5f952cfb0c5d22d4ee31d6ac716b2d16668d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NmQ1Zjk1MmNmYjBjNWQyMmQ0ZWUzMWQ2YWM3MTZiMmQxNjY2OGQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-16T16:01:19Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-19T11:58:32Z"}, "message": "Rewrite prepare_sysroot_src.sh in rust", "tree": {"sha": "191da84032f482b6be7d2f9c9ce422f2274ede32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/191da84032f482b6be7d2f9c9ce422f2274ede32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d", "html_url": "https://github.com/rust-lang/rust/commit/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe6a2892a6dd285774c3b1c84a2de45209454ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe6a2892a6dd285774c3b1c84a2de45209454ce6", "html_url": "https://github.com/rust-lang/rust/commit/fe6a2892a6dd285774c3b1c84a2de45209454ce6"}], "stats": {"total": 153, "additions": 97, "deletions": 56}, "files": [{"sha": "7032a52a3d398cc354f06fa2ccaaf03314571a2f", "filename": "build_sysroot/prepare_sysroot_src.sh", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fe6a2892a6dd285774c3b1c84a2de45209454ce6/build_sysroot%2Fprepare_sysroot_src.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fe6a2892a6dd285774c3b1c84a2de45209454ce6/build_sysroot%2Fprepare_sysroot_src.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fprepare_sysroot_src.sh?ref=fe6a2892a6dd285774c3b1c84a2de45209454ce6", "patch": "@@ -1,39 +0,0 @@\n-#!/usr/bin/env bash\n-set -e\n-cd \"$(dirname \"$0\")\"\n-\n-SRC_DIR=\"$(dirname \"$(rustup which rustc)\")/../lib/rustlib/src/rust/\"\n-DST_DIR=\"sysroot_src\"\n-\n-if [ ! -e \"$SRC_DIR\" ]; then\n-    echo \"Please install rust-src component\"\n-    exit 1\n-fi\n-\n-rm -rf $DST_DIR\n-mkdir -p $DST_DIR/library\n-cp -a \"$SRC_DIR/library\" $DST_DIR/\n-\n-pushd $DST_DIR\n-echo \"[GIT] init\"\n-git init\n-echo \"[GIT] add\"\n-git add .\n-echo \"[GIT] commit\"\n-git commit -m \"Initial commit\" -q\n-for file in $(ls ../../patches/ | grep -v patcha); do\n-echo \"[GIT] apply\" \"$file\"\n-git apply ../../patches/\"$file\"\n-git add -A\n-git commit --no-gpg-sign -m \"Patch $file\"\n-done\n-popd\n-\n-git clone https://github.com/rust-lang/compiler-builtins.git || echo \"rust-lang/compiler-builtins has already been cloned\"\n-pushd compiler-builtins\n-git checkout -- .\n-git checkout 0.1.45\n-git apply ../../crate_patches/000*-compiler-builtins-*.patch\n-popd\n-\n-echo \"Successfully prepared sysroot source for building\""}, {"sha": "b6d6457163de35c600257d807eb2523f63d9400c", "filename": "build_system/prepare.rs", "status": "modified", "additions": 70, "deletions": 17, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=066d5f952cfb0c5d22d4ee31d6ac716b2d16668d", "patch": "@@ -1,14 +1,16 @@\n use std::ffi::OsStr;\n use std::ffi::OsString;\n use std::fs;\n+use std::path::Path;\n+use std::path::PathBuf;\n use std::process::Command;\n \n+use crate::rustc_info::get_rustc_path;\n+use crate::utils::copy_dir_recursively;\n use crate::utils::spawn_and_wait;\n \n pub(crate) fn prepare() {\n-    // FIXME implement in rust\n-    let prepare_sysroot_cmd = Command::new(\"./build_sysroot/prepare_sysroot_src.sh\");\n-    spawn_and_wait(prepare_sysroot_cmd);\n+    prepare_sysroot();\n \n     eprintln!(\"[INSTALL] hyperfine\");\n     Command::new(\"cargo\").arg(\"install\").arg(\"hyperfine\").spawn().unwrap().wait().unwrap();\n@@ -18,15 +20,7 @@ pub(crate) fn prepare() {\n         \"https://github.com/rust-random/rand.git\",\n         \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\",\n     );\n-\n-    eprintln!(\"[PATCH] rand\");\n-    for patch in get_patches(\"crate_patches\", \"rand\") {\n-        let mut patch_arg = OsString::from(\"../crate_patches/\");\n-        patch_arg.push(patch);\n-        let mut apply_patch_cmd = Command::new(\"git\");\n-        apply_patch_cmd.arg(\"am\").arg(patch_arg).current_dir(\"rand\");\n-        spawn_and_wait(apply_patch_cmd);\n-    }\n+    apply_patches(\"crate_patches\", \"rand\", Path::new(\"rand\"));\n \n     clone_repo(\n         \"regex\",\n@@ -47,17 +41,64 @@ pub(crate) fn prepare() {\n     fs::copy(\"simple-raytracer/target/debug/main\", \"simple-raytracer/raytracer_cg_llvm\").unwrap();\n }\n \n-fn clone_repo(name: &str, repo: &str, commit: &str) {\n+fn prepare_sysroot() {\n+    let rustc_path = get_rustc_path();\n+    let sysroot_src_orig = rustc_path.parent().unwrap().join(\"../lib/rustlib/src/rust\");\n+    let sysroot_src = PathBuf::from(\"build_sysroot\").canonicalize().unwrap().join(\"sysroot_src\");\n+\n+    assert!(sysroot_src_orig.exists());\n+\n+    if sysroot_src.exists() {\n+        fs::remove_dir_all(&sysroot_src).unwrap();\n+    }\n+    fs::create_dir_all(sysroot_src.join(\"library\")).unwrap();\n+    eprintln!(\"[COPY] sysroot src\");\n+    copy_dir_recursively(&sysroot_src_orig.join(\"library\"), &sysroot_src.join(\"library\"));\n+\n+    eprintln!(\"[GIT] init\");\n+    let mut git_init_cmd = Command::new(\"git\");\n+    git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(&sysroot_src);\n+    spawn_and_wait(git_init_cmd);\n+\n+    let mut git_add_cmd = Command::new(\"git\");\n+    git_add_cmd.arg(\"add\").arg(\".\").current_dir(&sysroot_src);\n+    spawn_and_wait(git_add_cmd);\n+\n+    let mut git_commit_cmd = Command::new(\"git\");\n+    git_commit_cmd\n+        .arg(\"commit\")\n+        .arg(\"-m\")\n+        .arg(\"Initial commit\")\n+        .arg(\"-q\")\n+        .current_dir(&sysroot_src);\n+    spawn_and_wait(git_commit_cmd);\n+\n+    apply_patches(\"patches\", \"sysroot\", &sysroot_src);\n+\n+    clone_repo(\n+        \"build_sysroot/compiler-builtins\",\n+        \"https://github.com/rust-lang/compiler-builtins.git\",\n+        \"0.1.45\",\n+    );\n+\n+    apply_patches(\n+        \"crate_patches\",\n+        \"compiler-builtins\",\n+        Path::new(\"build_sysroot/compiler-builtins\"),\n+    );\n+}\n+\n+fn clone_repo(target_dir: &str, repo: &str, rev: &str) {\n     eprintln!(\"[CLONE] {}\", repo);\n     // Ignore exit code as the repo may already have been checked out\n-    Command::new(\"git\").arg(\"clone\").arg(repo).spawn().unwrap().wait().unwrap();\n+    Command::new(\"git\").arg(\"clone\").arg(repo).arg(target_dir).spawn().unwrap().wait().unwrap();\n \n     let mut clean_cmd = Command::new(\"git\");\n-    clean_cmd.arg(\"checkout\").arg(\"--\").arg(\".\").current_dir(name);\n+    clean_cmd.arg(\"checkout\").arg(\"--\").arg(\".\").current_dir(target_dir);\n     spawn_and_wait(clean_cmd);\n \n     let mut checkout_cmd = Command::new(\"git\");\n-    checkout_cmd.arg(\"checkout\").arg(commit).current_dir(name);\n+    checkout_cmd.arg(\"checkout\").arg(\"-q\").arg(rev).current_dir(target_dir);\n     spawn_and_wait(checkout_cmd);\n }\n \n@@ -67,8 +108,20 @@ fn get_patches(patch_dir: &str, crate_name: &str) -> Vec<OsString> {\n         .map(|entry| entry.unwrap().path())\n         .filter(|path| path.extension() == Some(OsStr::new(\"patch\")))\n         .map(|path| path.file_name().unwrap().to_owned())\n-        .filter(|file_name| file_name.to_str().unwrap().split(\"-\").nth(1).unwrap() == crate_name)\n+        .filter(|file_name| {\n+            file_name.to_str().unwrap().split_once(\"-\").unwrap().1.starts_with(crate_name)\n+        })\n         .collect();\n     patches.sort();\n     patches\n }\n+\n+fn apply_patches(patch_dir: &str, crate_name: &str, target_dir: &Path) {\n+    for patch in get_patches(patch_dir, crate_name) {\n+        eprintln!(\"[PATCH] {:?} <- {:?}\", target_dir.file_name().unwrap(), patch);\n+        let patch_arg = Path::new(patch_dir).join(patch).canonicalize().unwrap();\n+        let mut apply_patch_cmd = Command::new(\"git\");\n+        apply_patch_cmd.arg(\"am\").arg(patch_arg).arg(\"-q\").current_dir(target_dir);\n+        spawn_and_wait(apply_patch_cmd);\n+    }\n+}"}, {"sha": "f7f5d42fe09ee51811838042425424ab7805171d", "filename": "build_system/rustc_info.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=066d5f952cfb0c5d22d4ee31d6ac716b2d16668d", "patch": "@@ -17,6 +17,16 @@ pub(crate) fn get_host_triple() -> String {\n         .to_owned()\n }\n \n+pub(crate) fn get_rustc_path() -> PathBuf {\n+    let rustc_path = Command::new(\"rustup\")\n+        .stderr(Stdio::inherit())\n+        .args(&[\"which\", \"rustc\"])\n+        .output()\n+        .unwrap()\n+        .stdout;\n+    Path::new(String::from_utf8(rustc_path).unwrap().trim()).to_owned()\n+}\n+\n pub(crate) fn get_default_sysroot() -> PathBuf {\n     let default_sysroot = Command::new(\"rustc\")\n         .stderr(Stdio::inherit())"}, {"sha": "12b5d70fad853133384fb064e19fd9a2cb9d189a", "filename": "build_system/utils.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=066d5f952cfb0c5d22d4ee31d6ac716b2d16668d", "patch": "@@ -11,8 +11,25 @@ pub(crate) fn try_hard_link(src: impl AsRef<Path>, dst: impl AsRef<Path>) {\n     }\n }\n \n+#[track_caller]\n pub(crate) fn spawn_and_wait(mut cmd: Command) {\n     if !cmd.spawn().unwrap().wait().unwrap().success() {\n         process::exit(1);\n     }\n }\n+\n+pub(crate) fn copy_dir_recursively(from: &Path, to: &Path) {\n+    for entry in fs::read_dir(from).unwrap() {\n+        let entry = entry.unwrap();\n+        let filename = entry.file_name();\n+        if filename == \".\" || filename == \"..\" {\n+            continue;\n+        }\n+        if entry.metadata().unwrap().is_dir() {\n+            fs::create_dir(to.join(&filename)).unwrap();\n+            copy_dir_recursively(&from.join(&filename), &to.join(&filename));\n+        } else {\n+            fs::copy(from.join(&filename), to.join(&filename)).unwrap();\n+        }\n+    }\n+}"}, {"sha": "ba0eaacd82870fd0a12952989c55b70317ef3b3a", "filename": "patches/0022-sysroot-Disable-not-compiling-tests.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/patches%2F0022-sysroot-Disable-not-compiling-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/patches%2F0022-sysroot-Disable-not-compiling-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0022-sysroot-Disable-not-compiling-tests.patch?ref=066d5f952cfb0c5d22d4ee31d6ac716b2d16668d", "previous_filename": "patches/0022-core-Disable-not-compiling-tests.patch"}, {"sha": "5d2c3049f60ebfb03d44e5885d14390d1e0371d2", "filename": "patches/0023-sysroot-Ignore-failing-tests.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/patches%2F0023-sysroot-Ignore-failing-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/patches%2F0023-sysroot-Ignore-failing-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0023-sysroot-Ignore-failing-tests.patch?ref=066d5f952cfb0c5d22d4ee31d6ac716b2d16668d", "previous_filename": "patches/0023-core-Ignore-failing-tests.patch"}, {"sha": "32e5930969061f0231ecc6e89c72eb77be7002cb", "filename": "patches/0027-sysroot-128bit-atomic-operations.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/patches%2F0027-sysroot-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/066d5f952cfb0c5d22d4ee31d6ac716b2d16668d/patches%2F0027-sysroot-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0027-sysroot-128bit-atomic-operations.patch?ref=066d5f952cfb0c5d22d4ee31d6ac716b2d16668d", "previous_filename": "patches/0027-Disable-128bit-atomic-operations.patch"}]}