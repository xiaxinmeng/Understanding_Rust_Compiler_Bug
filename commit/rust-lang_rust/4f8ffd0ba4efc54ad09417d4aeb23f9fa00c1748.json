{"sha": "4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "node_id": "C_kwDOAAsO6NoAKDRmOGZmZDBiYTRlZmM1NGFkMDk0MTdkNGFlYjIzZjlmYTAwYzE3NDg", "commit": {"author": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2022-12-30T09:00:42Z"}, "committer": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2023-01-02T15:02:54Z"}, "message": "remove unnecessary lifetimes that can be elided", "tree": {"sha": "81720a5c2072b2e48be66240e9352d4da391c32d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81720a5c2072b2e48be66240e9352d4da391c32d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "html_url": "https://github.com/rust-lang/rust/commit/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/comments", "author": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8615bba1054395891a6d881623b89ff5ee6ed5bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8615bba1054395891a6d881623b89ff5ee6ed5bd", "html_url": "https://github.com/rust-lang/rust/commit/8615bba1054395891a6d881623b89ff5ee6ed5bd"}], "stats": {"total": 112, "additions": 49, "deletions": 63}, "files": [{"sha": "f74559f5d66346bb9a148974a7ae82b37f02209f", "filename": "crates/hir-def/src/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fgenerics.rs?ref=4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "patch": "@@ -142,8 +142,8 @@ pub enum WherePredicateTypeTarget {\n \n impl GenericParams {\n     /// Iterator of type_or_consts field\n-    pub fn iter<'a>(\n-        &'a self,\n+    pub fn iter(\n+        &self,\n     ) -> impl DoubleEndedIterator<Item = (Idx<TypeOrConstParamData>, &TypeOrConstParamData)> {\n         self.type_or_consts.iter()\n     }"}, {"sha": "63e92df0e72044baf97b193c58865747d9d8b4fe", "filename": "crates/hir-def/src/import_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fimport_map.rs?ref=4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "patch": "@@ -393,8 +393,8 @@ impl Query {\n /// Searches dependencies of `krate` for an importable path matching `query`.\n ///\n /// This returns a list of items that could be imported from dependencies of `krate`.\n-pub fn search_dependencies<'a>(\n-    db: &'a dyn DefDatabase,\n+pub fn search_dependencies(\n+    db: &dyn DefDatabase,\n     krate: CrateId,\n     query: Query,\n ) -> FxHashSet<ItemInNs> {"}, {"sha": "c7b213b7e981446e90efefbb2933e0c407085995", "filename": "crates/hir-def/src/item_scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs?ref=4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "patch": "@@ -96,7 +96,7 @@ pub(crate) enum BuiltinShadowMode {\n /// Legacy macros can only be accessed through special methods like `get_legacy_macros`.\n /// Other methods will only resolve values, types and module scoped macros only.\n impl ItemScope {\n-    pub fn entries<'a>(&'a self) -> impl Iterator<Item = (&'a Name, PerNs)> + 'a {\n+    pub fn entries(&self) -> impl Iterator<Item = (&Name, PerNs)> + '_ {\n         // FIXME: shadowing\n         self.types\n             .keys()\n@@ -169,7 +169,7 @@ impl ItemScope {\n         iter.find_map(|(name, &(other_def, vis))| (other_def == def).then_some((name, vis)))\n     }\n \n-    pub(crate) fn traits<'a>(&'a self) -> impl Iterator<Item = TraitId> + 'a {\n+    pub(crate) fn traits(&self) -> impl Iterator<Item = TraitId> + '_ {\n         self.types\n             .values()\n             .filter_map(|&(def, _)| match def {\n@@ -326,7 +326,7 @@ impl ItemScope {\n         changed\n     }\n \n-    pub(crate) fn resolutions<'a>(&'a self) -> impl Iterator<Item = (Option<Name>, PerNs)> + 'a {\n+    pub(crate) fn resolutions(&self) -> impl Iterator<Item = (Option<Name>, PerNs)> + '_ {\n         self.entries().map(|(name, res)| (Some(name.clone()), res)).chain(\n             self.unnamed_trait_imports\n                 .iter()"}, {"sha": "cbcf8f74c556d77b5e4db521c59badd54389df40", "filename": "crates/hir-ty/src/autoderef.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs?ref=4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "patch": "@@ -82,11 +82,11 @@ pub(crate) fn autoderef_step(\n }\n \n // FIXME: replace uses of this with Autoderef above\n-pub fn autoderef<'a>(\n-    db: &'a dyn HirDatabase,\n+pub fn autoderef(\n+    db: &dyn HirDatabase,\n     env: Arc<TraitEnvironment>,\n     ty: Canonical<Ty>,\n-) -> impl Iterator<Item = Canonical<Ty>> + 'a {\n+) -> impl Iterator<Item = Canonical<Ty>> + '_ {\n     let mut table = InferenceTable::new(db, env);\n     let ty = table.instantiate_canonical(ty);\n     let mut autoderef = Autoderef::new(&mut table, ty);"}, {"sha": "dfec0aaa296ec2fef92bdc947633439e24cc6aba", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "patch": "@@ -511,10 +511,10 @@ pub(crate) fn const_eval_query_variant(\n     )\n }\n \n-pub(crate) fn eval_to_const<'a>(\n+pub(crate) fn eval_to_const(\n     expr: Idx<Expr>,\n     mode: ParamLoweringMode,\n-    ctx: &mut InferenceContext<'a>,\n+    ctx: &mut InferenceContext<'_>,\n     args: impl FnOnce() -> Generics,\n     debruijn: DebruijnIndex,\n ) -> Const {"}, {"sha": "441503a300e5c2ae1a982657485a677ce0b3a4a2", "filename": "crates/hir-ty/src/interner.rs", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finterner.rs?ref=4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "patch": "@@ -228,26 +228,23 @@ impl chalk_ir::interner::Interner for Interner {\n         Interned::new(InternedWrapper(chalk_ir::TyData { kind, flags }))\n     }\n \n-    fn ty_data<'a>(self, ty: &'a Self::InternedType) -> &'a chalk_ir::TyData<Self> {\n+    fn ty_data(self, ty: &Self::InternedType) -> &chalk_ir::TyData<Self> {\n         &ty.0\n     }\n \n     fn intern_lifetime(self, lifetime: chalk_ir::LifetimeData<Self>) -> Self::InternedLifetime {\n         Interned::new(InternedWrapper(lifetime))\n     }\n \n-    fn lifetime_data<'a>(\n-        self,\n-        lifetime: &'a Self::InternedLifetime,\n-    ) -> &'a chalk_ir::LifetimeData<Self> {\n+    fn lifetime_data(self, lifetime: &Self::InternedLifetime) -> &chalk_ir::LifetimeData<Self> {\n         &lifetime.0\n     }\n \n     fn intern_const(self, constant: chalk_ir::ConstData<Self>) -> Self::InternedConst {\n         Interned::new(InternedWrapper(constant))\n     }\n \n-    fn const_data<'a>(self, constant: &'a Self::InternedConst) -> &'a chalk_ir::ConstData<Self> {\n+    fn const_data(self, constant: &Self::InternedConst) -> &chalk_ir::ConstData<Self> {\n         &constant.0\n     }\n \n@@ -267,10 +264,10 @@ impl chalk_ir::interner::Interner for Interner {\n         parameter\n     }\n \n-    fn generic_arg_data<'a>(\n+    fn generic_arg_data(\n         self,\n-        parameter: &'a Self::InternedGenericArg,\n-    ) -> &'a chalk_ir::GenericArgData<Self> {\n+        parameter: &Self::InternedGenericArg,\n+    ) -> &chalk_ir::GenericArgData<Self> {\n         parameter\n     }\n \n@@ -285,11 +282,11 @@ impl chalk_ir::interner::Interner for Interner {\n         data.into_iter().collect()\n     }\n \n-    fn goal_data<'a>(self, goal: &'a Self::InternedGoal) -> &'a GoalData<Self> {\n+    fn goal_data(self, goal: &Self::InternedGoal) -> &GoalData<Self> {\n         goal\n     }\n \n-    fn goals_data<'a>(self, goals: &'a Self::InternedGoals) -> &'a [Goal<Interner>] {\n+    fn goals_data(self, goals: &Self::InternedGoals) -> &[Goal<Interner>] {\n         goals\n     }\n \n@@ -300,10 +297,7 @@ impl chalk_ir::interner::Interner for Interner {\n         Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n-    fn substitution_data<'a>(\n-        self,\n-        substitution: &'a Self::InternedSubstitution,\n-    ) -> &'a [GenericArg] {\n+    fn substitution_data(self, substitution: &Self::InternedSubstitution) -> &[GenericArg] {\n         &substitution.as_ref().0\n     }\n \n@@ -314,10 +308,10 @@ impl chalk_ir::interner::Interner for Interner {\n         data\n     }\n \n-    fn program_clause_data<'a>(\n+    fn program_clause_data(\n         self,\n-        clause: &'a Self::InternedProgramClause,\n-    ) -> &'a chalk_ir::ProgramClauseData<Self> {\n+        clause: &Self::InternedProgramClause,\n+    ) -> &chalk_ir::ProgramClauseData<Self> {\n         clause\n     }\n \n@@ -328,10 +322,10 @@ impl chalk_ir::interner::Interner for Interner {\n         Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n-    fn program_clauses_data<'a>(\n+    fn program_clauses_data(\n         self,\n-        clauses: &'a Self::InternedProgramClauses,\n-    ) -> &'a [chalk_ir::ProgramClause<Self>] {\n+        clauses: &Self::InternedProgramClauses,\n+    ) -> &[chalk_ir::ProgramClause<Self>] {\n         clauses\n     }\n \n@@ -342,10 +336,10 @@ impl chalk_ir::interner::Interner for Interner {\n         Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n-    fn quantified_where_clauses_data<'a>(\n+    fn quantified_where_clauses_data(\n         self,\n-        clauses: &'a Self::InternedQuantifiedWhereClauses,\n-    ) -> &'a [chalk_ir::QuantifiedWhereClause<Self>] {\n+        clauses: &Self::InternedQuantifiedWhereClauses,\n+    ) -> &[chalk_ir::QuantifiedWhereClause<Self>] {\n         clauses\n     }\n \n@@ -356,10 +350,10 @@ impl chalk_ir::interner::Interner for Interner {\n         Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n-    fn variable_kinds_data<'a>(\n+    fn variable_kinds_data(\n         self,\n-        parameter_kinds: &'a Self::InternedVariableKinds,\n-    ) -> &'a [chalk_ir::VariableKind<Self>] {\n+        parameter_kinds: &Self::InternedVariableKinds,\n+    ) -> &[chalk_ir::VariableKind<Self>] {\n         &parameter_kinds.as_ref().0\n     }\n \n@@ -370,10 +364,10 @@ impl chalk_ir::interner::Interner for Interner {\n         Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n-    fn canonical_var_kinds_data<'a>(\n+    fn canonical_var_kinds_data(\n         self,\n-        canonical_var_kinds: &'a Self::InternedCanonicalVarKinds,\n-    ) -> &'a [chalk_ir::CanonicalVarKind<Self>] {\n+        canonical_var_kinds: &Self::InternedCanonicalVarKinds,\n+    ) -> &[chalk_ir::CanonicalVarKind<Self>] {\n         canonical_var_kinds\n     }\n \n@@ -384,10 +378,10 @@ impl chalk_ir::interner::Interner for Interner {\n         data.into_iter().collect()\n     }\n \n-    fn constraints_data<'a>(\n+    fn constraints_data(\n         self,\n-        constraints: &'a Self::InternedConstraints,\n-    ) -> &'a [chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>] {\n+        constraints: &Self::InternedConstraints,\n+    ) -> &[chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>] {\n         constraints\n     }\n     fn debug_closure_id(\n@@ -410,10 +404,7 @@ impl chalk_ir::interner::Interner for Interner {\n         Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n-    fn variances_data<'a>(\n-        self,\n-        variances: &'a Self::InternedVariances,\n-    ) -> &'a [chalk_ir::Variance] {\n+    fn variances_data(self, variances: &Self::InternedVariances) -> &[chalk_ir::Variance] {\n         variances\n     }\n }"}, {"sha": "778a6b82047ef1da1cdf8e05590217ee8dc1cf5e", "filename": "crates/hir-ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftraits.rs?ref=4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "patch": "@@ -55,10 +55,7 @@ impl TraitEnvironment {\n         }\n     }\n \n-    pub fn traits_in_scope_from_clauses<'a>(\n-        &'a self,\n-        ty: Ty,\n-    ) -> impl Iterator<Item = TraitId> + 'a {\n+    pub fn traits_in_scope_from_clauses(&self, ty: Ty) -> impl Iterator<Item = TraitId> + '_ {\n         self.traits_from_clauses\n             .iter()\n             .filter_map(move |(self_ty, trait_id)| (*self_ty == ty).then_some(*trait_id))"}, {"sha": "9893566bd549c9e2648ab8879f193150807adaea", "filename": "crates/hir-ty/src/utils.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fhir-ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Futils.rs?ref=4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "patch": "@@ -184,9 +184,7 @@ pub(crate) struct Generics {\n }\n \n impl Generics {\n-    pub(crate) fn iter_id<'a>(\n-        &'a self,\n-    ) -> impl Iterator<Item = Either<TypeParamId, ConstParamId>> + 'a {\n+    pub(crate) fn iter_id(&self) -> impl Iterator<Item = Either<TypeParamId, ConstParamId>> + '_ {\n         self.iter().map(|(id, data)| match data {\n             TypeOrConstParamData::TypeParamData(_) => Either::Left(TypeParamId::from_unchecked(id)),\n             TypeOrConstParamData::ConstParamData(_) => {\n@@ -216,9 +214,9 @@ impl Generics {\n     }\n \n     /// Iterator over types and const params of parent.\n-    pub(crate) fn iter_parent<'a>(\n-        &'a self,\n-    ) -> impl DoubleEndedIterator<Item = (TypeOrConstParamId, &'a TypeOrConstParamData)> + 'a {\n+    pub(crate) fn iter_parent(\n+        &self,\n+    ) -> impl DoubleEndedIterator<Item = (TypeOrConstParamId, &TypeOrConstParamData)> {\n         self.parent_generics().into_iter().flat_map(|it| {\n             let to_toc_id =\n                 move |(local_id, p)| (TypeOrConstParamId { parent: it.def, local_id }, p);"}, {"sha": "b4a7f2b918a46e4783ca30059231856f11e4d4b0", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "patch": "@@ -285,7 +285,7 @@ impl DocCommentToken {\n     }\n }\n \n-fn broken_link_clone_cb<'a>(link: BrokenLink<'a>) -> Option<(CowStr<'a>, CowStr<'a>)> {\n+fn broken_link_clone_cb(link: BrokenLink<'_>) -> Option<(CowStr<'_>, CowStr<'_>)> {\n     Some((/*url*/ link.reference.clone(), /*title*/ link.reference))\n }\n "}, {"sha": "fad905e97f456ceef3649db46fba8d7e49937902", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "patch": "@@ -116,9 +116,9 @@ enum Mode {\n     Template,\n }\n \n-fn next_op<'a>(\n+fn next_op(\n     first_peeked: &tt::TokenTree,\n-    src: &mut TtIter<'a>,\n+    src: &mut TtIter<'_>,\n     mode: Mode,\n ) -> Result<Op, ParseError> {\n     let res = match first_peeked {"}, {"sha": "467cf0917875a0e43f6914fec0e18ec82c7071dd", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=4f8ffd0ba4efc54ad09417d4aeb23f9fa00c1748", "patch": "@@ -411,7 +411,7 @@ impl CargoWorkspace {\n         CargoWorkspace { packages, targets, workspace_root }\n     }\n \n-    pub fn packages<'a>(&'a self) -> impl Iterator<Item = Package> + ExactSizeIterator + 'a {\n+    pub fn packages(&self) -> impl Iterator<Item = Package> + ExactSizeIterator + '_ {\n         self.packages.iter().map(|(id, _pkg)| id)\n     }\n "}]}