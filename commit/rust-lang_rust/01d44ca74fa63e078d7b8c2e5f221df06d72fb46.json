{"sha": "01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZDQ0Y2E3NGZhNjNlMDc4ZDdiOGMyZTVmMjIxZGYwNmQ3MmZiNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-02T07:28:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-02T07:28:04Z"}, "message": "Auto merge of #31359 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #30971, #31202, #31247, #31270, #31281, #31327, #31339, #31340, #31342, #31344, #31345, #31346, #31348\n- Failed merges:", "tree": {"sha": "74dcc155ed99bbc82d5be3ef7b63ef6ac28a32e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74dcc155ed99bbc82d5be3ef7b63ef6ac28a32e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "html_url": "https://github.com/rust-lang/rust/commit/01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "508c21e4aeaa950553ac823f064a525c24ea85fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/508c21e4aeaa950553ac823f064a525c24ea85fd", "html_url": "https://github.com/rust-lang/rust/commit/508c21e4aeaa950553ac823f064a525c24ea85fd"}, {"sha": "c3f6122215fe5576ddca544b9c22f8aa34312eb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f6122215fe5576ddca544b9c22f8aa34312eb5", "html_url": "https://github.com/rust-lang/rust/commit/c3f6122215fe5576ddca544b9c22f8aa34312eb5"}], "stats": {"total": 229, "additions": 162, "deletions": 67}, "files": [{"sha": "609bf03fb6c91ba8e2f978bb62e0d5dedcfb693d", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -131,8 +131,12 @@ Some common make targets are:\n   & everything builds in the correct manner.\n - `make check-stage1-std NO_REBUILD=1` - test the standard library without\n   rebuilding the entire compiler\n-- `make check TESTNAME=<path-to-test-file>.rs` - Run a single test file\n-- `make check-stage1-rpass TESTNAME=<path-to-test-file>.rs` - Run a single\n+- `make check TESTNAME=<substring-of-test-name>` - Run a matching set of tests.\n+  - `TESTNAME` should be a substring of the tests to match against e.g. it could \n+    be the fully qualified test name, or just a part of it. \n+    `TESTNAME=collections::hash::map::test_map::test_capacity_not_less_than_len`\n+    or `TESTNAME=test_capacity_not_less_than_len`.\n+- `make check-stage1-rpass TESTNAME=<substring-of-test-name>` - Run a single\n   rpass test with the stage1 compiler (this will be quicker than running the\n   command above as we only build the stage1 compiler, not the entire thing).\n   You can also leave off the `-rpass` to run all stage1 test types."}, {"sha": "ede3100194e5bd308e9f2a47c2373bd3519ced57", "filename": "src/doc/book/documentation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Fdoc%2Fbook%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Fdoc%2Fbook%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fdocumentation.md?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -118,7 +118,7 @@ least. If your function has a non-trivial contract like this, that is\n detected/enforced by panics, documenting it is very important.\n \n ```rust\n-/// # Failures\n+/// # Errors\n # fn foo() {}\n ```\n "}, {"sha": "73875704ecaf788ce0d54cce34b04b4b2549acb3", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -356,11 +356,28 @@ fn file_name(file_path: &str) -> Option<&str> {\n ```\n \n You might think that we could use the `map` combinator to reduce the case\n-analysis, but its type doesn't quite fit. Namely, `map` takes a function that\n-does something only with the inner value. The result of that function is then\n-*always* [rewrapped with `Some`](#code-option-map). Instead, we need something\n-like `map`, but which allows the caller to return another `Option`. Its generic\n-implementation is even simpler than `map`:\n+analysis, but its type doesn't quite fit...\n+\n+```rust,ignore\n+fn file_path_ext(file_path: &str) -> Option<&str> {\n+    file_name(file_path).map(|x| extension(x)) //Compilation error\n+}\n+```\n+\n+The `map` function here wraps the value returned by the `extension` function\n+inside an `Option<_>` and since the `extension` function itself returns an\n+`Option<&str>` the expression `file_name(file_path).map(|x| extension(x))`\n+actually returns an `Option<Option<&str>>`.\n+\n+But since `file_path_ext` just returns `Option<&str>` (and not\n+`Option<Option<&str>>`) we get a compilation error.\n+\n+The result of the function taken by map as input is *always* [rewrapped with\n+`Some`](#code-option-map). Instead, we need something like `map`, but which\n+allows the caller to return a `Option<_>` directly without wrapping it in\n+another `Option<_>`.\n+\n+Its generic implementation is even simpler than `map`:\n \n ```rust\n fn and_then<F, T, A>(option: Option<T>, f: F) -> Option<A>\n@@ -382,6 +399,10 @@ fn file_path_ext(file_path: &str) -> Option<&str> {\n }\n ```\n \n+Side note: Since `and_then` essentially works like `map` but returns an\n+`Option<_>` instead of an `Option<Option<_>>` it is known as `flatmap` in some\n+other languages.\n+\n The `Option` type has many other combinators [defined in the standard\n library][5]. It is a good idea to skim this list and familiarize\n yourself with what's available\u2014they can often reduce case analysis"}, {"sha": "31ee385a928d6dc0dc9dac309c11cc5284f7f5fb", "filename": "src/doc/book/getting-started.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Fdoc%2Fbook%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Fdoc%2Fbook%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fgetting-started.md?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -39,6 +39,7 @@ Specifically they will each satisfy the following requirements:\n \n |  Target                       | std |rustc|cargo| notes                      |\n |-------------------------------|-----|-----|-----|----------------------------|\n+| `i686-pc-windows-msvc`        |  \u2713  |  \u2713  |  \u2713  | 32-bit MSVC (Windows 7+)   |\n | `x86_64-pc-windows-msvc`      |  \u2713  |  \u2713  |  \u2713  | 64-bit MSVC (Windows 7+)   |\n | `i686-pc-windows-gnu`         |  \u2713  |  \u2713  |  \u2713  | 32-bit MinGW (Windows 7+)  |\n | `x86_64-pc-windows-gnu`       |  \u2713  |  \u2713  |  \u2713  | 64-bit MinGW (Windows 7+)  |\n@@ -62,7 +63,6 @@ these platforms are required to have each of the following:\n \n |  Target                       | std |rustc|cargo| notes                      |\n |-------------------------------|-----|-----|-----|----------------------------|\n-| `i686-pc-windows-msvc`        |  \u2713  |  \u2713  |  \u2713  | 32-bit MSVC (Windows 7+)   |\n | `x86_64-unknown-linux-musl`   |  \u2713  |     |     | 64-bit Linux with MUSL     |\n | `arm-linux-androideabi`       |  \u2713  |     |     | ARM Android                |\n | `arm-unknown-linux-gnueabi`   |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n@@ -85,6 +85,9 @@ unofficial locations.\n | `i686-linux-android`          |  \u2713  |     |     | 32-bit x86 Android         |\n | `aarch64-linux-android`       |  \u2713  |     |     | ARM64 Android              |\n | `powerpc-unknown-linux-gnu`   |  \u2713  |     |     | PowerPC Linux (2.6.18+)    |\n+| `powerpc64-unknown-linux-gnu` |  \u2713  |     |     | PPC64 Linux (2.6.18+)      |\n+|`powerpc64le-unknown-linux-gnu`|  \u2713  |     |     | PPC64LE Linux (2.6.18+)    |\n+|`armv7-unknown-linux-gnueabihf`|  \u2713  |     |     | ARMv7 Linux (2.6.18+)      |\n | `i386-apple-ios`              |  \u2713  |     |     | 32-bit x86 iOS             |\n | `x86_64-apple-ios`            |  \u2713  |     |     | 64-bit x86 iOS             |\n | `armv7-apple-ios`             |  \u2713  |     |     | ARM iOS                    |\n@@ -97,6 +100,7 @@ unofficial locations.\n | `x86_64-unknown-bitrig`       |  \u2713  |  \u2713  |     | 64-bit Bitrig              |\n | `x86_64-unknown-dragonfly`    |  \u2713  |  \u2713  |     | 64-bit DragonFlyBSD        |\n | `x86_64-rumprun-netbsd`       |  \u2713  |     |     | 64-bit NetBSD Rump Kernel  |\n+| `x86_64-sun-solaris`          |  \u2713  |  \u2713  |     | 64-bit Solaris/SunOS       |\n | `i686-pc-windows-msvc` (XP)   |  \u2713  |     |     | Windows XP support         |\n | `x86_64-pc-windows-msvc` (XP) |  \u2713  |     |     | Windows XP support         |\n \n@@ -569,7 +573,7 @@ executable application, as opposed to a library. Executables are often called\n *binaries* (as in `/usr/bin`, if you\u2019re on a Unix system).\n \n Cargo has generated two files and one directory for us: a `Cargo.toml` and a\n-*src* directory with a *main.rs* file inside. These should look familliar,\n+*src* directory with a *main.rs* file inside. These should look familiar,\n they\u2019re exactly what we created by hand, above.\n \n This output is all you need to get started. First, open `Cargo.toml`. It should"}, {"sha": "b5dde9be17fcb67fdadfcd4f732b9ae55a9ba6ad", "filename": "src/doc/book/loops.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Fdoc%2Fbook%2Floops.md", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Fdoc%2Fbook%2Floops.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Floops.md?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -125,7 +125,8 @@ Don't forget to add the parentheses around the range.\n #### On iterators:\n \n ```rust\n-# let lines = \"hello\\nworld\".lines();\n+let lines = \"hello\\nworld\".lines();\n+\n for (linenumber, line) in lines.enumerate() {\n     println!(\"{}: {}\", linenumber, line);\n }\n@@ -134,10 +135,8 @@ for (linenumber, line) in lines.enumerate() {\n Outputs:\n \n ```text\n-0: Content of line one\n-1: Content of line two\n-2: Content of line three\n-3: Content of line four\n+0: hello\n+1: world\n ```\n \n ## Ending iteration early"}, {"sha": "20a7c651350cb953d5f557b36fe0bcee246cc600", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -1511,6 +1511,13 @@ impl str {\n     /// 'Whitespace' is defined according to the terms of the Unicode Derived\n     /// Core Property `White_Space`.\n     ///\n+    /// # Text directionality\n+    ///\n+    /// A string is a sequence of bytes. 'Left' in this context means the first\n+    /// position of that byte string; for a language like Arabic or Hebrew\n+    /// which are 'right to left' rather than 'left to right', this will be\n+    /// the _right_ side, not the left.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1520,6 +1527,16 @@ impl str {\n     ///\n     /// assert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n     /// ```\n+    ///\n+    /// Directionality:\n+    ///\n+    /// ```\n+    /// let s = \"  English\";\n+    /// assert!(Some('E') == s.trim_left().chars().next());\n+    ///\n+    /// let s = \"  \u05e2\u05d1\u05e8\u05d9\u05ea\";\n+    /// assert!(Some('\u05e2') == s.trim_left().chars().next());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_left(&self) -> &str {\n         UnicodeStr::trim_left(self)\n@@ -1530,6 +1547,13 @@ impl str {\n     /// 'Whitespace' is defined according to the terms of the Unicode Derived\n     /// Core Property `White_Space`.\n     ///\n+    /// # Text directionality\n+    ///\n+    /// A string is a sequence of bytes. 'Right' in this context means the last\n+    /// position of that byte string; for a language like Arabic or Hebrew\n+    /// which are 'right to left' rather than 'left to right', this will be\n+    /// the _left_ side, not the right.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1539,6 +1563,16 @@ impl str {\n     ///\n     /// assert_eq!(\" Hello\\tworld\", s.trim_right());\n     /// ```\n+    ///\n+    /// Directionality:\n+    ///\n+    /// ```\n+    /// let s = \"English  \";\n+    /// assert!(Some('h') == s.trim_right().chars().rev().next());\n+    ///\n+    /// let s = \"\u05e2\u05d1\u05e8\u05d9\u05ea  \";\n+    /// assert!(Some('\u05ea') == s.trim_right().chars().rev().next());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_right(&self) -> &str {\n         UnicodeStr::trim_right(self)\n@@ -1584,6 +1618,13 @@ impl str {\n     ///\n     /// [`char`]: primitive.char.html\n     ///\n+    /// # Text directionality\n+    ///\n+    /// A string is a sequence of bytes. 'Left' in this context means the first\n+    /// position of that byte string; for a language like Arabic or Hebrew\n+    /// which are 'right to left' rather than 'left to right', this will be\n+    /// the _right_ side, not the left.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1608,6 +1649,13 @@ impl str {\n     ///\n     /// [`char`]: primitive.char.html\n     ///\n+    /// # Text directionality\n+    ///\n+    /// A string is a sequence of bytes. 'Right' in this context means the last\n+    /// position of that byte string; for a language like Arabic or Hebrew\n+    /// which are 'right to left' rather than 'left to right', this will be\n+    /// the _left_ side, not the right.\n+    ///\n     /// # Examples\n     ///\n     /// Simple patterns:\n@@ -1644,7 +1692,7 @@ impl str {\n     ///\n     /// [`FromStr`]: str/trait.FromStr.html\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// Will return `Err` if it's not possible to parse this string slice into\n     /// the desired type."}, {"sha": "b1242ba6d4df25a8e4135e218c2c9544a092e56c", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -433,7 +433,7 @@ impl String {\n     ///\n     /// [`str::from_utf8()`]: ../str/fn.from_utf8.html\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// Returns `Err` if the slice is not UTF-8 with a description as to why the\n     /// provided bytes are not UTF-8. The vector you moved in is also included."}, {"sha": "93514dbd6bb2f718ee2463baf15724846fc1539e", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -2756,20 +2756,11 @@ pub trait Extend<A> {\n ///\n /// let mut iter = numbers.iter();\n ///\n-/// let n = iter.next();\n-/// assert_eq!(Some(&1), n);\n-///\n-/// let n = iter.next_back();\n-/// assert_eq!(Some(&3), n);\n-///\n-/// let n = iter.next_back();\n-/// assert_eq!(Some(&2), n);\n-///\n-/// let n = iter.next();\n-/// assert_eq!(None, n);\n-///\n-/// let n = iter.next_back();\n-/// assert_eq!(None, n);\n+/// assert_eq!(Some(&1), iter.next());\n+/// assert_eq!(Some(&3), iter.next_back());\n+/// assert_eq!(Some(&2), iter.next_back());\n+/// assert_eq!(None, iter.next());\n+/// assert_eq!(None, iter.next_back());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait DoubleEndedIterator: Iterator {\n@@ -2789,20 +2780,11 @@ pub trait DoubleEndedIterator: Iterator {\n     ///\n     /// let mut iter = numbers.iter();\n     ///\n-    /// let n = iter.next();\n-    /// assert_eq!(Some(&1), n);\n-    ///\n-    /// let n = iter.next_back();\n-    /// assert_eq!(Some(&3), n);\n-    ///\n-    /// let n = iter.next_back();\n-    /// assert_eq!(Some(&2), n);\n-    ///\n-    /// let n = iter.next();\n-    /// assert_eq!(None, n);\n-    ///\n-    /// let n = iter.next_back();\n-    /// assert_eq!(None, n);\n+    /// assert_eq!(Some(&1), iter.next());\n+    /// assert_eq!(Some(&3), iter.next_back());\n+    /// assert_eq!(Some(&2), iter.next_back());\n+    /// assert_eq!(None, iter.next());\n+    /// assert_eq!(None, iter.next_back());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;"}, {"sha": "f19970546d79b20d1991b9ee8e3feb20f03c69f9", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -188,7 +188,7 @@ impl Utf8Error {\n /// it, this function is one way to have a stack-allocated string. There is\n /// an example of this in the examples section below.\n ///\n-/// # Failure\n+/// # Errors\n ///\n /// Returns `Err` if the slice is not UTF-8 with a description as to why the\n /// provided slice is not UTF-8."}, {"sha": "700a577e20c92e2fb5ffc19b7965215b3c9e176c", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -711,7 +711,7 @@ impl AtomicUsize {\n     /// ```\n     /// use std::sync::atomic::{AtomicUsize, Ordering};\n     ///\n-    /// let some_usize= AtomicUsize::new(5);\n+    /// let some_usize = AtomicUsize::new(5);\n     ///\n     /// assert_eq!(some_usize.swap(10, Ordering::Relaxed), 5);\n     /// assert_eq!(some_usize.load(Ordering::Relaxed), 10);"}, {"sha": "6cbea1abbb5bb0e55d217eac3732ab8dc4e0477e", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -377,6 +377,33 @@ fn main() {\n }\n ```\n \n+Moving out of a member of a mutably borrowed struct is fine if you put something\n+back. `mem::replace` can be used for that:\n+\n+```\n+struct TheDarkKnight;\n+\n+impl TheDarkKnight {\n+    fn nothing_is_true(self) {}\n+}\n+\n+struct Batcave {\n+    knight: TheDarkKnight\n+}\n+\n+fn main() {\n+    use std::mem;\n+\n+    let mut cave = Batcave {\n+        knight: TheDarkKnight\n+    };\n+    let borrowed = &mut cave;\n+\n+    borrowed.knight.nothing_is_true(); // E0507\n+    mem::replace(&mut borrowed.knight, TheDarkKnight).nothing_is_true(); // ok!\n+}\n+```\n+\n You can find more information about borrowing in the rust-book:\n http://doc.rust-lang.org/stable/book/references-and-borrowing.html\n \"##,"}, {"sha": "9386453d660d23b60600c2b63638f09a9431592b", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -194,7 +194,7 @@ impl char {\n     /// * `a-z`\n     /// * `A-Z`\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// Returns `None` if the `char` does not refer to a digit in the given radix.\n     ///"}, {"sha": "d12cfa6183a241aee0391405af3bd2d9f85d5616", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -70,7 +70,7 @@ pub struct Metadata(fs_imp::FileAttr);\n /// information like the entry's path and possibly other metadata can be\n /// learned.\n ///\n-/// # Failure\n+/// # Errors\n ///\n /// This `io::Result` will be an `Err` if there's some sort of intermittent\n /// IO error during iteration."}, {"sha": "5e0a54392d23de914b5a9cfcd0b354abec251f08", "filename": "src/libstd/process.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -47,6 +47,16 @@ use thread::{self, JoinHandle};\n ///\n /// assert!(ecode.success());\n /// ```\n+///\n+/// # Note\n+///\n+/// Take note that there is no implementation of\n+/// [`Drop`](../../core/ops/trait.Drop.html) for child processes, so if you\n+/// do not ensure the `Child` has exited then it will continue to run, even\n+/// after the `Child` handle to the child process has gone out of scope.\n+///\n+/// Calling `wait` (or other functions that wrap around it) will make the\n+/// parent process wait until the child has actually exited before continuing.\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Child {\n     handle: imp::Process,"}, {"sha": "9a786752365f1d4c890f909bae85b5d56d80a876", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -129,7 +129,7 @@ impl Condvar {\n     /// the predicate must always be checked each time this function returns to\n     /// protect against spurious wakeups.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the mutex being waited on is\n     /// poisoned when this thread re-acquires the lock. For more information,"}, {"sha": "fe9f0371abd5d3b418980eb81954952b02c08c7c", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -205,7 +205,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// held. An RAII guard is returned to allow scoped unlock of the lock. When\n     /// the guard goes out of scope, the mutex will be unlocked.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error once the mutex is acquired.\n@@ -223,7 +223,7 @@ impl<T: ?Sized> Mutex<T> {\n     ///\n     /// This function does not block.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return failure if the mutex would otherwise be\n@@ -250,7 +250,7 @@ impl<T: ?Sized> Mutex<T> {\n \n     /// Consumes this mutex, returning the underlying data.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error instead.\n@@ -280,7 +280,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// Since this call borrows the `Mutex` mutably, no actual locking needs to\n     /// take place---the mutable borrow statically guarantees no locks exist.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error instead."}, {"sha": "63ef7732ad650cc71deb1cd9984fed434a52dfaf", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -169,7 +169,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// Returns an RAII guard which will release this thread's shared access\n     /// once it is dropped.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock.\n@@ -192,7 +192,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// This function does not provide any guarantees with respect to the ordering\n     /// of whether contentious readers or writers will acquire the lock first.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An\n@@ -217,7 +217,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// Returns an RAII guard which will drop the write access of this rwlock\n     /// when dropped.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock.\n@@ -240,7 +240,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// This function does not provide any guarantees with respect to the ordering\n     /// of whether contentious readers or writers will acquire the lock first.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An\n@@ -269,7 +269,7 @@ impl<T: ?Sized> RwLock<T> {\n \n     /// Consumes this `RwLock`, returning the underlying data.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An\n@@ -301,7 +301,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// Since this call borrows the `RwLock` mutably, no actual locking needs to\n     /// take place---the mutable borrow statically guarantees no locks exist.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An"}, {"sha": "2e2be63c3cb5b300ea63c813cc8951e74acc53a9", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -78,7 +78,7 @@ impl<T> ReentrantMutex<T> {\n     /// calling this method already holds the lock, the call shall succeed without\n     /// blocking.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return failure if the mutex would otherwise be\n@@ -95,7 +95,7 @@ impl<T> ReentrantMutex<T> {\n     ///\n     /// This function does not block.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return failure if the mutex would otherwise be"}, {"sha": "19bedab9d305436aaad619a9a7ec0a78d009b572", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -70,9 +70,9 @@ pub struct Name(pub u32);\n /// A SyntaxContext represents a chain of macro-expandings\n /// and renamings. Each macro expansion corresponds to\n /// a fresh u32. This u32 is a reference to a table stored\n-// in thread-local storage.\n-// The special value EMPTY_CTXT is used to indicate an empty\n-// syntax context.\n+/// in thread-local storage.\n+/// The special value EMPTY_CTXT is used to indicate an empty\n+/// syntax context.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct SyntaxContext(pub u32);\n "}, {"sha": "94bbd1bd1281679d62f52d656793f1947a911197", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d44ca74fa63e078d7b8c2e5f221df06d72fb46/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=01d44ca74fa63e078d7b8c2e5f221df06d72fb46", "patch": "@@ -516,7 +516,7 @@ impl EmitterWriter {\n                 };\n                 let lo = self.cm.lookup_char_pos(sp.lo);\n                 let hi = self.cm.lookup_char_pos(sp.hi);\n-                let elide_sp = (lo.line - hi.line) > MAX_SP_LINES;\n+                let elide_sp = (hi.line - lo.line) >= MAX_SP_LINES;\n \n                 let line_num = line.line_index + 1;\n                 if !(lo.line <= line_num && hi.line >= line_num) {\n@@ -1024,7 +1024,7 @@ mod test {\n                        \\x20              ^  ^\\n\";\n \n         let expect0_end = \"dummy.txt: 5 ccccc\\n\\\n-                        \\x20            ...\\n\\\n+                           dummy.txt: 6 xxxxx\\n\\\n                            dummy.txt: 7 yyyyy\\n\\\n                         \\x20                ^\\n\\\n                         \\x20            ...\\n\\"}]}