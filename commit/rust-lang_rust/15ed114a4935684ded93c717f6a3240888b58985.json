{"sha": "15ed114a4935684ded93c717f6a3240888b58985", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZWQxMTRhNDkzNTY4NGRlZDkzYzcxN2Y2YTMyNDA4ODhiNTg5ODU=", "commit": {"author": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-07T01:35:39Z"}, "committer": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-07T01:35:39Z"}, "message": "Next steps in assoc item completion #3183\n\nAllow trait autocompletions for unimplemented associated fn's, types,\nand consts without using explicit keywords before hand (fn, type,\nconst).\n\nThe sequel to #3108.", "tree": {"sha": "8a08d5e48e4b4bcba9b09248ddfa2392a143de59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a08d5e48e4b4bcba9b09248ddfa2392a143de59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15ed114a4935684ded93c717f6a3240888b58985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15ed114a4935684ded93c717f6a3240888b58985", "html_url": "https://github.com/rust-lang/rust/commit/15ed114a4935684ded93c717f6a3240888b58985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15ed114a4935684ded93c717f6a3240888b58985/comments", "author": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48bb1c51721b7736b6d6f2e5cb82126c91934433", "url": "https://api.github.com/repos/rust-lang/rust/commits/48bb1c51721b7736b6d6f2e5cb82126c91934433", "html_url": "https://github.com/rust-lang/rust/commit/48bb1c51721b7736b6d6f2e5cb82126c91934433"}], "stats": {"total": 105, "additions": 99, "deletions": 6}, "files": [{"sha": "8cb0c72bb36a892d3e05c5da34e378607a169dda", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 99, "deletions": 6, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/15ed114a4935684ded93c717f6a3240888b58985/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ed114a4935684ded93c717f6a3240888b58985/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=15ed114a4935684ded93c717f6a3240888b58985", "patch": "@@ -47,22 +47,39 @@ use crate::{\n };\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n-    let trigger = ctx.token.ancestors().find(|p| match p.kind() {\n+    let mut tokens = ctx.token.ancestors();\n+    let trigger = tokens.find(|p| match p.kind() {\n         SyntaxKind::FN_DEF\n         | SyntaxKind::TYPE_ALIAS_DEF\n         | SyntaxKind::CONST_DEF\n+        | SyntaxKind::NAME_REF\n         | SyntaxKind::BLOCK_EXPR => true,\n         _ => false,\n     });\n \n-    let impl_def = trigger\n-        .as_ref()\n-        .and_then(|node| node.parent())\n-        .and_then(|node| node.parent())\n-        .and_then(ast::ImplDef::cast);\n+    let impl_def = tokens\n+        .find(|p| match p.kind() {\n+            SyntaxKind::IMPL_DEF => true,\n+            _ => false,\n+        })\n+        .and_then(|n| ast::ImplDef::cast(n));\n \n     if let (Some(trigger), Some(impl_def)) = (trigger, impl_def) {\n         match trigger.kind() {\n+            SyntaxKind::NAME_REF => {\n+                get_missing_impl_items(&ctx.sema, &impl_def).iter().for_each(|item| match item {\n+                    hir::AssocItem::Function(fn_item) => {\n+                        add_function_impl(&trigger, acc, ctx, &fn_item)\n+                    }\n+                    hir::AssocItem::TypeAlias(type_item) => {\n+                        add_type_alias_impl(&trigger, acc, ctx, &type_item)\n+                    }\n+                    hir::AssocItem::Const(const_item) => {\n+                        add_const_impl(&trigger, acc, ctx, &const_item)\n+                    }\n+                })\n+            }\n+\n             SyntaxKind::FN_DEF => {\n                 for missing_fn in get_missing_impl_items(&ctx.sema, &impl_def).iter().filter_map(\n                     |item| match item {\n@@ -209,6 +226,82 @@ mod tests {\n         do_completion(code, CompletionKind::Magic)\n     }\n \n+    #[test]\n+    fn name_ref_function_type_const() {\n+        let completions = complete(\n+            r\"\n+            trait Test {\n+                type TestType;\n+                const TEST_CONST: u16;\n+                fn test();\n+            }\n+\n+            struct T1;\n+\n+            impl Test for T1 {\n+                t<|>\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot!(completions, @r###\"\n+        [\n+            CompletionItem {\n+                label: \"const TEST_CONST: u16 = \",\n+                source_range: [209; 210),\n+                delete: [209; 210),\n+                insert: \"const TEST_CONST: u16 = \",\n+                kind: Const,\n+                lookup: \"TEST_CONST\",\n+            },\n+            CompletionItem {\n+                label: \"fn test()\",\n+                source_range: [209; 210),\n+                delete: [209; 210),\n+                insert: \"fn test() {}\",\n+                kind: Function,\n+                lookup: \"test\",\n+            },\n+            CompletionItem {\n+                label: \"type TestType = \",\n+                source_range: [209; 210),\n+                delete: [209; 210),\n+                insert: \"type TestType = \",\n+                kind: TypeAlias,\n+                lookup: \"TestType\",\n+            },\n+        ]\n+        \"###);\n+    }\n+\n+    #[test]\n+    fn name_ref_single_function() {\n+        let completions = complete(\n+            r\"\n+            trait Test {\n+                fn test();\n+            }\n+\n+            struct T1;\n+\n+            impl Test for T1 {\n+                t<|>\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot!(completions, @r###\"\n+        [\n+            CompletionItem {\n+                label: \"fn test()\",\n+                source_range: [139; 140),\n+                delete: [139; 140),\n+                insert: \"fn test() {}\",\n+                kind: Function,\n+                lookup: \"test\",\n+            },\n+        ]\n+        \"###);\n+    }\n+\n     #[test]\n     fn single_function() {\n         let completions = complete("}]}