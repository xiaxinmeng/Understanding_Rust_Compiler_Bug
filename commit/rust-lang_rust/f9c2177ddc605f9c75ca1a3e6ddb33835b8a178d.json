{"sha": "f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YzIxNzdkZGM2MDVmOWM3NWNhMWEzZTZkZGIzMzgzNWI4YTE3OGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-08T01:48:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-08T01:48:35Z"}, "message": "Auto merge of #74877 - lcnr:min_const_generics, r=oli-obk\n\nImplement the `min_const_generics` feature gate\n\nImplements both https://github.com/rust-lang/lang-team/issues/37 and https://github.com/rust-lang/compiler-team/issues/332.\n\nAdds the new feature gate `#![feature(min_const_generics)]`.\nThis feature gate adds the following limitations to using const generics:\n- generic parameters must only be used in types if they are trivial. (either `N` or `{ N }`)\n- generic parameters must be either integers, `bool` or `char`.\n\nWe do allow arbitrary expressions in associated consts though, meaning that the following is allowed,\neven if `<[u8; 0] as Foo>::ASSOC` is not const evaluatable.\n```rust\ntrait Foo {\n    const ASSOC: usize;\n}\n\nimpl<const N: usize> Foo for [u8; N] {\n    const ASSOC: usize = 64 / N;\n}\n```\n\nr? @varkor cc @eddyb @withoutboats", "tree": {"sha": "d8f6d0b66e018cde836a6fb6faa7a7f38116c84b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8f6d0b66e018cde836a6fb6faa7a7f38116c84b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "html_url": "https://github.com/rust-lang/rust/commit/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3a9de9b08659e20ce7c282ed77bc43ddd149107", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a9de9b08659e20ce7c282ed77bc43ddd149107", "html_url": "https://github.com/rust-lang/rust/commit/f3a9de9b08659e20ce7c282ed77bc43ddd149107"}, {"sha": "644c8949121da0c16f65b772bf6e217748d94530", "url": "https://api.github.com/repos/rust-lang/rust/commits/644c8949121da0c16f65b772bf6e217748d94530", "html_url": "https://github.com/rust-lang/rust/commit/644c8949121da0c16f65b772bf6e217748d94530"}], "stats": {"total": 572, "additions": 471, "deletions": 101}, "files": [{"sha": "3d26259174701f5932248c4d82ed7c269b25841b", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1052,6 +1052,30 @@ impl Expr {\n         }\n     }\n \n+    /// Is this expr either `N`, or `{ N }`.\n+    ///\n+    /// If this is not the case, name resolution does not resolve `N` when using\n+    /// `feature(min_const_generics)` as more complex expressions are not supported.\n+    pub fn is_potential_trivial_const_param(&self) -> bool {\n+        let this = if let ExprKind::Block(ref block, None) = self.kind {\n+            if block.stmts.len() == 1 {\n+                if let StmtKind::Expr(ref expr) = block.stmts[0].kind { expr } else { self }\n+            } else {\n+                self\n+            }\n+        } else {\n+            self\n+        };\n+\n+        if let ExprKind::Path(None, ref path) = this.kind {\n+            if path.segments.len() == 1 && path.segments[0].args.is_none() {\n+                return true;\n+            }\n+        }\n+\n+        false\n+    }\n+\n     pub fn to_bound(&self) -> Option<GenericBound> {\n         match &self.kind {\n             ExprKind::Path(None, path) => Some(GenericBound::Trait("}, {"sha": "0e98c047c2fcfa1cb8a0008c05ca1e57c844ac72", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -776,7 +776,13 @@ fn validate_generic_param_order<'a>(\n             span,\n             &format!(\n                 \"reorder the parameters: lifetimes, then types{}\",\n-                if sess.features_untracked().const_generics { \", then consts\" } else { \"\" },\n+                if sess.features_untracked().const_generics\n+                    || sess.features_untracked().min_const_generics\n+                {\n+                    \", then consts\"\n+                } else {\n+                    \"\"\n+                },\n             ),\n             ordered_params.clone(),\n             Applicability::MachineApplicable,"}, {"sha": "8dcd445721a1e6b8cd00b9c1822d701d762059f0", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -526,12 +526,13 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_generic_param(&mut self, param: &'a GenericParam) {\n         if let GenericParamKind::Const { .. } = param.kind {\n-            gate_feature_post!(\n+            gate_feature_fn!(\n                 &self,\n-                const_generics,\n+                |x: &Features| x.const_generics || x.min_const_generics,\n                 param.ident.span,\n+                sym::min_const_generics,\n                 \"const generics are unstable\"\n-            )\n+            );\n         }\n         visit::walk_generic_param(self, param)\n     }"}, {"sha": "077f6cf3ca484c6b4178f5733cd80fd3f7eb66aa", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -579,6 +579,9 @@ declare_features! (\n     /// Allows calling `transmute` in const fn\n     (active, const_fn_transmute, \"1.46.0\", Some(53605), None),\n \n+    /// The smallest useful subset of `const_generics`.\n+    (active, min_const_generics, \"1.46.0\", Some(74878), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "16f5e9a42d3733b32762c5f6609b89d5c4767204", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1380,7 +1380,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// we still evaluate them eagerly.\n     #[inline]\n     pub fn lazy_normalization(self) -> bool {\n-        self.features().const_generics || self.features().lazy_normalization_consts\n+        let features = self.features();\n+        // Note: We do not enable lazy normalization for `features.min_const_generics`.\n+        features.const_generics || features.lazy_normalization_consts\n     }\n \n     #[inline]"}, {"sha": "be72ed6dffb7c6aa5a58e3ceb80bea0b5100541d", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -54,7 +54,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n \n-        self.sess.gated_spans.gate(sym::const_generics, const_span.to(self.prev_token.span));\n+        self.sess.gated_spans.gate(sym::min_const_generics, const_span.to(self.prev_token.span));\n \n         Ok(GenericParam {\n             ident,"}, {"sha": "9502be728de06a4052110ec2cfc35ec865bbcc35", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -466,6 +466,23 @@ impl<'a> Resolver<'a> {\n                 );\n                 err\n             }\n+            ResolutionError::ParamInNonTrivialAnonConst(name) => {\n+                let mut err = self.session.struct_span_err(\n+                    span,\n+                    \"generic parameters must not be used inside of non trivial constant values\",\n+                );\n+                err.span_label(\n+                    span,\n+                    &format!(\n+                        \"non-trivial anonymous constants must not depend on the parameter `{}`\",\n+                        name\n+                    ),\n+                );\n+                err.help(\n+                    &format!(\"it is currently only allowed to use either `{0}` or `{{ {0} }}` as generic constants\", name)\n+                );\n+                err\n+            }\n             ResolutionError::SelfInTyParamDefault => {\n                 let mut err = struct_span_err!(\n                     self.session,"}, {"sha": "b5fc69f9f310e6ffd97297c682592c4fc9e44ae1", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -111,7 +111,7 @@ crate enum RibKind<'a> {\n     ItemRibKind(HasGenericParams),\n \n     /// We're in a constant item. Can't refer to dynamic stuff.\n-    ConstantItemRibKind,\n+    ConstantItemRibKind(bool),\n \n     /// We passed through a module.\n     ModuleRibKind(Module<'a>),\n@@ -137,7 +137,7 @@ impl RibKind<'_> {\n             NormalRibKind\n             | ClosureOrAsyncRibKind\n             | FnItemRibKind\n-            | ConstantItemRibKind\n+            | ConstantItemRibKind(_)\n             | ModuleRibKind(_)\n             | MacroDefinition(_)\n             | ConstParamTyRibKind => false,\n@@ -426,7 +426,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n     fn visit_anon_const(&mut self, constant: &'ast AnonConst) {\n         debug!(\"visit_anon_const {:?}\", constant);\n-        self.with_constant_rib(|this| {\n+        self.with_constant_rib(constant.value.is_potential_trivial_const_param(), |this| {\n             visit::walk_anon_const(this, constant);\n         });\n     }\n@@ -628,7 +628,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         if !check_ns(TypeNS) && check_ns(ValueNS) {\n                             // This must be equivalent to `visit_anon_const`, but we cannot call it\n                             // directly due to visitor lifetimes so we have to copy-paste some code.\n-                            self.with_constant_rib(|this| {\n+                            self.with_constant_rib(true, |this| {\n                                 this.smart_resolve_path(\n                                     ty.id,\n                                     qself.as_ref(),\n@@ -829,7 +829,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 | ClosureOrAsyncRibKind\n                 | FnItemRibKind\n                 | ItemRibKind(..)\n-                | ConstantItemRibKind\n+                | ConstantItemRibKind(_)\n                 | ModuleRibKind(..)\n                 | ForwardTyParamBanRibKind\n                 | ConstParamTyRibKind => {\n@@ -948,7 +948,14 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                         // Only impose the restrictions of `ConstRibKind` for an\n                                         // actual constant expression in a provided default.\n                                         if let Some(expr) = default {\n-                                            this.with_constant_rib(|this| this.visit_expr(expr));\n+                                            // We allow arbitrary const expressions inside of associated consts,\n+                                            // even if they are potentially not const evaluatable.\n+                                            //\n+                                            // Type parameters can already be used and as associated consts are\n+                                            // not used as part of the type system, this is far less surprising.\n+                                            this.with_constant_rib(true, |this| {\n+                                                this.visit_expr(expr)\n+                                            });\n                                         }\n                                     }\n                                     AssocItemKind::Fn(_, _, generics, _) => {\n@@ -989,7 +996,9 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     this.visit_ty(ty);\n                     if let Some(expr) = expr {\n-                        this.with_constant_rib(|this| this.visit_expr(expr));\n+                        this.with_constant_rib(expr.is_potential_trivial_const_param(), |this| {\n+                            this.visit_expr(expr)\n+                        });\n                     }\n                 });\n             }\n@@ -1086,11 +1095,11 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.with_rib(ValueNS, kind, |this| this.with_rib(TypeNS, kind, f))\n     }\n \n-    fn with_constant_rib(&mut self, f: impl FnOnce(&mut Self)) {\n+    fn with_constant_rib(&mut self, trivial: bool, f: impl FnOnce(&mut Self)) {\n         debug!(\"with_constant_rib\");\n-        self.with_rib(ValueNS, ConstantItemRibKind, |this| {\n-            this.with_rib(TypeNS, ConstantItemRibKind, |this| {\n-                this.with_label_rib(ConstantItemRibKind, f);\n+        self.with_rib(ValueNS, ConstantItemRibKind(trivial), |this| {\n+            this.with_rib(TypeNS, ConstantItemRibKind(trivial), |this| {\n+                this.with_label_rib(ConstantItemRibKind(trivial), f);\n             })\n         });\n     }\n@@ -1220,7 +1229,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                 for item in impl_items {\n                                     use crate::ResolutionError::*;\n                                     match &item.kind {\n-                                        AssocItemKind::Const(..) => {\n+                                        AssocItemKind::Const(_default, _ty, _expr) => {\n                                             debug!(\"resolve_implementation AssocItemKind::Const\",);\n                                             // If this is a trait impl, ensure the const\n                                             // exists in trait\n@@ -1231,7 +1240,12 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                 |n, s| ConstNotMemberOfTrait(n, s),\n                                             );\n \n-                                            this.with_constant_rib(|this| {\n+                                            // We allow arbitrary const expressions inside of associated consts,\n+                                            // even if they are potentially not const evaluatable.\n+                                            //\n+                                            // Type parameters can already be used and as associated consts are\n+                                            // not used as part of the type system, this is far less surprising.\n+                                            this.with_constant_rib(true, |this| {\n                                                 visit::walk_assoc_item(this, item, AssocCtxt::Impl)\n                                             });\n                                         }"}, {"sha": "1425efcb54d1ff6bc255a1ecdec329a16bc3d83f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -218,6 +218,10 @@ enum ResolutionError<'a> {\n     ParamInTyOfConstParam(Symbol),\n     /// constant values inside of type parameter defaults must not depend on generic parameters.\n     ParamInAnonConstInTyDefault(Symbol),\n+    /// generic parameters must not be used inside of non trivial constant values.\n+    ///\n+    /// This error is only emitted when using `min_const_generics`.\n+    ParamInNonTrivialAnonConst(Symbol),\n     /// Error E0735: type parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n     /// Error E0767: use of unreachable label\n@@ -2507,7 +2511,7 @@ impl<'a> Resolver<'a> {\n                                 res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);\n                             }\n                         }\n-                        ConstantItemRibKind => {\n+                        ConstantItemRibKind(_) => {\n                             // Still doesn't deal with upvars\n                             if record_used {\n                                 self.report_error(span, AttemptToUseNonConstantValueInConstant);\n@@ -2546,7 +2550,18 @@ impl<'a> Resolver<'a> {\n                             in_ty_param_default = true;\n                             continue;\n                         }\n-                        ConstantItemRibKind => {\n+                        ConstantItemRibKind(trivial) => {\n+                            // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n+                            if !trivial && self.session.features_untracked().min_const_generics {\n+                                if record_used {\n+                                    self.report_error(\n+                                        span,\n+                                        ResolutionError::ParamInNonTrivialAnonConst(rib_ident.name),\n+                                    );\n+                                }\n+                                return Res::Err;\n+                            }\n+\n                             if in_ty_param_default {\n                                 if record_used {\n                                     self.report_error(\n@@ -2612,7 +2627,18 @@ impl<'a> Resolver<'a> {\n                             in_ty_param_default = true;\n                             continue;\n                         }\n-                        ConstantItemRibKind => {\n+                        ConstantItemRibKind(trivial) => {\n+                            // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n+                            if !trivial && self.session.features_untracked().min_const_generics {\n+                                if record_used {\n+                                    self.report_error(\n+                                        span,\n+                                        ResolutionError::ParamInNonTrivialAnonConst(rib_ident.name),\n+                                    );\n+                                }\n+                                return Res::Err;\n+                            }\n+\n                             if in_ty_param_default {\n                                 if record_used {\n                                     self.report_error("}, {"sha": "5203bfdb3b7ce8f43bc4579c5b1571a914c3ce1a", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -672,6 +672,7 @@ symbols! {\n         min_align_of,\n         min_align_of_val,\n         min_const_fn,\n+        min_const_generics,\n         min_const_unsafe_fn,\n         min_specialization,\n         minnumf32,"}, {"sha": "bab8db46a9d897eca0d6e1a545ed192043baf76d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1238,6 +1238,9 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 // HACK(eddyb) this provides the correct generics when\n                 // `feature(const_generics)` is enabled, so that const expressions\n                 // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n+                //\n+                // Note that we do not supply the parent generics when using\n+                // `feature(min_const_generics)`.\n                 Some(parent_def_id.to_def_id())\n             } else {\n                 let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));"}, {"sha": "17444c6d0ac957442c7760123e1a2f47bf7638a7", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -326,21 +326,39 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             GenericParamKind::Type { default: Some(ref ty), .. } => icx.to_ty(ty),\n             GenericParamKind::Const { ty: ref hir_ty, .. } => {\n                 let ty = icx.to_ty(hir_ty);\n-                let err = match ty.peel_refs().kind {\n-                    ty::FnPtr(_) => Some(\"function pointers\"),\n-                    ty::RawPtr(_) => Some(\"raw pointers\"),\n-                    _ => None,\n+                let err_ty_str;\n+                let err = if tcx.features().min_const_generics {\n+                    match ty.kind {\n+                        ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Error(_) => None,\n+                        ty::FnPtr(_) => Some(\"function pointers\"),\n+                        ty::RawPtr(_) => Some(\"raw pointers\"),\n+                        _ => {\n+                            err_ty_str = format!(\"`{}`\", ty);\n+                            Some(err_ty_str.as_str())\n+                        }\n+                    }\n+                } else {\n+                    match ty.peel_refs().kind {\n+                        ty::FnPtr(_) => Some(\"function pointers\"),\n+                        ty::RawPtr(_) => Some(\"raw pointers\"),\n+                        _ => None,\n+                    }\n                 };\n                 if let Some(unsupported_type) = err {\n-                    tcx.sess\n-                        .struct_span_err(\n-                            hir_ty.span,\n-                            &format!(\n-                                \"using {} as const generic parameters is forbidden\",\n-                                unsupported_type\n-                            ),\n-                        )\n-                        .emit();\n+                    let mut err = tcx.sess.struct_span_err(\n+                        hir_ty.span,\n+                        &format!(\n+                            \"using {} as const generic parameters is forbidden\",\n+                            unsupported_type\n+                        ),\n+                    );\n+\n+                    if tcx.features().min_const_generics {\n+                        err.note(\"the only supported types are integers, `bool` and `char`\")\n+                        .note(\"more complex types are supported with `#[feature(const_generics)]`\").emit()\n+                    } else {\n+                        err.emit();\n+                    }\n                 };\n                 if traits::search_for_structural_match_violation(param.hir_id, param.span, tcx, ty)\n                     .is_some()"}, {"sha": "d53a4ac2d4c2359eb159565125c6bc2f88c1b6e6", "filename": "src/test/ui/const-generics/const-param-in-trait-ungated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -4,8 +4,8 @@ error[E0658]: const generics are unstable\n LL | trait Trait<const T: ()> {}\n    |                   ^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #74878 <https://github.com/rust-lang/rust/issues/74878> for more information\n+   = help: add `#![feature(min_const_generics)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "5d379ff083ca70642f5ee8925f068e5a84c5fbb0", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -10,8 +10,8 @@ error[E0658]: const generics are unstable\n LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n    |                   ^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #74878 <https://github.com/rust-lang/rust/issues/74878> for more information\n+   = help: add `#![feature(min_const_generics)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c51028d5b2001e96ef6c4c593f0aec737c2d0d93", "filename": "src/test/ui/const-generics/defaults/wrong-order.full.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,16 +1,16 @@\n error: type parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:3:10\n+  --> $DIR/wrong-order.rs:5:10\n    |\n LL | struct A<T = u32, const N: usize> {\n    |          ^\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/wrong-order.rs:1:12\n+  --> $DIR/wrong-order.rs:2:27\n    |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full, feature(const_generics))]\n+   |                           ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information", "previous_filename": "src/test/ui/const-generics/defaults/wrong-order.stderr"}, {"sha": "29a46367004d44b3a6185858f5d5a5f0069d38ee", "filename": "src/test/ui/const-generics/defaults/wrong-order.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,10 @@\n+error: type parameters with a default must be trailing\n+  --> $DIR/wrong-order.rs:5:10\n+   |\n+LL | struct A<T = u32, const N: usize> {\n+   |          ^\n+   |\n+   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n+\n+error: aborting due to previous error\n+"}, {"sha": "cb36d456f3887de7f91e2c6c629649fb7b06b716", "filename": "src/test/ui/const-generics/defaults/wrong-order.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,4 +1,6 @@\n-#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<T = u32, const N: usize> {\n     //~^ ERROR type parameters with a default must be trailing"}, {"sha": "d853ec5015ed268cddfa0c44a79d1967e768ef0a", "filename": "src/test/ui/const-generics/issues/issue-56445.full.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.full.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,8 +1,8 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-56445.rs:3:12\n+  --> $DIR/issue-56445.rs:3:27\n    |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full, feature(const_generics))]\n+   |                           ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information", "previous_filename": "src/test/ui/const-generics/issues/issue-56445.stderr"}, {"sha": "ca35ee5b2905d216e26ad1ea6ff406e29c77487c", "filename": "src/test/ui/const-generics/issues/issue-56445.min.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.min.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,20 @@\n+error[E0771]: use of non-static lifetime `'a` in const generic\n+  --> $DIR/issue-56445.rs:9:26\n+   |\n+LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n+   |                          ^^\n+   |\n+   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+\n+error: using `&'static str` as const generic parameters is forbidden\n+  --> $DIR/issue-56445.rs:9:25\n+   |\n+LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n+   |                         ^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0771`."}, {"sha": "174eb16abfc5f44755243dce1a80cc719f0ee140", "filename": "src/test/ui/const-generics/issues/issue-56445.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,12 +1,13 @@\n // Regression test for https://github.com/rust-lang/rust/issues/56445#issuecomment-518402995.\n-\n-#![feature(const_generics)]\n-//~^ WARN: the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n+#![cfg_attr(min, feature(min_const_generics))]\n #![crate_type = \"lib\"]\n \n use std::marker::PhantomData;\n \n struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n //~^ ERROR: use of non-static lifetime `'a` in const generic\n+//[min]~| ERROR: using `&'static str` as const\n \n impl Bug<'_, \"\"> {}"}, {"sha": "aeef296f38526eeff33552629e820df374fcfa1c", "filename": "src/test/ui/const-generics/issues/issue-60263.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -4,8 +4,8 @@ error[E0658]: const generics are unstable\n LL | struct B<const I: u8>;\n    |                ^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #74878 <https://github.com/rust-lang/rust/issues/74878> for more information\n+   = help: add `#![feature(min_const_generics)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "c03b7252a3c8530895ac946e0fb03026dab57ada", "filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.full.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.full.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,8 +1,8 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61336-1.rs:1:12\n+  --> $DIR/issue-60818-struct-constructors.rs:3:27\n    |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full, feature(const_generics))]\n+   |                           ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information", "previous_filename": "src/test/ui/const-generics/issues/issue-61336-1.stderr"}, {"sha": "ae2b0520fb1c1ee47885195a2120fcb9c2f930b6", "filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Generic<const V: usize>;\n "}, {"sha": "f18728eabbb437b7dca909166d01f1197f109da8", "filename": "src/test/ui/const-generics/issues/issue-61336-1.full.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.full.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,8 +1,8 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60818-struct-constructors.rs:3:12\n+  --> $DIR/issue-61336-1.rs:3:27\n    |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full, feature(const_generics))]\n+   |                           ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information", "previous_filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.stderr"}, {"sha": "201c0d039d98f3dab979ece6c25def3d44a86586", "filename": "src/test/ui/const-generics/issues/issue-61336-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,7 +1,7 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n-\n // build-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n     [x; N]"}, {"sha": "d21cd9df054c1ec9b8a8c2e89a30a55f293da705", "filename": "src/test/ui/const-generics/issues/issue-61336-2.full.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,14 +1,14 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61336-2.rs:1:12\n+  --> $DIR/issue-61336-2.rs:2:27\n    |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full, feature(const_generics))]\n+   |                           ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/issue-61336-2.rs:9:5\n+  --> $DIR/issue-61336-2.rs:10:5\n    |\n LL |     [x; { N }]\n    |     ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`", "previous_filename": "src/test/ui/const-generics/issues/issue-61336-2.stderr"}, {"sha": "29ab7b1305e38659ba16d228d1bd788cc16dd0ab", "filename": "src/test/ui/const-generics/issues/issue-61336-2.min.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/issue-61336-2.rs:10:5\n+   |\n+LL |     [x; { N }]\n+   |     ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "25b9271105e245c9a58a0862427c0df9fcb272ca", "filename": "src/test/ui/const-generics/issues/issue-61336-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,5 +1,6 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n     [x; { N }]"}, {"sha": "d1b5d5eb9417f9ed0be93e12a1291b364b7c1ffe", "filename": "src/test/ui/const-generics/issues/issue-61336.full.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-61336.rs:2:27\n+   |\n+LL | #![cfg_attr(full, feature(const_generics))]\n+   |                           ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/issue-61336.rs:10:5\n+   |\n+LL |     [x; N]\n+   |     ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "bced8bbd82ff6df7b758babec1dc6a335c75c335", "filename": "src/test/ui/const-generics/issues/issue-61336.min.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/issue-61336.rs:10:5\n+   |\n+LL |     [x; N]\n+   |     ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "fb55542a1c9931dc5b89d6b66a82c5bd79cd5091", "filename": "src/test/ui/const-generics/issues/issue-61336.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,5 +1,6 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n     [x; N]"}, {"sha": "ac6c378295d3144ed85071ddbfe38412be0ce3a1", "filename": "src/test/ui/const-generics/issues/issue-61422.full.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.full.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,8 +1,8 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61432.rs:3:12\n+  --> $DIR/issue-61422.rs:3:27\n    |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full, feature(const_generics))]\n+   |                           ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information", "previous_filename": "src/test/ui/const-generics/issues/issue-61432.stderr"}, {"sha": "649f8b4255b1216adb4d4f5461c4998fe86b9c7c", "filename": "src/test/ui/const-generics/issues/issue-61422.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::mem;\n "}, {"sha": "82b36de45a2aac033883f54ee5e33b87b3dbc3bd", "filename": "src/test/ui/const-generics/issues/issue-61432.full.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.full.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,8 +1,8 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61422.rs:3:12\n+  --> $DIR/issue-61432.rs:3:27\n    |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full, feature(const_generics))]\n+   |                           ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information", "previous_filename": "src/test/ui/const-generics/issues/issue-61422.stderr"}, {"sha": "91a4794099c073bd463cc52e84678bceeb5abac8", "filename": "src/test/ui/const-generics/issues/issue-61432.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn promote<const N: i32>() {\n     // works:"}, {"sha": "3ccce5675fcba19aee39f1382e20152a44d4dc71", "filename": "src/test/ui/const-generics/issues/issue-61747.full.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.full.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,14 +1,14 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61747.rs:1:12\n+  --> $DIR/issue-61747.rs:2:27\n    |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full, feature(const_generics))]\n+   |                           ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-61747.rs:7:23\n+  --> $DIR/issue-61747.rs:8:23\n    |\n LL |     fn successor() -> Const<{C + 1}> {\n    |                       ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-61747.stderr"}, {"sha": "2061b6c55bb7b2a67677ace3402e07b559a17506", "filename": "src/test/ui/const-generics/issues/issue-61747.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-61747.rs:8:30\n+   |\n+LL |     fn successor() -> Const<{C + 1}> {\n+   |                              ^ non-trivial anonymous constants must not depend on the parameter `C`\n+   |\n+   = help: it is currently only allowed to use either `C` or `{ C }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "4e5cde17f39a963a9ccd7b68f5d6b6059174ab5d", "filename": "src/test/ui/const-generics/issues/issue-61747.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,11 +1,13 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Const<const N: usize>;\n \n impl<const C: usize> Const<{C}> {\n     fn successor() -> Const<{C + 1}> {\n-        //~^ ERROR constant expression depends on a generic parameter\n+        //[full]~^ ERROR constant expression depends on a generic parameter\n+        //[min]~^^ ERROR generic parameters must not be used\n         Const\n     }\n }"}, {"sha": "fa75613d9ddc1d621394e259ee308dd9e6be4b53", "filename": "src/test/ui/const-generics/min_const_generics/assoc_const.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fassoc_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fassoc_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fassoc_const.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+#![feature(min_const_generics)]\n+\n+struct Foo<const N: usize>;\n+\n+impl<const N: usize> Foo<N> {\n+    const VALUE: usize = N * 2;\n+}\n+\n+trait Bar {\n+    const ASSOC: usize;\n+}\n+\n+impl<const N: usize> Bar for Foo<N> {\n+    const ASSOC: usize = N * 3;\n+}\n+\n+fn main() {}"}, {"sha": "f9cb0d2829d6ea84e8f5630cd12335710be16aaa", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,29 @@\n+#![feature(min_const_generics)]\n+\n+fn test<const N: usize>() {}\n+\n+fn ok<const M: usize>() -> [u8; M] {\n+    [0; { M }]\n+}\n+\n+struct Break0<const N: usize>([u8; { N + 1 }]);\n+//~^ ERROR generic parameters must not be used inside of non trivial constant values\n+\n+struct Break1<const N: usize>([u8; { { N } }]);\n+//~^ ERROR generic parameters must not be used inside of non trivial constant values\n+\n+fn break2<const N: usize>() {\n+    let _: [u8; N + 1];\n+    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+}\n+\n+fn break3<const N: usize>() {\n+    let _ = [0; N + 1];\n+    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+}\n+\n+trait Foo {\n+    const ASSOC: usize;\n+}\n+\n+fn main() {}"}, {"sha": "baed8d13f00f1f6d2c934df21f30799f4757ca06", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,34 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/complex-expression.rs:9:38\n+   |\n+LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n+   |                                      ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/complex-expression.rs:12:40\n+   |\n+LL | struct Break1<const N: usize>([u8; { { N } }]);\n+   |                                        ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/complex-expression.rs:16:17\n+   |\n+LL |     let _: [u8; N + 1];\n+   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/complex-expression.rs:21:17\n+   |\n+LL |     let _ = [0; N + 1];\n+   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a396fa83aa629c014070723fb3ae32c37bca3815", "filename": "src/test/ui/const-generics/min_const_generics/complex-types.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,18 @@\n+#![feature(min_const_generics)]\n+\n+struct Foo<const N: [u8; 0]>;\n+//~^ ERROR using `[u8; 0]` as const generic parameters is forbidden\n+\n+struct Bar<const N: ()>;\n+//~^ ERROR using `()` as const generic parameters is forbidden\n+\n+#[derive(PartialEq, Eq)]\n+struct No;\n+\n+struct Fez<const N: No>;\n+//~^ ERROR using `No` as const generic parameters is forbidden\n+\n+struct Faz<const N: &'static u8>;\n+//~^ ERROR using `&'static u8` as const generic parameters is forbidden\n+\n+fn main() {}"}, {"sha": "835b1f1a3e8675aba34724349605ed824d3b8f4c", "filename": "src/test/ui/const-generics/min_const_generics/complex-types.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,38 @@\n+error: using `[u8; 0]` as const generic parameters is forbidden\n+  --> $DIR/complex-types.rs:3:21\n+   |\n+LL | struct Foo<const N: [u8; 0]>;\n+   |                     ^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `()` as const generic parameters is forbidden\n+  --> $DIR/complex-types.rs:6:21\n+   |\n+LL | struct Bar<const N: ()>;\n+   |                     ^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `No` as const generic parameters is forbidden\n+  --> $DIR/complex-types.rs:12:21\n+   |\n+LL | struct Fez<const N: No>;\n+   |                     ^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `&'static u8` as const generic parameters is forbidden\n+  --> $DIR/complex-types.rs:15:21\n+   |\n+LL | struct Faz<const N: &'static u8>;\n+   |                     ^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "423deae4600836407185614dc3498d1cbef99f30", "filename": "src/test/ui/const-generics/min_const_generics/feature-gate-min_const_generics.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ffeature-gate-min_const_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ffeature-gate-min_const_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ffeature-gate-min_const_generics.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,4 @@\n+fn test<const N: usize>() {}\n+//~^ ERROR const generics are unstable\n+\n+fn main() {}"}, {"sha": "7f82a960da2553dcfc9c6c87d34debad76fcef17", "filename": "src/test/ui/const-generics/min_const_generics/feature-gate-min_const_generics.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ffeature-gate-min_const_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ffeature-gate-min_const_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ffeature-gate-min_const_generics.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: const generics are unstable\n+  --> $DIR/feature-gate-min_const_generics.rs:1:15\n+   |\n+LL | fn test<const N: usize>() {}\n+   |               ^\n+   |\n+   = note: see issue #74878 <https://github.com/rust-lang/rust/issues/74878> for more information\n+   = help: add `#![feature(min_const_generics)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "3ccdd472613728351b030ba9bff54bce1f3aa9a8", "filename": "src/test/ui/const-generics/type-dependent/const-arg-in-const-arg.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fconst-arg-in-const-arg.rs?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -1,7 +1,8 @@\n // run-pass\n-#![feature(const_generics)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n #![allow(incomplete_features)]\n-#![feature(const_fn)]\n \n struct Foo;\n "}, {"sha": "eef465318a390665f2a781ff2ebcf95c863039f3", "filename": "src/test/ui/feature-gates/feature-gate-const_generics-ptr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -4,17 +4,17 @@ error[E0658]: const generics are unstable\n LL | struct ConstFn<const F: fn()>;\n    |                      ^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #74878 <https://github.com/rust-lang/rust/issues/74878> for more information\n+   = help: add `#![feature(min_const_generics)]` to the crate attributes to enable\n \n error[E0658]: const generics are unstable\n   --> $DIR/feature-gate-const_generics-ptr.rs:5:23\n    |\n LL | struct ConstPtr<const P: *const u32>;\n    |                       ^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #74878 <https://github.com/rust-lang/rust/issues/74878> for more information\n+   = help: add `#![feature(min_const_generics)]` to the crate attributes to enable\n \n error: using function pointers as const generic parameters is forbidden\n   --> $DIR/feature-gate-const_generics-ptr.rs:1:25"}, {"sha": "f80362252f9236cfb09ea62ad58fd65124c9dfe5", "filename": "src/test/ui/feature-gates/feature-gate-const_generics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr?ref=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d", "patch": "@@ -4,17 +4,17 @@ error[E0658]: const generics are unstable\n LL | fn foo<const X: ()>() {}\n    |              ^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #74878 <https://github.com/rust-lang/rust/issues/74878> for more information\n+   = help: add `#![feature(min_const_generics)]` to the crate attributes to enable\n \n error[E0658]: const generics are unstable\n   --> $DIR/feature-gate-const_generics.rs:3:18\n    |\n LL | struct Foo<const X: usize>([(); X]);\n    |                  ^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #74878 <https://github.com/rust-lang/rust/issues/74878> for more information\n+   = help: add `#![feature(min_const_generics)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}]}