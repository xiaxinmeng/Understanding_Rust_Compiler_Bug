{"sha": "266a72637a5bb79eeaaa741950a6f9501bfd2f8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NmE3MjYzN2E1YmI3OWVlYWFhNzQxOTUwYTZmOTUwMWJmZDJmOGQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-04-15T08:13:39Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-06T18:37:45Z"}, "message": "Simple library test updates", "tree": {"sha": "55e401fe397d04fa072069ff719dc6588daef3db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55e401fe397d04fa072069ff719dc6588daef3db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/266a72637a5bb79eeaaa741950a6f9501bfd2f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/266a72637a5bb79eeaaa741950a6f9501bfd2f8d", "html_url": "https://github.com/rust-lang/rust/commit/266a72637a5bb79eeaaa741950a6f9501bfd2f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/266a72637a5bb79eeaaa741950a6f9501bfd2f8d/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "html_url": "https://github.com/rust-lang/rust/commit/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1"}], "stats": {"total": 63, "additions": 24, "deletions": 39}, "files": [{"sha": "80a5800bcbb891ab4d4cbed7e1586d0407ae6704", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/266a72637a5bb79eeaaa741950a6f9501bfd2f8d/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266a72637a5bb79eeaaa741950a6f9501bfd2f8d/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=266a72637a5bb79eeaaa741950a6f9501bfd2f8d", "patch": "@@ -41,8 +41,7 @@ use crate::ops::ControlFlow;\n /// output type that we want:\n /// ```\n /// # #![feature(try_trait_v2)]\n-/// # #![feature(try_trait_transition)]\n-/// # use std::ops::TryV2 as Try;\n+/// # use std::ops::Try;\n /// fn simple_try_fold_1<A, T, R: Try<Output = A>>(\n ///     iter: impl Iterator<Item = T>,\n ///     mut accum: A,\n@@ -56,9 +55,8 @@ use crate::ops::ControlFlow;\n /// into the return type using [`Try::from_output`]:\n /// ```\n /// # #![feature(try_trait_v2)]\n-/// # #![feature(try_trait_transition)]\n /// # #![feature(control_flow_enum)]\n-/// # use std::ops::{ControlFlow, TryV2 as Try};\n+/// # use std::ops::{ControlFlow, Try};\n /// fn simple_try_fold_2<A, T, R: Try<Output = A>>(\n ///     iter: impl Iterator<Item = T>,\n ///     mut accum: A,\n@@ -81,9 +79,8 @@ use crate::ops::ControlFlow;\n /// recreated from their corresponding residual, so we'll just call it:\n /// ```\n /// # #![feature(try_trait_v2)]\n-/// # #![feature(try_trait_transition)]\n /// # #![feature(control_flow_enum)]\n-/// # use std::ops::{ControlFlow, TryV2 as Try};\n+/// # use std::ops::{ControlFlow, Try};\n /// pub fn simple_try_fold_3<A, T, R: Try<Output = A>>(\n ///     iter: impl Iterator<Item = T>,\n ///     mut accum: A,\n@@ -103,10 +100,9 @@ use crate::ops::ControlFlow;\n /// But this \"call `branch`, then `match` on it, and `return` if it was a\n /// `Break`\" is exactly what happens inside the `?` operator.  So rather than\n /// do all this manually, we can just use `?` instead:\n-/// ```compile_fail (enable again once ? converts to the new trait)\n+/// ```\n /// # #![feature(try_trait_v2)]\n-/// # #![feature(try_trait_transition)]\n-/// # use std::ops::TryV2 as Try;\n+/// # use std::ops::Try;\n /// fn simple_try_fold<A, T, R: Try<Output = A>>(\n ///     iter: impl Iterator<Item = T>,\n ///     mut accum: A,\n@@ -160,8 +156,7 @@ pub trait Try: FromResidual {\n     /// ```\n     /// #![feature(try_trait_v2)]\n     /// #![feature(control_flow_enum)]\n-    /// #![feature(try_trait_transition)]\n-    /// use std::ops::TryV2 as Try;\n+    /// use std::ops::Try;\n     ///\n     /// assert_eq!(<Result<_, String> as Try>::from_output(3), Ok(3));\n     /// assert_eq!(<Option<_> as Try>::from_output(4), Some(4));\n@@ -193,8 +188,7 @@ pub trait Try: FromResidual {\n     /// ```\n     /// #![feature(try_trait_v2)]\n     /// #![feature(control_flow_enum)]\n-    /// #![feature(try_trait_transition)]\n-    /// use std::ops::{ControlFlow, TryV2 as Try};\n+    /// use std::ops::{ControlFlow, Try};\n     ///\n     /// assert_eq!(Ok::<_, String>(3).branch(), ControlFlow::Continue(3));\n     /// assert_eq!(Err::<String, _>(3).branch(), ControlFlow::Break(Err(3)));"}, {"sha": "db12d79c00c309b63b453cc00b54d78132e2fd45", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/266a72637a5bb79eeaaa741950a6f9501bfd2f8d/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266a72637a5bb79eeaaa741950a6f9501bfd2f8d/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=266a72637a5bb79eeaaa741950a6f9501bfd2f8d", "patch": "@@ -45,6 +45,7 @@\n #![feature(test)]\n #![feature(trusted_len)]\n #![feature(try_trait)]\n+#![feature(try_trait_v2)]\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]\n #![feature(int_error_matching)]"}, {"sha": "88ea15a3b33fac90de5bdb2c8ed7fee6dae1e2c0", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/266a72637a5bb79eeaaa741950a6f9501bfd2f8d/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266a72637a5bb79eeaaa741950a6f9501bfd2f8d/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=266a72637a5bb79eeaaa741950a6f9501bfd2f8d", "patch": "@@ -301,18 +301,6 @@ fn test_try() {\n         Some(val)\n     }\n     assert_eq!(try_option_none(), None);\n-\n-    fn try_option_ok() -> Result<u8, NoneError> {\n-        let val = Some(1)?;\n-        Ok(val)\n-    }\n-    assert_eq!(try_option_ok(), Ok(1));\n-\n-    fn try_option_err() -> Result<u8, NoneError> {\n-        let val = None?;\n-        Ok(val)\n-    }\n-    assert_eq!(try_option_err(), Err(NoneError));\n }\n \n #[test]"}, {"sha": "f4e5e7751b8e3f603129fc5f714c2b1b1478e903", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/266a72637a5bb79eeaaa741950a6f9501bfd2f8d/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266a72637a5bb79eeaaa741950a6f9501bfd2f8d/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=266a72637a5bb79eeaaa741950a6f9501bfd2f8d", "patch": "@@ -249,26 +249,14 @@ pub fn test_into_err() {\n \n #[test]\n fn test_try() {\n-    fn try_result_some() -> Option<u8> {\n-        let val = Ok(1)?;\n-        Some(val)\n-    }\n-    assert_eq!(try_result_some(), Some(1));\n-\n-    fn try_result_none() -> Option<u8> {\n-        let val = Err(NoneError)?;\n-        Some(val)\n-    }\n-    assert_eq!(try_result_none(), None);\n-\n-    fn try_result_ok() -> Result<u8, u8> {\n+    fn try_result_ok() -> Result<u8, u32> {\n         let result: Result<u8, u8> = Ok(1);\n         let val = result?;\n         Ok(val)\n     }\n     assert_eq!(try_result_ok(), Ok(1));\n \n-    fn try_result_err() -> Result<u8, u8> {\n+    fn try_result_err() -> Result<u8, u32> {\n         let result: Result<u8, u8> = Err(1);\n         let val = result?;\n         Ok(val)\n@@ -401,3 +389,17 @@ fn result_opt_conversions() {\n \n     assert_eq!(res, Err(BadNumErr))\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))] // Needs the V2 trait\n+fn result_try_trait_v2_branch() {\n+    use core::num::NonZeroU32;\n+    use core::ops::{ControlFlow::*, Try};\n+    assert_eq!(Ok::<i32, i32>(4).branch(), Continue(4));\n+    assert_eq!(Err::<i32, i32>(4).branch(), Break(Err(4)));\n+    let one = NonZeroU32::new(1).unwrap();\n+    assert_eq!(Ok::<(), NonZeroU32>(()).branch(), Continue(()));\n+    assert_eq!(Err::<(), NonZeroU32>(one).branch(), Break(Err(one)));\n+    assert_eq!(Ok::<NonZeroU32, ()>(one).branch(), Continue(one));\n+    assert_eq!(Err::<NonZeroU32, ()>(()).branch(), Break(Err(())));\n+}"}]}