{"sha": "2bf553c3e018025e9fe7e85216aafd7ba047db71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZjU1M2MzZTAxODAyNWU5ZmU3ZTg1MjE2YWFmZDdiYTA0N2RiNzE=", "commit": {"author": {"name": "Markus Siemens", "email": "siemens1993@gmail.com", "date": "2015-02-17T16:44:46Z"}, "committer": {"name": "Markus Siemens", "email": "siemens1993@gmail.com", "date": "2015-02-17T20:49:31Z"}, "message": "Implement `Vec::from_elem` (RFC 832)\n\nImplement `Vec::from_elem` by making the `vec![element; len]` macro\nmore powerful (see RFC 832).\n\nCloses #22414", "tree": {"sha": "e0646dc02c35d1253d2a947cee70c8e335297374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0646dc02c35d1253d2a947cee70c8e335297374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bf553c3e018025e9fe7e85216aafd7ba047db71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf553c3e018025e9fe7e85216aafd7ba047db71", "html_url": "https://github.com/rust-lang/rust/commit/2bf553c3e018025e9fe7e85216aafd7ba047db71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bf553c3e018025e9fe7e85216aafd7ba047db71/comments", "author": {"login": "msiemens", "id": 1873922, "node_id": "MDQ6VXNlcjE4NzM5MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1873922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msiemens", "html_url": "https://github.com/msiemens", "followers_url": "https://api.github.com/users/msiemens/followers", "following_url": "https://api.github.com/users/msiemens/following{/other_user}", "gists_url": "https://api.github.com/users/msiemens/gists{/gist_id}", "starred_url": "https://api.github.com/users/msiemens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msiemens/subscriptions", "organizations_url": "https://api.github.com/users/msiemens/orgs", "repos_url": "https://api.github.com/users/msiemens/repos", "events_url": "https://api.github.com/users/msiemens/events{/privacy}", "received_events_url": "https://api.github.com/users/msiemens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msiemens", "id": 1873922, "node_id": "MDQ6VXNlcjE4NzM5MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1873922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msiemens", "html_url": "https://github.com/msiemens", "followers_url": "https://api.github.com/users/msiemens/followers", "following_url": "https://api.github.com/users/msiemens/following{/other_user}", "gists_url": "https://api.github.com/users/msiemens/gists{/gist_id}", "starred_url": "https://api.github.com/users/msiemens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msiemens/subscriptions", "organizations_url": "https://api.github.com/users/msiemens/orgs", "repos_url": "https://api.github.com/users/msiemens/repos", "events_url": "https://api.github.com/users/msiemens/events{/privacy}", "received_events_url": "https://api.github.com/users/msiemens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1bb6c2f46f08c1d7b6d695f5b3cf93142cb8860", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1bb6c2f46f08c1d7b6d695f5b3cf93142cb8860", "html_url": "https://github.com/rust-lang/rust/commit/f1bb6c2f46f08c1d7b6d695f5b3cf93142cb8860"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "ebcfb8d1cf84e2a4d421e2fc000c2cf767e8e559", "filename": "src/libcollections/macros.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2bf553c3e018025e9fe7e85216aafd7ba047db71/src%2Flibcollections%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf553c3e018025e9fe7e85216aafd7ba047db71/src%2Flibcollections%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fmacros.rs?ref=2bf553c3e018025e9fe7e85216aafd7ba047db71", "patch": "@@ -9,12 +9,34 @@\n // except according to those terms.\n \n /// Creates a `Vec` containing the arguments.\n+///\n+/// `vec!` allows `Vec`s to be defined with the same syntax as array expressions.\n+/// There are two forms of this macro:\n+///\n+/// - Create a `Vec` containing a given list of elements:\n+///\n+/// ```\n+/// let v = vec![1, 2, 3];\n+/// assert_eq!(v[0], 1);\n+/// assert_eq!(v[1], 2);\n+/// assert_eq!(v[2], 3);\n+/// ```\n+///\n+/// - Create a `Vec` from a given element and size:\n+///\n+/// ```\n+/// let v = vec![1; 3];\n+/// assert_eq!(v, vec![1, 1, 1]);\n+/// ```\n+///\n+/// Note that unlike array expressions this syntax supports all elements\n+/// which implement `Clone` and the number of elements doesn't have to be\n+/// a constant.\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! vec {\n-    ($x:expr; $y:expr) => (\n-        <[_] as $crate::slice::SliceExt>::into_vec(\n-            $crate::boxed::Box::new([$x; $y]))\n+    ($elem:expr; $n:expr) => (\n+        $crate::vec::from_elem($elem, $n)\n     );\n     ($($x:expr),*) => (\n         <[_] as $crate::slice::SliceExt>::into_vec("}, {"sha": "dcb63aa19391a479fbafbc352408d6641cb36516", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2bf553c3e018025e9fe7e85216aafd7ba047db71/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf553c3e018025e9fe7e85216aafd7ba047db71/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=2bf553c3e018025e9fe7e85216aafd7ba047db71", "patch": "@@ -1252,6 +1252,30 @@ unsafe fn dealloc<T>(ptr: *mut T, len: usize) {\n     }\n }\n \n+#[doc(hidden)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {\n+    unsafe {\n+        let mut v = Vec::with_capacity(n);\n+        let mut ptr = v.as_mut_ptr();\n+\n+        // Write all elements except the last one\n+        for i in 1..n {\n+            ptr::write(ptr, Clone::clone(&elem));\n+            ptr = ptr.offset(1);\n+            v.set_len(i); // Increment the length in every step in case Clone::clone() panics\n+        }\n+\n+        if n > 0 {\n+            // We can write the last element directly without cloning needlessly\n+            ptr::write(ptr, elem);\n+            v.set_len(n);\n+        }\n+\n+        v\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Common trait implementations for Vec\n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "76e7b92ea046b1ae957db05dae51bd9a77c42bdf", "filename": "src/test/run-pass/vec-macro-repeat.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bf553c3e018025e9fe7e85216aafd7ba047db71/src%2Ftest%2Frun-pass%2Fvec-macro-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf553c3e018025e9fe7e85216aafd7ba047db71/src%2Ftest%2Frun-pass%2Fvec-macro-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-macro-repeat.rs?ref=2bf553c3e018025e9fe7e85216aafd7ba047db71", "patch": "@@ -14,4 +14,9 @@ pub fn main() {\n     assert_eq!(vec![1; 2], vec![1, 1]);\n     assert_eq!(vec![1; 1], vec![1]);\n     assert_eq!(vec![1; 0], vec![]);\n+\n+    // from_elem syntax (see RFC 832)\n+    let el = Box::new(1);\n+    let n = 3;\n+    assert_eq!(vec![el; n], vec![Box::new(1), Box::new(1), Box::new(1)]);\n }"}]}