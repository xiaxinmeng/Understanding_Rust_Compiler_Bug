{"sha": "d65c9a5700454ab2a3bd81dccff610ad13855d14", "node_id": "C_kwDOAAsO6NoAKGQ2NWM5YTU3MDA0NTRhYjJhM2JkODFkY2NmZjYxMGFkMTM4NTVkMTQ", "commit": {"author": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-03-11T20:30:34Z"}, "committer": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-03-11T20:30:34Z"}, "message": "Extend tests + improve description + general improvement", "tree": {"sha": "12ec21738b89051bd2a18d6aaab84819880043c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ec21738b89051bd2a18d6aaab84819880043c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d65c9a5700454ab2a3bd81dccff610ad13855d14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEM3aofraJSaf7CtgpTTgXC1ovwzQFAmQM5OsACgkQTTgXC1ov\nwzQ41RAAkhQef7KBX25quVktSs+nR817f3RxKlQ+ly7zEfeUB9mQwA4E5+OVG8sh\nIXMR1z35lfYPBl+G3MDZ8xa8vNnWvOE2ZJn7yZeDHxORiE2rsmXo6Peu94LIMtHa\nUeFrSmdy0s3DhXsQOXadeZAczeQaOERr1x0DOFl+QpiDhcryFyCBhPRwqkTSG2Q/\nXQqt50GtZSoABCXIpQZaqU8oB+g18+v0fThtyhU127LjnE9gq1LSdl5DUkX8u/Ab\nCooxRQXqiUM+oY0zfzktigEhDWg1aD+T8Yd7rVc9u3rvToPIKxFk9sstRAdi35In\n4MCS48kYVnMYbkXxE9T6ZZ18PMnw4XKQMpZosUDaAGxT+kfXlrPZ64Qifrb/P9Ky\nS/OFozSZ32r2T9naIW28KETwPha8blHEjkJjohQNBs7pDolw9nz2FKnUqTvyKy/E\n3BOE4fch/6hVp/jOvGm6d7HrRvKlJxe9t9HQ+L7F9GcixnX5KiXw//KMRwSjnz8d\nbSp7UOIhxdXvMF+n6f4clQAs3yoJDhucXd9r0E6I77w52nFUXZEHrtQVtEBIS6dp\nDDU2AYeRRaJt9AE64/kP//LPYjtt7ZElljnOJH0MvkSRWCKnUakgRnuFFDNnFssg\nanSsPcw4zCzZDasXDXF1wsoxt765t66J0v22r+1FdNit2k3mKpg=\n=ta9g\n-----END PGP SIGNATURE-----", "payload": "tree 12ec21738b89051bd2a18d6aaab84819880043c9\nparent 2d572d4a9c20a11a3aa75a7fdd9168cc95c60d4c\nauthor blyxyas <blyxyas@gmail.com> 1678566634 +0100\ncommitter blyxyas <blyxyas@gmail.com> 1678566634 +0100\n\nExtend tests + improve description + general improvement\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d65c9a5700454ab2a3bd81dccff610ad13855d14", "html_url": "https://github.com/rust-lang/rust/commit/d65c9a5700454ab2a3bd81dccff610ad13855d14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d65c9a5700454ab2a3bd81dccff610ad13855d14/comments", "author": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d572d4a9c20a11a3aa75a7fdd9168cc95c60d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d572d4a9c20a11a3aa75a7fdd9168cc95c60d4c", "html_url": "https://github.com/rust-lang/rust/commit/2d572d4a9c20a11a3aa75a7fdd9168cc95c60d4c"}], "stats": {"total": 116, "additions": 59, "deletions": 57}, "files": [{"sha": "28fc45d0554b8252e5ecd8014a4a33b5dbd834fb", "filename": "clippy_lints/src/allow_attribute.rs", "status": "modified", "additions": 35, "deletions": 49, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d65c9a5700454ab2a3bd81dccff610ad13855d14/clippy_lints%2Fsrc%2Fallow_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65c9a5700454ab2a3bd81dccff610ad13855d14/clippy_lints%2Fsrc%2Fallow_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fallow_attribute.rs?ref=d65c9a5700454ab2a3bd81dccff610ad13855d14", "patch": "@@ -1,16 +1,27 @@\n-use ast::{AttrStyle, MetaItemKind};\n-use clippy_utils::{diagnostics::span_lint_and_sugg, source::snippet};\n+use ast::AttrStyle;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{symbol::Ident, BytePos};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// ### What it does\n-    /// Detects uses of the `#[allow]` attribute and suggests to replace it with the new `#[expect]` attribute implemented by `#![feature(lint_reasons)]` ([RFC 2383](https://rust-lang.github.io/rfcs/2383-lint-reasons.html))\n+        /// Detects uses of the `#[allow]` attribute and suggests replacing it with\n+    /// the `#[expect]` (See [RFC 2383](https://rust-lang.github.io/rfcs/2383-lint-reasons.html))\n+    ///\n+    /// The expect attribute is still unstable and requires the `lint_reasons`\n+    /// on nightly. It can be enabled by adding `#![feature(lint_reasons)]` to\n+    /// the crate root.\n+    ///\n+    /// This lint only warns outer attributes (`#[allow]`), as inner attributes\n+    /// (`#![allow]`) are usually used to enable or disable lints on a global scale.\n+    ///\n     /// ### Why is this bad?\n-    /// Using `#[allow]` isn't bad, but `#[expect]` may be preferred as it lints if the code **doesn't** produce a warning.\n+    ///\n+    /// `#[expect]` attributes suppress the lint emission, but emit a warning, if\n+    /// the expectation is unfulfilled. This can be useful to be notified when the\n+    /// lint is no longer triggered.\n+    ///\n     /// ### Example\n     /// ```rust,ignore\n     /// #[allow(unused_mut)]\n@@ -34,59 +45,34 @@ declare_clippy_lint! {\n     \"`#[allow]` will not trigger if a warning isn't found. `#[expect]` triggers if there are no warnings.\"\n }\n \n-pub struct AllowAttribute {\n-    pub lint_reasons_active: bool,\n-}\n-\n-impl_lint_pass!(AllowAttribute => [ALLOW_ATTRIBUTE]);\n+declare_lint_pass!(AllowAttribute => [ALLOW_ATTRIBUTE]);\n \n impl LateLintPass<'_> for AllowAttribute {\n     // Separate each crate's features.\n-    fn check_crate_post(&mut self, _: &LateContext<'_>) {\n-        self.lint_reasons_active = false;\n-    }\n     fn check_attribute(&mut self, cx: &LateContext<'_>, attr: &ast::Attribute) {\n-        // Check inner attributes\n-\n-        if_chain! {\n-            if let AttrStyle::Inner = attr.style;\n-            if attr.ident()\n-            .unwrap_or(Ident::with_dummy_span(sym!(empty))) // Will not trigger if doesn't have an ident.\n-            .name == sym!(feature);\n-            if let ast::AttrKind::Normal(normal) = &attr.kind;\n-            if let Some(MetaItemKind::List(list)) = normal.item.meta_kind();\n-            if let Some(symbol) = list.get(0);\n-            if symbol.ident().unwrap().name == sym!(lint_reasons);\n-            then {\n-                self.lint_reasons_active = true;\n-            }\n-        }\n-\n-        // Check outer attributes\n-\n         if_chain! {\n+            if cx.tcx.features().lint_reasons;\n             if let AttrStyle::Outer = attr.style;\n-            if attr.ident()\n-            .unwrap_or(Ident::with_dummy_span(sym!(empty))) // Will not trigger if doesn't have an ident.\n-            .name == sym!(allow);\n-            if self.lint_reasons_active;\n+            if let Some(ident) = attr.ident();\n+            if ident.name == rustc_span::symbol::sym::allow;\n             then {\n                 span_lint_and_sugg(\n                     cx,\n                     ALLOW_ATTRIBUTE,\n-                    attr.span,\n+                    ident.span,\n                     \"#[allow] attribute found\",\n-                    \"replace it with\",\n-                    format!(\"#[expect{})]\", snippet(\n-                        cx,\n-                        attr.ident().unwrap().span\n-                        .with_lo(\n-                            attr.ident().unwrap().span.hi() + BytePos(2) // Cut [(\n-                        )\n-                        .with_hi(\n-                            attr.meta().unwrap().span.hi() - BytePos(2) // Cut )]\n-                        )\n-                        , \"...\")), Applicability::MachineApplicable);\n+                    \"replace it with\", \"expect\".into()\n+                    // format!(\"expect{}\", snippet(\n+                    //     cx,\n+                    //     ident.span\n+                    //     .with_lo(\n+                    //         ident.span.hi() + BytePos(2) // Cut *(\n+                    //     )\n+                    //     .with_hi(\n+                    //         attr.meta().unwrap().span.hi() - BytePos(1) // Cut )\n+                    //     )\n+                    //     , \"...\"))\n+                    , Applicability::MachineApplicable);\n             }\n         }\n     }"}, {"sha": "a3c65a69c9988888347cda45fbe92f2574f6a9e3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d65c9a5700454ab2a3bd81dccff610ad13855d14/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65c9a5700454ab2a3bd81dccff610ad13855d14/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d65c9a5700454ab2a3bd81dccff610ad13855d14", "patch": "@@ -934,11 +934,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(missing_assert_message::MissingAssertMessage));\n     store.register_early_pass(|| Box::new(redundant_async_block::RedundantAsyncBlock));\n     store.register_late_pass(|_| Box::new(let_with_type_underscore::UnderscoreTyped));\n-    store.register_late_pass(|_| {\n-        Box::new(allow_attribute::AllowAttribute {\n-            lint_reasons_active: false,\n-        })\n-    });\n+    store.register_late_pass(|_| Box::new(allow_attribute::AllowAttribute));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "01759ced09d45eaee2c45aadb5d95be74d3be08e", "filename": "tests/ui/allow_attribute.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d65c9a5700454ab2a3bd81dccff610ad13855d14/tests%2Fui%2Fallow_attribute.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d65c9a5700454ab2a3bd81dccff610ad13855d14/tests%2Fui%2Fallow_attribute.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallow_attribute.fixed?ref=d65c9a5700454ab2a3bd81dccff610ad13855d14", "patch": "@@ -16,3 +16,10 @@ struct T2; // Should not lint\n struct T3;\n #[warn(clippy::needless_borrow)] // Should not lint\n struct T4;\n+// `panic = \"unwind\"` should always be true\n+#[cfg_attr(panic = \"unwind\", expect(dead_code))]\n+struct CfgT;\n+\n+fn ignore_inner_attr() {\n+    #![allow(unused)] // Should not lint\n+}"}, {"sha": "b8e341fe9e4fbcf54f8856b97ed4cbe612f3d0a7", "filename": "tests/ui/allow_attribute.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d65c9a5700454ab2a3bd81dccff610ad13855d14/tests%2Fui%2Fallow_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65c9a5700454ab2a3bd81dccff610ad13855d14/tests%2Fui%2Fallow_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallow_attribute.rs?ref=d65c9a5700454ab2a3bd81dccff610ad13855d14", "patch": "@@ -16,3 +16,10 @@ struct T2; // Should not lint\n struct T3;\n #[warn(clippy::needless_borrow)] // Should not lint\n struct T4;\n+// `panic = \"unwind\"` should always be true\n+#[cfg_attr(panic = \"unwind\", allow(dead_code))]\n+struct CfgT;\n+\n+fn ignore_inner_attr() {\n+    #![allow(unused)] // Should not lint\n+}"}, {"sha": "58b7323b0681e05cba91410af34fa91b7c62fe31", "filename": "tests/ui/allow_attribute.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d65c9a5700454ab2a3bd81dccff610ad13855d14/tests%2Fui%2Fallow_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d65c9a5700454ab2a3bd81dccff610ad13855d14/tests%2Fui%2Fallow_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallow_attribute.stderr?ref=d65c9a5700454ab2a3bd81dccff610ad13855d14", "patch": "@@ -1,10 +1,16 @@\n error: #[allow] attribute found\n-  --> $DIR/allow_attribute.rs:11:1\n+  --> $DIR/allow_attribute.rs:11:3\n    |\n LL | #[allow(dead_code)]\n-   | ^^^^^^^^^^^^^^^^^^^ help: replace it with: `#[expect(dead_code)]`\n+   |   ^^^^^ help: replace it with: `expect`\n    |\n    = note: `-D clippy::allow-attribute` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: #[allow] attribute found\n+  --> $DIR/allow_attribute.rs:20:30\n+   |\n+LL | #[cfg_attr(panic = \"unwind\", allow(dead_code))]\n+   |                              ^^^^^ help: replace it with: `expect`\n+\n+error: aborting due to 2 previous errors\n "}]}