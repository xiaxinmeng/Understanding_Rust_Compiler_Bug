{"sha": "13d4f27c829a332f50a2109647f3b16bce119b8d", "node_id": "C_kwDOAAsO6NoAKDEzZDRmMjdjODI5YTMzMmY1MGEyMTA5NjQ3ZjNiMTZiY2UxMTliOGQ", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-10-04T17:21:22Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-10-07T14:03:45Z"}, "message": "ADD - implement IntoDiagnostic for thorin::Error wrapper", "tree": {"sha": "f9164760b4b67fb02a8bb0332401ca7738c62603", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9164760b4b67fb02a8bb0332401ca7738c62603"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13d4f27c829a332f50a2109647f3b16bce119b8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13d4f27c829a332f50a2109647f3b16bce119b8d", "html_url": "https://github.com/rust-lang/rust/commit/13d4f27c829a332f50a2109647f3b16bce119b8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13d4f27c829a332f50a2109647f3b16bce119b8d/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a25f939170bb73d813c5eb4cbed631253ba0cc15", "url": "https://api.github.com/repos/rust-lang/rust/commits/a25f939170bb73d813c5eb4cbed631253ba0cc15", "html_url": "https://github.com/rust-lang/rust/commit/a25f939170bb73d813c5eb4cbed631253ba0cc15"}], "stats": {"total": 284, "additions": 269, "deletions": 15}, "files": [{"sha": "95e72184ff037c94cbe87266d0e2bd800e3365da", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13d4f27c829a332f50a2109647f3b16bce119b8d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d4f27c829a332f50a2109647f3b16bce119b8d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=13d4f27c829a332f50a2109647f3b16bce119b8d", "patch": "@@ -662,8 +662,7 @@ fn link_dwarf_object<'a>(\n     }) {\n         Ok(()) => {}\n         Err(e) => {\n-            let thorin_error = errors::ThorinErrorWrapper(e);\n-            sess.emit_err(errors::ThorinDwarfLinking { thorin_error });\n+            sess.emit_err(errors::ThorinErrorWrapper(e));\n             sess.abort_if_errors();\n         }\n     }"}, {"sha": "0ffe887202261f00196e8496d65a72b3b343e4c3", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 192, "deletions": 10, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/13d4f27c829a332f50a2109647f3b16bce119b8d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d4f27c829a332f50a2109647f3b16bce119b8d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=13d4f27c829a332f50a2109647f3b16bce119b8d", "patch": "@@ -129,18 +129,200 @@ pub enum LinkRlibError {\n     NotFound { crate_name: Symbol },\n }\n \n-#[derive(Diagnostic)]\n-#[diag(codegen_ssa::thorin_dwarf_linking)]\n-#[note]\n-pub struct ThorinDwarfLinking {\n-    pub thorin_error: ThorinErrorWrapper,\n-}\n pub struct ThorinErrorWrapper(pub thorin::Error);\n \n-// FIXME: How should we support translations for external crate errors?\n-impl IntoDiagnosticArg for ThorinErrorWrapper {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(format!(\"{:?}\", self.0)))\n+impl IntoDiagnostic<'_> for ThorinErrorWrapper {\n+    fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag;\n+        match self.0 {\n+            thorin::Error::ReadInput(_) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_read_input_failure);\n+                diag\n+            }\n+            thorin::Error::ParseFileKind(_) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_parse_input_file_kind);\n+                diag\n+            }\n+            thorin::Error::ParseObjectFile(_) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_parse_input_object_file);\n+                diag\n+            }\n+            thorin::Error::ParseArchiveFile(_) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_parse_input_archive_file);\n+                diag\n+            }\n+            thorin::Error::ParseArchiveMember(_) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_parse_archive_member);\n+                diag\n+            }\n+            thorin::Error::InvalidInputKind => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_invalid_input_kind);\n+                diag\n+            }\n+            thorin::Error::DecompressData(_) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_decompress_data);\n+                diag\n+            }\n+            thorin::Error::NamelessSection(_, offset) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_section_without_name);\n+                diag.set_arg(\"offset\", format!(\"0x{:08x}\", offset));\n+                diag\n+            }\n+            thorin::Error::RelocationWithInvalidSymbol(section, offset) => {\n+                diag =\n+                    handler.struct_err(fluent::codegen_ssa::thorin_relocation_with_invalid_symbol);\n+                diag.set_arg(\"section\", section);\n+                diag.set_arg(\"offset\", format!(\"0x{:08x}\", offset));\n+                diag\n+            }\n+            thorin::Error::MultipleRelocations(section, offset) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_multiple_relocations);\n+                diag.set_arg(\"section\", section);\n+                diag.set_arg(\"offset\", format!(\"0x{:08x}\", offset));\n+                diag\n+            }\n+            thorin::Error::UnsupportedRelocation(section, offset) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_unsupported_relocation);\n+                diag.set_arg(\"section\", section);\n+                diag.set_arg(\"offset\", format!(\"0x{:08x}\", offset));\n+                diag\n+            }\n+            thorin::Error::MissingDwoName(id) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_missing_dwo_name);\n+                diag.set_arg(\"id\", format!(\"0x{:08x}\", id));\n+                diag\n+            }\n+            thorin::Error::NoCompilationUnits => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_no_compilation_units);\n+                diag\n+            }\n+            thorin::Error::NoDie => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_no_die);\n+                diag\n+            }\n+            thorin::Error::TopLevelDieNotUnit => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_top_level_die_not_unit);\n+                diag\n+            }\n+            thorin::Error::MissingRequiredSection(section) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_missing_required_section);\n+                diag.set_arg(\"section\", section);\n+                diag\n+            }\n+            thorin::Error::ParseUnitAbbreviations(_) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_parse_unit_abbreviations);\n+                diag\n+            }\n+            thorin::Error::ParseUnitAttribute(_) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_parse_unit_attribute);\n+                diag\n+            }\n+            thorin::Error::ParseUnitHeader(_) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_parse_unit_header);\n+                diag\n+            }\n+            thorin::Error::ParseUnit(_) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_parse_unit);\n+                diag\n+            }\n+            thorin::Error::IncompatibleIndexVersion(section, format, actual) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_incompatible_index_version);\n+                diag.set_arg(\"section\", section);\n+                diag.set_arg(\"actual\", actual);\n+                diag.set_arg(\"format\", format);\n+                diag\n+            }\n+            thorin::Error::OffsetAtIndex(_, index) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_offset_at_index);\n+                diag.set_arg(\"index\", index);\n+                diag\n+            }\n+            thorin::Error::StrAtOffset(_, offset) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_str_at_offset);\n+                diag.set_arg(\"offset\", format!(\"0x{:08x}\", offset));\n+                diag\n+            }\n+            thorin::Error::ParseIndex(_, section) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_parse_index);\n+                diag.set_arg(\"section\", section);\n+                diag\n+            }\n+            thorin::Error::UnitNotInIndex(unit) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_unit_not_in_index);\n+                diag.set_arg(\"unit\", format!(\"0x{:08x}\", unit));\n+                diag\n+            }\n+            thorin::Error::RowNotInIndex(_, row) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_row_not_in_index);\n+                diag.set_arg(\"row\", row);\n+                diag\n+            }\n+            thorin::Error::SectionNotInRow => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_section_not_in_row);\n+                diag\n+            }\n+            thorin::Error::EmptyUnit(unit) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_empty_unit);\n+                diag.set_arg(\"unit\", format!(\"0x{:08x}\", unit));\n+                diag\n+            }\n+            thorin::Error::MultipleDebugInfoSection => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_multiple_debug_info_section);\n+                diag\n+            }\n+            thorin::Error::MultipleDebugTypesSection => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_multiple_debug_types_section);\n+                diag\n+            }\n+            thorin::Error::NotSplitUnit => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_not_split_unit);\n+                diag\n+            }\n+            thorin::Error::DuplicateUnit(unit) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_duplicate_unit);\n+                diag.set_arg(\"unit\", format!(\"0x{:08x}\", unit));\n+                diag\n+            }\n+            thorin::Error::MissingReferencedUnit(unit) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_missing_referenced_unit);\n+                diag.set_arg(\"unit\", format!(\"0x{:08x}\", unit));\n+                diag\n+            }\n+            thorin::Error::NoOutputObjectCreated => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_not_output_object_created);\n+                diag\n+            }\n+            thorin::Error::MixedInputEncodings => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_mixed_input_encodings);\n+                diag\n+            }\n+            thorin::Error::Io(e) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_io);\n+                diag.set_arg(\"error\", format!(\"{e}\"));\n+                diag\n+            }\n+            thorin::Error::ObjectRead(e) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_object_read);\n+                diag.set_arg(\"error\", format!(\"{e}\"));\n+                diag\n+            }\n+            thorin::Error::ObjectWrite(e) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_object_write);\n+                diag.set_arg(\"error\", format!(\"{e}\"));\n+                diag\n+            }\n+            thorin::Error::GimliRead(e) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_gimli_read);\n+                diag.set_arg(\"error\", format!(\"{e}\"));\n+                diag\n+            }\n+            thorin::Error::GimliWrite(e) => {\n+                diag = handler.struct_err(fluent::codegen_ssa::thorin_gimli_write);\n+                diag.set_arg(\"error\", format!(\"{e}\"));\n+                diag\n+            }\n+            _ => unimplemented!(\"Untranslated thorin error\"),\n+        }\n     }\n }\n "}, {"sha": "0d0388a039e2d01a4cd2054eea6314a331fa8acc", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 76, "deletions": 3, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/13d4f27c829a332f50a2109647f3b16bce119b8d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/13d4f27c829a332f50a2109647f3b16bce119b8d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=13d4f27c829a332f50a2109647f3b16bce119b8d", "patch": "@@ -34,13 +34,86 @@ codegen_ssa_rlib_only_rmeta_found = could not find rlib for: `{$crate_name}`, fo\n \n codegen_ssa_rlib_not_found = could not find rlib for: `{$crate_name}`\n \n-codegen_ssa_thorin_dwarf_linking = linking dwarf objects with thorin failed\n-    .note = {$thorin_error}\n-\n codegen_ssa_linking_failed = linking with `{$linker_path}` failed: {$exit_status}\n \n codegen_ssa_extern_funcs_not_found = some `extern` functions couldn't be found; some native libraries may need to be installed or have their path specified\n \n codegen_ssa_specify_libraries_to_link = use the `-l` flag to specify native libraries to link\n \n codegen_ssa_use_cargo_directive = use the `cargo:rustc-link-lib` directive to specify the native libraries to link with Cargo (see https://doc.rust-lang.org/cargo/reference/build-scripts.html#cargorustc-link-libkindname)\n+\n+codegen_ssa_thorin_read_input_failure = failed to read input file\n+\n+codegen_ssa_thorin_parse_input_file_kind = failed to parse input file kind\n+\n+codegen_ssa_thorin_parse_input_object_file = failed to parse input object file\n+\n+codegen_ssa_thorin_parse_input_archive_file = failed to parse input archive file\n+\n+codegen_ssa_thorin_parse_archive_member = failed to parse archive member\n+\n+codegen_ssa_thorin_invalid_input_kind = input is not an archive or elf object\n+\n+codegen_ssa_thorin_decompress_data = failed to decompress compressed section\n+\n+codegen_ssa_thorin_section_without_name = section without name at offset {$offset}\n+\n+codegen_ssa_thorin_relocation_with_invalid_symbol = relocation with invalid symbol for section `{$section}` at offset {$offset}\n+\n+codegen_ssa_thorin_multiple_relocations = multiple relocations for section `{$section}` at offset {$offset}\n+\n+codegen_ssa_thorin_unsupported_relocation = unsupported relocation for section {$section} at offset {$offset}\n+\n+codegen_ssa_thorin_missing_dwo_name = missing path attribute to DWARF object ({$id})\n+\n+codegen_ssa_thorin_no_compilation_units = input object has no compilation units\n+\n+codegen_ssa_thorin_no_die = no top-level debugging information entry in compilation/type unit\n+\n+codegen_ssa_thorin_top_level_die_not_unit = top-level debugging information entry is not a compilation/type unit\n+\n+codegen_ssa_thorin_missing_required_section = input object missing required section `{$section}`\n+\n+codegen_ssa_thorin_parse_unit_abbreviations = failed to parse unit abbreviations\n+\n+codegen_ssa_thorin_parse_unit_attribute = failed to parse unit attribute\n+\n+codegen_ssa_thorin_parse_unit_header = failed to parse unit header\n+\n+codegen_ssa_thorin_parse_unit = failed to parse unit\n+\n+codegen_ssa_thorin_incompatible_index_version = incompatible `{$section}` index version: found version {$actual}, expected version {$format}\n+\n+codegen_ssa_thorin_offset_at_index = read offset at index {$index} of `.debug_str_offsets.dwo` section\n+\n+codegen_ssa_thorin_str_at_offset = read string at offset {$offset} of `.debug_str.dwo` section\n+\n+codegen_ssa_thorin_parse_index = failed to parse `{$section}` index section\n+\n+codegen_ssa_thorin_unit_not_in_index = unit {$unit} from input package is not in its index\n+\n+codegen_ssa_thorin_row_not_in_index = row {$row} found in index's hash table not present in index\n+\n+codegen_ssa_thorin_section_not_in_row = section not found in unit's row in index\n+\n+codegen_ssa_thorin_empty_unit = unit {$unit} in input DWARF object with no data\n+\n+codegen_ssa_thorin_multiple_debug_info_section = multiple `.debug_info.dwo` sections\n+\n+codegen_ssa_thorin_multiple_debug_types_section = multiple `.debug_types.dwo` sections in a package\n+\n+codegen_ssa_thorin_not_split_unit = regular compilation unit in object (missing dwo identifier)\n+\n+codegen_ssa_thorin_duplicate_unit = duplicate split compilation unit ({$unit})\n+\n+codegen_ssa_thorin_missing_referenced_unit = unit {$unit} referenced by executable was not found\n+\n+codegen_ssa_thorin_not_output_object_created = no output object was created from inputs\n+\n+codegen_ssa_thorin_mixed_input_encodings = input objects haved mixed encodings\n+\n+codegen_ssa_thorin_io = {$error}\n+codegen_ssa_thorin_object_read = {$error}\n+codegen_ssa_thorin_object_write = {$error}\n+codegen_ssa_thorin_gimli_read = {$error}\n+codegen_ssa_thorin_gimli_write = {$error}"}]}