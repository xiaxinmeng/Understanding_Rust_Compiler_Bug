{"sha": "73936ab57ad567802a613157ae9db0cccf31eda3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOTM2YWI1N2FkNTY3ODAyYTYxMzE1N2FlOWRiMGNjY2YzMWVkYTM=", "commit": {"author": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2020-02-07T01:03:54Z"}, "committer": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2020-02-07T15:18:07Z"}, "message": "print generic bounds on associated types", "tree": {"sha": "743c8519dfb87bf40e6564c74ebc2189f7b3ad44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/743c8519dfb87bf40e6564c74ebc2189f7b3ad44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73936ab57ad567802a613157ae9db0cccf31eda3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73936ab57ad567802a613157ae9db0cccf31eda3", "html_url": "https://github.com/rust-lang/rust/commit/73936ab57ad567802a613157ae9db0cccf31eda3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73936ab57ad567802a613157ae9db0cccf31eda3/comments", "author": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5e21dbb5cabdaaadc47a4d8e3f59979dcad2871", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e21dbb5cabdaaadc47a4d8e3f59979dcad2871", "html_url": "https://github.com/rust-lang/rust/commit/b5e21dbb5cabdaaadc47a4d8e3f59979dcad2871"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "78bf149f0e01a4c569196aa21ee6952594a3963d", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73936ab57ad567802a613157ae9db0cccf31eda3/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73936ab57ad567802a613157ae9db0cccf31eda3/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=73936ab57ad567802a613157ae9db0cccf31eda3", "patch": "@@ -1074,12 +1074,15 @@ impl<'a> State<'a> {\n     fn print_associated_type(\n         &mut self,\n         ident: ast::Ident,\n+        generics: &ast::Generics,\n         bounds: &ast::GenericBounds,\n         ty: Option<&ast::Ty>,\n     ) {\n         self.word_space(\"type\");\n         self.print_ident(ident);\n+        self.print_generic_params(&generics.params);\n         self.print_type_bounds(\":\", bounds);\n+        self.print_where_clause(&generics.where_clause);\n         if let Some(ty) = ty {\n             self.s.space();\n             self.word_space(\"=\");\n@@ -1474,7 +1477,7 @@ impl<'a> State<'a> {\n                 self.print_fn_full(sig, item.ident, &item.generics, &item.vis, body, &item.attrs);\n             }\n             ast::AssocItemKind::TyAlias(bounds, ty) => {\n-                self.print_associated_type(item.ident, bounds, ty.as_deref());\n+                self.print_associated_type(item.ident, &item.generics, bounds, ty.as_deref());\n             }\n             ast::AssocItemKind::Macro(mac) => {\n                 self.print_mac(mac);"}]}