{"sha": "0487663e7d9d7b542a66299dee64204f8c96689c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ODc2NjNlN2Q5ZDdiNTQyYTY2Mjk5ZGVlNjQyMDRmOGM5NjY4OWM=", "commit": {"author": {"name": "Tim Chevalier", "email": "catamorphism@gmail.com", "date": "2012-07-16T21:37:16Z"}, "committer": {"name": "Tim Chevalier", "email": "catamorphism@gmail.com", "date": "2012-07-16T21:37:16Z"}, "message": "Merge pull request #2929 from Dretch/tuplemethods\n\nreplace core::tuple functions with methods", "tree": {"sha": "87ea641c6db6a0477197250e4e73c117fea13399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ea641c6db6a0477197250e4e73c117fea13399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0487663e7d9d7b542a66299dee64204f8c96689c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0487663e7d9d7b542a66299dee64204f8c96689c", "html_url": "https://github.com/rust-lang/rust/commit/0487663e7d9d7b542a66299dee64204f8c96689c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0487663e7d9d7b542a66299dee64204f8c96689c/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000d12f4aff47528a44a7cd8d8a26b644ac91cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/000d12f4aff47528a44a7cd8d8a26b644ac91cb0", "html_url": "https://github.com/rust-lang/rust/commit/000d12f4aff47528a44a7cd8d8a26b644ac91cb0"}, {"sha": "fe43d6661387383db067c711e624a77df30004a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe43d6661387383db067c711e624a77df30004a2", "html_url": "https://github.com/rust-lang/rust/commit/fe43d6661387383db067c711e624a77df30004a2"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "c70be013fb74d80f42977de31c028fd5fe558b5c", "filename": "src/libcore/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=0487663e7d9d7b542a66299dee64204f8c96689c", "patch": "@@ -6,6 +6,7 @@ import option::{some, none};\n import option = option::option;\n import path = path::path;\n import str::extensions;\n+import tuple::extensions;\n import vec::extensions;\n import option::extensions;\n import option_iter::extensions;"}, {"sha": "0efc15cda2ad4d8523525467c8dc37638247404c", "filename": "src/libcore/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=0487663e7d9d7b542a66299dee64204f8c96689c", "patch": "@@ -878,7 +878,7 @@ unsafe fn key_to_key_value<T>(key: local_data_key<T>) -> *libc::c_void {\n     // Keys are closures, which are (fnptr,envptr) pairs. Use fnptr.\n     // Use reintepret_cast -- transmute would leak (forget) the closure.\n     let pair: (*libc::c_void, *libc::c_void) = unsafe::reinterpret_cast(key);\n-    tuple::first(pair)\n+    pair.first()\n }\n \n // If returning some(..), returns with @T with the map's reference. Careful!"}, {"sha": "0724d01afaf495f9971b195576073b65da8123c8", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=0487663e7d9d7b542a66299dee64204f8c96689c", "patch": "@@ -1,28 +1,33 @@\n //! Operations on tuples\n \n-/// Return the first element of a pair\n-pure fn first<T:copy, U:copy>(pair: (T, U)) -> T {\n-    let (t, _) = pair;\n-    ret t;\n-}\n \n-/// Return the second element of a pair\n-pure fn second<T:copy, U:copy>(pair: (T, U)) -> U {\n-    let (_, u) = pair;\n-    ret u;\n-}\n+impl extensions <T:copy, U:copy> for (T, U) {\n+\n+    /// Return the first element of self\n+    pure fn first() -> T {\n+        let (t, _) = self;\n+        ret t;\n+    }\n+\n+    /// Return the second element of self\n+    pure fn second() -> U {\n+        let (_, u) = self;\n+        ret u;\n+    }\n+\n+    /// Return the results of swapping the two elements of self\n+    pure fn swap() -> (U, T) {\n+        let (t, u) = self;\n+        ret (u, t);\n+    }\n \n-/// Return the results of swapping the two elements of a pair\n-pure fn swap<T:copy, U:copy>(pair: (T, U)) -> (U, T) {\n-    let (t, u) = pair;\n-    ret (u, t);\n }\n \n \n #[test]\n fn test_tuple() {\n-    assert first((948, 4039.48)) == 948;\n-    assert second((34.5, ~\"foo\")) == ~\"foo\";\n-    assert swap(('a', 2)) == (2, 'a');\n+    assert (948, 4039.48).first() == 948;\n+    assert (34.5, ~\"foo\").second() == ~\"foo\";\n+    assert ('a', 2).swap() == (2, 'a');\n }\n "}, {"sha": "6558e14c84dfb39a15db74cc27af506996f6be31", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=0487663e7d9d7b542a66299dee64204f8c96689c", "patch": "@@ -22,8 +22,8 @@ fn merge_sort<T: copy>(le: le<T>, v: ~[const T]) -> ~[T] {\n \n     fn merge_sort_<T: copy>(le: le<T>, v: ~[const T], slice: slice)\n         -> ~[T] {\n-        let begin = tuple::first(slice);\n-        let end = tuple::second(slice);\n+        let begin = slice.first();\n+        let end = slice.second();\n \n         let v_len = end - begin;\n         if v_len == 0u { ret ~[]; }"}, {"sha": "edec940417f84454fa59a4133077129b5430bad2", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=0487663e7d9d7b542a66299dee64204f8c96689c", "patch": "@@ -229,8 +229,8 @@ fn merge_method_attrs(\n     };\n \n     do vec::map2(docs, attrs) |doc, attrs| {\n-        assert doc.name == tuple::first(attrs);\n-        let desc = tuple::second(attrs);\n+        assert doc.name == attrs.first();\n+        let desc = attrs.second();\n \n         {\n             desc: desc"}, {"sha": "f6be9dd7b5461dadc7cb860169df2371f5ce1e10", "filename": "src/rustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Frustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Frustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fconfig.rs?ref=0487663e7d9d7b542a66299dee64204f8c96689c", "patch": "@@ -62,7 +62,7 @@ fn usage() {\n     println(~\"Usage: rustdoc ~[options] <cratefile>\\n\");\n     println(~\"Options:\\n\");\n     for opts().each |opt| {\n-        println(#fmt(\"    %s\", tuple::second(opt)));\n+        println(#fmt(\"    %s\", opt.second()));\n     }\n     println(~\"\");\n }\n@@ -99,7 +99,7 @@ fn parse_config_(\n     program_output: program_output\n ) -> result<config, ~str> {\n     let args = vec::tail(args);\n-    let opts = tuple::first(vec::unzip(opts()));\n+    let opts = vec::unzip(opts()).first();\n     alt getopts::getopts(args, opts) {\n         result::ok(match) {\n             if vec::len(match.free) == 1u {"}, {"sha": "64b6f9ab1f6f4cc0042af2ea50ee3511ba08aa8e", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=0487663e7d9d7b542a66299dee64204f8c96689c", "patch": "@@ -801,7 +801,7 @@ mod test {\n     ) -> ~str {\n         let (writer_factory, po) = markdown_writer::future_writer_factory();\n         write_markdown(doc, writer_factory);\n-        ret tuple::second(comm::recv(po));\n+        ret comm::recv(po).second();\n     }\n \n     fn write_markdown_str_srv(\n@@ -811,7 +811,7 @@ mod test {\n         let (writer_factory, po) = markdown_writer::future_writer_factory();\n         let pass = mk_pass(writer_factory);\n         pass.f(srv, doc);\n-        ret tuple::second(comm::recv(po));\n+        ret comm::recv(po).second();\n     }\n \n     #[test]"}, {"sha": "64959988eb3318433e31c4bf595b4ed02420fe64", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487663e7d9d7b542a66299dee64204f8c96689c/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=0487663e7d9d7b542a66299dee64204f8c96689c", "patch": "@@ -2,7 +2,6 @@\n \n use std;\n \n-import tuple::{first, second};\n import std::list::{list, cons, nil};\n import std::time::precise_time_s;\n \n@@ -75,8 +74,8 @@ fn recurse_or_fail(depth: int, st: option<st>) {\n                 unique: ~cons((), @*st.unique),\n                 fn_box: fn@() -> @nillist { @cons((), fn_box()) },\n                 fn_unique: fn~() -> ~nillist { ~cons((), @*fn_unique()) },\n-                tuple: (@cons((), first(st.tuple)),\n-                        ~cons((), @*second(st.tuple))),\n+                tuple: (@cons((), st.tuple.first()),\n+                        ~cons((), @*st.tuple.second())),\n                 vec: st.vec + ~[@cons((), st.vec.last())],\n                 res: r(@cons((), st.res._l))\n             })"}]}