{"sha": "428f063fcdc35e048ff79d059a8963334ba2281c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOGYwNjNmY2RjMzVlMDQ4ZmY3OWQwNTlhODk2MzMzNGJhMjI4MWM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-03-03T17:11:04Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-03-04T18:38:26Z"}, "message": "Automate timestamp creation and build skipping for native libraries\n\nAdd comments", "tree": {"sha": "ef19c01e9179f6d455cc6c6a7b3a0cbf316f3119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef19c01e9179f6d455cc6c6a7b3a0cbf316f3119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/428f063fcdc35e048ff79d059a8963334ba2281c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/428f063fcdc35e048ff79d059a8963334ba2281c", "html_url": "https://github.com/rust-lang/rust/commit/428f063fcdc35e048ff79d059a8963334ba2281c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/428f063fcdc35e048ff79d059a8963334ba2281c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c652a4fb566ac4bec1d62c66769dd055ad239df6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c652a4fb566ac4bec1d62c66769dd055ad239df6", "html_url": "https://github.com/rust-lang/rust/commit/c652a4fb566ac4bec1d62c66769dd055ad239df6"}], "stats": {"total": 136, "additions": 56, "deletions": 80}, "files": [{"sha": "f4174693a5771872cef659c99a00c2272e5b268e", "filename": "src/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/428f063fcdc35e048ff79d059a8963334ba2281c/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/428f063fcdc35e048ff79d059a8963334ba2281c/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=428f063fcdc35e048ff79d059a8963334ba2281c", "patch": "@@ -487,7 +487,7 @@ name = \"libgit2-sys\"\n version = \"0.6.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cmake 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl-sys 0.3.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -502,7 +502,7 @@ name = \"libssh2-sys\"\n version = \"0.2.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cmake 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "dffaebbd92914b0a2270037f903ccd3f1675c108", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=428f063fcdc35e048ff79d059a8963334ba2281c", "patch": "@@ -13,6 +13,7 @@\n extern crate filetime;\n \n use std::{fs, env};\n+use std::fs::File;\n use std::process::{Command, Stdio};\n use std::path::{Path, PathBuf};\n \n@@ -166,19 +167,29 @@ pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n     }\n }\n \n+#[must_use]\n pub struct NativeLibBoilerplate {\n-    pub skip_build: bool,\n     pub src_dir: PathBuf,\n     pub out_dir: PathBuf,\n-    pub timestamp: PathBuf,\n }\n \n+impl Drop for NativeLibBoilerplate {\n+    fn drop(&mut self) {\n+        t!(File::create(self.out_dir.join(\"rustbuild.timestamp\")));\n+    }\n+}\n+\n+// Perform standard preparations for native libraries that are build only once for all stages.\n+// Emit rerun-if-changed and linking attributes for Cargo, check if any source files are\n+// updated, calculate paths used later in actual build with CMake/make or C/C++ compiler.\n+// If Err is returned, then everything is up-to-date and further build actions can be skipped.\n+// Timestamps are created automatically when the result of `native_lib_boilerplate` goes out\n+// of scope, so all the build actions should be completed until then.\n pub fn native_lib_boilerplate(src_name: &str,\n                               out_name: &str,\n                               link_name: &str,\n-                              timestamp_name: &str,\n                               search_subdir: &str)\n-                              -> NativeLibBoilerplate {\n+                              -> Result<NativeLibBoilerplate, ()> {\n     let current_dir = PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n     let src_dir = current_dir.join(\"..\").join(src_name);\n     rerun_if_changed_anything_in_dir(&src_dir);\n@@ -189,15 +200,11 @@ pub fn native_lib_boilerplate(src_name: &str,\n     println!(\"cargo:rustc-link-lib=static={}\", link_name);\n     println!(\"cargo:rustc-link-search=native={}\", out_dir.join(search_subdir).display());\n \n-    let timestamp = out_dir.join(timestamp_name);\n-    let skip_build = up_to_date(Path::new(\"build.rs\"), &timestamp) &&\n-                     up_to_date(&src_dir, &timestamp);\n-\n-    NativeLibBoilerplate {\n-        skip_build: skip_build,\n-        src_dir: src_dir,\n-        out_dir: out_dir,\n-        timestamp: timestamp,\n+    let timestamp = out_dir.join(\"rustbuild.timestamp\");\n+    if !up_to_date(Path::new(\"build.rs\"), &timestamp) || !up_to_date(&src_dir, &timestamp) {\n+        Ok(NativeLibBoilerplate { src_dir: src_dir, out_dir: out_dir })\n+    } else {\n+        Err(())\n     }\n }\n "}, {"sha": "ae040a23906595683cc072cf30d7021209349a27", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=428f063fcdc35e048ff79d059a8963334ba2281c", "patch": "@@ -10,12 +10,10 @@\n \n #![deny(warnings)]\n \n-#[macro_use]\n extern crate build_helper;\n extern crate gcc;\n \n use std::env;\n-use std::fs::File;\n use std::path::PathBuf;\n use std::process::Command;\n use build_helper::{run, native_lib_boilerplate};\n@@ -60,11 +58,10 @@ fn main() {\n     }\n \n     let link_name = if target.contains(\"windows\") { \"jemalloc\" } else { \"jemalloc_pic\" };\n-    let native = native_lib_boilerplate(\"jemalloc\", \"jemalloc\", link_name,\n-                                        \"rustbuild.timestamp\", \"lib\");\n-    if native.skip_build {\n-        return\n-    }\n+    let native = match native_lib_boilerplate(\"jemalloc\", \"jemalloc\", link_name, \"lib\") {\n+        Ok(native) => native,\n+        _ => return,\n+    };\n \n     let compiler = gcc::Config::new().get_compiler();\n     // only msvc returns None for ar so unwrap is okay\n@@ -175,6 +172,4 @@ fn main() {\n             .file(\"pthread_atfork_dummy.c\")\n             .compile(\"libpthread_atfork_dummy.a\");\n     }\n-\n-    t!(File::create(&native.timestamp));\n }"}, {"sha": "bcd3a92dd430548704981736f5c8fe9ca153c21d", "filename": "src/libcompiler_builtins/build.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Flibcompiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Flibcompiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Fbuild.rs?ref=428f063fcdc35e048ff79d059a8963334ba2281c", "patch": "@@ -82,16 +82,13 @@ fn main() {\n     }\n \n     // Can't reuse `sources` list for the freshness check becuse it doesn't contain header files.\n-    // Use the produced library itself as a timestamp.\n-    let out_name = \"libcompiler-rt.a\";\n-    let native = native_lib_boilerplate(\"compiler-rt\", \"compiler-rt\", \"compiler-rt\",\n-                                        out_name, \".\");\n-    if native.skip_build {\n-        return\n-    }\n+    let native = match native_lib_boilerplate(\"compiler-rt\", \"compiler-rt\", \"compiler-rt\", \".\") {\n+        Ok(native) => native,\n+        _ => return,\n+    };\n \n     let cfg = &mut gcc::Config::new();\n-    cfg.out_dir(native.out_dir);\n+    cfg.out_dir(&native.out_dir);\n \n     if target.contains(\"msvc\") {\n         // Don't pull in extra libraries on MSVC\n@@ -416,5 +413,5 @@ fn main() {\n         cfg.file(Path::new(\"../compiler-rt/lib/builtins\").join(src));\n     }\n \n-    cfg.compile(out_name);\n+    cfg.compile(\"libcompiler-rt.a\");\n }"}, {"sha": "2df2e001e6ff2d75594ac65896cd7e27852ba421", "filename": "src/librustc_asan/build.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=428f063fcdc35e048ff79d059a8963334ba2281c", "patch": "@@ -8,23 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_use]\n extern crate build_helper;\n extern crate cmake;\n \n use std::env;\n-use std::fs::File;\n use build_helper::native_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = native_lib_boilerplate(\"compiler-rt\", \"asan\", \"clang_rt.asan-x86_64\",\n-                                            \"rustbuild.timestamp\", \"build/lib/linux\");\n-        if native.skip_build {\n-            return\n-        }\n+        let native = match native_lib_boilerplate(\"compiler-rt\", \"asan\", \"clang_rt.asan-x86_64\",\n+                                                  \"build/lib/linux\") {\n+            Ok(native) => native,\n+            _ => return,\n+        };\n \n         Config::new(&native.src_dir)\n             .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n@@ -34,7 +32,5 @@ fn main() {\n             .out_dir(&native.out_dir)\n             .build_target(\"asan\")\n             .build();\n-\n-        t!(File::create(&native.timestamp));\n     }\n }"}, {"sha": "005163f41026c39c1a99860cdd523f9f4bb4da7f", "filename": "src/librustc_lsan/build.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=428f063fcdc35e048ff79d059a8963334ba2281c", "patch": "@@ -8,23 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_use]\n extern crate build_helper;\n extern crate cmake;\n \n use std::env;\n-use std::fs::File;\n use build_helper::native_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = native_lib_boilerplate(\"compiler-rt\", \"lsan\", \"clang_rt.lsan-x86_64\",\n-                                            \"rustbuild.timestamp\", \"build/lib/linux\");\n-        if native.skip_build {\n-            return\n-        }\n+        let native = match native_lib_boilerplate(\"compiler-rt\", \"lsan\", \"clang_rt.lsan-x86_64\",\n+                                                  \"build/lib/linux\") {\n+            Ok(native) => native,\n+            _ => return,\n+        };\n \n         Config::new(&native.src_dir)\n             .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n@@ -34,7 +32,5 @@ fn main() {\n             .out_dir(&native.out_dir)\n             .build_target(\"lsan\")\n             .build();\n-\n-        t!(File::create(&native.timestamp));\n     }\n }"}, {"sha": "c438b5250463b8aa4ce446fad1d3f32fbcc8bc1a", "filename": "src/librustc_msan/build.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=428f063fcdc35e048ff79d059a8963334ba2281c", "patch": "@@ -8,23 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_use]\n extern crate build_helper;\n extern crate cmake;\n \n use std::env;\n-use std::fs::File;\n use build_helper::native_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = native_lib_boilerplate(\"compiler-rt\", \"msan\", \"clang_rt.msan-x86_64\",\n-                                            \"rustbuild.timestamp\", \"build/lib/linux\");\n-        if native.skip_build {\n-            return\n-        }\n+        let native = match native_lib_boilerplate(\"compiler-rt\", \"msan\", \"clang_rt.msan-x86_64\",\n+                                                  \"build/lib/linux\") {\n+            Ok(native) => native,\n+            _ => return,\n+        };\n \n         Config::new(&native.src_dir)\n             .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n@@ -34,7 +32,5 @@ fn main() {\n             .out_dir(&native.out_dir)\n             .build_target(\"msan\")\n             .build();\n-\n-        t!(File::create(&native.timestamp));\n     }\n }"}, {"sha": "055b344d2e9479da49ee6bc7533d2152bce9d67a", "filename": "src/librustc_tsan/build.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=428f063fcdc35e048ff79d059a8963334ba2281c", "patch": "@@ -8,23 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_use]\n extern crate build_helper;\n extern crate cmake;\n \n use std::env;\n-use std::fs::File;\n use build_helper::native_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = native_lib_boilerplate(\"compiler-rt\", \"tsan\", \"clang_rt.tsan-x86_64\",\n-                                            \"rustbuild.timestamp\", \"build/lib/linux\");\n-        if native.skip_build {\n-            return\n-        }\n+        let native = match native_lib_boilerplate(\"compiler-rt\", \"tsan\", \"clang_rt.tsan-x86_64\",\n+                                                  \"build/lib/linux\") {\n+            Ok(native) => native,\n+            _ => return,\n+        };\n \n         Config::new(&native.src_dir)\n             .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n@@ -34,7 +32,5 @@ fn main() {\n             .out_dir(&native.out_dir)\n             .build_target(\"tsan\")\n             .build();\n-\n-        t!(File::create(&native.timestamp));\n     }\n }"}, {"sha": "9fb83ad75980aeb399747ff2a8315d5645151c04", "filename": "src/libstd/build.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428f063fcdc35e048ff79d059a8963334ba2281c/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=428f063fcdc35e048ff79d059a8963334ba2281c", "patch": "@@ -10,12 +10,10 @@\n \n #![deny(warnings)]\n \n-#[macro_use]\n extern crate build_helper;\n extern crate gcc;\n \n use std::env;\n-use std::fs::File;\n use std::process::Command;\n use build_helper::{run, native_lib_boilerplate};\n \n@@ -24,7 +22,7 @@ fn main() {\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     if cfg!(feature = \"backtrace\") && !target.contains(\"apple\") && !target.contains(\"msvc\") &&\n         !target.contains(\"emscripten\") && !target.contains(\"fuchsia\") && !target.contains(\"redox\") {\n-        build_libbacktrace(&host, &target);\n+        let _ = build_libbacktrace(&host, &target);\n     }\n \n     if target.contains(\"linux\") {\n@@ -66,12 +64,8 @@ fn main() {\n     }\n }\n \n-fn build_libbacktrace(host: &str, target: &str) {\n-    let native = native_lib_boilerplate(\"libbacktrace\", \"libbacktrace\", \"backtrace\",\n-                                        \"rustbuild.timestamp\", \".libs\");\n-    if native.skip_build {\n-        return\n-    }\n+fn build_libbacktrace(host: &str, target: &str) -> Result<(), ()> {\n+    let native = native_lib_boilerplate(\"libbacktrace\", \"libbacktrace\", \"backtrace\", \".libs\")?;\n \n     let compiler = gcc::Config::new().get_compiler();\n     // only msvc returns None for ar so unwrap is okay\n@@ -99,6 +93,5 @@ fn build_libbacktrace(host: &str, target: &str) {\n                 .current_dir(&native.out_dir)\n                 .arg(format!(\"INCDIR={}\", native.src_dir.display()))\n                 .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n-\n-    t!(File::create(&native.timestamp));\n+    Ok(())\n }"}]}