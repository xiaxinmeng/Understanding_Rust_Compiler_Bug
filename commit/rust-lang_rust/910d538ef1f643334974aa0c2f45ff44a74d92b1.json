{"sha": "910d538ef1f643334974aa0c2f45ff44a74d92b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMGQ1MzhlZjFmNjQzMzM0OTc0YWEwYzJmNDVmZjQ0YTc0ZDkyYjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-25T18:13:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-25T18:13:47Z"}, "message": "Auto merge of #4008 - g-bartoszek:boxed-fnmut, r=phansch\n\nDo not trigger redundant_closure for non-function types\n\nfixes #3898\n\nAdded a check for the entity being called in the closure body to be a FnDef. This way lint does not trigger for ADTs (Box) but I'm not sure if it's correct and not too restrictive.\n\n<!--\nThank you for making Clippy better!\n\nWe're collecting our changelog from pull request descriptions.\nIf your PR only updates to the latest nightly, you can leave the\n`changelog` entry as `none`. Otherwise, please write a short comment\nexplaining your change.\n\nIf your PR fixes an issue, you can add \"fixes #issue_number\" into this\nPR description. This way the issue will be automatically closed when\nyour PR is merged.\n\nIf you added a new lint, here's a checklist for things that will be\nchecked during review or continuous integration.\n\n- [ ] Followed [lint naming conventions][lint_naming]\n- [ ] Added passing UI tests (including committed `.stderr` file)\n- [ ] `cargo test` passes locally\n- [ ] Executed `util/dev update_lints`\n- [ ] Added lint documentation\n- [ ] Run `cargo fmt`\n\nNote that you can skip the above if you are just opening a WIP PR in\norder to get feedback.\n\nDelete this line and everything above before opening your PR -->\n\nchangelog: Fix false positive in `redundant_closure` pertaining to non-function types", "tree": {"sha": "d58d92b9b070eb7bc1eea9e6150293f6618515c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d58d92b9b070eb7bc1eea9e6150293f6618515c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/910d538ef1f643334974aa0c2f45ff44a74d92b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/910d538ef1f643334974aa0c2f45ff44a74d92b1", "html_url": "https://github.com/rust-lang/rust/commit/910d538ef1f643334974aa0c2f45ff44a74d92b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/910d538ef1f643334974aa0c2f45ff44a74d92b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a0105e59f6b07236f894e4f4bdf05a9592d93c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0105e59f6b07236f894e4f4bdf05a9592d93c1", "html_url": "https://github.com/rust-lang/rust/commit/6a0105e59f6b07236f894e4f4bdf05a9592d93c1"}, {"sha": "4f801a278dc4ed68ef209f07fece4d8b8e99fbeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f801a278dc4ed68ef209f07fece4d8b8e99fbeb", "html_url": "https://github.com/rust-lang/rust/commit/4f801a278dc4ed68ef209f07fece4d8b8e99fbeb"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "60e2ab8b9b9fddf6fae3e45e1d3992f0928c7935", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/910d538ef1f643334974aa0c2f45ff44a74d92b1/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910d538ef1f643334974aa0c2f45ff44a74d92b1/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=910d538ef1f643334974aa0c2f45ff44a74d92b1", "patch": "@@ -1,4 +1,5 @@\n use if_chain::if_chain;\n+use matches::matches;\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty::{self, Ty};\n@@ -65,6 +66,9 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr) {\n             if !(is_adjusted(cx, ex) || args.iter().any(|arg| is_adjusted(cx, arg)));\n \n             let fn_ty = cx.tables.expr_ty(caller);\n+\n+            if matches!(fn_ty.sty, ty::FnDef(_, _) | ty::FnPtr(_) | ty::Closure(_, _));\n+\n             if !type_is_unsafe_function(cx, fn_ty);\n \n             if compare_inputs(&mut iter_input_pats(decl, body), &mut args.into_iter());"}, {"sha": "bae9b09c6977666bbf8ae3af8c8f82125f4e25bd", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/910d538ef1f643334974aa0c2f45ff44a74d92b1/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/910d538ef1f643334974aa0c2f45ff44a74d92b1/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=910d538ef1f643334974aa0c2f45ff44a74d92b1", "patch": "@@ -133,3 +133,19 @@ fn divergent(_: u8) -> ! {\n fn generic<T>(_: T) -> u8 {\n     0\n }\n+\n+fn passes_fn_mut(mut x: Box<dyn FnMut()>) {\n+    requires_fn_once(|| x());\n+}\n+fn requires_fn_once<T: FnOnce()>(_: T) {}\n+\n+fn test_redundant_closure_with_function_pointer() {\n+    type FnPtrType = fn(u8);\n+    let foo_ptr: FnPtrType = foo;\n+    let a = Some(1u8).map(foo_ptr);\n+}\n+\n+fn test_redundant_closure_with_another_closure() {\n+    let closure = |a| println!(\"{}\", a);\n+    let a = Some(1u8).map(closure);\n+}"}, {"sha": "a23da73bde7520954824ea05ea06f1bc2c70c548", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/910d538ef1f643334974aa0c2f45ff44a74d92b1/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910d538ef1f643334974aa0c2f45ff44a74d92b1/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=910d538ef1f643334974aa0c2f45ff44a74d92b1", "patch": "@@ -133,3 +133,19 @@ fn divergent(_: u8) -> ! {\n fn generic<T>(_: T) -> u8 {\n     0\n }\n+\n+fn passes_fn_mut(mut x: Box<dyn FnMut()>) {\n+    requires_fn_once(|| x());\n+}\n+fn requires_fn_once<T: FnOnce()>(_: T) {}\n+\n+fn test_redundant_closure_with_function_pointer() {\n+    type FnPtrType = fn(u8);\n+    let foo_ptr: FnPtrType = foo;\n+    let a = Some(1u8).map(|a| foo_ptr(a));\n+}\n+\n+fn test_redundant_closure_with_another_closure() {\n+    let closure = |a| println!(\"{}\", a);\n+    let a = Some(1u8).map(|a| closure(a));\n+}"}, {"sha": "eb55a251bcc9635beee597a52ccba00cabbe1513", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/910d538ef1f643334974aa0c2f45ff44a74d92b1/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/910d538ef1f643334974aa0c2f45ff44a74d92b1/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=910d538ef1f643334974aa0c2f45ff44a74d92b1", "patch": "@@ -68,5 +68,17 @@ error: redundant closure found\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n-error: aborting due to 11 previous errors\n+error: redundant closure found\n+  --> $DIR/eta.rs:145:27\n+   |\n+LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n+   |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `foo_ptr`\n+\n+error: redundant closure found\n+  --> $DIR/eta.rs:150:27\n+   |\n+LL |     let a = Some(1u8).map(|a| closure(a));\n+   |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`\n+\n+error: aborting due to 13 previous errors\n "}]}