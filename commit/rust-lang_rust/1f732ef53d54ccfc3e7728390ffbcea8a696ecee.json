{"sha": "1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNzMyZWY1M2Q1NGNjZmMzZTc3MjgzOTBmZmJjZWE4YTY5NmVjZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-05T06:45:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-05T06:45:39Z"}, "message": "auto merge of #20395 : huonw/rust/char-stab-2, r=aturon\n\ncc #19260 \r\n\r\nThe casing transformations are left unstable (it is highly likely to be better to adopt the proper non-1-to-1 case mappings, per #20333) as are `is_xid_*`.\r\n\r\nI've got a little todo list in the last commit of things I thought about/was told about that I haven't yet handled (I'd also like some feedback).", "tree": {"sha": "29ced952bc9e6f49640ccc33974209afc805ff91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29ced952bc9e6f49640ccc33974209afc805ff91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "html_url": "https://github.com/rust-lang/rust/commit/1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed22606c8382822efc555f72f895c560289a5c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed22606c8382822efc555f72f895c560289a5c70", "html_url": "https://github.com/rust-lang/rust/commit/ed22606c8382822efc555f72f895c560289a5c70"}, {"sha": "990a79f097e8e74308bfec6d72dcdbb769a7973b", "url": "https://api.github.com/repos/rust-lang/rust/commits/990a79f097e8e74308bfec6d72dcdbb769a7973b", "html_url": "https://github.com/rust-lang/rust/commit/990a79f097e8e74308bfec6d72dcdbb769a7973b"}], "stats": {"total": 245, "additions": 181, "deletions": 64}, "files": [{"sha": "db2367950387b4a125d74446770a90fb07e6dc35", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -103,7 +103,6 @@ mod std {\n mod prelude {\n     // from core.\n     pub use core::borrow::IntoCow;\n-    pub use core::char::Char;\n     pub use core::clone::Clone;\n     pub use core::cmp::{PartialEq, Eq, PartialOrd, Ord};\n     pub use core::cmp::Ordering::{Less, Equal, Greater};\n@@ -127,7 +126,7 @@ mod prelude {\n \n     // from other crates.\n     pub use alloc::boxed::Box;\n-    pub use unicode::char::UnicodeChar;\n+    pub use unicode::char::CharExt;\n \n     // from collections.\n     pub use slice::SliceConcatExt;"}, {"sha": "ecf17820d2d8f72c58f44bc97d18c59a3b8666e9", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -55,7 +55,7 @@ use self::RecompositionState::*;\n use self::DecompositionType::*;\n \n use core::borrow::{BorrowFrom, ToOwned};\n-use core::char::Char;\n+use core::char::CharExt;\n use core::clone::Clone;\n use core::iter::AdditiveIterator;\n use core::iter::{range, Iterator, IteratorExt};"}, {"sha": "291b7f2ece4455db05cd8777785240795501f5d2", "filename": "src/libcore/char.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -69,7 +69,7 @@ pub const MAX: char = '\\u{10ffff}';\n \n /// Converts from `u32` to a `char`\n #[inline]\n-#[unstable = \"pending decisions about costructors for primitives\"]\n+#[stable]\n pub fn from_u32(i: u32) -> Option<char> {\n     // catch out-of-bounds and surrogates\n     if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n@@ -92,7 +92,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// Panics if given an `radix` > 36.\n ///\n #[inline]\n-#[unstable = \"pending decisions about costructors for primitives\"]\n+#[unstable = \"pending integer conventions\"]\n pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n     if radix > 36 {\n         panic!(\"from_digit: radix is too high (maximum 36)\");\n@@ -111,8 +111,8 @@ pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n }\n \n /// Basic `char` manipulations.\n-#[experimental = \"trait organization may change\"]\n-pub trait Char {\n+#[stable]\n+pub trait CharExt {\n     /// Checks if a `char` parses as a numeric digit in the given radix.\n     ///\n     /// Compared to `is_numeric()`, this function only recognizes the characters\n@@ -126,7 +126,7 @@ pub trait Char {\n     /// # Panics\n     ///\n     /// Panics if given a radix > 36.\n-    #[unstable = \"pending error conventions\"]\n+    #[unstable = \"pending integer conventions\"]\n     fn is_digit(self, radix: uint) -> bool;\n \n     /// Converts a character to the corresponding digit.\n@@ -140,7 +140,7 @@ pub trait Char {\n     /// # Panics\n     ///\n     /// Panics if given a radix outside the range [0..36].\n-    #[unstable = \"pending error conventions, trait organization\"]\n+    #[unstable = \"pending integer conventions\"]\n     fn to_digit(self, radix: uint) -> Option<uint>;\n \n     /// Returns an iterator that yields the hexadecimal Unicode escape\n@@ -149,7 +149,7 @@ pub trait Char {\n     /// All characters are escaped with Rust syntax of the form `\\\\u{NNNN}`\n     /// where `NNNN` is the shortest hexadecimal representation of the code\n     /// point.\n-    #[unstable = \"pending error conventions, trait organization\"]\n+    #[stable]\n     fn escape_unicode(self) -> EscapeUnicode;\n \n     /// Returns an iterator that yields the 'default' ASCII and\n@@ -164,47 +164,44 @@ pub trait Char {\n     ///   escaped.\n     /// * Any other chars in the range [0x20,0x7e] are not escaped.\n     /// * Any other chars are given hex Unicode escapes; see `escape_unicode`.\n-    #[unstable = \"pending error conventions, trait organization\"]\n+    #[stable]\n     fn escape_default(self) -> EscapeDefault;\n \n     /// Returns the amount of bytes this character would need if encoded in\n     /// UTF-8.\n-    #[unstable = \"pending trait organization\"]\n+    #[stable]\n     fn len_utf8(self) -> uint;\n \n     /// Returns the amount of bytes this character would need if encoded in\n     /// UTF-16.\n-    #[unstable = \"pending trait organization\"]\n+    #[stable]\n     fn len_utf16(self) -> uint;\n \n     /// Encodes this character as UTF-8 into the provided byte buffer,\n     /// and then returns the number of bytes written.\n     ///\n     /// If the buffer is not large enough, nothing will be written into it\n     /// and a `None` will be returned.\n-    #[unstable = \"pending trait organization\"]\n-    fn encode_utf8(&self, dst: &mut [u8]) -> Option<uint>;\n+    #[stable]\n+    fn encode_utf8(self, dst: &mut [u8]) -> Option<uint>;\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer,\n     /// and then returns the number of `u16`s written.\n     ///\n     /// If the buffer is not large enough, nothing will be written into it\n     /// and a `None` will be returned.\n-    #[unstable = \"pending trait organization\"]\n-    fn encode_utf16(&self, dst: &mut [u16]) -> Option<uint>;\n+    #[stable]\n+    fn encode_utf16(self, dst: &mut [u16]) -> Option<uint>;\n }\n \n-#[experimental = \"trait is experimental\"]\n-impl Char for char {\n-    #[unstable = \"pending trait organization\"]\n+#[stable]\n+impl CharExt for char {\n+    #[unstable = \"pending integer conventions\"]\n     fn is_digit(self, radix: uint) -> bool {\n-        match self.to_digit(radix) {\n-            Some(_) => true,\n-            None    => false,\n-        }\n+        self.to_digit(radix).is_some()\n     }\n \n-    #[unstable = \"pending trait organization\"]\n+    #[unstable = \"pending integer conventions\"]\n     fn to_digit(self, radix: uint) -> Option<uint> {\n         if radix > 36 {\n             panic!(\"to_digit: radix is too high (maximum 36)\");\n@@ -219,12 +216,12 @@ impl Char for char {\n         else { None }\n     }\n \n-    #[unstable = \"pending error conventions, trait organization\"]\n+    #[stable]\n     fn escape_unicode(self) -> EscapeUnicode {\n         EscapeUnicode { c: self, state: EscapeUnicodeState::Backslash }\n     }\n \n-    #[unstable = \"pending error conventions, trait organization\"]\n+    #[stable]\n     fn escape_default(self) -> EscapeDefault {\n         let init_state = match self {\n             '\\t' => EscapeDefaultState::Backslash('t'),\n@@ -240,7 +237,7 @@ impl Char for char {\n     }\n \n     #[inline]\n-    #[unstable = \"pending trait organization\"]\n+    #[stable]\n     fn len_utf8(self) -> uint {\n         let code = self as u32;\n         match () {\n@@ -252,17 +249,17 @@ impl Char for char {\n     }\n \n     #[inline]\n-    #[unstable = \"pending trait organization\"]\n+    #[stable]\n     fn len_utf16(self) -> uint {\n         let ch = self as u32;\n         if (ch & 0xFFFF_u32) == ch { 1 } else { 2 }\n     }\n \n     #[inline]\n-    #[unstable = \"pending error conventions, trait organization\"]\n-    fn encode_utf8<'a>(&self, dst: &'a mut [u8]) -> Option<uint> {\n+    #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n+    fn encode_utf8(self, dst: &mut [u8]) -> Option<uint> {\n         // Marked #[inline] to allow llvm optimizing it away\n-        let code = *self as u32;\n+        let code = self as u32;\n         if code < MAX_ONE_B && dst.len() >= 1 {\n             dst[0] = code as u8;\n             Some(1)\n@@ -287,10 +284,10 @@ impl Char for char {\n     }\n \n     #[inline]\n-    #[unstable = \"pending error conventions, trait organization\"]\n-    fn encode_utf16(&self, dst: &mut [u16]) -> Option<uint> {\n+    #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n+    fn encode_utf16(self, dst: &mut [u16]) -> Option<uint> {\n         // Marked #[inline] to allow llvm optimizing it away\n-        let mut ch = *self as u32;\n+        let mut ch = self as u32;\n         if (ch & 0xFFFF_u32) == ch  && dst.len() >= 1 {\n             // The BMP falls through (assuming non-surrogate, as it should)\n             dst[0] = ch as u16;\n@@ -310,6 +307,7 @@ impl Char for char {\n /// An iterator over the characters that represent a `char`, as escaped by\n /// Rust's unicode escaping rules.\n #[derive(Clone)]\n+#[stable]\n pub struct EscapeUnicode {\n     c: char,\n     state: EscapeUnicodeState\n@@ -325,6 +323,7 @@ enum EscapeUnicodeState {\n     Done,\n }\n \n+#[stable]\n impl Iterator for EscapeUnicode {\n     type Item = char;\n \n@@ -370,6 +369,7 @@ impl Iterator for EscapeUnicode {\n /// An iterator over the characters that represent a `char`, escaped\n /// for maximum portability.\n #[derive(Clone)]\n+#[stable]\n pub struct EscapeDefault {\n     state: EscapeDefaultState\n }\n@@ -382,6 +382,7 @@ enum EscapeDefaultState {\n     Unicode(EscapeUnicode),\n }\n \n+#[stable]\n impl Iterator for EscapeDefault {\n     type Item = char;\n "}, {"sha": "f63242b4f859a451d9bddabff995532c9d1ec900", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -15,7 +15,7 @@ pub use self::SignificantDigits::*;\n pub use self::SignFormat::*;\n \n use char;\n-use char::Char;\n+use char::CharExt;\n use fmt;\n use iter::{IteratorExt, range};\n use num::{cast, Float, ToPrimitive};"}, {"sha": "102836f8d3024831044766fe17c0ec2062f66af3", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -388,7 +388,7 @@ impl<'a> Formatter<'a> {\n                         prefix: &str,\n                         buf: &str)\n                         -> Result {\n-        use char::Char;\n+        use char::CharExt;\n         use fmt::rt::{FlagAlternate, FlagSignPlus, FlagSignAwareZeroPad};\n \n         let mut width = buf.len();\n@@ -504,7 +504,7 @@ impl<'a> Formatter<'a> {\n     fn with_padding<F>(&mut self, padding: uint, default: rt::Alignment, f: F) -> Result where\n         F: FnOnce(&mut Formatter) -> Result,\n     {\n-        use char::Char;\n+        use char::CharExt;\n         let align = match self.align {\n             rt::AlignUnknown => default,\n             _ => self.align\n@@ -613,7 +613,7 @@ impl Show for str {\n \n impl Show for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        use char::Char;\n+        use char::CharExt;\n \n         let mut utf8 = [0u8; 4];\n         let amt = self.encode_utf8(&mut utf8).unwrap_or(0);"}, {"sha": "426c858d408adb142123fba77c491184a239d08e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -15,7 +15,7 @@\n #![stable]\n #![allow(missing_docs)]\n \n-use char::Char;\n+use char::CharExt;\n use clone::Clone;\n use cmp::{PartialEq, Eq};\n use cmp::{PartialOrd, Ord};"}, {"sha": "d4aca1bb73c23659e987f6774abfc3c64708cef9", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -38,7 +38,7 @@ pub use mem::drop;\n \n // Reexported types and traits\n \n-pub use char::Char;\n+pub use char::CharExt;\n pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n pub use iter::{Extend, IteratorExt};"}, {"sha": "5f6c62f1d7a68fc4321a5b6212012f2cb7f7ae37", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -50,7 +50,6 @@ use rustc::session::config;\n use std::rc::Rc;\n use std::u32;\n use std::str::Str as StrTrait; // Conflicts with Str variant\n-use std::char::Char as CharTrait; // Conflicts with Char variant\n use std::path::Path as FsPath; // Conflicts with Path struct\n \n use core::DocContext;"}, {"sha": "3fa0b5645c5288fba7b0ccc61a802ac7b20e88d8", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -225,7 +225,7 @@ pub use self::FileMode::*;\n pub use self::FileAccess::*;\n pub use self::IoErrorKind::*;\n \n-use char::Char;\n+use char::CharExt;\n use clone::Clone;\n use default::Default;\n use error::{FromError, Error};\n@@ -248,7 +248,6 @@ use str;\n use string::String;\n use uint;\n use unicode;\n-use unicode::char::UnicodeChar;\n use vec::Vec;\n \n // Reexports"}, {"sha": "67fe599ecd6bfcbfe588a06620d64748fa16bd8a", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -16,7 +16,7 @@ use self::ExponentFormat::*;\n use self::SignificantDigits::*;\n use self::SignFormat::*;\n \n-use char::{self, Char};\n+use char::{self, CharExt};\n use num::{self, Int, Float, ToPrimitive};\n use num::FpCategory as Fp;\n use ops::FnMut;"}, {"sha": "cf8bc0e6242b312752e0ac621563ead9f994d2a5", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -16,6 +16,7 @@ use self::PathPrefix::*;\n \n use ascii::AsciiExt;\n use c_str::{CString, ToCStr};\n+use char::CharExt;\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use hash;\n@@ -28,7 +29,6 @@ use option::Option::{Some, None};\n use slice::{SliceExt, SliceConcatExt};\n use str::{SplitTerminator, FromStr, StrExt};\n use string::{String, ToString};\n-use unicode::char::UnicodeChar;\n use vec::Vec;\n \n use super::{contains_nul, BytesContainer, GenericPath, GenericPathUnsafe};"}, {"sha": "f6bdcd53dff24c29dd68528d1f45ebbb427e051f", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -22,7 +22,7 @@\n // Reexported types and traits\n \n #[stable] #[doc(no_inline)] pub use boxed::Box;\n-#[stable] #[doc(no_inline)] pub use char::{Char, UnicodeChar};\n+#[stable] #[doc(no_inline)] pub use char::CharExt;\n #[stable] #[doc(no_inline)] pub use clone::Clone;\n #[stable] #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[stable] #[doc(no_inline)] pub use iter::CloneIteratorExt;"}, {"sha": "a3884d0c86e1de78a708508117d6a611e598b3c1", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -44,9 +44,9 @@ mod u_str;\n // re-export char so that std et al see it correctly\n /// Character manipulation (`char` type, Unicode Scalar Value)\n ///\n-/// This module  provides the `Char` and `UnicodeChar` traits, as well as their\n-/// implementation for the primitive `char` type, in order to allow basic character\n-/// manipulation.\n+/// This module provides the `CharExt` trait, as well as its\n+/// implementation for the primitive `char` type, in order to allow\n+/// basic character manipulation.\n ///\n /// A `char` actually represents a\n /// *[Unicode Scalar Value](http://www.unicode.org/glossary/#unicode_scalar_value)*,\n@@ -58,16 +58,14 @@ mod u_str;\n /// however the converse is not always true due to the above range limits\n /// and, as such, should be performed via the `from_u32` function..\n pub mod char {\n-    pub use core::char::{MAX, from_u32};\n-    pub use core::char::{from_digit};\n-    pub use core::char::Char;\n+    pub use core::char::{MAX, from_u32, from_digit};\n \n     pub use normalize::{decompose_canonical, decompose_compatible, compose};\n \n     pub use tables::normalization::canonical_combining_class;\n     pub use tables::UNICODE_VERSION;\n \n-    pub use u_char::UnicodeChar;\n+    pub use u_char::CharExt;\n }\n \n pub mod str {"}, {"sha": "c755ea93184028fb9f068c2a0b83a902ddbd1752", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -13,7 +13,7 @@\n #![allow(missing_docs, non_upper_case_globals, non_snake_case)]\n \n /// The version of [Unicode](http://www.unicode.org/)\n-/// that the `UnicodeChar` and `UnicodeStrPrelude` traits are based on.\n+/// that the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.\n pub const UNICODE_VERSION: (uint, uint, uint) = (7, 0, 0);\n \n fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {"}, {"sha": "5693c222de123262b874b37e9d5e737eaab80332", "filename": "src/libunicode/u_char.rs", "status": "modified", "additions": 127, "deletions": 6, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibunicode%2Fu_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibunicode%2Fu_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_char.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -8,19 +8,102 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Unicode-intensive `char` methods.\n+//! Unicode-intensive `char` methods along with the `core` methods.\n //!\n //! These methods implement functionality for `char` that requires knowledge of\n //! Unicode definitions, including normalization, categorization, and display information.\n \n+use core::char;\n+use core::char::CharExt as C;\n use core::option::Option;\n use tables::{derived_property, property, general_category, conversions, charwidth};\n \n-/// Useful functions for Unicode characters.\n-#[experimental = \"pending prelude organization\"]\n-pub trait UnicodeChar {\n+/// Functionality for manipulating `char`.\n+#[stable]\n+pub trait CharExt {\n+    /// Checks if a `char` parses as a numeric digit in the given radix.\n+    ///\n+    /// Compared to `is_numeric()`, this function only recognizes the characters\n+    /// `0-9`, `a-z` and `A-Z`.\n+    ///\n+    /// # Return value\n+    ///\n+    /// Returns `true` if `c` is a valid digit under `radix`, and `false`\n+    /// otherwise.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if given a radix > 36.\n+    #[unstable = \"pending integer conventions\"]\n+    fn is_digit(self, radix: uint) -> bool;\n+\n+    /// Converts a character to the corresponding digit.\n+    ///\n+    /// # Return value\n+    ///\n+    /// If `c` is between '0' and '9', the corresponding value between 0 and\n+    /// 9. If `c` is 'a' or 'A', 10. If `c` is 'b' or 'B', 11, etc. Returns\n+    /// none if the character does not refer to a digit in the given radix.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if given a radix outside the range [0..36].\n+    #[unstable = \"pending integer conventions\"]\n+    fn to_digit(self, radix: uint) -> Option<uint>;\n+\n+    /// Returns an iterator that yields the hexadecimal Unicode escape\n+    /// of a character, as `char`s.\n+    ///\n+    /// All characters are escaped with Rust syntax of the form `\\\\u{NNNN}`\n+    /// where `NNNN` is the shortest hexadecimal representation of the code\n+    /// point.\n+    #[stable]\n+    fn escape_unicode(self) -> char::EscapeUnicode;\n+\n+    /// Returns an iterator that yields the 'default' ASCII and\n+    /// C++11-like literal escape of a character, as `char`s.\n+    ///\n+    /// The default is chosen with a bias toward producing literals that are\n+    /// legal in a variety of languages, including C++11 and similar C-family\n+    /// languages. The exact rules are:\n+    ///\n+    /// * Tab, CR and LF are escaped as '\\t', '\\r' and '\\n' respectively.\n+    /// * Single-quote, double-quote and backslash chars are backslash-\n+    ///   escaped.\n+    /// * Any other chars in the range [0x20,0x7e] are not escaped.\n+    /// * Any other chars are given hex Unicode escapes; see `escape_unicode`.\n+    #[stable]\n+    fn escape_default(self) -> char::EscapeDefault;\n+\n+    /// Returns the amount of bytes this character would need if encoded in\n+    /// UTF-8.\n+    #[stable]\n+    fn len_utf8(self) -> uint;\n+\n+    /// Returns the amount of bytes this character would need if encoded in\n+    /// UTF-16.\n+    #[stable]\n+    fn len_utf16(self) -> uint;\n+\n+    /// Encodes this character as UTF-8 into the provided byte buffer,\n+    /// and then returns the number of bytes written.\n+    ///\n+    /// If the buffer is not large enough, nothing will be written into it\n+    /// and a `None` will be returned.\n+    #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n+    fn encode_utf8(self, dst: &mut [u8]) -> Option<uint>;\n+\n+    /// Encodes this character as UTF-16 into the provided `u16` buffer,\n+    /// and then returns the number of `u16`s written.\n+    ///\n+    /// If the buffer is not large enough, nothing will be written into it\n+    /// and a `None` will be returned.\n+    #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n+    fn encode_utf16(self, dst: &mut [u16]) -> Option<uint>;\n+\n     /// Returns whether the specified character is considered a Unicode\n     /// alphabetic code point.\n+    #[stable]\n     fn is_alphabetic(self) -> bool;\n \n     /// Returns whether the specified character satisfies the 'XID_Start'\n@@ -29,6 +112,7 @@ pub trait UnicodeChar {\n     /// 'XID_Start' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to ID_Start but modified for closure under NFKx.\n+    #[experimental = \"mainly needed for compiler internals\"]\n     fn is_xid_start(self) -> bool;\n \n     /// Returns whether the specified `char` satisfies the 'XID_Continue'\n@@ -37,38 +121,45 @@ pub trait UnicodeChar {\n     /// 'XID_Continue' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to 'ID_Continue' but modified for closure under NFKx.\n+    #[experimental = \"mainly needed for compiler internals\"]\n     fn is_xid_continue(self) -> bool;\n \n     /// Indicates whether a character is in lowercase.\n     ///\n     /// This is defined according to the terms of the Unicode Derived Core\n     /// Property `Lowercase`.\n+    #[stable]\n     fn is_lowercase(self) -> bool;\n \n     /// Indicates whether a character is in uppercase.\n     ///\n     /// This is defined according to the terms of the Unicode Derived Core\n     /// Property `Uppercase`.\n+    #[stable]\n     fn is_uppercase(self) -> bool;\n \n     /// Indicates whether a character is whitespace.\n     ///\n     /// Whitespace is defined in terms of the Unicode Property `White_Space`.\n+    #[stable]\n     fn is_whitespace(self) -> bool;\n \n     /// Indicates whether a character is alphanumeric.\n     ///\n     /// Alphanumericness is defined in terms of the Unicode General Categories\n     /// 'Nd', 'Nl', 'No' and the Derived Core Property 'Alphabetic'.\n+    #[stable]\n     fn is_alphanumeric(self) -> bool;\n \n     /// Indicates whether a character is a control code point.\n     ///\n     /// Control code points are defined in terms of the Unicode General\n     /// Category `Cc`.\n+    #[stable]\n     fn is_control(self) -> bool;\n \n     /// Indicates whether the character is numeric (Nd, Nl, or No).\n+    #[stable]\n     fn is_numeric(self) -> bool;\n \n     /// Converts a character to its lowercase equivalent.\n@@ -80,6 +171,7 @@ pub trait UnicodeChar {\n     ///\n     /// Returns the lowercase equivalent of the character, or the character\n     /// itself if no conversion is possible.\n+    #[experimental = \"pending case transformation decisions\"]\n     fn to_lowercase(self) -> char;\n \n     /// Converts a character to its uppercase equivalent.\n@@ -102,6 +194,7 @@ pub trait UnicodeChar {\n     /// [`SpecialCasing`.txt`]: ftp://ftp.unicode.org/Public/UNIDATA/SpecialCasing.txt\n     ///\n     /// [2]: http://www.unicode.org/versions/Unicode4.0.0/ch03.pdf#G33992\n+    #[experimental = \"pending case transformation decisions\"]\n     fn to_uppercase(self) -> char;\n \n     /// Returns this character's displayed width in columns, or `None` if it is a\n@@ -117,8 +210,26 @@ pub trait UnicodeChar {\n     fn width(self, is_cjk: bool) -> Option<uint>;\n }\n \n-#[experimental = \"pending prelude organization\"]\n-impl UnicodeChar for char {\n+#[stable]\n+impl CharExt for char {\n+    #[unstable = \"pending integer conventions\"]\n+    fn is_digit(self, radix: uint) -> bool { C::is_digit(self, radix) }\n+    #[unstable = \"pending integer conventions\"]\n+    fn to_digit(self, radix: uint) -> Option<uint> { C::to_digit(self, radix) }\n+    #[stable]\n+    fn escape_unicode(self) -> char::EscapeUnicode { C::escape_unicode(self) }\n+    #[stable]\n+    fn escape_default(self) -> char::EscapeDefault { C::escape_default(self) }\n+    #[stable]\n+    fn len_utf8(self) -> uint { C::len_utf8(self) }\n+    #[stable]\n+    fn len_utf16(self) -> uint { C::len_utf16(self) }\n+    #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n+    fn encode_utf8(self, dst: &mut [u8]) -> Option<uint> { C::encode_utf8(self, dst) }\n+    #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n+    fn encode_utf16(self, dst: &mut [u16]) -> Option<uint> { C::encode_utf16(self, dst) }\n+\n+    #[stable]\n     fn is_alphabetic(self) -> bool {\n         match self {\n             'a' ... 'z' | 'A' ... 'Z' => true,\n@@ -127,10 +238,13 @@ impl UnicodeChar for char {\n         }\n     }\n \n+    #[experimental = \"mainly needed for compiler internals\"]\n     fn is_xid_start(self) -> bool { derived_property::XID_Start(self) }\n \n+    #[experimental = \"mainly needed for compiler internals\"]\n     fn is_xid_continue(self) -> bool { derived_property::XID_Continue(self) }\n \n+    #[stable]\n     fn is_lowercase(self) -> bool {\n         match self {\n             'a' ... 'z' => true,\n@@ -139,6 +253,7 @@ impl UnicodeChar for char {\n         }\n     }\n \n+    #[stable]\n     fn is_uppercase(self) -> bool {\n         match self {\n             'A' ... 'Z' => true,\n@@ -147,6 +262,7 @@ impl UnicodeChar for char {\n         }\n     }\n \n+    #[stable]\n     fn is_whitespace(self) -> bool {\n         match self {\n             ' ' | '\\x09' ... '\\x0d' => true,\n@@ -155,12 +271,15 @@ impl UnicodeChar for char {\n         }\n     }\n \n+    #[stable]\n     fn is_alphanumeric(self) -> bool {\n         self.is_alphabetic() || self.is_numeric()\n     }\n \n+    #[stable]\n     fn is_control(self) -> bool { general_category::Cc(self) }\n \n+    #[stable]\n     fn is_numeric(self) -> bool {\n         match self {\n             '0' ... '9' => true,\n@@ -169,8 +288,10 @@ impl UnicodeChar for char {\n         }\n     }\n \n+    #[experimental = \"pending case transformation decisions\"]\n     fn to_lowercase(self) -> char { conversions::to_lower(self) }\n \n+    #[experimental = \"pending case transformation decisions\"]\n     fn to_uppercase(self) -> char { conversions::to_upper(self) }\n \n     #[experimental = \"needs expert opinion. is_cjk flag stands out as ugly\"]"}, {"sha": "90949437774f107c3f1aa463af994ed7f2ce9170", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f732ef53d54ccfc3e7728390ffbcea8a696ecee/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=1f732ef53d54ccfc3e7728390ffbcea8a696ecee", "patch": "@@ -13,7 +13,7 @@\n //! Unicode-intensive string manipulations.\n //!\n //! This module provides functionality to `str` that requires the Unicode methods provided by the\n-//! UnicodeChar trait.\n+//! unicode parts of the CharExt trait.\n \n use self::GraphemeState::*;\n use core::prelude::*;\n@@ -26,7 +26,7 @@ use core::num::Int;\n use core::slice;\n use core::str::Split;\n \n-use u_char::UnicodeChar;\n+use u_char::CharExt as UCharExt; // conflicts with core::prelude::CharExt\n use tables::grapheme::GraphemeCat;\n \n /// An iterator over the words of a string, separated by a sequence of whitespace\n@@ -529,7 +529,7 @@ impl<I> Iterator for Utf16Encoder<I> where I: Iterator<Item=char> {\n \n         let mut buf = [0u16; 2];\n         self.chars.next().map(|ch| {\n-            let n = ch.encode_utf16(buf.as_mut_slice()).unwrap_or(0);\n+            let n = CharExt::encode_utf16(ch, buf.as_mut_slice()).unwrap_or(0);\n             if n == 2 { self.extra = buf[1]; }\n             buf[0]\n         })"}]}