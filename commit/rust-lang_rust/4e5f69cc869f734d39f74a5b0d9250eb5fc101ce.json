{"sha": "4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "node_id": "C_kwDOAAsO6NoAKDRlNWY2OWNjODY5ZjczNGQzOWY3NGE1YjBkOTI1MGViNWZjMTAxY2U", "commit": {"author": {"name": "ydah", "email": "13041216+ydah@users.noreply.github.com", "date": "2022-05-13T05:20:25Z"}, "committer": {"name": "ydah", "email": "13041216+ydah@users.noreply.github.com", "date": "2022-05-13T05:20:25Z"}, "message": "Tweak some words improved representation\n\nThis PR has implemented improved representation.\n\n- Use \"lib\" instead of \"lifb\"\n- Use \"triggered\" instead of \"triggere\"\n- Use \"blacklisted_name\" instead of \"blackisted_name\"\n- Use \"stabilization\" instead of \"stabilisation\"\n- Use \"behavior\" instead of \"behaviour\"\n- Use \"target\" instead of \"tartet\"\n- Use \"checked_add\" instead of \"chcked_add\"\n- Use \"anti-pattern\" instead of \"antipattern\"\n- Use \"suggestion\" instead of \"suggesttion\"\n- Use \"example\" instead of \"exampel\"\n- Use \"Cheat Sheet\" instead of \"Cheatsheet\"", "tree": {"sha": "964366d129efed6cd8545d17937b996aa4e2faa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/964366d129efed6cd8545d17937b996aa4e2faa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "html_url": "https://github.com/rust-lang/rust/commit/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/comments", "author": {"login": "ydah", "id": 13041216, "node_id": "MDQ6VXNlcjEzMDQxMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/13041216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ydah", "html_url": "https://github.com/ydah", "followers_url": "https://api.github.com/users/ydah/followers", "following_url": "https://api.github.com/users/ydah/following{/other_user}", "gists_url": "https://api.github.com/users/ydah/gists{/gist_id}", "starred_url": "https://api.github.com/users/ydah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ydah/subscriptions", "organizations_url": "https://api.github.com/users/ydah/orgs", "repos_url": "https://api.github.com/users/ydah/repos", "events_url": "https://api.github.com/users/ydah/events{/privacy}", "received_events_url": "https://api.github.com/users/ydah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ydah", "id": 13041216, "node_id": "MDQ6VXNlcjEzMDQxMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/13041216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ydah", "html_url": "https://github.com/ydah", "followers_url": "https://api.github.com/users/ydah/followers", "following_url": "https://api.github.com/users/ydah/following{/other_user}", "gists_url": "https://api.github.com/users/ydah/gists{/gist_id}", "starred_url": "https://api.github.com/users/ydah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ydah/subscriptions", "organizations_url": "https://api.github.com/users/ydah/orgs", "repos_url": "https://api.github.com/users/ydah/repos", "events_url": "https://api.github.com/users/ydah/events{/privacy}", "received_events_url": "https://api.github.com/users/ydah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3d1f288491c703172b2debc88379c6469e26c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d1f288491c703172b2debc88379c6469e26c75", "html_url": "https://github.com/rust-lang/rust/commit/a3d1f288491c703172b2debc88379c6469e26c75"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "d5cd7ca96c0c0421cd370abda2ecb5177e03aa97", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -124,7 +124,7 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                  * the lint count in README.md is correct\\n \\\n                  * the changelog contains markdown link references at the bottom\\n \\\n                  * all lint groups include the correct lints\\n \\\n-                 * lint modules in `clippy_lints/*` are visible in `src/lifb.rs` via `pub mod`\\n \\\n+                 * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n                  * all lints are registered in the lint store\",\n                 )\n                 .arg(Arg::with_name(\"print-only\").long(\"print-only\").help("}, {"sha": "07d196387887cc84ede7b05f5fef5eb9832e8eed", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -133,7 +133,7 @@ fn to_camel_case(name: &str) -> String {\n         .collect()\n }\n \n-fn get_stabilisation_version() -> String {\n+fn get_stabilization_version() -> String {\n     fn parse_manifest(contents: &str) -> Option<String> {\n         let version = contents\n             .lines()\n@@ -199,7 +199,7 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         },\n     };\n \n-    let version = get_stabilisation_version();\n+    let version = get_stabilization_version();\n     let lint_name = lint.name;\n     let category = lint.category;\n     let name_camel = to_camel_case(lint.name);"}, {"sha": "4c2d3366483af094b5d5aa539ae5042aabf1b438", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -50,7 +50,7 @@ declare_clippy_lint! {\n     /// ### Known problems\n     /// Clippy cannot know for sure if `a op= a op b` should have\n     /// been `a = a op a op b` or `a = a op b`/`a op= b`. Therefore, it suggests both.\n-    /// If `a op= a op b` is really the correct behaviour it should be\n+    /// If `a op= a op b` is really the correct behavior it should be\n     /// written as `a = a op a op b` as it's less confusing.\n     ///\n     /// ### Example"}, {"sha": "027c660ce3b2484014a2f5ea39df937f0cf93df8", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -121,7 +121,7 @@ fn expr_cast_chain_tys<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Optio\n         let to_slice_ty = get_raw_slice_ty_mut(cast_to)?;\n \n         // If the expression that makes up the source of this cast is itself a cast, recursively\n-        // call `expr_cast_chain_tys` and update the end type with the final tartet type.\n+        // call `expr_cast_chain_tys` and update the end type with the final target type.\n         // Otherwise, this cast is not immediately nested, just construct the info for this cast\n         if let Some(prev_info) = expr_cast_chain_tys(cx, cast_expr) {\n             Some(CastChainInfo {"}, {"sha": "daf3b7b4ce4fec2c5dcc0ee446d327dc9e618fd7", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -306,7 +306,7 @@ declare_clippy_lint! {\n     /// Checks for casts of `&T` to `&mut T` anywhere in the code.\n     ///\n     /// ### Why is this bad?\n-    /// It\u2019s basically guaranteed to be undefined behaviour.\n+    /// It\u2019s basically guaranteed to be undefined behavior.\n     /// `UnsafeCell` is the only way to obtain aliasable data that is considered\n     /// mutable.\n     ///"}, {"sha": "d559ad423df5f32f5ef8c3709487df507a92a028", "filename": "clippy_lints/src/default_union_representation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fdefault_union_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fdefault_union_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_union_representation.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -25,7 +25,7 @@ declare_clippy_lint! {\n     ///\n     /// fn main() {\n     ///     let _x: u32 = unsafe {\n-    ///         Foo { a: 0_i32 }.b // Undefined behaviour: `b` is allowed to be padding\n+    ///         Foo { a: 0_i32 }.b // Undefined behavior: `b` is allowed to be padding\n     ///     };\n     /// }\n     /// ```\n@@ -39,7 +39,7 @@ declare_clippy_lint! {\n     ///\n     /// fn main() {\n     ///     let _x: u32 = unsafe {\n-    ///         Foo { a: 0_i32 }.b // Now defined behaviour, this is just an i32 -> u32 transmute\n+    ///         Foo { a: 0_i32 }.b // Now defined behavior, this is just an i32 -> u32 transmute\n     ///     };\n     /// }\n     /// ```"}, {"sha": "fbbc5bf78a59f2904a983cfb6b7e3fdb5d600735", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -102,8 +102,8 @@ declare_clippy_lint! {\n     /// types.\n     ///\n     /// ### Why is this bad?\n-    /// To avoid surprising behaviour, these traits should\n-    /// agree and the behaviour of `Copy` cannot be overridden. In almost all\n+    /// To avoid surprising behavior, these traits should\n+    /// agree and the behavior of `Copy` cannot be overridden. In almost all\n     /// situations a `Copy` type should have a `Clone` implementation that does\n     /// nothing more than copy the object, which is what `#[derive(Copy, Clone)]`\n     /// gets you."}, {"sha": "20333c150e3d5b3a9c5edae3ef5da557281eac47", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -12,7 +12,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     /// Apart from special setups (which we could detect following attributes like #![no_std]),\n-    /// recursing into main() seems like an unintuitive antipattern we should be able to detect.\n+    /// recursing into main() seems like an unintuitive anti-pattern we should be able to detect.\n     ///\n     /// ### Example\n     /// ```no_run"}, {"sha": "35fc452ed7cf0a79f4da205e0cf95020c38a560e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -1563,7 +1563,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.39.0\"]\n     pub MANUAL_SATURATING_ARITHMETIC,\n     style,\n-    \"`.chcked_add/sub(x).unwrap_or(MAX/MIN)`\"\n+    \"`.checked_add/sub(x).unwrap_or(MAX/MIN)`\"\n }\n \n declare_clippy_lint! {"}, {"sha": "8dba60f3a5854953e6185cc48ca4d4a3cc04d693", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -16,7 +16,7 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// In release builds `debug_assert!` macros are optimized out by the\n     /// compiler.\n-    /// Therefore mutating something in a `debug_assert!` macro results in different behaviour\n+    /// Therefore mutating something in a `debug_assert!` macro results in different behavior\n     /// between a release and debug build.\n     ///\n     /// ### Example"}, {"sha": "623d22bc9bdfe6a6a6c1c1ef674da4ff5946e64c", "filename": "clippy_lints/src/needless_bitwise_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -53,7 +53,7 @@ fn is_bitwise_operation(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     false\n }\n \n-fn suggesstion_snippet(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n+fn suggestion_snippet(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n     if let ExprKind::Binary(ref op, left, right) = expr.kind {\n         if let (Some(l_snippet), Some(r_snippet)) = (snippet_opt(cx, left.span), snippet_opt(cx, right.span)) {\n             let op_snippet = match op.node {\n@@ -75,7 +75,7 @@ impl LateLintPass<'_> for NeedlessBitwiseBool {\n                 expr.span,\n                 \"use of bitwise operator instead of lazy operator between booleans\",\n                 |diag| {\n-                    if let Some(sugg) = suggesstion_snippet(cx, expr) {\n+                    if let Some(sugg) = suggestion_snippet(cx, expr) {\n                         diag.span_suggestion(expr.span, \"try\", sugg, Applicability::MachineApplicable);\n                     }\n                 },"}, {"sha": "e3ded716341f633028736d387076ceae8a39f31f", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -52,7 +52,7 @@ declare_clippy_lint! {\n     /// to a function that needs the memory address. For further details, refer to\n     /// [this issue](https://github.com/rust-lang/rust-clippy/issues/5953)\n     /// that explains a real case in which this false positive\n-    /// led to an **undefined behaviour** introduced with unsafe code.\n+    /// led to an **undefined behavior** introduced with unsafe code.\n     ///\n     /// ### Example\n     ///"}, {"sha": "b19f9aff6118cf49b9647950d1f6a06047d3e31e", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -632,7 +632,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n }\n \n /// Collect possible borrowed for every `&mut` local.\n-/// For exampel, `_1 = &mut _2` generate _1: {_2,...}\n+/// For example, `_1 = &mut _2` generate _1: {_2,...}\n /// Known Problems: not sure all borrowed are tracked\n struct PossibleOriginVisitor<'a, 'tcx> {\n     possible_origin: TransitiveRelation,"}, {"sha": "d2a040beb0cf70e67c866b24a8dab247043b8b04", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -27,7 +27,7 @@ declare_clippy_lint! {\n     /// architecture.\n     ///\n     /// ### Why is this bad?\n-    /// It's basically guaranteed to be undefined behaviour.\n+    /// It's basically guaranteed to be undefined behavior.\n     ///\n     /// ### Known problems\n     /// When accessing C, users might want to store pointer\n@@ -40,7 +40,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"pre 1.29.0\"]\n     pub WRONG_TRANSMUTE,\n     correctness,\n-    \"transmutes that are confusing at best, undefined behaviour at worst and always useless\"\n+    \"transmutes that are confusing at best, undefined behavior at worst and always useless\"\n }\n \n // FIXME: Move this to `complexity` again, after #5343 is fixed"}, {"sha": "e8f0c338fd58aa4472a36e3455559085e4f7866f", "filename": "doc/adding_lints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -28,7 +28,7 @@ because that's clearly a non-descriptive name.\n   - [Debugging](#debugging)\n   - [PR Checklist](#pr-checklist)\n   - [Adding configuration to a lint](#adding-configuration-to-a-lint)\n-  - [Cheatsheet](#cheatsheet)\n+  - [Cheat Sheet](#cheat-sheet)\n \n ## Setup\n \n@@ -649,7 +649,7 @@ in the following steps:\n         with the configuration value and a rust file that should be linted by Clippy. The test can\n         otherwise be written as usual.\n \n-## Cheatsheet\n+## Cheat Sheet\n \n Here are some pointers to things you are likely going to need for every lint:\n "}, {"sha": "27df732a08802f283fa08ebd04c1564d142c787b", "filename": "tests/ui/blacklisted_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/tests%2Fui%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5f69cc869f734d39f74a5b0d9250eb5fc101ce/tests%2Fui%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.rs?ref=4e5f69cc869f734d39f74a5b0d9250eb5fc101ce", "patch": "@@ -46,10 +46,10 @@ fn issue_1647_ref_mut() {\n \n mod tests {\n     fn issue_7305() {\n-        // `blackisted_name` lint should not be triggered inside of the test code.\n+        // `blacklisted_name` lint should not be triggered inside of the test code.\n         let foo = 0;\n \n-        // Check that even in nested functions warning is still not triggere.\n+        // Check that even in nested functions warning is still not triggered.\n         fn nested() {\n             let foo = 0;\n         }"}]}