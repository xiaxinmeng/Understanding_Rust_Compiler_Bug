{"sha": "fe8a31e56992a712b532350596af05186ac90613", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOGEzMWU1Njk5MmE3MTJiNTMyMzUwNTk2YWYwNTE4NmFjOTA2MTM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-10T13:33:36Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-10T13:33:36Z"}, "message": "Remove a vestige of return-by-reference", "tree": {"sha": "a8e76aef4b0762dd74511a7457db0143e45e5d0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8e76aef4b0762dd74511a7457db0143e45e5d0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe8a31e56992a712b532350596af05186ac90613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe8a31e56992a712b532350596af05186ac90613", "html_url": "https://github.com/rust-lang/rust/commit/fe8a31e56992a712b532350596af05186ac90613", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe8a31e56992a712b532350596af05186ac90613/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "107f827b537a4c3b2a44993085609497a1871928", "url": "https://api.github.com/repos/rust-lang/rust/commits/107f827b537a4c3b2a44993085609497a1871928", "html_url": "https://github.com/rust-lang/rust/commit/107f827b537a4c3b2a44993085609497a1871928"}], "stats": {"total": 130, "additions": 43, "deletions": 87}, "files": [{"sha": "a4ef21afe379e28a97dca9a85a60dce8909ba4cd", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -141,18 +141,14 @@ fn visit_expr(cx: @ctx, ex: @ast::expr, sc: scope, v: vt<scope>) {\n }\n \n fn visit_block(cx: @ctx, b: ast::blk, sc: scope, v: vt<scope>) {\n-    let bs = sc.bs, sc = sc;\n+    let sc = sc;\n     for stmt in b.node.stmts {\n         alt stmt.node {\n           ast::stmt_decl(@{node: ast::decl_item(it), _}, _) {\n             v.visit_item(it, sc, v);\n           }\n           ast::stmt_decl(@{node: ast::decl_local(locs), _}, _) {\n-            for (st, loc) in locs {\n-                if st == ast::let_ref {\n-                    add_bindings_for_let(*cx, bs, loc);\n-                    sc = {bs: bs with sc};\n-                }\n+            for loc in locs {\n                 alt loc.node.init {\n                   some(init) {\n                     if init.op == ast::init_move {\n@@ -547,7 +543,7 @@ fn ty_can_unsafely_include(cx: ctx, needle: unsafe_ty, haystack: ty::t,\n \n fn def_is_local(d: ast::def) -> bool {\n     alt d {\n-      ast::def_local(_, _) | ast::def_arg(_, _) | ast::def_binding(_) |\n+      ast::def_local(_) | ast::def_arg(_, _) | ast::def_binding(_) |\n       ast::def_upvar(_, _, _) | ast::def_self(_) { true }\n       _ { false }\n     }"}, {"sha": "54bff606939c6ec29b2ca42453a881b70d97d495", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -204,7 +204,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n fn check_stmt(stmt: @stmt, cx: ctx, v: visit::vt<ctx>) {\n     alt stmt.node {\n       stmt_decl(@{node: decl_local(locals), _}, _) {\n-        for (_, local) in locals {\n+        for local in locals {\n             alt local.node.init {\n               some({op: init_assign, expr}) { maybe_copy(cx, expr); }\n               _ {}"}, {"sha": "f3b2e83a211091f712d7c3be10ec1337c45388c4", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -285,7 +285,7 @@ fn clear_in_current(cx: ctx, my_def: node_id, to: bool) {\n fn clear_def_if_path(cx: ctx, d: def, to: bool)\n     -> option<node_id> {\n     alt d {\n-      def_local(def_id, let_copy) {\n+      def_local(def_id) {\n         clear_in_current(cx, def_id.node, to);\n         some(def_id.node)\n       }"}, {"sha": "cf3388c7f40def4d6bd6a19a7a33ad636f14c4da", "filename": "src/comp/middle/mut.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmut.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -137,7 +137,7 @@ fn visit_decl(cx: @ctx, d: @decl, &&e: (), v: visit::vt<()>) {\n     visit::visit_decl(d, e, v);\n     alt d.node {\n       decl_local(locs) {\n-        for (_, loc) in locs {\n+        for loc in locs {\n             alt loc.node.init {\n               some(init) {\n                 if init.op == init_move { check_move_rhs(cx, init.expr); }\n@@ -282,7 +282,6 @@ fn is_immutable_def(cx: @ctx, def: def) -> option<str> {\n         };\n       }\n       def_binding(_) { some(\"binding\") }\n-      def_local(_, let_ref) { some(\"by-reference binding\") }\n       _ { none }\n     }\n }"}, {"sha": "1d614cf35ed83e1078c28733a241fed925101dea", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -542,7 +542,7 @@ fn visit_decl_with_scope(d: @decl, sc: scopes, v: vt<scopes>) {\n     };\n     alt d.node {\n       decl_local(locs) {\n-        for (_, loc) in locs { v.visit_local(loc, sc, v);; *loc_pos += 1u; }\n+        for loc in locs { v.visit_local(loc, sc, v);; *loc_pos += 1u; }\n       }\n       decl_item(it) { v.visit_item(it, sc, v); }\n     }\n@@ -882,7 +882,7 @@ fn scope_closes(sc: scope) -> option<node_id> {\n \n fn def_is_local(d: def) -> bool {\n     alt d {\n-      ast::def_arg(_, _) | ast::def_local(_, _) | ast::def_binding(_) |\n+      ast::def_arg(_, _) | ast::def_local(_) | ast::def_binding(_) |\n       ast::def_upvar(_, _, _) { true }\n       _ { false }\n     }\n@@ -1114,12 +1114,12 @@ fn lookup_in_block(e: env, name: ident, sp: span, b: ast::blk_, pos: uint,\n                     let j = vec::len(locs);\n                     while j > 0u {\n                         j -= 1u;\n-                        let (style, loc) = locs[j];\n+                        let loc = locs[j];\n                         if ns == ns_val(ns_any_value)\n                                      && (i < pos || j < loc_pos) {\n                             alt lookup_in_pat(e, name, loc.node.pat) {\n                               some(did) {\n-                                ret some(ast::def_local(did, style));\n+                                ret some(ast::def_local(did));\n                               }\n                               _ { }\n                             }\n@@ -1549,7 +1549,7 @@ fn ns_for_def(d: def) -> namespace {\n     alt d {\n       ast::def_variant(_, _) { ns_val(ns_a_enum) }\n       ast::def_fn(_, _) | ast::def_self(_) |\n-      ast::def_const(_) | ast::def_arg(_, _) | ast::def_local(_, _) |\n+      ast::def_const(_) | ast::def_arg(_, _) | ast::def_local(_) |\n       ast::def_upvar(_, _, _) |  ast::def_self(_) |\n       ast::def_class_field(_,_) | ast::def_class_method(_,_)\n           { ns_val(ns_any_value) }\n@@ -1713,7 +1713,7 @@ fn check_block(e: @env, b: ast::blk, &&x: (), v: vt<()>) {\n             alt d.node {\n               ast::decl_local(locs) {\n                 let local_values = checker(*e, \"value\");\n-                for (_, loc) in locs {\n+                for loc in locs {\n                      pat_util::pat_bindings\n                         (normalize_pat_def_map(e.def_map, loc.node.pat))\n                             {|_i, p_sp, n|"}, {"sha": "b4ee740b56eaf7c81dbfef23e31917ae1caf1275", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -2395,7 +2395,7 @@ fn trans_local_var(cx: @block_ctxt, def: ast::def) -> local_var_result {\n         assert (cx.fcx.llargs.contains_key(did.node));\n         ret take_local(cx.fcx.llargs, did.node);\n       }\n-      ast::def_local(did, _) | ast::def_binding(did) {\n+      ast::def_local(did) | ast::def_binding(did) {\n         assert (cx.fcx.lllocals.contains_key(did.node));\n         ret take_local(cx.fcx.lllocals, did.node);\n       }\n@@ -3737,18 +3737,6 @@ fn init_local(bcx: @block_ctxt, local: @ast::local) -> @block_ctxt {\n     ret alt::bind_irrefutable_pat(bcx, local.node.pat, llptr, false);\n }\n \n-fn init_ref_local(bcx: @block_ctxt, local: @ast::local) -> @block_ctxt {\n-    let init_expr = option::get(local.node.init).expr;\n-    let {bcx, val, kind} = trans_lval(bcx, init_expr);\n-    alt kind {\n-      owned_imm { val = do_spill_noroot(bcx, val); }\n-      owned {}\n-      _ { bcx_tcx(bcx).sess.span_bug(local.span,\n-           \"Someone forgot to document an invariant in init_ref_local!\"); }\n-    }\n-    ret alt::bind_irrefutable_pat(bcx, local.node.pat, val, false);\n-}\n-\n fn zero_alloca(cx: @block_ctxt, llptr: ValueRef, t: ty::t)\n     -> @block_ctxt {\n     let bcx = cx;\n@@ -3790,12 +3778,8 @@ fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n       ast::stmt_decl(d, _) {\n         alt d.node {\n           ast::decl_local(locals) {\n-            for (style, local) in locals {\n-                if style == ast::let_copy {\n-                    bcx = init_local(bcx, local);\n-                } else {\n-                    bcx = init_ref_local(bcx, local);\n-                }\n+            for local in locals {\n+                bcx = init_local(bcx, local);\n                 if bcx_ccx(cx).sess.opts.extra_debuginfo {\n                     debuginfo::create_local_var(bcx, local);\n                 }\n@@ -3924,9 +3908,7 @@ fn block_locals(b: ast::blk, it: fn(@ast::local)) {\n           ast::stmt_decl(d, _) {\n             alt d.node {\n               ast::decl_local(locals) {\n-                for (style, local) in locals {\n-                    if style == ast::let_copy { it(local); }\n-                }\n+                for local in locals { it(local); }\n               }\n               _ {/* fall through */ }\n             }"}, {"sha": "e6884d129fb592e8378a7dbe5af8c58db99b1941", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -576,7 +576,7 @@ fn expr_to_constr_arg(tcx: ty::ctxt, e: @expr) -> @constr_arg_use {\n     alt e.node {\n       expr_path(p) {\n         alt tcx.def_map.find(e.id) {\n-          some(def_local(id, _)) | some(def_arg(id, _)) |\n+          some(def_local(id)) | some(def_arg(id, _)) |\n           some(def_binding(id)) | some(def_upvar(id, _, _)) {\n             ret @respan(p.span,\n                         carg_ident({ident: p.node.idents[0], node: id.node}));\n@@ -786,7 +786,7 @@ enum if_ty { if_check, plain_if, }\n fn local_node_id_to_def_id_strict(fcx: fn_ctxt, sp: span, i: node_id) ->\n    def_id {\n     alt local_node_id_to_def(fcx, i) {\n-      some(def_local(id, _)) | some(def_arg(id, _)) |\n+      some(def_local(id)) | some(def_arg(id, _)) |\n       some(def_upvar(id, _, _)) {\n         ret id;\n       }\n@@ -810,7 +810,7 @@ fn local_node_id_to_def(fcx: fn_ctxt, i: node_id) -> option<def> {\n \n fn local_node_id_to_def_id(fcx: fn_ctxt, i: node_id) -> option<def_id> {\n     alt local_node_id_to_def(fcx, i) {\n-      some(def_local(id, _)) | some(def_arg(id, _)) | some(def_binding(id)) |\n+      some(def_local(id)) | some(def_arg(id, _)) | some(def_binding(id)) |\n       some(def_upvar(id, _, _)) {\n         some(id)\n       }\n@@ -1062,10 +1062,9 @@ fn local_to_bindings(tcx: ty::ctxt, loc: @local) -> binding {\n     {lhs: lhs, rhs: loc.node.init}\n }\n \n-fn locals_to_bindings(tcx: ty::ctxt,\n-                      locals: [(let_style, @local)]) -> [binding] {\n+fn locals_to_bindings(tcx: ty::ctxt, locals: [@local]) -> [binding] {\n     let rslt = [];\n-    for (_, loc) in locals { rslt += [local_to_bindings(tcx, loc)]; }\n+    for loc in locals { rslt += [local_to_bindings(tcx, loc)]; }\n     ret rslt;\n }\n "}, {"sha": "1fa390ca18bd7da975074419ae29739d85247cb3", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -185,7 +185,7 @@ fn clear_in_poststate_expr(fcx: fn_ctxt, e: @expr, t: poststate) {\n         alt vec::last(p.node.idents) {\n           some(i) {\n             alt local_node_id_to_def(fcx, e.id) {\n-              some(def_local(d_id, _)) {\n+              some(def_local(d_id)) {\n                 clear_in_poststate_(bit_num(fcx, ninit(d_id.node, i)), t);\n               }\n               some(_) {/* ignore args (for now...) */ }"}, {"sha": "66781428122e2de8de5b55fae36b3baec420574d", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -176,7 +176,7 @@ fn gen_if_local(fcx: fn_ctxt, lhs: @expr, rhs: @expr, larger_id: node_id,\n     alt node_id_to_def(fcx.ccx, new_var) {\n       some(d) {\n         alt d {\n-          def_local(d_id, _) {\n+          def_local(d_id) {\n             find_pre_post_expr(fcx, rhs);\n             let p = expr_pp(fcx.ccx, rhs);\n             set_pre_and_post(fcx.ccx, larger_id, p.precondition,\n@@ -214,7 +214,7 @@ fn handle_update(fcx: fn_ctxt, parent: @expr, lhs: @expr, rhs: @expr,\n             // pure and assign_op require the lhs to be init'd\n             let df = node_id_to_def_strict(fcx.ccx.tcx, lhs.id);\n             alt df {\n-              def_local(d_id, _) {\n+              def_local(d_id) {\n                 let i =\n                     bit_num(fcx,\n                             ninit(d_id.node, path_to_ident(p)));\n@@ -261,7 +261,7 @@ fn handle_var(fcx: fn_ctxt, rslt: pre_and_post, id: node_id, name: ident) {\n fn handle_var_def(fcx: fn_ctxt, rslt: pre_and_post, def: def, name: ident) {\n     log(debug, (\"handle_var_def: \", def, name));\n     alt def {\n-      def_local(d_id, _) | def_arg(d_id, _) {\n+      def_local(d_id) | def_arg(d_id, _) {\n         use_var(fcx, d_id.node);\n         let i = bit_num(fcx, ninit(d_id.node, name));\n         require_and_preserve(i, rslt);\n@@ -545,7 +545,7 @@ fn find_pre_post_stmt(fcx: fn_ctxt, s: stmt) {\n           decl_local(alocals) {\n             let e_pp;\n             let prev_pp = empty_pre_post(num_constraints(fcx.enclosing));\n-            for (_, alocal) in alocals {\n+            for alocal in alocals {\n                 alt alocal.node.init {\n                   some(an_init) {\n                     /* LHS always becomes initialized,"}, {"sha": "73c7f6a6847c15645c7ed55e5b208529460abb91", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -247,7 +247,7 @@ fn gen_if_local(fcx: fn_ctxt, p: poststate, e: @expr) -> bool {\n     alt e.node {\n       expr_path(pth) {\n         alt fcx.ccx.tcx.def_map.find(e.id) {\n-          some(def_local(loc, _)) {\n+          some(def_local(loc)) {\n             ret set_in_poststate_ident(fcx, loc.node,\n                                        path_to_ident(pth), p);\n           }"}, {"sha": "3aae6075eb45a6b2492f1d36fee4bc1fe9fdc77c", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -92,7 +92,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n         ret {bounds: @[], ty: typ};\n       }\n-      ast::def_local(id, _) {\n+      ast::def_local(id) {\n         assert (fcx.locals.contains_key(id.node));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n         ret {bounds: @[], ty: typ};\n@@ -2526,7 +2526,7 @@ fn check_stmt(fcx: @fn_ctxt, stmt: @ast::stmt) -> bool {\n         node_id = id;\n         alt decl.node {\n           ast::decl_local(ls) {\n-            for (_, l) in ls { bot |= check_decl_local(fcx, l); }\n+            for l in ls { bot |= check_decl_local(fcx, l); }\n           }\n           ast::decl_item(_) {/* ignore for now */ }\n         }"}, {"sha": "26a309d37f5c0dfc9f18542157027b2d825ea58c", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -38,7 +38,7 @@ enum def {\n     def_native_mod(def_id),\n     def_const(def_id),\n     def_arg(def_id, mode),\n-    def_local(def_id, let_style),\n+    def_local(def_id),\n     def_variant(def_id /* enum */, def_id /* variant */),\n     def_ty(def_id),\n     def_prim_ty(prim_ty),\n@@ -201,9 +201,7 @@ type local = spanned<local_>;\n \n type decl = spanned<decl_>;\n \n-enum let_style { let_copy, let_ref, }\n-\n-enum decl_ { decl_local([(let_style, @local)]), decl_item(@item), }\n+enum decl_ { decl_local([@local]), decl_item(@item), }\n \n type arm = {pats: [@pat], guard: option<@expr>, body: blk};\n "}, {"sha": "3511cd91853c7e5061d7b9dafdbe7ef99154eb38", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -28,7 +28,7 @@ fn variant_def_ids(d: def) -> {enm: def_id, var: def_id} {\n fn def_id_of_def(d: def) -> def_id {\n     alt d {\n       def_fn(id, _) | def_self(id) | def_mod(id) |\n-      def_native_mod(id) | def_const(id) | def_arg(id, _) | def_local(id, _) |\n+      def_native_mod(id) | def_const(id) | def_arg(id, _) | def_local(id) |\n       def_variant(_, id) | def_ty(id) | def_ty_param(id, _) |\n       def_binding(id) | def_use(id) | def_upvar(id, _, _) |\n       def_class(id) | def_class_field(_, id) | def_class_method(_, id) { id }"}, {"sha": "0ded2bebd62d3ffa2bd5c454496398a2888abca8", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -320,13 +320,10 @@ fn noop_fold_pat(p: pat_, fld: ast_fold) -> pat_ {\n }\n \n fn noop_fold_decl(d: decl_, fld: ast_fold) -> decl_ {\n-    ret alt d {\n-          decl_local(ls) {\n-            decl_local(vec::map(ls, {|l| let (st, lc) = l;\n-                                 (st, fld.fold_local(lc))}))\n-          }\n-          decl_item(it) { decl_item(fld.fold_item(it)) }\n-        }\n+    alt d {\n+      decl_local(ls) { decl_local(vec::map(ls, fld.fold_local)) }\n+      decl_item(it) { decl_item(fld.fold_item(it)) }\n+    }\n }\n \n fn wrap<T>(f: fn@(T, ast_fold) -> T)"}, {"sha": "d6c6a5edb96587c819fe47be653bddf2289d4808", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -1511,18 +1511,12 @@ fn parse_pat(p: parser) -> @ast::pat {\n             }\n         } else if is_plain_ident(p) &&\n                       alt p.look_ahead(1u) {\n-                        token::LPAREN | token::LBRACKET |\n-                            token::LT {\n-                          false\n-                        }\n+                        token::LPAREN | token::LBRACKET | token::LT { false }\n                         _ { true }\n                       } {\n             let name = parse_path(p);\n-            let sub = if eat(p, token::AT) {\n-                          some(parse_pat(p))\n-                      } else {\n-                          none\n-                      };\n+            let sub = if eat(p, token::AT) { some(parse_pat(p)) }\n+                      else { none };\n             pat = ast::pat_ident(name, sub);\n         } else {\n             let enum_path = parse_path_and_ty_param_substs(p, true);\n@@ -1563,17 +1557,10 @@ fn parse_local(p: parser, allow_init: bool) -> @ast::local {\n }\n \n fn parse_let(p: parser) -> @ast::decl {\n-    fn parse_let_style(p: parser) -> ast::let_style {\n-        if eat(p, token::BINOP(token::AND)) {\n-            ast::let_ref\n-        } else {\n-            ast::let_copy\n-        }\n-    }\n     let lo = p.span.lo;\n-    let locals = [(parse_let_style(p), parse_local(p, true))];\n+    let locals = [parse_local(p, true)];\n     while eat(p, token::COMMA) {\n-        locals += [(parse_let_style(p), parse_local(p, true))];\n+        locals += [parse_local(p, true)];\n     }\n     ret @spanned(lo, p.last_span.hi, ast::decl_local(locals));\n }"}, {"sha": "31360c5bc57e93e33afc5edcf461d383d6749ac8", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -1082,10 +1082,8 @@ fn print_decl(s: ps, decl: @ast::decl) {\n         space_if_not_bol(s);\n         ibox(s, indent_unit);\n         word_nbsp(s, \"let\");\n-        fn print_local(s: ps, loc_st: (ast::let_style, @ast::local)) {\n-            let (st, loc) = loc_st;\n+        fn print_local(s: ps, &&loc: @ast::local) {\n             ibox(s, indent_unit);\n-            if st == ast::let_ref { word(s.s, \"&\"); }\n             print_local_decl(s, loc);\n             end(s);\n             alt loc.node.init {"}, {"sha": "29d673f6560a7109f44495430f505e17c79d1331", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a31e56992a712b532350596af05186ac90613/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=fe8a31e56992a712b532350596af05186ac90613", "patch": "@@ -276,7 +276,7 @@ fn visit_stmt<E>(s: @stmt, e: E, v: vt<E>) {\n fn visit_decl<E>(d: @decl, e: E, v: vt<E>) {\n     alt d.node {\n       decl_local(locs) {\n-        for (_, loc) in locs { v.visit_local(loc, e, v); }\n+        for loc in locs { v.visit_local(loc, e, v); }\n       }\n       decl_item(it) { v.visit_item(it, e, v); }\n     }"}]}