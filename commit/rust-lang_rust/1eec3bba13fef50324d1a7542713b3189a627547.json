{"sha": "1eec3bba13fef50324d1a7542713b3189a627547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZWMzYmJhMTNmZWY1MDMyNGQxYTc1NDI3MTNiMzE4OWE2Mjc1NDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-06-05T22:53:17Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-28T14:44:15Z"}, "message": "librustc: Rename Const to Freeze", "tree": {"sha": "fa7f486ccaf1d14725e2615ab978acf64ce76c9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa7f486ccaf1d14725e2615ab978acf64ce76c9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eec3bba13fef50324d1a7542713b3189a627547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eec3bba13fef50324d1a7542713b3189a627547", "html_url": "https://github.com/rust-lang/rust/commit/1eec3bba13fef50324d1a7542713b3189a627547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eec3bba13fef50324d1a7542713b3189a627547/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d350981c0e8daa778d9760ba0e19b3157026e743", "url": "https://api.github.com/repos/rust-lang/rust/commits/d350981c0e8daa778d9760ba0e19b3157026e743", "html_url": "https://github.com/rust-lang/rust/commit/d350981c0e8daa778d9760ba0e19b3157026e743"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "e0ab2558e3fec57e43969cd86587e83d398f0df2", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -112,15 +112,15 @@ impl<'self> Condvar<'self> {\n pub struct ARC<T> { x: UnsafeAtomicRcBox<T> }\n \n /// Create an atomically reference counted wrapper.\n-pub fn ARC<T:Const + Owned>(data: T) -> ARC<T> {\n+pub fn ARC<T:Freeze + Owned>(data: T) -> ARC<T> {\n     ARC { x: UnsafeAtomicRcBox::new(data) }\n }\n \n /**\n  * Access the underlying data in an atomically reference counted\n  * wrapper.\n  */\n-impl<T:Const+Owned> ARC<T> {\n+impl<T:Freeze+Owned> ARC<T> {\n     pub fn get<'a>(&'a self) -> &'a T {\n         unsafe { &*self.x.get_immut() }\n     }\n@@ -133,7 +133,7 @@ impl<T:Const+Owned> ARC<T> {\n  * object. However, one of the `arc` objects can be sent to another task,\n  * allowing them to share the underlying data.\n  */\n-impl<T:Const + Owned> Clone for ARC<T> {\n+impl<T:Freeze + Owned> Clone for ARC<T> {\n     fn clone(&self) -> ARC<T> {\n         ARC { x: self.x.clone() }\n     }\n@@ -282,14 +282,14 @@ struct RWARC<T> {\n }\n \n /// Create a reader/writer ARC with the supplied data.\n-pub fn RWARC<T:Const + Owned>(user_data: T) -> RWARC<T> {\n+pub fn RWARC<T:Freeze + Owned>(user_data: T) -> RWARC<T> {\n     rw_arc_with_condvars(user_data, 1)\n }\n /**\n  * Create a reader/writer ARC with the supplied data and a specified number\n  * of condvars (as sync::rwlock_with_condvars).\n  */\n-pub fn rw_arc_with_condvars<T:Const + Owned>(\n+pub fn rw_arc_with_condvars<T:Freeze + Owned>(\n     user_data: T,\n     num_condvars: uint) -> RWARC<T>\n {\n@@ -299,7 +299,7 @@ pub fn rw_arc_with_condvars<T:Const + Owned>(\n     RWARC { x: UnsafeAtomicRcBox::new(data), }\n }\n \n-impl<T:Const + Owned> RWARC<T> {\n+impl<T:Freeze + Owned> RWARC<T> {\n     /// Duplicate a rwlock-protected ARC, as arc::clone.\n     pub fn clone(&self) -> RWARC<T> {\n         RWARC {\n@@ -309,7 +309,7 @@ impl<T:Const + Owned> RWARC<T> {\n \n }\n \n-impl<T:Const + Owned> RWARC<T> {\n+impl<T:Freeze + Owned> RWARC<T> {\n     /**\n      * Access the underlying data mutably. Locks the rwlock in write mode;\n      * other readers and writers will block.\n@@ -435,7 +435,7 @@ impl<T:Const + Owned> RWARC<T> {\n // lock it. This wraps the unsafety, with the justification that the 'lock'\n // field is never overwritten; only 'failed' and 'data'.\n #[doc(hidden)]\n-fn borrow_rwlock<T:Const + Owned>(state: *const RWARCInner<T>) -> *RWlock {\n+fn borrow_rwlock<T:Freeze + Owned>(state: *const RWARCInner<T>) -> *RWlock {\n     unsafe { cast::transmute(&const (*state).lock) }\n }\n \n@@ -452,7 +452,7 @@ pub struct RWReadMode<'self, T> {\n     token: sync::RWlockReadMode<'self>,\n }\n \n-impl<'self, T:Const + Owned> RWWriteMode<'self, T> {\n+impl<'self, T:Freeze + Owned> RWWriteMode<'self, T> {\n     /// Access the pre-downgrade RWARC in write mode.\n     pub fn write<U>(&mut self, blk: &fn(x: &mut T) -> U) -> U {\n         match *self {\n@@ -493,7 +493,7 @@ impl<'self, T:Const + Owned> RWWriteMode<'self, T> {\n     }\n }\n \n-impl<'self, T:Const + Owned> RWReadMode<'self, T> {\n+impl<'self, T:Freeze + Owned> RWReadMode<'self, T> {\n     /// Access the post-downgrade rwlock in read mode.\n     pub fn read<U>(&self, blk: &fn(x: &T) -> U) -> U {\n         match *self {"}, {"sha": "ca3229d4b25c85b4f0f880cb668b892b763741b9", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -13,10 +13,10 @@\n /** Task-local reference counted smart pointers\n \n Task-local reference counted smart pointers are an alternative to managed boxes with deterministic\n-destruction. They are restricted to containing types that are either `Owned` or `Const` (or both) to\n+destruction. They are restricted to containing types that are either `Owned` or `Freeze` (or both) to\n prevent cycles.\n \n-Neither `Rc<T>` or `RcMut<T>` is ever `Owned` and `RcMut<T>` is never `Const`. If `T` is `Const`, a\n+Neither `Rc<T>` or `RcMut<T>` is ever `Owned` and `RcMut<T>` is never `Freeze`. If `T` is `Freeze`, a\n cycle cannot be created with `Rc<T>` because there is no way to modify it after creation.\n \n */\n@@ -56,7 +56,7 @@ pub fn rc_from_owned<T: Owned>(value: T) -> Rc<T> {\n }\n \n // FIXME: #6516: should be a static method\n-pub fn rc_from_const<T: Const>(value: T) -> Rc<T> {\n+pub fn rc_from_const<T: Freeze>(value: T) -> Rc<T> {\n     unsafe { Rc::new(value) }\n }\n \n@@ -190,7 +190,7 @@ pub fn rc_mut_from_owned<T: Owned>(value: T) -> RcMut<T> {\n }\n \n // FIXME: #6516: should be a static method\n-pub fn rc_mut_from_const<T: Const>(value: T) -> RcMut<T> {\n+pub fn rc_mut_from_const<T: Freeze>(value: T) -> RcMut<T> {\n     unsafe { RcMut::new(value) }\n }\n "}, {"sha": "7a91f204b1312a6df8a1c825ef16200f1937c329", "filename": "src/librustc/middle/borrowck/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -539,14 +539,14 @@ mutable borrowed pointers.\n \n ### Restrictions for loans of const aliasable pointees\n \n-Const pointers are read-only. There may be `&mut` or `&` aliases, and\n+Freeze pointers are read-only. There may be `&mut` or `&` aliases, and\n we can not prevent *anything* but moves in that case. So the\n `RESTRICTIONS` function is only defined if `ACTIONS` is the empty set.\n Because moves from a `&const` or `@const` lvalue are never legal, it\n is not necessary to add any restrictions at all to the final\n result.\n \n-    RESTRICTIONS(*LV, []) = []                         // R-Deref-Const-Borrowed\n+    RESTRICTIONS(*LV, []) = []                         // R-Deref-Freeze-Borrowed\n       TYPE(LV) = &const Ty or @const Ty\n \n ### Restrictions for loans of mutable borrowed pointees"}, {"sha": "a867ea948025f605e008ca8418f03daeb101b419", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -125,7 +125,7 @@ impl RestrictionsContext {\n \n             mc::cat_deref(_, _, mc::region_ptr(m_const, _)) |\n             mc::cat_deref(_, _, mc::gc_ptr(m_const)) => {\n-                // R-Deref-Const-Borrowed\n+                // R-Deref-Freeze-Borrowed\n                 self.check_no_mutability_control(cmt, restrictions);\n                 Safe\n             }"}, {"sha": "94520b6faca6555d80774bcac8257192afbb2af9", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -1165,7 +1165,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n          * enum consisting of a newtyped Ty or a region) to ty's\n          * notion of ty param bounds, which can either be user-defined\n          * traits, or one of the four built-in traits (formerly known\n-         * as kinds): Const, Copy, and Send.\n+         * as kinds): Freeze, Copy, and Send.\n          */\n \n         let mut param_bounds = ty::ParamBounds {"}, {"sha": "ca167c3726ae23c89044b7d3509336b0c0bb4e58", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -152,7 +152,7 @@ pub fn header_kind(doc: doc::ItemTag) -> ~str {\n             ~\"Function\"\n         }\n         doc::ConstTag(_) => {\n-            ~\"Const\"\n+            ~\"Freeze\"\n         }\n         doc::EnumTag(_) => {\n             ~\"Enum\"\n@@ -786,7 +786,7 @@ mod test {\n     #[test]\n     fn should_write_const_header() {\n         let markdown = render(~\"static a: bool = true;\");\n-        assert!(markdown.contains(\"## Const `a`\\n\\n\"));\n+        assert!(markdown.contains(\"## Freeze `a`\\n\\n\"));\n     }\n \n     #[test]"}, {"sha": "4a85a8c871d6d4d07076f7169c853f40ecb8d135", "filename": "src/libstd/clone.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -22,7 +22,7 @@ by convention implementing the `Clone` trait and calling the\n \n */\n \n-use core::kinds::Const;\n+use core::kinds::Freeze;\n \n /// A common trait for cloning an object.\n pub trait Clone {\n@@ -113,16 +113,16 @@ impl<T: DeepClone> DeepClone for ~T {\n }\n \n // FIXME: #6525: should also be implemented for `T: Owned + DeepClone`\n-impl<T: Const + DeepClone> DeepClone for @T {\n-    /// Return a deep copy of the managed box. The `Const` trait is required to prevent performing\n+impl<T: Freeze + DeepClone> DeepClone for @T {\n+    /// Return a deep copy of the managed box. The `Freeze` trait is required to prevent performing\n     /// a deep clone of a potentially cyclical type.\n     #[inline]\n     fn deep_clone(&self) -> @T { @(**self).deep_clone() }\n }\n \n // FIXME: #6525: should also be implemented for `T: Owned + DeepClone`\n-impl<T: Const + DeepClone> DeepClone for @mut T {\n-    /// Return a deep copy of the managed box. The `Const` trait is required to prevent performing\n+impl<T: Freeze + DeepClone> DeepClone for @mut T {\n+    /// Return a deep copy of the managed box. The `Freeze` trait is required to prevent performing\n     /// a deep clone of a potentially cyclical type.\n     #[inline]\n     fn deep_clone(&self) -> @mut T { @mut (**self).deep_clone() }"}, {"sha": "9d5348ff98f0ada37869a2ab8e2edb2be39647df", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -57,13 +57,13 @@ pub trait Owned {\n \n #[cfg(stage0)]\n #[lang=\"const\"]\n-pub trait Const {\n+pub trait Freeze {\n     // empty.\n }\n \n #[cfg(not(stage0))]\n #[lang=\"freeze\"]\n-pub trait Const {\n+pub trait Freeze {\n     // empty.\n }\n "}, {"sha": "5959cdaf318c184d4c6838805b4c6a7dd8c705e6", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -30,7 +30,7 @@ Rust's prelude has three main parts:\n // Reexported core operators\n pub use either::{Either, Left, Right};\n pub use kinds::{Copy, Sized};\n-pub use kinds::{Const, Owned};\n+pub use kinds::{Freeze, Owned};\n pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Drop};"}, {"sha": "a9b0c3986f8b2fc856cd7b1ef0e117c37970b00b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -147,7 +147,7 @@ pub static crate_node_id: node_id = 0;\n // The AST represents all type param bounds as types.\n // typeck::collect::compute_bounds matches these against\n // the \"special\" built-in traits (see middle::lang_items) and\n-// detects Copy, Send, Owned, and Const.\n+// detects Copy, Send, Owned, and Freeze.\n pub enum TyParamBound {\n     TraitTyParamBound(@trait_ref),\n     RegionTyParamBound"}, {"sha": "df599596d7d00264cafb599c01ccc6bd248b1b3b", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -563,7 +563,7 @@ pub mod keywords {\n         // Strict keywords\n         As,\n         Break,\n-        Const,\n+        Freeze,\n         Copy,\n         Do,\n         Else,"}, {"sha": "3cdc4fd0fa106f8d35aabf1a9787c9d84baf5f75", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -21,7 +21,7 @@ pub struct Interner<T> {\n }\n \n // when traits can extend traits, we should extend index<uint,T> to get []\n-impl<T:Eq + IterBytes + Hash + Const + Copy> Interner<T> {\n+impl<T:Eq + IterBytes + Hash + Freeze + Copy> Interner<T> {\n     pub fn new() -> Interner<T> {\n         Interner {\n             map: @mut HashMap::new(),"}, {"sha": "8c491a4dfc83b1eb07ce73bf8d8755ecf57c340d", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -20,17 +20,17 @@ struct arc_destruct<T> {\n }\n \n #[unsafe_destructor]\n-impl<T:Const> Drop for arc_destruct<T> {\n+impl<T:Freeze> Drop for arc_destruct<T> {\n     fn drop(&self) {}\n }\n \n-fn arc_destruct<T:Const>(data: int) -> arc_destruct<T> {\n+fn arc_destruct<T:Freeze>(data: int) -> arc_destruct<T> {\n     arc_destruct {\n         _data: data\n     }\n }\n \n-fn arc<T:Const>(_data: T) -> arc_destruct<T> {\n+fn arc<T:Freeze>(_data: T) -> arc_destruct<T> {\n     arc_destruct(0)\n }\n "}, {"sha": "531d4eab53578a4657f58241067be0ebc6d96334", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -20,7 +20,7 @@ struct E {\n }\n \n impl A for E {\n-  fn b<F:Copy + Const,G>(_x: F) -> F { fail!() } //~ ERROR type parameter 0 requires `Const`\n+  fn b<F:Copy + Freeze,G>(_x: F) -> F { fail!() } //~ ERROR type parameter 0 requires `Freeze`\n }\n \n fn main() {}"}, {"sha": "180f13d03719529ce41a74f5116be50658d35b85", "filename": "src/test/compile-fail/issue-3177-mutable-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Fcompile-fail%2Fissue-3177-mutable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Fcompile-fail%2Fissue-3177-mutable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3177-mutable-struct.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n // error-pattern: instantiating a type parameter with an incompatible type\n-struct S<T:Const> {\n+struct S<T:Freeze> {\n     s: T,\n     cant_nest: ()\n }"}, {"sha": "db2172b2e570faadb2fce855e3fe5e82822be72b", "filename": "src/test/compile-fail/mutable-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Fcompile-fail%2Fmutable-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Fcompile-fail%2Fmutable-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -11,9 +11,9 @@\n #[mutable]\n enum Foo { A }\n \n-fn bar<T: Const>(_: T) {}\n+fn bar<T: Freeze>(_: T) {}\n \n fn main() {\n     let x = A;\n-    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `Foo`, which does not fulfill `Const`\n+    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `Foo`, which does not fulfill `Freeze`\n }"}, {"sha": "8511bcdcd3501182964924edb563feb0c13a4de6", "filename": "src/test/compile-fail/mutable-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Fcompile-fail%2Fmutable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Fcompile-fail%2Fmutable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-struct.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -11,9 +11,9 @@\n #[mutable]\n struct Foo { a: int }\n \n-fn bar<T: Const>(_: T) {}\n+fn bar<T: Freeze>(_: T) {}\n \n fn main() {\n     let x = Foo { a: 5 };\n-    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `Foo`, which does not fulfill `Const`\n+    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `Foo`, which does not fulfill `Freeze`\n }"}, {"sha": "05f586f76e950302ea8ce54567874fe92d9538b0", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -12,7 +12,7 @@\n // are const.\n \n \n-fn foo<T:Copy + Const>(x: T) -> T { x }\n+fn foo<T:Copy + Freeze>(x: T) -> T { x }\n \n struct F { field: int }\n "}, {"sha": "7f6535526312a4c57173bd349d7aa093476fd86e", "filename": "src/test/run-pass/issue-2611-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec3bba13fef50324d1a7542713b3189a627547/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs?ref=1eec3bba13fef50324d1a7542713b3189a627547", "patch": "@@ -12,7 +12,7 @@\n // than the traits require.\n \n trait A {\n-  fn b<C:Copy + Const,D>(x: C) -> C;\n+  fn b<C:Copy + Freeze,D>(x: C) -> C;\n }\n \n struct E {"}]}