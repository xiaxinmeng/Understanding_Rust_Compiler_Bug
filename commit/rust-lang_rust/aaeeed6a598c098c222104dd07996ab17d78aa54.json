{"sha": "aaeeed6a598c098c222104dd07996ab17d78aa54", "node_id": "C_kwDOAAsO6NoAKGFhZWVlZDZhNTk4YzA5OGMyMjIxMDRkZDA3OTk2YWIxN2Q3OGFhNTQ", "commit": {"author": {"name": "Rodrigo Mantini", "email": "rodrigo.mantini@gmail.com", "date": "2022-02-17T00:08:53Z"}, "committer": {"name": "Rodrigo Mantini", "email": "rodrigo.mantini@gmail.com", "date": "2022-02-17T19:16:14Z"}, "message": "trigger ptr_as_ptr inside macros", "tree": {"sha": "21662dd1fa3aece4b7357e508921e3e33c6e3a9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21662dd1fa3aece4b7357e508921e3e33c6e3a9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaeeed6a598c098c222104dd07996ab17d78aa54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaeeed6a598c098c222104dd07996ab17d78aa54", "html_url": "https://github.com/rust-lang/rust/commit/aaeeed6a598c098c222104dd07996ab17d78aa54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaeeed6a598c098c222104dd07996ab17d78aa54/comments", "author": {"login": "rsmantini", "id": 5944832, "node_id": "MDQ6VXNlcjU5NDQ4MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5944832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsmantini", "html_url": "https://github.com/rsmantini", "followers_url": "https://api.github.com/users/rsmantini/followers", "following_url": "https://api.github.com/users/rsmantini/following{/other_user}", "gists_url": "https://api.github.com/users/rsmantini/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsmantini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsmantini/subscriptions", "organizations_url": "https://api.github.com/users/rsmantini/orgs", "repos_url": "https://api.github.com/users/rsmantini/repos", "events_url": "https://api.github.com/users/rsmantini/events{/privacy}", "received_events_url": "https://api.github.com/users/rsmantini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsmantini", "id": 5944832, "node_id": "MDQ6VXNlcjU5NDQ4MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5944832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsmantini", "html_url": "https://github.com/rsmantini", "followers_url": "https://api.github.com/users/rsmantini/followers", "following_url": "https://api.github.com/users/rsmantini/following{/other_user}", "gists_url": "https://api.github.com/users/rsmantini/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsmantini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsmantini/subscriptions", "organizations_url": "https://api.github.com/users/rsmantini/orgs", "repos_url": "https://api.github.com/users/rsmantini/repos", "events_url": "https://api.github.com/users/rsmantini/events{/privacy}", "received_events_url": "https://api.github.com/users/rsmantini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4931cab709401cc8350598eab9bd51031c89565a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4931cab709401cc8350598eab9bd51031c89565a", "html_url": "https://github.com/rust-lang/rust/commit/4931cab709401cc8350598eab9bd51031c89565a"}], "stats": {"total": 69, "additions": 60, "deletions": 9}, "files": [{"sha": "51d47b35454c2ea97c7cb236abb5c2300586b765", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aaeeed6a598c098c222104dd07996ab17d78aa54/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaeeed6a598c098c222104dd07996ab17d78aa54/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=aaeeed6a598c098c222104dd07996ab17d78aa54", "patch": "@@ -419,6 +419,10 @@ impl_lint_pass!(Casts => [\n \n impl<'tcx> LateLintPass<'tcx> for Casts {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if !in_external_macro(cx.sess(), expr.span) {\n+            ptr_as_ptr::check(cx, expr, &self.msrv);\n+        }\n+\n         if expr.span.from_expansion() {\n             return;\n         }\n@@ -455,7 +459,6 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n         cast_ref_to_mut::check(cx, expr);\n         cast_ptr_alignment::check(cx, expr);\n         char_lit_as_u8::check(cx, expr);\n-        ptr_as_ptr::check(cx, expr, &self.msrv);\n     }\n \n     extract_msrv_attr!(LateContext);"}, {"sha": "9f283337c7e132d8d6d23de3c28ac50614d243ef", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aaeeed6a598c098c222104dd07996ab17d78aa54/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaeeed6a598c098c222104dd07996ab17d78aa54/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=aaeeed6a598c098c222104dd07996ab17d78aa54", "patch": "@@ -120,3 +120,10 @@ macro_rules! mut_mut {\n         let mut_mut_ty: &mut &mut u32 = &mut &mut 1u32;\n     };\n }\n+\n+#[macro_export]\n+macro_rules! ptr_as_ptr_cast {\n+    ($ptr: ident) => {\n+        $ptr as *const i32\n+    };\n+}"}, {"sha": "bea6be66a8e025ef2f4468b5bb41e556c4c4614c", "filename": "tests/ui/ptr_as_ptr.fixed", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aaeeed6a598c098c222104dd07996ab17d78aa54/tests%2Fui%2Fptr_as_ptr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/aaeeed6a598c098c222104dd07996ab17d78aa54/tests%2Fui%2Fptr_as_ptr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.fixed?ref=aaeeed6a598c098c222104dd07996ab17d78aa54", "patch": "@@ -1,8 +1,17 @@\n // run-rustfix\n+// aux-build:macro_rules.rs\n \n #![warn(clippy::ptr_as_ptr)]\n #![feature(custom_inner_attributes)]\n \n+extern crate macro_rules;\n+\n+macro_rules! cast_it {\n+    ($ptr: ident) => {\n+        $ptr.cast::<i32>()\n+    };\n+}\n+\n fn main() {\n     let ptr: *const u32 = &42_u32;\n     let mut_ptr: *mut u32 = &mut 42_u32;\n@@ -28,6 +37,12 @@ fn main() {\n     // Ensure the lint doesn't produce unnecessary turbofish for inferred types.\n     let _: *const i32 = ptr.cast();\n     let _: *mut i32 = mut_ptr.cast();\n+\n+    // Make sure the lint is triggered inside a macro\n+    let _ = cast_it!(ptr);\n+\n+    // Do not lint inside macros from external crates\n+    let _ = macro_rules::ptr_as_ptr_cast!(ptr);\n }\n \n fn _msrv_1_37() {"}, {"sha": "ca2616b0069a07003d5d99e6505f0c86922b9e4c", "filename": "tests/ui/ptr_as_ptr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aaeeed6a598c098c222104dd07996ab17d78aa54/tests%2Fui%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaeeed6a598c098c222104dd07996ab17d78aa54/tests%2Fui%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.rs?ref=aaeeed6a598c098c222104dd07996ab17d78aa54", "patch": "@@ -1,8 +1,17 @@\n // run-rustfix\n+// aux-build:macro_rules.rs\n \n #![warn(clippy::ptr_as_ptr)]\n #![feature(custom_inner_attributes)]\n \n+extern crate macro_rules;\n+\n+macro_rules! cast_it {\n+    ($ptr: ident) => {\n+        $ptr as *const i32\n+    };\n+}\n+\n fn main() {\n     let ptr: *const u32 = &42_u32;\n     let mut_ptr: *mut u32 = &mut 42_u32;\n@@ -28,6 +37,12 @@ fn main() {\n     // Ensure the lint doesn't produce unnecessary turbofish for inferred types.\n     let _: *const i32 = ptr as *const _;\n     let _: *mut i32 = mut_ptr as _;\n+\n+    // Make sure the lint is triggered inside a macro\n+    let _ = cast_it!(ptr);\n+\n+    // Do not lint inside macros from external crates\n+    let _ = macro_rules::ptr_as_ptr_cast!(ptr);\n }\n \n fn _msrv_1_37() {"}, {"sha": "c58c55cfd83a15c5ac671f19f37ff4f64be212a8", "filename": "tests/ui/ptr_as_ptr.stderr", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aaeeed6a598c098c222104dd07996ab17d78aa54/tests%2Fui%2Fptr_as_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaeeed6a598c098c222104dd07996ab17d78aa54/tests%2Fui%2Fptr_as_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.stderr?ref=aaeeed6a598c098c222104dd07996ab17d78aa54", "patch": "@@ -1,46 +1,57 @@\n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:10:13\n+  --> $DIR/ptr_as_ptr.rs:19:13\n    |\n LL |     let _ = ptr as *const i32;\n    |             ^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<i32>()`\n    |\n    = note: `-D clippy::ptr-as-ptr` implied by `-D warnings`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:11:13\n+  --> $DIR/ptr_as_ptr.rs:20:13\n    |\n LL |     let _ = mut_ptr as *mut i32;\n    |             ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast::<i32>()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:16:17\n+  --> $DIR/ptr_as_ptr.rs:25:17\n    |\n LL |         let _ = *ptr_ptr as *const i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*ptr_ptr).cast::<i32>()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:29:25\n+  --> $DIR/ptr_as_ptr.rs:38:25\n    |\n LL |     let _: *const i32 = ptr as *const _;\n    |                         ^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:30:23\n+  --> $DIR/ptr_as_ptr.rs:39:23\n    |\n LL |     let _: *mut i32 = mut_ptr as _;\n    |                       ^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:48:13\n+  --> $DIR/ptr_as_ptr.rs:11:9\n+   |\n+LL |         $ptr as *const i32\n+   |         ^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `$ptr.cast::<i32>()`\n+...\n+LL |     let _ = cast_it!(ptr);\n+   |             ------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `cast_it` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: `as` casting between raw pointers without changing its mutability\n+  --> $DIR/ptr_as_ptr.rs:63:13\n    |\n LL |     let _ = ptr as *const i32;\n    |             ^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<i32>()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:49:13\n+  --> $DIR/ptr_as_ptr.rs:64:13\n    |\n LL |     let _ = mut_ptr as *mut i32;\n    |             ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast::<i32>()`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}]}