{"sha": "97440b5899d2ff5376afff33396d67abc132dd2b", "node_id": "C_kwDOAAsO6NoAKDk3NDQwYjU4OTlkMmZmNTM3NmFmZmYzMzM5NmQ2N2FiYzEzMmRkMmI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-05T16:24:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-05T16:24:34Z"}, "message": "Rollup merge of #100157 - rust-lang:notriddle/use-map-instead-of-repeated-push, r=Dylan-DPC\n\nrustdoc: use `collect()` instead of repeatedly pushing", "tree": {"sha": "63813fadba6fd1f5f22d4a7fb91716ba16bedcf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63813fadba6fd1f5f22d4a7fb91716ba16bedcf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97440b5899d2ff5376afff33396d67abc132dd2b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi7URCCRBK7hj4Ov3rIwAA2CUIAEvyfjBkAmecQViV0hX2GbBG\nAyxLt9nXMrJlDUlxVlHSYY2abLaAxnPFt5tiInIG/ZI2y0alFZfeAxXyqlSNXYl4\n1KEqRb9oyXUIITHUHjqE4oi3lTm/Vqo6dGqcHH0zFTCovQdPdioFrtJg8p9O2+wQ\nj81U9xr8zvxF+mJwjy1iBtSoga15m8tcDxSU7pVAP1/yh1IGF+vUF8ccuq0Spmor\nLsEJqpqj+w2WD2ua3v9SYtXO/JBrivQ130ZLd9lnhFSCjX52DsjoIwwKcoSlvij6\nmV6QdOxHSJtmHLPdGRzWl1VgRRgIZWltMpkCrByKHQOSULqrnAQEX1XfxuB0GnQ=\n=7Axh\n-----END PGP SIGNATURE-----\n", "payload": "tree 63813fadba6fd1f5f22d4a7fb91716ba16bedcf1\nparent 721af40dcbde949c7334295eccbbae2b120ab3e8\nparent 70a6ae67090196d8b750809909d46fedb7754ff7\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659716674 +0530\ncommitter GitHub <noreply@github.com> 1659716674 +0530\n\nRollup merge of #100157 - rust-lang:notriddle/use-map-instead-of-repeated-push, r=Dylan-DPC\n\nrustdoc: use `collect()` instead of repeatedly pushing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97440b5899d2ff5376afff33396d67abc132dd2b", "html_url": "https://github.com/rust-lang/rust/commit/97440b5899d2ff5376afff33396d67abc132dd2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97440b5899d2ff5376afff33396d67abc132dd2b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "721af40dcbde949c7334295eccbbae2b120ab3e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/721af40dcbde949c7334295eccbbae2b120ab3e8", "html_url": "https://github.com/rust-lang/rust/commit/721af40dcbde949c7334295eccbbae2b120ab3e8"}, {"sha": "70a6ae67090196d8b750809909d46fedb7754ff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/70a6ae67090196d8b750809909d46fedb7754ff7", "html_url": "https://github.com/rust-lang/rust/commit/70a6ae67090196d8b750809909d46fedb7754ff7"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "5e6f3070d0bb2359514501c16743122383401ac6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/97440b5899d2ff5376afff33396d67abc132dd2b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97440b5899d2ff5376afff33396d67abc132dd2b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=97440b5899d2ff5376afff33396d67abc132dd2b", "patch": "@@ -1617,9 +1617,10 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             // HACK: pick the first `did` as the `did` of the trait object. Someone\n             // might want to implement \"native\" support for marker-trait-only\n             // trait objects.\n-            let mut dids = obj.principal_def_id().into_iter().chain(obj.auto_traits());\n-            let did = dids\n-                .next()\n+            let mut dids = obj.auto_traits();\n+            let did = obj\n+                .principal_def_id()\n+                .or_else(|| dids.next())\n                 .unwrap_or_else(|| panic!(\"found trait object `{:?}` with no traits?\", this));\n             let substs = match obj.principal() {\n                 Some(principal) => principal.skip_binder().substs,\n@@ -1630,19 +1631,18 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             inline::record_extern_fqn(cx, did, ItemType::Trait);\n \n             let lifetime = clean_middle_region(*reg);\n-            let mut bounds = vec![];\n-\n-            for did in dids {\n-                let empty = cx.tcx.intern_substs(&[]);\n-                let path = external_path(cx, did, false, vec![], empty);\n-                inline::record_extern_fqn(cx, did, ItemType::Trait);\n-                let bound = PolyTrait { trait_: path, generic_params: Vec::new() };\n-                bounds.push(bound);\n-            }\n+            let mut bounds = dids\n+                .map(|did| {\n+                    let empty = cx.tcx.intern_substs(&[]);\n+                    let path = external_path(cx, did, false, vec![], empty);\n+                    inline::record_extern_fqn(cx, did, ItemType::Trait);\n+                    PolyTrait { trait_: path, generic_params: Vec::new() }\n+                })\n+                .collect::<Vec<_>>();\n \n-            let mut bindings = vec![];\n-            for pb in obj.projection_bounds() {\n-                bindings.push(TypeBinding {\n+            let bindings = obj\n+                .projection_bounds()\n+                .map(|pb| TypeBinding {\n                     assoc: projection_to_path_segment(\n                         pb.skip_binder()\n                             .lift_to_tcx(cx.tcx)\n@@ -1656,8 +1656,8 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                     kind: TypeBindingKind::Equality {\n                         term: clean_middle_term(pb.skip_binder().term, cx),\n                     },\n-                });\n-            }\n+                })\n+                .collect();\n \n             let path = external_path(cx, did, false, bindings, substs);\n             bounds.insert(0, PolyTrait { trait_: path, generic_params: Vec::new() });"}]}