{"sha": "67fad0139f809b70d5890ffacff3be17645a4b7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZmFkMDEzOWY4MDliNzBkNTg5MGZmYWNmZjNiZTE3NjQ1YTRiN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-11T14:18:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-11T14:18:38Z"}, "message": "Auto merge of #6905 - ThibsG:fpSingleComponentPathImports5210, r=giraffate\n\nFix FP in `single_component_path_imports` lint\n\nFix FP in  `single_component_path_imports` lint when the import is reused with `self`, like in `use self::module`.\n\nFixes #5210\n\nchangelog: none", "tree": {"sha": "661f65464887fffeab5b0269e8db9be50978c65d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/661f65464887fffeab5b0269e8db9be50978c65d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67fad0139f809b70d5890ffacff3be17645a4b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67fad0139f809b70d5890ffacff3be17645a4b7d", "html_url": "https://github.com/rust-lang/rust/commit/67fad0139f809b70d5890ffacff3be17645a4b7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67fad0139f809b70d5890ffacff3be17645a4b7d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e20ba6a24425879de3b4dfd049a28e3d279fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e20ba6a24425879de3b4dfd049a28e3d279fe2", "html_url": "https://github.com/rust-lang/rust/commit/75e20ba6a24425879de3b4dfd049a28e3d279fe2"}, {"sha": "297e84f3f4b7ff3c2648e65b0f2c144982cfad63", "url": "https://api.github.com/repos/rust-lang/rust/commits/297e84f3f4b7ff3c2648e65b0f2c144982cfad63", "html_url": "https://github.com/rust-lang/rust/commit/297e84f3f4b7ff3c2648e65b0f2c144982cfad63"}], "stats": {"total": 238, "additions": 219, "deletions": 19}, "files": [{"sha": "6104103580e989fe56530b3bd767b56ac2b2af7a", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 109, "deletions": 16, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/67fad0139f809b70d5890ffacff3be17645a4b7d/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fad0139f809b70d5890ffacff3be17645a4b7d/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=67fad0139f809b70d5890ffacff3be17645a4b7d", "patch": "@@ -1,11 +1,10 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::in_macro;\n-use if_chain::if_chain;\n-use rustc_ast::{Item, ItemKind, UseTreeKind};\n+use rustc_ast::{ptr::P, Crate, Item, ItemKind, ModKind, UseTreeKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::edition::Edition;\n+use rustc_span::{edition::Edition, symbol::kw, Span, Symbol};\n \n declare_clippy_lint! {\n     /// **What it does:** Checking for imports with single component use path.\n@@ -38,26 +37,120 @@ declare_clippy_lint! {\n declare_lint_pass!(SingleComponentPathImports => [SINGLE_COMPONENT_PATH_IMPORTS]);\n \n impl EarlyLintPass for SingleComponentPathImports {\n-    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if_chain! {\n-            if !in_macro(item.span);\n-            if cx.sess.opts.edition >= Edition::Edition2018;\n-            if !item.vis.kind.is_pub();\n-            if let ItemKind::Use(use_tree) = &item.kind;\n-            if let segments = &use_tree.prefix.segments;\n-            if segments.len() == 1;\n-            if let UseTreeKind::Simple(None, _, _) = use_tree.kind;\n-            then {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &Crate) {\n+        if cx.sess.opts.edition < Edition::Edition2018 {\n+            return;\n+        }\n+        check_mod(cx, &krate.items);\n+    }\n+}\n+\n+fn check_mod(cx: &EarlyContext<'_>, items: &[P<Item>]) {\n+    // keep track of imports reused with `self` keyword,\n+    // such as `self::crypto_hash` in the example below\n+    // ```rust,ignore\n+    // use self::crypto_hash::{Algorithm, Hasher};\n+    // ```\n+    let mut imports_reused_with_self = Vec::new();\n+\n+    // keep track of single use statements\n+    // such as `crypto_hash` in the example below\n+    // ```rust,ignore\n+    // use crypto_hash;\n+    // ```\n+    let mut single_use_usages = Vec::new();\n+\n+    for item in items {\n+        track_uses(cx, &item, &mut imports_reused_with_self, &mut single_use_usages);\n+    }\n+\n+    for single_use in &single_use_usages {\n+        if !imports_reused_with_self.contains(&single_use.0) {\n+            let can_suggest = single_use.2;\n+            if can_suggest {\n                 span_lint_and_sugg(\n                     cx,\n                     SINGLE_COMPONENT_PATH_IMPORTS,\n-                    item.span,\n+                    single_use.1,\n                     \"this import is redundant\",\n                     \"remove it entirely\",\n                     String::new(),\n-                    Applicability::MachineApplicable\n+                    Applicability::MachineApplicable,\n+                );\n+            } else {\n+                span_lint_and_help(\n+                    cx,\n+                    SINGLE_COMPONENT_PATH_IMPORTS,\n+                    single_use.1,\n+                    \"this import is redundant\",\n+                    None,\n+                    \"remove this import\",\n                 );\n             }\n         }\n     }\n }\n+\n+fn track_uses(\n+    cx: &EarlyContext<'_>,\n+    item: &Item,\n+    imports_reused_with_self: &mut Vec<Symbol>,\n+    single_use_usages: &mut Vec<(Symbol, Span, bool)>,\n+) {\n+    if in_macro(item.span) || item.vis.kind.is_pub() {\n+        return;\n+    }\n+\n+    match &item.kind {\n+        ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) => {\n+            check_mod(cx, &items);\n+        },\n+        ItemKind::Use(use_tree) => {\n+            let segments = &use_tree.prefix.segments;\n+\n+            // keep track of `use some_module;` usages\n+            if segments.len() == 1 {\n+                if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n+                    let ident = &segments[0].ident;\n+                    single_use_usages.push((ident.name, item.span, true));\n+                }\n+                return;\n+            }\n+\n+            if segments.is_empty() {\n+                // keep track of `use {some_module, some_other_module};` usages\n+                if let UseTreeKind::Nested(trees) = &use_tree.kind {\n+                    for tree in trees {\n+                        let segments = &tree.0.prefix.segments;\n+                        if segments.len() == 1 {\n+                            if let UseTreeKind::Simple(None, _, _) = tree.0.kind {\n+                                let ident = &segments[0].ident;\n+                                single_use_usages.push((ident.name, tree.0.span, false));\n+                            }\n+                        }\n+                    }\n+                }\n+            } else {\n+                // keep track of `use self::some_module` usages\n+                if segments[0].ident.name == kw::SelfLower {\n+                    // simple case such as `use self::module::SomeStruct`\n+                    if segments.len() > 1 {\n+                        imports_reused_with_self.push(segments[1].ident.name);\n+                        return;\n+                    }\n+\n+                    // nested case such as `use self::{module1::Struct1, module2::Struct2}`\n+                    if let UseTreeKind::Nested(trees) = &use_tree.kind {\n+                        for tree in trees {\n+                            let segments = &tree.0.prefix.segments;\n+                            if !segments.is_empty() {\n+                                imports_reused_with_self.push(segments[0].ident.name);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        },\n+        _ => {},\n+    }\n+}"}, {"sha": "f66b445b7b6a35249600338185df6d6bb7774bb6", "filename": "tests/ui/single_component_path_imports.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.fixed?ref=67fad0139f809b70d5890ffacff3be17645a4b7d", "patch": "@@ -19,3 +19,16 @@ fn main() {\n     // False positive #5154, shouldn't trigger lint.\n     m!();\n }\n+\n+mod hello_mod {\n+    \n+    #[allow(dead_code)]\n+    fn hello_mod() {}\n+}\n+\n+mod hi_mod {\n+    use self::regex::{Regex, RegexSet};\n+    use regex;\n+    #[allow(dead_code)]\n+    fn hi_mod() {}\n+}"}, {"sha": "09d4865859584ed792063e9e6bb510a1b679c012", "filename": "tests/ui/single_component_path_imports.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.rs?ref=67fad0139f809b70d5890ffacff3be17645a4b7d", "patch": "@@ -19,3 +19,16 @@ fn main() {\n     // False positive #5154, shouldn't trigger lint.\n     m!();\n }\n+\n+mod hello_mod {\n+    use regex;\n+    #[allow(dead_code)]\n+    fn hello_mod() {}\n+}\n+\n+mod hi_mod {\n+    use self::regex::{Regex, RegexSet};\n+    use regex;\n+    #[allow(dead_code)]\n+    fn hi_mod() {}\n+}"}, {"sha": "7005fa8f125d36255c12bf6c8b93cf6644f64eba", "filename": "tests/ui/single_component_path_imports.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.stderr?ref=67fad0139f809b70d5890ffacff3be17645a4b7d", "patch": "@@ -1,10 +1,16 @@\n+error: this import is redundant\n+  --> $DIR/single_component_path_imports.rs:24:5\n+   |\n+LL |     use regex;\n+   |     ^^^^^^^^^^ help: remove it entirely\n+   |\n+   = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n+\n error: this import is redundant\n   --> $DIR/single_component_path_imports.rs:6:1\n    |\n LL | use regex;\n    | ^^^^^^^^^^ help: remove it entirely\n-   |\n-   = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "94117061b270da718a68172b91b920c1c18c434b", "filename": "tests/ui/single_component_path_imports_nested_first.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports_nested_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports_nested_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_nested_first.rs?ref=67fad0139f809b70d5890ffacff3be17645a4b7d", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+#![warn(clippy::single_component_path_imports)]\n+#![allow(unused_imports)]\n+\n+use regex;\n+use serde as edres;\n+pub use serde;\n+\n+fn main() {\n+    regex::Regex::new(r\"^\\d{4}-\\d{2}-\\d{2}$\").unwrap();\n+}\n+\n+mod root_nested_use_mod {\n+    use {regex, serde};\n+    #[allow(dead_code)]\n+    fn root_nested_use_mod() {}\n+}"}, {"sha": "0c3256c1ce43a71ea37159b4a65991603e493a59", "filename": "tests/ui/single_component_path_imports_nested_first.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr?ref=67fad0139f809b70d5890ffacff3be17645a4b7d", "patch": "@@ -0,0 +1,25 @@\n+error: this import is redundant\n+  --> $DIR/single_component_path_imports_nested_first.rs:14:10\n+   |\n+LL |     use {regex, serde};\n+   |          ^^^^^\n+   |\n+   = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n+   = help: remove this import\n+\n+error: this import is redundant\n+  --> $DIR/single_component_path_imports_nested_first.rs:14:17\n+   |\n+LL |     use {regex, serde};\n+   |                 ^^^^^\n+   |\n+   = help: remove this import\n+\n+error: this import is redundant\n+  --> $DIR/single_component_path_imports_nested_first.rs:5:1\n+   |\n+LL | use regex;\n+   | ^^^^^^^^^^ help: remove it entirely\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "94319ade0ac4b9672ad2064bab6844db2e634887", "filename": "tests/ui/single_component_path_imports_self_after.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports_self_after.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports_self_after.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_self_after.rs?ref=67fad0139f809b70d5890ffacff3be17645a4b7d", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+#![warn(clippy::single_component_path_imports)]\n+#![allow(unused_imports)]\n+\n+use self::regex::{Regex as xeger, RegexSet as tesxeger};\n+pub use self::{\n+    regex::{Regex, RegexSet},\n+    some_mod::SomeType,\n+};\n+use regex;\n+\n+mod some_mod {\n+    pub struct SomeType;\n+}\n+\n+fn main() {}"}, {"sha": "c7437b234566a95f08dd4794f7cecc2af1430adf", "filename": "tests/ui/single_component_path_imports_self_before.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports_self_before.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fad0139f809b70d5890ffacff3be17645a4b7d/tests%2Fui%2Fsingle_component_path_imports_self_before.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_self_before.rs?ref=67fad0139f809b70d5890ffacff3be17645a4b7d", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+#![warn(clippy::single_component_path_imports)]\n+#![allow(unused_imports)]\n+\n+use regex;\n+\n+use self::regex::{Regex as xeger, RegexSet as tesxeger};\n+pub use self::{\n+    regex::{Regex, RegexSet},\n+    some_mod::SomeType,\n+};\n+\n+mod some_mod {\n+    pub struct SomeType;\n+}\n+\n+fn main() {}"}]}