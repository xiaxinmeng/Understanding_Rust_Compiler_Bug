{"sha": "75c79bdb0204271e09220c4c59239bb85772ee93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1Yzc5YmRiMDIwNDI3MWUwOTIyMGM0YzU5MjM5YmI4NTc3MmVlOTM=", "commit": {"author": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2018-01-27T01:14:12Z"}, "committer": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2018-01-27T01:57:01Z"}, "message": "Fix ICE on const eval of union field\n\nMIR's `Const::get_field()` attempts to retrieve the value for a given\nfield in a constant. In the case of a union constant it was falling\nthrough to a generic `const_get_elt` based on the field index. As union\nfields don't have an index this caused an ICE in `llvm_field_index`.\n\nFix by simply returning the current value when accessing any field in a\nunion. This works because all union fields start at byte offset 0.\n\nThe added test uses `const_fn` it ensure the field is extracted using\nMIR's const evaluation. The crash is reproducible without it, however.\n\nFixes #47788", "tree": {"sha": "79da2b9cc5e24d3e99c96015c173c709106be51c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79da2b9cc5e24d3e99c96015c173c709106be51c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75c79bdb0204271e09220c4c59239bb85772ee93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75c79bdb0204271e09220c4c59239bb85772ee93", "html_url": "https://github.com/rust-lang/rust/commit/75c79bdb0204271e09220c4c59239bb85772ee93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75c79bdb0204271e09220c4c59239bb85772ee93/comments", "author": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bacb5c58dfdde7c35e99b2b0d8171238cc33cf6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bacb5c58dfdde7c35e99b2b0d8171238cc33cf6c", "html_url": "https://github.com/rust-lang/rust/commit/bacb5c58dfdde7c35e99b2b0d8171238cc33cf6c"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "f519e27dce98528f1a978e596ab3343cd88f8ad1", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c79bdb0204271e09220c4c59239bb85772ee93/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c79bdb0204271e09220c4c59239bb85772ee93/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=75c79bdb0204271e09220c4c59239bb85772ee93", "patch": "@@ -140,7 +140,10 @@ impl<'a, 'tcx> Const<'tcx> {\n                 }\n             }\n             _ => {\n-                const_get_elt(self.llval, layout.llvm_field_index(i))\n+                match layout.fields {\n+                    layout::FieldPlacement::Union(_) => self.llval,\n+                    _ => const_get_elt(self.llval, layout.llvm_field_index(i)),\n+                }\n             }\n         }\n     }"}, {"sha": "a58b8bc34cd058bcef88d214c9728fdf9e9c0128", "filename": "src/test/run-pass/union/union-const-eval-field.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/75c79bdb0204271e09220c4c59239bb85772ee93/src%2Ftest%2Frun-pass%2Funion%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c79bdb0204271e09220c4c59239bb85772ee93/src%2Ftest%2Frun-pass%2Funion%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-const-eval-field.rs?ref=75c79bdb0204271e09220c4c59239bb85772ee93", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+union DummyUnion {\n+    field1: i32,\n+    field2: i32,\n+}\n+\n+const fn read_field() -> i32 {\n+    const UNION: DummyUnion = DummyUnion { field1: 5 };\n+    const FIELD: i32 = unsafe { UNION.field2 };\n+    FIELD\n+}\n+\n+fn main() {\n+    assert_eq!(read_field(), 5);\n+}"}]}