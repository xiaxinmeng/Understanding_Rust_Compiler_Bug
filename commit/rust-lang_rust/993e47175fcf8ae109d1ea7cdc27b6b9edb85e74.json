{"sha": "993e47175fcf8ae109d1ea7cdc27b6b9edb85e74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5M2U0NzE3NWZjZjhhZTEwOWQxZWE3Y2RjMjdiNmI5ZWRiODVlNzQ=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-06-30T00:29:24Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-06T03:17:33Z"}, "message": "Comments and cleanup.", "tree": {"sha": "dd4ad47851accffa0e178c7c745a344320f83de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd4ad47851accffa0e178c7c745a344320f83de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/993e47175fcf8ae109d1ea7cdc27b6b9edb85e74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/993e47175fcf8ae109d1ea7cdc27b6b9edb85e74", "html_url": "https://github.com/rust-lang/rust/commit/993e47175fcf8ae109d1ea7cdc27b6b9edb85e74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/993e47175fcf8ae109d1ea7cdc27b6b9edb85e74/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f279e0d76e3cfb7753074bc4c77926c0e7e48990", "url": "https://api.github.com/repos/rust-lang/rust/commits/f279e0d76e3cfb7753074bc4c77926c0e7e48990", "html_url": "https://github.com/rust-lang/rust/commit/f279e0d76e3cfb7753074bc4c77926c0e7e48990"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "ed16bfc6f18df7d5452894328561ff49adb71df8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/993e47175fcf8ae109d1ea7cdc27b6b9edb85e74/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993e47175fcf8ae109d1ea7cdc27b6b9edb85e74/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=993e47175fcf8ae109d1ea7cdc27b6b9edb85e74", "patch": "@@ -180,8 +180,16 @@ type fn_ctxt =\n         // env*, int, int).  These are also available via\n         // llvm::LLVMGetParam(llfn, uint) where uint = 1, 2, 0 respectively,\n         // but we unpack them into these fields for convenience.\n+\n+        // Points to the current task.\n         ValueRef lltaskptr,\n+\n+        // Points to the current environment (bindings of variables to\n+        // values), if this is a regular function; points to the current\n+        // object, if this is a method.\n         ValueRef llenv,\n+\n+        // Points to where the return value of this function should end up.\n         ValueRef llretptr,\n \n         // The next three elements: \"hoisted basic blocks\" containing\n@@ -1726,19 +1734,19 @@ fn get_derived_tydesc(&@block_ctxt cx, &ty::t t, bool escapes,\n \n fn get_tydesc(&@block_ctxt cx, &ty::t t, bool escapes,\n               &mutable option::t[@tydesc_info] static_ti) -> result {\n-    // Is the supplied type a type param? If so, return the passed-in tydesc.\n \n+    // Is the supplied type a type param? If so, return the passed-in tydesc.\n     alt (ty::type_param(cx.fcx.lcx.ccx.tcx, t)) {\n         case (some(?id)) { ret rslt(cx, cx.fcx.lltydescs.(id)); }\n         case (none) {/* fall through */ }\n     }\n-    // Does it contain a type param? If so, generate a derived tydesc.\n \n+    // Does it contain a type param? If so, generate a derived tydesc.\n     if (ty::type_contains_params(cx.fcx.lcx.ccx.tcx, t)) {\n         ret get_derived_tydesc(cx, t, escapes, static_ti);\n     }\n-    // Otherwise, generate a tydesc if necessary, and return it.\n \n+    // Otherwise, generate a tydesc if necessary, and return it.\n     auto info = get_static_tydesc(cx, t, []);\n     static_ti = some[@tydesc_info](info);\n     ret rslt(cx, info.tydesc);\n@@ -5003,8 +5011,8 @@ fn trans_field(&@block_ctxt cx, &span sp, ValueRef v, &ty::t t0,\n                 r.bcx.build.GEP(r.val,\n                                 [C_int(0), C_int(abi::obj_field_vtbl)]);\n             vtbl = r.bcx.build.Load(vtbl);\n-            // +1 because slot #0 contains the destructor\n \n+            // +1 because slot #0 contains the destructor\n             auto v = r.bcx.build.GEP(vtbl, [C_int(0), C_int(ix + 1u as int)]);\n             auto lvo = lval_mem(r.bcx, v);\n             let ty::t fn_ty =\n@@ -7760,11 +7768,10 @@ fn trans_fn(@local_ctxt cx, &span sp, &ast::_fn f, ValueRef llfndecl,\n     if (!is_terminated(rslt.bcx)) {\n         // FIXME: until LLVM has a unit type, we are moving around\n         // C_nil values rather than their void type.\n-\n        rslt.bcx.build.RetVoid();\n     }\n-    // Insert the mandatory first few basic blocks before lltop.\n \n+    // Insert the mandatory first few basic blocks before lltop.\n     finish_fn(fcx, lltop);\n }\n "}]}