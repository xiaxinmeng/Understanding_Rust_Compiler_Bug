{"sha": "91509073c54a6f815a443f70fd8f9e505b750177", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNTA5MDczYzU0YTZmODE1YTQ0M2Y3MGZkOGY5ZTUwNWI3NTAxNzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-18T11:24:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-18T11:24:35Z"}, "message": "Merge #2298\n\n2298: Add ra_ide_api::expand r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ffc9afa4bd6f436e51eaa3de9758916a1bdc7124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffc9afa4bd6f436e51eaa3de9758916a1bdc7124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91509073c54a6f815a443f70fd8f9e505b750177", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd0n9zCRBK7hj4Ov3rIwAAdHIIAEnlzmAs2a8uPAxEWqbx2Rmp\n5f3KoKQc8Z3cVv3tp9ZVj8zgqF3bb8xsQRrJ7Kj1dwDUqKpy+DghHsZWiE3GfJVO\nr3/ICqHzNCE1x7qEvviFrKvSINmv3YJkkAhWFlrZCGBp93azj2CwT8ifhQv7m5V7\nH72yAoIN1vgzvoNNgs504ldG1+5wwKhBH3lGh7LLrHCoIVQ4NUGV1IvjUt1eN+zD\nNv9G/tqVX9a6vryS0OWAOyQOklrHATHzMrdK/WyJsS5j4RMNGQHAL0ojLoTpj290\nkgH1S92SGCRRhURAj66vNAJi+PnbyAb4hYGIMXxw0Db3p87I/ZemeBRIXTRPUoY=\n=RZhW\n-----END PGP SIGNATURE-----\n", "payload": "tree ffc9afa4bd6f436e51eaa3de9758916a1bdc7124\nparent 614c034ffc3a7120f125eede8323f01c8f4411d3\nparent 9fcd98e956a46d90c708abb9739f067a88ae3c4a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574076275 +0000\ncommitter GitHub <noreply@github.com> 1574076275 +0000\n\nMerge #2298\n\n2298: Add ra_ide_api::expand r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91509073c54a6f815a443f70fd8f9e505b750177", "html_url": "https://github.com/rust-lang/rust/commit/91509073c54a6f815a443f70fd8f9e505b750177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91509073c54a6f815a443f70fd8f9e505b750177/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "614c034ffc3a7120f125eede8323f01c8f4411d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/614c034ffc3a7120f125eede8323f01c8f4411d3", "html_url": "https://github.com/rust-lang/rust/commit/614c034ffc3a7120f125eede8323f01c8f4411d3"}, {"sha": "9fcd98e956a46d90c708abb9739f067a88ae3c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fcd98e956a46d90c708abb9739f067a88ae3c4a", "html_url": "https://github.com/rust-lang/rust/commit/9fcd98e956a46d90c708abb9739f067a88ae3c4a"}], "stats": {"total": 135, "additions": 74, "deletions": 61}, "files": [{"sha": "291b5ee40ac9d838610be5b671b137849452b4f7", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 26, "deletions": 39, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/91509073c54a6f815a443f70fd8f9e505b750177/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91509073c54a6f815a443f70fd8f9e505b750177/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=91509073c54a6f815a443f70fd8f9e505b750177", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{AssocItem, Either, FieldSource, HasSource, ModuleSource};\n+use hir::{AssocItem, Either, FieldSource, HasSource, ModuleSource, Source};\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner, NameOwner},\n@@ -9,8 +9,9 @@ use ra_syntax::{\n     SyntaxNode, TextRange,\n };\n \n+use crate::{db::RootDatabase, expand::original_range, FileSymbol};\n+\n use super::short_label::ShortLabel;\n-use crate::{db::RootDatabase, FileSymbol};\n \n /// `NavigationTarget` represents and element in the editor's UI which you can\n /// click on to navigate to a particular piece of code.\n@@ -79,12 +80,12 @@ impl NavigationTarget {\n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         if let Some(src) = module.declaration_source(db) {\n-            let (file_id, text_range) = find_range_from_node(db, src.file_id, src.ast.syntax());\n+            let frange = original_range(db, src.as_ref().map(|it| it.syntax()));\n             return NavigationTarget::from_syntax(\n-                file_id,\n+                frange.file_id,\n                 name,\n                 None,\n-                text_range,\n+                frange.range,\n                 src.ast.syntax(),\n                 src.ast.doc_comment_text(),\n                 src.ast.short_label(),\n@@ -147,14 +148,15 @@ impl NavigationTarget {\n     ) -> NavigationTarget {\n         //FIXME: use `_` instead of empty string\n         let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n-        let focus_range = node.name().map(|it| find_range_from_node(db, file_id, it.syntax()).1);\n-        let (file_id, full_range) = find_range_from_node(db, file_id, node.syntax());\n+        let focus_range =\n+            node.name().map(|it| original_range(db, Source::new(file_id, it.syntax())).range);\n+        let frange = original_range(db, Source::new(file_id, node.syntax()));\n \n         NavigationTarget::from_syntax(\n-            file_id,\n+            frange.file_id,\n             name,\n             focus_range,\n-            full_range,\n+            frange.range,\n             node.syntax(),\n             docs,\n             description,\n@@ -230,28 +232,28 @@ impl ToNav for hir::Module {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.definition_source(db);\n         let name = self.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n-        match src.ast {\n+        match &src.ast {\n             ModuleSource::SourceFile(node) => {\n-                let (file_id, text_range) = find_range_from_node(db, src.file_id, node.syntax());\n+                let frange = original_range(db, src.with_ast(node.syntax()));\n \n                 NavigationTarget::from_syntax(\n-                    file_id,\n+                    frange.file_id,\n                     name,\n                     None,\n-                    text_range,\n+                    frange.range,\n                     node.syntax(),\n                     None,\n                     None,\n                 )\n             }\n             ModuleSource::Module(node) => {\n-                let (file_id, text_range) = find_range_from_node(db, src.file_id, node.syntax());\n+                let frange = original_range(db, src.with_ast(node.syntax()));\n \n                 NavigationTarget::from_syntax(\n-                    file_id,\n+                    frange.file_id,\n                     name,\n                     None,\n-                    text_range,\n+                    frange.range,\n                     node.syntax(),\n                     node.doc_comment_text(),\n                     node.short_label(),\n@@ -264,13 +266,13 @@ impl ToNav for hir::Module {\n impl ToNav for hir::ImplBlock {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n-        let (file_id, text_range) = find_range_from_node(db, src.file_id, src.ast.syntax());\n+        let frange = original_range(db, src.as_ref().map(|it| it.syntax()));\n \n         NavigationTarget::from_syntax(\n-            file_id,\n+            frange.file_id,\n             \"impl\".into(),\n             None,\n-            text_range,\n+            frange.range,\n             src.ast.syntax(),\n             None,\n             None,\n@@ -282,21 +284,21 @@ impl ToNav for hir::StructField {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n \n-        match src.ast {\n+        match &src.ast {\n             FieldSource::Named(it) => NavigationTarget::from_named(\n                 db,\n                 src.file_id,\n-                &it,\n+                it,\n                 it.doc_comment_text(),\n                 it.short_label(),\n             ),\n             FieldSource::Pos(it) => {\n-                let (file_id, text_range) = find_range_from_node(db, src.file_id, it.syntax());\n+                let frange = original_range(db, src.with_ast(it.syntax()));\n                 NavigationTarget::from_syntax(\n-                    file_id,\n+                    frange.file_id,\n                     \"\".into(),\n                     None,\n-                    text_range,\n+                    frange.range,\n                     it.syntax(),\n                     None,\n                     None,\n@@ -360,21 +362,6 @@ impl ToNav for hir::Local {\n     }\n }\n \n-fn find_range_from_node(\n-    db: &RootDatabase,\n-    src: hir::HirFileId,\n-    node: &SyntaxNode,\n-) -> (FileId, TextRange) {\n-    let text_range = node.text_range();\n-    let (file_id, text_range) = src\n-        .expansion_info(db)\n-        .and_then(|expansion_info| expansion_info.find_range(text_range))\n-        .unwrap_or((src, text_range));\n-\n-    // FIXME: handle recursive macro generated macro\n-    (file_id.original_file(db), text_range)\n-}\n-\n pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n     let parse = db.parse(symbol.file_id);\n     let node = symbol.ptr.to_node(parse.tree().syntax());"}, {"sha": "5f1fb9a1269e6c7fe1a1c6ce782cc4908d2fdb95", "filename": "crates/ra_ide_api/src/expand.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/91509073c54a6f815a443f70fd8f9e505b750177/crates%2Fra_ide_api%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91509073c54a6f815a443f70fd8f9e505b750177/crates%2Fra_ide_api%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fexpand.rs?ref=91509073c54a6f815a443f70fd8f9e505b750177", "patch": "@@ -0,0 +1,42 @@\n+//! Utilities to work with files, produced by macros.\n+use std::iter::successors;\n+\n+use hir::Source;\n+use ra_db::FileId;\n+use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxToken};\n+\n+use crate::{db::RootDatabase, FileRange};\n+\n+pub(crate) fn original_range(db: &RootDatabase, node: Source<&SyntaxNode>) -> FileRange {\n+    let text_range = node.ast.text_range();\n+    let (file_id, range) = node\n+        .file_id\n+        .expansion_info(db)\n+        .and_then(|expansion_info| expansion_info.find_range(text_range))\n+        .unwrap_or((node.file_id, text_range));\n+\n+    // FIXME: handle recursive macro generated macro\n+    FileRange { file_id: file_id.original_file(db), range }\n+}\n+\n+pub(crate) fn descend_into_macros(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    token: SyntaxToken,\n+) -> Source<SyntaxToken> {\n+    let src = Source::new(file_id.into(), token);\n+\n+    successors(Some(src), |token| {\n+        let macro_call = token.ast.ancestors().find_map(ast::MacroCall::cast)?;\n+        let tt = macro_call.token_tree()?;\n+        if !token.ast.text_range().is_subrange(&tt.syntax().text_range()) {\n+            return None;\n+        }\n+        let source_analyzer =\n+            hir::SourceAnalyzer::new(db, token.with_ast(token.ast.parent()).as_ref(), None);\n+        let exp = source_analyzer.expand(db, &macro_call)?;\n+        exp.map_token_down(db, token.as_ref())\n+    })\n+    .last()\n+    .unwrap()\n+}"}, {"sha": "1a8db0ea07289884671efff9cdb64c50f68c74e5", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/91509073c54a6f815a443f70fd8f9e505b750177/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91509073c54a6f815a443f70fd8f9e505b750177/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=91509073c54a6f815a443f70fd8f9e505b750177", "patch": "@@ -1,16 +1,15 @@\n //! FIXME: write short doc here\n \n-use std::iter::successors;\n-\n use hir::{db::AstDatabase, Source};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner},\n-    match_ast, AstNode, SyntaxNode, SyntaxToken,\n+    match_ast, AstNode, SyntaxNode,\n };\n \n use crate::{\n     db::RootDatabase,\n     display::{ShortLabel, ToNav},\n+    expand::descend_into_macros,\n     references::{classify_name_ref, NameKind::*},\n     FilePosition, NavigationTarget, RangeInfo,\n };\n@@ -19,7 +18,9 @@ pub(crate) fn goto_definition(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let token = descend_into_macros(db, position)?;\n+    let file = db.parse_or_expand(position.file_id.into())?;\n+    let token = file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n+    let token = descend_into_macros(db, position.file_id, token);\n \n     let res = match_ast! {\n         match (token.ast.parent()) {\n@@ -39,24 +40,6 @@ pub(crate) fn goto_definition(\n     Some(res)\n }\n \n-fn descend_into_macros(db: &RootDatabase, position: FilePosition) -> Option<Source<SyntaxToken>> {\n-    let file = db.parse_or_expand(position.file_id.into())?;\n-    let token = file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n-\n-    successors(Some(Source::new(position.file_id.into(), token)), |token| {\n-        let macro_call = token.ast.ancestors().find_map(ast::MacroCall::cast)?;\n-        let tt = macro_call.token_tree()?;\n-        if !token.ast.text_range().is_subrange(&tt.syntax().text_range()) {\n-            return None;\n-        }\n-        let source_analyzer =\n-            hir::SourceAnalyzer::new(db, token.with_ast(token.ast.parent()).as_ref(), None);\n-        let exp = source_analyzer.expand(db, &macro_call)?;\n-        exp.map_token_down(db, token.as_ref())\n-    })\n-    .last()\n-}\n-\n #[derive(Debug)]\n pub(crate) enum ReferenceResult {\n     Exact(NavigationTarget),"}, {"sha": "110ddcd6265020d7d753a0f5db40e6f825d7cfcf", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91509073c54a6f815a443f70fd8f9e505b750177/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91509073c54a6f815a443f70fd8f9e505b750177/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=91509073c54a6f815a443f70fd8f9e505b750177", "patch": "@@ -41,6 +41,7 @@ mod matching_brace;\n mod display;\n mod inlay_hints;\n mod wasm_shims;\n+mod expand;\n \n #[cfg(test)]\n mod marks;"}]}