{"sha": "8618a558342e98b57f5b2e4697c615b1d0f9b735", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MThhNTU4MzQyZTk4YjU3ZjViMmU0Njk3YzYxNWIxZDBmOWI3MzU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-11T10:06:30Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-24T03:46:39Z"}, "message": "chains: treat some string lits as blocks", "tree": {"sha": "59d81f42cf05c7e1465f471405faae07a143e83b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59d81f42cf05c7e1465f471405faae07a143e83b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8618a558342e98b57f5b2e4697c615b1d0f9b735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8618a558342e98b57f5b2e4697c615b1d0f9b735", "html_url": "https://github.com/rust-lang/rust/commit/8618a558342e98b57f5b2e4697c615b1d0f9b735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8618a558342e98b57f5b2e4697c615b1d0f9b735/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481e85cc5847b02458288cc068816625a21dcfad", "url": "https://api.github.com/repos/rust-lang/rust/commits/481e85cc5847b02458288cc068816625a21dcfad", "html_url": "https://github.com/rust-lang/rust/commit/481e85cc5847b02458288cc068816625a21dcfad"}], "stats": {"total": 81, "additions": 42, "deletions": 39}, "files": [{"sha": "67390bc6b7cfabb690e172b0c2d6be8d36f23618", "filename": "src/chains.rs", "status": "modified", "additions": 42, "deletions": 39, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8618a558342e98b57f5b2e4697c615b1d0f9b735/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8618a558342e98b57f5b2e4697c615b1d0f9b735/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=8618a558342e98b57f5b2e4697c615b1d0f9b735", "patch": "@@ -71,7 +71,10 @@ use macros::convert_try_mac;\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use spanned::Spanned;\n-use utils::{first_line_width, last_line_extendable, last_line_width, mk_sp, wrap_str};\n+use utils::{\n+    first_line_width, last_line_extendable, last_line_width, mk_sp, trimmed_last_line_width,\n+    wrap_str,\n+};\n \n use std::borrow::Cow;\n use std::cmp::min;\n@@ -395,10 +398,11 @@ impl<'a> ChainFormatterShared<'a> {\n         let last = &self.children[0];\n         let extendable =\n             may_extend && last_line_extendable(&self.rewrites[self.rewrites.len() - 1]);\n+        let prev_last_line_width = last_line_width(&self.rewrites[self.rewrites.len() - 1]);\n \n         // Total of all items excluding the last.\n         let almost_total = if extendable {\n-            last_line_width(&self.rewrites[self.rewrites.len() - 1])\n+            prev_last_line_width\n         } else {\n             self.rewrites.iter().fold(0, |a, b| a + b.len())\n         } + last.tries;\n@@ -410,7 +414,7 @@ impl<'a> ChainFormatterShared<'a> {\n \n         let all_in_one_line =\n             self.rewrites.iter().all(|s| !s.contains('\\n')) && one_line_budget > 0;\n-        let last_shape = if all_in_one_line {\n+        let last_shape = if all_in_one_line || extendable {\n             shape.sub_width(last.tries)?\n         } else {\n             child_shape.sub_width(shape.rhs_overhead(context.config) + last.tries)?\n@@ -508,6 +512,37 @@ impl<'a> ChainFormatterBlock<'a> {\n             is_block_like: Vec::with_capacity(chain.children.len() + 1),\n         }\n     }\n+\n+    // States whether an expression's last line exclusively consists of closing\n+    // parens, braces, and brackets in its idiomatic formatting.\n+    fn is_block_expr(context: &RewriteContext, expr: &ast::Expr, repr: &str) -> bool {\n+        match expr.node {\n+            ast::ExprKind::Mac(..)\n+            | ast::ExprKind::Call(..)\n+            | ast::ExprKind::MethodCall(..)\n+            | ast::ExprKind::Struct(..)\n+            | ast::ExprKind::While(..)\n+            | ast::ExprKind::WhileLet(..)\n+            | ast::ExprKind::If(..)\n+            | ast::ExprKind::IfLet(..)\n+            | ast::ExprKind::Block(..)\n+            | ast::ExprKind::Loop(..)\n+            | ast::ExprKind::ForLoop(..)\n+            | ast::ExprKind::Match(..) => repr.contains('\\n'),\n+            ast::ExprKind::Paren(ref expr)\n+            | ast::ExprKind::Binary(_, _, ref expr)\n+            | ast::ExprKind::Index(_, ref expr)\n+            | ast::ExprKind::Unary(_, ref expr)\n+            | ast::ExprKind::Closure(_, _, _, _, ref expr, _)\n+            | ast::ExprKind::Try(ref expr)\n+            | ast::ExprKind::Yield(Some(ref expr)) => Self::is_block_expr(context, expr, repr),\n+            // This can only be a string lit\n+            ast::ExprKind::Lit(_) => {\n+                repr.contains('\\n') && trimmed_last_line_width(repr) <= context.config.tab_spaces()\n+            }\n+            _ => false,\n+        }\n+    }\n }\n \n impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n@@ -519,7 +554,7 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n     ) -> Option<()> {\n         let mut root_rewrite: String = parent.rewrite(context, shape)?;\n \n-        let mut root_ends_with_block = is_block_expr(context, &parent.expr, &root_rewrite);\n+        let mut root_ends_with_block = Self::is_block_expr(context, &parent.expr, &root_rewrite);\n         let tab_width = context.config.tab_spaces().saturating_sub(shape.offset);\n \n         while root_rewrite.len() <= tab_width && !root_rewrite.contains('\\n') {\n@@ -530,7 +565,7 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n                 None => break,\n             }\n \n-            root_ends_with_block = is_block_expr(context, &item.expr, &root_rewrite);\n+            root_ends_with_block = Self::is_block_expr(context, &item.expr, &root_rewrite);\n \n             self.shared.children = &self.shared.children[..self.shared.children.len() - 1];\n             if self.shared.children.is_empty() {\n@@ -554,7 +589,7 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n         for item in self.shared.children[1..].iter().rev() {\n             let rewrite = item.rewrite_postfix(context, child_shape)?;\n             self.is_block_like\n-                .push(is_block_expr(context, &item.expr, &rewrite));\n+                .push(Self::is_block_expr(context, &item.expr, &rewrite));\n             self.shared.rewrites.push(rewrite);\n         }\n         Some(())\n@@ -608,12 +643,7 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n             }\n         }\n \n-        // Parent is the first item in the chain, e.g., `foo` in `foo.bar.baz()`.\n-        let parent_shape = if is_block_expr(context, &parent.expr, \"\\n\") {\n-            shape.visual_indent(0)\n-        } else {\n-            shape\n-        };\n+        let parent_shape = shape.visual_indent(0);\n         let mut root_rewrite = parent.rewrite(context, parent_shape)?;\n \n         if !root_rewrite.contains('\\n') && is_continuable(&parent.expr) {\n@@ -661,30 +691,3 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n         self.shared.pure_root()\n     }\n }\n-\n-// States whether an expression's last line exclusively consists of closing\n-// parens, braces, and brackets in its idiomatic formatting.\n-fn is_block_expr(context: &RewriteContext, expr: &ast::Expr, repr: &str) -> bool {\n-    match expr.node {\n-        ast::ExprKind::Mac(..) | ast::ExprKind::Call(..) | ast::ExprKind::MethodCall(..) => {\n-            context.use_block_indent() && repr.contains('\\n')\n-        }\n-        ast::ExprKind::Struct(..)\n-        | ast::ExprKind::While(..)\n-        | ast::ExprKind::WhileLet(..)\n-        | ast::ExprKind::If(..)\n-        | ast::ExprKind::IfLet(..)\n-        | ast::ExprKind::Block(..)\n-        | ast::ExprKind::Loop(..)\n-        | ast::ExprKind::ForLoop(..)\n-        | ast::ExprKind::Match(..) => repr.contains('\\n'),\n-        ast::ExprKind::Paren(ref expr)\n-        | ast::ExprKind::Binary(_, _, ref expr)\n-        | ast::ExprKind::Index(_, ref expr)\n-        | ast::ExprKind::Unary(_, ref expr)\n-        | ast::ExprKind::Closure(_, _, _, _, ref expr, _)\n-        | ast::ExprKind::Try(ref expr)\n-        | ast::ExprKind::Yield(Some(ref expr)) => is_block_expr(context, expr, repr),\n-        _ => false,\n-    }\n-}"}]}