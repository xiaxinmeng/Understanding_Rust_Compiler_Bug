{"sha": "68378a7b9772a58c6b1035e998f7d4d6ee2a6725", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4Mzc4YTdiOTc3MmE1OGM2YjEwMzVlOTk4ZjdkNGQ2ZWUyYTY3MjU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-05-13T11:14:26Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-05-13T11:19:38Z"}, "message": "Rustup to rustc 1.27.0-nightly (ff2ac35db 2018-05-12)", "tree": {"sha": "dd93662e38a7bcbadde12b7eeeff3c323ad3d771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd93662e38a7bcbadde12b7eeeff3c323ad3d771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68378a7b9772a58c6b1035e998f7d4d6ee2a6725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68378a7b9772a58c6b1035e998f7d4d6ee2a6725", "html_url": "https://github.com/rust-lang/rust/commit/68378a7b9772a58c6b1035e998f7d4d6ee2a6725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68378a7b9772a58c6b1035e998f7d4d6ee2a6725/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a4c62c1673c3dabcc9a0c99018bd08fec46fda7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4c62c1673c3dabcc9a0c99018bd08fec46fda7", "html_url": "https://github.com/rust-lang/rust/commit/6a4c62c1673c3dabcc9a0c99018bd08fec46fda7"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "272c27e402196ee55c44f447c54a6db2965f5348", "filename": "src/fn_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68378a7b9772a58c6b1035e998f7d4d6ee2a6725/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68378a7b9772a58c6b1035e998f7d4d6ee2a6725/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=68378a7b9772a58c6b1035e998f7d4d6ee2a6725", "patch": "@@ -459,7 +459,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                             promoted: None,\n                         };\n                         let const_val = self.const_eval(cid)?;\n-                        let value = const_val.val.unwrap_u64();\n+                        let value = const_val.unwrap_usize(self.tcx.tcx);\n                         if value == name {\n                             result = Some(path_value);\n                             break;"}, {"sha": "deb1c5d5bc0790a3f4e392dc86a5531ae5a432ad", "filename": "src/validation.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/68378a7b9772a58c6b1035e998f7d4d6ee2a6725/src%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68378a7b9772a58c6b1035e998f7d4d6ee2a6725/src%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalidation.rs?ref=68378a7b9772a58c6b1035e998f7d4d6ee2a6725", "patch": "@@ -10,7 +10,7 @@ use rustc::infer::InferCtxt;\n use rustc::middle::region;\n use rustc::middle::const_val::ConstVal;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_mir::interpret::{HasMemory, eval_body};\n+use rustc_mir::interpret::HasMemory;\n \n use super::{EvalContext, Place, PlaceExtra, ValTy};\n use rustc::mir::interpret::{DynamicLifetime, AccessKind, EvalErrorKind, Value, EvalError, EvalResult};\n@@ -718,18 +718,17 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                     }\n                 }\n                 TyArray(elem_ty, len) => {\n-                    let len_val = match len.val {\n+                    let len = match len.val {\n                         ConstVal::Unevaluated(def_id, substs) => {\n-                            eval_body(self.tcx.tcx, GlobalId {\n+                            self.tcx.const_eval(self.tcx.param_env(def_id).and(GlobalId {\n                                 instance: Instance::new(def_id, substs),\n                                 promoted: None,\n-                            }, ty::ParamEnv::reveal_all())\n-                                .ok_or_else(||EvalErrorKind::MachineError(\"<already reported>\".to_string()))?\n-                                .0\n+                            }))\n+                                .map_err(|_err|EvalErrorKind::MachineError(\"<already reported>\".to_string()))?\n                         }\n-                        ConstVal::Value(val) => val,\n+                        ConstVal::Value(_) => len,\n                     };\n-                    let len = ConstVal::Value(len_val).unwrap_u64();\n+                    let len = len.unwrap_usize(self.tcx.tcx);\n                     for i in 0..len {\n                         let inner_place = self.place_index(query.place.1, query.ty, i as u64)?;\n                         self.validate("}]}