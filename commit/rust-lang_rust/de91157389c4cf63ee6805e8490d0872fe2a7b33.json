{"sha": "de91157389c4cf63ee6805e8490d0872fe2a7b33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlOTExNTczODljNGNmNjNlZTY4MDVlODQ5MGQwODcyZmUyYTdiMzM=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-08-04T22:23:19Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-08-04T22:23:19Z"}, "message": "add Box::try_new_zeroed_slice()\n\nCurrently there is no API that allows fallible zero-allocation of a Vec.\nVec.try_reserve is not appropriate for this job since it doesn't know\nwhether it should zero or arbitrary uninitialized memory is fine.\n\nSince Box currently holds most of the zeroing/uninit/slice allocation APIs\nit's the best place to add yet another entry into this feature matrix.", "tree": {"sha": "f60762dee327f1ac1778c801088836c6847b8731", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60762dee327f1ac1778c801088836c6847b8731"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de91157389c4cf63ee6805e8490d0872fe2a7b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de91157389c4cf63ee6805e8490d0872fe2a7b33", "html_url": "https://github.com/rust-lang/rust/commit/de91157389c4cf63ee6805e8490d0872fe2a7b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de91157389c4cf63ee6805e8490d0872fe2a7b33/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fe0886723c9e08b800c9951f1c6f6a57b2bf22c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe0886723c9e08b800c9951f1c6f6a57b2bf22c", "html_url": "https://github.com/rust-lang/rust/commit/6fe0886723c9e08b800c9951f1c6f6a57b2bf22c"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "e09cc2271054e39f21012cbfc40d19936e52f974", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/de91157389c4cf63ee6805e8490d0872fe2a7b33/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91157389c4cf63ee6805e8490d0872fe2a7b33/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=de91157389c4cf63ee6805e8490d0872fe2a7b33", "patch": "@@ -589,6 +589,38 @@ impl<T> Box<[T]> {\n     pub fn new_zeroed_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         unsafe { RawVec::with_capacity_zeroed(len).into_box(len) }\n     }\n+\n+    /// Constructs a new boxed slice with uninitialized contents, with the memory\n+    /// being filled with `0` bytes. Returns an error if the allocation fails\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\n+    /// of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api, new_uninit)]\n+    ///\n+    /// let values = Box::<[u32]>::try_new_zeroed_slice(3)?;\n+    /// let values = unsafe { values.assume_init() };\n+    ///\n+    /// assert_eq!(*values, [0, 0, 0]);\n+    /// # Ok::<(), std::alloc::AllocError>(())\n+    /// ```\n+    ///\n+    /// [zeroed]: mem::MaybeUninit::zeroed\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[inline]\n+    pub fn try_new_zeroed_slice(len: usize) -> Result<Box<[mem::MaybeUninit<T>]>, AllocError> {\n+        unsafe {\n+            let layout = match Layout::array::<mem::MaybeUninit<T>>(len) {\n+                Ok(l) => l,\n+                Err(_) => return Err(AllocError),\n+            };\n+            let ptr = Global.allocate_zeroed(layout)?;\n+            Ok(RawVec::from_raw_parts_in(ptr.as_mut_ptr() as *mut _, len, Global).into_box(len))\n+        }\n+    }\n }\n \n impl<T, A: Allocator> Box<[T], A> {"}]}