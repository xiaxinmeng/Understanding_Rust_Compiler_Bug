{"sha": "8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYzgwYmE5ZmM4YTI5N2UwNjMzYTRmNmU3ZmFkMWMzMzNjYmU4YjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-23T09:36:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-23T09:36:56Z"}, "message": "Auto merge of #24847 - sfackler:debug-builders-stability, r=aturon\n\nThe `debug_builders` feature is up for 1.1 stabilization in #24028. This commit stabilizes the API as-is with no changes.\r\n\r\nSome nits that @alexcrichton mentioned that may be worth discussing now if anyone cares:\r\n\r\n* Should `debug_tuple_struct` and `DebugTupleStruct` be used instead of `debug_tuple` and `DebugTuple`? It's more typing but is a technically more correct name.\r\n* `DebugStruct` and `DebugTuple` have `field` methods while `DebugSet`, `DebugMap` and `DebugList` have `entry` methods. Should we switch those to something else for consistency?\r\n\r\ncc @alexcrichton @aturon", "tree": {"sha": "b9e0be4d8e080327a79124d5d3d1ef0b460b0b25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9e0be4d8e080327a79124d5d3d1ef0b460b0b25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4", "html_url": "https://github.com/rust-lang/rust/commit/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f472403650e3f321b2dea893d890929af309695b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f472403650e3f321b2dea893d890929af309695b", "html_url": "https://github.com/rust-lang/rust/commit/f472403650e3f321b2dea893d890929af309695b"}, {"sha": "e161d5cf736f1340f299268163a677c5871af313", "url": "https://api.github.com/repos/rust-lang/rust/commits/e161d5cf736f1340f299268163a677c5871af313", "html_url": "https://github.com/rust-lang/rust/commit/e161d5cf736f1340f299268163a677c5871af313"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "f7e784d3892e7a2f5656a8b1f1b53b2615a7b4a7", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4", "patch": "@@ -39,7 +39,6 @@\n #![feature(str_char)]\n #![feature(str_words)]\n #![feature(slice_patterns)]\n-#![feature(debug_builders)]\n #![feature(utf8_error)]\n #![cfg_attr(test, feature(rand, rustc_private, test, hash, collections,\n                           collections_drain, collections_range))]"}, {"sha": "32d6aa19c64566e90212673866f8a25d573e23e8", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4", "patch": "@@ -54,6 +54,7 @@ impl<'a, 'b: 'a> fmt::Write for PadAdapter<'a, 'b> {\n ///\n /// Constructed by the `Formatter::debug_struct` method.\n #[must_use]\n+#[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugStruct<'a, 'b: 'a> {\n     fmt: &'a mut fmt::Formatter<'b>,\n     result: fmt::Result,\n@@ -72,7 +73,7 @@ pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str)\n \n impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     /// Adds a new field to the generated struct output.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn field(&mut self, name: &str, value: &fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n@@ -94,7 +95,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         if self.has_fields {\n             self.result = self.result.and_then(|_| {\n@@ -117,6 +118,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n ///\n /// Constructed by the `Formatter::debug_tuple` method.\n #[must_use]\n+#[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugTuple<'a, 'b: 'a> {\n     fmt: &'a mut fmt::Formatter<'b>,\n     result: fmt::Result,\n@@ -134,7 +136,7 @@ pub fn debug_tuple_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> D\n \n impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     /// Adds a new field to the generated tuple struct output.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn field(&mut self, value: &fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             let (prefix, space) = if self.has_fields {\n@@ -156,7 +158,7 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         if self.has_fields {\n             self.result = self.result.and_then(|_| {\n@@ -211,6 +213,7 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n ///\n /// Constructed by the `Formatter::debug_set` method.\n #[must_use]\n+#[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugSet<'a, 'b: 'a> {\n     inner: DebugInner<'a, 'b>,\n }\n@@ -228,14 +231,14 @@ pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b\n \n impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// Adds a new entry to the set output.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entry(&mut self, entry: &fmt::Debug) -> &mut DebugSet<'a, 'b> {\n         self.inner.entry(entry);\n         self\n     }\n \n     /// Adds the contents of an iterator of entries to the set output.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugSet<'a, 'b>\n             where D: fmt::Debug, I: IntoIterator<Item=D> {\n         for entry in entries {\n@@ -245,7 +248,7 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         self.inner.finish();\n         self.inner.result.and_then(|_| self.inner.fmt.write_str(\"}\"))\n@@ -256,6 +259,7 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n ///\n /// Constructed by the `Formatter::debug_list` method.\n #[must_use]\n+#[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugList<'a, 'b: 'a> {\n     inner: DebugInner<'a, 'b>,\n }\n@@ -273,14 +277,14 @@ pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a,\n \n impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     /// Adds a new entry to the list output.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entry(&mut self, entry: &fmt::Debug) -> &mut DebugList<'a, 'b> {\n         self.inner.entry(entry);\n         self\n     }\n \n     /// Adds the contents of an iterator of entries to the list output.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugList<'a, 'b>\n             where D: fmt::Debug, I: IntoIterator<Item=D> {\n         for entry in entries {\n@@ -290,7 +294,7 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         self.inner.finish();\n         self.inner.result.and_then(|_| self.inner.fmt.write_str(\"]\"))\n@@ -301,6 +305,7 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n ///\n /// Constructed by the `Formatter::debug_map` method.\n #[must_use]\n+#[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugMap<'a, 'b: 'a> {\n     fmt: &'a mut fmt::Formatter<'b>,\n     result: fmt::Result,\n@@ -318,7 +323,7 @@ pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b\n \n impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// Adds a new entry to the map output.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entry(&mut self, key: &fmt::Debug, value: &fmt::Debug) -> &mut DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n@@ -336,7 +341,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     }\n \n     /// Adds the contents of an iterator of entries to the map output.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entries<K, V, I>(&mut self, entries: I) -> &mut DebugMap<'a, 'b>\n             where K: fmt::Debug, V: fmt::Debug, I: IntoIterator<Item=(K, V)> {\n         for (k, v) in entries {\n@@ -346,7 +351,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         let prefix = if self.is_pretty() && self.has_fields { \"\\n\" } else { \"\" };\n         self.result.and_then(|_| write!(self.fmt, \"{}}}\", prefix))"}, {"sha": "da873f76d1bdd25daced4cd58e4880dc5310c3e2", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4", "patch": "@@ -719,7 +719,6 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo {\n@@ -739,7 +738,7 @@ impl<'a> Formatter<'a> {\n     /// // prints \"Foo { bar: 10, baz: \"Hello World\" }\"\n     /// println!(\"{:?}\", Foo { bar: 10, baz: \"Hello World\".to_string() });\n     /// ```\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     #[inline]\n     pub fn debug_struct<'b>(&'b mut self, name: &str) -> DebugStruct<'b, 'a> {\n         builders::debug_struct_new(self, name)\n@@ -751,7 +750,6 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo(i32, String);\n@@ -768,7 +766,7 @@ impl<'a> Formatter<'a> {\n     /// // prints \"Foo(10, \"Hello World\")\"\n     /// println!(\"{:?}\", Foo(10, \"Hello World\".to_string()));\n     /// ```\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     #[inline]\n     pub fn debug_tuple<'b>(&'b mut self, name: &str) -> DebugTuple<'b, 'a> {\n         builders::debug_tuple_new(self, name)\n@@ -780,7 +778,6 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo(Vec<i32>);\n@@ -794,7 +791,7 @@ impl<'a> Formatter<'a> {\n     /// // prints \"[10, 11]\"\n     /// println!(\"{:?}\", Foo(vec![10, 11]));\n     /// ```\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     #[inline]\n     pub fn debug_list<'b>(&'b mut self) -> DebugList<'b, 'a> {\n         builders::debug_list_new(self)\n@@ -806,7 +803,6 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo(Vec<i32>);\n@@ -820,7 +816,7 @@ impl<'a> Formatter<'a> {\n     /// // prints \"{10, 11}\"\n     /// println!(\"{:?}\", Foo(vec![10, 11]));\n     /// ```\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     #[inline]\n     pub fn debug_set<'b>(&'b mut self) -> DebugSet<'b, 'a> {\n         builders::debug_set_new(self)\n@@ -832,7 +828,6 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo(Vec<(String, i32)>);\n@@ -846,7 +841,7 @@ impl<'a> Formatter<'a> {\n     /// // prints \"{\"A\": 10, \"B\": 11}\"\n     /// println!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)]));\n     /// ```\n-    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     #[inline]\n     pub fn debug_map<'b>(&'b mut self) -> DebugMap<'b, 'a> {\n         builders::debug_map_new(self)"}, {"sha": "78c7215f5500920d4146ca7d582c8002b98834b1", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4", "patch": "@@ -20,7 +20,6 @@\n #![feature(std_misc)]\n #![feature(libc)]\n #![feature(hash)]\n-#![feature(debug_builders)]\n #![feature(unique)]\n #![feature(step_by)]\n #![feature(slice_patterns)]"}, {"sha": "1ad627cedd66e6d4b6a9f2c5289b8aae13e28f8a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4", "patch": "@@ -109,7 +109,6 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n-#![feature(debug_builders)]\n #![feature(into_cow)]\n #![feature(lang_items)]\n #![feature(libc)]"}, {"sha": "632ef5e0c8ad6b1eba099a638329304422b4a371", "filename": "src/test/run-pass/deriving-associated-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/src%2Ftest%2Frun-pass%2Fderiving-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4/src%2Ftest%2Frun-pass%2Fderiving-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-associated-types.rs?ref=8bc80ba9fc8a297e0633a4f6e7fad1c333cbe8b4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core, debug_builders)]\n+#![feature(core)]\n \n pub trait DeclaredTrait {\n     type Type;"}]}