{"sha": "f7833215b0a5f8e12d559b309254a8f235078802", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ODMzMjE1YjBhNWY4ZTEyZDU1OWIzMDkyNTRhOGYyMzUwNzg4MDI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-08T14:41:31Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-09T08:34:40Z"}, "message": "mk: rewrite the documentation handling.\n\nThis converts it to be very similar to crates.mk, with a single list of\nthe documentation items creating all the necessary bits and pieces.\n\nChanges include:\n- rustdoc is used to render HTML & test standalone docs\n- documentation building now obeys NO_REBUILD=1\n- testing standalone docs now obeys NO_REBUILD=1\n- L10N is slightly less broken (in particular, it shares dependencies\n  and code with the rest of the code)\n- PDFs can be built for all documentation items, not just tutorial and\n  manual\n- removes the obsolete & unused extract-tests.py script\n- adjust the CSS for standalone docs to use the rustdoc syntax\n  highlighting", "tree": {"sha": "f8bb125297625337c09bda6b439f91902eea368e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8bb125297625337c09bda6b439f91902eea368e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7833215b0a5f8e12d559b309254a8f235078802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7833215b0a5f8e12d559b309254a8f235078802", "html_url": "https://github.com/rust-lang/rust/commit/f7833215b0a5f8e12d559b309254a8f235078802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7833215b0a5f8e12d559b309254a8f235078802/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d7d7e59f9b37b431a4d6f3ab576c4bd197dc231", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7d7e59f9b37b431a4d6f3ab576c4bd197dc231", "html_url": "https://github.com/rust-lang/rust/commit/2d7d7e59f9b37b431a4d6f3ab576c4bd197dc231"}], "stats": {"total": 740, "additions": 235, "deletions": 505}, "files": [{"sha": "73813a4b7512b41a8a32e1d5f16c4b0f47f3ab1d", "filename": "mk/clean.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7833215b0a5f8e12d559b309254a8f235078802/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f7833215b0a5f8e12d559b309254a8f235078802/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=f7833215b0a5f8e12d559b309254a8f235078802", "patch": "@@ -41,7 +41,6 @@ clean-misc:\n \t@$(call E, cleaning)\n \t$(Q)rm -f $(RUNTIME_OBJS) $(RUNTIME_DEF)\n \t$(Q)rm -f $(RUSTLLVM_LIB_OBJS) $(RUSTLLVM_OBJS_OBJS) $(RUSTLLVM_DEF)\n-\t$(Q)rm -Rf $(DOCS)\n \t$(Q)rm -Rf $(GENERATED)\n \t$(Q)rm -Rf tmp/*\n \t$(Q)rm -Rf rust-stage0-*.tar.bz2 $(PKG_NAME)-*.tar.gz $(PKG_NAME)-*.exe dist"}, {"sha": "70560d41b8d4cc3227286f75a432cc1c862bef35", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7833215b0a5f8e12d559b309254a8f235078802/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f7833215b0a5f8e12d559b309254a8f235078802/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=f7833215b0a5f8e12d559b309254a8f235078802", "patch": "@@ -92,6 +92,7 @@ TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n ################################################################################\n \n DOC_CRATES := $(filter-out rustc, $(filter-out syntax, $(CRATES)))\n+COMPILER_DOC_CRATES := rustc syntax\n \n # This macro creates some simple definitions for each crate being built, just\n # some munging of all of the parameters above."}, {"sha": "f3fd94678ff136837efd7217849ed4c576393b0f", "filename": "mk/docs.mk", "status": "modified", "additions": 173, "deletions": 216, "changes": 389, "blob_url": "https://github.com/rust-lang/rust/blob/f7833215b0a5f8e12d559b309254a8f235078802/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f7833215b0a5f8e12d559b309254a8f235078802/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=f7833215b0a5f8e12d559b309254a8f235078802", "patch": "@@ -9,24 +9,93 @@\n # except according to those terms.\n \n ######################################################################\n-# Doc variables and rules\n+# The various pieces of standalone documentation: guides, tutorial,\n+# manual etc.\n+#\n+# The DOCS variable is their names (with no file extension).\n+#\n+# RUSTDOC_FLAGS_xyz variables are extra arguments to pass to the\n+# rustdoc invocation for xyz.\n+#\n+# RUSTDOC_DEPS_xyz are extra dependencies for the rustdoc invocation\n+# on xyz.\n+#\n+# L10N_LANGS are the languages for which the docs have been\n+# translated.\n ######################################################################\n+DOCS := index tutorial guide-ffi guide-macros guide-lifetimes \\\n+\tguide-tasks guide-container guide-pointers \\\n+\tcomplement-cheatsheet guide-runtime \\\n+\trust\n+\n+RUSTDOC_DEPS_rust := doc/full-toc.inc\n+RUSTDOC_FLAGS_rust := --markdown-in-header=doc/full-toc.inc\n+\n+L10N_LANGS := ja\n+\n+# Generally no need to edit below here.\n \n-DOCS :=\n-CDOCS :=\n-DOCS_L10N :=\n-HTML_DEPS := doc/\n+# The options are passed to the documentation generators.\n+RUSTDOC_HTML_OPTS = --markdown-css rust.css \\\n+\t--markdown-before-content=doc/version_info.html \\\n+\t--markdown-in-header=doc/favicon.inc --markdown-after-content=doc/footer.inc\n \n-BASE_DOC_OPTS := --standalone --toc --number-sections\n-HTML_OPTS = $(BASE_DOC_OPTS) --to=html5 --section-divs --css=rust.css \\\n-    --include-before-body=doc/version_info.html \\\n-    --include-in-header=doc/favicon.inc --include-after-body=doc/footer.inc\n-TEX_OPTS = $(BASE_DOC_OPTS) --include-before-body=doc/version.md \\\n-    --from=markdown --include-before-body=doc/footer.tex --to=latex\n-EPUB_OPTS = $(BASE_DOC_OPTS) --to=epub\n+PANDOC_BASE_OPTS := --standalone --toc --number-sections\n+PANDOC_TEX_OPTS = $(PANDOC_BASE_OPTS) --include-before-body=doc/version.md \\\n+\t--from=markdown --include-before-body=doc/footer.tex --to=latex\n+PANDOC_EPUB_OPTS = $(PANDOC_BASE_OPTS) --to=epub\n+\n+\n+\n+# The rustdoc executable...\n+RUSTDOC_EXE = $(HBIN2_H_$(CFG_BUILD))/rustdoc$(X_$(CFG_BUILD))\n+# ...with rpath included in case --disable-rpath was provided to\n+# ./configure\n+RUSTDOC = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(RUSTDOC_EXE)\n \n D := $(S)src/doc\n \n+DOC_TARGETS :=\n+COMPILER_DOC_TARGETS :=\n+DOC_L10N_TARGETS :=\n+\n+# If NO_REBUILD is set then break the dependencies on rustdoc so we\n+# build the documentation without having to rebuild rustdoc.\n+ifeq ($(NO_REBUILD),)\n+HTML_DEPS := $(RUSTDOC_EXE)\n+else\n+HTML_DEPS :=\n+endif\n+\n+# Check for the various external utilities for the EPUB/PDF docs:\n+\n+ifeq ($(CFG_PDFLATEX),)\n+  $(info cfg: no pdflatex found, omitting doc/rust.pdf)\n+  NO_PDF_DOCS = 1\n+else\n+  ifeq ($(CFG_XETEX),)\n+    $(info cfg: no xetex found, disabling doc/rust.pdf)\n+    NO_PDF_DOCS = 1\n+  else\n+    ifeq ($(CFG_LUATEX),)\n+       $(info cfg: lacking luatex, disabling pdflatex)\n+       NO_PDF_DOCS = 1\n+\tendif\n+  endif\n+endif\n+\n+\n+ifeq ($(CFG_PANDOC),)\n+$(info cfg: no pandoc found, omitting PDF and EPUB docs)\n+ONLY_HTML_DOCS = 1\n+endif\n+\n+ifeq ($(CFG_NODE),)\n+$(info cfg: no node found, omitting PDF and EPUB docs)\n+ONLY_HTML_DOCS = 1\n+endif\n+\n+\n ######################################################################\n # Rust version\n ######################################################################\n@@ -46,7 +115,7 @@ doc/version_info.html: $(D)/version_info.html.template $(MKFILE_DEPS) \\\n GENERATED += doc/version.md doc/version_info.html\n \n ######################################################################\n-# Docs, from pandoc, rustdoc (which runs pandoc), and node\n+# Docs, from rustdoc and sometimes pandoc & node\n ######################################################################\n \n doc/:\n@@ -75,184 +144,78 @@ doc/footer.tex: $(D)/footer.tex | doc/\n \t@$(call E, cp: $@)\n \t$(Q)cp -a $< $@ 2> /dev/null\n \n-ifeq ($(CFG_PANDOC),)\n-  $(info cfg: no pandoc found, omitting docs)\n-  NO_DOCS = 1\n-endif\n+# The (english) documentation for each doc item.\n \n-ifeq ($(CFG_NODE),)\n-  $(info cfg: no node found, omitting docs)\n-  NO_DOCS = 1\n-endif\n+define DEF_DOC\n+\n+# HTML (rustdoc)\n+DOC_TARGETS += doc/$(1).html\n+doc/$(1).html: $$(D)/$(1).md $$(HTML_DEPS) $$(RUSTDOC_DEPS_$(1)) | doc/\n+\t@$$(call E, rustdoc: $$@)\n+\t$$(RUSTDOC) $$(RUSTDOC_HTML_OPTS) $$(RUSTDOC_FLAGS_$(1)) $$<\n+\n+ifneq ($(ONLY_HTML_DOCS),1)\n+\n+# EPUB (pandoc directly)\n+DOC_TARGETS += doc/$(1).epub\n+doc/$(1).epub: $$(D)/$(1).md | doc/\n+\t@$$(call E, pandoc: $$@)\n+\t$$(Q)$$(CFG_NODE) $$(D)/prep.js --highlight $$< | \\\n+\t$$(CFG_PANDOC) $$(PANDOC_EPUB_OPTS) --output=$$@\n+\n+# PDF (md =(pandoc)=> tex =(pdflatex)=> pdf)\n+DOC_TARGETS += doc/$(1).tex\n+doc/$(1).tex: $$(D)/$(1).md doc/footer.tex doc/version.md | doc/\n+\t@$$(call E, pandoc: $$@)\n+\t$$(Q)$$(CFG_NODE) $$(D)/prep.js $$< | \\\n+\t$$(CFG_PANDOC) $$(PANDOC_TEX_OPTS) --output=$$@\n+\n+ifneq ($(NO_PDF_DOCS),1)\n+DOC_TARGETS += doc/$(1).pdf\n+doc/$(1).pdf: doc/$(1).tex\n+\t@$$(call E, pdflatex: $$@)\n+\t$$(Q)$$(CFG_PDFLATEX) \\\n+\t-interaction=batchmode \\\n+\t-output-directory=doc \\\n+\t$$<\n+endif # NO_PDF_DOCS\n+\n+endif # ONLY_HTML_DOCS\n+\n+endef\n+\n+$(foreach docname,$(DOCS),$(eval $(call DEF_DOC,$(docname))))\n \n-ifneq ($(NO_DOCS),1)\n-\n-DOCS += doc/rust.html\n-doc/rust.html: $(D)/rust.md doc/full-toc.inc $(HTML_DEPS) | doc/\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --include-in-header=doc/full-toc.inc --output=$@\n-\n-DOCS += doc/rust.tex\n-doc/rust.tex: $(D)/rust.md doc/footer.tex doc/version.md | doc/\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js $< | \\\n-\t$(CFG_PANDOC) $(TEX_OPTS) --output=$@\n-\n-DOCS += doc/rust.epub\n-doc/rust.epub: $(D)/rust.md | doc/\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(EPUB_OPTS) --output=$@\n-\n-DOCS += doc/rustdoc.html\n-doc/rustdoc.html: $(D)/rustdoc.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-DOCS += doc/tutorial.html\n-doc/tutorial.html: $(D)/tutorial.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-DOCS += doc/tutorial.tex\n-doc/tutorial.tex: $(D)/tutorial.md doc/footer.tex doc/version.md\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js $< | \\\n-\t$(CFG_PANDOC) $(TEX_OPTS) --output=$@\n-\n-DOCS += doc/tutorial.epub\n-doc/tutorial.epub: $(D)/tutorial.md\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(EPUB_OPTS) --output=$@\n-\n-\n-DOCS_L10N += doc/l10n/ja/tutorial.html\n-doc/l10n/ja/tutorial.html: doc/l10n/ja/tutorial.md doc/version_info.html doc/rust.css\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight doc/l10n/ja/tutorial.md | \\\n-          $(CFG_PANDOC) --standalone --toc \\\n-           --section-divs --number-sections \\\n-           --from=markdown --to=html5 --css=../../rust.css \\\n-           --include-before-body=doc/version_info.html \\\n-           --output=$@\n-\n-# Complementary documentation\n+\n+# Localized documentation\n+\n+# FIXME: I (huonw) haven't actually been able to test properly, since\n+# e.g. (by default) I'm doing an out-of-tree build (#12763), but even\n+# adjusting for that, the files are too old(?) and are rejected by\n+# po4a.\n #\n-DOCS += doc/index.html\n-doc/index.html: $(D)/index.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-DOCS += doc/complement-lang-faq.html\n-doc/complement-lang-faq.html: $(D)/complement-lang-faq.md doc/full-toc.inc $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --include-in-header=doc/full-toc.inc --output=$@\n-\n-DOCS += doc/complement-project-faq.html\n-doc/complement-project-faq.html: $(D)/complement-project-faq.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-DOCS += doc/complement-cheatsheet.html\n-doc/complement-cheatsheet.html: $(D)/complement-cheatsheet.md doc/full-toc.inc $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --include-in-header=doc/full-toc.inc --output=$@\n-\n-DOCS += doc/complement-bugreport.html\n-doc/complement-bugreport.html: $(D)/complement-bugreport.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-# Guides\n-\n-DOCS += doc/guide-macros.html\n-doc/guide-macros.html: $(D)/guide-macros.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-DOCS += doc/guide-container.html\n-doc/guide-container.html: $(D)/guide-container.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-DOCS += doc/guide-ffi.html\n-doc/guide-ffi.html: $(D)/guide-ffi.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-DOCS += doc/guide-testing.html\n-doc/guide-testing.html: $(D)/guide-testing.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-DOCS += doc/guide-lifetimes.html\n-doc/guide-lifetimes.html: $(D)/guide-lifetimes.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-DOCS += doc/guide-tasks.html\n-doc/guide-tasks.html: $(D)/guide-tasks.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-DOCS += doc/guide-pointers.html\n-doc/guide-pointers.html: $(D)/guide-pointers.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-DOCS += doc/guide-runtime.html\n-doc/guide-runtime.html: $(D)/guide-runtime.md $(HTML_DEPS)\n-\t@$(call E, pandoc: $@)\n-\t$(Q)$(CFG_NODE) $(D)/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n-\n-  ifeq ($(CFG_PDFLATEX),)\n-    $(info cfg: no pdflatex found, omitting doc/rust.pdf)\n-  else\n-    ifeq ($(CFG_XETEX),)\n-      $(info cfg: no xetex found, disabling doc/rust.pdf)\n-    else\n-      ifeq ($(CFG_LUATEX),)\n-        $(info cfg: lacking luatex, disabling pdflatex)\n-      else\n-\n-DOCS += doc/rust.pdf\n-doc/rust.pdf: doc/rust.tex\n-\t@$(call E, pdflatex: $@)\n-\t$(Q)$(CFG_PDFLATEX) \\\n-        -interaction=batchmode \\\n-        -output-directory=doc \\\n-        $<\n-\n-DOCS += doc/tutorial.pdf\n-doc/tutorial.pdf: doc/tutorial.tex\n-\t@$(call E, pdflatex: $@)\n-\t$(Q)$(CFG_PDFLATEX) \\\n-        -interaction=batchmode \\\n-        -output-directory=doc \\\n-        $<\n-\n-      endif\n-    endif\n-  endif\n+# As such, I've attempted to get it working as much as possible (and\n+# switching from pandoc to rustdoc), but preserving the old behaviour\n+# (e.g. only running on the tutorial)\n+.PHONY: l10n-mds\n+l10n-mds: $(D)/po4a.conf \\\n+\t\t$(foreach lang,$(L10N_LANG),$(D)/po/$(lang)/*.md.po)\n+\t$(warning WARNING: localized documentation is experimental)\n+\tpo4a --copyright-holder=\"The Rust Project Developers\" \\\n+\t\t--package-name=\"Rust\" \\\n+\t\t--package-version=\"$(CFG_RELEASE)\" \\\n+\t\t-M UTF-8 -L UTF-8 \\\n+\t\t$(D)/po4a.conf\n+\n+define DEF_L10N_DOC\n+DOC_L10N_TARGETS += doc/l10n/$(1)/$(2).html\n+doc/l10n/$(1)/$(2).html: l10n-mds $$(HTML_DEPS) $$(RUSTDOC_DEPS_$(2))\n+\t@$$(call E, rustdoc: $$@)\n+\t$$(RUSTDOC) $$(RUSTDOC_HTML_OPTS) $$(RUSTDOC_FLAGS_$(1)) doc/l10n/$(1)/$(2).md\n+endef\n+\n+$(foreach lang,$(L10N_LANGS),$(eval $(call DEF_L10N_DOC,$(lang),tutorial)))\n \n-endif # No pandoc / node\n \n ######################################################################\n # LLnextgen (grammar analysis from refman)\n@@ -278,50 +241,44 @@ endif\n # Rustdoc (libstd/extra)\n ######################################################################\n \n-# The rustdoc executable, rpath included in case --disable-rpath was provided to\n-# ./configure\n-RUSTDOC = $(HBIN2_H_$(CFG_BUILD))/rustdoc$(X_$(CFG_BUILD))\n \n # The library documenting macro\n #\n # $(1) - The crate name (std/extra)\n #\n # Passes --cfg stage2 to rustdoc because it uses the stage2 librustc.\n-define libdoc\n-doc/$(1)/index.html:\t\t\t\t\t\t\t    \\\n-\t    $$(CRATEFILE_$(1))\t\t\t\t\t\t    \\\n-\t    $$(RSINPUTS_$(1))\t\t\t\t\t\t    \\\n-\t    $$(RUSTDOC)\t\t\t\t\t\t\t    \\\n-\t    $$(foreach dep,$$(RUST_DEPS_$(1)),\t\t\t\t    \\\n+define DEF_LIB_DOC\n+\n+# If NO_REBUILD is set then break the dependencies on rustdoc so we\n+# build crate documentation without having to rebuild rustdoc.\n+ifeq ($(NO_REBUILD),)\n+LIB_DOC_DEP_$(1) = \\\n+\t$$(CRATEFILE_$(1)) \\\n+\t$$(RSINPUTS_$(1)) \\\n+\t$$(RUSTDOC_EXE) \\\n+\t$$(foreach dep,$$(RUST_DEPS_$(1)), \\\n \t\t$$(TLIB2_T_$(CFG_BUILD)_H_$(CFG_BUILD))/stamp.$$(dep))\n-\t@$$(call E, rustdoc: $$@)\n-\t$$(Q)$$(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $$(RUSTDOC) \\\n-\t    --cfg stage2 $$<\n+else\n+LIB_DOC_DEP_$(1) = $$(CRATEFILE_$(1)) $$(RSINPUTS_$(1))\n+endif\n \n+$(2) += doc/$(1)/index.html\n+doc/$(1)/index.html: $$(LIB_DOC_DEP_$(1))\n+\t@$$(call E, rustdoc $$@)\n+\t$$(Q)$$(RUSTDOC) --cfg stage2 $$<\n endef\n \n-$(foreach crate,$(CRATES),$(eval $(call libdoc,$(crate))))\n-\n-DOCS += $(DOC_CRATES:%=doc/%/index.html)\n-\n-CDOCS += doc/rustc/index.html\n-CDOCS += doc/syntax/index.html\n+$(foreach crate,$(DOC_CRATES),$(eval $(call DEF_LIB_DOC,$(crate),DOC_TARGETS)))\n+$(foreach crate,$(COMPILER_DOC_CRATES),$(eval $(call DEF_LIB_DOC,$(crate),COMPILER_DOC_TARGETS)))\n \n ifdef CFG_DISABLE_DOCS\n   $(info cfg: disabling doc build (CFG_DISABLE_DOCS))\n-  DOCS :=\n+  DOC_TARGETS :=\n endif\n \n-docs: $(DOCS)\n-compiler-docs: $(CDOCS)\n-\n-docs-l10n: $(DOCS_L10N)\n+docs: $(DOC_TARGETS)\n+compiler-docs: $(COMPILER_DOC_TARGETS)\n \n-doc/l10n/%.md: doc/po/%.md.po doc/po4a.conf\n-\tpo4a --copyright-holder=\"The Rust Project Developers\" \\\n-\t     --package-name=\"Rust\" \\\n-\t     --package-version=\"$(CFG_RELEASE)\" \\\n-\t     -M UTF-8 -L UTF-8 \\\n-\t     doc/po4a.conf\n+docs-l10n: $(DOC_L10N_TARGETS)\n \n .PHONY: docs-l10n"}, {"sha": "8f48918d31aebf7e45fdde08fc8452f36ac4c611", "filename": "mk/tests.mk", "status": "modified", "additions": 49, "deletions": 52, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/f7833215b0a5f8e12d559b309254a8f235078802/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f7833215b0a5f8e12d559b309254a8f235078802/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=f7833215b0a5f8e12d559b309254a8f235078802", "patch": "@@ -19,12 +19,6 @@ TEST_DOC_CRATES = $(DOC_CRATES)\n TEST_HOST_CRATES = $(HOST_CRATES)\n TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n \n-# Markdown files under doc/ that should have their code extracted and run\n-DOC_TEST_NAMES = tutorial guide-ffi guide-macros guide-lifetimes \\\n-                 guide-tasks guide-container guide-pointers \\\n-                 complement-cheatsheet guide-runtime \\\n-                 rust\n-\n ######################################################################\n # Environment configuration\n ######################################################################\n@@ -318,7 +312,7 @@ check-stage$(1)-T-$(2)-H-$(3)-doc-crates-exec: \\\n            check-stage$(1)-T-$(2)-H-$(3)-doc-$$(crate)-exec)\n \n check-stage$(1)-T-$(2)-H-$(3)-doc-exec: \\\n-        $$(foreach docname,$$(DOC_TEST_NAMES), \\\n+        $$(foreach docname,$$(DOCS), \\\n            check-stage$(1)-T-$(2)-H-$(3)-doc-$$(docname)-exec)\n \n check-stage$(1)-T-$(2)-H-$(3)-pretty-exec: \\\n@@ -662,54 +656,77 @@ $(foreach host,$(CFG_HOST), \\\n    $(foreach pretty-name,$(PRETTY_NAMES), \\\n     $(eval $(call DEF_RUN_PRETTY_TEST,$(stage),$(target),$(host),$(pretty-name)))))))\n \n-define DEF_RUN_DOC_TEST\n \n-DOC_TEST_ARGS$(1)-T-$(2)-H-$(3)-doc-$(4) := \\\n-        $$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $(3)/test/doc-$(4)/\t\\\n-        --build-base $(3)/test/doc-$(4)/\t\\\n-        --mode run-pass\n+######################################################################\n+# Crate & freestanding documentation tests\n+######################################################################\n+\n+define DEF_RUSTDOC\n+RUSTDOC_EXE_$(1)_T_$(2)_H_$(3) := $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3))\n+RUSTDOC_$(1)_T_$(2)_H_$(3) := $$(RPATH_VAR$(1)_T_$(2)_H_$(3)) $$(RUSTDOC_EXE_$(1)_T_$(2)_H_$(3))\n+endef\n+\n+$(foreach host,$(CFG_HOST), \\\n+ $(foreach target,$(CFG_TARGET), \\\n+  $(foreach stage,$(STAGES), \\\n+   $(eval $(call DEF_RUSTDOC,$(stage),$(target),$(host))))))\n+\n+# Freestanding\n+\n+define DEF_DOC_TEST\n \n check-stage$(1)-T-$(2)-H-$(3)-doc-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4))\n \n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)): \\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-                doc-$(4)-extract$(3)\n-\t@$$(call E, run doc-$(4) [$(2)]: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n-                $$(DOC_TEST_ARGS$(1)-T-$(2)-H-$(3)-doc-$(4)) \\\n-\t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),doc-$(4)) \\\n-                && touch $$@\n+# If NO_REBUILD is set then break the dependencies on everything but\n+# the source files so we can test documentation without rebuilding\n+# rustdoc etc.\n+ifeq ($(NO_REBUILD),)\n+DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = \\\n+\t$$(D)/$(4).md \\\n+\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n+\t$$(RUSTDOC_EXE_$(1)_T_$(2)_H_$(3))\n+else\n+DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(D)/$(4).md\n+endif\n \n+ifeq ($(2),$$(CFG_BUILD))\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)): $$(DOCTESTDEP_$(1)_$(2)_$(3)_$(4))\n+\t@$$(call E, run doc-$(4) [$(2)])\n+\t$$(Q)$$(RUSTDOC_$(1)_T_$(2)_H_$(3)) --test $$< --test-args \"$$(TESTARGS)\" && touch $$@\n+else\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)):\n+\ttouch $$@\n+endif\n endef\n \n $(foreach host,$(CFG_HOST), \\\n  $(foreach target,$(CFG_TARGET), \\\n   $(foreach stage,$(STAGES), \\\n-   $(foreach docname,$(DOC_TEST_NAMES), \\\n-    $(eval $(call DEF_RUN_DOC_TEST,$(stage),$(target),$(host),$(docname)))))))\n+   $(foreach docname,$(DOCS), \\\n+    $(eval $(call DEF_DOC_TEST,$(stage),$(target),$(host),$(docname)))))))\n+\n+# Crates\n \n define DEF_CRATE_DOC_TEST\n \n # If NO_REBUILD is set then break the dependencies on everything but\n # the source files so we can test crate documentation without\n # rebuilding any of the parent crates.\n ifeq ($(NO_REBUILD),)\n-DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = \\\n+CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4) = \\\n \t$$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n \t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4))\t\t\\\n-\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3))\n+\t$$(RUSTDOC_EXE_$(1)_T_$(2)_H_$(3))\n else\n-DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(RSINPUTS_$(4))\n+CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(RSINPUTS_$(4))\n endif\n \n check-stage$(1)-T-$(2)-H-$(3)-doc-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4))\n \n ifeq ($(2),$$(CFG_BUILD))\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)): $$(DOCTESTDEP_$(1)_$(2)_$(3)_$(4))\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)): $$(CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4))\n \t@$$(call E, run doc-$(4) [$(2)])\n-\t$$(Q)$$(RPATH_VAR$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) --test \\\n+\t$$(Q)$$(RUSTDOC_$(1)_T_$(2)_H_$(3)) --test \\\n \t    \t$$(CRATEFILE_$(4)) --test-args \"$$(TESTARGS)\" && touch $$@\n else\n $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)):\n@@ -724,26 +741,6 @@ $(foreach host,$(CFG_HOST), \\\n    $(foreach crate,$(TEST_DOC_CRATES), \\\n     $(eval $(call DEF_CRATE_DOC_TEST,$(stage),$(target),$(host),$(crate)))))))\n \n-######################################################################\n-# Extracting tests for docs\n-######################################################################\n-\n-EXTRACT_TESTS := \"$(CFG_PYTHON)\" $(S)src/etc/extract-tests.py\n-\n-define DEF_DOC_TEST_HOST\n-\n-doc-$(2)-extract$(1):\n-\t@$$(call E, extract: $(2) tests)\n-\t$$(Q)rm -f $(1)/test/doc-$(2)/*.rs\n-\t$$(Q)$$(EXTRACT_TESTS) $$(D)/$(2).md $(1)/test/doc-$(2)\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach docname,$(DOC_TEST_NAMES), \\\n-  $(eval $(call DEF_DOC_TEST_HOST,$(host),$(docname)))))\n-\n-\n ######################################################################\n # Shortcut rules\n ######################################################################\n@@ -762,7 +759,7 @@ TEST_GROUPS = \\\n \tdebuginfo \\\n \tcodegen \\\n \tdoc \\\n-\t$(foreach docname,$(DOC_TEST_NAMES),doc-$(docname)) \\\n+\t$(foreach docname,$(DOCS),doc-$(docname)) \\\n \tpretty \\\n \tpretty-rpass \\\n \tpretty-rpass-full \\\n@@ -830,9 +827,9 @@ $(foreach stage,$(STAGES), \\\n    $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP,$(stage),$(host),$(group))))))\n \n define DEF_CHECK_DOC_FOR_STAGE\n-check-stage$(1)-docs: $$(foreach docname,$$(DOC_TEST_NAMES),\\\n+check-stage$(1)-docs: $$(foreach docname,$$(DOCS),\\\n                        check-stage$(1)-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-doc-$$(docname)) \\\n-                     $$(foreach crate,$$(DOC_CRATE_NAMES),\\\n+                     $$(foreach crate,$$(TEST_DOC_CRATES),\\\n                        check-stage$(1)-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-doc-$$(crate))\n endef\n "}, {"sha": "26681adad6d78bff14ada65bb7eed8f304153da2", "filename": "src/doc/rust.css", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f7833215b0a5f8e12d559b309254a8f235078802/src%2Fdoc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/f7833215b0a5f8e12d559b309254a8f235078802/src%2Fdoc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.css?ref=f7833215b0a5f8e12d559b309254a8f235078802", "patch": "@@ -142,25 +142,18 @@ pre code {\n }\n \n /* Code highlighting */\n-.cm-s-default span.cm-keyword {color: #8959A8;}\n-.cm-s-default span.cm-atom {color: #219;}\n-.cm-s-default span.cm-number {color: #3E999F;}\n-.cm-s-default span.cm-def {color: #4271AE;}\n-/*.cm-s-default span.cm-variable {color: #C82829;}*/\n-.cm-s-default span.cm-variable-2 {color: #6F906C;}\n-.cm-s-default span.cm-variable-3 {color: #B76514;}\n-.cm-s-default span.cm-property {color: black;}\n-.cm-s-default span.cm-operator {color: black;}\n-.cm-s-default span.cm-comment {color: #8E908C;}\n-.cm-s-default span.cm-string {color: #718C00;}\n-.cm-s-default span.cm-string-2 {color: #866544;}\n-.cm-s-default span.cm-meta {color: #555;}\n-/*.cm-s-default span.cm-error {color: #F00;}*/\n-.cm-s-default span.cm-qualifier {color: #555;}\n-.cm-s-default span.cm-builtin {color: #30A;}\n-.cm-s-default span.cm-bracket {color: #CC7;}\n-.cm-s-default span.cm-tag {color: #C82829;}\n-.cm-s-default span.cm-attribute {color: #00C;}\n+pre.rust .kw { color: #8959A8; }\n+pre.rust .kw-2, pre.rust .prelude-ty { color: #4271AE; }\n+pre.rust .number { color: #718C00; }\n+pre.rust .self { color: #C13928; }\n+pre.rust .boolval { color: #C13928; }\n+pre.rust .prelude-val { color: #C13928; }\n+pre.rust .comment { color: #8E908C; }\n+pre.rust .doccomment { color: #4D4D4C; }\n+pre.rust .macro, pre.rust .macro-nonterminal { color: #3E999f; }\n+pre.rust .string { color: #718C00; }\n+pre.rust .lifetime { color: #C13928; }\n+pre.rust .attribute, pre.rust .attribute .ident { color: #C82829; }\n \n /* The rest\n    ========================================================================== */"}, {"sha": "2900023ea2b43fd2f599cfe8f6cf422382e821d0", "filename": "src/etc/extract-tests.py", "status": "removed", "additions": 0, "deletions": 217, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/2d7d7e59f9b37b431a4d6f3ab576c4bd197dc231/src%2Fetc%2Fextract-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/2d7d7e59f9b37b431a4d6f3ab576c4bd197dc231/src%2Fetc%2Fextract-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fextract-tests.py?ref=2d7d7e59f9b37b431a4d6f3ab576c4bd197dc231", "patch": "@@ -1,217 +0,0 @@\n-# Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-\"\"\"\n-Script for extracting compilable fragments from markdown documentation. See\n-prep.js for a description of the format recognized by this tool. Expects\n-a directory fragments/ to exist under the current directory, and writes the\n-fragments in there as individual .rs files.\n-\"\"\"\n-from __future__ import print_function\n-from codecs import open\n-from collections import deque\n-from itertools import imap\n-import os\n-import re\n-import sys\n-\n-# regexes\n-CHAPTER_NAME_REGEX = re.compile(r'# (.*)')\n-CODE_BLOCK_DELIM_REGEX = re.compile(r'~~~')\n-COMMENT_REGEX = re.compile(r'^# ')\n-COMPILER_DIRECTIVE_REGEX = re.compile(r'\\#\\[(.*)\\];')\n-ELLIPSES_REGEX = re.compile(r'\\.\\.\\.')\n-EXTERN_CRATE_REGEX = re.compile(r'\\bextern crate extra\\b')\n-MAIN_FUNCTION_REGEX = re.compile(r'\\bfn main\\b')\n-TAGS_REGEX = re.compile(r'\\.([\\w-]*)')\n-\n-# tags to ignore\n-IGNORE_TAGS = \\\n-        frozenset([\"abnf\", \"ebnf\", \"field\", \"keyword\", \"notrust\", \"precedence\"])\n-\n-# header for code snippet files\n-OUTPUT_BLOCK_HEADER = '\\n'.join((\n-    \"#[ deny(warnings) ];\",\n-    \"#[ allow(unused_variable) ];\",\n-    \"#[ allow(dead_assignment) ];\",\n-    \"#[ allow(unused_mut) ];\",\n-    \"#[ allow(attribute_usage) ];\",\n-    \"#[ allow(dead_code) ];\",\n-    \"#[ feature(macro_rules, globs, struct_variant, managed_boxes) ];\\n\",))\n-\n-\n-def add_extern_mod(block):\n-    if not has_extern_mod(block):\n-        # add `extern crate extra;` after compiler directives\n-        directives = []\n-        while len(block) and is_compiler_directive(block[0]):\n-            directives.append(block.popleft())\n-\n-        block.appendleft(\"\\nextern crate extra;\\n\\n\")\n-        block.extendleft(reversed(directives))\n-\n-    return block\n-\n-\n-def add_main_function(block):\n-    if not has_main_function(block):\n-        prepend_spaces = lambda x: '    ' + x\n-        block = deque(imap(prepend_spaces, block))\n-        block.appendleft(\"\\nfn main() {\\n\")\n-        block.append(\"\\n}\\n\")\n-    return block\n-\n-\n-def extract_code_fragments(dest_dir, lines):\n-    \"\"\"\n-    Extracts all the code fragments from a file that do not have ignored tags\n-    writing them to the following file:\n-\n-        [dest dir]/[chapter name]_[chapter_index].rs\n-    \"\"\"\n-    chapter_name = None\n-    chapter_index = 0\n-\n-    for line in lines:\n-        if is_chapter_title(line):\n-            chapter_name = get_chapter_name(line)\n-            chapter_index = 1\n-            continue\n-\n-        if not is_code_block_delim(line):\n-            continue\n-\n-        assert chapter_name, \"Chapter name missing for code block.\"\n-        tags = get_tags(line)\n-        block = get_code_block(lines)\n-\n-        if tags & IGNORE_TAGS:\n-            continue\n-\n-        block = add_extern_mod(add_main_function(block))\n-        block.appendleft(OUTPUT_BLOCK_HEADER)\n-\n-        if \"ignore\" in tags:\n-            block.appendleft(\"//ignore-test\\n\")\n-        elif \"should_fail\" in tags:\n-            block.appendleft(\"//should-fail\\n\")\n-\n-        output_filename = os.path.join(\n-                dest_dir,\n-                chapter_name + '_' + str(chapter_index) + '.rs')\n-\n-        write_file(output_filename, block)\n-        chapter_index += 1\n-\n-\n-def has_extern_mod(block):\n-    \"\"\"Checks if a code block has the line `extern crate extra`.\"\"\"\n-    find_extern_mod = lambda x: re.search(EXTERN_CRATE_REGEX, x)\n-    return any(imap(find_extern_mod, block))\n-\n-\n-def has_main_function(block):\n-    \"\"\"Checks if a code block has a main function.\"\"\"\n-    find_main_fn = lambda x: re.search(MAIN_FUNCTION_REGEX, x)\n-    return any(imap(find_main_fn, block))\n-\n-\n-def is_chapter_title(line):\n-    return re.match(CHAPTER_NAME_REGEX, line)\n-\n-\n-def is_code_block_delim(line):\n-    return re.match(CODE_BLOCK_DELIM_REGEX, line)\n-\n-\n-def is_compiler_directive(line):\n-    return re.match(COMPILER_DIRECTIVE_REGEX, line)\n-\n-\n-def get_chapter_name(line):\n-    \"\"\"Get the chapter name from a `# Containers` line.\"\"\"\n-    return re.sub(\n-            r'\\W',\n-            '_',\n-            re.match(CHAPTER_NAME_REGEX, line).group(1)).lower()\n-\n-\n-def get_code_block(lines):\n-    \"\"\"\n-    Get a code block surrounded by ~~~, for example:\n-\n-        1: ~~~ { .tag }\n-        2: let u: ~[u32] = ~[0, 1, 2];\n-        3: let v: &[u32] = &[0, 1, 2, 3];\n-        4: let w: [u32, .. 5] = [0, 1, 2, 3, 4];\n-        5:\n-        6: println!(\"u: {}, v: {}, w: {}\", u.len(), v.len(), w.len());\n-        7: ~~~\n-\n-    Returns lines 2-6. Assumes line 1 has been consumed by the caller.\n-    \"\"\"\n-    strip_comments = lambda x: re.sub(COMMENT_REGEX, '', x)\n-    strip_ellipses = lambda x: re.sub(ELLIPSES_REGEX, '', x)\n-\n-    result = deque()\n-\n-    for line in lines:\n-        if is_code_block_delim(line):\n-            break\n-        result.append(strip_comments(strip_ellipses(line)))\n-    return result\n-\n-\n-def get_lines(filename):\n-    with open(filename) as f:\n-        for line in f:\n-            yield line\n-\n-\n-def get_tags(line):\n-    \"\"\"\n-    Retrieves all tags from the line format:\n-        ~~~ { .tag1 .tag2 .tag3 }\n-    \"\"\"\n-    return set(re.findall(TAGS_REGEX, line))\n-\n-\n-def write_file(filename, lines):\n-    with open(filename, 'w', encoding='utf-8') as f:\n-        for line in lines:\n-            f.write(unicode(line, encoding='utf-8', errors='replace'))\n-\n-\n-def main(argv=None):\n-    if not argv:\n-        argv = sys.argv\n-\n-    if len(sys.argv) < 2:\n-        sys.stderr.write(\"Please provide an input filename.\")\n-        sys.exit(1)\n-    elif len(sys.argv) < 3:\n-        sys.stderr.write(\"Please provide a destination directory.\")\n-        sys.exit(1)\n-\n-    input_file = sys.argv[1]\n-    dest_dir = sys.argv[2]\n-\n-    if not os.path.exists(input_file):\n-        sys.stderr.write(\"Input file does not exist.\")\n-        sys.exit(1)\n-\n-    if not os.path.exists(dest_dir):\n-        os.mkdir(dest_dir)\n-\n-    extract_code_fragments(dest_dir, get_lines(input_file))\n-\n-\n-if __name__ == \"__main__\":\n-    sys.exit(main())"}]}