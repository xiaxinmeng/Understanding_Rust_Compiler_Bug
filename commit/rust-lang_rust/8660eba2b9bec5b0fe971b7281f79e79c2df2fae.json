{"sha": "8660eba2b9bec5b0fe971b7281f79e79c2df2fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NjBlYmEyYjliZWM1YjBmZTk3MWI3MjgxZjc5ZTc5YzJkZjJmYWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-02T13:45:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-02T13:45:22Z"}, "message": "Auto merge of #56275 - RalfJung:win-mutex, r=SimonSapin\n\nuse MaybeUninit instead of mem::uninitialized for Windows Mutex\n\nI hope this builds, I do not have a Windows machine to test...", "tree": {"sha": "86a0f14bde134d8357458c80472b51204d489b5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86a0f14bde134d8357458c80472b51204d489b5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8660eba2b9bec5b0fe971b7281f79e79c2df2fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8660eba2b9bec5b0fe971b7281f79e79c2df2fae", "html_url": "https://github.com/rust-lang/rust/commit/8660eba2b9bec5b0fe971b7281f79e79c2df2fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8660eba2b9bec5b0fe971b7281f79e79c2df2fae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9abc2312124de7c4275d76e9cbc81d50086c4768", "url": "https://api.github.com/repos/rust-lang/rust/commits/9abc2312124de7c4275d76e9cbc81d50086c4768", "html_url": "https://github.com/rust-lang/rust/commit/9abc2312124de7c4275d76e9cbc81d50086c4768"}, {"sha": "ebe69c06b38e0d1d20c79ee4342715514e917107", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe69c06b38e0d1d20c79ee4342715514e917107", "html_url": "https://github.com/rust-lang/rust/commit/ebe69c06b38e0d1d20c79ee4342715514e917107"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "215689dfc48c99c007d06ce4ec16f91877a2d704", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8660eba2b9bec5b0fe971b7281f79e79c2df2fae/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660eba2b9bec5b0fe971b7281f79e79c2df2fae/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=8660eba2b9bec5b0fe971b7281f79e79c2df2fae", "patch": "@@ -602,7 +602,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         } else {\n             unsafe {\n                 slice::from_raw_parts_mut(\n-                    self.as_leaf_mut().keys.get_mut() as *mut [K] as *mut K,\n+                    self.as_leaf_mut().keys.as_mut_ptr() as *mut K,\n                     self.len()\n                 )\n             }\n@@ -613,7 +613,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         debug_assert!(!self.is_shared_root());\n         unsafe {\n             slice::from_raw_parts_mut(\n-                self.as_leaf_mut().vals.get_mut() as *mut [V] as *mut V,\n+                self.as_leaf_mut().vals.as_mut_ptr() as *mut V,\n                 self.len()\n             )\n         }"}, {"sha": "3717a783f2411cafe6914f4feafb5d1ffd93dbc3", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8660eba2b9bec5b0fe971b7281f79e79c2df2fae/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660eba2b9bec5b0fe971b7281f79e79c2df2fae/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=8660eba2b9bec5b0fe971b7281f79e79c2df2fae", "patch": "@@ -22,6 +22,9 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninitialized(); // enough for f32 and f64\n         let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninitialized();\n+        // FIXME(#53491): Technically, this is calling `get_mut` on an uninitialized\n+        // `MaybeUninit` (here and elsewhere in this file).  Revisit this once\n+        // we decided whether that is valid or not.\n         let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n                                                     *num, sign, precision,\n                                                     false, buf.get_mut(), parts.get_mut());"}, {"sha": "e4b2800ae211720a4ee12c42ca09480f4c6043bc", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8660eba2b9bec5b0fe971b7281f79e79c2df2fae/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660eba2b9bec5b0fe971b7281f79e79c2df2fae/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=8660eba2b9bec5b0fe971b7281f79e79c2df2fae", "patch": "@@ -1118,6 +1118,9 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state, otherwise this will immediately cause undefined behavior.\n+    // FIXME(#53491): We currently rely on the above being incorrect, i.e., we have references\n+    // to uninitialized data (e.g. in `libcore/fmt/float.rs`).  We should make\n+    // a final decision about the rules before stabilization.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub unsafe fn get_mut(&mut self) -> &mut T {"}, {"sha": "78109a1a690e6ad94c50e01c2c3f200ce8b6a7b2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8660eba2b9bec5b0fe971b7281f79e79c2df2fae/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660eba2b9bec5b0fe971b7281f79e79c2df2fae/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8660eba2b9bec5b0fe971b7281f79e79c2df2fae", "patch": "@@ -311,6 +311,7 @@\n #![feature(panic_info_message)]\n #![feature(non_exhaustive)]\n #![feature(alloc_layout_extra)]\n+#![feature(maybe_uninit)]\n \n #![default_lib_allocator]\n "}, {"sha": "2bd5dee63e88370c60698127c32e25f68ee6bdfd", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8660eba2b9bec5b0fe971b7281f79e79c2df2fae/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660eba2b9bec5b0fe971b7281f79e79c2df2fae/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=8660eba2b9bec5b0fe971b7281f79e79c2df2fae", "patch": "@@ -30,7 +30,7 @@\n //! detect recursive locks.\n \n use cell::UnsafeCell;\n-use mem;\n+use mem::{self, MaybeUninit};\n use sync::atomic::{AtomicUsize, Ordering};\n use sys::c;\n use sys::compat;\n@@ -157,34 +157,34 @@ fn kind() -> Kind {\n     return ret;\n }\n \n-pub struct ReentrantMutex { inner: UnsafeCell<c::CRITICAL_SECTION> }\n+pub struct ReentrantMutex { inner: UnsafeCell<MaybeUninit<c::CRITICAL_SECTION>> }\n \n unsafe impl Send for ReentrantMutex {}\n unsafe impl Sync for ReentrantMutex {}\n \n impl ReentrantMutex {\n-    pub unsafe fn uninitialized() -> ReentrantMutex {\n-        mem::uninitialized()\n+    pub fn uninitialized() -> ReentrantMutex {\n+        ReentrantMutex { inner: UnsafeCell::new(MaybeUninit::uninitialized()) }\n     }\n \n     pub unsafe fn init(&mut self) {\n-        c::InitializeCriticalSection(self.inner.get());\n+        c::InitializeCriticalSection((&mut *self.inner.get()).as_mut_ptr());\n     }\n \n     pub unsafe fn lock(&self) {\n-        c::EnterCriticalSection(self.inner.get());\n+        c::EnterCriticalSection((&mut *self.inner.get()).as_mut_ptr());\n     }\n \n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n-        c::TryEnterCriticalSection(self.inner.get()) != 0\n+        c::TryEnterCriticalSection((&mut *self.inner.get()).as_mut_ptr()) != 0\n     }\n \n     pub unsafe fn unlock(&self) {\n-        c::LeaveCriticalSection(self.inner.get());\n+        c::LeaveCriticalSection((&mut *self.inner.get()).as_mut_ptr());\n     }\n \n     pub unsafe fn destroy(&self) {\n-        c::DeleteCriticalSection(self.inner.get());\n+        c::DeleteCriticalSection((&mut *self.inner.get()).as_mut_ptr());\n     }\n }"}]}