{"sha": "2b13d95da02d318c12814261dd36edd91ae6879e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMTNkOTVkYTAyZDMxOGMxMjgxNDI2MWRkMzZlZGQ5MWFlNjg3OWU=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2018-03-22T04:28:48Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2018-03-22T04:28:48Z"}, "message": "termination_trait: Make error message more helpful", "tree": {"sha": "496531b2071968ef08cd59a8d756a8a2a2206100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/496531b2071968ef08cd59a8d756a8a2a2206100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b13d95da02d318c12814261dd36edd91ae6879e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b13d95da02d318c12814261dd36edd91ae6879e", "html_url": "https://github.com/rust-lang/rust/commit/2b13d95da02d318c12814261dd36edd91ae6879e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b13d95da02d318c12814261dd36edd91ae6879e/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6934c91b23517c4e17d8016b6c46ffd0703eded", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6934c91b23517c4e17d8016b6c46ffd0703eded", "html_url": "https://github.com/rust-lang/rust/commit/b6934c91b23517c4e17d8016b6c46ffd0703eded"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "47e6b0feceae3a33102c1f215ce20226334123e2", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b13d95da02d318c12814261dd36edd91ae6879e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b13d95da02d318c12814261dd36edd91ae6879e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=2b13d95da02d318c12814261dd36edd91ae6879e", "patch": "@@ -585,17 +585,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                          trait_ref.to_predicate(), post_message)\n                             }));\n \n-                        let explanation = match obligation.cause.code {\n-                            ObligationCauseCode::MainFunctionType => {\n+                        let explanation =\n+                            if obligation.cause.code == ObligationCauseCode::MainFunctionType {\n                                 \"consider using `()`, or a `Result`\".to_owned()\n-                            }\n-                            _ => {\n+                            } else {\n                                 format!(\"{}the trait `{}` is not implemented for `{}`\",\n-                                         pre_message,\n-                                         trait_ref,\n-                                         trait_ref.self_ty())\n-                            }\n-                        };\n+                                        pre_message,\n+                                        trait_ref,\n+                                        trait_ref.self_ty())\n+                            };\n \n                         if let Some(ref s) = label {\n                             // If it has a custom \"#[rustc_on_unimplemented]\""}, {"sha": "c877bf6aa35cdb1734ea9ebeb881fa5fba69650a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b13d95da02d318c12814261dd36edd91ae6879e/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b13d95da02d318c12814261dd36edd91ae6879e/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=2b13d95da02d318c12814261dd36edd91ae6879e", "patch": "@@ -1442,8 +1442,9 @@ pub fn id() -> u32 {\n /// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n #[cfg_attr(not(test), lang = \"termination\")]\n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n-#[rustc_on_unimplemented =\n-  \"`main` can only return types that implement {Termination}, not `{Self}`\"]\n+#[rustc_on_unimplemented(\n+  message=\"`main` has invalid return type `{Self}`\",\n+  label=\"`main` can only return types that implement {Termination}\")]\n pub trait Termination {\n     /// Is called to get the representation of the value as status code.\n     /// This status code is returned to the operating system."}, {"sha": "0e6ddf7c92f1a3629af50350f79e02ef4716faba", "filename": "src/test/compile-fail/rfc-1937-termination-trait/termination-trait-main-i32.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b13d95da02d318c12814261dd36edd91ae6879e/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b13d95da02d318c12814261dd36edd91ae6879e/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-i32.rs?ref=2b13d95da02d318c12814261dd36edd91ae6879e", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n fn main() -> i32 {\n-//~^ ERROR `i32: std::process::Termination` is not satisfied\n-//~| NOTE `main` can only return types that implement std::process::Termination, not `i32`\n+//~^ ERROR `main` has invalid return type `i32`\n+//~| NOTE `main` can only return types that implement std::process::Termination\n+//~| HELP consider using `()`, or a `Result`\n     0\n }"}, {"sha": "b5f5472b492902f94eaecdf16b1b8a50ada303da", "filename": "src/test/compile-fail/rfc-1937-termination-trait/termination-trait-not-satisfied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b13d95da02d318c12814261dd36edd91ae6879e/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b13d95da02d318c12814261dd36edd91ae6879e/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs?ref=2b13d95da02d318c12814261dd36edd91ae6879e", "patch": "@@ -10,6 +10,6 @@\n \n struct ReturnType {}\n \n-fn main() -> ReturnType { //~ ERROR `ReturnType: std::process::Termination` is not satisfied\n+fn main() -> ReturnType { //~ ERROR `main` has invalid return type `ReturnType`\n     ReturnType {}\n }"}, {"sha": "5109d9275c58b573b0eeac5f46380e7e4b983406", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-main-wrong-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b13d95da02d318c12814261dd36edd91ae6879e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b13d95da02d318c12814261dd36edd91ae6879e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.stderr?ref=2b13d95da02d318c12814261dd36edd91ae6879e", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `char: std::process::Termination` is not satisfied\n+error[E0277]: `main` has invalid return type `char`\n   --> $DIR/termination-trait-main-wrong-type.rs:11:14\n    |\n LL | fn main() -> char { //~ ERROR\n-   |              ^^^^ `main` can only return types that implement std::process::Termination, not `char`\n+   |              ^^^^ `main` can only return types that implement std::process::Termination\n    |\n    = help: consider using `()`, or a `Result`\n "}]}