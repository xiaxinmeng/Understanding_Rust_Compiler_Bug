{"sha": "b2894752e4bfcc5cae3a120ba3fc7a964594ed68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyODk0NzUyZTRiZmNjNWNhZTNhMTIwYmEzZmM3YTk2NDU5NGVkNjg=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-06-22T22:31:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-29T22:41:56Z"}, "message": "std: roughcut impl of net::ip::get_addr()\n\nstill needs tests", "tree": {"sha": "8372f48b751f3520576fc21ae5d1f0a18f8514ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8372f48b751f3520576fc21ae5d1f0a18f8514ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2894752e4bfcc5cae3a120ba3fc7a964594ed68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2894752e4bfcc5cae3a120ba3fc7a964594ed68", "html_url": "https://github.com/rust-lang/rust/commit/b2894752e4bfcc5cae3a120ba3fc7a964594ed68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2894752e4bfcc5cae3a120ba3fc7a964594ed68/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8afc113b61a7f12e310b56b1760fba9f03ea9306", "url": "https://api.github.com/repos/rust-lang/rust/commits/8afc113b61a7f12e310b56b1760fba9f03ea9306", "html_url": "https://github.com/rust-lang/rust/commit/8afc113b61a7f12e310b56b1760fba9f03ea9306"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "d0eda904e836a83eb4c25449d6e73b140fa286f8", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 98, "deletions": 1, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/b2894752e4bfcc5cae3a120ba3fc7a964594ed68/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2894752e4bfcc5cae3a120ba3fc7a964594ed68/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=b2894752e4bfcc5cae3a120ba3fc7a964594ed68", "patch": "@@ -4,17 +4,28 @@ Types/fns concerning Internet Protocol (IP), versions 4 & 6\n \n import vec;\n import uint;\n+import iotask = uv::iotask::iotask;\n+import interact = uv::iotask::interact;\n+import comm::methods;\n \n import sockaddr_in = uv::ll::sockaddr_in;\n import sockaddr_in6 = uv::ll::sockaddr_in6;\n+import addrinfo = uv::ll::addrinfo;\n+import uv_getaddrinfo_t = uv::ll::uv_getaddrinfo_t;\n import uv_ip4_addr = uv::ll::ip4_addr;\n import uv_ip4_name = uv::ll::ip4_name;\n import uv_ip6_addr = uv::ll::ip6_addr;\n import uv_ip6_name = uv::ll::ip6_name;\n+import uv_getaddrinfo = uv::ll::getaddrinfo;\n+import create_uv_getaddrinfo_t = uv::ll::getaddrinfo_t;\n+import set_data_for_uv_handle = uv::ll::set_data_for_uv_handle;\n+import get_data_for_uv_handle = uv::ll::get_data_for_uv_handle;\n+import ll = uv::ll;\n \n export ip_addr, parse_addr_err;\n export format_addr;\n-export v4;\n+export v4, v6;\n+export get_addr;\n \n #[doc = \"An IP address\"]\n enum ip_addr {\n@@ -60,6 +71,92 @@ fn format_addr(ip: ip_addr) -> str {\n     }\n }\n \n+type get_addr_data = {\n+    output_ch: comm::chan<result::result<[ip_addr],ip_get_addr_err>>\n+};\n+\n+crust fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n+                     res: *addrinfo) unsafe {\n+    let handle_data = get_data_for_uv_handle(handle) as\n+        *get_addr_data;\n+    if status == 0i32 {\n+        if res != (ptr::null::<addrinfo>()) {\n+            let mut out_vec = [];\n+            let mut curr_addr = res;\n+            loop {\n+                if ll::is_ipv4_addrinfo(curr_addr) {\n+                    out_vec +=\n+                        [ipv4(copy((\n+                            *ll::addrinfo_as_sockaddr_in(curr_addr))))];\n+                }\n+                else {\n+                    out_vec +=\n+                        [ipv6(copy((\n+                            *ll::addrinfo_as_sockaddr_in6(curr_addr))))];\n+                }\n+\n+                let next_addr = ll::get_next_addrinfo(curr_addr);\n+                if next_addr == ptr::null::<addrinfo>() as *addrinfo {\n+                    break;\n+                }\n+                else {\n+                    curr_addr = next_addr\n+                }\n+            }\n+            (*handle_data).output_ch.send(result::ok(out_vec));\n+        }\n+        else {\n+            (*handle_data).output_ch.send(\n+                result::err(get_addr_unknown_error));\n+        }\n+    }\n+    else {\n+        (*handle_data).output_ch.send(\n+            result::err(get_addr_unknown_error));\n+    }\n+}\n+\n+#[doc=\"\n+\"]\n+enum ip_get_addr_err {\n+    get_addr_unknown_error\n+}\n+\n+#[doc=\"\n+\"]\n+fn get_addr(++node: str, iotask: iotask)\n+        -> result::result<[ip_addr], ip_get_addr_err> unsafe {\n+    comm::listen {|output_ch|\n+        str::unpack_slice(node) {|node_ptr, len|\n+            log(debug, #fmt(\"sliace len %?\", len));\n+            let handle = create_uv_getaddrinfo_t();\n+            let handle_ptr = ptr::addr_of(handle);\n+            let handle_data: get_addr_data = {\n+                output_ch: output_ch\n+            };\n+            let handle_data_ptr = ptr::addr_of(handle_data);\n+            interact(iotask) {|loop_ptr|\n+                let result = uv_getaddrinfo(\n+                    loop_ptr,\n+                    handle_ptr,\n+                    get_addr_cb,\n+                    node_ptr,\n+                    ptr::null(),\n+                    ptr::null());\n+                alt result {\n+                  0i32 {\n+                    set_data_for_uv_handle(handle_ptr, handle_data_ptr);\n+                  }\n+                  _ {\n+                    output_ch.send(result::err(get_addr_unknown_error));\n+                  }\n+                }\n+            };\n+            output_ch.recv()\n+        }\n+    }\n+}\n+\n mod v4 {\n     #[doc = \"\n     Convert a str to `ip_addr`"}]}