{"sha": "0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "node_id": "C_kwDOAAsO6NoAKDBhNTZlYjExZmFmZGQzYzlkODZjMTAwYjZiOTA1MDVmNWY5ZmRiMDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-14T13:21:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-14T13:21:46Z"}, "message": "Auto merge of #88698 - Noble-Mushtak:master, r=nikomatsakis,oli-obk\n\nAdd check that live_region is live in sanitize_promoted\n\nThis pull request fixes #88434 by adding a check in `sanitize_promoted` to ensure that only regions which are actually live are added to the `liveness_constraints` of the `BorrowCheckContext`.\n\nTo implement this change, I needed to add a method to `LivenessValues` which gets the elements contained by a region:\n\n    /// Returns an iterator of all the elements contained by the region `r`\n    crate fn get_elements(&self, row: N) -> impl Iterator<Item = Location> + '_\n\nThen, inside `sanitize_promoted`, we check whether the iterator returned by this method is non-empty to ensure that the region is actually live at at least one location before adding that region to the `liveness_constraints` of the `BorrowCheckContext`.\n\nThis is my first pull request to the Rust repo, so any feedback on how I can improve this pull request or if there is a better way to fix this issue would be very appreciated.", "tree": {"sha": "37f0352dc7c9bb2f06bdbf0728e83623b075a845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37f0352dc7c9bb2f06bdbf0728e83623b075a845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "html_url": "https://github.com/rust-lang/rust/commit/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34ac8747ca96d09cb08b8f5adddead826e77c06", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34ac8747ca96d09cb08b8f5adddead826e77c06", "html_url": "https://github.com/rust-lang/rust/commit/c34ac8747ca96d09cb08b8f5adddead826e77c06"}, {"sha": "8fc329f5d2305d2f127752e7af3a37e07a1a89dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc329f5d2305d2f127752e7af3a37e07a1a89dc", "html_url": "https://github.com/rust-lang/rust/commit/8fc329f5d2305d2f127752e7af3a37e07a1a89dc"}], "stats": {"total": 99, "additions": 83, "deletions": 16}, "files": [{"sha": "21c26af8178ffaa7c44359bf04e2e88b24c8efbb", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "patch": "@@ -2154,7 +2154,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // appears to be the most interesting point to report to the\n         // user via an even more ad-hoc guess.\n         categorized_path.sort_by(|p0, p1| p0.category.cmp(&p1.category));\n-        debug!(\"`: sorted_path={:#?}\", categorized_path);\n+        debug!(\"best_blame_constraint: sorted_path={:#?}\", categorized_path);\n \n         categorized_path.remove(0)\n     }"}, {"sha": "8819039c752963876c43ec9748f9185e12d708aa", "filename": "compiler/rustc_borrowck/src/region_infer/values.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs?ref=0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "patch": "@@ -174,17 +174,19 @@ impl<N: Idx> LivenessValues<N> {\n         self.points.contains(row, index)\n     }\n \n+    /// Returns an iterator of all the elements contained by the region `r`\n+    crate fn get_elements(&self, row: N) -> impl Iterator<Item = Location> + '_ {\n+        self.points\n+            .row(row)\n+            .into_iter()\n+            .flat_map(|set| set.iter())\n+            .take_while(move |&p| self.elements.point_in_range(p))\n+            .map(move |p| self.elements.to_location(p))\n+    }\n+\n     /// Returns a \"pretty\" string value of the region. Meant for debugging.\n     crate fn region_value_str(&self, r: N) -> String {\n-        region_value_str(\n-            self.points\n-                .row(r)\n-                .into_iter()\n-                .flat_map(|set| set.iter())\n-                .take_while(|&p| self.elements.point_in_range(p))\n-                .map(|p| self.elements.to_location(p))\n-                .map(RegionElement::Location),\n-        )\n+        region_value_str(self.get_elements(r).map(RegionElement::Location))\n     }\n }\n "}, {"sha": "7bf119863fdc74f2b755f8fb4eada6e5000b7ce2", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "patch": "@@ -663,12 +663,17 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             }\n             self.cx.borrowck_context.constraints.outlives_constraints.push(constraint)\n         }\n-        for live_region in liveness_constraints.rows() {\n-            self.cx\n-                .borrowck_context\n-                .constraints\n-                .liveness_constraints\n-                .add_element(live_region, location);\n+        for region in liveness_constraints.rows() {\n+            // If the region is live at at least one location in the promoted MIR,\n+            // then add a liveness constraint to the main MIR for this region\n+            // at the location provided as an argument to this method\n+            if let Some(_) = liveness_constraints.get_elements(region).next() {\n+                self.cx\n+                    .borrowck_context\n+                    .constraints\n+                    .liveness_constraints\n+                    .add_element(region, location);\n+            }\n         }\n \n         if !closure_bounds.is_empty() {"}, {"sha": "db348a50aa4298fe7690f74d0e943781f9d056dd", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs?ref=0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_fn_trait_bound)]\n+// Regression test related to issue 88434\n+\n+const _CONST: &() = &f(&|_| {});\n+\n+const fn f<F>(_: &F)\n+where\n+    F: FnMut(&u8),\n+{\n+    panic!() //~ ERROR evaluation of constant value failed\n+}\n+\n+fn main() { }"}, {"sha": "845e1bdba8fc03fce5a3545390c32aec0621bcd1", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "patch": "@@ -0,0 +1,17 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-88434-minimal-example.rs:10:5\n+   |\n+LL | const _CONST: &() = &f(&|_| {});\n+   |                      ---------- inside `_CONST` at $DIR/issue-88434-minimal-example.rs:4:22\n+...\n+LL |     panic!()\n+   |     ^^^^^^^^\n+   |     |\n+   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:10:5\n+   |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:4:25: 4:31]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "4db073c66b1f368fb601a5d27132dd2bfd0b78c2", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs?ref=0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_fn_trait_bound)]\n+// Regression test for issue 88434\n+\n+const _CONST: &[u8] = &f(&[], |_| {});\n+\n+const fn f<F>(_: &[u8], _: F) -> &[u8]\n+where\n+    F: FnMut(&u8),\n+{\n+    panic!() //~ ERROR evaluation of constant value failed\n+}\n+\n+fn main() { }"}, {"sha": "8cbb6a6340c7f5b8641e65c4c1f62e41aaa14fce", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "patch": "@@ -0,0 +1,17 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n+   |\n+LL | const _CONST: &[u8] = &f(&[], |_| {});\n+   |                        -------------- inside `_CONST` at $DIR/issue-88434-removal-index-should-be-less.rs:4:24\n+...\n+LL |     panic!()\n+   |     ^^^^^^^^\n+   |     |\n+   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n+   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:4:31: 4:37]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}]}