{"sha": "a491f51218f93cc6373b28b2f0f753c5c1a5b295", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0OTFmNTEyMThmOTNjYzYzNzNiMjhiMmYwZjc1M2M1YzFhNWIyOTU=", "commit": {"author": {"name": "Edward Shen", "email": "code@eddie.sh", "date": "2021-02-15T04:59:45Z"}, "committer": {"name": "Edward Shen", "email": "code@eddie.sh", "date": "2021-02-15T04:59:45Z"}, "message": "Use delay_span_bug for mismatched subst/hir arg", "tree": {"sha": "ae5779e0dd04d86db15c42337cc607de7a9d2c45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae5779e0dd04d86db15c42337cc607de7a9d2c45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a491f51218f93cc6373b28b2f0f753c5c1a5b295", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFCBAABCAAsFiEEYanFN2VULXpYlqmhGRgmYegYNp8FAmAqAAUOHGNvZGVAZWRk\naWUuc2gACgkQGRgmYegYNp9mpwf+ItUE/xEl5R/6Dasfd32G0PUwDJTnVnfbZUmQ\noRa057oQoo4OBFuYzOLkAuymQL+iwhL7eNQC586QesV4tN0sU6Z0MzQtGIRNIJfq\nR/gmwl7xR0u06eL8JjZaMNKSg8pL3UZ/yCXkwDdC68hqaESgZkRM5eDfRSnag59G\nJrCp/vvsNRntMUZPcK66mkJT1epGP0AvIMtmOURqD4xxPLNJin/w89QZL5ovXwD4\nJPrBd8bfqBoOup/VtGRvn+b3RcLYGp5dGnMHQXIOfLjKobNVPOfIRTIgT3jrK59F\nlb057QEschCSrpwdog+9mvWJZbEH4YyZ7d/UBdZXbR8tPx1C9g==\n=AeMa\n-----END PGP SIGNATURE-----", "payload": "tree ae5779e0dd04d86db15c42337cc607de7a9d2c45\nparent 9503ea19edbf01b9435e80e17d60ce1b88390116\nauthor Edward Shen <code@eddie.sh> 1613365185 -0500\ncommitter Edward Shen <code@eddie.sh> 1613365185 -0500\n\nUse delay_span_bug for mismatched subst/hir arg\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a491f51218f93cc6373b28b2f0f753c5c1a5b295", "html_url": "https://github.com/rust-lang/rust/commit/a491f51218f93cc6373b28b2f0f753c5c1a5b295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a491f51218f93cc6373b28b2f0f753c5c1a5b295/comments", "author": {"login": "edward-shen", "id": 6173958, "node_id": "MDQ6VXNlcjYxNzM5NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6173958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edward-shen", "html_url": "https://github.com/edward-shen", "followers_url": "https://api.github.com/users/edward-shen/followers", "following_url": "https://api.github.com/users/edward-shen/following{/other_user}", "gists_url": "https://api.github.com/users/edward-shen/gists{/gist_id}", "starred_url": "https://api.github.com/users/edward-shen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edward-shen/subscriptions", "organizations_url": "https://api.github.com/users/edward-shen/orgs", "repos_url": "https://api.github.com/users/edward-shen/repos", "events_url": "https://api.github.com/users/edward-shen/events{/privacy}", "received_events_url": "https://api.github.com/users/edward-shen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edward-shen", "id": 6173958, "node_id": "MDQ6VXNlcjYxNzM5NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6173958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edward-shen", "html_url": "https://github.com/edward-shen", "followers_url": "https://api.github.com/users/edward-shen/followers", "following_url": "https://api.github.com/users/edward-shen/following{/other_user}", "gists_url": "https://api.github.com/users/edward-shen/gists{/gist_id}", "starred_url": "https://api.github.com/users/edward-shen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edward-shen/subscriptions", "organizations_url": "https://api.github.com/users/edward-shen/orgs", "repos_url": "https://api.github.com/users/edward-shen/repos", "events_url": "https://api.github.com/users/edward-shen/events{/privacy}", "received_events_url": "https://api.github.com/users/edward-shen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9503ea19edbf01b9435e80e17d60ce1b88390116", "url": "https://api.github.com/repos/rust-lang/rust/commits/9503ea19edbf01b9435e80e17d60ce1b88390116", "html_url": "https://github.com/rust-lang/rust/commit/9503ea19edbf01b9435e80e17d60ce1b88390116"}], "stats": {"total": 79, "additions": 72, "deletions": 7}, "files": [{"sha": "77297ded40d753d46ec4fb6e0695bf1119c24ab6", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a491f51218f93cc6373b28b2f0f753c5c1a5b295/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a491f51218f93cc6373b28b2f0f753c5c1a5b295/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=a491f51218f93cc6373b28b2f0f753c5c1a5b295", "patch": "@@ -634,14 +634,11 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     | GenericArgKind::Const(_),\n                     _,\n                 ) => {\n-                    // I *think* that HIR lowering should ensure this\n-                    // doesn't happen, even in erroneous\n-                    // programs. Else we should use delay-span-bug.\n-                    span_bug!(\n+                    // HIR lowering is insufficient in erroneous programs, so\n+                    // we need to use delay_span_bug here. See #82126.\n+                    self.infcx.tcx.sess.delay_span_bug(\n                         hir_arg.span(),\n-                        \"unmatched subst and hir arg: found {:?} vs {:?}\",\n-                        kind,\n-                        hir_arg,\n+                        &format!(\"unmatched subst and hir arg: found {:?} vs {:?}\", kind, hir_arg),\n                     );\n                 }\n             }"}, {"sha": "b6cb617e2f0e7e3cc8fc9bf9c5d2168518c93453", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a491f51218f93cc6373b28b2f0f753c5c1a5b295/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a491f51218f93cc6373b28b2f0f753c5c1a5b295/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs?ref=a491f51218f93cc6373b28b2f0f753c5c1a5b295", "patch": "@@ -0,0 +1,25 @@\n+// Regression test for #82087. Checks that mismatched lifetimes and types are\n+// properly handled.\n+\n+// edition:2018\n+\n+use std::sync::Mutex;\n+\n+struct MarketMultiplier {}\n+\n+impl MarketMultiplier {\n+    fn buy(&mut self) -> &mut usize {\n+        todo!()\n+    }\n+}\n+\n+async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n+    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~^^ ERROR this struct takes 1 type argument but 0 type arguments were supplied\n+    LockedMarket(generator.lock().unwrap().buy())\n+    //~^ ERROR cannot return value referencing temporary value\n+}\n+\n+struct LockedMarket<T>(T);\n+\n+fn main() {}"}, {"sha": "b6844f50488e106f7a37415619fa4d489455cc7c", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a491f51218f93cc6373b28b2f0f753c5c1a5b295/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a491f51218f93cc6373b28b2f0f753c5c1a5b295/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr?ref=a491f51218f93cc6373b28b2f0f753c5c1a5b295", "patch": "@@ -0,0 +1,43 @@\n+error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:16:59\n+   |\n+LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n+   |                                                           ^^^^^^^^^^^^---- help: remove these generics\n+   |                                                           |\n+   |                                                           expected 0 lifetime arguments\n+   |\n+note: struct defined here, with 0 lifetime parameters\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:23:8\n+   |\n+LL | struct LockedMarket<T>(T);\n+   |        ^^^^^^^^^^^^\n+\n+error[E0107]: this struct takes 1 type argument but 0 type arguments were supplied\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:16:59\n+   |\n+LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n+   |                                                           ^^^^^^^^^^^^ expected 1 type argument\n+   |\n+note: struct defined here, with 1 type parameter: `T`\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:23:8\n+   |\n+LL | struct LockedMarket<T>(T);\n+   |        ^^^^^^^^^^^^ -\n+help: add missing type argument\n+   |\n+LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_, T> {\n+   |                                                                          ^^^\n+\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:19:5\n+   |\n+LL |     LockedMarket(generator.lock().unwrap().buy())\n+   |     ^^^^^^^^^^^^^-------------------------^^^^^^^\n+   |     |            |\n+   |     |            temporary value created here\n+   |     returns a value referencing data owned by the current function\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0107, E0515.\n+For more information about an error, try `rustc --explain E0107`."}]}