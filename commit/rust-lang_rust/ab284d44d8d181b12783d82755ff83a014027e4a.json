{"sha": "ab284d44d8d181b12783d82755ff83a014027e4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMjg0ZDQ0ZDhkMTgxYjEyNzgzZDgyNzU1ZmY4M2EwMTQwMjdlNGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-27T07:09:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-13T21:24:10Z"}, "message": "core::rt Restructure some modules\n\nPut all uv code under rt::uv, as if it were in its own crate.\nPull local_sched out of rt::sched.", "tree": {"sha": "2757307344db64fb71ec944cbe0256b846df9541", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2757307344db64fb71ec944cbe0256b846df9541"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab284d44d8d181b12783d82755ff83a014027e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab284d44d8d181b12783d82755ff83a014027e4a", "html_url": "https://github.com/rust-lang/rust/commit/ab284d44d8d181b12783d82755ff83a014027e4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab284d44d8d181b12783d82755ff83a014027e4a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23bf892ae5f185146d170af621c4da17e559dfa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/23bf892ae5f185146d170af621c4da17e559dfa4", "html_url": "https://github.com/rust-lang/rust/commit/23bf892ae5f185146d170af621c4da17e559dfa4"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "6ef3d0bad5e0b091f2c944b5f8950c714659c3ae", "filename": "src/libcore/rt/local_sched.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Flocal_sched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Flocal_sched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal_sched.rs?ref=ab284d44d8d181b12783d82755ff83a014027e4a", "patch": "@@ -16,12 +16,12 @@ use libc::c_void;\n use cast;\n use cell::Cell;\n \n-use super::Scheduler;\n-use super::super::rtio::IoFactoryObject;\n-use tls = super::super::thread_local_storage;\n+use rt::sched::Scheduler;\n+use rt::rtio::{EventLoop, IoFactoryObject};\n+use tls = rt::thread_local_storage;\n use unstable::finally::Finally;\n \n-#[cfg(test)] use super::super::uvio::UvEventLoop;\n+#[cfg(test)] use rt::uv::uvio::UvEventLoop;\n \n /// Give the Scheduler to thread-local storage\n pub fn put(sched: ~Scheduler) {", "previous_filename": "src/libcore/rt/sched/local_sched.rs"}, {"sha": "8501e36111f86d7170b042be227d78a9665b1493", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=ab284d44d8d181b12783d82755ff83a014027e4a", "patch": "@@ -21,10 +21,12 @@\n \n use libc::c_char;\n \n-/// The Scheduler and Task types, and thread-local access thereof\n-#[path = \"sched/mod.rs\"]\n+/// The Scheduler and Task types\n mod sched;\n \n+/// Thread-local access to the current Scheduler\n+mod local_sched;\n+\n /// Synchronous I/O\n #[path = \"io/mod.rs\"]\n pub mod io;\n@@ -39,14 +41,7 @@ mod rtio;\n \n /// libuv\n #[path = \"uv/mod.rs\"]\n-mod uv;\n-\n-/// The implementation of `rtio` for libuv\n-mod uvio;\n-\n-/// C bindings to libuv\n-pub mod uvll;\n-\n+pub mod uv;\n \n // FIXME #5248: The import in `sched` doesn't resolve unless this is pub!\n /// Bindings to pthread/windows thread-local storage\n@@ -94,7 +89,7 @@ pub mod test;\n pub fn start(main: *u8, _argc: int, _argv: **c_char, _crate_map: *u8) -> int {\n \n     use self::sched::{Scheduler, Task};\n-    use self::uvio::UvEventLoop;\n+    use self::uv::uvio::UvEventLoop;\n     use sys::Closure;\n     use ptr;\n     use cast;\n@@ -175,7 +170,7 @@ pub fn context() -> RuntimeContext {\n fn test_context() {\n     use unstable::run_in_bare_thread;\n     use self::sched::{local_sched, Task};\n-    use self::uvio::UvEventLoop;\n+    use rt::uv::uvio::UvEventLoop;\n     use cell::Cell;\n \n     assert!(context() == OldTaskContext);"}, {"sha": "497ff8841b6bd151aad1df81c10cb521877672a9", "filename": "src/libcore/rt/rtio.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Frtio.rs?ref=ab284d44d8d181b12783d82755ff83a014027e4a", "patch": "@@ -13,13 +13,14 @@ use result::*;\n \n use rt::io::IoError;\n use super::io::net::ip::IpAddr;\n+use rt::uv::uvio;\n \n // XXX: ~object doesn't work currently so these are some placeholder\n // types to use instead\n-pub type EventLoopObject = super::uvio::UvEventLoop;\n-pub type IoFactoryObject = super::uvio::UvIoFactory;\n-pub type RtioTcpStreamObject = super::uvio::UvTcpStream;\n-pub type RtioTcpListenerObject = super::uvio::UvTcpListener;\n+pub type EventLoopObject = uvio::UvEventLoop;\n+pub type IoFactoryObject = uvio::UvIoFactory;\n+pub type RtioTcpStreamObject = uvio::UvTcpStream;\n+pub type RtioTcpListenerObject = uvio::UvTcpListener;\n \n pub trait EventLoop {\n     fn run(&mut self);"}, {"sha": "1ab4b5debd380aca42870919623b82f21f13cca6", "filename": "src/libcore/rt/sched.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=ab284d44d8d181b12783d82755ff83a014027e4a", "patch": "@@ -19,7 +19,7 @@ use super::context::Context;\n use super::local_services::LocalServices;\n use cell::Cell;\n \n-#[cfg(test)] use super::uvio::UvEventLoop;\n+#[cfg(test)] use rt::uv::uvio::UvEventLoop;\n #[cfg(test)] use unstable::run_in_bare_thread;\n #[cfg(test)] use int;\n ", "previous_filename": "src/libcore/rt/sched/mod.rs"}, {"sha": "185443563fc9bd9db7f34a370dc8ccf0e7ad8135", "filename": "src/libcore/rt/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftest.rs?ref=ab284d44d8d181b12783d82755ff83a014027e4a", "patch": "@@ -19,7 +19,7 @@ use rt::local_services::LocalServices;\n pub fn run_in_newsched_task(f: ~fn()) {\n     use unstable::run_in_bare_thread;\n     use super::sched::Task;\n-    use super::uvio::UvEventLoop;\n+    use rt::uv::uvio::UvEventLoop;\n \n     let f = Cell(f);\n "}, {"sha": "816a3a10a901686619b03dac6934a1c5b9a252b7", "filename": "src/libcore/rt/uv/file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Ffile.rs?ref=ab284d44d8d181b12783d82755ff83a014027e4a", "patch": "@@ -12,8 +12,8 @@ use prelude::*;\n use ptr::null;\n use libc::c_void;\n use super::{UvError, Callback, Request, NativeHandle, Loop};\n-use super::super::uvll;\n-use super::super::uvll::*;\n+use rt::uv::uvll;\n+use rt::uv::uvll::*;\n \n pub type FsCallback = ~fn(FsRequest, Option<UvError>);\n impl Callback for FsCallback { }"}, {"sha": "5d31f39411da0801ac3397f010d2a916d27e86f3", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=ab284d44d8d181b12783d82755ff83a014027e4a", "patch": "@@ -10,7 +10,7 @@\n \n /*!\n \n-Bindings to libuv.\n+Bindings to libuv, along with the default implementation of `core::rt::rtio`.\n \n UV types consist of the event loop (Loop), Watchers, Requests and\n Callbacks.\n@@ -47,7 +47,6 @@ use cast::transmute;\n use ptr::null;\n use unstable::finally::Finally;\n \n-use rt::uvll;\n use rt::io::IoError;\n \n #[cfg(test)] use unstable::run_in_bare_thread;\n@@ -56,6 +55,13 @@ pub use self::file::{FsRequest, FsCallback};\n pub use self::net::{StreamWatcher, TcpWatcher};\n pub use self::net::{ReadCallback, AllocCallback, ConnectionCallback, ConnectCallback};\n \n+\n+/// The implementation of `rtio` for libuv\n+pub mod uvio;\n+\n+/// C bindings to libuv\n+pub mod uvll;\n+\n pub mod file;\n pub mod net;\n \n@@ -240,7 +246,7 @@ pub fn uv_error_to_io_error(uverr: UvError) -> IoError {\n \n     unsafe {\n         // Importing error constants\n-        use rt::uvll::*;\n+        use rt::uv::uvll::*;\n         use rt::io::*;\n \n         // uv error descriptions are static"}, {"sha": "ff47e2caec8fed15c358bc3c65fe1a98bd31e9ce", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=ab284d44d8d181b12783d82755ff83a014027e4a", "patch": "@@ -11,8 +11,8 @@\n use prelude::*;\n use libc::{size_t, ssize_t, c_int, c_void};\n use cast::transmute_mut_region;\n-use super::super::uvll;\n-use super::super::uvll::*;\n+use rt::uv::uvll;\n+use rt::uv::uvll::*;\n use super::{Loop, Watcher, Request, UvError, Buf, Callback, NativeHandle, NullCallback,\n             loop_from_watcher, status_to_maybe_uv_error,\n             install_watcher_data, get_watcher_data, drop_watcher_data,"}, {"sha": "70f233a29d3409ce93b617c7c3dd879153f035bd", "filename": "src/libcore/rt/uv/uvio.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs?ref=ab284d44d8d181b12783d82755ff83a014027e4a", "previous_filename": "src/libcore/rt/uvio.rs"}, {"sha": "2a2812c67184750884b184b1c2fa7d387867f57a", "filename": "src/libcore/rt/uv/uvll.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284d44d8d181b12783d82755ff83a014027e4a/src%2Flibcore%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fuvll.rs?ref=ab284d44d8d181b12783d82755ff83a014027e4a", "previous_filename": "src/libcore/rt/uvll.rs"}]}