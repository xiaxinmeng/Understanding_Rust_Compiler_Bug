{"sha": "3435683fd5930676b5a7ccd40dc08e4758e8b90a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MzU2ODNmZDU5MzA2NzZiNWE3Y2NkNDBkYzA4ZTQ3NThlOGI5MGE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-17T07:28:14Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-20T06:11:05Z"}, "message": "use `array_windows` instead of `windows` in the compiler", "tree": {"sha": "74920e5620b83156a7e5d8b28e83e141432a98f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74920e5620b83156a7e5d8b28e83e141432a98f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3435683fd5930676b5a7ccd40dc08e4758e8b90a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3435683fd5930676b5a7ccd40dc08e4758e8b90a", "html_url": "https://github.com/rust-lang/rust/commit/3435683fd5930676b5a7ccd40dc08e4758e8b90a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3435683fd5930676b5a7ccd40dc08e4758e8b90a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "255a4c58f5863ed41c2e68792799125c6c676575", "url": "https://api.github.com/repos/rust-lang/rust/commits/255a4c58f5863ed41c2e68792799125c6c676575", "html_url": "https://github.com/rust-lang/rust/commit/255a4c58f5863ed41c2e68792799125c6c676575"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "3322edd18ccbdda0f5c3c34c358fca7da4bb7513", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=3435683fd5930676b5a7ccd40dc08e4758e8b90a", "patch": "@@ -8,6 +8,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![allow(incomplete_features)]\n+#![feature(array_windows)]\n #![feature(control_flow_enum)]\n #![feature(in_band_lifetimes)]\n #![feature(unboxed_closures)]"}, {"sha": "4807380595db7267446061203cf4f7c26dbaee6e", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=3435683fd5930676b5a7ccd40dc08e4758e8b90a", "patch": "@@ -34,7 +34,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n     /// and that there are no duplicates.\n     #[inline]\n     pub fn from_presorted_elements(elements: Vec<(K, V)>) -> SortedMap<K, V> {\n-        debug_assert!(elements.windows(2).all(|w| w[0].0 < w[1].0));\n+        debug_assert!(elements.array_windows().all(|[fst, snd]| fst.0 < snd.0));\n \n         SortedMap { data: elements }\n     }\n@@ -159,7 +159,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n             return;\n         }\n \n-        debug_assert!(elements.windows(2).all(|w| w[0].0 < w[1].0));\n+        debug_assert!(elements.array_windows().all(|[fst, snd]| fst.0 < snd.0));\n \n         let start_index = self.lookup_index_for(&elements[0].0);\n "}, {"sha": "b48592c103ca2d71deb6e5baba9c6cfae43b0246", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=3435683fd5930676b5a7ccd40dc08e4758e8b90a", "patch": "@@ -27,6 +27,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(test, feature(test))]\n+#![feature(array_windows)]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "b3125f55d4d6e4b4d054cc627236d0b61557023e", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=3435683fd5930676b5a7ccd40dc08e4758e8b90a", "patch": "@@ -70,9 +70,9 @@ fn is_camel_case(name: &str) -> bool {\n     // ones (some scripts don't have a concept of upper/lowercase)\n     !name.chars().next().unwrap().is_lowercase()\n         && !name.contains(\"__\")\n-        && !name.chars().collect::<Vec<_>>().windows(2).any(|pair| {\n+        && !name.chars().collect::<Vec<_>>().array_windows().any(|&[fst, snd]| {\n             // contains a capitalisable character followed by, or preceded by, an underscore\n-            char_has_case(pair[0]) && pair[1] == '_' || char_has_case(pair[1]) && pair[0] == '_'\n+            char_has_case(fst) && snd == '_' || char_has_case(snd) && fst == '_'\n         })\n }\n "}, {"sha": "ac931028c010db10a53411e3e6d6310efc28eb63", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=3435683fd5930676b5a7ccd40dc08e4758e8b90a", "patch": "@@ -23,6 +23,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![feature(array_windows)]\n #![feature(backtrace)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]"}, {"sha": "38c0441990b2573634566aa2f09cb8be9479809a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=3435683fd5930676b5a7ccd40dc08e4758e8b90a", "patch": "@@ -2419,7 +2419,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         eps: &[ExistentialPredicate<'tcx>],\n     ) -> &'tcx List<ExistentialPredicate<'tcx>> {\n         assert!(!eps.is_empty());\n-        assert!(eps.windows(2).all(|w| w[0].stable_cmp(self, &w[1]) != Ordering::Greater));\n+        assert!(eps.array_windows().all(|[a, b]| a.stable_cmp(self, b) != Ordering::Greater));\n         self._intern_existential_predicates(eps)\n     }\n "}, {"sha": "52b0a7e7067698de8439489e8e6b041ccfe248db", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=3435683fd5930676b5a7ccd40dc08e4758e8b90a", "patch": "@@ -6,6 +6,7 @@ Rust MIR: a lowered representation of Rust.\n \n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n+#![feature(array_windows)]\n #![feature(bindings_after_at)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]"}, {"sha": "db6d3b2d912d693aa640358abe69eaf54720c1fa", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=3435683fd5930676b5a7ccd40dc08e4758e8b90a", "patch": "@@ -277,14 +277,8 @@ where\n \n     symbols.sort_by_key(|sym| sym.1);\n \n-    for pair in symbols.windows(2) {\n-        let sym1 = &pair[0].1;\n-        let sym2 = &pair[1].1;\n-\n+    for &[(mono_item1, ref sym1), (mono_item2, ref sym2)] in symbols.array_windows() {\n         if sym1 == sym2 {\n-            let mono_item1 = pair[0].0;\n-            let mono_item2 = pair[1].0;\n-\n             let span1 = mono_item1.local_span(tcx);\n             let span2 = mono_item2.local_span(tcx);\n "}, {"sha": "714041ad4e8741df90c20ee28640030f398058ba", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=3435683fd5930676b5a7ccd40dc08e4758e8b90a", "patch": "@@ -1,7 +1,7 @@\n //! Construction of MIR from HIR.\n //!\n //! This crate also contains the match exhaustiveness and usefulness checking.\n-\n+#![feature(array_windows)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(const_fn)]"}, {"sha": "e71e1abd680b34543cecee18756a031bb9197772", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=3435683fd5930676b5a7ccd40dc08e4758e8b90a", "patch": "@@ -2299,8 +2299,8 @@ fn split_grouped_constructors<'p, 'tcx>(\n                 // interval into a constructor.\n                 split_ctors.extend(\n                     borders\n-                        .windows(2)\n-                        .filter_map(|window| match (window[0], window[1]) {\n+                        .array_windows()\n+                        .filter_map(|&[fst, snd]| match (fst, snd) {\n                             (Border::JustBefore(n), Border::JustBefore(m)) => {\n                                 if n < m {\n                                     Some(IntRange { range: n..=(m - 1), ty, span })"}, {"sha": "e817fa56c55ebc4ddc049cae7a1c73301d082f83", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3435683fd5930676b5a7ccd40dc08e4758e8b90a/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=3435683fd5930676b5a7ccd40dc08e4758e8b90a", "patch": "@@ -5,6 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![feature(array_windows)]\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n@@ -1158,7 +1159,12 @@ impl<S: Encoder> Encodable<S> for SourceFile {\n                     let max_line_length = if lines.len() == 1 {\n                         0\n                     } else {\n-                        lines.windows(2).map(|w| w[1] - w[0]).map(|bp| bp.to_usize()).max().unwrap()\n+                        lines\n+                            .array_windows()\n+                            .map(|&[fst, snd]| snd - fst)\n+                            .map(|bp| bp.to_usize())\n+                            .max()\n+                            .unwrap()\n                     };\n \n                     let bytes_per_diff: u8 = match max_line_length {\n@@ -1173,7 +1179,7 @@ impl<S: Encoder> Encodable<S> for SourceFile {\n                     // Encode the first element.\n                     lines[0].encode(s)?;\n \n-                    let diff_iter = (&lines[..]).windows(2).map(|w| (w[1] - w[0]));\n+                    let diff_iter = lines[..].array_windows().map(|&[fst, snd]| snd - fst);\n \n                     match bytes_per_diff {\n                         1 => {"}]}