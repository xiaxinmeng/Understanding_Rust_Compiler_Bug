{"sha": "b8a96dcf14fd834c7d9beaaeb58ddb0ed52d2349", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YTk2ZGNmMTRmZDgzNGM3ZDliZWFhZWI1OGRkYjBlZDUyZDIzNDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-14T22:14:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-14T22:14:47Z"}, "message": "Apply review suggestions", "tree": {"sha": "55c120408635d6534c96daacd30b847deb1f5289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55c120408635d6534c96daacd30b847deb1f5289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8a96dcf14fd834c7d9beaaeb58ddb0ed52d2349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a96dcf14fd834c7d9beaaeb58ddb0ed52d2349", "html_url": "https://github.com/rust-lang/rust/commit/b8a96dcf14fd834c7d9beaaeb58ddb0ed52d2349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8a96dcf14fd834c7d9beaaeb58ddb0ed52d2349/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a", "html_url": "https://github.com/rust-lang/rust/commit/f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "b497cc5d7c8d1b407f10c356a760392174ff26a7", "filename": "ARCHITECTURE.md", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b8a96dcf14fd834c7d9beaaeb58ddb0ed52d2349/ARCHITECTURE.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8a96dcf14fd834c7d9beaaeb58ddb0ed52d2349/ARCHITECTURE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ARCHITECTURE.md?ref=b8a96dcf14fd834c7d9beaaeb58ddb0ed52d2349", "patch": "@@ -11,8 +11,8 @@ Some of the components of this repository are generated through automatic\n processes. These are outlined below:\n \n - `gen-kinds`: The kinds of tokens are reused in several places, so a generator\n-  is used. This process uses [tera] to generate, using data in [grammar.ron],\n-  the files:\n+  is used. We use tera templates to generate the files listed below, based on\n+  the grammar described in [grammar.ron]:\n   - [ast/generated.rs][ast generated] in `ra_syntax` based on\n     [ast/generated.tera.rs][ast source]\n   - [syntax_kinds/generated.rs][syntax_kinds generated] in `ra_syntax` based on\n@@ -21,9 +21,9 @@ processes. These are outlined below:\n [tera]: https://tera.netlify.com/\n [grammar.ron]: ./crates/ra_syntax/src/grammar.ron\n [ast generated]: ./crates/ra_syntax/src/ast/generated.rs\n-[ast source]: ./crates/ra_syntax/src/ast/generated.tera.rs\n+[ast source]: ./crates/ra_syntax/src/ast/generated.rs.tera\n [syntax_kinds generated]: ./crates/ra_syntax/src/syntax_kinds/generated.rs\n-[syntax_kinds source]: ./crates/ra_syntax/src/syntax_kinds/generated.tera.rs\n+[syntax_kinds source]: ./crates/ra_syntax/src/syntax_kinds/generated.rs.tera\n \n \n ## Code Walk-Through\n@@ -36,7 +36,7 @@ notes.\n \n - [rowan](https://github.com/rust-analyzer/rowan) library is used for constructing syntax trees.\n - `grammar` module is the actual parser. It is a hand-written recursive descent parsers, which\n-  produced a sequence of events like \"start node X\", \"finish not Y\". It works similarly to  [kotlin parser](https://github.com/JetBrains/kotlin/blob/4d951de616b20feca92f3e9cc9679b2de9e65195/compiler/frontend/src/org/jetbrains/kotlin/parsing/KotlinParsing.java),\n+  produces a sequence of events like \"start node X\", \"finish not Y\". It works similarly to  [kotlin parser](https://github.com/JetBrains/kotlin/blob/4d951de616b20feca92f3e9cc9679b2de9e65195/compiler/frontend/src/org/jetbrains/kotlin/parsing/KotlinParsing.java),\n   which is a good source for inspiration for dealing with syntax errors and incomplete input. Original [libsyntax parser](https://github.com/rust-lang/rust/blob/6b99adeb11313197f409b4f7c4083c2ceca8a4fe/src/libsyntax/parse/parser.rs)\n   is what we use for the definition of the Rust language.\n - `parser_api/parser_impl` bridges the tree-agnostic parser from `grammar` with `rowan` trees.\n@@ -69,7 +69,7 @@ synchronization and such.\n In a sense, `ra_editor` is just a bunch of pure functions which take a\n syntax tree as an input.\n \n-The tests for `ra_editor` are `[cfg(test)] mod tests` unit-tests spread\n+The tests for `ra_editor` are `#[cfg(test)] mod tests` unit-tests spread\n throughout its modules.\n \n ### `crates/salsa`\n@@ -104,7 +104,7 @@ A CLI interface to rust-analyzer.\n \n ### `crate/tools`\n \n-Code-gen tasks, used to develop rust-analyzer:\n+Custom Cargo tasks used to develop rust-analyzer:\n \n - `cargo gen-kinds` -- generate `ast` and `syntax_kinds`\n - `cargo gen-tests` -- collect inline tests from grammar\n@@ -117,11 +117,17 @@ VS Code plugin\n \n ## Common workflows\n \n-To try out VS Code extensions, run `cargo install-code`. To see logs from the language server,\n-set `RUST_LOG=info` env variable. To see all communication between the server and the client, use\n+To try out VS Code extensions, run `cargo install-code`.  This installs both the\n+`ra_lsp_server` binary and VS Code extension. To install only the binary, `use\n+cargo install --path crates/ra_lsp_server --force`\n+\n+To see logs from the language server, set `RUST_LOG=info` env variable. To see\n+all communication between the server and the client, use\n `RUST_LOG=gen_lsp_server=debug` (will print quite a bit of stuff).\n \n To run tests, just `cargo test`.\n \n-To work on VS Code extension, launch code inside `editors/code` and use `F5` to launch/debug.\n+To work on VS Code extension, launch code inside `editors/code` and use `F5` to\n+launch/debug. To automatically apply formatter and linter suggestions, use `npm\n+run fix`.\n "}]}