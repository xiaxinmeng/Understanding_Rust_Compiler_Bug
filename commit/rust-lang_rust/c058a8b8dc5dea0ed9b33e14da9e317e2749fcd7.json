{"sha": "c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNThhOGI4ZGM1ZGVhMGVkOWIzM2UxNGRhOWUzMTdlMjc0OWZjZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-30T23:22:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-30T23:22:09Z"}, "message": "Auto merge of #74682 - alexcrichton:backtrace-gimli-round-2, r=Mark-Simulacrum\n\nstd: Switch from libbacktrace to gimli (take 2)\n\nThis is the second attempt to land https://github.com/rust-lang/rust/pull/73441 after being reverted in https://github.com/rust-lang/rust/pull/74613. Will be gathering precise perf numbers here in this take.\n\nCloses #71060", "tree": {"sha": "e5f848c255499b56640944e3e32f10eaeb5eee1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5f848c255499b56640944e3e32f10eaeb5eee1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "html_url": "https://github.com/rust-lang/rust/commit/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc572cae2d1fc381cce476b5c787fd7221af98c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc572cae2d1fc381cce476b5c787fd7221af98c", "html_url": "https://github.com/rust-lang/rust/commit/cfc572cae2d1fc381cce476b5c787fd7221af98c"}, {"sha": "06d565c967bfb7c6ff52a991bbe47b4a2a25de3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/06d565c967bfb7c6ff52a991bbe47b4a2a25de3e", "html_url": "https://github.com/rust-lang/rust/commit/06d565c967bfb7c6ff52a991bbe47b4a2a25de3e"}], "stats": {"total": 186, "additions": 130, "deletions": 56}, "files": [{"sha": "a327aaa8d5a34501ae7c78625f95340cfbd77b06", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -44,3 +44,6 @@\n [submodule \"src/tools/rust-analyzer\"]\n \tpath = src/tools/rust-analyzer\n \turl = https://github.com/rust-analyzer/rust-analyzer.git\n+[submodule \"library/backtrace\"]\n+\tpath = library/backtrace\n+\turl = https://github.com/rust-lang/backtrace-rs.git"}, {"sha": "f6f2468055a1f458bb7434cacfb87865aa24b723", "filename": "Cargo.lock", "status": "modified", "additions": 59, "deletions": 29, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -1,10 +1,26 @@\n # This file is automatically @generated by Cargo.\n # It is not intended for manual editing.\n [[package]]\n-name = \"adler32\"\n-version = \"1.0.3\"\n+name = \"addr2line\"\n+version = \"0.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7e522997b529f05601e05166c07ed17789691f562762c7f3b987263d2dedee5c\"\n+checksum = \"1b6a2d3371669ab3ca9797670853d61402b03d0b4b9ebf33d677dfa720203072\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"gimli\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"adler\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ee2a4ec343196209d6594e19543ae87a39f96d5534d7174822a3ad825dd6ed7e\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-core\",\n+]\n \n [[package]]\n name = \"aho-corasick\"\n@@ -125,28 +141,14 @@ checksum = \"f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.46\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b1e692897359247cc6bb902933361652380af0f1b7651ae5c5013407f30e109e\"\n+version = \"0.3.50\"\n dependencies = [\n- \"backtrace-sys\",\n+ \"addr2line\",\n  \"cfg-if\",\n- \"compiler_builtins\",\n  \"libc\",\n+ \"miniz_oxide\",\n+ \"object\",\n  \"rustc-demangle\",\n- \"rustc-std-workspace-core\",\n-]\n-\n-[[package]]\n-name = \"backtrace-sys\"\n-version = \"0.1.37\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"18fbebbe1c9d1f383a9cc7e8ccdb471b91c8d024ee9c2ca5b5346121fe8b4399\"\n-dependencies = [\n- \"cc\",\n- \"compiler_builtins\",\n- \"libc\",\n- \"rustc-std-workspace-core\",\n ]\n \n [[package]]\n@@ -689,9 +691,9 @@ dependencies = [\n \n [[package]]\n name = \"crc32fast\"\n-version = \"1.1.2\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e91d5240c6975ef33aeb5f148f35275c25eda8e8a5f95abe421978b05b8bf192\"\n+checksum = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n dependencies = [\n  \"cfg-if\",\n ]\n@@ -1024,9 +1026,9 @@ checksum = \"37ab347416e802de484e4d03c7316c48f1ecb56574dfd4a46a80f173ce1de04d\"\n \n [[package]]\n name = \"flate2\"\n-version = \"1.0.12\"\n+version = \"1.0.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ad3c5233c9a940c8719031b423d7e6c16af66e031cb0420b0896f5245bf181d3\"\n+checksum = \"68c90b0fc46cf89d227cc78b40e494ff81287a92dd07631e5af0d06fe3cf885e\"\n dependencies = [\n  \"cfg-if\",\n  \"crc32fast\",\n@@ -1160,6 +1162,17 @@ dependencies = [\n  \"wasi\",\n ]\n \n+[[package]]\n+name = \"gimli\"\n+version = \"0.22.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"aaf91faf136cb47367fa430cd46e37a788775e7fa104f8b4bcb3861dc389b724\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n [[package]]\n name = \"git2\"\n version = \"0.13.5\"\n@@ -1820,11 +1833,14 @@ dependencies = [\n \n [[package]]\n name = \"miniz_oxide\"\n-version = \"0.3.5\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6f3f74f726ae935c3f514300cc6773a0c9492abc5e972d42ba0c0ebb88757625\"\n+checksum = \"be0f75932c1f6cfae3c04000e40114adf955636e19040f9c0a2c380702aa1c7f\"\n dependencies = [\n- \"adler32\",\n+ \"adler\",\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n ]\n \n [[package]]\n@@ -1956,6 +1972,17 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"object\"\n+version = \"0.20.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1ab52be62400ca80aa00285d25253d7f7c437b7375c4de678f5405d3afe82ca5\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n [[package]]\n name = \"once_cell\"\n version = \"1.1.0\"\n@@ -4348,8 +4375,8 @@ dependencies = [\n name = \"std\"\n version = \"0.0.0\"\n dependencies = [\n+ \"addr2line\",\n  \"alloc\",\n- \"backtrace\",\n  \"cfg-if\",\n  \"compiler_builtins\",\n  \"core\",\n@@ -4358,10 +4385,13 @@ dependencies = [\n  \"hashbrown\",\n  \"hermit-abi\",\n  \"libc\",\n+ \"miniz_oxide\",\n+ \"object\",\n  \"panic_abort\",\n  \"panic_unwind\",\n  \"profiler_builtins\",\n  \"rand 0.7.3\",\n+ \"rustc-demangle\",\n  \"unwind\",\n  \"wasi\",\n ]"}, {"sha": "1936e35aa4c5d252e64a06244b4f869ed53352da", "filename": "Cargo.toml", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -56,6 +56,18 @@ overflow-checks = false\n # per-crate configuration isn't specifiable in the environment.\n codegen-units = 10000\n \n+# These dependencies of the standard library implement symbolication for\n+# backtraces on most platforms. Their debuginfo causes both linking to be slower\n+# (more data to chew through) and binaries to be larger without really all that\n+# much benefit. This section turns them all to down to have no debuginfo which\n+# helps to improve link times a little bit.\n+[profile.release.package]\n+addr2line.debug = 0\n+adler.debug = 0\n+gimli.debug = 0\n+miniz_oxide.debug = 0\n+object.debug = 0\n+\n # We want the RLS to use the version of Cargo that we've got vendored in this\n # repository to ensure that the same exact version of Cargo is used by both the\n # RLS and the Cargo binary itself. The RLS depends on Cargo as a git repository\n@@ -80,5 +92,11 @@ rustc-std-workspace-core = { path = 'library/rustc-std-workspace-core' }\n rustc-std-workspace-alloc = { path = 'library/rustc-std-workspace-alloc' }\n rustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }\n \n+# This crate's integration with libstd is a bit wonky, so we use a submodule\n+# instead of a crates.io dependency. Make sure everything else in the repo is\n+# also using the submodule, however, so we can avoid duplicate copies of the\n+# source code for this crate.\n+backtrace = { path = \"library/backtrace\" }\n+\n [patch.\"https://github.com/rust-lang/rust-clippy\"]\n clippy_lints = { path = \"src/tools/clippy/clippy_lints\" }"}, {"sha": "4083a90168d605b682ba166a0c01f86b3384e474", "filename": "library/backtrace", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fbacktrace?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -0,0 +1 @@\n+Subproject commit 4083a90168d605b682ba166a0c01f86b3384e474"}, {"sha": "474765d8638116fd6b3740a32842b618fb4210a1", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -22,11 +22,15 @@ profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }\n hashbrown = { version = \"0.6.2\", default-features = false, features = ['rustc-dep-of-std'] }\n \n-[dependencies.backtrace_rs]\n-package = \"backtrace\"\n-version = \"0.3.46\"\n-default-features = false # without the libstd `backtrace` feature, stub out everything\n-features = [ \"rustc-dep-of-std\" ] # enable build support for integrating into libstd\n+# Dependencies of the `backtrace` crate\n+addr2line = { version = \"0.13.0\", optional = true, default-features = false }\n+rustc-demangle = { version = \"0.1.4\", features = ['rustc-dep-of-std'] }\n+miniz_oxide = { version = \"0.4.0\", optional = true, default-features = false }\n+[dependencies.object]\n+version = \"0.20\"\n+optional = true\n+default-features = false\n+features = ['read_core', 'elf', 'macho', 'pe']\n \n [dev-dependencies]\n rand = \"0.7\"\n@@ -45,11 +49,12 @@ wasi = { version = \"0.9.0\", features = ['rustc-dep-of-std'], default-features =\n \n [features]\n backtrace = [\n-  \"backtrace_rs/dbghelp\",          # backtrace/symbolize on MSVC\n-  \"backtrace_rs/libbacktrace\",     # symbolize on most platforms\n-  \"backtrace_rs/libunwind\",        # backtrace on most platforms\n-  \"backtrace_rs/dladdr\",           # symbolize on platforms w/o libbacktrace\n+  \"gimli-symbolize\",\n+  'addr2line/rustc-dep-of-std',\n+  'object/rustc-dep-of-std',\n+  'miniz_oxide/rustc-dep-of-std',\n ]\n+gimli-symbolize = []\n \n panic-unwind = [\"panic_unwind\"]\n profiler = [\"profiler_builtins\"]"}, {"sha": "83073cc77dd1a12354ce6b9e535804e83f33e27e", "filename": "library/std/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -88,4 +88,5 @@ fn main() {\n         println!(\"cargo:rustc-cfg=feature=\\\"restricted-std\\\"\");\n     }\n     println!(\"cargo:rustc-env=STD_ENV_ARCH={}\", env::var(\"CARGO_CFG_TARGET_ARCH\").unwrap());\n+    println!(\"cargo:rustc-cfg=backtrace_in_libstd\");\n }"}, {"sha": "09f83ea5fca81c5eb42c2fa9dfd4218933699c1e", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -91,15 +91,14 @@\n // `Backtrace`, but that's a relatively small price to pay relative to capturing\n // a backtrace or actually symbolizing it.\n \n+use crate::backtrace_rs::{self, BytesOrWideString};\n use crate::env;\n use crate::ffi::c_void;\n use crate::fmt;\n use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n use crate::sync::Mutex;\n use crate::sys_common::backtrace::{lock, output_filename};\n use crate::vec::Vec;\n-use backtrace::BytesOrWideString;\n-use backtrace_rs as backtrace;\n \n /// A captured OS thread stack backtrace.\n ///\n@@ -150,7 +149,7 @@ struct BacktraceFrame {\n }\n \n enum RawFrame {\n-    Actual(backtrace::Frame),\n+    Actual(backtrace_rs::Frame),\n     #[cfg(test)]\n     Fake,\n }\n@@ -197,7 +196,7 @@ impl fmt::Debug for BacktraceSymbol {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"{{ \")?;\n \n-        if let Some(fn_name) = self.name.as_ref().map(|b| backtrace::SymbolName::new(b)) {\n+        if let Some(fn_name) = self.name.as_ref().map(|b| backtrace_rs::SymbolName::new(b)) {\n             write!(fmt, \"fn: \\\"{:#}\\\"\", fn_name)?;\n         } else {\n             write!(fmt, \"fn: <unknown>\")?;\n@@ -223,7 +222,7 @@ impl fmt::Debug for BytesOrWide {\n                 BytesOrWide::Bytes(w) => BytesOrWideString::Bytes(w),\n                 BytesOrWide::Wide(w) => BytesOrWideString::Wide(w),\n             },\n-            backtrace::PrintFmt::Short,\n+            backtrace_rs::PrintFmt::Short,\n             crate::env::current_dir().as_ref().ok(),\n         )\n     }\n@@ -305,7 +304,7 @@ impl Backtrace {\n         let mut frames = Vec::new();\n         let mut actual_start = None;\n         unsafe {\n-            backtrace::trace_unsynchronized(|frame| {\n+            backtrace_rs::trace_unsynchronized(|frame| {\n                 frames.push(BacktraceFrame {\n                     frame: RawFrame::Actual(frame.clone()),\n                     symbols: Vec::new(),\n@@ -356,9 +355,9 @@ impl fmt::Display for Backtrace {\n \n         let full = fmt.alternate();\n         let (frames, style) = if full {\n-            (&capture.frames[..], backtrace::PrintFmt::Full)\n+            (&capture.frames[..], backtrace_rs::PrintFmt::Full)\n         } else {\n-            (&capture.frames[capture.actual_start..], backtrace::PrintFmt::Short)\n+            (&capture.frames[capture.actual_start..], backtrace_rs::PrintFmt::Short)\n         };\n \n         // When printing paths we try to strip the cwd if it exists, otherwise\n@@ -370,7 +369,7 @@ impl fmt::Display for Backtrace {\n             output_filename(fmt, path, style, cwd.as_ref().ok())\n         };\n \n-        let mut f = backtrace::BacktraceFmt::new(fmt, style, &mut print_path);\n+        let mut f = backtrace_rs::BacktraceFmt::new(fmt, style, &mut print_path);\n         f.add_context()?;\n         for frame in frames {\n             let mut f = f.frame();\n@@ -380,7 +379,7 @@ impl fmt::Display for Backtrace {\n                 for symbol in frame.symbols.iter() {\n                     f.print_raw(\n                         frame.frame.ip(),\n-                        symbol.name.as_ref().map(|b| backtrace::SymbolName::new(b)),\n+                        symbol.name.as_ref().map(|b| backtrace_rs::SymbolName::new(b)),\n                         symbol.filename.as_ref().map(|b| match b {\n                             BytesOrWide::Bytes(w) => BytesOrWideString::Bytes(w),\n                             BytesOrWide::Wide(w) => BytesOrWideString::Wide(w),\n@@ -415,7 +414,7 @@ impl Capture {\n                 RawFrame::Fake => unimplemented!(),\n             };\n             unsafe {\n-                backtrace::resolve_frame_unsynchronized(frame, |symbol| {\n+                backtrace_rs::resolve_frame_unsynchronized(frame, |symbol| {\n                     symbols.push(BacktraceSymbol {\n                         name: symbol.name().map(|m| m.as_bytes().to_vec()),\n                         filename: symbol.filename_raw().map(|b| match b {"}, {"sha": "30e1514a8b8306cd28f6842b5e98243e8bb3c9a6", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -511,6 +511,10 @@ mod panicking;\n // compiler\n pub mod rt;\n \n+#[path = \"../../backtrace/src/lib.rs\"]\n+#[allow(dead_code, unused_attributes)]\n+mod backtrace_rs;\n+\n // Pull in the `std_detect` crate directly into libstd. The contents of\n // `std_detect` are in a different repository: rust-lang/stdarch.\n //"}, {"sha": "ab2a60103069d6571179c20c565f5e64800d6f0b", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -171,7 +171,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n     let backtrace_env = if panic_count::get() >= 2 {\n-        RustBacktrace::Print(backtrace_rs::PrintFmt::Full)\n+        RustBacktrace::Print(crate::backtrace_rs::PrintFmt::Full)\n     } else {\n         backtrace::rust_backtrace_env()\n     };"}, {"sha": "d386a656e4ffdc896aa93fdceb53060d1c75a71c", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -1,3 +1,4 @@\n+use crate::backtrace_rs::{self, BacktraceFmt, BytesOrWideString, PrintFmt};\n use crate::borrow::Cow;\n /// Common code for printing the backtrace in the same way across the different\n /// supported platforms.\n@@ -9,8 +10,6 @@ use crate::path::{self, Path, PathBuf};\n use crate::sync::atomic::{self, Ordering};\n use crate::sys::mutex::Mutex;\n \n-use backtrace_rs::{BacktraceFmt, BytesOrWideString, PrintFmt};\n-\n /// Max number of frames to print.\n const MAX_NB_FRAMES: usize = 100;\n "}, {"sha": "26cdcfff2a316a5ff80d20ee544b30b639d2e7cb", "filename": "rustfmt.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -14,6 +14,7 @@ ignore = [\n     \"src/test\",\n \n     # do not format submodules\n+    \"library/backtrace\",\n     \"library/stdarch\",\n     \"src/doc/book\",\n     \"src/doc/edition-guide\","}, {"sha": "a4a1d5193b9b9b3ff1e010e7c9a5020ef687aaae", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -1016,7 +1016,17 @@ impl Step for Src {\n         let src_files = [\"Cargo.lock\"];\n         // This is the reduced set of paths which will become the rust-src component\n         // (essentially libstd and all of its path dependencies).\n-        copy_src_dirs(builder, &builder.src, &[\"library\"], &[], &dst_src);\n+        copy_src_dirs(\n+            builder,\n+            &builder.src,\n+            &[\"library\"],\n+            &[\n+                // not needed and contains symlinks which rustup currently\n+                // chokes on when unpacking.\n+                \"library/backtrace/crates\",\n+            ],\n+            &dst_src,\n+        );\n         for file in src_files.iter() {\n             builder.copy(&builder.src.join(file), &dst_src.join(file));\n         }"}, {"sha": "e340a0e3f2486659124f44a38f3c491def427d5a", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -17,6 +17,7 @@ const LICENSES: &[&str] = &[\n     \"MIT\",\n     \"Unlicense/MIT\",\n     \"Unlicense OR MIT\",\n+    \"0BSD OR MIT OR Apache-2.0\", // adler license\n ];\n \n /// These are exceptions to Rust's permissive licensing policy, and\n@@ -36,7 +37,6 @@ const EXCEPTIONS: &[(&str, &str)] = &[\n     (\"ryu\", \"Apache-2.0 OR BSL-1.0\"),       // rls/cargo/... (because of serde)\n     (\"bytesize\", \"Apache-2.0\"),             // cargo\n     (\"im-rc\", \"MPL-2.0+\"),                  // cargo\n-    (\"adler32\", \"BSD-3-Clause AND Zlib\"),   // cargo dep that isn't used\n     (\"constant_time_eq\", \"CC0-1.0\"),        // rustfmt\n     (\"sized-chunks\", \"MPL-2.0+\"),           // cargo via im-rc\n     (\"bitmaps\", \"MPL-2.0+\"),                // cargo via im-rc\n@@ -57,15 +57,15 @@ const RESTRICTED_DEPENDENCY_CRATES: &[&str] = &[\"rustc_middle\", \"rustc_codegen_l\n /// This list is here to provide a speed-bump to adding a new dependency to\n /// rustc. Please check with the compiler team before adding an entry.\n const PERMITTED_DEPENDENCIES: &[&str] = &[\n-    \"adler32\",\n+    \"addr2line\",\n+    \"adler\",\n     \"aho-corasick\",\n     \"annotate-snippets\",\n     \"ansi_term\",\n     \"arrayvec\",\n     \"atty\",\n     \"autocfg\",\n     \"backtrace\",\n-    \"backtrace-sys\",\n     \"bitflags\",\n     \"block-buffer\",\n     \"block-padding\",\n@@ -98,6 +98,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"generic-array\",\n     \"getopts\",\n     \"getrandom\",\n+    \"gimli\",\n     \"hashbrown\",\n     \"hermit-abi\",\n     \"humantime\",\n@@ -119,6 +120,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"miniz_oxide\",\n     \"nodrop\",\n     \"num_cpus\",\n+    \"object\",\n     \"once_cell\",\n     \"opaque-debug\",\n     \"parking_lot\","}, {"sha": "19218cbd66a8a59d65c94dfb84303ed03d7eec33", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7", "patch": "@@ -51,6 +51,7 @@ pub mod unstable_book;\n fn filter_dirs(path: &Path) -> bool {\n     let skip = [\n         \"src/llvm-project\",\n+        \"library/backtrace\",\n         \"library/stdarch\",\n         \"src/tools/cargo\",\n         \"src/tools/clippy\","}]}