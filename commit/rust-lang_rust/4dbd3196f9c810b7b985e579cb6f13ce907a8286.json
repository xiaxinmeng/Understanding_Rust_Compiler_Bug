{"sha": "4dbd3196f9c810b7b985e579cb6f13ce907a8286", "node_id": "C_kwDOAAsO6NoAKDRkYmQzMTk2ZjljODEwYjdiOTg1ZTU3OWNiNmYxM2NlOTA3YTgyODY", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T18:30:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T18:30:07Z"}, "message": "Move most code from y.rs to build_system/mod.rs\n\ny.rs can't be rustfmt'ed without making it no longer be a valid bash\nscript.", "tree": {"sha": "55308a04b8662a8e0a164b1c605ffff2652c9c81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55308a04b8662a8e0a164b1c605ffff2652c9c81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dbd3196f9c810b7b985e579cb6f13ce907a8286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbd3196f9c810b7b985e579cb6f13ce907a8286", "html_url": "https://github.com/rust-lang/rust/commit/4dbd3196f9c810b7b985e579cb6f13ce907a8286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dbd3196f9c810b7b985e579cb6f13ce907a8286/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f328359787c19f27d93506e537442f417d5e86f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f328359787c19f27d93506e537442f417d5e86f5", "html_url": "https://github.com/rust-lang/rust/commit/f328359787c19f27d93506e537442f417d5e86f5"}], "stats": {"total": 276, "additions": 138, "deletions": 138}, "files": [{"sha": "0a56eb131ed30f3a7e2a0bd13ef5e74a39569115", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbd3196f9c810b7b985e579cb6f13ce907a8286/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbd3196f9c810b7b985e579cb6f13ce907a8286/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=4dbd3196f9c810b7b985e579cb6f13ce907a8286", "patch": "@@ -49,7 +49,7 @@ pub(crate) fn build_backend(\n     cmd.env(\"RUSTFLAGS\", rustflags);\n \n     eprintln!(\"[BUILD] rustc_codegen_cranelift\");\n-    crate::utils::spawn_and_wait(cmd);\n+    super::utils::spawn_and_wait(cmd);\n \n     Path::new(\"target\").join(host_triple).join(channel)\n }"}, {"sha": "c9c003d461095754bb0425786ab3ab796a3490b0", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4dbd3196f9c810b7b985e579cb6f13ce907a8286/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbd3196f9c810b7b985e579cb6f13ce907a8286/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=4dbd3196f9c810b7b985e579cb6f13ce907a8286", "patch": "@@ -3,9 +3,9 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n \n-use crate::rustc_info::{get_file_name, get_rustc_version};\n-use crate::utils::{spawn_and_wait, try_hard_link};\n-use crate::SysrootKind;\n+use super::rustc_info::{get_file_name, get_rustc_version};\n+use super::utils::{spawn_and_wait, try_hard_link};\n+use super::SysrootKind;\n \n pub(crate) fn build_sysroot(\n     channel: &str,\n@@ -52,7 +52,7 @@ pub(crate) fn build_sysroot(\n         .arg(\"-g\");\n     spawn_and_wait(build_cargo_wrapper_cmd);\n \n-    let default_sysroot = crate::rustc_info::get_default_sysroot();\n+    let default_sysroot = super::rustc_info::get_default_sysroot();\n \n     let rustlib = target_dir.join(\"lib\").join(\"rustlib\");\n     let host_rustlib_lib = rustlib.join(host_triple).join(\"lib\");\n@@ -167,7 +167,7 @@ fn build_clif_sysroot_for_triple(\n \n     let build_dir = Path::new(\"build_sysroot\").join(\"target\").join(triple).join(channel);\n \n-    if !crate::config::get_bool(\"keep_sysroot\") {\n+    if !super::config::get_bool(\"keep_sysroot\") {\n         // Cleanup the target dir with the exception of build scripts and the incremental cache\n         for dir in [\"build\", \"deps\", \"examples\", \"native\"] {\n             if build_dir.join(dir).exists() {"}, {"sha": "b228da3981fdb58913fe2ee7692188e083896f15", "filename": "build_system/mod.rs", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/4dbd3196f9c810b7b985e579cb6f13ce907a8286/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbd3196f9c810b7b985e579cb6f13ce907a8286/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=4dbd3196f9c810b7b985e579cb6f13ce907a8286", "patch": "@@ -0,0 +1,127 @@\n+use std::env;\n+use std::path::PathBuf;\n+use std::process;\n+\n+mod build_backend;\n+mod build_sysroot;\n+mod config;\n+mod prepare;\n+mod rustc_info;\n+mod utils;\n+\n+fn usage() {\n+    eprintln!(\"Usage:\");\n+    eprintln!(\"  ./y.rs prepare\");\n+    eprintln!(\n+        \"  ./y.rs build [--debug] [--sysroot none|clif|llvm] [--target-dir DIR] [--no-unstable-features]\"\n+    );\n+}\n+\n+macro_rules! arg_error {\n+    ($($err:tt)*) => {{\n+        eprintln!($($err)*);\n+        usage();\n+        std::process::exit(1);\n+    }};\n+}\n+\n+enum Command {\n+    Build,\n+}\n+\n+#[derive(Copy, Clone)]\n+pub(crate) enum SysrootKind {\n+    None,\n+    Clif,\n+    Llvm,\n+}\n+\n+pub fn main() {\n+    env::set_var(\"CG_CLIF_DISPLAY_CG_TIME\", \"1\");\n+    env::set_var(\"CG_CLIF_DISABLE_INCR_CACHE\", \"1\");\n+    // The target dir is expected in the default location. Guard against the user changing it.\n+    env::set_var(\"CARGO_TARGET_DIR\", \"target\");\n+\n+    let mut args = env::args().skip(1);\n+    let command = match args.next().as_deref() {\n+        Some(\"prepare\") => {\n+            if args.next().is_some() {\n+                arg_error!(\"./x.rs prepare doesn't expect arguments\");\n+            }\n+            prepare::prepare();\n+            process::exit(0);\n+        }\n+        Some(\"build\") => Command::Build,\n+        Some(flag) if flag.starts_with('-') => arg_error!(\"Expected command found flag {}\", flag),\n+        Some(command) => arg_error!(\"Unknown command {}\", command),\n+        None => {\n+            usage();\n+            process::exit(0);\n+        }\n+    };\n+\n+    let mut target_dir = PathBuf::from(\"build\");\n+    let mut channel = \"release\";\n+    let mut sysroot_kind = SysrootKind::Clif;\n+    let mut use_unstable_features = true;\n+    while let Some(arg) = args.next().as_deref() {\n+        match arg {\n+            \"--target-dir\" => {\n+                target_dir = PathBuf::from(args.next().unwrap_or_else(|| {\n+                    arg_error!(\"--target-dir requires argument\");\n+                }))\n+            }\n+            \"--debug\" => channel = \"debug\",\n+            \"--sysroot\" => {\n+                sysroot_kind = match args.next().as_deref() {\n+                    Some(\"none\") => SysrootKind::None,\n+                    Some(\"clif\") => SysrootKind::Clif,\n+                    Some(\"llvm\") => SysrootKind::Llvm,\n+                    Some(arg) => arg_error!(\"Unknown sysroot kind {}\", arg),\n+                    None => arg_error!(\"--sysroot requires argument\"),\n+                }\n+            }\n+            \"--no-unstable-features\" => use_unstable_features = false,\n+            flag if flag.starts_with(\"-\") => arg_error!(\"Unknown flag {}\", flag),\n+            arg => arg_error!(\"Unexpected argument {}\", arg),\n+        }\n+    }\n+\n+    let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n+        host_triple\n+    } else if let Some(host_triple) = config::get_value(\"host\") {\n+        host_triple\n+    } else {\n+        rustc_info::get_host_triple()\n+    };\n+    let target_triple = if let Ok(target_triple) = std::env::var(\"TARGET_TRIPLE\") {\n+        if target_triple != \"\" {\n+            target_triple\n+        } else {\n+            host_triple.clone() // Empty target triple can happen on GHA\n+        }\n+    } else if let Some(target_triple) = config::get_value(\"target\") {\n+        target_triple\n+    } else {\n+        host_triple.clone()\n+    };\n+\n+    if target_triple.ends_with(\"-msvc\") {\n+        eprintln!(\"The MSVC toolchain is not yet supported by rustc_codegen_cranelift.\");\n+        eprintln!(\"Switch to the MinGW toolchain for Windows support.\");\n+        eprintln!(\"Hint: You can use `rustup set default-host x86_64-pc-windows-gnu` to\");\n+        eprintln!(\"set the global default target to MinGW\");\n+        process::exit(1);\n+    }\n+\n+    let cg_clif_build_dir =\n+        build_backend::build_backend(channel, &host_triple, use_unstable_features);\n+    build_sysroot::build_sysroot(\n+        channel,\n+        sysroot_kind,\n+        &target_dir,\n+        cg_clif_build_dir,\n+        &host_triple,\n+        &target_triple,\n+    );\n+}"}, {"sha": "76ea506b6ac4fae19e8f38c61c5f697052a8c707", "filename": "build_system/prepare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dbd3196f9c810b7b985e579cb6f13ce907a8286/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbd3196f9c810b7b985e579cb6f13ce907a8286/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=4dbd3196f9c810b7b985e579cb6f13ce907a8286", "patch": "@@ -5,8 +5,8 @@ use std::fs;\n use std::path::Path;\n use std::process::Command;\n \n-use crate::rustc_info::{get_file_name, get_rustc_path, get_rustc_version};\n-use crate::utils::{copy_dir_recursively, spawn_and_wait};\n+use super::rustc_info::{get_file_name, get_rustc_path, get_rustc_version};\n+use super::utils::{copy_dir_recursively, spawn_and_wait};\n \n pub(crate) fn prepare() {\n     prepare_sysroot();"}, {"sha": "18528d542972990c42cf28d447e487e118b6acf9", "filename": "y.rs", "status": "modified", "additions": 3, "deletions": 130, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/4dbd3196f9c810b7b985e579cb6f13ce907a8286/y.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbd3196f9c810b7b985e579cb6f13ce907a8286/y.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/y.rs?ref=4dbd3196f9c810b7b985e579cb6f13ce907a8286", "patch": "@@ -23,136 +23,9 @@ exec ${0/.rs/.bin} $@\n //!\n //! The name `y.rs` was chosen to not conflict with rustc's `x.py`.\n \n-use std::env;\n-use std::path::PathBuf;\n-use std::process;\n-\n-#[path = \"build_system/build_backend.rs\"]\n-mod build_backend;\n-#[path = \"build_system/build_sysroot.rs\"]\n-mod build_sysroot;\n-#[path = \"build_system/config.rs\"]\n-mod config;\n-#[path = \"build_system/prepare.rs\"]\n-mod prepare;\n-#[path = \"build_system/rustc_info.rs\"]\n-mod rustc_info;\n-#[path = \"build_system/utils.rs\"]\n-mod utils;\n-\n-fn usage() {\n-    eprintln!(\"Usage:\");\n-    eprintln!(\"  ./y.rs prepare\");\n-    eprintln!(\n-        \"  ./y.rs build [--debug] [--sysroot none|clif|llvm] [--target-dir DIR] [--no-unstable-features]\"\n-    );\n-}\n-\n-macro_rules! arg_error {\n-    ($($err:tt)*) => {{\n-        eprintln!($($err)*);\n-        usage();\n-        std::process::exit(1);\n-    }};\n-}\n-\n-enum Command {\n-    Build,\n-}\n-\n-#[derive(Copy, Clone)]\n-enum SysrootKind {\n-    None,\n-    Clif,\n-    Llvm,\n-}\n+#[path = \"build_system/mod.rs\"]\n+mod build_system;\n \n fn main() {\n-    env::set_var(\"CG_CLIF_DISPLAY_CG_TIME\", \"1\");\n-    env::set_var(\"CG_CLIF_DISABLE_INCR_CACHE\", \"1\");\n-    // The target dir is expected in the default location. Guard against the user changing it.\n-    env::set_var(\"CARGO_TARGET_DIR\", \"target\");\n-\n-    let mut args = env::args().skip(1);\n-    let command = match args.next().as_deref() {\n-        Some(\"prepare\") => {\n-            if args.next().is_some() {\n-                arg_error!(\"./x.rs prepare doesn't expect arguments\");\n-            }\n-            prepare::prepare();\n-            process::exit(0);\n-        }\n-        Some(\"build\") => Command::Build,\n-        Some(flag) if flag.starts_with('-') => arg_error!(\"Expected command found flag {}\", flag),\n-        Some(command) => arg_error!(\"Unknown command {}\", command),\n-        None => {\n-            usage();\n-            process::exit(0);\n-        }\n-    };\n-\n-    let mut target_dir = PathBuf::from(\"build\");\n-    let mut channel = \"release\";\n-    let mut sysroot_kind = SysrootKind::Clif;\n-    let mut use_unstable_features = true;\n-    while let Some(arg) = args.next().as_deref() {\n-        match arg {\n-            \"--target-dir\" => {\n-                target_dir = PathBuf::from(args.next().unwrap_or_else(|| {\n-                    arg_error!(\"--target-dir requires argument\");\n-                }))\n-            }\n-            \"--debug\" => channel = \"debug\",\n-            \"--sysroot\" => {\n-                sysroot_kind = match args.next().as_deref() {\n-                    Some(\"none\") => SysrootKind::None,\n-                    Some(\"clif\") => SysrootKind::Clif,\n-                    Some(\"llvm\") => SysrootKind::Llvm,\n-                    Some(arg) => arg_error!(\"Unknown sysroot kind {}\", arg),\n-                    None => arg_error!(\"--sysroot requires argument\"),\n-                }\n-            }\n-            \"--no-unstable-features\" => use_unstable_features = false,\n-            flag if flag.starts_with(\"-\") => arg_error!(\"Unknown flag {}\", flag),\n-            arg => arg_error!(\"Unexpected argument {}\", arg),\n-        }\n-    }\n-\n-    let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n-        host_triple\n-    } else if let Some(host_triple) = crate::config::get_value(\"host\") {\n-        host_triple\n-    } else {\n-        rustc_info::get_host_triple()\n-    };\n-    let target_triple = if let Ok(target_triple) = std::env::var(\"TARGET_TRIPLE\") {\n-        if target_triple != \"\" {\n-            target_triple\n-        } else {\n-            host_triple.clone() // Empty target triple can happen on GHA\n-        }\n-    } else if let Some(target_triple) = crate::config::get_value(\"target\") {\n-        target_triple\n-    } else {\n-        host_triple.clone()\n-    };\n-\n-    if target_triple.ends_with(\"-msvc\") {\n-        eprintln!(\"The MSVC toolchain is not yet supported by rustc_codegen_cranelift.\");\n-        eprintln!(\"Switch to the MinGW toolchain for Windows support.\");\n-        eprintln!(\"Hint: You can use `rustup set default-host x86_64-pc-windows-gnu` to\");\n-        eprintln!(\"set the global default target to MinGW\");\n-        process::exit(1);\n-    }\n-\n-    let cg_clif_build_dir =\n-        build_backend::build_backend(channel, &host_triple, use_unstable_features);\n-    build_sysroot::build_sysroot(\n-        channel,\n-        sysroot_kind,\n-        &target_dir,\n-        cg_clif_build_dir,\n-        &host_triple,\n-        &target_triple,\n-    );\n+    build_system::main();\n }"}]}