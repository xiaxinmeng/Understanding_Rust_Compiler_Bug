{"sha": "fca5c64abdf3422b3dc22910abd5460cca450d54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYTVjNjRhYmRmMzQyMmIzZGMyMjkxMGFiZDU0NjBjY2E0NTBkNTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-18T22:57:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:52:33Z"}, "message": "Point at arguments or output when fn obligations come from them, or ident when they don't", "tree": {"sha": "aa615c06052f5deb23cdace5d9da4789107551d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa615c06052f5deb23cdace5d9da4789107551d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fca5c64abdf3422b3dc22910abd5460cca450d54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fca5c64abdf3422b3dc22910abd5460cca450d54", "html_url": "https://github.com/rust-lang/rust/commit/fca5c64abdf3422b3dc22910abd5460cca450d54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fca5c64abdf3422b3dc22910abd5460cca450d54/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "html_url": "https://github.com/rust-lang/rust/commit/994e5e74653ae4bfe51094ce487a8b63f30ad3a4"}], "stats": {"total": 653, "additions": 261, "deletions": 392}, "files": [{"sha": "ef3dcf15873011071042ddf1d8bee5dc52c3dcf8", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -219,9 +219,17 @@ fn check_associated_item(\n             ty::AssocKind::Method => {\n                 let sig = fcx.tcx.fn_sig(item.def_id);\n                 let sig = fcx.normalize_associated_types_in(span, &sig);\n-                check_fn_or_method(tcx, fcx, span, sig, item.def_id, &mut implied_bounds);\n-                let sig_if_method = sig_if_method.expect(\"bad signature for method\");\n-                check_method_receiver(fcx, sig_if_method, &item, self_ty);\n+                let hir_sig = sig_if_method.expect(\"bad signature for method\");\n+                check_fn_or_method(\n+                    tcx,\n+                    fcx,\n+                    item.ident.span,\n+                    sig,\n+                    hir_sig,\n+                    item.def_id,\n+                    &mut implied_bounds,\n+                );\n+                check_method_receiver(fcx, hir_sig, &item, self_ty);\n             }\n             ty::AssocKind::Type => {\n                 if item.defaultness.has_value() {\n@@ -364,7 +372,11 @@ fn check_item_fn(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n         let sig = fcx.tcx.fn_sig(def_id);\n         let sig = fcx.normalize_associated_types_in(item.span, &sig);\n         let mut implied_bounds = vec![];\n-        check_fn_or_method(tcx, fcx, item.span, sig, def_id, &mut implied_bounds);\n+        let hir_sig = match &item.kind {\n+            ItemKind::Fn(sig, ..) => sig,\n+            _ => bug!(\"expected `ItemKind::Fn`, found `{:?}`\", item.kind),\n+        };\n+        check_fn_or_method(tcx, fcx, item.ident.span, sig, hir_sig, def_id, &mut implied_bounds);\n         implied_bounds\n     })\n }\n@@ -609,18 +621,23 @@ fn check_fn_or_method<'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n     span: Span,\n     sig: ty::PolyFnSig<'tcx>,\n+    hir_sig: &hir::FnSig<'_>,\n     def_id: DefId,\n     implied_bounds: &mut Vec<Ty<'tcx>>,\n ) {\n     let sig = fcx.normalize_associated_types_in(span, &sig);\n     let sig = fcx.tcx.liberate_late_bound_regions(def_id, &sig);\n \n-    for input_ty in sig.inputs() {\n+    for (input_ty, span) in sig.inputs().iter().zip(hir_sig.decl.inputs.iter().map(|t| t.span)) {\n         fcx.register_wf_obligation(&input_ty, span, ObligationCauseCode::MiscObligation);\n     }\n     implied_bounds.extend(sig.inputs());\n \n-    fcx.register_wf_obligation(sig.output(), span, ObligationCauseCode::ReturnType);\n+    fcx.register_wf_obligation(\n+        sig.output(),\n+        hir_sig.decl.output.span(),\n+        ObligationCauseCode::ReturnType,\n+    );\n \n     // FIXME(#25759) return types should not be implied bounds\n     implied_bounds.push(sig.output());"}, {"sha": "33fe8a3124083adf7862ab3c817a1b5b0bd21a55", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 20, "deletions": 47, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -9,74 +9,47 @@ LL | impl Case1 for S1 {\n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n-LL |   fn assume_case1<T: Case1>() {\n-   |   ^                          - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator`\n-   |  _|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     assert_c::<_, _, _, T::C>();\n-LL | | }\n-   | |_^ `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n+LL | fn assume_case1<T: Case1>() {\n+   |    ^^^^^^^^^^^^            - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator`\n+   |    |\n+   |    `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n-LL |   trait Case1 {\n-   |   ----------- required by `Case1`\n+LL | trait Case1 {\n+   | ----------- required by `Case1`\n ...\n-LL |   fn assume_case1<T: Case1>() {\n-   |   ^                          - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send`\n-   |  _|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     assert_c::<_, _, _, T::C>();\n-LL | | }\n-   | |_^ `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n+LL | fn assume_case1<T: Case1>() {\n+   |    ^^^^^^^^^^^^            - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send`\n+   |    |\n+   |    `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n-LL |   trait Case1 {\n-   |   ----------- required by `Case1`\n+LL | trait Case1 {\n+   | ----------- required by `Case1`\n ...\n-LL |   fn assume_case1<T: Case1>() {\n-   |   ^                          - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync`\n-   |  _|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     assert_c::<_, _, _, T::C>();\n-LL | | }\n-   | |_^ `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n+LL | fn assume_case1<T: Case1>() {\n+   |    ^^^^^^^^^^^^            - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync`\n+   |    |\n+   |    `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n-LL |   trait Case1 {\n-   |   ----------- required by `Case1`\n+LL | trait Case1 {\n+   | ----------- required by `Case1`\n ...\n-LL | / fn assume_case1<T: Case1>() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     assert_c::<_, _, _, T::C>();\n-LL | | }\n-   | |_^ `<_ as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+LL | fn assume_case1<T: Case1>() {\n+   |    ^^^^^^^^^^^^ `<_ as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `for<'a> std::fmt::Debug` is not implemented for `<_ as Lam<&'a u8>>::App`\n "}, {"sha": "0834014b31c3563d1e0072cc03b50476989e8cd0", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,17 +1,13 @@\n error[E0277]: `F` cannot be sent between threads safely\n-  --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:5:1\n+  --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:5:22\n    |\n-LL |   struct X<F> where F: FnOnce() + 'static + Send {\n-   |   ---------------------------------------------- required by `X`\n+LL | struct X<F> where F: FnOnce() + 'static + Send {\n+   | ---------------------------------------------- required by `X`\n ...\n-LL |   fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n-   |   ^                                                    - help: consider further restricting type parameter `F`: `, F: std::marker::Send`\n-   |  _|\n-   | |\n-LL | |\n-LL | |     return X { field: blk };\n-LL | | }\n-   | |_^ `F` cannot be sent between threads safely\n+LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n+   |                      ^^^^                            - help: consider further restricting type parameter `F`: `, F: std::marker::Send`\n+   |                      |\n+   |                      `F` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `F`\n "}, {"sha": "6eaf6e4a8aad13df61c05ecdb3c222f8eca5429f", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n-  --> $DIR/E0038.rs:5:1\n+  --> $DIR/E0038.rs:5:16\n    |\n LL |     fn foo(&self) -> Self;\n    |        --- method `foo` references the `Self` type in its parameters or return type\n ...\n LL | fn call_foo(x: Box<dyn Trait>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |                ^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n \n error: aborting due to previous error\n "}, {"sha": "a2409621db310add50056be747f0eba4cb96cd31", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,37 +1,37 @@\n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n-  --> $DIR/feature-gate-object_safe_for_dispatch.rs:18:1\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:18:38\n    |\n LL | fn takes_non_object_safe_ref<T>(obj: &dyn NonObjectSafe1) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n+   |                                      ^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n \n error[E0038]: the trait `NonObjectSafe2` cannot be made into an object\n-  --> $DIR/feature-gate-object_safe_for_dispatch.rs:22:1\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:22:36\n    |\n LL |     fn static_fn() {}\n    |        --------- associated function `static_fn` has no `self` parameter\n ...\n LL | fn return_non_object_safe_ref() -> &'static dyn NonObjectSafe2 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe2` cannot be made into an object\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe2` cannot be made into an object\n \n error[E0038]: the trait `NonObjectSafe3` cannot be made into an object\n-  --> $DIR/feature-gate-object_safe_for_dispatch.rs:27:1\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:27:35\n    |\n LL |     fn foo<T>(&self);\n    |        --- method `foo` has generic type parameters\n ...\n LL | fn takes_non_object_safe_box(obj: Box<dyn NonObjectSafe3>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe3` cannot be made into an object\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe3` cannot be made into an object\n \n error[E0038]: the trait `NonObjectSafe4` cannot be made into an object\n-  --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:1\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:35\n    |\n LL |     fn foo(&self, &Self);\n    |        --- method `foo` references the `Self` type in its parameters or return type\n ...\n LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe4` cannot be made into an object\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe4` cannot be made into an object\n \n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:6"}, {"sha": "ccb1c9bcc7f4e88d677c87287fcfcd3d1201abc3", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -25,33 +25,27 @@ LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:19:5\n+  --> $DIR/iterable.rs:19:30\n    |\n-LL |   trait Iterable {\n-   |   -------------- required by `Iterable`\n+LL | trait Iterable {\n+   | -------------- required by `Iterable`\n ...\n-LL | /     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-LL | |\n-LL | |         self.iter()\n-LL | |     }\n-   | |_____^ expected associated type, found reference\n+LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+   |                              ^^^^^^^^^^^^^^ expected associated type, found reference\n    |\n    = note: expected associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n                     found reference `&T`\n    = note: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_` or calling a method that returns `<std::vec::Vec<T> as Iterable>::Item<'_>`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:31:5\n+  --> $DIR/iterable.rs:31:30\n    |\n-LL |   trait Iterable {\n-   |   -------------- required by `Iterable`\n+LL | trait Iterable {\n+   | -------------- required by `Iterable`\n ...\n-LL | /     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-LL | |\n-LL | |         self.iter()\n-LL | |     }\n-   | |_____^ expected associated type, found reference\n+LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+   |                              ^^^^^^^^^^^^^^ expected associated type, found reference\n    |\n    = note: expected associated type `<[T] as Iterable>::Item<'_>`\n                     found reference `&T`"}, {"sha": "c8b9045efe6a0343c3f2651181f3b86ca44e20d7", "filename": "src/test/ui/issues/issue-18919.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the size for values of type `dyn for<'r> std::ops::Fn(&'r isize) -> isize` cannot be known at compilation time\n-  --> $DIR/issue-18919.rs:3:1\n+  --> $DIR/issue-18919.rs:3:15\n    |\n-LL | / fn ho_func(f: Option<FuncType>) {\n-LL | |\n-LL | | }\n-   | |_^ doesn't have a size known at compile-time\n+LL | fn ho_func(f: Option<FuncType>) {\n+   |               ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn for<'r> std::ops::Fn(&'r isize) -> isize`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "0c59486b416b8e4fd2d317d3e549544ae2c5f3d8", "filename": "src/test/ui/issues/issue-18959.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/issue-18959.rs:11:1\n+  --> $DIR/issue-18959.rs:11:11\n    |\n LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }\n    |                    --- method `foo` has generic type parameters\n ...\n LL | fn foo(b: &dyn Bar) {\n-   | ^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |           ^^^^^^^^ the trait `Bar` cannot be made into an object\n \n error: aborting due to previous error\n "}, {"sha": "7c4115b4d3f7c1a005d40a8efca6e5cd11844fd3", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n-  --> $DIR/issue-20005.rs:8:5\n+  --> $DIR/issue-20005.rs:8:8\n    |\n-LL |   trait From<Src> {\n-   |   --------------- required by `From`\n+LL | trait From<Src> {\n+   | --------------- required by `From`\n ...\n-LL | /     fn to<Dst>(\n-LL | |         self\n-LL | |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n-   | |                                                           - help: consider further restricting `Self`: `, Self: std::marker::Sized`\n-LL | |         From::from(self)\n-LL | |     }\n-   | |_____^ doesn't have a size known at compile-time\n+LL |     fn to<Dst>(\n+   |        ^^ doesn't have a size known at compile-time\n+LL |         self\n+LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n+   |                                                           - help: consider further restricting `Self`: `, Self: std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "7aec4a847c9d462ad85b7060bc4a4423f2af1b03", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -151,16 +151,13 @@ LL | | }\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n \n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/issue-20413.rs:10:3\n+  --> $DIR/issue-20413.rs:10:6\n    |\n-LL |   trait Foo {\n-   |   --------- required by `Foo`\n+LL | trait Foo {\n+   | --------- required by `Foo`\n ...\n-LL | /   fn answer(self) {\n-LL | |\n-LL | |     let val: NoData<T> = NoData;\n-LL | |   }\n-   | |___^\n+LL |   fn answer(self) {\n+   |      ^^^^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`"}, {"sha": "abd2290952baf498732d458b2a8e0f02e4bac5d0", "filename": "src/test/ui/issues/issue-20433.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n-  --> $DIR/issue-20433.rs:6:5\n+  --> $DIR/issue-20433.rs:6:18\n    |\n LL |     fn iceman(c: Vec<[i32]>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                  ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "a785a956ca9f5c9bac5b16ada1bf9aa609a26ae8", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -61,16 +61,10 @@ LL | |     }\n    | |_____^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n   --> $DIR/issue-20831-debruijn.rs:28:5\n@@ -89,30 +83,18 @@ note: ...but the lifetime must also be valid for the lifetime `'a` as defined on\n LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected  `Publisher<'_>`\n               found  `Publisher<'_>`\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n   --> $DIR/issue-20831-debruijn.rs:28:5\n@@ -131,16 +113,10 @@ note: ...but the lifetime must also be valid for the lifetime `'a` as defined on\n LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected  `Publisher<'_>`\n               found  `Publisher<'_>`\n "}, {"sha": "ebaef10cfef5bc0202218f8f39e868f9efa9d72d", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,17 +1,11 @@\n error[E0283]: type annotations needed\n-  --> $DIR/issue-21974.rs:10:1\n+  --> $DIR/issue-21974.rs:10:4\n    |\n-LL |   trait Foo {\n-   |   --------- required by `Foo`\n+LL | trait Foo {\n+   | --------- required by `Foo`\n ...\n-LL | / fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n-LL | |     where &'a T : Foo,\n-LL | |           &'b T : Foo\n-LL | | {\n-LL | |     x.foo();\n-LL | |     y.foo();\n-LL | | }\n-   | |_^ cannot infer type for reference `&'a T`\n+LL | fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n+   |    ^^^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot resolve `&'a T: Foo`\n "}, {"sha": "68a90c6d80f3ba05ce409b5e47ad5e00a7689c7a", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `(dyn std::ops::Fn() + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-23281.rs:4:5\n+  --> $DIR/issue-23281.rs:4:27\n    |\n LL |     pub fn function(funs: Vec<dyn Fn() -> ()>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                           ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "a1a6960a3f7ae2f42d7010bc7cf64b552d9cd548", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,11 +1,11 @@\n error[E0271]: type mismatch resolving `<<T as Trait>::A as MultiDispatch<i32>>::O == T`\n-  --> $DIR/issue-24204.rs:14:1\n+  --> $DIR/issue-24204.rs:14:4\n    |\n LL | trait Trait: Sized {\n    | ------------------ required by `Trait`\n ...\n LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n+   |    ^^^^ expected type parameter `T`, found associated type\n    |\n    = note: expected type parameter `T`\n              found associated type `<<T as Trait>::A as MultiDispatch<i32>>::O`"}, {"sha": "6ce0fa37a884044aa55501ec746858df7fced047", "filename": "src/test/ui/issues/issue-27942.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-27942.rs:5:5\n+  --> $DIR/issue-27942.rs:5:25\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |                         ^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Resources<'_>`\n               found type `Resources<'a>`\n@@ -18,10 +18,10 @@ LL | pub trait Buffer<'a, R: Resources<'a>> {\n    |                  ^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-27942.rs:5:5\n+  --> $DIR/issue-27942.rs:5:25\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |                         ^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Resources<'_>`\n               found type `Resources<'a>`"}, {"sha": "3154c502625a661b3694139d264c56da967b3dc7", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 28, "deletions": 46, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -13,87 +13,69 @@ LL |     foo: &'static T\n    |     ^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `K` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:8\n    |\n LL | trait X<K>: Sized {\n    |         - help: consider adding an explicit lifetime bound `K: 'a`...\n LL |     fn foo<'a, L: X<&'a Nested<K>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^\n    |\n note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:8\n    |\n LL |     fn foo<'a, L: X<&'a Nested<K>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^\n \n error[E0309]: the parameter type `Self` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:8\n    |\n LL |     fn bar<'a, L: X<&'a Nested<Self>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^\n    |\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n note: ...so that the reference type `&'a Nested<Self>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:8\n    |\n LL |     fn bar<'a, L: X<&'a Nested<Self>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^\n \n error[E0309]: the parameter type `L` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:8\n    |\n-LL |       fn baz<'a, L, M: X<&'a Nested<L>>>() {\n-   |       ^          - help: consider adding an explicit lifetime bound `L: 'a`...\n-   |  _____|\n-   | |\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n+   |        ^^^     - help: consider adding an explicit lifetime bound `L: 'a`...\n    |\n note: ...so that the reference type `&'a Nested<L>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:8\n    |\n-LL | /     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n+   |        ^^^\n \n error[E0309]: the parameter type `K` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:8\n    |\n-LL |   impl<K> Nested<K> {\n-   |        - help: consider adding an explicit lifetime bound `K: 'a`...\n-LL | /     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL | impl<K> Nested<K> {\n+   |      - help: consider adding an explicit lifetime bound `K: 'a`...\n+LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+   |        ^^^^^^^^^^^^^^^^^\n    |\n note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:8\n    |\n-LL | /     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+   |        ^^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `M` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:8\n    |\n-LL |       fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-   |       ^                                                -- help: consider adding an explicit lifetime bound `M: 'a`...\n-   |  _____|\n-   | |\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+   |        ^^^^^^^^^^^^^^^^                              -- help: consider adding an explicit lifetime bound `M: 'a`...\n    |\n note: ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:8\n    |\n-LL | /     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+   |        ^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b67b0e4f40e8cf18347cf9594fe554ecc383ec8b", "filename": "src/test/ui/object-safety/object-safety-associated-consts.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-associated-consts.rs:12:1\n+  --> $DIR/object-safety-associated-consts.rs:12:30\n    |\n LL |     const X: usize;\n    |           - the trait cannot contain associated consts like `X`\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n \n error: aborting due to previous error\n "}, {"sha": "2469467f084a3869169074fae7c19ba92bf44790", "filename": "src/test/ui/object-safety/object-safety-generics.curr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,20 +1,20 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-generics.rs:18:1\n+  --> $DIR/object-safety-generics.rs:18:30\n    |\n LL |     fn bar<T>(&self, t: T);\n    |        --- method `bar` has generic type parameters\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n \n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-generics.rs:24:1\n+  --> $DIR/object-safety-generics.rs:24:39\n    |\n LL |     fn bar<T>(&self, t: T);\n    |        --- method `bar` has generic type parameters\n ...\n LL | fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                                       ^^^^^^^^ the trait `Bar` cannot be made into an object\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2123e306b16a4c44f8617134aefc8d302d619252", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.curr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,20 +1,20 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-mentions-Self.rs:22:1\n+  --> $DIR/object-safety-mentions-Self.rs:22:30\n    |\n LL |     fn bar(&self, x: &Self);\n    |        --- method `bar` references the `Self` type in its parameters or return type\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n \n error[E0038]: the trait `Baz` cannot be made into an object\n-  --> $DIR/object-safety-mentions-Self.rs:28:1\n+  --> $DIR/object-safety-mentions-Self.rs:28:30\n    |\n LL |     fn baz(&self) -> Self;\n    |        --- method `baz` references the `Self` type in its parameters or return type\n ...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Baz` cannot be made into an object\n+   |                              ^^^^^^^^ the trait `Baz` cannot be made into an object\n \n error: aborting due to 2 previous errors\n "}, {"sha": "099876c562aec12d5f1b17eecf72665498962beb", "filename": "src/test/ui/object-safety/object-safety-no-static.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety-no-static.rs:12:1\n+  --> $DIR/object-safety-no-static.rs:12:18\n    |\n LL |     fn foo() {}\n    |        --- associated function `foo` has no `self` parameter\n ...\n LL | fn diverges() -> Box<dyn Foo> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |                  ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n \n error: aborting due to previous error\n "}, {"sha": "28fb4f36115f0cc64454bd87ff88a14ef74a535d", "filename": "src/test/ui/object-safety/object-safety-sized-2.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-sized-2.rs:14:1\n+  --> $DIR/object-safety-sized-2.rs:14:30\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n "}, {"sha": "0f284fc85073ebf0726cd7fc0ca131bdb69b3bc4", "filename": "src/test/ui/object-safety/object-safety-sized.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-sized.rs:12:1\n+  --> $DIR/object-safety-sized.rs:12:30\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n "}, {"sha": "ad300f38ca5c1381891e1891556e4a992c019193", "filename": "src/test/ui/regions/regions-free-region-ordering-callee-4.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,12 +1,8 @@\n error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-free-region-ordering-callee-4.rs:5:1\n+  --> $DIR/regions-free-region-ordering-callee-4.rs:5:4\n    |\n-LL | / fn ordering4<'a, 'b, F>(a: &'a usize, b: &'b usize, x: F) where F: FnOnce(&'a &'b usize) {\n-LL | |\n-LL | |     // Do not infer ordering from closure argument types.\n-LL | |     let z: Option<&'a &'b usize> = None;\n-LL | | }\n-   | |_^\n+LL | fn ordering4<'a, 'b, F>(a: &'a usize, b: &'b usize, x: F) where F: FnOnce(&'a &'b usize) {\n+   |    ^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the function body at 5:14\n   --> $DIR/regions-free-region-ordering-callee-4.rs:5:14"}, {"sha": "6470ebf541b5b9096416fb1ae66c91a06d53a088", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-hr-1.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,11 +1,8 @@\n error[E0491]: in type `&'x (dyn for<'z> Trait1<<T as Trait2<'y, 'z>>::Foo> + 'x)`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:1\n+  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:25\n    |\n-LL | / fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n-LL | |\n-LL | | {\n-LL | | }\n-   | |_^\n+LL | fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'x` as defined on the function body at 21:11\n   --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:11"}, {"sha": "c35516d2c0871368685bc9f7a26139bfc68befce", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -67,15 +67,10 @@ LL | | }\n               found  `Project<'_, '_>`\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:4\n    |\n-LL | / fn bar<'a, 'b>()\n-LL | |\n-LL | |\n-LL | |     where <() as Project<'a, 'b>>::Item : Eq\n-LL | | {\n-LL | | }\n-   | |_^\n+LL | fn bar<'a, 'b>()\n+   |    ^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 22:8...\n   --> $DIR/regions-normalize-in-where-clause-list.rs:22:8\n@@ -88,15 +83,10 @@ note: ...but the lifetime must also be valid for the lifetime `'b` as defined on\n LL | fn bar<'a, 'b>()\n    |            ^^\n note: ...so that the types are compatible\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:4\n    |\n-LL | / fn bar<'a, 'b>()\n-LL | |\n-LL | |\n-LL | |     where <() as Project<'a, 'b>>::Item : Eq\n-LL | | {\n-LL | | }\n-   | |_^\n+LL | fn bar<'a, 'b>()\n+   |    ^^^\n    = note: expected  `Project<'a, 'b>`\n               found  `Project<'_, '_>`\n "}, {"sha": "1d6b378b9c8a7365776baa2ec208ac37774fc519", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n-  --> $DIR/issue-3907-2.rs:11:1\n+  --> $DIR/issue-3907-2.rs:11:12\n    |\n LL | fn bar(_x: Foo) {}\n-   | ^^^^^^^^^^^^^^^ the trait `issue_3907::Foo` cannot be made into an object\n+   |            ^^^ the trait `issue_3907::Foo` cannot be made into an object\n    |\n    = note: associated function `bar` has no `self` parameter\n "}, {"sha": "a2253021a7f1fc9aa5593ac948203c415467fa47", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-in-fns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,20 +1,20 @@\n error[E0277]: the trait bound `u32: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:13:1\n+  --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:13:15\n    |\n LL | struct Foo<T:Trait> {\n    | ------------------- required by `Foo`\n ...\n LL | fn explode(x: Foo<u32>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u32`\n+   |               ^^^^^^^^ the trait `Trait` is not implemented for `u32`\n \n error[E0277]: the trait bound `f32: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:16:1\n+  --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:16:14\n    |\n LL | enum Bar<T:Trait> {\n    | ----------------- required by `Bar`\n ...\n LL | fn kaboom(y: Bar<f32>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `f32`\n+   |              ^^^^^^^^ the trait `Trait` is not implemented for `f32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c5a7746afdfdb802e32396a7a12997b3a2bb1aa2", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-xc.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,16 +1,16 @@\n error[E0277]: the trait bound `usize: trait_bounds_on_structs_and_enums_xc::Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-xc.rs:7:1\n+  --> $DIR/trait-bounds-on-structs-and-enums-xc.rs:7:15\n    |\n LL | fn explode(x: Foo<usize>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `trait_bounds_on_structs_and_enums_xc::Trait` is not implemented for `usize`\n+   |               ^^^^^^^^^^ the trait `trait_bounds_on_structs_and_enums_xc::Trait` is not implemented for `usize`\n    |\n    = note: required by `trait_bounds_on_structs_and_enums_xc::Foo`\n \n error[E0277]: the trait bound `f32: trait_bounds_on_structs_and_enums_xc::Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-xc.rs:10:1\n+  --> $DIR/trait-bounds-on-structs-and-enums-xc.rs:10:14\n    |\n LL | fn kaboom(y: Bar<f32>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `trait_bounds_on_structs_and_enums_xc::Trait` is not implemented for `f32`\n+   |              ^^^^^^^^ the trait `trait_bounds_on_structs_and_enums_xc::Trait` is not implemented for `f32`\n    |\n    = note: required by `trait_bounds_on_structs_and_enums_xc::Bar`\n "}, {"sha": "8cc6f7c3037871f7670528090e0445c24f10beff", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,10 +1,8 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_lifetime_param.rs:7:1\n+  --> $DIR/generic_duplicate_lifetime_param.rs:7:4\n    |\n-LL | / fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n-LL | |     t\n-LL | | }\n-   | |_^\n+LL | fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n+   |    ^^^\n    |\n note: lifetime used multiple times\n   --> $DIR/generic_duplicate_lifetime_param.rs:5:10"}, {"sha": "4a04b71d82f711019c956792470f71a201056233", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,17 +1,11 @@\n error[E0283]: type annotations needed\n-  --> $DIR/issue-40294.rs:5:1\n+  --> $DIR/issue-40294.rs:5:4\n    |\n-LL |   trait Foo: Sized {\n-   |   ---------------- required by `Foo`\n+LL | trait Foo: Sized {\n+   | ---------------- required by `Foo`\n ...\n-LL | / fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n-LL | |     where &'a T : Foo,\n-LL | |           &'b T : Foo\n-LL | | {\n-LL | |     x.foo();\n-LL | |     y.foo();\n-LL | | }\n-   | |_^ cannot infer type for reference `&'a T`\n+LL | fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n+   |    ^^^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot resolve `&'a T: Foo`\n "}, {"sha": "5d41dc77d8bc2add933975b29c135c46f52964fb", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,32 +1,29 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-fn-where-clause.rs:8:1\n+  --> $DIR/wf-fn-where-clause.rs:8:4\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n LL | \n-LL |   fn foo<T,U>() where T: ExtraCopy<U>\n-   |   ^                                  - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-   |  _|\n-   | |\n-LL | | {\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | fn foo<T,U>() where T: ExtraCopy<U>\n+   |    ^^^                             - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |    |\n+   |    the trait `std::marker::Copy` is not implemented for `U`\n \n error[E0277]: the size for values of type `(dyn std::marker::Copy + 'static)` cannot be known at compilation time\n-  --> $DIR/wf-fn-where-clause.rs:12:1\n+  --> $DIR/wf-fn-where-clause.rs:12:4\n    |\n LL | fn bar() where Vec<dyn Copy>:, {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |    ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::marker::Copy + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n-  --> $DIR/wf-fn-where-clause.rs:12:1\n+  --> $DIR/wf-fn-where-clause.rs:12:4\n    |\n LL | fn bar() where Vec<dyn Copy>:, {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` cannot be made into an object\n+   |    ^^^ the trait `std::marker::Copy` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n "}, {"sha": "b8e88de54c2f191d94c2dba256f487a0d34630d5", "filename": "src/test/ui/wf/wf-in-fn-arg.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-fn-arg.rs:10:1\n+  --> $DIR/wf-in-fn-arg.rs:10:14\n    |\n-LL |   struct MustBeCopy<T:Copy> {\n-   |   ------------------------- required by `MustBeCopy`\n+LL | struct MustBeCopy<T:Copy> {\n+   | ------------------------- required by `MustBeCopy`\n ...\n-LL |   fn bar<T>(_: &MustBeCopy<T>)\n-   |   ^      - help: consider restricting this bound: `T: std::marker::Copy`\n-   |  _|\n-   | |\n-LL | | {\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `T`\n+LL | fn bar<T>(_: &MustBeCopy<T>)\n+   |        -     ^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |        |\n+   |        help: consider restricting this bound: `T: std::marker::Copy`\n \n error: aborting due to previous error\n "}, {"sha": "6ca1626d3aef57997e232a60ccf2768cf3c658f8", "filename": "src/test/ui/wf/wf-in-fn-ret.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-fn-ret.rs:10:1\n+  --> $DIR/wf-in-fn-ret.rs:10:16\n    |\n-LL |   struct MustBeCopy<T:Copy> {\n-   |   ------------------------- required by `MustBeCopy`\n+LL | struct MustBeCopy<T:Copy> {\n+   | ------------------------- required by `MustBeCopy`\n ...\n-LL |   fn bar<T>() -> MustBeCopy<T>\n-   |   ^      - help: consider restricting this bound: `T: std::marker::Copy`\n-   |  _|\n-   | |\n-LL | | {\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `T`\n+LL | fn bar<T>() -> MustBeCopy<T>\n+   |        -       ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |        |\n+   |        help: consider restricting this bound: `T: std::marker::Copy`\n \n error: aborting due to previous error\n "}, {"sha": "e1a281626b9b78d98e7b0d40a3fa3abdf55c24e6", "filename": "src/test/ui/wf/wf-in-fn-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-fn-where-clause.rs:9:1\n+  --> $DIR/wf-in-fn-where-clause.rs:9:4\n    |\n-LL |   trait MustBeCopy<T:Copy> {\n-   |   ------------------------ required by `MustBeCopy`\n+LL | trait MustBeCopy<T:Copy> {\n+   | ------------------------ required by `MustBeCopy`\n ...\n-LL | / fn bar<T,U>()\n-LL | |     where T: MustBeCopy<U>\n-   | |                           - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-LL | | {\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | fn bar<T,U>()\n+   |    ^^^ the trait `std::marker::Copy` is not implemented for `U`\n+LL |     where T: MustBeCopy<U>\n+   |                           - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n \n error: aborting due to previous error\n "}, {"sha": "16079c8197cb1feec9258169701c6bd7c8d3dc2f", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-inherent-impl-method-where-clause.rs:12:5\n+  --> $DIR/wf-inherent-impl-method-where-clause.rs:12:8\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n ...\n-LL |   impl<T,U> Foo<T,U> {\n-   |          - help: consider restricting this bound: `U: std::marker::Copy`\n-LL | /     fn foo(self) where T: ExtraCopy<U>\n-LL | |     {}\n-   | |______^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | impl<T,U> Foo<T,U> {\n+   |        - help: consider restricting this bound: `U: std::marker::Copy`\n+LL |     fn foo(self) where T: ExtraCopy<U>\n+   |        ^^^ the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "6a97d31cf3e653b4d6f908726597c773c0514a5c", "filename": "src/test/ui/wf/wf-trait-default-fn-arg.stderr", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,18 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-default-fn-arg.rs:11:5\n+  --> $DIR/wf-trait-default-fn-arg.rs:11:22\n    |\n-LL |   struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   |   ----------------------- required by `Bar`\n+LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n+   | ----------------------- required by `Bar`\n ...\n-LL |       fn bar(&self, x: &Bar<Self>) {\n-   |       ^                           - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n-   |  _____|\n-   | |\n-LL | |\n-LL | |         //\n-LL | |         // Here, Eq ought to be implemented.\n-LL | |     }\n-   | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n+LL |     fn bar(&self, x: &Bar<Self>) {\n+   |                      ^^^^^^^^^^ - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |                      |\n+   |                      the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "36c1e486269f6f70c96a4a9659a8de941065aaf6", "filename": "src/test/ui/wf/wf-trait-default-fn-ret.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,19 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-default-fn-ret.rs:11:5\n+  --> $DIR/wf-trait-default-fn-ret.rs:11:22\n    |\n-LL |   struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   |   ----------------------- required by `Bar`\n+LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n+   | ----------------------- required by `Bar`\n ...\n-LL |       fn bar(&self) -> Bar<Self> {\n-   |       ^                         - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n-   |  _____|\n-   | |\n-LL | |\n-LL | |         //\n-LL | |         // Here, Eq ought to be implemented.\n-LL | |         loop { }\n-LL | |     }\n-   | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n+LL |     fn bar(&self) -> Bar<Self> {\n+   |                      ^^^^^^^^^- help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |                      |\n+   |                      the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "984237ce3b4975293e6011c7afd0f32e2268a126", "filename": "src/test/ui/wf/wf-trait-default-fn-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,18 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-default-fn-where-clause.rs:11:5\n+  --> $DIR/wf-trait-default-fn-where-clause.rs:11:8\n    |\n-LL |   trait Bar<T:Eq+?Sized> { }\n-   |   ---------------------- required by `Bar`\n+LL | trait Bar<T:Eq+?Sized> { }\n+   | ---------------------- required by `Bar`\n ...\n-LL |       fn bar<A>(&self) where A: Bar<Self> {\n-   |       ^                                  - help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n-   |  _____|\n-   | |\n-LL | |\n-LL | |         //\n-LL | |         // Here, Eq ought to be implemented.\n-LL | |     }\n-   | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n+LL |     fn bar<A>(&self) where A: Bar<Self> {\n+   |        ^^^                             - help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n+   |        |\n+   |        the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "69e2ab72912d4baaa279768c1b1f3bce93208f79", "filename": "src/test/ui/wf/wf-trait-fn-arg.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-fn-arg.rs:10:5\n+  --> $DIR/wf-trait-fn-arg.rs:10:22\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self, x: &Bar<Self>);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |                           |\n-   |     |                           help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n-   |     the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                      ^^^^^^^^^^ - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |                      |\n+   |                      the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "bfc6265662e48eee4c9ea1cda39bb10b759c628f", "filename": "src/test/ui/wf/wf-trait-fn-ret.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-fn-ret.rs:10:5\n+  --> $DIR/wf-trait-fn-ret.rs:10:22\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self) -> &Bar<Self>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |                          |\n-   |     |                          help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n-   |     the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                      ^^^^^^^^^^- help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |                      |\n+   |                      the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "34cda077963b520e1aebcbcdd575978a25ad4b37", "filename": "src/test/ui/wf/wf-trait-fn-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca5c64abdf3422b3dc22910abd5460cca450d54/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr?ref=fca5c64abdf3422b3dc22910abd5460cca450d54", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-fn-where-clause.rs:10:5\n+  --> $DIR/wf-trait-fn-where-clause.rs:10:8\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self) where Self: Sized, Bar<Self>: Copy;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |                                               |\n-   |     |                                               help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n-   |     the trait `std::cmp::Eq` is not implemented for `Self`\n+   |        ^^^                                          - help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n+   |        |\n+   |        the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}]}