{"sha": "bd3cd5dbed5f56fb44a14a20dd2113e3049d2565", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkM2NkNWRiZWQ1ZjU2ZmI0NGExNGEyMGRkMjExM2UzMDQ5ZDI1NjU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-30T18:18:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:24:58Z"}, "message": "Use an ItemId inside mir::GlobalAsm.", "tree": {"sha": "83063aac7f1834f2bb10070fdfc42fa3787f4d31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83063aac7f1834f2bb10070fdfc42fa3787f4d31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565", "html_url": "https://github.com/rust-lang/rust/commit/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c676e358a506af3f97025fa248343552bddc57d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c676e358a506af3f97025fa248343552bddc57d9", "html_url": "https://github.com/rust-lang/rust/commit/c676e358a506af3f97025fa248343552bddc57d9"}], "stats": {"total": 53, "additions": 32, "deletions": 21}, "files": [{"sha": "c9e503a43b9e1014f41ccdf207e2b02e79085d6f", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=bd3cd5dbed5f56fb44a14a20dd2113e3049d2565", "patch": "@@ -164,8 +164,8 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n             MonoItem::Static(def_id) => {\n                 crate::constant::codegen_static(&mut cx.constants_cx, def_id)\n             }\n-            MonoItem::GlobalAsm(hir_id) => {\n-                let item = cx.tcx.hir().expect_item(hir_id);\n+            MonoItem::GlobalAsm(item_id) => {\n+                let item = cx.tcx.hir().item(item_id);\n                 if let rustc_hir::ItemKind::GlobalAsm(rustc_hir::GlobalAsm { asm }) = item.kind {\n                     cx.global_asm.push_str(&*asm.as_str());\n                     cx.global_asm.push_str(\"\\n\\n\");"}, {"sha": "f784d8d27cc7423de24c787030cf680637214ec4", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=bd3cd5dbed5f56fb44a14a20dd2113e3049d2565", "patch": "@@ -93,10 +93,9 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, codegen_mode: CodegenMode) -> ! {\n                 MonoItem::Static(def_id) => {\n                     crate::constant::codegen_static(&mut cx.constants_cx, def_id);\n                 }\n-                MonoItem::GlobalAsm(hir_id) => {\n-                    let item = cx.tcx.hir().expect_item(hir_id);\n-                    tcx.sess\n-                        .span_fatal(item.span, \"Global asm is not supported in JIT mode\");\n+                MonoItem::GlobalAsm(item_id) => {\n+                    let item = cx.tcx.hir().item(item_id);\n+                    tcx.sess.span_fatal(item.span, \"Global asm is not supported in JIT mode\");\n                 }\n             }\n         }"}, {"sha": "8e79193759eb45bda1d576b43303d046d4b4eb8e", "filename": "compiler/rustc_codegen_ssa/src/mono_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs?ref=bd3cd5dbed5f56fb44a14a20dd2113e3049d2565", "patch": "@@ -30,8 +30,8 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n             MonoItem::Static(def_id) => {\n                 cx.codegen_static(def_id, cx.tcx().is_mutable_static(def_id));\n             }\n-            MonoItem::GlobalAsm(hir_id) => {\n-                let item = cx.tcx().hir().expect_item(hir_id);\n+            MonoItem::GlobalAsm(item_id) => {\n+                let item = cx.tcx().hir().item(item_id);\n                 if let hir::ItemKind::GlobalAsm(ref ga) = item.kind {\n                     cx.codegen_global_asm(ga);\n                 } else {"}, {"sha": "5329444a5e0699607cbc254ffab40a82e836c50a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=bd3cd5dbed5f56fb44a14a20dd2113e3049d2565", "patch": "@@ -2541,11 +2541,17 @@ impl VariantData<'hir> {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug, Hash)]\n pub struct ItemId {\n     pub id: HirId,\n }\n \n+impl ItemId {\n+    pub fn hir_id(&self) -> HirId {\n+        self.id\n+    }\n+}\n+\n /// An item\n ///\n /// The name might be a dummy name in case of anonymous items\n@@ -2559,6 +2565,12 @@ pub struct Item<'hir> {\n     pub span: Span,\n }\n \n+impl Item<'_> {\n+    pub fn item_id(&self) -> ItemId {\n+        ItemId { id: self.hir_id }\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n #[derive(Encodable, Decodable, HashStable_Generic)]\n pub enum Unsafety {"}, {"sha": "a4b641ef83a878ee927e5398ac5eefd3be5e625c", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=bd3cd5dbed5f56fb44a14a20dd2113e3049d2565", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n-use rustc_hir::HirId;\n+use rustc_hir::{HirId, ItemId};\n use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -43,7 +43,7 @@ pub enum InstantiationMode {\n pub enum MonoItem<'tcx> {\n     Fn(Instance<'tcx>),\n     Static(DefId),\n-    GlobalAsm(HirId),\n+    GlobalAsm(ItemId),\n }\n \n impl<'tcx> MonoItem<'tcx> {\n@@ -71,8 +71,8 @@ impl<'tcx> MonoItem<'tcx> {\n         match *self {\n             MonoItem::Fn(instance) => tcx.symbol_name(instance),\n             MonoItem::Static(def_id) => tcx.symbol_name(Instance::mono(tcx, def_id)),\n-            MonoItem::GlobalAsm(hir_id) => {\n-                let def_id = tcx.hir().local_def_id(hir_id);\n+            MonoItem::GlobalAsm(item_id) => {\n+                let def_id = tcx.hir().local_def_id(item_id.hir_id());\n                 SymbolName::new(tcx, &format!(\"global_asm_{:?}\", def_id))\n             }\n         }\n@@ -178,7 +178,7 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::Static(def_id) => {\n                 def_id.as_local().map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id))\n             }\n-            MonoItem::GlobalAsm(hir_id) => Some(hir_id),\n+            MonoItem::GlobalAsm(item_id) => Some(item_id.hir_id()),\n         }\n         .map(|hir_id| tcx.hir().span(hir_id))\n     }\n@@ -195,9 +195,9 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for MonoItem<'tcx> {\n             MonoItem::Static(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }\n-            MonoItem::GlobalAsm(node_id) => {\n+            MonoItem::GlobalAsm(item_id) => {\n                 hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-                    node_id.hash_stable(hcx, hasher);\n+                    item_id.hash_stable(hcx, hasher);\n                 })\n             }\n         }\n@@ -351,7 +351,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n                     MonoItem::Static(def_id) => {\n                         def_id.as_local().map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id))\n                     }\n-                    MonoItem::GlobalAsm(hir_id) => Some(hir_id),\n+                    MonoItem::GlobalAsm(item_id) => Some(item_id.hir_id()),\n                 },\n                 item.symbol_name(tcx),\n             )"}, {"sha": "1cf809bef450d7b9662ff3c4f57937f13534f304", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=bd3cd5dbed5f56fb44a14a20dd2113e3049d2565", "patch": "@@ -1030,7 +1030,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n                     \"RootCollector: ItemKind::GlobalAsm({})\",\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id(item.hir_id).to_def_id())\n                 );\n-                self.output.push(dummy_spanned(MonoItem::GlobalAsm(item.hir_id)));\n+                self.output.push(dummy_spanned(MonoItem::GlobalAsm(item.item_id())));\n             }\n             hir::ItemKind::Static(..) => {\n                 let def_id = self.tcx.hir().local_def_id(item.hir_id).to_def_id();"}, {"sha": "f814da786e5af2ed48907989508184275007dedc", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cd5dbed5f56fb44a14a20dd2113e3049d2565/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs?ref=bd3cd5dbed5f56fb44a14a20dd2113e3049d2565", "patch": "@@ -314,7 +314,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n             Some(def_id)\n         }\n         MonoItem::Static(def_id) => Some(def_id),\n-        MonoItem::GlobalAsm(hir_id) => Some(tcx.hir().local_def_id(hir_id).to_def_id()),\n+        MonoItem::GlobalAsm(item_id) => Some(tcx.hir().local_def_id(item_id.hir_id()).to_def_id()),\n     }\n }\n \n@@ -405,8 +405,8 @@ fn mono_item_visibility(\n                 Visibility::Hidden\n             };\n         }\n-        MonoItem::GlobalAsm(hir_id) => {\n-            let def_id = tcx.hir().local_def_id(*hir_id);\n+        MonoItem::GlobalAsm(item_id) => {\n+            let def_id = tcx.hir().local_def_id(item_id.hir_id());\n             return if tcx.is_reachable_non_generic(def_id) {\n                 *can_be_internalized = false;\n                 default_visibility(tcx, def_id.to_def_id(), false)"}]}