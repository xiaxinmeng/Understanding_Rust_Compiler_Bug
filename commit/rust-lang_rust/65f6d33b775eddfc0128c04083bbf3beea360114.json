{"sha": "65f6d33b775eddfc0128c04083bbf3beea360114", "node_id": "C_kwDOAAsO6NoAKDY1ZjZkMzNiNzc1ZWRkZmMwMTI4YzA0MDgzYmJmM2JlZWEzNjAxMTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-04T05:49:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-04T05:49:14Z"}, "message": "Auto merge of #94096 - cjgillot:ensure-stability, r=lcnr\n\nEnsure stability directives are checked in all cases\n\nSplit off  #93017\n\nStability and deprecation were not checked in all cases, for instance if a type error happened.\nThis PR moves the check earlier in the pipeline to ensure the errors are emitted in all cases.\n\nr? `@lcnr`", "tree": {"sha": "b1a38a27de70d46108d6679f217dcb45176a7b6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1a38a27de70d46108d6679f217dcb45176a7b6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65f6d33b775eddfc0128c04083bbf3beea360114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65f6d33b775eddfc0128c04083bbf3beea360114", "html_url": "https://github.com/rust-lang/rust/commit/65f6d33b775eddfc0128c04083bbf3beea360114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65f6d33b775eddfc0128c04083bbf3beea360114/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fa5d74a7cb01ceaf1a07aa6fcaf42137d8bda58", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa5d74a7cb01ceaf1a07aa6fcaf42137d8bda58", "html_url": "https://github.com/rust-lang/rust/commit/8fa5d74a7cb01ceaf1a07aa6fcaf42137d8bda58"}, {"sha": "c680d39b1ecf16d3ebd3338ea0193002dec611ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c680d39b1ecf16d3ebd3338ea0193002dec611ac", "html_url": "https://github.com/rust-lang/rust/commit/c680d39b1ecf16d3ebd3338ea0193002dec611ac"}], "stats": {"total": 974, "additions": 497, "deletions": 477}, "files": [{"sha": "570ec45557dea7ad1c1e599427978e6e5471fb28", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -420,6 +420,31 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n         }\n+\n+        // Emit errors for non-staged-api crates.\n+        if !self.features.staged_api {\n+            if attr.has_name(sym::rustc_deprecated)\n+                || attr.has_name(sym::unstable)\n+                || attr.has_name(sym::stable)\n+                || attr.has_name(sym::rustc_const_unstable)\n+                || attr.has_name(sym::rustc_const_stable)\n+            {\n+                struct_span_err!(\n+                    self.sess,\n+                    attr.span,\n+                    E0734,\n+                    \"stability attributes may not be used outside of the standard library\",\n+                )\n+                .emit();\n+            }\n+        } else {\n+            if attr.has_name(sym::deprecated) {\n+                self.sess\n+                    .struct_span_err(attr.span, \"`#[deprecated]` cannot be used in staged API\")\n+                    .span_label(attr.span, \"use `#[rustc_deprecated]` instead\")\n+                    .emit();\n+            }\n+        }\n     }\n \n     fn visit_item(&mut self, i: &'a ast::Item) {"}, {"sha": "762198887cf8cccb794a288c841249b385f6442b", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -167,6 +167,7 @@ fn get_features(\n             if let Some(Feature { since, .. }) = ACCEPTED_FEATURES.iter().find(|f| name == f.name) {\n                 let since = Some(Symbol::intern(since));\n                 features.declared_lang_features.push((name, mi.span(), since));\n+                features.active_features.insert(name);\n                 continue;\n             }\n \n@@ -187,10 +188,12 @@ fn get_features(\n             if let Some(f) = ACTIVE_FEATURES.iter().find(|f| name == f.name) {\n                 f.set(&mut features, mi.span());\n                 features.declared_lang_features.push((name, mi.span(), None));\n+                features.active_features.insert(name);\n                 continue;\n             }\n \n             features.declared_lib_features.push((name, mi.span()));\n+            features.active_features.insert(name);\n         }\n     }\n "}, {"sha": "1f7dc769512bbea2d3581a352b75a98dea5eb305", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -2,6 +2,7 @@\n \n use super::{to_nonzero, Feature, State};\n \n+use rustc_data_structures::fx::FxHashSet;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n@@ -47,6 +48,8 @@ macro_rules! declare_features {\n             pub declared_lang_features: Vec<(Symbol, Span, Option<Symbol>)>,\n             /// `#![feature]` attrs for non-language (library) features.\n             pub declared_lib_features: Vec<(Symbol, Span)>,\n+            /// Features enabled for this crate.\n+            pub active_features: FxHashSet<Symbol>,\n             $(\n                 $(#[doc = $doc])*\n                 pub $feature: bool\n@@ -58,6 +61,11 @@ macro_rules! declare_features {\n                 $(f(stringify!($feature), self.$feature);)+\n             }\n \n+            /// Is the given feature active?\n+            pub fn active(&self, feature: Symbol) -> bool {\n+                self.active_features.contains(&feature)\n+            }\n+\n             /// Is the given feature enabled?\n             ///\n             /// Panics if the symbol doesn't correspond to a declared feature."}, {"sha": "1aceb4e95e6138090b2863529ae35fa2bec3383e", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -921,12 +921,18 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                     tcx.ensure().check_mod_const_bodies(module);\n                 });\n             },\n+            {\n+                sess.time(\"unused_lib_feature_checking\", || {\n+                    rustc_passes::stability::check_unused_or_stable_features(tcx)\n+                });\n+            },\n             {\n                 // We force these querie to run,\n                 // since they might not otherwise get called.\n                 // This marks the corresponding crate-level attributes\n                 // as used, and ensures that their values are valid.\n                 tcx.ensure().limits(());\n+                tcx.ensure().stability_index(());\n             }\n         );\n     });\n@@ -998,11 +1004,6 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                         tcx.hir()\n                             .par_for_each_module(|module| tcx.ensure().check_mod_deathness(module));\n                     },\n-                    {\n-                        sess.time(\"unused_lib_feature_checking\", || {\n-                            rustc_passes::stability::check_unused_or_stable_features(tcx)\n-                        });\n-                    },\n                     {\n                         sess.time(\"lint_checking\", || {\n                             rustc_lint::check_crate(tcx, || {"}, {"sha": "167a097d9f8523b90d720e70b4eb1a803eb52598", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -6,12 +6,12 @@ pub use self::StabilityLevel::*;\n use crate::ty::{self, DefIdTree, TyCtxt};\n use rustc_ast::NodeId;\n use rustc_attr::{self as attr, ConstStability, Deprecation, Stability};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_feature::GateIssue;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, HirId};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_session::lint::builtin::{DEPRECATED, DEPRECATED_IN_FUTURE, SOFT_UNSTABLE};\n@@ -63,12 +63,6 @@ pub struct Index {\n     pub stab_map: FxHashMap<LocalDefId, Stability>,\n     pub const_stab_map: FxHashMap<LocalDefId, ConstStability>,\n     pub depr_map: FxHashMap<LocalDefId, DeprecationEntry>,\n-\n-    /// Maps for each crate whether it is part of the staged API.\n-    pub staged_api: FxHashMap<CrateNum, bool>,\n-\n-    /// Features enabled for this crate.\n-    pub active_features: FxHashSet<Symbol>,\n }\n \n impl Index {\n@@ -423,7 +417,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     debug!(\"stability: skipping span={:?} since it is internal\", span);\n                     return EvalResult::Allow;\n                 }\n-                if self.stability().active_features.contains(&feature) {\n+                if self.features().active(feature) {\n                     return EvalResult::Allow;\n                 }\n "}, {"sha": "36d93de9a33463d546e0073bcc7626a8c25fc982", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -2999,11 +2999,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())\n     };\n \n-    providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());\n-    providers.lookup_const_stability =\n-        |tcx, id| tcx.stability().local_const_stability(id.expect_local());\n-    providers.lookup_deprecation_entry =\n-        |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());\n     providers.extern_mod_stmt_cnum =\n         |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();\n     providers.output_filenames = |tcx, ()| &tcx.output_filenames;"}, {"sha": "37a9f0ecd8c1867956ad0fe13e4cdf249047bce8", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 27, "deletions": 80, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,13 +1,12 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n-use rustc_ast::Attribute;\n use rustc_attr::{self as attr, ConstStability, Stability};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX};\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{FieldDef, Generics, HirId, Item, TraitRef, Ty, TyKind, Variant};\n@@ -113,12 +112,8 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n     {\n         let attrs = self.tcx.get_attrs(def_id.to_def_id());\n         debug!(\"annotate(id = {:?}, attrs = {:?})\", def_id, attrs);\n-        let mut did_error = false;\n-        if !self.tcx.features().staged_api {\n-            did_error = self.forbid_staged_api_attrs(def_id, attrs, inherit_deprecation.clone());\n-        }\n \n-        let depr = if did_error { None } else { attr::find_deprecation(&self.tcx.sess, attrs) };\n+        let depr = attr::find_deprecation(&self.tcx.sess, attrs);\n         let mut is_deprecated = false;\n         if let Some((depr, span)) = &depr {\n             is_deprecated = true;\n@@ -148,16 +143,15 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n         }\n \n-        if self.tcx.features().staged_api {\n-            if let Some(a) = attrs.iter().find(|a| a.has_name(sym::deprecated)) {\n-                self.tcx\n-                    .sess\n-                    .struct_span_err(a.span, \"`#[deprecated]` cannot be used in staged API\")\n-                    .span_label(a.span, \"use `#[rustc_deprecated]` instead\")\n-                    .span_label(item_sp, \"\")\n-                    .emit();\n+        if !self.tcx.features().staged_api {\n+            // Propagate unstability.  This can happen even for non-staged-api crates in case\n+            // -Zforce-unstable-if-unmarked is set.\n+            if let Some(stab) = self.parent_stab {\n+                if inherit_deprecation.yes() && stab.level.is_unstable() {\n+                    self.index.stab_map.insert(def_id, stab);\n+                }\n             }\n-        } else {\n+\n             self.recurse_with_stability_attrs(\n                 depr.map(|(d, _)| DeprecationEntry::local(d, def_id)),\n                 None,\n@@ -329,47 +323,6 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             self.parent_const_stab = orig_parent_const_stab;\n         }\n     }\n-\n-    // returns true if an error occurred, used to suppress some spurious errors\n-    fn forbid_staged_api_attrs(\n-        &mut self,\n-        def_id: LocalDefId,\n-        attrs: &[Attribute],\n-        inherit_deprecation: InheritDeprecation,\n-    ) -> bool {\n-        // Emit errors for non-staged-api crates.\n-        let unstable_attrs = [\n-            sym::unstable,\n-            sym::stable,\n-            sym::rustc_deprecated,\n-            sym::rustc_const_unstable,\n-            sym::rustc_const_stable,\n-        ];\n-        let mut has_error = false;\n-        for attr in attrs {\n-            let name = attr.name_or_empty();\n-            if unstable_attrs.contains(&name) {\n-                struct_span_err!(\n-                    self.tcx.sess,\n-                    attr.span,\n-                    E0734,\n-                    \"stability attributes may not be used outside of the standard library\",\n-                )\n-                .emit();\n-                has_error = true;\n-            }\n-        }\n-\n-        // Propagate unstability.  This can happen even for non-staged-api crates in case\n-        // -Zforce-unstable-if-unmarked is set.\n-        if let Some(stab) = self.parent_stab {\n-            if inherit_deprecation.yes() && stab.level.is_unstable() {\n-                self.index.stab_map.insert(def_id, stab);\n-            }\n-        }\n-\n-        has_error\n-    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n@@ -654,28 +607,12 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n }\n \n fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n-    let is_staged_api =\n-        tcx.sess.opts.debugging_opts.force_unstable_if_unmarked || tcx.features().staged_api;\n-    let mut staged_api = FxHashMap::default();\n-    staged_api.insert(LOCAL_CRATE, is_staged_api);\n     let mut index = Index {\n-        staged_api,\n         stab_map: Default::default(),\n         const_stab_map: Default::default(),\n         depr_map: Default::default(),\n-        active_features: Default::default(),\n     };\n \n-    let active_lib_features = &tcx.features().declared_lib_features;\n-    let active_lang_features = &tcx.features().declared_lang_features;\n-\n-    // Put the active features into a map for quick lookup.\n-    index.active_features = active_lib_features\n-        .iter()\n-        .map(|&(s, ..)| s)\n-        .chain(active_lang_features.iter().map(|&(s, ..)| s))\n-        .collect();\n-\n     {\n         let mut annotator = Annotator {\n             tcx,\n@@ -728,7 +665,16 @@ fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n-    *providers = Providers { check_mod_unstable_api_usage, stability_index, ..*providers };\n+    *providers = Providers {\n+        check_mod_unstable_api_usage,\n+        stability_index,\n+        lookup_stability: |tcx, id| tcx.stability().local_stability(id.expect_local()),\n+        lookup_const_stability: |tcx, id| tcx.stability().local_const_stability(id.expect_local()),\n+        lookup_deprecation_entry: |tcx, id| {\n+            tcx.stability().local_deprecation_entry(id.expect_local())\n+        },\n+        ..*providers\n+    };\n }\n \n struct Checker<'tcx> {\n@@ -884,9 +830,10 @@ impl<'tcx> Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n-    let access_levels = &tcx.privacy_access_levels(());\n-\n-    if tcx.stability().staged_api[&LOCAL_CRATE] {\n+    let is_staged_api =\n+        tcx.sess.opts.debugging_opts.force_unstable_if_unmarked || tcx.features().staged_api;\n+    if is_staged_api {\n+        let access_levels = &tcx.privacy_access_levels(());\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n         missing.check_missing_stability(CRATE_DEF_ID, tcx.hir().span(CRATE_HIR_ID));\n         tcx.hir().walk_toplevel_module(&mut missing);\n@@ -907,7 +854,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     }\n \n     let declared_lib_features = &tcx.features().declared_lib_features;\n-    let mut remaining_lib_features = FxHashMap::default();\n+    let mut remaining_lib_features = FxIndexMap::default();\n     for (feature, span) in declared_lib_features {\n         if !tcx.sess.opts.unstable_features.is_nightly_build() {\n             struct_span_err!(\n@@ -934,7 +881,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     remaining_lib_features.remove(&sym::libc);\n     remaining_lib_features.remove(&sym::test);\n \n-    let check_features = |remaining_lib_features: &mut FxHashMap<_, _>, defined_features: &[_]| {\n+    let check_features = |remaining_lib_features: &mut FxIndexMap<_, _>, defined_features: &[_]| {\n         for &(feature, since) in defined_features {\n             if let Some(since) = since {\n                 if let Some(span) = remaining_lib_features.get(&feature) {"}, {"sha": "41c9a265cd7bb64dfe1dc951cca96a5b1c374382", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,6 +1,6 @@\n // compile-flags:-C panic=abort\n \n-#![feature(alloc_error_handler, panic_handler)]\n+#![feature(alloc_error_handler)]\n #![no_std]\n #![no_main]\n "}, {"sha": "49ea3105fbd7abefa04b15f6d4e19d54b9131eb0", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,6 +1,6 @@\n // compile-flags:-C panic=abort\n \n-#![feature(alloc_error_handler, panic_handler)]\n+#![feature(alloc_error_handler)]\n #![no_std]\n #![no_main]\n "}, {"sha": "321fd954db6d0a708392dab311503a6803b33c97", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,6 +1,6 @@\n // compile-flags:-C panic=abort\n \n-#![feature(alloc_error_handler, panic_handler)]\n+#![feature(alloc_error_handler)]\n #![no_std]\n #![no_main]\n "}, {"sha": "9c6e810dfce6d859517a0372306aa56d33b4406f", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -4,7 +4,6 @@\n // ignore-wasm32\n \n #![feature(naked_functions)]\n-#![feature(or_patterns)]\n #![feature(asm_const, asm_sym, asm_unwind)]\n #![crate_type = \"lib\"]\n "}, {"sha": "5520f815f3e5493931eb425f42e7b315869bace6", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,43 +1,43 @@\n error: asm with the `pure` option must have at least one output\n-  --> $DIR/naked-functions.rs:111:14\n+  --> $DIR/naked-functions.rs:110:14\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:21:5\n+  --> $DIR/naked-functions.rs:20:5\n    |\n LL |     mut a: u32,\n    |     ^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:23:5\n+  --> $DIR/naked-functions.rs:22:5\n    |\n LL |     &b: &i32,\n    |     ^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:25:6\n+  --> $DIR/naked-functions.rs:24:6\n    |\n LL |     (None | Some(_)): Option<std::ptr::NonNull<u8>>,\n    |      ^^^^^^^^^^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:27:5\n+  --> $DIR/naked-functions.rs:26:5\n    |\n LL |     P { x, y }: P,\n    |     ^^^^^^^^^^\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:36:5\n+  --> $DIR/naked-functions.rs:35:5\n    |\n LL |     a + 1\n    |     ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n error[E0787]: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:34:1\n+  --> $DIR/naked-functions.rs:33:1\n    |\n LL | / pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n LL | |\n@@ -48,21 +48,21 @@ LL | | }\n    | |_^\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:42:31\n+  --> $DIR/naked-functions.rs:41:31\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                               ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n error[E0787]: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:42:23\n+  --> $DIR/naked-functions.rs:41:23\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                       ^^^^^^^^^\n \n error[E0787]: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:48:1\n+  --> $DIR/naked-functions.rs:47:1\n    |\n LL | / pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n LL | |\n@@ -72,7 +72,7 @@ LL | | }\n    | |_^\n \n error[E0787]: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:65:10\n+  --> $DIR/naked-functions.rs:64:10\n    |\n LL |          in(reg) a,\n    |          ^^^^^^^^^\n@@ -87,7 +87,7 @@ LL |          out(reg) e,\n    |          ^^^^^^^^^^\n \n error[E0787]: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:63:5\n+  --> $DIR/naked-functions.rs:62:5\n    |\n LL | /     asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n LL | |\n@@ -99,7 +99,7 @@ LL | |     );\n    | |_____^\n \n error[E0787]: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:54:1\n+  --> $DIR/naked-functions.rs:53:1\n    |\n LL | / pub unsafe extern \"C\" fn unsupported_operands() {\n LL | |\n@@ -119,33 +119,33 @@ LL | | }\n    | |_^\n \n error[E0787]: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:77:1\n+  --> $DIR/naked-functions.rs:76:1\n    |\n LL | / pub extern \"C\" fn missing_assembly() {\n LL | |\n LL | | }\n    | |_^\n \n error[E0787]: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:84:5\n+  --> $DIR/naked-functions.rs:83:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n \n error[E0787]: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:86:5\n+  --> $DIR/naked-functions.rs:85:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n \n error[E0787]: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:88:5\n+  --> $DIR/naked-functions.rs:87:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n \n error[E0787]: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:82:1\n+  --> $DIR/naked-functions.rs:81:1\n    |\n LL | / pub extern \"C\" fn too_many_asm_blocks() {\n LL | |\n@@ -163,15 +163,15 @@ LL | | }\n    | |_^\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:97:11\n+  --> $DIR/naked-functions.rs:96:11\n    |\n LL |         *&y\n    |           ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n error[E0787]: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:95:5\n+  --> $DIR/naked-functions.rs:94:5\n    |\n LL | /     pub extern \"C\" fn inner(y: usize) -> usize {\n LL | |\n@@ -182,75 +182,75 @@ LL | |     }\n    | |_____^\n \n error[E0787]: asm options unsupported in naked functions: `nomem`, `preserves_flags`\n-  --> $DIR/naked-functions.rs:105:5\n+  --> $DIR/naked-functions.rs:104:5\n    |\n LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0787]: asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n-  --> $DIR/naked-functions.rs:111:5\n+  --> $DIR/naked-functions.rs:110:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0787]: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:111:5\n+  --> $DIR/naked-functions.rs:110:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0787]: asm options unsupported in naked functions: `may_unwind`\n-  --> $DIR/naked-functions.rs:119:5\n+  --> $DIR/naked-functions.rs:118:5\n    |\n LL |     asm!(\"\", options(noreturn, may_unwind));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:124:15\n+  --> $DIR/naked-functions.rs:123:15\n    |\n LL | pub unsafe fn default_abi() {\n    |               ^^^^^^^^^^^\n    |\n    = note: `#[warn(undefined_naked_function_abi)]` on by default\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:130:15\n+  --> $DIR/naked-functions.rs:129:15\n    |\n LL | pub unsafe fn rust_abi() {\n    |               ^^^^^^^^\n \n error: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:170:1\n+  --> $DIR/naked-functions.rs:169:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n \n error: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:177:1\n+  --> $DIR/naked-functions.rs:176:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n error: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:184:1\n+  --> $DIR/naked-functions.rs:183:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n \n error: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:191:1\n+  --> $DIR/naked-functions.rs:190:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n \n error: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:193:1\n+  --> $DIR/naked-functions.rs:192:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n error: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:195:1\n+  --> $DIR/naked-functions.rs:194:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^"}, {"sha": "cf5d5d859b6e4c0c52ffb8ba093933538e5037c3", "filename": "src/test/ui/associated-consts/associated-const-in-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,7 +1,5 @@\n // #29924\n \n-#![feature(associated_consts)]\n-\n trait Trait {\n     const N: usize;\n }"}, {"sha": "60bbe385c019b3268469e20ae549b52cd2cc50f5", "filename": "src/test/ui/associated-consts/associated-const-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n-  --> $DIR/associated-const-in-trait.rs:9:6\n+  --> $DIR/associated-const-in-trait.rs:7:6\n    |\n LL | impl dyn Trait {\n    |      ^^^^^^^^^ `Trait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/associated-const-in-trait.rs:6:11\n+  --> $DIR/associated-const-in-trait.rs:4:11\n    |\n LL | trait Trait {\n    |       ----- this trait cannot be made into an object..."}, {"sha": "afaaed2ef6e4e8473a5e77f3b5770642808b68b9", "filename": "src/test/ui/async-await/try-on-option-in-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,4 +1,4 @@\n-#![feature(try_trait, async_closure)]\n+#![feature(async_closure)]\n // edition:2018\n fn main() {}\n "}, {"sha": "412af195d7a19284976efe3a2089e0dd08308802", "filename": "src/test/ui/attributes/const-stability-on-macro.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fattributes%2Fconst-stability-on-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fattributes%2Fconst-stability-on-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fconst-stability-on-macro.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,3 +1,6 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n #[rustc_const_stable(feature = \"foo\", since = \"0\")]\n //~^ ERROR macros cannot have const stability attributes\n macro_rules! foo {"}, {"sha": "c3da02c79cb53393e87d6b8abd828979db56de7e", "filename": "src/test/ui/attributes/const-stability-on-macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fattributes%2Fconst-stability-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fattributes%2Fconst-stability-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fconst-stability-on-macro.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: macros cannot have const stability attributes\n-  --> $DIR/const-stability-on-macro.rs:1:1\n+  --> $DIR/const-stability-on-macro.rs:4:1\n    |\n LL | #[rustc_const_stable(feature = \"foo\", since = \"0\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid const stability attribute\n@@ -8,7 +8,7 @@ LL | macro_rules! foo {\n    | ---------------- const stability attribute affects this macro\n \n error: macros cannot have const stability attributes\n-  --> $DIR/const-stability-on-macro.rs:7:1\n+  --> $DIR/const-stability-on-macro.rs:10:1\n    |\n LL | #[rustc_const_unstable(feature = \"bar\", issue=\"none\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid const stability attribute"}, {"sha": "492f84f56c3a0e2eda981165c47dbd43e8b53af4", "filename": "src/test/ui/attributes/extented-attribute-macro-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fattributes%2Fextented-attribute-macro-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fattributes%2Fextented-attribute-macro-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fextented-attribute-macro-error.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,6 +1,5 @@\n // normalize-stderr-test: \"couldn't read.*\" -> \"couldn't read the file\"\n \n-#![feature(extended_key_value_attributes)]\n #![doc = include_str!(\"../not_existing_file.md\")]\n struct Documented {}\n //~^^ ERROR couldn't read"}, {"sha": "0fcde9b7cc69f1469bda36f93a13e0d4141bf396", "filename": "src/test/ui/attributes/extented-attribute-macro-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fattributes%2Fextented-attribute-macro-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fattributes%2Fextented-attribute-macro-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fextented-attribute-macro-error.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: couldn't read the file\n-  --> $DIR/extented-attribute-macro-error.rs:4:10\n+  --> $DIR/extented-attribute-macro-error.rs:3:10\n    |\n LL | #![doc = include_str!(\"../not_existing_file.md\")]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3539e9b966c86b06da23d2f8510817089b5ff72d", "filename": "src/test/ui/const-generics/issues/issue-82956.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,4 +1,4 @@\n-#![feature(generic_const_exprs, array_map)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n pub struct ConstCheck<const CHECK: bool>;"}, {"sha": "9332cbbd4d7c9fc2745dee0823c704687a1a3f47", "filename": "src/test/ui/consts/const-array-oob-arith.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_indexing)]\n-\n const ARR: [i32; 6] = [42, 43, 44, 45, 46, 47];\n const IDX: usize = 3;\n const VAL: i32 = ARR[IDX];"}, {"sha": "f7a55d3ca72104be415e681c50abfc23218c2ed9", "filename": "src/test/ui/consts/const-array-oob-arith.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-array-oob-arith.rs:7:45\n+  --> $DIR/const-array-oob-arith.rs:5:45\n    |\n LL | const BLUB: [i32; (ARR[0] - 40) as usize] = [5];\n    |                                             ^^^ expected an array with a fixed size of 2 elements, found one with 1 element\n \n error[E0308]: mismatched types\n-  --> $DIR/const-array-oob-arith.rs:10:44\n+  --> $DIR/const-array-oob-arith.rs:8:44\n    |\n LL | const BOO: [i32; (ARR[0] - 41) as usize] = [5, 99];\n    |                                            ^^^^^^^ expected an array with a fixed size of 1 element, found one with 2 elements"}, {"sha": "c747ab50c16b8237a4728e955f8c299bd7664fd3", "filename": "src/test/ui/consts/const-array-oob.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_indexing)]\n-\n const FOO: [usize; 3] = [1, 2, 3];\n const BAR: usize = FOO[5]; // no error, because the error below occurs before regular const eval\n "}, {"sha": "f1c5f58af47d3521622465b3e0121ddee10aa7d8", "filename": "src/test/ui/consts/const-array-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-array-oob.rs:6:19\n+  --> $DIR/const-array-oob.rs:4:19\n    |\n LL | const BLUB: [u32; FOO[4]] = [5, 6];\n    |                   ^^^^^^ index out of bounds: the length is 3 but the index is 4"}, {"sha": "1f0240d4b5ac7e90ba13665c60b017d790344f99", "filename": "src/test/ui/consts/const-eval/transmute-const-promotion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_transmute)]\n-\n use std::mem;\n \n fn main() {"}, {"sha": "15b9b56ea66066c540491774ce3366bf7286df0c", "filename": "src/test/ui/consts/const-eval/transmute-const-promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/transmute-const-promotion.rs:6:37\n+  --> $DIR/transmute-const-promotion.rs:4:37\n    |\n LL |     let x: &'static u32 = unsafe { &mem::transmute(3.0f32) };\n    |            ------------             ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "4b8f9f536413693ddbf362b0f1ae503f234c3a7d", "filename": "src/test/ui/consts/issue-87046.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fissue-87046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fissue-87046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-87046.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -2,7 +2,6 @@\n \n #![crate_type=\"lib\"]\n #![allow(unreachable_patterns)]\n-#![feature(const_fn_union)]\n \n #[derive(PartialEq, Eq)]\n #[repr(transparent)]"}, {"sha": "d0dbb21cee0120695393de4cf2ac58d831d71561", "filename": "src/test/ui/consts/issue-87046.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fissue-87046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fissue-87046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-87046.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: cannot use unsized non-slice type `Username` in constant patterns\n-  --> $DIR/issue-87046.rs:29:13\n+  --> $DIR/issue-87046.rs:28:13\n    |\n LL |             ROOT_USER => true,\n    |             ^^^^^^^^^"}, {"sha": "a0870ea6de30bf17d6a590dd4b4ec890f8c99be6", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,6 @@\n #![feature(rustc_attrs, staged_api, rustc_allow_const_fn_unstable)]\n #![feature(const_fn_fn_ptr_basics)]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]"}, {"sha": "3523cab49fd172ff68fb968b680ec047763c3db1", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: const-stable function cannot use `#[feature(const_fn_fn_ptr_basics)]`\n-  --> $DIR/allow_const_fn_ptr.rs:6:16\n+  --> $DIR/allow_const_fn_ptr.rs:7:16\n    |\n LL | const fn error(_: fn()) {}\n    |                ^"}, {"sha": "bb240fb4ad62cde406abe6991efd81e95a00c7e9", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -15,7 +15,7 @@ const fn foo() -> u32 { 42 }\n // can't call non-min_const_fn\n const fn bar() -> u32 { foo() } //~ ERROR not yet stable as a const fn\n \n-#[unstable(feature = \"rust1\", issue = \"none\")]\n+#[unstable(feature = \"foo2\", issue = \"none\")]\n const fn foo2() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "03084c8674dc2778fd3f9b8121c148eeba0eb87d", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -15,7 +15,7 @@ const unsafe fn foo() -> u32 { 42 }\n // can't call non-min_const_fn\n const unsafe fn bar() -> u32 { unsafe { foo() } } //~ ERROR not yet stable as a const fn\n \n-#[unstable(feature = \"rust1\", issue = \"none\")]\n+#[unstable(feature = \"foo2\", issue = \"none\")]\n const unsafe fn foo2() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "94b62071362981c45e45a98ad85f0dd0e32b95d2", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -15,7 +15,7 @@ const fn foo() -> u32 { 42 }\n // can't call non-min_const_fn\n const unsafe fn bar() -> u32 { foo() } //~ ERROR not yet stable as a const fn\n \n-#[unstable(feature = \"rust1\", issue = \"none\")]\n+#[unstable(feature = \"foo2\", issue = \"none\")]\n const fn foo2() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2e1d5d26b5c7518072e7baab20733946388d8fd5", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_transmute)]\n-\n // normalize-stderr-64bit \"64 bits\" -> \"word size\"\n // normalize-stderr-32bit \"32 bits\" -> \"word size\"\n // normalize-stderr-64bit \"128 bits\" -> \"2 * word size\""}, {"sha": "27cc2f5e66a336824661c84bf6187e6a26c03b99", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/transmute-size-mismatch-before-typeck.rs:15:29\n+  --> $DIR/transmute-size-mismatch-before-typeck.rs:13:29\n    |\n LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -11,13 +11,13 @@ LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/transmute-size-mismatch-before-typeck.rs:10:9\n+  --> $DIR/transmute-size-mismatch-before-typeck.rs:8:9\n    |\n LL |         ZST => {}\n    |         ^^^\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/transmute-size-mismatch-before-typeck.rs:15:29\n+  --> $DIR/transmute-size-mismatch-before-typeck.rs:13:29\n    |\n LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n    |                             ^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n    = note: target type: `&[u8]` (2 * word size)\n \n error: could not evaluate constant pattern\n-  --> $DIR/transmute-size-mismatch-before-typeck.rs:10:9\n+  --> $DIR/transmute-size-mismatch-before-typeck.rs:8:9\n    |\n LL |         ZST => {}\n    |         ^^^"}, {"sha": "8ee1270805e27649b50ada7a710cf3a5d1d0afee", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -4,7 +4,6 @@\n // gate was not enabled in libcore.\n \n #![stable(feature = \"core\", since = \"1.6.0\")]\n-#![feature(rustc_const_unstable)]\n #![feature(staged_api)]\n #![feature(const_fn_trait_bound)]\n "}, {"sha": "3ec9971b8e1e83652fc4b2b3ebab2575be1eaaae", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: cannot call non-const closure in constant functions\n-  --> $DIR/unstable-const-fn-in-libcore.rs:24:26\n+  --> $DIR/unstable-const-fn-in-libcore.rs:23:26\n    |\n LL |             Opt::None => f(),\n    |                          ^^^\n@@ -11,7 +11,7 @@ LL |     const fn unwrap_or_else<F: FnOnce() -> T + ~const std::ops::FnOnce<()>>\n    |                                              +++++++++++++++++++++++++++++\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/unstable-const-fn-in-libcore.rs:19:53\n+  --> $DIR/unstable-const-fn-in-libcore.rs:18:53\n    |\n LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n    |                                                     ^ constant functions cannot evaluate destructors\n@@ -20,7 +20,7 @@ LL |     }\n    |     - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/unstable-const-fn-in-libcore.rs:19:47\n+  --> $DIR/unstable-const-fn-in-libcore.rs:18:47\n    |\n LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n    |                                               ^^^^ constant functions cannot evaluate destructors"}, {"sha": "5c14f5ed356f321d54f21846801b1333a3c77a4d", "filename": "src/test/ui/deprecation/deprecation-in-staged-api.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -3,8 +3,6 @@ error: `#[deprecated]` cannot be used in staged API\n    |\n LL | #[deprecated]\n    | ^^^^^^^^^^^^^ use `#[rustc_deprecated]` instead\n-LL | fn main() {}\n-   | ------------\n \n error: aborting due to previous error\n "}, {"sha": "46d952df77195dad9046534993068c917a8eacf9", "filename": "src/test/ui/explore-issue-38412.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fexplore-issue-38412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fexplore-issue-38412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplore-issue-38412.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,7 +1,5 @@\n // aux-build:pub-and-stability.rs\n \n-#![feature(unused_feature)]\n-\n // A big point of this test is that we *declare* `unstable_declared`,\n // but do *not* declare `unstable_undeclared`. This way we can check\n // that the compiler is letting in uses of declared feature-gated"}, {"sha": "e3f82137ab3b2fcc4e2ba480f6011a868f49000f", "filename": "src/test/ui/explore-issue-38412.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: use of unstable library feature 'unstable_undeclared'\n-  --> $DIR/explore-issue-38412.rs:21:63\n+  --> $DIR/explore-issue-38412.rs:19:63\n    |\n LL |     let Record { a_stable_pub: _, a_unstable_declared_pub: _, a_unstable_undeclared_pub: _, .. } =\n    |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let Record { a_stable_pub: _, a_unstable_declared_pub: _, a_unstable_un\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n-  --> $DIR/explore-issue-38412.rs:30:5\n+  --> $DIR/explore-issue-38412.rs:28:5\n    |\n LL |     r.a_unstable_undeclared_pub;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,25 +17,25 @@ LL |     r.a_unstable_undeclared_pub;\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0616]: field `b_crate` of struct `Record` is private\n-  --> $DIR/explore-issue-38412.rs:31:7\n+  --> $DIR/explore-issue-38412.rs:29:7\n    |\n LL |     r.b_crate;\n    |       ^^^^^^^ private field\n \n error[E0616]: field `c_mod` of struct `Record` is private\n-  --> $DIR/explore-issue-38412.rs:32:7\n+  --> $DIR/explore-issue-38412.rs:30:7\n    |\n LL |     r.c_mod;\n    |       ^^^^^ private field\n \n error[E0616]: field `d_priv` of struct `Record` is private\n-  --> $DIR/explore-issue-38412.rs:33:7\n+  --> $DIR/explore-issue-38412.rs:31:7\n    |\n LL |     r.d_priv;\n    |       ^^^^^^ private field\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n-  --> $DIR/explore-issue-38412.rs:37:5\n+  --> $DIR/explore-issue-38412.rs:35:5\n    |\n LL |     t.2;\n    |     ^^^\n@@ -44,25 +44,25 @@ LL |     t.2;\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0616]: field `3` of struct `Tuple` is private\n-  --> $DIR/explore-issue-38412.rs:38:7\n+  --> $DIR/explore-issue-38412.rs:36:7\n    |\n LL |     t.3;\n    |       ^ private field\n \n error[E0616]: field `4` of struct `Tuple` is private\n-  --> $DIR/explore-issue-38412.rs:39:7\n+  --> $DIR/explore-issue-38412.rs:37:7\n    |\n LL |     t.4;\n    |       ^ private field\n \n error[E0616]: field `5` of struct `Tuple` is private\n-  --> $DIR/explore-issue-38412.rs:40:7\n+  --> $DIR/explore-issue-38412.rs:38:7\n    |\n LL |     t.5;\n    |       ^ private field\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n-  --> $DIR/explore-issue-38412.rs:44:7\n+  --> $DIR/explore-issue-38412.rs:42:7\n    |\n LL |     r.unstable_undeclared_trait_method();\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -71,7 +71,7 @@ LL |     r.unstable_undeclared_trait_method();\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n-  --> $DIR/explore-issue-38412.rs:48:7\n+  --> $DIR/explore-issue-38412.rs:46:7\n    |\n LL |     r.unstable_undeclared();\n    |       ^^^^^^^^^^^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |     r.unstable_undeclared();\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0624]: associated function `pub_crate` is private\n-  --> $DIR/explore-issue-38412.rs:50:7\n+  --> $DIR/explore-issue-38412.rs:48:7\n    |\n LL |     r.pub_crate();\n    |       ^^^^^^^^^ private associated function\n@@ -91,7 +91,7 @@ LL |         pub(crate) fn pub_crate(&self) -> i32 { self.d_priv }\n    |         ------------------------------------- private associated function defined here\n \n error[E0624]: associated function `pub_mod` is private\n-  --> $DIR/explore-issue-38412.rs:51:7\n+  --> $DIR/explore-issue-38412.rs:49:7\n    |\n LL |     r.pub_mod();\n    |       ^^^^^^^ private associated function\n@@ -102,7 +102,7 @@ LL |         pub(in m) fn pub_mod(&self) -> i32 { self.d_priv }\n    |         ---------------------------------- private associated function defined here\n \n error[E0624]: associated function `private` is private\n-  --> $DIR/explore-issue-38412.rs:52:7\n+  --> $DIR/explore-issue-38412.rs:50:7\n    |\n LL |     r.private();\n    |       ^^^^^^^ private associated function\n@@ -113,7 +113,7 @@ LL |         fn private(&self) -> i32 { self.d_priv }\n    |         ------------------------ private associated function defined here\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n-  --> $DIR/explore-issue-38412.rs:57:7\n+  --> $DIR/explore-issue-38412.rs:55:7\n    |\n LL |     t.unstable_undeclared_trait_method();\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -122,7 +122,7 @@ LL |     t.unstable_undeclared_trait_method();\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n-  --> $DIR/explore-issue-38412.rs:61:7\n+  --> $DIR/explore-issue-38412.rs:59:7\n    |\n LL |     t.unstable_undeclared();\n    |       ^^^^^^^^^^^^^^^^^^^\n@@ -131,7 +131,7 @@ LL |     t.unstable_undeclared();\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0624]: associated function `pub_crate` is private\n-  --> $DIR/explore-issue-38412.rs:63:7\n+  --> $DIR/explore-issue-38412.rs:61:7\n    |\n LL |     t.pub_crate();\n    |       ^^^^^^^^^ private associated function\n@@ -142,7 +142,7 @@ LL |         pub(crate) fn pub_crate(&self) -> i32 { self.0 }\n    |         ------------------------------------- private associated function defined here\n \n error[E0624]: associated function `pub_mod` is private\n-  --> $DIR/explore-issue-38412.rs:64:7\n+  --> $DIR/explore-issue-38412.rs:62:7\n    |\n LL |     t.pub_mod();\n    |       ^^^^^^^ private associated function\n@@ -153,7 +153,7 @@ LL |         pub(in m) fn pub_mod(&self) -> i32 { self.0 }\n    |         ---------------------------------- private associated function defined here\n \n error[E0624]: associated function `private` is private\n-  --> $DIR/explore-issue-38412.rs:65:7\n+  --> $DIR/explore-issue-38412.rs:63:7\n    |\n LL |     t.private();\n    |       ^^^^^^^ private associated function"}, {"sha": "951bb5a17400f16068edea5e514bbd395bc51154", "filename": "src/test/ui/feature-gates/feature-gate-staged_api.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-staged_api.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-staged_api.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-staged_api.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,15 +1,15 @@\n-error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/feature-gate-staged_api.rs:1:1\n-   |\n-LL | #![stable(feature = \"a\", since = \"b\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/feature-gate-staged_api.rs:8:1\n    |\n LL | #[stable(feature = \"a\", since = \"b\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0734]: stability attributes may not be used outside of the standard library\n+  --> $DIR/feature-gate-staged_api.rs:1:1\n+   |\n+LL | #![stable(feature = \"a\", since = \"b\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0734`."}, {"sha": "51f2db5556e2b2963bd97e7262daa0b1ef2ca843", "filename": "src/test/ui/feature-gates/gated-bad-feature.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fgated-bad-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fgated-bad-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fgated-bad-feature.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,10 +1,10 @@\n #![feature(foo_bar_baz, foo(bar), foo = \"baz\", foo)]\n //~^ ERROR malformed `feature`\n //~| ERROR malformed `feature`\n-\n+//~| ERROR unknown feature `foo`\n+//~| ERROR unknown feature `foo_bar_baz`\n #![feature] //~ ERROR malformed `feature` attribute\n #![feature = \"foo\"] //~ ERROR malformed `feature` attribute\n-\n #![feature(test_removed_feature)] //~ ERROR: feature has been removed\n \n fn main() {}"}, {"sha": "2d01bdf3c1dffa2b6c7fcc0ce8aef1b439f5fc73", "filename": "src/test/ui/feature-gates/gated-bad-feature.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fgated-bad-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fgated-bad-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fgated-bad-feature.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -17,18 +17,30 @@ LL | #![feature(test_removed_feature)]\n    |            ^^^^^^^^^^^^^^^^^^^^ feature has been removed\n \n error: malformed `feature` attribute input\n-  --> $DIR/gated-bad-feature.rs:5:1\n+  --> $DIR/gated-bad-feature.rs:6:1\n    |\n LL | #![feature]\n    | ^^^^^^^^^^^ help: must be of the form: `#![feature(name1, name2, ...)]`\n \n error: malformed `feature` attribute input\n-  --> $DIR/gated-bad-feature.rs:6:1\n+  --> $DIR/gated-bad-feature.rs:7:1\n    |\n LL | #![feature = \"foo\"]\n    | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![feature(name1, name2, ...)]`\n \n-error: aborting due to 5 previous errors\n+error[E0635]: unknown feature `foo_bar_baz`\n+  --> $DIR/gated-bad-feature.rs:1:12\n+   |\n+LL | #![feature(foo_bar_baz, foo(bar), foo = \"baz\", foo)]\n+   |            ^^^^^^^^^^^\n+\n+error[E0635]: unknown feature `foo`\n+  --> $DIR/gated-bad-feature.rs:1:48\n+   |\n+LL | #![feature(foo_bar_baz, foo(bar), foo = \"baz\", foo)]\n+   |                                                ^^^\n+\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0556, E0557.\n+Some errors have detailed explanations: E0556, E0557, E0635.\n For more information about an error, try `rustc --explain E0556`."}, {"sha": "3acfbd0ca23aedd6b89356c27a504d4b800e8953", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-rustc_deprecated.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-rustc_deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-rustc_deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-rustc_deprecated.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -6,25 +6,38 @@\n \n #![rustc_deprecated()]\n //~^ ERROR stability attributes may not be used outside of the standard library\n+//~| ERROR missing 'since' [E0542]\n \n #[rustc_deprecated()]\n //~^ ERROR stability attributes may not be used outside of the standard library\n+//~| ERROR missing 'since' [E0542]\n mod rustc_deprecated {\n-    mod inner { #![rustc_deprecated()] }\n-    //~^ ERROR stability attributes may not be used outside of the standard library\n+    mod inner {\n+        #![rustc_deprecated()]\n+        //~^ ERROR stability attributes may not be used outside of the standard library\n+        //~| ERROR missing 'since' [E0542]\n+    }\n \n-    #[rustc_deprecated()] fn f() { }\n+    #[rustc_deprecated()]\n     //~^ ERROR stability attributes may not be used outside of the standard library\n+    //~| ERROR missing 'since' [E0542]\n+    fn f() {}\n \n-    #[rustc_deprecated()] struct S;\n+    #[rustc_deprecated()]\n     //~^ ERROR stability attributes may not be used outside of the standard library\n-    //~| ERROR stability attributes may not be used outside of the standard library\n+    //~| ERROR missing 'since' [E0542]\n+    //~| ERROR missing 'since' [E0542]\n+    struct S;\n \n-    #[rustc_deprecated()] type T = S;\n+    #[rustc_deprecated()]\n     //~^ ERROR stability attributes may not be used outside of the standard library\n+    //~| ERROR missing 'since' [E0542]\n+    type T = S;\n \n-    #[rustc_deprecated()] impl S { }\n+    #[rustc_deprecated()]\n     //~^ ERROR stability attributes may not be used outside of the standard library\n+    //~| ERROR missing 'since' [E0542]\n+    impl S {}\n }\n \n fn main() {}"}, {"sha": "4ec78f318c2338fd6d19de21e2e3e59f5001dd7b", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-rustc_deprecated.stderr", "status": "modified", "additions": 65, "deletions": 22, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-rustc_deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-rustc_deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-rustc_deprecated.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,51 +1,94 @@\n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:7:1\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:16:9\n    |\n-LL | #![rustc_deprecated()]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         #![rustc_deprecated()]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:10:1\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:21:5\n    |\n-LL | #[rustc_deprecated()]\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_deprecated()]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:13:17\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:26:5\n    |\n-LL |     mod inner { #![rustc_deprecated()] }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_deprecated()]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:16:5\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:32:5\n    |\n-LL |     #[rustc_deprecated()] fn f() { }\n+LL |     #[rustc_deprecated()]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:19:5\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:37:5\n    |\n-LL |     #[rustc_deprecated()] struct S;\n+LL |     #[rustc_deprecated()]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:19:5\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:11:1\n    |\n-LL |     #[rustc_deprecated()] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_deprecated()]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:23:5\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:7:1\n+   |\n+LL | #![rustc_deprecated()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0542]: missing 'since'\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:7:1\n+   |\n+LL | #![rustc_deprecated()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0542]: missing 'since'\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:11:1\n+   |\n+LL | #[rustc_deprecated()]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0542]: missing 'since'\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:16:9\n+   |\n+LL |         #![rustc_deprecated()]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0542]: missing 'since'\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:21:5\n    |\n-LL |     #[rustc_deprecated()] type T = S;\n+LL |     #[rustc_deprecated()]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0734]: stability attributes may not be used outside of the standard library\n+error[E0542]: missing 'since'\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:26:5\n    |\n-LL |     #[rustc_deprecated()] impl S { }\n+LL |     #[rustc_deprecated()]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0542]: missing 'since'\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:26:5\n+   |\n+LL |     #[rustc_deprecated()]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0542]: missing 'since'\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:32:5\n+   |\n+LL |     #[rustc_deprecated()]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0542]: missing 'since'\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:37:5\n+   |\n+LL |     #[rustc_deprecated()]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 15 previous errors\n \n-For more information about this error, try `rustc --explain E0734`.\n+Some errors have detailed explanations: E0542, E0734.\n+For more information about an error, try `rustc --explain E0542`."}, {"sha": "621ec01bbe219c24d112f2151e4bb3d91403701a", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-stable.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-stable.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -10,21 +10,26 @@\n #[stable()]\n //~^ ERROR stability attributes may not be used outside of the standard library\n mod stable {\n-    mod inner { #![stable()] }\n-    //~^ ERROR stability attributes may not be used outside of the standard library\n+    mod inner {\n+        #![stable()]\n+        //~^ ERROR stability attributes may not be used outside of the standard library\n+    }\n \n-    #[stable()] fn f() { }\n+    #[stable()]\n     //~^ ERROR stability attributes may not be used outside of the standard library\n+    fn f() {}\n \n-    #[stable()] struct S;\n+    #[stable()]\n     //~^ ERROR stability attributes may not be used outside of the standard library\n-    //~| ERROR stability attributes may not be used outside of the standard library\n+    struct S;\n \n-    #[stable()] type T = S;\n+    #[stable()]\n     //~^ ERROR stability attributes may not be used outside of the standard library\n+    type T = S;\n \n-    #[stable()] impl S { }\n+    #[stable()]\n     //~^ ERROR stability attributes may not be used outside of the standard library\n+    impl S {}\n }\n \n fn main() {}"}, {"sha": "677fef3a926b58552d7f769ffdfc3834bc3f99fc", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-stable.stderr", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-stable.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,51 +1,45 @@\n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-stable.rs:7:1\n-   |\n-LL | #![stable()]\n-   | ^^^^^^^^^^^^\n-\n-error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-stable.rs:10:1\n+  --> $DIR/issue-43106-gating-of-stable.rs:14:9\n    |\n-LL | #[stable()]\n-   | ^^^^^^^^^^^\n+LL |         #![stable()]\n+   |         ^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-stable.rs:13:17\n+  --> $DIR/issue-43106-gating-of-stable.rs:18:5\n    |\n-LL |     mod inner { #![stable()] }\n-   |                 ^^^^^^^^^^^^\n+LL |     #[stable()]\n+   |     ^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-stable.rs:16:5\n+  --> $DIR/issue-43106-gating-of-stable.rs:22:5\n    |\n-LL |     #[stable()] fn f() { }\n+LL |     #[stable()]\n    |     ^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-stable.rs:19:5\n+  --> $DIR/issue-43106-gating-of-stable.rs:26:5\n    |\n-LL |     #[stable()] struct S;\n+LL |     #[stable()]\n    |     ^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-stable.rs:19:5\n+  --> $DIR/issue-43106-gating-of-stable.rs:30:5\n    |\n-LL |     #[stable()] struct S;\n+LL |     #[stable()]\n    |     ^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-stable.rs:23:5\n+  --> $DIR/issue-43106-gating-of-stable.rs:10:1\n    |\n-LL |     #[stable()] type T = S;\n-   |     ^^^^^^^^^^^\n+LL | #[stable()]\n+   | ^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-stable.rs:26:5\n+  --> $DIR/issue-43106-gating-of-stable.rs:7:1\n    |\n-LL |     #[stable()] impl S { }\n-   |     ^^^^^^^^^^^\n+LL | #![stable()]\n+   | ^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0734`."}, {"sha": "d507bcd8f15df2e9fb20feda47e781ae4228d0cb", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-unstable.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-unstable.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -10,21 +10,26 @@\n #[unstable()]\n //~^ ERROR stability attributes may not be used outside of the standard library\n mod unstable {\n-    mod inner { #![unstable()] }\n-    //~^ ERROR stability attributes may not be used outside of the standard library\n+    mod inner {\n+        #![unstable()]\n+        //~^ ERROR stability attributes may not be used outside of the standard library\n+    }\n \n-    #[unstable()] fn f() { }\n+    #[unstable()]\n     //~^ ERROR stability attributes may not be used outside of the standard library\n+    fn f() {}\n \n-    #[unstable()] struct S;\n+    #[unstable()]\n     //~^ ERROR stability attributes may not be used outside of the standard library\n-    //~| ERROR stability attributes may not be used outside of the standard library\n+    struct S;\n \n-    #[unstable()] type T = S;\n+    #[unstable()]\n     //~^ ERROR stability attributes may not be used outside of the standard library\n+    type T = S;\n \n-    #[unstable()] impl S { }\n+    #[unstable()]\n     //~^ ERROR stability attributes may not be used outside of the standard library\n+    impl S {}\n }\n \n fn main() {}"}, {"sha": "a2f361878c6dba45466aa463b3a220f47afc99ec", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-unstable.stderr", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-unstable.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,51 +1,45 @@\n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-unstable.rs:7:1\n-   |\n-LL | #![unstable()]\n-   | ^^^^^^^^^^^^^^\n-\n-error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-unstable.rs:10:1\n+  --> $DIR/issue-43106-gating-of-unstable.rs:14:9\n    |\n-LL | #[unstable()]\n-   | ^^^^^^^^^^^^^\n+LL |         #![unstable()]\n+   |         ^^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-unstable.rs:13:17\n+  --> $DIR/issue-43106-gating-of-unstable.rs:18:5\n    |\n-LL |     mod inner { #![unstable()] }\n-   |                 ^^^^^^^^^^^^^^\n+LL |     #[unstable()]\n+   |     ^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-unstable.rs:16:5\n+  --> $DIR/issue-43106-gating-of-unstable.rs:22:5\n    |\n-LL |     #[unstable()] fn f() { }\n+LL |     #[unstable()]\n    |     ^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-unstable.rs:19:5\n+  --> $DIR/issue-43106-gating-of-unstable.rs:26:5\n    |\n-LL |     #[unstable()] struct S;\n+LL |     #[unstable()]\n    |     ^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-unstable.rs:19:5\n+  --> $DIR/issue-43106-gating-of-unstable.rs:30:5\n    |\n-LL |     #[unstable()] struct S;\n+LL |     #[unstable()]\n    |     ^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-unstable.rs:23:5\n+  --> $DIR/issue-43106-gating-of-unstable.rs:10:1\n    |\n-LL |     #[unstable()] type T = S;\n-   |     ^^^^^^^^^^^^^\n+LL | #[unstable()]\n+   | ^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-unstable.rs:26:5\n+  --> $DIR/issue-43106-gating-of-unstable.rs:7:1\n    |\n-LL |     #[unstable()] impl S { }\n-   |     ^^^^^^^^^^^^^\n+LL | #![unstable()]\n+   | ^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0734`."}, {"sha": "f82111a76b18f9427fe99d2ab9bfd71afd4d368b", "filename": "src/test/ui/generator/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,4 +1,4 @@\n-#![feature(generators, generator_trait, box_leak)]\n+#![feature(generators, generator_trait)]\n \n use std::cell::RefCell;\n use std::ops::Generator;"}, {"sha": "d1e5aa6c6b916878f1cdb70749e102411982e3fb", "filename": "src/test/ui/impl-trait/issues/universal-issue-48703.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(universal_impl_trait)]\n-\n use std::fmt::Debug;\n \n fn foo<T>(x: impl Debug) { }"}, {"sha": "02c7fe8ff2c41ec4b82dd9b05c5f5dbdddae065d", "filename": "src/test/ui/impl-trait/issues/universal-issue-48703.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/universal-issue-48703.rs:8:11\n+  --> $DIR/universal-issue-48703.rs:6:11\n    |\n LL |     foo::<String>('a');\n    |           ^^^^^^ explicit generic argument not allowed"}, {"sha": "64333a29313b349d2187441020d27c7326be8c5b", "filename": "src/test/ui/inference/question-mark-type-infer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Finference%2Fquestion-mark-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Finference%2Fquestion-mark-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fquestion-mark-type-infer.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(question_mark, question_mark_carrier)]\n-\n // Test that type inference fails where there are multiple possible return types\n // for the `?` operator.\n "}, {"sha": "e7d5fee18127fb54dd79b2c738acddd2f41a3134", "filename": "src/test/ui/inference/question-mark-type-infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Finference%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Finference%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fquestion-mark-type-infer.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0284]: type annotations needed\n-  --> $DIR/question-mark-type-infer.rs:12:21\n+  --> $DIR/question-mark-type-infer.rs:10:21\n    |\n LL |     l.iter().map(f).collect()?\n    |                     ^^^^^^^ cannot infer type"}, {"sha": "7dab7de7619704767303fc7f31bbc799e6eec94f", "filename": "src/test/ui/issues/issue-16538.mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-16538.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-16538.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.mir.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,21 +1,21 @@\n error[E0015]: cannot call non-const fn `Y::foo` in statics\n-  --> $DIR/issue-16538.rs:15:23\n+  --> $DIR/issue-16538.rs:14:23\n    |\n LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n \n error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/issue-16538.rs:15:30\n+  --> $DIR/issue-16538.rs:14:30\n    |\n LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n    |                              ^^^^ use of extern static\n    |\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/issue-16538.rs:15:21\n+  --> $DIR/issue-16538.rs:14:21\n    |\n LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer"}, {"sha": "270fa3014142732f78dc776dca3b3ed086e44e0a", "filename": "src/test/ui/issues/issue-16538.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,7 +1,6 @@\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n \n-#![feature(const_raw_ptr_deref)]\n mod Y {\n     pub type X = usize;\n     extern \"C\" {"}, {"sha": "a18b0197d879ad41639489de6dcbee30657c0366", "filename": "src/test/ui/issues/issue-16538.thir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,21 +1,21 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/issue-16538.rs:15:22\n+  --> $DIR/issue-16538.rs:14:22\n    |\n LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/issue-16538.rs:15:30\n+  --> $DIR/issue-16538.rs:14:30\n    |\n LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n    |                              ^^^^ use of extern static\n    |\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error[E0015]: cannot call non-const fn `Y::foo` in statics\n-  --> $DIR/issue-16538.rs:15:23\n+  --> $DIR/issue-16538.rs:14:23\n    |\n LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5f09b9587b15a0d2bdb58866dc90c0064bcc98e8", "filename": "src/test/ui/issues/issue-27078.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-27078.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-27078.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(associated_consts)]\n-\n trait Foo {\n     const BAR: i32;\n     fn foo(self) -> &'static i32 {"}, {"sha": "ced92bbd4848f50f76af3bd3a075b3ac5aebf189", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n-  --> $DIR/issue-27078.rs:5:12\n+  --> $DIR/issue-27078.rs:3:12\n    |\n LL |     fn foo(self) -> &'static i32 {\n    |            ^^^^ doesn't have a size known at compile-time"}, {"sha": "6f3834d51a1ade945af777f2cc4675794d1ae50c", "filename": "src/test/ui/issues/issue-39211.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-39211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-39211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39211.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(associated_consts)]\n-\n trait VecN {\n     const DIM: usize;\n }"}, {"sha": "cd2a014bb683d7dd875fac773898fbe4e1246a88", "filename": "src/test/ui/issues/issue-39211.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-39211.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-39211.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39211.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-39211.rs:11:17\n+  --> $DIR/issue-39211.rs:9:17\n    |\n LL |     let a = [3; M::Row::DIM];\n    |                 ^^^^^^^^^^^"}, {"sha": "ab3d30d401f06c8adb2a997ec9cdb82fca1735b8", "filename": "src/test/ui/issues/issue-46101.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,4 +1,3 @@\n-#![feature(use_extern_macros)]\n trait Foo {}\n #[derive(Foo::Anything)] //~ ERROR failed to resolve: partially resolved path in a derive macro\n                          //~| ERROR failed to resolve: partially resolved path in a derive macro"}, {"sha": "40295b8a115308c09531b0c7b67140a5b91d2fe6", "filename": "src/test/ui/issues/issue-46101.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,11 +1,11 @@\n error[E0433]: failed to resolve: partially resolved path in a derive macro\n-  --> $DIR/issue-46101.rs:3:10\n+  --> $DIR/issue-46101.rs:2:10\n    |\n LL | #[derive(Foo::Anything)]\n    |          ^^^^^^^^^^^^^ partially resolved path in a derive macro\n \n error[E0433]: failed to resolve: partially resolved path in a derive macro\n-  --> $DIR/issue-46101.rs:3:10\n+  --> $DIR/issue-46101.rs:2:10\n    |\n LL | #[derive(Foo::Anything)]\n    |          ^^^^^^^^^^^^^ partially resolved path in a derive macro"}, {"sha": "8401c4a9d6cfd9ddc6787e3aa7a055ca163a78c0", "filename": "src/test/ui/issues/issue-6596-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(macro_rules)]\n-\n macro_rules! g {\n     ($inp:ident) => (\n         { $inp $nonexistent }"}, {"sha": "4fa73a464fbbe10a8311c9b96b86a3c7b286f7ee", "filename": "src/test/ui/issues/issue-6596-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `$`\n-  --> $DIR/issue-6596-2.rs:5:16\n+  --> $DIR/issue-6596-2.rs:3:16\n    |\n LL |         { $inp $nonexistent }\n    |                ^^^^^^^^^^^^ expected one of 8 possible tokens"}, {"sha": "370cd72fd558d485f049cbd2cde2e36ae9a37b94", "filename": "src/test/ui/issues/issue-75777.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-75777.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-75777.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75777.nll.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-75777.rs:13:5\n+  --> $DIR/issue-75777.rs:11:5\n    |\n LL | fn inject<'a, Env: 'a, A: 'a + Send>(v: A) -> Box<dyn FnOnce(&'a Env) -> BoxFuture<'a, A>> {\n    |           -- lifetime `'a` defined here"}, {"sha": "357c07c7cec914ec97128f116e399818002df94b", "filename": "src/test/ui/issues/issue-75777.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-75777.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-75777.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75777.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,8 +1,6 @@\n // Regression test for #75777.\n // Checks that a boxed future can be properly constructed.\n \n-#![feature(future_readiness_fns)]\n-\n use std::future::{self, Future};\n use std::pin::Pin;\n "}, {"sha": "f440d7d19321557c140a495a6d8e546888f3112c", "filename": "src/test/ui/issues/issue-75777.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-75777.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-75777.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75777.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,24 +1,24 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-75777.rs:13:14\n+  --> $DIR/issue-75777.rs:11:14\n    |\n LL |     Box::new(move |_| fut)\n    |              ^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/issue-75777.rs:11:11\n+  --> $DIR/issue-75777.rs:9:11\n    |\n LL | fn inject<'a, Env: 'a, A: 'a + Send>(v: A) -> Box<dyn FnOnce(&'a Env) -> BoxFuture<'a, A>> {\n    |           ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-75777.rs:13:14\n+  --> $DIR/issue-75777.rs:11:14\n    |\n LL |     Box::new(move |_| fut)\n    |              ^^^^^^^^^^^^\n    = note: expected `(Pin<Box<dyn Future<Output = A> + Send>>,)`\n               found `(Pin<Box<(dyn Future<Output = A> + Send + 'a)>>,)`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the types are compatible\n-  --> $DIR/issue-75777.rs:13:5\n+  --> $DIR/issue-75777.rs:11:5\n    |\n LL |     Box::new(move |_| fut)\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "567c59fd560d9b104ed0abadca413e1eca021a42", "filename": "src/test/ui/issues/issue-78957.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-78957.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-78957.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78957.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,4 @@\n #![deny(unused_attributes)]\n-#![feature(min_const_generics)]\n \n use std::marker::PhantomData;\n "}, {"sha": "703d272dc988b55865c5a0602d46e0fe6e3497c6", "filename": "src/test/ui/issues/issue-78957.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,11 +1,11 @@\n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-78957.rs:6:16\n+  --> $DIR/issue-78957.rs:5:16\n    |\n LL | pub struct Foo<#[inline] const N: usize>;\n    |                ^^^^^^^^^       - not a function or closure\n \n error: attribute should be applied to a function\n-  --> $DIR/issue-78957.rs:8:16\n+  --> $DIR/issue-78957.rs:7:16\n    |\n LL | pub struct Bar<#[cold] const N: usize>;\n    |                ^^^^^^^       - not a function\n@@ -18,47 +18,47 @@ LL | #![deny(unused_attributes)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n error[E0517]: attribute should be applied to a struct, enum, or union\n-  --> $DIR/issue-78957.rs:11:23\n+  --> $DIR/issue-78957.rs:10:23\n    |\n LL | pub struct Baz<#[repr(C)] const N: usize>;\n    |                       ^         - not a struct, enum, or union\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-78957.rs:14:17\n+  --> $DIR/issue-78957.rs:13:17\n    |\n LL | pub struct Foo2<#[inline] 'a>(PhantomData<&'a ()>);\n    |                 ^^^^^^^^^ -- not a function or closure\n \n error: attribute should be applied to a function\n-  --> $DIR/issue-78957.rs:16:17\n+  --> $DIR/issue-78957.rs:15:17\n    |\n LL | pub struct Bar2<#[cold] 'a>(PhantomData<&'a ()>);\n    |                 ^^^^^^^ -- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n error[E0517]: attribute should be applied to a struct, enum, or union\n-  --> $DIR/issue-78957.rs:19:24\n+  --> $DIR/issue-78957.rs:18:24\n    |\n LL | pub struct Baz2<#[repr(C)] 'a>(PhantomData<&'a ()>);\n    |                        ^   -- not a struct, enum, or union\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-78957.rs:22:17\n+  --> $DIR/issue-78957.rs:21:17\n    |\n LL | pub struct Foo3<#[inline] T>(PhantomData<T>);\n    |                 ^^^^^^^^^ - not a function or closure\n \n error: attribute should be applied to a function\n-  --> $DIR/issue-78957.rs:24:17\n+  --> $DIR/issue-78957.rs:23:17\n    |\n LL | pub struct Bar3<#[cold] T>(PhantomData<T>);\n    |                 ^^^^^^^ - not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n error[E0517]: attribute should be applied to a struct, enum, or union\n-  --> $DIR/issue-78957.rs:27:24\n+  --> $DIR/issue-78957.rs:26:24\n    |\n LL | pub struct Baz3<#[repr(C)] T>(PhantomData<T>);\n    |                        ^   - not a struct, enum, or union"}, {"sha": "26e1f2afa91bb81f1d76cfca0813a26592ad3872", "filename": "src/test/ui/macros/macro-non-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,7 +1,5 @@\n // Test for issue #50381: non-lifetime passed to :lifetime.\n \n-#![feature(macro_lifetime_matcher)]\n-\n macro_rules! m { ($x:lifetime) => { } }\n \n fn main() {"}, {"sha": "6234735dfc8a41779124de2cd5ae5bcfb2719a14", "filename": "src/test/ui/macros/macro-non-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: no rules expected the token `a`\n-  --> $DIR/macro-non-lifetime.rs:8:8\n+  --> $DIR/macro-non-lifetime.rs:6:8\n    |\n LL | macro_rules! m { ($x:lifetime) => { } }\n    | -------------- when calling this macro"}, {"sha": "d93792bdfe38d8cd8febba9870ae18f46823b8a4", "filename": "src/test/ui/macros/macro-path-prelude-fail-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-1.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(extern_prelude)]\n-\n mod m {\n     fn check() {\n         Vec::clone!(); //~ ERROR failed to resolve: `Vec` is a struct, not a module"}, {"sha": "f8377ffb3555673018dd4ad1ce4254c29b8bd847", "filename": "src/test/ui/macros/macro-path-prelude-fail-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-1.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,11 +1,11 @@\n error[E0433]: failed to resolve: `Vec` is a struct, not a module\n-  --> $DIR/macro-path-prelude-fail-1.rs:5:9\n+  --> $DIR/macro-path-prelude-fail-1.rs:3:9\n    |\n LL |         Vec::clone!();\n    |         ^^^ `Vec` is a struct, not a module\n \n error[E0433]: failed to resolve: `u8` is a builtin type, not a module\n-  --> $DIR/macro-path-prelude-fail-1.rs:6:9\n+  --> $DIR/macro-path-prelude-fail-1.rs:4:9\n    |\n LL |         u8::clone!();\n    |         ^^ `u8` is a builtin type, not a module"}, {"sha": "d7181200085c46dec097f040e800d67e3e5f43ee", "filename": "src/test/ui/macros/macro-path-prelude-shadowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-shadowing.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,6 +1,6 @@\n // aux-build:macro-in-other-crate.rs\n \n-#![feature(decl_macro, extern_prelude)]\n+#![feature(decl_macro)]\n \n macro_rules! add_macro_expanded_things_to_macro_prelude {() => {\n     #[macro_use]"}, {"sha": "019f6a874cab3719395af067d12db0073f8c694b", "filename": "src/test/ui/macros/macro-stability.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -2,7 +2,10 @@\n \n #![feature(decl_macro)]\n #![feature(staged_api)]\n-#[macro_use] extern crate unstable_macros;\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+#[macro_use]\n+extern crate unstable_macros;\n \n #[unstable(feature = \"local_unstable\", issue = \"none\")]\n macro_rules! local_unstable { () => () }"}, {"sha": "75da9f47a3573e45a78d05e75f3d87b6cd189ab2", "filename": "src/test/ui/macros/macro-stability.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,37 +1,37 @@\n error[E0658]: use of unstable library feature 'local_unstable'\n-  --> $DIR/macro-stability.rs:19:5\n+  --> $DIR/macro-stability.rs:22:5\n    |\n LL |     local_unstable!();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(local_unstable)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'local_unstable'\n-  --> $DIR/macro-stability.rs:20:5\n+  --> $DIR/macro-stability.rs:23:5\n    |\n LL |     local_unstable_modern!();\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(local_unstable)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_macros'\n-  --> $DIR/macro-stability.rs:21:5\n+  --> $DIR/macro-stability.rs:24:5\n    |\n LL |     unstable_macro!();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(unstable_macros)]` to the crate attributes to enable\n \n warning: use of deprecated macro `deprecated_macro`: deprecation reason\n-  --> $DIR/macro-stability.rs:24:5\n+  --> $DIR/macro-stability.rs:27:5\n    |\n LL |     deprecated_macro!();\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(deprecated)]` on by default\n \n warning: use of deprecated macro `local_deprecated`: local deprecation reason\n-  --> $DIR/macro-stability.rs:26:5\n+  --> $DIR/macro-stability.rs:29:5\n    |\n LL |     local_deprecated!();\n    |     ^^^^^^^^^^^^^^^^"}, {"sha": "4d378f010ed4d54230d2d5cfc0d21f5142f1c4d5", "filename": "src/test/ui/missing/missing-alloc_error_handler.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -3,7 +3,7 @@\n \n #![no_std]\n #![crate_type = \"staticlib\"]\n-#![feature(panic_handler, alloc_error_handler)]\n+#![feature(alloc_error_handler)]\n \n #[panic_handler]\n fn panic(_: &core::panic::PanicInfo) -> ! {"}, {"sha": "2dc509f2c632da0b599b2be0beacc1a39c0f4594", "filename": "src/test/ui/missing/missing-allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -3,7 +3,7 @@\n \n #![no_std]\n #![crate_type = \"staticlib\"]\n-#![feature(panic_handler, alloc_error_handler)]\n+#![feature(alloc_error_handler)]\n \n #[panic_handler]\n fn panic(_: &core::panic::PanicInfo) -> ! {"}, {"sha": "4165c5dc13aaae07bdc05a6ed1c4cd75d78d56df", "filename": "src/test/ui/not-panic/not-panic-safe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,4 @@\n #![allow(dead_code)]\n-#![feature(recover)]\n \n use std::panic::UnwindSafe;\n "}, {"sha": "3e54df12376ba6cd30a6b9e5fa3b5ac033b794d4", "filename": "src/test/ui/not-panic/not-panic-safe.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the type `&mut i32` may not be safely transferred across an unwind boundary\n-  --> $DIR/not-panic-safe.rs:9:5\n+  --> $DIR/not-panic-safe.rs:8:5\n    |\n LL |     assert::<&mut i32>();\n    |     ^^^^^^^^^^^^^^^^^^ `&mut i32` may not be safely transferred across an unwind boundary\n    |\n    = help: the trait `UnwindSafe` is not implemented for `&mut i32`\n    = note: `UnwindSafe` is implemented for `&i32`, but not for `&mut i32`\n note: required by a bound in `assert`\n-  --> $DIR/not-panic-safe.rs:6:14\n+  --> $DIR/not-panic-safe.rs:5:14\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`"}, {"sha": "2bc8e097859d3972420a68b98d07e710fd6e9f1e", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-struct-error.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/object-lifetime-default-from-rptr-struct-error.rs:21:5\n+  --> $DIR/object-lifetime-default-from-rptr-struct-error.rs:20:5\n    |\n LL | fn c<'a>(t: &'a MyBox<dyn Test+'a>, mut ss: SomeStruct<'a>) {\n    |      -- lifetime `'a` defined here"}, {"sha": "dc0b86903c9e50cd0c45547241a7630b98b2cb7f", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-struct-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -2,7 +2,6 @@\n // through the `MyBox` struct.\n \n #![allow(dead_code)]\n-#![feature(rustc_error)]\n \n trait Test {\n     fn foo(&self) { }"}, {"sha": "1649841c186854551bcc702dcc5245229bb7ad33", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-struct-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/object-lifetime-default-from-rptr-struct-error.rs:21:12\n+  --> $DIR/object-lifetime-default-from-rptr-struct-error.rs:20:12\n    |\n LL |     ss.t = t;\n    |            ^ lifetime mismatch\n    |\n    = note: expected reference `&'a MyBox<(dyn Test + 'static)>`\n               found reference `&'a MyBox<(dyn Test + 'a)>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/object-lifetime-default-from-rptr-struct-error.rs:20:6\n+  --> $DIR/object-lifetime-default-from-rptr-struct-error.rs:19:6\n    |\n LL | fn c<'a>(t: &'a MyBox<dyn Test+'a>, mut ss: SomeStruct<'a>) {\n    |      ^^"}, {"sha": "3fd8c5cadca98c80db915fecde5cb2df4d2f979a", "filename": "src/test/ui/once-cant-call-twice-on-heap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,7 +1,6 @@\n // Testing guarantees provided by once functions.\n // This program would segfault if it were legal.\n \n-#![feature(once_fns)]\n use std::sync::Arc;\n \n fn foo<F:FnOnce()>(blk: F) {"}, {"sha": "335ac633822604cdc44558ae06defbf00d06c771", "filename": "src/test/ui/once-cant-call-twice-on-heap.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `blk`\n-  --> $DIR/once-cant-call-twice-on-heap.rs:9:5\n+  --> $DIR/once-cant-call-twice-on-heap.rs:8:5\n    |\n LL | fn foo<F:FnOnce()>(blk: F) {\n    |                    --- move occurs because `blk` has type `F`, which does not implement the `Copy` trait\n@@ -9,7 +9,7 @@ LL |     blk();\n    |     ^^^ value used here after move\n    |\n note: this value implements `FnOnce`, which causes it to be moved when called\n-  --> $DIR/once-cant-call-twice-on-heap.rs:8:5\n+  --> $DIR/once-cant-call-twice-on-heap.rs:7:5\n    |\n LL |     blk();\n    |     ^^^"}, {"sha": "047836203575ffb814eb6ca72d9bf841d493371c", "filename": "src/test/ui/or-patterns/nested-undelimited-precedence.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2For-patterns%2Fnested-undelimited-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2For-patterns%2Fnested-undelimited-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fnested-undelimited-precedence.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -5,8 +5,6 @@\n // types of patterns that allow undelimited subpatterns that could cause the same ambiguity.\n // Currently, those should be impossible due to precedence rule. This test enforces that.\n \n-#![feature(or_patterns)]\n-\n enum E {\n     A,\n     B,"}, {"sha": "2e25d8b3e7b0da43533aa088835e82b4b30ed530", "filename": "src/test/ui/or-patterns/nested-undelimited-precedence.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2For-patterns%2Fnested-undelimited-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2For-patterns%2Fnested-undelimited-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fnested-undelimited-precedence.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,43 +1,43 @@\n error: top-level or-patterns are not allowed in `let` bindings\n-  --> $DIR/nested-undelimited-precedence.rs:21:9\n+  --> $DIR/nested-undelimited-precedence.rs:19:9\n    |\n LL |     let b @ A | B: E = A;\n    |         ^^^^^^^^^ help: wrap the pattern in parentheses: `(b @ A | B)`\n \n error: top-level or-patterns are not allowed in `let` bindings\n-  --> $DIR/nested-undelimited-precedence.rs:36:9\n+  --> $DIR/nested-undelimited-precedence.rs:34:9\n    |\n LL |     let &A(_) | B(_): F = A(3);\n    |         ^^^^^^^^^^^^ help: wrap the pattern in parentheses: `(&A(_) | B(_))`\n \n error: top-level or-patterns are not allowed in `let` bindings\n-  --> $DIR/nested-undelimited-precedence.rs:38:9\n+  --> $DIR/nested-undelimited-precedence.rs:36:9\n    |\n LL |     let &&A(_) | B(_): F = A(3);\n    |         ^^^^^^^^^^^^^ help: wrap the pattern in parentheses: `(&&A(_) | B(_))`\n \n error: top-level or-patterns are not allowed in `let` bindings\n-  --> $DIR/nested-undelimited-precedence.rs:40:9\n+  --> $DIR/nested-undelimited-precedence.rs:38:9\n    |\n LL |     let &mut A(_) | B(_): F = A(3);\n    |         ^^^^^^^^^^^^^^^^ help: wrap the pattern in parentheses: `(&mut A(_) | B(_))`\n \n error: top-level or-patterns are not allowed in `let` bindings\n-  --> $DIR/nested-undelimited-precedence.rs:42:9\n+  --> $DIR/nested-undelimited-precedence.rs:40:9\n    |\n LL |     let &&mut A(_) | B(_): F = A(3);\n    |         ^^^^^^^^^^^^^^^^^ help: wrap the pattern in parentheses: `(&&mut A(_) | B(_))`\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/nested-undelimited-precedence.rs:21:17\n+  --> $DIR/nested-undelimited-precedence.rs:19:17\n    |\n LL |     let b @ A | B: E = A;\n    |         -       ^ pattern doesn't bind `b`\n    |         |\n    |         variable not in all patterns\n \n error[E0308]: mismatched types\n-  --> $DIR/nested-undelimited-precedence.rs:36:9\n+  --> $DIR/nested-undelimited-precedence.rs:34:9\n    |\n LL |     let &A(_) | B(_): F = A(3);\n    |         ^^^^^         - expected due to this\n@@ -48,7 +48,7 @@ LL |     let &A(_) | B(_): F = A(3);\n            found reference `&_`\n \n error[E0308]: mismatched types\n-  --> $DIR/nested-undelimited-precedence.rs:38:9\n+  --> $DIR/nested-undelimited-precedence.rs:36:9\n    |\n LL |     let &&A(_) | B(_): F = A(3);\n    |         ^^^^^^         - expected due to this\n@@ -59,7 +59,7 @@ LL |     let &&A(_) | B(_): F = A(3);\n            found reference `&_`\n \n error[E0308]: mismatched types\n-  --> $DIR/nested-undelimited-precedence.rs:40:9\n+  --> $DIR/nested-undelimited-precedence.rs:38:9\n    |\n LL |     let &mut A(_) | B(_): F = A(3);\n    |         ^^^^^^^^^         - expected due to this\n@@ -70,7 +70,7 @@ LL |     let &mut A(_) | B(_): F = A(3);\n            found mutable reference `&mut _`\n \n error[E0308]: mismatched types\n-  --> $DIR/nested-undelimited-precedence.rs:42:9\n+  --> $DIR/nested-undelimited-precedence.rs:40:9\n    |\n LL |     let &&mut A(_) | B(_): F = A(3);\n    |         ^^^^^^^^^^         - expected due to this"}, {"sha": "a624cbc899ffc0ad76e331eff0cdf60bd528efb1", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail-2018.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail-2018.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -2,8 +2,6 @@\n \n // edition:2018\n \n-#![feature(or_patterns)]\n-\n fn main() {}\n \n // Test the `pat` macro fragment parser:"}, {"sha": "001c68a9774737390acb8d46b8b6bec4a3f134fc", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail-2018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail-2018.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: no rules expected the token `|`\n-  --> $DIR/or-patterns-syntactic-fail-2018.rs:14:15\n+  --> $DIR/or-patterns-syntactic-fail-2018.rs:12:15\n    |\n LL | macro_rules! accept_pat {\n    | ----------------------- when calling this macro\n@@ -8,7 +8,7 @@ LL | accept_pat!(p | q);\n    |               ^ no rules expected this token in macro call\n \n error: no rules expected the token `|`\n-  --> $DIR/or-patterns-syntactic-fail-2018.rs:15:13\n+  --> $DIR/or-patterns-syntactic-fail-2018.rs:13:13\n    |\n LL | macro_rules! accept_pat {\n    | ----------------------- when calling this macro"}, {"sha": "0f5f49c4ca4731cd6daae00c5364a127bf084a7d", "filename": "src/test/ui/pattern/usefulness/integer-ranges/exhaustiveness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,4 @@\n #![feature(exclusive_range_pattern)]\n-#![feature(assoc_char_consts)]\n #![allow(overlapping_range_endpoints)]\n #![deny(unreachable_patterns)]\n "}, {"sha": "2e0023348e4d837f526c7c81018f7d484b3335a5", "filename": "src/test/ui/pattern/usefulness/integer-ranges/exhaustiveness.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n-  --> $DIR/exhaustiveness.rs:48:8\n+  --> $DIR/exhaustiveness.rs:47:8\n    |\n LL |     m!(0u8, 0..255);\n    |        ^^^ pattern `u8::MAX` not covered\n@@ -8,7 +8,7 @@ LL |     m!(0u8, 0..255);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n-  --> $DIR/exhaustiveness.rs:49:8\n+  --> $DIR/exhaustiveness.rs:48:8\n    |\n LL |     m!(0u8, 0..=254);\n    |        ^^^ pattern `u8::MAX` not covered\n@@ -17,7 +17,7 @@ LL |     m!(0u8, 0..=254);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `0_u8` not covered\n-  --> $DIR/exhaustiveness.rs:50:8\n+  --> $DIR/exhaustiveness.rs:49:8\n    |\n LL |     m!(0u8, 1..=255);\n    |        ^^^ pattern `0_u8` not covered\n@@ -26,7 +26,7 @@ LL |     m!(0u8, 1..=255);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `42_u8` not covered\n-  --> $DIR/exhaustiveness.rs:51:8\n+  --> $DIR/exhaustiveness.rs:50:8\n    |\n LL |     m!(0u8, 0..42 | 43..=255);\n    |        ^^^ pattern `42_u8` not covered\n@@ -35,7 +35,7 @@ LL |     m!(0u8, 0..42 | 43..=255);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n-  --> $DIR/exhaustiveness.rs:52:8\n+  --> $DIR/exhaustiveness.rs:51:8\n    |\n LL |     m!(0i8, -128..127);\n    |        ^^^ pattern `i8::MAX` not covered\n@@ -44,7 +44,7 @@ LL |     m!(0i8, -128..127);\n    = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n-  --> $DIR/exhaustiveness.rs:53:8\n+  --> $DIR/exhaustiveness.rs:52:8\n    |\n LL |     m!(0i8, -128..=126);\n    |        ^^^ pattern `i8::MAX` not covered\n@@ -53,7 +53,7 @@ LL |     m!(0i8, -128..=126);\n    = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `i8::MIN` not covered\n-  --> $DIR/exhaustiveness.rs:54:8\n+  --> $DIR/exhaustiveness.rs:53:8\n    |\n LL |     m!(0i8, -127..=127);\n    |        ^^^ pattern `i8::MIN` not covered\n@@ -62,7 +62,7 @@ LL |     m!(0i8, -127..=127);\n    = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `0_i8` not covered\n-  --> $DIR/exhaustiveness.rs:55:11\n+  --> $DIR/exhaustiveness.rs:54:11\n    |\n LL |     match 0i8 {\n    |           ^^^ pattern `0_i8` not covered\n@@ -71,7 +71,7 @@ LL |     match 0i8 {\n    = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n-  --> $DIR/exhaustiveness.rs:60:8\n+  --> $DIR/exhaustiveness.rs:59:8\n    |\n LL |     m!(0u128, 0..=ALMOST_MAX);\n    |        ^^^^^ pattern `u128::MAX` not covered\n@@ -80,7 +80,7 @@ LL |     m!(0u128, 0..=ALMOST_MAX);\n    = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `5_u128..=u128::MAX` not covered\n-  --> $DIR/exhaustiveness.rs:61:8\n+  --> $DIR/exhaustiveness.rs:60:8\n    |\n LL |     m!(0u128, 0..=4);\n    |        ^^^^^ pattern `5_u128..=u128::MAX` not covered\n@@ -89,7 +89,7 @@ LL |     m!(0u128, 0..=4);\n    = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `0_u128` not covered\n-  --> $DIR/exhaustiveness.rs:62:8\n+  --> $DIR/exhaustiveness.rs:61:8\n    |\n LL |     m!(0u128, 1..=u128::MAX);\n    |        ^^^^^ pattern `0_u128` not covered\n@@ -98,7 +98,7 @@ LL |     m!(0u128, 1..=u128::MAX);\n    = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `(126_u8..=127_u8, false)` not covered\n-  --> $DIR/exhaustiveness.rs:70:11\n+  --> $DIR/exhaustiveness.rs:69:11\n    |\n LL |     match (0u8, true) {\n    |           ^^^^^^^^^^^ pattern `(126_u8..=127_u8, false)` not covered"}, {"sha": "60fce3f51b82f229abb97fa1165a8f6f9d0ff41d", "filename": "src/test/ui/pub/pub-restricted-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(pub_restricted)]\n-\n struct Bar(pub(()));\n \n struct Foo {"}, {"sha": "95bf498c7f7460684676a30bc6784934cf56b240", "filename": "src/test/ui/pub/pub-restricted-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found `(`\n-  --> $DIR/pub-restricted-error.rs:6:16\n+  --> $DIR/pub-restricted-error.rs:4:16\n    |\n LL |     pub(crate) () foo: usize,\n    |                ^ expected identifier"}, {"sha": "bcd21082f75c68f7804d080d9095bd33f3b5d7c9", "filename": "src/test/ui/pub/pub-restricted.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(pub_restricted)]\n-\n mod a {}\n \n pub (a) fn afn() {} //~ incorrect visibility restriction"}, {"sha": "4694530e5486391cd62de5474aef9be0cf9910a0", "filename": "src/test/ui/pub/pub-restricted.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0704]: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:5:6\n+  --> $DIR/pub-restricted.rs:3:6\n    |\n LL | pub (a) fn afn() {}\n    |      ^ help: make this visible only to module `a` with `in`: `in a`\n@@ -10,7 +10,7 @@ LL | pub (a) fn afn() {}\n            `pub(in path::to::module)`: visible only on the specified path\n \n error[E0704]: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:6:6\n+  --> $DIR/pub-restricted.rs:4:6\n    |\n LL | pub (b) fn bfn() {}\n    |      ^ help: make this visible only to module `b` with `in`: `in b`\n@@ -21,7 +21,7 @@ LL | pub (b) fn bfn() {}\n            `pub(in path::to::module)`: visible only on the specified path\n \n error[E0704]: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:7:6\n+  --> $DIR/pub-restricted.rs:5:6\n    |\n LL | pub (crate::a) fn cfn() {}\n    |      ^^^^^^^^ help: make this visible only to module `crate::a` with `in`: `in crate::a`\n@@ -32,7 +32,7 @@ LL | pub (crate::a) fn cfn() {}\n            `pub(in path::to::module)`: visible only on the specified path\n \n error[E0704]: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:24:14\n+  --> $DIR/pub-restricted.rs:22:14\n    |\n LL |         pub (a) invalid: usize,\n    |              ^ help: make this visible only to module `a` with `in`: `in a`\n@@ -43,7 +43,7 @@ LL |         pub (a) invalid: usize,\n            `pub(in path::to::module)`: visible only on the specified path\n \n error[E0704]: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:33:6\n+  --> $DIR/pub-restricted.rs:31:6\n    |\n LL | pub (xyz) fn xyz() {}\n    |      ^^^ help: make this visible only to module `xyz` with `in`: `in xyz`\n@@ -54,7 +54,7 @@ LL | pub (xyz) fn xyz() {}\n            `pub(in path::to::module)`: visible only on the specified path\n \n error[E0742]: visibilities can only be restricted to ancestor modules\n-  --> $DIR/pub-restricted.rs:25:17\n+  --> $DIR/pub-restricted.rs:23:17\n    |\n LL |         pub (in x) non_parent_invalid: usize,\n    |                 ^"}, {"sha": "0cd0edf32f2e55bc60e4aec0762a6dc45c1282a6", "filename": "src/test/ui/repr/repr-transparent-other-reprs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(repr_align)]\n-\n // See also repr-transparent.rs\n \n #[repr(transparent, C)] //~ ERROR cannot have other repr"}, {"sha": "d92c358110c601ecf02619da2accc2b1fef62d51", "filename": "src/test/ui/repr/repr-transparent-other-reprs.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,23 +1,23 @@\n error[E0692]: transparent struct cannot have other repr hints\n-  --> $DIR/repr-transparent-other-reprs.rs:5:8\n+  --> $DIR/repr-transparent-other-reprs.rs:3:8\n    |\n LL | #[repr(transparent, C)]\n    |        ^^^^^^^^^^^  ^\n \n error[E0692]: transparent struct cannot have other repr hints\n-  --> $DIR/repr-transparent-other-reprs.rs:10:8\n+  --> $DIR/repr-transparent-other-reprs.rs:8:8\n    |\n LL | #[repr(transparent, packed)]\n    |        ^^^^^^^^^^^  ^^^^^^\n \n error[E0692]: transparent struct cannot have other repr hints\n-  --> $DIR/repr-transparent-other-reprs.rs:13:8\n+  --> $DIR/repr-transparent-other-reprs.rs:11:8\n    |\n LL | #[repr(transparent, align(2))]\n    |        ^^^^^^^^^^^  ^^^^^^^^\n \n error[E0692]: transparent struct cannot have other repr hints\n-  --> $DIR/repr-transparent-other-reprs.rs:16:8\n+  --> $DIR/repr-transparent-other-reprs.rs:14:8\n    |\n LL | #[repr(transparent)]\n    |        ^^^^^^^^^^^"}, {"sha": "419fb0a0e45893697c44ce7525272b357d2462f0", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-dyn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-dyn.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,4 +1,3 @@\n-#![feature(dyn_trait)]\n #![feature(rustc_attrs)]\n \n trait Trait<'x, T> where T: 'x {"}, {"sha": "4608962c7c3f8bff490c21c3912989741d9500c0", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-dyn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-dyn.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: rustc_outlives\n-  --> $DIR/explicit-dyn.rs:8:1\n+  --> $DIR/explicit-dyn.rs:7:1\n    |\n LL | / struct Foo<'a, A>\n LL | | {"}, {"sha": "c53d6c18ff65aea3dcd593d3911608a1de3a5c2b", "filename": "src/test/ui/rfc-2093-infer-outlives/self-dyn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-dyn.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,4 +1,3 @@\n-#![feature(dyn_trait)]\n #![feature(rustc_attrs)]\n \n trait Trait<'x, 's, T> where T: 'x,"}, {"sha": "7836b3f5aabedf0eed84b8bd851570a80aeb6763", "filename": "src/test/ui/rfc-2093-infer-outlives/self-dyn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-dyn.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: rustc_outlives\n-  --> $DIR/self-dyn.rs:9:1\n+  --> $DIR/self-dyn.rs:8:1\n    |\n LL | / struct Foo<'a, 'b, A>\n LL | | {"}, {"sha": "79f6b0dfe34ee0723294000ac2228f8ef36121db", "filename": "src/test/ui/rfc-2126-crate-paths/crate-path-non-absolute.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(crate_in_paths)]\n-\n struct S;\n \n pub mod m {"}, {"sha": "7e7ee3ce03d77fd74ca8b31e2992bb19aa21bae6", "filename": "src/test/ui/rfc-2126-crate-paths/crate-path-non-absolute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,11 +1,11 @@\n error[E0433]: failed to resolve: `crate` in paths can only be used in start position\n-  --> $DIR/crate-path-non-absolute.rs:7:22\n+  --> $DIR/crate-path-non-absolute.rs:5:22\n    |\n LL |         let s = ::m::crate::S;\n    |                      ^^^^^ `crate` in paths can only be used in start position\n \n error[E0433]: failed to resolve: global paths cannot start with `crate`\n-  --> $DIR/crate-path-non-absolute.rs:8:20\n+  --> $DIR/crate-path-non-absolute.rs:6:20\n    |\n LL |         let s1 = ::crate::S;\n    |                    ^^^^^ global paths cannot start with `crate`"}, {"sha": "019ef8e9dade77a12eac8593252ba2206738d457", "filename": "src/test/ui/rfc-2126-crate-paths/keyword-crate-as-identifier.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(crate_in_paths)]\n-\n fn main() {\n     let crate = 0;\n     //~^ ERROR expected unit struct, unit variant or constant, found module `crate`"}, {"sha": "c39a70f66a97ad03a9ca50213d2de2689abcc3c5", "filename": "src/test/ui/rfc-2126-crate-paths/keyword-crate-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0532]: expected unit struct, unit variant or constant, found module `crate`\n-  --> $DIR/keyword-crate-as-identifier.rs:4:9\n+  --> $DIR/keyword-crate-as-identifier.rs:2:9\n    |\n LL |     let crate = 0;\n    |         ^^^^^ not a unit struct, unit variant or constant"}, {"sha": "906956f5eba49613034cb3fe00d86ad2140d1f31", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -2,7 +2,9 @@\n #![feature(const_add)]\n #![feature(const_trait_impl)]\n #![feature(staged_api)]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Int(i32);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -16,6 +18,7 @@ impl const std::ops::Sub for Int {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_add\", issue = \"none\")]\n impl const std::ops::Add for Int {\n     type Output = Self;"}, {"sha": "7473b801cce63127f3fa609594d438e70f9acad0", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error: trait methods cannot be stable const fn\n-  --> $DIR/stability.rs:13:5\n+  --> $DIR/stability.rs:15:5\n    |\n LL | /     fn sub(self, rhs: Self) -> Self {\n LL | |\n@@ -8,7 +8,7 @@ LL | |     }\n    | |_____^\n \n error: `<Int as Add>::add` is not yet stable as a const fn\n-  --> $DIR/stability.rs:31:5\n+  --> $DIR/stability.rs:34:5\n    |\n LL |     Int(1i32) + Int(2i32)\n    |     ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ec5bb656ad4e717a1cfaca5ab319071c732df8b8", "filename": "src/test/ui/rust-2018/uniform-paths/issue-56596.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-56596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-56596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-56596.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -2,8 +2,6 @@\n // compile-flags: --extern issue_56596\n // aux-build:issue-56596.rs\n \n-#![feature(uniform_paths)]\n-\n mod m {\n     pub mod issue_56596 {}\n }"}, {"sha": "8b8ab26dce2242d3b0d04f81b1be198b9ba7ede2", "filename": "src/test/ui/rust-2018/uniform-paths/issue-56596.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-56596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-56596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-56596.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0659]: `issue_56596` is ambiguous\n-  --> $DIR/issue-56596.rs:12:5\n+  --> $DIR/issue-56596.rs:10:5\n    |\n LL | use issue_56596;\n    |     ^^^^^^^^^^^ ambiguous name\n@@ -8,7 +8,7 @@ LL | use issue_56596;\n    = note: `issue_56596` could refer to a crate passed with `--extern`\n    = help: use `::issue_56596` to refer to this crate unambiguously\n note: `issue_56596` could also refer to the module imported here\n-  --> $DIR/issue-56596.rs:11:5\n+  --> $DIR/issue-56596.rs:9:5\n    |\n LL | use m::*;\n    |     ^^^^"}, {"sha": "6b065bf6cbff299035595904e39b2cbf4b4e1e5e", "filename": "src/test/ui/span/issue-23827.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fspan%2Fissue-23827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fspan%2Fissue-23827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23827.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,6 +1,6 @@\n // Regression test for #23827\n \n-#![feature(core, fn_traits, unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n \n pub struct Prototype {\n     pub target: u32"}, {"sha": "1627d1d3f9f19312f3a125ae42cd996414d21b4f", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged-force-unstable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -3,4 +3,5 @@\n #[unstable()] //~ ERROR: stability attributes may not be used\n #[stable()] //~ ERROR: stability attributes may not be used\n #[rustc_deprecated()] //~ ERROR: stability attributes may not be used\n-fn main() { }\n+//~^ ERROR missing 'since'\n+fn main() {}"}, {"sha": "a2b2d3cbe595196388c8bf8ac4c470638e2082e0", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged-force-unstable.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -16,6 +16,13 @@ error[E0734]: stability attributes may not be used outside of the standard libra\n LL | #[rustc_deprecated()]\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0542]: missing 'since'\n+  --> $DIR/stability-attribute-non-staged-force-unstable.rs:5:1\n+   |\n+LL | #[rustc_deprecated()]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0734`.\n+Some errors have detailed explanations: E0542, E0734.\n+For more information about an error, try `rustc --explain E0542`."}, {"sha": "dfbd9ea5ebf2e5150c4a91a90dd2d0200f1674a0", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,4 +1,5 @@\n #[unstable()] //~ ERROR: stability attributes may not be used\n #[stable()] //~ ERROR: stability attributes may not be used\n #[rustc_deprecated()] //~ ERROR: stability attributes may not be used\n-fn main() { }\n+//~^ ERROR missing 'since'\n+fn main() {}"}, {"sha": "9af8d1df4ea040bb390700f56b4dd78d033f4ac9", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -16,6 +16,13 @@ error[E0734]: stability attributes may not be used outside of the standard libra\n LL | #[rustc_deprecated()]\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0542]: missing 'since'\n+  --> $DIR/stability-attribute-non-staged.rs:3:1\n+   |\n+LL | #[rustc_deprecated()]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0734`.\n+Some errors have detailed explanations: E0542, E0734.\n+For more information about an error, try `rustc --explain E0542`."}, {"sha": "b85f9342045a01cf9a1a5448a123bc462dca5e2b", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -19,10 +19,12 @@ mod bogus_attribute_types_2 {\n \n     #[stable(feature = \"a\", since = \"b\")]\n     #[rustc_deprecated] //~ ERROR malformed `rustc_deprecated` attribute\n+                        //~^ ERROR missing 'since'\n     fn f5() { }\n \n     #[stable(feature = \"a\", since = \"b\")]\n     #[rustc_deprecated = \"a\"] //~ ERROR malformed `rustc_deprecated` attribute\n+                              //~^ ERROR missing 'since'\n     fn f6() { }\n }\n "}, {"sha": "651f293ff519e31e92b6a37258a132bf6f00ba45", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-4.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -29,10 +29,23 @@ LL |     #[rustc_deprecated]\n    |     ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_deprecated(since = \"version\", reason = \"...\")]`\n \n error: malformed `rustc_deprecated` attribute input\n-  --> $DIR/stability-attribute-sanity-4.rs:25:5\n+  --> $DIR/stability-attribute-sanity-4.rs:26:5\n    |\n LL |     #[rustc_deprecated = \"a\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_deprecated(since = \"version\", reason = \"...\")]`\n \n-error: aborting due to 6 previous errors\n+error[E0542]: missing 'since'\n+  --> $DIR/stability-attribute-sanity-4.rs:21:5\n+   |\n+LL |     #[rustc_deprecated]\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error[E0542]: missing 'since'\n+  --> $DIR/stability-attribute-sanity-4.rs:26:5\n+   |\n+LL |     #[rustc_deprecated = \"a\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n \n+For more information about this error, try `rustc --explain E0542`."}, {"sha": "fe8079dbc3701d5c7c2a708c93b1fb4afa6e4f33", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -65,6 +65,7 @@ fn multiple3() { }\n pub const fn multiple4() { }\n \n #[stable(feature = \"a\", since = \"1.0.0\")] //~ ERROR invalid deprecation version found\n+//~^ ERROR feature `a` is declared stable since 1.0.0\n #[rustc_deprecated(since = \"invalid\", reason = \"text\")]\n fn invalid_deprecation_version() {}\n "}, {"sha": "b4e8fc78815497d2b5e5eb63d98b2946b97fd35f", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -110,17 +110,23 @@ error: invalid deprecation version found\n    |\n LL | #[stable(feature = \"a\", since = \"1.0.0\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid deprecation version\n-LL | #[rustc_deprecated(since = \"invalid\", reason = \"text\")]\n+...\n LL | fn invalid_deprecation_version() {}\n    | ----------------------------------- the stability attribute annotates this item\n \n error[E0549]: rustc_deprecated attribute must be paired with either stable or unstable attribute\n-  --> $DIR/stability-attribute-sanity.rs:71:1\n+  --> $DIR/stability-attribute-sanity.rs:72:1\n    |\n LL | #[rustc_deprecated(since = \"a\", reason = \"text\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 19 previous errors\n+error[E0711]: feature `a` is declared stable since 1.0.0, but was previously declared stable since b\n+  --> $DIR/stability-attribute-sanity.rs:67:1\n+   |\n+LL | #[stable(feature = \"a\", since = \"1.0.0\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 20 previous errors\n \n Some errors have detailed explanations: E0539, E0541, E0542, E0543, E0544, E0546, E0547, E0549, E0550.\n For more information about an error, try `rustc --explain E0539`."}, {"sha": "ad1b6e96be6249e3184faace63c44be54d28e871", "filename": "src/test/ui/target-feature/invalid-attribute.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -12,7 +12,6 @@\n // ignore-sparc\n // ignore-sparc64\n \n-#![feature(target_feature)]\n #![warn(unused_attributes)]\n \n #[target_feature = \"+sse2\"]"}, {"sha": "25a2c1975e7b2d9f7f510c15961578828f00d009", "filename": "src/test/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,29 +1,29 @@\n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:18:1\n+  --> $DIR/invalid-attribute.rs:17:1\n    |\n LL | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n \n error: the feature named `foo` is not valid for this target\n-  --> $DIR/invalid-attribute.rs:20:18\n+  --> $DIR/invalid-attribute.rs:19:18\n    |\n LL | #[target_feature(enable = \"foo\")]\n    |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:23:18\n+  --> $DIR/invalid-attribute.rs:22:18\n    |\n LL | #[target_feature(bar)]\n    |                  ^^^ help: must be of the form: `enable = \"..\"`\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:25:18\n+  --> $DIR/invalid-attribute.rs:24:18\n    |\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:29:1\n+  --> $DIR/invalid-attribute.rs:28:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | fn bar() {}\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:35:1\n+  --> $DIR/invalid-attribute.rs:34:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL | mod another {}\n    | -------------- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:40:1\n+  --> $DIR/invalid-attribute.rs:39:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL | const FOO: usize = 7;\n    | --------------------- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:45:1\n+  --> $DIR/invalid-attribute.rs:44:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -62,7 +62,7 @@ LL | struct Foo;\n    | ----------- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:50:1\n+  --> $DIR/invalid-attribute.rs:49:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -71,7 +71,7 @@ LL | enum Bar {}\n    | ----------- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:55:1\n+  --> $DIR/invalid-attribute.rs:54:1\n    |\n LL |   #[target_feature(enable = \"sse2\")]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -84,7 +84,7 @@ LL | | }\n    | |_- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:63:1\n+  --> $DIR/invalid-attribute.rs:62:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -93,13 +93,13 @@ LL | trait Baz {}\n    | ------------ not a function\n \n error: cannot use `#[inline(always)]` with `#[target_feature]`\n-  --> $DIR/invalid-attribute.rs:68:1\n+  --> $DIR/invalid-attribute.rs:67:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:86:5\n+  --> $DIR/invalid-attribute.rs:85:5\n    |\n LL |       #[target_feature(enable = \"sse2\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -111,7 +111,7 @@ LL | |     }\n    | |_____- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:94:5\n+  --> $DIR/invalid-attribute.rs:93:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL |     || {};\n    |     ----- not a function\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:78:5\n+  --> $DIR/invalid-attribute.rs:77:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7ffa0de6c0fcc034960393377ececdc20191b9f0", "filename": "src/test/ui/try-trait/try-on-option-diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n-#![feature(try_trait)]\n // edition:2018\n+\n fn main() {}\n \n fn a_function() -> u32 {"}, {"sha": "8519932a634150dfc4ccbbc8adee1b24f67eff42", "filename": "src/test/ui/try-trait/try-on-option.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,3 @@\n-#![feature(try_trait)]\n-\n fn main() {}\n \n fn foo() -> Result<u32, ()> {"}, {"sha": "24db9f524370351d6ee6d68f9e2e8594468025b7", "filename": "src/test/ui/try-trait/try-on-option.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n-  --> $DIR/try-on-option.rs:7:6\n+  --> $DIR/try-on-option.rs:5:6\n    |\n LL | / fn foo() -> Result<u32, ()> {\n LL | |     let x: Option<u32> = None;\n@@ -12,7 +12,7 @@ LL | | }\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u32, ()>`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/try-on-option.rs:13:6\n+  --> $DIR/try-on-option.rs:11:6\n    |\n LL | / fn bar() -> u32 {\n LL | |     let x: Option<u32> = None;"}, {"sha": "9f617153e3fd5fc5489bf4e755441150ed07474a", "filename": "src/test/ui/type-alias-impl-trait/issue-63355.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,4 @@\n #![feature(type_alias_impl_trait)]\n-#![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n \n pub trait Foo {}"}, {"sha": "2dbd5a55a625f966c9efd04c1636aa1858733ada", "filename": "src/test/ui/type-alias-impl-trait/issue-63355.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,13 +1,13 @@\n error[E0271]: type mismatch resolving `<() as Bar>::Foo == ()`\n-  --> $DIR/issue-63355.rs:34:20\n+  --> $DIR/issue-63355.rs:33:20\n    |\n LL | pub type FooImpl = impl Foo;\n    |                    -------- the found opaque type\n LL | pub type BarImpl = impl Bar<Foo = FooImpl>;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<() as Bar>::Foo == ()`\n    |\n note: expected this to be `()`\n-  --> $DIR/issue-63355.rs:24:16\n+  --> $DIR/issue-63355.rs:23:16\n    |\n LL |     type Foo = FooImpl;\n    |                ^^^^^^^"}, {"sha": "9a119c4d2e0aa76f542c9e3ff30bdb58a42d94d8", "filename": "src/test/ui/type-alias-impl-trait/issue-65384.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,4 @@\n #![feature(type_alias_impl_trait)]\n-#![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n \n trait MyTrait {}"}, {"sha": "27680f0ad75accdd360abc00d9462ebdf8cb7496", "filename": "src/test/ui/type-alias-impl-trait/issue-65384.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,11 +1,11 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-65384.rs:11:1\n+  --> $DIR/issue-65384.rs:10:1\n    |\n LL | impl MyTrait for Bar {}\n    | ^^^^^^^^^^^^^^^^^^^^\n    |\n note: type alias impl trait defined here\n-  --> $DIR/issue-65384.rs:9:12\n+  --> $DIR/issue-65384.rs:8:12\n    |\n LL | type Bar = impl MyTrait;\n    |            ^^^^^^^^^^^^"}, {"sha": "e5c81556e26b327b8390a1ddb8b9fee0ec80a136", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,8 +1,6 @@\n // Test a default that references `Self` which is then used in an object type.\n // Issue #18956.\n \n-#![feature(default_type_params)]\n-\n trait Foo<T=Self> {\n     fn method(&self);\n }"}, {"sha": "4fc21bd7af230650a82fefb6214402d807c9d108", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0393]: the type parameter `T` must be explicitly specified\n-  --> $DIR/type-parameter-defaults-referencing-Self.rs:10:16\n+  --> $DIR/type-parameter-defaults-referencing-Self.rs:8:16\n    |\n LL | / trait Foo<T=Self> {\n LL | |     fn method(&self);"}, {"sha": "867e5fb1de7591f75507f06eab31df5ba68af3e3", "filename": "src/test/ui/unboxed-closures/unboxed-closures-fnmut-as-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -2,7 +2,6 @@\n // Fn to be used where FnMut is implemented.\n \n #![feature(fn_traits, unboxed_closures)]\n-#![feature(overloaded_calls)]\n \n use std::ops::{Fn,FnMut,FnOnce};\n "}, {"sha": "f379d73eecff723c39044f9af0424cfd86525ee6", "filename": "src/test/ui/unboxed-closures/unboxed-closures-fnmut-as-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: expected a `Fn<(isize,)>` closure, found `S`\n-  --> $DIR/unboxed-closures-fnmut-as-fn.rs:28:21\n+  --> $DIR/unboxed-closures-fnmut-as-fn.rs:27:21\n    |\n LL |     let x = call_it(&S, 22);\n    |             ------- ^^ expected an `Fn<(isize,)>` closure, found `S`\n@@ -8,7 +8,7 @@ LL |     let x = call_it(&S, 22);\n    |\n    = help: the trait `Fn<(isize,)>` is not implemented for `S`\n note: required by a bound in `call_it`\n-  --> $DIR/unboxed-closures-fnmut-as-fn.rs:23:14\n+  --> $DIR/unboxed-closures-fnmut-as-fn.rs:22:14\n    |\n LL | fn call_it<F:Fn(isize)->isize>(f: &F, x: isize) -> isize {\n    |              ^^^^^^^^^^^^^^^^ required by this bound in `call_it`"}, {"sha": "5e354cb6fce25355fca54d739c74c1dbb8bf3647", "filename": "src/test/ui/unboxed-closures/unboxed-closures-recursive-fn-using-fn-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-recursive-fn-using-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f6d33b775eddfc0128c04083bbf3beea360114/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-recursive-fn-using-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-recursive-fn-using-fn-mut.rs?ref=65f6d33b775eddfc0128c04083bbf3beea360114", "patch": "@@ -1,4 +1,4 @@\n-#![feature(core, fn_traits, unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n \n use std::marker::PhantomData;\n "}]}