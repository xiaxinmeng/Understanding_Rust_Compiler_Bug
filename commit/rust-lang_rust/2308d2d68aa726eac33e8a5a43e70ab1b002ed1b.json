{"sha": "2308d2d68aa726eac33e8a5a43e70ab1b002ed1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMDhkMmQ2OGFhNzI2ZWFjMzNlOGE1YTQzZTcwYWIxYjAwMmVkMWI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-12T20:55:19Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:10:57Z"}, "message": "Handle `ConstValue::Placeholder` in `canonicalizer`", "tree": {"sha": "64b674361617d73dbda60480c7c43daed87a2c34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64b674361617d73dbda60480c7c43daed87a2c34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2308d2d68aa726eac33e8a5a43e70ab1b002ed1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2308d2d68aa726eac33e8a5a43e70ab1b002ed1b", "html_url": "https://github.com/rust-lang/rust/commit/2308d2d68aa726eac33e8a5a43e70ab1b002ed1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2308d2d68aa726eac33e8a5a43e70ab1b002ed1b/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70797b575f4806528e24f7316cbfbacb27c6cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70797b575f4806528e24f7316cbfbacb27c6cf2", "html_url": "https://github.com/rust-lang/rust/commit/e70797b575f4806528e24f7316cbfbacb27c6cf2"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "95310996c1859b1092544bebf79947e64b85aac3", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2308d2d68aa726eac33e8a5a43e70ab1b002ed1b/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2308d2d68aa726eac33e8a5a43e70ab1b002ed1b/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=2308d2d68aa726eac33e8a5a43e70ab1b002ed1b", "patch": "@@ -454,9 +454,9 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                             }\n                             return self.canonicalize_const_var(\n                                 CanonicalVarInfo {\n-                                    kind: CanonicalVarKind::Const(ui)\n+                                    kind: CanonicalVarKind::Const(ui),\n                                 },\n-                                c\n+                                c,\n                             );\n                         }\n                     }\n@@ -471,6 +471,14 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                         return c;\n                     }\n                 }\n+                ConstValue::Placeholder(placeholder) => {\n+                    return self.canonicalize_const_var(\n+                        CanonicalVarInfo {\n+                            kind: CanonicalVarKind::PlaceholderConst(placeholder),\n+                        },\n+                        c,\n+                    );\n+                }\n                 _ => {}\n             }\n         }"}, {"sha": "a5694818b98109587c06ecc95794ede97decbe46", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2308d2d68aa726eac33e8a5a43e70ab1b002ed1b/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2308d2d68aa726eac33e8a5a43e70ab1b002ed1b/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=2308d2d68aa726eac33e8a5a43e70ab1b002ed1b", "patch": "@@ -414,8 +414,17 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             CanonicalVarKind::PlaceholderConst(\n                 ty::PlaceholderConst { universe, name },\n             ) => {\n-                let _ = (universe, name);\n-                unimplemented!() // FIXME(const_generics)\n+                let universe_mapped = universe_map(universe);\n+                let placeholder_mapped = ty::PlaceholderConst {\n+                    universe: universe_mapped,\n+                    name,\n+                };\n+                self.tcx.mk_lazy_const(ty::LazyConst::Evaluated(\n+                    ty::Const {\n+                        val: ConstValue::Placeholder(placeholder_mapped),\n+                        ty: self.tcx.types.err, // FIXME(const_generics)\n+                    }\n+                )).into()\n             }\n         }\n     }"}]}