{"sha": "a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OWM4MGQwYjBmM2ZhMTUxMTFiYTg4ZmU3MjYwZjg2ZmY2ZGY0MTA=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-11-26T04:21:03Z"}, "committer": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-11-29T01:09:15Z"}, "message": "Adds TyCtxt::require_lang_item(LangItem) to simplify lang item requires.\n\nReplaces instances of tcx.lang_items.require(..) with fatal unwrap with\nthis method.", "tree": {"sha": "95315d0e580deeae2c8cf3e88981c5d9edac5d5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95315d0e580deeae2c8cf3e88981c5d9edac5d5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "html_url": "https://github.com/rust-lang/rust/commit/a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b803ec4217d37fe73f1f738f8007d5d6512a425", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b803ec4217d37fe73f1f738f8007d5d6512a425", "html_url": "https://github.com/rust-lang/rust/commit/9b803ec4217d37fe73f1f738f8007d5d6512a425"}], "stats": {"total": 68, "additions": 28, "deletions": 40}, "files": [{"sha": "72ef987aefd5ca96f349186d992b460e1247023b", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -1493,8 +1493,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        let copy_def_id = self.tcx.lang_items.require(lang_items::CopyTraitLangItem)\n-            .unwrap_or_else(|msg| self.tcx.sess.fatal(&msg[..]));\n+        let copy_def_id = self.tcx.require_lang_item(lang_items::CopyTraitLangItem);\n \n         // this can get called from typeck (by euv), and moves_by_default\n         // rightly refuses to work with inference variables, but"}, {"sha": "1efc211b8c35be608b29cfd05cf2b103c67607bc", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -356,3 +356,11 @@ language_item_table! {\n \n     DebugTraitLangItem,              \"debug_trait\",             debug_trait;\n }\n+\n+impl<'a, 'tcx, 'gcx> ty::TyCtxt<'a, 'tcx, 'gcx> {\n+    pub fn require_lang_item(&self, lang_item: LangItem) -> DefId {\n+        self.lang_items.require(lang_item).unwrap_or_else(|msg| {\n+            self.sess.fatal(&msg)\n+        })\n+    }\n+}"}, {"sha": "38a228034dd055cff56c8e32303a9cb8169e1f9c", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -2521,8 +2521,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n                 // We can only make objects from sized types.\n                 let tr = ty::TraitRef {\n-                    def_id: tcx.lang_items.require(lang_items::SizedTraitLangItem)\n-                        .unwrap_or_else(|msg| tcx.sess.fatal(&msg[..])),\n+                    def_id: tcx.require_lang_item(lang_items::SizedTraitLangItem),\n                     substs: tcx.mk_substs_trait(source, &[]),\n                 };\n                 push(tr.to_predicate());"}, {"sha": "ade6cad6866df43a84ecb6341f48cbfce3ad58af", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -11,6 +11,7 @@\n use hir::def_id::DefId;\n use ty::{self, Ty, TyCtxt};\n use syntax::ast;\n+use middle::lang_items::OwnedBoxLangItem;\n \n use self::SimplifiedType::*;\n \n@@ -70,10 +71,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         }\n         ty::TyBox(_) => {\n             // treat like we would treat `Box`\n-            match tcx.lang_items.require_owned_box() {\n-                Ok(def_id) => Some(AdtSimplifiedType(def_id)),\n-                Err(msg) => tcx.sess.fatal(&msg),\n-            }\n+            Some(AdtSimplifiedType(tcx.require_lang_item(OwnedBoxLangItem)))\n         }\n         ty::TyClosure(def_id, _) => {\n             Some(ClosureSimplifiedType(def_id))"}, {"sha": "ab8f7d524f44d389fc6760a15e62b6d60ee6fcfe", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -1878,18 +1878,14 @@ pub enum ClosureKind {\n \n impl<'a, 'tcx> ClosureKind {\n     pub fn trait_did(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> DefId {\n-        let result = match *self {\n-            ClosureKind::Fn => tcx.lang_items.require(FnTraitLangItem),\n+        match *self {\n+            ClosureKind::Fn => tcx.require_lang_item(FnTraitLangItem),\n             ClosureKind::FnMut => {\n-                tcx.lang_items.require(FnMutTraitLangItem)\n+                tcx.require_lang_item(FnMutTraitLangItem)\n             }\n             ClosureKind::FnOnce => {\n-                tcx.lang_items.require(FnOnceTraitLangItem)\n+                tcx.require_lang_item(FnOnceTraitLangItem)\n             }\n-        };\n-        match result {\n-            Ok(trait_did) => trait_did,\n-            Err(err) => tcx.sess.fatal(&err[..]),\n         }\n     }\n "}, {"sha": "6ba4b8d2da77b8d9c2f40f787b80d4a2807de61d", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -646,8 +646,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             TyProjection(..) | TyParam(..) | TyInfer(..) | TyError => None\n         }.unwrap_or_else(|| {\n             !self.impls_bound(tcx, param_env,\n-                              tcx.lang_items.require(lang_items::CopyTraitLangItem)\n-                                .unwrap_or_else(|msg| tcx.sess.fatal(&msg[..])),\n+                              tcx.require_lang_item(lang_items::CopyTraitLangItem),\n                               &param_env.is_copy_cache, span) });\n \n         if !self.has_param_types() && !self.has_self_ty() {\n@@ -689,9 +688,8 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             TyAdt(..) | TyProjection(..) | TyParam(..) |\n             TyInfer(..) | TyAnon(..) | TyError => None\n         }.unwrap_or_else(|| {\n-            self.impls_bound(tcx, param_env, tcx.lang_items.require(lang_items::SizedTraitLangItem)\n-                              .unwrap_or_else(|msg| tcx.sess.fatal(&msg[..])),\n-                              &param_env.is_copy_cache, span) });\n+            self.impls_bound(tcx, param_env, tcx.require_lang_item(lang_items::SizedTraitLangItem),\n+                              &param_env.is_sized_cache, span) });\n \n         if !self.has_param_types() && !self.has_self_ty() {\n             self.flags.set(self.flags.get() | if result {"}, {"sha": "bab9964651dcacb4a1d48ff90e975542e9b5a26e", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -283,8 +283,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n         if !subty.has_escaping_regions() {\n             let cause = self.cause(cause);\n             let trait_ref = ty::TraitRef {\n-                def_id: self.infcx.tcx.lang_items.require(lang_items::SizedTraitLangItem)\n-                    .unwrap_or_else(|msg| self.infcx.tcx.sess.fatal(&msg[..])),\n+                def_id: self.infcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n                 substs: self.infcx.tcx.mk_substs_trait(subty, &[]),\n             };\n             self.out.push(traits::Obligation::new(cause, trait_ref.to_predicate()));"}, {"sha": "49ef5dd7a1725235e2a2fac97171e8c9f6de0304", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -857,8 +857,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n         let tcx = self.tcx;\n         let unit_temp = Lvalue::Local(self.patch.new_temp(tcx.mk_nil()));\n-        let free_func = tcx.lang_items.require(lang_items::BoxFreeFnLangItem)\n-            .unwrap_or_else(|e| tcx.sess.fatal(&e));\n+        let free_func = tcx.require_lang_item(lang_items::BoxFreeFnLangItem);\n         let substs = tcx.mk_substs(iter::once(Kind::from(ty)));\n         let fty = tcx.item_type(free_func).subst(tcx, substs);\n "}, {"sha": "c02a1822d736961e39f3b894db8a097664245f76", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -783,8 +783,7 @@ fn build_free<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                               data: &FreeData<'tcx>,\n                               target: BasicBlock)\n                               -> TerminatorKind<'tcx> {\n-    let free_func = tcx.lang_items.require(lang_items::BoxFreeFnLangItem)\n-                       .unwrap_or_else(|e| tcx.sess.fatal(&e));\n+    let free_func = tcx.require_lang_item(lang_items::BoxFreeFnLangItem);\n     let substs = tcx.intern_substs(&[Kind::from(data.item_ty)]);\n     TerminatorKind::Call {\n         func: Operand::Constant(Constant {"}, {"sha": "9c6922016e02a8d4ddd0f1199172faf102e93ec9", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -1048,9 +1048,7 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants {\n                 let cause = traits::ObligationCause::new(mir.span, id, traits::SharedStatic);\n                 let mut fulfillment_cx = traits::FulfillmentContext::new();\n                 fulfillment_cx.register_bound(&infcx, ty,\n-                                              tcx.lang_items\n-                                                .require(lang_items::SyncTraitLangItem)\n-                                                .unwrap_or_else(|msg| tcx.sess.fatal(&msg[..])),\n+                                              tcx.require_lang_item(lang_items::SyncTraitLangItem),\n                                               cause);\n                 if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n                     infcx.report_fulfillment_errors(&err);"}, {"sha": "f2c8ef46a7e252db6a090ee80222797cec8d5fe1", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -545,8 +545,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn type_is_known_to_be_sized(&self, ty: Ty<'tcx>, span: Span) -> bool {\n-        let lang_item = self.tcx.lang_items.require(lang_items::SizedTraitLangItem)\n-                            .unwrap_or_else(|msg| self.tcx.sess.fatal(&msg[..]));\n+        let lang_item = self.tcx.require_lang_item(lang_items::SizedTraitLangItem);\n         traits::type_known_to_meet_bound(self, ty, lang_item, span)\n     }\n }"}, {"sha": "df3d68d225440d01199a5a3cd3fdf6e98e1ca18c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -1819,8 +1819,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                  span: Span,\n                                  code: traits::ObligationCauseCode<'tcx>)\n     {\n-        let lang_item = self.tcx.lang_items.require(lang_items::SizedTraitLangItem)\n-                            .unwrap_or_else(|msg| self.tcx.sess.fatal(&msg[..]));\n+        let lang_item = self.tcx.require_lang_item(lang_items::SizedTraitLangItem);\n         self.require_type_meets(ty, span, code, lang_item);\n     }\n \n@@ -3902,8 +3901,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if count > 1 {\n                 // For [foo, ..n] where n > 1, `foo` must have\n                 // Copy type:\n-                let lang_item = self.tcx.lang_items.require(lang_items::CopyTraitLangItem)\n-                            .unwrap_or_else(|msg| self.tcx.sess.fatal(&msg[..]));\n+                let lang_item = self.tcx.require_lang_item(lang_items::CopyTraitLangItem);\n                 self.require_type_meets(t, expr.span, traits::RepeatVec, lang_item);\n             }\n "}, {"sha": "28aa4b9ef38933348baf1d65fb03441f82eb14c3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -238,8 +238,7 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n                 for field in &variant.fields[..variant.fields.len() - unsized_len] {\n                     fcx.register_bound(\n                         field.ty,\n-                        fcx.tcx.lang_items.require(lang_items::SizedTraitLangItem)\n-                            .unwrap_or_else(|msg| fcx.tcx.sess.fatal(&msg[..])),\n+                        fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n                         traits::ObligationCause::new(field.span,\n                                                      fcx.body_id,\n                                                      traits::FieldSized));"}, {"sha": "8d65a5dbc6fcb0a588779a792548b27f64e57cd1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79c80d0b0f3fa15111ba88fe7260f86ff6df410/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "patch": "@@ -594,8 +594,7 @@ pub enum TyParamBound {\n \n impl TyParamBound {\n     fn maybe_sized(cx: &DocContext) -> TyParamBound {\n-        let did = cx.tcx.lang_items.require(lang_items::SizedTraitLangItem)\n-            .unwrap_or_else(|msg| cx.tcx.sess.fatal(&msg[..]));\n+        let did = cx.tcx.require_lang_item(lang_items::SizedTraitLangItem);\n         let empty = cx.tcx.intern_substs(&[]);\n         let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n             Some(did), false, vec![], empty);"}]}