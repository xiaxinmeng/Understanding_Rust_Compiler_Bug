{"sha": "c946c40d9d47328fc1a08919dec174a77c12fd6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NDZjNDBkOWQ0NzMyOGZjMWEwODkxOWRlYzE3NGE3N2MxMmZkNmI=", "commit": {"author": {"name": "khyperia", "email": "github@khyperia.com", "date": "2020-09-17T10:01:12Z"}, "committer": {"name": "khyperia", "email": "github@khyperia.com", "date": "2020-09-17T10:01:12Z"}, "message": "Let backends define custom targets\n\nAdd a target_override hook that takes priority over builtin targets.", "tree": {"sha": "ce6e06c64ca6218b684dcad4b50943865ccfd0d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce6e06c64ca6218b684dcad4b50943865ccfd0d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c946c40d9d47328fc1a08919dec174a77c12fd6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c946c40d9d47328fc1a08919dec174a77c12fd6b", "html_url": "https://github.com/rust-lang/rust/commit/c946c40d9d47328fc1a08919dec174a77c12fd6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c946c40d9d47328fc1a08919dec174a77c12fd6b/comments", "author": {"login": "khyperia", "id": 953151, "node_id": "MDQ6VXNlcjk1MzE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/953151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khyperia", "html_url": "https://github.com/khyperia", "followers_url": "https://api.github.com/users/khyperia/followers", "following_url": "https://api.github.com/users/khyperia/following{/other_user}", "gists_url": "https://api.github.com/users/khyperia/gists{/gist_id}", "starred_url": "https://api.github.com/users/khyperia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khyperia/subscriptions", "organizations_url": "https://api.github.com/users/khyperia/orgs", "repos_url": "https://api.github.com/users/khyperia/repos", "events_url": "https://api.github.com/users/khyperia/events{/privacy}", "received_events_url": "https://api.github.com/users/khyperia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "khyperia", "id": 953151, "node_id": "MDQ6VXNlcjk1MzE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/953151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khyperia", "html_url": "https://github.com/khyperia", "followers_url": "https://api.github.com/users/khyperia/followers", "following_url": "https://api.github.com/users/khyperia/following{/other_user}", "gists_url": "https://api.github.com/users/khyperia/gists{/gist_id}", "starred_url": "https://api.github.com/users/khyperia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khyperia/subscriptions", "organizations_url": "https://api.github.com/users/khyperia/orgs", "repos_url": "https://api.github.com/users/khyperia/repos", "events_url": "https://api.github.com/users/khyperia/events{/privacy}", "received_events_url": "https://api.github.com/users/khyperia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95386b656e91168bf53e2ab63c6b992cae591fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/95386b656e91168bf53e2ab63c6b992cae591fe7", "html_url": "https://github.com/rust-lang/rust/commit/95386b656e91168bf53e2ab63c6b992cae591fe7"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "21e19696fffc9464687a03d72c70b3edaf6a66c8", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c946c40d9d47328fc1a08919dec174a77c12fd6b/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c946c40d9d47328fc1a08919dec174a77c12fd6b/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=c946c40d9d47328fc1a08919dec174a77c12fd6b", "patch": "@@ -32,6 +32,7 @@ use rustc_serialize::json;\n use rustc_session::config::{self, OptLevel, OutputFilenames, PrintRequest};\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n+use rustc_target::spec::Target;\n \n use std::any::Any;\n use std::ffi::CStr;\n@@ -244,6 +245,10 @@ impl CodegenBackend for LlvmCodegenBackend {\n         target_features(sess)\n     }\n \n+    fn target_override(&self, _opts: &config::Options) -> Option<Target> {\n+        None\n+    }\n+\n     fn metadata_loader(&self) -> Box<MetadataLoaderDyn> {\n         Box::new(metadata::LlvmMetadataLoader)\n     }"}, {"sha": "224c8c2350f1cdfbfeff9e5ec461e5ba7e3f9edd", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c946c40d9d47328fc1a08919dec174a77c12fd6b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c946c40d9d47328fc1a08919dec174a77c12fd6b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=c946c40d9d47328fc1a08919dec174a77c12fd6b", "patch": "@@ -15,6 +15,7 @@ use rustc_session::{\n };\n use rustc_span::symbol::Symbol;\n use rustc_target::abi::LayoutOf;\n+use rustc_target::spec::Target;\n \n pub use rustc_data_structures::sync::MetadataRef;\n \n@@ -54,6 +55,10 @@ pub trait CodegenBackend {\n     fn print_passes(&self) {}\n     fn print_version(&self) {}\n \n+    /// If this plugin provides additional builtin targets, provide them here.\n+    /// Be careful: this is called *before* init() is called.\n+    fn target_override(&self, opts: &config::Options) -> Option<Target>;\n+\n     fn metadata_loader(&self) -> Box<MetadataLoaderDyn>;\n     fn provide(&self, _providers: &mut Providers);\n     fn provide_extern(&self, _providers: &mut Providers);"}, {"sha": "72e10bc4304d050d41b2cb68f5b247a5c0f4843e", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c946c40d9d47328fc1a08919dec174a77c12fd6b/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c946c40d9d47328fc1a08919dec174a77c12fd6b/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=c946c40d9d47328fc1a08919dec174a77c12fd6b", "patch": "@@ -40,6 +40,7 @@ fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n         DiagnosticOutput::Default,\n         Default::default(),\n         None,\n+        None,\n     );\n     (sess, cfg)\n }"}, {"sha": "c4d89850dad50ca1eb428d10b75ab6087d99808f", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c946c40d9d47328fc1a08919dec174a77c12fd6b/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c946c40d9d47328fc1a08919dec174a77c12fd6b/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=c946c40d9d47328fc1a08919dec174a77c12fd6b", "patch": "@@ -65,16 +65,21 @@ pub fn create_session(\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n     descriptions: Registry,\n ) -> (Lrc<Session>, Lrc<Box<dyn CodegenBackend>>) {\n+    let codegen_backend = get_codegen_backend(sopts.debugging_opts.codegen_backend.as_deref());\n+    // target_override is documented to be called before init(), so this is okay\n+    let target_override = codegen_backend.target_override(&sopts);\n+\n     let mut sess = session::build_session(\n         sopts,\n         input_path,\n         descriptions,\n         diagnostic_output,\n         lint_caps,\n         file_loader,\n+        target_override,\n     );\n \n-    let codegen_backend = get_codegen_backend(&sess);\n+    codegen_backend.init(&sess);\n \n     let mut cfg = config::build_configuration(&sess, config::to_crate_config(cfg));\n     add_configuration(&mut cfg, &mut sess, &*codegen_backend);\n@@ -219,13 +224,13 @@ fn load_backend_from_dylib(path: &Path) -> fn() -> Box<dyn CodegenBackend> {\n     }\n }\n \n-pub fn get_codegen_backend(sess: &Session) -> Box<dyn CodegenBackend> {\n+pub fn get_codegen_backend(codegen_name: Option<&str>) -> Box<dyn CodegenBackend> {\n     static INIT: Once = Once::new();\n \n     static mut LOAD: fn() -> Box<dyn CodegenBackend> = || unreachable!();\n \n     INIT.call_once(|| {\n-        let codegen_name = sess.opts.debugging_opts.codegen_backend.as_deref().unwrap_or(\"llvm\");\n+        let codegen_name = codegen_name.unwrap_or(\"llvm\");\n         let backend = match codegen_name {\n             filename if filename.contains('.') => load_backend_from_dylib(filename.as_ref()),\n             codegen_name => get_builtin_codegen_backend(codegen_name),\n@@ -235,9 +240,7 @@ pub fn get_codegen_backend(sess: &Session) -> Box<dyn CodegenBackend> {\n             LOAD = backend;\n         }\n     });\n-    let backend = unsafe { LOAD() };\n-    backend.init(sess);\n-    backend\n+    unsafe { LOAD() }\n }\n \n // This is used for rustdoc, but it uses similar machinery to codegen backend"}, {"sha": "8d004675d7f4dd69aaa4196e4083fb80821e3150", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c946c40d9d47328fc1a08919dec174a77c12fd6b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c946c40d9d47328fc1a08919dec174a77c12fd6b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=c946c40d9d47328fc1a08919dec174a77c12fd6b", "patch": "@@ -818,10 +818,11 @@ pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateCo\n     user_cfg\n }\n \n-pub fn build_target_config(opts: &Options, error_format: ErrorOutputType) -> Config {\n-    let target = Target::search(&opts.target_triple).unwrap_or_else(|e| {\n+pub fn build_target_config(opts: &Options, target_override: Option<Target>) -> Config {\n+    let target_result = target_override.map_or_else(|| Target::search(&opts.target_triple), Ok);\n+    let target = target_result.unwrap_or_else(|e| {\n         early_error(\n-            error_format,\n+            opts.error_format,\n             &format!(\n                 \"Error loading target specification: {}. \\\n             Use `--print target-list` for a list of built-in targets\",\n@@ -835,7 +836,7 @@ pub fn build_target_config(opts: &Options, error_format: ErrorOutputType) -> Con\n         \"32\" => 32,\n         \"64\" => 64,\n         w => early_error(\n-            error_format,\n+            opts.error_format,\n             &format!(\n                 \"target specification was invalid: \\\n              unrecognized target-pointer-width {}\","}, {"sha": "ff67d3cb107d9d7720b9e24a99cfdbfbf03eadbb", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c946c40d9d47328fc1a08919dec174a77c12fd6b/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c946c40d9d47328fc1a08919dec174a77c12fd6b/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=c946c40d9d47328fc1a08919dec174a77c12fd6b", "patch": "@@ -1234,6 +1234,7 @@ pub fn build_session(\n     diagnostics_output: DiagnosticOutput,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n+    target_override: Option<Target>,\n ) -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n     // normal diagnostic warnings, since the warning lint can also be denied and changed\n@@ -1253,7 +1254,7 @@ pub fn build_session(\n         DiagnosticOutput::Raw(write) => Some(write),\n     };\n \n-    let target_cfg = config::build_target_config(&sopts, sopts.error_format);\n+    let target_cfg = config::build_target_config(&sopts, target_override);\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n     let host = Target::search(&host_triple).unwrap_or_else(|e| {\n         early_error(sopts.error_format, &format!(\"Error loading host specification: {}\", e))"}]}