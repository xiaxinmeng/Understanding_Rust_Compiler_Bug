{"sha": "1968130885985dcf10ca19157d2e90c11566ae5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NjgxMzA4ODU5ODVkY2YxMGNhMTkxNTdkMmU5MGMxMTU2NmFlNWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-08T21:12:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-08T21:12:55Z"}, "message": "auto merge of #5763 : thestinger/rust/clone, r=nikomatsakis\n\nPerforming a deep copy isn't ever desired for a persistent data\r\nstructure, and it requires a more complex implementation to do\r\ncorrectly. A deep copy needs to check for cycles to avoid an infinite\r\nloop.", "tree": {"sha": "fdee8f045bd4e6c92e0c529345aa1d7e79715056", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdee8f045bd4e6c92e0c529345aa1d7e79715056"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1968130885985dcf10ca19157d2e90c11566ae5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1968130885985dcf10ca19157d2e90c11566ae5c", "html_url": "https://github.com/rust-lang/rust/commit/1968130885985dcf10ca19157d2e90c11566ae5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1968130885985dcf10ca19157d2e90c11566ae5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a0f62850107edab30e51c1e31c8b0c7e443f972", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0f62850107edab30e51c1e31c8b0c7e443f972", "html_url": "https://github.com/rust-lang/rust/commit/5a0f62850107edab30e51c1e31c8b0c7e443f972"}, {"sha": "68d17bca4b12f514331322f938b56331f987ad68", "url": "https://api.github.com/repos/rust-lang/rust/commits/68d17bca4b12f514331322f938b56331f987ad68", "html_url": "https://github.com/rust-lang/rust/commit/68d17bca4b12f514331322f938b56331f987ad68"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "9da970918b0d5ceaecca90071eb15bd2e6b95e1b", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1968130885985dcf10ca19157d2e90c11566ae5c/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968130885985dcf10ca19157d2e90c11566ae5c/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=1968130885985dcf10ca19157d2e90c11566ae5c", "patch": "@@ -14,7 +14,7 @@ In Rust, some simple types are \"implicitly copyable\" and when you\n assign them or pass them as arguments, the receiver will get a copy,\n leaving the original value in place. These types do not require\n allocation to copy and do not have finalizers (i.e. they do not\n-contain owned pointers or implement `Drop`), so the compiler considers\n+contain owned boxes or implement `Drop`), so the compiler considers\n them cheap and safe to copy and automatically implements the `Copy`\n trait for them. For other types copies must be made explicitly,\n by convention implementing the `Clone` trait and calling the\n@@ -23,32 +23,38 @@ by convention implementing the `Clone` trait and calling the\n */\n \n pub trait Clone {\n+    /// Return a deep copy of the owned object tree. Managed boxes are cloned with a shallow copy.\n     fn clone(&self) -> Self;\n }\n \n impl Clone for () {\n+    /// Return a copy of the value.\n     #[inline(always)]\n     fn clone(&self) -> () { () }\n }\n \n impl<T:Clone> Clone for ~T {\n+    /// Return a deep copy of the owned box.\n     #[inline(always)]\n     fn clone(&self) -> ~T { ~(**self).clone() }\n }\n \n-impl<T:Clone> Clone for @T {\n+impl<T> Clone for @T {\n+    /// Return a shallow copy of the managed box.\n     #[inline(always)]\n-    fn clone(&self) -> @T { @(**self).clone() }\n+    fn clone(&self) -> @T { *self }\n }\n \n-impl<T:Clone> Clone for @mut T {\n+impl<T> Clone for @mut T {\n+    /// Return a shallow copy of the managed box.\n     #[inline(always)]\n-    fn clone(&self) -> @mut T { @mut (**self).clone() }\n+    fn clone(&self) -> @mut T { *self }\n }\n \n macro_rules! clone_impl(\n     ($t:ty) => {\n         impl Clone for $t {\n+            /// Return a copy of the value.\n             #[inline(always)]\n             fn clone(&self) -> $t { *self }\n         }\n@@ -76,21 +82,23 @@ clone_impl!(char)\n \n #[test]\n fn test_owned_clone() {\n-    let a : ~int = ~5i;\n-    let b : ~int = a.clone();\n+    let a: ~int = ~5i;\n+    let b: ~int = a.clone();\n     assert!(a == b);\n }\n \n #[test]\n fn test_managed_clone() {\n-    let a : @int = @5i;\n-    let b : @int = a.clone();\n+    let a: @int = @5i;\n+    let b: @int = a.clone();\n     assert!(a == b);\n }\n \n #[test]\n fn test_managed_mut_clone() {\n-    let a : @int = @5i;\n-    let b : @int = a.clone();\n+    let a: @mut int = @mut 5i;\n+    let b: @mut int = a.clone();\n+    assert!(a == b);\n+    *b = 10;\n     assert!(a == b);\n }"}, {"sha": "afa312ea35e7e172a217282400d90f0c02e9efa2", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968130885985dcf10ca19157d2e90c11566ae5c/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968130885985dcf10ca19157d2e90c11566ae5c/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=1968130885985dcf10ca19157d2e90c11566ae5c", "patch": "@@ -13,7 +13,7 @@ fn borrow(x: &int, f: &fn(x: &int)) {\n }\n \n fn test1(x: @~int) {\n-    do borrow(&**x.clone()) |p| {\n+    do borrow(&*(*x).clone()) |p| {\n         let x_a = ptr::addr_of(&(**x));\n         assert!((x_a as uint) != ptr::to_uint(p));\n         assert!(unsafe{*x_a} == *p);"}]}