{"sha": "7158e8a1b7cad8fc55e390bf0c026f297a690931", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNThlOGExYjdjYWQ4ZmM1NWUzOTBiZjBjMDI2ZjI5N2E2OTA5MzE=", "commit": {"author": {"name": "Jason Thompson", "email": "jason@jthompson.ca", "date": "2014-07-05T12:17:40Z"}, "committer": {"name": "Jason Thompson", "email": "jason@jthompson.ca", "date": "2014-07-07T10:26:52Z"}, "message": "Add example for str replace() and MaybeOwned\n\n  - for 3 implementations of into_maybe_owned()\n  - is_slice()\n  - is_owned()", "tree": {"sha": "7490424a592225b99c8b834a4df1e97bff31ef4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7490424a592225b99c8b834a4df1e97bff31ef4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7158e8a1b7cad8fc55e390bf0c026f297a690931", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7158e8a1b7cad8fc55e390bf0c026f297a690931", "html_url": "https://github.com/rust-lang/rust/commit/7158e8a1b7cad8fc55e390bf0c026f297a690931", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7158e8a1b7cad8fc55e390bf0c026f297a690931/comments", "author": {"login": "jasonthompson", "id": 563927, "node_id": "MDQ6VXNlcjU2MzkyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/563927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonthompson", "html_url": "https://github.com/jasonthompson", "followers_url": "https://api.github.com/users/jasonthompson/followers", "following_url": "https://api.github.com/users/jasonthompson/following{/other_user}", "gists_url": "https://api.github.com/users/jasonthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonthompson/subscriptions", "organizations_url": "https://api.github.com/users/jasonthompson/orgs", "repos_url": "https://api.github.com/users/jasonthompson/repos", "events_url": "https://api.github.com/users/jasonthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonthompson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jasonthompson", "id": 563927, "node_id": "MDQ6VXNlcjU2MzkyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/563927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonthompson", "html_url": "https://github.com/jasonthompson", "followers_url": "https://api.github.com/users/jasonthompson/followers", "following_url": "https://api.github.com/users/jasonthompson/following{/other_user}", "gists_url": "https://api.github.com/users/jasonthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonthompson/subscriptions", "organizations_url": "https://api.github.com/users/jasonthompson/orgs", "repos_url": "https://api.github.com/users/jasonthompson/repos", "events_url": "https://api.github.com/users/jasonthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonthompson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f78d2f59004559fc116fe7ee5e9a4b479fe7a1b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f78d2f59004559fc116fe7ee5e9a4b479fe7a1b0", "html_url": "https://github.com/rust-lang/rust/commit/f78d2f59004559fc116fe7ee5e9a4b479fe7a1b0"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "4e926e43a08a3ed016c83fc0a5b8d5e41f8af750", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7158e8a1b7cad8fc55e390bf0c026f297a690931/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7158e8a1b7cad8fc55e390bf0c026f297a690931/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=7158e8a1b7cad8fc55e390bf0c026f297a690931", "patch": "@@ -351,6 +351,15 @@ impl<'a> Iterator<char> for Decompositions<'a> {\n /// # Return value\n ///\n /// The original string with all occurrences of `from` replaced with `to`\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::str;\n+/// let string = \"orange\";\n+/// let new_string = str::replace(string, \"or\", \"str\");\n+/// assert_eq!(new_string.as_slice(), \"strange\");\n+/// ```\n pub fn replace(s: &str, from: &str, to: &str) -> String {\n     let mut result = String::new();\n     let mut last_end = 0;\n@@ -572,6 +581,14 @@ pub type SendStr = MaybeOwned<'static>;\n \n impl<'a> MaybeOwned<'a> {\n     /// Returns `true` if this `MaybeOwned` wraps an owned string\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let string = String::from_str(\"orange\");\n+    /// let maybe_owned_string = string.into_maybe_owned();\n+    /// assert_eq!(true, maybe_owned_string.is_owned());\n+    /// ```\n     #[inline]\n     pub fn is_owned(&self) -> bool {\n         match *self {\n@@ -581,6 +598,14 @@ impl<'a> MaybeOwned<'a> {\n     }\n \n     /// Returns `true` if this `MaybeOwned` wraps a borrowed string\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let string = \"orange\";\n+    /// let maybe_owned_string = string.as_slice().into_maybe_owned();\n+    /// assert_eq!(true, maybe_owned_string.is_slice());\n+    /// ```\n     #[inline]\n     pub fn is_slice(&self) -> bool {\n         match *self {\n@@ -596,18 +621,40 @@ pub trait IntoMaybeOwned<'a> {\n     fn into_maybe_owned(self) -> MaybeOwned<'a>;\n }\n \n+/// # Example\n+///\n+/// ```rust\n+/// let owned_string = String::from_str(\"orange\");\n+/// let maybe_owned_string = owned_string.into_maybe_owned();\n+/// assert_eq!(true, maybe_owned_string.is_owned());\n+/// ```\n impl<'a> IntoMaybeOwned<'a> for String {\n     #[inline]\n     fn into_maybe_owned(self) -> MaybeOwned<'a> {\n         Owned(self)\n     }\n }\n \n+/// # Example\n+///\n+/// ```rust\n+/// let string = \"orange\";\n+/// let maybe_owned_str = string.as_slice().into_maybe_owned();\n+/// assert_eq!(false, maybe_owned_str.is_owned());\n+/// ```\n impl<'a> IntoMaybeOwned<'a> for &'a str {\n     #[inline]\n     fn into_maybe_owned(self) -> MaybeOwned<'a> { Slice(self) }\n }\n \n+/// # Example\n+///\n+/// ```rust\n+/// let str = \"orange\";\n+/// let maybe_owned_str = str.as_slice().into_maybe_owned();\n+/// let maybe_maybe_owned_str = maybe_owned_str.into_maybe_owned();\n+/// assert_eq!(false, maybe_maybe_owned_str.is_owned());\n+/// ```\n impl<'a> IntoMaybeOwned<'a> for MaybeOwned<'a> {\n     #[inline]\n     fn into_maybe_owned(self) -> MaybeOwned<'a> { self }"}]}