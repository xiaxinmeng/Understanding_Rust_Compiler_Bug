{"sha": "f9b8c49cdb75fb571c7b3ea4af90b0e96929276c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YjhjNDljZGI3NWZiNTcxYzdiM2VhNGFmOTBiMGU5NjkyOTI3NmM=", "commit": {"author": {"name": "John Hodge", "email": "tpg@mutabah.net", "date": "2015-10-24T08:52:07Z"}, "committer": {"name": "John Hodge", "email": "tpg@mutabah.net", "date": "2015-10-25T04:03:07Z"}, "message": "Switch to 'const unsafe fn' ordering (rust-lang/rust#29107)", "tree": {"sha": "8a9e908887bee8d78edb746bb0c68a1b86772960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a9e908887bee8d78edb746bb0c68a1b86772960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c", "html_url": "https://github.com/rust-lang/rust/commit/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/comments", "author": {"login": "thepowersgang", "id": 955596, "node_id": "MDQ6VXNlcjk1NTU5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/955596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thepowersgang", "html_url": "https://github.com/thepowersgang", "followers_url": "https://api.github.com/users/thepowersgang/followers", "following_url": "https://api.github.com/users/thepowersgang/following{/other_user}", "gists_url": "https://api.github.com/users/thepowersgang/gists{/gist_id}", "starred_url": "https://api.github.com/users/thepowersgang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thepowersgang/subscriptions", "organizations_url": "https://api.github.com/users/thepowersgang/orgs", "repos_url": "https://api.github.com/users/thepowersgang/repos", "events_url": "https://api.github.com/users/thepowersgang/events{/privacy}", "received_events_url": "https://api.github.com/users/thepowersgang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thepowersgang", "id": 955596, "node_id": "MDQ6VXNlcjk1NTU5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/955596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thepowersgang", "html_url": "https://github.com/thepowersgang", "followers_url": "https://api.github.com/users/thepowersgang/followers", "following_url": "https://api.github.com/users/thepowersgang/following{/other_user}", "gists_url": "https://api.github.com/users/thepowersgang/gists{/gist_id}", "starred_url": "https://api.github.com/users/thepowersgang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thepowersgang/subscriptions", "organizations_url": "https://api.github.com/users/thepowersgang/orgs", "repos_url": "https://api.github.com/users/thepowersgang/repos", "events_url": "https://api.github.com/users/thepowersgang/events{/privacy}", "received_events_url": "https://api.github.com/users/thepowersgang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbb5f8e12e20f1677b4d21cf6d52e6b09c5fdc12", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb5f8e12e20f1677b4d21cf6d52e6b09c5fdc12", "html_url": "https://github.com/rust-lang/rust/commit/bbb5f8e12e20f1677b4d21cf6d52e6b09c5fdc12"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "c4ca3fa384e968cfe7734df57b8aa52108418ea6", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=f9b8c49cdb75fb571c7b3ea4af90b0e96929276c", "patch": "@@ -55,7 +55,7 @@ macro_rules! nonzero_new {\n         /// Creates an instance of NonZero with the provided value.\n         /// You must indeed ensure that the value is actually \"non-zero\".\n         #[inline(always)]\n-        pub unsafe const fn new(inner: T) -> NonZero<T> {\n+        pub const unsafe fn new(inner: T) -> NonZero<T> {\n             NonZero(inner)\n         }\n     )"}, {"sha": "52a888d797ba922e848af5457829ba8a54c506bc", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=f9b8c49cdb75fb571c7b3ea4af90b0e96929276c", "patch": "@@ -511,7 +511,7 @@ macro_rules! unique_new {\n macro_rules! unique_new {\n     () => (\n         /// Creates a new `Unique`.\n-        pub unsafe const fn new(ptr: *mut T) -> Unique<T> {\n+        pub const unsafe fn new(ptr: *mut T) -> Unique<T> {\n             Unique { pointer: NonZero::new(ptr), _marker: PhantomData }\n         }\n     )"}, {"sha": "c5510129a1ed6ea8e49b5d6bc4eba2185c4679f4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f9b8c49cdb75fb571c7b3ea4af90b0e96929276c", "patch": "@@ -4382,19 +4382,21 @@ impl<'a> Parser<'a> {\n     /// true if we are looking at `const ID`, false for things like `const fn` etc\n     pub fn is_const_item(&mut self) -> bool {\n         self.token.is_keyword(keywords::Const) &&\n-            !self.look_ahead(1, |t| t.is_keyword(keywords::Fn))\n+            !self.look_ahead(1, |t| t.is_keyword(keywords::Fn)) &&\n+            !self.look_ahead(1, |t| t.is_keyword(keywords::Unsafe))\n     }\n \n     /// parses all the \"front matter\" for a `fn` declaration, up to\n     /// and including the `fn` keyword:\n     ///\n     /// - `const fn`\n     /// - `unsafe fn`\n+    /// - `const unsafe fn`\n     /// - `extern fn`\n     /// - etc\n     pub fn parse_fn_front_matter(&mut self) -> PResult<(ast::Constness, ast::Unsafety, abi::Abi)> {\n-        let unsafety = try!(self.parse_unsafety());\n         let is_const_fn = try!(self.eat_keyword(keywords::Const));\n+        let unsafety = try!(self.parse_unsafety());\n         let (constness, unsafety, abi) = if is_const_fn {\n             (Constness::Const, unsafety, abi::Rust)\n         } else {\n@@ -5304,11 +5306,18 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n         if try!(self.eat_keyword(keywords::Const) ){\n-            if self.check_keyword(keywords::Fn) {\n+            if self.check_keyword(keywords::Fn)\n+                || (self.check_keyword(keywords::Unsafe)\n+                    && self.look_ahead(1, |t| t.is_keyword(keywords::Fn))) {\n                 // CONST FUNCTION ITEM\n+                let unsafety = if try!(self.eat_keyword(keywords::Unsafe) ){\n+                    Unsafety::Unsafe\n+                } else {\n+                    Unsafety::Normal\n+                };\n                 try!(self.bump());\n                 let (ident, item_, extra_attrs) =\n-                    try!(self.parse_item_fn(Unsafety::Normal, Constness::Const, abi::Rust));\n+                    try!(self.parse_item_fn(unsafety, Constness::Const, abi::Rust));\n                 let last_span = self.last_span;\n                 let item = self.mk_item(lo,\n                                         last_span.hi,\n@@ -5391,14 +5400,9 @@ impl<'a> Parser<'a> {\n             } else {\n                 abi::Rust\n             };\n-            let constness = if abi == abi::Rust && try!(self.eat_keyword(keywords::Const) ){\n-                Constness::Const\n-            } else {\n-                Constness::NotConst\n-            };\n             try!(self.expect_keyword(keywords::Fn));\n             let (ident, item_, extra_attrs) =\n-                try!(self.parse_item_fn(Unsafety::Unsafe, constness, abi));\n+                try!(self.parse_item_fn(Unsafety::Unsafe, Constness::NotConst, abi));\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,"}, {"sha": "4e6972eace1517aad04db9fefe222069dd8fc30d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f9b8c49cdb75fb571c7b3ea4af90b0e96929276c", "patch": "@@ -3071,13 +3071,14 @@ impl<'a> State<'a> {\n                                 abi: abi::Abi,\n                                 vis: ast::Visibility) -> io::Result<()> {\n         try!(word(&mut self.s, &visibility_qualified(vis, \"\")));\n-        try!(self.print_unsafety(unsafety));\n \n         match constness {\n             ast::Constness::NotConst => {}\n             ast::Constness::Const => try!(self.word_nbsp(\"const\"))\n         }\n \n+        try!(self.print_unsafety(unsafety));\n+\n         if abi != abi::Rust {\n             try!(self.word_nbsp(\"extern\"));\n             try!(self.word_nbsp(&abi.to_string()));"}, {"sha": "24ac41ce88437093797bfcd5ebe40057ff4ed72a", "filename": "src/test/compile-fail/unsafe-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/src%2Ftest%2Fcompile-fail%2Funsafe-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/src%2Ftest%2Fcompile-fail%2Funsafe-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-const-fn.rs?ref=f9b8c49cdb75fb571c7b3ea4af90b0e96929276c", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(const_fn)]\n \n-unsafe const fn dummy(v: u32) -> u32 {\n+const unsafe fn dummy(v: u32) -> u32 {\n     !v\n }\n "}, {"sha": "2511cfd042206d1257725f0770985dcc7d0c6d12", "filename": "src/test/run-pass/const-unsafe-fn.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/src%2Ftest%2Frun-pass%2Fconst-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b8c49cdb75fb571c7b3ea4af90b0e96929276c/src%2Ftest%2Frun-pass%2Fconst-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-unsafe-fn.rs?ref=f9b8c49cdb75fb571c7b3ea4af90b0e96929276c", "patch": "@@ -12,13 +12,13 @@\n \n #![feature(const_fn)]\n \n-unsafe const fn dummy(v: u32) -> u32 {\n+const unsafe fn dummy(v: u32) -> u32 {\n     !v\n }\n \n struct Type;\n impl Type {\n-    unsafe const fn new() -> Type {\n+    const unsafe fn new() -> Type {\n         Type\n     }\n }", "previous_filename": "src/test/run-pass/unsafe-const-fn.rs"}]}