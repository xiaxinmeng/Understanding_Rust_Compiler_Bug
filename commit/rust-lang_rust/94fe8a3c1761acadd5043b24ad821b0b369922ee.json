{"sha": "94fe8a3c1761acadd5043b24ad821b0b369922ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZmU4YTNjMTc2MWFjYWRkNTA0M2IyNGFkODIxYjBiMzY5OTIyZWU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-07T05:29:10Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-09T14:18:05Z"}, "message": "Suggest calling function on type error when finding bare fn", "tree": {"sha": "46bf3f1c71783681b2328ca926161660758c1b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46bf3f1c71783681b2328ca926161660758c1b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94fe8a3c1761acadd5043b24ad821b0b369922ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94fe8a3c1761acadd5043b24ad821b0b369922ee", "html_url": "https://github.com/rust-lang/rust/commit/94fe8a3c1761acadd5043b24ad821b0b369922ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94fe8a3c1761acadd5043b24ad821b0b369922ee/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a61394f8d69c1720fcdf77eaac635600ff87e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a61394f8d69c1720fcdf77eaac635600ff87e4", "html_url": "https://github.com/rust-lang/rust/commit/01a61394f8d69c1720fcdf77eaac635600ff87e4"}], "stats": {"total": 136, "additions": 124, "deletions": 12}, "files": [{"sha": "6600f83393857f55084bb3640a81a3f433dd16bb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/94fe8a3c1761acadd5043b24ad821b0b369922ee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94fe8a3c1761acadd5043b24ad821b0b369922ee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=94fe8a3c1761acadd5043b24ad821b0b369922ee", "patch": "@@ -3819,6 +3819,41 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pointing_at_return_type\n     }\n \n+    fn suggest_fn_call(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        expr: &hir::Expr,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) -> bool {\n+        if let ty::FnDef(..) | ty::FnPtr(_) = &found.sty {\n+            let sig = found.fn_sig(self.tcx);\n+            let sig = self\n+                .replace_bound_vars_with_fresh_vars(expr.span, infer::FnCall, &sig)\n+                .0;\n+            let sig = self.normalize_associated_types_in(expr.span, &sig);\n+            if let Ok(_) = self.try_coerce(expr, sig.output(), expected, AllowTwoPhase::No) {\n+                if let Ok(code) = self.sess().source_map().span_to_snippet(expr.span) {\n+                    err.span_suggestion(expr.span, \"use parentheses to call this function\", format!(\n+                        \"{}({})\",\n+                        code,\n+                        if sig.inputs().len() > 0 {\n+                            \"...\"\n+                        } else {\n+                            \"\"\n+                        }), if sig.inputs().len() > 0 {\n+                            Applicability::MachineApplicable\n+                        } else {\n+                            Applicability::HasPlaceholders\n+                        }\n+                    );\n+                    return true;\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     pub fn suggest_ref_or_into(\n         &self,\n         err: &mut DiagnosticBuilder<'tcx>,\n@@ -3833,6 +3868,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 suggestion,\n                 Applicability::MachineApplicable,\n             );\n+        } else if let (ty::FnDef(def_id, ..), true) = (\n+            &found.sty,\n+            self.suggest_fn_call(err, expr, expected, found),\n+        ) {\n+            if let Some(sp) = self.tcx.hir().span_if_local(*def_id) {\n+                let sp = self.sess().source_map().def_span(sp);\n+                err.span_label(sp, &format!(\"{} defined here\", found));\n+            }\n         } else if !self.check_for_cast(err, expr, found, expected) {\n             let is_struct_pat_shorthand_field = self.is_hir_id_from_struct_pattern_shorthand_field(\n                 expr.hir_id,"}, {"sha": "248e6f0f46b19f90549185f50b8e7bd553a06e0d", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94fe8a3c1761acadd5043b24ad821b0b369922ee/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94fe8a3c1761acadd5043b24ad821b0b369922ee/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=94fe8a3c1761acadd5043b24ad821b0b369922ee", "patch": "@@ -1,11 +1,14 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-35241.rs:3:20\n    |\n+LL | struct Foo(u32);\n+   | ---------------- fn(u32) -> Foo {Foo} defined here\n+LL | \n LL | fn test() -> Foo { Foo }\n    |              ---   ^^^\n    |              |     |\n    |              |     expected struct `Foo`, found fn item\n-   |              |     did you mean `Foo(/* fields */)`?\n+   |              |     help: use parentheses to call this function: `Foo(...)`\n    |              expected `Foo` because of return type\n    |\n    = note: expected type `Foo`"}, {"sha": "07cbffb009406fe4810a4dca49656ffb2beabeec", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/94fe8a3c1761acadd5043b24ad821b0b369922ee/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94fe8a3c1761acadd5043b24ad821b0b369922ee/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=94fe8a3c1761acadd5043b24ad821b0b369922ee", "patch": "@@ -195,8 +195,14 @@ LL |     let _: Z = m::n::Z::Unit {};\n error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:27:20\n    |\n+LL |             Fn(u8),\n+   |             ------ fn(u8) -> m::n::Z {m::n::Z::Fn} defined here\n+...\n LL |         let _: Z = Z::Fn;\n-   |                    ^^^^^ expected enum `m::n::Z`, found fn item\n+   |                    ^^^^^\n+   |                    |\n+   |                    expected enum `m::n::Z`, found fn item\n+   |                    help: use parentheses to call this function: `Z::Fn(...)`\n    |\n    = note: expected type `m::n::Z`\n               found type `fn(u8) -> m::n::Z {m::n::Z::Fn}`\n@@ -219,8 +225,14 @@ LL |         let _ = Z::Unit;\n error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:43:16\n    |\n+LL |         Fn(u8),\n+   |         ------ fn(u8) -> m::E {m::E::Fn} defined here\n+...\n LL |     let _: E = m::E::Fn;\n-   |                ^^^^^^^^ expected enum `m::E`, found fn item\n+   |                ^^^^^^^^\n+   |                |\n+   |                expected enum `m::E`, found fn item\n+   |                help: use parentheses to call this function: `m::E::Fn(...)`\n    |\n    = note: expected type `m::E`\n               found type `fn(u8) -> m::E {m::E::Fn}`\n@@ -243,8 +255,14 @@ LL |     let _: E = m::E::Unit;\n error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:51:16\n    |\n+LL |         Fn(u8),\n+   |         ------ fn(u8) -> m::E {m::E::Fn} defined here\n+...\n LL |     let _: E = E::Fn;\n-   |                ^^^^^ expected enum `m::E`, found fn item\n+   |                ^^^^^\n+   |                |\n+   |                expected enum `m::E`, found fn item\n+   |                help: use parentheses to call this function: `E::Fn(...)`\n    |\n    = note: expected type `m::E`\n               found type `fn(u8) -> m::E {m::E::Fn}`"}, {"sha": "b3b879ef9acbef79523669ae7a2b9cef2422480a", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/94fe8a3c1761acadd5043b24ad821b0b369922ee/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94fe8a3c1761acadd5043b24ad821b0b369922ee/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=94fe8a3c1761acadd5043b24ad821b0b369922ee", "patch": "@@ -1,35 +1,59 @@\n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:16:17\n    |\n+LL |     fn bar<'a, T>() where T: 'a {}\n+   |     --------------------------- fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>} defined here\n+...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n    |\n    = note: expected type `()`\n               found type `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n    |\n+LL |     fn bar<'a, T>() where T: 'a {}\n+   |     --------------------------- fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>} defined here\n+...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n    |\n    = note: expected type `()`\n               found type `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n    |\n+LL |     fn baz() {}\n+   |     -------- fn() {<i8 as Foo<'static, 'static, u8>>::baz} defined here\n+...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n    |\n    = note: expected type `()`\n               found type `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n    |\n+LL | fn foo<'z>() where &'z (): Sized {\n+   | -------------------------------- fn() {foo::<'static>} defined here\n+...\n LL |     let x: () = foo::<'static>;\n-   |                 ^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `foo::<'static>()`\n    |\n    = note: expected type `()`\n               found type `fn() {foo::<'static>}`"}, {"sha": "363018db232d88858766fc437c0e4d427b732071", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/94fe8a3c1761acadd5043b24ad821b0b369922ee/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94fe8a3c1761acadd5043b24ad821b0b369922ee/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=94fe8a3c1761acadd5043b24ad821b0b369922ee", "patch": "@@ -1,35 +1,59 @@\n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:16:17\n    |\n+LL |     fn bar<'a, T>() where T: 'a {}\n+   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>} defined here\n+...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n    |\n    = note: expected type `()`\n               found type `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n    |\n+LL |     fn bar<'a, T>() where T: 'a {}\n+   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>} defined here\n+...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n    |\n    = note: expected type `()`\n               found type `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n    |\n+LL |     fn baz() {}\n+   |     -------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz} defined here\n+...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n    |\n    = note: expected type `()`\n               found type `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n    |\n+LL | fn foo<'z>() where &'z (): Sized {\n+   | -------------------------------- fn() {foo::<ReStatic>} defined here\n+...\n LL |     let x: () = foo::<'static>;\n-   |                 ^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `foo::<'static>()`\n    |\n    = note: expected type `()`\n               found type `fn() {foo::<ReStatic>}`"}]}