{"sha": "15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "node_id": "C_kwDOAAsO6NoAKDE1YjllMjA2NDA5ZmU0YThkMjMwN2ZlNjdlMjIzNzJlY2Q0ZDIyY2M", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-13T18:57:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-13T18:57:11Z"}, "message": "Rollup merge of #105500 - oli-obk:unhide_unknown_spans, r=estebank\n\nMake some diagnostics not depend on the source of what they reference being available\n\nr? `@estebank`\n\nfollow up to https://github.com/rust-lang/rust/pull/104449", "tree": {"sha": "e908ebc87b63802c59677d4011f1e37a14bbb5ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e908ebc87b63802c59677d4011f1e37a14bbb5ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmMsHCRBK7hj4Ov3rIwAAqvYIAD/nizTASdB+shgUKMppUVHi\ntD/sIfz9KslMZhS+yw/yflzhG+iC/Nq42OOgMVVviT13IVnXkA6cdHMShfO6s3NF\nIVEe15J4vrCTYObwvk1rpgIZKnPfhQ+UlmcHXHbWvHsCUDGk6p2E5WflnsDXFeQ2\nyp4wnx4GifvAQ6tAla5/pwll/1BYfgOhXZlwIVFrXvoGRvc4K5+rEB3N9PMLMEJX\nY252gqeY3z0EzrXA9OOHwWeu2C8zN2CGBO6q0oX/ymvrCoC0in9OtQkZeSDGOSSV\ntZgUpDP0h/CpHswvamlf41P46UDx8XX610dJX8jkbFYmvZMf3YQFB8lqJdrAOK4=\n=zuNl\n-----END PGP SIGNATURE-----\n", "payload": "tree e908ebc87b63802c59677d4011f1e37a14bbb5ab\nparent dcdbbd0471af4445f3eed20dccd4f02a4ff5859b\nparent 82ce70af62a2fb709ee4c19a46e8092054459a50\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670957831 +0100\ncommitter GitHub <noreply@github.com> 1670957831 +0100\n\nRollup merge of #105500 - oli-obk:unhide_unknown_spans, r=estebank\n\nMake some diagnostics not depend on the source of what they reference being available\n\nr? `@estebank`\n\nfollow up to https://github.com/rust-lang/rust/pull/104449\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "html_url": "https://github.com/rust-lang/rust/commit/15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "html_url": "https://github.com/rust-lang/rust/commit/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b"}, {"sha": "82ce70af62a2fb709ee4c19a46e8092054459a50", "url": "https://api.github.com/repos/rust-lang/rust/commits/82ce70af62a2fb709ee4c19a46e8092054459a50", "html_url": "https://github.com/rust-lang/rust/commit/82ce70af62a2fb709ee4c19a46e8092054459a50"}], "stats": {"total": 2047, "additions": 381, "deletions": 1666}, "files": [{"sha": "cbd590052008c14a46f3ab0b099ea517ef6f7ce9", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1059,17 +1059,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     );\n                     if self.fn_self_span_reported.insert(fn_span) {\n                         err.span_note(\n-                            // Check whether the source is accessible\n-                            if self.infcx.tcx.sess.source_map().is_span_accessible(self_arg.span) {\n-                                self_arg.span\n-                            } else {\n-                                fn_call_span\n-                            },\n+                            self_arg.span,\n                             \"calling this operator moves the left-hand side\",\n                         );\n                     }\n                 }\n-                CallKind::Normal { self_arg, desugaring, is_option_or_result } => {\n+                CallKind::Normal { self_arg, desugaring, method_did } => {\n                     let self_arg = self_arg.unwrap();\n                     if let Some((CallDesugaringKind::ForLoopIntoIter, _)) = desugaring {\n                         let ty = moved_place.ty(self.body, self.infcx.tcx).ty;\n@@ -1139,14 +1134,27 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             ),\n                         );\n                     }\n+                    let tcx = self.infcx.tcx;\n                     // Avoid pointing to the same function in multiple different\n                     // error messages.\n                     if span != DUMMY_SP && self.fn_self_span_reported.insert(self_arg.span) {\n+                        let func = tcx.def_path_str(method_did);\n                         err.span_note(\n                             self_arg.span,\n-                            &format!(\"this function takes ownership of the receiver `self`, which moves {}\", place_name)\n+                            &format!(\"`{func}` takes ownership of the receiver `self`, which moves {place_name}\")\n                         );\n                     }\n+                    let parent_did = tcx.parent(method_did);\n+                    let parent_self_ty = (tcx.def_kind(parent_did)\n+                        == rustc_hir::def::DefKind::Impl)\n+                        .then_some(parent_did)\n+                        .and_then(|did| match tcx.type_of(did).kind() {\n+                            ty::Adt(def, ..) => Some(def.did()),\n+                            _ => None,\n+                        });\n+                    let is_option_or_result = parent_self_ty.map_or(false, |def_id| {\n+                        matches!(tcx.get_diagnostic_name(def_id), Some(sym::Option | sym::Result))\n+                    });\n                     if is_option_or_result && maybe_reinitialized_locations_is_empty {\n                         err.span_label(\n                             var_span,"}, {"sha": "38d9b044981cd723687c8962d06345fc226aa39a", "filename": "compiler/rustc_const_eval/src/util/call_kind.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -5,7 +5,7 @@\n use rustc_hir::def_id::DefId;\n use rustc_hir::{lang_items, LangItem};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AssocItemContainer, DefIdTree, Instance, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{AssocItemContainer, Instance, ParamEnv, Ty, TyCtxt};\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, DesugaringKind, Span};\n \n@@ -39,9 +39,7 @@ pub enum CallKind<'tcx> {\n     Normal {\n         self_arg: Option<Ident>,\n         desugaring: Option<(CallDesugaringKind, Ty<'tcx>)>,\n-        /// Whether the self type of the method call has an `.as_ref()` method.\n-        /// Used for better diagnostics.\n-        is_option_or_result: bool,\n+        method_did: DefId,\n     },\n     /// A call to `Fn(..)::call(..)`, desugared from `my_closure(a, b, c)`\n     FnCall { fn_trait_id: DefId, self_ty: Ty<'tcx> },\n@@ -133,16 +131,6 @@ pub fn call_kind<'tcx>(\n         } else {\n             None\n         };\n-        let parent_did = tcx.parent(method_did);\n-        let parent_self_ty = (tcx.def_kind(parent_did) == rustc_hir::def::DefKind::Impl)\n-            .then_some(parent_did)\n-            .and_then(|did| match tcx.type_of(did).kind() {\n-                ty::Adt(def, ..) => Some(def.did()),\n-                _ => None,\n-            });\n-        let is_option_or_result = parent_self_ty.map_or(false, |def_id| {\n-            matches!(tcx.get_diagnostic_name(def_id), Some(sym::Option | sym::Result))\n-        });\n-        CallKind::Normal { self_arg, desugaring, is_option_or_result }\n+        CallKind::Normal { self_arg, desugaring, method_did }\n     })\n }"}, {"sha": "c62e358e804cade724910bb8f95020b3853dfc84", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 44, "deletions": 35, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1408,49 +1408,58 @@ impl EmitterWriter {\n             if !sm.ensure_source_file_source_present(annotated_file.file.clone()) {\n                 if !self.short_message {\n                     // We'll just print an unannotated message.\n-                    for (annotation_id, line) in annotated_file.lines.into_iter().enumerate() {\n+                    for (annotation_id, line) in annotated_file.lines.iter().enumerate() {\n                         let mut annotations = line.annotations.clone();\n                         annotations.sort_by_key(|a| Reverse(a.start_col));\n                         let mut line_idx = buffer.num_lines();\n-                        buffer.append(\n-                            line_idx,\n-                            &format!(\n-                                \"{}:{}:{}\",\n-                                sm.filename_for_diagnostics(&annotated_file.file.name),\n-                                sm.doctest_offset_line(&annotated_file.file.name, line.line_index),\n-                                annotations[0].start_col + 1,\n-                            ),\n-                            Style::LineAndColumn,\n-                        );\n-                        if annotation_id == 0 {\n-                            buffer.prepend(line_idx, \"--> \", Style::LineNumber);\n+\n+                        let labels: Vec<_> = annotations\n+                            .iter()\n+                            .filter_map(|a| Some((a.label.as_ref()?, a.is_primary)))\n+                            .filter(|(l, _)| !l.is_empty())\n+                            .collect();\n+\n+                        if annotation_id == 0 || !labels.is_empty() {\n+                            buffer.append(\n+                                line_idx,\n+                                &format!(\n+                                    \"{}:{}:{}\",\n+                                    sm.filename_for_diagnostics(&annotated_file.file.name),\n+                                    sm.doctest_offset_line(\n+                                        &annotated_file.file.name,\n+                                        line.line_index\n+                                    ),\n+                                    annotations[0].start_col + 1,\n+                                ),\n+                                Style::LineAndColumn,\n+                            );\n+                            if annotation_id == 0 {\n+                                buffer.prepend(line_idx, \"--> \", Style::LineNumber);\n+                            } else {\n+                                buffer.prepend(line_idx, \"::: \", Style::LineNumber);\n+                            }\n                             for _ in 0..max_line_num_len {\n                                 buffer.prepend(line_idx, \" \", Style::NoStyle);\n                             }\n                             line_idx += 1;\n-                        };\n-                        for (i, annotation) in annotations.into_iter().enumerate() {\n-                            if let Some(label) = &annotation.label {\n-                                let style = if annotation.is_primary {\n-                                    Style::LabelPrimary\n-                                } else {\n-                                    Style::LabelSecondary\n-                                };\n-                                if annotation_id == 0 {\n-                                    buffer.prepend(line_idx, \" |\", Style::LineNumber);\n-                                    for _ in 0..max_line_num_len {\n-                                        buffer.prepend(line_idx, \" \", Style::NoStyle);\n-                                    }\n-                                    line_idx += 1;\n-                                    buffer.append(line_idx + i, \" = note: \", style);\n-                                    for _ in 0..max_line_num_len {\n-                                        buffer.prepend(line_idx, \" \", Style::NoStyle);\n-                                    }\n-                                } else {\n-                                    buffer.append(line_idx + i, \": \", style);\n-                                }\n-                                buffer.append(line_idx + i, label, style);\n+                        }\n+                        for (label, is_primary) in labels.into_iter() {\n+                            let style = if is_primary {\n+                                Style::LabelPrimary\n+                            } else {\n+                                Style::LabelSecondary\n+                            };\n+                            buffer.prepend(line_idx, \" |\", Style::LineNumber);\n+                            for _ in 0..max_line_num_len {\n+                                buffer.prepend(line_idx, \" \", Style::NoStyle);\n+                            }\n+                            line_idx += 1;\n+                            buffer.append(line_idx, \" = note: \", style);\n+                            for _ in 0..max_line_num_len {\n+                                buffer.prepend(line_idx, \" \", Style::NoStyle);\n                             }\n+                            buffer.append(line_idx, label, style);\n+                            line_idx += 1;\n                         }\n                     }\n                 }"}, {"sha": "2d3b4663f06ce82f17f272d63bf4a0b86efe282e", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1853,7 +1853,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )],\n     ) {\n         let mut derives = Vec::<(String, Span, Symbol)>::new();\n-        let mut traits = Vec::<Span>::new();\n+        let mut traits = Vec::new();\n         for (pred, _, _) in unsatisfied_predicates {\n             let ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) = pred.kind().skip_binder() else { continue };\n             let adt = match trait_pred.self_ty().ty_adt_def() {\n@@ -1892,10 +1892,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     derives.push((self_name, self_span, diagnostic_name));\n                 } else {\n-                    traits.push(self.tcx.def_span(trait_pred.def_id()));\n+                    traits.push(trait_pred.def_id());\n                 }\n             } else {\n-                traits.push(self.tcx.def_span(trait_pred.def_id()));\n+                traits.push(trait_pred.def_id());\n             }\n         }\n         traits.sort();\n@@ -1918,10 +1918,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let len = traits.len();\n         if len > 0 {\n-            let span: MultiSpan = traits.into();\n+            let span =\n+                MultiSpan::from_spans(traits.iter().map(|&did| self.tcx.def_span(did)).collect());\n+            let mut names = format!(\"`{}`\", self.tcx.def_path_str(traits[0]));\n+            for (i, &did) in traits.iter().enumerate().skip(1) {\n+                if len > 2 {\n+                    names.push_str(\", \");\n+                }\n+                if i == len - 1 {\n+                    names.push_str(\" and \");\n+                }\n+                names.push('`');\n+                names.push_str(&self.tcx.def_path_str(did));\n+                names.push('`');\n+            }\n             err.span_note(\n                 span,\n-                &format!(\"the following trait{} must be implemented\", pluralize!(len),),\n+                &format!(\"the trait{} {} must be implemented\", pluralize!(len), names),\n             );\n         }\n "}, {"sha": "4370d4bd758d21f3112c664cd7a96f1456585243", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1527,13 +1527,15 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 if let Some(virtual_dir) = &sess.opts.unstable_opts.simulate_remapped_rust_src_base\n                 {\n                     if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {\n-                        if let rustc_span::FileName::Real(ref mut old_name) = name {\n-                            if let rustc_span::RealFileName::LocalPath(local) = old_name {\n-                                if let Ok(rest) = local.strip_prefix(real_dir) {\n-                                    *old_name = rustc_span::RealFileName::Remapped {\n-                                        local_path: None,\n-                                        virtual_name: virtual_dir.join(rest),\n-                                    };\n+                        for subdir in [\"library\", \"compiler\"] {\n+                            if let rustc_span::FileName::Real(ref mut old_name) = name {\n+                                if let rustc_span::RealFileName::LocalPath(local) = old_name {\n+                                    if let Ok(rest) = local.strip_prefix(real_dir.join(subdir)) {\n+                                        *old_name = rustc_span::RealFileName::Remapped {\n+                                            local_path: None,\n+                                            virtual_name: virtual_dir.join(subdir).join(rest),\n+                                        };\n+                                    }\n                                 }\n                             }\n                         }"}, {"sha": "2c89f4add2e708c7b637f0965e9cbc2aaadd8982", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1308,15 +1308,15 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n             let is_local_static =\n                 if let DefKind::Static(_) = kind { def_id.is_local() } else { false };\n             if !self.item_is_accessible(def_id) && !is_local_static {\n-                let sess = self.tcx.sess;\n-                let sm = sess.source_map();\n-                let name = match qpath {\n-                    hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {\n-                        sm.span_to_snippet(qpath.span()).ok()\n+                let name = match *qpath {\n+                    hir::QPath::LangItem(it, ..) => {\n+                        self.tcx.lang_items().get(it).map(|did| self.tcx.def_path_str(did))\n                     }\n+                    hir::QPath::Resolved(_, path) => Some(self.tcx.def_path_str(path.res.def_id())),\n                     hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),\n                 };\n                 let kind = kind.descr(def_id);\n+                let sess = self.tcx.sess;\n                 let _ = match name {\n                     Some(name) => {\n                         sess.emit_err(ItemIsPrivate { span, kind, descr: (&name).into() })"}, {"sha": "12f9851196c0f352c8fa24a5926a72d9222c6ad6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -2179,15 +2179,15 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             format!(\"does not implement `{}`\", trait_pred.print_modifiers_and_trait_path())\n         };\n \n-        let mut explain_yield = |interior_span: Span,\n-                                 yield_span: Span,\n-                                 scope_span: Option<Span>| {\n-            let mut span = MultiSpan::from_span(yield_span);\n-            if let Ok(snippet) = source_map.span_to_snippet(interior_span) {\n-                // #70935: If snippet contains newlines, display \"the value\" instead\n-                // so that we do not emit complex diagnostics.\n-                let snippet = &format!(\"`{}`\", snippet);\n-                let snippet = if snippet.contains('\\n') { \"the value\" } else { snippet };\n+        let mut explain_yield =\n+            |interior_span: Span, yield_span: Span, scope_span: Option<Span>| {\n+                let mut span = MultiSpan::from_span(yield_span);\n+                let snippet = match source_map.span_to_snippet(interior_span) {\n+                    // #70935: If snippet contains newlines, display \"the value\" instead\n+                    // so that we do not emit complex diagnostics.\n+                    Ok(snippet) if !snippet.contains('\\n') => format!(\"`{}`\", snippet),\n+                    _ => \"the value\".to_string(),\n+                };\n                 // note: future is not `Send` as this value is used across an await\n                 //   --> $DIR/issue-70935-complex-spans.rs:13:9\n                 //    |\n@@ -2212,17 +2212,11 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     interior_span,\n                     format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n                 );\n-                // If available, use the scope span to annotate the drop location.\n-                let mut scope_note = None;\n                 if let Some(scope_span) = scope_span {\n                     let scope_span = source_map.end_point(scope_span);\n \n                     let msg = format!(\"{} is later dropped here\", snippet);\n-                    if source_map.is_multiline(yield_span.between(scope_span)) {\n-                        span.push_span_label(scope_span, msg);\n-                    } else {\n-                        scope_note = Some((scope_span, msg));\n-                    }\n+                    span.push_span_label(scope_span, msg);\n                 }\n                 err.span_note(\n                     span,\n@@ -2231,11 +2225,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         future_or_generator, trait_explanation, an_await_or_yield\n                     ),\n                 );\n-                if let Some((span, msg)) = scope_note {\n-                    err.span_note(span, &msg);\n-                }\n-            }\n-        };\n+            };\n         match interior_or_upvar_span {\n             GeneratorInteriorOrUpvar::Interior(interior_span, interior_extra_info) => {\n                 if let Some((scope_span, yield_span, expr, from_awaited_ty)) = interior_extra_info {"}, {"sha": "1b7ef4e4f19cfc193c26ee6aa643adbb99c720c5", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -660,10 +660,7 @@ LL | #[derive(Diagnostic)]\n    = help: normalized in stderr\n note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n   --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:LL:CC\n-   |\n-LL |         arg: impl IntoDiagnosticArg,\n-   |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n-   = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Diagnostic` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 83 previous errors\n "}, {"sha": "2673ee9f937fb1e87bee5d6ebf36c177d097622b", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-2.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -17,9 +17,6 @@ LL | |  }\n    = note: struct `core::alloc::Layout` and struct `Layout` have similar names, but are actually distinct types\n note: struct `core::alloc::Layout` is defined in crate `core`\n   --> $SRC_DIR/core/src/alloc/layout.rs:LL:COL\n-   |\n-LL | pub struct Layout {\n-   | ^^^^^^^^^^^^^^^^^\n note: struct `Layout` is defined in the current crate\n   --> $DIR/alloc-error-handler-bad-signature-2.rs:7:1\n    |"}, {"sha": "dc93c47dace2331381d8445925cde9e9befe1eea", "filename": "src/test/ui/associated-type-bounds/issue-99828.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-99828.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-99828.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-99828.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -15,9 +15,6 @@ LL | fn get_iter(vec: &[i32]) -> impl Iterator<Item = {}> + '_ {\n    |\n note: associated type defined here\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     type Item;\n-   |     ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fc830b8d6768657f9ef06dc1a29b89088ac2d090", "filename": "src/test/ui/associated-types/defaults-wf.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,9 +7,6 @@ LL |     type Ty = Vec<[u8]>;\n    = help: the trait `Sized` is not implemented for `[u8]`\n note: required by a bound in `Vec`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   |                ^ required by this bound in `Vec`\n \n error: aborting due to previous error\n "}, {"sha": "8e7cf86c4066f112e8125e443e759ebb606f0957", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self>\n    |\n note: required by a bound in `Add`\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | pub trait Add<Rhs = Self> {\n-   |               ^^^^^^^^^^ required by this bound in `Add`\n help: consider further restricting `Self`\n    |\n LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> + Sized {}"}, {"sha": "f0f5245a3b42ba5d395058ed9bad1037146056b0", "filename": "src/test/ui/async-await/async-await-let-else.drop-tracking.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -68,14 +68,10 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/async-await-let-else.rs:33:28\n    |\n LL |         (Rc::new(()), bar().await);\n-   |          -----------       ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n-   |          |\n+   |          -----------       ^^^^^^ - `Rc::new(())` is later dropped here\n+   |          |                 |\n+   |          |                 await occurs here, with `Rc::new(())` maybe used later\n    |          has type `Rc<()>` which is not `Send`\n-note: `Rc::new(())` is later dropped here\n-  --> $DIR/async-await-let-else.rs:33:35\n-   |\n-LL |         (Rc::new(()), bar().await);\n-   |                                   ^\n note: required by a bound in `is_send`\n   --> $DIR/async-await-let-else.rs:19:15\n    |"}, {"sha": "d3c5e80a30df443ee5cf66c942c445ba95cec701", "filename": "src/test/ui/async-await/async-await-let-else.no-drop-tracking.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.no-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.no-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.no-drop-tracking.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -53,14 +53,10 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/async-await-let-else.rs:33:28\n    |\n LL |         (Rc::new(()), bar().await);\n-   |          -----------       ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n-   |          |\n+   |          -----------       ^^^^^^ - `Rc::new(())` is later dropped here\n+   |          |                 |\n+   |          |                 await occurs here, with `Rc::new(())` maybe used later\n    |          has type `Rc<()>` which is not `Send`\n-note: `Rc::new(())` is later dropped here\n-  --> $DIR/async-await-let-else.rs:33:35\n-   |\n-LL |         (Rc::new(()), bar().await);\n-   |                                   ^\n note: required by a bound in `is_send`\n   --> $DIR/async-await-let-else.rs:19:15\n    |"}, {"sha": "963c6ba57adf89448eac3463e72257edc5a0cbd1", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -12,9 +12,6 @@ LL |     fun(async {}, async {});\n               found `async` block `[async block@$DIR/generator-desc.rs:10:19: 10:27]`\n note: function defined here\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n-   |              ^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:12:16"}, {"sha": "8036d82daa4a33f51f3dff008efa3c58b55c50bb", "filename": "src/test/ui/async-await/issue-70935-complex-spans.no_drop_tracking.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -12,14 +12,10 @@ LL |           baz(|| async{\n    |  _____________-\n LL | |             foo(tx.clone());\n LL | |         }).await;\n-   | |         - ^^^^^^ await occurs here, with the value maybe used later\n-   | |_________|\n+   | |         - ^^^^^^- the value is later dropped here\n+   | |         | |\n+   | |_________| await occurs here, with the value maybe used later\n    |           has type `[closure@$DIR/issue-70935-complex-spans.rs:17:13: 17:15]` which is not `Send`\n-note: the value is later dropped here\n-  --> $DIR/issue-70935-complex-spans.rs:19:17\n-   |\n-LL |         }).await;\n-   |                 ^\n \n error: aborting due to previous error\n "}, {"sha": "4a1705715caccbae37ea337820e2a12a5c57d4cf", "filename": "src/test/ui/async-await/issue-72442.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,9 +8,6 @@ LL |             let mut f = File::open(path.to_str())?;\n    |\n note: required by a bound in `File::open`\n   --> $SRC_DIR/std/src/fs.rs:LL:COL\n-   |\n-LL |     pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {\n-   |                    ^^^^^^^^^^^ required by this bound in `File::open`\n \n error: aborting due to previous error\n "}, {"sha": "40c0e72b20391047a5ff92bb21ff2aafa86e4883", "filename": "src/test/ui/async-await/issues/issue-65159.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,11 +6,6 @@ LL | async fn copy() -> Result<()>\n    |                    |\n    |                    expected 2 generic arguments\n    |\n-note: enum defined here, with 2 generic parameters: `T`, `E`\n-  --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   |          ^^^^^^ -  -\n help: add missing generic argument\n    |\n LL | async fn copy() -> Result<(), E>"}, {"sha": "1033fa6cc8b344c474a9c79b6d74fdaa9eb903e9", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -13,14 +13,10 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:18:35\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n-   |                 ----------------  ^^^^^^ await occurs here, with `std::ptr::null()` maybe used later\n-   |                 |\n+   |                 ----------------  ^^^^^^- `std::ptr::null()` is later dropped here\n+   |                 |                 |\n+   |                 |                 await occurs here, with `std::ptr::null()` maybe used later\n    |                 has type `*const u8` which is not `Send`\n-note: `std::ptr::null()` is later dropped here\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:18:41\n-   |\n-LL |         bar(Foo(std::ptr::null())).await;\n-   |                                         ^\n help: consider moving this into a `let` binding to create a shorter lived borrow\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:18:13\n    |"}, {"sha": "2ce68a782918cf064c449afedab10f6815a2f3e2", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,14 +9,10 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/auxiliary/issue_67893.rs:9:26\n    |\n LL |     f(*x.lock().unwrap()).await;\n-   |        ----------------- ^^^^^^ await occurs here, with `x.lock().unwrap()` maybe used later\n-   |        |\n+   |        ----------------- ^^^^^^- `x.lock().unwrap()` is later dropped here\n+   |        |                 |\n+   |        |                 await occurs here, with `x.lock().unwrap()` maybe used later\n    |        has type `MutexGuard<'_, ()>` which is not `Send`\n-note: `x.lock().unwrap()` is later dropped here\n-  --> $DIR/auxiliary/issue_67893.rs:9:32\n-   |\n-LL |     f(*x.lock().unwrap()).await;\n-   |                                ^\n note: required by a bound in `g`\n   --> $DIR/issue-67893.rs:6:14\n    |"}, {"sha": "0a6f705e255ae4c89646860970e94e4cd53cbe93", "filename": "src/test/ui/async-await/pin-needed-to-poll-2.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -14,9 +14,6 @@ LL | struct Sleep(std::marker::PhantomPinned);\n    |        ^^^^^\n note: required by a bound in `Pin::<P>::new`\n   --> $SRC_DIR/core/src/pin.rs:LL:COL\n-   |\n-LL | impl<P: Deref<Target: Unpin>> Pin<P> {\n-   |                       ^^^^^ required by this bound in `Pin::<P>::new`\n \n error: aborting due to previous error\n "}, {"sha": "b1f4a73aafeabf317352e1ccf16cb163f9726e8c", "filename": "src/test/ui/async-await/pin-needed-to-poll.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,11 +6,9 @@ LL | struct Sleep;\n ...\n LL |         self.sleep.poll(cx)\n    |                    ^^^^ method not found in `Sleep`\n+  --> $SRC_DIR/core/src/future/future.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/future/future.rs:LL:COL\n-   |\n-LL |     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n-   |        ---- the method is available for `Pin<&mut Sleep>` here\n+   = note: the method is available for `Pin<&mut Sleep>` here\n    |\n help: consider wrapping the receiver expression with the appropriate type\n    |"}, {"sha": "6fbbb55437eb2f8b91a0d3dd17346411fbdcf7c4", "filename": "src/test/ui/binop/binop-consume-args.stderr", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,9 +10,6 @@ LL |     drop(lhs);\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL |     fn add(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn add<A: Add<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -46,9 +43,6 @@ LL |     drop(lhs);\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL |     fn sub(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn sub<A: Sub<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -82,9 +76,6 @@ LL |     drop(lhs);\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL |     fn mul(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn mul<A: Mul<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -118,9 +109,6 @@ LL |     drop(lhs);\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL |     fn div(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn div<A: Div<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -154,9 +142,6 @@ LL |     drop(lhs);\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL |     fn rem(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn rem<A: Rem<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -190,9 +175,6 @@ LL |     drop(lhs);\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL |     fn bitand(self, rhs: Rhs) -> Self::Output;\n-   |               ^^^^\n help: consider further restricting this bound\n    |\n LL | fn bitand<A: BitAnd<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -226,9 +208,6 @@ LL |     drop(lhs);\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL |     fn bitor(self, rhs: Rhs) -> Self::Output;\n-   |              ^^^^\n help: consider further restricting this bound\n    |\n LL | fn bitor<A: BitOr<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -262,9 +241,6 @@ LL |     drop(lhs);\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL |     fn bitxor(self, rhs: Rhs) -> Self::Output;\n-   |               ^^^^\n help: consider further restricting this bound\n    |\n LL | fn bitxor<A: BitXor<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -298,9 +274,6 @@ LL |     drop(lhs);\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL |     fn shl(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn shl<A: Shl<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -334,9 +307,6 @@ LL |     drop(lhs);\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL |     fn shr(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn shr<A: Shr<B, Output=()> + Copy, B>(lhs: A, rhs: B) {"}, {"sha": "dae267da05d1758bd31791fff00a437cc3066a8a", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -13,9 +13,6 @@ LL | |     x;\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL |     fn add(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn double_move<T: Add<Output=()> + Copy>(x: T) {\n@@ -78,9 +75,6 @@ LL | |     *n;\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL |     fn add(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n \n error[E0507]: cannot move out of `*n` which is behind a shared reference\n   --> $DIR/binop-move-semantics.rs:32:5"}, {"sha": "6e236ca5296a17eee6b9489dbcb05e4b3a4b32b6", "filename": "src/test/ui/binop/issue-28837.stderr", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -11,11 +11,8 @@ note: an implementation of `Add<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Add<_>`\n-note: the following trait must be implemented\n+note: the trait `Add` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | pub trait Add<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: cannot subtract `A` from `A`\n   --> $DIR/issue-28837.rs:8:7\n@@ -30,11 +27,8 @@ note: an implementation of `Sub<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Sub<_>`\n-note: the following trait must be implemented\n+note: the trait `Sub` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | pub trait Sub<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: cannot multiply `A` by `A`\n   --> $DIR/issue-28837.rs:10:7\n@@ -49,11 +43,8 @@ note: an implementation of `Mul<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Mul<_>`\n-note: the following trait must be implemented\n+note: the trait `Mul` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | pub trait Mul<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: cannot divide `A` by `A`\n   --> $DIR/issue-28837.rs:12:7\n@@ -68,11 +59,8 @@ note: an implementation of `Div<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Div<_>`\n-note: the following trait must be implemented\n+note: the trait `Div` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | pub trait Div<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: cannot mod `A` by `A`\n   --> $DIR/issue-28837.rs:14:7\n@@ -87,11 +75,8 @@ note: an implementation of `Rem<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Rem<_>`\n-note: the following trait must be implemented\n+note: the trait `Rem` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | pub trait Rem<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: no implementation for `A & A`\n   --> $DIR/issue-28837.rs:16:7\n@@ -106,11 +91,8 @@ note: an implementation of `BitAnd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `BitAnd<_>`\n-note: the following trait must be implemented\n+note: the trait `BitAnd` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL | pub trait BitAnd<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: no implementation for `A | A`\n   --> $DIR/issue-28837.rs:18:7\n@@ -125,11 +107,8 @@ note: an implementation of `BitOr<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `BitOr<_>`\n-note: the following trait must be implemented\n+note: the trait `BitOr` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL | pub trait BitOr<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: no implementation for `A << A`\n   --> $DIR/issue-28837.rs:20:7\n@@ -144,11 +123,8 @@ note: an implementation of `Shl<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Shl<_>`\n-note: the following trait must be implemented\n+note: the trait `Shl` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL | pub trait Shl<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: no implementation for `A >> A`\n   --> $DIR/issue-28837.rs:22:7\n@@ -163,11 +139,8 @@ note: an implementation of `Shr<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Shr<_>`\n-note: the following trait must be implemented\n+note: the trait `Shr` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL | pub trait Shr<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: binary operation `==` cannot be applied to type `A`\n   --> $DIR/issue-28837.rs:24:7"}, {"sha": "c313ed6037f3ab043aef865989ef6725449c7fb7", "filename": "src/test/ui/binop/issue-3820.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fbinop%2Fissue-3820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fbinop%2Fissue-3820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-3820.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -11,11 +11,8 @@ note: an implementation of `Mul<_>` might be missing for `Thing`\n    |\n LL | struct Thing {\n    | ^^^^^^^^^^^^ must implement `Mul<_>`\n-note: the following trait must be implemented\n+note: the trait `Mul` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | pub trait Mul<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ecf5382e863e00336d9ec449722a272f8044d628", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,11 +7,8 @@ LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n    |              |                   value moved due to this method call\n    |              move occurs because value has type `Vec<i32>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves value\n+note: `into_iter` takes ownership of the receiver `self`, which moves value\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a585bff0c654395b8c208ca5c29ca9f5f7a70d2b", "filename": "src/test/ui/borrowck/issue-83760.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fborrowck%2Fissue-83760.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fborrowck%2Fissue-83760.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-83760.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -27,11 +27,8 @@ LL |         foo = Some(Struct);\n LL |     let _y = foo;\n    |              ^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `foo`\n+note: `Option::<T>::unwrap` takes ownership of the receiver `self`, which moves `foo`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     pub const fn unwrap(self) -> T {\n-   |                         ^^^^\n \n error[E0382]: use of moved value: `foo`\n   --> $DIR/issue-83760.rs:37:14\n@@ -55,11 +52,8 @@ LL |         foo = Some(Struct);\n LL |     } else if true {\n LL |         foo = Some(Struct);\n    |         ^^^^^^^^^^^^^^^^^^\n-note: this function takes ownership of the receiver `self`, which moves `foo`\n+note: `Option::<T>::unwrap` takes ownership of the receiver `self`, which moves `foo`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     pub const fn unwrap(self) -> T {\n-   |                         ^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ecd916a59fcbd725da4a3d607e951a71377ff885", "filename": "src/test/ui/borrowck/reborrow-sugg-move-then-borrow.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,11 +9,8 @@ LL |\n LL |     fill_segment(state);\n    |                  ^^^^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `state`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `state`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n help: consider creating a fresh reborrow of `state` here\n    |\n LL |     for _ in &mut *state {}"}, {"sha": "4621d8793514ac8dd2cf858dd6e1d424cd6c9eb8", "filename": "src/test/ui/borrowck/suggest-as-ref-on-mut-closure.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,11 +8,8 @@ LL |     cb.map(|cb| cb());\n    |     help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |     move occurs because `*cb` has type `Option<&mut dyn FnMut()>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves `*cb`\n+note: `Option::<T>::map` takes ownership of the receiver `self`, which moves `*cb`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     pub const fn map<U, F>(self, f: F) -> Option<U>\n-   |                            ^^^^\n \n error[E0596]: cannot borrow `*cb` as mutable, as it is behind a `&` reference\n   --> $DIR/suggest-as-ref-on-mut-closure.rs:12:26"}, {"sha": "b1367c652188bd8f4bafd95c2addf26ea843e94b", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,11 +10,8 @@ LL |         y.into_iter();\n    |         |\n    |         move occurs because `y` has type `Vec<String>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves `y`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `y`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f102f666dc2769daf19207fafb13ed30af11cb3a", "filename": "src/test/ui/box/into-boxed-slice-fail.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     let _ = Box::into_boxed_slice(boxed_slice);\n    = help: the trait `Sized` is not implemented for `[u8]`\n note: required by a bound in `Box::<T, A>::into_boxed_slice`\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-   |\n-LL | impl<T, A: Allocator> Box<T, A> {\n-   |      ^ required by this bound in `Box::<T, A>::into_boxed_slice`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/into-boxed-slice-fail.rs:7:13\n@@ -33,9 +30,6 @@ LL |     let _ = Box::into_boxed_slice(boxed_trait);\n    = help: the trait `Sized` is not implemented for `dyn Debug`\n note: required by a bound in `Box::<T, A>::into_boxed_slice`\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-   |\n-LL | impl<T, A: Allocator> Box<T, A> {\n-   |      ^ required by this bound in `Box::<T, A>::into_boxed_slice`\n \n error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n   --> $DIR/into-boxed-slice-fail.rs:11:13"}, {"sha": "d1f13d52362da8bf6f8e89045d4a432e497a42f5", "filename": "src/test/ui/c-variadic/issue-86053-1.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -63,11 +63,9 @@ error[E0412]: cannot find type `F` in this scope\n    |\n LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n    |                                                ^\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n-   | -------------------------------------- similarly named trait `Fn` defined here\n+   = note: similarly named trait `Fn` defined here\n    |\n help: a trait with a similar name exists\n    |"}, {"sha": "eda867f4159ff7d5f82f5a8f8050f904137cf01b", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -14,9 +14,6 @@ LL | | }\n    = note: [async fn body@$DIR/async.rs:7:29: 9:2] must be a future or must implement `IntoFuture` to be awaited\n note: required by a bound in `identity_future`\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n-   |                                      ^^^^^^^^^^^^^^^^^^ required by this bound in `identity_future`\n \n error[E0277]: the size for values of type `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output` cannot be known at compilation time\n   --> $DIR/async.rs:7:29\n@@ -30,9 +27,6 @@ LL | | }\n    = help: the trait `Sized` is not implemented for `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output`\n note: required by a bound in `identity_future`\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n-   |                              ^ required by this bound in `identity_future`\n \n error[E0277]: `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n   --> $DIR/async.rs:7:25"}, {"sha": "87a5d67a420c498c2a7926dfbaf6f4300eb83d5f", "filename": "src/test/ui/closures/closure-expected.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,9 +10,6 @@ LL |     let y = x.or_else(4);\n    = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `Option::<T>::or_else`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |         F: ~const FnOnce() -> Option<T>,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::or_else`\n \n error: aborting due to previous error\n "}, {"sha": "64e3b51ea713bf25e60f05b4ab0a9befcba53042", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -19,9 +19,6 @@ LL |     let t = thread::spawn(|| {\n    |                           ^^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n-   |\n-LL |     F: Send + 'static,\n-   |        ^^^^ required by this bound in `spawn`\n \n error[E0277]: `Sender<()>` cannot be shared between threads safely\n   --> $DIR/closure-move-sync.rs:18:19\n@@ -40,9 +37,6 @@ LL |     thread::spawn(|| tx.send(()).unwrap());\n    |                   ^^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n-   |\n-LL |     F: Send + 'static,\n-   |        ^^^^ required by this bound in `spawn`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "449cd0b317757bfef4d48f71d1fd4e9d1a84fa6c", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,9 +10,6 @@ LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |         F: ~const FnOnce(T) -> U,\n-   |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error: aborting due to previous error\n "}, {"sha": "1e860d32b2a06ea523cfc0ec086cf25cf61c35d1", "filename": "src/test/ui/closures/issue-78720.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,11 +9,9 @@ error[E0412]: cannot find type `F` in this scope\n    |\n LL |     _func: F,\n    |            ^\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n-   | -------------------------------------- similarly named trait `Fn` defined here\n+   = note: similarly named trait `Fn` defined here\n    |\n help: a trait with a similar name exists\n    |"}, {"sha": "72337892734e6af3a29009053ff42133f6f92f51", "filename": "src/test/ui/closures/issue-87461.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,9 +8,6 @@ LL |     Ok(())\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-87461.rs:17:8\n@@ -22,9 +19,6 @@ LL |     Ok(())\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-87461.rs:26:12\n@@ -36,9 +30,6 @@ LL |         Ok(())\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4a578b4d7f536204cfc6ae09a79ab5338f82c55e", "filename": "src/test/ui/closures/issue-90871.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fclosures%2Fissue-90871.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fclosures%2Fissue-90871.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-90871.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -3,11 +3,9 @@ error[E0412]: cannot find type `n` in this scope\n    |\n LL |     type_ascribe!(2, n([u8; || 1]))\n    |                      ^ help: a trait with a similar name exists: `Fn`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n-   | -------------------------------------- similarly named trait `Fn` defined here\n+   = note: similarly named trait `Fn` defined here\n \n error[E0308]: mismatched types\n   --> $DIR/issue-90871.rs:4:29"}, {"sha": "e0e369124a4be83557473cfd87160a5837647408", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,11 +9,8 @@ LL |     {\n LL |         println!(\"{:?}\", some_vec);\n    |                          ^^^^^^^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `some_vec`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `some_vec`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider cloning the value if the performance cost is acceptable\n    |"}, {"sha": "293ca6232b14e02cf2686de4a201c2352ffc0c4d", "filename": "src/test/ui/const-generics/generic_arg_infer/issue-91614.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,9 +7,6 @@ LL |     let y = Mask::<_, _>::splat(false);\n    = note: cannot satisfy `_: MaskElement`\n note: required by a bound in `Mask::<T, LANES>::splat`\n   --> $SRC_DIR/core/src/../../portable-simd/crates/core_simd/src/masks.rs:LL:COL\n-   |\n-LL |     T: MaskElement,\n-   |        ^^^^^^^^^^^ required by this bound in `Mask::<T, LANES>::splat`\n help: consider giving `y` an explicit type, where the type for type parameter `T` is specified\n    |\n LL |     let y: Mask<_, LANES> = Mask::<_, _>::splat(false);"}, {"sha": "a08c9912527c732eb8de4b647310e3c2628d019d", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-80742.stderr", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,14 +1,10 @@\n error[E0080]: evaluation of `Inline::<dyn std::fmt::Debug>::{constant#0}` failed\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ size_of called on unsized type `dyn Debug`\n+   = note: size_of called on unsized type `dyn Debug`\n    |\n note: inside `std::mem::size_of::<dyn Debug>`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `Inline::<dyn Debug>::{constant#0}`\n   --> $DIR/issue-80742.rs:22:10\n    |\n@@ -23,26 +19,20 @@ LL | struct Inline<T>\n ...\n LL |     let dst = Inline::<dyn Debug>::new(0);\n    |                                    ^^^ function or associated item cannot be called on `Inline<dyn Debug>` due to unsatisfied trait bounds\n+  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-   |\n-LL | pub trait Debug {\n-   | --------------- doesn't satisfy `dyn Debug: Sized`\n+   = note: doesn't satisfy `dyn Debug: Sized`\n    |\n    = note: the following trait bounds were not satisfied:\n            `dyn Debug: Sized`\n \n error[E0080]: evaluation of `Inline::<dyn std::fmt::Debug>::{constant#0}` failed\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ size_of called on unsized type `dyn Debug`\n+   = note: size_of called on unsized type `dyn Debug`\n    |\n note: inside `std::mem::size_of::<dyn Debug>`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `Inline::<dyn Debug>::{constant#0}`\n   --> $DIR/issue-80742.rs:14:10\n    |"}, {"sha": "8c76ca6902962df686e03c185f2bd4c3f4ba9a6f", "filename": "src/test/ui/const-generics/invalid-const-arg-for-type-param.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -4,11 +4,6 @@ error[E0107]: this associated function takes 0 generic arguments but 1 generic a\n LL |     let _: u32 = 5i32.try_into::<32>().unwrap();\n    |                       ^^^^^^^^ expected 0 generic arguments\n    |\n-note: associated function defined here, with 0 generic parameters\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn try_into(self) -> Result<T, Self::Error>;\n-   |        ^^^^^^^^\n help: consider moving this generic argument to the `TryInto` trait, which takes up to 1 argument\n    |\n LL |     let _: u32 = TryInto::<32>::try_into(5i32).unwrap();"}, {"sha": "993b63518e44cbb8b40f3c6c7138405475b6ab47", "filename": "src/test/ui/const-generics/invalid-constant-in-args.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -5,12 +5,6 @@ LL |     let _: Cell<&str, \"a\"> = Cell::new(\"\");\n    |            ^^^^       --- help: remove this generic argument\n    |            |\n    |            expected 1 generic argument\n-   |\n-note: struct defined here, with 1 generic parameter: `T`\n-  --> $SRC_DIR/core/src/cell.rs:LL:COL\n-   |\n-LL | pub struct Cell<T: ?Sized> {\n-   |            ^^^^ -\n \n error: aborting due to previous error\n "}, {"sha": "3a58a7cd7ef05b5670b01b8514e158b0e3dd528f", "filename": "src/test/ui/const-ptr/forbidden_slices.32bit.stderr", "status": "modified", "additions": 10, "deletions": 68, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,14 +1,10 @@\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n+   = note: dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |\n note: inside `std::slice::from_raw_parts::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `S0`\n   --> $DIR/forbidden_slices.rs:18:34\n    |\n@@ -18,14 +14,10 @@ LL | pub static S0: &[u32] = unsafe { from_raw_parts(ptr::null(), 0) };\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n+   = note: dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |\n note: inside `std::slice::from_raw_parts::<'_, ()>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `S1`\n   --> $DIR/forbidden_slices.rs:19:33\n    |\n@@ -35,14 +27,10 @@ LL | pub static S1: &[()] = unsafe { from_raw_parts(ptr::null(), 0) };\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   = note: dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n    |\n note: inside `std::slice::from_raw_parts::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `S2`\n   --> $DIR/forbidden_slices.rs:22:34\n    |\n@@ -97,14 +85,10 @@ LL | pub static S7: &[u16] = unsafe {\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n+   = note: dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |\n note: inside `std::slice::from_raw_parts::<'_, u64>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `S8`\n   --> $DIR/forbidden_slices.rs:43:5\n    |\n@@ -114,19 +98,12 @@ LL |     from_raw_parts(ptr, 1)\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n+   = note: out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |\n note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `from_ptr_range::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `R0`\n   --> $DIR/forbidden_slices.rs:46:34\n    |\n@@ -136,19 +113,12 @@ LL | pub static R0: &[u32] = unsafe { from_ptr_range(ptr::null()..ptr::null()) }\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: 0 < pointee_size && pointee_size <= isize::MAX as usize', $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   = note: the evaluated program panicked at 'assertion failed: 0 < pointee_size && pointee_size <= isize::MAX as usize', $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n note: inside `ptr::const_ptr::<impl *const ()>::sub_ptr`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `from_ptr_range::<'_, ()>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `R1`\n   --> $DIR/forbidden_slices.rs:47:33\n    |\n@@ -159,19 +129,12 @@ LL | pub static R1: &[()] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   = note: out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n    |\n note: inside `ptr::const_ptr::<impl *const u32>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `ptr::const_ptr::<impl *const u32>::add`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { self.offset(count as isize) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `R2`\n   --> $DIR/forbidden_slices.rs:50:25\n    |\n@@ -226,19 +189,12 @@ LL | pub static R7: &[u16] = unsafe {\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n+   = note: out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |\n note: inside `ptr::const_ptr::<impl *const u64>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `ptr::const_ptr::<impl *const u64>::add`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { self.offset(count as isize) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `R8`\n   --> $DIR/forbidden_slices.rs:74:25\n    |\n@@ -248,19 +204,12 @@ LL |     from_ptr_range(ptr..ptr.add(1))\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from_unsigned` called on pointers into different allocations\n+   = note: `ptr_offset_from_unsigned` called on pointers into different allocations\n    |\n note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `from_ptr_range::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `R9`\n   --> $DIR/forbidden_slices.rs:79:34\n    |\n@@ -270,19 +219,12 @@ LL | pub static R9: &[u32] = unsafe { from_ptr_range(&D0..(&D0 as *const u32).ad\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from_unsigned` called on pointers into different allocations\n+   = note: `ptr_offset_from_unsigned` called on pointers into different allocations\n    |\n note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `from_ptr_range::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `R10`\n   --> $DIR/forbidden_slices.rs:80:35\n    |"}, {"sha": "4e929e3525c20dc78aec81d9af1ac7a5e5efbd86", "filename": "src/test/ui/const-ptr/forbidden_slices.64bit.stderr", "status": "modified", "additions": 10, "deletions": 68, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,14 +1,10 @@\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n+   = note: dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |\n note: inside `std::slice::from_raw_parts::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `S0`\n   --> $DIR/forbidden_slices.rs:18:34\n    |\n@@ -18,14 +14,10 @@ LL | pub static S0: &[u32] = unsafe { from_raw_parts(ptr::null(), 0) };\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n+   = note: dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |\n note: inside `std::slice::from_raw_parts::<'_, ()>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `S1`\n   --> $DIR/forbidden_slices.rs:19:33\n    |\n@@ -35,14 +27,10 @@ LL | pub static S1: &[()] = unsafe { from_raw_parts(ptr::null(), 0) };\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   = note: dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n    |\n note: inside `std::slice::from_raw_parts::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `S2`\n   --> $DIR/forbidden_slices.rs:22:34\n    |\n@@ -97,14 +85,10 @@ LL | pub static S7: &[u16] = unsafe {\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n+   = note: dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |\n note: inside `std::slice::from_raw_parts::<'_, u64>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `S8`\n   --> $DIR/forbidden_slices.rs:43:5\n    |\n@@ -114,19 +98,12 @@ LL |     from_raw_parts(ptr, 1)\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n+   = note: out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |\n note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `from_ptr_range::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `R0`\n   --> $DIR/forbidden_slices.rs:46:34\n    |\n@@ -136,19 +113,12 @@ LL | pub static R0: &[u32] = unsafe { from_ptr_range(ptr::null()..ptr::null()) }\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: 0 < pointee_size && pointee_size <= isize::MAX as usize', $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   = note: the evaluated program panicked at 'assertion failed: 0 < pointee_size && pointee_size <= isize::MAX as usize', $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n note: inside `ptr::const_ptr::<impl *const ()>::sub_ptr`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `from_ptr_range::<'_, ()>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `R1`\n   --> $DIR/forbidden_slices.rs:47:33\n    |\n@@ -159,19 +129,12 @@ LL | pub static R1: &[()] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   = note: out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n    |\n note: inside `ptr::const_ptr::<impl *const u32>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `ptr::const_ptr::<impl *const u32>::add`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { self.offset(count as isize) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `R2`\n   --> $DIR/forbidden_slices.rs:50:25\n    |\n@@ -226,19 +189,12 @@ LL | pub static R7: &[u16] = unsafe {\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n+   = note: out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |\n note: inside `ptr::const_ptr::<impl *const u64>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `ptr::const_ptr::<impl *const u64>::add`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { self.offset(count as isize) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `R8`\n   --> $DIR/forbidden_slices.rs:74:25\n    |\n@@ -248,19 +204,12 @@ LL |     from_ptr_range(ptr..ptr.add(1))\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from_unsigned` called on pointers into different allocations\n+   = note: `ptr_offset_from_unsigned` called on pointers into different allocations\n    |\n note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `from_ptr_range::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `R9`\n   --> $DIR/forbidden_slices.rs:79:34\n    |\n@@ -270,19 +219,12 @@ LL | pub static R9: &[u32] = unsafe { from_ptr_range(&D0..(&D0 as *const u32).ad\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from_unsigned` called on pointers into different allocations\n+   = note: `ptr_offset_from_unsigned` called on pointers into different allocations\n    |\n note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `from_ptr_range::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n-   |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `R10`\n   --> $DIR/forbidden_slices.rs:80:35\n    |"}, {"sha": "3e7b09a5982d9597c17e44f7db08f5be6840dab9", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,14 +1,10 @@\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   = note: memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |\n note: inside `std::ptr::read::<u32>`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `_READ`\n   --> $DIR/out_of_bounds_read.rs:12:33\n    |\n@@ -18,19 +14,12 @@ LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   = note: memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |\n note: inside `std::ptr::read::<u32>`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `ptr::const_ptr::<impl *const u32>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { read(self) }\n-   |                  ^^^^^^^^^^\n note: inside `_CONST_READ`\n   --> $DIR/out_of_bounds_read.rs:13:39\n    |\n@@ -40,19 +29,12 @@ LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   = note: memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |\n note: inside `std::ptr::read::<u32>`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `ptr::mut_ptr::<impl *mut u32>::read`\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { read(self) }\n-   |                  ^^^^^^^^^^\n note: inside `_MUT_READ`\n   --> $DIR/out_of_bounds_read.rs:14:37\n    |"}, {"sha": "7ad02252094203a3f8b6865b53a6f7382bfe88e6", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,19 +1,12 @@\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n-LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a NaN\")\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n+   = note: the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n note: inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32`\n   --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n-   |\n-LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a NaN\")\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `core::f32::<impl f32>::to_bits`\n   --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `f32::MASKED_NAN1`\n   --> $DIR/const-float-bits-reject-conv.rs:28:30\n    |\n@@ -24,19 +17,12 @@ LL |     const MASKED_NAN1: u32 = f32::NAN.to_bits() ^ 0x002A_AAAA;\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n-LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a NaN\")\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n+   = note: the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n note: inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32`\n   --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n-   |\n-LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a NaN\")\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `core::f32::<impl f32>::to_bits`\n   --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `f32::MASKED_NAN2`\n   --> $DIR/const-float-bits-reject-conv.rs:30:30\n    |\n@@ -71,19 +57,12 @@ LL |     const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n-LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a NaN\")\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n+   = note: the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n note: inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64`\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n-   |\n-LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a NaN\")\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `core::f64::<impl f64>::to_bits`\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `f64::MASKED_NAN1`\n   --> $DIR/const-float-bits-reject-conv.rs:50:30\n    |\n@@ -94,19 +73,12 @@ LL |     const MASKED_NAN1: u64 = f64::NAN.to_bits() ^ 0x000A_AAAA_AAAA_AAAA;\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n-LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a NaN\")\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n+   = note: the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n note: inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64`\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n-   |\n-LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a NaN\")\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `core::f64::<impl f64>::to_bits`\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `f64::MASKED_NAN2`\n   --> $DIR/const-float-bits-reject-conv.rs:52:30\n    |"}, {"sha": "f6b532fb6586590a33aa1ce6e96d563c3ffe370c", "filename": "src/test/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -21,9 +21,6 @@ LL |     for i in 0..x {\n    |\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL | impl<I: Iterator> const IntoIterator for I {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n error[E0658]: mutable references are not allowed in constant functions"}, {"sha": "294ea627d8544e9fbf91135146432570b0adbf5a", "filename": "src/test/ui/consts/const-for.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL |     for _ in 0..5 {}\n    |\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL | impl<I: Iterator> const IntoIterator for I {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n error[E0015]: cannot call non-const fn `<std::ops::Range<i32> as Iterator>::next` in constants"}, {"sha": "593a51bfe8fea6f7282a4b8d6804bff8c891e2a8", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,14 +1,10 @@\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/hint.rs:LL:COL\n    |\n-LL |         intrinsics::unreachable()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ entering unreachable code\n+   = note: entering unreachable code\n    |\n note: inside `unreachable_unchecked`\n   --> $SRC_DIR/core/src/hint.rs:LL:COL\n-   |\n-LL |         intrinsics::unreachable()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `foo`\n   --> $DIR/const_unsafe_unreachable_ub.rs:6:18\n    |"}, {"sha": "51eec78336565ac9b518ff1b1c875507f74be822", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -31,19 +31,12 @@ LL |     let _x: &u32 = transmute(&[0u8; 4]);\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment 1, but alignment 4 is required\n+   = note: accessing memory with alignment 1, but alignment 4 is required\n    |\n note: inside `std::ptr::read::<u32>`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `ptr::const_ptr::<impl *const u32>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { read(self) }\n-   |                  ^^^^^^^^^^\n note: inside `INNER`\n   --> $DIR/detect-extra-ub.rs:38:9\n    |"}, {"sha": "61865b1dad764240adeb9cfaead4efedb5cc9806", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,21 +1,14 @@\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to copy parts of a pointer from memory at ALLOC\n+   = note: unable to copy parts of a pointer from memory at ALLOC\n    |\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n note: inside `std::ptr::read::<u8>`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `ptr::const_ptr::<impl *const u8>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { read(self) }\n-   |                  ^^^^^^^^^^\n note: inside `C`\n   --> $DIR/issue-miri-1910.rs:8:5\n    |"}, {"sha": "e1da43c3aea4134f15025cd694071cbca338dbc2", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,19 +1,12 @@\n error[E0080]: evaluation of `<std::string::String as Bar<std::vec::Vec<u32>, std::string::String>>::F` failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `<Vec<u32> as Drop>::drop`\n+   = note: calling non-const function `<Vec<u32> as Drop>::drop`\n    |\n note: inside `std::ptr::drop_in_place::<Vec<u32>> - shim(Some(Vec<u32>))`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |\n-LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `std::ptr::drop_in_place::<(Vec<u32>, u32)> - shim(Some((Vec<u32>, u32)))`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |\n-LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `<String as Bar<Vec<u32>, String>>::F`\n   --> $DIR/assoc_const.rs:12:31\n    |"}, {"sha": "4f60b8820691ba0fb23de283c30845d8442ca100", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,14 +1,10 @@\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `<Vec<i32> as Drop>::drop`\n+   = note: calling non-const function `<Vec<i32> as Drop>::drop`\n    |\n note: inside `std::ptr::drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |\n-LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `TEST_BAD`\n   --> $DIR/drop.rs:17:1\n    |"}, {"sha": "dd2b81c5af2bc93171c26e86d80175aae019bc60", "filename": "src/test/ui/consts/missing_span_in_backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/FAKE_PREFIX -Z translate-remapped-path-to-local-path=no -Z ui-testing=no\n+// compile-flags: -Z ui-testing=no\n // normalize-stderr-test \"alloc[0-9]+\" -> \"ALLOC_ID\"\n \n #![feature(const_swap)]"}, {"sha": "fff4729689f54058a1969380dfa67407af7a274c", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,14 +7,10 @@ LL |     let offset = unsafe { ptr_offset_from(field_ptr, base_ptr) };\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from` called on pointers into different allocations\n+   = note: `ptr_offset_from` called on pointers into different allocations\n    |\n note: inside `ptr::const_ptr::<impl *const u8>::offset_from`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `NOT_PTR`\n   --> $DIR/offset_from_ub.rs:24:14\n    |\n@@ -90,14 +86,10 @@ LL |     unsafe { ptr_offset_from_unsigned(ptr2, ptr1) }\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n+   = note: out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |\n note: inside `ptr::const_ptr::<impl *const u8>::offset_from`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `OFFSET_VERY_FAR1`\n   --> $DIR/offset_from_ub.rs:115:14\n    |\n@@ -107,14 +99,10 @@ LL |     unsafe { ptr2.offset_from(ptr1) }\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n+   = note: out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |\n note: inside `ptr::const_ptr::<impl *const u8>::offset_from`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `OFFSET_VERY_FAR2`\n   --> $DIR/offset_from_ub.rs:121:14\n    |"}, {"sha": "c0c851df5076e078bb5529b11f9b612d9740010a", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 12, "deletions": 60, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,14 +1,10 @@\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+   = note: overflowing in-bounds pointer arithmetic\n    |\n note: inside `ptr::const_ptr::<impl *const u8>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `BEFORE_START`\n   --> $DIR/offset_ub.rs:7:46\n    |\n@@ -18,14 +14,10 @@ LL | pub const BEFORE_START: *const u8 = unsafe { (&0u8 as *const u8).offset(-1)\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n+   = note: out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n    |\n note: inside `ptr::const_ptr::<impl *const u8>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `AFTER_END`\n   --> $DIR/offset_ub.rs:8:43\n    |\n@@ -35,14 +27,10 @@ LL | pub const AFTER_END: *const u8 = unsafe { (&0u8 as *const u8).offset(2) };\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n+   = note: out-of-bounds pointer arithmetic: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n    |\n note: inside `ptr::const_ptr::<impl *const u8>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `AFTER_ARRAY`\n   --> $DIR/offset_ub.rs:9:45\n    |\n@@ -52,14 +40,10 @@ LL | pub const AFTER_ARRAY: *const u8 = unsafe { [0u8; 100].as_ptr().offset(101)\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+   = note: overflowing in-bounds pointer arithmetic\n    |\n note: inside `ptr::const_ptr::<impl *const u16>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `OVERFLOW`\n   --> $DIR/offset_ub.rs:11:43\n    |\n@@ -69,14 +53,10 @@ LL | pub const OVERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+   = note: overflowing in-bounds pointer arithmetic\n    |\n note: inside `ptr::const_ptr::<impl *const u16>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `UNDERFLOW`\n   --> $DIR/offset_ub.rs:12:44\n    |\n@@ -86,14 +66,10 @@ LL | pub const UNDERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize:\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+   = note: overflowing in-bounds pointer arithmetic\n    |\n note: inside `ptr::const_ptr::<impl *const u8>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `OVERFLOW_ADDRESS_SPACE`\n   --> $DIR/offset_ub.rs:13:56\n    |\n@@ -103,14 +79,10 @@ LL | pub const OVERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (usize::MAX as *cons\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+   = note: overflowing in-bounds pointer arithmetic\n    |\n note: inside `ptr::const_ptr::<impl *const u8>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `UNDERFLOW_ADDRESS_SPACE`\n   --> $DIR/offset_ub.rs:14:57\n    |\n@@ -120,14 +92,10 @@ LL | pub const UNDERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (1 as *const u8).of\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n+   = note: out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n    |\n note: inside `ptr::const_ptr::<impl *const u8>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `NEGATIVE_OFFSET`\n   --> $DIR/offset_ub.rs:15:49\n    |\n@@ -137,14 +105,10 @@ LL | pub const NEGATIVE_OFFSET: *const u8 = unsafe { [0u8; 1].as_ptr().wrapping_\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n+   = note: out-of-bounds pointer arithmetic: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n    |\n note: inside `ptr::const_ptr::<impl *const u8>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `ZERO_SIZED_ALLOC`\n   --> $DIR/offset_ub.rs:17:50\n    |\n@@ -154,14 +118,10 @@ LL | pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n+   = note: out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n    |\n note: inside `ptr::mut_ptr::<impl *mut u8>::offset`\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `DANGLING`\n   --> $DIR/offset_ub.rs:18:42\n    |\n@@ -171,14 +131,10 @@ LL | pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: null pointer is a dangling pointer (it has no provenance)\n+   = note: out-of-bounds pointer arithmetic: null pointer is a dangling pointer (it has no provenance)\n    |\n note: inside `ptr::const_ptr::<impl *const u8>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `NULL_OFFSET_ZERO`\n   --> $DIR/offset_ub.rs:21:50\n    |\n@@ -188,14 +144,10 @@ LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: 0x7f..f[noalloc] is a dangling pointer (it has no provenance)\n+   = note: out-of-bounds pointer arithmetic: 0x7f..f[noalloc] is a dangling pointer (it has no provenance)\n    |\n note: inside `ptr::const_ptr::<impl *const u8>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `UNDERFLOW_ABS`\n   --> $DIR/offset_ub.rs:24:47\n    |"}, {"sha": "fea924d12e54ee60a79799be0f8845a707b3cf4a", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,14 +1,10 @@\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n+   = note: out-of-bounds pointer arithmetic: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n    |\n note: inside `ptr::const_ptr::<impl *const usize>::offset`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `_`\n   --> $DIR/ptr_comparisons.rs:50:34\n    |"}, {"sha": "2be69a30b1c122222de25596e628ff372f5f9504", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |      x: Error\n    |\n note: required by a bound in `AssertParamIsEq`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Eq)]`\n    |"}, {"sha": "4f4f821cca3e7c735302daf8c1c8b3103a67d80b", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |      Error\n    |\n note: required by a bound in `AssertParamIsEq`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Eq)]`\n    |"}, {"sha": "f15659c3e166c9807c66cc7cef251465884b933e", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     x: Error\n    |\n note: required by a bound in `AssertParamIsEq`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Eq)]`\n    |"}, {"sha": "4e5659b35f47a5434459c7681e33d7ccb1391a83", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     Error\n    |\n note: required by a bound in `AssertParamIsEq`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Eq)]`\n    |"}, {"sha": "053d34f68251a44082558ca4678c750b593aaf9d", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -3,22 +3,18 @@ error: cannot find derive macro `Eqr` in this scope\n    |\n LL | #[derive(Eqr)]\n    |          ^^^ help: a derive macro with a similar name exists: `Eq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub macro Eq($item:item) {\n-   | ------------ similarly named derive macro `Eq` defined here\n+   = note: similarly named derive macro `Eq` defined here\n \n error: cannot find derive macro `Eqr` in this scope\n   --> $DIR/deriving-meta-unknown-trait.rs:1:10\n    |\n LL | #[derive(Eqr)]\n    |          ^^^ help: a derive macro with a similar name exists: `Eq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub macro Eq($item:item) {\n-   | ------------ similarly named derive macro `Eq` defined here\n+   = note: similarly named derive macro `Eq` defined here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b18e1e5098b34ba08ed6cfd5f7a39d06aa060d23", "filename": "src/test/ui/deriving/issue-103157.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -20,9 +20,6 @@ LL |     Float(Option<f64>),\n    = note: required for `Option<f64>` to implement `Eq`\n note: required by a bound in `AssertParamIsEq`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "8a88332b73e105f8b06c85c634f8cdeefba70f7e", "filename": "src/test/ui/destructuring-assignment/note-unsupported.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -49,11 +49,8 @@ note: an implementation of `AddAssign<_>` might be missing for `S`\n    |\n LL | struct S { x: u8, y: u8 }\n    | ^^^^^^^^ must implement `AddAssign<_>`\n-note: the following trait must be implemented\n+note: the trait `AddAssign` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | pub trait AddAssign<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0067]: invalid left-hand side of assignment\n   --> $DIR/note-unsupported.rs:17:22"}, {"sha": "8d0a82b707ddaa07ffcebd0df4cc2b9bd60b1227", "filename": "src/test/ui/dst/dst-rvalue.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     let _x: Box<str> = Box::new(*\"hello world\");\n    = help: the trait `Sized` is not implemented for `str`\n note: required by a bound in `Box::<T>::new`\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-   |\n-LL | impl<T> Box<T> {\n-   |      ^ required by this bound in `Box::<T>::new`\n \n error[E0277]: the size for values of type `[isize]` cannot be known at compilation time\n   --> $DIR/dst-rvalue.rs:8:37\n@@ -24,9 +21,6 @@ LL |     let _x: Box<[isize]> = Box::new(*array);\n    = help: the trait `Sized` is not implemented for `[isize]`\n note: required by a bound in `Box::<T>::new`\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-   |\n-LL | impl<T> Box<T> {\n-   |      ^ required by this bound in `Box::<T>::new`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e829bac196f7962b27bb1ef0554b7717356d0879", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,15 +6,12 @@ LL |     match x { }\n    |\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | pub enum Option<T> {\n-   | ------------------\n-...\n-LL |     None,\n-   |     ^^^^ not covered\n-...\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^ not covered\n+   = note: not covered\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Option<i32>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |"}, {"sha": "0f179259356d50430ed09f38bf96f01e2762ed25", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,12 +8,9 @@ LL |     let Some(y) = x;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | pub enum Option<T> {\n-   | ------------------\n-...\n-LL |     None,\n-   |     ^^^^ not covered\n+   = note: not covered\n    = note: the matched value is of type `Option<i32>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |"}, {"sha": "4f6abb22ab2f03f9ef63d1e81d1cb8669c4f49fb", "filename": "src/test/ui/error-codes/E0059.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL | fn foo<F: Fn<i32>>(f: F) -> F::Output { f(3) }\n    |\n note: required by a bound in `Fn`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n-   |                    ^^^^^ required by this bound in `Fn`\n \n error: aborting due to previous error\n "}, {"sha": "903422f3b9b8a59ba9b02f526ce33cd634bde089", "filename": "src/test/ui/error-codes/E0297.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,12 +6,9 @@ LL |     for Some(x) in xs {}\n    |\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | pub enum Option<T> {\n-   | ------------------\n-...\n-LL |     None,\n-   |     ^^^^ not covered\n+   = note: not covered\n    = note: the matched value is of type `Option<i32>`\n \n error: aborting due to previous error"}, {"sha": "03630f38987e23cc95304050b8b4b7105373c89a", "filename": "src/test/ui/error-codes/E0507.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ferror-codes%2FE0507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ferror-codes%2FE0507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0507.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,7 +7,7 @@ LL |     x.borrow().nothing_is_true();\n    |     |          value moved due to this method call\n    |     move occurs because value has type `TheDarkKnight`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves value\n+note: `TheDarkKnight::nothing_is_true` takes ownership of the receiver `self`, which moves value\n   --> $DIR/E0507.rs:6:24\n    |\n LL |     fn nothing_is_true(self) {}"}, {"sha": "fe9956b70bdd75f3e9cb374adbb589cde91d2e50", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -41,11 +41,8 @@ note: an implementation of `Not` might be missing for `Question`\n    |\n LL | enum Question {\n    | ^^^^^^^^^^^^^ must implement `Not`\n-note: the following trait must be implemented\n+note: the trait `Not` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL | pub trait Not {\n-   | ^^^^^^^^^^^^^\n \n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/error-festival.rs:25:5"}, {"sha": "2f9d10d70a2fea087ef955ca6a2ad9e22dcb4108", "filename": "src/test/ui/expr/malformed_closure/ruby_style_closure.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -22,9 +22,6 @@ LL | |     });\n    = help: the trait `FnOnce<({integer},)>` is not implemented for `Option<_>`\n note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |         F: ~const FnOnce(T) -> Option<U>,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::and_then`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e253e4791e8bd095b8941ffc4ce6f5a3f47e20fa", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,12 +8,9 @@ LL |     let Ok(_x) = foo();\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n note: `Result<u32, !>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n+  ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-LL | pub enum Result<T, E> {\n-   | ---------------------\n-...\n-LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n-   |     ^^^ not covered\n+   = note: not covered\n    = note: the matched value is of type `Result<u32, !>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |"}, {"sha": "a8a2a47fe46e1f6ed7a478b9f99d3e9d1167dddf", "filename": "src/test/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -309,9 +309,6 @@ LL |     println!(\"{} {:.*} {}\", 1, 3.2, 4);\n               found reference `&{float}`\n note: associated function defined here\n   --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-   |\n-LL |     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n-   |            ^^^^^^^^^^\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n@@ -327,9 +324,6 @@ LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n               found reference `&{float}`\n note: associated function defined here\n   --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-   |\n-LL |     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n-   |            ^^^^^^^^^^\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 38 previous errors"}, {"sha": "be321c3c5c08f1279e539132933ba9d391027627", "filename": "src/test/ui/fmt/ifmt-unimpl.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -17,9 +17,6 @@ LL |     format!(\"{:X}\", \"3\");\n    = note: required for `&str` to implement `UpperHex`\n note: required by a bound in `ArgumentV1::<'a>::new_upper_hex`\n   --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-   |\n-LL |     arg_new!(new_upper_hex, UpperHex);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ArgumentV1::<'a>::new_upper_hex`\n    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `arg_new` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "afb39c9e594d17887c8890ca793d7dcad17a3df0", "filename": "src/test/ui/generator/issue-102645.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL |     Pin::new(&mut b).resume();\n    |\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/generator.rs:LL:COL\n-   |\n-LL |     fn resume(self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return>;\n-   |        ^^^^^^\n help: provide the argument\n    |\n LL |     Pin::new(&mut b).resume(());"}, {"sha": "fb34540d969dae4e9401c2281f0363d93e797038", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -20,9 +20,6 @@ LL |    Pin::new(&mut gen).resume(());\n    = help: the trait `Sized` is not implemented for `str`\n note: required by a bound in `GeneratorState`\n   --> $SRC_DIR/core/src/ops/generator.rs:LL:COL\n-   |\n-LL | pub enum GeneratorState<Y, R> {\n-   |                         ^ required by this bound in `GeneratorState`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b48966a1a1ed0c66f351b39ab7e7b8c5de8ddd8e", "filename": "src/test/ui/generics/wrong-number-of-args.stderr", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -889,11 +889,6 @@ error[E0107]: missing generics for struct `HashMap`\n LL |         type A = HashMap;\n    |                  ^^^^^^^ expected at least 2 generic arguments\n    |\n-note: struct defined here, with at least 2 generic parameters: `K`, `V`\n-  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-   |\n-LL | pub struct HashMap<K, V, S = RandomState> {\n-   |            ^^^^^^^ -  -\n help: add missing generic arguments\n    |\n LL |         type A = HashMap<K, V>;\n@@ -907,11 +902,6 @@ LL |         type B = HashMap<String>;\n    |                  |\n    |                  expected at least 2 generic arguments\n    |\n-note: struct defined here, with at least 2 generic parameters: `K`, `V`\n-  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-   |\n-LL | pub struct HashMap<K, V, S = RandomState> {\n-   |            ^^^^^^^ -  -\n help: add missing generic argument\n    |\n LL |         type B = HashMap<String, V>;\n@@ -924,24 +914,13 @@ LL |         type C = HashMap<'static>;\n    |                  ^^^^^^^--------- help: remove these generics\n    |                  |\n    |                  expected 0 lifetime arguments\n-   |\n-note: struct defined here, with 0 lifetime parameters\n-  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-   |\n-LL | pub struct HashMap<K, V, S = RandomState> {\n-   |            ^^^^^^^\n \n error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:318:18\n    |\n LL |         type C = HashMap<'static>;\n    |                  ^^^^^^^ expected at least 2 generic arguments\n    |\n-note: struct defined here, with at least 2 generic parameters: `K`, `V`\n-  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-   |\n-LL | pub struct HashMap<K, V, S = RandomState> {\n-   |            ^^^^^^^ -  -\n help: add missing generic arguments\n    |\n LL |         type C = HashMap<'static, K, V>;\n@@ -954,24 +933,13 @@ LL |         type D = HashMap<usize, String, char, f64>;\n    |                  ^^^^^^^                      --- help: remove this generic argument\n    |                  |\n    |                  expected at most 3 generic arguments\n-   |\n-note: struct defined here, with at most 3 generic parameters: `K`, `V`, `S`\n-  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-   |\n-LL | pub struct HashMap<K, V, S = RandomState> {\n-   |            ^^^^^^^ -  -  ---------------\n \n error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:328:18\n    |\n LL |         type E = HashMap<>;\n    |                  ^^^^^^^ expected at least 2 generic arguments\n    |\n-note: struct defined here, with at least 2 generic parameters: `K`, `V`\n-  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-   |\n-LL | pub struct HashMap<K, V, S = RandomState> {\n-   |            ^^^^^^^ -  -\n help: add missing generic arguments\n    |\n LL |         type E = HashMap<K, V>;\n@@ -983,11 +951,6 @@ error[E0107]: missing generics for enum `Result`\n LL |         type A = Result;\n    |                  ^^^^^^ expected 2 generic arguments\n    |\n-note: enum defined here, with 2 generic parameters: `T`, `E`\n-  --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   |          ^^^^^^ -  -\n help: add missing generic arguments\n    |\n LL |         type A = Result<T, E>;\n@@ -1001,11 +964,6 @@ LL |         type B = Result<String>;\n    |                  |\n    |                  expected 2 generic arguments\n    |\n-note: enum defined here, with 2 generic parameters: `T`, `E`\n-  --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   |          ^^^^^^ -  -\n help: add missing generic argument\n    |\n LL |         type B = Result<String, E>;\n@@ -1018,24 +976,13 @@ LL |         type C = Result<'static>;\n    |                  ^^^^^^--------- help: remove these generics\n    |                  |\n    |                  expected 0 lifetime arguments\n-   |\n-note: enum defined here, with 0 lifetime parameters\n-  --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   |          ^^^^^^\n \n error[E0107]: this enum takes 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:342:18\n    |\n LL |         type C = Result<'static>;\n    |                  ^^^^^^ expected 2 generic arguments\n    |\n-note: enum defined here, with 2 generic parameters: `T`, `E`\n-  --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   |          ^^^^^^ -  -\n help: add missing generic arguments\n    |\n LL |         type C = Result<'static, T, E>;\n@@ -1048,24 +995,13 @@ LL |         type D = Result<usize, String, char>;\n    |                  ^^^^^^                ---- help: remove this generic argument\n    |                  |\n    |                  expected 2 generic arguments\n-   |\n-note: enum defined here, with 2 generic parameters: `T`, `E`\n-  --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   |          ^^^^^^ -  -\n \n error[E0107]: this enum takes 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:352:18\n    |\n LL |         type E = Result<>;\n    |                  ^^^^^^ expected 2 generic arguments\n    |\n-note: enum defined here, with 2 generic parameters: `T`, `E`\n-  --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   |          ^^^^^^ -  -\n help: add missing generic arguments\n    |\n LL |         type E = Result<T, E>;"}, {"sha": "973b65bfd625a6188cdf5c199dfa31284b5b4dbc", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -46,11 +46,9 @@ error[E0643]: method `hash` has incompatible signature for trait\n    |\n LL |     fn hash(&self, hasher: &mut impl Hasher) {}\n    |                                 ^^^^^^^^^^^ expected generic parameter, found `impl Trait`\n+  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n-   |\n-LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             - declaration in trait here\n+   = note: declaration in trait here\n \n error: aborting due to 4 previous errors\n "}, {"sha": "03cc4c2b93bed3948427b7ae028dd11a4da4e70a", "filename": "src/test/ui/impl-trait/in-trait/wf-bounds.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,9 +7,6 @@ LL |     fn nya() -> impl Wf<Vec<[u8]>>;\n    = help: the trait `Sized` is not implemented for `[u8]`\n note: required by a bound in `Vec`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   |                ^ required by this bound in `Vec`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/wf-bounds.rs:12:23"}, {"sha": "bc342dc46893b80e02778235fc7437037bb9d406", "filename": "src/test/ui/impl-trait/issues/issue-62742.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -25,7 +25,7 @@ LL | pub struct SafeImpl<T: ?Sized, A: Raw<T>>(PhantomData<(A, T)>);\n    |\n    = note: the following trait bounds were not satisfied:\n            `RawImpl<()>: Raw<()>`\n-note: the following trait must be implemented\n+note: the trait `Raw` must be implemented\n   --> $DIR/issue-62742.rs:12:1\n    |\n LL | pub trait Raw<T: ?Sized> {"}, {"sha": "f09c14d3df1df216b7a01e75be34e8ab972b70ca", "filename": "src/test/ui/impl-trait/issues/issue-92305.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -4,11 +4,6 @@ error[E0107]: missing generics for struct `Vec`\n LL | fn f<T>(data: &[T]) -> impl Iterator<Item = Vec> {\n    |                                             ^^^ expected at least 1 generic argument\n    |\n-note: struct defined here, with at least 1 generic parameter: `T`\n-  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   |            ^^^ -\n help: add missing generic argument\n    |\n LL | fn f<T>(data: &[T]) -> impl Iterator<Item = Vec<T>> {"}, {"sha": "ade479ed1022128a4bef62cabae71c1bccd4d10d", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -24,11 +24,8 @@ LL |         extern crate std as Vec;\n ...\n LL | define_vec!();\n    | ------------- in this macro invocation\n-note: `Vec` could also refer to the struct defined here\n+note: `Vec` could also refer to a struct from prelude\n   --> $SRC_DIR/std/src/prelude/mod.rs:LL:COL\n-   |\n-LL |     pub use super::v1::*;\n-   |             ^^^^^^^^^^^^\n    = note: this error originates in the macro `define_vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "01b37f2acaa14444d7b043e2d1ab7c31572b7772", "filename": "src/test/ui/inference/issue-71732.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -12,9 +12,6 @@ LL |         .get(&\"key\".into())\n              where T: ?Sized;\n note: required by a bound in `HashMap::<K, V, S>::get`\n   --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-   |\n-LL |         K: Borrow<Q>,\n-   |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n help: consider specifying the generic argument\n    |\n LL |         .get::<Q>(&\"key\".into())"}, {"sha": "034d22591b38a582360f86a5367183167019c8c6", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -16,9 +16,6 @@ LL |     catch_unwind(|| { x.set(23); });\n    |                  ^^\n note: required by a bound in `catch_unwind`\n   --> $SRC_DIR/std/src/panic.rs:LL:COL\n-   |\n-LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n-   |                                        ^^^^^^^^^^ required by this bound in `catch_unwind`\n \n error: aborting due to previous error\n "}, {"sha": "fd7d061b6b2e5627459e5ea11968c9539c345ff8", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -37,9 +37,6 @@ LL |     const_eval_select((), 42, 0xDEADBEEF);\n    = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-LL |         F: FnOnce<ARG, Output = RET>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error: this argument must be a function item\n   --> $DIR/const-eval-select-bad.rs:10:31\n@@ -62,9 +59,6 @@ LL |     const_eval_select((), 42, 0xDEADBEEF);\n    = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-LL |         G: FnOnce<ARG, Output = RET>,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0271]: expected `fn(i32) -> bool {bar}` to be a fn item that returns `i32`, but it returns `bool`\n   --> $DIR/const-eval-select-bad.rs:32:34\n@@ -76,9 +70,6 @@ LL |     const_eval_select((1,), foo, bar);\n    |\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-LL |         G: FnOnce<ARG, Output = RET>,\n-   |                        ^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/const-eval-select-bad.rs:37:32\n@@ -95,9 +86,6 @@ LL |     const_eval_select((true,), foo, baz);\n               found function signature `fn(i32) -> _`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-LL |         F: FnOnce<ARG, Output = RET>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error: this argument must be a `const fn`\n   --> $DIR/const-eval-select-bad.rs:42:29"}, {"sha": "f8375d4ef9014ba6e7dcfe0ca100c93ee114a47d", "filename": "src/test/ui/issues/issue-14091-2.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,11 +9,8 @@ note: an implementation of `Not` might be missing for `BytePos`\n    |\n LL | pub struct BytePos(pub u32);\n    | ^^^^^^^^^^^^^^^^^^ must implement `Not`\n-note: the following trait must be implemented\n+note: the trait `Not` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL | pub trait Not {\n-   | ^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "132e2b101a5ff1d4c207e69fa9e71951f41cb451", "filename": "src/test/ui/issues/issue-14092.stderr", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-14092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-14092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14092.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -4,13 +4,6 @@ error[E0107]: missing generics for struct `Box`\n LL | fn fn1(0: Box) {}\n    |           ^^^ expected at least 1 generic argument\n    |\n-note: struct defined here, with at least 1 generic parameter: `T`\n-  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-   |\n-LL | pub struct Box<\n-   |            ^^^\n-LL |     T: ?Sized,\n-   |     -\n help: add missing generic argument\n    |\n LL | fn fn1(0: Box<T>) {}"}, {"sha": "60f5190dbd0d640f790cf33863fdf06bfd1dc9fa", "filename": "src/test/ui/issues/issue-16966.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -5,11 +5,6 @@ LL |     panic!(std::default::Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `M` declared on the function `begin_panic`\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider specifying the generic argument\n-  --> $SRC_DIR/std/src/panic.rs:LL:COL\n-   |\n-LL |         $crate::rt::begin_panic::<M>($msg)\n-   |                                +++++\n \n error: aborting due to previous error\n "}, {"sha": "81592320a2791b414f88788ba6c2e99c5ce21e5b", "filename": "src/test/ui/issues/issue-17546.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -3,11 +3,9 @@ error[E0573]: expected type, found variant `NoResult`\n    |\n LL |     fn new() -> NoResult<MyEnum, String> {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   | --------------------- similarly named enum `Result` defined here\n+   = note: similarly named enum `Result` defined here\n    |\n help: try using the variant's enum\n    |\n@@ -57,11 +55,9 @@ error[E0573]: expected type, found variant `NoResult`\n    |\n LL | fn newer() -> NoResult<foo::MyEnum, String> {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   | --------------------- similarly named enum `Result` defined here\n+   = note: similarly named enum `Result` defined here\n    |\n help: try using the variant's enum\n    |"}, {"sha": "b37811e19559c3bdc82fe6c1036e2b3f8883040c", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     (|| Box::new(*(&[0][..])))();\n    = help: the trait `Sized` is not implemented for `[{integer}]`\n note: required by a bound in `Box::<T>::new`\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-   |\n-LL | impl<T> Box<T> {\n-   |      ^ required by this bound in `Box::<T>::new`\n \n error: aborting due to previous error\n "}, {"sha": "bbf79366244a01d7381b2d9504b47742bbe86c25", "filename": "src/test/ui/issues/issue-18423.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -5,12 +5,6 @@ LL |     x: Box<'a, isize>\n    |        ^^^ -- help: remove this lifetime argument\n    |        |\n    |        expected 0 lifetime arguments\n-   |\n-note: struct defined here, with 0 lifetime parameters\n-  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-   |\n-LL | pub struct Box<\n-   |            ^^^\n \n error: aborting due to previous error\n "}, {"sha": "1c5b76fbfc10b1e730ce7c738f264d4d5a05c998", "filename": "src/test/ui/issues/issue-20162.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL |     b.sort();\n    |\n note: required by a bound in `slice::<impl [T]>::sort`\n   --> $SRC_DIR/alloc/src/slice.rs:LL:COL\n-   |\n-LL |         T: Ord,\n-   |            ^^^ required by this bound in `slice::<impl [T]>::sort`\n help: consider annotating `X` with `#[derive(Ord)]`\n    |\n LL | #[derive(Ord)]"}, {"sha": "3ae952546a62dd0d652b032fa346917fca174a08", "filename": "src/test/ui/issues/issue-20433.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,9 +7,6 @@ LL |     fn iceman(c: Vec<[i32]>) {}\n    = help: the trait `Sized` is not implemented for `[i32]`\n note: required by a bound in `Vec`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   |                ^ required by this bound in `Vec`\n \n error: aborting due to previous error\n "}, {"sha": "014eb2897b488871c5f0ea563ab1a30bea8119fd", "filename": "src/test/ui/issues/issue-23024.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -13,11 +13,6 @@ error[E0107]: missing generics for trait `Fn`\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n    |                                       ^^ expected 1 generic argument\n    |\n-note: trait defined here, with 1 generic parameter: `Args`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n-   |           ^^ ----\n help: add missing generic argument\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn<Args>)(3));"}, {"sha": "8f934481d85db6be1d86ae91290db0ab1fc87930", "filename": "src/test/ui/issues/issue-23966.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     \"\".chars().fold(|_, _| (), ());\n    = help: the trait `FnMut<(_, char)>` is not implemented for `()`\n note: required by a bound in `fold`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         F: FnMut(B, Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::fold`\n \n error: aborting due to previous error\n "}, {"sha": "7a0ca888d7471c3c87d81fa5ab6d5a418dedb47f", "filename": "src/test/ui/issues/issue-27033.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -3,11 +3,9 @@ error[E0530]: match bindings cannot shadow unit variants\n    |\n LL |         None @ _ => {}\n    |         ^^^^ cannot be named the same as a unit variant\n+  --> $SRC_DIR/std/src/prelude/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/std/src/prelude/mod.rs:LL:COL\n-   |\n-LL |     pub use super::v1::*;\n-   |             ------------ the unit variant `None` is defined here\n+   = note: the unit variant `None` is defined here\n \n error[E0530]: match bindings cannot shadow constants\n   --> $DIR/issue-27033.rs:7:9"}, {"sha": "2b142f688ecb9dcc8b844d6840767393999bc579", "filename": "src/test/ui/issues/issue-3044.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL | |     });\n    |\n note: associated function defined here\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn fold<B, F>(mut self, init: B, mut f: F) -> B\n-   |        ^^^^\n help: provide the argument\n    |\n LL ~     needlesArr.iter().fold(|x, y| {"}, {"sha": "b667ae0a789375cf62cf29eb460968793be24459", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,25 +8,18 @@ LL |         .cloned()\n                    found type `u8`\n note: required by a bound in `cloned`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         Self: Sized + Iterator<Item = &'a T>,\n-   |                                ^^^^^^^^^^^^ required by this bound in `Iterator::cloned`\n \n error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>`, but its trait bounds were not satisfied\n   --> $DIR/issue-31173.rs:12:10\n    |\n LL |         .collect();\n    |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>` due to unsatisfied trait bounds\n+  --> $SRC_DIR/core/src/iter/adapters/take_while.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/iter/adapters/take_while.rs:LL:COL\n-   |\n-LL | pub struct TakeWhile<I, P> {\n-   | -------------------------- doesn't satisfy `<_ as Iterator>::Item = &_`\n-   |\n-  ::: $SRC_DIR/core/src/iter/adapters/cloned.rs:LL:COL\n+   = note: doesn't satisfy `<_ as Iterator>::Item = &_`\n+  --> $SRC_DIR/core/src/iter/adapters/cloned.rs:LL:COL\n    |\n-LL | pub struct Cloned<I> {\n-   | -------------------- doesn't satisfy `_: Iterator`\n+   = note: doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]> as Iterator>::Item = &_`"}, {"sha": "b8362499b2d0aae7aa06c2c96410d6a8e130450b", "filename": "src/test/ui/issues/issue-32655.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,11 +6,9 @@ LL |         #[derive_Clone]\n ...\n LL | foo!();\n    | ------ in this macro invocation\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-   |\n-LL |     pub macro derive_const($item:item) {\n-   |     ---------------------- similarly named attribute macro `derive_const` defined here\n+   = note: similarly named attribute macro `derive_const` defined here\n    |\n    = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -19,11 +17,9 @@ error: cannot find attribute `derive_Clone` in this scope\n    |\n LL |     #[derive_Clone]\n    |       ^^^^^^^^^^^^ help: an attribute macro with a similar name exists: `derive_const`\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-   |\n-LL |     pub macro derive_const($item:item) {\n-   |     ---------------------- similarly named attribute macro `derive_const` defined here\n+   = note: similarly named attribute macro `derive_const` defined here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "49702c47658638bd28315df55d7b44ff327b5667", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,9 +8,6 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n                   found tuple `(&_, &_)`\n note: required by a bound in `cloned`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         Self: Sized + Iterator<Item = &'a T>,\n-   |                                ^^^^^^^^^^^^ required by this bound in `Iterator::cloned`\n \n error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n   --> $DIR/issue-33941.rs:6:14"}, {"sha": "9d2c315e4dbca92721686334dc03c64e4135aa47", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -32,9 +32,6 @@ LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_rece\n    |                                    `Iterator::Item` is `&(_, _, _)` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f2bf22227dbe47d787a16de1b781b7fd74927122", "filename": "src/test/ui/issues/issue-34721.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -13,7 +13,7 @@ LL |         };\n LL |         x.zero()\n    |         ^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `x`\n+note: `Foo::zero` takes ownership of the receiver `self`, which moves `x`\n   --> $DIR/issue-34721.rs:4:13\n    |\n LL |     fn zero(self) -> Self;"}, {"sha": "4d505784b86548137db79c04bdb22298b3f03433", "filename": "src/test/ui/issues/issue-38857.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -12,9 +12,6 @@ LL |     let a = std::sys::imp::process::process_common::StdioPipes { ..panic!()\n    |\n note: the module `sys` is defined here\n   --> $SRC_DIR/std/src/lib.rs:LL:COL\n-   |\n-LL | mod sys;\n-   | ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "da3e62e35dc81b804a35254dfe8f9797e619606c", "filename": "src/test/ui/issues/issue-48364.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,9 +10,6 @@ LL |     b\"\".starts_with(stringify!(foo))\n               found reference `&'static str`\n note: associated function defined here\n   --> $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-   |\n-LL |     pub fn starts_with(&self, needle: &[T]) -> bool\n-   |            ^^^^^^^^^^^\n    = note: this error originates in the macro `stringify` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "d8a833a86f511a7c9636baa4fb6c20a2efd29eee", "filename": "src/test/ui/issues/issue-51154.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-51154.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-51154.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51154.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -13,9 +13,6 @@ LL |     let _: Box<F> = Box::new(|| ());\n    = help: every closure has a distinct type and so could not always match the caller-chosen type of parameter `F`\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-   |\n-LL |     pub fn new(x: T) -> Self {\n-   |            ^^^\n \n error: aborting due to previous error\n "}, {"sha": "3aaf5fb3f3e3a56ad455db915356733b45482d61", "filename": "src/test/ui/issues/issue-61108.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,11 +9,8 @@ LL |     for l in bad_letters {\n LL |     bad_letters.push('s');\n    |     ^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `bad_letters`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `bad_letters`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n help: consider iterating over a slice of the `Vec<char>`'s content to avoid moving into the `for` loop\n    |\n LL |     for l in &bad_letters {"}, {"sha": "386ac794d7db32f77e643edb15d9e599a69d6cad", "filename": "src/test/ui/issues/issue-64559.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,11 +10,8 @@ LL |     let _closure = || orig;\n    |                    |\n    |                    value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `orig`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `orig`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n help: consider iterating over a slice of the `Vec<bool>`'s content to avoid moving into the `for` loop\n    |\n LL |     for _val in &orig {}"}, {"sha": "cec482a53baa91b3e962056d017c836247f8742a", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -15,9 +15,6 @@ LL |     let x2: Vec<f64> = x1.into_iter().collect();\n    |                           ^^^^^^^^^^^ `Iterator::Item` is `&f64` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n   --> $DIR/issue-66923-show-error-for-correct-call.rs:12:29\n@@ -37,9 +34,6 @@ LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n    |                 ^^^^^^^^^^^ `Iterator::Item` is `&f64` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c983026995b20b8b91992006de95ee9071f7d770", "filename": "src/test/ui/issues/issue-7607-1.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -3,11 +3,9 @@ error[E0412]: cannot find type `Fo` in this scope\n    |\n LL | impl Fo {\n    |      ^^ help: a trait with a similar name exists: `Fn`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n-   | -------------------------------------- similarly named trait `Fn` defined here\n+   = note: similarly named trait `Fn` defined here\n \n error: aborting due to previous error\n "}, {"sha": "572414df2bf9d6af0b37498610f95f9529cf0060", "filename": "src/test/ui/issues/issue-83924.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-83924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fissues%2Fissue-83924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83924.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,11 +10,8 @@ LL |     for n in v {\n LL |     for n in v {\n    |              ^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `v`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `v`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n help: consider creating a fresh reborrow of `v` here\n    |\n LL |     for n in &mut *v {"}, {"sha": "e38745cc10e1f3840e1081acc2e500700d827d15", "filename": "src/test/ui/iterators/collect-into-array.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,9 +7,6 @@ LL |     let whatever: [u32; 10] = (0..10).collect();\n    = help: the trait `FromIterator<{integer}>` is not implemented for `[u32; 10]`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to previous error\n "}, {"sha": "29fff8c51c63be7ca4ee0b096c52f1ee5d522bb5", "filename": "src/test/ui/iterators/collect-into-slice.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -17,9 +17,6 @@ LL |     let some_generated_vec = (0..10).collect();\n    = help: the trait `Sized` is not implemented for `[i32]`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                ^ required by this bound in `Iterator::collect`\n \n error[E0277]: a slice of type `[i32]` cannot be built since `[i32]` has no definite size\n   --> $DIR/collect-into-slice.rs:6:38\n@@ -30,9 +27,6 @@ LL |     let some_generated_vec = (0..10).collect();\n    = help: the trait `FromIterator<{integer}>` is not implemented for `[i32]`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "84bac7833f67b029b56e09e1b5c54ac2d4eaf946", "filename": "src/test/ui/iterators/invalid-iterator-chain.stderr", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -22,9 +22,6 @@ LL | |         });\n    | |__________^ `Iterator::Item` changed to `()` here\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         S: Sum<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `()`\n   --> $DIR/invalid-iterator-chain.rs:18:14\n@@ -57,9 +54,6 @@ LL |             .map(|x| { x; })\n    |              ^^^^^^^^^^^^^^^ `Iterator::Item` changed to `()` here\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         S: Sum<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `f64`\n   --> $DIR/invalid-iterator-chain.rs:28:14\n@@ -88,9 +82,6 @@ LL |             .map(|x| { x + 1.0 })\n    |              -------------------- `Iterator::Item` remains `f64` here\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         S: Sum<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `()`\n   --> $DIR/invalid-iterator-chain.rs:30:54\n@@ -112,9 +103,6 @@ LL |     println!(\"{}\", vec![0, 1].iter().map(|x| { x; }).sum::<i32>());\n    |                    this expression has type `Vec<{integer}>`\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         S: Sum<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `&()`\n   --> $DIR/invalid-iterator-chain.rs:31:40\n@@ -135,9 +123,6 @@ LL |     println!(\"{}\", vec![(), ()].iter().sum::<i32>());\n    |                    this expression has type `Vec<()>`\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         S: Sum<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `Vec<i32>` cannot be built from an iterator over elements of type `()`\n   --> $DIR/invalid-iterator-chain.rs:40:25\n@@ -167,9 +152,6 @@ LL |       let f = e.filter(|_| false);\n    |                 ----------------- `Iterator::Item` remains `()` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "a7d9c481a1a662cbceb90e4a820a47f2c96c9376", "filename": "src/test/ui/iterators/vec-on-unimplemented.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fiterators%2Fvec-on-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fiterators%2Fvec-on-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fvec-on-unimplemented.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -3,11 +3,9 @@ error[E0599]: `Vec<bool>` is not an iterator\n    |\n LL |     vec![true, false].map(|v| !v).collect::<Vec<_>>();\n    |                       ^^^ `Vec<bool>` is not an iterator; try calling `.into_iter()` or `.iter()`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   | ------------------------------------------------------------------------------------------------ doesn't satisfy `Vec<bool>: Iterator`\n+   = note: doesn't satisfy `Vec<bool>: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<bool>: Iterator`"}, {"sha": "0b206f31e7b6ebdd1f3c083c63eaa4bb9a947ce9", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,9 +7,6 @@ LL |         std::iter::empty().collect()\n    = help: the trait `FromIterator<_>` is not implemented for `Bar`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to previous error\n "}, {"sha": "d8ac39a4f27a37869e5b72fab32d9d38730e42a3", "filename": "src/test/ui/lazy-type-alias-impl-trait/recursion4.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,9 +7,6 @@ LL |     x = std::iter::empty().collect();\n    = help: the trait `FromIterator<_>` is not implemented for `Foo`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error[E0277]: a value of type `impl Debug` cannot be built from an iterator over elements of type `_`\n   --> $DIR/recursion4.rs:19:28\n@@ -20,9 +17,6 @@ LL |     x = std::iter::empty().collect();\n    = help: the trait `FromIterator<_>` is not implemented for `impl Debug`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f455dcb06f79dc97aa9e3072699154a3bb8121e5", "filename": "src/test/ui/limits/issue-55878.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,14 +1,8 @@\n error[E0080]: values of the type `[u8; SIZE]` are too big for the current architecture\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n note: inside `std::mem::size_of::<[u8; SIZE]>`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `main`\n   --> $DIR/issue-55878.rs:7:26\n    |"}, {"sha": "48fd4169da7c975aedc0bd24c0040d30c4d98f6c", "filename": "src/test/ui/lint/invalid_value.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -604,9 +604,6 @@ LL |         let _val: Result<i32, i32> = mem::uninitialized();\n    |\n note: enums with multiple inhabited variants have to be initialized to a variant\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: the type `&i32` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:152:34"}, {"sha": "747c38b800764a36a3f786d3fc76565fe3ffe0ac", "filename": "src/test/ui/lint/lint-const-item-mutation.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -108,9 +108,6 @@ LL |     VEC.push(0);\n    = note: the mutable reference will refer to this temporary, not the original `const` item\n note: mutable reference created due to call to this method\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL |     pub fn push(&mut self, value: T) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:31:1\n    |"}, {"sha": "e6a60d7bc4072378f2cf91a1e01e95f258d02a55", "filename": "src/test/ui/loops/issue-82916.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Floops%2Fissue-82916.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Floops%2Fissue-82916.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Fissue-82916.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,11 +9,8 @@ LL |     for y in x {\n LL |     let z = x;\n    |             ^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `x`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n help: consider iterating over a slice of the `Vec<S>`'s content to avoid moving into the `for` loop\n    |\n LL |     for y in &x {"}, {"sha": "287cd7d67044eb824eba79c53b7c89130d356c27", "filename": "src/test/ui/macros/format-args-temporaries-in-write.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -12,11 +12,6 @@ LL |     };\n    |     |\n    |     `mutex` dropped here while still borrowed\n    |\n-help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n-  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-   |\n-LL |         $dst.write_fmt($crate::format_args!($($arg)*));\n-   |                                                       +\n \n error[E0597]: `mutex` does not live long enough\n   --> $DIR/format-args-temporaries-in-write.rs:47:29\n@@ -32,11 +27,6 @@ LL |     };\n    |     |\n    |     `mutex` dropped here while still borrowed\n    |\n-help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n-  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-   |\n-LL |         $dst.write_fmt($crate::format_args_nl!($($arg)*));\n-   |                                                          +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d7c8aaae22e1e1cf0e4ff3d74488ee324c58443a", "filename": "src/test/ui/macros/macro-name-typo.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -3,11 +3,9 @@ error: cannot find macro `printlx` in this scope\n    |\n LL |     printlx!(\"oh noes!\");\n    |     ^^^^^^^ help: a macro with a similar name exists: `println`\n+  --> $SRC_DIR/std/src/macros.rs:LL:COL\n    |\n-  ::: $SRC_DIR/std/src/macros.rs:LL:COL\n-   |\n-LL | macro_rules! println {\n-   | -------------------- similarly named macro `println` defined here\n+   = note: similarly named macro `println` defined here\n \n error: aborting due to previous error\n "}, {"sha": "f1c3512bc9b8ee39fba96b9bf7b545e84d5ca1cc", "filename": "src/test/ui/macros/macro-path-prelude-fail-3.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -3,11 +3,9 @@ error: cannot find macro `inline` in this scope\n    |\n LL |     inline!();\n    |     ^^^^^^ help: a macro with a similar name exists: `line`\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-   |\n-LL |     macro_rules! line {\n-   |     ----------------- similarly named macro `line` defined here\n+   = note: similarly named macro `line` defined here\n    |\n    = note: `inline` is in scope, but it is an attribute: `#[inline]`\n "}, {"sha": "22f54e04e54c3dc118db8bef42677a0309d58d2e", "filename": "src/test/ui/macros/unknown-builtin.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,9 +7,6 @@ LL | macro_rules! unknown { () => () }\n error[E0773]: attempted to define built-in macro more than once\n   --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n-LL |     macro_rules! line {\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n note: previously defined here\n   --> $DIR/unknown-builtin.rs:9:1\n    |"}, {"sha": "6ff6fbabb4a5f3ac04ccdaae843f7b9a233310e2", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -24,9 +24,6 @@ LL | #[derive(Copy(Bad))]\n    |\n note: required by a bound in `Copy`\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | pub trait Copy: Clone {\n-   |                 ^^^^^ required by this bound in `Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Test1` with `#[derive(Clone)]`\n    |\n@@ -41,9 +38,6 @@ LL | #[derive(Copy=\"bad\")]\n    |\n note: required by a bound in `Copy`\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | pub trait Copy: Clone {\n-   |                 ^^^^^ required by this bound in `Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Test2` with `#[derive(Clone)]`\n    |"}, {"sha": "3f4e647491eb7390efc4ba288ba0a788b0bd2484", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -61,11 +61,8 @@ LL |      .take()\n    = note: the following trait bounds were not satisfied:\n            `Foo: Iterator`\n            which is required by `&mut Foo: Iterator`\n-note: the following trait must be implemented\n+note: the trait `Iterator` must be implemented\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL | pub trait Iterator {\n-   | ^^^^^^^^^^^^^^^^^^\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `take`, perhaps you need to implement it:\n            candidate #1: `Iterator`"}, {"sha": "25ad360b329aad8ecba8dbf4591f15c8a572f1e9", "filename": "src/test/ui/methods/method-call-lifetime-args-unresolved.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -11,11 +11,9 @@ warning: cannot specify lifetime arguments explicitly if late bound lifetime par\n    |\n LL |     0.clone::<'a>();\n    |               ^^\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |              - the late bound lifetime parameter is introduced here\n+   = note: the late bound lifetime parameter is introduced here\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>"}, {"sha": "2393791a9b2a81106ad423e13de7bb2f245282ff", "filename": "src/test/ui/mismatched_types/assignment-operator-unimplemented.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -11,11 +11,8 @@ note: an implementation of `AddAssign<_>` might be missing for `Foo`\n    |\n LL | struct Foo;\n    | ^^^^^^^^^^ must implement `AddAssign<_>`\n-note: the following trait must be implemented\n+note: the trait `AddAssign` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | pub trait AddAssign<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2ecab9f024a123a2de0b9d45eac0b9846ddfb9e8", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -128,9 +128,6 @@ LL | fn foo() {}\n    |\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n   --> $DIR/closure-arg-count.rs:27:57\n@@ -144,9 +141,6 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n    |\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:29:57\n@@ -161,9 +155,6 @@ LL | fn qux(x: usize, y: usize) {}\n    |\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0593]: function is expected to take 1 argument, but it takes 2 arguments\n   --> $DIR/closure-arg-count.rs:32:45\n@@ -175,9 +166,6 @@ LL |     let _it = vec![1, 2, 3].into_iter().map(usize::checked_add);\n    |\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/closure-arg-count.rs:35:10"}, {"sha": "ebff0c19e2bd2cf69e5712a020ad4aae0eeb0159", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,9 +10,6 @@ LL |     a.iter().map(|_: (u32, u32)| 45);\n               found closure signature `fn((u32, u32)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:4:14\n@@ -26,9 +23,6 @@ LL |     a.iter().map(|_: &(u16, u16)| 45);\n               found closure signature `for<'a> fn(&'a (u16, u16)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:5:14\n@@ -42,9 +36,6 @@ LL |     a.iter().map(|_: (u16, u16)| 45);\n               found closure signature `fn((u16, u16)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "680aff1726f9f905e056c800fad7a27206bfa5f5", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -13,9 +13,6 @@ LL |         Some(true)\n                         found type `bool` (`bool`)\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4afe0e6a664d472eaaaa28b25c414cb31f3e4def", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,9 +10,6 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n               found closure signature `for<'a> fn(&'a str) -> _`\n note: required by a bound in `filter`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         P: FnMut(&Self::Item) -> bool,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::filter`\n \n error[E0599]: the method `count` exists for struct `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-36053-2.rs:7:55\n@@ -22,11 +19,9 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                       |\n    |                                       doesn't satisfy `<_ as FnOnce<(&&str,)>>::Output = bool`\n    |                                       doesn't satisfy `_: FnMut<(&&str,)>`\n+  --> $SRC_DIR/core/src/iter/adapters/filter.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/iter/adapters/filter.rs:LL:COL\n-   |\n-LL | pub struct Filter<I, P> {\n-   | ----------------------- doesn't satisfy `_: Iterator`\n+   = note: doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `<[closure@$DIR/issue-36053-2.rs:7:39: 7:48] as FnOnce<(&&str,)>>::Output = bool`"}, {"sha": "a5f38dd53666151a272d2893d6c2447b0895f5e8", "filename": "src/test/ui/mismatched_types/issue-47706-trait.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706-trait.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,9 +10,6 @@ LL |         None::<()>.map(Self::f);\n    |\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |         F: ~const FnOnce(T) -> U,\n-   |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error: aborting due to previous error\n "}, {"sha": "d9d408844d0a49140737ca05f8007dfa68541174", "filename": "src/test/ui/mismatched_types/issue-47706.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -11,9 +11,6 @@ LL |         self.foo.map(Foo::new)\n    |\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |         F: ~const FnOnce(T) -> U,\n-   |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/issue-47706.rs:27:9"}, {"sha": "b75c7a99fdd334c98fc8d956c9310233a24fc7d0", "filename": "src/test/ui/mismatched_types/issue-74918-missing-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -14,11 +14,9 @@ error: `impl` item signature doesn't match `trait` item signature\n    |\n LL |     fn next(&mut self) -> Option<IteratorChunk<T, S>> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'1, T, S>>`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn next(&mut self) -> Option<Self::Item>;\n-   |     ----------------------------------------- expected `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'static, T, S>>`\n+   = note: expected `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'static, T, S>>`\n    |\n    = note: expected `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'static, T, S>>`\n               found `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'1, T, S>>`"}, {"sha": "d3b7525072ff4748addf112f24b185d8ac0e0238", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,9 +8,6 @@ LL |     a.unwrap();\n    = note: add `#[derive(Debug)]` to `Foo` or manually `impl Debug for Foo`\n note: required by a bound in `Result::<T, E>::unwrap`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |         E: fmt::Debug,\n-   |            ^^^^^^^^^^ required by this bound in `Result::<T, E>::unwrap`\n help: consider annotating `Foo` with `#[derive(Debug)]`\n    |\n LL | #[derive(Debug)]"}, {"sha": "46a383325526db3371d9a1eb99bf66d534fa1f4e", "filename": "src/test/ui/mismatched_types/similar_paths.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     Some(42_u8)\n    = note: enum `std::option::Option` and enum `Option` have similar names, but are actually distinct types\n note: enum `std::option::Option` is defined in crate `core`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL | pub enum Option<T> {\n-   | ^^^^^^^^^^^^^^^^^^\n note: enum `Option` is defined in the current crate\n   --> $DIR/similar_paths.rs:1:1\n    |"}, {"sha": "b3f95ee192a565e85a6bc7647068168fd46e203f", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,11 +6,8 @@ LL |     val.0.into_iter().next();\n LL |     val.0;\n    |     ^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `val.0`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `val.0`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n    = note: move occurs because `val.0` has type `Vec<bool>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `foo`\n@@ -23,7 +20,7 @@ LL |     foo.use_self();\n LL |     foo;\n    |     ^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `foo`\n+note: `Foo::use_self` takes ownership of the receiver `self`, which moves `foo`\n   --> $DIR/move-fn-self-receiver.rs:13:17\n    |\n LL |     fn use_self(self) {}\n@@ -49,7 +46,7 @@ LL |     boxed_foo.use_box_self();\n LL |     boxed_foo;\n    |     ^^^^^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `boxed_foo`\n+note: `Foo::use_box_self` takes ownership of the receiver `self`, which moves `boxed_foo`\n   --> $DIR/move-fn-self-receiver.rs:14:21\n    |\n LL |     fn use_box_self(self: Box<Self>) {}\n@@ -65,7 +62,7 @@ LL |     pin_box_foo.use_pin_box_self();\n LL |     pin_box_foo;\n    |     ^^^^^^^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `pin_box_foo`\n+note: `Foo::use_pin_box_self` takes ownership of the receiver `self`, which moves `pin_box_foo`\n   --> $DIR/move-fn-self-receiver.rs:15:25\n    |\n LL |     fn use_pin_box_self(self: Pin<Box<Self>>) {}\n@@ -91,7 +88,7 @@ LL |     rc_foo.use_rc_self();\n LL |     rc_foo;\n    |     ^^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `rc_foo`\n+note: `Foo::use_rc_self` takes ownership of the receiver `self`, which moves `rc_foo`\n   --> $DIR/move-fn-self-receiver.rs:16:20\n    |\n LL |     fn use_rc_self(self: Rc<Self>) {}\n@@ -113,9 +110,6 @@ LL |     foo_add;\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL |     fn add(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n \n error[E0382]: use of moved value: `implicit_into_iter`\n   --> $DIR/move-fn-self-receiver.rs:63:5\n@@ -157,7 +151,7 @@ LL |     for _val in container.custom_into_iter() {}\n LL |     container;\n    |     ^^^^^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `container`\n+note: `Container::custom_into_iter` takes ownership of the receiver `self`, which moves `container`\n   --> $DIR/move-fn-self-receiver.rs:23:25\n    |\n LL |     fn custom_into_iter(self) -> impl Iterator<Item = bool> {"}, {"sha": "0b1a623a01345d75294e7bbe31faf28963421782", "filename": "src/test/ui/moves/moves-based-on-type-access-to-field.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,11 +8,8 @@ LL |     consume(x.into_iter().next().unwrap());\n LL |     touch(&x[0]);\n    |            ^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `x`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n help: consider cloning the value if the performance cost is acceptable\n    |\n LL |     consume(x.clone().into_iter().next().unwrap());"}, {"sha": "ae76889f104c89a80910e73028a8675818094e8d", "filename": "src/test/ui/moves/moves-based-on-type-exprs.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -160,11 +160,8 @@ LL |     let _y = x.into_iter().next().unwrap();\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `x`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n help: consider cloning the value if the performance cost is acceptable\n    |\n LL |     let _y = x.clone().into_iter().next().unwrap();\n@@ -180,11 +177,8 @@ LL |     let _y = [x.into_iter().next().unwrap(); 1];\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `x`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n help: consider cloning the value if the performance cost is acceptable\n    |\n LL |     let _y = [x.clone().into_iter().next().unwrap(); 1];"}, {"sha": "de5c9c5601635eedef6cc14e9900d98d61414691", "filename": "src/test/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -46,9 +46,6 @@ LL |     [(); { for _ in 0usize.. {}; 0}];\n    |\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL | impl<I: Iterator> const IntoIterator for I {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n error[E0658]: mutable references are not allowed in constants"}, {"sha": "e148b983e8e9da2836c479cc0bfd21ee3b872b8f", "filename": "src/test/ui/never_type/issue-96335.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fnever_type%2Fissue-96335.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fnever_type%2Fissue-96335.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-96335.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -26,9 +26,6 @@ LL |     0.....{loop{}1};\n             found struct `RangeTo<{integer}>`\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/range.rs:LL:COL\n-   |\n-LL |     pub const fn new(start: Idx, end: Idx) -> Self {\n-   |                  ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "296e1fb3f26fe01319e36320608ee1c6365f6536", "filename": "src/test/ui/no-capture-arc.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fno-capture-arc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fno-capture-arc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-capture-arc.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -13,11 +13,6 @@ LL |     assert_eq!((*arc_v)[2], 3);\n    |                ^^^^^^^^ value borrowed here after move\n    |\n    = note: borrow occurs due to deref coercion to `Vec<i32>`\n-note: deref defined here\n-  --> $SRC_DIR/alloc/src/sync.rs:LL:COL\n-   |\n-LL |     type Target = T;\n-   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bcd481c33f361b374b7ee26aea00c8ce50a99a9e", "filename": "src/test/ui/no-reuse-move-arc.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fno-reuse-move-arc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fno-reuse-move-arc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-reuse-move-arc.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -13,11 +13,6 @@ LL |     assert_eq!((*arc_v)[2], 3);\n    |                ^^^^^^^^ value borrowed here after move\n    |\n    = note: borrow occurs due to deref coercion to `Vec<i32>`\n-note: deref defined here\n-  --> $SRC_DIR/alloc/src/sync.rs:LL:COL\n-   |\n-LL |     type Target = T;\n-   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "75561f4119aa543d432b53da3df5bdf2957a5074", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -31,9 +31,6 @@ LL |     thread::spawn(move|| {\n    |                   ^^^^^^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n-   |\n-LL |     F: Send + 'static,\n-   |        ^^^^ required by this bound in `spawn`\n \n error: aborting due to previous error\n "}, {"sha": "2a316dba778fe8f0163c50c5178e3ae22e287f7f", "filename": "src/test/ui/on-unimplemented/sum.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -17,9 +17,6 @@ LL |     vec![(), ()].iter().sum::<i32>();\n    |     this expression has type `Vec<()>`\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         S: Sum<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by multiplying all elements of type `&()` from an iterator\n   --> $DIR/sum.rs:7:25\n@@ -40,9 +37,6 @@ LL |     vec![(), ()].iter().product::<i32>();\n    |     this expression has type `Vec<()>`\n note: required by a bound in `std::iter::Iterator::product`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         P: Product<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::product`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "10d42b7e3c0b8de4892a98ee411bb38e709c8198", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -35,11 +35,8 @@ note: an implementation of `BitOr<_>` might be missing for `E`\n    |\n LL | enum E { A, B }\n    | ^^^^^^ must implement `BitOr<_>`\n-note: the following trait must be implemented\n+note: the trait `BitOr` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL | pub trait BitOr<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2e16007825935a159bf5d213f332dd096b54d483", "filename": "src/test/ui/overloaded/overloaded-calls-nontuple.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL | impl FnMut<isize> for S {\n    |\n note: required by a bound in `FnMut`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait FnMut<Args: Tuple>: FnOnce<Args> {\n-   |                       ^^^^^ required by this bound in `FnMut`\n \n error[E0059]: type parameter to bare `FnOnce` trait must be a tuple\n   --> $DIR/overloaded-calls-nontuple.rs:18:6\n@@ -18,9 +15,6 @@ LL | impl FnOnce<isize> for S {\n    |\n note: required by a bound in `FnOnce`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait FnOnce<Args: Tuple> {\n-   |                        ^^^^^ required by this bound in `FnOnce`\n \n error[E0277]: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n   --> $DIR/overloaded-calls-nontuple.rs:12:5"}, {"sha": "07a203bf416eada152c3ca9da8e11d59d0c7ccd3", "filename": "src/test/ui/parser/issues/issue-62894.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62894.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62894.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62894.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -42,11 +42,9 @@ LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n LL |\n LL | fn main() {}\n    | ^^ unexpected token\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-   |\n-LL |     ($left:expr, $right:expr $(,)?) => {\n-   |      ---------- while parsing argument for this `expr` macro fragment\n+   = note: while parsing argument for this `expr` macro fragment\n \n error: aborting due to 4 previous errors\n "}, {"sha": "79643660e8b0078c73e70de919e0fd285dc0f415", "filename": "src/test/ui/parser/kw-in-trait-bounds.stderr", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -91,44 +91,36 @@ error[E0405]: cannot find trait `r#fn` in this scope\n    |\n LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n    |          ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n-   | -------------------------------------- similarly named trait `Fn` defined here\n+   = note: similarly named trait `Fn` defined here\n \n error[E0405]: cannot find trait `r#fn` in this scope\n   --> $DIR/kw-in-trait-bounds.rs:17:4\n    |\n LL | G: fn(),\n    |    ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n-   | -------------------------------------- similarly named trait `Fn` defined here\n+   = note: similarly named trait `Fn` defined here\n \n error[E0405]: cannot find trait `r#fn` in this scope\n   --> $DIR/kw-in-trait-bounds.rs:3:27\n    |\n LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n    |                           ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n-   | -------------------------------------- similarly named trait `Fn` defined here\n+   = note: similarly named trait `Fn` defined here\n \n error[E0405]: cannot find trait `r#fn` in this scope\n   --> $DIR/kw-in-trait-bounds.rs:3:41\n    |\n LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n    |                                         ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n-   | -------------------------------------- similarly named trait `Fn` defined here\n+   = note: similarly named trait `Fn` defined here\n \n error[E0405]: cannot find trait `r#struct` in this scope\n   --> $DIR/kw-in-trait-bounds.rs:24:10"}, {"sha": "2a016048f2f7a03c38464de94af8c4ba0d0021a0", "filename": "src/test/ui/pattern/suggest-adding-appropriate-missing-pattern-excluding-comments.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,12 +6,9 @@ LL |     match Some(1) {\n    |\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | pub enum Option<T> {\n-   | ------------------\n-...\n-LL |     None,\n-   |     ^^^^ not covered\n+   = note: not covered\n    = note: the matched value is of type `Option<i32>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "17e1a2304a13c0c8011481553170e1886fc11e5e", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -66,12 +66,9 @@ LL |     match None {\n    |\n note: `Option<HiddenEnum>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | pub enum Option<T> {\n-   | ------------------\n-...\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^ not covered\n+   = note: not covered\n    = note: the matched value is of type `Option<HiddenEnum>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |"}, {"sha": "12113957d6340dbc0862060d0b2072ed0ba124d4", "filename": "src/test/ui/pattern/usefulness/issue-35609.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -107,9 +107,6 @@ LL |     match Some(A) {\n    |\n note: `Option<Enum>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL | pub enum Option<T> {\n-   | ^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `Option<Enum>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |"}, {"sha": "59d7bcd4b5e799d443b90374b7b18d6b2eef5d10", "filename": "src/test/ui/pattern/usefulness/issue-3601.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,12 +6,6 @@ LL |         box NodeKind::Element(ed) => match ed.kind {\n    |\n note: `Box<ElementKind>` defined here\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-   |\n-LL | / pub struct Box<\n-LL | |     T: ?Sized,\n-LL | |     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n-LL | | >(Unique<T>, A);\n-   | |_^\n    = note: the matched value is of type `Box<ElementKind>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "e4dd35a59958ef37f2dc2ed58508168472bec0af", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -19,15 +19,11 @@ LL |     match Some(Some(North)) {\n    |\n note: `Option<Option<Direction>>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | pub enum Option<T> {\n-   | ------------------\n-...\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^\n-   |     |\n-   |     not covered\n-   |     not covered\n+   = note: not covered\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Option<Option<Direction>>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "86f75d15cfde7736c2294be1373bd6c9b605993b", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,12 +6,9 @@ LL |     match private::DATA {\n    |\n note: `Option<Private>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | pub enum Option<T> {\n-   | ------------------\n-...\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^ not covered\n+   = note: not covered\n    = note: the matched value is of type `Option<Private>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "e2260f50bfef2b462fa795ace1352d6a714f7916", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -36,12 +36,9 @@ LL |     match Some(10) {\n    |\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | pub enum Option<T> {\n-   | ------------------\n-...\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^ not covered\n+   = note: not covered\n    = note: the matched value is of type `Option<i32>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "c686a21772e0ed4e7ebfb3026779ff712d183222", "filename": "src/test/ui/privacy/associated-item-privacy-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -19,9 +19,9 @@ mod priv_trait {\n         Pub.method();\n         //~^ ERROR type `for<'a> fn(&'a Self) {<Self as PrivTr>::method}` is private\n         <Pub as PrivTr>::CONST;\n-        //~^ ERROR associated constant `<Pub as PrivTr>::CONST` is private\n+        //~^ ERROR associated constant `PrivTr::CONST` is private\n         let _: <Pub as PrivTr>::AssocTy;\n-        //~^ ERROR associated type `<Pub as PrivTr>::AssocTy` is private\n+        //~^ ERROR associated type `PrivTr::AssocTy` is private\n         pub type InSignatureTy = <Pub as PrivTr>::AssocTy;\n         //~^ ERROR trait `PrivTr` is private\n         pub trait InSignatureTr: PrivTr {}"}, {"sha": "eb905bf7ef85890d7783430b9db3e206c5eda39f", "filename": "src/test/ui/privacy/associated-item-privacy-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -31,7 +31,7 @@ LL |     priv_trait::mac!();\n    |\n    = note: this error originates in the macro `priv_trait::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: associated constant `<Pub as PrivTr>::CONST` is private\n+error: associated constant `PrivTr::CONST` is private\n   --> $DIR/associated-item-privacy-trait.rs:21:9\n    |\n LL |         <Pub as PrivTr>::CONST;\n@@ -42,7 +42,7 @@ LL |     priv_trait::mac!();\n    |\n    = note: this error originates in the macro `priv_trait::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: associated type `<Pub as PrivTr>::AssocTy` is private\n+error: associated type `PrivTr::AssocTy` is private\n   --> $DIR/associated-item-privacy-trait.rs:23:16\n    |\n LL |         let _: <Pub as PrivTr>::AssocTy;"}, {"sha": "cdbdcf60b2c540f78ffe6643c9b4745a38957ff1", "filename": "src/test/ui/privacy/private-inferred-type-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,7 +1,7 @@\n // aux-build:private-inferred-type.rs\n \n // error-pattern:type `fn() {ext::priv_fn}` is private\n-// error-pattern:static `PRIV_STATIC` is private\n+// error-pattern:static `ext::PRIV_STATIC` is private\n // error-pattern:type `ext::PrivEnum` is private\n // error-pattern:type `fn() {<u8 as ext::PrivTrait>::method}` is private\n // error-pattern:type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct}` is private"}, {"sha": "42faeb4bf341dea982b44442d2cbec0061059d1a", "filename": "src/test/ui/privacy/private-inferred-type-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,7 +6,7 @@ LL |     ext::m!();\n    |\n    = note: this error originates in the macro `ext::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: static `PRIV_STATIC` is private\n+error: static `ext::PRIV_STATIC` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();"}, {"sha": "14e5df21ef651a2e5d3c24e520770a77720b4105", "filename": "src/test/ui/proc-macro/issue-104884-trait-impl-sugg-err.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fproc-macro%2Fissue-104884-trait-impl-sugg-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fproc-macro%2Fissue-104884-trait-impl-sugg-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-104884-trait-impl-sugg-err.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,9 +7,6 @@ LL | #[derive(PartialOrd, AddImpl)]\n    = help: the trait `PartialEq` is not implemented for `PriorityQueue<T>`\n note: required by a bound in `PartialOrd`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n-   |                                           ^^^^^^^^^^^^^^ required by this bound in `PartialOrd`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `PriorityQueue<T>: Eq` is not satisfied\n@@ -20,9 +17,6 @@ LL | #[derive(PartialOrd, AddImpl)]\n    |\n note: required by a bound in `Ord`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub trait Ord: Eq + PartialOrd<Self> {\n-   |                ^^ required by this bound in `Ord`\n    = note: this error originates in the derive macro `AddImpl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `T` with `T`\n@@ -38,9 +32,6 @@ LL | #[derive(PartialOrd, AddImpl)]\n    |          ^^^^^^^^^^\n note: required by a bound in `Ord`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub trait Ord: Eq + PartialOrd<Self> {\n-   |                     ^^^^^^^^^^^^^^^^ required by this bound in `Ord`\n    = note: this error originates in the derive macro `AddImpl` which comes from the expansion of the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "a3b27fd7bcc1bd5997b83c9fb567a6a0b9973ca6", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -144,11 +144,9 @@ LL |     parent_source_spans!($($tokens)*);\n ...\n LL |     one!(\"hello\", \"world\");\n    |     ---------------------- in this macro invocation\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     -- similarly named tuple variant `Ok` defined here\n+   = note: similarly named tuple variant `Ok` defined here\n    |\n    = note: this error originates in the macro `parent_source_spans` which comes from the expansion of the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -160,11 +158,9 @@ LL |     parent_source_spans!($($tokens)*);\n ...\n LL |     two!(\"yay\", \"rust\");\n    |     ------------------- in this macro invocation\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     -- similarly named tuple variant `Ok` defined here\n+   = note: similarly named tuple variant `Ok` defined here\n    |\n    = note: this error originates in the macro `parent_source_spans` which comes from the expansion of the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -176,11 +172,9 @@ LL |     parent_source_spans!($($tokens)*);\n ...\n LL |     three!(\"hip\", \"hop\");\n    |     -------------------- in this macro invocation\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     -- similarly named tuple variant `Ok` defined here\n+   = note: similarly named tuple variant `Ok` defined here\n    |\n    = note: this error originates in the macro `parent_source_spans` which comes from the expansion of the macro `three` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3c3f24d0ff22e319e72c930a6b0462aa69423db9", "filename": "src/test/ui/proc-macro/resolve-error.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -72,22 +72,18 @@ error: cannot find derive macro `Dlone` in this scope\n    |\n LL | #[derive(Dlone)]\n    |          ^^^^^ help: a derive macro with a similar name exists: `Clone`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL | pub macro Clone($item:item) {\n-   | --------------- similarly named derive macro `Clone` defined here\n+   = note: similarly named derive macro `Clone` defined here\n \n error: cannot find derive macro `Dlone` in this scope\n   --> $DIR/resolve-error.rs:35:10\n    |\n LL | #[derive(Dlone)]\n    |          ^^^^^ help: a derive macro with a similar name exists: `Clone`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL | pub macro Clone($item:item) {\n-   | --------------- similarly named derive macro `Clone` defined here\n+   = note: similarly named derive macro `Clone` defined here\n \n error: cannot find attribute `FooWithLongNan` in this scope\n   --> $DIR/resolve-error.rs:32:3"}, {"sha": "79f2001da005510f915eb3f696d550df0364f3c8", "filename": "src/test/ui/proc-macro/signature.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -14,9 +14,6 @@ LL | | }\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `ProcMacro::custom_derive`\n   --> $SRC_DIR/proc_macro/src/bridge/client.rs:LL:COL\n-   |\n-LL |         expand: impl Fn(crate::TokenStream) -> crate::TokenStream + Copy,\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ProcMacro::custom_derive`\n \n error: aborting due to previous error\n "}, {"sha": "3f04ba866b7d6952addcbf0faf54f006c94b903c", "filename": "src/test/ui/proc-macro/span-api-tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fproc-macro%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fproc-macro%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-api-tests.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -2,6 +2,7 @@\n // ignore-pretty\n // aux-build:span-api-tests.rs\n // aux-build:span-test-macros.rs\n+// compile-flags: -Ztranslate-remapped-path-to-local-path=yes\n \n #[macro_use]\n extern crate span_test_macros;"}, {"sha": "3956390368f7f132ab5b975d168a06516ba8ae4f", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -32,9 +32,6 @@ LL |     let range = *arr..;\n    = help: the trait `Sized` is not implemented for `[{integer}]`\n note: required by a bound in `RangeFrom`\n   --> $SRC_DIR/core/src/ops/range.rs:LL:COL\n-   |\n-LL | pub struct RangeFrom<Idx> {\n-   |                      ^^^ required by this bound in `RangeFrom`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "86ad6aa847c9fe5adfeb0947cd19d921ffe62b3d", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,12 +8,9 @@ LL |     let Ok(x) = res;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n note: `Result<u32, &R<'_>>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n+  ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-LL | pub enum Result<T, E> {\n-   | ---------------------\n-...\n-LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n-   |     ^^^ not covered\n+   = note: not covered\n    = note: the matched value is of type `Result<u32, &R<'_>>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |"}, {"sha": "cf478210132ede5fbc5eeaffb7f8168dd08c27ef", "filename": "src/test/ui/resolve/levenshtein.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -18,11 +18,9 @@ error[E0412]: cannot find type `Opiton` in this scope\n    |\n LL | type B = Opiton<u8>; // Misspelled type name from the prelude.\n    |          ^^^^^^ help: an enum with a similar name exists: `Option`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL | pub enum Option<T> {\n-   | ------------------ similarly named enum `Option` defined here\n+   = note: similarly named enum `Option` defined here\n \n error[E0412]: cannot find type `Baz` in this scope\n   --> $DIR/levenshtein.rs:16:14"}, {"sha": "964302e924c8ae7cdd987f2590bd4adfb52949e1", "filename": "src/test/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -28,9 +28,6 @@ LL |     std::mem::size_of(u16);\n    |\n note: function defined here\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |              ^^^^^^^\n help: remove the extra argument\n    |\n LL |     std::mem::size_of();"}, {"sha": "a19750cc73aa559b5d33ae614d3cf920134b95c0", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL | fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n    = note: required for `Result<f32, ParseFloatError>` to implement `Termination`\n note: required by a bound in `assert_test_result`\n   --> $SRC_DIR/test/src/lib.rs:LL:COL\n-   |\n-LL | pub fn assert_test_result<T: Termination>(result: T) -> Result<(), String> {\n-   |                              ^^^^^^^^^^^ required by this bound in `assert_test_result`\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "e97fdcce1c18f0913a55090db7eb2d05ffd80ec2", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,11 +8,6 @@ LL |     let _ = dbg!(a);\n LL |     let _ = dbg!(a);\n    |                  ^ value used here after move\n    |\n-help: borrow this binding in the pattern to avoid moving the value\n-  --> $SRC_DIR/std/src/macros.rs:LL:COL\n-   |\n-LL |             ref tmp => {\n-   |             +++\n \n error: aborting due to previous error\n "}, {"sha": "5d4d692b2cffb7e5c39ccc0754002018c7ca9ed1", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -26,11 +26,8 @@ note: an implementation of `Add<_>` might be missing for `World`\n    |\n LL | enum World {\n    | ^^^^^^^^^^ must implement `Add<_>`\n-note: the following trait must be implemented\n+note: the trait `Add` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | pub trait Add<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: cannot add `String` to `&str`\n   --> $DIR/issue-39018.rs:11:22"}, {"sha": "8014f3796250a1c5c217a24c6e0977c089abbf88", "filename": "src/test/ui/span/issue-71363.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/FAKE_PREFIX -Z translate-remapped-path-to-local-path=no -Z ui-testing=no\n+// compile-flags: -Z ui-testing=no\n \n struct MyError;\n impl std::error::Error for MyError {}"}, {"sha": "48a2e763af615a23e15104e5ffcf57f0c127cf30", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL |     let _: Result<(), String> = Ok();\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^\n help: provide the argument\n    |\n LL |     let _: Result<(), String> = Ok(());"}, {"sha": "37788612f4371dd6ce95af228211a59799424d6a", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -27,7 +27,7 @@ LL | default impl<T> Foo for T {\n    | ^^^^^^^^^^^^^^^^---^^^^^-\n    | |\n    | unsatisfied trait bound introduced here\n-note: the following trait must be implemented\n+note: the trait `Foo` must be implemented\n   --> $DIR/specialization-trait-not-implemented.rs:7:1\n    |\n LL | trait Foo {"}, {"sha": "2f02a24960e01af20612e1bd026baf58e6df45f9", "filename": "src/test/ui/stability-attribute/stability-in-private-module.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-in-private-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-in-private-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-in-private-module.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL |     let _ = std::thread::thread_info::current_thread();\n    |\n note: the module `thread_info` is defined here\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n-   |\n-LL | use crate::sys_common::thread_info;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cb1a6fcacfc9b5d24d8d6caae1a5f53e63304074", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -24,9 +24,6 @@ LL |     let _ = s.get(4);\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n note: required by a bound in `core::str::<impl str>::get`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n-   |\n-LL |     pub const fn get<I: ~const SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-idx.rs:5:29\n@@ -42,9 +39,6 @@ LL |     let _ = s.get_unchecked(4);\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n note: required by a bound in `core::str::<impl str>::get_unchecked`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n-   |\n-LL |     pub const unsafe fn get_unchecked<I: ~const SliceIndex<str>>(&self, i: I) -> &I::Output {\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-idx.rs:6:19"}, {"sha": "ca4b86ba3065b79af5c536f86b0f061e3743cd8e", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -48,9 +48,6 @@ LL |     s.get_mut(1);\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n note: required by a bound in `core::str::<impl str>::get_mut`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n-   |\n-LL |     pub const fn get_mut<I: ~const SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_mut`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-mut-idx.rs:11:25\n@@ -66,9 +63,6 @@ LL |     s.get_unchecked_mut(1);\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n note: required by a bound in `core::str::<impl str>::get_unchecked_mut`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n-   |\n-LL |     pub const unsafe fn get_unchecked_mut<I: ~const SliceIndex<str>>(\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked_mut`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-mut-idx.rs:13:7"}, {"sha": "44a39efdf25425015543ec99292f7e9c78ad7ed3", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -13,9 +13,6 @@ LL |     let _: Option<(i32, bool)> = Some(1, 2);\n                found type `{integer}`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^\n help: remove the extra argument\n    |\n LL |     let _: Option<(i32, bool)> = Some(/* (i32, bool) */);\n@@ -52,9 +49,6 @@ LL |     let _: Option<(i8,)> = Some();\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^\n help: provide the argument\n    |\n LL |     let _: Option<(i8,)> = Some(/* (i8,) */);\n@@ -72,9 +66,6 @@ LL |     let _: Option<(i32,)> = Some(5_usize);\n                found type `usize`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/args-instead-of-tuple-errors.rs:17:34\n@@ -88,9 +79,6 @@ LL |     let _: Option<(i32,)> = Some((5_usize));\n                found type `usize`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "c8499010d6896365bccf42f5689638ca088156e0", "filename": "src/test/ui/suggestions/args-instead-of-tuple.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL |     let _: Result<(i32, i8), ()> = Ok(1, 2);\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^\n help: wrap these arguments in parentheses to construct a tuple\n    |\n LL |     let _: Result<(i32, i8), ()> = Ok((1, 2));\n@@ -22,9 +19,6 @@ LL |     let _: Option<(i32, i8, &'static str)> = Some(1, 2, \"hi\");\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^\n help: wrap these arguments in parentheses to construct a tuple\n    |\n LL |     let _: Option<(i32, i8, &'static str)> = Some((1, 2, \"hi\"));\n@@ -38,9 +32,6 @@ LL |     let _: Option<()> = Some();\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^\n help: provide the argument\n    |\n LL |     let _: Option<()> = Some(());\n@@ -58,9 +49,6 @@ LL |     let _: Option<(i32,)> = Some(3);\n                found type `{integer}`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     let _: Option<(i32,)> = Some((3,));\n@@ -78,9 +66,6 @@ LL |     let _: Option<(i32,)> = Some((3));\n                found type `{integer}`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     let _: Option<(i32,)> = Some((3,));"}, {"sha": "e2129b4502abea13774d1917bbf23c3eedbb8bee", "filename": "src/test/ui/suggestions/as-ref-2.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,11 +10,8 @@ LL |     let _x: Option<Struct> = foo.map(|s| bar(&s));\n LL |     let _y = foo;\n    |              ^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `foo`\n+note: `Option::<T>::map` takes ownership of the receiver `self`, which moves `foo`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     pub const fn map<U, F>(self, f: F) -> Option<U>\n-   |                            ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b871c9b45a56c7c675c5d8ec6476c41298585bc0", "filename": "src/test/ui/suggestions/attribute-typos.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -15,11 +15,9 @@ error: cannot find attribute `tests` in this scope\n    |\n LL | #[tests]\n    |   ^^^^^ help: an attribute macro with a similar name exists: `test`\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-   |\n-LL |     pub macro test($item:item) {\n-   |     -------------- similarly named attribute macro `test` defined here\n+   = note: similarly named attribute macro `test` defined here\n \n error: cannot find attribute `deprcated` in this scope\n   --> $DIR/attribute-typos.rs:1:3"}, {"sha": "cbdb94877bdb7fbf897d0020c928bc6d718646a8", "filename": "src/test/ui/suggestions/borrow-for-loop-head.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -16,11 +16,8 @@ LL |     for i in &a {\n LL |         for j in a {\n    |                  ^ `a` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\n-note: this function takes ownership of the receiver `self`, which moves `a`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `a`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n help: consider iterating over a slice of the `Vec<i32>`'s content to avoid moving into the `for` loop\n    |\n LL |         for j in &a {"}, {"sha": "cd27947f02fad5cc111ec107e250eaf82c8fb4ce", "filename": "src/test/ui/suggestions/bound-suggestions.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -78,9 +78,6 @@ LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |\n note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Foo<T>: Sized {\n@@ -94,9 +91,6 @@ LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |\n note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Bar: std::fmt::Display + Sized {\n@@ -110,9 +104,6 @@ LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |\n note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Baz: Sized where Self: std::fmt::Display {\n@@ -126,9 +117,6 @@ LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |\n note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Qux<T>: Sized where Self: std::fmt::Display {\n@@ -142,9 +130,6 @@ LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |\n note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Bat<T>: std::fmt::Display + Sized {"}, {"sha": "0a18b770405c1d2629d319478030493fcd6b3f3a", "filename": "src/test/ui/suggestions/derive-clone-for-eq.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -11,9 +11,6 @@ LL | impl<T: Clone, U> PartialEq<U> for Struct<T>\n    |                   ^^^^^^^^^^^^     ^^^^^^^^^\n note: required by a bound in `Eq`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub trait Eq: PartialEq<Self> {\n-   |               ^^^^^^^^^^^^^^^ required by this bound in `Eq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |"}, {"sha": "14e8a2675dd18dca6b2dc57fc4c4a973d1d2ebee", "filename": "src/test/ui/suggestions/derive-trait-for-method-call.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -20,11 +20,8 @@ LL |     let y = x.test();\n            `Enum: Clone`\n            `Enum: Default`\n            `CloneEnum: Default`\n-note: the following trait must be implemented\n+note: the trait `Default` must be implemented\n   --> $SRC_DIR/core/src/default.rs:LL:COL\n-   |\n-LL | pub trait Default: Sized {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider annotating `Enum` with `#[derive(Clone)]`\n    |\n LL | #[derive(Clone)]\n@@ -69,16 +66,12 @@ LL | struct Foo<X, Y> (X, Y);\n ...\n LL |     let y = x.test();\n    |               ^^^^ method cannot be called on `Foo<Vec<Enum>, Instant>` due to unsatisfied trait bounds\n+  --> $SRC_DIR/std/src/time.rs:LL:COL\n    |\n-  ::: $SRC_DIR/std/src/time.rs:LL:COL\n-   |\n-LL | pub struct Instant(time::Instant);\n-   | ------------------ doesn't satisfy `Instant: Default`\n-   |\n-  ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   = note: doesn't satisfy `Instant: Default`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n-LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   | ------------------------------------------------------------------------------------------------ doesn't satisfy `Vec<Enum>: Clone`\n+   = note: doesn't satisfy `Vec<Enum>: Clone`\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<Enum>: Clone`"}, {"sha": "0cd6267b3b313ebfa8f50125af998bdef20a1d8f", "filename": "src/test/ui/suggestions/do-not-attempt-to-add-suggestions-with-no-changes.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fdo-not-attempt-to-add-suggestions-with-no-changes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fdo-not-attempt-to-add-suggestions-with-no-changes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdo-not-attempt-to-add-suggestions-with-no-changes.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -3,11 +3,9 @@ error[E0573]: expected type, found module `result`\n    |\n LL | impl result {\n    |      ^^^^^^ help: an enum with a similar name exists: `Result`\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   | --------------------- similarly named enum `Result` defined here\n+   = note: similarly named enum `Result` defined here\n \n error[E0573]: expected type, found variant `Err`\n   --> $DIR/do-not-attempt-to-add-suggestions-with-no-changes.rs:3:25"}, {"sha": "b1e04dab8f623853794cc53cc468b1fdaf3a876d", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -41,9 +41,6 @@ LL |     Pin::new(x)\n            found type parameter `F`\n note: associated function defined here\n   --> $SRC_DIR/core/src/pin.rs:LL:COL\n-   |\n-LL |     pub const fn new(pointer: P) -> Pin<P> {\n-   |                  ^^^\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:19:14\n@@ -56,9 +53,6 @@ LL |     Pin::new(x)\n    = note: consider using `Box::pin`\n note: required by a bound in `Pin::<P>::new`\n   --> $SRC_DIR/core/src/pin.rs:LL:COL\n-   |\n-LL | impl<P: Deref<Target: Unpin>> Pin<P> {\n-   |                       ^^^^^ required by this bound in `Pin::<P>::new`\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:24:14\n@@ -71,9 +65,6 @@ LL |     Pin::new(Box::new(x))\n    = note: consider using `Box::pin`\n note: required by a bound in `Pin::<P>::new`\n   --> $SRC_DIR/core/src/pin.rs:LL:COL\n-   |\n-LL | impl<P: Deref<Target: Unpin>> Pin<P> {\n-   |                       ^^^^^ required by this bound in `Pin::<P>::new`\n \n error[E0308]: mismatched types\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:28:5\n@@ -90,9 +81,6 @@ LL | |     }\n            found `async` block `[async block@$DIR/expected-boxed-future-isnt-pinned.rs:28:5: 30:6]`\n note: function defined here\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n-   |              ^^^^^^^^^^^^^^^\n help: you need to pin and box this expression\n    |\n LL ~     Box::pin(async {"}, {"sha": "c5b81e6b87174d209ce65331def3447c7f8df707", "filename": "src/test/ui/suggestions/for-i-in-vec.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,11 +7,8 @@ LL |         for _ in self.v {\n    |                  `self.v` moved due to this implicit call to `.into_iter()`\n    |                  move occurs because `self.v` has type `Vec<u32>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves `self.v`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `self.v`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n help: consider iterating over a slice of the `Vec<u32>`'s content to avoid moving into the `for` loop\n    |\n LL |         for _ in &self.v {\n@@ -40,11 +37,8 @@ LL |     for loader in *LOADERS {\n    |                   value moved due to this implicit call to `.into_iter()`\n    |                   move occurs because value has type `Vec<&u8>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves value\n+note: `into_iter` takes ownership of the receiver `self`, which moves value\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n help: consider iterating over a slice of the `Vec<&u8>`'s content to avoid moving into the `for` loop\n    |\n LL |     for loader in &*LOADERS {"}, {"sha": "7791b308d5d0e597a4263c6afb85570b07f1158a", "filename": "src/test/ui/suggestions/imm-ref-trait-object.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -3,11 +3,9 @@ error: the `min` method cannot be invoked on a trait object\n    |\n LL |      t.min().unwrap()\n    |        ^^^\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |         Self: Sized,\n-   |               ----- this has a `Sized` requirement\n+   = note: this has a `Sized` requirement\n    |\n    = note: you need `&mut dyn Iterator<Item = &u64>` instead of `&dyn Iterator<Item = &u64>`\n "}, {"sha": "f159b51a26969fec807e8cd5cb7c8dfde6fe85c9", "filename": "src/test/ui/suggestions/import-trait-for-method-call.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -3,11 +3,9 @@ error[E0599]: no method named `finish` found for struct `DefaultHasher` in the c\n    |\n LL |     h.finish()\n    |       ^^^^^^ method not found in `DefaultHasher`\n+  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n-   |\n-LL |     fn finish(&self) -> u64;\n-   |        ------ the method is available for `DefaultHasher` here\n+   = note: the method is available for `DefaultHasher` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "79812a2985ef9444f0d46f15a698e19916fbeed3", "filename": "src/test/ui/suggestions/issue-104287.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -11,12 +11,6 @@ LL |     simd_gt::<()>(x);\n    |     ^^^^^^^------ help: remove these generics\n    |     |\n    |     expected 0 generic arguments\n-   |\n-note: associated function defined here, with 0 generic parameters\n-  --> $SRC_DIR/core/src/../../portable-simd/crates/core_simd/src/ord.rs:LL:COL\n-   |\n-LL |     fn simd_gt(self, other: Self) -> Self::Mask;\n-   |        ^^^^^^^\n \n error[E0425]: cannot find function `simd_gt` in this scope\n   --> $DIR/issue-104287.rs:6:5"}, {"sha": "b6e271de8076c700487ebea36b4c6c0c04c160f1", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,9 +10,6 @@ LL |     println!(\"{:?}\", line.find(pattern));\n    = note: required for `String` to implement `Pattern<'_>`\n note: required by a bound in `core::str::<impl str>::find`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n-   |\n-LL |     pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {\n-   |                        ^^^^^^^^^^^ required by this bound in `core::str::<impl str>::find`\n help: consider borrowing here\n    |\n LL |     println!(\"{:?}\", line.find(&pattern));"}, {"sha": "93d8da226c817f35f99cd09ca8e9329881d4a47d", "filename": "src/test/ui/suggestions/issue-89064.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -62,11 +62,6 @@ error[E0107]: this associated function takes 0 generic arguments but 1 generic a\n LL |     let _ = 42.into::<Option<_>>();\n    |                ^^^^ expected 0 generic arguments\n    |\n-note: associated function defined here, with 0 generic parameters\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn into(self) -> T;\n-   |        ^^^^\n help: consider moving this generic argument to the `Into` trait, which takes up to 1 argument\n    |\n LL |     let _ = Into::<Option<_>>::into(42);"}, {"sha": "2cb53ecce10408cff69354ca06b2bed9302e9464", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     let fp = BufWriter::new(fp);\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n note: required by a bound in `BufWriter::<W>::new`\n   --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n-   |\n-LL | impl<W: Write> BufWriter<W> {\n-   |         ^^^^^ required by this bound in `BufWriter::<W>::new`\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n   --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n@@ -22,20 +19,15 @@ LL |     let fp = BufWriter::new(fp);\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n note: required by a bound in `BufWriter`\n   --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n-   |\n-LL | pub struct BufWriter<W: Write> {\n-   |                         ^^^^^ required by this bound in `BufWriter`\n \n error[E0599]: the method `write_fmt` exists for struct `BufWriter<&dyn std::io::Write>`, but its trait bounds were not satisfied\n   --> $DIR/mut-borrow-needed-by-trait.rs:21:5\n    |\n LL |     writeln!(fp, \"hello world\").unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `BufWriter<&dyn std::io::Write>` due to unsatisfied trait bounds\n+  --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n    |\n-  ::: $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n-   |\n-LL | pub struct BufWriter<W: Write> {\n-   | ------------------------------ doesn't satisfy `BufWriter<&dyn std::io::Write>: std::io::Write`\n+   = note: doesn't satisfy `BufWriter<&dyn std::io::Write>: std::io::Write`\n    |\n    = note: the following trait bounds were not satisfied:\n            `&dyn std::io::Write: std::io::Write`"}, {"sha": "3e0271d02572b98354603945119ef6803b174d64", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,11 +7,8 @@ LL |                 if selection.1.unwrap().contains(selection.0) {\n    |                    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |                    move occurs because `selection.1` has type `Option<String>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves `selection.1`\n+note: `Option::<T>::unwrap` takes ownership of the receiver `self`, which moves `selection.1`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     pub const fn unwrap(self) -> T {\n-   |                         ^^^^\n \n error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n   --> $DIR/option-content-move.rs:27:20\n@@ -22,11 +19,8 @@ LL |                 if selection.1.unwrap().contains(selection.0) {\n    |                    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |                    move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves `selection.1`\n+note: `Result::<T, E>::unwrap` takes ownership of the receiver `self`, which moves `selection.1`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |     pub fn unwrap(self) -> T\n-   |                   ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5434472ceecc7605e3b324553e86d07a6acb0517", "filename": "src/test/ui/suggestions/restrict-type-not-param.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-not-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-not-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-not-param.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -11,11 +11,8 @@ note: an implementation of `Add<_>` might be missing for `Wrapper<T>`\n    |\n LL | struct Wrapper<T>(T);\n    | ^^^^^^^^^^^^^^^^^ must implement `Add<_>`\n-note: the following trait must be implemented\n+note: the trait `Add` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | pub trait Add<Rhs = Self> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | fn qux<T>(a: Wrapper<T>, b: T) -> T where Wrapper<T>: Add<T, Output = T> {"}, {"sha": "da4db46aad3d67d36178d0fd831f56afc1f12cec", "filename": "src/test/ui/suggestions/sugg-else-for-closure.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,9 +10,6 @@ LL |     let _s = y.unwrap_or(|| x.split('.').nth(1).unwrap());\n                 found closure `[closure@$DIR/sugg-else-for-closure.rs:6:26: 6:28]`\n note: associated function defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     pub const fn unwrap_or(self, default: T) -> T\n-   |                  ^^^^^^^^^\n help: try calling `unwrap_or_else` instead\n    |\n LL |     let _s = y.unwrap_or_else(|| x.split('.').nth(1).unwrap());"}, {"sha": "d194afeaf931d96f3032011e3338cd633a4645a1", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,9 +8,6 @@ LL |         let mut stream_reader = BufReader::new(&stream);\n    |\n note: required by a bound in `BufReader::<R>::new`\n   --> $SRC_DIR/std/src/io/buffered/bufreader.rs:LL:COL\n-   |\n-LL | impl<R: Read> BufReader<R> {\n-   |         ^^^^ required by this bound in `BufReader::<R>::new`\n help: consider removing the leading `&`-reference\n    |\n LL -         let mut stream_reader = BufReader::new(&stream);\n@@ -30,11 +27,9 @@ error[E0599]: the method `read_until` exists for struct `BufReader<&T>`, but its\n    |\n LL |         stream_reader.read_until(b'\\n', &mut buffer).expect(\"Reading into buffer failed\");\n    |                       ^^^^^^^^^^ method cannot be called on `BufReader<&T>` due to unsatisfied trait bounds\n+  --> $SRC_DIR/std/src/io/buffered/bufreader.rs:LL:COL\n    |\n-  ::: $SRC_DIR/std/src/io/buffered/bufreader.rs:LL:COL\n-   |\n-LL | pub struct BufReader<R> {\n-   | ----------------------- doesn't satisfy `BufReader<&T>: BufRead`\n+   = note: doesn't satisfy `BufReader<&T>: BufRead`\n    |\n    = note: the following trait bounds were not satisfied:\n            `&T: std::io::Read`"}, {"sha": "018083f9e03af40468b781c6ec63b4b8bdb04b8b", "filename": "src/test/ui/suggestions/suggest-tryinto-edition-change.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -52,11 +52,9 @@ error[E0599]: no method named `try_into` found for type `i32` in the current sco\n    |\n LL |     let _i: i16 = 0_i32.try_into().unwrap();\n    |                         ^^^^^^^^ method not found in `i32`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn try_into(self) -> Result<T, Self::Error>;\n-   |        -------- the method is available for `i32` here\n+   = note: the method is available for `i32` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n    = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021"}, {"sha": "fcff02e09dbb1ade66e0f1b28dfdeebc46ab4e3a", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-in-type.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -24,11 +24,6 @@ error[E0107]: this struct takes at least 1 generic argument but 0 generic argume\n LL |     let _: Vec<A:B> = A::B;\n    |            ^^^ expected at least 1 generic argument\n    |\n-note: struct defined here, with at least 1 generic parameter: `T`\n-  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   |            ^^^ -\n help: add missing generic argument\n    |\n LL |     let _: Vec<T, A:B> = A::B;"}, {"sha": "0d3f794aa0f7af882d9da1f487bd37c13c6e14a5", "filename": "src/test/ui/traits/alias/generic-default-in-dyn.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -12,11 +12,9 @@ error[E0393]: the type parameter `Rhs` must be explicitly specified\n    |\n LL | struct Foo<T>(dyn SendEqAlias<T>);\n    |                   ^^^^^^^^^^^^^^ missing reference to `Rhs`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub trait PartialEq<Rhs: ?Sized = Self> {\n-   | --------------------------------------- type parameter `Rhs` must be specified for this\n+   = note: type parameter `Rhs` must be specified for this\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n@@ -25,11 +23,9 @@ error[E0393]: the type parameter `Rhs` must be explicitly specified\n    |\n LL | struct Bar<T>(dyn SendEqAlias<T>, T);\n    |                   ^^^^^^^^^^^^^^ missing reference to `Rhs`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub trait PartialEq<Rhs: ?Sized = Self> {\n-   | --------------------------------------- type parameter `Rhs` must be specified for this\n+   = note: type parameter `Rhs` must be specified for this\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}, {"sha": "048a150df8c521c497d143190b8ed6c4b561e4c4", "filename": "src/test/ui/traits/alias/object-fail.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject-fail.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,8 +7,7 @@ LL |     let _: &dyn EqAlias = &123;\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n-LL | pub trait Eq: PartialEq<Self> {\n-   |               ^^^^^^^^^^^^^^^ the trait cannot be made into an object because it uses `Self` as a type parameter\n+   = note: the trait cannot be made into an object because it uses `Self` as a type parameter\n \n error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n   --> $DIR/object-fail.rs:9:17"}, {"sha": "5be334986418292c4f98d9c4020bd7c09c17e0ca", "filename": "src/test/ui/traits/associated_type_bound/assoc_type_bound_with_struct.stderr", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,11 +9,9 @@ error[E0404]: expected trait, found struct `String`\n    |\n LL | struct Foo<T> where T: Bar, <T as Bar>::Baz: String {\n    |                                              ^^^^^^ not a trait\n+  --> $SRC_DIR/alloc/src/string.rs:LL:COL\n    |\n-  ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n-   |\n-LL | pub trait ToString {\n-   | ------------------ similarly named trait `ToString` defined here\n+   = note: similarly named trait `ToString` defined here\n    |\n help: constrain the associated type to `String`\n    |\n@@ -29,11 +27,9 @@ error[E0404]: expected trait, found struct `String`\n    |\n LL | struct Qux<'a, T> where T: Bar, <&'a T as Bar>::Baz: String {\n    |                                                      ^^^^^^ not a trait\n+  --> $SRC_DIR/alloc/src/string.rs:LL:COL\n    |\n-  ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n-   |\n-LL | pub trait ToString {\n-   | ------------------ similarly named trait `ToString` defined here\n+   = note: similarly named trait `ToString` defined here\n    |\n help: constrain the associated type to `String`\n    |\n@@ -49,11 +45,9 @@ error[E0404]: expected trait, found struct `String`\n    |\n LL | fn foo<T: Bar>(_: T) where <T as Bar>::Baz: String {\n    |                                             ^^^^^^ not a trait\n+  --> $SRC_DIR/alloc/src/string.rs:LL:COL\n    |\n-  ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n-   |\n-LL | pub trait ToString {\n-   | ------------------ similarly named trait `ToString` defined here\n+   = note: similarly named trait `ToString` defined here\n    |\n help: constrain the associated type to `String`\n    |\n@@ -69,11 +63,9 @@ error[E0404]: expected trait, found struct `String`\n    |\n LL | fn qux<'a, T: Bar>(_: &'a T) where <&'a T as Bar>::Baz: String {\n    |                                                         ^^^^^^ not a trait\n+  --> $SRC_DIR/alloc/src/string.rs:LL:COL\n    |\n-  ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n-   |\n-LL | pub trait ToString {\n-   | ------------------ similarly named trait `ToString` defined here\n+   = note: similarly named trait `ToString` defined here\n    |\n help: constrain the associated type to `String`\n    |\n@@ -89,11 +81,9 @@ error[E0404]: expected trait, found struct `String`\n    |\n LL | fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n    |                                                   ^^^^^^ help: a trait with a similar name exists: `ToString`\n+  --> $SRC_DIR/alloc/src/string.rs:LL:COL\n    |\n-  ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n-   |\n-LL | pub trait ToString {\n-   | ------------------ similarly named trait `ToString` defined here\n+   = note: similarly named trait `ToString` defined here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "fb9900bc57bbcddb536a3bc6e3acabb59f83793a", "filename": "src/test/ui/traits/bad-sized.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -18,9 +18,6 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    = help: the trait `Sized` is not implemented for `dyn Trait`\n note: required by a bound in `Vec`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   |                ^ required by this bound in `Vec`\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:37\n@@ -31,9 +28,6 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    = help: the trait `Sized` is not implemented for `dyn Trait`\n note: required by a bound in `Vec::<T>::new`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL | impl<T> Vec<T> {\n-   |      ^ required by this bound in `Vec::<T>::new`\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:37\n@@ -44,9 +38,6 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    = help: the trait `Sized` is not implemented for `dyn Trait`\n note: required by a bound in `Vec`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   |                ^ required by this bound in `Vec`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8ab6414d4d8e3a73ae973ff0bb569edd6d63efdb", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -12,9 +12,6 @@ LL |     opts.get(opt.as_ref());\n              where T: ?Sized;\n note: required by a bound in `HashMap::<K, V, S>::get`\n   --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-   |\n-LL |         K: Borrow<Q>,\n-   |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n help: consider specifying the generic argument\n    |\n LL |     opts.get::<Q>(opt.as_ref());"}, {"sha": "23e182738f700236e158bd4f90b4c6b009d3f1aa", "filename": "src/test/ui/traits/mutual-recursion-issue-75860.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,9 +7,6 @@ LL |     iso(left, right)\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`mutual_recursion_issue_75860`)\n note: required by a bound in `Option`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL | pub enum Option<T> {\n-   |                 ^ required by this bound in `Option`\n \n error: aborting due to previous error\n "}, {"sha": "49e20c6a76ad94d871ecb9165979c3bc27eaa852", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     let _errors = TcpListener::bind(&bad);\n    = note: required for `&NoToSocketAddrs` to implement `ToSocketAddrs`\n note: required by a bound in `TcpListener::bind`\n   --> $SRC_DIR/std/src/net/tcp.rs:LL:COL\n-   |\n-LL |     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {\n-   |                    ^^^^^^^^^^^^^ required by this bound in `TcpListener::bind`\n help: consider dereferencing here\n    |\n LL |     let _errors = TcpListener::bind(&*bad);"}, {"sha": "1363fb8c47af8862e642a613e6e9b124cc4bdea5", "filename": "src/test/ui/traits/suggest-deferences/root-obligation.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -11,9 +11,6 @@ LL |         .filter(|c| \"aeiou\".contains(c))\n    = note: required for `&char` to implement `Pattern<'_>`\n note: required by a bound in `core::str::<impl str>::contains`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n-   |\n-LL |     pub fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n-   |                            ^^^^^^^^^^^ required by this bound in `core::str::<impl str>::contains`\n help: consider dereferencing here\n    |\n LL |         .filter(|c| \"aeiou\".contains(*c))"}, {"sha": "44e63b78cce85b7c5945f4d7a0518938a39331bf", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     mem::size_of::<U>();\n    |\n note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `size_of`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn check<T: Iterator, U: ?Sized>() {\n@@ -34,9 +31,6 @@ LL | struct Misc<T:?Sized>(T);\n    |        ^^^^\n note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `size_of`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn check<T: Iterator, U: ?Sized>() {\n@@ -80,9 +74,6 @@ LL |     mem::size_of::<[T]>();\n    = help: the trait `Sized` is not implemented for `[T]`\n note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `size_of`\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n   --> $DIR/suggest-where-clause.rs:31:20\n@@ -93,9 +84,6 @@ LL |     mem::size_of::<[&U]>();\n    = help: the trait `Sized` is not implemented for `[&U]`\n note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `size_of`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "1b3d202590db46d47dc31107c135a3dd169e51a5", "filename": "src/test/ui/transmutability/issue-101739-2.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,12 +8,6 @@ LL | /             ASSUME_LIFETIMES,\n LL | |             ASSUME_VALIDITY,\n LL | |             ASSUME_VISIBILITY,\n    | |_____________________________- help: remove these generic arguments\n-   |\n-note: trait defined here, with at most 3 generic parameters: `Src`, `Context`, `ASSUME`\n-  --> $SRC_DIR/core/src/mem/transmutability.rs:LL:COL\n-   |\n-LL | pub unsafe trait BikeshedIntrinsicFrom<Src, Context, const ASSUME: Assume = { Assume::NOTHING }>\n-   |                  ^^^^^^^^^^^^^^^^^^^^^ ---  -------  ------------------------------------------\n \n error: aborting due to previous error\n "}, {"sha": "fe3712ef83917f1fb60cd082ca601f550bd7c86d", "filename": "src/test/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -13,9 +13,6 @@ LL |         groups.push(new_group, vec![process]);\n              found struct `Vec<String>`\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL |     pub fn push(&mut self, value: T) {\n-   |            ^^^^\n help: remove the extra argument\n    |\n LL |         groups.push(/* (Vec<String>, Vec<Process>) */);"}, {"sha": "452413fc51679bd93f90cba315007b01f3b72367", "filename": "src/test/ui/tuple/wrong_argument_ice.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL |         self.acc.push_back(self.current_provides, self.current_requires);\n    |\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/collections/vec_deque/mod.rs:LL:COL\n-   |\n-LL |     pub fn push_back(&mut self, value: T) {\n-   |            ^^^^^^^^^\n help: wrap these arguments in parentheses to construct a tuple\n    |\n LL |         self.acc.push_back((self.current_provides, self.current_requires));"}, {"sha": "fd43e1114c8912769e8b06fbad8aae279f66cd88", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -25,11 +25,6 @@ error[E0107]: missing generics for struct `Vec`\n LL |         input_cells: Vec::new()\n    |                      ^^^ expected at least 1 generic argument\n    |\n-note: struct defined here, with at least 1 generic parameter: `T`\n-  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   |            ^^^ -\n help: add missing generic argument\n    |\n LL |         input_cells: Vec<T>::new()"}, {"sha": "ba8d15d0b7317f1a557c11dac272e5b886b10951", "filename": "src/test/ui/type/type-ascription-instead-of-initializer.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -15,9 +15,6 @@ LL |     let x: Vec::with_capacity(10, 20);\n    |\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-   |\n-LL |     pub fn with_capacity(capacity: usize) -> Self {\n-   |            ^^^^^^^^^^^^^\n help: remove the extra argument\n    |\n LL |     let x: Vec::with_capacity(10);"}, {"sha": "edc5aeffdcd65fda4697a7fcc12895bd9ca88f54", "filename": "src/test/ui/type/type-ascription-precedence.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -33,11 +33,8 @@ note: an implementation of `std::ops::Neg` might be missing for `Z`\n    |\n LL | struct Z;\n    | ^^^^^^^^ must implement `std::ops::Neg`\n-note: the following trait must be implemented\n+note: the trait `std::ops::Neg` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | pub trait Neg {\n-   | ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/type-ascription-precedence.rs:45:5"}, {"sha": "5b00d387aba5dd0e115f117006f0186f7fd3f962", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1,9 +1,6 @@\n error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((..., ..., ...), ..., ...), ..., ...), ..., ...)>>`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-LL | pub fn drop<T>(_x: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-   |\n    = help: consider adding a `#![type_length_limit=\"10\"]` attribute to your crate\n    = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n "}, {"sha": "f488463ae3ce9faedbd67b008ae8cac5468b11bd", "filename": "src/test/ui/typeck/issue-46112.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -10,9 +10,6 @@ LL | fn main() { test(Ok(())); }\n            found unit type `()`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^\n help: try wrapping the expression in `Some`\n    |\n LL | fn main() { test(Ok(Some(()))); }"}, {"sha": "f5adcabe3e91e0c89ab5a471e4eb5d41ec601832", "filename": "src/test/ui/typeck/issue-75883.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,11 +6,6 @@ LL |     pub fn run() -> Result<_> {\n    |                     |\n    |                     expected 2 generic arguments\n    |\n-note: enum defined here, with 2 generic parameters: `T`, `E`\n-  --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   |          ^^^^^^ -  -\n help: add missing generic argument\n    |\n LL |     pub fn run() -> Result<_, E> {\n@@ -24,11 +19,6 @@ LL |     pub fn interact(&mut self) -> Result<_> {\n    |                                   |\n    |                                   expected 2 generic arguments\n    |\n-note: enum defined here, with 2 generic parameters: `T`, `E`\n-  --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL | pub enum Result<T, E> {\n-   |          ^^^^^^ -  -\n help: add missing generic argument\n    |\n LL |     pub fn interact(&mut self) -> Result<_, E> {"}, {"sha": "ce4f73b820a18c1d26a6dde668cd1fc7b21d1c02", "filename": "src/test/ui/typeck/issue-83693.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftypeck%2Fissue-83693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftypeck%2Fissue-83693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-83693.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -3,11 +3,9 @@ error[E0412]: cannot find type `F` in this scope\n    |\n LL | impl F {\n    |      ^ help: a trait with a similar name exists: `Fn`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n-   | -------------------------------------- similarly named trait `Fn` defined here\n+   = note: similarly named trait `Fn` defined here\n \n error[E0412]: cannot find type `TestResult` in this scope\n   --> $DIR/issue-83693.rs:9:22"}, {"sha": "00d23389720b9d636cd2272e0686d5361dd2bdbe", "filename": "src/test/ui/typeck/issue-84768.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftypeck%2Fissue-84768.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftypeck%2Fissue-84768.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-84768.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -16,9 +16,6 @@ LL |     <F as FnOnce(&mut u8)>::call_once(f, 1)\n                found type `{integer}`\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL |     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-   |                           ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fbced928a8a9b78bc2fc46811a741243fba31d50", "filename": "src/test/ui/typeck/struct-enum-wrong-args.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL |     let _ = Some(3, 2);\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^^^\n help: remove the extra argument\n    |\n LL |     let _ = Some(3);\n@@ -24,9 +21,6 @@ LL |     let _ = Ok(3, 6, 2);\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^\n help: remove the extra arguments\n    |\n LL |     let _ = Ok(3);\n@@ -40,9 +34,6 @@ LL |     let _ = Ok();\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ^^\n help: provide the argument\n    |\n LL |     let _ = Ok(/* value */);"}, {"sha": "331540d1e4204217151cc6851df288af765987b1", "filename": "src/test/ui/typeck/typeck-builtin-bound-type-parameters.stderr", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -5,12 +5,6 @@ LL | fn foo1<T:Copy<U>, U>(x: T) {}\n    |           ^^^^--- help: remove these generics\n    |           |\n    |           expected 0 generic arguments\n-   |\n-note: trait defined here, with 0 generic parameters\n-  --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | pub trait Copy: Clone {\n-   |           ^^^^\n \n error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:4:14\n@@ -19,12 +13,6 @@ LL | trait Trait: Copy<dyn Send> {}\n    |              ^^^^---------- help: remove these generics\n    |              |\n    |              expected 0 generic arguments\n-   |\n-note: trait defined here, with 0 generic parameters\n-  --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | pub trait Copy: Clone {\n-   |           ^^^^\n \n error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:7:21\n@@ -33,12 +21,6 @@ LL | struct MyStruct1<T: Copy<T>>;\n    |                     ^^^^--- help: remove these generics\n    |                     |\n    |                     expected 0 generic arguments\n-   |\n-note: trait defined here, with 0 generic parameters\n-  --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | pub trait Copy: Clone {\n-   |           ^^^^\n \n error[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:10:25\n@@ -47,12 +29,6 @@ LL | struct MyStruct2<'a, T: Copy<'a>>;\n    |                         ^^^^---- help: remove these generics\n    |                         |\n    |                         expected 0 lifetime arguments\n-   |\n-note: trait defined here, with 0 lifetime parameters\n-  --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | pub trait Copy: Clone {\n-   |           ^^^^\n \n error[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n@@ -61,12 +37,6 @@ LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n    |               ^^^^ -- help: remove this lifetime argument\n    |               |\n    |               expected 0 lifetime arguments\n-   |\n-note: trait defined here, with 0 lifetime parameters\n-  --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | pub trait Copy: Clone {\n-   |           ^^^^\n \n error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n@@ -75,12 +45,6 @@ LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n    |               ^^^^     - help: remove this generic argument\n    |               |\n    |               expected 0 generic arguments\n-   |\n-note: trait defined here, with 0 generic parameters\n-  --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | pub trait Copy: Clone {\n-   |           ^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "a2fe627868aeb36faef45712e678d61e0e83064f", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -23,9 +23,6 @@ LL |     <i32 as Add<i32>>::add(1u32, 2);\n    |\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL |     fn add(self, rhs: Rhs) -> Self::Output;\n-   |        ^^^\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |     <i32 as Add<i32>>::add(1i32, 2);\n@@ -41,9 +38,6 @@ LL |     <i32 as Add<i32>>::add(1, 2u32);\n    |\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL |     fn add(self, rhs: Rhs) -> Self::Output;\n-   |        ^^^\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |     <i32 as Add<i32>>::add(1, 2i32);"}, {"sha": "cfbe1c6f2cbbc91ba63662d821c2e98aa9a36776", "filename": "src/test/ui/unboxed-closures/non-tupled-arg-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL | fn a<F: Fn<usize>>(f: F) {}\n    |\n note: required by a bound in `Fn`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n-   |                    ^^^^^ required by this bound in `Fn`\n \n error: aborting due to previous error\n "}, {"sha": "d33a61ca8485cbf36db95e3b18ee082188679d02", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,12 +6,9 @@ LL |     let _ = match x {\n    |\n note: `Result<u32, &Void>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n+  ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-LL | pub enum Result<T, E> {\n-   | ---------------------\n-...\n-LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n-   |     ^^^ not covered\n+   = note: not covered\n    = note: the matched value is of type `Result<u32, &Void>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n@@ -88,12 +85,9 @@ LL |     let _ = match x {\n    |\n note: `Result<u32, Void>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n+  ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-LL | pub enum Result<T, E> {\n-   | ---------------------\n-...\n-LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n-   |     ^^^ not covered\n+   = note: not covered\n    = note: the matched value is of type `Result<u32, Void>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n@@ -111,12 +105,9 @@ LL |     let Ok(x) = x;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n note: `Result<u32, Void>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n+  ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-LL | pub enum Result<T, E> {\n-   | ---------------------\n-...\n-LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n-   |     ^^^ not covered\n+   = note: not covered\n    = note: the matched value is of type `Result<u32, Void>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |"}, {"sha": "65ff72fe474b18b683e5bdd6f85ac0fdd68b90fb", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL | #[derive(Clone)]\n    |\n note: required by a bound in `AssertParamIsCopy`\n   --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n-   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `U1` with `#[derive(Copy)]`\n    |"}, {"sha": "65ff72fe474b18b683e5bdd6f85ac0fdd68b90fb", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,9 +6,6 @@ LL | #[derive(Clone)]\n    |\n note: required by a bound in `AssertParamIsCopy`\n   --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n-   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `U1` with `#[derive(Copy)]`\n    |"}, {"sha": "9e55390b54dbe2751229c317b2a487a47385402b", "filename": "src/test/ui/union/union-derive-eq.mirunsafeck.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     a: PartialEqNotEq,\n    |\n note: required by a bound in `AssertParamIsEq`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `PartialEqNotEq` with `#[derive(Eq)]`\n    |"}, {"sha": "9e55390b54dbe2751229c317b2a487a47385402b", "filename": "src/test/ui/union/union-derive-eq.thirunsafeck.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     a: PartialEqNotEq,\n    |\n note: required by a bound in `AssertParamIsEq`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `PartialEqNotEq` with `#[derive(Eq)]`\n    |"}, {"sha": "db42ed9baf1ed4e3fe6d1655866f02847c37b4d1", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,14 +9,10 @@ LL |   trait Foo {\n ...\n LL |       let _z = y.clone();\n    |                  ^^^^^ method cannot be called on `Box<dyn Foo>` due to unsatisfied trait bounds\n-   |\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n   ::: $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n-LL | / pub struct Box<\n-LL | |     T: ?Sized,\n-LL | |     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n-LL | | >(Unique<T>, A);\n-   | |_- doesn't satisfy `Box<dyn Foo>: Clone`\n+   = note: doesn't satisfy `Box<dyn Foo>: Clone`\n    |\n    = note: the following trait bounds were not satisfied:\n            `dyn Foo: Sized`"}, {"sha": "de6611324cac137c006a4ff24f9ad56470c9c13b", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -6,14 +6,10 @@ LL |   struct R {\n ...\n LL |       let _j = i.clone();\n    |                  ^^^^^ method cannot be called on `Box<R>` due to unsatisfied trait bounds\n-   |\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n   ::: $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n-LL | / pub struct Box<\n-LL | |     T: ?Sized,\n-LL | |     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n-LL | | >(Unique<T>, A);\n-   | |_- doesn't satisfy `Box<R>: Clone`\n+   = note: doesn't satisfy `Box<R>: Clone`\n    |\n    = note: the following trait bounds were not satisfied:\n            `R: Clone`"}, {"sha": "2a3ca14433f62ffeaec52fb189a016064eda8d35", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -11,9 +11,6 @@ LL |     x.clone();\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL |     fn not(self) -> Self::Output;\n-   |            ^^^^\n help: consider cloning the value if the performance cost is acceptable\n    |\n LL |     !x.clone();\n@@ -57,9 +54,6 @@ LL |     !*m;\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n-   |\n-LL |     fn not(self) -> Self::Output;\n-   |            ^^^^\n \n error[E0507]: cannot move out of `*n` which is behind a shared reference\n   --> $DIR/unop-move-semantics.rs:26:6"}, {"sha": "9e3c345dd80011636573cd4f6601187545fdf9b1", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -59,7 +59,7 @@ LL |         y.foo();\n LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `y`\n+note: `Foo::foo` takes ownership of the receiver `self`, which moves `y`\n   --> $DIR/borrow-after-move.rs:5:12\n    |\n LL |     fn foo(self) -> String;"}, {"sha": "49b906bbe02b725c0f9d1e806a470949c55d591a", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -55,7 +55,7 @@ LL |         y.foo();\n LL |         y.foo();\n    |         ^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `y`\n+note: `Foo::foo` takes ownership of the receiver `self`, which moves `y`\n   --> $DIR/double-move.rs:5:12\n    |\n LL |     fn foo(self) -> String;"}, {"sha": "1bdf49801f975ba72192dfb6d72324d316c04324", "filename": "src/test/ui/use/use-after-move-self-based-on-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,7 +8,7 @@ LL |         self.bar();\n LL |         return self.x;\n    |                ^^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `self`\n+note: `S::bar` takes ownership of the receiver `self`, which moves `self`\n   --> $DIR/use-after-move-self-based-on-type.rs:15:16\n    |\n LL |     pub fn bar(self) {}"}, {"sha": "59cc22eadb0153c8bd3903278f649ccdc13ab133", "filename": "src/test/ui/use/use-after-move-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,7 +8,7 @@ LL |         self.bar();\n LL |         return *self.x;\n    |                ^^^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `self`\n+note: `S::bar` takes ownership of the receiver `self`, which moves `self`\n   --> $DIR/use-after-move-self.rs:13:16\n    |\n LL |     pub fn bar(self) {}"}, {"sha": "2b85fa9bed480df4bf954d69decde3dfeeb292cf", "filename": "src/test/ui/walk-struct-literal-with.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -8,7 +8,7 @@ LL |     let end = Mine{other_val:1, ..start.make_string_bar()};\n LL |     println!(\"{}\", start.test);\n    |                    ^^^^^^^^^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `start`\n+note: `Mine::make_string_bar` takes ownership of the receiver `self`, which moves `start`\n   --> $DIR/walk-struct-literal-with.rs:7:28\n    |\n LL |     fn make_string_bar(mut self) -> Mine{"}, {"sha": "7bc19dd2e2162de72de9a84446393042e1c8d63c", "filename": "src/test/ui/wf/hir-wf-check-erase-regions.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -9,9 +9,6 @@ LL |     type IntoIter = std::iter::Flatten<std::slice::Iter<'a, T>>;\n    = note: required for `&T` to implement `IntoIterator`\n note: required by a bound in `Flatten`\n   --> $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n-   |\n-LL | pub struct Flatten<I: Iterator<Item: IntoIterator>> {\n-   |                                      ^^^^^^^^^^^^ required by this bound in `Flatten`\n \n error[E0277]: `&T` is not an iterator\n   --> $DIR/hir-wf-check-erase-regions.rs:10:27\n@@ -24,9 +21,6 @@ LL |     fn into_iter(self) -> Self::IntoIter {\n    = note: required for `&T` to implement `IntoIterator`\n note: required by a bound in `Flatten`\n   --> $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n-   |\n-LL | pub struct Flatten<I: Iterator<Item: IntoIterator>> {\n-   |                                      ^^^^^^^^^^^^ required by this bound in `Flatten`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1ca368729fe6fb6b5f57a791801d950df12fa83d", "filename": "src/test/ui/wf/wf-impl-self-type.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fwf%2Fwf-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftest%2Fui%2Fwf%2Fwf-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-self-type.stderr?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -7,9 +7,6 @@ LL | impl Foo for Option<[u8]> {}\n    = help: the trait `Sized` is not implemented for `[u8]`\n note: required by a bound in `Option`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL | pub enum Option<T> {\n-   |                 ^ required by this bound in `Option`\n \n error: aborting due to previous error\n "}, {"sha": "72a43108dc480666e595112eb63a92bdf6d144c4", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9e206409fe4a8d2307fe67e22372ecd4d22cc/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "patch": "@@ -1924,7 +1924,15 @@ impl<'test> TestCx<'test> {\n                     rustc.args(&[\"--json\", \"future-incompat\"]);\n                 }\n                 rustc.arg(\"-Ccodegen-units=1\");\n+                // Hide line numbers to reduce churn\n                 rustc.arg(\"-Zui-testing\");\n+                // Hide libstd sources from ui tests to make sure we generate the stderr\n+                // output that users will see.\n+                // Without this, we may be producing good diagnostics in-tree but users\n+                // will not see half the information.\n+                rustc.arg(\"-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX\");\n+                rustc.arg(\"-Ztranslate-remapped-path-to-local-path=no\");\n+\n                 rustc.arg(\"-Zdeduplicate-diagnostics=no\");\n                 // FIXME: use this for other modes too, for perf?\n                 rustc.arg(\"-Cstrip=debuginfo\");"}]}