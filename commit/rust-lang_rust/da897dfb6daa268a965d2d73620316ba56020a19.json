{"sha": "da897dfb6daa268a965d2d73620316ba56020a19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhODk3ZGZiNmRhYTI2OGE5NjVkMmQ3MzYyMDMxNmJhNTYwMjBhMTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-02T06:46:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-02T06:46:21Z"}, "message": "Auto merge of #76216 - marmeladema:use-once-cell-from-std, r=matklad\n\ncompiler: use `OnceCell` from std\n\nFixes #76192\n\nThe only remaining direct use of `lazy_static` crate is in `src/bootstrap`  but I am not sure how I can remove that dependency for now.\n\nr? @matklad", "tree": {"sha": "548b3994e2ddc9b6046becb0eb57bc887b0d3d03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/548b3994e2ddc9b6046becb0eb57bc887b0d3d03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da897dfb6daa268a965d2d73620316ba56020a19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da897dfb6daa268a965d2d73620316ba56020a19", "html_url": "https://github.com/rust-lang/rust/commit/da897dfb6daa268a965d2d73620316ba56020a19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da897dfb6daa268a965d2d73620316ba56020a19/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4acb110333392ecdaf890fce080e4b576106aae", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4acb110333392ecdaf890fce080e4b576106aae", "html_url": "https://github.com/rust-lang/rust/commit/b4acb110333392ecdaf890fce080e4b576106aae"}, {"sha": "99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d", "html_url": "https://github.com/rust-lang/rust/commit/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d"}], "stats": {"total": 127, "additions": 56, "deletions": 71}, "files": [{"sha": "f94d95d2dc8381bf87a5c107f80a653c49976cab", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -3417,7 +3417,6 @@ dependencies = [\n  \"ena\",\n  \"indexmap\",\n  \"jobserver\",\n- \"lazy_static\",\n  \"libc\",\n  \"measureme\",\n  \"parking_lot 0.10.2\",\n@@ -3440,7 +3439,6 @@ dependencies = [\n name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n- \"lazy_static\",\n  \"libc\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n@@ -3514,7 +3512,6 @@ dependencies = [\n name = \"rustc_feature\"\n version = \"0.0.0\"\n dependencies = [\n- \"lazy_static\",\n  \"rustc_data_structures\",\n  \"rustc_span\",\n ]\n@@ -3531,7 +3528,6 @@ version = \"0.0.0\"\n name = \"rustc_hir\"\n version = \"0.0.0\"\n dependencies = [\n- \"lazy_static\",\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n  \"rustc_index\",\n@@ -3606,7 +3602,6 @@ name = \"rustc_interface\"\n version = \"0.0.0\"\n dependencies = [\n  \"libc\",\n- \"once_cell\",\n  \"rustc-rayon\",\n  \"rustc_ast\",\n  \"rustc_ast_lowering\","}, {"sha": "fcae9b936ed2af613842196306a2acd111f91e61", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -12,7 +12,6 @@ ena = \"0.14\"\n indexmap = \"1.5.1\"\n tracing = \"0.1\"\n jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n-lazy_static = \"1\"\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_graphviz = { path = \"../rustc_graphviz\" }"}, {"sha": "41605afb44e021220f896536bff2f9ec7b9bf2a5", "filename": "compiler/rustc_data_structures/src/jobserver.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_data_structures%2Fsrc%2Fjobserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_data_structures%2Fsrc%2Fjobserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fjobserver.rs?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -1,33 +1,31 @@\n pub use jobserver_crate::Client;\n-use lazy_static::lazy_static;\n+use std::lazy::SyncLazy;\n \n-lazy_static! {\n-    // We can only call `from_env` once per process\n+// We can only call `from_env` once per process\n \n-    // Note that this is unsafe because it may misinterpret file descriptors\n-    // on Unix as jobserver file descriptors. We hopefully execute this near\n-    // the beginning of the process though to ensure we don't get false\n-    // positives, or in other words we try to execute this before we open\n-    // any file descriptors ourselves.\n-    //\n-    // Pick a \"reasonable maximum\" if we don't otherwise have\n-    // a jobserver in our environment, capping out at 32 so we\n-    // don't take everything down by hogging the process run queue.\n-    // The fixed number is used to have deterministic compilation\n-    // across machines.\n-    //\n-    // Also note that we stick this in a global because there could be\n-    // multiple rustc instances in this process, and the jobserver is\n-    // per-process.\n-    static ref GLOBAL_CLIENT: Client = unsafe {\n-        Client::from_env().unwrap_or_else(|| {\n-            let client = Client::new(32).expect(\"failed to create jobserver\");\n-            // Acquire a token for the main thread which we can release later\n-            client.acquire_raw().ok();\n-            client\n-        })\n-    };\n-}\n+// Note that this is unsafe because it may misinterpret file descriptors\n+// on Unix as jobserver file descriptors. We hopefully execute this near\n+// the beginning of the process though to ensure we don't get false\n+// positives, or in other words we try to execute this before we open\n+// any file descriptors ourselves.\n+//\n+// Pick a \"reasonable maximum\" if we don't otherwise have\n+// a jobserver in our environment, capping out at 32 so we\n+// don't take everything down by hogging the process run queue.\n+// The fixed number is used to have deterministic compilation\n+// across machines.\n+//\n+// Also note that we stick this in a global because there could be\n+// multiple rustc instances in this process, and the jobserver is\n+// per-process.\n+static GLOBAL_CLIENT: SyncLazy<Client> = SyncLazy::new(|| unsafe {\n+    Client::from_env().unwrap_or_else(|| {\n+        let client = Client::new(32).expect(\"failed to create jobserver\");\n+        // Acquire a token for the main thread which we can release later\n+        client.acquire_raw().ok();\n+        client\n+    })\n+});\n \n pub fn client() -> Client {\n     GLOBAL_CLIENT.clone()"}, {"sha": "0d9dcb262b26986b41de0f8af2a2a6c0cdc07795", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -8,7 +8,6 @@ edition = \"2018\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-lazy_static = \"1.0\"\n libc = \"0.2\"\n tracing = { version = \"0.1.18\", features = [\"release_max_level_info\"]  }\n tracing-subscriber = { version = \"0.2.10\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }"}, {"sha": "c277e314d0ec0c3d9f21e2001c8d3afe6effaf01", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -11,8 +11,6 @@\n \n #[macro_use]\n extern crate tracing;\n-#[macro_use]\n-extern crate lazy_static;\n \n pub extern crate rustc_plugin_impl as plugin;\n \n@@ -49,6 +47,7 @@ use std::env;\n use std::ffi::OsString;\n use std::fs;\n use std::io::{self, Read, Write};\n+use std::lazy::SyncLazy;\n use std::mem;\n use std::panic::{self, catch_unwind};\n use std::path::PathBuf;\n@@ -1142,13 +1141,12 @@ pub fn catch_with_exit_code(f: impl FnOnce() -> interface::Result<()>) -> i32 {\n     }\n }\n \n-lazy_static! {\n-    static ref DEFAULT_HOOK: Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static> = {\n+static DEFAULT_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> =\n+    SyncLazy::new(|| {\n         let hook = panic::take_hook();\n         panic::set_hook(Box::new(|info| report_ice(info, BUG_REPORT_URL)));\n         hook\n-    };\n-}\n+    });\n \n /// Prints the ICE message, including backtrace and query stack.\n ///\n@@ -1223,7 +1221,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n ///\n /// A custom rustc driver can skip calling this to set up a custom ICE hook.\n pub fn install_ice_hook() {\n-    lazy_static::initialize(&DEFAULT_HOOK);\n+    SyncLazy::force(&DEFAULT_HOOK);\n }\n \n /// This allows tools to enable rust logging without having to magically match rustc's"}, {"sha": "7a06bce13c80d27449b5f3fdae24609ea84554dd", "filename": "compiler/rustc_feature/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_feature%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_feature%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2FCargo.toml?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -9,5 +9,4 @@ doctest = false\n \n [dependencies]\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n-lazy_static = \"1.0.0\"\n rustc_span = { path = \"../rustc_span\" }"}, {"sha": "fc122db8ac1b1f2502c2079bdf10e6c3fe53ea17", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -5,10 +5,11 @@ use AttributeType::*;\n \n use crate::{Features, Stability};\n \n-use lazy_static::lazy_static;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::symbol::{sym, Symbol};\n \n+use std::lazy::SyncLazy;\n+\n type GateFn = fn(&Features) -> bool;\n \n macro_rules! cfg_fn {\n@@ -589,14 +590,13 @@ pub fn is_builtin_attr_name(name: Symbol) -> bool {\n     BUILTIN_ATTRIBUTE_MAP.get(&name).is_some()\n }\n \n-lazy_static! {\n-    pub static ref BUILTIN_ATTRIBUTE_MAP: FxHashMap<Symbol, &'static BuiltinAttribute> = {\n+pub static BUILTIN_ATTRIBUTE_MAP: SyncLazy<FxHashMap<Symbol, &'static BuiltinAttribute>> =\n+    SyncLazy::new(|| {\n         let mut map = FxHashMap::default();\n         for attr in BUILTIN_ATTRIBUTES.iter() {\n             if map.insert(attr.0, attr).is_some() {\n                 panic!(\"duplicate builtin attribute `{}`\", attr.0);\n             }\n         }\n         map\n-    };\n-}\n+    });"}, {"sha": "4393368cd4524502728b7e9567a7459abb0ae388", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -11,6 +11,8 @@\n //! even if it is stabilized or removed, *do not remove it*. Instead, move the\n //! symbol to the `accepted` or `removed` modules respectively.\n \n+#![feature(once_cell)]\n+\n mod accepted;\n mod active;\n mod builtin_attrs;"}, {"sha": "b24c208c76aedea306450e5caf0cb03e03b9938a", "filename": "compiler/rustc_hir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2FCargo.toml?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -15,6 +15,5 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }\n-lazy_static = \"1\"\n tracing = \"0.1\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "5e4c03bec83dc18d50d4001471b6149b1d19de9c", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -17,7 +17,7 @@ use rustc_macros::HashStable_Generic;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n-use lazy_static::lazy_static;\n+use std::lazy::SyncLazy;\n \n pub enum LangItemGroup {\n     Op,\n@@ -117,14 +117,12 @@ macro_rules! language_item_table {\n             )*\n         }\n \n-        lazy_static! {\n-            /// A mapping from the name of the lang item to its order and the form it must be of.\n-            pub static ref ITEM_REFS: FxHashMap<Symbol, (usize, Target)> = {\n-                let mut item_refs = FxHashMap::default();\n-                $( item_refs.insert($name, (LangItem::$variant as usize, $target)); )*\n-                item_refs\n-            };\n-        }\n+        /// A mapping from the name of the lang item to its order and the form it must be of.\n+        pub static ITEM_REFS: SyncLazy<FxHashMap<Symbol, (usize, Target)>> = SyncLazy::new(|| {\n+            let mut item_refs = FxHashMap::default();\n+            $( item_refs.insert($name, (LangItem::$variant as usize, $target)); )*\n+            item_refs\n+        });\n \n // End of the macro\n     }"}, {"sha": "c69a9b063aeca618cd943422ae4e94ff8ecd409d", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -6,6 +6,7 @@\n #![feature(const_fn)] // For the unsizing cast on `&[]`\n #![feature(const_panic)]\n #![feature(in_band_lifetimes)]\n+#![feature(once_cell)]\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "52f28bf8f4c73e9b302d1c4169f2fcd72d0300d3", "filename": "compiler/rustc_hir/src/weak_lang_items.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -7,18 +7,16 @@ use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::symbol::{sym, Symbol};\n \n-use lazy_static::lazy_static;\n+use std::lazy::SyncLazy;\n \n macro_rules! weak_lang_items {\n     ($($name:ident, $item:ident, $sym:ident;)*) => (\n \n-lazy_static! {\n-    pub static ref WEAK_ITEMS_REFS: FxHashMap<Symbol, LangItem> = {\n-        let mut map = FxHashMap::default();\n-        $(map.insert(sym::$name, LangItem::$item);)*\n-        map\n-    };\n-}\n+pub static WEAK_ITEMS_REFS: SyncLazy<FxHashMap<Symbol, LangItem>> = SyncLazy::new(|| {\n+    let mut map = FxHashMap::default();\n+    $(map.insert(sym::$name, LangItem::$item);)*\n+    map\n+});\n \n /// The `check_name` argument avoids the need for `librustc_hir` to depend on\n /// `librustc_session`."}, {"sha": "e214493a567b80e73088572e7c45a6033fa200cc", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -43,7 +43,6 @@ rustc_resolve = { path = \"../rustc_resolve\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_ty = { path = \"../rustc_ty\" }\n tempfile = \"3.0.5\"\n-once_cell = \"1\"\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"libloaderapi\"] }"}, {"sha": "66d3765d34739b0bea318a50417f55947478fb7a", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -2,7 +2,6 @@ use crate::interface::{Compiler, Result};\n use crate::proc_macro_decls;\n use crate::util;\n \n-use once_cell::sync::Lazy;\n use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast::{self as ast, visit};\n use rustc_codegen_ssa::back::link::emit_metadata;\n@@ -46,6 +45,7 @@ use std::any::Any;\n use std::cell::RefCell;\n use std::ffi::OsString;\n use std::io::{self, BufWriter, Write};\n+use std::lazy::SyncLazy;\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::{env, fs, iter, mem};\n@@ -681,7 +681,7 @@ pub fn prepare_outputs(\n     Ok(outputs)\n }\n \n-pub static DEFAULT_QUERY_PROVIDERS: Lazy<Providers> = Lazy::new(|| {\n+pub static DEFAULT_QUERY_PROVIDERS: SyncLazy<Providers> = SyncLazy::new(|| {\n     let providers = &mut Providers::default();\n     providers.analysis = analysis;\n     proc_macro_decls::provide(providers);\n@@ -704,7 +704,7 @@ pub static DEFAULT_QUERY_PROVIDERS: Lazy<Providers> = Lazy::new(|| {\n     *providers\n });\n \n-pub static DEFAULT_EXTERN_QUERY_PROVIDERS: Lazy<Providers> = Lazy::new(|| {\n+pub static DEFAULT_EXTERN_QUERY_PROVIDERS: SyncLazy<Providers> = SyncLazy::new(|| {\n     let mut extern_providers = *DEFAULT_QUERY_PROVIDERS;\n     rustc_metadata::provide_extern(&mut extern_providers);\n     rustc_codegen_ssa::provide_extern(&mut extern_providers);"}, {"sha": "b1b39fd1ad2995a7c7228a0a5de52af95ee45563", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da897dfb6daa268a965d2d73620316ba56020a19/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=da897dfb6daa268a965d2d73620316ba56020a19", "patch": "@@ -25,6 +25,7 @@ use rustc_span::symbol::{sym, Symbol};\n use smallvec::SmallVec;\n use std::env;\n use std::io::{self, Write};\n+use std::lazy::SyncOnceCell;\n use std::mem;\n use std::ops::DerefMut;\n use std::path::{Path, PathBuf};\n@@ -243,8 +244,7 @@ pub fn get_codegen_backend(sess: &Session) -> Box<dyn CodegenBackend> {\n // loading, so we leave the code here. It is potentially useful for other tools\n // that want to invoke the rustc binary while linking to rustc as well.\n pub fn rustc_path<'a>() -> Option<&'a Path> {\n-    static RUSTC_PATH: once_cell::sync::OnceCell<Option<PathBuf>> =\n-        once_cell::sync::OnceCell::new();\n+    static RUSTC_PATH: SyncOnceCell<Option<PathBuf>> = SyncOnceCell::new();\n \n     const BIN_PATH: &str = env!(\"RUSTC_INSTALL_BINDIR\");\n "}]}