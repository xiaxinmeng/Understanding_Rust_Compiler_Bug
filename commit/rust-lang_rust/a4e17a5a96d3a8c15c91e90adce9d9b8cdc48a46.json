{"sha": "a4e17a5a96d3a8c15c91e90adce9d9b8cdc48a46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZTE3YTVhOTZkM2E4YzE1YzkxZTkwYWRjZTlkOWI4Y2RjNDhhNDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-17T21:19:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-17T21:19:31Z"}, "message": "Merge #6922\n\n6922: Show first fuzzy completions fully containing the input r=matklad a=SomeoneToIgnore\n\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "977f6be6da7e8b1f5ee668884732a630e0a13fba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/977f6be6da7e8b1f5ee668884732a630e0a13fba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4e17a5a96d3a8c15c91e90adce9d9b8cdc48a46", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf28tjCRBK7hj4Ov3rIwAAdHIIAF2SL63cQfOPlf4+q/JUK/kQ\nelxkNo8H4HG2jPJfrhaET/72frN/sTeDYUXOpj7rIBja5Qt4hYY+LQ9MaO6chdty\nUrZrleuqUjLI8cllaxUpmvwnfP+GITHkklgai7s2XtRMk5nVEFhFb+2ca1Waf6MM\ndT2IzHi3fx9G4j3jj8PQJ2MUwiS4qNc1/hwFAmN9LHx1hS5r3mVrTXxgo0WGDI20\nnzM0DkMf4Tct9gzgFMkve+Ub/ioZNJD4i+3kVZLS/IXMsObfDXNH29RGrs26ppJb\nOCPl7QbzOQ803XAOqZbOxm6Tz663PEywnJVi0+CHl6RW11K+m8BbJHJYEgEMdOQ=\n=XFPx\n-----END PGP SIGNATURE-----\n", "payload": "tree 977f6be6da7e8b1f5ee668884732a630e0a13fba\nparent b55cb897e5104ef30a3d13fe36cb97d6bf6a3597\nparent 9d2cbf05e31535cc35d9cd4e8f773f0d78ec3473\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608239971 +0000\ncommitter GitHub <noreply@github.com> 1608239971 +0000\n\nMerge #6922\n\n6922: Show first fuzzy completions fully containing the input r=matklad a=SomeoneToIgnore\n\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e17a5a96d3a8c15c91e90adce9d9b8cdc48a46", "html_url": "https://github.com/rust-lang/rust/commit/a4e17a5a96d3a8c15c91e90adce9d9b8cdc48a46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4e17a5a96d3a8c15c91e90adce9d9b8cdc48a46/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b55cb897e5104ef30a3d13fe36cb97d6bf6a3597", "url": "https://api.github.com/repos/rust-lang/rust/commits/b55cb897e5104ef30a3d13fe36cb97d6bf6a3597", "html_url": "https://github.com/rust-lang/rust/commit/b55cb897e5104ef30a3d13fe36cb97d6bf6a3597"}, {"sha": "9d2cbf05e31535cc35d9cd4e8f773f0d78ec3473", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d2cbf05e31535cc35d9cd4e8f773f0d78ec3473", "html_url": "https://github.com/rust-lang/rust/commit/9d2cbf05e31535cc35d9cd4e8f773f0d78ec3473"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "93869f92ef9c955083634d2f7d2000998963c240", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a4e17a5a96d3a8c15c91e90adce9d9b8cdc48a46/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e17a5a96d3a8c15c91e90adce9d9b8cdc48a46/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=a4e17a5a96d3a8c15c91e90adce9d9b8cdc48a46", "patch": "@@ -126,7 +126,7 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n     let anchor = ctx.name_ref_syntax.as_ref()?;\n     let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;\n \n-    let possible_imports = imports_locator::find_similar_imports(\n+    let mut all_mod_paths = imports_locator::find_similar_imports(\n         &ctx.sema,\n         ctx.krate?,\n         Some(100),\n@@ -144,15 +144,24 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n         })\n     })\n     .filter(|(mod_path, _)| mod_path.len() > 1)\n-    .filter_map(|(import_path, definition)| {\n+    .collect::<Vec<_>>();\n+\n+    all_mod_paths.sort_by_cached_key(|(mod_path, _)| {\n+        if let Some(name) = mod_path.segments.last().map(|name| name.to_string().to_lowercase()) {\n+            if name.contains(&potential_import_name.to_lowercase()) {\n+                return 0;\n+            }\n+        }\n+        1\n+    });\n+\n+    acc.add_all(all_mod_paths.into_iter().filter_map(|(import_path, definition)| {\n         render_resolution_with_import(\n             RenderContext::new(ctx),\n             ImportEdit { import_path, import_scope: import_scope.clone() },\n             &definition,\n         )\n-    });\n-\n-    acc.add_all(possible_imports);\n+    }));\n     Some(())\n }\n "}]}