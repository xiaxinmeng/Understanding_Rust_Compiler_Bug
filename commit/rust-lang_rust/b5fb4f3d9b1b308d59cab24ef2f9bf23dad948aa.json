{"sha": "b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "node_id": "C_kwDOAAsO6NoAKGI1ZmI0ZjNkOWIxYjMwOGQ1OWNhYjI0ZWYyZjliZjIzZGFkOTQ4YWE", "commit": {"author": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2023-01-28T22:42:08Z"}, "committer": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2023-02-24T14:30:14Z"}, "message": "move IO traits to std/src/os/hermit\n\nBy moving the IO traits, the RustyHermit support is harmonized to\nof other operating systems.", "tree": {"sha": "f682c0e00500a79dee0a236211318f14507f92d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f682c0e00500a79dee0a236211318f14507f92d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "html_url": "https://github.com/rust-lang/rust/commit/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/comments", "author": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7143379a528d7a26afbe835dd7e4bdca4bdb1412", "url": "https://api.github.com/repos/rust-lang/rust/commits/7143379a528d7a26afbe835dd7e4bdca4bdb1412", "html_url": "https://github.com/rust-lang/rust/commit/7143379a528d7a26afbe835dd7e4bdca4bdb1412"}], "stats": {"total": 175, "additions": 102, "deletions": 73}, "files": [{"sha": "d8c741f7f4e118e7dcb75198c703aa3c8a020493", "filename": "library/std/src/os/hermit/io.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7143379a528d7a26afbe835dd7e4bdca4bdb1412/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7143379a528d7a26afbe835dd7e4bdca4bdb1412/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio.rs?ref=7143379a528d7a26afbe835dd7e4bdca4bdb1412", "patch": "@@ -1,6 +0,0 @@\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-use hermit_abi as abi;\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub type RawFd = abi::FileDescriptor;"}, {"sha": "f20916728016ad305f2d03115fd4b546f8ef5154", "filename": "library/std/src/os/hermit/io/mod.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fmod.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "patch": "@@ -0,0 +1,10 @@\n+#![stable(feature = \"os_fd\", since = \"1.66.0\")]\n+\n+mod owned;\n+mod raw;\n+\n+// Export the types and traits for the public API.\n+#[stable(feature = \"os_fd\", since = \"1.66.0\")]\n+pub use owned::*;\n+#[stable(feature = \"os_fd\", since = \"1.66.0\")]\n+pub use raw::*;"}, {"sha": "4add29b13745032e16b745fa9d785d014698601f", "filename": "library/std/src/os/hermit/io/owned.rs", "status": "renamed", "additions": 73, "deletions": 43, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fowned.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "patch": "@@ -1,9 +1,8 @@\n-use super::raw::RawFd;\n-\n+use super::raw::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n+use crate::fmt;\n use crate::marker::PhantomData;\n use crate::mem::forget;\n-use crate::sys::fd::{AsRawFd, FromRawFd, IntoRawFd};\n-use crate::sys::hermit::abi;\n+use crate::os::hermit::abi;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n /// A borrowed file descriptor.\n@@ -49,7 +48,6 @@ pub struct BorrowedFd<'fd> {\n #[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n #[rustc_nonnull_optimization_guaranteed]\n #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-#[derive(Debug)]\n pub struct OwnedFd {\n     fd: RawFd,\n }\n@@ -71,6 +69,35 @@ impl BorrowedFd<'_> {\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl Drop for OwnedFd {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe {\n+            // Note that errors are ignored when closing a file descriptor. The\n+            // reason for this is that if an error occurs we don't actually know if\n+            // the file descriptor was closed or not, and if we retried (for\n+            // something like EINTR), we might close another valid file descriptor\n+            // opened after we closed ours.\n+            let _ = abi::close(self.fd);\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl fmt::Debug for BorrowedFd<'_> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"BorrowedFd\").field(\"fd\", &self.fd).finish()\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl fmt::Debug for OwnedFd {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"OwnedFd\").field(\"fd\", &self.fd).finish()\n+    }\n+}\n+\n #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsRawFd for BorrowedFd<'_> {\n     #[inline]\n@@ -113,14 +140,6 @@ impl FromRawFd for OwnedFd {\n     }\n }\n \n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for crate::net::TcpStream {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().socket().as_fd()\n-    }\n-}\n-\n #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::net::TcpStream> for OwnedFd {\n     #[inline]\n@@ -139,14 +158,6 @@ impl From<OwnedFd> for crate::net::TcpStream {\n     }\n }\n \n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for crate::net::TcpListener {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().socket().as_fd()\n-    }\n-}\n-\n #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::net::TcpListener> for OwnedFd {\n     #[inline]\n@@ -165,14 +176,6 @@ impl From<OwnedFd> for crate::net::TcpListener {\n     }\n }\n \n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for crate::net::UdpSocket {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().socket().as_fd()\n-    }\n-}\n-\n #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::net::UdpSocket> for OwnedFd {\n     #[inline]\n@@ -191,21 +194,8 @@ impl From<OwnedFd> for crate::net::UdpSocket {\n     }\n }\n \n+/// A trait to borrow the file descriptor from an underlying object.\n #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl Drop for OwnedFd {\n-    #[inline]\n-    fn drop(&mut self) {\n-        unsafe {\n-            // Note that errors are ignored when closing a file descriptor. The\n-            // reason for this is that if an error occurs we don't actually know if\n-            // the file descriptor was closed or not, and if we retried (for\n-            // something like EINTR), we might close another valid file descriptor\n-            // opened after we closed ours.\n-            let _ = abi::close(self.fd);\n-        }\n-    }\n-}\n-\n pub trait AsFd {\n     /// Borrows the file descriptor.\n     ///\n@@ -226,6 +216,22 @@ pub trait AsFd {\n     fn as_fd(&self) -> BorrowedFd<'_>;\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl<T: AsFd> AsFd for &T {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        T::as_fd(self)\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl<T: AsFd> AsFd for &mut T {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        T::as_fd(self)\n+    }\n+}\n+\n #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for OwnedFd {\n     #[inline]\n@@ -236,3 +242,27 @@ impl AsFd for OwnedFd {\n         unsafe { BorrowedFd::borrow_raw(self.as_raw_fd()) }\n     }\n }\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl AsFd for crate::net::UdpSocket {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        self.as_inner().socket().as_fd()\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl AsFd for crate::net::TcpListener {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        self.as_inner().socket().as_fd()\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl AsFd for crate::net::TcpStream {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        self.as_inner().socket().as_fd()\n+    }\n+}", "previous_filename": "library/std/src/sys/hermit/fd/owned.rs"}, {"sha": "cdec90b4b87cd3a86c8e06d7257ecd7da745f5cf", "filename": "library/std/src/os/hermit/io/raw.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fraw.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "previous_filename": "library/std/src/sys/hermit/fd/raw.rs"}, {"sha": "89b1b831912dfc7e5c084bf10768e268f5fcf37a", "filename": "library/std/src/os/hermit/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fmod.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "patch": "@@ -1,6 +1,11 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[allow(unused_extern_crates)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub extern crate hermit_abi as abi;\n+\n pub mod ffi;\n+pub mod io;\n \n /// A prelude for conveniently writing platform-specific code.\n ///"}, {"sha": "af137c9bd8563ad310356e851b6b11af880dc3f5", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "patch": "@@ -60,16 +60,6 @@ pub mod windows {}\n         all(target_vendor = \"fortanix\", target_env = \"sgx\")\n     )\n )))]\n-#[cfg(target_os = \"hermit\")]\n-#[path = \"hermit/mod.rs\"]\n-pub mod unix;\n-#[cfg(not(all(\n-    doc,\n-    any(\n-        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n-        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n-    )\n-)))]\n #[cfg(all(not(target_os = \"hermit\"), any(unix, doc)))]\n pub mod unix;\n \n@@ -123,6 +113,8 @@ pub mod freebsd;\n pub mod fuchsia;\n #[cfg(target_os = \"haiku\")]\n pub mod haiku;\n+#[cfg(target_os = \"hermit\")]\n+pub mod hermit;\n #[cfg(target_os = \"horizon\")]\n pub mod horizon;\n #[cfg(target_os = \"illumos\")]"}, {"sha": "220a76e4b1237b4e5ee324e64ebc9334f9bff714", "filename": "library/std/src/sys/hermit/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "patch": "@@ -1,6 +1,6 @@\n use crate::ffi::{c_char, CStr, OsString};\n use crate::fmt;\n-use crate::os::unix::ffi::OsStringExt;\n+use crate::os::hermit::ffi::OsStringExt;\n use crate::ptr;\n use crate::sync::atomic::{\n     AtomicIsize, AtomicPtr,"}, {"sha": "ea981b9fa97ca61c389c1bfdb90c997547d11f95", "filename": "library/std/src/sys/hermit/fd.rs", "status": "renamed", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "patch": "@@ -1,16 +1,13 @@\n #![unstable(reason = \"not public\", issue = \"none\", feature = \"fd\")]\n \n-mod owned;\n-mod raw;\n-\n use crate::io::{self, Read};\n+use crate::os::hermit::io::{FromRawFd, OwnedFd, RawFd};\n use crate::sys::cvt;\n use crate::sys::hermit::abi;\n use crate::sys::unsupported;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n-pub use self::owned::*;\n-pub use self::raw::*;\n+use crate::os::hermit::io::*;\n \n #[derive(Debug)]\n pub struct FileDesc {", "previous_filename": "library/std/src/sys/hermit/fd/mod.rs"}, {"sha": "cf9f9e062640e5eecc71513fac0c8e1ca3658754", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "patch": "@@ -3,12 +3,14 @@ use crate::fmt;\n use crate::hash::{Hash, Hasher};\n use crate::io::{self, Error, ErrorKind};\n use crate::io::{BorrowedCursor, IoSlice, IoSliceMut, SeekFrom};\n+use crate::os::hermit::io::FromRawFd;\n use crate::path::{Path, PathBuf};\n use crate::sys::common::small_c_string::run_path_with_cstr;\n use crate::sys::cvt;\n-use crate::sys::hermit::abi;\n-use crate::sys::hermit::abi::{O_APPEND, O_CREAT, O_EXCL, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY};\n-use crate::sys::hermit::fd::{FileDesc, FromRawFd};\n+use crate::sys::hermit::abi::{\n+    self, O_APPEND, O_CREAT, O_EXCL, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY,\n+};\n+use crate::sys::hermit::fd::FileDesc;\n use crate::sys::time::SystemTime;\n use crate::sys::unsupported;\n "}, {"sha": "d34a4cfedea783877477c07b7f5849cd485c2fae", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "patch": "@@ -57,9 +57,7 @@ pub mod locks {\n }\n \n use crate::io::ErrorKind;\n-\n-#[allow(unused_extern_crates)]\n-pub extern crate hermit_abi as abi;\n+use crate::os::hermit::abi;\n \n pub fn unsupported<T>() -> crate::io::Result<T> {\n     Err(unsupported_err())"}, {"sha": "5fb6281aa1e3d5f76ac0fdd4cba3e85a9c5d8cef", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "patch": "@@ -4,7 +4,8 @@ use crate::cmp;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{Shutdown, SocketAddr};\n-use crate::sys::fd::{AsFd, AsRawFd, BorrowedFd, FileDesc, FromRawFd, RawFd};\n+use crate::os::hermit::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, RawFd};\n+use crate::sys::hermit::fd::FileDesc;\n use crate::sys::time::Instant;\n use crate::sys_common::net::{getsockopt, setsockopt, sockaddr_to_addr};\n use crate::sys_common::{AsInner, FromInner, IntoInner};"}, {"sha": "e53dbae6119810456f2f4e6521490138dcd8bf34", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "patch": "@@ -4,7 +4,7 @@ use crate::ffi::{CStr, OsStr, OsString};\n use crate::fmt;\n use crate::io;\n use crate::marker::PhantomData;\n-use crate::os::unix::ffi::OsStringExt;\n+use crate::os::hermit::ffi::OsStringExt;\n use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sync::Mutex;"}]}