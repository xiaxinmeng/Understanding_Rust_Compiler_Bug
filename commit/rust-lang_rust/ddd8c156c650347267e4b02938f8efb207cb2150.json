{"sha": "ddd8c156c650347267e4b02938f8efb207cb2150", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZDhjMTU2YzY1MDM0NzI2N2U0YjAyOTM4ZjhlZmIyMDdjYjIxNTA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-20T00:32:08Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-20T01:01:24Z"}, "message": "std: Remove old magic core mod", "tree": {"sha": "19817342681afe0c8defbeec878d15863ef2540f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19817342681afe0c8defbeec878d15863ef2540f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddd8c156c650347267e4b02938f8efb207cb2150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd8c156c650347267e4b02938f8efb207cb2150", "html_url": "https://github.com/rust-lang/rust/commit/ddd8c156c650347267e4b02938f8efb207cb2150", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddd8c156c650347267e4b02938f8efb207cb2150/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d64fa328839c4fcce43c1b01164090ac36edc13", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d64fa328839c4fcce43c1b01164090ac36edc13", "html_url": "https://github.com/rust-lang/rust/commit/8d64fa328839c4fcce43c1b01164090ac36edc13"}], "stats": {"total": 74, "additions": 32, "deletions": 42}, "files": [{"sha": "6fd06c951917d83309e008978f855e9fa976eb6d", "filename": "src/libstd/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddd8c156c650347267e4b02938f8efb207cb2150/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd8c156c650347267e4b02938f8efb207cb2150/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=ddd8c156c650347267e4b02938f8efb207cb2150", "patch": "@@ -21,7 +21,7 @@ the `clone` method.\n \n */\n \n-use core::kinds::Freeze;\n+use std::kinds::Freeze;\n \n /// A common trait for cloning an object.\n pub trait Clone {"}, {"sha": "0acd6fee57efe1cb08ab6699ad83d25351948fe9", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ddd8c156c650347267e4b02938f8efb207cb2150/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd8c156c650347267e4b02938f8efb207cb2150/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=ddd8c156c650347267e4b02938f8efb207cb2150", "patch": "@@ -382,19 +382,19 @@ mod pipesy {\n \n     #[allow(non_camel_case_types)]\n     pub mod oneshot {\n-        priv use core::kinds::Send;\n+        priv use std::kinds::Send;\n         use ptr::to_mut_unsafe_ptr;\n \n         pub fn init<T: Send>() -> (server::Oneshot<T>, client::Oneshot<T>) {\n-            pub use core::pipes::HasBuffer;\n+            pub use std::pipes::HasBuffer;\n \n-            let buffer = ~::core::pipes::Buffer {\n-                header: ::core::pipes::BufferHeader(),\n+            let buffer = ~::std::pipes::Buffer {\n+                header: ::std::pipes::BufferHeader(),\n                 data: __Buffer {\n-                    Oneshot: ::core::pipes::mk_packet::<Oneshot<T>>()\n+                    Oneshot: ::std::pipes::mk_packet::<Oneshot<T>>()\n                 },\n             };\n-            do ::core::pipes::entangle_buffer(buffer) |buffer, data| {\n+            do ::std::pipes::entangle_buffer(buffer) |buffer, data| {\n                 data.Oneshot.set_buffer(buffer);\n                 to_mut_unsafe_ptr(&mut data.Oneshot)\n             }\n@@ -403,23 +403,23 @@ mod pipesy {\n         pub enum Oneshot<T> { pub send(T), }\n         #[allow(non_camel_case_types)]\n         pub struct __Buffer<T> {\n-            Oneshot: ::core::pipes::Packet<Oneshot<T>>,\n+            Oneshot: ::std::pipes::Packet<Oneshot<T>>,\n         }\n \n         #[allow(non_camel_case_types)]\n         pub mod client {\n \n-            priv use core::kinds::Send;\n+            priv use std::kinds::Send;\n \n             #[allow(non_camel_case_types)]\n             pub fn try_send<T: Send>(pipe: Oneshot<T>, x_0: T) ->\n-                ::core::option::Option<()> {\n+                ::std::option::Option<()> {\n                 {\n                     use super::send;\n                     let message = send(x_0);\n-                    if ::core::pipes::send(pipe, message) {\n-                        ::core::pipes::rt::make_some(())\n-                    } else { ::core::pipes::rt::make_none() }\n+                    if ::std::pipes::send(pipe, message) {\n+                        ::std::pipes::rt::make_some(())\n+                    } else { ::std::pipes::rt::make_none() }\n                 }\n             }\n \n@@ -428,21 +428,21 @@ mod pipesy {\n                 {\n                     use super::send;\n                     let message = send(x_0);\n-                    ::core::pipes::send(pipe, message);\n+                    ::std::pipes::send(pipe, message);\n                 }\n             }\n \n             #[allow(non_camel_case_types)]\n             pub type Oneshot<T> =\n-                ::core::pipes::SendPacketBuffered<super::Oneshot<T>,\n+                ::std::pipes::SendPacketBuffered<super::Oneshot<T>,\n             super::__Buffer<T>>;\n         }\n \n         #[allow(non_camel_case_types)]\n         pub mod server {\n             #[allow(non_camel_case_types)]\n             pub type Oneshot<T> =\n-                ::core::pipes::RecvPacketBuffered<super::Oneshot<T>,\n+                ::std::pipes::RecvPacketBuffered<super::Oneshot<T>,\n             super::__Buffer<T>>;\n         }\n     }\n@@ -557,52 +557,52 @@ mod pipesy {\n \n     #[allow(non_camel_case_types)]\n     pub mod streamp {\n-        priv use core::kinds::Send;\n+        priv use std::kinds::Send;\n \n         pub fn init<T: Send>() -> (server::Open<T>, client::Open<T>) {\n-            pub use core::pipes::HasBuffer;\n-            ::core::pipes::entangle()\n+            pub use std::pipes::HasBuffer;\n+            ::std::pipes::entangle()\n         }\n \n         #[allow(non_camel_case_types)]\n         pub enum Open<T> { pub data(T, server::Open<T>), }\n \n         #[allow(non_camel_case_types)]\n         pub mod client {\n-            priv use core::kinds::Send;\n+            priv use std::kinds::Send;\n \n             #[allow(non_camel_case_types)]\n             pub fn try_data<T: Send>(pipe: Open<T>, x_0: T) ->\n-                ::core::option::Option<Open<T>> {\n+                ::std::option::Option<Open<T>> {\n                 {\n                     use super::data;\n-                    let (s, c) = ::core::pipes::entangle();\n+                    let (s, c) = ::std::pipes::entangle();\n                     let message = data(x_0, s);\n-                    if ::core::pipes::send(pipe, message) {\n-                        ::core::pipes::rt::make_some(c)\n-                    } else { ::core::pipes::rt::make_none() }\n+                    if ::std::pipes::send(pipe, message) {\n+                        ::std::pipes::rt::make_some(c)\n+                    } else { ::std::pipes::rt::make_none() }\n                 }\n             }\n \n             #[allow(non_camel_case_types)]\n             pub fn data<T: Send>(pipe: Open<T>, x_0: T) -> Open<T> {\n                 {\n                     use super::data;\n-                    let (s, c) = ::core::pipes::entangle();\n+                    let (s, c) = ::std::pipes::entangle();\n                     let message = data(x_0, s);\n-                    ::core::pipes::send(pipe, message);\n+                    ::std::pipes::send(pipe, message);\n                     c\n                 }\n             }\n \n             #[allow(non_camel_case_types)]\n-            pub type Open<T> = ::core::pipes::SendPacket<super::Open<T>>;\n+            pub type Open<T> = ::std::pipes::SendPacket<super::Open<T>>;\n         }\n \n         #[allow(non_camel_case_types)]\n         pub mod server {\n             #[allow(non_camel_case_types)]\n-            pub type Open<T> = ::core::pipes::RecvPacket<super::Open<T>>;\n+            pub type Open<T> = ::std::pipes::RecvPacket<super::Open<T>>;\n         }\n     }\n "}, {"sha": "8e7f49464ffc204c38125c3344183b5e37f9012e", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddd8c156c650347267e4b02938f8efb207cb2150/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd8c156c650347267e4b02938f8efb207cb2150/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=ddd8c156c650347267e4b02938f8efb207cb2150", "patch": "@@ -12,7 +12,7 @@\n \n use clone::Clone;\n use container::Container;\n-use core::cmp::{Ord, Eq};\n+use std::cmp::{Ord, Eq};\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use option::{None, Option, Some};\n use char;"}, {"sha": "b30a55978f742d9ba7363c97b36db1f4512f6615", "filename": "src/libstd/rt/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddd8c156c650347267e4b02938f8efb207cb2150/src%2Flibstd%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd8c156c650347267e4b02938f8efb207cb2150/src%2Flibstd%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcontext.rs?ref=ddd8c156c650347267e4b02938f8efb207cb2150", "patch": "@@ -209,6 +209,6 @@ fn align_down(sp: *mut uint) -> *mut uint {\n // XXX: ptr::offset is positive ints only\n #[inline]\n pub fn mut_offset<T>(ptr: *mut T, count: int) -> *mut T {\n-    use core::sys::size_of;\n+    use std::sys::size_of;\n     (ptr as int + count * (size_of::<T>() as int)) as *mut T\n }"}, {"sha": "cbf00f43c61b9364eefe68f44bfbfcf0c9e400cd", "filename": "src/libstd/std.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ddd8c156c650347267e4b02938f8efb207cb2150/src%2Flibstd%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd8c156c650347267e4b02938f8efb207cb2150/src%2Flibstd%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rs?ref=ddd8c156c650347267e4b02938f8efb207cb2150", "patch": "@@ -206,16 +206,6 @@ pub mod rt;\n // 'std' so that macro-expanded references to std::error and such\n // can be resolved within libstd.\n #[doc(hidden)]\n-mod core {\n-    pub use clone;\n-    pub use cmp;\n-    pub use condition;\n-    pub use option;\n-    pub use kinds;\n-    pub use sys;\n-    pub use pipes;\n-}\n-#[doc(hidden)]\n mod std {\n     pub use clone;\n     pub use cmp;"}, {"sha": "822b005de37a2d2051858266df598beeffb89c2e", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddd8c156c650347267e4b02938f8efb207cb2150/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd8c156c650347267e4b02938f8efb207cb2150/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=ddd8c156c650347267e4b02938f8efb207cb2150", "patch": "@@ -411,7 +411,7 @@ pub fn check_integrity<T>(trie: &TrieNode<T>) {\n #[cfg(test)]\n mod test_map {\n     use super::*;\n-    use core::option::{Some, None};\n+    use option::{Some, None};\n     use uint;\n \n     #[test]"}]}