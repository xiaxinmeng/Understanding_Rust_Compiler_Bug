{"sha": "ff79a4471cbf5fa4e78fcf56be129a3d56690127", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNzlhNDQ3MWNiZjVmYTRlNzhmY2Y1NmJlMTI5YTNkNTY2OTAxMjc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-23T05:40:04Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-25T05:22:26Z"}, "message": "syntax: record multibyte chars' positions absolutely, not relative to\nfile.\n\nPreviously multibyte UTF-8 chars were being recorded as byte offsets\nfrom the start of the file, and then later compared against global byte\npositions, resulting in the compiler possibly thinking it had a byte\nposition pointing inside a multibyte character, if there were multibyte\ncharacters in any non-crate files. (Although, sometimes the byte offsets\nline up just right to not ICE, but that was a coincidence.)\n\nFixes #11136.\nFixes #11178.", "tree": {"sha": "6835775de94115c4f499981198c8b618330dd2fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6835775de94115c4f499981198c8b618330dd2fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff79a4471cbf5fa4e78fcf56be129a3d56690127", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff79a4471cbf5fa4e78fcf56be129a3d56690127", "html_url": "https://github.com/rust-lang/rust/commit/ff79a4471cbf5fa4e78fcf56be129a3d56690127", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff79a4471cbf5fa4e78fcf56be129a3d56690127/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dad52cfcb58cb30170c6247f2053bc0f0d57466a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dad52cfcb58cb30170c6247f2053bc0f0d57466a", "html_url": "https://github.com/rust-lang/rust/commit/dad52cfcb58cb30170c6247f2053bc0f0d57466a"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "5bace75a5eace6bcc48837c09d5369878d2191b8", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff79a4471cbf5fa4e78fcf56be129a3d56690127/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff79a4471cbf5fa4e78fcf56be129a3d56690127/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=ff79a4471cbf5fa4e78fcf56be129a3d56690127", "patch": "@@ -264,8 +264,7 @@ pub fn bump(rdr: &StringReader) {\n         }\n \n         if byte_offset_diff > 1 {\n-            rdr.filemap.record_multibyte_char(\n-                Pos::from_uint(current_byte_offset), byte_offset_diff);\n+            rdr.filemap.record_multibyte_char(rdr.last_pos.get(), byte_offset_diff);\n         }\n     } else {\n         rdr.curr.set(None);"}, {"sha": "1e420bddb777b4181e860a9e53568a23b307cf9d", "filename": "src/test/run-make/unicode-input/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff79a4471cbf5fa4e78fcf56be129a3d56690127/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ff79a4471cbf5fa4e78fcf56be129a3d56690127/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile?ref=ff79a4471cbf5fa4e78fcf56be129a3d56690127", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\t# check that we don't ICE on unicode input, issue #11178\n+\t$(RUSTC) multiple_files.rs\n+\t$(call RUN,multiple_files)  \"$(RUSTC)\" \"$(TMPDIR)\""}, {"sha": "2758ac12bab1b13820a235ab3c2f32440c45c46e", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ff79a4471cbf5fa4e78fcf56be129a3d56690127/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff79a4471cbf5fa4e78fcf56be129a3d56690127/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=ff79a4471cbf5fa4e78fcf56be129a3d56690127", "patch": "@@ -0,0 +1,54 @@\n+use std::{char, os, run, str};\n+use std::rand::{task_rng, Rng};\n+use std::io::File;\n+\n+// creates unicode_input_multiple_files_{main,chars}.rs, where the\n+// former imports the latter. `_chars` just contains an indentifier\n+// made up of random characters, because will emit an error message\n+// about the ident being in the wrong place, with a span (and creating\n+// this span used to upset the compiler).\n+\n+fn random_char() -> char {\n+    let mut rng = task_rng();\n+    // a subset of the XID_start unicode table (ensuring that the\n+    // compiler doesn't fail with an \"unrecognised token\" error)\n+    let (lo, hi): (u32, u32) = match rng.gen_range(1, 4 + 1) {\n+        1 => (0x41, 0x5a),\n+        2 => (0xf8, 0x1ba),\n+        3 => (0x1401, 0x166c),\n+        _ => (0x10400, 0x1044f)\n+    };\n+\n+    char::from_u32(rng.gen_range(lo, hi + 1)).unwrap()\n+}\n+\n+fn main() {\n+    let args = os::args();\n+    let rustc = args[1].as_slice();\n+    let tmpdir = Path::new(args[2].as_slice());\n+\n+    let main_file = tmpdir.join(\"unicode_input_multiple_files_main.rs\");\n+    let main_file_str = main_file.as_str().unwrap();\n+    {\n+        let _ = File::create(&main_file).unwrap()\n+            .write_str(\"mod unicode_input_multiple_files_chars;\");\n+    }\n+\n+    for _ in range(0, 100) {\n+        {\n+            let mut w = File::create(&tmpdir.join(\"unicode_input_multiple_files_chars.rs\")).unwrap();\n+            for _ in range(0, 30) {\n+                let _ = w.write_char(random_char());\n+            }\n+        }\n+\n+        // rustc is passed to us with --out-dir and -L etc., so we\n+        // can't exec it directly\n+        let result = run::process_output(\"sh\", [~\"-c\", rustc + \" \" + main_file_str]).unwrap();\n+        let err = str::from_utf8_lossy(result.error);\n+\n+        // positive test so that this test will be updated when the\n+        // compiler changes.\n+        assert!(err.as_slice().contains(\"expected item but found\"))\n+    }\n+}"}]}