{"sha": "25e4389866d8a4483d7a20b5d3a72c2b00dd9c21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZTQzODk4NjZkOGE0NDgzZDdhMjBiNWQzYTcyYzJiMDBkZDljMjE=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-12-28T22:50:18Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-02T18:47:41Z"}, "message": "Use for_each_impl", "tree": {"sha": "27b47e3b48ff1ea085580bc773b8531f3f94b8fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27b47e3b48ff1ea085580bc773b8531f3f94b8fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e4389866d8a4483d7a20b5d3a72c2b00dd9c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e4389866d8a4483d7a20b5d3a72c2b00dd9c21", "html_url": "https://github.com/rust-lang/rust/commit/25e4389866d8a4483d7a20b5d3a72c2b00dd9c21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e4389866d8a4483d7a20b5d3a72c2b00dd9c21/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba24fbd404d7489298af68b4384d1544cd54844d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba24fbd404d7489298af68b4384d1544cd54844d", "html_url": "https://github.com/rust-lang/rust/commit/ba24fbd404d7489298af68b4384d1544cd54844d"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "adf0fdee18237888565e6ad3c12ebb431f8c2651", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/25e4389866d8a4483d7a20b5d3a72c2b00dd9c21/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e4389866d8a4483d7a20b5d3a72c2b00dd9c21/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=25e4389866d8a4483d7a20b5d3a72c2b00dd9c21", "patch": "@@ -234,39 +234,30 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                             if let Some(s) = custom_note {\n                                 err.fileline_note(obligation.cause.span, &s);\n                             } else {\n-                                infcx.tcx.populate_implementations_for_trait_if_necessary(\n-                                    trait_ref.def_id());\n-\n+                                let simp = fast_reject::simplify_type(infcx.tcx,\n+                                                                      trait_ref.self_ty(),\n+                                                                      true);\n+                                let mut impl_candidates = Vec::new();\n                                 let trait_def = infcx.tcx.lookup_trait_def(trait_ref.def_id());\n-                                let blanket_impls = trait_def.blanket_impls.borrow();\n-                                let impl_iter = blanket_impls.iter()\n-                                                             .filter_map(|&id|\n-                                                                     infcx.tcx.impl_trait_ref(id));\n-\n-                                let nonblanket = trait_def.nonblanket_impls.borrow();\n-                                let nonblanket_iter = nonblanket.values()\n-                                                            .flat_map(|ids|\n-                                                                ids.iter().filter_map(|&id|\n-                                                                    infcx.tcx.impl_trait_ref(id)));\n-\n-                                let simp = fast_reject::simplify_type(infcx.tcx, trait_ref.self_ty(), true);\n-                                let nonblanket_iter = nonblanket_iter.filter(|def| {\n+\n+                                trait_def.for_each_impl(infcx.tcx, |def_id| {\n+                                    let imp = infcx.tcx.impl_trait_ref(def_id).unwrap();\n                                     if let Some(simp) = simp {\n-                                        let imp_simp = fast_reject::simplify_type(infcx.tcx, def.self_ty(), true);\n+                                        let imp_simp = fast_reject::simplify_type(infcx.tcx,\n+                                                                                  imp.self_ty(),\n+                                                                                  true);\n                                         if let Some(imp_simp) = imp_simp {\n-                                            simp == imp_simp\n+                                            if simp == imp_simp {\n+                                                impl_candidates.push(imp);\n+                                            }\n                                         } else {\n-                                            false\n+                                            impl_candidates.push(imp);\n                                         }\n                                     } else {\n-                                        true\n+                                        impl_candidates.push(imp);\n                                     }\n                                 });\n \n-                                let impl_candidates = impl_iter.chain(nonblanket_iter)\n-                                                               .map(|imp| format!(\"  {}\", imp))\n-                                                               .take(5).collect::<Vec<_>>();\n-\n                                 if impl_candidates.len() > 0 {\n                                     err.fileline_help(\n                                         obligation.cause.span,"}]}