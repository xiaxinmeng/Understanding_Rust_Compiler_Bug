{"sha": "5560c51738c48d4881c31f7a081011531d14114e", "node_id": "C_kwDOAAsO6NoAKDU1NjBjNTE3MzhjNDhkNDg4MWMzMWY3YTA4MTAxMTUzMWQxNDExNGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-29T05:34:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-29T05:34:29Z"}, "message": "Auto merge of #96444 - nbdd0121:used2, r=petrochenkov\n\nUse decorated names for linked_symbols on Windows\n\nFix #96423\n\nr? `@petrochenkov`", "tree": {"sha": "304bcb3cbb8333dc0e46207f106887ae45048540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/304bcb3cbb8333dc0e46207f106887ae45048540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5560c51738c48d4881c31f7a081011531d14114e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5560c51738c48d4881c31f7a081011531d14114e", "html_url": "https://github.com/rust-lang/rust/commit/5560c51738c48d4881c31f7a081011531d14114e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5560c51738c48d4881c31f7a081011531d14114e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddb7fbe8434be481607ae199fe2aee976ee2fc2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb7fbe8434be481607ae199fe2aee976ee2fc2e", "html_url": "https://github.com/rust-lang/rust/commit/ddb7fbe8434be481607ae199fe2aee976ee2fc2e"}, {"sha": "4f9acb268704a1c7f78c8c55da0d7614eac57ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9acb268704a1c7f78c8c55da0d7614eac57ade", "html_url": "https://github.com/rust-lang/rust/commit/4f9acb268704a1c7f78c8c55da0d7614eac57ade"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "54a69fcf68110e6d91d62208ab83826173b294dd", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5560c51738c48d4881c31f7a081011531d14114e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5560c51738c48d4881c31f7a081011531d14114e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=5560c51738c48d4881c31f7a081011531d14114e", "patch": "@@ -1696,6 +1696,10 @@ fn add_linked_symbol_object(\n     // so add an empty section.\n     if file.format() == object::BinaryFormat::Coff {\n         file.add_section(Vec::new(), \".text\".into(), object::SectionKind::Text);\n+\n+        // We handle the name decoration of COFF targets in `symbol_export.rs`, so disable the\n+        // default mangler in `object` crate.\n+        file.set_mangling(object::write::Mangling::None);\n     }\n \n     for (sym, kind) in symbols.iter() {"}, {"sha": "0805df5dad6bfe33fcd4cf718df9227aebe99ee9", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5560c51738c48d4881c31f7a081011531d14114e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5560c51738c48d4881c31f7a081011531d14114e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=5560c51738c48d4881c31f7a081011531d14114e", "patch": "@@ -1576,7 +1576,7 @@ pub(crate) fn linked_symbols(\n     for_each_exported_symbols_include_dep(tcx, crate_type, |symbol, info, cnum| {\n         if info.level.is_below_threshold(export_threshold) || info.used {\n             symbols.push((\n-                symbol_export::symbol_name_for_instance_in_crate(tcx, symbol, cnum),\n+                symbol_export::linking_symbol_name_for_instance_in_crate(tcx, symbol, cnum),\n                 info.kind,\n             ));\n         }"}, {"sha": "f651814be7ea6a8d7f3533ee4914ab0e2c97c546", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5560c51738c48d4881c31f7a081011531d14114e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5560c51738c48d4881c31f7a081011531d14114e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=5560c51738c48d4881c31f7a081011531d14114e", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::middle::exported_symbols::{\n use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::Instance;\n-use rustc_middle::ty::{SymbolName, TyCtxt};\n+use rustc_middle::ty::{self, SymbolName, TyCtxt};\n use rustc_session::config::CrateType;\n use rustc_target::spec::SanitizerSet;\n \n@@ -493,6 +493,76 @@ pub fn symbol_name_for_instance_in_crate<'tcx>(\n     }\n }\n \n+/// This is the symbol name of the given instance as seen by the linker.\n+///\n+/// On 32-bit Windows symbols are decorated according to their calling conventions.\n+pub fn linking_symbol_name_for_instance_in_crate<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    symbol: ExportedSymbol<'tcx>,\n+    instantiating_crate: CrateNum,\n+) -> String {\n+    use rustc_target::abi::call::Conv;\n+\n+    let mut undecorated = symbol_name_for_instance_in_crate(tcx, symbol, instantiating_crate);\n+\n+    let target = &tcx.sess.target;\n+    if !target.is_like_windows {\n+        // Mach-O has a global \"_\" suffix and `object` crate will handle it.\n+        // ELF does not have any symbol decorations.\n+        return undecorated;\n+    }\n+\n+    let x86 = match &target.arch[..] {\n+        \"x86\" => true,\n+        \"x86_64\" => false,\n+        // Only x86/64 use symbol decorations.\n+        _ => return undecorated,\n+    };\n+\n+    let instance = match symbol {\n+        ExportedSymbol::NonGeneric(def_id) | ExportedSymbol::Generic(def_id, _)\n+            if tcx.is_static(def_id) =>\n+        {\n+            None\n+        }\n+        ExportedSymbol::NonGeneric(def_id) => Some(Instance::mono(tcx, def_id)),\n+        ExportedSymbol::Generic(def_id, substs) => Some(Instance::new(def_id, substs)),\n+        // DropGlue always use the Rust calling convention and thus follow the target's default\n+        // symbol decoration scheme.\n+        ExportedSymbol::DropGlue(..) => None,\n+        // NoDefId always follow the target's default symbol decoration scheme.\n+        ExportedSymbol::NoDefId(..) => None,\n+    };\n+\n+    let (conv, args) = instance\n+        .map(|i| {\n+            tcx.fn_abi_of_instance(ty::ParamEnv::reveal_all().and((i, ty::List::empty())))\n+                .unwrap_or_else(|_| bug!(\"fn_abi_of_instance({i:?}) failed\"))\n+        })\n+        .map(|fnabi| (fnabi.conv, &fnabi.args[..]))\n+        .unwrap_or((Conv::Rust, &[]));\n+\n+    // Decorate symbols with prefices, suffices and total number of bytes of arguments.\n+    // Reference: https://docs.microsoft.com/en-us/cpp/build/reference/decorated-names?view=msvc-170\n+    let (prefix, suffix) = match conv {\n+        Conv::X86Fastcall => (\"@\", \"@\"),\n+        Conv::X86Stdcall => (\"_\", \"@\"),\n+        Conv::X86VectorCall => (\"\", \"@@\"),\n+        _ => {\n+            if x86 {\n+                undecorated.insert(0, '_');\n+            }\n+            return undecorated;\n+        }\n+    };\n+\n+    let args_in_bytes: u64 = args\n+        .iter()\n+        .map(|abi| abi.layout.size.bytes().next_multiple_of(target.pointer_width as u64 / 8))\n+        .sum();\n+    format!(\"{prefix}{undecorated}{suffix}{args_in_bytes}\")\n+}\n+\n fn wasm_import_module_map(tcx: TyCtxt<'_>, cnum: CrateNum) -> FxHashMap<DefId, String> {\n     // Build up a map from DefId to a `NativeLib` structure, where\n     // `NativeLib` internally contains information about"}, {"sha": "05d32972dab173b6f8746f814642182ca23ef22f", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5560c51738c48d4881c31f7a081011531d14114e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5560c51738c48d4881c31f7a081011531d14114e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=5560c51738c48d4881c31f7a081011531d14114e", "patch": "@@ -7,6 +7,7 @@\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![feature(strict_provenance)]\n+#![feature(int_roundings)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "9948488c0e95032517f67ebecc1fb0a5f8883318", "filename": "src/test/ui/symbol-names/x86-stdcall.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5560c51738c48d4881c31f7a081011531d14114e/src%2Ftest%2Fui%2Fsymbol-names%2Fx86-stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5560c51738c48d4881c31f7a081011531d14114e/src%2Ftest%2Fui%2Fsymbol-names%2Fx86-stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fx86-stdcall.rs?ref=5560c51738c48d4881c31f7a081011531d14114e", "patch": "@@ -0,0 +1,13 @@\n+// build-pass\n+// only-x86-windows\n+#![crate_type = \"cdylib\"]\n+#![feature(abi_vectorcall)]\n+\n+#[no_mangle]\n+extern \"stdcall\" fn foo(_: bool) {}\n+\n+#[no_mangle]\n+extern \"fastcall\" fn bar(_: u8) {}\n+\n+#[no_mangle]\n+extern \"vectorcall\" fn baz(_: u16) {}"}]}