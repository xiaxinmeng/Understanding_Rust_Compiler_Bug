{"sha": "f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1", "node_id": "C_kwDOAAsO6NoAKGYxMDIzZmJkYzlhYWZjOGM3OGM3YTY5NjdkMGRjNGRhYTc0MWMyYTE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-18T16:38:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-20T12:40:19Z"}, "message": "avoid into_pointer_or_addr and into_parts in visit_freeze_sensitive", "tree": {"sha": "d4a3223361df97992b854e61bc29d0740d0921f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4a3223361df97992b854e61bc29d0740d0921f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1", "html_url": "https://github.com/rust-lang/rust/commit/f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec1dc749a344522b080ec8162b9fd24fce0c507e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1dc749a344522b080ec8162b9fd24fce0c507e", "html_url": "https://github.com/rust-lang/rust/commit/ec1dc749a344522b080ec8162b9fd24fce0c507e"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "9d387b0659386f5bdb1b661695924e5790eb53c1", "filename": "src/helpers.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1", "patch": "@@ -271,8 +271,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Visits the memory covered by `place`, sensitive to freezing: the 2nd parameter\n     /// of `action` will be true if this is frozen, false if this is in an `UnsafeCell`.\n     /// The range is relative to `place`.\n-    ///\n-    /// Assumes that the `place` has a proper pointer in it.\n     fn visit_freeze_sensitive(\n         &self,\n         place: &MPlaceTy<'tcx, Tag>,\n@@ -290,33 +288,30 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Store how far we proceeded into the place so far. Everything to the left of\n         // this offset has already been handled, in the sense that the frozen parts\n         // have had `action` called on them.\n-        let ptr = place.ptr.into_pointer_or_addr().unwrap();\n-        let start_offset = ptr.into_parts().1 as Size; // we just compare offsets, the abs. value never matters\n-        let mut cur_offset = start_offset;\n+        let start_addr = place.ptr.addr();\n+        let mut cur_addr = start_addr;\n         // Called when we detected an `UnsafeCell` at the given offset and size.\n         // Calls `action` and advances `cur_ptr`.\n-        let mut unsafe_cell_action = |unsafe_cell_ptr: Pointer<Option<Tag>>,\n+        let mut unsafe_cell_action = |unsafe_cell_ptr: &Pointer<Option<Tag>>,\n                                       unsafe_cell_size: Size| {\n-            let unsafe_cell_ptr = unsafe_cell_ptr.into_pointer_or_addr().unwrap();\n-            debug_assert_eq!(unsafe_cell_ptr.provenance, ptr.provenance);\n             // We assume that we are given the fields in increasing offset order,\n             // and nothing else changes.\n-            let unsafe_cell_offset = unsafe_cell_ptr.into_parts().1 as Size; // we just compare offsets, the abs. value never matters\n-            assert!(unsafe_cell_offset >= cur_offset);\n-            let frozen_size = unsafe_cell_offset - cur_offset;\n+            let unsafe_cell_addr = unsafe_cell_ptr.addr();\n+            assert!(unsafe_cell_addr >= cur_addr);\n+            let frozen_size = unsafe_cell_addr - cur_addr;\n             // Everything between the cur_ptr and this `UnsafeCell` is frozen.\n             if frozen_size != Size::ZERO {\n-                action(alloc_range(cur_offset - start_offset, frozen_size), /*frozen*/ true)?;\n+                action(alloc_range(cur_addr - start_addr, frozen_size), /*frozen*/ true)?;\n             }\n-            cur_offset += frozen_size;\n+            cur_addr += frozen_size;\n             // This `UnsafeCell` is NOT frozen.\n             if unsafe_cell_size != Size::ZERO {\n                 action(\n-                    alloc_range(cur_offset - start_offset, unsafe_cell_size),\n+                    alloc_range(cur_addr - start_addr, unsafe_cell_size),\n                     /*frozen*/ false,\n                 )?;\n             }\n-            cur_offset += unsafe_cell_size;\n+            cur_addr += unsafe_cell_size;\n             // Done\n             Ok(())\n         };\n@@ -334,7 +329,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         .unwrap_or_else(|| place.layout.size);\n                     // Now handle this `UnsafeCell`, unless it is empty.\n                     if unsafe_cell_size != Size::ZERO {\n-                        unsafe_cell_action(place.ptr, unsafe_cell_size)\n+                        unsafe_cell_action(&place.ptr, unsafe_cell_size)\n                     } else {\n                         Ok(())\n                     }\n@@ -344,7 +339,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         // The part between the end_ptr and the end of the place is also frozen.\n         // So pretend there is a 0-sized `UnsafeCell` at the end.\n-        unsafe_cell_action(place.ptr.wrapping_offset(size, this), Size::ZERO)?;\n+        unsafe_cell_action(&place.ptr.offset(size, this)?, Size::ZERO)?;\n         // Done!\n         return Ok(());\n \n@@ -428,9 +423,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         let mut places =\n                             fields.collect::<InterpResult<'tcx, Vec<MPlaceTy<'tcx, Tag>>>>()?;\n                         // we just compare offsets, the abs. value never matters\n-                        places.sort_by_key(|place| {\n-                            place.ptr.into_pointer_or_addr().unwrap().into_parts().1 as Size\n-                        });\n+                        places.sort_by_key(|place| place.ptr.addr());\n                         self.walk_aggregate(place, places.into_iter().map(Ok))\n                     }\n                     FieldsShape::Union { .. } | FieldsShape::Primitive => {\n@@ -777,6 +770,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Mark a machine allocation that was just created as immutable.\n     fn mark_immutable(&mut self, mplace: &MemPlace<Tag>) {\n         let this = self.eval_context_mut();\n+        // This got just allocated, so there definitely is a pointer here.\n         this.alloc_mark_immutable(mplace.ptr.into_pointer_or_addr().unwrap().provenance.alloc_id)\n             .unwrap();\n     }"}, {"sha": "895241bcc326dbb24936cf19a146921639930c63", "filename": "src/intptrcast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1", "patch": "@@ -128,7 +128,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n \n     /// Convert a relative (tcx) pointer to an absolute address.\n     pub fn rel_ptr_to_addr(ecx: &MiriEvalContext<'mir, 'tcx>, ptr: Pointer<AllocId>) -> u64 {\n-        let (alloc_id, offset) = ptr.into_parts(); // offset is relative\n+        let (alloc_id, offset) = ptr.into_parts(); // offset is relative (AllocId provenance)\n         let base_addr = GlobalStateInner::alloc_base_addr(ecx, alloc_id);\n \n         // Add offset with the right kind of pointer-overflowing arithmetic.\n@@ -137,7 +137,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n     }\n \n     pub fn abs_ptr_to_rel(ecx: &MiriEvalContext<'mir, 'tcx>, ptr: Pointer<Tag>) -> Size {\n-        let (tag, addr) = ptr.into_parts(); // addr is absolute\n+        let (tag, addr) = ptr.into_parts(); // addr is absolute (Tag provenance)\n         let base_addr = GlobalStateInner::alloc_base_addr(ecx, tag.alloc_id);\n \n         // Wrapping \"addr - base_addr\""}, {"sha": "66854921a33e8bb9c17c8c608bee1210eace6ebc", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1", "patch": "@@ -360,6 +360,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n         name: &str,\n         ptr: Pointer<Option<Tag>>,\n     ) {\n+        // This got just allocated, so there definitely is a pointer here.\n         let ptr = ptr.into_pointer_or_addr().unwrap();\n         this.machine.extern_statics.try_insert(Symbol::intern(name), ptr).unwrap();\n     }"}, {"sha": "af6064925f0437d6d9097900abd707562ed221f2", "filename": "src/shims/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=f1023fbdc9aafc8c78c7a6967d0dc4daa741c2a1", "patch": "@@ -83,10 +83,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         let ptr = this.read_pointer(ptr_op)?;\n-        if let Ok(ptr) = ptr.into_pointer_or_addr() {\n+        if let Ok((alloc_id, _offset, _)) = this.ptr_try_get_alloc_id(ptr) {\n             // Only do anything if we can identify the allocation this goes to.\n-            let (_, cur_align) =\n-                this.get_alloc_size_and_align(ptr.provenance.alloc_id, AllocCheck::MaybeDead)?;\n+            let (_, cur_align) = this.get_alloc_size_and_align(alloc_id, AllocCheck::MaybeDead)?;\n             if cur_align.bytes() >= req_align {\n                 // If the allocation alignment is at least the required alignment we use the\n                 // real implementation."}]}