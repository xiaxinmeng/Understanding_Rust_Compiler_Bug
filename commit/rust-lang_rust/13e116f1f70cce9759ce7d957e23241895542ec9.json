{"sha": "13e116f1f70cce9759ce7d957e23241895542ec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZTExNmYxZjcwY2NlOTc1OWNlN2Q5NTdlMjMyNDE4OTU1NDJlYzk=", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-07-02T01:14:13Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-07-02T16:12:31Z"}, "message": "Use `BoundVarsCollector` for now", "tree": {"sha": "50b68f3bb83a694c4e81e8446db73780afa12ca5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50b68f3bb83a694c4e81e8446db73780afa12ca5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13e116f1f70cce9759ce7d957e23241895542ec9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmDfOu8ACgkQ2rpbBylh\nwYoJjg/+Iuw388WZU8Nn1gaLSmmvxEFUX/mzVx1H/pWVjcjcLp6vmArO65cwz+It\n0TrOYeN790x2ABZSojE+tsC8pAc4tQNoS1YRctgiP7/jikcuq3O/RHiAjByHTt1m\nJ6XkCa4G7IcqYPl1qL71bu5ivsgpKMumxxinHptihpT6xA/FD3t8atIizvCJ5K5q\nX9OsXYDm5AzG21/Q4msliqaDieoDRaOrJjJhtKrBQw0rFEDz4YL8UruiQr+OTJip\n+QNuj1kGHd/FeyEYUQ2tWecJqjUVY1J3Qjzsu9mBBUcOZZj4KwGtxGU9Pr8fVQIb\nUcROn4NC4YfHjRzao5Ehj3ybJJNLzLWOp0h5hvdXr7lJQpDXefcjCes7Ti9TrnGC\nDugK5J2MbWnvsrZzHTtOStqPm9o9caTFU+WPHTIQTrZnH1LssgGjobPcAF4rvCVD\nf3AKx8lvrvT+nA3LQEuMew0I5BuSd+1p3NuBAphNyPI0vcw+3IJ8vhECRGFKKSYh\nmbxC4u9ypQs9PP5oE9aErZlF8KCWKhclZA4m7eeNq61AL4MkyLaCDMYQ0Ru2dgN2\ngHsS73CNYPr8btzZtSrL+Q99q17h1RoDQ/NyZhq00RCaInsPwQ1uCUt+bhXMY6tJ\njtONZYN0pT7VBoFXTCAx13Ra+snp0tDca+4jIrmoAP5OcKPf7ps=\n=lP0y\n-----END PGP SIGNATURE-----", "payload": "tree 50b68f3bb83a694c4e81e8446db73780afa12ca5\nparent 242ac57015554a543fb5b67cd5d2720e3e72ff00\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1625188453 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1625242351 +0900\n\nUse `BoundVarsCollector` for now\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13e116f1f70cce9759ce7d957e23241895542ec9", "html_url": "https://github.com/rust-lang/rust/commit/13e116f1f70cce9759ce7d957e23241895542ec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13e116f1f70cce9759ce7d957e23241895542ec9/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "242ac57015554a543fb5b67cd5d2720e3e72ff00", "url": "https://api.github.com/repos/rust-lang/rust/commits/242ac57015554a543fb5b67cd5d2720e3e72ff00", "html_url": "https://github.com/rust-lang/rust/commit/242ac57015554a543fb5b67cd5d2720e3e72ff00"}], "stats": {"total": 107, "additions": 97, "deletions": 10}, "files": [{"sha": "24a9cea6d2187a876f0c9ba5d4afc424501eeea7", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13e116f1f70cce9759ce7d957e23241895542ec9/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e116f1f70cce9759ce7d957e23241895542ec9/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=13e116f1f70cce9759ce7d957e23241895542ec9", "patch": "@@ -7,7 +7,7 @@ use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArgKind, Subst, SubstsRef};\n use crate::ty::TyKind::*;\n-use crate::ty::{self, DefIdTree, List, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, DebruijnIndex, DefIdTree, List, Ty, TyCtxt, TypeFoldable};\n use rustc_apfloat::Float as _;\n use rustc_ast as ast;\n use rustc_attr::{self as attr, SignedInt, UnsignedInt};\n@@ -905,6 +905,10 @@ impl<'tcx> ty::TyS<'tcx> {\n         }\n         ty\n     }\n+\n+    pub fn outer_exclusive_binder(&'tcx self) -> DebruijnIndex {\n+        self.outer_exclusive_binder\n+    }\n }\n \n pub enum ExplicitSelf<'tcx> {"}, {"sha": "ac10ebd2dd7b033ed0df7ecfc920a9638c162f4f", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 91, "deletions": 9, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/13e116f1f70cce9759ce7d957e23241895542ec9/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e116f1f70cce9759ce7d957e23241895542ec9/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=13e116f1f70cce9759ce7d957e23241895542ec9", "patch": "@@ -2,14 +2,98 @@ use rustc_errors::ErrorReported;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, Instance, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Binder, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_span::{sym, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use traits::{translate_substs, Reveal};\n \n+use rustc_data_structures::sso::SsoHashSet;\n+use std::collections::BTreeMap;\n+use std::ops::ControlFlow;\n+\n use tracing::debug;\n \n+// FIXME(#86795): `BoundVarsCollector` here should **NOT** be used\n+// outside of `resolve_associated_item`. It's just to address #64494,\n+// #83765, and #85848 which are creating bound types/regions that lose\n+// their `Binder` *unintentionally*.\n+// It's ideal to remove `BoundVarsCollector` and just use\n+// `ty::Binder::*` methods but we use this stopgap until we figure out\n+// the \"real\" fix.\n+struct BoundVarsCollector<'tcx> {\n+    binder_index: ty::DebruijnIndex,\n+    vars: BTreeMap<u32, ty::BoundVariableKind>,\n+    // We may encounter the same variable at different levels of binding, so\n+    // this can't just be `Ty`\n+    visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,\n+}\n+\n+impl<'tcx> BoundVarsCollector<'tcx> {\n+    fn new() -> Self {\n+        BoundVarsCollector {\n+            binder_index: ty::INNERMOST,\n+            vars: BTreeMap::new(),\n+            visited: SsoHashSet::default(),\n+        }\n+    }\n+\n+    fn into_vars(self, tcx: TyCtxt<'tcx>) -> &'tcx ty::List<ty::BoundVariableKind> {\n+        let max = self.vars.iter().map(|(k, _)| *k).max().unwrap_or_else(|| 0);\n+        for i in 0..max {\n+            if let None = self.vars.get(&i) {\n+                panic!(\"Unknown variable: {:?}\", i);\n+            }\n+        }\n+\n+        tcx.mk_bound_variable_kinds(self.vars.into_iter().map(|(_, v)| v))\n+    }\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n+    type BreakTy = ();\n+\n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n+        self.binder_index.shift_in(1);\n+        let result = t.super_visit_with(self);\n+        self.binder_index.shift_out(1);\n+        result\n+    }\n+\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if t.outer_exclusive_binder() < self.binder_index\n+            || !self.visited.insert((self.binder_index, t))\n+        {\n+            return ControlFlow::CONTINUE;\n+        }\n+        use std::collections::btree_map::Entry;\n+        match *t.kind() {\n+            ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n+                match self.vars.entry(bound_ty.var.as_u32()) {\n+                    Entry::Vacant(entry) => {\n+                        entry.insert(ty::BoundVariableKind::Ty(bound_ty.kind));\n+                    }\n+                    Entry::Occupied(entry) => match entry.get() {\n+                        ty::BoundVariableKind::Ty(_) => {}\n+                        _ => bug!(\"Conflicting bound vars\"),\n+                    },\n+                }\n+            }\n+\n+            _ => (),\n+        };\n+\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        r.super_visit_with(self)\n+    }\n+}\n+\n #[instrument(level = \"debug\", skip(tcx))]\n fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -115,14 +199,12 @@ fn resolve_associated_item<'tcx>(\n     );\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n-    let vtbl = if trait_item.kind == ty::AssocKind::Const {\n-        let bound_vars = tcx\n-            .mk_bound_variable_kinds(std::iter::once(ty::BoundVariableKind::Region(ty::BrAnon(0))));\n-        let bind = ty::Binder::bind_with_vars(trait_ref, bound_vars);\n-        tcx.codegen_fulfill_obligation((param_env, bind))?\n-    } else {\n-        tcx.codegen_fulfill_obligation((param_env, ty::Binder::bind(trait_ref, tcx)))?\n-    };\n+\n+    // See FIXME on `BoundVarsCollector`.\n+    let mut bound_vars_collector = BoundVarsCollector::new();\n+    trait_ref.visit_with(&mut bound_vars_collector);\n+    let trait_binder = ty::Binder::bind_with_vars(trait_ref, bound_vars_collector.into_vars(tcx));\n+    let vtbl = tcx.codegen_fulfill_obligation((param_env, trait_binder))?;\n \n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:"}, {"sha": "313571274c3de7e54a6e34ae455df21658cf8f56", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13e116f1f70cce9759ce7d957e23241895542ec9/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e116f1f70cce9759ce7d957e23241895542ec9/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=13e116f1f70cce9759ce7d957e23241895542ec9", "patch": "@@ -5,6 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(control_flow_enum)]\n #![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n #![feature(nll)]"}]}