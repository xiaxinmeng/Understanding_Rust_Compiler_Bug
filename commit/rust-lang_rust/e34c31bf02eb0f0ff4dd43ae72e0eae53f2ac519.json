{"sha": "e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNGMzMWJmMDJlYjBmMGZmNGRkNDNhZTcyZTBlYWU1M2YyYWM1MTk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-02-01T18:35:51Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-02-01T18:35:51Z"}, "message": "Use constant for 180/\u03c0 in to_degrees\n\nThe current `f32|f64.to_degrees` implementation uses a division to calculate 180/\u03c0, which causes a loss of precision. Using a constant is still not perfect (implementing a maximally-precise algorithm would come with a high performance cost), but improves precision with a minimal change.", "tree": {"sha": "c34982b69b6abcab93be85bb1e42a6e180487962", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c34982b69b6abcab93be85bb1e42a6e180487962"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519", "html_url": "https://github.com/rust-lang/rust/commit/e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90eb44a5897c39e3dff9c7e48e3973671dcd9496", "url": "https://api.github.com/repos/rust-lang/rust/commits/90eb44a5897c39e3dff9c7e48e3973671dcd9496", "html_url": "https://github.com/rust-lang/rust/commit/90eb44a5897c39e3dff9c7e48e3973671dcd9496"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "3586fa5442fb44a1712882cbc8864570fa5ea04a", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519", "patch": "@@ -239,7 +239,9 @@ impl Float for f32 {\n     /// Converts to degrees, assuming the number is in radians.\n     #[inline]\n     fn to_degrees(self) -> f32 {\n-        self * (180.0f32 / consts::PI)\n+        // Use a constant for better precision.\n+        const PIS_IN_180: f32 = 57.2957795130823208767981548141051703_f32;\n+        self * PIS_IN_180\n     }\n \n     /// Converts to radians, assuming the number is in degrees."}, {"sha": "64c0d508b388cf6b41b8a3df3e0567af55092822", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519", "patch": "@@ -237,6 +237,9 @@ impl Float for f64 {\n     /// Converts to degrees, assuming the number is in radians.\n     #[inline]\n     fn to_degrees(self) -> f64 {\n+        // The division here is correctly rounded with respect to the true\n+        // value of 180/\u03c0. (This differs from f32, where a constant must be\n+        // used to ensure a correctly rounded result.)\n         self * (180.0f64 / consts::PI)\n     }\n "}, {"sha": "ecf68f29d6f1f7c80c4324d1c71073b09a8a019c", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519", "patch": "@@ -1531,6 +1531,7 @@ mod tests {\n         assert!(nan.to_degrees().is_nan());\n         assert_eq!(inf.to_degrees(), inf);\n         assert_eq!(neg_inf.to_degrees(), neg_inf);\n+        assert_eq!(1_f32.to_degrees(), 57.2957795130823208767981548141051703);\n     }\n \n     #[test]"}]}