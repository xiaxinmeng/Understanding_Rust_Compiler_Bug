{"sha": "753d567989e9cd8f6b1a2b707c231d70838b7819", "node_id": "C_kwDOAAsO6NoAKDc1M2Q1Njc5ODllOWNkOGY2YjFhMmI3MDdjMjMxZDcwODM4Yjc4MTk", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2022-04-14T23:03:56Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2022-04-15T01:12:13Z"}, "message": "clarify doc(cfg) wording\n\nThe current \"This is supported\" wording implies that it's possible to\nstill use the item on other configurations, but in an unsupported way.\nChanging this to \"Available\" removes this ambiguity.", "tree": {"sha": "f881048e76e14d59d7e5b4d6a26b007ca97a7ea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f881048e76e14d59d7e5b4d6a26b007ca97a7ea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/753d567989e9cd8f6b1a2b707c231d70838b7819", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAmJYxnAWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdKKhCAC2JPjBf+yH75K/WLL9Pqi6IeP+\nku7rVripuWcvsJOUt0HuQnC5fO+YOCpFGKi5MjlKyx9YCFcajgf6jHLwAQDNBFbG\n125n/VMiVer2lr9APGXm79aWki+J2NhQb6u/dw3fRQBhh/Gee4BA03w1RiDOfeI5\nOUOL/UyPff0bquTNUjqGNPP3lNvnjvmLqFk32zqLaJLswQ+7cewqwL8/N26GnIgG\nvbR20cFWht0Pq7IBC3SJ2AMSsS93ue1vRqVs31v4AOsIguDm/u63f4Bl4m1r4jIH\nGm6H2KT5ltlmiZvU9tQ5JdJF8PxlXPZoZF6oflXZ6HMiqG5BC+QvGPCA0N4Q\n=9G9P\n-----END PGP SIGNATURE-----", "payload": "tree f881048e76e14d59d7e5b4d6a26b007ca97a7ea6\nparent e7575f9670f3c837def3d186ae09366c75c7632e\nauthor Andy Russell <arussell123@gmail.com> 1649977436 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1649985133 -0400\n\nclarify doc(cfg) wording\n\nThe current \"This is supported\" wording implies that it's possible to\nstill use the item on other configurations, but in an unsupported way.\nChanging this to \"Available\" removes this ambiguity.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/753d567989e9cd8f6b1a2b707c231d70838b7819", "html_url": "https://github.com/rust-lang/rust/commit/753d567989e9cd8f6b1a2b707c231d70838b7819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/753d567989e9cd8f6b1a2b707c231d70838b7819/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7575f9670f3c837def3d186ae09366c75c7632e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7575f9670f3c837def3d186ae09366c75c7632e", "html_url": "https://github.com/rust-lang/rust/commit/e7575f9670f3c837def3d186ae09366c75c7632e"}], "stats": {"total": 97, "additions": 43, "deletions": 54}, "files": [{"sha": "b15f5ee66aba1eaf8448b3116f30488a250f4197", "filename": "src/doc/unstable-book/src/language-features/doc-cfg.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md?ref=753d567989e9cd8f6b1a2b707c231d70838b7819", "patch": "@@ -7,7 +7,7 @@ The tracking issue for this feature is: [#43781]\n The `doc_cfg` feature allows an API be documented as only available in some specific platforms.\n This attribute has two effects:\n \n-1. In the annotated item's documentation, there will be a message saying \"This is supported on\n+1. In the annotated item's documentation, there will be a message saying \"Available on\n     (platform) only\".\n \n 2. The item's doc-tests will only run on the specific platform."}, {"sha": "0d213a5a2dee9d201e62c8a1315a8346dd41a8b6", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=753d567989e9cd8f6b1a2b707c231d70838b7819", "patch": "@@ -171,11 +171,8 @@ impl Cfg {\n     pub(crate) fn render_long_html(&self) -> String {\n         let on = if self.should_use_with_in_description() { \"with\" } else { \"on\" };\n \n-        let mut msg = format!(\n-            \"This is supported {} <strong>{}</strong>\",\n-            on,\n-            Display(self, Format::LongHtml)\n-        );\n+        let mut msg =\n+            format!(\"Available {on} <strong>{}</strong>\", Display(self, Format::LongHtml));\n         if self.should_append_only_to_description() {\n             msg.push_str(\" only\");\n         }\n@@ -187,7 +184,7 @@ impl Cfg {\n     pub(crate) fn render_long_plain(&self) -> String {\n         let on = if self.should_use_with_in_description() { \"with\" } else { \"on\" };\n \n-        let mut msg = format!(\"This is supported {} {}\", on, Display(self, Format::LongPlain));\n+        let mut msg = format!(\"Available {on} {}\", Display(self, Format::LongPlain));\n         if self.should_append_only_to_description() {\n             msg.push_str(\" only\");\n         }"}, {"sha": "ece3fcb18b6f357c5605a6c2d9237802df66f1a5", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=753d567989e9cd8f6b1a2b707c231d70838b7819", "patch": "@@ -359,81 +359,73 @@ fn test_render_short_html() {\n #[test]\n fn test_render_long_html() {\n     create_default_session_globals_then(|| {\n-        assert_eq!(\n-            word_cfg(\"unix\").render_long_html(),\n-            \"This is supported on <strong>Unix</strong> only.\"\n-        );\n+        assert_eq!(word_cfg(\"unix\").render_long_html(), \"Available on <strong>Unix</strong> only.\");\n         assert_eq!(\n             name_value_cfg(\"target_os\", \"macos\").render_long_html(),\n-            \"This is supported on <strong>macOS</strong> only.\"\n+            \"Available on <strong>macOS</strong> only.\"\n         );\n         assert_eq!(\n             name_value_cfg(\"target_os\", \"wasi\").render_long_html(),\n-            \"This is supported on <strong>WASI</strong> only.\"\n+            \"Available on <strong>WASI</strong> only.\"\n         );\n         assert_eq!(\n             name_value_cfg(\"target_pointer_width\", \"16\").render_long_html(),\n-            \"This is supported on <strong>16-bit</strong> only.\"\n+            \"Available on <strong>16-bit</strong> only.\"\n         );\n         assert_eq!(\n             name_value_cfg(\"target_endian\", \"little\").render_long_html(),\n-            \"This is supported on <strong>little-endian</strong> only.\"\n+            \"Available on <strong>little-endian</strong> only.\"\n         );\n         assert_eq!(\n             (!word_cfg(\"windows\")).render_long_html(),\n-            \"This is supported on <strong>non-Windows</strong> only.\"\n+            \"Available on <strong>non-Windows</strong> only.\"\n         );\n         assert_eq!(\n             (word_cfg(\"unix\") & word_cfg(\"windows\")).render_long_html(),\n-            \"This is supported on <strong>Unix and Windows</strong> only.\"\n+            \"Available on <strong>Unix and Windows</strong> only.\"\n         );\n         assert_eq!(\n             (word_cfg(\"unix\") | word_cfg(\"windows\")).render_long_html(),\n-            \"This is supported on <strong>Unix or Windows</strong> only.\"\n+            \"Available on <strong>Unix or Windows</strong> only.\"\n         );\n         assert_eq!(\n             (word_cfg(\"unix\") & word_cfg(\"windows\") & word_cfg(\"debug_assertions\"))\n                 .render_long_html(),\n-            \"This is supported on <strong>Unix and Windows and debug-assertions enabled\\\n-             </strong> only.\"\n+            \"Available on <strong>Unix and Windows and debug-assertions enabled</strong> only.\"\n         );\n         assert_eq!(\n             (word_cfg(\"unix\") | word_cfg(\"windows\") | word_cfg(\"debug_assertions\"))\n                 .render_long_html(),\n-            \"This is supported on <strong>Unix or Windows or debug-assertions enabled\\\n-             </strong> only.\"\n+            \"Available on <strong>Unix or Windows or debug-assertions enabled</strong> only.\"\n         );\n         assert_eq!(\n             (!(word_cfg(\"unix\") | word_cfg(\"windows\") | word_cfg(\"debug_assertions\")))\n                 .render_long_html(),\n-            \"This is supported on <strong>neither Unix nor Windows nor debug-assertions \\\n-             enabled</strong>.\"\n+            \"Available on <strong>neither Unix nor Windows nor debug-assertions enabled</strong>.\"\n         );\n         assert_eq!(\n             ((word_cfg(\"unix\") & name_value_cfg(\"target_arch\", \"x86_64\"))\n                 | (word_cfg(\"windows\") & name_value_cfg(\"target_pointer_width\", \"64\")))\n             .render_long_html(),\n-            \"This is supported on <strong>Unix and x86-64, or Windows and 64-bit</strong> only.\"\n+            \"Available on <strong>Unix and x86-64, or Windows and 64-bit</strong> only.\"\n         );\n         assert_eq!(\n             (!(word_cfg(\"unix\") & word_cfg(\"windows\"))).render_long_html(),\n-            \"This is supported on <strong>not (Unix and Windows)</strong>.\"\n+            \"Available on <strong>not (Unix and Windows)</strong>.\"\n         );\n         assert_eq!(\n             ((word_cfg(\"debug_assertions\") | word_cfg(\"windows\")) & word_cfg(\"unix\"))\n                 .render_long_html(),\n-            \"This is supported on <strong>(debug-assertions enabled or Windows) and Unix\\\n-             </strong> only.\"\n+            \"Available on <strong>(debug-assertions enabled or Windows) and Unix</strong> only.\"\n         );\n         assert_eq!(\n             name_value_cfg(\"target_feature\", \"sse2\").render_long_html(),\n-            \"This is supported with <strong>target feature <code>sse2</code></strong> only.\"\n+            \"Available with <strong>target feature <code>sse2</code></strong> only.\"\n         );\n         assert_eq!(\n             (name_value_cfg(\"target_arch\", \"x86_64\") & name_value_cfg(\"target_feature\", \"sse2\"))\n                 .render_long_html(),\n-            \"This is supported on <strong>x86-64 and target feature \\\n-             <code>sse2</code></strong> only.\"\n+            \"Available on <strong>x86-64 and target feature <code>sse2</code></strong> only.\"\n         );\n     })\n }"}, {"sha": "d6385e2acb8e637083f77ffdf8c8090a7da41232", "filename": "src/test/rustdoc-gui/item-info-overflow.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml?ref=753d567989e9cd8f6b1a2b707c231d70838b7819", "patch": "@@ -8,7 +8,7 @@ assert-property: (\".item-info\", {\"scrollWidth\": \"890\"})\n // Just to be sure we're comparing the correct \"item-info\":\n assert-text: (\n     \".item-info\",\n-    \"This is supported on Android or Linux or Emscripten or DragonFly BSD\",\n+    \"Available on Android or Linux or Emscripten or DragonFly BSD\",\n     STARTS_WITH,\n )\n \n@@ -23,6 +23,6 @@ assert-property: (\"#impl-SimpleTrait .item-info\", {\"scrollWidth\": \"866\"})\n // Just to be sure we're comparing the correct \"item-info\":\n assert-text: (\n     \"#impl-SimpleTrait .item-info\",\n-    \"This is supported on Android or Linux or Emscripten or DragonFly BSD\",\n+    \"Available on Android or Linux or Emscripten or DragonFly BSD\",\n     STARTS_WITH,\n )"}, {"sha": "8b6d355a8f1a7f488911fd79c505a6a793b6bda9", "filename": "src/test/rustdoc-gui/item-info-width.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "raw_url": "https://github.com/rust-lang/rust/raw/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml?ref=753d567989e9cd8f6b1a2b707c231d70838b7819", "patch": "@@ -4,5 +4,5 @@ goto: file://|DOC_PATH|/lib2/struct.Foo.html\n size: (1100, 800)\n // We check that \".item-info\" is bigger than its content.\n assert-css: (\".item-info\", {\"width\": \"790px\"})\n-assert-css: (\".item-info .stab\", {\"width\": \"340px\"})\n+assert-css: (\".item-info .stab\", {\"width\": \"289px\"})\n assert-position: (\".item-info .stab\", {\"x\": 295})"}, {"sha": "4cddb0b76d410125eb708e69f86a433156642fdb", "filename": "src/test/rustdoc/doc-cfg.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs?ref=753d567989e9cd8f6b1a2b707c231d70838b7819", "patch": "@@ -4,29 +4,29 @@\n // @has doc_cfg/struct.Portable.html\n // @!has - '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' ''\n // @has - '//*[@id=\"method.unix_and_arm_only_function\"]' 'fn unix_and_arm_only_function()'\n-// @has - '//*[@class=\"stab portability\"]' 'This is supported on Unix and ARM only.'\n+// @has - '//*[@class=\"stab portability\"]' 'Available on Unix and ARM only.'\n // @has - '//*[@id=\"method.wasi_and_wasm32_only_function\"]' 'fn wasi_and_wasm32_only_function()'\n-// @has - '//*[@class=\"stab portability\"]' 'This is supported on WASI and WebAssembly only.'\n+// @has - '//*[@class=\"stab portability\"]' 'Available on WASI and WebAssembly only.'\n pub struct Portable;\n \n // @has doc_cfg/unix_only/index.html \\\n //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-//  'This is supported on Unix only.'\n+//  'Available on Unix only.'\n // @matches - '//*[@class=\"item-left module-item\"]//*[@class=\"stab portability\"]' '\\AARM\\Z'\n // @count - '//*[@class=\"stab portability\"]' 2\n #[doc(cfg(unix))]\n pub mod unix_only {\n     // @has doc_cfg/unix_only/fn.unix_only_function.html \\\n     //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-    //  'This is supported on Unix only.'\n+    //  'Available on Unix only.'\n     // @count - '//*[@class=\"stab portability\"]' 1\n     pub fn unix_only_function() {\n         content::should::be::irrelevant();\n     }\n \n     // @has doc_cfg/unix_only/trait.ArmOnly.html \\\n     //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-    //  'This is supported on Unix and ARM only.'\n+    //  'Available on Unix and ARM only.'\n     // @count - '//*[@class=\"stab portability\"]' 1\n     #[doc(cfg(target_arch = \"arm\"))]\n     pub trait ArmOnly {\n@@ -41,22 +41,22 @@ pub mod unix_only {\n \n // @has doc_cfg/wasi_only/index.html \\\n //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-//  'This is supported on WASI only.'\n+//  'Available on WASI only.'\n // @matches - '//*[@class=\"item-left module-item\"]//*[@class=\"stab portability\"]' '\\AWebAssembly\\Z'\n // @count - '//*[@class=\"stab portability\"]' 2\n #[doc(cfg(target_os = \"wasi\"))]\n pub mod wasi_only {\n     // @has doc_cfg/wasi_only/fn.wasi_only_function.html \\\n     //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-    //  'This is supported on WASI only.'\n+    //  'Available on WASI only.'\n     // @count - '//*[@class=\"stab portability\"]' 1\n     pub fn wasi_only_function() {\n         content::should::be::irrelevant();\n     }\n \n     // @has doc_cfg/wasi_only/trait.Wasm32Only.html \\\n     //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-    //  'This is supported on WASI and WebAssembly only.'\n+    //  'Available on WASI and WebAssembly only.'\n     // @count - '//*[@class=\"stab portability\"]' 1\n     #[doc(cfg(target_arch = \"wasm32\"))]\n     pub trait Wasm32Only {\n@@ -78,15 +78,15 @@ pub mod wasi_only {\n \n // @has doc_cfg/fn.uses_target_feature.html\n // @has - '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-//        'This is supported with target feature avx only.'\n+//        'Available with target feature avx only.'\n #[target_feature(enable = \"avx\")]\n pub unsafe fn uses_target_feature() {\n     content::should::be::irrelevant();\n }\n \n // @has doc_cfg/fn.uses_cfg_target_feature.html\n // @has - '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-//        'This is supported with target feature avx only.'\n+//        'Available with target feature avx only.'\n #[doc(cfg(target_feature = \"avx\"))]\n pub fn uses_cfg_target_feature() {\n     uses_target_feature();\n@@ -95,7 +95,7 @@ pub fn uses_cfg_target_feature() {\n // multiple attributes should be allowed\n // @has doc_cfg/fn.multiple_attrs.html \\\n //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-//  'This is supported on x and y and z only.'\n+//  'Available on x and y and z only.'\n #[doc(cfg(x))]\n #[doc(cfg(y), cfg(z))]\n pub fn multiple_attrs() {}"}, {"sha": "18f3900b263b0b7617def5151e60c43519be7d5f", "filename": "src/test/rustdoc/duplicate-cfg.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753d567989e9cd8f6b1a2b707c231d70838b7819/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs?ref=753d567989e9cd8f6b1a2b707c231d70838b7819", "patch": "@@ -3,7 +3,7 @@\n \n // @has 'foo/index.html'\n // @matches '-' '//*[@class=\"item-left module-item\"]//*[@class=\"stab portability\"]' '^sync$'\n-// @has '-' '//*[@class=\"item-left module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate feature `sync` only'\n+// @has '-' '//*[@class=\"item-left module-item\"]//*[@class=\"stab portability\"]/@title' 'Available on crate feature `sync` only'\n \n // @has 'foo/struct.Foo.html'\n // @has '-' '//*[@class=\"stab portability\"]' 'sync'\n@@ -13,41 +13,41 @@\n pub struct Foo;\n \n // @has 'foo/bar/index.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'Available on crate feature sync only.'\n #[doc(cfg(feature = \"sync\"))]\n pub mod bar {\n     // @has 'foo/bar/struct.Bar.html'\n-    // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync only.'\n+    // @has '-' '//*[@class=\"stab portability\"]' 'Available on crate feature sync only.'\n     #[doc(cfg(feature = \"sync\"))]\n     pub struct Bar;\n }\n \n // @has 'foo/baz/index.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'Available on crate features sync and send only.'\n #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n pub mod baz {\n     // @has 'foo/baz/struct.Baz.html'\n-    // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n+    // @has '-' '//*[@class=\"stab portability\"]' 'Available on crate features sync and send only.'\n     #[doc(cfg(feature = \"sync\"))]\n     pub struct Baz;\n }\n \n // @has 'foo/qux/index.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'Available on crate feature sync only.'\n #[doc(cfg(feature = \"sync\"))]\n pub mod qux {\n     // @has 'foo/qux/struct.Qux.html'\n-    // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n+    // @has '-' '//*[@class=\"stab portability\"]' 'Available on crate features sync and send only.'\n     #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n     pub struct Qux;\n }\n \n // @has 'foo/quux/index.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync and crate feature send and foo only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'Available on crate feature sync and crate feature send and foo only.'\n #[doc(cfg(all(feature = \"sync\", feature = \"send\", foo)))]\n pub mod quux {\n     // @has 'foo/quux/struct.Quux.html'\n-    // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync and crate feature send and foo and bar only.'\n+    // @has '-' '//*[@class=\"stab portability\"]' 'Available on crate feature sync and crate feature send and foo and bar only.'\n     #[doc(cfg(all(feature = \"send\", feature = \"sync\", bar)))]\n     pub struct Quux;\n }"}]}