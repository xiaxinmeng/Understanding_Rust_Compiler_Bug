{"sha": "d6a922459ed3ebc77ba5d79cd65144078f43e321", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YTkyMjQ1OWVkM2ViYzc3YmE1ZDc5Y2Q2NTE0NDA3OGY0M2UzMjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-31T07:41:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-31T07:41:42Z"}, "message": "Lexer: basic chars & lifetimes", "tree": {"sha": "2e8082efef7cd018e06c38740828fa6a3e1c0a8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e8082efef7cd018e06c38740828fa6a3e1c0a8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6a922459ed3ebc77ba5d79cd65144078f43e321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a922459ed3ebc77ba5d79cd65144078f43e321", "html_url": "https://github.com/rust-lang/rust/commit/d6a922459ed3ebc77ba5d79cd65144078f43e321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6a922459ed3ebc77ba5d79cd65144078f43e321/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "492f6e6b1c8d062c6732f9aa3360c14708bb1452", "url": "https://api.github.com/repos/rust-lang/rust/commits/492f6e6b1c8d062c6732f9aa3360c14708bb1452", "html_url": "https://github.com/rust-lang/rust/commit/492f6e6b1c8d062c6732f9aa3360c14708bb1452"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "995d71f814a217c18e04f318609a2fe6bfe5ab75", "filename": "grammar.ron", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6a922459ed3ebc77ba5d79cd65144078f43e321/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/d6a922459ed3ebc77ba5d79cd65144078f43e321/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=d6a922459ed3ebc77ba5d79cd65144078f43e321", "patch": "@@ -32,5 +32,7 @@ Grammar(\n         \"FAT_ARROW\",\n         \"NEQ\",\n         \"NOT\",\n+        \"CHAR\",\n+        \"LIFETIME\",\n     ]\n )\n\\ No newline at end of file"}, {"sha": "3f277bd2b5164fe67b95d00df8b159f4035abe48", "filename": "src/lexer/mod.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d6a922459ed3ebc77ba5d79cd65144078f43e321/src%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a922459ed3ebc77ba5d79cd65144078f43e321/src%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fmod.rs?ref=d6a922459ed3ebc77ba5d79cd65144078f43e321", "patch": "@@ -34,7 +34,9 @@ fn next_token_inner(c: char, ptr: &mut Ptr) -> SyntaxKind {\n     }\n \n     if is_dec_digit(c) {\n-        return scan_number(c, ptr);\n+        let kind = scan_number(c, ptr);\n+        scan_literal_suffix(ptr);\n+        return kind;\n     }\n \n     // One-byte tokens.\n@@ -98,6 +100,8 @@ fn next_token_inner(c: char, ptr: &mut Ptr) -> SyntaxKind {\n             }\n             _ => NOT,\n         },\n+\n+        // '\\'' => scan_char_or_lifetime(ptr),\n         _ => (),\n     }\n     ERROR\n@@ -116,6 +120,45 @@ fn scan_ident(c: char, ptr: &mut Ptr) -> SyntaxKind {\n     IDENT\n }\n \n+fn scan_char_or_lifetime(ptr: &mut Ptr) -> SyntaxKind {\n+    // Either a character constant 'a' OR a lifetime name 'abc\n+    let c = match ptr.bump() {\n+        Some(c) => c,\n+        None => return CHAR, // TODO: error reporting is upper in the stack\n+    };\n+\n+    // If the character is an ident start not followed by another single\n+    // quote, then this is a lifetime name:\n+    if is_ident_start(c) && !ptr.next_is('\\'') {\n+        while ptr.next_is_p(is_ident_continue) {\n+            ptr.bump();\n+        }\n+\n+        // lifetimes shouldn't end with a single quote\n+        // if we find one, then this is an invalid character literal\n+        if ptr.next_is('\\'') {\n+            ptr.bump();\n+            return CHAR;\n+        }\n+        return LIFETIME;\n+    }\n+    scan_char_or_byte(ptr);\n+    if !ptr.next_is('\\'') {\n+        return CHAR; // TODO: error reporting\n+    }\n+    ptr.bump();\n+    scan_literal_suffix(ptr);\n+    CHAR\n+}\n+\n+fn scan_literal_suffix(ptr: &mut Ptr) {\n+\n+}\n+\n+fn scan_char_or_byte(ptr: &mut Ptr) {\n+    ptr.bump();\n+}\n+\n fn string_literal_start(c: char, c1: Option<char>, c2: Option<char>) -> bool {\n     match (c, c1, c2) {\n         ('r', Some('\"'), _) |"}, {"sha": "2f759119af7136f01c6063fd5a0eff186e2e3b93", "filename": "src/lexer/ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6a922459ed3ebc77ba5d79cd65144078f43e321/src%2Flexer%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a922459ed3ebc77ba5d79cd65144078f43e321/src%2Flexer%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fptr.rs?ref=d6a922459ed3ebc77ba5d79cd65144078f43e321", "patch": "@@ -34,6 +34,10 @@ impl<'s> Ptr<'s> {\n         self.nnext() == Some(c)\n     }\n \n+    pub fn next_is_p<P: Fn(char) -> bool>(&self, p: P) -> bool {\n+        self.next().map(p) == Some(true)\n+    }\n+\n     pub fn nnext_is_p<P: Fn(char) -> bool>(&self, p: P) -> bool {\n         self.nnext().map(p) == Some(true)\n     }"}, {"sha": "4c023757baa4f5923586ccdf46e03aa9967e0e5b", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6a922459ed3ebc77ba5d79cd65144078f43e321/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a922459ed3ebc77ba5d79cd65144078f43e321/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=d6a922459ed3ebc77ba5d79cd65144078f43e321", "patch": "@@ -33,8 +33,10 @@ pub const EQEQ: SyntaxKind = SyntaxKind(28);\n pub const FAT_ARROW: SyntaxKind = SyntaxKind(29);\n pub const NEQ: SyntaxKind = SyntaxKind(30);\n pub const NOT: SyntaxKind = SyntaxKind(31);\n+pub const CHAR: SyntaxKind = SyntaxKind(32);\n+pub const LIFETIME: SyntaxKind = SyntaxKind(33);\n \n-static INFOS: [SyntaxInfo; 32] = [\n+static INFOS: [SyntaxInfo; 34] = [\n     SyntaxInfo { name: \"ERROR\" },\n     SyntaxInfo { name: \"IDENT\" },\n     SyntaxInfo { name: \"UNDERSCORE\" },\n@@ -67,6 +69,8 @@ static INFOS: [SyntaxInfo; 32] = [\n     SyntaxInfo { name: \"FAT_ARROW\" },\n     SyntaxInfo { name: \"NEQ\" },\n     SyntaxInfo { name: \"NOT\" },\n+    SyntaxInfo { name: \"CHAR\" },\n+    SyntaxInfo { name: \"LIFETIME\" },\n ];\n \n pub(crate) fn syntax_info(kind: SyntaxKind) -> &'static SyntaxInfo {"}, {"sha": "a38b4a96e441342396a2e38fb5be7fc8a6b6ad4f", "filename": "validation.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6a922459ed3ebc77ba5d79cd65144078f43e321/validation.md", "raw_url": "https://github.com/rust-lang/rust/raw/d6a922459ed3ebc77ba5d79cd65144078f43e321/validation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/validation.md?ref=d6a922459ed3ebc77ba5d79cd65144078f43e321", "patch": "@@ -4,4 +4,5 @@ Fixmes:\n * Add more thorough tests for idents for XID_Start & XID_Continue\n * Validate that float and integer literals use digits only of the appropriate\n   base, and are in range\n+* Validation for unclosed char literal\n "}]}