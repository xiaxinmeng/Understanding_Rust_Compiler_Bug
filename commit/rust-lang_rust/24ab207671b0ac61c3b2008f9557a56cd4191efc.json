{"sha": "24ab207671b0ac61c3b2008f9557a56cd4191efc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YWIyMDc2NzFiMGFjNjFjM2IyMDA4Zjk1NTdhNTZjZDQxOTFlZmM=", "commit": {"author": {"name": "Victor Korkin", "email": "victor.korkin@gmail.com", "date": "2018-06-01T16:08:11Z"}, "committer": {"name": "Victor Korkin", "email": "victor.korkin@gmail.com", "date": "2018-06-01T16:08:11Z"}, "message": "Divide FN_TO_NUMERIC lint into two.\n\nFN_TO_NUMERIC_CAST_WITH_TRUNCATION is correctness check\nFN_TO_NUMERIC_CAST is only style check", "tree": {"sha": "d73088007b9ae0d1c8db0881203d0a9808e24115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d73088007b9ae0d1c8db0881203d0a9808e24115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ab207671b0ac61c3b2008f9557a56cd4191efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ab207671b0ac61c3b2008f9557a56cd4191efc", "html_url": "https://github.com/rust-lang/rust/commit/24ab207671b0ac61c3b2008f9557a56cd4191efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ab207671b0ac61c3b2008f9557a56cd4191efc/comments", "author": {"login": "VKlayd", "id": 2850547, "node_id": "MDQ6VXNlcjI4NTA1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2850547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VKlayd", "html_url": "https://github.com/VKlayd", "followers_url": "https://api.github.com/users/VKlayd/followers", "following_url": "https://api.github.com/users/VKlayd/following{/other_user}", "gists_url": "https://api.github.com/users/VKlayd/gists{/gist_id}", "starred_url": "https://api.github.com/users/VKlayd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VKlayd/subscriptions", "organizations_url": "https://api.github.com/users/VKlayd/orgs", "repos_url": "https://api.github.com/users/VKlayd/repos", "events_url": "https://api.github.com/users/VKlayd/events{/privacy}", "received_events_url": "https://api.github.com/users/VKlayd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VKlayd", "id": 2850547, "node_id": "MDQ6VXNlcjI4NTA1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2850547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VKlayd", "html_url": "https://github.com/VKlayd", "followers_url": "https://api.github.com/users/VKlayd/followers", "following_url": "https://api.github.com/users/VKlayd/following{/other_user}", "gists_url": "https://api.github.com/users/VKlayd/gists{/gist_id}", "starred_url": "https://api.github.com/users/VKlayd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VKlayd/subscriptions", "organizations_url": "https://api.github.com/users/VKlayd/orgs", "repos_url": "https://api.github.com/users/VKlayd/repos", "events_url": "https://api.github.com/users/VKlayd/events{/privacy}", "received_events_url": "https://api.github.com/users/VKlayd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ded2576957e69599073df0c05b5dea7405b36a94", "url": "https://api.github.com/repos/rust-lang/rust/commits/ded2576957e69599073df0c05b5dea7405b36a94", "html_url": "https://github.com/rust-lang/rust/commit/ded2576957e69599073df0c05b5dea7405b36a94"}], "stats": {"total": 136, "additions": 109, "deletions": 27}, "files": [{"sha": "c309503ee3817ee8f7732917c4bba5814dd19ac3", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/24ab207671b0ac61c3b2008f9557a56cd4191efc/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ab207671b0ac61c3b2008f9557a56cd4191efc/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=24ab207671b0ac61c3b2008f9557a56cd4191efc", "patch": "@@ -679,9 +679,9 @@ declare_clippy_lint! {\n     \"cast to the same type, e.g. `x as i32` where `x: i32`\"\n }\n \n-/// **What it does:** Checks for casts of a function pointer to a numeric type except `usize`.\n+/// **What it does:** Checks for casts of a function pointer to a numeric type not enough to store address.\n ///\n-/// **Why is this bad?** Casting a function pointer to something other than `usize` could truncate the address value.\n+/// **Why is this bad?** Casting a function pointer to not eligable type could truncate the address value.\n ///\n /// **Known problems:** None.\n ///\n@@ -691,8 +691,25 @@ declare_clippy_lint! {\n /// let _ = test_fn as i32\n /// ```\n declare_clippy_lint! {\n-    pub FN_TO_NUMERIC_CAST,\n+    pub FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n     correctness,\n+    \"cast function pointer to the numeric type with value truncation\"\n+}\n+\n+/// **What it does:** Checks for casts of a function pointer to a numeric type except `usize`.\n+///\n+/// **Why is this bad?** Casting a function pointer to something other than `usize` is not a good style.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn test_fn() -> i16;\n+/// let _ = test_fn as i128\n+/// ```\n+declare_clippy_lint! {\n+    pub FN_TO_NUMERIC_CAST,\n+    style,\n     \"cast function pointer to the numeric type\"\n }\n \n@@ -909,7 +926,8 @@ impl LintPass for CastPass {\n             CAST_LOSSLESS,\n             UNNECESSARY_CAST,\n             CAST_PTR_ALIGNMENT,\n-            FN_TO_NUMERIC_CAST\n+            FN_TO_NUMERIC_CAST,\n+            FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n         )\n     }\n }\n@@ -998,14 +1016,28 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                 ty::TyFnDef(..) |\n                 ty::TyFnPtr(..) => {\n                     if cast_to.is_numeric() && cast_to.sty != ty::TyUint(UintTy::Usize){\n-                        span_lint_and_sugg(\n-                            cx,\n-                            FN_TO_NUMERIC_CAST,\n-                            expr.span,\n-                            &format!(\"casting a `{}` to `{}` may truncate the function address value.\", cast_from, cast_to),\n-                            \"if you need the address of the function, consider\",\n-                            format!(\"{} as usize\", &snippet(cx, ex.span, \"x\"))\n-                        );\n+                        let to_nbits = int_ty_to_nbits(cast_to, cx.tcx);\n+                        let pointer_nbits = cx.tcx.data_layout.pointer_size.bits();\n+                        if to_nbits < pointer_nbits || (to_nbits == pointer_nbits && cast_to.is_signed()) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n+                                expr.span,\n+                                &format!(\"casting a `{}` to `{}` may truncate the function address value.\", cast_from, cast_to),\n+                                \"if you need the address of the function, consider\",\n+                                format!(\"{} as usize\", &snippet(cx, ex.span, \"x\"))\n+                            );\n+                        } else {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                FN_TO_NUMERIC_CAST,\n+                                expr.span,\n+                                &format!(\"casting a `{}` to `{}` is bad style.\", cast_from, cast_to),\n+                                \"if you need the address of the function, consider\",\n+                                format!(\"{} as usize\", &snippet(cx, ex.span, \"x\"))\n+                            );\n+\n+                        };\n                     }\n                 }\n                 _ => ()"}, {"sha": "8387586c3e94a9ad30ab697a01d1d1c05b2dde93", "filename": "tests/ui/types_fn_to_int.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24ab207671b0ac61c3b2008f9557a56cd4191efc/tests%2Fui%2Ftypes_fn_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ab207671b0ac61c3b2008f9557a56cd4191efc/tests%2Fui%2Ftypes_fn_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes_fn_to_int.rs?ref=24ab207671b0ac61c3b2008f9557a56cd4191efc", "patch": "@@ -9,8 +9,14 @@ fn bar() -> i32 {\n \n fn main() {\n     let x = Foo::A;\n-    let y = x as i32;\n-    let y1 = Foo::A as i32;\n-\n-    let z = bar as u32;\n+    let _y = x as i32;\n+    let _y1 = Foo::A as i32;\n+    let _y = x as u32;\n+    let _z = bar as u32;\n+    let _y = bar as i64;\n+    let _y = bar as u64;\n+    let _z = Foo::A as i128;\n+    let _z = Foo::A as u128;\n+    let _z = bar as i128;\n+    let _z = bar as u128;\n }"}, {"sha": "bbdf4ce2e70ab6ba20b1df7ab934adb8337aa120", "filename": "tests/ui/types_fn_to_int.stderr", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/24ab207671b0ac61c3b2008f9557a56cd4191efc/tests%2Fui%2Ftypes_fn_to_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24ab207671b0ac61c3b2008f9557a56cd4191efc/tests%2Fui%2Ftypes_fn_to_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes_fn_to_int.stderr?ref=24ab207671b0ac61c3b2008f9557a56cd4191efc", "patch": "@@ -1,22 +1,66 @@\n error: casting a `fn(usize) -> Foo {Foo::A}` to `i32` may truncate the function address value.\n-  --> $DIR/types_fn_to_int.rs:12:13\n+  --> $DIR/types_fn_to_int.rs:12:14\n    |\n-12 |     let y = x as i32;\n-   |             ^^^^^^^^ help: if you need the address of the function, consider: `x as usize`\n+12 |     let _y = x as i32;\n+   |              ^^^^^^^^ help: if you need the address of the function, consider: `x as usize`\n    |\n-   = note: #[deny(fn_to_numeric_cast)] on by default\n+   = note: #[deny(fn_to_numeric_cast_with_truncation)] on by default\n \n error: casting a `fn(usize) -> Foo {Foo::A}` to `i32` may truncate the function address value.\n-  --> $DIR/types_fn_to_int.rs:13:14\n+  --> $DIR/types_fn_to_int.rs:13:15\n    |\n-13 |     let y1 = Foo::A as i32;\n-   |              ^^^^^^^^^^^^^ help: if you need the address of the function, consider: `Foo::A as usize`\n+13 |     let _y1 = Foo::A as i32;\n+   |               ^^^^^^^^^^^^^ help: if you need the address of the function, consider: `Foo::A as usize`\n+\n+error: casting a `fn(usize) -> Foo {Foo::A}` to `u32` may truncate the function address value.\n+  --> $DIR/types_fn_to_int.rs:14:14\n+   |\n+14 |     let _y = x as u32;\n+   |              ^^^^^^^^ help: if you need the address of the function, consider: `x as usize`\n \n error: casting a `fn() -> i32 {bar}` to `u32` may truncate the function address value.\n-  --> $DIR/types_fn_to_int.rs:15:13\n+  --> $DIR/types_fn_to_int.rs:15:14\n+   |\n+15 |     let _z = bar as u32;\n+   |              ^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n+\n+error: casting a `fn() -> i32 {bar}` to `i64` may truncate the function address value.\n+  --> $DIR/types_fn_to_int.rs:16:14\n+   |\n+16 |     let _y = bar as i64;\n+   |              ^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n+\n+error: casting a `fn() -> i32 {bar}` to `u64` is bad style.\n+  --> $DIR/types_fn_to_int.rs:17:14\n+   |\n+17 |     let _y = bar as u64;\n+   |              ^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n+   |\n+   = note: `-D fn-to-numeric-cast` implied by `-D warnings`\n+\n+error: casting a `fn(usize) -> Foo {Foo::A}` to `i128` is bad style.\n+  --> $DIR/types_fn_to_int.rs:18:14\n+   |\n+18 |     let _z = Foo::A as i128;\n+   |              ^^^^^^^^^^^^^^ help: if you need the address of the function, consider: `Foo::A as usize`\n+\n+error: casting a `fn(usize) -> Foo {Foo::A}` to `u128` is bad style.\n+  --> $DIR/types_fn_to_int.rs:19:14\n+   |\n+19 |     let _z = Foo::A as u128;\n+   |              ^^^^^^^^^^^^^^ help: if you need the address of the function, consider: `Foo::A as usize`\n+\n+error: casting a `fn() -> i32 {bar}` to `i128` is bad style.\n+  --> $DIR/types_fn_to_int.rs:20:14\n+   |\n+20 |     let _z = bar as i128;\n+   |              ^^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n+\n+error: casting a `fn() -> i32 {bar}` to `u128` is bad style.\n+  --> $DIR/types_fn_to_int.rs:21:14\n    |\n-15 |     let z = bar as u32;\n-   |             ^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n+21 |     let _z = bar as u128;\n+   |              ^^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 10 previous errors\n "}]}