{"sha": "a24853709a44c4e4f4e811c315ace8ef082a4ec0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNDg1MzcwOWE0NGM0ZTRmNGU4MTFjMzE1YWNlOGVmMDgyYTRlYzA=", "commit": {"author": {"name": "Mark Nieweglowski", "email": "muth@exego.ca", "date": "2018-12-22T06:04:03Z"}, "committer": {"name": "Mark Nieweglowski", "email": "muth@exego.ca", "date": "2018-12-22T06:04:03Z"}, "message": "rm unused file map_unit_fn.stderr\n\nThere is no map_unit_fn.rs whose output would be diffed with map_unit_fn.stderr\n\nmap_unit_fn.stderr was renamed 8 months ago from option_map_unit_fn.stderr\nbut option_map_unit_fn.{stderr,rs} both remain and are in use.", "tree": {"sha": "a38314fc21569a76c5820cad89451a9689f0eb74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a38314fc21569a76c5820cad89451a9689f0eb74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a24853709a44c4e4f4e811c315ace8ef082a4ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a24853709a44c4e4f4e811c315ace8ef082a4ec0", "html_url": "https://github.com/rust-lang/rust/commit/a24853709a44c4e4f4e811c315ace8ef082a4ec0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a24853709a44c4e4f4e811c315ace8ef082a4ec0/comments", "author": {"login": "muth", "id": 1159160, "node_id": "MDQ6VXNlcjExNTkxNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/1159160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muth", "html_url": "https://github.com/muth", "followers_url": "https://api.github.com/users/muth/followers", "following_url": "https://api.github.com/users/muth/following{/other_user}", "gists_url": "https://api.github.com/users/muth/gists{/gist_id}", "starred_url": "https://api.github.com/users/muth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muth/subscriptions", "organizations_url": "https://api.github.com/users/muth/orgs", "repos_url": "https://api.github.com/users/muth/repos", "events_url": "https://api.github.com/users/muth/events{/privacy}", "received_events_url": "https://api.github.com/users/muth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "muth", "id": 1159160, "node_id": "MDQ6VXNlcjExNTkxNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/1159160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muth", "html_url": "https://github.com/muth", "followers_url": "https://api.github.com/users/muth/followers", "following_url": "https://api.github.com/users/muth/following{/other_user}", "gists_url": "https://api.github.com/users/muth/gists{/gist_id}", "starred_url": "https://api.github.com/users/muth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muth/subscriptions", "organizations_url": "https://api.github.com/users/muth/orgs", "repos_url": "https://api.github.com/users/muth/repos", "events_url": "https://api.github.com/users/muth/events{/privacy}", "received_events_url": "https://api.github.com/users/muth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6031221e034ea3c41ffd129798c305cea439c01", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6031221e034ea3c41ffd129798c305cea439c01", "html_url": "https://github.com/rust-lang/rust/commit/c6031221e034ea3c41ffd129798c305cea439c01"}], "stats": {"total": 210, "additions": 0, "deletions": 210}, "files": [{"sha": "c4ee0ce9238047830cce9f17dd8a34b81da5d764", "filename": "tests/ui/map_unit_fn.stderr", "status": "removed", "additions": 0, "deletions": 210, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/c6031221e034ea3c41ffd129798c305cea439c01/tests%2Fui%2Fmap_unit_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6031221e034ea3c41ffd129798c305cea439c01/tests%2Fui%2Fmap_unit_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unit_fn.stderr?ref=c6031221e034ea3c41ffd129798c305cea439c01", "patch": "@@ -1,210 +0,0 @@\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:33:5\n-   |\n-33 |     x.field.map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(x_field) = x.field { do_nothing(...) }`\n-   |\n-   = note: `-D option-map-unit-fn` implied by `-D warnings`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:35:5\n-   |\n-35 |     x.field.map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(x_field) = x.field { do_nothing(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:37:5\n-   |\n-37 |     x.field.map(diverge);\n-   |     ^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(x_field) = x.field { diverge(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:43:5\n-   |\n-43 |     x.field.map(|value| x.do_option_nothing(value + captured));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:45:5\n-   |\n-45 |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:48:5\n-   |\n-48 |     x.field.map(|value| do_nothing(value + captured));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:50:5\n-   |\n-50 |     x.field.map(|value| { do_nothing(value + captured) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:52:5\n-   |\n-52 |     x.field.map(|value| { do_nothing(value + captured); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:54:5\n-   |\n-54 |     x.field.map(|value| { { do_nothing(value + captured); } });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:57:5\n-   |\n-57 |     x.field.map(|value| diverge(value + captured));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:59:5\n-   |\n-59 |     x.field.map(|value| { diverge(value + captured) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:61:5\n-   |\n-61 |     x.field.map(|value| { diverge(value + captured); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:63:5\n-   |\n-63 |     x.field.map(|value| { { diverge(value + captured); } });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:68:5\n-   |\n-68 |     x.field.map(|value| { let y = plus_one(value + captured); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:70:5\n-   |\n-70 |     x.field.map(|value| { plus_one(value + captured); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:72:5\n-   |\n-72 |     x.field.map(|value| { { plus_one(value + captured); } });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:75:5\n-   |\n-75 |     x.field.map(|ref value| { do_nothing(value + captured) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(ref value) = x.field { do_nothing(value + captured) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:78:5\n-   |\n-78 |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:80:5\n-   |\n-80 |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:84:5\n-   |\n-84 |        x.field.map(|value| {\n-   |   _____^\n-   |  |_____|\n-   | ||\n-85 | ||         do_nothing(value);\n-86 | ||         do_nothing(value)\n-87 | ||     });\n-   | ||______^- help: try this: `if let Some(value) = x.field { ... }`\n-   | |_______|\n-   | \n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:88:5\n-   |\n-88 |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:91:5\n-   |\n-91 |     Some(42).map(diverge);\n-   |     ^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_) = Some(42) { diverge(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:92:5\n-   |\n-92 |     \"12\".parse::<i32>().ok().map(diverge);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_) = \"12\".parse::<i32>().ok() { diverge(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:93:5\n-   |\n-93 |     Some(plus_one(1)).map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_) = Some(plus_one(1)) { do_nothing(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:97:5\n-   |\n-97 |     y.map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_y) = y { do_nothing(...) }`\n-\n-error: aborting due to 25 previous errors\n-"}]}