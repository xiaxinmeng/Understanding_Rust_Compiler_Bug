{"sha": "002529937075bd69d7f71483d798d6e4f43d1de9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMjUyOTkzNzA3NWJkNjlkN2Y3MTQ4M2Q3OThkNmU0ZjQzZDFkZTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-19T17:55:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-19T17:55:32Z"}, "message": "sane indexing in text", "tree": {"sha": "b18a0be7255bb070dd7e2ae3b5687bc5f35f0d41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b18a0be7255bb070dd7e2ae3b5687bc5f35f0d41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/002529937075bd69d7f71483d798d6e4f43d1de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/002529937075bd69d7f71483d798d6e4f43d1de9", "html_url": "https://github.com/rust-lang/rust/commit/002529937075bd69d7f71483d798d6e4f43d1de9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/002529937075bd69d7f71483d798d6e4f43d1de9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8467ba8cdb565d865e14e2115cde98cd7692719d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8467ba8cdb565d865e14e2115cde98cd7692719d", "html_url": "https://github.com/rust-lang/rust/commit/8467ba8cdb565d865e14e2115cde98cd7692719d"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "5657ee4b8743305cb1c2d284df762fbd87d7e627", "filename": "crates/ra_assists/src/remove_dbg.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/002529937075bd69d7f71483d798d6e4f43d1de9/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002529937075bd69d7f71483d798d6e4f43d1de9/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs?ref=002529937075bd69d7f71483d798d6e4f43d1de9", "patch": "@@ -36,11 +36,10 @@ pub(crate) fn remove_dbg(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n \n     let macro_content = {\n         let macro_args = macro_call.token_tree()?.syntax().clone();\n-        let range = macro_args.range();\n-        let start = range.start() + TextUnit::of_char('(');\n-        let end = range.end() - TextUnit::of_char(')');\n \n-        macro_args.text().slice(start..end).to_string()\n+        let text = macro_args.text();\n+        let without_parens = TextUnit::of_char('(')..text.len() - TextUnit::of_char(')');\n+        text.slice(without_parens).to_string()\n     };\n \n     ctx.add_action(AssistId(\"remove_dbg\"), \"remove dbg!()\", |edit| {"}, {"sha": "d8adf782b37d6ce0b1052f79377b658940985dd0", "filename": "crates/ra_syntax/src/syntax_text.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/002529937075bd69d7f71483d798d6e4f43d1de9/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002529937075bd69d7f71483d798d6e4f43d1de9/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs?ref=002529937075bd69d7f71483d798d6e4f43d1de9", "patch": "@@ -95,18 +95,21 @@ impl<'a> SyntaxText<'a> {\n         self.range.is_empty()\n     }\n \n-    /// NB, the offsets here are absolute, and this probably doesn't make sense!\n     pub fn slice(&self, range: impl ops::RangeBounds<TextUnit>) -> SyntaxText<'a> {\n         let start = match range.start_bound() {\n-            Bound::Included(b) => *b,\n-            Bound::Excluded(b) => *b + TextUnit::from(1u32),\n-            Bound::Unbounded => self.range.start(),\n+            Bound::Included(&b) => b,\n+            Bound::Excluded(_) => panic!(\"utf-aware slicing can't work this way\"),\n+            Bound::Unbounded => 0.into(),\n         };\n         let end = match range.end_bound() {\n-            Bound::Included(b) => *b + TextUnit::from(1u32),\n-            Bound::Excluded(b) => *b,\n-            Bound::Unbounded => self.range.end(),\n+            Bound::Included(_) => panic!(\"utf-aware slicing can't work this way\"),\n+            Bound::Excluded(&b) => b,\n+            Bound::Unbounded => self.len(),\n         };\n+        assert!(start <= end);\n+        let len = end - start;\n+        let start = self.range.start() + start;\n+        let end = start + len;\n         assert!(\n             start <= end,\n             \"invalid slice, range: {:?}, slice: {:?}\","}]}