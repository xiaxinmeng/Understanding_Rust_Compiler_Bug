{"sha": "cd30894c2f7113bf79c7f66d30a774f11b315d3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMzA4OTRjMmY3MTEzYmY3OWM3ZjY2ZDMwYTc3NGYxMWIzMTVkM2Y=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-16T22:13:00Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:35Z"}, "message": "anonymize_predicate", "tree": {"sha": "915e44581bef84cf34ad60f8342a8df8b37906f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/915e44581bef84cf34ad60f8342a8df8b37906f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd30894c2f7113bf79c7f66d30a774f11b315d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd30894c2f7113bf79c7f66d30a774f11b315d3f", "html_url": "https://github.com/rust-lang/rust/commit/cd30894c2f7113bf79c7f66d30a774f11b315d3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd30894c2f7113bf79c7f66d30a774f11b315d3f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b33f39126c56192e7e35bc943bee9cca6960abd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b33f39126c56192e7e35bc943bee9cca6960abd", "html_url": "https://github.com/rust-lang/rust/commit/1b33f39126c56192e7e35bc943bee9cca6960abd"}], "stats": {"total": 37, "additions": 15, "deletions": 22}, "files": [{"sha": "957c993c4bf328b3bc8078e838d3331bd7d98f6e", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cd30894c2f7113bf79c7f66d30a774f11b315d3f/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd30894c2f7113bf79c7f66d30a774f11b315d3f/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=cd30894c2f7113bf79c7f66d30a774f11b315d3f", "patch": "@@ -10,41 +10,34 @@ pub fn anonymize_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     pred: ty::Predicate<'tcx>,\n ) -> ty::Predicate<'tcx> {\n-    let kind = pred.kind();\n+    let kind = pred.kint(tcx);\n     let new = match kind {\n-        &ty::PredicateKind::Trait(ref data, constness) => {\n-            ty::PredicateKind::Trait(tcx.anonymize_late_bound_regions(data), constness)\n+        ty::PredicateKint::ForAll(binder) => {\n+            ty::PredicateKint::ForAll(tcx.anonymize_late_bound_regions(binder))\n         }\n+        &ty::PredicateKint::Trait(data, constness) => ty::PredicateKint::Trait(data, constness),\n \n-        ty::PredicateKind::RegionOutlives(data) => {\n-            ty::PredicateKind::RegionOutlives(tcx.anonymize_late_bound_regions(data))\n-        }\n+        &ty::PredicateKint::RegionOutlives(data) => ty::PredicateKint::RegionOutlives(data),\n \n-        ty::PredicateKind::TypeOutlives(data) => {\n-            ty::PredicateKind::TypeOutlives(tcx.anonymize_late_bound_regions(data))\n-        }\n+        &ty::PredicateKint::TypeOutlives(data) => ty::PredicateKint::TypeOutlives(data),\n \n-        ty::PredicateKind::Projection(data) => {\n-            ty::PredicateKind::Projection(tcx.anonymize_late_bound_regions(data))\n-        }\n+        &ty::PredicateKint::Projection(data) => ty::PredicateKint::Projection(data),\n \n-        &ty::PredicateKind::WellFormed(data) => ty::PredicateKind::WellFormed(data),\n+        &ty::PredicateKint::WellFormed(data) => ty::PredicateKint::WellFormed(data),\n \n-        &ty::PredicateKind::ObjectSafe(data) => ty::PredicateKind::ObjectSafe(data),\n+        &ty::PredicateKint::ObjectSafe(data) => ty::PredicateKint::ObjectSafe(data),\n \n-        &ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n-            ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind)\n+        &ty::PredicateKint::ClosureKind(closure_def_id, closure_substs, kind) => {\n+            ty::PredicateKint::ClosureKind(closure_def_id, closure_substs, kind)\n         }\n \n-        ty::PredicateKind::Subtype(data) => {\n-            ty::PredicateKind::Subtype(tcx.anonymize_late_bound_regions(data))\n-        }\n+        &ty::PredicateKint::Subtype(data) => ty::PredicateKint::Subtype(data),\n \n-        &ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n-            ty::PredicateKind::ConstEvaluatable(def_id, substs)\n+        &ty::PredicateKint::ConstEvaluatable(def_id, substs) => {\n+            ty::PredicateKint::ConstEvaluatable(def_id, substs)\n         }\n \n-        ty::PredicateKind::ConstEquate(c1, c2) => ty::PredicateKind::ConstEquate(c1, c2),\n+        &ty::PredicateKint::ConstEquate(c1, c2) => ty::PredicateKint::ConstEquate(c1, c2),\n     };\n \n     if new != *kind { new.to_predicate(tcx) } else { pred }"}]}