{"sha": "a24be59b4693d41634ad22815b4d973440ff0b30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNGJlNTliNDY5M2Q0MTYzNGFkMjI4MTViNGQ5NzM0NDBmZjBiMzA=", "commit": {"author": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-05-27T15:07:33Z"}, "committer": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-07-25T19:30:08Z"}, "message": "std: win: Don't use GetUserProfileDirectoryW on UWP", "tree": {"sha": "b2dbedd52158713c69ef784de75f27816bf83edb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2dbedd52158713c69ef784de75f27816bf83edb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a24be59b4693d41634ad22815b4d973440ff0b30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a24be59b4693d41634ad22815b4d973440ff0b30", "html_url": "https://github.com/rust-lang/rust/commit/a24be59b4693d41634ad22815b4d973440ff0b30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a24be59b4693d41634ad22815b4d973440ff0b30/comments", "author": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef267284e8a2d021afe70f00eabcbbf7d076d56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef267284e8a2d021afe70f00eabcbbf7d076d56f", "html_url": "https://github.com/rust-lang/rust/commit/ef267284e8a2d021afe70f00eabcbbf7d076d56f"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "bfaa22906033c96cc9142e8ea6afcca36f3d20de", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a24be59b4693d41634ad22815b4d973440ff0b30/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24be59b4693d41634ad22815b4d973440ff0b30/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=a24be59b4693d41634ad22815b4d973440ff0b30", "patch": "@@ -143,7 +143,6 @@ pub const WSAECONNREFUSED: c_int = 10061;\n \n pub const MAX_PROTOCOL_CHAIN: DWORD = 7;\n \n-pub const TOKEN_READ: DWORD = 0x20008;\n pub const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: usize = 16 * 1024;\n pub const FSCTL_GET_REPARSE_POINT: DWORD = 0x900a8;\n pub const IO_REPARSE_TAG_SYMLINK: DWORD = 0xa000000c;\n@@ -660,10 +659,19 @@ cfg_if::cfg_if! {\n if #[cfg(not(target_vendor = \"uwp\"))] {\n     pub const HANDLE_FLAG_INHERIT: DWORD = 0x00000001;\n \n+    pub const TOKEN_READ: DWORD = 0x20008;\n+\n     extern \"system\" {\n         #[link_name = \"SystemFunction036\"]\n         pub fn RtlGenRandom(RandomBuffer: *mut u8, RandomBufferLength: ULONG) -> BOOLEAN;\n \n+        // Allowed but unused by UWP\n+        pub fn OpenProcessToken(ProcessHandle: HANDLE,\n+                                DesiredAccess: DWORD,\n+                                TokenHandle: *mut HANDLE) -> BOOL;\n+        pub fn GetUserProfileDirectoryW(hToken: HANDLE,\n+                                        lpProfileDir: LPWSTR,\n+                                        lpcchSize: *mut DWORD) -> BOOL;\n         pub fn SetHandleInformation(hObject: HANDLE,\n                                     dwMask: DWORD,\n                                     dwFlags: DWORD) -> BOOL;\n@@ -752,9 +760,6 @@ extern \"system\" {\n     pub fn GetCommandLineW() -> *mut LPCWSTR;\n     pub fn GetTempPathW(nBufferLength: DWORD,\n                         lpBuffer: LPCWSTR) -> DWORD;\n-    pub fn OpenProcessToken(ProcessHandle: HANDLE,\n-                            DesiredAccess: DWORD,\n-                            TokenHandle: *mut HANDLE) -> BOOL;\n     pub fn GetCurrentProcess() -> HANDLE;\n     pub fn GetCurrentThread() -> HANDLE;\n     pub fn GetStdHandle(which: DWORD) -> HANDLE;\n@@ -779,9 +784,6 @@ extern \"system\" {\n     pub fn SwitchToThread() -> BOOL;\n     pub fn Sleep(dwMilliseconds: DWORD);\n     pub fn GetProcessId(handle: HANDLE) -> DWORD;\n-    pub fn GetUserProfileDirectoryW(hToken: HANDLE,\n-                                    lpProfileDir: LPWSTR,\n-                                    lpcchSize: *mut DWORD) -> BOOL;\n     pub fn CopyFileExW(lpExistingFileName: LPCWSTR,\n                        lpNewFileName: LPCWSTR,\n                        lpProgressRoutine: LPPROGRESS_ROUTINE,"}, {"sha": "7c400dce686f374a439138834b91284ddc4ae035", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a24be59b4693d41634ad22815b4d973440ff0b30/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24be59b4693d41634ad22815b4d973440ff0b30/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=a24be59b4693d41634ad22815b4d973440ff0b30", "patch": "@@ -13,7 +13,6 @@ use crate::path::{self, PathBuf};\n use crate::ptr;\n use crate::slice;\n use crate::sys::{c, cvt};\n-use crate::sys::handle::Handle;\n \n use super::to_u16s;\n \n@@ -284,10 +283,11 @@ pub fn temp_dir() -> PathBuf {\n     }, super::os2path).unwrap()\n }\n \n-pub fn home_dir() -> Option<PathBuf> {\n-    crate::env::var_os(\"HOME\").or_else(|| {\n-        crate::env::var_os(\"USERPROFILE\")\n-    }).map(PathBuf::from).or_else(|| unsafe {\n+#[cfg(not(target_vendor = \"uwp\"))]\n+fn home_dir_crt() -> Option<PathBuf> {\n+    unsafe {\n+        use crate::sys::handle::Handle;\n+\n         let me = c::GetCurrentProcess();\n         let mut token = ptr::null_mut();\n         if c::OpenProcessToken(me, c::TOKEN_READ, &mut token) == 0 {\n@@ -301,7 +301,18 @@ pub fn home_dir() -> Option<PathBuf> {\n                 _ => sz - 1, // sz includes the null terminator\n             }\n         }, super::os2path).ok()\n-    })\n+    }\n+}\n+\n+#[cfg(target_vendor = \"uwp\")]\n+fn home_dir_crt() -> Option<PathBuf> {\n+    None\n+}\n+\n+pub fn home_dir() -> Option<PathBuf> {\n+    crate::env::var_os(\"HOME\").or_else(|| {\n+        crate::env::var_os(\"USERPROFILE\")\n+    }).map(PathBuf::from).or_else(|| home_dir_crt())\n }\n \n pub fn exit(code: i32) -> ! {"}]}