{"sha": "9314e5b942c1e2cbc9d4c7d520ca7102675d6d08", "node_id": "C_kwDOAAsO6NoAKDkzMTRlNWI5NDJjMWUyY2JjOWQ0YzdkNTIwY2E3MTAyNjc1ZDZkMDg", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-25T14:39:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-12-01T15:51:05Z"}, "message": "rustc_hir: Change representation of import paths to support multiple resolutions", "tree": {"sha": "1caf3c31f1d7fb030b94deef84825898586878f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1caf3c31f1d7fb030b94deef84825898586878f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08", "html_url": "https://github.com/rust-lang/rust/commit/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f8c49e950d70aad48d2e1ec4642cef0a364c0ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec", "html_url": "https://github.com/rust-lang/rust/commit/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec"}], "stats": {"total": 73, "additions": 41, "deletions": 32}, "files": [{"sha": "1f56d0118a404b50d88b938620c01b70fcc11212", "filename": "clippy_lints/src/disallowed_types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_types.rs?ref=9314e5b942c1e2cbc9d4c7d520ca7102675d6d08", "patch": "@@ -106,7 +106,9 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedTypes {\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if let ItemKind::Use(path, UseKind::Single) = &item.kind {\n-            self.check_res_emit(cx, &path.res, item.span);\n+            for res in &path.res {\n+                self.check_res_emit(cx, res, item.span);\n+            }\n         }\n     }\n "}, {"sha": "e2e6a87a30151472b7bc93e250f556275641f441", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=9314e5b942c1e2cbc9d4c7d520ca7102675d6d08", "patch": "@@ -94,7 +94,10 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n             let hir_id = item.hir_id();\n             let attrs = cx.tcx.hir().attrs(hir_id);\n             if let Some(mac_attr) = attrs.iter().find(|attr| attr.has_name(sym::macro_use));\n-            if let Res::Def(DefKind::Mod, id) = path.res;\n+            if let Some(id) = path.res.iter().find_map(|res| match res {\n+                Res::Def(DefKind::Mod, id) => Some(id),\n+                _ => None,\n+            });\n             if !id.is_local();\n             then {\n                 for kid in cx.tcx.module_children(id).iter() {"}, {"sha": "773174679dbdce618b244bfdfe9f5516d2eaaa0f", "filename": "clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=9314e5b942c1e2cbc9d4c7d520ca7102675d6d08", "patch": "@@ -66,35 +66,38 @@ impl LateLintPass<'_> for ImportRename {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n-        if_chain! {\n-            if let ItemKind::Use(path, UseKind::Single) = &item.kind;\n-            if let Res::Def(_, id) = path.res;\n-            if let Some(name) = self.renames.get(&id);\n-            // Remove semicolon since it is not present for nested imports\n-            let span_without_semi = cx.sess().source_map().span_until_char(item.span, ';');\n-            if let Some(snip) = snippet_opt(cx, span_without_semi);\n-            if let Some(import) = match snip.split_once(\" as \") {\n-                None => Some(snip.as_str()),\n-                Some((import, rename)) => {\n-                    if rename.trim() == name.as_str() {\n-                        None\n-                    } else {\n-                        Some(import.trim())\n+        if let ItemKind::Use(path, UseKind::Single) = &item.kind {\n+            for &res in &path.res {\n+                if_chain! {\n+                    if let Res::Def(_, id) = res;\n+                    if let Some(name) = self.renames.get(&id);\n+                    // Remove semicolon since it is not present for nested imports\n+                    let span_without_semi = cx.sess().source_map().span_until_char(item.span, ';');\n+                    if let Some(snip) = snippet_opt(cx, span_without_semi);\n+                    if let Some(import) = match snip.split_once(\" as \") {\n+                        None => Some(snip.as_str()),\n+                        Some((import, rename)) => {\n+                            if rename.trim() == name.as_str() {\n+                                None\n+                            } else {\n+                                Some(import.trim())\n+                            }\n+                        },\n+                    };\n+                    then {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            MISSING_ENFORCED_IMPORT_RENAMES,\n+                            span_without_semi,\n+                            \"this import should be renamed\",\n+                            \"try\",\n+                            format!(\n+                                \"{import} as {name}\",\n+                            ),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n-                },\n-            };\n-            then {\n-                span_lint_and_sugg(\n-                    cx,\n-                    MISSING_ENFORCED_IMPORT_RENAMES,\n-                    span_without_semi,\n-                    \"this import should be renamed\",\n-                    \"try\",\n-                    format!(\n-                        \"{import} as {name}\",\n-                    ),\n-                    Applicability::MachineApplicable,\n-                );\n+                }\n             }\n         }\n     }"}, {"sha": "d612d249c2f000ab3c869952f1806ff491ac2450", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=9314e5b942c1e2cbc9d4c7d520ca7102675d6d08", "patch": "@@ -84,7 +84,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n \n fn is_not_macro_export<'tcx>(item: &'tcx Item<'tcx>) -> bool {\n     if let ItemKind::Use(path, _) = item.kind {\n-        if let Res::Def(DefKind::Macro(MacroKind::Bang), _) = path.res {\n+        if path.res.iter().all(|res| matches!(res, Res::Def(DefKind::Macro(MacroKind::Bang), _))) {\n             return false;\n         }\n     } else if let ItemKind::Macro(..) = item.kind {"}, {"sha": "e4d1ee195c4dfb10aed5eed874f7de6fe280d84d", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9314e5b942c1e2cbc9d4c7d520ca7102675d6d08/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=9314e5b942c1e2cbc9d4c7d520ca7102675d6d08", "patch": "@@ -176,7 +176,8 @@ impl LateLintPass<'_> for WildcardImports {\n                     format!(\"{import_source_snippet}::{imports_string}\")\n                 };\n \n-                let (lint, message) = if let Res::Def(DefKind::Enum, _) = use_path.res {\n+                // Glob imports always have a single resolution.\n+                let (lint, message) = if let Res::Def(DefKind::Enum, _) = use_path.res[0] {\n                     (ENUM_GLOB_USE, \"usage of wildcard import for enum variants\")\n                 } else {\n                     (WILDCARD_IMPORTS, \"usage of wildcard import\")"}]}