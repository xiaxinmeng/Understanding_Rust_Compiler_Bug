{"sha": "bfc263f1f98aece963a4b103d787005346f0c1c7", "node_id": "C_kwDOAAsO6NoAKGJmYzI2M2YxZjk4YWVjZTk2M2E0YjEwM2Q3ODcwMDUzNDZmMGMxYzc", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T15:57:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T15:57:13Z"}, "message": "introduce hacks module", "tree": {"sha": "e3a89f46055068160290fd92766ea3f9432cfd6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3a89f46055068160290fd92766ea3f9432cfd6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfc263f1f98aece963a4b103d787005346f0c1c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc263f1f98aece963a4b103d787005346f0c1c7", "html_url": "https://github.com/rust-lang/rust/commit/bfc263f1f98aece963a4b103d787005346f0c1c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfc263f1f98aece963a4b103d787005346f0c1c7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1788dc717a856a409ec76759783ad59c47bd49", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1788dc717a856a409ec76759783ad59c47bd49", "html_url": "https://github.com/rust-lang/rust/commit/aa1788dc717a856a409ec76759783ad59c47bd49"}], "stats": {"total": 85, "additions": 34, "deletions": 51}, "files": [{"sha": "f67d7d56d81989d9dec1480fcf45e351c3d0a62e", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfc263f1f98aece963a4b103d787005346f0c1c7/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc263f1f98aece963a4b103d787005346f0c1c7/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=bfc263f1f98aece963a4b103d787005346f0c1c7", "patch": "@@ -309,7 +309,7 @@ fn parse_comma_sep_expr(input: ast::TokenTree) -> Option<Vec<ast::Expr>> {\n         input_expressions\n             .into_iter()\n             .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n-            .filter_map(|mut tokens| ast::Expr::parse(&tokens.join(\"\")).ok())\n+            .filter_map(|mut tokens| syntax::hacks::parse_expr_from_str(&tokens.join(\"\")))\n             .collect::<Vec<ast::Expr>>(),\n     )\n }"}, {"sha": "98cd3f8f3370b586413f80d93ad2c591d63c29ad", "filename": "crates/ide_completion/src/snippet.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bfc263f1f98aece963a4b103d787005346f0c1c7/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc263f1f98aece963a4b103d787005346f0c1c7/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=bfc263f1f98aece963a4b103d787005346f0c1c7", "patch": "@@ -212,15 +212,14 @@ fn validate_snippet(\n ) -> Option<(Box<[GreenNode]>, String, Option<Box<str>>)> {\n     let mut imports = Vec::with_capacity(requires.len());\n     for path in requires.iter() {\n-        let path = ast::Path::parse(path).ok()?;\n-        let valid_use_path = path.segments().all(|seg| {\n-            matches!(seg.kind(), Some(ast::PathSegmentKind::Name(_)))\n-                || seg.generic_arg_list().is_none()\n-        });\n-        if !valid_use_path {\n+        let use_path = ast::SourceFile::parse(&format!(\"use {};\", path))\n+            .syntax_node()\n+            .descendants()\n+            .find_map(ast::Path::cast)?;\n+        if use_path.syntax().text() != path.as_str() {\n             return None;\n         }\n-        let green = path.syntax().green().into_owned();\n+        let green = use_path.syntax().green().into_owned();\n         imports.push(green);\n     }\n     let snippet = snippet.iter().join(\"\\n\");"}, {"sha": "e589940dae29f58ef7bb0d2d48eb80a4de89cf21", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bfc263f1f98aece963a4b103d787005346f0c1c7/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc263f1f98aece963a4b103d787005346f0c1c7/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=bfc263f1f98aece963a4b103d787005346f0c1c7", "patch": "@@ -67,7 +67,11 @@ pub fn get_path_at_cursor_in_tt(cursor: &ast::Ident) -> Option<ast::Path> {\n         .filter_map(SyntaxElement::into_token)\n         .take_while(|tok| tok != cursor);\n \n-    ast::Path::parse(&path_tokens.chain(iter::once(cursor.clone())).join(\"\")).ok()\n+    syntax::hacks::parse_expr_from_str(&path_tokens.chain(iter::once(cursor.clone())).join(\"\"))\n+        .and_then(|expr| match expr {\n+            ast::Expr::PathExpr(it) => it.path(),\n+            _ => None,\n+        })\n }\n \n /// Parses and resolves the path at the cursor position in the given attribute, if it is a derive.\n@@ -323,7 +327,12 @@ pub fn parse_tt_as_comma_sep_paths(input: ast::TokenTree) -> Option<Vec<ast::Pat\n     let paths = input_expressions\n         .into_iter()\n         .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n-        .filter_map(|mut tokens| ast::Path::parse(&tokens.join(\"\")).ok())\n+        .filter_map(|mut tokens| {\n+            syntax::hacks::parse_expr_from_str(&tokens.join(\"\")).and_then(|expr| match expr {\n+                ast::Expr::PathExpr(it) => it.path(),\n+                _ => None,\n+            })\n+        })\n         .collect();\n     Some(paths)\n }"}, {"sha": "112b912ade26f5f189008302e18f27ea6e2bd34c", "filename": "crates/syntax/src/hacks.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bfc263f1f98aece963a4b103d787005346f0c1c7/crates%2Fsyntax%2Fsrc%2Fhacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc263f1f98aece963a4b103d787005346f0c1c7/crates%2Fsyntax%2Fsrc%2Fhacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fhacks.rs?ref=bfc263f1f98aece963a4b103d787005346f0c1c7", "patch": "@@ -0,0 +1,14 @@\n+//! Things which exist to solve practial issues, but which shouldn't exist.\n+//!\n+//! Please avoid adding new usages of the functions in this module\n+\n+use crate::{ast, AstNode};\n+\n+pub fn parse_expr_from_str(s: &str) -> Option<ast::Expr> {\n+    let file = ast::SourceFile::parse(&format!(\"const _: () = {};\", s));\n+    let expr = file.syntax_node().descendants().find_map(ast::Expr::cast)?;\n+    if expr.syntax().text() != s {\n+        return None;\n+    }\n+    Some(expr)\n+}"}, {"sha": "d6b1cce45ff7fa1bc10be4d65eb1bb76c105f666", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bfc263f1f98aece963a4b103d787005346f0c1c7/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc263f1f98aece963a4b103d787005346f0c1c7/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=bfc263f1f98aece963a4b103d787005346f0c1c7", "patch": "@@ -40,6 +40,7 @@ pub mod ast;\n pub mod fuzz;\n pub mod utils;\n pub mod ted;\n+pub mod hacks;\n \n use std::{marker::PhantomData, sync::Arc};\n \n@@ -167,26 +168,6 @@ impl SourceFile {\n     }\n }\n \n-// FIXME: `parse` functions shouldn't hang directly from AST nodes, and they\n-// shouldn't return `Result`.\n-//\n-// We need a dedicated module for parser entry points, and they should always\n-// return `Parse`.\n-\n-impl ast::Path {\n-    /// Returns `text`, parsed as a path, but only if it has no errors.\n-    pub fn parse(text: &str) -> Result<Self, ()> {\n-        parsing::parse_text_as(text, parser::ParserEntryPoint::Path)\n-    }\n-}\n-\n-impl ast::Expr {\n-    /// Returns `text`, parsed as an expression, but only if it has no errors.\n-    pub fn parse(text: &str) -> Result<Self, ()> {\n-        parsing::parse_text_as(text, parser::ParserEntryPoint::Expr)\n-    }\n-}\n-\n /// Matches a `SyntaxNode` against an `ast` type.\n ///\n /// # Example:"}, {"sha": "ac1d920d69dc0e20c167b09929c42ac5427a7b61", "filename": "crates/syntax/src/parsing.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bfc263f1f98aece963a4b103d787005346f0c1c7/crates%2Fsyntax%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc263f1f98aece963a4b103d787005346f0c1c7/crates%2Fsyntax%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing.rs?ref=bfc263f1f98aece963a4b103d787005346f0c1c7", "patch": "@@ -5,7 +5,7 @@ mod reparsing;\n \n use rowan::TextRange;\n \n-use crate::{syntax_node::GreenNode, AstNode, SyntaxError, SyntaxNode, SyntaxTreeBuilder};\n+use crate::{syntax_node::GreenNode, SyntaxError, SyntaxTreeBuilder};\n \n pub(crate) use crate::parsing::reparsing::incremental_reparse;\n \n@@ -17,26 +17,6 @@ pub(crate) fn parse_text(text: &str) -> (GreenNode, Vec<SyntaxError>) {\n     (node, errors)\n }\n \n-/// Returns `text` parsed as a `T` provided there are no parse errors.\n-pub(crate) fn parse_text_as<T: AstNode>(\n-    text: &str,\n-    entry_point: parser::ParserEntryPoint,\n-) -> Result<T, ()> {\n-    let lexed = parser::LexedStr::new(text);\n-    if lexed.errors().next().is_some() {\n-        return Err(());\n-    }\n-    let parser_input = lexed.to_input();\n-    let parser_output = parser::parse(&parser_input, entry_point);\n-    let (node, errors, eof) = build_tree(lexed, parser_output, true);\n-\n-    if !errors.is_empty() || !eof {\n-        return Err(());\n-    }\n-\n-    SyntaxNode::new_root(node).first_child().and_then(T::cast).ok_or(())\n-}\n-\n pub(crate) fn build_tree(\n     lexed: parser::LexedStr<'_>,\n     parser_output: parser::Output,"}]}