{"sha": "945a4b18d949719a1ad737d6d39dda717d62c001", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NWE0YjE4ZDk0OTcxOWExYWQ3MzdkNmQzOWRkYTcxN2Q2MmMwMDE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-12T09:57:32Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-12T10:01:22Z"}, "message": "Fix closure migration suggestion when the body is a macro.", "tree": {"sha": "8b42fa23536356a3912098bc6be5103cb7b40699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b42fa23536356a3912098bc6be5103cb7b40699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/945a4b18d949719a1ad737d6d39dda717d62c001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/945a4b18d949719a1ad737d6d39dda717d62c001", "html_url": "https://github.com/rust-lang/rust/commit/945a4b18d949719a1ad737d6d39dda717d62c001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/945a4b18d949719a1ad737d6d39dda717d62c001/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb2226b1f174f3cc644275ef8663be6295a7f704", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2226b1f174f3cc644275ef8663be6295a7f704", "html_url": "https://github.com/rust-lang/rust/commit/eb2226b1f174f3cc644275ef8663be6295a7f704"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "862b650efd7e8d8cf388a2696e6f9ff9f5aa8753", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/945a4b18d949719a1ad737d6d39dda717d62c001/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945a4b18d949719a1ad737d6d39dda717d62c001/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=945a4b18d949719a1ad737d6d39dda717d62c001", "patch": "@@ -47,7 +47,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::lint;\n use rustc_span::sym;\n-use rustc_span::{MultiSpan, Span, Symbol};\n+use rustc_span::{MultiSpan, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n use rustc_data_structures::stable_map::FxHashMap;\n@@ -644,7 +644,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                     diagnostics_builder.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\");\n-                    let closure_body_span = self.tcx.hir().span(body_id.hir_id);\n+\n+                    let mut closure_body_span = self.tcx.hir().span(body_id.hir_id);\n+\n+                    // If the body was entirely expanded from a macro\n+                    // invocation, as the body is not contained inside the\n+                    // closure span. In that case, we walk up the expansion\n+                    // until we find the span before the expansion.\n+                    while !closure_body_span.is_dummy() && !closure_span.contains(closure_body_span) {\n+                        closure_body_span = closure_body_span.parent().unwrap_or(DUMMY_SP);\n+                    }\n+\n                     let (sugg, app) =\n                         match self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n                             Ok(s) => {"}]}