{"sha": "929b878262622292b76b8a27f09d3ccc646f9a46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyOWI4NzgyNjI2MjIyOTJiNzZiOGEyN2YwOWQzY2NjNjQ2ZjlhNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-09T09:13:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-09T09:13:03Z"}, "message": "Auto merge of #44438 - Xaeroxe:clamp, r=Mark-Simulacrum\n\nRevert clamp\n\nRevert clamp per https://github.com/rust-lang/rust/issues/44095#issuecomment-328218316 while we take time to assess the potential backwards compatibility damage done by it.", "tree": {"sha": "436df5e063d89b3fe486d02cfca5b07e03265aba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/436df5e063d89b3fe486d02cfca5b07e03265aba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/929b878262622292b76b8a27f09d3ccc646f9a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/929b878262622292b76b8a27f09d3ccc646f9a46", "html_url": "https://github.com/rust-lang/rust/commit/929b878262622292b76b8a27f09d3ccc646f9a46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/929b878262622292b76b8a27f09d3ccc646f9a46/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9fa8cc0b63771113e0f5aff210a5d443c88e819", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9fa8cc0b63771113e0f5aff210a5d443c88e819", "html_url": "https://github.com/rust-lang/rust/commit/a9fa8cc0b63771113e0f5aff210a5d443c88e819"}, {"sha": "db5b5f97063bd12cb5fb857e33cc5b417b408ef8", "url": "https://api.github.com/repos/rust-lang/rust/commits/db5b5f97063bd12cb5fb857e33cc5b417b408ef8", "html_url": "https://github.com/rust-lang/rust/commit/db5b5f97063bd12cb5fb857e33cc5b417b408ef8"}], "stats": {"total": 113, "additions": 0, "deletions": 113}, "files": [{"sha": "ec6525485f7a1d2a5107d4490f90ae8370936d51", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/929b878262622292b76b8a27f09d3ccc646f9a46/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/929b878262622292b76b8a27f09d3ccc646f9a46/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=929b878262622292b76b8a27f09d3ccc646f9a46", "patch": "@@ -481,30 +481,6 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     where Self: Sized {\n         if self <= other { self } else { other }\n     }\n-\n-    /// Returns max if self is greater than max, and min if self is less than min.\n-    /// Otherwise this will return self.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(clamp)]\n-    ///\n-    /// assert!((-3).clamp(-2, 1) == -2);\n-    /// assert!(0.clamp(-2, 1) == 0);\n-    /// assert!(2.clamp(-2, 1) == 1);\n-    /// ```\n-    ///\n-    /// # Panics\n-    /// Panics if min > max.\n-    #[unstable(feature = \"clamp\", issue = \"44095\")]\n-    fn clamp(self, min: Self, max: Self) -> Self\n-    where Self: Sized {\n-        assert!(min <= max);\n-        if self < min { min }\n-        else if self > max { max }\n-        else { self }\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "0135cd0a588cf09e530499f3e4c60b571cbf62b2", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/929b878262622292b76b8a27f09d3ccc646f9a46/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/929b878262622292b76b8a27f09d3ccc646f9a46/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=929b878262622292b76b8a27f09d3ccc646f9a46", "patch": "@@ -1080,32 +1080,6 @@ impl f32 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n-    /// Returns max if self is greater than max, and min if self is less than min.\n-    /// Otherwise this returns self.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(clamp)]\n-    /// use std::f32::NAN;\n-    /// assert!((-3.0f32).clamp(-2.0f32, 1.0f32) == -2.0f32);\n-    /// assert!((0.0f32).clamp(-2.0f32, 1.0f32) == 0.0f32);\n-    /// assert!((2.0f32).clamp(-2.0f32, 1.0f32) == 1.0f32);\n-    /// assert!((NAN).clamp(-2.0f32, 1.0f32).is_nan());\n-    /// ```\n-    ///\n-    /// # Panics\n-    /// Panics if min > max, min is NaN, or max is NaN.\n-    #[unstable(feature = \"clamp\", issue = \"44095\")]\n-    #[inline]\n-    pub fn clamp(self, min: f32, max: f32) -> f32 {\n-        assert!(min <= max);\n-        let mut x = self;\n-        if x < min { x = min; }\n-        if x > max { x = max; }\n-        x\n-    }\n-\n     /// Raw transmutation to `u32`.\n     ///\n     /// Converts the `f32` into its raw memory representation,\n@@ -1777,22 +1751,4 @@ mod tests {\n         assert_ne!(nan_masked & QNAN_MASK, 0);\n         assert!(nan_masked_fl.is_nan());\n     }\n-\n-    #[test]\n-    #[should_panic]\n-    fn test_clamp_min_greater_than_max() {\n-        1.0f32.clamp(3.0, 1.0);\n-    }\n-\n-    #[test]\n-    #[should_panic]\n-    fn test_clamp_min_is_nan() {\n-        1.0f32.clamp(NAN, 1.0);\n-    }\n-\n-    #[test]\n-    #[should_panic]\n-    fn test_clamp_max_is_nan() {\n-        1.0f32.clamp(3.0, NAN);\n-    }\n }"}, {"sha": "d73d7cd2c7bd1cf52c088a0e45d45c4e5e688d84", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/929b878262622292b76b8a27f09d3ccc646f9a46/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/929b878262622292b76b8a27f09d3ccc646f9a46/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=929b878262622292b76b8a27f09d3ccc646f9a46", "patch": "@@ -970,32 +970,6 @@ impl f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n-    /// Returns max if self is greater than max, and min if self is less than min.\n-    /// Otherwise this returns self.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(clamp)]\n-    /// use std::f64::NAN;\n-    /// assert!((-3.0f64).clamp(-2.0f64, 1.0f64) == -2.0f64);\n-    /// assert!((0.0f64).clamp(-2.0f64, 1.0f64) == 0.0f64);\n-    /// assert!((2.0f64).clamp(-2.0f64, 1.0f64) == 1.0f64);\n-    /// assert!((NAN).clamp(-2.0f64, 1.0f64).is_nan());\n-    /// ```\n-    ///\n-    /// # Panics\n-    /// Panics if min > max, min is NaN, or max is NaN.\n-    #[unstable(feature = \"clamp\", issue = \"44095\")]\n-    #[inline]\n-    pub fn clamp(self, min: f64, max: f64) -> f64 {\n-        assert!(min <= max);\n-        let mut x = self;\n-        if x < min { x = min; }\n-        if x > max { x = max; }\n-        x\n-    }\n-\n     // Solaris/Illumos requires a wrapper around log, log2, and log10 functions\n     // because of their non-standard behavior (e.g. log(-n) returns -Inf instead\n     // of expected NaN).\n@@ -1668,22 +1642,4 @@ mod tests {\n         assert_approx_eq!(f64::from_bits(0x4094e40000000000), 1337.0);\n         assert_approx_eq!(f64::from_bits(0xc02c800000000000), -14.25);\n     }\n-\n-    #[test]\n-    #[should_panic]\n-    fn test_clamp_min_greater_than_max() {\n-        1.0f64.clamp(3.0, 1.0);\n-    }\n-\n-    #[test]\n-    #[should_panic]\n-    fn test_clamp_min_is_nan() {\n-        1.0f64.clamp(NAN, 1.0);\n-    }\n-\n-    #[test]\n-    #[should_panic]\n-    fn test_clamp_max_is_nan() {\n-        1.0f64.clamp(3.0, NAN);\n-    }\n }"}, {"sha": "33bf0d68126d4c43f2ba4b24cc5cabcb102ae54c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/929b878262622292b76b8a27f09d3ccc646f9a46/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/929b878262622292b76b8a27f09d3ccc646f9a46/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=929b878262622292b76b8a27f09d3ccc646f9a46", "patch": "@@ -249,7 +249,6 @@\n #![feature(cfg_target_vendor)]\n #![feature(char_error_internals)]\n #![feature(char_internals)]\n-#![feature(clamp)]\n #![feature(collections_range)]\n #![feature(compiler_builtins_lib)]\n #![feature(const_fn)]"}]}