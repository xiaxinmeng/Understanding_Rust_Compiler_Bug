{"sha": "3cfb9915fcf97ac3f312d2277193d2c2cf934057", "node_id": "C_kwDOAAsO6NoAKDNjZmI5OTE1ZmNmOTdhYzNmMzEyZDIyNzcxOTNkMmMyY2Y5MzQwNTc", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-08-31T12:45:26Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-09-01T01:37:44Z"}, "message": "Add a protector test that demonstrates the base tag diagnostic", "tree": {"sha": "1805542c5c5a84056b0c4c953b9580a29a7796ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1805542c5c5a84056b0c4c953b9580a29a7796ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cfb9915fcf97ac3f312d2277193d2c2cf934057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cfb9915fcf97ac3f312d2277193d2c2cf934057", "html_url": "https://github.com/rust-lang/rust/commit/3cfb9915fcf97ac3f312d2277193d2c2cf934057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cfb9915fcf97ac3f312d2277193d2c2cf934057/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da5f76a92584b2af13d0382da41119c88bdb521", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da5f76a92584b2af13d0382da41119c88bdb521", "html_url": "https://github.com/rust-lang/rust/commit/0da5f76a92584b2af13d0382da41119c88bdb521"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "461715cedd8fb46ba7e9dc06c58095d19b3b58ce", "filename": "src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cfb9915fcf97ac3f312d2277193d2c2cf934057/src%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cfb9915fcf97ac3f312d2277193d2c2cf934057/src%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fdiagnostics.rs?ref=3cfb9915fcf97ac3f312d2277193d2c2cf934057", "patch": "@@ -332,7 +332,7 @@ impl<'span, 'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'span, 'history, 'ecx, 'mir\n                 // this allocation.\n                 if self.history.base.0.tag() == tag {\n                     Some((\n-                        format!(\"{:?} was created here, as a base tag for {:?}\", tag, self.history.id),\n+                        format!(\"{:?} was created here, as the base tag for {:?}\", tag, self.history.id),\n                         self.history.base.1.data()\n                     ))\n                 } else {"}, {"sha": "634eb97217c6c7b9f4186abf4585f41be815b2ba", "filename": "tests/fail/stacked_borrows/invalidate_against_protector3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3cfb9915fcf97ac3f312d2277193d2c2cf934057/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cfb9915fcf97ac3f312d2277193d2c2cf934057/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector3.rs?ref=3cfb9915fcf97ac3f312d2277193d2c2cf934057", "patch": "@@ -0,0 +1,15 @@\n+use std::alloc::{alloc, Layout};\n+\n+fn inner(x: *mut i32, _y: &i32) {\n+    // If `x` and `y` alias, retagging is fine with this... but we really\n+    // shouldn't be allowed to write to `x` at all because `y` was assumed to be\n+    // immutable for the duration of this call.\n+    unsafe { *x = 0 }; //~ ERROR: protect\n+}\n+\n+fn main() {\n+    unsafe {\n+        let ptr = alloc(Layout::for_value(&0i32)) as *mut i32;\n+        inner(ptr, &*ptr);\n+    };\n+}"}, {"sha": "afda15ea160e29f54c1897b5b80e1d82042d7ebc", "filename": "tests/fail/stacked_borrows/invalidate_against_protector3.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3cfb9915fcf97ac3f312d2277193d2c2cf934057/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cfb9915fcf97ac3f312d2277193d2c2cf934057/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector3.stderr?ref=3cfb9915fcf97ac3f312d2277193d2c2cf934057", "patch": "@@ -0,0 +1,30 @@\n+error: Undefined Behavior: not granting access to tag <TAG> because that would remove [SharedReadOnly for <TAG>] which is protected because it is an argument of call ID\n+  --> $DIR/invalidate_against_protector3.rs:LL:CC\n+   |\n+LL |     unsafe { *x = 0 };\n+   |              ^^^^^^ not granting access to tag <TAG> because that would remove [SharedReadOnly for <TAG>] which is protected because it is an argument of call ID\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created here, as the base tag for ALLOC\n+  --> $DIR/invalidate_against_protector3.rs:LL:CC\n+   |\n+LL |         let ptr = alloc(Layout::for_value(&0i32)) as *mut i32;\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: <TAG> is this argument\n+  --> $DIR/invalidate_against_protector3.rs:LL:CC\n+   |\n+LL | fn inner(x: *mut i32, _y: &i32) {\n+   |                       ^^\n+   = note: BACKTRACE:\n+   = note: inside `inner` at $DIR/invalidate_against_protector3.rs:LL:CC\n+note: inside `main` at $DIR/invalidate_against_protector3.rs:LL:CC\n+  --> $DIR/invalidate_against_protector3.rs:LL:CC\n+   |\n+LL |         inner(ptr, &*ptr);\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}]}