{"sha": "3aa6fe376d776aa62a89d7b7ef4929eda51ce034", "node_id": "C_kwDOAAsO6NoAKDNhYTZmZTM3NmQ3NzZhYTYyYTg5ZDdiN2VmNDkyOWVkYTUxY2UwMzQ", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2022-08-23T23:21:40Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2022-08-23T23:21:40Z"}, "message": "Remove a packing branch from `fmt::builders::PadAdapter`", "tree": {"sha": "f203cf41705279f6db65e4e4f00c0115caa3c7e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f203cf41705279f6db65e4e4f00c0115caa3c7e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aa6fe376d776aa62a89d7b7ef4929eda51ce034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa6fe376d776aa62a89d7b7ef4929eda51ce034", "html_url": "https://github.com/rust-lang/rust/commit/3aa6fe376d776aa62a89d7b7ef4929eda51ce034", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aa6fe376d776aa62a89d7b7ef4929eda51ce034/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "060e47f74a91b28c3db28d80a6a9d6841ca51026", "url": "https://api.github.com/repos/rust-lang/rust/commits/060e47f74a91b28c3db28d80a6a9d6841ca51026", "html_url": "https://github.com/rust-lang/rust/commit/060e47f74a91b28c3db28d80a6a9d6841ca51026"}], "stats": {"total": 18, "additions": 4, "deletions": 14}, "files": [{"sha": "7da49b04aaae99cd51f8c48cc6a15296b7283061", "filename": "library/core/src/fmt/builders.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3aa6fe376d776aa62a89d7b7ef4929eda51ce034/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa6fe376d776aa62a89d7b7ef4929eda51ce034/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs?ref=3aa6fe376d776aa62a89d7b7ef4929eda51ce034", "patch": "@@ -28,24 +28,14 @@ impl<'buf, 'state> PadAdapter<'buf, 'state> {\n }\n \n impl fmt::Write for PadAdapter<'_, '_> {\n-    fn write_str(&mut self, mut s: &str) -> fmt::Result {\n-        while !s.is_empty() {\n+    fn write_str(&mut self, s: &str) -> fmt::Result {\n+        for s in s.split_inclusive('\\n') {\n             if self.state.on_newline {\n                 self.buf.write_str(\"    \")?;\n             }\n \n-            let split = match s.find('\\n') {\n-                Some(pos) => {\n-                    self.state.on_newline = true;\n-                    pos + 1\n-                }\n-                None => {\n-                    self.state.on_newline = false;\n-                    s.len()\n-                }\n-            };\n-            self.buf.write_str(&s[..split])?;\n-            s = &s[split..];\n+            self.state.on_newline = s.ends_with('\\n');\n+            self.buf.write_str(s)?;\n         }\n \n         Ok(())"}]}