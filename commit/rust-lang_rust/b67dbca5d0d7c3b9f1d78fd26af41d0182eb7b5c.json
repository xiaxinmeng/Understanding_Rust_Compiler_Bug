{"sha": "b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2N2RiY2E1ZDBkN2MzYjlmMWQ3OGZkMjZhZjQxZDAxODJlYjdiNWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-28T10:09:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-28T10:09:11Z"}, "message": "Auto merge of #1271 - RalfJung:env-clean, r=RalfJung\n\nenv shim: make sure we clean up all the memory we allocate\n\n`Machine` memory is not leak-checked, so if we forgot to deallocate part of the env shim memory, we wouldn't even notice. Thus add a dedicated memory kind that is leak-checked.", "tree": {"sha": "c9bbeeb6d4dbc026b502814bd2b1d9fe4e649ae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9bbeeb6d4dbc026b502814bd2b1d9fe4e649ae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c", "html_url": "https://github.com/rust-lang/rust/commit/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f274111113b3f89cdbc8d85cc30ae113300bc9bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f274111113b3f89cdbc8d85cc30ae113300bc9bc", "html_url": "https://github.com/rust-lang/rust/commit/f274111113b3f89cdbc8d85cc30ae113300bc9bc"}, {"sha": "204c13b8c724b208b8e26148ba21087b543e960b", "url": "https://api.github.com/repos/rust-lang/rust/commits/204c13b8c724b208b8e26148ba21087b543e960b", "html_url": "https://github.com/rust-lang/rust/commit/204c13b8c724b208b8e26148ba21087b543e960b"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "faf7f5532ccf4cbd106145db904da1ae5753927c", "filename": "src/eval.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c", "patch": "@@ -198,16 +198,21 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n \n     // Perform the main execution.\n     let res: InterpResult<'_, i64> = (|| {\n+        // Main loop.\n         while ecx.step()? {\n             ecx.process_diagnostics();\n         }\n         // Read the return code pointer *before* we run TLS destructors, to assert\n         // that it was written to by the time that `start` lang item returned.\n         let return_code = ecx.read_scalar(ret_place.into())?.not_undef()?.to_machine_isize(&ecx)?;\n+        // Global destructors.\n         ecx.run_tls_dtors()?;\n         Ok(return_code)\n     })();\n \n+    // Machine cleanup.\n+    EnvVars::cleanup(&mut ecx).unwrap();\n+\n     // Process the result.\n     match res {\n         Ok(return_code) => {"}, {"sha": "0d93becb44825a0076061d3257cfb2458011b739", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c", "patch": "@@ -2,6 +2,8 @@\n #![feature(option_expect_none, option_unwrap_none)]\n #![feature(map_first_last)]\n #![feature(never_type)]\n+#![feature(or_patterns)]\n+\n #![warn(rust_2018_idioms)]\n #![allow(clippy::cast_lossless)]\n "}, {"sha": "f88210f30e8c68e609dcb81f7b4fa3df2e358ea5", "filename": "src/machine.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c", "patch": "@@ -48,9 +48,13 @@ pub enum MiriMemoryKind {\n     C,\n     /// Windows `HeapAlloc` memory.\n     WinHeap,\n-    /// Memory for env vars and args, errno, extern statics and other parts of the machine-managed environment.\n+    /// Memory for args, errno, extern statics and other parts of the machine-managed environment.\n+    /// This memory may leak.\n     Machine,\n+    /// Memory for env vars. Separate from `Machine` because we clean it up and leak-check it.\n+    Env,\n     /// Globals copied from `tcx`.\n+    /// This memory may leak.\n     Global,\n }\n \n@@ -498,7 +502,7 @@ impl MayLeak for MiriMemoryKind {\n     fn may_leak(self) -> bool {\n         use self::MiriMemoryKind::*;\n         match self {\n-            Rust | C | WinHeap => false,\n+            Rust | C | WinHeap | Env => false,\n             Machine | Global => true,\n         }\n     }"}, {"sha": "6cde82903bccea56a3b3eb27d4a475c0a5737de0", "filename": "src/shims/env.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c", "patch": "@@ -46,6 +46,20 @@ impl<'tcx> EnvVars<'tcx> {\n         }\n         ecx.update_environ()\n     }\n+\n+    pub(crate) fn cleanup<'mir>(\n+        ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+    ) -> InterpResult<'tcx> {\n+        // Deallocate individual env vars.\n+        for (_name, ptr) in ecx.machine.env_vars.map.drain() {\n+            ecx.memory.deallocate(ptr, None, MiriMemoryKind::Env.into())?;\n+        }\n+        // Deallocate environ var list.\n+        let environ = ecx.machine.env_vars.environ.take().unwrap();\n+        let old_vars_ptr = ecx.read_scalar(environ.into())?.not_undef()?;\n+        ecx.memory.deallocate(ecx.force_ptr(old_vars_ptr)?, None, MiriMemoryKind::Env.into())?;\n+        Ok(())\n+    }\n }\n \n fn alloc_env_var_as_c_str<'mir, 'tcx>(\n@@ -56,7 +70,7 @@ fn alloc_env_var_as_c_str<'mir, 'tcx>(\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n     name_osstring.push(value);\n-    Ok(ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into()))\n+    Ok(ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Env.into()))\n }\n \n fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n@@ -67,7 +81,7 @@ fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n     name_osstring.push(value);\n-    Ok(ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into()))\n+    Ok(ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Env.into()))\n }\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -146,7 +160,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         // Allocate environment block & Store environment variables to environment block.\n         // Final null terminator(block terminator) is added by `alloc_os_str_to_wide_str`.\n-        // FIXME: MemoryKind should be `Machine`, blocked on https://github.com/rust-lang/rust/pull/70479.\n+        // FIXME: MemoryKind should be `Env`, blocked on https://github.com/rust-lang/rust/pull/70479.\n         let envblock_ptr = this.alloc_os_str_as_wide_str(&env_vars, MiriMemoryKind::WinHeap.into());\n         // If the function succeeds, the return value is a pointer to the environment block of the current process.\n         Ok(envblock_ptr.into())\n@@ -158,7 +172,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.assert_target_os(\"windows\", \"FreeEnvironmentStringsW\");\n \n         let env_block_ptr = this.read_scalar(env_block_op)?.not_undef()?;\n-        // FIXME: MemoryKind should be `Machine`, blocked on https://github.com/rust-lang/rust/pull/70479.\n+        // FIXME: MemoryKind should be `Env`, blocked on https://github.com/rust-lang/rust/pull/70479.\n         let result = this.memory.deallocate(this.force_ptr(env_block_ptr)?, None, MiriMemoryKind::WinHeap.into());\n         // If the function succeeds, the return value is nonzero.\n         Ok(result.is_ok() as i32)\n@@ -188,7 +202,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let var_ptr = alloc_env_var_as_c_str(&name, &value, &mut this)?;\n             if let Some(var) = this.machine.env_vars.map.insert(name, var_ptr) {\n                 this.memory\n-                    .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n+                    .deallocate(var, None, MiriMemoryKind::Env.into())?;\n             }\n             this.update_environ()?;\n             Ok(0) // return zero on success\n@@ -225,7 +239,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         } else if this.is_null(value_ptr)? {\n             // Delete environment variable `{name}`\n             if let Some(var) = this.machine.env_vars.map.remove(&name) {\n-                this.memory.deallocate(var, None, MiriMemoryKind::Machine.into())?;\n+                this.memory.deallocate(var, None, MiriMemoryKind::Env.into())?;\n                 this.update_environ()?;\n             }\n             Ok(1) // return non-zero on success\n@@ -234,7 +248,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let var_ptr = alloc_env_var_as_wide_str(&name, &value, &mut this)?;\n             if let Some(var) = this.machine.env_vars.map.insert(name, var_ptr) {\n                 this.memory\n-                    .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n+                    .deallocate(var, None, MiriMemoryKind::Env.into())?;\n             }\n             this.update_environ()?;\n             Ok(1) // return non-zero on success\n@@ -257,7 +271,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some(old) = success {\n             if let Some(var) = old {\n                 this.memory\n-                    .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n+                    .deallocate(var, None, MiriMemoryKind::Env.into())?;\n             }\n             this.update_environ()?;\n             Ok(0)\n@@ -314,12 +328,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// The first time it gets called, also initializes `extra.environ`.\n     fn update_environ(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        // Deallocate the old environ value, if any.\n+        // Deallocate the old environ list, if any.\n         if let Some(environ) = this.machine.env_vars.environ {\n             let old_vars_ptr = this.read_scalar(environ.into())?.not_undef()?;\n-            this.memory.deallocate(this.force_ptr(old_vars_ptr)?, None, MiriMemoryKind::Machine.into())?;\n+            this.memory.deallocate(this.force_ptr(old_vars_ptr)?, None, MiriMemoryKind::Env.into())?;\n         } else {\n             // No `environ` allocated yet, let's do that.\n+            // This is memory backing an extern static, hence `Machine`, not `Env`.\n             let layout = this.layout_of(this.tcx.types.usize)?;\n             let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n             this.write_scalar(Scalar::from_machine_usize(0, &*this.tcx), place.into())?;\n@@ -334,7 +349,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let tcx = this.tcx;\n         let vars_layout =\n             this.layout_of(tcx.mk_array(tcx.types.usize, u64::try_from(vars.len()).unwrap()))?;\n-        let vars_place = this.allocate(vars_layout, MiriMemoryKind::Machine.into());\n+        let vars_place = this.allocate(vars_layout, MiriMemoryKind::Env.into());\n         for (idx, var) in vars.into_iter().enumerate() {\n             let place = this.mplace_field(vars_place, idx)?;\n             this.write_scalar(var, place.into())?;"}, {"sha": "c130abf0576be7da1d5eb53fb8a1d9be4cf2a341", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=b67dbca5d0d7c3b9f1d78fd26af41d0182eb7b5c", "patch": "@@ -460,8 +460,10 @@ impl Stacks {\n             // Global memory can be referenced by global pointers from `tcx`.\n             // Thus we call `global_base_ptr` such that the global pointers get the same tag\n             // as what we use here.\n+            // `Machine` is used for extern statics, and thus must also be listed here.\n+            // `Env` we list because we can get away with precise tracking there.\n             // The base pointer is not unique, so the base permission is `SharedReadWrite`.\n-            MemoryKind::Machine(MiriMemoryKind::Global) | MemoryKind::Machine(MiriMemoryKind::Machine) =>\n+            MemoryKind::Machine(MiriMemoryKind::Global | MiriMemoryKind::Machine | MiriMemoryKind::Env) =>\n                 (extra.borrow_mut().global_base_ptr(id), Permission::SharedReadWrite),\n             // Everything else we handle entirely untagged for now.\n             // FIXME: experiment with more precise tracking."}]}