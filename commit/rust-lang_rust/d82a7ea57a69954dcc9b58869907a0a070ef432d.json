{"sha": "d82a7ea57a69954dcc9b58869907a0a070ef432d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MmE3ZWE1N2E2OTk1NGRjYzliNTg4Njk5MDdhMGEwNzBlZjQzMmQ=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-16T01:38:03Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-16T01:41:55Z"}, "message": "Move ToString to collections::string\n\nThis also impls `FormatWriter` for `Vec<u8>`", "tree": {"sha": "f0d43381cfe3c620b77652a0424b5e7898f39cad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0d43381cfe3c620b77652a0424b5e7898f39cad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d82a7ea57a69954dcc9b58869907a0a070ef432d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d82a7ea57a69954dcc9b58869907a0a070ef432d", "html_url": "https://github.com/rust-lang/rust/commit/d82a7ea57a69954dcc9b58869907a0a070ef432d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d82a7ea57a69954dcc9b58869907a0a070ef432d/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59abf75d9e810f2a88c6dd0f37cfcbd6989a6446", "url": "https://api.github.com/repos/rust-lang/rust/commits/59abf75d9e810f2a88c6dd0f37cfcbd6989a6446", "html_url": "https://github.com/rust-lang/rust/commit/59abf75d9e810f2a88c6dd0f37cfcbd6989a6446"}], "stats": {"total": 123, "additions": 51, "deletions": 72}, "files": [{"sha": "3c75198a368bffa4a72c02b9d19d3219d12785b4", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=d82a7ea57a69954dcc9b58869907a0a070ef432d", "patch": "@@ -808,6 +808,20 @@ pub trait IntoString {\n     fn into_string(self) -> String;\n }\n \n+/// A generic trait for converting a value to a string\n+pub trait ToString {\n+    /// Converts the value of `self` to an owned string\n+    fn to_string(&self) -> String;\n+}\n+\n+impl<T: fmt::Show> ToString for T {\n+    fn to_string(&self) -> String {\n+        let mut buf = Vec::<u8>::new();\n+        let _ = format_args!(|args| fmt::write(&mut buf, args), \"{}\", self);\n+        String::from_utf8(buf).unwrap()\n+    }\n+}\n+\n /// Unsafe operations\n #[unstable = \"waiting on raw module conventions\"]\n pub mod raw {\n@@ -873,7 +887,7 @@ mod tests {\n \n     use str;\n     use str::{Str, StrPrelude, Owned};\n-    use super::{as_string, String};\n+    use super::{as_string, String, ToString};\n     use vec::Vec;\n     use slice::CloneSliceAllocPrelude;\n \n@@ -1177,6 +1191,28 @@ mod tests {\n         assert_eq!(\"oob\", s[1..4]);\n     }\n \n+    #[test]\n+    fn test_simple_types() {\n+        assert_eq!(1i.to_string(), \"1\".to_string());\n+        assert_eq!((-1i).to_string(), \"-1\".to_string());\n+        assert_eq!(200u.to_string(), \"200\".to_string());\n+        assert_eq!(2u8.to_string(), \"2\".to_string());\n+        assert_eq!(true.to_string(), \"true\".to_string());\n+        assert_eq!(false.to_string(), \"false\".to_string());\n+        assert_eq!(().to_string(), \"()\".to_string());\n+        assert_eq!((\"hi\".to_string()).to_string(), \"hi\".to_string());\n+    }\n+\n+    #[test]\n+    fn test_vectors() {\n+        let x: Vec<int> = vec![];\n+        assert_eq!(x.to_string(), \"[]\".to_string());\n+        assert_eq!((vec![1i]).to_string(), \"[1]\".to_string());\n+        assert_eq!((vec![1i, 2, 3]).to_string(), \"[1, 2, 3]\".to_string());\n+        assert!((vec![vec![], vec![1i], vec![1i, 1]]).to_string() ==\n+               \"[[], [1], [1, 1]]\".to_string());\n+    }\n+\n     #[bench]\n     fn bench_with_capacity(b: &mut Bencher) {\n         b.iter(|| {"}, {"sha": "b94c74f6d19eae447ddf5b1ef149eb86deb103e3", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=d82a7ea57a69954dcc9b58869907a0a070ef432d", "patch": "@@ -1653,6 +1653,13 @@ impl<T> Vec<T> {\n     }\n }\n \n+impl<'a> fmt::FormatWriter for Vec<u8> {\n+    fn write(&mut self, buf: &[u8]) -> fmt::Result {\n+        self.push_all(buf);\n+        Ok(())\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     extern crate test;"}, {"sha": "612613134d448e95d3517ea40f21be39351a1e2c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d82a7ea57a69954dcc9b58869907a0a070ef432d", "patch": "@@ -220,7 +220,6 @@ pub mod time;\n \n pub mod error;\n pub mod num;\n-pub mod to_string;\n \n /* Common data structures */\n "}, {"sha": "d1a89d72621a7a9f8ba27729a35d35260d7e271c", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=d82a7ea57a69954dcc9b58869907a0a070ef432d", "patch": "@@ -423,7 +423,7 @@ static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n \n #[cfg(test)]\n mod tests {\n-    use to_string::ToString;\n+    use string::ToString;\n \n     #[test]\n     fn test_int_to_str_overflow() {"}, {"sha": "23e57a028de27efee45620e6b4a3ab6cda699a85", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=d82a7ea57a69954dcc9b58869907a0a070ef432d", "patch": "@@ -51,8 +51,7 @@ use result::{Err, Ok, Result};\n use slice::{AsSlice, SlicePrelude, PartialEqSlicePrelude};\n use slice::CloneSliceAllocPrelude;\n use str::{Str, StrPrelude, StrAllocating};\n-use string::String;\n-use to_string::ToString;\n+use string::{String, ToString};\n use sync::atomic::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n use vec::Vec;\n "}, {"sha": "c0197fa53cc7a4fef5e2eddef71a1461ec817b24", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=d82a7ea57a69954dcc9b58869907a0a070ef432d", "patch": "@@ -76,14 +76,13 @@\n #[doc(no_inline)] pub use io::{Buffer, Writer, Reader, Seek};\n #[doc(no_inline)] pub use str::{Str, StrVector, StrPrelude};\n #[doc(no_inline)] pub use str::{IntoMaybeOwned, StrAllocating, UnicodeStrPrelude};\n-#[doc(no_inline)] pub use to_string::ToString;\n #[doc(no_inline)] pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n #[doc(no_inline)] pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n #[doc(no_inline)] pub use tuple::{Tuple9, Tuple10, Tuple11, Tuple12};\n #[doc(no_inline)] pub use slice::{SlicePrelude, AsSlice, CloneSlicePrelude};\n #[doc(no_inline)] pub use slice::{VectorVector, PartialEqSlicePrelude, OrdSlicePrelude};\n #[doc(no_inline)] pub use slice::{CloneSliceAllocPrelude, OrdSliceAllocPrelude, SliceAllocPrelude};\n-#[doc(no_inline)] pub use string::{IntoString, String};\n+#[doc(no_inline)] pub use string::{IntoString, String, ToString};\n #[doc(no_inline)] pub use vec::Vec;\n \n // Reexported runtime types"}, {"sha": "c7e31dae3d459c5d0dab78399d6fba4c29bac674", "filename": "src/libstd/task.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=d82a7ea57a69954dcc9b58869907a0a070ef432d", "patch": "@@ -105,9 +105,8 @@ use rt::local::Local;\n use rt::task;\n use rt::task::Task;\n use str::{Str, SendStr, IntoMaybeOwned};\n-use string::String;\n+use string::{String, ToString};\n use sync::Future;\n-use to_string::ToString;\n \n /// A means of spawning a task\n pub trait Spawner {"}, {"sha": "83340c9faac22d5b9d18bf5eff5291e32815a54a", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=d82a7ea57a69954dcc9b58869907a0a070ef432d", "patch": "@@ -388,7 +388,7 @@ mod tests {\n     use super::{Duration, MIN, MAX};\n     use {i32, i64};\n     use option::{Some, None};\n-    use to_string::ToString;\n+    use string::ToString;\n \n     #[test]\n     fn test_duration() {"}, {"sha": "327410b320db06f06d6538ce7cc095be76067bf9", "filename": "src/libstd/to_string.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/59abf75d9e810f2a88c6dd0f37cfcbd6989a6446/src%2Flibstd%2Fto_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59abf75d9e810f2a88c6dd0f37cfcbd6989a6446/src%2Flibstd%2Fto_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_string.rs?ref=59abf75d9e810f2a88c6dd0f37cfcbd6989a6446", "patch": "@@ -1,60 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n-\n-The `ToString` trait for converting to strings\n-\n-*/\n-\n-#![experimental]\n-\n-use fmt;\n-use string::String;\n-\n-/// A generic trait for converting a value to a string\n-pub trait ToString {\n-    /// Converts the value of `self` to an owned string\n-    fn to_string(&self) -> String;\n-}\n-\n-impl<T: fmt::Show> ToString for T {\n-    fn to_string(&self) -> String {\n-        format!(\"{}\", *self)\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use prelude::*;\n-    use super::*;\n-\n-    #[test]\n-    fn test_simple_types() {\n-        assert_eq!(1i.to_string(), \"1\".to_string());\n-        assert_eq!((-1i).to_string(), \"-1\".to_string());\n-        assert_eq!(200u.to_string(), \"200\".to_string());\n-        assert_eq!(2u8.to_string(), \"2\".to_string());\n-        assert_eq!(true.to_string(), \"true\".to_string());\n-        assert_eq!(false.to_string(), \"false\".to_string());\n-        assert_eq!(().to_string(), \"()\".to_string());\n-        assert_eq!((\"hi\".to_string()).to_string(), \"hi\".to_string());\n-    }\n-\n-    #[test]\n-    fn test_vectors() {\n-        let x: Vec<int> = vec![];\n-        assert_eq!(x.to_string(), \"[]\".to_string());\n-        assert_eq!((vec![1i]).to_string(), \"[1]\".to_string());\n-        assert_eq!((vec![1i, 2, 3]).to_string(), \"[1, 2, 3]\".to_string());\n-        assert!((vec![vec![], vec![1i], vec![1i, 1]]).to_string() ==\n-               \"[[], [1], [1, 1]]\".to_string());\n-    }\n-}"}, {"sha": "a041bbfe8ad92ed706707edbba9d3e746750f01c", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=d82a7ea57a69954dcc9b58869907a0a070ef432d", "patch": "@@ -11,7 +11,7 @@\n // aux-build:cci_class_cast.rs\n extern crate cci_class_cast;\n \n-use std::to_string::ToString;\n+use std::string::ToString;\n use cci_class_cast::kitty::cat;\n \n fn print_out(thing: Box<ToString>, expected: String) {"}, {"sha": "0d88141984750fb8e5362a9e725c503e16670075", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a7ea57a69954dcc9b58869907a0a070ef432d/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=d82a7ea57a69954dcc9b58869907a0a070ef432d", "patch": "@@ -11,7 +11,7 @@\n extern crate collections;\n \n use std::str::{SendStr, Owned, Slice};\n-use std::to_string::ToString;\n+use std::string::ToString;\n use self::collections::TreeMap;\n use std::option::Some;\n "}]}