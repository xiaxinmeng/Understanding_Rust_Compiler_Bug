{"sha": "75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZDFlMzAzYWYwNDc1OGMyNmUxYWVlNjNmMmYwYWZkNTNkZmQ2Zjg=", "commit": {"author": {"name": "0yoyoyo", "email": "60439919+0yoyoyo@users.noreply.github.com", "date": "2021-02-22T14:39:06Z"}, "committer": {"name": "0yoyoyo", "email": "60439919+0yoyoyo@users.noreply.github.com", "date": "2021-02-22T14:39:06Z"}, "message": "Update test cases", "tree": {"sha": "e8640abb43d0f6c7c111988d8b921c1b947bec96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8640abb43d0f6c7c111988d8b921c1b947bec96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "html_url": "https://github.com/rust-lang/rust/commit/75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/comments", "author": {"login": "0yoyoyo", "id": 60439919, "node_id": "MDQ6VXNlcjYwNDM5OTE5", "avatar_url": "https://avatars.githubusercontent.com/u/60439919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0yoyoyo", "html_url": "https://github.com/0yoyoyo", "followers_url": "https://api.github.com/users/0yoyoyo/followers", "following_url": "https://api.github.com/users/0yoyoyo/following{/other_user}", "gists_url": "https://api.github.com/users/0yoyoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/0yoyoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0yoyoyo/subscriptions", "organizations_url": "https://api.github.com/users/0yoyoyo/orgs", "repos_url": "https://api.github.com/users/0yoyoyo/repos", "events_url": "https://api.github.com/users/0yoyoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/0yoyoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "0yoyoyo", "id": 60439919, "node_id": "MDQ6VXNlcjYwNDM5OTE5", "avatar_url": "https://avatars.githubusercontent.com/u/60439919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0yoyoyo", "html_url": "https://github.com/0yoyoyo", "followers_url": "https://api.github.com/users/0yoyoyo/followers", "following_url": "https://api.github.com/users/0yoyoyo/following{/other_user}", "gists_url": "https://api.github.com/users/0yoyoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/0yoyoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0yoyoyo/subscriptions", "organizations_url": "https://api.github.com/users/0yoyoyo/orgs", "repos_url": "https://api.github.com/users/0yoyoyo/repos", "events_url": "https://api.github.com/users/0yoyoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/0yoyoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce1a521012017a352dc15ef1036b3dc56fa676ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1a521012017a352dc15ef1036b3dc56fa676ca", "html_url": "https://github.com/rust-lang/rust/commit/ce1a521012017a352dc15ef1036b3dc56fa676ca"}], "stats": {"total": 108, "additions": 54, "deletions": 54}, "files": [{"sha": "35bcf286c440fadbfec629278321c341725afff7", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for autoref due to conflictin\n LL |         self.a();\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 3:5...\n-  --> $DIR/issue-16683.rs:3:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 3:10...\n+  --> $DIR/issue-16683.rs:3:10\n    |\n LL |     fn b(&self) {\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/issue-16683.rs:4:9\n    |"}, {"sha": "995f5f1fc3de3bfb7f89300aac330673085bc626", "filename": "src/test/ui/issues/issue-17740.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr?ref=75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "patch": "@@ -6,11 +6,11 @@ LL |     fn bar(self: &mut Foo) {\n    |\n    = note: expected struct `Foo<'a>`\n               found struct `Foo<'_>`\n-note: the anonymous lifetime #2 defined on the method body at 6:5...\n-  --> $DIR/issue-17740.rs:6:5\n+note: the anonymous lifetime defined on the method body at 6:23...\n+  --> $DIR/issue-17740.rs:6:23\n    |\n LL |     fn bar(self: &mut Foo) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 5:7\n   --> $DIR/issue-17740.rs:5:7\n    |\n@@ -30,11 +30,11 @@ note: the lifetime `'a` as defined on the impl at 5:7...\n    |\n LL | impl <'a> Foo<'a>{\n    |       ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 6:5\n-  --> $DIR/issue-17740.rs:6:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 6:23\n+  --> $DIR/issue-17740.rs:6:23\n    |\n LL |     fn bar(self: &mut Foo) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "846e8939b53b80473833e0ab4ce55e1d00f88b7e", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for autoref due to conflictin\n LL |         self.foo();\n    |              ^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 6:5...\n-  --> $DIR/issue-17758.rs:6:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 6:12...\n+  --> $DIR/issue-17758.rs:6:12\n    |\n LL |     fn bar(&self) {\n-   |     ^^^^^^^^^^^^^\n+   |            ^^^^^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/issue-17758.rs:7:9\n    |"}, {"sha": "3c27f7058591c5618defc3b0786d9d6f08bf5aa6", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "patch": "@@ -6,11 +6,11 @@ LL |     fn say(self: &Pair<&str, isize>) {\n    |\n    = note: expected struct `Pair<&str, _>`\n               found struct `Pair<&str, _>`\n-note: the anonymous lifetime #2 defined on the method body at 8:5...\n-  --> $DIR/issue-17905-2.rs:8:5\n+note: the anonymous lifetime defined on the method body at 8:24...\n+  --> $DIR/issue-17905-2.rs:8:24\n    |\n LL |     fn say(self: &Pair<&str, isize>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^\n note: ...does not necessarily outlive the lifetime `'_` as defined on the impl at 5:5\n   --> $DIR/issue-17905-2.rs:5:5\n    |\n@@ -30,11 +30,11 @@ note: the lifetime `'_` as defined on the impl at 5:5...\n    |\n LL |     &str,\n    |     ^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 8:5\n-  --> $DIR/issue-17905-2.rs:8:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 8:24\n+  --> $DIR/issue-17905-2.rs:8:24\n    |\n LL |     fn say(self: &Pair<&str, isize>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e68482d1caf696db159003465d951dac2fddcc84", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 28:58...\n+  --> $DIR/issue-20831-debruijn.rs:28:58\n    |\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the impl at 26:6...\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |"}, {"sha": "80eecb42d1cef7fc988f10059d6915fc360f3ae7", "filename": "src/test/ui/issues/issue-27942.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr?ref=75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "patch": "@@ -6,11 +6,11 @@ LL |     fn select(&self) -> BufferViewHandle<R>;\n    |\n    = note: expected type `Resources<'_>`\n               found type `Resources<'a>`\n-note: the anonymous lifetime #1 defined on the method body at 5:5...\n-  --> $DIR/issue-27942.rs:5:5\n+note: the anonymous lifetime defined on the method body at 5:15...\n+  --> $DIR/issue-27942.rs:5:15\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the trait at 3:18\n   --> $DIR/issue-27942.rs:3:18\n    |\n@@ -30,11 +30,11 @@ note: the lifetime `'a` as defined on the trait at 3:18...\n    |\n LL | pub trait Buffer<'a, R: Resources<'a>> {\n    |                  ^^\n-note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 5:5\n-  --> $DIR/issue-27942.rs:5:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 5:15\n+  --> $DIR/issue-27942.rs:5:15\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "23bb12f942075fab0a3e05f56437039b4f54ceb8", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "patch": "@@ -9,11 +9,11 @@ note: ...the reference is valid for the lifetime `'_` as defined on the impl at\n    |\n LL | impl Foo<'_, '_> {\n    |          ^^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the method body at 13:5\n-  --> $DIR/issue-52742.rs:13:5\n+note: ...but the borrowed content is only valid for the anonymous lifetime defined on the method body at 13:31\n+  --> $DIR/issue-52742.rs:13:31\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "36721f923f7da7846172b8cc7f4fac579465c949", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` d\n LL |         Foo { bar }\n    |         ^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 8:5...\n-  --> $DIR/issue-55394.rs:8:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 8:17...\n+  --> $DIR/issue-55394.rs:8:17\n    |\n LL |     fn new(bar: &mut Bar) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/issue-55394.rs:9:15\n    |"}, {"sha": "6498ecfbe6f9b555d5a1d15e2a1a71b12313811a", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |         C { f: b }\n    |         ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 16:5...\n-  --> $DIR/type-alias-free-regions.rs:16:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 16:24...\n+  --> $DIR/type-alias-free-regions.rs:16:24\n    |\n LL |     fn from_box(b: Box<B>) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^\n note: ...so that the expression is assignable\n   --> $DIR/type-alias-free-regions.rs:17:16\n    |\n@@ -35,11 +35,11 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |         C { f: Box::new(b.0) }\n    |                ^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 26:5...\n-  --> $DIR/type-alias-free-regions.rs:26:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 26:23...\n+  --> $DIR/type-alias-free-regions.rs:26:23\n    |\n LL |     fn from_tuple(b: (B,)) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^\n note: ...so that the expression is assignable\n   --> $DIR/type-alias-free-regions.rs:27:25\n    |"}, {"sha": "95eb4d1f75b72ee8de7d2091b73a9e5f69cc5151", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr?ref=75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "patch": "@@ -6,11 +6,11 @@ LL |         self.f = b;\n    |\n    = note: expected struct `Box<Box<&'a isize>>`\n               found struct `Box<Box<&isize>>`\n-note: the anonymous lifetime #2 defined on the method body at 21:5...\n-  --> $DIR/regions-infer-paramd-indirect.rs:21:5\n+note: the anonymous lifetime defined on the method body at 21:36...\n+  --> $DIR/regions-infer-paramd-indirect.rs:21:36\n    |\n LL |     fn set_f_bad(&mut self, b: Box<B>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                    ^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 16:6\n   --> $DIR/regions-infer-paramd-indirect.rs:16:6\n    |"}, {"sha": "133ecab2296b747e0d9aba2f5e518f8bbfac7a65", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d1e303af04758c26e1aee63f2f0afd53dfd6f8/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "patch": "@@ -33,11 +33,11 @@ LL |     fn dummy2(self: &Bar<T>) {}\n    |\n    = note: expected reference `&'a Bar<T>`\n               found reference `&Bar<T>`\n-note: the anonymous lifetime #1 defined on the method body at 37:5...\n-  --> $DIR/ufcs-explicit-self-bad.rs:37:5\n+note: the anonymous lifetime defined on the method body at 37:21...\n+  --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 35:6\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n@@ -57,11 +57,11 @@ note: the lifetime `'a` as defined on the impl at 35:6...\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n-note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 37:5\n-  --> $DIR/ufcs-explicit-self-bad.rs:37:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 37:21\n+  --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^\n \n error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:39:21\n@@ -71,11 +71,11 @@ LL |     fn dummy3(self: &&Bar<T>) {}\n    |\n    = note: expected reference `&'a Bar<T>`\n               found reference `&Bar<T>`\n-note: the anonymous lifetime #2 defined on the method body at 39:5...\n-  --> $DIR/ufcs-explicit-self-bad.rs:39:5\n+note: the anonymous lifetime defined on the method body at 39:22...\n+  --> $DIR/ufcs-explicit-self-bad.rs:39:22\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 35:6\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n@@ -95,11 +95,11 @@ note: the lifetime `'a` as defined on the impl at 35:6...\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 39:5\n-  --> $DIR/ufcs-explicit-self-bad.rs:39:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 39:22\n+  --> $DIR/ufcs-explicit-self-bad.rs:39:22\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^\n \n error: aborting due to 7 previous errors\n "}]}