{"sha": "c5101b6dffd2c917e1670ee0d94a146cc075f956", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MTAxYjZkZmZkMmM5MTdlMTY3MGVlMGQ5NGExNDZjYzA3NWY5NTY=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2019-01-06T12:55:15Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2019-01-07T17:57:41Z"}, "message": "Revert \"Auto merge of #57101 - o01eg:fix-57014, r=alexcrichton\"\n\nThis reverts commit 68614265d312fc2cbe8a696f7dabb9416eb6f221, reversing\nchanges made to cae623c5ce12df8f237264d8f2c31fdaa664c382.\n\nShould fix tools on windows.\n\nReopens #57014", "tree": {"sha": "782f62abc46c50ac474eae8e1d4e03fca6349353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/782f62abc46c50ac474eae8e1d4e03fca6349353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5101b6dffd2c917e1670ee0d94a146cc075f956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5101b6dffd2c917e1670ee0d94a146cc075f956", "html_url": "https://github.com/rust-lang/rust/commit/c5101b6dffd2c917e1670ee0d94a146cc075f956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5101b6dffd2c917e1670ee0d94a146cc075f956/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "495fc5ee9dd00b02eb837256d98284f2f3acc61d", "url": "https://api.github.com/repos/rust-lang/rust/commits/495fc5ee9dd00b02eb837256d98284f2f3acc61d", "html_url": "https://github.com/rust-lang/rust/commit/495fc5ee9dd00b02eb837256d98284f2f3acc61d"}], "stats": {"total": 47, "additions": 21, "deletions": 26}, "files": [{"sha": "19f1c7a18fad14ebf0c4f2f2c2269cbff1de984c", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5101b6dffd2c917e1670ee0d94a146cc075f956/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5101b6dffd2c917e1670ee0d94a146cc075f956/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=c5101b6dffd2c917e1670ee0d94a146cc075f956", "patch": "@@ -114,13 +114,6 @@ pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n     sysroot.join(&relative_target_lib_path(sysroot, target_triple))\n }\n \n-pub fn target_lib_path(target_triple: &str) -> PathBuf {\n-    let mut p = PathBuf::from(RUST_LIB_DIR);\n-    p.push(target_triple);\n-    p.push(\"lib\");\n-    p\n-}\n-\n pub fn get_or_default_sysroot() -> PathBuf {\n     // Follow symlinks.  If the resolved path is relative, make it absolute.\n     fn canonicalize(path: Option<PathBuf>) -> Option<PathBuf> {"}, {"sha": "1ec14fbb06c794ef5c092be50ba5c5dee0cc2057", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c5101b6dffd2c917e1670ee0d94a146cc075f956/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5101b6dffd2c917e1670ee0d94a146cc075f956/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c5101b6dffd2c917e1670ee0d94a146cc075f956", "patch": "@@ -269,35 +269,37 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n     }\n \n     let target = session::config::host_triple();\n-    // get target libdir path based on executable binary path\n-    let sysroot = filesearch::get_or_default_sysroot();\n-    let mut libdir_candidates = vec![filesearch::make_target_lib_path(&sysroot, &target)];\n+    let mut sysroot_candidates = vec![filesearch::get_or_default_sysroot()];\n     let path = current_dll_path()\n         .and_then(|s| s.canonicalize().ok());\n     if let Some(dll) = path {\n-        // use `parent` once to chop off the file name\n-        if let Some(path) = dll.parent() {\n+        // use `parent` twice to chop off the file name and then also the\n+        // directory containing the dll which should be either `lib` or `bin`.\n+        if let Some(path) = dll.parent().and_then(|p| p.parent()) {\n             // The original `path` pointed at the `rustc_driver` crate's dll.\n             // Now that dll should only be in one of two locations. The first is\n-            // in the compiler's libdir, for example `$sysroot/$libdir/*.dll`. The\n+            // in the compiler's libdir, for example `$sysroot/lib/*.dll`. The\n             // other is the target's libdir, for example\n-            // `$sysroot/$libdir/rustlib/$target/lib/*.dll`.\n+            // `$sysroot/lib/rustlib/$target/lib/*.dll`.\n             //\n             // We don't know which, so let's assume that if our `path` above\n-            // doesn't end in `$target` we *could* be in the main libdir, and always\n-            // assume that we may be in the target libdir.\n-            libdir_candidates.push(path.to_owned());\n-\n-            if !path.parent().map_or(false, |p| p.ends_with(target)) {\n-                libdir_candidates.push(path.join(filesearch::target_lib_path(target)));\n+            // ends in `$target` we *could* be in the target libdir, and always\n+            // assume that we may be in the main libdir.\n+            sysroot_candidates.push(path.to_owned());\n+\n+            if path.ends_with(target) {\n+                sysroot_candidates.extend(path.parent() // chop off `$target`\n+                    .and_then(|p| p.parent())           // chop off `rustlib`\n+                    .and_then(|p| p.parent())           // chop off `lib`\n+                    .map(|s| s.to_owned()));\n             }\n         }\n     }\n \n-    let sysroot = libdir_candidates.iter()\n-        .map(|libdir| {\n-            debug!(\"Trying target libdir: {}\", libdir.display());\n-            libdir.with_file_name(\n+    let sysroot = sysroot_candidates.iter()\n+        .map(|sysroot| {\n+            let libdir = filesearch::relative_target_lib_path(&sysroot, &target);\n+            sysroot.join(libdir).with_file_name(\n                 option_env!(\"CFG_CODEGEN_BACKENDS_DIR\").unwrap_or(\"codegen-backends\"))\n         })\n         .filter(|f| {\n@@ -306,12 +308,12 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n         })\n         .next();\n     let sysroot = sysroot.unwrap_or_else(|| {\n-        let candidates = libdir_candidates.iter()\n+        let candidates = sysroot_candidates.iter()\n             .map(|p| p.display().to_string())\n             .collect::<Vec<_>>()\n             .join(\"\\n* \");\n         let err = format!(\"failed to find a `codegen-backends` folder \\\n-                           in the libdir candidates:\\n* {}\", candidates);\n+                           in the sysroot candidates:\\n* {}\", candidates);\n         early_error(ErrorOutputType::default(), &err);\n     });\n     info!(\"probing {} for a codegen backend\", sysroot.display());"}]}