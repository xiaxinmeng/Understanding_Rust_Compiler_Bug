{"sha": "654d045b6fbf6cab587437f8985fbf7d74c5134c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NGQwNDViNmZiZjZjYWI1ODc0MzdmODk4NWZiZjdkNzRjNTEzNGM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-26T12:10:46Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-28T19:19:27Z"}, "message": "Fix lint findings in librustc_traits", "tree": {"sha": "886b22077b9866dafe274bf5a50718a129c24ecd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/886b22077b9866dafe274bf5a50718a129c24ecd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/654d045b6fbf6cab587437f8985fbf7d74c5134c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlzF/L8ACgkQaTCGhp1Q\nZjdXxw/+I2tTflwAwGhhrV+u70NQjFM+VYlHqScr2vpJ2jf80OzHHmSBPNqdBjt7\nF1MuH/xhxaP8/IsNdWjOmcJqRiogm5fJuONsxeunFIRYu9pTb4MjFNCjyWxVXMPC\ne2AfoSS+tFZVcoB67EyM3vG3f23CEDDhpXM4gVBkwGo29ey0alMk9Wd1Ip+M8URh\nIl5azccbJhPqnybmwSlITpFkhLecWnW+elaVH3eLVyxdsJz/3oSYNdIdw7eM+tRa\nIaB1axxWrDOQKBajzgZwLr1KVFW2xPBZiD4XDDuN7jjd8NevpkLCecwvrPYFjnFo\nFzIH5jtZ/1BdNl9lzM7Fk1SVbIGeuhAaXWgSnuMLKFxdbspo1dmQa4EfqaD6M0dv\n7jf3tCLFD5VtXLZ3I6P8zJFadvn1d2pbQUUTi7GFSNuFKP8bNNpCm8xcR/wlNyyn\nWxWn6Opo62V+mNNs4+hn0kaQjNQbt+X0lc6n8TlZolpSexvXHxnLGqX1Azhobmmx\n0A3v86Iz0bW/Pq3+GHXLaQhzF6YD5KnAZLdDt+TcUQ6mNFIAi+cJcAiwWBpAN+pa\n7TU9Pxwspl/Q8pvjP8G50D86k8rqaBpKIjP6if8e+gPPMUa5HMPNgp7dWexsn/Ju\n2GMNMtBtBUoL7ktRJQiGTXNbvpBFX9sCR46dS9Fp2LVqVChrJdk=\n=lAO9\n-----END PGP SIGNATURE-----", "payload": "tree 886b22077b9866dafe274bf5a50718a129c24ecd\nparent 1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55\nauthor flip1995 <hello@philkrones.com> 1556280646 +0200\ncommitter flip1995 <hello@philkrones.com> 1556479167 +0200\n\nFix lint findings in librustc_traits\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/654d045b6fbf6cab587437f8985fbf7d74c5134c", "html_url": "https://github.com/rust-lang/rust/commit/654d045b6fbf6cab587437f8985fbf7d74c5134c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/654d045b6fbf6cab587437f8985fbf7d74c5134c/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55", "url": "https://api.github.com/repos/rust-lang/rust/commits/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55", "html_url": "https://github.com/rust-lang/rust/commit/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "bd72a049b772ed7e7edd11118987ac00956cbff4", "filename": "src/librustc_traits/chalk_context/program_clauses/builtin.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/654d045b6fbf6cab587437f8985fbf7d74c5134c/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654d045b6fbf6cab587437f8985fbf7d74c5134c/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs?ref=654d045b6fbf6cab587437f8985fbf7d74c5134c", "patch": "@@ -4,7 +4,7 @@ use rustc::traits::{\n     ProgramClause,\n     ProgramClauseCategory,\n };\n-use rustc::ty;\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, InternalSubsts, Subst};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -15,8 +15,8 @@ use crate::generic_types;\n /// `Implemented(ty: Trait) :- Implemented(nested: Trait)...`\n /// where `Trait` is specified by `trait_def_id`.\n fn builtin_impl_clause(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n-    ty: ty::Ty<'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n+    ty: Ty<'tcx>,\n     nested: &[Kind<'tcx>],\n     trait_def_id: DefId\n ) -> ProgramClause<'tcx> {\n@@ -43,10 +43,10 @@ fn builtin_impl_clause(\n }\n \n crate fn assemble_builtin_unsize_impls<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     unsize_def_id: DefId,\n-    source: ty::Ty<'tcx>,\n-    target: ty::Ty<'tcx>,\n+    source: Ty<'tcx>,\n+    target: Ty<'tcx>,\n     clauses: &mut Vec<Clause<'tcx>>\n ) {\n     match (&source.sty, &target.sty) {\n@@ -119,12 +119,12 @@ crate fn assemble_builtin_unsize_impls<'tcx>(\n }\n \n crate fn assemble_builtin_sized_impls<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     sized_def_id: DefId,\n-    ty: ty::Ty<'tcx>,\n+    ty: Ty<'tcx>,\n     clauses: &mut Vec<Clause<'tcx>>\n ) {\n-    let mut push_builtin_impl = |ty: ty::Ty<'tcx>, nested: &[Kind<'tcx>]| {\n+    let mut push_builtin_impl = |ty: Ty<'tcx>, nested: &[Kind<'tcx>]| {\n         let clause = builtin_impl_clause(tcx, ty, nested, sized_def_id);\n         // Bind innermost bound vars that may exist in `ty` and `nested`.\n         clauses.push(Clause::ForAll(ty::Binder::bind(clause)));\n@@ -223,12 +223,12 @@ crate fn assemble_builtin_sized_impls<'tcx>(\n }\n \n crate fn assemble_builtin_copy_clone_impls<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     trait_def_id: DefId,\n-    ty: ty::Ty<'tcx>,\n+    ty: Ty<'tcx>,\n     clauses: &mut Vec<Clause<'tcx>>\n ) {\n-    let mut push_builtin_impl = |ty: ty::Ty<'tcx>, nested: &[Kind<'tcx>]| {\n+    let mut push_builtin_impl = |ty: Ty<'tcx>, nested: &[Kind<'tcx>]| {\n         let clause = builtin_impl_clause(tcx, ty, nested, trait_def_id);\n         // Bind innermost bound vars that may exist in `ty` and `nested`.\n         clauses.push(Clause::ForAll(ty::Binder::bind(clause)));"}, {"sha": "7ce450c7039a0c39640f0a1c75d98e37ae5656f2", "filename": "src/librustc_traits/chalk_context/program_clauses/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/654d045b6fbf6cab587437f8985fbf7d74c5134c/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654d045b6fbf6cab587437f8985fbf7d74c5134c/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs?ref=654d045b6fbf6cab587437f8985fbf7d74c5134c", "patch": "@@ -10,7 +10,7 @@ use rustc::traits::{\n     ProgramClauseCategory,\n     Environment,\n };\n-use rustc::ty;\n+use rustc::ty::{self, TyCtxt};\n use rustc::hir::def_id::DefId;\n use super::ChalkInferenceContext;\n use std::iter;\n@@ -19,7 +19,7 @@ use self::primitive::*;\n use self::builtin::*;\n \n fn assemble_clauses_from_impls<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     trait_def_id: DefId,\n     clauses: &mut Vec<Clause<'tcx>>\n ) {\n@@ -33,7 +33,7 @@ fn assemble_clauses_from_impls<'tcx>(\n }\n \n fn assemble_clauses_from_assoc_ty_values<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     trait_def_id: DefId,\n     clauses: &mut Vec<Clause<'tcx>>\n ) {"}, {"sha": "c37c8faaacde49b00a8a3ad22f04144e3488c6d7", "filename": "src/librustc_traits/chalk_context/program_clauses/primitive.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/654d045b6fbf6cab587437f8985fbf7d74c5134c/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654d045b6fbf6cab587437f8985fbf7d74c5134c/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs?ref=654d045b6fbf6cab587437f8985fbf7d74c5134c", "patch": "@@ -7,7 +7,7 @@ use rustc::traits::{\n     ProgramClause,\n     ProgramClauseCategory,\n };\n-use rustc::ty;\n+use rustc::ty::{self, TyCtxt};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc_target::spec::abi;\n@@ -16,7 +16,7 @@ use crate::generic_types;\n use std::iter;\n \n crate fn wf_clause_for_raw_ptr<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     mutbl: hir::Mutability\n ) -> Clauses<'tcx> {\n     let ptr_ty = generic_types::raw_ptr(tcx, mutbl);\n@@ -33,7 +33,7 @@ crate fn wf_clause_for_raw_ptr<'tcx>(\n }\n \n crate fn wf_clause_for_fn_ptr<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     arity_and_output: usize,\n     variadic: bool,\n     unsafety: hir::Unsafety,\n@@ -53,7 +53,7 @@ crate fn wf_clause_for_fn_ptr<'tcx>(\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_slice<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n+crate fn wf_clause_for_slice<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n     let ty = generic_types::bound(tcx, 0);\n     let slice_ty = tcx.mk_slice(ty);\n \n@@ -83,7 +83,7 @@ crate fn wf_clause_for_slice<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tc\n }\n \n crate fn wf_clause_for_array<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     length: &'tcx ty::Const<'tcx>\n ) -> Clauses<'tcx> {\n     let ty = generic_types::bound(tcx, 0);\n@@ -115,7 +115,7 @@ crate fn wf_clause_for_array<'tcx>(\n }\n \n crate fn wf_clause_for_tuple<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     arity: usize\n ) -> Clauses<'tcx> {\n     let type_list = generic_types::type_list(tcx, arity);\n@@ -159,7 +159,7 @@ crate fn wf_clause_for_tuple<'tcx>(\n }\n \n crate fn wf_clause_for_ref<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     mutbl: hir::Mutability\n ) -> Clauses<'tcx> {\n     let region = tcx.mk_region(\n@@ -186,7 +186,7 @@ crate fn wf_clause_for_ref<'tcx>(\n }\n \n crate fn wf_clause_for_fn_def<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     def_id: DefId\n ) -> Clauses<'tcx> {\n     let fn_def = generic_types::fn_def(tcx, def_id);"}, {"sha": "4f5a4996db5375309426bdebee802de1a51efb84", "filename": "src/librustc_traits/chalk_context/resolvent_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/654d045b6fbf6cab587437f8985fbf7d74c5134c/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654d045b6fbf6cab587437f8985fbf7d74c5134c/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs?ref=654d045b6fbf6cab587437f8985fbf7d74c5134c", "patch": "@@ -16,7 +16,7 @@ use rustc::traits::{\n     Environment,\n     InEnvironment,\n };\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Kind;\n use rustc::ty::relate::{Relate, RelateResult, TypeRelation};\n use syntax_pos::DUMMY_SP;\n@@ -169,7 +169,7 @@ impl AnswerSubstitutor<'cx, 'gcx, 'tcx> {\n }\n \n impl TypeRelation<'cx, 'gcx, 'tcx> for AnswerSubstitutor<'cx, 'gcx, 'tcx> {\n-    fn tcx(&self) -> ty::TyCtxt<'cx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'cx, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "6ea3626dc9d085852fcf4bdbfcfb1bcfebb5b0b2", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/654d045b6fbf6cab587437f8985fbf7d74c5134c/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654d045b6fbf6cab587437f8985fbf7d74c5134c/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=654d045b6fbf6cab587437f8985fbf7d74c5134c", "patch": "@@ -6,7 +6,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc_target::spec::abi;\n \n-crate fn bound(tcx: ty::TyCtxt<'_, '_, 'tcx>, index: u32) -> Ty<'tcx> {\n+crate fn bound(tcx: TyCtxt<'_, '_, 'tcx>, index: u32) -> Ty<'tcx> {\n     let ty = ty::Bound(\n         ty::INNERMOST,\n         ty::BoundVar::from_u32(index).into()\n@@ -22,7 +22,7 @@ crate fn raw_ptr(tcx: TyCtxt<'_, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx>\n }\n \n crate fn fn_ptr(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     arity_and_output: usize,\n     c_variadic: bool,\n     unsafety: hir::Unsafety,\n@@ -44,7 +44,7 @@ crate fn fn_ptr(\n     tcx.mk_fn_ptr(fn_sig)\n }\n \n-crate fn type_list(tcx: ty::TyCtxt<'_, '_, 'tcx>, arity: usize) -> SubstsRef<'tcx> {\n+crate fn type_list(tcx: TyCtxt<'_, '_, 'tcx>, arity: usize) -> SubstsRef<'tcx> {\n     tcx.mk_substs(\n         (0..arity).into_iter()\n             .map(|i| ty::BoundVar::from(i))\n@@ -53,7 +53,7 @@ crate fn type_list(tcx: ty::TyCtxt<'_, '_, 'tcx>, arity: usize) -> SubstsRef<'tc\n     )\n }\n \n-crate fn ref_ty(tcx: ty::TyCtxt<'_, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx> {\n+crate fn ref_ty(tcx: TyCtxt<'_, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx> {\n     let region = tcx.mk_region(\n         ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n     );\n@@ -64,17 +64,17 @@ crate fn ref_ty(tcx: ty::TyCtxt<'_, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tc\n     })\n }\n \n-crate fn fn_def(tcx: ty::TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n+crate fn fn_def(tcx: TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_ty(ty::FnDef(def_id, InternalSubsts::bound_vars_for_item(tcx, def_id)))\n }\n \n-crate fn closure(tcx: ty::TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n+crate fn closure(tcx: TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_closure(def_id, ty::ClosureSubsts {\n         substs: InternalSubsts::bound_vars_for_item(tcx, def_id),\n     })\n }\n \n-crate fn generator(tcx: ty::TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n+crate fn generator(tcx: TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_generator(def_id, ty::GeneratorSubsts {\n         substs: InternalSubsts::bound_vars_for_item(tcx, def_id),\n     }, hir::GeneratorMovability::Movable)"}]}