{"sha": "7f2c399f3a21400cc61d3ad235c433d610615237", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMmMzOTlmM2EyMTQwMGNjNjFkM2FkMjM1YzQzM2Q2MTA2MTUyMzc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-17T16:55:28Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-20T22:08:18Z"}, "message": "Convert many libsyntax records into structs\n\nSpecifically:\n\nast_map::ctx\nast_util::id_range\ndiagnostic::{handler_t,codemap_t}\nauto_encode::field\next::base::{macro_def,syntax_expander_tt,syntax_expander_tt_item}\next::pipes::proto::next_state", "tree": {"sha": "9bf7b4a5ec6e549a7b1ddc1c29596f980c0a2770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bf7b4a5ec6e549a7b1ddc1c29596f980c0a2770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f2c399f3a21400cc61d3ad235c433d610615237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2c399f3a21400cc61d3ad235c433d610615237", "html_url": "https://github.com/rust-lang/rust/commit/7f2c399f3a21400cc61d3ad235c433d610615237", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f2c399f3a21400cc61d3ad235c433d610615237/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "html_url": "https://github.com/rust-lang/rust/commit/28da4ecdaab66244e6bb5155489de8e0aa0f30dd"}], "stats": {"total": 136, "additions": 83, "deletions": 53}, "files": [{"sha": "906864417780e4c6e37a215cdcacb2a103d84239", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=7f2c399f3a21400cc61d3ad235c433d610615237", "patch": "@@ -164,7 +164,7 @@ fn reserve_id_range(sess: Session,\n     let to_id_min = sess.parse_sess.next_id;\n     let to_id_max = sess.parse_sess.next_id + cnt;\n     sess.parse_sess.next_id = to_id_max;\n-    return {min: to_id_min, max: to_id_min};\n+    ast_util::id_range { min: to_id_min, max: to_id_min }\n }\n \n impl extended_decode_ctxt {"}, {"sha": "71f2a0002acae1c9ec645a05a679a8eb24e38c26", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=7f2c399f3a21400cc61d3ad235c433d610615237", "patch": "@@ -108,8 +108,12 @@ enum ast_node {\n }\n \n type map = std::map::HashMap<node_id, ast_node>;\n-type ctx = {map: map, mut path: path,\n-            mut local_id: uint, diag: span_handler};\n+struct ctx {\n+    map: map,\n+    mut path: path,\n+    mut local_id: uint,\n+    diag: span_handler,\n+}\n type vt = visit::vt<ctx>;\n \n fn extend(cx: ctx, +elt: ident) -> @path {\n@@ -131,12 +135,14 @@ fn mk_ast_map_visitor() -> vt {\n }\n \n fn map_crate(diag: span_handler, c: crate) -> map {\n-    let cx = {map: std::map::HashMap(),\n-              mut path: ~[],\n-              mut local_id: 0u,\n-              diag: diag};\n+    let cx = ctx {\n+        map: std::map::HashMap(),\n+        mut path: ~[],\n+        mut local_id: 0u,\n+        diag: diag,\n+    };\n     visit::visit_crate(c, cx, mk_ast_map_visitor());\n-    return cx.map;\n+    cx.map\n }\n \n // Used for items loaded from external crate that are being inlined into this\n@@ -150,10 +156,12 @@ fn map_decoded_item(diag: span_handler,\n     // alias analysis, which we will not be running on the inlined items, and\n     // even if we did I think it only needs an ordering between local\n     // variables that are simultaneously in scope).\n-    let cx = {map: map,\n-              mut path: /* FIXME (#2543) */ copy path,\n-              mut local_id: 0u,\n-              diag: diag};\n+    let cx = ctx {\n+        map: map,\n+        mut path: /* FIXME (#2543) */ copy path,\n+        mut local_id: 0u,\n+        diag: diag,\n+    };\n     let v = mk_ast_map_visitor();\n \n     // methods get added to the AST map when their impl is visited.  Since we"}, {"sha": "fe0da2e17b82a131e34871ccb8de98705e378a4b", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=7f2c399f3a21400cc61d3ad235c433d610615237", "patch": "@@ -455,7 +455,10 @@ fn dtor_dec() -> fn_decl {\n \n #[auto_encode]\n #[auto_decode]\n-type id_range = {min: node_id, max: node_id};\n+struct id_range {\n+    min: node_id,\n+    max: node_id,\n+}\n \n fn empty(range: id_range) -> bool {\n     range.min >= range.max\n@@ -596,7 +599,7 @@ fn compute_id_range(visit_ids_fn: fn(fn@(node_id))) -> id_range {\n         *min = int::min(*min, id);\n         *max = int::max(*max, id + 1);\n     }\n-    return {min:*min, max:*max};\n+    id_range { min: *min, max: *max }\n }\n \n fn compute_id_range_for_inlined_item(item: inlined_item) -> id_range {"}, {"sha": "c00b956f553983ec11bb8fff4bf20927d93f51a6", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=7f2c399f3a21400cc61d3ad235c433d610615237", "patch": "@@ -57,15 +57,15 @@ trait handler {\n     fn emit(cmsp: Option<(@codemap::CodeMap, span)>, msg: &str, lvl: level);\n }\n \n-type handler_t = @{\n+struct handler_t {\n     mut err_count: uint,\n-    emit: emitter\n-};\n+    emit: emitter,\n+}\n \n-type codemap_t = @{\n+struct codemap_t {\n     handler: handler,\n-    cm: @codemap::CodeMap\n-};\n+    cm: @codemap::CodeMap,\n+}\n \n impl codemap_t: span_handler {\n     fn span_fatal(sp: span, msg: &str) -> ! {\n@@ -138,7 +138,7 @@ fn ice_msg(msg: &str) -> ~str {\n }\n \n fn mk_span_handler(handler: handler, cm: @codemap::CodeMap) -> span_handler {\n-    @{ handler: handler, cm: cm } as span_handler\n+    @codemap_t { handler: handler, cm: cm } as span_handler\n }\n \n fn mk_handler(emitter: Option<emitter>) -> handler {\n@@ -154,12 +154,7 @@ fn mk_handler(emitter: Option<emitter>) -> handler {\n       }\n     };\n \n-    let x: handler_t = @{\n-        mut err_count: 0,\n-        emit: emit\n-    };\n-\n-    x as handler\n+    @handler_t { mut err_count: 0, emit: emit } as handler\n }\n \n enum level {"}, {"sha": "1354b816a00ded01ab5707ae1607c55fedb08a1c", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=7f2c399f3a21400cc61d3ad235c433d610615237", "patch": "@@ -46,7 +46,7 @@ references other non-built-in types.  A type definition like:\n \n     #[auto_encode]\n     #[auto_decode]\n-    type spanned<T> = {node: T, span: span};\n+    struct spanned<T> {node: T, span: span}\n \n would yield functions like:\n \n@@ -810,11 +810,15 @@ fn mk_struct_deser_impl(\n // Records and structs don't have the same fields types, but they share enough\n // that if we extract the right subfields out we can share the code\n // generator code.\n-type field = { span: span, ident: ast::ident, mutbl: ast::mutability };\n+struct field {\n+    span: span,\n+    ident: ast::ident,\n+    mutbl: ast::mutability,\n+}\n \n fn mk_rec_fields(fields: ~[ast::ty_field]) -> ~[field] {\n     do fields.map |field| {\n-        {\n+        field {\n             span: field.span,\n             ident: field.node.ident,\n             mutbl: field.node.mt.mutbl,\n@@ -830,7 +834,7 @@ fn mk_struct_fields(fields: ~[@ast::struct_field]) -> ~[field] {\n                         unnamed fields\",\n         };\n \n-        {\n+        field {\n             span: field.span,\n             ident: ident,\n             mutbl: match mutbl {\n@@ -886,7 +890,7 @@ fn mk_ser_fields(\n fn mk_deser_fields(\n     cx: ext_ctxt,\n     span: span,\n-    fields: ~[{ span: span, ident: ast::ident, mutbl: ast::mutability }]\n+    fields: ~[field]\n ) -> ~[ast::field] {\n     do fields.mapi |idx, field| {\n         // ast for `|| std::serialize::decode(__d)`"}, {"sha": "dab57dd0ad442b1a3710e9012dddf5261fb2daf3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=7f2c399f3a21400cc61d3ad235c433d610615237", "patch": "@@ -32,17 +32,27 @@ use std::map::HashMap;\n // is now probably a redundant AST node, can be merged with\n // ast::mac_invoc_tt.\n \n-type macro_def = {name: ~str, ext: syntax_extension};\n+struct macro_def {\n+    name: ~str,\n+    ext: syntax_extension,\n+}\n \n type item_decorator =\n     fn@(ext_ctxt, span, ast::meta_item, ~[@ast::item]) -> ~[@ast::item];\n \n-type syntax_expander_tt = {expander: syntax_expander_tt_, span: Option<span>};\n+struct syntax_expander_tt {\n+    expander: syntax_expander_tt_,\n+    span: Option<span>,\n+}\n+\n type syntax_expander_tt_ = fn@(ext_ctxt, span, ~[ast::token_tree])\n     -> mac_result;\n \n-type syntax_expander_tt_item\n-    = {expander: syntax_expander_tt_item_, span: Option<span>};\n+struct syntax_expander_tt_item {\n+    expander: syntax_expander_tt_item_,\n+    span: Option<span>,\n+}\n+\n type syntax_expander_tt_item_\n     = fn@(ext_ctxt, span, ast::ident, ~[ast::token_tree]) -> mac_result;\n \n@@ -70,10 +80,10 @@ enum syntax_extension {\n // AST nodes into full ASTs\n fn syntax_expander_table() -> HashMap<~str, syntax_extension> {\n     fn builtin_normal_tt(f: syntax_expander_tt_) -> syntax_extension {\n-        normal_tt({expander: f, span: None})\n+        normal_tt(syntax_expander_tt {expander: f, span: None})\n     }\n     fn builtin_item_tt(f: syntax_expander_tt_item_) -> syntax_extension {\n-        item_tt({expander: f, span: None})\n+        item_tt(syntax_expander_tt_item {expander: f, span: None})\n     }\n     let syntax_expanders = HashMap();\n     syntax_expanders.insert(~\"macro_rules\","}, {"sha": "4b096f07b75f68c4b0d9d9a673097a55a2d647d4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=7f2c399f3a21400cc61d3ad235c433d610615237", "patch": "@@ -46,7 +46,9 @@ fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                     cx.span_fatal(pth.span,\n                                   fmt!(\"macro undefined: '%s'\", *extname))\n                   }\n-                  Some(normal_tt({expander: exp, span: exp_sp})) => {\n+                  Some(normal_tt(\n+                    syntax_expander_tt { expander: exp, span: exp_sp }\n+                  )) => {\n                     cx.bt_push(ExpandedFrom({call_site: s,\n                                 callie: {name: *extname, span: exp_sp}}));\n \n@@ -231,7 +233,9 @@ fn expand_stmt(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n         None =>\n             cx.span_fatal(pth.span, fmt!(\"macro undefined: '%s'\", *extname)),\n \n-        Some(normal_tt({expander: exp, span: exp_sp})) => {\n+        Some(normal_tt(\n+            syntax_expander_tt { expander: exp, span: exp_sp }\n+        )) => {\n             cx.bt_push(ExpandedFrom(\n                 {call_site: sp, callie: {name: *extname, span: exp_sp}}));\n             let expanded = match exp(cx, mac.span, tts) {"}, {"sha": "95d3308dd2f592f677bf83768e735b2fb08f3e2a", "filename": "src/libsyntax/ext/pipes/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs?ref=7f2c399f3a21400cc61d3ad235c433d610615237", "patch": "@@ -52,9 +52,9 @@ impl ext_ctxt: proto::visitor<(), (), ()>  {\n     }\n \n     fn visit_message(name: ~str, _span: span, _tys: &[@ast::Ty],\n-                     this: state, next: next_state) {\n+                     this: state, next: Option<next_state>) {\n         match next {\n-          Some({state: ref next, tys: next_tys}) => {\n+          Some(next_state { state: ref next, tys: next_tys }) => {\n             let proto = this.proto;\n             if !proto.has_state((*next)) {\n                 // This should be a span fatal, but then we need to"}, {"sha": "e87a044fa0190c9bb58f1f3d3c5573dfe75d458e", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=7f2c399f3a21400cc61d3ad235c433d610615237", "patch": "@@ -88,7 +88,7 @@ impl parser::Parser: proto_parser {\n                                          |p| p.parse_ty(false))\n             }\n             else { ~[] };\n-            Some({state: name, tys: ntys})\n+            Some(next_state {state: name, tys: ntys})\n           }\n           token::NOT => {\n             // -> !"}, {"sha": "6c12736b7eab6d48a1003401575899a1bccd0a40", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=7f2c399f3a21400cc61d3ad235c433d610615237", "patch": "@@ -49,7 +49,7 @@ impl message: gen_send {\n         debug!(\"pipec: gen_send\");\n         match self {\n           message(ref _id, span, tys, this,\n-                  Some({state: ref next, tys: next_tys})) => {\n+                  Some(next_state {state: ref next, tys: next_tys})) => {\n             debug!(\"pipec: next state exists\");\n             let next = this.proto.get_state((*next));\n             assert next_tys.len() == next.ty_params.len();\n@@ -217,7 +217,7 @@ impl state: to_type_decls {\n             let message(name, span, tys, this, next) = *m;\n \n             let tys = match next {\n-              Some({state: ref next, tys: next_tys}) => {\n+              Some(next_state { state: ref next, tys: next_tys }) => {\n                 let next = this.proto.get_state((*next));\n                 let next_name = cx.str_of(next.data_name());\n "}, {"sha": "26638cd8cd64fcc9b56703cea9326124a28ae6b7", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=7f2c399f3a21400cc61d3ad235c433d610615237", "patch": "@@ -51,11 +51,14 @@ impl direction {\n     }\n }\n \n-type next_state = Option<{state: ~str, tys: ~[@ast::Ty]}>;\n+struct next_state {\n+    state: ~str,\n+    tys: ~[@ast::Ty],\n+}\n \n enum message {\n     // name, span, data, current state, next state\n-    message(~str, span, ~[@ast::Ty], state, next_state)\n+    message(~str, span, ~[@ast::Ty], state, Option<next_state>)\n }\n \n impl message {\n@@ -94,7 +97,7 @@ enum state {\n \n impl state {\n     fn add_message(name: ~str, span: span,\n-                   +data: ~[@ast::Ty], next: next_state) {\n+                   +data: ~[@ast::Ty], next: Option<next_state>) {\n         self.messages.push(message(name, span, data, self,\n                                    next));\n     }\n@@ -119,7 +122,7 @@ impl state {\n     fn reachable(f: fn(state) -> bool) {\n         for self.messages.each |m| {\n             match *m {\n-              message(_, _, _, _, Some({state: ref id, _})) => {\n+              message(_, _, _, _, Some(next_state { state: ref id, _ })) => {\n                 let state = self.proto.get_state((*id));\n                 if !f(state) { break }\n               }\n@@ -217,7 +220,7 @@ trait visitor<Tproto, Tstate, Tmessage> {\n     fn visit_proto(proto: protocol, st: &[Tstate]) -> Tproto;\n     fn visit_state(state: state, m: &[Tmessage]) -> Tstate;\n     fn visit_message(name: ~str, spane: span, tys: &[@ast::Ty],\n-                     this: state, next: next_state) -> Tmessage;\n+                     this: state, next: Option<next_state>) -> Tmessage;\n }\n \n fn visit<Tproto, Tstate, Tmessage, V: visitor<Tproto, Tstate, Tmessage>>("}, {"sha": "4ee9ddf48c8106012c7ee228c7ae1cdc45a37df8", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c399f3a21400cc61d3ad235c433d610615237/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=7f2c399f3a21400cc61d3ad235c433d610615237", "patch": "@@ -139,8 +139,11 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n     let exp: @fn(ext_ctxt, span, ~[ast::token_tree]) -> mac_result =\n         |cx, sp, arg| generic_extension(cx, sp, name, arg, lhses, rhses);\n \n-    return mr_def({\n+    mr_def(base::macro_def {\n         name: *cx.parse_sess().interner.get(name),\n-        ext: normal_tt({expander: exp, span: Some(sp)})\n-    });\n+        ext: normal_tt(base::syntax_expander_tt {\n+            expander: exp,\n+            span: Some(sp),\n+        })\n+    })\n }"}]}