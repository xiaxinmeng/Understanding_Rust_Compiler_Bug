{"sha": "18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZmFkYjYxYzRhYWIzZDFiMmZjNDlhYzdkN2ZlYTg1YjM5MTRmYjM=", "commit": {"author": {"name": "Irfan Hudda", "email": "irfanhudda@gmail.com", "date": "2017-05-31T16:55:15Z"}, "committer": {"name": "Irfan Hudda", "email": "irfanhudda@gmail.com", "date": "2017-05-31T16:55:15Z"}, "message": "Simplify helper functions\n\nBased on @scottmcm 's suggestion", "tree": {"sha": "d3acf81304994c00200002d60d685c2bfc8a16e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3acf81304994c00200002d60d685c2bfc8a16e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3", "html_url": "https://github.com/rust-lang/rust/commit/18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3/comments", "author": {"login": "irfanhudda", "id": 1755089, "node_id": "MDQ6VXNlcjE3NTUwODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1755089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irfanhudda", "html_url": "https://github.com/irfanhudda", "followers_url": "https://api.github.com/users/irfanhudda/followers", "following_url": "https://api.github.com/users/irfanhudda/following{/other_user}", "gists_url": "https://api.github.com/users/irfanhudda/gists{/gist_id}", "starred_url": "https://api.github.com/users/irfanhudda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irfanhudda/subscriptions", "organizations_url": "https://api.github.com/users/irfanhudda/orgs", "repos_url": "https://api.github.com/users/irfanhudda/repos", "events_url": "https://api.github.com/users/irfanhudda/events{/privacy}", "received_events_url": "https://api.github.com/users/irfanhudda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irfanhudda", "id": 1755089, "node_id": "MDQ6VXNlcjE3NTUwODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1755089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irfanhudda", "html_url": "https://github.com/irfanhudda", "followers_url": "https://api.github.com/users/irfanhudda/followers", "following_url": "https://api.github.com/users/irfanhudda/following{/other_user}", "gists_url": "https://api.github.com/users/irfanhudda/gists{/gist_id}", "starred_url": "https://api.github.com/users/irfanhudda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irfanhudda/subscriptions", "organizations_url": "https://api.github.com/users/irfanhudda/orgs", "repos_url": "https://api.github.com/users/irfanhudda/repos", "events_url": "https://api.github.com/users/irfanhudda/events{/privacy}", "received_events_url": "https://api.github.com/users/irfanhudda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93219a262706447c52f3f20819e5caa7b2e2e3a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/93219a262706447c52f3f20819e5caa7b2e2e3a2", "html_url": "https://github.com/rust-lang/rust/commit/93219a262706447c52f3f20819e5caa7b2e2e3a2"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "e5a8cfdd9a1d5539bf184bb5ea622ed9082ef57e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3", "patch": "@@ -15,7 +15,6 @@\n use convert::TryFrom;\n use fmt;\n use intrinsics;\n-use mem::size_of;\n use str::FromStr;\n \n /// Provides intentionally-wrapped arithmetic on `T`.\n@@ -2327,26 +2326,25 @@ macro_rules! uint_impl {\n             (self.wrapping_sub(1)) & self == 0 && !(self == 0)\n         }\n \n-        // Returns one less than next greater power of two.\n-        // (For 8u8 next greater power of two is 16u8 and for 6u8 it is 8u8)\n-        //\n-        // 8u8.round_up_to_one_less_than_a_power_of_two() == 15\n-        // 6u8.round_up_to_one_less_than_a_power_of_two() == 7\n-        fn round_up_to_one_less_than_a_power_of_two(self) -> Self {\n-            let bits = size_of::<Self>() as u32 * 8;\n-            let z = self.leading_zeros();\n-            (if z == bits { 0 as Self } else { !0 }).wrapping_shr(z)\n-        }\n-\n         // Returns one less than next power of two.\n         // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)\n         //\n         // 8u8.one_less_than_next_power_of_two() == 7\n         // 6u8.one_less_than_next_power_of_two() == 7\n+        //\n+        // This method cannot overflow, as in the `next_power_of_two`\n+        // overflow cases it instead ends up returning the maximum value\n+        // of the type, and can return 0 for 0.\n         fn one_less_than_next_power_of_two(self) -> Self {\n-            self.wrapping_sub(1)\n-                .round_up_to_one_less_than_a_power_of_two()\n-                .wrapping_add(if self == 0 { 1 } else { 0 })\n+            if self <= 1 { return 0; }\n+\n+            // Because `p > 0`, it cannot consist entirely of leading zeros.\n+            // That means the shift is always in-bounds, and some processors\n+            // (such as intel pre-haswell) have more efficient ctlz\n+            // intrinsics when the argument is non-zero.\n+            let p = self - 1;\n+            let z = p.leading_zeros();\n+            <$SelfT>::max_value() >> z\n         }\n \n         /// Returns the smallest power of two greater than or equal to `self`."}, {"sha": "894a6e6796ca645cc0a47db2061699e51c8ef962", "filename": "src/libstd/num.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3", "patch": "@@ -176,7 +176,10 @@ mod tests {\n             fn $test_name() {\n                 #![test]\n                 assert_eq!((0 as $T).checked_next_power_of_two(), Some(1));\n-                assert!(($T::MAX / 2).checked_next_power_of_two().is_some());\n+                let smax = $T::MAX >> 1;\n+                assert_eq!(smax.checked_next_power_of_two(), Some(smax+1));\n+                assert_eq!((smax + 1).checked_next_power_of_two(), Some(smax + 1));\n+                assert_eq!((smax + 2).checked_next_power_of_two(), None);\n                 assert_eq!(($T::MAX - 1).checked_next_power_of_two(), None);\n                 assert_eq!($T::MAX.checked_next_power_of_two(), None);\n                 let mut next_power = 1;"}]}