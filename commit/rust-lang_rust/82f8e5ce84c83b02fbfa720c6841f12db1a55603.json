{"sha": "82f8e5ce84c83b02fbfa720c6841f12db1a55603", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjhlNWNlODRjODNiMDJmYmZhNzIwYzY4NDFmMTJkYjFhNTU2MDM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-06T20:23:01Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-15T01:49:25Z"}, "message": "Address reviewer comments\n\n[breaking-change]\n\n`OptLevel` variants are no longer `pub use`ed by rust::session::config. If you are using these variants, you must change your code to prefix the variant name with `OptLevel`.", "tree": {"sha": "8ff7529affbf9c7906469fbe37899bef7ef975a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ff7529affbf9c7906469fbe37899bef7ef975a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f8e5ce84c83b02fbfa720c6841f12db1a55603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f8e5ce84c83b02fbfa720c6841f12db1a55603", "html_url": "https://github.com/rust-lang/rust/commit/82f8e5ce84c83b02fbfa720c6841f12db1a55603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f8e5ce84c83b02fbfa720c6841f12db1a55603/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "url": "https://api.github.com/repos/rust-lang/rust/commits/11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "html_url": "https://github.com/rust-lang/rust/commit/11dcb48c6a99e84952de3b7d5c1f6928d7b05867"}], "stats": {"total": 137, "additions": 69, "deletions": 68}, "files": [{"sha": "47bc46ab2bc8ed16c0d55a2fba861c4b18343e40", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 53, "deletions": 57, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/82f8e5ce84c83b02fbfa720c6841f12db1a55603/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f8e5ce84c83b02fbfa720c6841f12db1a55603/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=82f8e5ce84c83b02fbfa720c6841f12db1a55603", "patch": "@@ -72,13 +72,13 @@ pub enum OutputType {\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum ErrorOutputType {\n-    Tty(ColorConfig),\n+    HumanReadable(ColorConfig),\n     Json,\n }\n \n impl Default for ErrorOutputType {\n     fn default() -> ErrorOutputType {\n-        ErrorOutputType::Tty(ColorConfig::Auto)\n+        ErrorOutputType::HumanReadable(ColorConfig::Auto)\n     }\n }\n \n@@ -135,7 +135,7 @@ pub struct Options {\n     pub test: bool,\n     pub parse_only: bool,\n     pub no_trans: bool,\n-    pub output: ErrorOutputType,\n+    pub error_format: ErrorOutputType,\n     pub treat_err_as_bug: bool,\n     pub incremental_compilation: bool,\n     pub dump_dep_graph: bool,\n@@ -252,12 +252,7 @@ pub fn basic_options() -> Options {\n         debugging_opts: basic_debugging_options(),\n         prints: Vec::new(),\n         cg: basic_codegen_options(),\n-<<<<<<< HEAD\n-        color: ColorConfig::Auto,\n-=======\n-        output: ErrorOutputType::default(),\n-        show_span: None,\n->>>>>>> Add an --output option for specifying an error emitter\n+        error_format: ErrorOutputType::default(),\n         externs: HashMap::new(),\n         crate_name: None,\n         alt_std_name: None,\n@@ -324,7 +319,7 @@ macro_rules! options {\n         $struct_name { $($opt: $init),* }\n     }\n \n-    pub fn $buildfn(matches: &getopts::Matches, output: ErrorOutputType) -> $struct_name\n+    pub fn $buildfn(matches: &getopts::Matches, error_format: ErrorOutputType) -> $struct_name\n     {\n         let mut op = $defaultfn();\n         for option in matches.opt_strs($prefix) {\n@@ -338,20 +333,20 @@ macro_rules! options {\n                 if !setter(&mut op, value) {\n                     match (value, opt_type_desc) {\n                         (Some(..), None) => {\n-                            early_error(output, &format!(\"{} option `{}` takes no \\\n-                                                         value\", $outputname, key))\n+                            early_error(error_format, &format!(\"{} option `{}` takes no \\\n+                                                              value\", $outputname, key))\n                         }\n                         (None, Some(type_desc)) => {\n-                            early_error(output, &format!(\"{0} option `{1}` requires \\\n-                                                         {2} ({3} {1}=<value>)\",\n-                                                        $outputname, key,\n-                                                        type_desc, $prefix))\n+                            early_error(error_format, &format!(\"{0} option `{1}` requires \\\n+                                                              {2} ({3} {1}=<value>)\",\n+                                                             $outputname, key,\n+                                                             type_desc, $prefix))\n                         }\n                         (Some(value), Some(type_desc)) => {\n-                            early_error(output, &format!(\"incorrect value `{}` for {} \\\n-                                                         option `{}` - {} was expected\",\n-                                                        value, $outputname,\n-                                                        key, type_desc))\n+                            early_error(error_format, &format!(\"incorrect value `{}` for {} \\\n+                                                              option `{}` - {} was expected\",\n+                                                             value, $outputname,\n+                                                             key, type_desc))\n                         }\n                         (None, None) => unreachable!()\n                     }\n@@ -360,8 +355,8 @@ macro_rules! options {\n                 break;\n             }\n             if !found {\n-                early_error(output, &format!(\"unknown {} option: `{}`\",\n-                                            $outputname, key));\n+                early_error(error_format, &format!(\"unknown {} option: `{}`\",\n+                                                 $outputname, key));\n             }\n         }\n         return op;\n@@ -879,7 +874,7 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n                  \"NAME=PATH\"),\n         opt::opt(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n         opt::multi(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n-        opt::opt_u(\"\", \"output\", \"How errors and other mesasges are produced\", \"tty|json\"),\n+        opt::opt_u(\"\", \"error-format\", \"How errors and other messages are produced\", \"human|json\"),\n         opt::opt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize, if output goes to a tty (default);\n             always = always colorize output;\n@@ -929,19 +924,20 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     };\n \n     // We need the opts_present check because the driver will send us Matches\n-    // with only stable options if no unstable options are used. Since output is\n-    // unstable, it will not be present. We have to use opts_present not\n+    // with only stable options if no unstable options are used. Since error-format\n+    // is unstable, it will not be present. We have to use opts_present not\n     // opt_present because the latter will panic.\n-    let output = if matches.opts_present(&[\"output\".to_owned()]) {\n-        match matches.opt_str(\"output\").as_ref().map(|s| &s[..]) {\n-            Some(\"tty\")   => ErrorOutputType::Tty(color),\n+    let error_format = if matches.opts_present(&[\"error-format\".to_owned()]) {\n+        match matches.opt_str(\"error-format\").as_ref().map(|s| &s[..]) {\n+            Some(\"human\")   => ErrorOutputType::HumanReadable(color),\n             Some(\"json\") => ErrorOutputType::Json,\n \n             None => ErrorOutputType::default(),\n \n             Some(arg) => {\n-                early_error(ErrorOutputType::default(), &format!(\"argument for --output must be \\\n-                                                                  tty or json (instead was `{}`)\",\n+                early_error(ErrorOutputType::default(), &format!(\"argument for --error-format must \\\n+                                                                  be human or json (instead was \\\n+                                                                  `{}`)\",\n                                                                  arg))\n             }\n         }\n@@ -951,7 +947,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n-        .unwrap_or_else(|e| early_error(output, &e[..]));\n+        .unwrap_or_else(|e| early_error(error_format, &e[..]));\n \n     let mut lint_opts = vec!();\n     let mut describe_lints = false;\n@@ -968,11 +964,11 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let lint_cap = matches.opt_str(\"cap-lints\").map(|cap| {\n         lint::Level::from_str(&cap).unwrap_or_else(|| {\n-            early_error(output, &format!(\"unknown lint level: `{}`\", cap))\n+            early_error(error_format, &format!(\"unknown lint level: `{}`\", cap))\n         })\n     });\n \n-    let debugging_opts = build_debugging_options(matches, output);\n+    let debugging_opts = build_debugging_options(matches, error_format);\n \n     let parse_only = debugging_opts.parse_only;\n     let no_trans = debugging_opts.no_trans;\n@@ -998,7 +994,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n                     \"link\" => OutputType::Exe,\n                     \"dep-info\" => OutputType::DepInfo,\n                     part => {\n-                        early_error(output, &format!(\"unknown emission type: `{}`\",\n+                        early_error(error_format, &format!(\"unknown emission type: `{}`\",\n                                                     part))\n                     }\n                 };\n@@ -1011,7 +1007,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         output_types.insert(OutputType::Exe, None);\n     }\n \n-    let mut cg = build_codegen_options(matches, output);\n+    let mut cg = build_codegen_options(matches, error_format);\n \n     // Issue #30063: if user requests llvm-related output to one\n     // particular path, disable codegen-units.\n@@ -1023,11 +1019,11 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             }).collect();\n         if !incompatible.is_empty() {\n             for ot in &incompatible {\n-                early_warn(output, &format!(\"--emit={} with -o incompatible with \\\n-                                            -C codegen-units=N for N > 1\",\n-                                           ot.shorthand()));\n+                early_warn(error_format, &format!(\"--emit={} with -o incompatible with \\\n+                                                 -C codegen-units=N for N > 1\",\n+                                                ot.shorthand()));\n             }\n-            early_warn(output, \"resetting to default -C codegen-units=1\");\n+            early_warn(error_format, \"resetting to default -C codegen-units=1\");\n             cg.codegen_units = 1;\n         }\n     }\n@@ -1040,7 +1036,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let opt_level = {\n         if matches.opt_present(\"O\") {\n             if cg.opt_level.is_some() {\n-                early_error(output, \"-O and -C opt-level both provided\");\n+                early_error(error_format, \"-O and -C opt-level both provided\");\n             }\n             OptLevel::Default\n         } else {\n@@ -1051,9 +1047,9 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n                 Some(2) => OptLevel::Default,\n                 Some(3) => OptLevel::Aggressive,\n                 Some(arg) => {\n-                    early_error(output, &format!(\"optimization level needs to be \\\n-                                                 between 0-3 (instead was `{}`)\",\n-                                                arg));\n+                    early_error(error_format, &format!(\"optimization level needs to be \\\n+                                                      between 0-3 (instead was `{}`)\",\n+                                                     arg));\n                 }\n             }\n         }\n@@ -1062,7 +1058,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let gc = debugging_opts.gc;\n     let debuginfo = if matches.opt_present(\"g\") {\n         if cg.debuginfo.is_some() {\n-            early_error(output, \"-g and -C debuginfo both provided\");\n+            early_error(error_format, \"-g and -C debuginfo both provided\");\n         }\n         FullDebugInfo\n     } else {\n@@ -1071,16 +1067,16 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             Some(1) => LimitedDebugInfo,\n             Some(2) => FullDebugInfo,\n             Some(arg) => {\n-                early_error(output, &format!(\"debug info level needs to be between \\\n-                                             0-2 (instead was `{}`)\",\n-                                            arg));\n+                early_error(error_format, &format!(\"debug info level needs to be between \\\n+                                                  0-2 (instead was `{}`)\",\n+                                                 arg));\n             }\n         }\n     };\n \n     let mut search_paths = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n-        search_paths.add_path(&s[..], output);\n+        search_paths.add_path(&s[..], error_format);\n     }\n \n     let libs = matches.opt_strs(\"l\").into_iter().map(|s| {\n@@ -1092,9 +1088,9 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             (Some(name), \"framework\") => (name, cstore::NativeFramework),\n             (Some(name), \"static\") => (name, cstore::NativeStatic),\n             (_, s) => {\n-                early_error(output, &format!(\"unknown library kind `{}`, expected \\\n-                                             one of dylib, framework, or static\",\n-                                            s));\n+                early_error(error_format, &format!(\"unknown library kind `{}`, expected \\\n+                                                  one of dylib, framework, or static\",\n+                                                 s));\n             }\n         };\n         (name.to_string(), kind)\n@@ -1109,26 +1105,26 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             \"file-names\" => PrintRequest::FileNames,\n             \"sysroot\" => PrintRequest::Sysroot,\n             req => {\n-                early_error(output, &format!(\"unknown print request `{}`\", req))\n+                early_error(error_format, &format!(\"unknown print request `{}`\", req))\n             }\n         }\n     }).collect::<Vec<_>>();\n \n     if !cg.remark.is_empty() && debuginfo == NoDebugInfo {\n-        early_warn(output, \"-C remark will not show source locations without \\\n-                           --debuginfo\");\n+        early_warn(error_format, \"-C remark will not show source locations without \\\n+                                --debuginfo\");\n     }\n \n     let mut externs = HashMap::new();\n     for arg in &matches.opt_strs(\"extern\") {\n         let mut parts = arg.splitn(2, '=');\n         let name = match parts.next() {\n             Some(s) => s,\n-            None => early_error(output, \"--extern value must not be empty\"),\n+            None => early_error(error_format, \"--extern value must not be empty\"),\n         };\n         let location = match parts.next() {\n             Some(s) => s,\n-            None => early_error(output, \"--extern value must be of the format `foo=bar`\"),\n+            None => early_error(error_format, \"--extern value must be of the format `foo=bar`\"),\n         };\n \n         externs.entry(name.to_string()).or_insert(vec![]).push(location.to_string());\n@@ -1159,7 +1155,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         debugging_opts: debugging_opts,\n         prints: prints,\n         cg: cg,\n-        output: output,\n+        error_format: error_format,\n         externs: externs,\n         crate_name: crate_name,\n         alt_std_name: None,"}, {"sha": "2f3af1c0d09b5c4b14ab2cfd501d1660f4d9d838", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82f8e5ce84c83b02fbfa720c6841f12db1a55603/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f8e5ce84c83b02fbfa720c6841f12db1a55603/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=82f8e5ce84c83b02fbfa720c6841f12db1a55603", "patch": "@@ -406,8 +406,8 @@ pub fn build_session(sopts: config::Options,\n     let treat_err_as_bug = sopts.treat_err_as_bug;\n \n     let codemap = Rc::new(codemap::CodeMap::new());\n-    let emitter: Box<Emitter> = match sopts.output {\n-        config::ErrorOutputType::Tty(color_config) => {\n+    let emitter: Box<Emitter> = match sopts.error_format {\n+        config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, Some(registry), codemap.clone()))\n         }\n         config::ErrorOutputType::Json => {\n@@ -483,7 +483,9 @@ pub fn build_session_(sopts: config::Options,\n \n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     let mut emitter: Box<Emitter> = match output {\n-        config::ErrorOutputType::Tty(color_config) => Box::new(BasicEmitter::stderr(color_config)),\n+        config::ErrorOutputType::HumanReadable(color_config) => {\n+            Box::new(BasicEmitter::stderr(color_config))\n+        }\n         config::ErrorOutputType::Json => Box::new(JsonEmitter::basic()),\n     };\n     emitter.emit(None, msg, None, errors::Level::Fatal);\n@@ -492,7 +494,9 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     let mut emitter: Box<Emitter> = match output {\n-        config::ErrorOutputType::Tty(color_config) => Box::new(BasicEmitter::stderr(color_config)),\n+        config::ErrorOutputType::HumanReadable(color_config) => {\n+            Box::new(BasicEmitter::stderr(color_config))\n+        }\n         config::ErrorOutputType::Json => Box::new(JsonEmitter::basic()),\n     };\n     emitter.emit(None, msg, None, errors::Level::Warning);"}, {"sha": "62bea61216888aec22d1962de40984aea9497419", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f8e5ce84c83b02fbfa720c6841f12db1a55603/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f8e5ce84c83b02fbfa720c6841f12db1a55603/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=82f8e5ce84c83b02fbfa720c6841f12db1a55603", "patch": "@@ -127,7 +127,7 @@ pub fn run_compiler<'a>(args: &[String], callbacks: &mut CompilerCalls<'a>) {\n \n     let descriptions = diagnostics_registry();\n \n-    do_or_return!(callbacks.early_callback(&matches, &descriptions, sopts.output));\n+    do_or_return!(callbacks.early_callback(&matches, &descriptions, sopts.error_format));\n \n     let (odir, ofile) = make_output(&matches);\n     let (input, input_file_path) = match make_input(&matches.free) {\n@@ -340,10 +340,10 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 if should_stop == Compilation::Stop {\n                     return None;\n                 }\n-                early_error(sopts.output, \"no input filename given\");\n+                early_error(sopts.error_format, \"no input filename given\");\n             }\n             1 => panic!(\"make_input should have provided valid inputs\"),\n-            _ => early_error(sopts.output, \"multiple input filenames provided\"),\n+            _ => early_error(sopts.error_format, \"multiple input filenames provided\"),\n         }\n \n         None"}, {"sha": "2467e08300c18987696da242e992f7f65f5901d7", "filename": "src/test/run-make/json-errors/Makefile", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82f8e5ce84c83b02fbfa720c6841f12db1a55603/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/82f8e5ce84c83b02fbfa720c6841f12db1a55603/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile?ref=82f8e5ce84c83b02fbfa720c6841f12db1a55603", "patch": "@@ -3,5 +3,6 @@\n all:\n \tcp foo.rs $(TMPDIR)\n \tcd $(TMPDIR)\n-\t$(RUSTC) -Z unstable-options --output=json foo.rs 2>foo.log || true\n-\tgrep -q '{\"message\":\"unresolved name `y`\",\"code\":{\"code\":\"E0425\",\"explanation\":\"\\\\nAn unresolved name was used. Example of erroneous codes.*\"},\"level\":\"error\",\"span\":{\"file_name\":\"foo.rs\",\"byte_start\":523,\"byte_end\":524,\"line_start\":14,\"line_end\":14,\"column_start\":18,\"column_end\":19},\"children\":\\[\\]}' foo.log\n+\t-$(RUSTC) -Z unstable-options --error-format=json foo.rs 2>foo.log\n+\tgrep -q '{\"message\":\"unresolved name `y`\",\"code\":{\"code\":\"E0425\",\"explanation\":\"\\\\nAn unresolved name was used. Example of erroneous codes.*\"},\"level\":\"error\",\"span\":{\"file_name\":\"foo.rs\",\"byte_start\":496,\"byte_end\":497,\"line_start\":12,\"line_end\":12,\"column_start\":18,\"column_end\":19},\"children\":\\[\\]}' foo.log\n+\tgrep -q '{\"message\":\".*\",\"code\":{\"code\":\"E0277\",\"explanation\":\"\\\\nYou tried.*\"},\"level\":\"error\",\"span\":{.*},\"children\":\\[{\"message\":\"the .*\",\"code\":null,\"level\":\"help\",\"span\":{\"file_name\":\"foo.rs\",\"byte_start\":504,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":0,\"column_end\":0},\"children\":\\[\\]},{\"message\":\"  <u8 as core::ops::Add>\",\"code\":null,\"level\":\"help\",' foo.log"}, {"sha": "4db33940d88434011d5e36c85c96ff74689ada4f", "filename": "src/test/run-make/json-errors/foo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f8e5ce84c83b02fbfa720c6841f12db1a55603/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f8e5ce84c83b02fbfa720c6841f12db1a55603/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.rs?ref=82f8e5ce84c83b02fbfa720c6841f12db1a55603", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-tidy-linelength\n-\n fn main() {\n     let x = 42 + y;\n+\n+    42u8 + 42i32;\n }"}]}