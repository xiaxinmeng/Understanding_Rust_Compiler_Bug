{"sha": "cb212938d424a94695e35bb92e20613a2af72a0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMjEyOTM4ZDQyNGE5NDY5NWUzNWJiOTJlMjA2MTNhMmFmNzJhMGY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-12-09T03:51:59Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-12-12T21:36:25Z"}, "message": "Avoid re-processing nodes in `find_cycles_from_node`.", "tree": {"sha": "0aad08fc2b045636b199dfec5019c725ab4e9043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aad08fc2b045636b199dfec5019c725ab4e9043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb212938d424a94695e35bb92e20613a2af72a0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb212938d424a94695e35bb92e20613a2af72a0f", "html_url": "https://github.com/rust-lang/rust/commit/cb212938d424a94695e35bb92e20613a2af72a0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb212938d424a94695e35bb92e20613a2af72a0f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76916d7a4b948119de05135e8d797cf0d40bfd58", "url": "https://api.github.com/repos/rust-lang/rust/commits/76916d7a4b948119de05135e8d797cf0d40bfd58", "html_url": "https://github.com/rust-lang/rust/commit/76916d7a4b948119de05135e8d797cf0d40bfd58"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "b1931ca459f619715193a77cc52945d8f21fc54e", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb212938d424a94695e35bb92e20613a2af72a0f/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb212938d424a94695e35bb92e20613a2af72a0f/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=cb212938d424a94695e35bb92e20613a2af72a0f", "patch": "@@ -584,15 +584,16 @@ impl<O: ForestObligation> ObligationForest<O> {\n             // function call.\n             if let NodeState::Success(waiting) = node.state.get() {\n                 if !self.is_still_waiting(waiting) {\n-                    self.find_cycles_from_node(&mut stack, processor, index);\n+                    self.find_cycles_from_node(&mut stack, processor, index, index);\n                 }\n             }\n         }\n \n         debug_assert!(stack.is_empty());\n     }\n \n-    fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)\n+    fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, min_index: usize,\n+                                index: usize)\n         where P: ObligationProcessor<Obligation=O>\n     {\n         let node = &self.nodes[index];\n@@ -601,8 +602,11 @@ impl<O: ForestObligation> ObligationForest<O> {\n                 match stack.iter().rposition(|&n| n == index) {\n                     None => {\n                         stack.push(index);\n-                        for &index in node.dependents.iter() {\n-                            self.find_cycles_from_node(stack, processor, index);\n+                        for &dep_index in node.dependents.iter() {\n+                            // The index check avoids re-considering a node.\n+                            if dep_index >= min_index {\n+                                self.find_cycles_from_node(stack, processor, min_index, dep_index);\n+                            }\n                         }\n                         stack.pop();\n                     }"}]}