{"sha": "215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNWYyZDMyOTRiMDhkYmRjZjhmN2Q0MGRlMjFlZjFlN2VhZTBhMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-22T15:33:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-22T15:33:32Z"}, "message": "Auto merge of #72464 - RalfJung:rollup-xhm7w7u, r=RalfJung\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #71829 (Fix suggestion to borrow in struct)\n - #72123 (Stabilize process_set_argv0 feature for Unix)\n - #72235 (Clean up E0590 explanation)\n - #72345 (Clean up E0593 explanation)\n - #72376 ([self-profling] Record the cgu name when doing codegen for a module)\n - #72399 (Add fast-path optimization for Ipv4Addr::fmt)\n - #72435 (rustllvm: Fix warnings about unused function parameters)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7e00d93c42f269f074a0570ad48cc48ad98cf161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e00d93c42f269f074a0570ad48cc48ad98cf161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "html_url": "https://github.com/rust-lang/rust/commit/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9ca1ec9280ca1e5020edd699917c3367a30a798", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ca1ec9280ca1e5020edd699917c3367a30a798", "html_url": "https://github.com/rust-lang/rust/commit/a9ca1ec9280ca1e5020edd699917c3367a30a798"}, {"sha": "e7503ca7bf78eece210c061f324ecfc8e3955321", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7503ca7bf78eece210c061f324ecfc8e3955321", "html_url": "https://github.com/rust-lang/rust/commit/e7503ca7bf78eece210c061f324ecfc8e3955321"}], "stats": {"total": 161, "additions": 89, "deletions": 72}, "files": [{"sha": "57e018bba6a1a07faae1edfc2d4742b35de8966a", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -6,7 +6,6 @@ use crate::back::profiling::{\n use crate::base;\n use crate::common;\n use crate::consts;\n-use crate::context::all_outputs_are_pic_executables;\n use crate::llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic};\n use crate::llvm_util;\n use crate::type_::Type;\n@@ -150,7 +149,6 @@ pub fn target_machine_factory(\n     let features = features.join(\",\");\n     let features = CString::new(features).unwrap();\n     let abi = SmallCStr::new(&sess.target.target.options.llvm_abiname);\n-    let pic_is_pie = all_outputs_are_pic_executables(sess);\n     let trap_unreachable = sess.target.target.options.trap_unreachable;\n     let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n \n@@ -174,7 +172,6 @@ pub fn target_machine_factory(\n                 reloc_model,\n                 opt_level,\n                 use_softfp,\n-                pic_is_pie,\n                 ffunction_sections,\n                 fdata_sections,\n                 trap_unreachable,"}, {"sha": "3e17a51528e3eb70a368c9855e4023fc658b5f15", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -100,7 +100,7 @@ pub fn compile_codegen_unit(\n     tcx: TyCtxt<'tcx>,\n     cgu_name: Symbol,\n ) -> (ModuleCodegen<ModuleLlvm>, u64) {\n-    let prof_timer = tcx.prof.generic_activity(\"codegen_module\");\n+    let prof_timer = tcx.prof.generic_activity_with_arg(\"codegen_module\", cgu_name.to_string());\n     let start_time = Instant::now();\n \n     let dep_node = tcx.codegen_unit(cgu_name).codegen_dep_node(tcx);"}, {"sha": "3192d4fc15701daf1d9e67c27d675983330ae468", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -97,17 +97,6 @@ fn to_llvm_tls_model(tls_model: TlsModel) -> llvm::ThreadLocalMode {\n     }\n }\n \n-/// PIE is potentially more effective than PIC, but can only be used in executables.\n-/// If all our outputs are executables, then we can relax PIC to PIE when producing object code.\n-/// If the list of crate types is not yet known we conservatively return `false`.\n-pub fn all_outputs_are_pic_executables(sess: &Session) -> bool {\n-    sess.relocation_model() == RelocModel::Pic\n-        && sess\n-            .crate_types\n-            .try_get()\n-            .map_or(false, |crate_types| crate_types.iter().all(|ty| *ty == CrateType::Executable))\n-}\n-\n fn strip_function_ptr_alignment(data_layout: String) -> String {\n     // FIXME: Make this more general.\n     data_layout.replace(\"-Fi8-\", \"-\")\n@@ -183,10 +172,11 @@ pub unsafe fn create_module(\n \n     if sess.relocation_model() == RelocModel::Pic {\n         llvm::LLVMRustSetModulePICLevel(llmod);\n-    }\n-\n-    if all_outputs_are_pic_executables(sess) {\n-        llvm::LLVMRustSetModulePIELevel(llmod);\n+        // PIE is potentially more effective than PIC, but can only be used in executables.\n+        // If all our outputs are executables, then we can relax PIC to PIE.\n+        if sess.crate_types.get().iter().all(|ty| *ty == CrateType::Executable) {\n+            llvm::LLVMRustSetModulePIELevel(llmod);\n+        }\n     }\n \n     // If skipping the PLT is enabled, we need to add some module metadata"}, {"sha": "0cce0b25e5893a02169d551ef5c024d964018881", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -447,7 +447,6 @@ fn subroutine_type_metadata(\n         unsafe {\n             llvm::LLVMRustDIBuilderCreateSubroutineType(\n                 DIB(cx),\n-                unknown_file_metadata(cx),\n                 create_DIArray(DIB(cx), &signature_metadata[..]),\n             )\n         },\n@@ -635,14 +634,12 @@ pub fn type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>, usage_site_span: Sp\n                     // anything reading the debuginfo for a recursive\n                     // type is going to see *something* weird - the only\n                     // question is what exactly it will see.\n-                    let (size, align) = cx.size_and_align_of(t);\n                     let name = \"<recur_type>\";\n                     llvm::LLVMRustDIBuilderCreateBasicType(\n                         DIB(cx),\n                         name.as_ptr().cast(),\n                         name.len(),\n-                        size.bits(),\n-                        align.bits() as u32,\n+                        cx.size_of(t).bits(),\n                         DW_ATE_unsigned,\n                     )\n                 }\n@@ -841,14 +838,12 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n         _ => bug!(\"debuginfo::basic_type_metadata - `t` is invalid type\"),\n     };\n \n-    let (size, align) = cx.size_and_align_of(t);\n     let ty_metadata = unsafe {\n         llvm::LLVMRustDIBuilderCreateBasicType(\n             DIB(cx),\n             name.as_ptr().cast(),\n             name.len(),\n-            size.bits(),\n-            align.bits() as u32,\n+            cx.size_of(t).bits(),\n             encoding,\n         )\n     };\n@@ -2187,9 +2182,6 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> Option<&'\n                                 name.as_ptr().cast(),\n                                 name.len(),\n                                 actual_type_metadata,\n-                                unknown_file_metadata(cx),\n-                                0,\n-                                0,\n                             ))\n                         })\n                     } else {"}, {"sha": "8c580847ef8fdad866019975ef219134b26efa0a", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -252,7 +252,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         let function_type_metadata = unsafe {\n             let fn_signature = get_function_signature(self, fn_abi);\n-            llvm::LLVMRustDIBuilderCreateSubroutineType(DIB(self), file_metadata, fn_signature)\n+            llvm::LLVMRustDIBuilderCreateSubroutineType(DIB(self), fn_signature)\n         };\n \n         // Find the enclosing function, in case this is a closure.\n@@ -265,8 +265,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         // name if necessary.\n         let generics = self.tcx().generics_of(enclosing_fn_def_id);\n         let substs = instance.substs.truncate_to(self.tcx(), generics);\n-        let template_parameters =\n-            get_template_parameters(self, &generics, substs, file_metadata, &mut name);\n+        let template_parameters = get_template_parameters(self, &generics, substs, &mut name);\n \n         // Get the linkage_name, which is just the symbol name\n         let linkage_name = mangled_name_of_instance(self, instance);\n@@ -388,7 +387,6 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             cx: &CodegenCx<'ll, 'tcx>,\n             generics: &ty::Generics,\n             substs: SubstsRef<'tcx>,\n-            file_metadata: &'ll DIFile,\n             name_to_append_suffix_to: &mut String,\n         ) -> &'ll DIArray {\n             if substs.types().next().is_none() {\n@@ -429,9 +427,6 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                                     name.as_ptr().cast(),\n                                     name.len(),\n                                     actual_type_metadata,\n-                                    file_metadata,\n-                                    0,\n-                                    0,\n                                 ))\n                             })\n                         } else {"}, {"sha": "3fb7ff3cb8dfd8420265a6ec4227d6d8259e6942", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -1655,7 +1655,6 @@ extern \"C\" {\n \n     pub fn LLVMRustDIBuilderCreateSubroutineType(\n         Builder: &DIBuilder<'a>,\n-        File: &'a DIFile,\n         ParameterTypes: &'a DIArray,\n     ) -> &'a DICompositeType;\n \n@@ -1682,7 +1681,6 @@ extern \"C\" {\n         Name: *const c_char,\n         NameLen: size_t,\n         SizeInBits: u64,\n-        AlignInBits: u32,\n         Encoding: c_uint,\n     ) -> &'a DIBasicType;\n \n@@ -1880,9 +1878,6 @@ extern \"C\" {\n         Name: *const c_char,\n         NameLen: size_t,\n         Ty: &'a DIType,\n-        File: &'a DIFile,\n-        LineNo: c_uint,\n-        ColumnNo: c_uint,\n     ) -> &'a DITemplateTypeParameter;\n \n     pub fn LLVMRustDIBuilderCreateNameSpace(\n@@ -1948,7 +1943,6 @@ extern \"C\" {\n         Reloc: RelocModel,\n         Level: CodeGenOptLevel,\n         UseSoftFP: bool,\n-        PositionIndependentExecutable: bool,\n         FunctionSections: bool,\n         DataSections: bool,\n         TrapUnreachable: bool,"}, {"sha": "11005b8336fcae927cb51692ed303202ffd2039a", "filename": "src/librustc_error_codes/error_codes/E0590.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0590.md", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0590.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0590.md?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -1,13 +1,17 @@\n-`break` or `continue` must include a label when used in the condition of a\n-`while` loop.\n+`break` or `continue` keywords were used in a condition of a `while` loop\n+without a label.\n \n-Example of erroneous code:\n+Erroneous code code:\n \n ```compile_fail,E0590\n while break {}\n ```\n \n+`break` or `continue` must include a label when used in the condition of a\n+`while` loop.\n+\n To fix this, add a label specifying which loop is being broken out of:\n+\n ```\n 'foo: while break 'foo {}\n ```"}, {"sha": "1902d73f4d00ca2a90257c91e7a3ebbb16d906c1", "filename": "src/librustc_error_codes/error_codes/E0593.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0593.md", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0593.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0593.md?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -11,3 +11,14 @@ fn main() {\n     foo(|y| { });\n }\n ```\n+\n+You have to provide the same number of arguments as expected by the `Fn`-based\n+type. So to fix the previous example, we need to remove the `y` argument:\n+\n+```\n+fn foo<F: Fn()>(x: F) { }\n+\n+fn main() {\n+    foo(|| { }); // ok!\n+}\n+```"}, {"sha": "0760bd523b7c33134b91a114b8d2e9cae0dcc271", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -631,13 +631,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 param_env,\n                 new_trait_ref.without_const().to_predicate(self.tcx),\n             );\n+\n             if self.predicate_must_hold_modulo_regions(&new_obligation) {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                     // We have a very specific type of error, where just borrowing this argument\n                     // might solve the problem. In cases like this, the important part is the\n                     // original type obligation, not the last one that failed, which is arbitrary.\n                     // Because of this, we modify the error to refer to the original obligation and\n                     // return early in the caller.\n+\n                     let msg = format!(\n                         \"the trait bound `{}: {}` is not satisfied\",\n                         found,\n@@ -660,12 +662,23 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             obligation.parent_trait_ref.skip_binder().print_only_trait_path(),\n                         ),\n                     );\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider borrowing here\",\n-                        format!(\"&{}\", snippet),\n-                        Applicability::MaybeIncorrect,\n-                    );\n+\n+                    // This if is to prevent a special edge-case\n+                    if !span.from_expansion() {\n+                        // We don't want a borrowing suggestion on the fields in structs,\n+                        // ```\n+                        // struct Foo {\n+                        //  the_foos: Vec<Foo>\n+                        // }\n+                        // ```\n+\n+                        err.span_suggestion(\n+                            span,\n+                            \"consider borrowing here\",\n+                            format!(\"&{}\", snippet),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                     return true;\n                 }\n             }"}, {"sha": "6e2478b8308af7d443c6986bbe8166c9748d3fc8", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -856,16 +856,23 @@ impl From<Ipv6Addr> for IpAddr {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Ipv4Addr {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        const IPV4_BUF_LEN: usize = 15; // Long enough for the longest possible IPv4 address\n-        let mut buf = [0u8; IPV4_BUF_LEN];\n-        let mut buf_slice = &mut buf[..];\n         let octets = self.octets();\n-        // Note: The call to write should never fail, hence the unwrap\n-        write!(buf_slice, \"{}.{}.{}.{}\", octets[0], octets[1], octets[2], octets[3]).unwrap();\n-        let len = IPV4_BUF_LEN - buf_slice.len();\n-        // This unsafe is OK because we know what is being written to the buffer\n-        let buf = unsafe { crate::str::from_utf8_unchecked(&buf[..len]) };\n-        fmt.pad(buf)\n+        // Fast Path: if there's no alignment stuff, write directly to the buffer\n+        if fmt.precision().is_none() && fmt.width().is_none() {\n+            write!(fmt, \"{}.{}.{}.{}\", octets[0], octets[1], octets[2], octets[3])\n+        } else {\n+            const IPV4_BUF_LEN: usize = 15; // Long enough for the longest possible IPv4 address\n+            let mut buf = [0u8; IPV4_BUF_LEN];\n+            let mut buf_slice = &mut buf[..];\n+\n+            // Note: The call to write should never fail, hence the unwrap\n+            write!(buf_slice, \"{}.{}.{}.{}\", octets[0], octets[1], octets[2], octets[3]).unwrap();\n+            let len = IPV4_BUF_LEN - buf_slice.len();\n+\n+            // This unsafe is OK because we know what is being written to the buffer\n+            let buf = unsafe { crate::str::from_utf8_unchecked(&buf[..len]) };\n+            fmt.pad(buf)\n+        }\n     }\n }\n "}, {"sha": "048ce24d6ba889a8559297b84054c3526dc5aab4", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -111,7 +111,7 @@ pub trait CommandExt {\n     ///\n     /// Set the first process argument, `argv[0]`, to something other than the\n     /// default executable path.\n-    #[unstable(feature = \"process_set_argv0\", issue = \"66510\")]\n+    #[stable(feature = \"process_set_argv0\", since = \"1.45.0\")]\n     fn arg0<S>(&mut self, arg: S) -> &mut process::Command\n     where\n         S: AsRef<OsStr>;"}, {"sha": "c3710f4b9124d70a2e9326b9808efc2a92ad091f", "filename": "src/libstd/sys/vxworks/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Fprocess.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -111,7 +111,7 @@ pub trait CommandExt {\n     ///\n     /// Set the first process argument, `argv[0]`, to something other than the\n     /// default executable path.\n-    #[unstable(feature = \"process_set_argv0\", issue = \"66510\")]\n+    #[stable(feature = \"process_set_argv0\", since = \"1.45.0\")]\n     fn arg0<S>(&mut self, arg: S) -> &mut process::Command\n     where\n         S: AsRef<OsStr>;"}, {"sha": "02dcfb8e829529c1d757ebaec3845794dcbcff73", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -445,7 +445,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     const char *TripleStr, const char *CPU, const char *Feature,\n     const char *ABIStr, LLVMRustCodeModel RustCM, LLVMRustRelocModel RustReloc,\n     LLVMRustCodeGenOptLevel RustOptLevel, bool UseSoftFloat,\n-    bool PositionIndependentExecutable, bool FunctionSections,\n+    bool FunctionSections,\n     bool DataSections,\n     bool TrapUnreachable,\n     bool Singlethread,"}, {"sha": "24f35627d10e5b7287697b791d8bfde1ed7afb81", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -720,7 +720,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFile(\n \n extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateSubroutineType(LLVMRustDIBuilderRef Builder,\n-                                      LLVMMetadataRef File,\n                                       LLVMMetadataRef ParameterTypes) {\n   return wrap(Builder->createSubroutineType(\n       DITypeRefArray(unwrap<MDTuple>(ParameterTypes))));\n@@ -755,7 +754,7 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateBasicType(\n     LLVMRustDIBuilderRef Builder, const char *Name, size_t NameLen,\n-    uint64_t SizeInBits, uint32_t AlignInBits, unsigned Encoding) {\n+    uint64_t SizeInBits, unsigned Encoding) {\n   return wrap(Builder->createBasicType(StringRef(Name, NameLen), SizeInBits, Encoding));\n }\n \n@@ -964,9 +963,7 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateUnionType(\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateTemplateTypeParameter(\n     LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope,\n-    const char *Name, size_t NameLen,\n-    LLVMMetadataRef Ty, LLVMMetadataRef File, unsigned LineNo,\n-    unsigned ColumnNo) {\n+    const char *Name, size_t NameLen, LLVMMetadataRef Ty) {\n   return wrap(Builder->createTemplateTypeParameter(\n       unwrapDI<DIDescriptor>(Scope), StringRef(Name, NameLen), unwrapDI<DIType>(Ty)));\n }"}, {"sha": "cb948a91c1054babcbbabe8e3b793cfbe92a4246", "filename": "src/test/ui/command/command-argv0-debug.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0-debug.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -4,8 +4,6 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n-#![feature(process_set_argv0)]\n-\n use std::os::unix::process::CommandExt;\n use std::process::Command;\n "}, {"sha": "e3394e0567cb857be3ffff16c9e7f2630a1a9ca7", "filename": "src/test/ui/command/command-argv0.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -4,8 +4,6 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n-#![feature(process_set_argv0)]\n-\n use std::env;\n use std::os::unix::process::CommandExt;\n use std::process::Command;"}, {"sha": "b21756e2b637fa2a6e279a131d4b989b6ed3cceb", "filename": "src/test/ui/traits/traits-issue-71136.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-71136.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-71136.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-71136.rs?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -0,0 +1,8 @@\n+struct Foo(u8);\n+\n+#[derive(Clone)]\n+struct FooHolster {\n+    the_foos: Vec<Foo>, //~ERROR Clone\n+}\n+\n+fn main() {}"}, {"sha": "4c0a43062f60d0f9c42b5c758706619f6f4375af", "filename": "src/test/ui/traits/traits-issue-71136.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-71136.stderr?ref=215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "patch": "@@ -0,0 +1,13 @@\n+error[E0277]: the trait bound `Foo: std::clone::Clone` is not satisfied\n+  --> $DIR/traits-issue-71136.rs:5:5\n+   |\n+LL |     the_foos: Vec<Foo>,\n+   |     ^^^^^^^^^^^^^^^^^^ expected an implementor of trait `std::clone::Clone`\n+   |\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<Foo>`\n+   = note: required by `std::clone::Clone::clone`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}