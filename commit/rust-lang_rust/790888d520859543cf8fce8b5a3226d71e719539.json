{"sha": "790888d520859543cf8fce8b5a3226d71e719539", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MDg4OGQ1MjA4NTk1NDNjZjhmY2U4YjVhMzIyNmQ3MWU3MTk1Mzk=", "commit": {"author": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2021-06-05T13:38:38Z"}, "committer": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2021-06-05T16:54:41Z"}, "message": "Fixed failing tests", "tree": {"sha": "0ad2710b3731276b28f4eac8ab1860c076c37a91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ad2710b3731276b28f4eac8ab1860c076c37a91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/790888d520859543cf8fce8b5a3226d71e719539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/790888d520859543cf8fce8b5a3226d71e719539", "html_url": "https://github.com/rust-lang/rust/commit/790888d520859543cf8fce8b5a3226d71e719539", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/790888d520859543cf8fce8b5a3226d71e719539/comments", "author": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96747c1a460a241c42a9aa262eeb37b910f06760", "url": "https://api.github.com/repos/rust-lang/rust/commits/96747c1a460a241c42a9aa262eeb37b910f06760", "html_url": "https://github.com/rust-lang/rust/commit/96747c1a460a241c42a9aa262eeb37b910f06760"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "3698e548bd203f719da9dcce253e98379b575ff8", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/790888d520859543cf8fce8b5a3226d71e719539/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790888d520859543cf8fce8b5a3226d71e719539/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=790888d520859543cf8fce8b5a3226d71e719539", "patch": "@@ -3,6 +3,7 @@ use clippy_utils::source::snippet_with_macro_callsite;\n use clippy_utils::{get_parent_expr_for_hir, in_macro, spans_on_same_line, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n use rustc_hir::{Block, BlockCheckMode, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -45,23 +46,8 @@ impl LateLintPass<'_> for SemicolonIfNothingReturned {\n             if t_expr.is_unit();\n             if let snippet = snippet_with_macro_callsite(cx, expr.span, \"}\");\n             if !snippet.ends_with('}');\n+            if !check_if_inside_block_on_same_line(cx, block, expr);\n             then {\n-                // check if the block is inside a closure or an unsafe block and don't\n-                // emit if the block is on the same line\n-                if_chain! {\n-                    if let Some(parent) = get_parent_expr_for_hir(cx, block.hir_id);\n-\n-                    if !matches!(block.rules, BlockCheckMode::DefaultBlock) ||\n-                    matches!(parent.kind, ExprKind::Closure(..) | ExprKind::Block(..));\n-\n-                    if block.stmts.len() == 0;\n-\n-                    if spans_on_same_line(cx, parent.span, expr.span);\n-                    then {\n-                        return;\n-                    }\n-                }\n-\n                 // filter out the desugared `for` loop\n                 if let ExprKind::DropTemps(..) = &expr.kind {\n                     return;\n@@ -82,3 +68,23 @@ impl LateLintPass<'_> for SemicolonIfNothingReturned {\n         }\n     }\n }\n+\n+/// Check if this block is inside a closure or an unsafe block or a normal on the same line.\n+fn check_if_inside_block_on_same_line<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    block: &'tcx Block<'tcx>,\n+    last_expr: &'tcx Expr<'_>,\n+) -> bool {\n+    if_chain! {\n+        if let Some(parent) = get_parent_expr_for_hir(cx, block.hir_id);\n+\n+        if !matches!(block.rules, BlockCheckMode::DefaultBlock) ||\n+        matches!(parent.kind, ExprKind::Closure(..) | ExprKind::Block(..));\n+\n+        if block.stmts.is_empty();\n+        then {\n+            return spans_on_same_line(cx, parent.span, last_expr.span);\n+        }\n+    }\n+    false\n+}"}]}