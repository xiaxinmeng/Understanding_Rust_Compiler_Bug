{"sha": "f2c88c1b8093009cd52312fdc082aecf0730072e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYzg4YzFiODA5MzAwOWNkNTIzMTJmZGMwODJhZWNmMDczMDA3MmU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2011-12-28T21:08:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2011-12-28T21:08:28Z"}, "message": "Merge pull request #1385 from Lenny222/quotes\n\nUse singlequotes in the typechecker error messages too, to distinguish code and English", "tree": {"sha": "54c65715163510a2ed9a7437350b34cf26a5b473", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54c65715163510a2ed9a7437350b34cf26a5b473"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2c88c1b8093009cd52312fdc082aecf0730072e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c88c1b8093009cd52312fdc082aecf0730072e", "html_url": "https://github.com/rust-lang/rust/commit/f2c88c1b8093009cd52312fdc082aecf0730072e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2c88c1b8093009cd52312fdc082aecf0730072e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c", "html_url": "https://github.com/rust-lang/rust/commit/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c"}, {"sha": "0b9751b141af92cc41795c99e64b706b402617cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9751b141af92cc41795c99e64b706b402617cd", "html_url": "https://github.com/rust-lang/rust/commit/0b9751b141af92cc41795c99e64b706b402617cd"}], "stats": {"total": 95, "additions": 49, "deletions": 46}, "files": [{"sha": "372106f4d910ba4fdca49f38430e860ff57d8efa", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -369,7 +369,7 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n         alt mode {\n           m_check_tyvar(fcx) { ret next_ty_var(fcx); }\n           _ { tcx.sess.span_bug(ast_ty.span,\n-                                \"found ty_infer in unexpected place\"); }\n+                                \"found 'ty_infer' in unexpected place\"); }\n         }\n       }\n     }\n@@ -895,11 +895,12 @@ mod demand {\n             let e_err = resolve_type_vars_if_possible(fcx, expected);\n             let a_err = resolve_type_vars_if_possible(fcx, actual);\n             fcx.ccx.tcx.sess.span_err(sp,\n-                                      \"mismatched types: expected \" +\n+                                      \"mismatched types: expected '\" +\n                                           ty_to_str(fcx.ccx.tcx, e_err) +\n-                                          \" but found \" +\n-                                          ty_to_str(fcx.ccx.tcx, a_err) + \" (\"\n-                                          + ty::type_err_to_str(err) + \")\");\n+                                          \"' but found '\" +\n+                                          ty_to_str(fcx.ccx.tcx, a_err) +\n+                                          \"' (\" + ty::type_err_to_str(err) +\n+                                          \")\");\n             ret mk_result(fcx, expected, ty_param_subst_var_ids);\n           }\n         }\n@@ -1302,7 +1303,7 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n             // can never tell.\n             fcx.ccx.tcx.sess.span_fatal\n                 (pat.span,\n-                 #fmt[\"mismatched types: expected %s, found tag\",\n+                 #fmt[\"mismatched types: expected '%s' but found tag\",\n                       ty_to_str(fcx.ccx.tcx, expected)]);\n           }\n         }\n@@ -1314,7 +1315,8 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n           ty::ty_rec(fields) { ex_fields = fields; }\n           _ {\n             fcx.ccx.tcx.sess.span_fatal\n-                (pat.span, #fmt[\"mismatched types: expected %s, found record\",\n+                (pat.span,\n+                #fmt[\"mismatched types: expected '%s' but found record\",\n                                 ty_to_str(fcx.ccx.tcx, expected)]);\n           }\n         }\n@@ -1336,7 +1338,7 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n               none. {\n                 fcx.ccx.tcx.sess.span_fatal(pat.span,\n                                             #fmt[\"mismatched types: did not \\\n-                                             expect a record with a field %s\",\n+                                           expect a record with a field '%s'\",\n                                                  f.ident]);\n               }\n             }\n@@ -1349,8 +1351,9 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n           ty::ty_tup(elts) { ex_elts = elts; }\n           _ {\n             fcx.ccx.tcx.sess.span_fatal\n-                (pat.span, #fmt[\"mismatched types: expected %s, found tuple\",\n-                                ty_to_str(fcx.ccx.tcx, expected)]);\n+                (pat.span,\n+                 #fmt[\"mismatched types: expected '%s', found tuple\",\n+                        ty_to_str(fcx.ccx.tcx, expected)]);\n           }\n         }\n         let e_count = vec::len(elts);\n@@ -1372,9 +1375,9 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n           }\n           _ {\n             fcx.ccx.tcx.sess.span_fatal(pat.span,\n-                                        \"mismatched types: expected \" +\n+                                        \"mismatched types: expected '\" +\n                                             ty_to_str(fcx.ccx.tcx, expected) +\n-                                            \" found box\");\n+                                            \"' found box\");\n           }\n         }\n       }\n@@ -1386,9 +1389,9 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n           }\n           _ {\n             fcx.ccx.tcx.sess.span_fatal(pat.span,\n-                                        \"mismatched types: expected \" +\n+                                        \"mismatched types: expected '\" +\n                                             ty_to_str(fcx.ccx.tcx, expected) +\n-                                            \" found uniq\");\n+                                            \"' found uniq\");\n           }\n         }\n       }\n@@ -1790,8 +1793,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             if !type_is_integral(fcx, oper.span, oper_t) &&\n                    structure_of(fcx, oper.span, oper_t) != ty::ty_bool {\n                 tcx.sess.span_err(expr.span,\n-                                  #fmt[\"mismatched types: expected bool \\\n-                          or integer but found %s\",\n+                                  #fmt[\"mismatched types: expected 'bool' \\\n+                          or 'integer' but found '%s'\",\n                                        ty_to_str(tcx, oper_t)]);\n             }\n           }\n@@ -1801,8 +1804,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                      ty::type_is_fp(tcx, oper_t)) {\n                 tcx.sess.span_err(expr.span,\n                                   \"applying unary minus to \\\n-                   non-numeric type \"\n-                                      + ty_to_str(tcx, oper_t));\n+                   non-numeric type '\"\n+                                      + ty_to_str(tcx, oper_t) + \"'\");\n             }\n           }\n         }\n@@ -1918,7 +1921,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n           _ {\n             tcx.sess.span_fatal(expr.span,\n                                 \"mismatched types: expected vector or string \"\n-                                + \"but found \" + ty_to_str(tcx, ety));\n+                                + \"but found '\" + ty_to_str(tcx, ety) + \"'\");\n           }\n         }\n         bot |= check_for(fcx, decl, elt_ty, body, id);\n@@ -2249,8 +2252,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         if !type_is_integral(fcx, idx.span, idx_t) {\n             tcx.sess.span_err(idx.span,\n                               \"mismatched types: expected \\\n-                               integer but found \"\n-                                  + ty_to_str(tcx, idx_t));\n+                               'integer' but found '\"\n+                                  + ty_to_str(tcx, idx_t) + \"'\");\n         }\n         alt structure_of(fcx, expr.span, base_t) {\n           ty::ty_vec(mt) { write::ty_only_fixup(fcx, id, mt.ty); }\n@@ -2687,13 +2690,13 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n                       some(m) {\n                         if !ty::same_method(ccx.tcx, m, if_m) {\n                             ccx.tcx.sess.span_err(\n-                                ty.span, \"method \" + if_m.ident +\n-                                \" has the wrong type\");\n+                                ty.span, \"method '\" + if_m.ident +\n+                                \"' has the wrong type\");\n                         }\n                       }\n                       none. {\n-                        ccx.tcx.sess.span_err(ty.span, \"missing method \" +\n-                                              if_m.ident);\n+                        ccx.tcx.sess.span_err(ty.span, \"missing method '\" +\n+                                              if_m.ident + \"'\");\n                       }\n                     }\n                 }\n@@ -2737,15 +2740,15 @@ fn check_main_fn_ty(tcx: ty::ctxt, main_id: ast::node_id) {\n         if !ok {\n             let span = ast_map::node_span(tcx.items.get(main_id));\n             tcx.sess.span_err(span,\n-                              \"wrong type in main function: found \" +\n-                                  ty_to_str(tcx, main_t));\n+                              \"wrong type in main function: found '\" +\n+                                  ty_to_str(tcx, main_t) + \"'\");\n         }\n       }\n       _ {\n         let span = ast_map::node_span(tcx.items.get(main_id));\n         tcx.sess.span_bug(span,\n-                          \"main has a non-function type: found\" +\n-                              ty_to_str(tcx, main_t));\n+                          \"main has a non-function type: found '\" +\n+                              ty_to_str(tcx, main_t) + \"'\");\n       }\n     }\n }"}, {"sha": "d37292a2346e2c9706bea3018498ee277a684452", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected str but found int\n+// error-pattern:expected 'str' but found 'int'\n \n const i: str = 10;\n fn main() { log(debug, i); }"}, {"sha": "139b378a9566e95a83fab3410aed77731f672032", "filename": "src/test/compile-fail/bad-record-pat-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fbad-record-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fbad-record-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-record-pat-2.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:did not expect a record with a field q\n+// error-pattern:did not expect a record with a field 'q'\n \n fn main() { alt {x: 1, y: 2} { {x: x, q: q} { } } }"}, {"sha": "abdb353886eef066d3708dd105ff575b9915f42a", "filename": "src/test/compile-fail/fail-type-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:expected str but found [int]\n+// error-pattern:expected 'str' but found '[int]'\n fn main() { fail [0]; }"}, {"sha": "98d4b29d28003d0fd2d183e234b9d05edb3274a0", "filename": "src/test/compile-fail/fn-bare-bind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,9 +1,9 @@\n-// error-pattern:mismatched types: expected fn() but found fn@()\n+// error-pattern:mismatched types: expected 'fn()' but found 'fn@()'\n \n fn f() {\n }\n \n fn main() {\n     // Can't produce a bare function by binding\n     let g: fn() = bind f();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a7db554ea2f8ba134748140f34b4698267a248f7", "filename": "src/test/compile-fail/fn-compare-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected fn() but found fn(++int)\n+// error-pattern:expected 'fn()' but found 'fn(++int)'\n \n fn main() {\n     fn f() { }"}, {"sha": "8335e3c8c1d92d69b5fad993596de4c703e0be06", "filename": "src/test/compile-fail/main-wrong-type-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:wrong type in main function: found fn() -> char\n+// error-pattern:wrong type in main function: found 'fn() -> char'\n fn main() -> char { }"}, {"sha": "9a00f49c93b47c887c43a68cab662d64615f3bdb", "filename": "src/test/compile-fail/main-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:wrong type in main function: found fn(\n+// error-pattern:wrong type in main function: found 'fn(&&{x: int,y: int})'\n fn main(foo: {x: int, y: int}) { }"}, {"sha": "c16c0e54a49c9594cd4fae83243701be03be1d9a", "filename": "src/test/compile-fail/minus-string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fminus-string.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:applying unary minus to non-numeric type str\n+// error-pattern:applying unary minus to non-numeric type 'str'\n \n fn main() { -\"foo\"; }"}, {"sha": "ebf25e8f36273765cc10887507e68d2c547ae70c", "filename": "src/test/compile-fail/native-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected *Mb but found native\n+// error-pattern:expected '*Mb' but found 'native'\n use std;\n \n fn main() unsafe {"}, {"sha": "f78bb519d841c1b66e7c40819f177283525f65f1", "filename": "src/test/compile-fail/nonsense-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fnonsense-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fnonsense-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonsense-constraints.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,5 +1,5 @@\n // Tests that the typechecker checks constraints\n-// error-pattern:mismatched types: expected uint but found u8\n+// error-pattern:mismatched types: expected 'uint' but found 'u8'\n use std;\n import uint;\n "}, {"sha": "5862c1c985b5002f23cd8df6fbca31f70e2c7062", "filename": "src/test/compile-fail/rec-extend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Frec-extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Frec-extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frec-extend.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected int but found bool\n+// error-pattern:expected 'int' but found 'bool'\n \n fn main() {\n "}, {"sha": "ef55eb40d377c37afa00a06a833f9d42f4392a5c", "filename": "src/test/compile-fail/sendfn-is-not-a-lambda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: mismatched types: expected lambda(++uint) -> uint\n+// error-pattern: mismatched types: expected 'lambda(++uint) -> uint'\n \n fn test(f: lambda(uint) -> uint) -> uint {\n     ret f(22u);\n@@ -7,4 +7,4 @@ fn test(f: lambda(uint) -> uint) -> uint {\n fn main() {\n     let f = sendfn(x: uint) -> uint { ret 4u; };\n     log(debug, test(f));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "936776cbdfcf4788c5ac1dacdb845be70ca3b344", "filename": "src/test/compile-fail/type-mismatch-multiple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,5 +1,5 @@\n // Checking that the compiler reports multiple type errors at once\n-// error-pattern:mismatched types: expected bool\n-// error-pattern:mismatched types: expected int\n+// error-pattern:mismatched types: expected 'bool'\n+// error-pattern:mismatched types: expected 'int'\n \n fn main() { let a: bool = 1; let b: int = true; }"}, {"sha": "6cae41b9b9f1d39f991723489035e66a99496caa", "filename": "src/test/compile-fail/type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c88c1b8093009cd52312fdc082aecf0730072e/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs?ref=f2c88c1b8093009cd52312fdc082aecf0730072e", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected bool but found int\n+// error-pattern:expected 'bool' but found 'int'\n // issue #516\n \n fn main() { let x = true; let y = 1; let z = x + y; }"}]}