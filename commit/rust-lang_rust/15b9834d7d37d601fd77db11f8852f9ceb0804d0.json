{"sha": "15b9834d7d37d601fd77db11f8852f9ceb0804d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1Yjk4MzRkN2QzN2Q2MDFmZDc3ZGIxMWY4ODUyZjljZWIwODA0ZDA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-30T13:41:33Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-30T13:42:07Z"}, "message": "Don't copy ByRef passed types to local stack slot when not necessary\n\nEg when the local is immutable **and** the type is freeze.\n\nThis makes the simple raytracer runtime benchmark 1% faster than cg_llvm\nwithout optimizations. Before it was 2% slower.\n\ncc #691\ncc #684", "tree": {"sha": "88cbecfbdd562beb49c4ea8f8fb978b2d97d5eb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88cbecfbdd562beb49c4ea8f8fb978b2d97d5eb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15b9834d7d37d601fd77db11f8852f9ceb0804d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15b9834d7d37d601fd77db11f8852f9ceb0804d0", "html_url": "https://github.com/rust-lang/rust/commit/15b9834d7d37d601fd77db11f8852f9ceb0804d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15b9834d7d37d601fd77db11f8852f9ceb0804d0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76d2e085db71370cb34fc12fc544f46e557e743d", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d2e085db71370cb34fc12fc544f46e557e743d", "html_url": "https://github.com/rust-lang/rust/commit/76d2e085db71370cb34fc12fc544f46e557e743d"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "5878e8548d9269d1180cbba739de6b1d5d05324e", "filename": "example/example.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15b9834d7d37d601fd77db11f8852f9ceb0804d0/example%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9834d7d37d601fd77db11f8852f9ceb0804d0/example%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fexample.rs?ref=15b9834d7d37d601fd77db11f8852f9ceb0804d0", "patch": "@@ -202,3 +202,7 @@ fn get_sized_field_ref_from_unsized_type(u: &Unsized) -> &u8 {\n fn get_unsized_field_ref_from_unsized_type(u: &Unsized) -> &str {\n     &u.1\n }\n+\n+pub fn reuse_byref_argument_storage(a: (u8, u16, u32)) -> u8 {\n+    a.0\n+}"}, {"sha": "77649e40b19acf95c30eb472cbf9719edab286b7", "filename": "src/abi/comments.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15b9834d7d37d601fd77db11f8852f9ceb0804d0/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9834d7d37d601fd77db11f8852f9ceb0804d0/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=15b9834d7d37d601fd77db11f8852f9ceb0804d0", "patch": "@@ -94,6 +94,15 @@ pub fn add_local_place_comments<'tcx>(\n             align.abi.bytes(),\n             align.pref.bytes(),\n         )),\n-        CPlaceInner::Addr(_, _) => unreachable!(),\n+        CPlaceInner::Addr(addr, None) => fx.add_global_comment(format!(\n+            \"reuse {:5} {:20} {:4}b {}, {}              storage={}\",\n+            format!(\"{:?}\", local),\n+            format!(\"{:?}\", ty),\n+            size.bytes(),\n+            align.abi.bytes(),\n+            align.pref.bytes(),\n+            addr,\n+        )),\n+        CPlaceInner::Addr(_, Some(_)) => unreachable!(),\n     }\n }"}, {"sha": "452776947028c4e3cbf54791d4577f89a2e2d416", "filename": "src/abi/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/15b9834d7d37d601fd77db11f8852f9ceb0804d0/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9834d7d37d601fd77db11f8852f9ceb0804d0/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=15b9834d7d37d601fd77db11f8852f9ceb0804d0", "patch": "@@ -282,6 +282,34 @@ pub fn codegen_fn_prelude(\n             .unwrap()\n             .contains(crate::analyze::Flags::NOT_SSA);\n \n+        match arg_kind {\n+            ArgKind::Normal(Some(val)) => {\n+                if let Some(addr) = val.try_to_addr() {\n+                    let local_decl = &fx.mir.local_decls[local];\n+                    //                             v this ! is important\n+                    let internally_mutable = !val.layout().ty.is_freeze(\n+                        fx.tcx,\n+                        ParamEnv::reveal_all(),\n+                        local_decl.source_info.span,\n+                    );\n+                    if local_decl.mutability == mir::Mutability::Not && internally_mutable {\n+                        // We wont mutate this argument, so it is fine to borrow the backing storage\n+                        // of this argument, to prevent a copy.\n+\n+                        let place = CPlace::for_addr(addr, val.layout());\n+\n+                        #[cfg(debug_assertions)]\n+                        self::comments::add_local_place_comments(fx, place, local);\n+\n+                        let prev_place = fx.local_map.insert(local, place);\n+                        debug_assert!(prev_place.is_none());\n+                        continue;\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+\n         let place = local_place(fx, local, layout, is_ssa);\n \n         match arg_kind {"}, {"sha": "b1da6e2b4ea0c1a4af538675162c57d9a059fa07", "filename": "src/value_and_place.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15b9834d7d37d601fd77db11f8852f9ceb0804d0/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b9834d7d37d601fd77db11f8852f9ceb0804d0/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=15b9834d7d37d601fd77db11f8852f9ceb0804d0", "patch": "@@ -63,6 +63,13 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n+    pub fn try_to_addr(self) -> Option<Value> {\n+        match self.0 {\n+            CValueInner::ByRef(addr) => Some(addr),\n+            CValueInner::ByVal(_) | CValueInner::ByValPair(_, _) => None,\n+        }\n+    }\n+\n     /// Load a value with layout.abi of scalar\n     pub fn load_scalar<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Value {\n         let layout = self.1;"}]}