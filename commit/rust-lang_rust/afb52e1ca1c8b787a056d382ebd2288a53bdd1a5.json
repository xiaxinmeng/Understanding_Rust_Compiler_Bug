{"sha": "afb52e1ca1c8b787a056d382ebd2288a53bdd1a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYjUyZTFjYTFjOGI3ODdhMDU2ZDM4MmViZDIyODhhNTNiZGQxYTU=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-11-05T13:57:53Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-11-05T13:57:53Z"}, "message": "Fix MIR inlining panic in generic function", "tree": {"sha": "bd60929c1e4275e8614c2fbdadfa492305f5303c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd60929c1e4275e8614c2fbdadfa492305f5303c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afb52e1ca1c8b787a056d382ebd2288a53bdd1a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afb52e1ca1c8b787a056d382ebd2288a53bdd1a5", "html_url": "https://github.com/rust-lang/rust/commit/afb52e1ca1c8b787a056d382ebd2288a53bdd1a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afb52e1ca1c8b787a056d382ebd2288a53bdd1a5/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4efcc660f09ce3e83d194889f6d1161bf865f788", "url": "https://api.github.com/repos/rust-lang/rust/commits/4efcc660f09ce3e83d194889f6d1161bf865f788", "html_url": "https://github.com/rust-lang/rust/commit/4efcc660f09ce3e83d194889f6d1161bf865f788"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "73fdbfe8831e3102156e9a8bc259713767581279", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/afb52e1ca1c8b787a056d382ebd2288a53bdd1a5/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb52e1ca1c8b787a056d382ebd2288a53bdd1a5/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=afb52e1ca1c8b787a056d382ebd2288a53bdd1a5", "patch": "@@ -99,6 +99,26 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         let substituted = self.erase_regions(&substituted);\n         AssociatedTypeNormalizer::new(self).fold(&substituted)\n     }\n+\n+    pub fn trans_apply_param_substs_env<T>(\n+        self,\n+        param_substs: &Substs<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        value: &T,\n+    ) -> T\n+    where\n+        T: TransNormalize<'tcx>,\n+    {\n+        debug!(\n+            \"apply_param_substs_env(param_substs={:?}, value={:?}, param_env={:?})\",\n+            param_substs,\n+            value,\n+            param_env,\n+        );\n+        let substituted = value.subst(self, param_substs);\n+        let substituted = self.erase_regions(&substituted);\n+        AssociatedTypeNormalizerEnv::new(self, param_env).fold(&substituted)\n+    }\n }\n \n struct AssociatedTypeNormalizer<'a, 'gcx: 'a> {\n@@ -134,6 +154,40 @@ impl<'a, 'gcx> TypeFolder<'gcx, 'gcx> for AssociatedTypeNormalizer<'a, 'gcx> {\n     }\n }\n \n+struct AssociatedTypeNormalizerEnv<'a, 'gcx: 'a> {\n+    tcx: TyCtxt<'a, 'gcx, 'gcx>,\n+    param_env: ty::ParamEnv<'gcx>,\n+}\n+\n+impl<'a, 'gcx> AssociatedTypeNormalizerEnv<'a, 'gcx> {\n+    fn new(tcx: TyCtxt<'a, 'gcx, 'gcx>, param_env: ty::ParamEnv<'gcx>) -> Self {\n+        Self { tcx, param_env }\n+    }\n+\n+    fn fold<T: TypeFoldable<'gcx>>(&mut self, value: &T) -> T {\n+        if !value.has_projections() {\n+            value.clone()\n+        } else {\n+            value.fold_with(self)\n+        }\n+    }\n+}\n+\n+impl<'a, 'gcx> TypeFolder<'gcx, 'gcx> for AssociatedTypeNormalizerEnv<'a, 'gcx> {\n+    fn tcx<'c>(&'c self) -> TyCtxt<'c, 'gcx, 'gcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'gcx>) -> Ty<'gcx> {\n+        if !ty.has_projections() {\n+            ty\n+        } else {\n+            debug!(\"AssociatedTypeNormalizerEnv: ty={:?}\", ty);\n+            self.tcx.normalize_associated_type_in_env(&ty, self.param_env)\n+        }\n+    }\n+}\n+\n // Implement DepTrackingMapConfig for `trait_cache`\n pub struct TraitSelectionCache<'tcx> {\n     data: PhantomData<&'tcx ()>"}, {"sha": "6ea953c3f7375bf5f055c35563e5f4020837d666", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afb52e1ca1c8b787a056d382ebd2288a53bdd1a5/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb52e1ca1c8b787a056d382ebd2288a53bdd1a5/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=afb52e1ca1c8b787a056d382ebd2288a53bdd1a5", "patch": "@@ -144,7 +144,7 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n             resolve_associated_item(tcx, &item, param_env, trait_def_id, substs)\n         } else {\n             let ty = tcx.type_of(def_id);\n-            let item_type = tcx.trans_apply_param_substs(substs, &ty);\n+            let item_type = tcx.trans_apply_param_substs_env(substs, param_env, &ty);\n \n             let def = match item_type.sty {\n                 ty::TyFnDef(..) if {"}, {"sha": "bd178f0e5bdaf528fa7ebf2029ff0290564022bf", "filename": "src/test/run-pass/mir-inlining/ice-issue-45493.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/afb52e1ca1c8b787a056d382ebd2288a53bdd1a5/src%2Ftest%2Frun-pass%2Fmir-inlining%2Fice-issue-45493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb52e1ca1c8b787a056d382ebd2288a53bdd1a5/src%2Ftest%2Frun-pass%2Fmir-inlining%2Fice-issue-45493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir-inlining%2Fice-issue-45493.rs?ref=afb52e1ca1c8b787a056d382ebd2288a53bdd1a5", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Zmir-opt-level=2\n+\n+trait Array {\n+    type Item;\n+}\n+\n+fn foo<A: Array>() {\n+    let _: *mut A::Item = std::ptr::null_mut();\n+}\n+\n+struct Foo;\n+impl Array for Foo { type Item = i32; }\n+\n+fn main() {\n+    foo::<Foo>();\n+}"}]}