{"sha": "7839827a39c9f2eff7dd8146d167de574d09809b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4Mzk4MjdhMzljOWYyZWZmN2RkODE0NmQxNjdkZTU3NGQwOTgwOWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-05T04:24:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-05T04:24:01Z"}, "message": "Auto merge of #29581 - gereeter:unwrap-defmap-refcell, r=nrc\n\nThis is basically a more conservative recreation of #24096.", "tree": {"sha": "b559cd0b8cda6eb86fd3f9614a2296108b23e39e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b559cd0b8cda6eb86fd3f9614a2296108b23e39e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7839827a39c9f2eff7dd8146d167de574d09809b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7839827a39c9f2eff7dd8146d167de574d09809b", "html_url": "https://github.com/rust-lang/rust/commit/7839827a39c9f2eff7dd8146d167de574d09809b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7839827a39c9f2eff7dd8146d167de574d09809b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "effcd29652bbf16981d9cd0d8a578681b2ed55bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/effcd29652bbf16981d9cd0d8a578681b2ed55bb", "html_url": "https://github.com/rust-lang/rust/commit/effcd29652bbf16981d9cd0d8a578681b2ed55bb"}, {"sha": "b1788ef8e1b9e2142dbb20d1f5a325fc9b9cb592", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1788ef8e1b9e2142dbb20d1f5a325fc9b9cb592", "html_url": "https://github.com/rust-lang/rust/commit/b1788ef8e1b9e2142dbb20d1f5a325fc9b9cb592"}], "stats": {"total": 104, "additions": 53, "deletions": 51}, "files": [{"sha": "5b931857decca24fa75c0338cd65efeec25d9d1b", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -472,7 +472,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                     let guard_exit = self.expr(&**guard, guard_start);\n \n                     let this_has_bindings = pat_util::pat_contains_bindings_or_wild(\n-                        &self.tcx.def_map, &**pat);\n+                        &self.tcx.def_map.borrow(), &**pat);\n \n                     // If both this pattern and the previous pattern\n                     // were free of bindings, they must consist only"}, {"sha": "f46e55e24414081edb708232852dbe98d5502ff9", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -702,7 +702,7 @@ fn is_useful(cx: &MatchCheckCtxt,\n \n             Some(constructor) => {\n                 let matrix = rows.iter().filter_map(|r| {\n-                    if pat_is_binding_or_wild(&cx.tcx.def_map, raw_pat(r[0])) {\n+                    if pat_is_binding_or_wild(&cx.tcx.def_map.borrow(), raw_pat(r[0])) {\n                         Some(r[1..].to_vec())\n                     } else {\n                         None\n@@ -1073,7 +1073,7 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n         // check legality of moving out of the enum\n \n         // x @ Foo(..) is legal, but x @ Foo(y) isn't.\n-        if sub.map_or(false, |p| pat_contains_bindings(def_map, &*p)) {\n+        if sub.map_or(false, |p| pat_contains_bindings(&def_map.borrow(), &*p)) {\n             span_err!(cx.tcx.sess, p.span, E0007, \"cannot bind by-move with sub-bindings\");\n         } else if has_guard {\n             span_err!(cx.tcx.sess, p.span, E0008, \"cannot bind by-move into a pattern guard\");\n@@ -1086,7 +1086,7 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n \n     for pat in pats {\n         front_util::walk_pat(&**pat, |p| {\n-            if pat_is_binding(def_map, &*p) {\n+            if pat_is_binding(&def_map.borrow(), &*p) {\n                 match p.node {\n                     hir::PatIdent(hir::BindByValue(_), _, ref sub) => {\n                         let pat_ty = tcx.node_id_to_type(p.id);\n@@ -1181,7 +1181,7 @@ struct AtBindingPatternVisitor<'a, 'b:'a, 'tcx:'b> {\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> {\n     fn visit_pat(&mut self, pat: &Pat) {\n-        if !self.bindings_allowed && pat_is_binding(&self.cx.tcx.def_map, pat) {\n+        if !self.bindings_allowed && pat_is_binding(&self.cx.tcx.def_map.borrow(), pat) {\n             span_err!(self.cx.tcx.sess, pat.span, E0303,\n                                       \"pattern bindings are not allowed \\\n                                        after an `@`\");"}, {"sha": "dd49010c4367232cd7b6b1eee144a0b1beb97935", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n     fn visit_expr(&mut self, e: &'ast hir::Expr) {\n         match e.node {\n             hir::ExprPath(..) => {\n-                match self.def_map.borrow().get(&e.id).map(|d| d.base_def) {\n+                match self.def_map.get(&e.id).map(|d| d.base_def) {\n                     Some(DefStatic(def_id, _)) |\n                     Some(DefAssociatedConst(def_id)) |\n                     Some(DefConst(def_id)) => {"}, {"sha": "b4280f86c7d584e68fbfe80b040b2514ae5affd3", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n     fn visit_arm(&mut self, arm: &hir::Arm) {\n         if arm.pats.len() == 1 {\n             let pat = &*arm.pats[0];\n-            let variants = pat_util::necessary_variants(&self.tcx.def_map, pat);\n+            let variants = pat_util::necessary_variants(&self.tcx.def_map.borrow(), pat);\n \n             // Inside the body, ignore constructions of variants\n             // necessary for the pattern to match. Those construction sites\n@@ -270,7 +270,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n             hir::PatStruct(_, ref fields, _) => {\n                 self.handle_field_pattern_match(pat, fields);\n             }\n-            _ if pat_util::pat_is_const(def_map, pat) => {\n+            _ if pat_util::pat_is_const(&def_map.borrow(), pat) => {\n                 // it might be the only use of a const\n                 self.lookup_and_handle_definition(&pat.id)\n             }"}, {"sha": "b1d24187957535040a75be1a5a394061954b16cb", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -17,8 +17,6 @@ use util::nodemap::NodeMap;\n use syntax::ast;\n use rustc_front::hir;\n \n-use std::cell::RefCell;\n-\n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Def {\n     DefFn(DefId, bool /* is_ctor */),\n@@ -103,7 +101,7 @@ impl PathResolution {\n }\n \n // Definition mapping\n-pub type DefMap = RefCell<NodeMap<PathResolution>>;\n+pub type DefMap = NodeMap<PathResolution>;\n // This is the replacement export map. It maps a module to all of the exports\n // within.\n pub type ExportMap = NodeMap<Vec<Export>>;"}, {"sha": "ce8d74bf191c784d4d1edd18714a3e94684d7380", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -934,7 +934,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         return_if_err!(self.mc.cat_pattern(cmt_discr, pat, |_mc, cmt_pat, pat| {\n             let tcx = self.tcx();\n             let def_map = &self.tcx().def_map;\n-            if pat_util::pat_is_binding(def_map, pat) {\n+            if pat_util::pat_is_binding(&def_map.borrow(), pat) {\n                 match pat.node {\n                     hir::PatIdent(hir::BindByRef(_), _, _) =>\n                         mode.lub(BorrowingMatch),\n@@ -969,7 +969,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         let def_map = &self.tcx().def_map;\n         let delegate = &mut self.delegate;\n         return_if_err!(mc.cat_pattern(cmt_discr.clone(), pat, |mc, cmt_pat, pat| {\n-            if pat_util::pat_is_binding(def_map, pat) {\n+            if pat_util::pat_is_binding(&def_map.borrow(), pat) {\n                 let tcx = typer.tcx;\n \n                 debug!(\"binding cmt_pat={:?} pat={:?} match_mode={:?}\","}, {"sha": "09132396054ff15fb15fa49416d60535c993d37a", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -18,11 +18,13 @@ use rustc_front::hir;\n use rustc_front::util::walk_pat;\n use syntax::codemap::{respan, Span, Spanned, DUMMY_SP};\n \n+use std::cell::RefCell;\n+\n pub type PatIdMap = FnvHashMap<ast::Name, ast::NodeId>;\n \n // This is used because same-named variables in alternative patterns need to\n // use the NodeId of their namesake in the first pattern.\n-pub fn pat_id_map(dm: &DefMap, pat: &hir::Pat) -> PatIdMap {\n+pub fn pat_id_map(dm: &RefCell<DefMap>, pat: &hir::Pat) -> PatIdMap {\n     let mut map = FnvHashMap();\n     pat_bindings(dm, pat, |_bm, p_id, _s, path1| {\n         map.insert(path1.node, p_id);\n@@ -36,7 +38,7 @@ pub fn pat_is_refutable(dm: &DefMap, pat: &hir::Pat) -> bool {\n         hir::PatEnum(_, _) |\n         hir::PatIdent(_, _, None) |\n         hir::PatStruct(..) => {\n-            match dm.borrow().get(&pat.id).map(|d| d.full_def()) {\n+            match dm.get(&pat.id).map(|d| d.full_def()) {\n                 Some(DefVariant(..)) => true,\n                 _ => false\n             }\n@@ -51,7 +53,7 @@ pub fn pat_is_variant_or_struct(dm: &DefMap, pat: &hir::Pat) -> bool {\n         hir::PatEnum(_, _) |\n         hir::PatIdent(_, _, None) |\n         hir::PatStruct(..) => {\n-            match dm.borrow().get(&pat.id).map(|d| d.full_def()) {\n+            match dm.get(&pat.id).map(|d| d.full_def()) {\n                 Some(DefVariant(..)) | Some(DefStruct(..)) => true,\n                 _ => false\n             }\n@@ -63,7 +65,7 @@ pub fn pat_is_variant_or_struct(dm: &DefMap, pat: &hir::Pat) -> bool {\n pub fn pat_is_const(dm: &DefMap, pat: &hir::Pat) -> bool {\n     match pat.node {\n         hir::PatIdent(_, _, None) | hir::PatEnum(..) | hir::PatQPath(..) => {\n-            match dm.borrow().get(&pat.id).map(|d| d.full_def()) {\n+            match dm.get(&pat.id).map(|d| d.full_def()) {\n                 Some(DefConst(..)) | Some(DefAssociatedConst(..)) => true,\n                 _ => false\n             }\n@@ -77,7 +79,7 @@ pub fn pat_is_const(dm: &DefMap, pat: &hir::Pat) -> bool {\n pub fn pat_is_resolved_const(dm: &DefMap, pat: &hir::Pat) -> bool {\n     match pat.node {\n         hir::PatIdent(_, _, None) | hir::PatEnum(..) | hir::PatQPath(..) => {\n-            match dm.borrow().get(&pat.id)\n+            match dm.get(&pat.id)\n                     .and_then(|d| if d.depth == 0 { Some(d.base_def) }\n                                   else { None } ) {\n                 Some(DefConst(..)) | Some(DefAssociatedConst(..)) => true,\n@@ -108,12 +110,12 @@ pub fn pat_is_binding_or_wild(dm: &DefMap, pat: &hir::Pat) -> bool {\n \n /// Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n /// `match foo() { Some(a) => (), None => () }`\n-pub fn pat_bindings<I>(dm: &DefMap, pat: &hir::Pat, mut it: I) where\n+pub fn pat_bindings<I>(dm: &RefCell<DefMap>, pat: &hir::Pat, mut it: I) where\n     I: FnMut(hir::BindingMode, ast::NodeId, Span, &Spanned<ast::Name>),\n {\n     walk_pat(pat, |p| {\n         match p.node {\n-          hir::PatIdent(binding_mode, ref pth, _) if pat_is_binding(dm, p) => {\n+          hir::PatIdent(binding_mode, ref pth, _) if pat_is_binding(&dm.borrow(), p) => {\n             it(binding_mode, p.id, p.span, &respan(pth.span, pth.node.name));\n           }\n           _ => {}\n@@ -122,12 +124,12 @@ pub fn pat_bindings<I>(dm: &DefMap, pat: &hir::Pat, mut it: I) where\n     });\n }\n \n-pub fn pat_bindings_hygienic<I>(dm: &DefMap, pat: &hir::Pat, mut it: I) where\n+pub fn pat_bindings_hygienic<I>(dm: &RefCell<DefMap>, pat: &hir::Pat, mut it: I) where\n     I: FnMut(hir::BindingMode, ast::NodeId, Span, &Spanned<ast::Ident>),\n {\n     walk_pat(pat, |p| {\n         match p.node {\n-          hir::PatIdent(binding_mode, ref pth, _) if pat_is_binding(dm, p) => {\n+          hir::PatIdent(binding_mode, ref pth, _) if pat_is_binding(&dm.borrow(), p) => {\n             it(binding_mode, p.id, p.span, &respan(pth.span, pth.node));\n           }\n           _ => {}\n@@ -153,7 +155,7 @@ pub fn pat_contains_bindings(dm: &DefMap, pat: &hir::Pat) -> bool {\n \n /// Checks if the pattern contains any `ref` or `ref mut` bindings,\n /// and if yes wether its containing mutable ones or just immutables ones.\n-pub fn pat_contains_ref_binding(dm: &DefMap, pat: &hir::Pat) -> Option<hir::Mutability> {\n+pub fn pat_contains_ref_binding(dm: &RefCell<DefMap>, pat: &hir::Pat) -> Option<hir::Mutability> {\n     let mut result = None;\n     pat_bindings(dm, pat, |mode, _, _, _| {\n         match mode {\n@@ -172,7 +174,7 @@ pub fn pat_contains_ref_binding(dm: &DefMap, pat: &hir::Pat) -> Option<hir::Muta\n \n /// Checks if the patterns for this arm contain any `ref` or `ref mut`\n /// bindings, and if yes wether its containing mutable ones or just immutables ones.\n-pub fn arm_contains_ref_binding(dm: &DefMap, arm: &hir::Arm) -> Option<hir::Mutability> {\n+pub fn arm_contains_ref_binding(dm: &RefCell<DefMap>, arm: &hir::Arm) -> Option<hir::Mutability> {\n     arm.pats.iter()\n             .filter_map(|pat| pat_contains_ref_binding(dm, pat))\n             .max_by(|m| match *m {\n@@ -226,7 +228,7 @@ pub fn necessary_variants(dm: &DefMap, pat: &hir::Pat) -> Vec<DefId> {\n             hir::PatEnum(_, _) |\n             hir::PatIdent(_, _, None) |\n             hir::PatStruct(..) => {\n-                match dm.borrow().get(&p.id) {\n+                match dm.get(&p.id) {\n                     Some(&PathResolution { base_def: DefVariant(_, id, _), .. }) => {\n                         variants.push(id);\n                     }"}, {"sha": "fa0c6c41ce5ccae18d2141e26394f72003d584cd", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -205,7 +205,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n             hir::TyPath(None, ref path) => {\n                 // if this path references a trait, then this will resolve to\n                 // a trait ref, which introduces a binding scope.\n-                match self.def_map.borrow().get(&ty.id).map(|d| (d.base_def, d.depth)) {\n+                match self.def_map.get(&ty.id).map(|d| (d.base_def, d.depth)) {\n                     Some((def::DefTrait(..), 0)) => {\n                         self.with(LateScope(&Vec::new(), self.scope), |_, this| {\n                             this.visit_path(path, ty.id);"}, {"sha": "d91cac4cc75b94347cd09d581b7433880ace777f", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -228,7 +228,7 @@ pub struct ctxt<'tcx> {\n     pub types: CommonTypes<'tcx>,\n \n     pub sess: &'tcx Session,\n-    pub def_map: DefMap,\n+    pub def_map: RefCell<DefMap>,\n \n     pub named_region_map: resolve_lifetime::NamedRegionMap,\n \n@@ -453,7 +453,7 @@ impl<'tcx> ctxt<'tcx> {\n     /// reference to the context, to allow formatting values that need it.\n     pub fn create_and_enter<F, R>(s: &'tcx Session,\n                                  arenas: &'tcx CtxtArenas<'tcx>,\n-                                 def_map: DefMap,\n+                                 def_map: RefCell<DefMap>,\n                                  named_region_map: resolve_lifetime::NamedRegionMap,\n                                  map: ast_map::Map<'tcx>,\n                                  freevars: FreevarMap,"}, {"sha": "2237e19c8e7da3ccafb2d0baf192cd048389bf2d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -700,8 +700,8 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         syntax::ext::mtwt::clear_tables();\n     }\n \n-    let named_region_map = time(time_passes, \"lifetime resolution\",\n-                                || middle::resolve_lifetime::krate(sess, krate, &def_map));\n+    let named_region_map = time(time_passes, \"lifetime resolution\", ||\n+                                middle::resolve_lifetime::krate(sess, krate, &def_map.borrow()));\n \n     time(time_passes, \"looking for entry point\",\n          || middle::entry::find_entry_point(sess, &ast_map));\n@@ -718,7 +718,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n          middle::check_loop::check_crate(sess, krate));\n \n     time(time_passes, \"static item recursion checking\", ||\n-         middle::check_static_recursion::check_crate(sess, krate, &def_map, &ast_map));\n+         middle::check_static_recursion::check_crate(sess, krate, &def_map.borrow(), &ast_map));\n \n     ty::ctxt::create_and_enter(sess,\n                                arenas,"}, {"sha": "5cd6bfa879033a43c6e022efcb48fdf899f2e94a", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -134,7 +134,7 @@ fn test_env<F>(source_string: &str,\n     let lang_items = lang_items::collect_language_items(&sess, &ast_map);\n     let resolve::CrateMap { def_map, freevars, .. } =\n         resolve::resolve_crate(&sess, &ast_map, resolve::MakeGlobMap::No);\n-    let named_region_map = resolve_lifetime::krate(&sess, krate, &def_map);\n+    let named_region_map = resolve_lifetime::krate(&sess, krate, &def_map.borrow());\n     let region_map = region::resolve_crate(&sess, krate);\n     ty::ctxt::create_and_enter(&sess,\n                                &arenas,"}, {"sha": "fa9678041790552228eecc39cb568dc173941161", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> Mirror<'tcx> for PatNode<'tcx> {\n             },\n \n             hir::PatEnum(..) | hir::PatIdent(..) | hir::PatQPath(..)\n-                if pat_is_resolved_const(&cx.tcx.def_map, self.pat) =>\n+                if pat_is_resolved_const(&cx.tcx.def_map.borrow(), self.pat) =>\n             {\n                 let def = cx.tcx.def_map.borrow().get(&self.pat.id).unwrap().full_def();\n                 match def {\n@@ -231,7 +231,7 @@ impl<'tcx> Mirror<'tcx> for PatNode<'tcx> {\n             }\n \n             hir::PatIdent(bm, ref ident, ref sub)\n-                if pat_is_binding(&cx.tcx.def_map, self.pat) =>\n+                if pat_is_binding(&cx.tcx.def_map.borrow(), self.pat) =>\n             {\n                 let id = match self.binding_map {\n                     None => self.pat.id,"}, {"sha": "e9a0efe76cb42a87a55bbbdeeb9a00b965987309", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -1150,7 +1150,7 @@ pub struct Resolver<'a, 'tcx:'a> {\n     // The idents for the primitive types.\n     primitive_type_table: PrimitiveTypeTable,\n \n-    def_map: DefMap,\n+    def_map: RefCell<DefMap>,\n     freevars: FreevarMap,\n     freevars_seen: NodeMap<NodeMap<usize>>,\n     export_map: ExportMap,\n@@ -4026,7 +4026,7 @@ fn module_to_string(module: &Module) -> String {\n \n \n pub struct CrateMap {\n-    pub def_map: DefMap,\n+    pub def_map: RefCell<DefMap>,\n     pub freevars: FreevarMap,\n     pub export_map: ExportMap,\n     pub trait_map: TraitMap,"}, {"sha": "0fb0407d3ba72351229d78895a761529bbeb2249", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -222,6 +222,7 @@ use util::nodemap::FnvHashMap;\n use util::ppaux;\n \n use std;\n+use std::cell::RefCell;\n use std::cmp::Ordering;\n use std::fmt;\n use std::rc::Rc;\n@@ -495,7 +496,7 @@ fn expand_nested_bindings<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n }\n \n fn enter_match<'a, 'b, 'p, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n-                                          dm: &DefMap,\n+                                          dm: &RefCell<DefMap>,\n                                           m: &[Match<'a, 'p, 'blk, 'tcx>],\n                                           col: usize,\n                                           val: MatchInput,\n@@ -516,7 +517,7 @@ fn enter_match<'a, 'b, 'p, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n             let mut bound_ptrs = br.bound_ptrs.clone();\n             match this.node {\n                 hir::PatIdent(_, ref path, None) => {\n-                    if pat_is_binding(dm, &*this) {\n+                    if pat_is_binding(&dm.borrow(), &*this) {\n                         bound_ptrs.push((path.node.name, val.val));\n                     }\n                 }\n@@ -541,7 +542,7 @@ fn enter_match<'a, 'b, 'p, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n }\n \n fn enter_default<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                     dm: &DefMap,\n+                                     dm: &RefCell<DefMap>,\n                                      m: &[Match<'a, 'p, 'blk, 'tcx>],\n                                      col: usize,\n                                      val: MatchInput)\n@@ -555,7 +556,7 @@ fn enter_default<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     // Collect all of the matches that can match against anything.\n     enter_match(bcx, dm, m, col, val, |pats| {\n-        if pat_is_binding_or_wild(dm, &*pats[col]) {\n+        if pat_is_binding_or_wild(&dm.borrow(), &*pats[col]) {\n             let mut r = pats[..col].to_vec();\n             r.push_all(&pats[col + 1..]);\n             Some(r)\n@@ -596,7 +597,7 @@ fn enter_default<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n fn enter_opt<'a, 'p, 'blk, 'tcx>(\n              bcx: Block<'blk, 'tcx>,\n              _: ast::NodeId,\n-             dm: &DefMap,\n+             dm: &RefCell<DefMap>,\n              m: &[Match<'a, 'p, 'blk, 'tcx>],\n              opt: &Opt,\n              col: usize,\n@@ -842,11 +843,11 @@ impl FailureHandler {\n     }\n }\n \n-fn pick_column_to_specialize(def_map: &DefMap, m: &[Match]) -> Option<usize> {\n-    fn pat_score(def_map: &DefMap, pat: &hir::Pat) -> usize {\n+fn pick_column_to_specialize(def_map: &RefCell<DefMap>, m: &[Match]) -> Option<usize> {\n+    fn pat_score(def_map: &RefCell<DefMap>, pat: &hir::Pat) -> usize {\n         match pat.node {\n             hir::PatIdent(_, _, Some(ref inner)) => pat_score(def_map, &**inner),\n-            _ if pat_is_refutable(def_map, pat) => 1,\n+            _ if pat_is_refutable(&def_map.borrow(), pat) => 1,\n             _ => 0\n         }\n     }\n@@ -1800,7 +1801,7 @@ pub fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let ccx = bcx.ccx();\n     match pat.node {\n         hir::PatIdent(pat_binding_mode, ref path1, ref inner) => {\n-            if pat_is_binding(&tcx.def_map, &*pat) {\n+            if pat_is_binding(&tcx.def_map.borrow(), &*pat) {\n                 // Allocate the stack slot where the value of this\n                 // binding will live and place it into the appropriate\n                 // map."}, {"sha": "0c424de9e10b89ee6657c1b1b5fd84c9f77febcf", "filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -167,7 +167,7 @@ fn walk_pattern(cx: &CrateContext,\n \n             // Check if this is a binding. If so we need to put it on the\n             // scope stack and maybe introduce an artificial scope\n-            if pat_util::pat_is_binding(def_map, &*pat) {\n+            if pat_util::pat_is_binding(&def_map.borrow(), &*pat) {\n \n                 let name = path1.node.name;\n "}, {"sha": "cd7012cd4ec6ddb6919360d757703819629fe7a6", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -133,7 +133,8 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n             // subtyping doesn't matter here, as the value is some kind of scalar\n             demand::eqtype(fcx, pat.span, expected, lhs_ty);\n         }\n-        hir::PatEnum(..) | hir::PatIdent(..) if pat_is_resolved_const(&tcx.def_map, pat) => {\n+        hir::PatEnum(..) | hir::PatIdent(..)\n+                if pat_is_resolved_const(&tcx.def_map.borrow(), pat) => {\n             let const_did = tcx.def_map.borrow().get(&pat.id).unwrap().def_id();\n             let const_scheme = tcx.lookup_item_type(const_did);\n             assert!(const_scheme.generics.is_empty());\n@@ -149,7 +150,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n             // is good enough.\n             demand::suptype(fcx, pat.span, expected, const_ty);\n         }\n-        hir::PatIdent(bm, ref path, ref sub) if pat_is_binding(&tcx.def_map, pat) => {\n+        hir::PatIdent(bm, ref path, ref sub) if pat_is_binding(&tcx.def_map.borrow(), pat) => {\n             let typ = fcx.local_ty(pat.span, pat.id);\n             match bm {\n                 hir::BindByRef(mutbl) => {\n@@ -410,7 +411,7 @@ pub fn check_dereferencable<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                                       inner: &hir::Pat) -> bool {\n     let fcx = pcx.fcx;\n     let tcx = pcx.fcx.ccx.tcx;\n-    if pat_is_binding(&tcx.def_map, inner) {\n+    if pat_is_binding(&tcx.def_map.borrow(), inner) {\n         let expected = fcx.infcx().shallow_resolve(expected);\n         expected.builtin_deref(true, ty::NoPreference).map_or(true, |mt| match mt.ty.sty {\n             ty::TyTrait(_) => {"}, {"sha": "cfa32bc073a1f6c10c8ba74b227a9ea62e7f0c9a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -529,7 +529,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n     // Add pattern bindings.\n     fn visit_pat(&mut self, p: &'tcx hir::Pat) {\n         if let hir::PatIdent(_, ref path1, _) = p.node {\n-            if pat_util::pat_is_binding(&self.fcx.ccx.tcx.def_map, p) {\n+            if pat_util::pat_is_binding(&self.fcx.ccx.tcx.def_map.borrow(), p) {\n                 let var_ty = self.assign(p.span, p.id, None);\n \n                 self.fcx.require_type_is_sized(var_ty, p.span,"}, {"sha": "5b1fafe09fac90d4f866553955fdaf2c1231c3ca", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7839827a39c9f2eff7dd8146d167de574d09809b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=7839827a39c9f2eff7dd8146d167de574d09809b", "patch": "@@ -57,7 +57,7 @@ pub fn resolve_type_vars_in_fn(fcx: &FnCtxt,\n         wbcx.visit_pat(&*arg.pat);\n \n         // Privacy needs the type for the whole pattern, not just each binding\n-        if !pat_util::pat_is_binding(&fcx.tcx().def_map, &*arg.pat) {\n+        if !pat_util::pat_is_binding(&fcx.tcx().def_map.borrow(), &*arg.pat) {\n             wbcx.visit_node_id(ResolvingPattern(arg.pat.span),\n                                arg.pat.id);\n         }"}]}