{"sha": "b610ce72cec5e450410c50418117a608c5d2ef6a", "node_id": "C_kwDOAAsO6NoAKGI2MTBjZTcyY2VjNWU0NTA0MTBjNTA0MTgxMTdhNjA4YzVkMmVmNmE", "commit": {"author": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-03-03T19:03:12Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-04-04T15:34:50Z"}, "message": "Migrate TupleTrailingCommaSuggestion", "tree": {"sha": "0cafbb19806d42e71bc4f5c4b9cf5fff0c98b586", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cafbb19806d42e71bc4f5c4b9cf5fff0c98b586"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b610ce72cec5e450410c50418117a608c5d2ef6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b610ce72cec5e450410c50418117a608c5d2ef6a", "html_url": "https://github.com/rust-lang/rust/commit/b610ce72cec5e450410c50418117a608c5d2ef6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b610ce72cec5e450410c50418117a608c5d2ef6a/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d18adb7d560ce39c836b98a702c14ef2ae3a28a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d18adb7d560ce39c836b98a702c14ef2ae3a28a1", "html_url": "https://github.com/rust-lang/rust/commit/d18adb7d560ce39c836b98a702c14ef2ae3a28a1"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "0f33660e50c7c8994c1a7feba852d19aa83abaac", "filename": "compiler/rustc_infer/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b610ce72cec5e450410c50418117a608c5d2ef6a/compiler%2Frustc_infer%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b610ce72cec5e450410c50418117a608c5d2ef6a/compiler%2Frustc_infer%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fmessages.ftl?ref=b610ce72cec5e450410c50418117a608c5d2ef6a", "patch": "@@ -368,3 +368,5 @@ infer_sbfrit_box_return_expr = if you change the return type to expect trait obj\n \n infer_stp_wrap_one = try wrapping the pattern in `{$variant}`\n infer_stp_wrap_many = try wrapping the pattern in a variant of `{$path}`\n+\n+infer_tuple_trailing_comma = use a trailing comma to create a tuple with one element"}, {"sha": "6432ae7d3f8a622056d94925d65d3435908a68d6", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b610ce72cec5e450410c50418117a608c5d2ef6a/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b610ce72cec5e450410c50418117a608c5d2ef6a/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=b610ce72cec5e450410c50418117a608c5d2ef6a", "patch": "@@ -1371,3 +1371,19 @@ impl AddToDiagnostic for SuggestTuplePatternMany {\n         );\n     }\n }\n+\n+#[derive(Subdiagnostic)]\n+pub enum TupleTrailingCommaSuggestion {\n+    #[suggestion(infer_tuple_trailing_comma, code = \",\", applicability = \"machine-applicable\")]\n+    OnlyComma {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[multipart_suggestion(infer_tuple_trailing_comma, applicability = \"machine-applicable\")]\n+    AlsoParentheses {\n+        #[suggestion_part(code = \"(\")]\n+        span_low: Span,\n+        #[suggestion_part(code = \",)\")]\n+        span_high: Span,\n+    },\n+}"}, {"sha": "a4345d3ab21c2c04a64e7b46466640d627e0d0da", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b610ce72cec5e450410c50418117a608c5d2ef6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b610ce72cec5e450410c50418117a608c5d2ef6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b610ce72cec5e450410c50418117a608c5d2ef6a", "patch": "@@ -50,6 +50,7 @@ use super::region_constraints::GenericKind;\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n \n use crate::errors;\n+use crate::errors::TupleTrailingCommaSuggestion;\n use crate::infer;\n use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::ExpectedFound;\n@@ -2110,22 +2111,18 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span)\n             else { return };\n \n-        let msg = \"use a trailing comma to create a tuple with one element\";\n-        if code.starts_with('(') && code.ends_with(')') {\n+        let sugg = if code.starts_with('(') && code.ends_with(')') {\n             let before_close = span.hi() - BytePos::from_u32(1);\n-            err.span_suggestion(\n-                span.with_hi(before_close).shrink_to_hi(),\n-                msg,\n-                \",\",\n-                Applicability::MachineApplicable,\n-            );\n+            TupleTrailingCommaSuggestion::OnlyComma {\n+                span: span.with_hi(before_close).shrink_to_hi(),\n+            }\n         } else {\n-            err.multipart_suggestion(\n-                msg,\n-                vec![(span.shrink_to_lo(), \"(\".into()), (span.shrink_to_hi(), \",)\".into())],\n-                Applicability::MachineApplicable,\n-            );\n-        }\n+            TupleTrailingCommaSuggestion::AlsoParentheses {\n+                span_low: span.shrink_to_lo(),\n+                span_high: span.shrink_to_hi(),\n+            }\n+        };\n+        err.subdiagnostic(sugg);\n     }\n \n     fn values_str("}]}