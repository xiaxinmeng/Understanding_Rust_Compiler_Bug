{"sha": "faa82eb46c800857756ddc5458623a906a9f103e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYTgyZWI0NmM4MDA4NTc3NTZkZGM1NDU4NjIzYTkwNmE5ZjEwM2U=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-05T04:10:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-05T04:10:04Z"}, "message": "Streamline `Folder`.\n\nSpecifically:\n\n- Remove dead methods: fold_usize, fold_meta_items, fold_opt_bounds.\n\n- Remove useless methods: fold_global_asm, fold_range_end.\n\n- Inline and remove unnecessary methods: fold_item_simple,\n  fold_foreign_item_simple.", "tree": {"sha": "d3b484e1d8845212bbf6cc30c5de3fe872afd227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3b484e1d8845212bbf6cc30c5de3fe872afd227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faa82eb46c800857756ddc5458623a906a9f103e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faa82eb46c800857756ddc5458623a906a9f103e", "html_url": "https://github.com/rust-lang/rust/commit/faa82eb46c800857756ddc5458623a906a9f103e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faa82eb46c800857756ddc5458623a906a9f103e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9686416c63117db3832e8015b609cbc83f11e4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9686416c63117db3832e8015b609cbc83f11e4b", "html_url": "https://github.com/rust-lang/rust/commit/b9686416c63117db3832e8015b609cbc83f11e4b"}], "stats": {"total": 97, "additions": 20, "deletions": 77}, "files": [{"sha": "6f856f63d6c7f59c8f037ea0aafdc6a62a078bbb", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 20, "deletions": 77, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/faa82eb46c800857756ddc5458623a906a9f103e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa82eb46c800857756ddc5458623a906a9f103e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=faa82eb46c800857756ddc5458623a906a9f103e", "patch": "@@ -45,10 +45,6 @@ pub trait Folder : Sized {\n         noop_fold_crate(c, self)\n     }\n \n-    fn fold_meta_items(&mut self, meta_items: Vec<MetaItem>) -> Vec<MetaItem> {\n-        noop_fold_meta_items(meta_items, self)\n-    }\n-\n     fn fold_meta_list_item(&mut self, list_item: NestedMetaItem) -> NestedMetaItem {\n         noop_fold_meta_list_item(list_item, self)\n     }\n@@ -65,18 +61,10 @@ pub trait Folder : Sized {\n         noop_fold_foreign_item(ni, self)\n     }\n \n-    fn fold_foreign_item_simple(&mut self, ni: ForeignItem) -> ForeignItem {\n-        noop_fold_foreign_item_simple(ni, self)\n-    }\n-\n     fn fold_item(&mut self, i: P<Item>) -> SmallVec<[P<Item>; 1]> {\n         noop_fold_item(i, self)\n     }\n \n-    fn fold_item_simple(&mut self, i: Item) -> Item {\n-        noop_fold_item_simple(i, self)\n-    }\n-\n     fn fold_fn_header(&mut self, header: FnHeader) -> FnHeader {\n         noop_fold_fn_header(header, self)\n     }\n@@ -133,10 +121,6 @@ pub trait Folder : Sized {\n         e.map(|e| noop_fold_expr(e, self))\n     }\n \n-    fn fold_range_end(&mut self, re: RangeEnd) -> RangeEnd {\n-        noop_fold_range_end(re, self)\n-    }\n-\n     fn fold_opt_expr(&mut self, e: P<Expr>) -> Option<P<Expr>> {\n         noop_fold_opt_expr(e, self)\n     }\n@@ -172,10 +156,6 @@ pub trait Folder : Sized {\n         noop_fold_foreign_mod(nm, self)\n     }\n \n-    fn fold_global_asm(&mut self, ga: P<GlobalAsm>) -> P<GlobalAsm> {\n-        noop_fold_global_asm(ga, self)\n-    }\n-\n     fn fold_variant(&mut self, v: Variant) -> Variant {\n         noop_fold_variant(v, self)\n     }\n@@ -184,10 +164,6 @@ pub trait Folder : Sized {\n         noop_fold_ident(i, self)\n     }\n \n-    fn fold_usize(&mut self, i: usize) -> usize {\n-        noop_fold_usize(i, self)\n-    }\n-\n     fn fold_path(&mut self, p: Path) -> Path {\n         noop_fold_path(p, self)\n     }\n@@ -281,10 +257,6 @@ pub trait Folder : Sized {\n         noop_fold_interpolated(nt, self)\n     }\n \n-    fn fold_opt_bounds(&mut self, b: Option<GenericBounds>) -> Option<GenericBounds> {\n-        noop_fold_opt_bounds(b, self)\n-    }\n-\n     fn fold_bounds(&mut self, b: GenericBounds) -> GenericBounds {\n         noop_fold_bounds(b, self)\n     }\n@@ -324,10 +296,6 @@ pub trait Folder : Sized {\n     }\n }\n \n-pub fn noop_fold_meta_items<T: Folder>(meta_items: Vec<MetaItem>, fld: &mut T) -> Vec<MetaItem> {\n-    meta_items.move_map(|x| fld.fold_meta_item(x))\n-}\n-\n pub fn noop_fold_use_tree<T: Folder>(use_tree: UseTree, fld: &mut T) -> UseTree {\n     UseTree {\n         span: fld.new_span(use_tree.span),\n@@ -430,11 +398,6 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,\n     }\n }\n \n-pub fn noop_fold_global_asm<T: Folder>(ga: P<GlobalAsm>,\n-                                       _: &mut T) -> P<GlobalAsm> {\n-    ga\n-}\n-\n pub fn noop_fold_variant<T: Folder>(v: Variant, fld: &mut T) -> Variant {\n     Spanned {\n         node: Variant_ {\n@@ -451,10 +414,6 @@ pub fn noop_fold_ident<T: Folder>(ident: Ident, fld: &mut T) -> Ident {\n     Ident::new(ident.name, fld.new_span(ident.span))\n }\n \n-pub fn noop_fold_usize<T: Folder>(i: usize, _: &mut T) -> usize {\n-    i\n-}\n-\n pub fn noop_fold_path<T: Folder>(Path { segments, span }: Path, fld: &mut T) -> Path {\n     Path {\n         segments: segments.move_map(|PathSegment { ident, id, args }| PathSegment {\n@@ -873,11 +832,6 @@ pub fn noop_fold_mt<T: Folder>(MutTy {ty, mutbl}: MutTy, folder: &mut T) -> MutT\n     }\n }\n \n-pub fn noop_fold_opt_bounds<T: Folder>(b: Option<GenericBounds>, folder: &mut T)\n-                                       -> Option<GenericBounds> {\n-    b.map(|bounds| folder.fold_bounds(bounds))\n-}\n-\n fn noop_fold_bounds<T: Folder>(bounds: GenericBounds, folder: &mut T)\n                           -> GenericBounds {\n     bounds.move_map(|bound| folder.fold_param_bound(bound))\n@@ -913,7 +867,7 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n         }\n         ItemKind::Mod(m) => ItemKind::Mod(folder.fold_mod(m)),\n         ItemKind::ForeignMod(nm) => ItemKind::ForeignMod(folder.fold_foreign_mod(nm)),\n-        ItemKind::GlobalAsm(ga) => ItemKind::GlobalAsm(folder.fold_global_asm(ga)),\n+        ItemKind::GlobalAsm(ga) => ItemKind::GlobalAsm(ga),\n         ItemKind::Ty(t, generics) => {\n             ItemKind::Ty(folder.fold_ty(t), folder.fold_generics(generics))\n         }\n@@ -1071,34 +1025,27 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, span}: Crate,\n \n // fold one item into possibly many items\n pub fn noop_fold_item<T: Folder>(i: P<Item>, folder: &mut T) -> SmallVec<[P<Item>; 1]> {\n-    smallvec![i.map(|i| folder.fold_item_simple(i))]\n-}\n-\n-// fold one item into exactly one item\n-pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span, tokens}: Item,\n-                                        folder: &mut T) -> Item {\n-    Item {\n-        id: folder.new_id(id),\n-        vis: folder.fold_vis(vis),\n-        ident: folder.fold_ident(ident),\n-        attrs: fold_attrs(attrs, folder),\n-        node: folder.fold_item_kind(node),\n-        span: folder.new_span(span),\n-\n-        // FIXME: if this is replaced with a call to `folder.fold_tts` it causes\n-        //        an ICE during resolve... odd!\n-        tokens,\n-    }\n+    smallvec![i.map(|i| {\n+        let Item {id, ident, attrs, node, vis, span, tokens} = i;\n+        Item {\n+            id: folder.new_id(id),\n+            vis: folder.fold_vis(vis),\n+            ident: folder.fold_ident(ident),\n+            attrs: fold_attrs(attrs, folder),\n+            node: folder.fold_item_kind(node),\n+            span: folder.new_span(span),\n+\n+            // FIXME: if this is replaced with a call to `folder.fold_tts` it causes\n+            //        an ICE during resolve... odd!\n+            tokens,\n+        }\n+    })]\n }\n \n pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T)\n     -> SmallVec<[ForeignItem; 1]>\n {\n-    smallvec![folder.fold_foreign_item_simple(ni)]\n-}\n-\n-pub fn noop_fold_foreign_item_simple<T: Folder>(ni: ForeignItem, folder: &mut T) -> ForeignItem {\n-    ForeignItem {\n+    smallvec![ForeignItem {\n         id: folder.new_id(ni.id),\n         vis: folder.fold_vis(ni.vis),\n         ident: folder.fold_ident(ni.ident),\n@@ -1114,7 +1061,7 @@ pub fn noop_fold_foreign_item_simple<T: Folder>(ni: ForeignItem, folder: &mut T)\n             ForeignItemKind::Macro(mac) => ForeignItemKind::Macro(folder.fold_mac(mac)),\n         },\n         span: folder.new_span(ni.span)\n-    }\n+    }]\n }\n \n pub fn noop_fold_method_sig<T: Folder>(sig: MethodSig, folder: &mut T) -> MethodSig {\n@@ -1161,10 +1108,10 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n             }\n             PatKind::Box(inner) => PatKind::Box(folder.fold_pat(inner)),\n             PatKind::Ref(inner, mutbl) => PatKind::Ref(folder.fold_pat(inner), mutbl),\n-            PatKind::Range(e1, e2, Spanned { span, node: end }) => {\n+            PatKind::Range(e1, e2, Spanned { span, node }) => {\n                 PatKind::Range(folder.fold_expr(e1),\n                                folder.fold_expr(e2),\n-                               Spanned { span, node: folder.fold_range_end(end) })\n+                               Spanned { span, node })\n             },\n             PatKind::Slice(before, slice, after) => {\n                 PatKind::Slice(before.move_map(|x| folder.fold_pat(x)),\n@@ -1178,10 +1125,6 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n     })\n }\n \n-pub fn noop_fold_range_end<T: Folder>(end: RangeEnd, _folder: &mut T) -> RangeEnd {\n-    end\n-}\n-\n pub fn noop_fold_anon_const<T: Folder>(constant: AnonConst, folder: &mut T) -> AnonConst {\n     let AnonConst {id, value} = constant;\n     AnonConst {"}]}