{"sha": "6fc3d3aa4cbf637d748c60cfdbb98b5f6a040576", "node_id": "C_kwDOAAsO6NoAKDZmYzNkM2FhNGNiZjYzN2Q3NDhjNjBjZmRiYjk4YjVmNmEwNDA1NzY", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-02-25T14:46:02Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-02-25T14:46:02Z"}, "message": "Avoid autoderef coercions leaking if they don't apply", "tree": {"sha": "1bdcc57c926fef4d7fad9175b710389f50a15766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bdcc57c926fef4d7fad9175b710389f50a15766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fc3d3aa4cbf637d748c60cfdbb98b5f6a040576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc3d3aa4cbf637d748c60cfdbb98b5f6a040576", "html_url": "https://github.com/rust-lang/rust/commit/6fc3d3aa4cbf637d748c60cfdbb98b5f6a040576", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fc3d3aa4cbf637d748c60cfdbb98b5f6a040576/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "187e6bacac2c01b9bc28f8c0480d807434abd4f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/187e6bacac2c01b9bc28f8c0480d807434abd4f7", "html_url": "https://github.com/rust-lang/rust/commit/187e6bacac2c01b9bc28f8c0480d807434abd4f7"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "c24772f29b428709973ee7a9b3675cfbd2e95737", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fc3d3aa4cbf637d748c60cfdbb98b5f6a040576/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fc3d3aa4cbf637d748c60cfdbb98b5f6a040576/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=6fc3d3aa4cbf637d748c60cfdbb98b5f6a040576", "patch": "@@ -259,6 +259,8 @@ impl<'a> InferenceContext<'a> {\n         // details of coercion errors though, so I think it's useful to leave\n         // the structure like it is.\n \n+        let snapshot = self.table.snapshot();\n+\n         let mut autoderef = Autoderef::new(&mut self.table, from_ty.clone());\n         let mut first_error = None;\n         let mut found = None;\n@@ -315,6 +317,7 @@ impl<'a> InferenceContext<'a> {\n         let InferOk { value: ty, goals } = match found {\n             Some(d) => d,\n             None => {\n+                self.table.rollback_to(snapshot);\n                 let err = first_error.expect(\"coerce_borrowed_pointer had no error\");\n                 return Err(err);\n             }"}, {"sha": "c0dddb608ea394e75c4c057aa01c9db2c00e280d", "filename": "crates/hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6fc3d3aa4cbf637d748c60cfdbb98b5f6a040576/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fc3d3aa4cbf637d748c60cfdbb98b5f6a040576/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=6fc3d3aa4cbf637d748c60cfdbb98b5f6a040576", "patch": "@@ -242,6 +242,45 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn coerce_autoderef_implication_1() {\n+    check_no_mismatches(\n+        r\"\n+//- minicore: deref\n+struct Foo<T>;\n+impl core::ops::Deref for Foo<u32> { type Target = (); }\n+\n+fn takes_ref_foo<T>(x: &Foo<T>) {}\n+fn test() {\n+    let foo = Foo;\n+      //^^^ type: Foo<{unknown}>\n+    takes_ref_foo(&foo);\n+\n+    let foo = Foo;\n+      //^^^ type: Foo<u32>\n+    let _: &() = &foo;\n+}\",\n+    );\n+}\n+\n+#[test]\n+fn coerce_autoderef_implication_2() {\n+    check(\n+        r\"\n+//- minicore: deref\n+struct Foo<T>;\n+impl core::ops::Deref for Foo<u32> { type Target = (); }\n+\n+fn takes_ref_foo<T>(x: &Foo<T>) {}\n+fn test() {\n+    let foo = Foo;\n+      //^^^ type: Foo<{unknown}>\n+    let _: &u32 = &Foo;\n+                //^^^^ expected &u32, got &Foo<{unknown}>\n+}\",\n+    );\n+}\n+\n #[test]\n fn closure_return_coerce() {\n     check_no_mismatches("}]}