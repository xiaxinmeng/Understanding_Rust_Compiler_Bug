{"sha": "9d770e9959ed5fedad31bfc04f946f5e268cfc37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNzcwZTk5NTllZDVmZWRhZDMxYmZjMDRmOTQ2ZjVlMjY4Y2ZjMzc=", "commit": {"author": {"name": "Thayne McCombs", "email": "astrothayne@gmail.com", "date": "2018-05-29T02:19:39Z"}, "committer": {"name": "Thayne McCombs", "email": "astrothayne@gmail.com", "date": "2018-06-01T06:04:26Z"}, "message": "Stabilize SliceIndex trait.\n\nFixes #35729\n\nAccording to recommendations in\nhttps://github.com/rust-lang/rust/issues/35729#issuecomment-377784884", "tree": {"sha": "0fd729827ece8163074eb37291992156b54f7547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fd729827ece8163074eb37291992156b54f7547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d770e9959ed5fedad31bfc04f946f5e268cfc37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d770e9959ed5fedad31bfc04f946f5e268cfc37", "html_url": "https://github.com/rust-lang/rust/commit/9d770e9959ed5fedad31bfc04f946f5e268cfc37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d770e9959ed5fedad31bfc04f946f5e268cfc37/comments", "author": {"login": "tmccombs", "id": 2541726, "node_id": "MDQ6VXNlcjI1NDE3MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2541726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmccombs", "html_url": "https://github.com/tmccombs", "followers_url": "https://api.github.com/users/tmccombs/followers", "following_url": "https://api.github.com/users/tmccombs/following{/other_user}", "gists_url": "https://api.github.com/users/tmccombs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmccombs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmccombs/subscriptions", "organizations_url": "https://api.github.com/users/tmccombs/orgs", "repos_url": "https://api.github.com/users/tmccombs/repos", "events_url": "https://api.github.com/users/tmccombs/events{/privacy}", "received_events_url": "https://api.github.com/users/tmccombs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmccombs", "id": 2541726, "node_id": "MDQ6VXNlcjI1NDE3MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2541726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmccombs", "html_url": "https://github.com/tmccombs", "followers_url": "https://api.github.com/users/tmccombs/followers", "following_url": "https://api.github.com/users/tmccombs/following{/other_user}", "gists_url": "https://api.github.com/users/tmccombs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmccombs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmccombs/subscriptions", "organizations_url": "https://api.github.com/users/tmccombs/orgs", "repos_url": "https://api.github.com/users/tmccombs/repos", "events_url": "https://api.github.com/users/tmccombs/events{/privacy}", "received_events_url": "https://api.github.com/users/tmccombs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "html_url": "https://github.com/rust-lang/rust/commit/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "a56420d52d0d5528afb8f6ed09fd761f66bdce8a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d770e9959ed5fedad31bfc04f946f5e268cfc37/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d770e9959ed5fedad31bfc04f946f5e268cfc37/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=9d770e9959ed5fedad31bfc04f946f5e268cfc37", "patch": "@@ -104,7 +104,6 @@\n #![feature(ptr_internals)]\n #![feature(ptr_offset_from)]\n #![feature(rustc_attrs)]\n-#![feature(slice_get_slice)]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(str_internals)]"}, {"sha": "8686ecd7bcf7bb69561472a4efe4b275d42abf13", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d770e9959ed5fedad31bfc04f946f5e268cfc37/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d770e9959ed5fedad31bfc04f946f5e268cfc37/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=9d770e9959ed5fedad31bfc04f946f5e268cfc37", "patch": "@@ -121,7 +121,7 @@ pub use core::slice::{RSplit, RSplitMut};\n pub use core::slice::{from_raw_parts, from_raw_parts_mut};\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n pub use core::slice::{from_ref, from_mut};\n-#[unstable(feature = \"slice_get_slice\", issue = \"35729\")]\n+#[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n pub use core::slice::SliceIndex;\n #[unstable(feature = \"exact_chunks\", issue = \"47115\")]\n pub use core::slice::{ExactChunks, ExactChunksMut};"}, {"sha": "43236c3310411364540446f64468278b1c15997c", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9d770e9959ed5fedad31bfc04f946f5e268cfc37/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d770e9959ed5fedad31bfc04f946f5e268cfc37/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=9d770e9959ed5fedad31bfc04f946f5e268cfc37", "patch": "@@ -1977,35 +1977,63 @@ fn slice_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice up to maximum usize\");\n }\n \n+mod private_slice_index {\n+    use super::ops;\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    pub trait Sealed {}\n+\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for usize {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::Range<usize> {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeTo<usize> {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeFrom<usize> {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeFull {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeInclusive<usize> {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeToInclusive<usize> {}\n+}\n+\n /// A helper trait used for indexing operations.\n-#[unstable(feature = \"slice_get_slice\", issue = \"35729\")]\n+#[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n #[rustc_on_unimplemented = \"slice indices are of type `usize` or ranges of `usize`\"]\n-pub trait SliceIndex<T: ?Sized> {\n+pub trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     /// The output type returned by methods.\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n     type Output: ?Sized;\n \n     /// Returns a shared reference to the output at this location, if in\n     /// bounds.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     fn get(self, slice: &T) -> Option<&Self::Output>;\n \n     /// Returns a mutable reference to the output at this location, if in\n     /// bounds.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     fn get_mut(self, slice: &mut T) -> Option<&mut Self::Output>;\n \n     /// Returns a shared reference to the output at this location, without\n     /// performing any bounds checking.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     unsafe fn get_unchecked(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, without\n     /// performing any bounds checking.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     unsafe fn get_unchecked_mut(self, slice: &mut T) -> &mut Self::Output;\n \n     /// Returns a shared reference to the output at this location, panicking\n     /// if out of bounds.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     fn index(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, panicking\n     /// if out of bounds.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     fn index_mut(self, slice: &mut T) -> &mut Self::Output;\n }\n "}]}