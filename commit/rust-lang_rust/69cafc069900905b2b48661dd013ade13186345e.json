{"sha": "69cafc069900905b2b48661dd013ade13186345e", "node_id": "C_kwDOAAsO6NoAKDY5Y2FmYzA2OTkwMDkwNWIyYjQ4NjYxZGQwMTNhZGUxMzE4NjM0NWU", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-10-02T12:24:56Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-10-02T12:24:56Z"}, "message": "always panic for invalid integer logarithm", "tree": {"sha": "17ccc69fd2c29de27dafa394cb71b9ee2fb21489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17ccc69fd2c29de27dafa394cb71b9ee2fb21489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69cafc069900905b2b48661dd013ade13186345e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69cafc069900905b2b48661dd013ade13186345e", "html_url": "https://github.com/rust-lang/rust/commit/69cafc069900905b2b48661dd013ade13186345e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69cafc069900905b2b48661dd013ade13186345e/comments", "author": null, "committer": null, "parents": [{"sha": "c2590e6e892cce1105cc57b480aa07a51ae95fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2590e6e892cce1105cc57b480aa07a51ae95fe5", "html_url": "https://github.com/rust-lang/rust/commit/c2590e6e892cce1105cc57b480aa07a51ae95fe5"}], "stats": {"total": 88, "additions": 15, "deletions": 73}, "files": [{"sha": "4eb85a281e20dddbc191aa782eecb06d0245e174", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 8, "deletions": 37, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/69cafc069900905b2b48661dd013ade13186345e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cafc069900905b2b48661dd013ade13186345e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=69cafc069900905b2b48661dd013ade13186345e", "patch": "@@ -2279,9 +2279,8 @@ macro_rules! int_impl {\n         ///\n         /// # Panics\n         ///\n-        /// When the number is negative, zero, or if the base is not at least 2; it\n-        /// panics in debug mode and the return value is 0 in release\n-        /// mode.\n+        /// This function will panic if `self` is less than or equal to zero,\n+        /// or if `base` is less then 2.\n         ///\n         /// # Examples\n         ///\n@@ -2297,24 +2296,15 @@ macro_rules! int_impl {\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n         pub const fn ilog(self, base: Self) -> u32 {\n-            match self.checked_ilog(base) {\n-                Some(n) => n,\n-                None => {\n-                    // In debug builds, trigger a panic on None.\n-                    // This should optimize completely out in release builds.\n-                    let _ = Self::MAX + 1;\n-\n-                    0\n-                },\n-            }\n+            assert!(base >= 2, \"base of integer logarithm must be at least 2\");\n+            self.checked_ilog(base).expect(\"argument of integer logarithm must be positive\")\n         }\n \n         /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n-        /// When the number is negative or zero it panics in debug mode and the return value\n-        /// is 0 in release mode.\n+        /// This function will panic if `self` is less than or equal to zero.\n         ///\n         /// # Examples\n         ///\n@@ -2330,24 +2320,14 @@ macro_rules! int_impl {\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n         pub const fn ilog2(self) -> u32 {\n-            match self.checked_ilog2() {\n-                Some(n) => n,\n-                None => {\n-                    // In debug builds, trigger a panic on None.\n-                    // This should optimize completely out in release builds.\n-                    let _ = Self::MAX + 1;\n-\n-                    0\n-                },\n-            }\n+            self.checked_ilog2().expect(\"argument of integer logarithm must be positive\")\n         }\n \n         /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n-        /// When the number is negative or zero it panics in debug mode and the return value\n-        /// is 0 in release mode.\n+        /// This function will panic if `self` is less than or equal to zero.\n         ///\n         /// # Example\n         ///\n@@ -2363,16 +2343,7 @@ macro_rules! int_impl {\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n         pub const fn ilog10(self) -> u32 {\n-            match self.checked_ilog10() {\n-                Some(n) => n,\n-                None => {\n-                    // In debug builds, trigger a panic on None.\n-                    // This should optimize completely out in release builds.\n-                    let _ = Self::MAX + 1;\n-\n-                    0\n-                },\n-            }\n+            self.checked_ilog10().expect(\"argument of integer logarithm must be positive\")\n         }\n \n         /// Returns the logarithm of the number with respect to an arbitrary base,"}, {"sha": "83836f2a3954b096c8b1f2f8f8fcd0545020ff8d", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 7, "deletions": 36, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/69cafc069900905b2b48661dd013ade13186345e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cafc069900905b2b48661dd013ade13186345e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=69cafc069900905b2b48661dd013ade13186345e", "patch": "@@ -692,8 +692,7 @@ macro_rules! uint_impl {\n         ///\n         /// # Panics\n         ///\n-        /// When the number is zero, or if the base is not at least 2;\n-        /// it panics in debug mode and the return value is 0 in release mode.\n+        /// This function will panic if `self` is zero, or if `base` is less then 2.\n         ///\n         /// # Examples\n         ///\n@@ -709,24 +708,15 @@ macro_rules! uint_impl {\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n         pub const fn ilog(self, base: Self) -> u32 {\n-            match self.checked_ilog(base) {\n-                Some(n) => n,\n-                None => {\n-                    // In debug builds, trigger a panic on None.\n-                    // This should optimize completely out in release builds.\n-                    let _ = Self::MAX + 1;\n-\n-                    0\n-                },\n-            }\n+            assert!(base >= 2, \"base of integer logarithm must be at least 2\");\n+            self.checked_ilog(base).expect(\"argument of integer logarithm must be positive\")\n         }\n \n         /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n-        /// When the number is zero it panics in debug mode and\n-        /// the return value is 0 in release mode.\n+        /// This function will panic if `self` is zero.\n         ///\n         /// # Examples\n         ///\n@@ -742,24 +732,14 @@ macro_rules! uint_impl {\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n         pub const fn ilog2(self) -> u32 {\n-            match self.checked_ilog2() {\n-                Some(n) => n,\n-                None => {\n-                    // In debug builds, trigger a panic on None.\n-                    // This should optimize completely out in release builds.\n-                    let _ = Self::MAX + 1;\n-\n-                    0\n-                },\n-            }\n+            self.checked_ilog2().expect(\"argument of integer logarithm must be positive\")\n         }\n \n         /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n-        /// When the number is zero it panics in debug mode and the\n-        /// return value is 0 in release mode.\n+        /// This function will panic if `self` is zero.\n         ///\n         /// # Example\n         ///\n@@ -775,16 +755,7 @@ macro_rules! uint_impl {\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n         pub const fn ilog10(self) -> u32 {\n-            match self.checked_ilog10() {\n-                Some(n) => n,\n-                None => {\n-                    // In debug builds, trigger a panic on None.\n-                    // This should optimize completely out in release builds.\n-                    let _ = Self::MAX + 1;\n-\n-                    0\n-                },\n-            }\n+            self.checked_ilog10().expect(\"argument of integer logarithm must be positive\")\n         }\n \n         /// Returns the logarithm of the number with respect to an arbitrary base,"}]}