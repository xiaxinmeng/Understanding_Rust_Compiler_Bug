{"sha": "04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0Njg5ZTIyZTk0Njg3OWYyZjVlMmM3Mzg0OWQyZjRlMWYyYjRiMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-05T02:51:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-05T02:51:41Z"}, "message": "Auto merge of #71907 - Dylan-DPC:rollup-z8iaqlv, r=Dylan-DPC\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #71587 (Report cannot move errors in promoted MIR)\n - #71711 (Updates to some ignored tests)\n - #71845 (Add const examples)\n - #71878 (Add remove_current_as_list to LinkedList's CursorMut)\n - #71881 (Correctly handle UEFI targets as Windows-like when emitting sections for LLVM bitcode)\n - #71883 (add a missing \"at\" in a comment)\n - #71891 (\u00ac\u2203x. \u00acy => \u2200x. y)\n - #71892 (Update btree_map::VacantEntry::insert docs to actually call insert)\n - #71902 (Suggest to add missing feature when using gated const features)\n - #71904 (fix typo in function name)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "ff298794d1db2312cfc0fe0f29fbb9d2cb8c01f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff298794d1db2312cfc0fe0f29fbb9d2cb8c01f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "html_url": "https://github.com/rust-lang/rust/commit/04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "url": "https://api.github.com/repos/rust-lang/rust/commits/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "html_url": "https://github.com/rust-lang/rust/commit/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740"}, {"sha": "8b781b0ffdc751924520f5a705c4e60e7dd4ab36", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b781b0ffdc751924520f5a705c4e60e7dd4ab36", "html_url": "https://github.com/rust-lang/rust/commit/8b781b0ffdc751924520f5a705c4e60e7dd4ab36"}], "stats": {"total": 580, "additions": 526, "deletions": 54}, "files": [{"sha": "b8f1a4199c64fc16cb1648026225eca42f5f7bfb", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -2499,15 +2499,14 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n+    /// use std::collections::btree_map::Entry;\n     ///\n-    /// let mut count: BTreeMap<&str, usize> = BTreeMap::new();\n+    /// let mut map: BTreeMap<&str, u32> = BTreeMap::new();\n     ///\n-    /// // count the number of occurrences of letters in the vec\n-    /// for x in vec![\"a\",\"b\",\"a\",\"c\",\"a\",\"b\"] {\n-    ///     *count.entry(x).or_insert(0) += 1;\n+    /// if let Entry::Vacant(o) = map.entry(\"poneyland\") {\n+    ///     o.insert(37);\n     /// }\n-    ///\n-    /// assert_eq!(count[\"a\"], 3);\n+    /// assert_eq!(map[\"poneyland\"], 37);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(self, value: V) -> &'a mut V {"}, {"sha": "cc0f07b822741bd76610541da02b7d83e91e75d9", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -1496,6 +1496,31 @@ impl<'a, T> CursorMut<'a, T> {\n         }\n     }\n \n+    /// Removes the current element from the `LinkedList` without deallocating the list node.\n+    ///\n+    /// The node that was removed is returned as a new `LinkedList` containing only this node.\n+    /// The cursor is moved to point to the next element in the current `LinkedList`.\n+    ///\n+    /// If the cursor is currently pointing to the \"ghost\" non-element then no element\n+    /// is removed and `None` is returned.\n+    #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n+    pub fn remove_current_as_list(&mut self) -> Option<LinkedList<T>> {\n+        let mut unlinked_node = self.current?;\n+        unsafe {\n+            self.current = unlinked_node.as_ref().next;\n+            self.list.unlink_node(unlinked_node);\n+\n+            unlinked_node.as_mut().prev = None;\n+            unlinked_node.as_mut().next = None;\n+            Some(LinkedList {\n+                head: Some(unlinked_node),\n+                tail: Some(unlinked_node),\n+                len: 1,\n+                marker: PhantomData,\n+            })\n+        }\n+    }\n+\n     /// Inserts the elements from the given `LinkedList` after the current one.\n     ///\n     /// If the cursor is pointing at the \"ghost\" non-element then the new elements are"}, {"sha": "4483940c9a771867adced94fd9c54e0c441e35c5", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -18,15 +18,46 @@ use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f32`.\n /// Use [`f32::RADIX`](../../std/primitive.f32.html#associatedconstant.RADIX) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let r = std::f32::RADIX;\n+///\n+/// // intended way\n+/// let r = f32::RADIX;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const RADIX: u32 = f32::RADIX;\n \n /// Number of significant digits in base 2.\n /// Use [`f32::MANTISSA_DIGITS`](../../std/primitive.f32.html#associatedconstant.MANTISSA_DIGITS) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let d = std::f32::MANTISSA_DIGITS;\n+///\n+/// // intended way\n+/// let d = f32::MANTISSA_DIGITS;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n+\n /// Approximate number of significant digits in base 10.\n /// Use [`f32::DIGITS`](../../std/primitive.f32.html#associatedconstant.DIGITS) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let d = std::f32::DIGITS;\n+///\n+/// // intended way\n+/// let d = f32::DIGITS;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = f32::DIGITS;\n \n@@ -36,50 +67,166 @@ pub const DIGITS: u32 = f32::DIGITS;\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let e = std::f32::EPSILON;\n+///\n+/// // intended way\n+/// let e = f32::EPSILON;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const EPSILON: f32 = f32::EPSILON;\n \n /// Smallest finite `f32` value.\n /// Use [`f32::MIN`](../../std/primitive.f32.html#associatedconstant.MIN) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f32::MIN;\n+///\n+/// // intended way\n+/// let min = f32::MIN;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f32 = f32::MIN;\n+\n /// Smallest positive normal `f32` value.\n /// Use [`f32::MIN_POSITIVE`](../../std/primitive.f32.html#associatedconstant.MIN_POSITIVE) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f32::MIN_POSITIVE;\n+///\n+/// // intended way\n+/// let min = f32::MIN_POSITIVE;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n+\n /// Largest finite `f32` value.\n /// Use [`f32::MAX`](../../std/primitive.f32.html#associatedconstant.MAX) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f32::MAX;\n+///\n+/// // intended way\n+/// let max = f32::MAX;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f32 = f32::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n /// Use [`f32::MIN_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f32::MIN_EXP;\n+///\n+/// // intended way\n+/// let min = f32::MIN_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_EXP: i32 = f32::MIN_EXP;\n+\n /// Maximum possible power of 2 exponent.\n /// Use [`f32::MAX_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f32::MAX_EXP;\n+///\n+/// // intended way\n+/// let max = f32::MAX_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_EXP: i32 = f32::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n /// Use [`f32::MIN_10_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_10_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f32::MIN_10_EXP;\n+///\n+/// // intended way\n+/// let min = f32::MIN_10_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n+\n /// Maximum possible power of 10 exponent.\n /// Use [`f32::MAX_10_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_10_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f32::MAX_10_EXP;\n+///\n+/// // intended way\n+/// let max = f32::MAX_10_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n \n /// Not a Number (NaN).\n /// Use [`f32::NAN`](../../std/primitive.f32.html#associatedconstant.NAN) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let nan = std::f32::NAN;\n+///\n+/// // intended way\n+/// let nan = f32::NAN;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NAN: f32 = f32::NAN;\n+\n /// Infinity (\u221e).\n /// Use [`f32::INFINITY`](../../std/primitive.f32.html#associatedconstant.INFINITY) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let inf = std::f32::INFINITY;\n+///\n+/// // intended way\n+/// let inf = f32::INFINITY;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INFINITY: f32 = f32::INFINITY;\n+\n /// Negative infinity (\u2212\u221e).\n /// Use [`f32::NEG_INFINITY`](../../std/primitive.f32.html#associatedconstant.NEG_INFINITY) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let ninf = std::f32::NEG_INFINITY;\n+///\n+/// // intended way\n+/// let ninf = f32::NEG_INFINITY;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NEG_INFINITY: f32 = f32::NEG_INFINITY;\n "}, {"sha": "df45e588369fe915942bcb54905457c060941d83", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -18,15 +18,46 @@ use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f64`.\n /// Use [`f64::RADIX`](../../std/primitive.f64.html#associatedconstant.RADIX) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let r = std::f64::RADIX;\n+///\n+/// // intended way\n+/// let r = f64::RADIX;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const RADIX: u32 = f64::RADIX;\n \n /// Number of significant digits in base 2.\n /// Use [`f64::MANTISSA_DIGITS`](../../std/primitive.f64.html#associatedconstant.MANTISSA_DIGITS) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let d = std::f64::MANTISSA_DIGITS;\n+///\n+/// // intended way\n+/// let d = f64::MANTISSA_DIGITS;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n+\n /// Approximate number of significant digits in base 10.\n /// Use [`f64::DIGITS`](../../std/primitive.f64.html#associatedconstant.DIGITS) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let d = std::f64::DIGITS;\n+///\n+/// // intended way\n+/// let d = f64::DIGITS;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = f64::DIGITS;\n \n@@ -36,50 +67,166 @@ pub const DIGITS: u32 = f64::DIGITS;\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let e = std::f64::EPSILON;\n+///\n+/// // intended way\n+/// let e = f64::EPSILON;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const EPSILON: f64 = f64::EPSILON;\n \n /// Smallest finite `f64` value.\n /// Use [`f64::MIN`](../../std/primitive.f64.html#associatedconstant.MIN) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f64::MIN;\n+///\n+/// // intended way\n+/// let min = f64::MIN;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f64 = f64::MIN;\n+\n /// Smallest positive normal `f64` value.\n /// Use [`f64::MIN_POSITIVE`](../../std/primitive.f64.html#associatedconstant.MIN_POSITIVE) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f64::MIN_POSITIVE;\n+///\n+/// // intended way\n+/// let min = f64::MIN_POSITIVE;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n+\n /// Largest finite `f64` value.\n /// Use [`f64::MAX`](../../std/primitive.f64.html#associatedconstant.MAX) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f64::MAX;\n+///\n+/// // intended way\n+/// let max = f64::MAX;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f64 = f64::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n /// Use [`f64::MIN_EXP`](../../std/primitive.f64.html#associatedconstant.MIN_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f64::MIN_EXP;\n+///\n+/// // intended way\n+/// let min = f64::MIN_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_EXP: i32 = f64::MIN_EXP;\n+\n /// Maximum possible power of 2 exponent.\n /// Use [`f64::MAX_EXP`](../../std/primitive.f64.html#associatedconstant.MAX_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f64::MAX_EXP;\n+///\n+/// // intended way\n+/// let max = f64::MAX_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_EXP: i32 = f64::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n /// Use [`f64::MIN_10_EXP`](../../std/primitive.f64.html#associatedconstant.MIN_10_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f64::MIN_10_EXP;\n+///\n+/// // intended way\n+/// let min = f64::MIN_10_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n+\n /// Maximum possible power of 10 exponent.\n /// Use [`f64::MAX_10_EXP`](../../std/primitive.f64.html#associatedconstant.MAX_10_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f64::MAX_10_EXP;\n+///\n+/// // intended way\n+/// let max = f64::MAX_10_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n \n /// Not a Number (NaN).\n /// Use [`f64::NAN`](../../std/primitive.f64.html#associatedconstant.NAN) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let nan = std::f64::NAN;\n+///\n+/// // intended way\n+/// let nan = f64::NAN;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NAN: f64 = f64::NAN;\n+\n /// Infinity (\u221e).\n /// Use [`f64::INFINITY`](../../std/primitive.f64.html#associatedconstant.INFINITY) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let inf = std::f64::INFINITY;\n+///\n+/// // intended way\n+/// let inf = f64::INFINITY;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INFINITY: f64 = f64::INFINITY;\n+\n /// Negative infinity (\u2212\u221e).\n /// Use [`f64::NEG_INFINITY`](../../std/primitive.f64.html#associatedconstant.NEG_INFINITY) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let ninf = std::f64::NEG_INFINITY;\n+///\n+/// // intended way\n+/// let ninf = f64::NEG_INFINITY;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NEG_INFINITY: f64 = f64::NEG_INFINITY;\n "}, {"sha": "ffd30b03f2109c677692713e06c203351aa89b09", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -12,14 +12,36 @@ macro_rules! int_module {\n     ($T:ident, #[$attr:meta]) => (\n         doc_comment! {\n             concat!(\"The smallest value that can be represented by this integer type.\n-Use [`\", stringify!($T), \"::MIN\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MIN) instead.\"),\n+Use [`\", stringify!($T), \"::MIN\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MIN) instead.\n+\n+# Examples\n+\n+```rust\n+// deprecated way\n+let min = std::\", stringify!($T), \"::MIN;\n+\n+// intended way\n+let min = \", stringify!($T), \"::MIN;\n+```\n+\"),\n             #[$attr]\n             pub const MIN: $T = $T::MIN;\n         }\n \n         doc_comment! {\n             concat!(\"The largest value that can be represented by this integer type.\n-Use [`\", stringify!($T), \"::MAX\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MAX) instead.\"),\n+Use [`\", stringify!($T), \"::MAX\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MAX) instead.\n+\n+# Examples\n+\n+```rust\n+// deprecated way\n+let max = std::\", stringify!($T), \"::MAX;\n+\n+// intended way\n+let max = \", stringify!($T), \"::MAX;\n+```\n+\"),\n             #[$attr]\n             pub const MAX: $T = $T::MAX;\n         }"}, {"sha": "cea7e8176b67fbcc7b0e936eda8130ebb42f524f", "filename": "src/librustc_builtin_macros/deriving/debug.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -88,7 +88,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n \n                 // Use `let _ = expr;` to avoid triggering the\n                 // unused_results lint.\n-                stmts.push(stmt_let_undescore(cx, span, expr));\n+                stmts.push(stmt_let_underscore(cx, span, expr));\n             }\n         }\n         ast::VariantData::Struct(..) => {\n@@ -112,7 +112,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n                     Ident::new(sym::field, span),\n                     vec![name, field],\n                 );\n-                stmts.push(stmt_let_undescore(cx, span, expr));\n+                stmts.push(stmt_let_underscore(cx, span, expr));\n             }\n         }\n     }\n@@ -124,7 +124,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n     cx.expr_block(block)\n }\n \n-fn stmt_let_undescore(cx: &mut ExtCtxt<'_>, sp: Span, expr: P<ast::Expr>) -> ast::Stmt {\n+fn stmt_let_underscore(cx: &mut ExtCtxt<'_>, sp: Span, expr: P<ast::Expr>) -> ast::Stmt {\n     let local = P(ast::Local {\n         pat: cx.pat_wild(sp),\n         ty: None,"}, {"sha": "394e2f332cb216d8fd9b3ef3ee370fc1cce0a7eb", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -853,7 +853,9 @@ unsafe fn embed_bitcode(\n         || cgcx.opts.target_triple.triple().starts_with(\"asmjs\")\n     {\n         // nothing to do here\n-    } else if cgcx.opts.target_triple.triple().contains(\"windows\") {\n+    } else if cgcx.opts.target_triple.triple().contains(\"windows\")\n+        || cgcx.opts.target_triple.triple().contains(\"uefi\")\n+    {\n         let asm = \"\n             .section .llvmbc,\\\"n\\\"\n             .section .llvmcmd,\\\"n\\\""}, {"sha": "ade89ab39d472ce1c5b36245251d436c8e6954c7", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -2607,7 +2607,7 @@ where\n \n                     // `Box` (`UniqueBorrowed`) are not necessarily dereferenceable\n                     // for the entire duration of the function as they can be deallocated\n-                    // any time. Set their valid size to 0.\n+                    // at any time. Set their valid size to 0.\n                     attrs.pointee_size = match kind {\n                         PointerKind::UniqueOwned => Size::ZERO,\n                         _ => pointee.size,"}, {"sha": "b19d035ab04c079e8e5e5b946592008f34035d73", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -180,11 +180,14 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let location_table = &LocationTable::new(&body);\n \n     let mut errors_buffer = Vec::new();\n-    let (move_data, move_errors): (MoveData<'tcx>, Option<Vec<(Place<'tcx>, MoveError<'tcx>)>>) =\n+    let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =\n         match MoveData::gather_moves(&body, tcx, param_env) {\n-            Ok(move_data) => (move_data, None),\n-            Err((move_data, move_errors)) => (move_data, Some(move_errors)),\n+            Ok(move_data) => (move_data, Vec::new()),\n+            Err((move_data, move_errors)) => (move_data, move_errors),\n         };\n+    let promoted_errors = promoted\n+        .iter_enumerated()\n+        .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));\n \n     let mdpe = MoveDataParamEnv { move_data, param_env };\n \n@@ -264,6 +267,41 @@ fn do_mir_borrowck<'a, 'tcx>(\n         _ => true,\n     };\n \n+    for (idx, move_data_results) in promoted_errors {\n+        let promoted_body = &promoted[idx];\n+        let dominators = promoted_body.dominators();\n+\n+        if let Err((move_data, move_errors)) = move_data_results {\n+            let mut promoted_mbcx = MirBorrowckCtxt {\n+                infcx,\n+                body: promoted_body,\n+                mir_def_id: def_id.to_def_id(),\n+                move_data: &move_data,\n+                location_table: &LocationTable::new(promoted_body),\n+                movable_generator,\n+                locals_are_invalidated_at_exit,\n+                access_place_error_reported: Default::default(),\n+                reservation_error_reported: Default::default(),\n+                reservation_warnings: Default::default(),\n+                move_error_reported: BTreeMap::new(),\n+                uninitialized_error_reported: Default::default(),\n+                errors_buffer,\n+                regioncx: regioncx.clone(),\n+                used_mut: Default::default(),\n+                used_mut_upvars: SmallVec::new(),\n+                borrow_set: borrow_set.clone(),\n+                dominators,\n+                upvars: Vec::new(),\n+                local_names: IndexVec::from_elem(None, &promoted_body.local_decls),\n+                region_names: RefCell::default(),\n+                next_region_name: RefCell::new(1),\n+                polonius_output: None,\n+            };\n+            promoted_mbcx.report_move_errors(move_errors);\n+            errors_buffer = promoted_mbcx.errors_buffer;\n+        };\n+    }\n+\n     let dominators = body.dominators();\n \n     let mut mbcx = MirBorrowckCtxt {\n@@ -301,9 +339,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         borrows: flow_borrows,\n     };\n \n-    if let Some(errors) = move_errors {\n-        mbcx.report_move_errors(errors);\n-    }\n+    mbcx.report_move_errors(move_errors);\n \n     dataflow::visit_results(\n         &body,"}, {"sha": "bb6e3681cc3c12d9ae81486c56d45ac3931a324b", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -39,6 +39,9 @@ pub trait NonConstOp: std::fmt::Debug {\n             \"{} contains unimplemented expression type\",\n             ccx.const_kind()\n         );\n+        if let Some(feat) = Self::feature_gate() {\n+            err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feat));\n+        }\n         if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n             err.note(\n                 \"A function call isn't allowed in the const's initialization expression \\"}, {"sha": "cd6cd94b143564d288a4d7018cb2dc2e7b53fcfe", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -1753,7 +1753,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         potential_assoc_types: Vec<Span>,\n         trait_bounds: &[hir::PolyTraitRef<'_>],\n     ) {\n-        if !associated_types.values().any(|v| !v.is_empty()) {\n+        if associated_types.values().all(|v| v.is_empty()) {\n             return;\n         }\n         let tcx = self.tcx();"}, {"sha": "077bdc33e66f6ae78425cc8ddbe6aca3a418ea7c", "filename": "src/test/rustdoc/auxiliary/issue-27362-aux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-27362-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-27362-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-27362-aux.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "previous_filename": "src/test/rustdoc/auxiliary/issue-27362.rs"}, {"sha": "1cbba4b663df89dd20e9b61971384c9866b4dc84", "filename": "src/test/rustdoc/issue-27362.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Frustdoc%2Fissue-27362.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Frustdoc%2Fissue-27362.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-27362.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -1,10 +1,10 @@\n-// aux-build:issue-27362.rs\n+// aux-build:issue-27362-aux.rs\n // ignore-cross-compile\n-// ignore-test This test fails on beta/stable #32019\n \n-extern crate issue_27362;\n-pub use issue_27362 as quux;\n+extern crate issue_27362_aux;\n \n-// @matches issue_27362/quux/fn.foo.html '//pre' \"pub const fn foo()\"\n-// @matches issue_27362/quux/fn.bar.html '//pre' \"pub const unsafe fn bar()\"\n-// @matches issue_27362/quux/struct.Foo.html '//code' \"const unsafe fn baz()\"\n+pub use issue_27362_aux::*;\n+\n+// @matches issue_27362/fn.foo.html '//pre' \"pub const fn foo()\"\n+// @matches issue_27362/fn.bar.html '//pre' \"pub const unsafe fn bar()\"\n+// @matches issue_27362/struct.Foo.html '//code' \"const unsafe fn baz()\""}, {"sha": "13da34f3922c2516ef0c8baec99da3c85b849c93", "filename": "src/test/ui/borrowck/move-error-in-promoted-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-in-promoted-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-in-promoted-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-in-promoted-2.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for #70934\n+\n+struct S;\n+\n+fn foo() {\n+    &([S][0],);\n+    //~^ ERROR cannot move out of type `[S; 1]`\n+}\n+\n+fn main() {}"}, {"sha": "38dba94bdd41b53a133db1f586fe4833574d7844", "filename": "src/test/ui/borrowck/move-error-in-promoted-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-in-promoted-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-in-promoted-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-in-promoted-2.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -0,0 +1,12 @@\n+error[E0508]: cannot move out of type `[S; 1]`, a non-copy array\n+  --> $DIR/move-error-in-promoted-2.rs:6:7\n+   |\n+LL |     &([S][0],);\n+   |       ^^^^^^\n+   |       |\n+   |       cannot move out of here\n+   |       move occurs because value has type `S`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0508`."}, {"sha": "b94db6451312390ec185701c857c287881b43a60", "filename": "src/test/ui/borrowck/move-error-in-promoted.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-in-promoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-in-promoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-in-promoted.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -0,0 +1,17 @@\n+// Regression test for #70934\n+\n+fn f() {\n+    const C: [S2; 1] = [S2];\n+    let _ = S1(C[0]).clone();\n+    //~^ ERROR cannot move out of type `[S2; 1]`\n+}\n+\n+#[derive(Clone)]\n+struct S1(S2);\n+\n+#[derive(Clone)]\n+struct S2;\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "a4432e38da0e457141c36fc4667c2da82b86e8dd", "filename": "src/test/ui/borrowck/move-error-in-promoted.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-in-promoted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-in-promoted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-in-promoted.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -0,0 +1,12 @@\n+error[E0508]: cannot move out of type `[S2; 1]`, a non-copy array\n+  --> $DIR/move-error-in-promoted.rs:5:16\n+   |\n+LL |     let _ = S1(C[0]).clone();\n+   |                ^^^^\n+   |                |\n+   |                cannot move out of here\n+   |                move occurs because value has type `S2`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0508`."}, {"sha": "6b5a739899cacb12885d1cdafb9f73e0db23eed6", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -18,6 +18,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL | static STATIC11: Box<MyOwned> = box MyOwned;\n    |                                     ^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/check-static-values-constraints.rs:90:32\n@@ -36,6 +38,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL |     box MyOwned,\n    |         ^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:97:5\n@@ -48,6 +52,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL |     box MyOwned,\n    |         ^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:102:6\n@@ -60,6 +66,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL |     &box MyOwned,\n    |          ^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:104:6\n@@ -72,6 +80,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL |     &box MyOwned,\n    |          ^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:111:5\n@@ -84,6 +94,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL |     box 3;\n    |         ^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0507]: cannot move out of static item `x`\n   --> $DIR/check-static-values-constraints.rs:116:45\n@@ -105,6 +117,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                          ^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 17 previous errors\n "}, {"sha": "89fafbbe6f0444324a7df4afa9c71e756b2c54b3", "filename": "src/test/ui/const-suggest-feature.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconst-suggest-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconst-suggest-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-suggest-feature.rs?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -0,0 +1,9 @@\n+const WRITE: () = unsafe {\n+    *std::ptr::null_mut() = 0;\n+    //~^ ERROR dereferencing raw pointers in constants is unstable\n+    //~| HELP add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+    //~| ERROR constant contains unimplemented expression type\n+    //~| HELP add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+};\n+\n+fn main() {}"}, {"sha": "6b91df6b42d91b71985c4c03708634130c30908c", "filename": "src/test/ui/const-suggest-feature.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconst-suggest-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconst-suggest-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-suggest-feature.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: dereferencing raw pointers in constants is unstable\n+  --> $DIR/const-suggest-feature.rs:2:5\n+   |\n+LL |     *std::ptr::null_mut() = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n+   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-suggest-feature.rs:2:5\n+   |\n+LL |     *std::ptr::null_mut() = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0019, E0658.\n+For more information about an error, try `rustc --explain E0019`."}, {"sha": "14dcc074639e536d743efbda6f4bf63398f1c95e", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -3,6 +3,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL |     *FOO.0.get() = 5;\n    |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "44ae1ecf04718383f918d0cd5cfb274104b7fbcd", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -3,6 +3,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL |     *FOO.0.get() = 5;\n    |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/mod-static-with-const-fn.rs:21:5"}, {"sha": "62fd04ea522c3326e626b90b399a248e9b1b4f3d", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -3,6 +3,8 @@ error[E0019]: constant function contains unimplemented expression type\n    |\n LL |         self.state = x;\n    |         ^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: references in constants may only refer to immutable values\n   --> $DIR/const_let_assign3.rs:16:5\n@@ -27,6 +29,8 @@ error[E0019]: constant contains unimplemented expression type\n    |\n LL |     *y = 42;\n    |     ^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n "}, {"sha": "cfa48d947c992894f07d487676b5eebea57a122f", "filename": "src/test/ui/consts/projection_qualif.stock.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -21,6 +21,8 @@ error[E0019]: constant contains unimplemented expression type\n    |\n LL |         unsafe { *b = 5; }\n    |                  ^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cc169351bf268c14dd63c5cc689a65808f02c576", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.stock.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -12,6 +12,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c15ab5c655a461208dcfe819ac86f5abb1f0c429", "filename": "src/test/ui/error-codes/E0010-teach.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -12,6 +12,7 @@ error[E0019]: constant contains unimplemented expression type\n LL | const CON : Box<i32> = box 0;\n    |                            ^\n    |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n    = note: A function call isn't allowed in the const's initialization expression because the expression's value must be known at compile-time.\n    = note: Remember: you can't use a function call inside a const's initialization expression! However, you can use it anywhere else.\n "}, {"sha": "f49fb9c46326b308b7ed5495105fdf7b1d6bf8b7", "filename": "src/test/ui/error-codes/E0010.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -9,6 +9,8 @@ error[E0019]: constant contains unimplemented expression type\n    |\n LL | const CON : Box<i32> = box 0;\n    |                            ^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f959ad0d00887af3de083347a7084a513c472d7c", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -12,6 +12,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: references in statics may only refer to immutable values\n   --> $DIR/E0017.rs:6:39"}, {"sha": "8bdfbac36816b9869718c64df2ef1a080d436ac3", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -12,6 +12,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: references in statics may only refer to immutable values\n   --> $DIR/E0388.rs:5:39"}, {"sha": "22faa66d9fb039cd9c08322e1736f1590076024c", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name3.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name3.rs?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -1,14 +0,0 @@\n-// Test that we use fully-qualified type names in error messages.\n-\n-// ignore-test\n-\n-type T1 = usize;\n-type T2 = isize;\n-\n-fn bar(x: T1) -> T2 {\n-    return x;\n-    //~^ ERROR mismatched types: expected `T2`, found `T1`\n-}\n-\n-fn main() {\n-}"}, {"sha": "6b7b6d010aa22964bee1be2079052976efb02f20", "filename": "src/test/ui/issues/issue-17025.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fissues%2Fissue-17025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fissues%2Fissue-17025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17025.rs?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -1,13 +0,0 @@\n-// ignore-test the unsized enum no longer compiles\n-\n-enum A {\n-    B(char),\n-    C([Box<A>]),\n-}\n-\n-fn c(c:char) {\n-    A::B(c);\n-    //~^ ERROR cannot move a value of type A: the size of A cannot be statically determined\n-}\n-\n-pub fn main() {}"}, {"sha": "efff2c24525e80eb16a2a931c621abfb8372ec81", "filename": "src/test/ui/issues/issue-7364.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -9,6 +9,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n    |                                         ^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0277]: `std::cell::RefCell<isize>` cannot be shared between threads safely\n   --> $DIR/issue-7364.rs:6:1"}, {"sha": "a618b49d1089efd70f462d6c8bc2d74b75547c61", "filename": "src/test/ui/static/static-mut-not-constant.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04689e22e946879f2f5e2c73849d2f4e1f2b4b32/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr?ref=04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "patch": "@@ -9,6 +9,8 @@ error[E0019]: static contains unimplemented expression type\n    |\n LL | static mut a: Box<isize> = box 3;\n    |                                ^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}]}