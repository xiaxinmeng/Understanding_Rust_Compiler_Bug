{"sha": "cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "node_id": "C_kwDOAAsO6NoAKGNlZTFlMTU3ZDc0ZmU0YjAwZTc3NjRjYTk3YzU4YzdjOWYwZDkzYzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-12T14:53:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-12T14:53:45Z"}, "message": "Auto merge of #12993 - lowr:patch/swap-name-and-escaped-name, r=Veykril\n\nMake `Name` hold escaped name\n\nResolves #12787\nResolves rust-lang/rust#99361\n\nThis PR effectively swaps `Name` and `EscapedName` in hir. In other words, it makes `Name` hold and print escaped raw identifiers and introduces another struct `UnescapedName` for cases where you need to print names without \"r#\" prefix.\n\nMy rationale is that it makes it easier for us to format an escaped name into string, which is what we want when we serialize names in general. This is because we format a name into string usually when we are presenting it to the users and arguably they expect its escaped form as that's what they see and write in the source code.\n\nI split the change for `Name` into 3 commits to make it easier to follow but it also made some tests fail in the intermediate commits. I can squash them into a commit after the review if desired. I've also made similar changes for `ModPath` and `EscapedModPath` as it makes them consistent with `Name`.\n\nFor reference, there was a brief discussion on this in [a zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/escaping.20.60Name.60s).", "tree": {"sha": "80134953cc4d1956d7bfd46a9dea4c21a1e6b27d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80134953cc4d1956d7bfd46a9dea4c21a1e6b27d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "html_url": "https://github.com/rust-lang/rust/commit/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "696bee324677d1ae3cb6b9454b33301adfc1077e", "url": "https://api.github.com/repos/rust-lang/rust/commits/696bee324677d1ae3cb6b9454b33301adfc1077e", "html_url": "https://github.com/rust-lang/rust/commit/696bee324677d1ae3cb6b9454b33301adfc1077e"}, {"sha": "ba6db3e9b054902549a0cf487cd7f69db2654aa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6db3e9b054902549a0cf487cd7f69db2654aa1", "html_url": "https://github.com/rust-lang/rust/commit/ba6db3e9b054902549a0cf487cd7f69db2654aa1"}], "stats": {"total": 318, "additions": 255, "deletions": 63}, "files": [{"sha": "99f7f1b549e2c91f0c09e3af97a6be772f0c1b61", "filename": "crates/hir-def/src/nameres/mod_resolution.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fhir-def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fhir-def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -73,10 +73,12 @@ impl ModDir {\n                 candidate_files.push(self.dir_path.join_attr(attr_path, self.root_non_dir_owner))\n             }\n             None if file_id.is_include_macro(db.upcast()) => {\n+                let name = name.unescaped();\n                 candidate_files.push(format!(\"{}.rs\", name));\n                 candidate_files.push(format!(\"{}/mod.rs\", name));\n             }\n             None => {\n+                let name = name.unescaped();\n                 candidate_files.push(format!(\"{}{}.rs\", self.dir_path.0, name));\n                 candidate_files.push(format!(\"{}{}/mod.rs\", self.dir_path.0, name));\n             }"}, {"sha": "3fa585574deec5076c4ca53f0afd3be52747310e", "filename": "crates/hir-def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -132,9 +132,9 @@ pub struct Bar;\n         expect![[r#\"\n             crate\n             Bar: t v\n-            async: t\n+            r#async: t\n \n-            crate::async\n+            crate::r#async\n             Bar: t v\n         \"#]],\n     );"}, {"sha": "d0f73ec8208c60e52b2a38de539257b3321d98c9", "filename": "crates/hir-expand/src/mod_path.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -22,7 +22,7 @@ pub struct ModPath {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct EscapedModPath<'a>(&'a ModPath);\n+pub struct UnescapedModPath<'a>(&'a ModPath);\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum PathKind {\n@@ -102,8 +102,8 @@ impl ModPath {\n         }\n     }\n \n-    pub fn escaped(&self) -> EscapedModPath<'_> {\n-        EscapedModPath(self)\n+    pub fn unescaped(&self) -> UnescapedModPath<'_> {\n+        UnescapedModPath(self)\n     }\n \n     fn _fmt(&self, f: &mut fmt::Formatter<'_>, escaped: bool) -> fmt::Result {\n@@ -134,9 +134,9 @@ impl ModPath {\n             }\n             first_segment = false;\n             if escaped {\n-                segment.escaped().fmt(f)?\n-            } else {\n                 segment.fmt(f)?\n+            } else {\n+                segment.unescaped().fmt(f)?\n             };\n         }\n         Ok(())\n@@ -145,13 +145,13 @@ impl ModPath {\n \n impl Display for ModPath {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self._fmt(f, false)\n+        self._fmt(f, true)\n     }\n }\n \n-impl<'a> Display for EscapedModPath<'a> {\n+impl<'a> Display for UnescapedModPath<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.0._fmt(f, true)\n+        self.0._fmt(f, false)\n     }\n }\n "}, {"sha": "87c663eec8e81c2deea72c1c6e41c49c55f383cf", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -7,12 +7,16 @@ use syntax::{ast, SmolStr, SyntaxKind};\n /// `Name` is a wrapper around string, which is used in hir for both references\n /// and declarations. In theory, names should also carry hygiene info, but we are\n /// not there yet!\n+///\n+/// Note that `Name` holds and prints escaped name i.e. prefixed with \"r#\" when it\n+/// is a raw identifier. Use [`unescaped()`][Name::unescaped] when you need the\n+/// name without \"r#\".\n #[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct Name(Repr);\n \n-/// `EscapedName` will add a prefix \"r#\" to the wrapped `Name` when it is a raw identifier\n+/// Wrapper of `Name` to print the name without \"r#\" even when it is a raw identifier.\n #[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n-pub struct EscapedName<'a>(&'a Name);\n+pub struct UnescapedName<'a>(&'a Name);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n enum Repr {\n@@ -34,37 +38,26 @@ fn is_raw_identifier(name: &str) -> bool {\n     is_keyword && !matches!(name, \"self\" | \"crate\" | \"super\" | \"Self\")\n }\n \n-impl<'a> fmt::Display for EscapedName<'a> {\n+impl<'a> fmt::Display for UnescapedName<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match &self.0 .0 {\n             Repr::Text(text) => {\n-                if is_raw_identifier(text) {\n-                    write!(f, \"r#{}\", &text)\n-                } else {\n-                    fmt::Display::fmt(&text, f)\n-                }\n+                let text = text.strip_prefix(\"r#\").unwrap_or(text);\n+                fmt::Display::fmt(&text, f)\n             }\n             Repr::TupleField(idx) => fmt::Display::fmt(&idx, f),\n         }\n     }\n }\n \n-impl<'a> EscapedName<'a> {\n-    pub fn is_escaped(&self) -> bool {\n-        match &self.0 .0 {\n-            Repr::Text(it) => is_raw_identifier(&it),\n-            Repr::TupleField(_) => false,\n-        }\n-    }\n-\n-    /// Returns the textual representation of this name as a [`SmolStr`].\n-    /// Prefer using this over [`ToString::to_string`] if possible as this conversion is cheaper in\n-    /// the general case.\n+impl<'a> UnescapedName<'a> {\n+    /// Returns the textual representation of this name as a [`SmolStr`]. Prefer using this over\n+    /// [`ToString::to_string`] if possible as this conversion is cheaper in the general case.\n     pub fn to_smol_str(&self) -> SmolStr {\n         match &self.0 .0 {\n             Repr::Text(it) => {\n-                if is_raw_identifier(&it) {\n-                    SmolStr::from_iter([\"r#\", &it])\n+                if let Some(stripped) = it.strip_prefix(\"r#\") {\n+                    SmolStr::new(stripped)\n                 } else {\n                     it.clone()\n                 }\n@@ -97,9 +90,11 @@ impl Name {\n \n     /// Resolve a name from the text of token.\n     fn resolve(raw_text: &str) -> Name {\n+        // When `raw_text` starts with \"r#\" but the name does not coincide with any\n+        // keyword, we never need the prefix so we strip it.\n         match raw_text.strip_prefix(\"r#\") {\n-            Some(text) => Name::new_text(SmolStr::new(text)),\n-            None => Name::new_text(raw_text.into()),\n+            Some(text) if !is_raw_identifier(text) => Name::new_text(SmolStr::new(text)),\n+            _ => Name::new_text(raw_text.into()),\n         }\n     }\n \n@@ -142,8 +137,15 @@ impl Name {\n         }\n     }\n \n-    pub fn escaped(&self) -> EscapedName<'_> {\n-        EscapedName(self)\n+    pub fn unescaped(&self) -> UnescapedName<'_> {\n+        UnescapedName(self)\n+    }\n+\n+    pub fn is_escaped(&self) -> bool {\n+        match &self.0 {\n+            Repr::Text(it) => it.starts_with(\"r#\"),\n+            Repr::TupleField(_) => false,\n+        }\n     }\n }\n "}, {"sha": "785db6fde1d5ad742003c733cb596f02404dec1d", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -233,7 +233,8 @@ fn add_type_alias_impl(\n     type_alias: hir::TypeAlias,\n ) {\n     let alias_name = type_alias.name(ctx.db);\n-    let (alias_name, escaped_name) = (alias_name.to_smol_str(), alias_name.escaped().to_smol_str());\n+    let (alias_name, escaped_name) =\n+        (alias_name.unescaped().to_smol_str(), alias_name.to_smol_str());\n \n     let label = format!(\"type {} =\", alias_name);\n     let replacement = format!(\"type {} = \", escaped_name);"}, {"sha": "693007ca3071a7cc2a5ee5fd205f66a62b291fd0", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -117,7 +117,7 @@ pub(crate) fn render_field(\n ) -> CompletionItem {\n     let is_deprecated = ctx.is_deprecated(field);\n     let name = field.name(ctx.db());\n-    let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n+    let (name, escaped_name) = (name.unescaped().to_smol_str(), name.to_smol_str());\n     let mut item = CompletionItem::new(\n         SymbolKind::Field,\n         ctx.source_range(),\n@@ -283,8 +283,8 @@ fn render_resolution_path(\n \n     let name = local_name.to_smol_str();\n     let mut item = render_resolution_simple_(ctx, &local_name, import_to_add, resolution);\n-    if local_name.escaped().is_escaped() {\n-        item.insert_text(local_name.escaped().to_smol_str());\n+    if local_name.is_escaped() {\n+        item.insert_text(local_name.to_smol_str());\n     }\n     // Add `<>` for generic types\n     let type_path_no_ty_args = matches!(\n@@ -306,7 +306,7 @@ fn render_resolution_path(\n                 item.lookup_by(name.clone())\n                     .label(SmolStr::from_iter([&name, \"<\u2026>\"]))\n                     .trigger_call_info()\n-                    .insert_snippet(cap, format!(\"{}<$0>\", local_name.escaped()));\n+                    .insert_snippet(cap, format!(\"{}<$0>\", local_name));\n             }\n         }\n     }\n@@ -342,7 +342,8 @@ fn render_resolution_simple_(\n     let ctx = ctx.import_to_add(import_to_add);\n     let kind = res_to_kind(resolution);\n \n-    let mut item = CompletionItem::new(kind, ctx.source_range(), local_name.to_smol_str());\n+    let mut item =\n+        CompletionItem::new(kind, ctx.source_range(), local_name.unescaped().to_smol_str());\n     item.set_relevance(ctx.completion_relevance())\n         .set_documentation(scope_def_docs(db, resolution))\n         .set_deprecated(scope_def_is_deprecated(&ctx, resolution));"}, {"sha": "93ea825e00427bde6a6fb4f083131b051586eebc", "filename": "crates/ide-completion/src/render/const_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fconst_.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn render_const(ctx: RenderContext<'_>, const_: hir::Const) -> Option\n fn render(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem> {\n     let db = ctx.db();\n     let name = const_.name(db)?;\n-    let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n+    let (name, escaped_name) = (name.unescaped().to_smol_str(), name.to_smol_str());\n     let detail = const_.display(db).to_string();\n \n     let mut item = CompletionItem::new(SymbolKind::Const, ctx.source_range(), name.clone());"}, {"sha": "9cf64691298ebcfe74576bbbbbc844edd217d3b4", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -52,10 +52,10 @@ fn render(\n \n     let (call, escaped_call) = match &func_kind {\n         FuncKind::Method(_, Some(receiver)) => (\n-            format!(\"{}.{}\", receiver, &name).into(),\n-            format!(\"{}.{}\", receiver.escaped(), name.escaped()).into(),\n+            format!(\"{}.{}\", receiver.unescaped(), name.unescaped()).into(),\n+            format!(\"{}.{}\", receiver, name).into(),\n         ),\n-        _ => (name.to_smol_str(), name.escaped().to_smol_str()),\n+        _ => (name.unescaped().to_smol_str(), name.to_smol_str()),\n     };\n     let mut item = CompletionItem::new(\n         if func.self_param(db).is_some() {\n@@ -96,7 +96,7 @@ fn render(\n     item.set_documentation(ctx.docs(func))\n         .set_deprecated(ctx.is_deprecated(func) || ctx.is_deprecated_assoc_item(func))\n         .detail(detail(db, func))\n-        .lookup_by(name.to_smol_str());\n+        .lookup_by(name.unescaped().to_smol_str());\n \n     match ctx.completion.config.snippet_cap {\n         Some(cap) => {"}, {"sha": "707dea206be577efcc7cbb455692dbe4614418bb", "filename": "crates/ide-completion/src/render/literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -73,7 +73,7 @@ fn render(\n         None => (name.clone().into(), name.into(), false),\n     };\n     let (qualified_name, escaped_qualified_name) =\n-        (qualified_name.to_string(), qualified_name.escaped().to_string());\n+        (qualified_name.unescaped().to_string(), qualified_name.to_string());\n     let snippet_cap = ctx.snippet_cap();\n \n     let mut rendered = match kind {"}, {"sha": "eabd0bd17d65ffe4fc965f82aeb7d17eee43e4df", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -46,7 +46,7 @@ fn render(\n         ctx.source_range()\n     };\n \n-    let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n+    let (name, escaped_name) = (name.unescaped().to_smol_str(), name.to_smol_str());\n     let docs = ctx.docs(macro_);\n     let docs_str = docs.as_ref().map(Documentation::as_str).unwrap_or_default();\n     let is_fn_like = macro_.is_fn_like(completion.db);"}, {"sha": "1c1299e33b6701951dd1646ea5de10998f88970b", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -31,7 +31,7 @@ pub(crate) fn render_struct_pat(\n     }\n \n     let name = local_name.unwrap_or_else(|| strukt.name(ctx.db()));\n-    let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n+    let (name, escaped_name) = (name.unescaped().to_smol_str(), name.to_smol_str());\n     let kind = strukt.kind(ctx.db());\n     let label = format_literal_label(name.as_str(), kind);\n     let pat = render_pat(&ctx, pattern_ctx, &escaped_name, kind, &visible_fields, fields_omitted)?;\n@@ -53,10 +53,10 @@ pub(crate) fn render_variant_pat(\n     let (visible_fields, fields_omitted) = visible_fields(ctx.completion, &fields, variant)?;\n \n     let (name, escaped_name) = match path {\n-        Some(path) => (path.to_string().into(), path.escaped().to_string().into()),\n+        Some(path) => (path.unescaped().to_string().into(), path.to_string().into()),\n         None => {\n             let name = local_name.unwrap_or_else(|| variant.name(ctx.db()));\n-            (name.to_smol_str(), name.escaped().to_smol_str())\n+            (name.unescaped().to_smol_str(), name.to_smol_str())\n         }\n     };\n \n@@ -146,7 +146,7 @@ fn render_record_as_pat(\n             format!(\n                 \"{name} {{ {}{} }}\",\n                 fields.enumerate().format_with(\", \", |(idx, field), f| {\n-                    f(&format_args!(\"{}${}\", field.name(db).escaped(), idx + 1))\n+                    f(&format_args!(\"{}${}\", field.name(db), idx + 1))\n                 }),\n                 if fields_omitted { \", ..\" } else { \"\" },\n                 name = name\n@@ -155,7 +155,7 @@ fn render_record_as_pat(\n         None => {\n             format!(\n                 \"{name} {{ {}{} }}\",\n-                fields.map(|field| field.name(db).escaped().to_smol_str()).format(\", \"),\n+                fields.map(|field| field.name(db).to_smol_str()).format(\", \"),\n                 if fields_omitted { \", ..\" } else { \"\" },\n                 name = name\n             )"}, {"sha": "de919429f2f95e5b04f75d77aadcc3bcfa1810bd", "filename": "crates/ide-completion/src/render/type_alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -32,11 +32,11 @@ fn render(\n     let name = type_alias.name(db);\n     let (name, escaped_name) = if with_eq {\n         (\n+            SmolStr::from_iter([&name.unescaped().to_smol_str(), \" = \"]),\n             SmolStr::from_iter([&name.to_smol_str(), \" = \"]),\n-            SmolStr::from_iter([&name.escaped().to_smol_str(), \" = \"]),\n         )\n     } else {\n-        (name.to_smol_str(), name.escaped().to_smol_str())\n+        (name.unescaped().to_smol_str(), name.to_smol_str())\n     };\n     let detail = type_alias.display(db).to_string();\n "}, {"sha": "bb32330f276de7853c3290be23277007c1f9c2cd", "filename": "crates/ide-completion/src/render/union_literal.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -21,8 +21,8 @@ pub(crate) fn render_union_literal(\n     let name = local_name.unwrap_or_else(|| un.name(ctx.db()));\n \n     let (qualified_name, escaped_qualified_name) = match path {\n-        Some(p) => (p.to_string(), p.escaped().to_string()),\n-        None => (name.to_string(), name.escaped().to_string()),\n+        Some(p) => (p.unescaped().to_string(), p.to_string()),\n+        None => (name.unescaped().to_string(), name.to_string()),\n     };\n \n     let mut item = CompletionItem::new(\n@@ -42,15 +42,15 @@ pub(crate) fn render_union_literal(\n         format!(\n             \"{} {{ ${{1|{}|}}: ${{2:()}} }}$0\",\n             escaped_qualified_name,\n-            fields.iter().map(|field| field.name(ctx.db()).escaped().to_smol_str()).format(\",\")\n+            fields.iter().map(|field| field.name(ctx.db()).to_smol_str()).format(\",\")\n         )\n     } else {\n         format!(\n             \"{} {{ {} }}\",\n             escaped_qualified_name,\n-            fields.iter().format_with(\", \", |field, f| {\n-                f(&format_args!(\"{}: ()\", field.name(ctx.db()).escaped()))\n-            })\n+            fields\n+                .iter()\n+                .format_with(\", \", |field, f| { f(&format_args!(\"{}: ()\", field.name(ctx.db()))) })\n         )\n     };\n "}, {"sha": "664845330eb8f4ab16fe74c2ba8aa1c6065525db", "filename": "crates/ide-completion/src/render/variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -24,9 +24,9 @@ pub(crate) fn render_record_lit(\n ) -> RenderedLiteral {\n     let completions = fields.iter().enumerate().format_with(\", \", |(idx, field), f| {\n         if snippet_cap.is_some() {\n-            f(&format_args!(\"{}: ${{{}:()}}\", field.name(db).escaped(), idx + 1))\n+            f(&format_args!(\"{}: ${{{}:()}}\", field.name(db), idx + 1))\n         } else {\n-            f(&format_args!(\"{}: ()\", field.name(db).escaped()))\n+            f(&format_args!(\"{}: ()\", field.name(db)))\n         }\n     });\n "}, {"sha": "0181c6b8e456a1881e723ce139ef105e4f4be92a", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=cee1e157d74fe4b00e7764ca97c58c7c9f0d93c2", "patch": "@@ -2225,4 +2225,190 @@ macro_rules! foo {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_paths_with_raw_ident() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+mod r#mod {\n+    #[test]\n+    fn r#fn() {}\n+\n+    /// ```\n+    /// ```\n+    fn r#for() {}\n+\n+    /// ```\n+    /// ```\n+    struct r#struct<r#type>(r#type);\n+\n+    /// ```\n+    /// ```\n+    impl<r#type> r#struct<r#type> {\n+        /// ```\n+        /// ```\n+        fn r#fn() {}\n+    }\n+\n+    enum r#enum {}\n+    impl r#struct<r#enum> {\n+        /// ```\n+        /// ```\n+        fn r#fn() {}\n+    }\n+\n+    trait r#trait {}\n+\n+    /// ```\n+    /// ```\n+    impl<T> r#trait for r#struct<T> {}\n+}\n+\"#,\n+            &[TestMod, Test, DocTest, DocTest, DocTest, DocTest, DocTest, DocTest],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..461,\n+                            focus_range: 5..10,\n+                            name: \"r#mod\",\n+                            kind: Module,\n+                            description: \"mod r#mod\",\n+                        },\n+                        kind: TestMod {\n+                            path: \"r#mod\",\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 17..41,\n+                            focus_range: 32..36,\n+                            name: \"r#fn\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"r#mod::r#fn\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 47..84,\n+                            name: \"r#for\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"r#mod::r#for\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 90..146,\n+                            name: \"r#struct\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"r#mod::r#struct\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 152..266,\n+                            focus_range: 189..205,\n+                            name: \"impl\",\n+                            kind: Impl,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"r#struct<r#type>\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 216..260,\n+                            name: \"r#fn\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"r#mod::r#struct<r#type>::r#fn\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 323..367,\n+                            name: \"r#fn\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"r#mod::r#struct<r#enum>::r#fn\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 401..459,\n+                            focus_range: 445..456,\n+                            name: \"impl\",\n+                            kind: Impl,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"r#struct<T>\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        )\n+    }\n }"}]}