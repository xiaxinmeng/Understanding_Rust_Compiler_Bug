{"sha": "3631d2928764c0c321c60cbbe1bdd6ab5945d452", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MzFkMjkyODc2NGMwYzMyMWM2MGNiYmUxYmRkNmFiNTk0NWQ0NTI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-10-03T16:00:18Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-10-03T16:00:18Z"}, "message": "Add tests for `const_generics`", "tree": {"sha": "4e759cb23c7664fc1162caed08283ec291486d83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e759cb23c7664fc1162caed08283ec291486d83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3631d2928764c0c321c60cbbe1bdd6ab5945d452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3631d2928764c0c321c60cbbe1bdd6ab5945d452", "html_url": "https://github.com/rust-lang/rust/commit/3631d2928764c0c321c60cbbe1bdd6ab5945d452", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3631d2928764c0c321c60cbbe1bdd6ab5945d452/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96eb68b1216e7fa0706a999595752bfd25dca886", "url": "https://api.github.com/repos/rust-lang/rust/commits/96eb68b1216e7fa0706a999595752bfd25dca886", "html_url": "https://github.com/rust-lang/rust/commit/96eb68b1216e7fa0706a999595752bfd25dca886"}], "stats": {"total": 413, "additions": 392, "deletions": 21}, "files": [{"sha": "9b1c1be1aa09b625221b7f71c4655b598ae8057c", "filename": "src/test/ui/const-generics/min_const_generics/const-argument-if-length.full.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.full.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,42 @@\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/const-argument-if-length.rs:8:28\n+   |\n+LL | pub const fn is_zst<T: ?Sized>() -> usize {\n+   |                     - this type parameter needs to be `Sized`\n+LL |     if std::mem::size_of::<T>() == 0 {\n+   |                            ^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-argument-if-length.rs:19:15\n+   |\n+LL |     pad: [u8; is_zst::<T>()],\n+   |               ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/const-argument-if-length.rs:17:12\n+   |\n+LL | pub struct AtLeastByte<T: ?Sized> {\n+   |                        - this type parameter needs to be `Sized`\n+LL |     value: T,\n+   |            ^ doesn't have a size known at compile-time\n+   |\n+   = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     value: &T,\n+   |            ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     value: Box<T>,\n+   |            ^^^^ ^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0080, E0277.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "c666dce479f65318c175271c34bbf48ceda649d8", "filename": "src/test/ui/const-generics/min_const_generics/const-argument-if-length.min.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.min.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,30 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/const-argument-if-length.rs:19:24\n+   |\n+LL |     pad: [u8; is_zst::<T>()],\n+   |                        ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/const-argument-if-length.rs:17:12\n+   |\n+LL | pub struct AtLeastByte<T: ?Sized> {\n+   |                        - this type parameter needs to be `Sized`\n+LL |     value: T,\n+   |            ^ doesn't have a size known at compile-time\n+   |\n+   = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     value: &T,\n+   |            ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     value: Box<T>,\n+   |            ^^^^ ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "481ff97d68dbe02f1f2a1068dcdf65f876a65ea5", "filename": "src/test/ui/const-generics/min_const_generics/const-argument-if-length.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.rs?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -1,7 +1,12 @@\n-#![feature(min_const_generics)]\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub const fn is_zst<T: ?Sized>() -> usize {\n     if std::mem::size_of::<T>() == 0 {\n+        //[full]~^ ERROR the size for values of type `T` cannot be known at compilation time\n         1\n     } else {\n         0\n@@ -12,7 +17,8 @@ pub struct AtLeastByte<T: ?Sized> {\n     value: T,\n     //~^ ERROR the size for values of type `T` cannot be known at compilation time\n     pad: [u8; is_zst::<T>()],\n-    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[full]~^^ ERROR evaluation of constant value failed\n }\n \n fn main() {}"}, {"sha": "43b42d82d0c45908219029b6fcbeeacc725561d6", "filename": "src/test/ui/const-generics/min_const_generics/generic-function-call-in-array-length.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.full.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/generic-function-call-in-array-length.rs:9:29\n+   |\n+LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n+   |                             ^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "e7e968e4c2ad26b6b8e83f6f31a168eae98868ec", "filename": "src/test/ui/const-generics/min_const_generics/generic-function-call-in-array-length.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.min.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/generic-function-call-in-array-length.rs:9:39\n+   |\n+LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n+   |                                       ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/generic-function-call-in-array-length.rs:12:13\n+   |\n+LL |     [0; foo(N)]\n+   |             ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c8bbae29343dc094e5695ef6532befaa65e57fdf", "filename": "src/test/ui/const-generics/min_const_generics/generic-function-call-in-array-length.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.rs?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -1,11 +1,16 @@\n-#![feature(min_const_generics)]\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n const fn foo(n: usize) -> usize { n * 2 }\n \n fn bar<const N: usize>() -> [u32; foo(N)] {\n-    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[full]~^^ ERROR constant expression depends on a generic parameter\n     [0; foo(N)]\n-    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn main() {}"}, {"sha": "d311e1c0bae01c362d61f5cb509dd7ac3e34447e", "filename": "src/test/ui/const-generics/min_const_generics/generic-sum-in-array-length.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.full.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/generic-sum-in-array-length.rs:7:45\n+   |\n+LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+   |                                             ^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "6f157fbbbbb8ad961e19affde48b587ab6da8961", "filename": "src/test/ui/const-generics/min_const_generics/generic-sum-in-array-length.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.min.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/generic-sum-in-array-length.rs:7:53\n+   |\n+LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+   |                                                     ^ non-trivial anonymous constants must not depend on the parameter `A`\n+   |\n+   = help: it is currently only allowed to use either `A` or `{ A }` as generic constants\n+\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/generic-sum-in-array-length.rs:7:57\n+   |\n+LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+   |                                                         ^ non-trivial anonymous constants must not depend on the parameter `B`\n+   |\n+   = help: it is currently only allowed to use either `B` or `{ B }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "810095b384baa3ee5ab46372264aada3268a37c7", "filename": "src/test/ui/const-generics/min_const_generics/generic-sum-in-array-length.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.rs?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -1,7 +1,12 @@\n-#![feature(min_const_generics)]\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-//~^ ERROR generic parameters must not be used inside of non-trivial constant values\n-//~| ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~| ERROR generic parameters must not be used inside of non-trivial constant values\n+//[full]~^^^ ERROR constant expression depends on a generic parameter\n \n fn main() {}"}, {"sha": "c09d16d0ab05b86f9e95b935b550236174ef50f7", "filename": "src/test/ui/const-generics/min_const_generics/intrinsics-type_name-as-const-argument.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.full.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:15:8\n+   |\n+LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "307db088bf892a153c71cb7a63f72b990dd7cbb6", "filename": "src/test/ui/const-generics/min_const_generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,19 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:15:44\n+   |\n+LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n+   |                                            ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: `&'static str` is forbidden as the type of a const generic parameter\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:10:22\n+   |\n+LL | trait Trait<const S: &'static str> {}\n+   |                      ^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "37b6cf4bab92bf9f57ea4c91316d4f04729a6a1d", "filename": "src/test/ui/const-generics/min_const_generics/intrinsics-type_name-as-const-argument.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.rs?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -1,13 +1,20 @@\n-#![feature(min_const_generics)]\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n #![feature(core_intrinsics)]\n+#![feature(const_type_name)]\n \n trait Trait<const S: &'static str> {}\n-//~^ ERROR `&'static str` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `&'static str` is forbidden as the type of a const generic parameter\n \n struct Bug<T>\n where\n     T: Trait<{std::intrinsics::type_name::<T>()}>\n-    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[full]~^^ ERROR constant expression depends on a generic parameter\n {\n     t: T\n }"}, {"sha": "e15d65f197e29b47301bf9913009528bbee7cde2", "filename": "src/test/ui/const-generics/min_const_generics/issue-67375.full.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.full.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,21 @@\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/issue-67375.rs:9:12\n+   |\n+LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/issue-67375.rs:7:12\n+   |\n+LL | struct Bug<T> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "b13d9fdab0d965ec8bad47044dfbbf2c9d22cd56", "filename": "src/test/ui/const-generics/min_const_generics/issue-67375.min.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.min.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,19 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67375.rs:9:25\n+   |\n+LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n+   |                         ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/issue-67375.rs:7:12\n+   |\n+LL | struct Bug<T> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "994ec92cfb501b4135cdd96690559eb0503f899c", "filename": "src/test/ui/const-generics/min_const_generics/issue-67375.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.rs?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -1,9 +1,15 @@\n-#![feature(min_const_generics)]\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Bug<T> {\n     //~^ ERROR parameter `T` is never used\n     inner: [(); { [|_: &T| {}; 0].len() }],\n-    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[full]~^^ WARN cannot use constants which depend on generic parameters in types\n+    //[full]~^^^ WARN this was previously accepted by the compiler\n }\n \n fn main() {}"}, {"sha": "e79c4f5374e1a511e16cc32f0c7d0a903b640e7c", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-1.full.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.full.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,26 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-67945-1.rs:14:20\n+   |\n+LL | struct Bug<S> {\n+   |            - this type parameter\n+...\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                -   ^^^^^^^^^^^^^^^^^^^^^ expected type parameter `S`, found union `MaybeUninit`\n+   |                |\n+   |                expected due to this\n+   |\n+   = note: expected type parameter `S`\n+                       found union `MaybeUninit<_>`\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-1.rs:11:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0392.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "949b5da5920b1669a06d5bbb36bf496dd9c077d8", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-1.min.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.min.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,27 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67945-1.rs:14:16\n+   |\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67945-1.rs:17:45\n+   |\n+LL |         let b = &*(&x as *const _ as *const S);\n+   |                                             ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-1.rs:11:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "d1a83e978d1b8243276fd389235c6da931cd097c", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-1.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.rs?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -1,4 +1,8 @@\n-#![feature(min_const_generics)]\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::marker::PhantomData;\n \n@@ -8,9 +12,10 @@ struct Bug<S> {\n     //~^ ERROR parameter `S` is never used\n     A: [(); {\n         let x: S = MaybeUninit::uninit();\n-        //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[full]~^^ ERROR mismatched types\n         let b = &*(&x as *const _ as *const S);\n-        //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n         0\n     }],\n }"}, {"sha": "2f54b802df8a497d73bca082bb05452056796066", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-2.full.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.full.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,26 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-67945-2.rs:12:20\n+   |\n+LL | struct Bug<S> {\n+   |            - this type parameter\n+...\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                -   ^^^^^^^^^^^^^^^^^^^^^ expected type parameter `S`, found union `MaybeUninit`\n+   |                |\n+   |                expected due to this\n+   |\n+   = note: expected type parameter `S`\n+                       found union `MaybeUninit<_>`\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-2.rs:9:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0392.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "ed445b3e8f7909d94d7237db7669ab61132555b1", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-2.min.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.min.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,27 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67945-2.rs:12:16\n+   |\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67945-2.rs:15:45\n+   |\n+LL |         let b = &*(&x as *const _ as *const S);\n+   |                                             ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-2.rs:9:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "7f789297df0342663baabc7c670be306381ec62b", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-2.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.rs?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -1,14 +1,19 @@\n-#![feature(min_const_generics)]\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::mem::MaybeUninit;\n \n struct Bug<S> {\n     //~^ ERROR parameter `S` is never used\n     A: [(); {\n         let x: S = MaybeUninit::uninit();\n-        //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[full]~^^ ERROR mismatched types\n         let b = &*(&x as *const _ as *const S);\n-        //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n         0\n     }],\n }"}, {"sha": "c33b88588c0d0cf2dd19c0eba2669275a318493c", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-3.full.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.full.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,16 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-67945-3.rs:8:8\n+   |\n+LL |       A: [(); {\n+   |  ________^\n+LL | |\n+LL | |         let x: Option<Box<Self>> = None;\n+LL | |\n+LL | |         0\n+LL | |     }],\n+   | |______^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "9c6e101ece868dc40d18a23a2f37282c8f602d5e", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-3.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.min.stderr?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -0,0 +1,8 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/issue-67945-3.rs:10:27\n+   |\n+LL |         let x: Option<Box<Self>> = None;\n+   |                           ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "bca079101e2b30a08f2d964777e6d3df8d7f5d85", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-3.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3631d2928764c0c321c60cbbe1bdd6ab5945d452/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.rs?ref=3631d2928764c0c321c60cbbe1bdd6ab5945d452", "patch": "@@ -1,9 +1,14 @@\n-#![feature(min_const_generics)]\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Bug<S: ?Sized> {\n     A: [(); {\n+        //[full]~^ ERROR constant expression depends on a generic parameter\n         let x: Option<Box<Self>> = None;\n-        //~^ ERROR generic `Self` types are currently not permitted in anonymous constants\n+        //[min]~^ ERROR generic `Self` types are currently not permitted in anonymous constants\n         0\n     }],\n     B: S"}]}