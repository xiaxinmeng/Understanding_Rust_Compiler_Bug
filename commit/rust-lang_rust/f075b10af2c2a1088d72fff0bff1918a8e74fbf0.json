{"sha": "f075b10af2c2a1088d72fff0bff1918a8e74fbf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNzViMTBhZjJjMmExMDg4ZDcyZmZmMGJmZjE5MThhOGU3NGZiZjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-24T23:45:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-24T23:45:59Z"}, "message": "rustc: Add patterns to fold", "tree": {"sha": "6e65a8ce0c606bcd132aa9e6f7a7efd20dc94bd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e65a8ce0c606bcd132aa9e6f7a7efd20dc94bd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f075b10af2c2a1088d72fff0bff1918a8e74fbf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f075b10af2c2a1088d72fff0bff1918a8e74fbf0", "html_url": "https://github.com/rust-lang/rust/commit/f075b10af2c2a1088d72fff0bff1918a8e74fbf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f075b10af2c2a1088d72fff0bff1918a8e74fbf0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "756880a5f5e5df2474a9770d27fa3751b0be4916", "url": "https://api.github.com/repos/rust-lang/rust/commits/756880a5f5e5df2474a9770d27fa3751b0be4916", "html_url": "https://github.com/rust-lang/rust/commit/756880a5f5e5df2474a9770d27fa3751b0be4916"}], "stats": {"total": 107, "additions": 98, "deletions": 9}, "files": [{"sha": "cc0f296127e890ddbb5dbe368fcaae5e5e93c1f8", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f075b10af2c2a1088d72fff0bff1918a8e74fbf0/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f075b10af2c2a1088d72fff0bff1918a8e74fbf0/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=f075b10af2c2a1088d72fff0bff1918a8e74fbf0", "patch": "@@ -41,13 +41,11 @@ type block_ = rec(vec[@stmt] stmts,\n \n type pat = spanned[pat_];\n tag pat_ {\n-    pat_wild;\n-    pat_bind(ident);\n-    pat_tag(ident, vec[@pat]);\n+    pat_wild(ann);\n+    pat_bind(ident, ann);\n+    pat_tag(ident, vec[@pat], ann);\n }\n \n-type arm = rec(@pat pat, block block);\n-\n tag binop {\n     add;\n     sub;\n@@ -100,6 +98,8 @@ tag decl_ {\n     decl_item(@item);\n }\n \n+type arm = rec(@pat pat, block block);\n+\n type expr = spanned[expr_];\n tag expr_ {\n     expr_vec(vec[@expr], ann);"}, {"sha": "a3cc00a0753a8e6aa04bb8de0d2dbb5f6f3ec0cf", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f075b10af2c2a1088d72fff0bff1918a8e74fbf0/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f075b10af2c2a1088d72fff0bff1918a8e74fbf0/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=f075b10af2c2a1088d72fff0bff1918a8e74fbf0", "patch": "@@ -815,13 +815,19 @@ impure fn parse_initializer(parser p) -> option.t[@ast.expr] {\n impure fn parse_pat(parser p) -> @ast.pat {\n     auto lo = p.get_span();\n \n-    auto pat = ast.pat_wild;    // FIXME: typestate bug\n+    auto pat = ast.pat_wild(ast.ann_none);  // FIXME: typestate bug\n     alt (p.peek()) {\n-        case (token.UNDERSCORE) { p.bump(); pat = ast.pat_wild; }\n+        case (token.UNDERSCORE) {\n+            p.bump();\n+            pat = ast.pat_wild(ast.ann_none);\n+        }\n         case (token.QUES) {\n             p.bump();\n             alt (p.peek()) {\n-                case (token.IDENT(?id)) { p.bump(); pat = ast.pat_bind(id); }\n+                case (token.IDENT(?id)) {\n+                    p.bump();\n+                    pat = ast.pat_bind(id, ast.ann_none);\n+                }\n                 case (?tok) {\n                     p.err(\"expected identifier after '?' in pattern but \" +\n                           \"found \" + token.to_str(tok));\n@@ -842,7 +848,7 @@ impure fn parse_pat(parser p) -> @ast.pat {\n                 case (_) { args = vec(); }\n             }\n \n-            pat = ast.pat_tag(id, args);\n+            pat = ast.pat_tag(id, args, ast.ann_none);\n         }\n         case (?tok) {\n             p.err(\"expected pattern but found \" + token.to_str(tok));"}, {"sha": "eea114ac7bf58f11b6a8f4d8cb0e9760c6d77f3a", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f075b10af2c2a1088d72fff0bff1918a8e74fbf0/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f075b10af2c2a1088d72fff0bff1918a8e74fbf0/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=f075b10af2c2a1088d72fff0bff1918a8e74fbf0", "patch": "@@ -19,7 +19,9 @@ import front.ast.stmt;\n import front.ast.block;\n import front.ast.item;\n import front.ast.arg;\n+import front.ast.pat;\n import front.ast.decl;\n+import front.ast.arm;\n import front.ast.def;\n import front.ast.def_id;\n import front.ast.ann;\n@@ -94,6 +96,10 @@ type ast_fold[ENV] =\n          &block body, @expr cond,\n          ann a) -> @expr)                         fold_expr_do_while,\n \n+     (fn(&ENV e, &span sp,\n+         @expr e, vec[arm] arms,\n+         ann a) -> @expr)                         fold_expr_alt,\n+\n      (fn(&ENV e, &span sp,\n          &block blk, ann a) -> @expr)             fold_expr_block,\n \n@@ -122,6 +128,18 @@ type ast_fold[ENV] =\n          @item item) -> @decl)                    fold_decl_item,\n \n \n+     // Pat folds.\n+     (fn(&ENV e, &span sp,\n+         ann a) -> @pat)                          fold_pat_wild,\n+\n+     (fn(&ENV e, &span sp,\n+         ident i, ann a) -> @pat)                 fold_pat_bind,\n+\n+     (fn(&ENV e, &span sp,\n+         ident i, vec[@pat] args,\n+         ann a) -> @pat)                          fold_pat_tag,\n+\n+\n      // Stmt folds.\n      (fn(&ENV e, &span sp,\n          @decl decl) -> @stmt)                    fold_stmt_decl,\n@@ -170,6 +188,7 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &block b) -> ENV) update_env_for_block,\n      (fn(&ENV e, @stmt s) -> ENV) update_env_for_stmt,\n      (fn(&ENV e, @decl i) -> ENV) update_env_for_decl,\n+     (fn(&ENV e, @pat p) -> ENV) update_env_for_pat,\n      (fn(&ENV e, @expr x) -> ENV) update_env_for_expr,\n      (fn(&ENV e, @ty t) -> ENV) update_env_for_ty,\n \n@@ -275,6 +294,28 @@ fn fold_decl[ENV](&ENV env, ast_fold[ENV] fld, @decl d) -> @decl {\n     fail;\n }\n \n+fn fold_pat[ENV](&ENV env, ast_fold[ENV] fld, @ast.pat p) -> @ast.pat {\n+    let ENV env_ = fld.update_env_for_pat(env, p);\n+\n+    if (!fld.keep_going(env_)) {\n+        ret p;\n+    }\n+\n+    alt (p.node) {\n+        case (ast.pat_wild(?t)) { ret fld.fold_pat_wild(env_, p.span, t); }\n+        case (ast.pat_bind(?id, ?t)) {\n+            ret fld.fold_pat_bind(env_, p.span, id, t);\n+        }\n+        case (ast.pat_tag(?id, ?pats, ?t)) {\n+            let vec[@ast.pat] ppats = vec();\n+            for (@ast.pat pat in pats) {\n+                ppats += vec(fold_pat(env_, fld, pat));\n+            }\n+            ret fld.fold_pat_tag(env_, p.span, id, ppats, t);\n+        }\n+    }\n+}\n+\n fn fold_exprs[ENV](&ENV env, ast_fold[ENV] fld, vec[@expr] es) -> vec[@expr] {\n     let vec[@expr] exprs = vec();\n     for (@expr e in es) {\n@@ -368,6 +409,17 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_do_while(env_, e.span, bbody, ccnd, t);\n         }\n \n+        case (ast.expr_alt(?expr, ?arms, ?t)) {\n+            auto eexpr = fold_expr(env_, fld, expr);\n+            let vec[ast.arm] aarms = vec();\n+            for (ast.arm arm in arms) {\n+                auto ppat = fold_pat(env_, fld, arm.pat);\n+                auto bblock = fold_block(env_, fld, arm.block);\n+                aarms += vec(rec(pat=ppat, block=bblock));\n+            }\n+            ret fld.fold_expr_alt(env_, e.span, eexpr, aarms, t);\n+        }\n+\n         case (ast.expr_block(?b, ?t)) {\n             auto bb = fold_block(env_, fld, b);\n             ret fld.fold_expr_block(env_, e.span, bb, t);\n@@ -658,6 +710,11 @@ fn identity_fold_expr_do_while[ENV](&ENV env, &span sp,\n     ret @respan(sp, ast.expr_do_while(body, cond, a));\n }\n \n+fn identity_fold_expr_alt[ENV](&ENV env, &span sp,\n+                               @expr e, vec[arm] arms, ann a) -> @expr {\n+    ret @respan(sp, ast.expr_alt(e, arms, a));\n+}\n+\n fn identity_fold_expr_block[ENV](&ENV env, &span sp, &block blk,\n                                  ann a) -> @expr {\n     ret @respan(sp, ast.expr_block(blk, a));\n@@ -698,6 +755,22 @@ fn identity_fold_decl_item[ENV](&ENV e, &span sp, @item i) -> @decl {\n }\n \n \n+// Pat identities.\n+\n+fn identity_fold_pat_wild[ENV](&ENV e, &span sp, ann a) -> @pat {\n+    ret @respan(sp, ast.pat_wild(a));\n+}\n+\n+fn identity_fold_pat_bind[ENV](&ENV e, &span sp, ident i, ann a) -> @pat {\n+    ret @respan(sp, ast.pat_bind(i, a));\n+}\n+\n+fn identity_fold_pat_tag[ENV](&ENV e, &span sp, ident i, vec[@pat] args,\n+                              ann a) -> @pat {\n+    ret @respan(sp, ast.pat_tag(i, args, a));\n+}\n+\n+\n // Stmt identities.\n \n fn identity_fold_stmt_decl[ENV](&ENV env, &span sp, @decl d) -> @stmt {\n@@ -790,6 +863,10 @@ fn identity_update_env_for_decl[ENV](&ENV e, @decl d) -> ENV {\n     ret e;\n }\n \n+fn identity_update_env_for_pat[ENV](&ENV e, @pat p) -> ENV {\n+    ret e;\n+}\n+\n fn identity_update_env_for_expr[ENV](&ENV e, @expr x) -> ENV {\n     ret e;\n }\n@@ -835,6 +912,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_while  = bind identity_fold_expr_while[ENV](_,_,_,_,_),\n          fold_expr_do_while\n                           = bind identity_fold_expr_do_while[ENV](_,_,_,_,_),\n+         fold_expr_alt    = bind identity_fold_expr_alt[ENV](_,_,_,_,_),\n          fold_expr_block  = bind identity_fold_expr_block[ENV](_,_,_,_),\n          fold_expr_assign = bind identity_fold_expr_assign[ENV](_,_,_,_,_),\n          fold_expr_field  = bind identity_fold_expr_field[ENV](_,_,_,_,_),\n@@ -844,6 +922,10 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_decl_local  = bind identity_fold_decl_local[ENV](_,_,_),\n          fold_decl_item   = bind identity_fold_decl_item[ENV](_,_,_),\n \n+         fold_pat_wild    = bind identity_fold_pat_wild[ENV](_,_,_),\n+         fold_pat_bind    = bind identity_fold_pat_bind[ENV](_,_,_,_),\n+         fold_pat_tag     = bind identity_fold_pat_tag[ENV](_,_,_,_,_),\n+\n          fold_stmt_decl   = bind identity_fold_stmt_decl[ENV](_,_,_),\n          fold_stmt_ret    = bind identity_fold_stmt_ret[ENV](_,_,_),\n          fold_stmt_log    = bind identity_fold_stmt_log[ENV](_,_,_),\n@@ -866,6 +948,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          update_env_for_block = bind identity_update_env_for_block[ENV](_,_),\n          update_env_for_stmt = bind identity_update_env_for_stmt[ENV](_,_),\n          update_env_for_decl = bind identity_update_env_for_decl[ENV](_,_),\n+         update_env_for_pat = bind identity_update_env_for_pat[ENV](_,_),\n          update_env_for_expr = bind identity_update_env_for_expr[ENV](_,_),\n          update_env_for_ty = bind identity_update_env_for_ty[ENV](_,_),\n "}]}