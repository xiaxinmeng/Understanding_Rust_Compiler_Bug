{"sha": "7cb1b1f7e168b4254f9d38005af19be5d0ba5482", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYjFiMWY3ZTE2OGI0MjU0ZjlkMzgwMDVhZjE5YmU1ZDBiYTU0ODI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-12-06T06:10:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-06T06:10:04Z"}, "message": "Merge pull request #3444 from waynr/fix-dogfood-tests\n\nFix dogfood tests", "tree": {"sha": "ae30e8d02f422116840360fec534bf80f9a1f68d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae30e8d02f422116840360fec534bf80f9a1f68d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cb1b1f7e168b4254f9d38005af19be5d0ba5482", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCL08CRBK7hj4Ov3rIwAAdHIIAE0jRt/ejU0ZKuwLU6hnkoDK\nQqN03/xFnrHvGgvFFTrdq3bJgknxC+tYbe+VOdPp3/XBa2/HeO1OFvpivVoigSNU\nCivWLLB4rcKMh7LbKW2TFYfjRQEJDNIYu7BrMqpsU7U7HojS0aqn2KjumusPM1iZ\nuGqPEmZ0q/dmoTPY7mMDsp4L5BUE7rdedwJ/j/I3XkL9t9uSLec9H8osFjfeboX6\nr0eF+nZtjB0qtaJ9e9sn98Kva95O7Wp6LC5vPhl0LcT8oVDcIcE7ABmrCP9v9uCD\nDZF9dPaJRUqr52NsVxkkSTMU5gud14LYDzGi1PWCsYf4G/pnJ1ybfldBKuM46wU=\n=fhi+\n-----END PGP SIGNATURE-----\n", "payload": "tree ae30e8d02f422116840360fec534bf80f9a1f68d\nparent 29bf75cd3147d4e34a5e70bd167898a8105f7e5d\nparent 0442bb9ce0b1f9851442fcc6f8f9dcb3ef88e3ca\nauthor Philipp Hansch <dev@phansch.net> 1544076604 +0100\ncommitter GitHub <noreply@github.com> 1544076604 +0100\n\nMerge pull request #3444 from waynr/fix-dogfood-tests\n\nFix dogfood tests"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb1b1f7e168b4254f9d38005af19be5d0ba5482", "html_url": "https://github.com/rust-lang/rust/commit/7cb1b1f7e168b4254f9d38005af19be5d0ba5482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cb1b1f7e168b4254f9d38005af19be5d0ba5482/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "html_url": "https://github.com/rust-lang/rust/commit/29bf75cd3147d4e34a5e70bd167898a8105f7e5d"}, {"sha": "0442bb9ce0b1f9851442fcc6f8f9dcb3ef88e3ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/0442bb9ce0b1f9851442fcc6f8f9dcb3ef88e3ca", "html_url": "https://github.com/rust-lang/rust/commit/0442bb9ce0b1f9851442fcc6f8f9dcb3ef88e3ca"}], "stats": {"total": 95, "additions": 51, "deletions": 44}, "files": [{"sha": "bff456203db2f226f84e440dda377f8804a1f979", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1b1f7e168b4254f9d38005af19be5d0ba5482/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1b1f7e168b4254f9d38005af19be5d0ba5482/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=7cb1b1f7e168b4254f9d38005af19be5d0ba5482", "patch": "@@ -168,18 +168,6 @@ Manually testing against an example file is useful if you have added some\n local modifications, run `env CLIPPY_TESTS=true cargo run --bin clippy-driver -- -L ./target/debug input.rs`\n from the working copy root.\n \n-### Linting Clippy with your local changes\n-\n-Clippy CI only passes if all lints defined in the version of the Clippy being\n-tested pass (that is, don\u2019t report any suggestions). You can avoid prolonging\n-the CI feedback cycle for PRs you submit by running these lints yourself ahead\n-of time and addressing any issues found:\n-\n-```\n-cargo build\n-`pwd`/target/debug/cargo-clippy clippy --all-targets --all-features -- -D clippy::all -D clippy::internal -D clippy::pedantic\n-```\n-\n ### How Clippy works\n \n Clippy is a [rustc compiler plugin][compiler_plugin]. The main entry point is at [`src/lib.rs`][main_entry]. In there, the lint registration is delegated to the [`clippy_lints`][lint_crate] crate."}, {"sha": "2537f157ad98e174b83482832a7b996a0d790bca", "filename": "ci/base-tests.sh", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1b1f7e168b4254f9d38005af19be5d0ba5482/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1b1f7e168b4254f9d38005af19be5d0ba5482/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=7cb1b1f7e168b4254f9d38005af19be5d0ba5482", "patch": "@@ -27,23 +27,3 @@ cd clippy_dev && cargo test && cd ..\n # Perform various checks for lint registration\n ./util/dev update_lints --check\n cargo +nightly fmt --all -- --check\n-\n-# Add bin to PATH for windows\n-PATH=$PATH:$(rustc --print sysroot)/bin\n-\n-CLIPPY=\"`pwd`/target/debug/cargo-clippy clippy\"\n-# run clippy on its own codebase...\n-${CLIPPY} --all-targets --all-features -- -D clippy::all -D clippy::internal -Dclippy::pedantic\n-# ... and some test directories\n-for dir in clippy_workspace_tests clippy_workspace_tests/src clippy_workspace_tests/subcrate clippy_workspace_tests/subcrate/src clippy_dev rustc_tools_util\n-do\n-    cd ${dir}\n-    ${CLIPPY} -- -D clippy::all -D clippy::pedantic\n-    cd -\n-done\n-\n-\n-# test --manifest-path\n-${CLIPPY} --manifest-path=clippy_workspace_tests/Cargo.toml -- -D clippy::all\n-cd clippy_workspace_tests/subcrate && ${CLIPPY} --manifest-path=../Cargo.toml -- -D clippy::all && cd ../..\n-set +x"}, {"sha": "c1f02b9fcefe355cfa9d4b43c2a6eb2f85e8a828", "filename": "tests/dogfood.rs", "status": "modified", "additions": 51, "deletions": 12, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1b1f7e168b4254f9d38005af19be5d0ba5482/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1b1f7e168b4254f9d38005af19be5d0ba5482/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=7cb1b1f7e168b4254f9d38005af19be5d0ba5482", "patch": "@@ -12,18 +12,57 @@ fn dogfood() {\n     if option_env!(\"RUSTC_TEST_SUITE\").is_some() || cfg!(windows) {\n         return;\n     }\n-    let root_dir = std::env::current_dir().unwrap();\n-    for d in &[\".\", \"clippy_lints\", \"rustc_tools_util\", \"clippy_dev\"] {\n-        std::env::set_current_dir(root_dir.join(d)).unwrap();\n-        let output = std::process::Command::new(\"cargo\")\n-            .arg(\"run\")\n-            .arg(\"--bin\")\n-            .arg(\"cargo-clippy\")\n-            .arg(\"--all-features\")\n-            .arg(\"--manifest-path\")\n-            .arg(root_dir.join(\"Cargo.toml\"))\n-            .args(&[\"--\", \"-W clippy::internal -W clippy::pedantic\"])\n-            .env(\"CLIPPY_DOGFOOD\", \"true\")\n+    let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+    let clippy_cmd = std::path::Path::new(&root_dir)\n+        .join(\"target\")\n+        .join(env!(\"PROFILE\"))\n+        .join(\"cargo-clippy\");\n+\n+    let output = std::process::Command::new(clippy_cmd)\n+        .current_dir(root_dir)\n+        .env(\"CLIPPY_DOGFOOD\", \"1\")\n+        .arg(\"clippy\")\n+        .arg(\"--all-targets\")\n+        .arg(\"--all-features\")\n+        .arg(\"--\")\n+        .args(&[\"-D\", \"clippy::all\"])\n+        .args(&[\"-D\", \"clippy::internal\"])\n+        .args(&[\"-D\", \"clippy::pedantic\"])\n+        .output()\n+        .unwrap();\n+    println!(\"status: {}\", output.status);\n+    println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+    println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+    assert!(output.status.success());\n+}\n+\n+#[test]\n+fn dogfood_tests() {\n+    if option_env!(\"RUSTC_TEST_SUITE\").is_some() || cfg!(windows) {\n+        return;\n+    }\n+    let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+    let clippy_cmd = std::path::Path::new(&root_dir)\n+        .join(\"target\")\n+        .join(env!(\"PROFILE\"))\n+        .join(\"cargo-clippy\");\n+\n+    for d in &[\n+        \"clippy_workspace_tests\",\n+        \"clippy_workspace_tests/src\",\n+        \"clippy_workspace_tests/subcrate\",\n+        \"clippy_workspace_tests/subcrate/src\",\n+        \"clippy_dev\",\n+        \"rustc_tools_util\",\n+    ] {\n+        let output = std::process::Command::new(&clippy_cmd)\n+            .current_dir(root_dir.join(d))\n+            .env(\"CLIPPY_DOGFOOD\", \"1\")\n+            .arg(\"clippy\")\n+            .arg(\"--\")\n+            .args(&[\"-D\", \"clippy::all\"])\n+            .args(&[\"-D\", \"clippy::pedantic\"])\n             .output()\n             .unwrap();\n         println!(\"status: {}\", output.status);"}]}