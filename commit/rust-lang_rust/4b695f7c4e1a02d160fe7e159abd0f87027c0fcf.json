{"sha": "4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "node_id": "C_kwDOAAsO6NoAKDRiNjk1ZjdjNGUxYTAyZDE2MGZlN2UxNTlhYmQwZjg3MDI3YzBmY2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-21T10:04:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-21T10:04:42Z"}, "message": "Auto merge of #100765 - Xiretza:session-diagnostic-unification, r=compiler-errors\n\nKind-less SessionDiagnostic derive\n\nFrom https://github.com/rust-lang/rust/pull/100730#discussion_r949712629:\n\n> Hm, maybe we should expose some `sess.struct_$SOMETHING` (like `struct_diagnostic`?) that is generic over `EmissionGuarantee`, then make the `SessionDiagnostic` derive generic, i.e.\n>\n> ```rust\n> impl<'tcx> SessionDiagnostic for UnusedGenericParams {\n>   fn into_diagnostic<T: EmissionGuarantee>( .. ) -> DiagnosticBuilder<'tcx, T> {\n>     let mut diag = sess.struct_diagnostic(rustc_errors:..);\n>     ..\n>   }\n> }\n> ```\n\nDiscussed [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/.23100717.20translation.20-.20kind-less.20derive).", "tree": {"sha": "2c7322f5189d638990acf9ad89b5cec9e3aeb6c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c7322f5189d638990acf9ad89b5cec9e3aeb6c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "html_url": "https://github.com/rust-lang/rust/commit/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39a9b88f4e50d4c0204bb12c0821b49a302ab3c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/39a9b88f4e50d4c0204bb12c0821b49a302ab3c5", "html_url": "https://github.com/rust-lang/rust/commit/39a9b88f4e50d4c0204bb12c0821b49a302ab3c5"}, {"sha": "7f3a6fd7f6c04635f3d541201199f127f2a2e65e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3a6fd7f6c04635f3d541201199f127f2a2e65e", "html_url": "https://github.com/rust-lang/rust/commit/7f3a6fd7f6c04635f3d541201199f127f2a2e65e"}], "stats": {"total": 1084, "additions": 567, "deletions": 517}, "files": [{"sha": "8c9676e4bfa850e292f80acfaff7fb3c02d3b28a", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -3,7 +3,7 @@ use rustc_middle::ty::Ty;\n use rustc_span::Span;\n \n #[derive(SessionDiagnostic)]\n-#[error(borrowck::move_unsized, code = \"E0161\")]\n+#[diag(borrowck::move_unsized, code = \"E0161\")]\n pub(crate) struct MoveUnsized<'tcx> {\n     pub ty: Ty<'tcx>,\n     #[primary_span]\n@@ -12,7 +12,7 @@ pub(crate) struct MoveUnsized<'tcx> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(borrowck::higher_ranked_lifetime_error)]\n+#[diag(borrowck::higher_ranked_lifetime_error)]\n pub(crate) struct HigherRankedLifetimeError {\n     #[subdiagnostic]\n     pub cause: Option<HigherRankedErrorCause>,\n@@ -29,14 +29,14 @@ pub(crate) enum HigherRankedErrorCause {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(borrowck::higher_ranked_subtype_error)]\n+#[diag(borrowck::higher_ranked_subtype_error)]\n pub(crate) struct HigherRankedSubtypeError {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(borrowck::generic_does_not_live_long_enough)]\n+#[diag(borrowck::generic_does_not_live_long_enough)]\n pub(crate) struct GenericDoesNotLiveLongEnough {\n     pub kind: String,\n     #[primary_span]"}, {"sha": "9046bf130593398d4052fc2e1111c97c4b680c26", "filename": "compiler/rustc_builtin_macros/src/cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -36,15 +36,15 @@ pub fn expand_cfg(\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(builtin_macros::requires_cfg_pattern)]\n+#[diag(builtin_macros::requires_cfg_pattern)]\n struct RequiresCfgPattern {\n     #[primary_span]\n     #[label]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(builtin_macros::expected_one_cfg_pattern)]\n+#[diag(builtin_macros::expected_one_cfg_pattern)]\n struct OneCfgPattern {\n     #[primary_span]\n     span: Span,"}, {"sha": "01619dee0e42f02c792336df97601ffad66870a7", "filename": "compiler/rustc_const_eval/src/errors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -3,7 +3,7 @@ use rustc_macros::SessionDiagnostic;\n use rustc_span::Span;\n \n #[derive(SessionDiagnostic)]\n-#[error(const_eval::unstable_in_stable)]\n+#[diag(const_eval::unstable_in_stable)]\n pub(crate) struct UnstableInStable {\n     pub gate: String,\n     #[primary_span]\n@@ -22,14 +22,14 @@ pub(crate) struct UnstableInStable {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(const_eval::thread_local_access, code = \"E0625\")]\n+#[diag(const_eval::thread_local_access, code = \"E0625\")]\n pub(crate) struct NonConstOpErr {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(const_eval::static_access, code = \"E0013\")]\n+#[diag(const_eval::static_access, code = \"E0013\")]\n #[help]\n pub(crate) struct StaticAccessErr {\n     #[primary_span]\n@@ -41,7 +41,7 @@ pub(crate) struct StaticAccessErr {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(const_eval::raw_ptr_to_int)]\n+#[diag(const_eval::raw_ptr_to_int)]\n #[note]\n #[note(const_eval::note2)]\n pub(crate) struct RawPtrToIntErr {\n@@ -50,38 +50,38 @@ pub(crate) struct RawPtrToIntErr {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(const_eval::raw_ptr_comparison)]\n+#[diag(const_eval::raw_ptr_comparison)]\n #[note]\n pub(crate) struct RawPtrComparisonErr {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(const_eval::panic_non_str)]\n+#[diag(const_eval::panic_non_str)]\n pub(crate) struct PanicNonStrErr {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(const_eval::mut_deref, code = \"E0658\")]\n+#[diag(const_eval::mut_deref, code = \"E0658\")]\n pub(crate) struct MutDerefErr {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(const_eval::transient_mut_borrow, code = \"E0658\")]\n+#[diag(const_eval::transient_mut_borrow, code = \"E0658\")]\n pub(crate) struct TransientMutBorrowErr {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(const_eval::transient_mut_borrow_raw, code = \"E0658\")]\n+#[diag(const_eval::transient_mut_borrow_raw, code = \"E0658\")]\n pub(crate) struct TransientMutBorrowErrRaw {\n     #[primary_span]\n     pub span: Span,"}, {"sha": "61d767a1cc6b4f97d806c45b8a0d3a127ec2d59a", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -84,6 +84,13 @@ pub trait EmissionGuarantee: Sized {\n     /// of `Self` without actually performing the emission.\n     #[track_caller]\n     fn diagnostic_builder_emit_producing_guarantee(db: &mut DiagnosticBuilder<'_, Self>) -> Self;\n+\n+    /// Creates a new `DiagnosticBuilder` that will return this type of guarantee.\n+    #[track_caller]\n+    fn make_diagnostic_builder(\n+        handler: &Handler,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, Self>;\n }\n \n /// Private module for sealing the `IsError` helper trait.\n@@ -166,6 +173,15 @@ impl EmissionGuarantee for ErrorGuaranteed {\n             }\n         }\n     }\n+\n+    fn make_diagnostic_builder(\n+        handler: &Handler,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, Self> {\n+        DiagnosticBuilder::new_guaranteeing_error::<_, { Level::Error { lint: false } }>(\n+            handler, msg,\n+        )\n+    }\n }\n \n impl<'a> DiagnosticBuilder<'a, ()> {\n@@ -208,6 +224,13 @@ impl EmissionGuarantee for () {\n             DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation => {}\n         }\n     }\n+\n+    fn make_diagnostic_builder(\n+        handler: &Handler,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, Self> {\n+        DiagnosticBuilder::new(handler, Level::Warning(None), msg)\n+    }\n }\n \n impl<'a> DiagnosticBuilder<'a, !> {\n@@ -247,6 +270,13 @@ impl EmissionGuarantee for ! {\n         // Then fatally error, returning `!`\n         crate::FatalError.raise()\n     }\n+\n+    fn make_diagnostic_builder(\n+        handler: &Handler,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, Self> {\n+        DiagnosticBuilder::new_fatal(handler, msg)\n+    }\n }\n \n /// In general, the `DiagnosticBuilder` uses deref to allow access to"}, {"sha": "9b9c334d4dfcc2bbd852fa2db85272685f5813e9", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -641,6 +641,15 @@ impl Handler {\n         self.inner.borrow_mut().emit_stashed_diagnostics()\n     }\n \n+    /// Construct a builder with the `msg` at the level appropriate for the specific `EmissionGuarantee`.\n+    #[rustc_lint_diagnostics]\n+    pub fn struct_diagnostic<G: EmissionGuarantee>(\n+        &self,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, G> {\n+        G::make_diagnostic_builder(self, msg)\n+    }\n+\n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n     ///\n     /// Attempting to `.emit()` the builder will only emit if either:"}, {"sha": "0feae0debd22750a4b5d1a0fb80b000d3ed6497f", "filename": "compiler/rustc_expand/src/errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -3,44 +3,44 @@ use rustc_span::symbol::MacroRulesNormalizedIdent;\n use rustc_span::Span;\n \n #[derive(SessionDiagnostic)]\n-#[error(expand::expr_repeat_no_syntax_vars)]\n+#[diag(expand::expr_repeat_no_syntax_vars)]\n pub(crate) struct NoSyntaxVarsExprRepeat {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(expand::must_repeat_once)]\n+#[diag(expand::must_repeat_once)]\n pub(crate) struct MustRepeatOnce {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(expand::count_repetition_misplaced)]\n+#[diag(expand::count_repetition_misplaced)]\n pub(crate) struct CountRepetitionMisplaced {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(expand::meta_var_expr_unrecognized_var)]\n+#[diag(expand::meta_var_expr_unrecognized_var)]\n pub(crate) struct MetaVarExprUnrecognizedVar {\n     #[primary_span]\n     pub span: Span,\n     pub key: MacroRulesNormalizedIdent,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(expand::var_still_repeating)]\n+#[diag(expand::var_still_repeating)]\n pub(crate) struct VarStillRepeating {\n     #[primary_span]\n     pub span: Span,\n     pub ident: MacroRulesNormalizedIdent,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(expand::meta_var_dif_seq_matchers)]\n+#[diag(expand::meta_var_dif_seq_matchers)]\n pub(crate) struct MetaVarsDifSeqMatchers {\n     #[primary_span]\n     pub span: Span,"}, {"sha": "014cf88389e448d1a22139a8851df9f82a191828", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -265,7 +265,7 @@ impl LintStoreExpand for LintStoreExpandImpl<'_> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(interface::ferris_identifier)]\n+#[diag(interface::ferris_identifier)]\n struct FerrisIdentifier {\n     #[primary_span]\n     spans: Vec<Span>,\n@@ -274,7 +274,7 @@ struct FerrisIdentifier {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(interface::emoji_identifier)]\n+#[diag(interface::emoji_identifier)]\n struct EmojiIdentifier {\n     #[primary_span]\n     spans: Vec<Span>,"}, {"sha": "484e541afc5879c477a6fefc674ba50bd642e08a", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -1546,7 +1546,7 @@ impl InvalidAtomicOrdering {\n \n         if matches!(fail_ordering, sym::Release | sym::AcqRel) {\n             #[derive(LintDiagnostic)]\n-            #[lint(lint::atomic_ordering_invalid)]\n+            #[diag(lint::atomic_ordering_invalid)]\n             #[help]\n             struct InvalidAtomicOrderingDiag {\n                 method: Symbol,"}, {"sha": "244edec2841591260cfef4c53bfc807851a13880", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 20, "deletions": 62, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -21,7 +21,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n             builder: DiagnosticDeriveBuilder {\n                 diag,\n                 fields: build_field_mapping(&structure),\n-                kind: None,\n+                kind: DiagnosticDeriveKind::SessionDiagnostic,\n                 code: None,\n                 slug: None,\n             },\n@@ -34,49 +34,31 @@ impl<'a> SessionDiagnosticDerive<'a> {\n         let SessionDiagnosticDerive { mut structure, sess, mut builder } = self;\n \n         let ast = structure.ast();\n-        let (implementation, param_ty) = {\n+        let implementation = {\n             if let syn::Data::Struct(..) = ast.data {\n                 let preamble = builder.preamble(&structure);\n                 let (attrs, args) = builder.body(&mut structure);\n \n                 let span = ast.span().unwrap();\n                 let diag = &builder.diag;\n-                let init = match (builder.kind.value(), builder.slug.value()) {\n-                    (None, _) => {\n-                        span_err(span, \"diagnostic kind not specified\")\n-                            .help(\"use the `#[error(...)]` attribute to create an error\")\n-                            .emit();\n-                        return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n-                    }\n-                    (Some(kind), None) => {\n+                let init = match builder.slug.value() {\n+                    None => {\n                         span_err(span, \"diagnostic slug not specified\")\n                             .help(&format!(\n-                                \"specify the slug as the first argument to the attribute, such as \\\n-                                 `#[{}(typeck::example_error)]`\",\n-                                kind.descr()\n+                                \"specify the slug as the first argument to the `#[diag(...)]` attribute, \\\n+                                such as `#[diag(typeck::example_error)]`\",\n                             ))\n                             .emit();\n                         return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n                     }\n-                    (Some(DiagnosticDeriveKind::Lint), _) => {\n-                        span_err(span, \"only `#[error(..)]` and `#[warning(..)]` are supported\")\n-                            .help(\"use the `#[error(...)]` attribute to create a error\")\n-                            .emit();\n-                        return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n-                    }\n-                    (Some(DiagnosticDeriveKind::Error), Some(slug)) => {\n-                        quote! {\n-                            let mut #diag = #sess.struct_err(rustc_errors::fluent::#slug);\n-                        }\n-                    }\n-                    (Some(DiagnosticDeriveKind::Warn), Some(slug)) => {\n+                    Some(slug) => {\n                         quote! {\n-                            let mut #diag = #sess.struct_warn(rustc_errors::fluent::#slug);\n+                            let mut #diag = #sess.struct_diagnostic(rustc_errors::fluent::#slug);\n                         }\n                     }\n                 };\n \n-                let implementation = quote! {\n+                quote! {\n                     #init\n                     #preamble\n                     match self {\n@@ -86,39 +68,28 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                         #args\n                     }\n                     #diag\n-                };\n-                let param_ty = match builder.kind {\n-                    Some((DiagnosticDeriveKind::Error, _)) => {\n-                        quote! { rustc_errors::ErrorGuaranteed }\n-                    }\n-                    Some((DiagnosticDeriveKind::Lint | DiagnosticDeriveKind::Warn, _)) => {\n-                        quote! { () }\n-                    }\n-                    _ => unreachable!(),\n-                };\n-\n-                (implementation, param_ty)\n+                }\n             } else {\n                 span_err(\n                     ast.span().unwrap(),\n                     \"`#[derive(SessionDiagnostic)]` can only be used on structs\",\n                 )\n                 .emit();\n \n-                let implementation = DiagnosticDeriveError::ErrorHandled.to_compile_error();\n-                let param_ty = quote! { rustc_errors::ErrorGuaranteed };\n-                (implementation, param_ty)\n+                DiagnosticDeriveError::ErrorHandled.to_compile_error()\n             }\n         };\n \n         structure.gen_impl(quote! {\n-            gen impl<'__session_diagnostic_sess> rustc_session::SessionDiagnostic<'__session_diagnostic_sess, #param_ty>\n+            gen impl<'__session_diagnostic_sess, G>\n+                    rustc_session::SessionDiagnostic<'__session_diagnostic_sess, G>\n                     for @Self\n+                where G: rustc_errors::EmissionGuarantee\n             {\n                 fn into_diagnostic(\n                     self,\n                     #sess: &'__session_diagnostic_sess rustc_session::parse::ParseSess\n-                ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, #param_ty> {\n+                ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, G> {\n                     use rustc_errors::IntoDiagnosticArg;\n                     #implementation\n                 }\n@@ -139,7 +110,7 @@ impl<'a> LintDiagnosticDerive<'a> {\n             builder: DiagnosticDeriveBuilder {\n                 diag,\n                 fields: build_field_mapping(&structure),\n-                kind: None,\n+                kind: DiagnosticDeriveKind::LintDiagnostic,\n                 code: None,\n                 slug: None,\n             },\n@@ -158,30 +129,17 @@ impl<'a> LintDiagnosticDerive<'a> {\n \n                 let diag = &builder.diag;\n                 let span = ast.span().unwrap();\n-                let init = match (builder.kind.value(), builder.slug.value()) {\n-                    (None, _) => {\n-                        span_err(span, \"diagnostic kind not specified\")\n-                            .help(\"use the `#[error(...)]` attribute to create an error\")\n-                            .emit();\n-                        return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n-                    }\n-                    (Some(kind), None) => {\n+                let init = match builder.slug.value() {\n+                    None => {\n                         span_err(span, \"diagnostic slug not specified\")\n                             .help(&format!(\n                                 \"specify the slug as the first argument to the attribute, such as \\\n-                                 `#[{}(typeck::example_error)]`\",\n-                                kind.descr()\n+                                 `#[diag(typeck::example_error)]`\",\n                             ))\n                             .emit();\n                         return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n                     }\n-                    (Some(DiagnosticDeriveKind::Error | DiagnosticDeriveKind::Warn), _) => {\n-                        span_err(span, \"only `#[lint(..)]` is supported\")\n-                            .help(\"use the `#[lint(...)]` attribute to create a lint\")\n-                            .emit();\n-                        return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n-                    }\n-                    (Some(DiagnosticDeriveKind::Lint), Some(slug)) => {\n+                    Some(slug) => {\n                         quote! {\n                             let mut #diag = #diag.build(rustc_errors::fluent::#slug);\n                         }"}, {"sha": "9df9fa4e9bf74fff5acf56ccfb669bb631579cc2", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 40, "deletions": 47, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -18,30 +18,15 @@ use syn::{\n };\n use synstructure::{BindingInfo, Structure};\n \n-/// What kind of diagnostic is being derived - an error, a warning or a lint?\n-#[derive(Copy, Clone)]\n+/// What kind of diagnostic is being derived - a fatal/error/warning or a lint?\n+#[derive(Copy, Clone, PartialEq, Eq)]\n pub(crate) enum DiagnosticDeriveKind {\n-    /// `#[error(..)]`\n-    Error,\n-    /// `#[warn(..)]`\n-    Warn,\n-    /// `#[lint(..)]`\n-    Lint,\n-}\n-\n-impl DiagnosticDeriveKind {\n-    /// Returns human-readable string corresponding to the kind.\n-    pub fn descr(&self) -> &'static str {\n-        match self {\n-            DiagnosticDeriveKind::Error => \"error\",\n-            DiagnosticDeriveKind::Warn => \"warning\",\n-            DiagnosticDeriveKind::Lint => \"lint\",\n-        }\n-    }\n+    SessionDiagnostic,\n+    LintDiagnostic,\n }\n \n /// Tracks persistent information required for building up individual calls to diagnostic methods\n-/// for generated diagnostic derives - both `SessionDiagnostic` for errors/warnings and\n+/// for generated diagnostic derives - both `SessionDiagnostic` for fatal/errors/warnings and\n /// `LintDiagnostic` for lints.\n pub(crate) struct DiagnosticDeriveBuilder {\n     /// The identifier to use for the generated `DiagnosticBuilder` instance.\n@@ -51,8 +36,8 @@ pub(crate) struct DiagnosticDeriveBuilder {\n     /// derive builder.\n     pub fields: HashMap<String, TokenStream>,\n \n-    /// Kind of diagnostic requested via the struct attribute.\n-    pub kind: Option<(DiagnosticDeriveKind, proc_macro::Span)>,\n+    /// Kind of diagnostic that should be derived.\n+    pub kind: DiagnosticDeriveKind,\n     /// Slug is a mandatory part of the struct attribute as corresponds to the Fluent message that\n     /// has the actual diagnostic message.\n     pub slug: Option<(Path, proc_macro::Span)>,\n@@ -143,7 +128,7 @@ impl DiagnosticDeriveBuilder {\n     }\n \n     /// Establishes state in the `DiagnosticDeriveBuilder` resulting from the struct\n-    /// attributes like `#[error(..)`, such as the diagnostic kind and slug. Generates\n+    /// attributes like `#[diag(..)]`, such as the slug and error code. Generates\n     /// diagnostic builder calls for setting error code and creating note/help messages.\n     fn generate_structure_code_for_attr(\n         &mut self,\n@@ -156,15 +141,15 @@ impl DiagnosticDeriveBuilder {\n         let name = name.as_str();\n         let meta = attr.parse_meta()?;\n \n-        let is_help_note_or_warn = matches!(name, \"help\" | \"note\" | \"warn_\");\n+        let is_diag = name == \"diag\";\n \n         let nested = match meta {\n-            // Most attributes are lists, like `#[error(..)]`/`#[warning(..)]` for most cases or\n+            // Most attributes are lists, like `#[diag(..)]` for most cases or\n             // `#[help(..)]`/`#[note(..)]` when the user is specifying a alternative slug.\n             Meta::List(MetaList { ref nested, .. }) => nested,\n             // Subdiagnostics without spans can be applied to the type too, and these are just\n-            // paths: `#[help]` and `#[note]`\n-            Meta::Path(_) if is_help_note_or_warn => {\n+            // paths: `#[help]`, `#[note]` and `#[warn_]`\n+            Meta::Path(_) if !is_diag => {\n                 let fn_name = if name == \"warn_\" {\n                     Ident::new(\"warn\", attr.span())\n                 } else {\n@@ -178,23 +163,21 @@ impl DiagnosticDeriveBuilder {\n         // Check the kind before doing any further processing so that there aren't misleading\n         // \"no kind specified\" errors if there are failures later.\n         match name {\n-            \"error\" => self.kind.set_once((DiagnosticDeriveKind::Error, span)),\n-            \"warning\" => self.kind.set_once((DiagnosticDeriveKind::Warn, span)),\n-            \"lint\" => self.kind.set_once((DiagnosticDeriveKind::Lint, span)),\n-            \"help\" | \"note\" | \"warn_\" => (),\n+            \"error\" | \"warning\" | \"lint\" => throw_invalid_attr!(attr, &meta, |diag| {\n+                diag.help(\"`error`, `warning` and `lint` have been replaced by `diag`\")\n+            }),\n+            \"diag\" | \"help\" | \"note\" | \"warn_\" => (),\n             _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                diag.help(\n-                    \"only `error`, `warning`, `help`, `note` and `warn_` are valid attributes\",\n-                )\n+                diag.help(\"only `diag`, `help`, `note` and `warn_` are valid attributes\")\n             }),\n         }\n \n-        // First nested element should always be the path, e.g. `#[error(typeck::invalid)]` or\n+        // First nested element should always be the path, e.g. `#[diag(typeck::invalid)]` or\n         // `#[help(typeck::another_help)]`.\n         let mut nested_iter = nested.into_iter();\n         if let Some(nested_attr) = nested_iter.next() {\n             // Report an error if there are any other list items after the path.\n-            if is_help_note_or_warn && nested_iter.next().is_some() {\n+            if !is_diag && nested_iter.next().is_some() {\n                 throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n                     diag.help(\n                         \"`help`, `note` and `warn_` struct attributes can only have one argument\",\n@@ -203,16 +186,16 @@ impl DiagnosticDeriveBuilder {\n             }\n \n             match nested_attr {\n-                NestedMeta::Meta(Meta::Path(path)) if is_help_note_or_warn => {\n-                    let fn_name = proc_macro2::Ident::new(name, attr.span());\n-                    return Ok(quote! { #diag.#fn_name(rustc_errors::fluent::#path); });\n-                }\n                 NestedMeta::Meta(Meta::Path(path)) => {\n-                    self.slug.set_once((path.clone(), span));\n+                    if is_diag {\n+                        self.slug.set_once((path.clone(), span));\n+                    } else {\n+                        let fn_name = proc_macro2::Ident::new(name, attr.span());\n+                        return Ok(quote! { #diag.#fn_name(rustc_errors::fluent::#path); });\n+                    }\n                 }\n                 NestedMeta::Meta(meta @ Meta::NameValue(_))\n-                    if !is_help_note_or_warn\n-                        && meta.path().segments.last().unwrap().ident == \"code\" =>\n+                    if is_diag && meta.path().segments.last().unwrap().ident == \"code\" =>\n                 {\n                     // don't error for valid follow-up attributes\n                 }\n@@ -346,10 +329,20 @@ impl DiagnosticDeriveBuilder {\n                 Ok(quote! {})\n             }\n             \"primary_span\" => {\n-                report_error_if_not_applied_to_span(attr, &info)?;\n-                Ok(quote! {\n-                    #diag.set_span(#binding);\n-                })\n+                match self.kind {\n+                    DiagnosticDeriveKind::SessionDiagnostic => {\n+                        report_error_if_not_applied_to_span(attr, &info)?;\n+\n+                        Ok(quote! {\n+                            #diag.set_span(#binding);\n+                        })\n+                    }\n+                    DiagnosticDeriveKind::LintDiagnostic => {\n+                        throw_invalid_attr!(attr, &meta, |diag| {\n+                            diag.help(\"the `primary_span` field attribute is not valid for lint diagnostics\")\n+                        })\n+                    }\n+                }\n             }\n             \"label\" => {\n                 report_error_if_not_applied_to_span(attr, &info)?;"}, {"sha": "2ff21e18ff853aef531789b8642abe33ffba7ba6", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -23,7 +23,7 @@ use synstructure::Structure;\n /// # extern crate rust_middle;\n /// # use rustc_middle::ty::Ty;\n /// #[derive(SessionDiagnostic)]\n-/// #[error(borrowck::move_out_of_borrow, code = \"E0505\")]\n+/// #[diag(borrowck::move_out_of_borrow, code = \"E0505\")]\n /// pub struct MoveOutOfBorrowError<'tcx> {\n ///     pub name: Ident,\n ///     pub ty: Ty<'tcx>,\n@@ -67,7 +67,7 @@ pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n ///\n /// ```ignore (rust)\n /// #[derive(LintDiagnostic)]\n-/// #[lint(lint::atomic_ordering_invalid_fail_success)]\n+/// #[diag(lint::atomic_ordering_invalid_fail_success)]\n /// pub struct AtomicOrderingInvalidLint {\n ///     method: Symbol,\n ///     success_ordering: Symbol,"}, {"sha": "87d7ab6ed517bba0ee3596abdf6c75ddb79dbb60", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -129,9 +129,7 @@ decl_derive!([Lift, attributes(lift)] => lift::lift_derive);\n decl_derive!(\n     [SessionDiagnostic, attributes(\n         // struct attributes\n-        warning,\n-        error,\n-        lint,\n+        diag,\n         help,\n         note,\n         warn_,\n@@ -148,9 +146,7 @@ decl_derive!(\n decl_derive!(\n     [LintDiagnostic, attributes(\n         // struct attributes\n-        warning,\n-        error,\n-        lint,\n+        diag,\n         help,\n         note,\n         warn_,"}, {"sha": "7beec270e3b93cb6f68d5406bc7af0c38211393e", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -244,7 +244,7 @@ impl MultiSugg {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(parser::maybe_report_ambiguous_plus)]\n+#[diag(parser::maybe_report_ambiguous_plus)]\n struct AmbiguousPlus {\n     pub sum_ty: String,\n     #[primary_span]\n@@ -253,7 +253,7 @@ struct AmbiguousPlus {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(parser::maybe_recover_from_bad_type_plus, code = \"E0178\")]\n+#[diag(parser::maybe_recover_from_bad_type_plus, code = \"E0178\")]\n struct BadTypePlus {\n     pub ty: String,\n     #[primary_span]\n@@ -287,7 +287,7 @@ pub enum BadTypePlusSub {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(parser::maybe_recover_from_bad_qpath_stage_2)]\n+#[diag(parser::maybe_recover_from_bad_qpath_stage_2)]\n struct BadQPathStage2 {\n     #[primary_span]\n     #[suggestion(applicability = \"maybe-incorrect\")]\n@@ -296,7 +296,7 @@ struct BadQPathStage2 {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(parser::incorrect_semicolon)]\n+#[diag(parser::incorrect_semicolon)]\n struct IncorrectSemicolon<'a> {\n     #[primary_span]\n     #[suggestion_short(applicability = \"machine-applicable\")]\n@@ -307,15 +307,15 @@ struct IncorrectSemicolon<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(parser::incorrect_use_of_await)]\n+#[diag(parser::incorrect_use_of_await)]\n struct IncorrectUseOfAwait {\n     #[primary_span]\n     #[suggestion(parser::parentheses_suggestion, applicability = \"machine-applicable\")]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(parser::incorrect_use_of_await)]\n+#[diag(parser::incorrect_use_of_await)]\n struct IncorrectAwait {\n     #[primary_span]\n     span: Span,\n@@ -326,7 +326,7 @@ struct IncorrectAwait {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(parser::in_in_typo)]\n+#[diag(parser::in_in_typo)]\n struct InInTypo {\n     #[primary_span]\n     span: Span,\n@@ -335,7 +335,7 @@ struct InInTypo {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(parser::invalid_variable_declaration)]\n+#[diag(parser::invalid_variable_declaration)]\n pub struct InvalidVariableDeclaration {\n     #[primary_span]\n     pub span: Span,"}, {"sha": "383982013d9e7f707f3c59732bb63d30d68d4e11", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 85, "deletions": 86, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -3,37 +3,37 @@ use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::{Span, Symbol};\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::outer_crate_level_attr)]\n+#[diag(passes::outer_crate_level_attr)]\n pub struct OuterCrateLevelAttr;\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::inner_crate_level_attr)]\n+#[diag(passes::inner_crate_level_attr)]\n pub struct InnerCrateLevelAttr;\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::ignored_attr_with_macro)]\n+#[diag(passes::ignored_attr_with_macro)]\n pub struct IgnoredAttrWithMacro<'a> {\n     pub sym: &'a str,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::ignored_attr)]\n+#[diag(passes::ignored_attr)]\n pub struct IgnoredAttr<'a> {\n     pub sym: &'a str,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::inline_ignored_function_prototype)]\n+#[diag(passes::inline_ignored_function_prototype)]\n pub struct IgnoredInlineAttrFnProto;\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::inline_ignored_constants)]\n+#[diag(passes::inline_ignored_constants)]\n #[warn_]\n #[note]\n pub struct IgnoredInlineAttrConstants;\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::inline_not_fn_or_closure, code = \"E0518\")]\n+#[diag(passes::inline_not_fn_or_closure, code = \"E0518\")]\n pub struct InlineNotFnOrClosure {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -42,19 +42,19 @@ pub struct InlineNotFnOrClosure {\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::no_coverage_ignored_function_prototype)]\n+#[diag(passes::no_coverage_ignored_function_prototype)]\n pub struct IgnoredNoCoverageFnProto;\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::no_coverage_propagate)]\n+#[diag(passes::no_coverage_propagate)]\n pub struct IgnoredNoCoveragePropagate;\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::no_coverage_fn_defn)]\n+#[diag(passes::no_coverage_fn_defn)]\n pub struct IgnoredNoCoverageFnDefn;\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::no_coverage_not_coverable, code = \"E0788\")]\n+#[diag(passes::no_coverage_not_coverable, code = \"E0788\")]\n pub struct IgnoredNoCoverageNotCoverable {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -63,7 +63,7 @@ pub struct IgnoredNoCoverageNotCoverable {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::should_be_applied_to_fn)]\n+#[diag(passes::should_be_applied_to_fn)]\n pub struct AttrShouldBeAppliedToFn {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -72,14 +72,14 @@ pub struct AttrShouldBeAppliedToFn {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::naked_tracked_caller, code = \"E0736\")]\n+#[diag(passes::naked_tracked_caller, code = \"E0736\")]\n pub struct NakedTrackedCaller {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::should_be_applied_to_fn, code = \"E0739\")]\n+#[diag(passes::should_be_applied_to_fn, code = \"E0739\")]\n pub struct TrackedCallerWrongLocation {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -88,7 +88,7 @@ pub struct TrackedCallerWrongLocation {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::should_be_applied_to_struct_enum, code = \"E0701\")]\n+#[diag(passes::should_be_applied_to_struct_enum, code = \"E0701\")]\n pub struct NonExhaustiveWrongLocation {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -97,7 +97,7 @@ pub struct NonExhaustiveWrongLocation {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::should_be_applied_to_trait)]\n+#[diag(passes::should_be_applied_to_trait)]\n pub struct AttrShouldBeAppliedToTrait {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -106,11 +106,11 @@ pub struct AttrShouldBeAppliedToTrait {\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::target_feature_on_statement)]\n+#[diag(passes::target_feature_on_statement)]\n pub struct TargetFeatureOnStatement;\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::should_be_applied_to_static)]\n+#[diag(passes::should_be_applied_to_static)]\n pub struct AttrShouldBeAppliedToStatic {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -119,23 +119,23 @@ pub struct AttrShouldBeAppliedToStatic {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_expect_str)]\n+#[diag(passes::doc_expect_str)]\n pub struct DocExpectStr<'a> {\n     #[primary_span]\n     pub attr_span: Span,\n     pub attr_name: &'a str,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_alias_empty)]\n+#[diag(passes::doc_alias_empty)]\n pub struct DocAliasEmpty<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub attr_str: &'a str,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_alias_bad_char)]\n+#[diag(passes::doc_alias_bad_char)]\n pub struct DocAliasBadChar<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -144,15 +144,15 @@ pub struct DocAliasBadChar<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_alias_start_end)]\n+#[diag(passes::doc_alias_start_end)]\n pub struct DocAliasStartEnd<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub attr_str: &'a str,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_alias_bad_location)]\n+#[diag(passes::doc_alias_bad_location)]\n pub struct DocAliasBadLocation<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -161,80 +161,80 @@ pub struct DocAliasBadLocation<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_alias_not_an_alias)]\n+#[diag(passes::doc_alias_not_an_alias)]\n pub struct DocAliasNotAnAlias<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub attr_str: &'a str,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::doc_alias_duplicated)]\n+#[diag(passes::doc_alias_duplicated)]\n pub struct DocAliasDuplicated {\n     #[label]\n     pub first_defn: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_alias_not_string_literal)]\n+#[diag(passes::doc_alias_not_string_literal)]\n pub struct DocAliasNotStringLiteral {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_alias_malformed)]\n+#[diag(passes::doc_alias_malformed)]\n pub struct DocAliasMalformed {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_keyword_empty_mod)]\n+#[diag(passes::doc_keyword_empty_mod)]\n pub struct DocKeywordEmptyMod {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_keyword_not_mod)]\n+#[diag(passes::doc_keyword_not_mod)]\n pub struct DocKeywordNotMod {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_keyword_invalid_ident)]\n+#[diag(passes::doc_keyword_invalid_ident)]\n pub struct DocKeywordInvalidIdent {\n     #[primary_span]\n     pub span: Span,\n     pub doc_keyword: Symbol,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_fake_variadic_not_valid)]\n+#[diag(passes::doc_fake_variadic_not_valid)]\n pub struct DocFakeVariadicNotValid {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_keyword_only_impl)]\n+#[diag(passes::doc_keyword_only_impl)]\n pub struct DocKeywordOnlyImpl {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_inline_conflict)]\n+#[diag(passes::doc_inline_conflict)]\n #[help]\n pub struct DocKeywordConflict {\n     #[primary_span]\n     pub spans: MultiSpan,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::doc_inline_only_use)]\n+#[diag(passes::doc_inline_only_use)]\n #[note]\n pub struct DocInlineOnlyUse {\n     #[label]\n@@ -244,35 +244,35 @@ pub struct DocInlineOnlyUse {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_attr_not_crate_level)]\n+#[diag(passes::doc_attr_not_crate_level)]\n pub struct DocAttrNotCrateLevel<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub attr_name: &'a str,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::doc_test_unknown)]\n+#[diag(passes::doc_test_unknown)]\n pub struct DocTestUnknown {\n     pub path: String,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::doc_test_takes_list)]\n+#[diag(passes::doc_test_takes_list)]\n pub struct DocTestTakesList;\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::doc_primitive)]\n+#[diag(passes::doc_primitive)]\n pub struct DocPrimitive;\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::doc_test_unknown_any)]\n+#[diag(passes::doc_test_unknown_any)]\n pub struct DocTestUnknownAny {\n     pub path: String,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::doc_test_unknown_spotlight)]\n+#[diag(passes::doc_test_unknown_spotlight)]\n #[note]\n #[note(passes::no_op_note)]\n pub struct DocTestUnknownSpotlight {\n@@ -282,7 +282,7 @@ pub struct DocTestUnknownSpotlight {\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::doc_test_unknown_include)]\n+#[diag(passes::doc_test_unknown_include)]\n pub struct DocTestUnknownInclude {\n     pub path: String,\n     pub value: String,\n@@ -292,11 +292,11 @@ pub struct DocTestUnknownInclude {\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::doc_invalid)]\n+#[diag(passes::doc_invalid)]\n pub struct DocInvalid;\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::pass_by_value)]\n+#[diag(passes::pass_by_value)]\n pub struct PassByValue {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -305,7 +305,7 @@ pub struct PassByValue {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::allow_incoherent_impl)]\n+#[diag(passes::allow_incoherent_impl)]\n pub struct AllowIncoherentImpl {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -314,7 +314,7 @@ pub struct AllowIncoherentImpl {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::has_incoherent_inherent_impl)]\n+#[diag(passes::has_incoherent_inherent_impl)]\n pub struct HasIncoherentInherentImpl {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -323,21 +323,21 @@ pub struct HasIncoherentInherentImpl {\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::must_use_async)]\n+#[diag(passes::must_use_async)]\n pub struct MustUseAsync {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::must_use_no_effect)]\n+#[diag(passes::must_use_no_effect)]\n pub struct MustUseNoEffect {\n     pub article: &'static str,\n     pub target: rustc_hir::Target,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::must_not_suspend)]\n+#[diag(passes::must_not_suspend)]\n pub struct MustNotSuspend {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -346,23 +346,23 @@ pub struct MustNotSuspend {\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::cold)]\n+#[diag(passes::cold)]\n #[warn_]\n pub struct Cold {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::link)]\n+#[diag(passes::link)]\n #[warn_]\n pub struct Link {\n     #[label]\n     pub span: Option<Span>,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::link_name)]\n+#[diag(passes::link_name)]\n #[warn_]\n pub struct LinkName<'a> {\n     #[help]\n@@ -373,7 +373,7 @@ pub struct LinkName<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::no_link)]\n+#[diag(passes::no_link)]\n pub struct NoLink {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -382,7 +382,7 @@ pub struct NoLink {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::export_name)]\n+#[diag(passes::export_name)]\n pub struct ExportName {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -391,7 +391,7 @@ pub struct ExportName {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::rustc_layout_scalar_valid_range_not_struct)]\n+#[diag(passes::rustc_layout_scalar_valid_range_not_struct)]\n pub struct RustcLayoutScalarValidRangeNotStruct {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -400,14 +400,14 @@ pub struct RustcLayoutScalarValidRangeNotStruct {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::rustc_layout_scalar_valid_range_arg)]\n+#[diag(passes::rustc_layout_scalar_valid_range_arg)]\n pub struct RustcLayoutScalarValidRangeArg {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::rustc_legacy_const_generics_only)]\n+#[diag(passes::rustc_legacy_const_generics_only)]\n pub struct RustcLegacyConstGenericsOnly {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -416,7 +416,7 @@ pub struct RustcLegacyConstGenericsOnly {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::rustc_legacy_const_generics_index)]\n+#[diag(passes::rustc_legacy_const_generics_index)]\n pub struct RustcLegacyConstGenericsIndex {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -425,7 +425,7 @@ pub struct RustcLegacyConstGenericsIndex {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::rustc_legacy_const_generics_index_exceed)]\n+#[diag(passes::rustc_legacy_const_generics_index_exceed)]\n pub struct RustcLegacyConstGenericsIndexExceed {\n     #[primary_span]\n     #[label]\n@@ -434,29 +434,29 @@ pub struct RustcLegacyConstGenericsIndexExceed {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::rustc_legacy_const_generics_index_negative)]\n+#[diag(passes::rustc_legacy_const_generics_index_negative)]\n pub struct RustcLegacyConstGenericsIndexNegative {\n     #[primary_span]\n     pub invalid_args: Vec<Span>,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::rustc_dirty_clean)]\n+#[diag(passes::rustc_dirty_clean)]\n pub struct RustcDirtyClean {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::link_section)]\n+#[diag(passes::link_section)]\n #[warn_]\n pub struct LinkSection {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::no_mangle_foreign)]\n+#[diag(passes::no_mangle_foreign)]\n #[warn_]\n #[note]\n pub struct NoMangleForeign {\n@@ -468,40 +468,40 @@ pub struct NoMangleForeign {\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::no_mangle)]\n+#[diag(passes::no_mangle)]\n #[warn_]\n pub struct NoMangle {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::repr_ident, code = \"E0565\")]\n+#[diag(passes::repr_ident, code = \"E0565\")]\n pub struct ReprIdent {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::repr_conflicting, code = \"E0566\")]\n+#[diag(passes::repr_conflicting, code = \"E0566\")]\n pub struct ReprConflicting;\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::used_static)]\n+#[diag(passes::used_static)]\n pub struct UsedStatic {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::used_compiler_linker)]\n+#[diag(passes::used_compiler_linker)]\n pub struct UsedCompilerLinker {\n     #[primary_span]\n     pub spans: Vec<Span>,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::allow_internal_unstable)]\n+#[diag(passes::allow_internal_unstable)]\n pub struct AllowInternalUnstable {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -510,14 +510,14 @@ pub struct AllowInternalUnstable {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::debug_visualizer_placement)]\n+#[diag(passes::debug_visualizer_placement)]\n pub struct DebugVisualizerPlacement {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::debug_visualizer_invalid)]\n+#[diag(passes::debug_visualizer_invalid)]\n #[note(passes::note_1)]\n #[note(passes::note_2)]\n #[note(passes::note_3)]\n@@ -527,7 +527,7 @@ pub struct DebugVisualizerInvalid {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::rustc_allow_const_fn_unstable)]\n+#[diag(passes::rustc_allow_const_fn_unstable)]\n pub struct RustcAllowConstFnUnstable {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -536,7 +536,7 @@ pub struct RustcAllowConstFnUnstable {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::rustc_std_internal_symbol)]\n+#[diag(passes::rustc_std_internal_symbol)]\n pub struct RustcStdInternalSymbol {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -545,42 +545,42 @@ pub struct RustcStdInternalSymbol {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::const_trait)]\n+#[diag(passes::const_trait)]\n pub struct ConstTrait {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::link_ordinal)]\n+#[diag(passes::link_ordinal)]\n pub struct LinkOrdinal {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::stability_promotable)]\n+#[diag(passes::stability_promotable)]\n pub struct StabilityPromotable {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::deprecated)]\n+#[diag(passes::deprecated)]\n pub struct Deprecated;\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::macro_use)]\n+#[diag(passes::macro_use)]\n pub struct MacroUse {\n     pub name: Symbol,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::macro_export)]\n+#[diag(passes::macro_export)]\n pub struct MacroExport;\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::plugin_registrar)]\n+#[diag(passes::plugin_registrar)]\n pub struct PluginRegistrar;\n \n #[derive(SessionSubdiagnostic)]\n@@ -594,7 +594,7 @@ pub enum UnusedNote {\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::unused)]\n+#[diag(passes::unused)]\n pub struct Unused {\n     #[suggestion(applicability = \"machine-applicable\")]\n     pub attr_span: Span,\n@@ -603,17 +603,16 @@ pub struct Unused {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::non_exported_macro_invalid_attrs, code = \"E0518\")]\n+#[diag(passes::non_exported_macro_invalid_attrs, code = \"E0518\")]\n pub struct NonExportedMacroInvalidAttrs {\n     #[primary_span]\n     #[label]\n     pub attr_span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(passes::unused_duplicate)]\n+#[diag(passes::unused_duplicate)]\n pub struct UnusedDuplicate {\n-    #[primary_span]\n     #[suggestion(code = \"\", applicability = \"machine-applicable\")]\n     pub this: Span,\n     #[note]\n@@ -623,7 +622,7 @@ pub struct UnusedDuplicate {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::unused_multiple)]\n+#[diag(passes::unused_multiple)]\n pub struct UnusedMultiple {\n     #[primary_span]\n     #[suggestion(code = \"\", applicability = \"machine-applicable\")]\n@@ -634,7 +633,7 @@ pub struct UnusedMultiple {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::rustc_lint_opt_ty)]\n+#[diag(passes::rustc_lint_opt_ty)]\n pub struct RustcLintOptTy {\n     #[primary_span]\n     pub attr_span: Span,\n@@ -643,7 +642,7 @@ pub struct RustcLintOptTy {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::rustc_lint_opt_deny_field_access)]\n+#[diag(passes::rustc_lint_opt_deny_field_access)]\n pub struct RustcLintOptDenyFieldAccess {\n     #[primary_span]\n     pub attr_span: Span,"}, {"sha": "1e423ddb7102cb753ae0bf8aefcc1d54664afc11", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -3,7 +3,7 @@ use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::{Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n-#[error(privacy::field_is_private, code = \"E0451\")]\n+#[diag(privacy::field_is_private, code = \"E0451\")]\n pub struct FieldIsPrivate {\n     #[primary_span]\n     pub span: Span,\n@@ -30,7 +30,7 @@ pub enum FieldIsPrivateLabel {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(privacy::item_is_private)]\n+#[diag(privacy::item_is_private)]\n pub struct ItemIsPrivate<'a> {\n     #[primary_span]\n     #[label]\n@@ -40,7 +40,7 @@ pub struct ItemIsPrivate<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(privacy::unnamed_item_is_private)]\n+#[diag(privacy::unnamed_item_is_private)]\n pub struct UnnamedItemIsPrivate {\n     #[primary_span]\n     pub span: Span,\n@@ -49,7 +49,7 @@ pub struct UnnamedItemIsPrivate {\n \n // Duplicate of `InPublicInterface` but with a different error code, shares the same slug.\n #[derive(SessionDiagnostic)]\n-#[error(privacy::in_public_interface, code = \"E0445\")]\n+#[diag(privacy::in_public_interface, code = \"E0445\")]\n pub struct InPublicInterfaceTraits<'a> {\n     #[primary_span]\n     #[label]\n@@ -63,7 +63,7 @@ pub struct InPublicInterfaceTraits<'a> {\n \n // Duplicate of `InPublicInterfaceTraits` but with a different error code, shares the same slug.\n #[derive(SessionDiagnostic)]\n-#[error(privacy::in_public_interface, code = \"E0446\")]\n+#[diag(privacy::in_public_interface, code = \"E0446\")]\n pub struct InPublicInterface<'a> {\n     #[primary_span]\n     #[label]\n@@ -76,15 +76,15 @@ pub struct InPublicInterface<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(privacy::from_private_dep_in_public_interface)]\n+#[diag(privacy::from_private_dep_in_public_interface)]\n pub struct FromPrivateDependencyInPublicInterface<'a> {\n     pub kind: &'a str,\n     pub descr: DiagnosticArgFromDisplay<'a>,\n     pub krate: Symbol,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(privacy::private_in_public_lint)]\n+#[diag(privacy::private_in_public_lint)]\n pub struct PrivateInPublicLint<'a> {\n     pub vis_descr: &'static str,\n     pub kind: &'a str,"}, {"sha": "b9b2356130a594be5f51b0b77412c7f75f6774a9", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n     error_code, fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n-    DiagnosticMessage, ErrorGuaranteed, MultiSpan, StashKey,\n+    DiagnosticMessage, EmissionGuarantee, ErrorGuaranteed, MultiSpan, StashKey,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n@@ -372,4 +372,12 @@ impl ParseSess {\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.span_diagnostic.struct_warn(msg)\n     }\n+\n+    #[rustc_lint_diagnostics]\n+    pub fn struct_diagnostic<G: EmissionGuarantee>(\n+        &self,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, G> {\n+        self.span_diagnostic.struct_diagnostic(msg)\n+    }\n }"}, {"sha": "2214fc2ced883f357835baf1f417276d69169dd5", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -6,7 +6,7 @@ use rustc_session::{parse::ParseSess, SessionDiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::field_multiply_specified_in_initializer, code = \"E0062\")]\n+#[diag(typeck::field_multiply_specified_in_initializer, code = \"E0062\")]\n pub struct FieldMultiplySpecifiedInInitializer {\n     #[primary_span]\n     #[label]\n@@ -17,7 +17,7 @@ pub struct FieldMultiplySpecifiedInInitializer {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::unrecognized_atomic_operation, code = \"E0092\")]\n+#[diag(typeck::unrecognized_atomic_operation, code = \"E0092\")]\n pub struct UnrecognizedAtomicOperation<'a> {\n     #[primary_span]\n     #[label]\n@@ -26,7 +26,7 @@ pub struct UnrecognizedAtomicOperation<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::wrong_number_of_generic_arguments_to_intrinsic, code = \"E0094\")]\n+#[diag(typeck::wrong_number_of_generic_arguments_to_intrinsic, code = \"E0094\")]\n pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n     #[primary_span]\n     #[label]\n@@ -37,7 +37,7 @@ pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::unrecognized_intrinsic_function, code = \"E0093\")]\n+#[diag(typeck::unrecognized_intrinsic_function, code = \"E0093\")]\n pub struct UnrecognizedIntrinsicFunction {\n     #[primary_span]\n     #[label]\n@@ -46,7 +46,7 @@ pub struct UnrecognizedIntrinsicFunction {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::lifetimes_or_bounds_mismatch_on_trait, code = \"E0195\")]\n+#[diag(typeck::lifetimes_or_bounds_mismatch_on_trait, code = \"E0195\")]\n pub struct LifetimesOrBoundsMismatchOnTrait {\n     #[primary_span]\n     #[label]\n@@ -58,15 +58,15 @@ pub struct LifetimesOrBoundsMismatchOnTrait {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::drop_impl_on_wrong_item, code = \"E0120\")]\n+#[diag(typeck::drop_impl_on_wrong_item, code = \"E0120\")]\n pub struct DropImplOnWrongItem {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::field_already_declared, code = \"E0124\")]\n+#[diag(typeck::field_already_declared, code = \"E0124\")]\n pub struct FieldAlreadyDeclared {\n     pub field_name: Ident,\n     #[primary_span]\n@@ -77,30 +77,30 @@ pub struct FieldAlreadyDeclared {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::copy_impl_on_type_with_dtor, code = \"E0184\")]\n+#[diag(typeck::copy_impl_on_type_with_dtor, code = \"E0184\")]\n pub struct CopyImplOnTypeWithDtor {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::multiple_relaxed_default_bounds, code = \"E0203\")]\n+#[diag(typeck::multiple_relaxed_default_bounds, code = \"E0203\")]\n pub struct MultipleRelaxedDefaultBounds {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::copy_impl_on_non_adt, code = \"E0206\")]\n+#[diag(typeck::copy_impl_on_non_adt, code = \"E0206\")]\n pub struct CopyImplOnNonAdt {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::trait_object_declared_with_no_traits, code = \"E0224\")]\n+#[diag(typeck::trait_object_declared_with_no_traits, code = \"E0224\")]\n pub struct TraitObjectDeclaredWithNoTraits {\n     #[primary_span]\n     pub span: Span,\n@@ -109,29 +109,29 @@ pub struct TraitObjectDeclaredWithNoTraits {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0227\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0227\")]\n pub struct AmbiguousLifetimeBound {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::assoc_type_binding_not_allowed, code = \"E0229\")]\n+#[diag(typeck::assoc_type_binding_not_allowed, code = \"E0229\")]\n pub struct AssocTypeBindingNotAllowed {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::functional_record_update_on_non_struct, code = \"E0436\")]\n+#[diag(typeck::functional_record_update_on_non_struct, code = \"E0436\")]\n pub struct FunctionalRecordUpdateOnNonStruct {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::typeof_reserved_keyword_used, code = \"E0516\")]\n+#[diag(typeck::typeof_reserved_keyword_used, code = \"E0516\")]\n pub struct TypeofReservedKeywordUsed<'tcx> {\n     pub ty: Ty<'tcx>,\n     #[primary_span]\n@@ -142,7 +142,7 @@ pub struct TypeofReservedKeywordUsed<'tcx> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::return_stmt_outside_of_fn_body, code = \"E0572\")]\n+#[diag(typeck::return_stmt_outside_of_fn_body, code = \"E0572\")]\n pub struct ReturnStmtOutsideOfFnBody {\n     #[primary_span]\n     pub span: Span,\n@@ -153,29 +153,29 @@ pub struct ReturnStmtOutsideOfFnBody {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::yield_expr_outside_of_generator, code = \"E0627\")]\n+#[diag(typeck::yield_expr_outside_of_generator, code = \"E0627\")]\n pub struct YieldExprOutsideOfGenerator {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::struct_expr_non_exhaustive, code = \"E0639\")]\n+#[diag(typeck::struct_expr_non_exhaustive, code = \"E0639\")]\n pub struct StructExprNonExhaustive {\n     #[primary_span]\n     pub span: Span,\n     pub what: &'static str,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::method_call_on_unknown_type, code = \"E0699\")]\n+#[diag(typeck::method_call_on_unknown_type, code = \"E0699\")]\n pub struct MethodCallOnUnknownType {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::value_of_associated_struct_already_specified, code = \"E0719\")]\n+#[diag(typeck::value_of_associated_struct_already_specified, code = \"E0719\")]\n pub struct ValueOfAssociatedStructAlreadySpecified {\n     #[primary_span]\n     #[label]\n@@ -187,7 +187,7 @@ pub struct ValueOfAssociatedStructAlreadySpecified {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::address_of_temporary_taken, code = \"E0745\")]\n+#[diag(typeck::address_of_temporary_taken, code = \"E0745\")]\n pub struct AddressOfTemporaryTaken {\n     #[primary_span]\n     #[label]\n@@ -233,7 +233,7 @@ pub enum ExpectedReturnTypeLabel<'tcx> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::unconstrained_opaque_type)]\n+#[diag(typeck::unconstrained_opaque_type)]\n #[note]\n pub struct UnconstrainedOpaqueType {\n     #[primary_span]\n@@ -309,7 +309,7 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::manual_implementation, code = \"E0183\")]\n+#[diag(typeck::manual_implementation, code = \"E0183\")]\n #[help]\n pub struct ManualImplementation {\n     #[primary_span]\n@@ -319,21 +319,21 @@ pub struct ManualImplementation {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::substs_on_overridden_impl)]\n+#[diag(typeck::substs_on_overridden_impl)]\n pub struct SubstsOnOverriddenImpl {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(typeck::unused_extern_crate)]\n+#[diag(typeck::unused_extern_crate)]\n pub struct UnusedExternCrate {\n     #[suggestion(applicability = \"machine-applicable\", code = \"\")]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[lint(typeck::extern_crate_not_idiomatic)]\n+#[diag(typeck::extern_crate_not_idiomatic)]\n pub struct ExternCrateNotIdiomatic {\n     #[suggestion_short(applicability = \"machine-applicable\", code = \"{suggestion_code}\")]\n     pub span: Span,\n@@ -342,7 +342,7 @@ pub struct ExternCrateNotIdiomatic {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::expected_used_symbol)]\n+#[diag(typeck::expected_used_symbol)]\n pub struct ExpectedUsedSymbol {\n     #[primary_span]\n     pub span: Span,"}, {"sha": "33192433bbf38ca80e6d6b5a427f286cd77c7589", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -16,7 +16,7 @@ use rustc_session::{parse::ParseSess, SessionDiagnostic};\n use rustc_span::Span;\n \n #[derive(SessionDiagnostic)]\n-#[error(parser::expect_path)]\n+#[diag(parser::expect_path)]\n struct DeriveSessionDiagnostic {\n     #[primary_span]\n     span: Span,"}, {"sha": "aaa8caa64f34330e16b043e3cfca387ee96d7388", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 113, "deletions": 98, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -28,124 +28,115 @@ use rustc_errors::{Applicability, MultiSpan};\n extern crate rustc_session;\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct Hello {}\n \n #[derive(SessionDiagnostic)]\n-#[warning(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct HelloWarn {}\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[derive(SessionDiagnostic)]` can only be used on structs\n enum SessionDiagnosticOnEnum {\n     Foo,\n     Bar,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-#[error = \"E0123\"]\n-//~^ ERROR `#[error = ...]` is not a valid attribute\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag = \"E0123\"]\n+//~^ ERROR `#[diag = ...]` is not a valid attribute\n struct WrongStructAttrStyle {}\n \n #[derive(SessionDiagnostic)]\n #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[nonsense(...)]` is not a valid attribute\n-//~^^ ERROR diagnostic kind not specified\n+//~^^ ERROR diagnostic slug not specified\n //~^^^ ERROR cannot find attribute `nonsense` in this scope\n struct InvalidStructAttr {}\n \n #[derive(SessionDiagnostic)]\n-#[error(\"E0123\")]\n-//~^ ERROR `#[error(\"...\")]` is not a valid attribute\n+#[diag(\"E0123\")]\n+//~^ ERROR `#[diag(\"...\")]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n struct InvalidLitNestedAttr {}\n \n #[derive(SessionDiagnostic)]\n-#[error(nonsense, code = \"E0123\")]\n+#[diag(nonsense, code = \"E0123\")]\n //~^ ERROR cannot find value `nonsense` in module `rustc_errors::fluent`\n struct InvalidNestedStructAttr {}\n \n #[derive(SessionDiagnostic)]\n-#[error(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[error(nonsense(...))]` is not a valid attribute\n+#[diag(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n+//~^ ERROR `#[diag(nonsense(...))]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr1 {}\n \n #[derive(SessionDiagnostic)]\n-#[error(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[error(nonsense = ...)]` is not a valid attribute\n+#[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n+//~^ ERROR `#[diag(nonsense = ...)]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr2 {}\n \n #[derive(SessionDiagnostic)]\n-#[error(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[error(nonsense = ...)]` is not a valid attribute\n+#[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n+//~^ ERROR `#[diag(nonsense = ...)]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr3 {}\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[error(slug = ...)]` is not a valid attribute\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\", slug = \"foo\")]\n+//~^ ERROR `#[diag(slug = ...)]` is not a valid attribute\n struct InvalidNestedStructAttr4 {}\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct WrongPlaceField {\n     #[suggestion = \"bar\"]\n     //~^ ERROR `#[suggestion = ...]` is not a valid attribute\n     sp: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n //~^ ERROR specified multiple times\n //~^^ ERROR specified multiple times\n-//~^^^ ERROR specified multiple times\n-struct ErrorSpecifiedTwice {}\n+struct DiagSpecifiedTwice {}\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-#[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n-//~^ ERROR specified multiple times\n-//~^^ ERROR specified multiple times\n-//~^^^ ERROR specified multiple times\n-struct WarnSpecifiedAfterError {}\n-\n-#[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n //~^ ERROR specified multiple times\n struct CodeSpecifiedTwice {}\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n-//~^ ERROR `#[error(typeck::ambiguous_lifetime_bound)]` is not a valid attribute\n+#[diag(typeck::ambiguous_lifetime_bound, typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n+//~^ ERROR `#[diag(typeck::ambiguous_lifetime_bound)]` is not a valid attribute\n struct SlugSpecifiedTwice {}\n \n #[derive(SessionDiagnostic)]\n-struct KindNotProvided {} //~ ERROR diagnostic kind not specified\n+struct KindNotProvided {} //~ ERROR diagnostic slug not specified\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0456\")]\n+#[diag(code = \"E0456\")]\n //~^ ERROR diagnostic slug not specified\n struct SlugNotProvided {}\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound)]\n+#[diag(typeck::ambiguous_lifetime_bound)]\n struct CodeNotProvided {}\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct MessageWrongType {\n     #[primary_span]\n     //~^ ERROR `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     foo: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct InvalidPathFieldAttr {\n     #[nonsense]\n     //~^ ERROR `#[nonsense]` is not a valid attribute\n@@ -154,23 +145,23 @@ struct InvalidPathFieldAttr {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithField {\n     name: String,\n     #[label(typeck::label)]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithMessageAppliedToField {\n     #[label(typeck::label)]\n     //~^ ERROR the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     name: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithNonexistentField {\n     #[suggestion(typeck::suggestion, code = \"{name}\")]\n     //~^ ERROR `name` doesn't refer to a field on this type\n@@ -179,7 +170,7 @@ struct ErrorWithNonexistentField {\n \n #[derive(SessionDiagnostic)]\n //~^ ERROR invalid format string: expected `'}'`\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorMissingClosingBrace {\n     #[suggestion(typeck::suggestion, code = \"{name\")]\n     suggestion: (Span, Applicability),\n@@ -189,7 +180,7 @@ struct ErrorMissingClosingBrace {\n \n #[derive(SessionDiagnostic)]\n //~^ ERROR invalid format string: unmatched `}`\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorMissingOpeningBrace {\n     #[suggestion(typeck::suggestion, code = \"name}\")]\n     suggestion: (Span, Applicability),\n@@ -198,22 +189,22 @@ struct ErrorMissingOpeningBrace {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelOnSpan {\n     #[label(typeck::label)]\n     sp: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelOnNonSpan {\n     #[label(typeck::label)]\n     //~^ ERROR the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     id: u32,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct Suggest {\n     #[suggestion(typeck::suggestion, code = \"This is the suggested code\")]\n     #[suggestion_short(typeck::suggestion, code = \"This is the suggested code\")]\n@@ -223,83 +214,83 @@ struct Suggest {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithoutCode {\n     #[suggestion(typeck::suggestion)]\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithBadKey {\n     #[suggestion(nonsense = \"bar\")]\n     //~^ ERROR `#[suggestion(nonsense = ...)]` is not a valid attribute\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithShorthandMsg {\n     #[suggestion(msg = \"bar\")]\n     //~^ ERROR `#[suggestion(msg = ...)]` is not a valid attribute\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithoutMsg {\n     #[suggestion(code = \"bar\")]\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithTypesSwapped {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     suggestion: (Applicability, Span),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithWrongTypeApplicabilityOnly {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     //~^ ERROR wrong field type for suggestion\n     suggestion: Applicability,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithSpanOnly {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     suggestion: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithDuplicateSpanAndApplicability {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n     suggestion: (Span, Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithDuplicateApplicabilityAndSpan {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one\n     suggestion: (Applicability, Applicability, Span),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct WrongKindOfAnnotation {\n     #[label = \"bar\"]\n     //~^ ERROR `#[label = ...]` is not a valid attribute\n     z: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct OptionsInErrors {\n     #[label(typeck::label)]\n     label: Option<Span>,\n@@ -308,7 +299,7 @@ struct OptionsInErrors {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n struct MoveOutOfBorrowError<'tcx> {\n     name: Ident,\n     ty: Ty<'tcx>,\n@@ -322,15 +313,15 @@ struct MoveOutOfBorrowError<'tcx> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithLifetime<'a> {\n     #[label(typeck::label)]\n     span: Span,\n     name: &'a str,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithDefaultLabelAttr<'a> {\n     #[label]\n     span: Span,\n@@ -339,15 +330,15 @@ struct ErrorWithDefaultLabelAttr<'a> {\n \n #[derive(SessionDiagnostic)]\n //~^ ERROR the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ArgFieldWithoutSkip {\n     #[primary_span]\n     span: Span,\n     other: Hello,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ArgFieldWithSkip {\n     #[primary_span]\n     span: Span,\n@@ -358,114 +349,114 @@ struct ArgFieldWithSkip {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedNote {\n     #[note]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedNoteCustom {\n     #[note(typeck::note)]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[note]\n struct ErrorWithNote {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[note(typeck::note)]\n struct ErrorWithNoteCustom {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedHelp {\n     #[help]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedHelpCustom {\n     #[help(typeck::help)]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[help]\n struct ErrorWithHelp {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[help(typeck::help)]\n struct ErrorWithHelpCustom {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n #[help]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithHelpWrongOrder {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n #[help(typeck::help)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithHelpCustomWrongOrder {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n #[note]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithNoteWrongOrder {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n #[note(typeck::note)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithNoteCustomWrongOrder {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ApplicabilityInBoth {\n     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n     //~^ ERROR applicability cannot be set in both the field and attribute\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct InvalidApplicability {\n     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"batman\")]\n     //~^ ERROR invalid applicability\n     suggestion: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ValidApplicability {\n     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n     suggestion: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct NoApplicability {\n     #[suggestion(typeck::suggestion, code = \"...\")]\n     suggestion: Span,\n@@ -476,22 +467,22 @@ struct NoApplicability {\n struct Note;\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound)]\n+#[diag(typeck::ambiguous_lifetime_bound)]\n struct Subdiagnostic {\n     #[subdiagnostic]\n     note: Note,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct VecField {\n     #[primary_span]\n     #[label]\n     spans: Vec<Span>,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct UnitField {\n     #[primary_span]\n     spans: Span,\n@@ -502,7 +493,7 @@ struct UnitField {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct OptUnitField {\n     #[primary_span]\n     spans: Span,\n@@ -513,56 +504,80 @@ struct OptUnitField {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelWithTrailingPath {\n     #[label(typeck::label, foo)]\n     //~^ ERROR `#[label(...)]` is not a valid attribute\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelWithTrailingNameValue {\n     #[label(typeck::label, foo = \"...\")]\n     //~^ ERROR `#[label(...)]` is not a valid attribute\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelWithTrailingList {\n     #[label(typeck::label, foo(\"...\"))]\n     //~^ ERROR `#[label(...)]` is not a valid attribute\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[lint(typeck::ambiguous_lifetime_bound)]\n-//~^ ERROR only `#[error(..)]` and `#[warning(..)]` are supported\n-struct LintsBad {\n-}\n-\n #[derive(LintDiagnostic)]\n-#[lint(typeck::ambiguous_lifetime_bound)]\n+#[diag(typeck::ambiguous_lifetime_bound)]\n struct LintsGood {\n }\n \n #[derive(LintDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound)]\n-//~^ ERROR only `#[lint(..)]` is supported\n-struct ErrorsBad {\n+#[diag(typeck::ambiguous_lifetime_bound)]\n+struct PrimarySpanOnLint {\n+    #[primary_span]\n+    //~^ ERROR `#[primary_span]` is not a valid attribute\n+    span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithMultiSpan {\n     #[primary_span]\n     span: MultiSpan,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[warn_]\n struct ErrorWithWarn {\n     val: String,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+//~^ ERROR `#[error(...)]` is not a valid attribute\n+//~| ERROR diagnostic slug not specified\n+//~| ERROR cannot find attribute `error` in this scope\n+struct ErrorAttribute {}\n+\n+#[derive(SessionDiagnostic)]\n+#[warning(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+//~^ ERROR `#[warning(...)]` is not a valid attribute\n+//~| ERROR diagnostic slug not specified\n+//~| ERROR cannot find attribute `warning` in this scope\n+struct WarningAttribute {}\n+\n+#[derive(SessionDiagnostic)]\n+#[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+//~^ ERROR `#[lint(...)]` is not a valid attribute\n+//~| ERROR diagnostic slug not specified\n+//~| ERROR cannot find attribute `lint` in this scope\n+struct LintAttributeOnSessionDiag {}\n+\n+#[derive(LintDiagnostic)]\n+#[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+//~^ ERROR `#[lint(...)]` is not a valid attribute\n+//~| ERROR diagnostic slug not specified\n+//~| ERROR cannot find attribute `lint` in this scope\n+struct LintAttributeOnLintDiag {}"}, {"sha": "866b1a1de999c2b08652082e963f3de1d4266680", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 190, "deletions": 148, "changes": 338, "blob_url": "https://github.com/rust-lang/rust/blob/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "patch": "@@ -1,29 +1,29 @@\n error: `#[derive(SessionDiagnostic)]` can only be used on structs\n   --> $DIR/diagnostic-derive.rs:39:1\n    |\n-LL | / #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+LL | / #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n LL | | enum SessionDiagnosticOnEnum {\n LL | |     Foo,\n LL | |     Bar,\n LL | | }\n    | |_^\n \n-error: `#[error = ...]` is not a valid attribute\n+error: `#[diag = ...]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:48:1\n    |\n-LL | #[error = \"E0123\"]\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | #[diag = \"E0123\"]\n+   | ^^^^^^^^^^^^^^^^^\n \n error: `#[nonsense(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:53:1\n    |\n LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: only `error`, `warning`, `help`, `note` and `warn_` are valid attributes\n+   = help: only `diag`, `help`, `note` and `warn_` are valid attributes\n \n-error: diagnostic kind not specified\n+error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:53:1\n    |\n LL | / #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n@@ -33,89 +33,89 @@ LL | |\n LL | | struct InvalidStructAttr {}\n    | |___________________________^\n    |\n-   = help: use the `#[error(...)]` attribute to create an error\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n-error: `#[error(\"...\")]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:60:9\n+error: `#[diag(\"...\")]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:60:8\n    |\n-LL | #[error(\"E0123\")]\n-   |         ^^^^^^^\n+LL | #[diag(\"E0123\")]\n+   |        ^^^^^^^\n    |\n    = help: first argument of the attribute should be the diagnostic slug\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:60:1\n    |\n-LL | / #[error(\"E0123\")]\n+LL | / #[diag(\"E0123\")]\n LL | |\n LL | |\n LL | | struct InvalidLitNestedAttr {}\n    | |______________________________^\n    |\n-   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n-error: `#[error(nonsense(...))]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:71:9\n+error: `#[diag(nonsense(...))]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:71:8\n    |\n-LL | #[error(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n-   |         ^^^^^^^^^^^^^^^\n+LL | #[diag(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n+   |        ^^^^^^^^^^^^^^^\n    |\n    = help: first argument of the attribute should be the diagnostic slug\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:71:1\n    |\n-LL | / #[error(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n+LL | / #[diag(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n LL | |\n LL | |\n LL | | struct InvalidNestedStructAttr1 {}\n    | |__________________________________^\n    |\n-   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n-error: `#[error(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:77:9\n+error: `#[diag(nonsense = ...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:77:8\n    |\n-LL | #[error(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n-   |         ^^^^^^^^^^^^^^^^\n+LL | #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n+   |        ^^^^^^^^^^^^^^^^\n    |\n    = help: first argument of the attribute should be the diagnostic slug\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:77:1\n    |\n-LL | / #[error(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n+LL | / #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n LL | |\n LL | |\n LL | | struct InvalidNestedStructAttr2 {}\n    | |__________________________________^\n    |\n-   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n-error: `#[error(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:83:9\n+error: `#[diag(nonsense = ...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:83:8\n    |\n-LL | #[error(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n-   |         ^^^^^^^^^^^^\n+LL | #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n+   |        ^^^^^^^^^^^^\n    |\n    = help: first argument of the attribute should be the diagnostic slug\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:83:1\n    |\n-LL | / #[error(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n+LL | / #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n LL | |\n LL | |\n LL | | struct InvalidNestedStructAttr3 {}\n    | |__________________________________^\n    |\n-   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n-error: `#[error(slug = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:89:59\n+error: `#[diag(slug = ...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:89:58\n    |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\", slug = \"foo\")]\n-   |                                                           ^^^^^^^^^^^^\n+LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\", slug = \"foo\")]\n+   |                                                          ^^^^^^^^^^^^\n    |\n    = help: only `code` is a valid nested attributes following the slug\n \n@@ -128,139 +128,91 @@ LL |     #[suggestion = \"bar\"]\n error: specified multiple times\n   --> $DIR/diagnostic-derive.rs:103:1\n    |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n   --> $DIR/diagnostic-derive.rs:102:1\n    |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:103:1\n+  --> $DIR/diagnostic-derive.rs:103:49\n    |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n+   |                                                 ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:102:1\n+  --> $DIR/diagnostic-derive.rs:102:49\n    |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   |                                                 ^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:103:50\n+  --> $DIR/diagnostic-derive.rs:109:65\n    |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n-   |                                                  ^^^^^^^\n+LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n+   |                                                                 ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:102:50\n+  --> $DIR/diagnostic-derive.rs:109:49\n    |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-   |                                                  ^^^^^^^\n+LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n+   |                                                 ^^^^^^^\n \n-error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:111:1\n+error: `#[diag(typeck::ambiguous_lifetime_bound)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:114:42\n    |\n-LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:110:1\n-   |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(typeck::ambiguous_lifetime_bound, typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:111:1\n-   |\n-LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:110:1\n-   |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:111:52\n-   |\n-LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n-   |                                                    ^^^^^^^\n-   |\n-note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:110:50\n-   |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-   |                                                  ^^^^^^^\n-\n-error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:118:66\n-   |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n-   |                                                                  ^^^^^^^\n-   |\n-note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:118:50\n-   |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n-   |                                                  ^^^^^^^\n-\n-error: `#[error(typeck::ambiguous_lifetime_bound)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:123:43\n-   |\n-LL | #[error(typeck::ambiguous_lifetime_bound, typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: diagnostic kind not specified\n-  --> $DIR/diagnostic-derive.rs:128:1\n+error: diagnostic slug not specified\n+  --> $DIR/diagnostic-derive.rs:119:1\n    |\n LL | struct KindNotProvided {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: use the `#[error(...)]` attribute to create an error\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:131:1\n+  --> $DIR/diagnostic-derive.rs:122:1\n    |\n-LL | / #[error(code = \"E0456\")]\n+LL | / #[diag(code = \"E0456\")]\n LL | |\n LL | | struct SlugNotProvided {}\n    | |_________________________^\n    |\n-   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:142:5\n+  --> $DIR/diagnostic-derive.rs:133:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: `#[nonsense]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:150:5\n+  --> $DIR/diagnostic-derive.rs:141:5\n    |\n LL |     #[nonsense]\n    |     ^^^^^^^^^^^\n    |\n    = help: only `skip_arg`, `primary_span`, `label`, `note`, `help` and `subdiagnostic` are valid field attributes\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:167:5\n+  --> $DIR/diagnostic-derive.rs:158:5\n    |\n LL |     #[label(typeck::label)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/diagnostic-derive.rs:175:45\n+  --> $DIR/diagnostic-derive.rs:166:45\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"{name}\")]\n    |                                             ^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/diagnostic-derive.rs:180:16\n+  --> $DIR/diagnostic-derive.rs:171:16\n    |\n LL | #[derive(SessionDiagnostic)]\n    |           -    ^ expected `'}'` in format string\n@@ -271,7 +223,7 @@ LL | #[derive(SessionDiagnostic)]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/diagnostic-derive.rs:190:15\n+  --> $DIR/diagnostic-derive.rs:181:15\n    |\n LL | #[derive(SessionDiagnostic)]\n    |               ^ unmatched `}` in format string\n@@ -280,29 +232,29 @@ LL | #[derive(SessionDiagnostic)]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:210:5\n+  --> $DIR/diagnostic-derive.rs:201:5\n    |\n LL |     #[label(typeck::label)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:235:18\n+  --> $DIR/diagnostic-derive.rs:226:18\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: only `message`, `code` and `applicability` are valid field attributes\n \n error: `#[suggestion(msg = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:243:18\n+  --> $DIR/diagnostic-derive.rs:234:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n    |\n    = help: only `message`, `code` and `applicability` are valid field attributes\n \n error: wrong field type for suggestion\n-  --> $DIR/diagnostic-derive.rs:265:5\n+  --> $DIR/diagnostic-derive.rs:256:5\n    |\n LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n@@ -312,78 +264,144 @@ LL | |     suggestion: Applicability,\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n-  --> $DIR/diagnostic-derive.rs:280:5\n+  --> $DIR/diagnostic-derive.rs:271:5\n    |\n LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Span, Span, Applicability),\n    | |___________________________________________^\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Applicability\n-  --> $DIR/diagnostic-derive.rs:288:5\n+  --> $DIR/diagnostic-derive.rs:279:5\n    |\n LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Applicability, Applicability, Span),\n    | |____________________________________________________^\n \n error: `#[label = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:296:5\n+  --> $DIR/diagnostic-derive.rs:287:5\n    |\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n error: applicability cannot be set in both the field and attribute\n-  --> $DIR/diagnostic-derive.rs:447:52\n+  --> $DIR/diagnostic-derive.rs:438:52\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/diagnostic-derive.rs:455:52\n+  --> $DIR/diagnostic-derive.rs:446:52\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"batman\")]\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:518:5\n+  --> $DIR/diagnostic-derive.rs:509:5\n    |\n LL |     #[label(typeck::label, foo)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:526:5\n+  --> $DIR/diagnostic-derive.rs:517:5\n    |\n LL |     #[label(typeck::label, foo = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:534:5\n+  --> $DIR/diagnostic-derive.rs:525:5\n    |\n LL |     #[label(typeck::label, foo(\"...\"))]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: only `#[error(..)]` and `#[warning(..)]` are supported\n-  --> $DIR/diagnostic-derive.rs:540:1\n+error: `#[primary_span]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:538:5\n    |\n-LL | / #[lint(typeck::ambiguous_lifetime_bound)]\n+LL |     #[primary_span]\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: the `primary_span` field attribute is not valid for lint diagnostics\n+\n+error: `#[error(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:558:1\n+   |\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `error`, `warning` and `lint` have been replaced by `diag`\n+\n+error: diagnostic slug not specified\n+  --> $DIR/diagnostic-derive.rs:558:1\n+   |\n+LL | / #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n-LL | | struct LintsBad {\n-LL | | }\n-   | |_^\n+LL | |\n+LL | |\n+LL | | struct ErrorAttribute {}\n+   | |________________________^\n+   |\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n+\n+error: `#[warning(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:565:1\n    |\n-   = help: use the `#[error(...)]` attribute to create a error\n+LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `error`, `warning` and `lint` have been replaced by `diag`\n \n-error: only `#[lint(..)]` is supported\n-  --> $DIR/diagnostic-derive.rs:551:1\n+error: diagnostic slug not specified\n+  --> $DIR/diagnostic-derive.rs:565:1\n    |\n-LL | / #[error(typeck::ambiguous_lifetime_bound)]\n+LL | / #[warning(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n-LL | | struct ErrorsBad {\n-LL | | }\n-   | |_^\n+LL | |\n+LL | |\n+LL | | struct WarningAttribute {}\n+   | |__________________________^\n+   |\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n+\n+error: `#[lint(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:572:1\n+   |\n+LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `error`, `warning` and `lint` have been replaced by `diag`\n+\n+error: diagnostic slug not specified\n+  --> $DIR/diagnostic-derive.rs:572:1\n+   |\n+LL | / #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+LL | |\n+LL | |\n+LL | |\n+LL | | struct LintAttributeOnSessionDiag {}\n+   | |____________________________________^\n+   |\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n+\n+error: `#[lint(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:579:1\n+   |\n+LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `error`, `warning` and `lint` have been replaced by `diag`\n+\n+error: diagnostic slug not specified\n+  --> $DIR/diagnostic-derive.rs:579:1\n+   |\n+LL | / #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+LL | |\n+LL | |\n+LL | |\n+LL | | struct LintAttributeOnLintDiag {}\n+   | |_________________________________^\n    |\n-   = help: use the `#[lint(...)]` attribute to create a lint\n+   = help: specify the slug as the first argument to the attribute, such as `#[diag(typeck::example_error)]`\n \n error: cannot find attribute `nonsense` in this scope\n   --> $DIR/diagnostic-derive.rs:53:3\n@@ -392,32 +410,56 @@ LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |   ^^^^^^^^\n \n error: cannot find attribute `nonsense` in this scope\n-  --> $DIR/diagnostic-derive.rs:150:7\n+  --> $DIR/diagnostic-derive.rs:141:7\n    |\n LL |     #[nonsense]\n    |       ^^^^^^^^\n \n+error: cannot find attribute `error` in this scope\n+  --> $DIR/diagnostic-derive.rs:558:3\n+   |\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   |   ^^^^^\n+\n+error: cannot find attribute `warning` in this scope\n+  --> $DIR/diagnostic-derive.rs:565:3\n+   |\n+LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   |   ^^^^^^^\n+\n+error: cannot find attribute `lint` in this scope\n+  --> $DIR/diagnostic-derive.rs:572:3\n+   |\n+LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n+\n+error: cannot find attribute `lint` in this scope\n+  --> $DIR/diagnostic-derive.rs:579:3\n+   |\n+LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n+\n error[E0425]: cannot find value `nonsense` in module `rustc_errors::fluent`\n-  --> $DIR/diagnostic-derive.rs:66:9\n+  --> $DIR/diagnostic-derive.rs:66:8\n    |\n-LL | #[error(nonsense, code = \"E0123\")]\n-   |         ^^^^^^^^ not found in `rustc_errors::fluent`\n+LL | #[diag(nonsense, code = \"E0123\")]\n+   |        ^^^^^^^^ not found in `rustc_errors::fluent`\n \n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-  --> $DIR/diagnostic-derive.rs:340:10\n+  --> $DIR/diagnostic-derive.rs:331:10\n    |\n LL | #[derive(SessionDiagnostic)]\n    |          ^^^^^^^^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n    |\n    = help: normalized in stderr\n note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n-  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:539:19\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:569:19\n    |\n LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 48 previous errors\n+error: aborting due to 55 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}]}