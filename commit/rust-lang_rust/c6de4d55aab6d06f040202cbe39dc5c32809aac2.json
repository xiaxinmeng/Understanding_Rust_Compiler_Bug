{"sha": "c6de4d55aab6d06f040202cbe39dc5c32809aac2", "node_id": "C_kwDOAAsO6NoAKGM2ZGU0ZDU1YWFiNmQwNmYwNDAyMDJjYmUzOWRjNWMzMjgwOWFhYzI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-27T03:24:01Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-27T03:24:01Z"}, "message": "drive-by: use is_const and is_const_if_const", "tree": {"sha": "3076b3ae681c5b48a6059063f3e11d0f6a71a84e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3076b3ae681c5b48a6059063f3e11d0f6a71a84e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6de4d55aab6d06f040202cbe39dc5c32809aac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6de4d55aab6d06f040202cbe39dc5c32809aac2", "html_url": "https://github.com/rust-lang/rust/commit/c6de4d55aab6d06f040202cbe39dc5c32809aac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6de4d55aab6d06f040202cbe39dc5c32809aac2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "html_url": "https://github.com/rust-lang/rust/commit/1ab97dbc52b76fa5b4bc01a110f366d81560b81d"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "9dc34260de76697047c831da46ec30ec24d6ca40", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=c6de4d55aab6d06f040202cbe39dc5c32809aac2", "patch": "@@ -7,7 +7,6 @@ use crate::interpret::{\n };\n \n use rustc_errors::ErrorReported;\n-use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -216,7 +215,7 @@ pub fn eval_to_const_value_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToConstValueResult<'tcx> {\n-    assert!(key.param_env.constness() == hir::Constness::Const);\n+    assert!(key.param_env.is_const());\n     // see comment in eval_to_allocation_raw_provider for what we're doing here\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n@@ -251,7 +250,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToAllocationRawResult<'tcx> {\n-    assert!(key.param_env.constness() == hir::Constness::Const);\n+    assert!(key.param_env.is_const());\n     // Because the constant is computed twice (once per value of `Reveal`), we are at risk of\n     // reporting the same error twice here. To resolve this, we check whether we can evaluate the\n     // constant in the more restrictive `Reveal::UserFacing`, which most likely already was"}, {"sha": "4c7f3482776d7ff332b562ad840c1e84043a7178", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=c6de4d55aab6d06f040202cbe39dc5c32809aac2", "patch": "@@ -86,15 +86,14 @@ declare_lint_pass!(\n \n impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n-        use rustc_middle::ty;\n         use rustc_middle::ty::PredicateKind::*;\n \n         let predicates = cx.tcx.explicit_predicates_of(item.def_id);\n         for &(predicate, span) in predicates.predicates {\n             let Trait(trait_predicate) = predicate.kind().skip_binder() else {\n                 continue\n             };\n-            if trait_predicate.constness == ty::BoundConstness::ConstIfConst {\n+            if trait_predicate.is_const_if_const() {\n                 // `~const Drop` definitely have meanings so avoid linting here.\n                 continue;\n             }"}, {"sha": "e7a8e71ce71b008c052604ea79caea4e4e634b12", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c6de4d55aab6d06f040202cbe39dc5c32809aac2", "patch": "@@ -784,6 +784,11 @@ impl<'tcx> TraitPredicate<'tcx> {\n     pub fn self_ty(self) -> Ty<'tcx> {\n         self.trait_ref.self_ty()\n     }\n+\n+    #[inline]\n+    pub fn is_const_if_const(self) -> bool {\n+        self.constness == BoundConstness::ConstIfConst\n+    }\n }\n \n impl<'tcx> PolyTraitPredicate<'tcx> {\n@@ -804,8 +809,9 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n         });\n     }\n \n-    pub fn is_const(self) -> bool {\n-        self.skip_binder().constness == BoundConstness::ConstIfConst\n+    #[inline]\n+    pub fn is_const_if_const(self) -> bool {\n+        self.skip_binder().is_const_if_const()\n     }\n }\n \n@@ -1392,6 +1398,7 @@ impl<'tcx> ParamEnv<'tcx> {\n         self.packed.tag().constness\n     }\n \n+    #[inline]\n     pub fn is_const(self) -> bool {\n         self.packed.tag().constness == hir::Constness::Const\n     }"}, {"sha": "687bd16ba30f451ba4071a978ce5223b9fb07945", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c6de4d55aab6d06f040202cbe39dc5c32809aac2", "patch": "@@ -440,7 +440,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             err.span_label(span, explanation);\n                         }\n \n-                        if trait_predicate.is_const() && obligation.param_env.is_const() {\n+                        if trait_predicate.is_const_if_const() && obligation.param_env.is_const() {\n                             let non_const_predicate = trait_ref.without_const();\n                             let non_const_obligation = Obligation {\n                                 cause: obligation.cause.clone(),"}, {"sha": "db86041f6180b5efdc49a71aebda28ba7a8d2020", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=c6de4d55aab6d06f040202cbe39dc5c32809aac2", "patch": "@@ -305,7 +305,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             } else if lang_items.unsize_trait() == Some(def_id) {\n                 self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n             } else if lang_items.drop_trait() == Some(def_id)\n-                && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst\n+                && obligation.predicate.is_const_if_const()\n             {\n                 self.assemble_const_drop_candidates(obligation, &mut candidates);\n             } else {"}, {"sha": "639884844b25d599208805359473fb4742292bbe", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=c6de4d55aab6d06f040202cbe39dc5c32809aac2", "patch": "@@ -72,9 +72,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // CheckPredicate(&A: Super)\n         // CheckPredicate(A: ~const Super) // <- still const env, failure\n         // ```\n-        if obligation.param_env.constness() == Constness::Const\n-            && obligation.predicate.skip_binder().constness == ty::BoundConstness::NotConst\n-        {\n+        if obligation.param_env.is_const() && !obligation.predicate.is_const_if_const() {\n             new_obligation = TraitObligation {\n                 cause: obligation.cause.clone(),\n                 param_env: obligation.param_env.without_const(),"}, {"sha": "47427395b93b36adff83c8dda2f9034cc12346bf", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6de4d55aab6d06f040202cbe39dc5c32809aac2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c6de4d55aab6d06f040202cbe39dc5c32809aac2", "patch": "@@ -1173,9 +1173,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ImplCandidate(def_id)\n                         if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n                     // const param\n-                    ParamCandidate(trait_pred)\n-                        if trait_pred.skip_binder().constness\n-                            == ty::BoundConstness::ConstIfConst => {}\n+                    ParamCandidate(trait_pred) if trait_pred.is_const_if_const() => {}\n                     // auto trait impl\n                     AutoImplCandidate(..) => {}\n                     // generator, this will raise error in other places"}]}