{"sha": "c3c3719fdd1146fcc014cafc0498aa308897e9ee", "node_id": "C_kwDOAAsO6NoAKGMzYzM3MTlmZGQxMTQ2ZmNjMDE0Y2FmYzA0OThhYTMwODg5N2U5ZWU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-09T16:07:59Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-15T11:25:57Z"}, "message": "Remove some redundant span arguments", "tree": {"sha": "fb7a17984a15b6cf6f0ae5892fae72920973b1b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb7a17984a15b6cf6f0ae5892fae72920973b1b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3c3719fdd1146fcc014cafc0498aa308897e9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c3719fdd1146fcc014cafc0498aa308897e9ee", "html_url": "https://github.com/rust-lang/rust/commit/c3c3719fdd1146fcc014cafc0498aa308897e9ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3c3719fdd1146fcc014cafc0498aa308897e9ee/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44c4a7b6c4a57e5e925d2156737bf9f003f583b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/44c4a7b6c4a57e5e925d2156737bf9f003f583b4", "html_url": "https://github.com/rust-lang/rust/commit/44c4a7b6c4a57e5e925d2156737bf9f003f583b4"}], "stats": {"total": 89, "additions": 32, "deletions": 57}, "files": [{"sha": "ed2218b8746ee9bdd8f898d20ca4cbf3c9742303", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3c3719fdd1146fcc014cafc0498aa308897e9ee/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c3719fdd1146fcc014cafc0498aa308897e9ee/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=c3c3719fdd1146fcc014cafc0498aa308897e9ee", "patch": "@@ -504,7 +504,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // method lookup.\n             let Ok(pick) = self\n             .probe_for_name(\n-                call_expr.span,\n                 Mode::MethodCall,\n                 segment.ident,\n                 IsSuggestion(true),"}, {"sha": "791a01ef74a2cf760c1c224719d913a210602f94", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c3c3719fdd1146fcc014cafc0498aa308897e9ee/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c3719fdd1146fcc014cafc0498aa308897e9ee/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=c3c3719fdd1146fcc014cafc0498aa308897e9ee", "patch": "@@ -94,7 +94,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         allow_private: bool,\n     ) -> bool {\n         match self.probe_for_name(\n-            method_name.span,\n             probe::Mode::MethodCall,\n             method_name,\n             IsSuggestion(false),\n@@ -124,7 +123,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let params = self\n             .probe_for_name(\n-                method_name.span,\n                 probe::Mode::MethodCall,\n                 method_name,\n                 IsSuggestion(true),\n@@ -174,7 +172,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         args: &'tcx [hir::Expr<'tcx>],\n     ) -> Result<MethodCallee<'tcx>, MethodError<'tcx>> {\n         let pick =\n-            self.lookup_probe(span, segment.ident, self_ty, call_expr, ProbeScope::TraitsInScope)?;\n+            self.lookup_probe(segment.ident, self_ty, call_expr, ProbeScope::TraitsInScope)?;\n \n         self.lint_dot_call_from_2018(self_ty, segment, span, call_expr, self_expr, &pick, args);\n \n@@ -199,7 +197,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .mk_ref(*region, ty::TypeAndMut { ty: *t_type, mutbl: mutability.invert() });\n                 // We probe again to see if there might be a borrow mutability discrepancy.\n                 match self.lookup_probe(\n-                    span,\n                     segment.ident,\n                     trait_type,\n                     call_expr,\n@@ -213,28 +210,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             // We probe again, taking all traits into account (not only those in scope).\n-            let mut candidates = match self.lookup_probe(\n-                span,\n-                segment.ident,\n-                self_ty,\n-                call_expr,\n-                ProbeScope::AllTraits,\n-            ) {\n-                // If we find a different result the caller probably forgot to import a trait.\n-                Ok(ref new_pick) if *new_pick != pick => vec![new_pick.item.container_id(self.tcx)],\n-                Err(Ambiguity(ref sources)) => sources\n-                    .iter()\n-                    .filter_map(|source| {\n-                        match *source {\n-                            // Note: this cannot come from an inherent impl,\n-                            // because the first probing succeeded.\n-                            CandidateSource::Impl(def) => self.tcx.trait_id_of_impl(def),\n-                            CandidateSource::Trait(_) => None,\n-                        }\n-                    })\n-                    .collect(),\n-                _ => Vec::new(),\n-            };\n+            let mut candidates =\n+                match self.lookup_probe(segment.ident, self_ty, call_expr, ProbeScope::AllTraits) {\n+                    // If we find a different result the caller probably forgot to import a trait.\n+                    Ok(ref new_pick) if *new_pick != pick => {\n+                        vec![new_pick.item.container_id(self.tcx)]\n+                    }\n+                    Err(Ambiguity(ref sources)) => sources\n+                        .iter()\n+                        .filter_map(|source| {\n+                            match *source {\n+                                // Note: this cannot come from an inherent impl,\n+                                // because the first probing succeeded.\n+                                CandidateSource::Impl(def) => self.tcx.trait_id_of_impl(def),\n+                                CandidateSource::Trait(_) => None,\n+                            }\n+                        })\n+                        .collect(),\n+                    _ => Vec::new(),\n+                };\n             candidates.retain(|candidate| *candidate != self.tcx.parent(result.callee.def_id));\n \n             return Err(IllegalSizedBound(candidates, needs_mut, span));\n@@ -246,14 +240,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self, call_expr))]\n     pub fn lookup_probe(\n         &self,\n-        span: Span,\n         method_name: Ident,\n         self_ty: Ty<'tcx>,\n         call_expr: &'tcx hir::Expr<'tcx>,\n         scope: ProbeScope,\n     ) -> probe::PickResult<'tcx> {\n         self.probe_for_name(\n-            span,\n             probe::Mode::MethodCall,\n             method_name,\n             IsSuggestion(false),\n@@ -584,9 +576,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         let pick = self.probe_for_name(\n-            span,\n             probe::Mode::Path,\n-            method_name,\n+            method_name.with_span_pos(span),\n             IsSuggestion(false),\n             self_ty,\n             expr_id,"}, {"sha": "eaf1a963ca9869a7bae08b659a36be51bf1166ea", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3c3719fdd1146fcc014cafc0498aa308897e9ee/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c3719fdd1146fcc014cafc0498aa308897e9ee/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=c3c3719fdd1146fcc014cafc0498aa308897e9ee", "patch": "@@ -298,7 +298,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     pub fn probe_for_name(\n         &self,\n-        span: Span,\n         mode: Mode,\n         item_name: Ident,\n         is_suggestion: IsSuggestion,\n@@ -307,7 +306,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         scope: ProbeScope,\n     ) -> PickResult<'tcx> {\n         self.probe_op(\n-            span,\n+            item_name.span,\n             mode,\n             Some(item_name),\n             None,"}, {"sha": "19f56c738239ba6b64e2881ff817daefaf0fbab7", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c3c3719fdd1146fcc014cafc0498aa308897e9ee/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c3719fdd1146fcc014cafc0498aa308897e9ee/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=c3c3719fdd1146fcc014cafc0498aa308897e9ee", "patch": "@@ -376,7 +376,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .hir()\n                             .expect_expr(self.tcx.hir().get_parent_node(rcvr_expr.hir_id));\n                         let probe = self.lookup_probe(\n-                            span,\n                             item_name,\n                             output_ty,\n                             call_expr,\n@@ -914,7 +913,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n                 }\n \n-                self.check_for_inner_self(&mut err, source, span, rcvr_ty, item_name);\n+                self.check_for_inner_self(&mut err, source, rcvr_ty, item_name);\n \n                 bound_spans.sort();\n                 bound_spans.dedup();\n@@ -1321,7 +1320,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.tcx.bound_type_of(range_def_id).subst(self.tcx, &[actual.into()]);\n \n                     let pick = self.probe_for_name(\n-                        span,\n                         Mode::MethodCall,\n                         item_name,\n                         IsSuggestion(true),\n@@ -1500,7 +1498,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         span,\n                         &|_, field_ty| {\n                             self.lookup_probe(\n-                                span,\n                                 item_name,\n                                 field_ty,\n                                 call_expr,\n@@ -1548,7 +1545,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         err: &mut Diagnostic,\n         source: SelfSource<'tcx>,\n-        span: Span,\n         actual: Ty<'tcx>,\n         item_name: Ident,\n     ) {\n@@ -1571,15 +1567,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             return None;\n                         }\n \n-                        self.lookup_probe(\n-                            span,\n-                            item_name,\n-                            field_ty,\n-                            call_expr,\n-                            ProbeScope::TraitsInScope,\n-                        )\n-                        .ok()\n-                        .map(|pick| (variant, field, pick))\n+                        self.lookup_probe(item_name, field_ty, call_expr, ProbeScope::TraitsInScope)\n+                            .ok()\n+                            .map(|pick| (variant, field, pick))\n                     })\n                     .collect();\n \n@@ -1644,12 +1634,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let [first] = ***substs else { return; };\n                 let ty::GenericArgKind::Type(ty) = first.unpack() else { return; };\n                 let Ok(pick) = self.lookup_probe(\n-                            span,\n-                            item_name,\n-                            ty,\n-                            call_expr,\n-                            ProbeScope::TraitsInScope,\n-                        )  else { return; };\n+                    item_name,\n+                    ty,\n+                    call_expr,\n+                    ProbeScope::TraitsInScope,\n+                )  else { return; };\n \n                 let name = self.ty_to_value_string(actual);\n                 let inner_id = kind.did();\n@@ -1899,7 +1888,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let SelfSource::QPath(ty) = self_source else { return; };\n         for (deref_ty, _) in self.autoderef(rustc_span::DUMMY_SP, rcvr_ty).skip(1) {\n             if let Ok(pick) = self.probe_for_name(\n-                ty.span,\n                 Mode::Path,\n                 item_name,\n                 IsSuggestion(true),\n@@ -2107,7 +2095,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (self.tcx.mk_mut_ref(self.tcx.lifetimes.re_erased, rcvr_ty), \"&mut \"),\n                 (self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, rcvr_ty), \"&\"),\n             ] {\n-                match self.lookup_probe(span, item_name, *rcvr_ty, rcvr, ProbeScope::AllTraits) {\n+                match self.lookup_probe(item_name, *rcvr_ty, rcvr, ProbeScope::AllTraits) {\n                     Ok(pick) => {\n                         // If the method is defined for the receiver we have, it likely wasn't `use`d.\n                         // We point at the method, but we just skip the rest of the check for arbitrary\n@@ -2141,7 +2129,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ] {\n                     if let Some(new_rcvr_t) = *rcvr_ty\n                         && let Ok(pick) = self.lookup_probe(\n-                            span,\n                             item_name,\n                             new_rcvr_t,\n                             rcvr,\n@@ -2522,7 +2509,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 span: method_name.span,\n             };\n             let probe = self.lookup_probe(\n-                expr.span,\n                 new_name,\n                 self_ty,\n                 self_expr,"}]}