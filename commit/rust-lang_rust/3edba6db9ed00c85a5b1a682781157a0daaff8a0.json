{"sha": "3edba6db9ed00c85a5b1a682781157a0daaff8a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZGJhNmRiOWVkMDBjODVhNWIxYTY4Mjc4MTE1N2EwZGFhZmY4YTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-27T21:30:22Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-27T21:30:22Z"}, "message": "Merge pull request #582 from Manishearth/extend\n\nextend_from_slice lint", "tree": {"sha": "d4ce76be5cbbbc67220e0a3fbc441cd00cb8e659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4ce76be5cbbbc67220e0a3fbc441cd00cb8e659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3edba6db9ed00c85a5b1a682781157a0daaff8a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3edba6db9ed00c85a5b1a682781157a0daaff8a0", "html_url": "https://github.com/rust-lang/rust/commit/3edba6db9ed00c85a5b1a682781157a0daaff8a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3edba6db9ed00c85a5b1a682781157a0daaff8a0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "148667ce05d718105d91b7b91b31893150d4f121", "url": "https://api.github.com/repos/rust-lang/rust/commits/148667ce05d718105d91b7b91b31893150d4f121", "html_url": "https://github.com/rust-lang/rust/commit/148667ce05d718105d91b7b91b31893150d4f121"}, {"sha": "291b73b8e89c20e72d0e16da150fc6a8a1e8d188", "url": "https://api.github.com/repos/rust-lang/rust/commits/291b73b8e89c20e72d0e16da150fc6a8a1e8d188", "html_url": "https://github.com/rust-lang/rust/commit/291b73b8e89c20e72d0e16da150fc6a8a1e8d188"}], "stats": {"total": 87, "additions": 84, "deletions": 3}, "files": [{"sha": "04b0bd0e384a4939da1c2809f96d80f2ae849bed", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3edba6db9ed00c85a5b1a682781157a0daaff8a0/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3edba6db9ed00c85a5b1a682781157a0daaff8a0/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3edba6db9ed00c85a5b1a682781157a0daaff8a0", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 99 lints included in this crate:\n+There are 100 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -34,6 +34,7 @@ name\n [expl_impl_clone_on_copy](https://github.com/Manishearth/rust-clippy/wiki#expl_impl_clone_on_copy)             | warn    | implementing `Clone` explicitly on `Copy` types\n [explicit_counter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_counter_loop)                 | warn    | for-looping with an explicit counter when `_.enumerate()` would do\n [explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)                       | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n+[extend_from_slice](https://github.com/Manishearth/rust-clippy/wiki#extend_from_slice)                         | warn    | `.extend_from_slice(_)` is a faster way to extend a Vec by a slice\n [filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                     | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n [float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                         | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`"}, {"sha": "6d706888fc3159ad1d0733352a3fd716934ac6e6", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3edba6db9ed00c85a5b1a682781157a0daaff8a0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edba6db9ed00c85a5b1a682781157a0daaff8a0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3edba6db9ed00c85a5b1a682781157a0daaff8a0", "patch": "@@ -200,6 +200,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         matches::MATCH_REF_PATS,\n         matches::SINGLE_MATCH,\n         methods::CHARS_NEXT_CMP,\n+        methods::EXTEND_FROM_SLICE,\n         methods::FILTER_NEXT,\n         methods::OK_EXPECT,\n         methods::OPTION_MAP_UNWRAP_OR,"}, {"sha": "a5f27440f9417f3a522e350f409fdf0775bf8728", "filename": "src/methods.rs", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3edba6db9ed00c85a5b1a682781157a0daaff8a0/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edba6db9ed00c85a5b1a682781157a0daaff8a0/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=3edba6db9ed00c85a5b1a682781157a0daaff8a0", "patch": "@@ -14,7 +14,7 @@ use utils::{\n };\n use utils::{\n     BTREEMAP_ENTRY_PATH, DEFAULT_TRAIT_PATH, HASHMAP_ENTRY_PATH, OPTION_PATH, RESULT_PATH,\n-    STRING_PATH\n+    STRING_PATH, VEC_PATH,\n };\n use utils::MethodArgs;\n use rustc::middle::cstore::CrateStore;\n@@ -212,9 +212,20 @@ declare_lint!(pub CHARS_NEXT_CMP, Warn,\n declare_lint!(pub OR_FUN_CALL, Warn,\n               \"using any `*or` method when the `*or_else` would do\");\n \n+/// **What it does:** This lint `Warn`s on using `.extend(s)` on a `vec` to extend the vec by a slice.\n+///\n+/// **Why is this bad?** Since Rust 1.6, the `extend_from_slice(_)` method is stable and at least for now faster.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `my_vec.extend(&xs)`\n+declare_lint!(pub EXTEND_FROM_SLICE, Warn,\n+              \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\");\n+\n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(OPTION_UNWRAP_USED,\n+        lint_array!(EXTEND_FROM_SLICE,\n+                    OPTION_UNWRAP_USED,\n                     RESULT_UNWRAP_USED,\n                     STR_TO_STRING,\n                     STRING_TO_STRING,\n@@ -256,6 +267,8 @@ impl LateLintPass for MethodsPass {\n                     lint_search_is_some(cx, expr, \"position\", arglists[0], arglists[1]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"rposition\", \"is_some\"]) {\n                     lint_search_is_some(cx, expr, \"rposition\", arglists[0], arglists[1]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"extend\"]) {\n+                    lint_extend(cx, expr, arglists[0]);\n                 }\n \n                 lint_or_fun_call(cx, expr, &name.node.as_str(), &args);\n@@ -427,6 +440,53 @@ fn lint_or_fun_call(cx: &LateContext, expr: &Expr, name: &str, args: &[P<Expr>])\n     }\n }\n \n+fn lint_extend(cx: &LateContext, expr: &Expr, args: &MethodArgs) {\n+    let (obj_ty, _) = walk_ptrs_ty_depth(cx.tcx.expr_ty(&args[0]));\n+    if !match_type(cx, obj_ty, &VEC_PATH) {\n+        return;\n+    }\n+    let arg_ty = cx.tcx.expr_ty(&args[1]);\n+    if let Some((span, r)) = derefs_to_slice(cx, &args[1], &arg_ty) {\n+        span_lint(cx, EXTEND_FROM_SLICE, expr.span,\n+                  &format!(\"use of `extend` to extend a Vec by a slice\"))\n+            .span_suggestion(expr.span, \"try this\",\n+                             format!(\"{}.extend_from_slice({}{})\",\n+                                     snippet(cx, args[0].span, \"_\"),\n+                                     r, snippet(cx, span, \"_\")));\n+    }\n+}\n+\n+fn derefs_to_slice(cx: &LateContext, expr: &Expr, ty: &ty::Ty) \n+   -> Option<(Span, &'static str)> {\n+    fn may_slice(cx: &LateContext, ty: &ty::Ty) -> bool {\n+        match ty.sty {\n+            ty::TySlice(_) => true,            \n+            ty::TyStruct(..) => match_type(cx, ty, &VEC_PATH),\n+            ty::TyArray(_, size) => size < 32,\n+            ty::TyRef(_, ty::TypeAndMut { ty: ref inner, .. }) |\n+            ty::TyBox(ref inner) => may_slice(cx, inner),\n+            _ => false\n+        }\n+    }\n+    if let ExprMethodCall(name, _, ref args) = expr.node {\n+        if &name.node.as_str() == &\"iter\" && \n+               may_slice(cx, &cx.tcx.expr_ty(&args[0])) {\n+            Some((args[0].span, \"&\"))\n+        } else {\n+            None\n+        }\n+    } else {\n+        match ty.sty {\n+            ty::TySlice(_) => Some((expr.span, \"\")),\n+            ty::TyRef(_, ty::TypeAndMut { ty: ref inner, .. }) |\n+            ty::TyBox(ref inner) => if may_slice(cx, inner) { \n+                Some((expr.span, \"\"))\n+            } else { None },\n+            _ => None\n+        }\n+    }\n+}\n+\n #[allow(ptr_arg)]\n // Type of MethodArgs is potentially a Vec\n /// lint use of `unwrap()` for `Option`s and `Result`s"}, {"sha": "c72e602ac2bf4019b3d0a75cc6d1fb02d0d8ba3b", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3edba6db9ed00c85a5b1a682781157a0daaff8a0/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edba6db9ed00c85a5b1a682781157a0daaff8a0/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=3edba6db9ed00c85a5b1a682781157a0daaff8a0", "patch": "@@ -304,3 +304,22 @@ fn starts_with() {\n     //~| HELP like this\n     //~| SUGGESTION !\"\".starts_with(' ')\n }\n+\n+fn use_extend_from_slice() {\n+    let mut v : Vec<&'static str> = vec![];\n+    v.extend(&[\"Hello\", \"World\"]); //~ERROR use of `extend`\n+    v.extend(&vec![\"Some\", \"more\"]);\n+    //~^ERROR use of `extend`\n+    //~| HELP try this\n+    //~| SUGGESTION v.extend_from_slice(&vec![\"Some\", \"more\"]);\n+    \n+    v.extend(vec![\"And\", \"even\", \"more\"].iter()); //~ERROR use of `extend`\n+    let o : Option<&'static str> = None;\n+    v.extend(o);\n+    v.extend(Some(\"Bye\"));\n+    v.extend(vec![\"Not\", \"like\", \"this\"]);\n+    v.extend([\"But\", \"this\"].iter()); \n+    //~^ERROR use of `extend\n+    //~| HELP try this\n+    //~| SUGGESTION v.extend_from_slice(&[\"But\", \"this\"]);\n+}"}]}