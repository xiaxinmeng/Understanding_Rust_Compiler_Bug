{"sha": "2d2c4e7c225424a47dff36c67dbd114f2178b764", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMmM0ZTdjMjI1NDI0YTQ3ZGZmMzZjNjdkYmQxMTRmMjE3OGI3NjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-04T09:56:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-04T13:56:23Z"}, "message": "internal: deduplicate", "tree": {"sha": "d00be1a6e427cc202d3a5d18c941583166116f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00be1a6e427cc202d3a5d18c941583166116f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d2c4e7c225424a47dff36c67dbd114f2178b764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d2c4e7c225424a47dff36c67dbd114f2178b764", "html_url": "https://github.com/rust-lang/rust/commit/2d2c4e7c225424a47dff36c67dbd114f2178b764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d2c4e7c225424a47dff36c67dbd114f2178b764/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33199b7e434d9d2bd5ba7a14c8c16ef981a0eda7", "url": "https://api.github.com/repos/rust-lang/rust/commits/33199b7e434d9d2bd5ba7a14c8c16ef981a0eda7", "html_url": "https://github.com/rust-lang/rust/commit/33199b7e434d9d2bd5ba7a14c8c16ef981a0eda7"}], "stats": {"total": 88, "additions": 55, "deletions": 33}, "files": [{"sha": "a95836eddaf8498f367d7b98d1418ea57f2a4dfa", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d2c4e7c225424a47dff36c67dbd114f2178b764/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d2c4e7c225424a47dff36c67dbd114f2178b764/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=2d2c4e7c225424a47dff36c67dbd114f2178b764", "patch": "@@ -10,7 +10,9 @@ use crate::{\n     from_json,\n     global_state::GlobalStateSnapshot,\n     line_index::{LineIndex, OffsetEncoding},\n-    lsp_ext, LspError, Result,\n+    lsp_ext,\n+    lsp_utils::invalid_params_error,\n+    Result,\n };\n \n pub(crate) fn abs_path(url: &lsp_types::Url) -> Result<AbsPathBuf> {\n@@ -85,10 +87,8 @@ pub(crate) fn annotation(\n     snap: &GlobalStateSnapshot,\n     code_lens: lsp_types::CodeLens,\n ) -> Result<Annotation> {\n-    let data = code_lens.data.ok_or_else(|| LspError {\n-        code: lsp_server::ErrorCode::InvalidParams as i32,\n-        message: \"code lens without data\".to_string(),\n-    });\n+    let data =\n+        code_lens.data.ok_or_else(|| invalid_params_error(\"code lens without data\".to_string()))?;\n     let resolve = from_json::<lsp_ext::CodeLensResolveData>(\"CodeLensResolveData\", data)?;\n \n     match resolve {"}, {"sha": "9de059a2c388b44eca09b016fc0d801bdc5ba9ee", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2d2c4e7c225424a47dff36c67dbd114f2178b764/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d2c4e7c225424a47dff36c67dbd114f2178b764/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=2d2c4e7c225424a47dff36c67dbd114f2178b764", "patch": "@@ -40,7 +40,7 @@ use crate::{\n         self, InlayHint, InlayHintsParams, PositionOrRange, ViewCrateGraphParams,\n         WorkspaceSymbolParams,\n     },\n-    lsp_utils::all_edits_are_disjoint,\n+    lsp_utils::{all_edits_are_disjoint, invalid_params_error},\n     to_proto, LspError, Result,\n };\n \n@@ -767,9 +767,8 @@ pub(crate) fn handle_completion_resolve(\n     let _p = profile::span(\"handle_completion_resolve\");\n \n     if !all_edits_are_disjoint(&original_completion, &[]) {\n-        return Err(LspError::new(\n-            ErrorCode::InvalidParams as i32,\n-            \"Received a completion with overlapping edits, this is not LSP-compliant\".into(),\n+        return Err(invalid_params_error(\n+            \"Received a completion with overlapping edits, this is not LSP-compliant\".to_string(),\n         )\n         .into());\n     }\n@@ -1038,10 +1037,7 @@ pub(crate) fn handle_code_action_resolve(\n     let _p = profile::span(\"handle_code_action_resolve\");\n     let params = match code_action.data.take() {\n         Some(it) => it,\n-        None => Err(LspError {\n-            code: lsp_server::ErrorCode::InvalidParams as i32,\n-            message: format!(\"code action without data\"),\n-        })?,\n+        None => return Err(invalid_params_error(format!(\"code action without data\")).into()),\n     };\n \n     let file_id = from_proto::file_id(&snap, &params.code_action_params.text_document.uri)?;\n@@ -1059,10 +1055,10 @@ pub(crate) fn handle_code_action_resolve(\n     let (assist_index, assist_resolve) = match parse_action_id(&params.id) {\n         Ok(parsed_data) => parsed_data,\n         Err(e) => {\n-            return Err(LspError::new(\n-                ErrorCode::InvalidParams as i32,\n-                format!(\"Failed to parse action id string '{}': {}\", params.id, e),\n-            )\n+            return Err(invalid_params_error(format!(\n+                \"Failed to parse action id string '{}': {}\",\n+                params.id, e\n+            ))\n             .into())\n         }\n     };\n@@ -1079,23 +1075,17 @@ pub(crate) fn handle_code_action_resolve(\n \n     let assist = match assists.get(assist_index) {\n         Some(assist) => assist,\n-        None => return Err(LspError::new(\n-            ErrorCode::InvalidParams as i32,\n-            format!(\n-                \"Failed to find the assist for index {} provided by the resolve request. Resolve request assist id: {}\",\n-                assist_index, params.id,\n-            ),\n-        )\n+        None => return Err(invalid_params_error(format!(\n+            \"Failed to find the assist for index {} provided by the resolve request. Resolve request assist id: {}\",\n+            assist_index, params.id,\n+        ))\n         .into())\n     };\n     if assist.id.0 != expected_assist_id || assist.id.1 != expected_kind {\n-        return Err(LspError::new(\n-            ErrorCode::InvalidParams as i32,\n-            format!(\n-                \"Mismatching assist at index {} for the resolve parameters given. Resolve request assist id: {}, actual id: {:?}.\",\n-                assist_index, params.id, assist.id\n-            ),\n-        )\n+        return Err(invalid_params_error(format!(\n+            \"Mismatching assist at index {} for the resolve parameters given. Resolve request assist id: {}, actual id: {:?}.\",\n+            assist_index, params.id, assist.id\n+        ))\n         .into());\n     }\n     let edit = to_proto::code_action(&snap, assist.clone(), None)?.edit;"}, {"sha": "09178521b59e0048c4f8c02e8441d975149b68c6", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d2c4e7c225424a47dff36c67dbd114f2178b764/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d2c4e7c225424a47dff36c67dbd114f2178b764/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=2d2c4e7c225424a47dff36c67dbd114f2178b764", "patch": "@@ -8,8 +8,13 @@ use crate::{\n     from_proto,\n     global_state::GlobalState,\n     line_index::{LineEndings, LineIndex, OffsetEncoding},\n+    LspError,\n };\n \n+pub(crate) fn invalid_params_error(message: String) -> LspError {\n+    LspError { code: lsp_server::ErrorCode::InvalidParams as i32, message }\n+}\n+\n pub(crate) fn is_cancelled(e: &(dyn Error + 'static)) -> bool {\n     e.downcast_ref::<Cancelled>().is_some()\n }"}, {"sha": "277476981f1bc1c0611cc9a05495dc1ca9ce40a4", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d2c4e7c225424a47dff36c67dbd114f2178b764/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d2c4e7c225424a47dff36c67dbd114f2178b764/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=2d2c4e7c225424a47dff36c67dbd114f2178b764", "patch": "@@ -21,7 +21,9 @@ use crate::{\n     config::Config,\n     global_state::GlobalStateSnapshot,\n     line_index::{LineEndings, LineIndex, OffsetEncoding},\n-    lsp_ext, semantic_tokens, Result,\n+    lsp_ext,\n+    lsp_utils::invalid_params_error,\n+    semantic_tokens, Result,\n };\n \n pub(crate) fn position(line_index: &LineIndex, offset: TextSize) -> lsp_types::Position {\n@@ -1198,7 +1200,9 @@ pub(crate) fn markup_content(markup: Markup) -> lsp_types::MarkupContent {\n }\n \n pub(crate) fn rename_error(err: RenameError) -> crate::LspError {\n-    crate::LspError { code: lsp_server::ErrorCode::InvalidParams as i32, message: err.to_string() }\n+    // This is wrong, but we don't have a better alternative I suppose?\n+    // https://github.com/microsoft/language-server-protocol/issues/1341\n+    invalid_params_error(err.to_string())\n }\n \n #[cfg(test)]"}, {"sha": "92e79508b6db7baf3197e73d8dcbf25f6973a023", "filename": "docs/dev/style.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2d2c4e7c225424a47dff36c67dbd114f2178b764/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d2c4e7c225424a47dff36c67dbd114f2178b764/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=2d2c4e7c225424a47dff36c67dbd114f2178b764", "patch": "@@ -895,6 +895,29 @@ fn foo() -> Option<Bar> {\n \n **Rationale:** reduce cognitive stack usage.\n \n+Use `return Err(err)` to throw an error:\n+\n+```rust\n+// GOOD\n+fn f() -> Result<(), ()> {\n+    if condition {\n+        return Err(());\n+    }\n+    Ok(())\n+}\n+\n+// BAD\n+fn f() -> Result<(), ()> {\n+    if condition {\n+        Err(())?;\n+    }\n+    Ok(())\n+}\n+```\n+\n+**Rationale:** `return` has type `!`, which allows the compiler to flag dead\n+code (`Err(...)?` is of unconstrained generic type `T`).\n+\n ## Comparisons\n \n When doing multiple comparisons use `<`/`<=`, avoid `>`/`>=`."}]}