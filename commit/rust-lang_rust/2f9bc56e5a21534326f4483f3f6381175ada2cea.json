{"sha": "2f9bc56e5a21534326f4483f3f6381175ada2cea", "node_id": "C_kwDOAAsO6NoAKDJmOWJjNTZlNWEyMTUzNDMyNmY0NDgzZjNmNjM4MTE3NWFkYTJjZWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-13T19:01:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-13T19:01:58Z"}, "message": "Rollup merge of #93292 - nvzqz:nonzero-bits, r=dtolnay\n\nImplement `BITS` constant for non-zero integers\n\nThis adds the associated [`BITS`](https://doc.rust-lang.org/stable/std/primitive.usize.html#associatedconstant.BITS) constant to `NonZero{U,I}{8,16,32,64,128,size}`.\n\nThis is useful when a type alias refers to either a regular or non-zero integer.", "tree": {"sha": "7b441a7c0eb6e03d628d6258b700bc938e7fbc9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b441a7c0eb6e03d628d6258b700bc938e7fbc9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f9bc56e5a21534326f4483f3f6381175ada2cea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiLj+nCRBK7hj4Ov3rIwAArbMIACpNVKBShrOoBmqaFxEecPRz\nNyWqtd2FEQwgRdVaY9mCmYVhEtSu99K3ntZ/5zTCNNDBM54iDq4xwCenrdqGFU3L\nJBX2nJv8pzr4BQNBx/YcJ7QxghiAGvwWgxyURmcHeEgx81maV9lI1TGXHXqNuHUf\n7o5W3IU9f1cB7Lw58QIiHtHBgUcNbseAC8vnmyyPJegYRq8B0X3xfbuDIxGAdKwB\npAHzAi65M///iUbePkaPMbp4ekjswhAzhBFIAuzPgjEhLFkyCQKlkiy6WcQjYJyt\nxL7MBlwIezX5v4Ti5JteCkrPxj42bXplvZD1a2/wE4z+9odJq15oXMQ3CKF7LSs=\n=7Q+L\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b441a7c0eb6e03d628d6258b700bc938e7fbc9a\nparent ebed06fcba3b58913a5087039a81478d43b47b2f\nparent 6b5acf0d4063fc726f68fcd444140ffd576b7304\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1647198118 +0100\ncommitter GitHub <noreply@github.com> 1647198118 +0100\n\nRollup merge of #93292 - nvzqz:nonzero-bits, r=dtolnay\n\nImplement `BITS` constant for non-zero integers\n\nThis adds the associated [`BITS`](https://doc.rust-lang.org/stable/std/primitive.usize.html#associatedconstant.BITS) constant to `NonZero{U,I}{8,16,32,64,128,size}`.\n\nThis is useful when a type alias refers to either a regular or non-zero integer.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f9bc56e5a21534326f4483f3f6381175ada2cea", "html_url": "https://github.com/rust-lang/rust/commit/2f9bc56e5a21534326f4483f3f6381175ada2cea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f9bc56e5a21534326f4483f3f6381175ada2cea/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebed06fcba3b58913a5087039a81478d43b47b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebed06fcba3b58913a5087039a81478d43b47b2f", "html_url": "https://github.com/rust-lang/rust/commit/ebed06fcba3b58913a5087039a81478d43b47b2f"}, {"sha": "6b5acf0d4063fc726f68fcd444140ffd576b7304", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5acf0d4063fc726f68fcd444140ffd576b7304", "html_url": "https://github.com/rust-lang/rust/commit/6b5acf0d4063fc726f68fcd444140ffd576b7304"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "c36529314784ea2ff915e2342013521f42f0b854", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2f9bc56e5a21534326f4483f3f6381175ada2cea/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9bc56e5a21534326f4483f3f6381175ada2cea/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=2f9bc56e5a21534326f4483f3f6381175ada2cea", "patch": "@@ -465,7 +465,7 @@ macro_rules! nonzero_unsigned_operations {\n                               without modifying the original\"]\n                 #[inline]\n                 pub const fn log2(self) -> u32 {\n-                    <$Int>::BITS - 1 - self.leading_zeros()\n+                    Self::BITS - 1 - self.leading_zeros()\n                 }\n \n                 /// Returns the base 10 logarithm of the number, rounded down.\n@@ -1090,3 +1090,41 @@ nonzero_min_max_signed! {\n     NonZeroI128(i128);\n     NonZeroIsize(isize);\n }\n+\n+macro_rules! nonzero_bits {\n+    ( $( $Ty: ident($Int: ty); )+ ) => {\n+        $(\n+            impl $Ty {\n+                /// The size of this non-zero integer type in bits.\n+                ///\n+                #[doc = concat!(\"This value is equal to [`\", stringify!($Int), \"::BITS`].\")]\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_bits)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::BITS, \", stringify!($Int), \"::BITS);\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_bits\", issue = \"94881\")]\n+                pub const BITS: u32 = <$Int>::BITS;\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_bits! {\n+    NonZeroU8(u8);\n+    NonZeroI8(i8);\n+    NonZeroU16(u16);\n+    NonZeroI16(i16);\n+    NonZeroU32(u32);\n+    NonZeroI32(i32);\n+    NonZeroU64(u64);\n+    NonZeroI64(i64);\n+    NonZeroU128(u128);\n+    NonZeroI128(i128);\n+    NonZeroUsize(usize);\n+    NonZeroIsize(isize);\n+}"}]}