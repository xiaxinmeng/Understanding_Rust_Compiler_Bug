{"sha": "93c52f5d2399c8e0a23bf50ff660400019d09751", "node_id": "C_kwDOAAsO6NoAKDkzYzUyZjVkMjM5OWM4ZTBhMjNiZjUwZmY2NjA0MDAwMTlkMDk3NTE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-10T08:46:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-10T08:46:29Z"}, "message": "Merge #10507\n\n10507: internal: move tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d28ca4a2ec1c5fabede8627afb082fea7343b513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d28ca4a2ec1c5fabede8627afb082fea7343b513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93c52f5d2399c8e0a23bf50ff660400019d09751", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYqhlCRBK7hj4Ov3rIwAAwlcIAAK3wt6wIzeGIb2F3RsspkzQ\nvjQbd1wxMn24DSjxZgtXJ/efPhpQoaGLXT3yf7pgZ9Y4W54IAEdJbNeO3kz2c3Kd\n8W4AGl20cmHuhB4m41hihav0GusnqpAztJNUqUW54+oKuyszvsy8JPECz+FY4XV/\n+FkqaEHH2spzuZhhoXsN2aJAvGKTbSZLY4kT5ZUGk/6sHkdf9l5J4b3HiA9XJUeO\nCK2Q4rbTGsVRPx3GMH8DyhddfxGVnGeM48C7kWXjd1VehXL6OCeNVCybBD4sQoWZ\nZrR5S68qN5beGABwPG7WHRH+IovNPRHKCT0S5407uSgTKkD4RF7bClNQF8ATHlY=\n=yY74\n-----END PGP SIGNATURE-----\n", "payload": "tree d28ca4a2ec1c5fabede8627afb082fea7343b513\nparent cbe66621c354eac042bf6e96b78ff9e8cbf0c14d\nparent 3c9dda6ca9471bb6a42accbf23226595782c0fb9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633855589 +0000\ncommitter GitHub <noreply@github.com> 1633855589 +0000\n\nMerge #10507\n\n10507: internal: move tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93c52f5d2399c8e0a23bf50ff660400019d09751", "html_url": "https://github.com/rust-lang/rust/commit/93c52f5d2399c8e0a23bf50ff660400019d09751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93c52f5d2399c8e0a23bf50ff660400019d09751/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbe66621c354eac042bf6e96b78ff9e8cbf0c14d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d", "html_url": "https://github.com/rust-lang/rust/commit/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d"}, {"sha": "3c9dda6ca9471bb6a42accbf23226595782c0fb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9dda6ca9471bb6a42accbf23226595782c0fb9", "html_url": "https://github.com/rust-lang/rust/commit/3c9dda6ca9471bb6a42accbf23226595782c0fb9"}], "stats": {"total": 682, "additions": 360, "deletions": 322}, "files": [{"sha": "66874a674d821841fa6c8dbdcbbe14c82669d66c", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93c52f5d2399c8e0a23bf50ff660400019d09751/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c52f5d2399c8e0a23bf50ff660400019d09751/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=93c52f5d2399c8e0a23bf50ff660400019d09751", "patch": "@@ -20,7 +20,7 @@ use stdx::format_to;\n use syntax::{\n     ast::{self, edit::IndentLevel},\n     AstNode,\n-    SyntaxKind::{self, IDENT, LIFETIME_IDENT},\n+    SyntaxKind::{EOF, IDENT, LIFETIME_IDENT},\n     SyntaxNode, T,\n };\n \n@@ -109,7 +109,7 @@ fn reindent(indent: IndentLevel, pp: String) -> String {\n \n fn pretty_print_macro_expansion(expn: SyntaxNode) -> String {\n     let mut res = String::new();\n-    let mut prev_kind = SyntaxKind::EOF;\n+    let mut prev_kind = EOF;\n     let mut indent_level = 0;\n     for token in iter::successors(expn.first_token(), |t| t.next_token()) {\n         let curr_kind = token.kind();\n@@ -128,6 +128,11 @@ fn pretty_print_macro_expansion(expn: SyntaxNode) -> String {\n             (T![>], _) if curr_kind.is_keyword() => \" \",\n             (T![->], _) | (_, T![->]) => \" \",\n             (T![&&], _) | (_, T![&&]) => \" \",\n+            (T![,], _) => \" \",\n+            (T![fn], T!['(']) => \"\",\n+            (T![']'], _) if curr_kind.is_keyword() => \" \",\n+            (T![']'], T![#]) => \"\\n\",\n+            _ if prev_kind.is_keyword() => \" \",\n             _ => \"\",\n         };\n "}, {"sha": "df93298a3561e160228bf0ee527653534c2c8577", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 347, "deletions": 6, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/93c52f5d2399c8e0a23bf50ff660400019d09751/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c52f5d2399c8e0a23bf50ff660400019d09751/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=93c52f5d2399c8e0a23bf50ff660400019d09751", "patch": "@@ -403,15 +403,15 @@ fn test_match_group_in_group() {\n     check(\n         r#\"\n macro_rules! m {\n-    [ $( ( $($i:ident)* ) )* ] => [ x![$( ( $($i)* ) )*]; ]\n+    [ $( ( $($i:ident)* ) )* ] => [ ok![$( ( $($i)* ) )*]; ]\n }\n m! ( (a b) );\n \"#,\n         expect![[r#\"\n macro_rules! m {\n-    [ $( ( $($i:ident)* ) )* ] => [ x![$( ( $($i)* ) )*]; ]\n+    [ $( ( $($i:ident)* ) )* ] => [ ok![$( ( $($i)* ) )*]; ]\n }\n-x![(a b)];\n+ok![(a b)];\n \"#]],\n     )\n }\n@@ -769,12 +769,353 @@ fn f() {\n fn test_expr_with_attr() {\n     check(\n         r#\"\n-macro_rules! m { ($a:expr) => { x!(); } }\n+macro_rules! m { ($a:expr) => { ok!(); } }\n m!(#[allow(a)]());\n \"#,\n         expect![[r#\"\n-macro_rules! m { ($a:expr) => { x!(); } }\n-x!();\n+macro_rules! m { ($a:expr) => { ok!(); } }\n+ok!();\n \"#]],\n     )\n }\n+\n+#[test]\n+fn test_ty() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($t:ty) => ( fn bar() -> $t {} )\n+}\n+m! { Baz<u8> }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($t:ty) => ( fn bar() -> $t {} )\n+}\n+fn bar() -> Baz<u8> {}\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn test_ty_with_complex_type() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($t:ty) => ( fn bar() -> $ t {} )\n+}\n+\n+m! { &'a Baz<u8> }\n+\n+m! { extern \"Rust\" fn() -> Ret }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($t:ty) => ( fn bar() -> $ t {} )\n+}\n+\n+fn bar() -> & 'a Baz<u8> {}\n+\n+fn bar() -> extern \"Rust\"fn() -> Ret {}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_pat_() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($p:pat) => { fn foo() { let $p; } }\n+}\n+m! { (a, b) }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($p:pat) => { fn foo() { let $p; } }\n+}\n+fn foo() {\n+    let (a, b);\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_stmt() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($s:stmt) => ( fn bar() { $s; } )\n+}\n+m! { 2 }\n+m! { let a = 0 }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($s:stmt) => ( fn bar() { $s; } )\n+}\n+fn bar() {\n+    2;\n+}\n+fn bar() {\n+    let a = 0;\n+}\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn test_single_item() {\n+    check(\n+        r#\"\n+macro_rules! m { ($i:item) => ( $i ) }\n+m! { mod c {} }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m { ($i:item) => ( $i ) }\n+mod c {}\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn test_all_items() {\n+    check(\n+        r#\"\n+macro_rules! m { ($($i:item)*) => ($($i )*) }\n+m! {\n+    extern crate a;\n+    mod b;\n+    mod c {}\n+    use d;\n+    const E: i32 = 0;\n+    static F: i32 = 0;\n+    impl G {}\n+    struct H;\n+    enum I { Foo }\n+    trait J {}\n+    fn h() {}\n+    extern {}\n+    type T = u8;\n+}\n+\"#,\n+        expect![[r#\"\n+macro_rules! m { ($($i:item)*) => ($($i )*) }\n+extern crate a;\n+mod b;\n+mod c {}\n+use d;\n+const E:i32 = 0;\n+static F:i32 = 0;\n+impl G {}\n+struct H;\n+enum I {\n+    Foo\n+}\n+trait J {}\n+fn h() {}\n+extern {}\n+type T = u8;\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_block() {\n+    check(\n+        r#\"\n+macro_rules! m { ($b:block) => { fn foo() $b } }\n+m! { { 1; } }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m { ($b:block) => { fn foo() $b } }\n+fn foo() {\n+    1;\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_meta() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($m:meta) => ( #[$m] fn bar() {} )\n+}\n+m! { cfg(target_os = \"windows\") }\n+m! { hello::world }\n+\"#,\n+        expect![[r##\"\n+macro_rules! m {\n+    ($m:meta) => ( #[$m] fn bar() {} )\n+}\n+#[cfg(target_os = \"windows\")] fn bar() {}\n+#[hello::world] fn bar() {}\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_meta_doc_comments() {\n+    cov_mark::check!(test_meta_doc_comments);\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($(#[$m:meta])+) => ( $(#[$m])+ fn bar() {} )\n+}\n+m! {\n+    /// Single Line Doc 1\n+    /**\n+        MultiLines Doc\n+    */\n+}\n+\"#,\n+        expect![[r##\"\n+macro_rules! m {\n+    ($(#[$m:meta])+) => ( $(#[$m])+ fn bar() {} )\n+}\n+#[doc = \" Single Line Doc 1\"]\n+#[doc = \"\\n        MultiLines Doc\\n    \"] fn bar() {}\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_meta_extended_key_value_attributes() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    (#[$m:meta]) => ( #[$m] fn bar() {} )\n+}\n+m! { #[doc = concat!(\"The `\", \"bla\", \"` lang item.\")] }\n+\"#,\n+        expect![[r##\"\n+macro_rules! m {\n+    (#[$m:meta]) => ( #[$m] fn bar() {} )\n+}\n+#[doc = concat!(\"The `\", \"bla\", \"` lang item.\")] fn bar() {}\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_meta_doc_comments_non_latin() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($(#[$ m:meta])+) => ( $(#[$m])+ fn bar() {} )\n+}\n+m! {\n+    /// \u9326\u745f\u7121\u7aef\u4e94\u5341\u5f26\uff0c\u4e00\u5f26\u4e00\u67f1\u601d\u83ef\u5e74\u3002\n+    /**\n+        \u838a\u751f\u66c9\u5922\u8ff7\u8774\u8776\uff0c\u671b\u5e1d\u6625\u5fc3\u8a17\u675c\u9d51\u3002\n+    */\n+}\n+\"#,\n+        expect![[r##\"\n+macro_rules! m {\n+    ($(#[$ m:meta])+) => ( $(#[$m])+ fn bar() {} )\n+}\n+#[doc = \" \u9326\u745f\u7121\u7aef\u4e94\u5341\u5f26\uff0c\u4e00\u5f26\u4e00\u67f1\u601d\u83ef\u5e74\u3002\"]\n+#[doc = \"\\n        \u838a\u751f\u66c9\u5922\u8ff7\u8774\u8776\uff0c\u671b\u5e1d\u6625\u5fc3\u8a17\u675c\u9d51\u3002\\n    \"] fn bar() {}\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_meta_doc_comments_escaped_characters() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($(#[$m:meta])+) => ( $(#[$m])+ fn bar() {} )\n+}\n+m! {\n+    /// \\ \" '\n+}\n+\"#,\n+        expect![[r##\"\n+macro_rules! m {\n+    ($(#[$m:meta])+) => ( $(#[$m])+ fn bar() {} )\n+}\n+#[doc = \" \\\\ \\\" \\'\"] fn bar() {}\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_tt_block() {\n+    check(\n+        r#\"\n+macro_rules! m { ($tt:tt) => { fn foo() $tt } }\n+m! { { 1; } }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m { ($tt:tt) => { fn foo() $tt } }\n+fn foo() {\n+    1;\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_tt_group() {\n+    check(\n+        r#\"\n+macro_rules! m { ($($tt:tt)*) => { $($tt)* } }\n+m! { fn foo() {} }\"\n+\"#,\n+        expect![[r#\"\n+macro_rules! m { ($($tt:tt)*) => { $($tt)* } }\n+fn foo() {}\"\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_tt_composite() {\n+    check(\n+        r#\"\n+macro_rules! m { ($tt:tt) => { ok!(); } }\n+m! { => }\n+m! { = > }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m { ($tt:tt) => { ok!(); } }\n+ok!();\n+/* error: leftover tokens */ok!();\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_tt_composite2() {\n+    check(\n+        r#\"\n+macro_rules! m { ($($tt:tt)*) => { abs!(=> $($tt)*); } }\n+m! {#}\n+\"#,\n+        expect![[r##\"\n+macro_rules! m { ($($tt:tt)*) => { abs!(=> $($tt)*); } }\n+abs!( = > #);\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_tt_with_composite_without_space() {\n+    // Test macro input without any spaces\n+    // See https://github.com/rust-analyzer/rust-analyzer/issues/6692\n+    check(\n+        r#\"\n+macro_rules! m { ($ op:tt, $j:path) => ( ok!(); ) }\n+m!(==,Foo::Bool)\n+\"#,\n+        expect![[r#\"\n+macro_rules! m { ($ op:tt, $j:path) => ( ok!(); ) }\n+ok!();\n+\"#]],\n+    );\n+}"}, {"sha": "291f99330f1e8842ebed49957a7389c192f73f76", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93c52f5d2399c8e0a23bf50ff660400019d09751/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c52f5d2399c8e0a23bf50ff660400019d09751/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=93c52f5d2399c8e0a23bf50ff660400019d09751", "patch": "@@ -53,11 +53,11 @@ macro_rules! m {\n     }\n }\n fn f() {\n-    let_ = 'c';\n-    let_ = 1000;\n-    let_ = 12E+99_f64;\n-    let_ = \"rust1\";\n-    let_ = -92;\n+    let _ = 'c';\n+    let _ = 1000;\n+    let _ = 12E+99_f64;\n+    let _ = \"rust1\";\n+    let _ = -92;\n }\n \"#]],\n     );"}, {"sha": "6bd57bb568bf577468ce425a5d9d8f18da9bce40", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93c52f5d2399c8e0a23bf50ff660400019d09751/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c52f5d2399c8e0a23bf50ff660400019d09751/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=93c52f5d2399c8e0a23bf50ff660400019d09751", "patch": "@@ -307,6 +307,7 @@ fn doc_comment_text(comment: &ast::Comment) -> SmolStr {\n }\n \n fn convert_doc_comment(token: &syntax::SyntaxToken) -> Option<Vec<tt::TokenTree>> {\n+    cov_mark::hit!(test_meta_doc_comments);\n     let comment = ast::Comment::cast(token.clone())?;\n     let doc = comment.kind().doc?;\n "}, {"sha": "15a718402911abc6d95f62a8966caefbf13e6468", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 0, "deletions": 309, "changes": 309, "blob_url": "https://github.com/rust-lang/rust/blob/93c52f5d2399c8e0a23bf50ff660400019d09751/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c52f5d2399c8e0a23bf50ff660400019d09751/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=93c52f5d2399c8e0a23bf50ff660400019d09751", "patch": "@@ -101,315 +101,6 @@ fn test_attr_to_token_tree() {\n     );\n }\n \n-#[test]\n-fn test_ty() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:ty) => (\n-                fn bar() -> $ i { unimplemented!() }\n-            )\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { Baz<u8> }\", \"fn bar () -> Baz < u8 > {unimplemented ! ()}\");\n-}\n-\n-#[test]\n-fn test_ty_with_complex_type() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:ty) => (\n-                fn bar() -> $ i { unimplemented!() }\n-            )\n-        }\n-\"#,\n-    )\n-    // Reference lifetime struct with generic type\n-    .assert_expand_items(\n-        \"foo! { &'a Baz<u8> }\",\n-        \"fn bar () -> & 'a Baz < u8 > {unimplemented ! ()}\",\n-    )\n-    // extern \"Rust\" func type\n-    .assert_expand_items(\n-        r#\"foo! { extern \"Rust\" fn() -> Ret }\"#,\n-        r#\"fn bar () -> extern \"Rust\" fn () -> Ret {unimplemented ! ()}\"#,\n-    );\n-}\n-\n-#[test]\n-fn test_pat_() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:pat) => { fn foo() { let $ i; } }\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { (a, b) }\", \"fn foo () {let (a , b) ;}\");\n-}\n-\n-#[test]\n-fn test_stmt() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:stmt) => (\n-                fn bar() { $ i; }\n-            )\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { 2 }\", \"fn bar () {2 ;}\")\n-    .assert_expand_items(\"foo! { let a = 0 }\", \"fn bar () {let a = 0 ;}\");\n-}\n-\n-#[test]\n-fn test_single_item() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:item) => (\n-                $ i\n-            )\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! {mod c {}}\", \"mod c {}\");\n-}\n-\n-#[test]\n-fn test_all_items() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ ($ i:item)*) => ($ (\n-                $ i\n-            )*)\n-        }\n-\"#,\n-    ).\n-    assert_expand_items(\n-        r#\"\n-        foo! {\n-            extern crate a;\n-            mod b;\n-            mod c {}\n-            use d;\n-            const E: i32 = 0;\n-            static F: i32 = 0;\n-            impl G {}\n-            struct H;\n-            enum I { Foo }\n-            trait J {}\n-            fn h() {}\n-            extern {}\n-            type T = u8;\n-        }\n-\"#,\n-        r#\"extern crate a ; mod b ; mod c {} use d ; const E : i32 = 0 ; static F : i32 = 0 ; impl G {} struct H ; enum I {Foo} trait J {} fn h () {} extern {} type T = u8 ;\"#,\n-    );\n-}\n-\n-#[test]\n-fn test_block() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:block) => { fn foo() $ i }\n-        }\n-\"#,\n-    )\n-    .assert_expand_statements(\"foo! { { 1; } }\", \"fn foo () {1 ;}\");\n-}\n-\n-#[test]\n-fn test_meta() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:meta) => (\n-                #[$ i]\n-                fn bar() {}\n-            )\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\n-        r#\"foo! { cfg(target_os = \"windows\") }\"#,\n-        r#\"# [cfg (target_os = \"windows\")] fn bar () {}\"#,\n-    )\n-    .assert_expand_items(r#\"foo! { hello::world }\"#, r#\"# [hello :: world] fn bar () {}\"#);\n-}\n-\n-#[test]\n-fn test_meta_doc_comments() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($(#[$ i:meta])+) => (\n-                $(#[$ i])+\n-                fn bar() {}\n-            )\n-        }\n-\"#,\n-    ).\n-    assert_expand_items(\n-        r#\"foo! {\n-            /// Single Line Doc 1\n-            /**\n-                MultiLines Doc\n-            */\n-        }\"#,\n-        \"# [doc = \\\" Single Line Doc 1\\\"] # [doc = \\\"\\\\n                MultiLines Doc\\\\n            \\\"] fn bar () {}\",\n-    );\n-}\n-\n-#[test]\n-fn test_meta_extended_key_value_attributes() {\n-    parse_macro(\n-        r#\"\n-macro_rules! foo {\n-    (#[$i:meta]) => (\n-        #[$ i]\n-        fn bar() {}\n-    )\n-}\n-\"#,\n-    )\n-    .assert_expand_items(\n-        r#\"foo! { #[doc = concat!(\"The `\", \"bla\", \"` lang item.\")] }\"#,\n-        r#\"# [doc = concat ! (\"The `\" , \"bla\" , \"` lang item.\")] fn bar () {}\"#,\n-    );\n-}\n-\n-#[test]\n-fn test_meta_doc_comments_non_latin() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($(#[$ i:meta])+) => (\n-                $(#[$ i])+\n-                fn bar() {}\n-            )\n-        }\n-\"#,\n-    ).\n-    assert_expand_items(\n-        r#\"foo! {\n-            /// \u9326\u745f\u7121\u7aef\u4e94\u5341\u5f26\uff0c\u4e00\u5f26\u4e00\u67f1\u601d\u83ef\u5e74\u3002\n-            /**\n-                \u838a\u751f\u66c9\u5922\u8ff7\u8774\u8776\uff0c\u671b\u5e1d\u6625\u5fc3\u8a17\u675c\u9d51\u3002\n-            */\n-        }\"#,\n-        \"# [doc = \\\" \u9326\u745f\u7121\u7aef\u4e94\u5341\u5f26\uff0c\u4e00\u5f26\u4e00\u67f1\u601d\u83ef\u5e74\u3002\\\"] # [doc = \\\"\\\\n                \u838a\u751f\u66c9\u5922\u8ff7\u8774\u8776\uff0c\u671b\u5e1d\u6625\u5fc3\u8a17\u675c\u9d51\u3002\\\\n            \\\"] fn bar () {}\",\n-    );\n-}\n-\n-#[test]\n-fn test_meta_doc_comments_escaped_characters() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($(#[$ i:meta])+) => (\n-                $(#[$ i])+\n-                fn bar() {}\n-            )\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\n-        r#\"foo! {\n-            /// \\ \" '\n-        }\"#,\n-        r#\"# [doc = \" \\\\ \\\" \\'\"] fn bar () {}\"#,\n-    );\n-}\n-\n-#[test]\n-fn test_tt_block() {\n-    parse_macro(\n-        r#\"\n-            macro_rules! foo {\n-                ($ i:tt) => { fn foo() $ i }\n-            }\n-    \"#,\n-    )\n-    .assert_expand_items(r#\"foo! { { 1; } }\"#, r#\"fn foo () {1 ;}\"#);\n-}\n-\n-#[test]\n-fn test_tt_group() {\n-    parse_macro(\n-        r#\"\n-            macro_rules! foo {\n-                 ($($ i:tt)*) => { $($ i)* }\n-            }\n-    \"#,\n-    )\n-    .assert_expand_items(r#\"foo! { fn foo() {} }\"#, r#\"fn foo () {}\"#);\n-}\n-\n-#[test]\n-fn test_tt_composite() {\n-    parse_macro(\n-        r#\"\n-            macro_rules! foo {\n-                 ($i:tt) => { 0 }\n-            }\n-    \"#,\n-    )\n-    .assert_expand_items(r#\"foo! { => }\"#, r#\"0\"#);\n-}\n-\n-#[test]\n-fn test_tt_composite2() {\n-    let node = parse_macro(\n-        r#\"\n-            macro_rules! foo {\n-                ($($tt:tt)*) => { abs!(=> $($tt)*) }\n-            }\n-    \"#,\n-    )\n-    .expand_items(r#\"foo!{#}\"#);\n-\n-    let res = format!(\"{:#?}\", &node);\n-    assert_eq_text!(\n-        r###\"MACRO_ITEMS@0..10\n-  MACRO_CALL@0..10\n-    PATH@0..3\n-      PATH_SEGMENT@0..3\n-        NAME_REF@0..3\n-          IDENT@0..3 \"abs\"\n-    BANG@3..4 \"!\"\n-    TOKEN_TREE@4..10\n-      L_PAREN@4..5 \"(\"\n-      EQ@5..6 \"=\"\n-      R_ANGLE@6..7 \">\"\n-      WHITESPACE@7..8 \" \"\n-      POUND@8..9 \"#\"\n-      R_PAREN@9..10 \")\"\"###,\n-        res.trim()\n-    );\n-}\n-\n-#[test]\n-fn test_tt_with_composite_without_space() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ op:tt, $j:path) => (\n-                0\n-            )\n-        }\n-\"#,\n-    )\n-    // Test macro input without any spaces\n-    // See https://github.com/rust-analyzer/rust-analyzer/issues/6692\n-    .assert_expand_items(\"foo!(==,Foo::Bool)\", \"0\");\n-}\n-\n #[test]\n fn test_underscore() {\n     parse_macro("}]}