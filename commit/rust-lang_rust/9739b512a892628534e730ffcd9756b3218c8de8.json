{"sha": "9739b512a892628534e730ffcd9756b3218c8de8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MzliNTEyYTg5MjYyODUzNGU3MzBmZmNkOTc1NmIzMjE4YzhkZTg=", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-06-29T08:29:37Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-06-29T08:29:37Z"}, "message": "stabilize some const_checked_int_methods", "tree": {"sha": "8f7c43e8ab961635757a8866cb4c4a0e8648e5f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f7c43e8ab961635757a8866cb4c4a0e8648e5f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9739b512a892628534e730ffcd9756b3218c8de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9739b512a892628534e730ffcd9756b3218c8de8", "html_url": "https://github.com/rust-lang/rust/commit/9739b512a892628534e730ffcd9756b3218c8de8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9739b512a892628534e730ffcd9756b3218c8de8/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dfe144bdd4413ac55cbb2ad2edfb1daa0c4bf15", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dfe144bdd4413ac55cbb2ad2edfb1daa0c4bf15", "html_url": "https://github.com/rust-lang/rust/commit/6dfe144bdd4413ac55cbb2ad2edfb1daa0c4bf15"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "4647d7421b1dc1521b4615a06b736e404ebccdf7", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9739b512a892628534e730ffcd9756b3218c8de8/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9739b512a892628534e730ffcd9756b3218c8de8/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9739b512a892628534e730ffcd9756b3218c8de8", "patch": "@@ -740,9 +740,10 @@ assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n@@ -782,9 +783,10 @@ assert_eq!((\", stringify!($SelfT), \"::MIN + 2).checked_sub(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n@@ -824,9 +826,10 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n@@ -980,7 +983,8 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_neg(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n@@ -1002,9 +1006,10 @@ assert_eq!(0x1\", stringify!($SelfT), \".checked_shl(129), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n@@ -1026,9 +1031,10 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(128), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n@@ -1051,7 +1057,8 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_abs(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_abs(self) -> Option<Self> {\n                 if self.is_negative() {\n@@ -2976,9 +2983,10 @@ Basic usage:\n assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n@@ -3016,9 +3024,10 @@ Basic usage:\n assert_eq!(0\", stringify!($SelfT), \".checked_sub(1), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n@@ -3056,9 +3065,10 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n@@ -3206,7 +3216,8 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".checked_neg(), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n@@ -3227,9 +3238,10 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shl(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n@@ -3250,9 +3262,10 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);"}]}