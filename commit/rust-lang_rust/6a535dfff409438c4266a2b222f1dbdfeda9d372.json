{"sha": "6a535dfff409438c4266a2b222f1dbdfeda9d372", "node_id": "C_kwDOAAsO6NoAKDZhNTM1ZGZmZjQwOTQzOGM0MjY2YTJiMjIyZjFkYmRmZWRhOWQzNzI", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-13T18:21:23Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-03-16T10:21:50Z"}, "message": "Also inline integer literals into format_args!().", "tree": {"sha": "5cdafde08b1af309512aae0a9b8842ecff2559f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cdafde08b1af309512aae0a9b8842ecff2559f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a535dfff409438c4266a2b222f1dbdfeda9d372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a535dfff409438c4266a2b222f1dbdfeda9d372", "html_url": "https://github.com/rust-lang/rust/commit/6a535dfff409438c4266a2b222f1dbdfeda9d372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a535dfff409438c4266a2b222f1dbdfeda9d372/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df8c14ca61833335fa6229b4d828fcc481a57432", "url": "https://api.github.com/repos/rust-lang/rust/commits/df8c14ca61833335fa6229b4d828fcc481a57432", "html_url": "https://github.com/rust-lang/rust/commit/df8c14ca61833335fa6229b4d828fcc481a57432"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "8a8318312d2ea866ee5a23c111f4a95a1cca347a", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6a535dfff409438c4266a2b222f1dbdfeda9d372/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a535dfff409438c4266a2b222f1dbdfeda9d372/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=6a535dfff409438c4266a2b222f1dbdfeda9d372", "patch": "@@ -97,30 +97,43 @@ fn flatten_format_args(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n ///\n /// Turns\n ///\n-/// `format_args!(\"Hello, {}! {}\", \"World\", 123)`\n+/// `format_args!(\"Hello, {}! {} {}\", \"World\", 123, x)`\n ///\n /// into\n ///\n-/// `format_args!(\"Hello, World! {}\", 123)`.\n+/// `format_args!(\"Hello, World! 123 {}\", x)`.\n fn inline_literals(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n     let mut was_inlined = vec![false; fmt.arguments.all_args().len()];\n     let mut inlined_anything = false;\n \n     for i in 0..fmt.template.len() {\n         let FormatArgsPiece::Placeholder(placeholder) = &fmt.template[i] else { continue };\n         let Ok(arg_index) = placeholder.argument.index else { continue };\n+\n+        let mut literal = None;\n+\n         if let FormatTrait::Display = placeholder.format_trait\n             && placeholder.format_options == Default::default()\n             && let arg = fmt.arguments.all_args()[arg_index].expr.peel_parens_and_refs()\n             && let ExprKind::Lit(lit) = arg.kind\n-            && let token::LitKind::Str | token::LitKind::StrRaw(_) = lit.kind\n-            && let Ok(LitKind::Str(s, _)) = LitKind::from_token_lit(lit)\n         {\n+            if let token::LitKind::Str | token::LitKind::StrRaw(_) = lit.kind\n+                && let Ok(LitKind::Str(s, _)) = LitKind::from_token_lit(lit)\n+            {\n+                literal = Some(s);\n+            } else if let token::LitKind::Integer = lit.kind\n+                && let Ok(LitKind::Int(n, _)) = LitKind::from_token_lit(lit)\n+            {\n+                literal = Some(Symbol::intern(&n.to_string()));\n+            }\n+        }\n+\n+        if let Some(literal) = literal {\n             // Now we need to mutate the outer FormatArgs.\n             // If this is the first time, this clones the outer FormatArgs.\n             let fmt = fmt.to_mut();\n             // Replace the placeholder with the literal.\n-            fmt.template[i] = FormatArgsPiece::Literal(s);\n+            fmt.template[i] = FormatArgsPiece::Literal(literal);\n             was_inlined[arg_index] = true;\n             inlined_anything = true;\n         }"}]}