{"sha": "8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01", "node_id": "C_kwDOAAsO6NoAKDhhMjgwM2Q5YWVhNTA5OWZjYmIyYjdmN2IzMmNiM2RlNjBhYjllMDE", "commit": {"author": {"name": "Mathew Horner", "email": "mathewhorner456@gmail.com", "date": "2022-09-12T03:40:33Z"}, "committer": {"name": "Mathew Horner", "email": "mathewhorner456@gmail.com", "date": "2022-09-12T03:40:33Z"}, "message": "Allow configuration of annotation location.\n\nPreviously, annotations would only appear above the name of an item (function signature, struct declaration, etc).\n\nNow, rust-analyzer can be configured to show annotations either above the name or above the whole item (including doc comments and attributes).", "tree": {"sha": "5f65449b6ee5ded19c23c995844f2a03a47f7354", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f65449b6ee5ded19c23c995844f2a03a47f7354"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01", "html_url": "https://github.com/rust-lang/rust/commit/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/comments", "author": {"login": "mdx97", "id": 33100798, "node_id": "MDQ6VXNlcjMzMTAwNzk4", "avatar_url": "https://avatars.githubusercontent.com/u/33100798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdx97", "html_url": "https://github.com/mdx97", "followers_url": "https://api.github.com/users/mdx97/followers", "following_url": "https://api.github.com/users/mdx97/following{/other_user}", "gists_url": "https://api.github.com/users/mdx97/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdx97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdx97/subscriptions", "organizations_url": "https://api.github.com/users/mdx97/orgs", "repos_url": "https://api.github.com/users/mdx97/repos", "events_url": "https://api.github.com/users/mdx97/events{/privacy}", "received_events_url": "https://api.github.com/users/mdx97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdx97", "id": 33100798, "node_id": "MDQ6VXNlcjMzMTAwNzk4", "avatar_url": "https://avatars.githubusercontent.com/u/33100798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdx97", "html_url": "https://github.com/mdx97", "followers_url": "https://api.github.com/users/mdx97/followers", "following_url": "https://api.github.com/users/mdx97/following{/other_user}", "gists_url": "https://api.github.com/users/mdx97/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdx97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdx97/subscriptions", "organizations_url": "https://api.github.com/users/mdx97/orgs", "repos_url": "https://api.github.com/users/mdx97/repos", "events_url": "https://api.github.com/users/mdx97/events{/privacy}", "received_events_url": "https://api.github.com/users/mdx97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e9f1204ca01c3e20898d4a67c8b84899d394a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9f1204ca01c3e20898d4a67c8b84899d394a88", "html_url": "https://github.com/rust-lang/rust/commit/2e9f1204ca01c3e20898d4a67c8b84899d394a88"}], "stats": {"total": 151, "additions": 132, "deletions": 19}, "files": [{"sha": "7019658a16721adbab93272ef414e7e5230bdc94", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 82, "deletions": 18, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01", "patch": "@@ -41,6 +41,12 @@ pub struct AnnotationConfig {\n     pub annotate_references: bool,\n     pub annotate_method_references: bool,\n     pub annotate_enum_variant_references: bool,\n+    pub annotation_location: AnnotationLocation,\n+}\n+\n+pub enum AnnotationLocation {\n+    AboveName,\n+    AboveWholeItem,\n }\n \n pub(crate) fn annotations(\n@@ -65,10 +71,10 @@ pub(crate) fn annotations(\n     visit_file_defs(&Semantics::new(db), file_id, &mut |def| {\n         let range = match def {\n             Definition::Const(konst) if config.annotate_references => {\n-                konst.source(db).and_then(|node| name_range(db, node, file_id))\n+                konst.source(db).and_then(|node| name_range(db, config, node, file_id))\n             }\n             Definition::Trait(trait_) if config.annotate_references || config.annotate_impls => {\n-                trait_.source(db).and_then(|node| name_range(db, node, file_id))\n+                trait_.source(db).and_then(|node| name_range(db, config, node, file_id))\n             }\n             Definition::Adt(adt) => match adt {\n                 hir::Adt::Enum(enum_) => {\n@@ -77,7 +83,9 @@ pub(crate) fn annotations(\n                             .variants(db)\n                             .into_iter()\n                             .map(|variant| {\n-                                variant.source(db).and_then(|node| name_range(db, node, file_id))\n+                                variant\n+                                    .source(db)\n+                                    .and_then(|node| name_range(db, config, node, file_id))\n                             })\n                             .flatten()\n                             .for_each(|range| {\n@@ -88,14 +96,14 @@ pub(crate) fn annotations(\n                             })\n                     }\n                     if config.annotate_references || config.annotate_impls {\n-                        enum_.source(db).and_then(|node| name_range(db, node, file_id))\n+                        enum_.source(db).and_then(|node| name_range(db, config, node, file_id))\n                     } else {\n                         None\n                     }\n                 }\n                 _ => {\n                     if config.annotate_references || config.annotate_impls {\n-                        adt.source(db).and_then(|node| name_range(db, node, file_id))\n+                        adt.source(db).and_then(|node| name_range(db, config, node, file_id))\n                     } else {\n                         None\n                     }\n@@ -113,6 +121,7 @@ pub(crate) fn annotations(\n             annotations\n                 .push(Annotation { range, kind: AnnotationKind::HasImpls { file_id, data: None } });\n         }\n+\n         if config.annotate_references {\n             annotations.push(Annotation {\n                 range,\n@@ -122,12 +131,18 @@ pub(crate) fn annotations(\n \n         fn name_range<T: HasName>(\n             db: &RootDatabase,\n+            config: &AnnotationConfig,\n             node: InFile<T>,\n             source_file_id: FileId,\n         ) -> Option<TextRange> {\n             if let Some(InFile { file_id, value }) = node.original_ast_node(db) {\n                 if file_id == source_file_id.into() {\n-                    return value.name().map(|it| it.syntax().text_range());\n+                    return match config.annotation_location {\n+                        AnnotationLocation::AboveName => {\n+                            value.name().map(|name| name.syntax().text_range())\n+                        }\n+                        AnnotationLocation::AboveWholeItem => Some(value.syntax().text_range()),\n+                    };\n                 }\n             }\n             None\n@@ -188,21 +203,23 @@ mod tests {\n \n     use crate::{fixture, Annotation, AnnotationConfig};\n \n-    fn check(ra_fixture: &str, expect: Expect) {\n+    use super::AnnotationLocation;\n+\n+    const DEFAULT_CONFIG: AnnotationConfig = AnnotationConfig {\n+        binary_target: true,\n+        annotate_runnables: true,\n+        annotate_impls: true,\n+        annotate_references: true,\n+        annotate_method_references: true,\n+        annotate_enum_variant_references: true,\n+        annotation_location: AnnotationLocation::AboveName,\n+    };\n+\n+    fn check(ra_fixture: &str, expect: Expect, config: &AnnotationConfig) {\n         let (analysis, file_id) = fixture::file(ra_fixture);\n \n         let annotations: Vec<Annotation> = analysis\n-            .annotations(\n-                &AnnotationConfig {\n-                    binary_target: true,\n-                    annotate_runnables: true,\n-                    annotate_impls: true,\n-                    annotate_references: true,\n-                    annotate_method_references: true,\n-                    annotate_enum_variant_references: true,\n-                },\n-                file_id,\n-            )\n+            .annotations(config, file_id)\n             .unwrap()\n             .into_iter()\n             .map(|annotation| analysis.resolve_annotation(annotation).unwrap())\n@@ -286,6 +303,7 @@ fn main() {\n                     },\n                 ]\n             \"#]],\n+            &DEFAULT_CONFIG,\n         );\n     }\n \n@@ -362,6 +380,7 @@ fn main() {\n                     },\n                 ]\n             \"#]],\n+            &DEFAULT_CONFIG,\n         );\n     }\n \n@@ -497,6 +516,7 @@ fn main() {\n                     },\n                 ]\n             \"#]],\n+            &DEFAULT_CONFIG,\n         );\n     }\n \n@@ -540,6 +560,7 @@ fn main() {}\n                     },\n                 ]\n             \"#]],\n+            &DEFAULT_CONFIG,\n         );\n     }\n \n@@ -654,6 +675,7 @@ fn main() {\n                     },\n                 ]\n             \"#]],\n+            &DEFAULT_CONFIG,\n         );\n     }\n \n@@ -750,6 +772,7 @@ mod tests {\n                     },\n                 ]\n             \"#]],\n+            &DEFAULT_CONFIG,\n         );\n     }\n \n@@ -765,6 +788,7 @@ struct Foo;\n             expect![[r#\"\n                 []\n             \"#]],\n+            &DEFAULT_CONFIG,\n         );\n     }\n \n@@ -784,6 +808,46 @@ m!();\n             expect![[r#\"\n                 []\n             \"#]],\n+            &DEFAULT_CONFIG,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_annotations_appear_above_whole_item_when_configured_to_do_so() {\n+        check(\n+            r#\"\n+/// This is a struct named Foo, obviously.\n+#[derive(Clone)]\n+struct Foo;\n+\"#,\n+            expect![[r#\"\n+                [\n+                    Annotation {\n+                        range: 0..71,\n+                        kind: HasImpls {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            data: Some(\n+                                [],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 0..71,\n+                        kind: HasReferences {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            data: None,\n+                        },\n+                    },\n+                ]\n+            \"#]],\n+            &AnnotationConfig {\n+                annotation_location: AnnotationLocation::AboveWholeItem,\n+                ..DEFAULT_CONFIG\n+            },\n         );\n     }\n }"}, {"sha": "c1ef25b592b1be4e2aebc8c3a6b719f7c3c27db3", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01", "patch": "@@ -74,7 +74,7 @@ use syntax::SourceFile;\n use crate::navigation_target::{ToNav, TryToNav};\n \n pub use crate::{\n-    annotations::{Annotation, AnnotationConfig, AnnotationKind},\n+    annotations::{Annotation, AnnotationConfig, AnnotationKind, AnnotationLocation},\n     call_hierarchy::CallItem,\n     expand_macro::ExpandedMacro,\n     file_structure::{StructureNode, StructureNodeKind},"}, {"sha": "6c6ad5f43a8865b059af97e7c4cbdbc9bee3cfb2", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01", "patch": "@@ -307,6 +307,8 @@ config_data! {\n         /// Join lines unwraps trivial blocks.\n         joinLines_unwrapTrivialBlock: bool = \"true\",\n \n+        /// Where to render annotations.\n+        lens_annotationLocation: AnnotationLocation = \"\\\"above_name\\\"\",\n         /// Whether to show `Debug` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n         lens_debug_enable: bool            = \"true\",\n@@ -494,6 +496,25 @@ pub struct LensConfig {\n     pub refs_adt: bool,   // for Struct, Enum, Union and Trait\n     pub refs_trait: bool, // for Struct, Enum, Union and Trait\n     pub enum_variant_refs: bool,\n+\n+    // annotations\n+    pub annotation_location: AnnotationLocation,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+pub enum AnnotationLocation {\n+    AboveName,\n+    AboveWholeItem,\n+}\n+\n+impl From<AnnotationLocation> for ide::AnnotationLocation {\n+    fn from(location: AnnotationLocation) -> Self {\n+        match location {\n+            AnnotationLocation::AboveName => ide::AnnotationLocation::AboveName,\n+            AnnotationLocation::AboveWholeItem => ide::AnnotationLocation::AboveWholeItem,\n+        }\n+    }\n }\n \n impl LensConfig {\n@@ -1185,6 +1206,7 @@ impl Config {\n             refs_trait: self.data.lens_enable && self.data.lens_references_trait_enable,\n             enum_variant_refs: self.data.lens_enable\n                 && self.data.lens_references_enumVariant_enable,\n+            annotation_location: self.data.lens_annotationLocation,\n         }\n     }\n \n@@ -1921,6 +1943,14 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Use server-side file watching\",\n             ],\n         },\n+        \"AnnotationLocation\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\"above_name\", \"above_whole_item\"],\n+            \"enumDescriptions\": [\n+                \"Render annotations above the name of the item.\",\n+                \"Render annotations above the whole item, including documentation comments and attributes.\"\n+            ],\n+        },\n         _ => panic!(\"missing entry for {}: {}\", ty, default),\n     }\n "}, {"sha": "edac9de69aa0c8f6a063c8d18f0b3856791c6ebd", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01", "patch": "@@ -1234,6 +1234,7 @@ pub(crate) fn handle_code_lens(\n             annotate_references: lens_config.refs_adt,\n             annotate_method_references: lens_config.method_refs,\n             annotate_enum_variant_references: lens_config.enum_variant_refs,\n+            annotation_location: lens_config.annotation_location.into(),\n         },\n         file_id,\n     )?;"}, {"sha": "3cd49bc5d8c391e12bb7ad7e7728c4367cc88b4e", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01", "patch": "@@ -451,6 +451,11 @@ Join lines removes trailing commas.\n --\n Join lines unwraps trivial blocks.\n --\n+[[rust-analyzer.lens.annotation.location]]rust-analyzer.lens.annotation.location (default: `above_name`)::\n++\n+--\n+Where to render annotations.\n+--\n [[rust-analyzer.lens.debug.enable]]rust-analyzer.lens.debug.enable (default: `true`)::\n +\n --"}, {"sha": "465d86602153dcb2d3a4b7891d92e69b4883590a", "filename": "editors/code/package.json", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=8a2803d9aea5099fcbb2b7f7b32cb3de60ab9e01", "patch": "@@ -943,6 +943,19 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.lens.annotationLocation\": {\n+                    \"markdownDescription\": \"Where to render annotations.\",\n+                    \"default\": \"above_name\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"above_name\",\n+                        \"above_whole_item\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Render annotations above the name of the item.\",\n+                        \"Render annotations above the whole item, including documentation comments and attributes.\"\n+                    ]\n+                },\n                 \"rust-analyzer.lens.debug.enable\": {\n                     \"markdownDescription\": \"Whether to show `Debug` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": true,"}]}