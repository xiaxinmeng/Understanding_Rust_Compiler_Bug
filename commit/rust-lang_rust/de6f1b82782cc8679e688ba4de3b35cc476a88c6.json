{"sha": "de6f1b82782cc8679e688ba4de3b35cc476a88c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNmYxYjgyNzgyY2M4Njc5ZTY4OGJhNGRlM2IzNWNjNDc2YTg4YzY=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-02-14T07:51:38Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-02-23T19:03:44Z"}, "message": "Do not consider using a semicolon inside of a different-crate macro\n\nFixes #81943", "tree": {"sha": "ba31e5d8b0b75cc63faa634d85a432654a6b27bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba31e5d8b0b75cc63faa634d85a432654a6b27bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de6f1b82782cc8679e688ba4de3b35cc476a88c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de6f1b82782cc8679e688ba4de3b35cc476a88c6", "html_url": "https://github.com/rust-lang/rust/commit/de6f1b82782cc8679e688ba4de3b35cc476a88c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de6f1b82782cc8679e688ba4de3b35cc476a88c6/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019610754363d1d92a8d0f364d2c0909d6f53dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/019610754363d1d92a8d0f364d2c0909d6f53dfd", "html_url": "https://github.com/rust-lang/rust/commit/019610754363d1d92a8d0f364d2c0909d6f53dfd"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "792836f666555b5d5c095a65e01d8647c008d13d", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de6f1b82782cc8679e688ba4de3b35cc476a88c6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6f1b82782cc8679e688ba4de3b35cc476a88c6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=de6f1b82782cc8679e688ba4de3b35cc476a88c6", "patch": "@@ -42,6 +42,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{Coercion, InferOk, InferResult};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n@@ -1448,7 +1449,12 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 expected.is_unit(),\n                 pointing_at_return_type,\n             ) {\n-                if cond_expr.span.desugaring_kind().is_none() {\n+                // If the block is from an external macro, then do not suggest\n+                // adding a semicolon, because there's nowhere to put it.\n+                // See issue #81943.\n+                if cond_expr.span.desugaring_kind().is_none()\n+                    && !in_external_macro(fcx.tcx.sess, cond_expr.span)\n+                {\n                     err.span_label(cond_expr.span, \"expected this to be `()`\");\n                     if expr.can_have_side_effects() {\n                         fcx.suggest_semicolon_at_end(cond_expr.span, &mut err);"}, {"sha": "1f50ad5779e0f187193fe70497cdc79661efb5ea", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de6f1b82782cc8679e688ba4de3b35cc476a88c6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6f1b82782cc8679e688ba4de3b35cc476a88c6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=de6f1b82782cc8679e688ba4de3b35cc476a88c6", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, ItemKind, Node};\n use rustc_infer::infer;\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::kw;\n \n@@ -44,7 +45,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         blk_id: hir::HirId,\n     ) -> bool {\n         let expr = expr.peel_drop_temps();\n-        if expr.can_have_side_effects() {\n+        // If the expression is from an external macro, then do not suggest\n+        // adding a semicolon, because there's nowhere to put it.\n+        // See issue #81943.\n+        if expr.can_have_side_effects() && !in_external_macro(self.tcx.sess, cause_span) {\n             self.suggest_missing_semicolon(err, expr, expected, cause_span);\n         }\n         let mut pointing_at_return_type = false;"}, {"sha": "521c54f8996703e13b90cc4586ac0aad154f6cb6", "filename": "src/test/ui/typeck/auxiliary/issue-81943-lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de6f1b82782cc8679e688ba4de3b35cc476a88c6/src%2Ftest%2Fui%2Ftypeck%2Fauxiliary%2Fissue-81943-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6f1b82782cc8679e688ba4de3b35cc476a88c6/src%2Ftest%2Fui%2Ftypeck%2Fauxiliary%2Fissue-81943-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fauxiliary%2Fissue-81943-lib.rs?ref=de6f1b82782cc8679e688ba4de3b35cc476a88c6", "patch": "@@ -0,0 +1,7 @@\n+pub fn g(t: i32) -> i32 { t }\n+// This function imitates `dbg!` so that future changes\n+// to its macro definition won't make this test a dud.\n+#[macro_export]\n+macro_rules! d {\n+  ($e:expr) => { match $e { x => { $crate::g(x) } } }\n+}"}, {"sha": "18f5970a350a2f8cb4d8e32bb0e896383a02d5d3", "filename": "src/test/ui/typeck/issue-81943.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/de6f1b82782cc8679e688ba4de3b35cc476a88c6/src%2Ftest%2Fui%2Ftypeck%2Fissue-81943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6f1b82782cc8679e688ba4de3b35cc476a88c6/src%2Ftest%2Fui%2Ftypeck%2Fissue-81943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81943.rs?ref=de6f1b82782cc8679e688ba4de3b35cc476a88c6", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:issue-81943-lib.rs\n+extern crate issue_81943_lib as lib;\n+\n+fn f<F: Fn(i32)>(f: F) { f(0); }\n+fn g(t: i32) -> i32 { t }\n+fn main() {\n+  f(|x| lib::d!(x)); //~ERROR\n+  f(|x| match x { tmp => { g(tmp) } }); //~ERROR\n+  macro_rules! d {\n+    ($e:expr) => { match $e { x => { g(x) } } } //~ERROR\n+  }\n+  f(|x| d!(x));\n+}"}, {"sha": "a30facfeb6daa8ee35a1fc57a4ce65880f04971c", "filename": "src/test/ui/typeck/issue-81943.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/de6f1b82782cc8679e688ba4de3b35cc476a88c6/src%2Ftest%2Fui%2Ftypeck%2Fissue-81943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de6f1b82782cc8679e688ba4de3b35cc476a88c6/src%2Ftest%2Fui%2Ftypeck%2Fissue-81943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81943.stderr?ref=de6f1b82782cc8679e688ba4de3b35cc476a88c6", "patch": "@@ -0,0 +1,51 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-81943.rs:7:9\n+   |\n+LL |   f(|x| lib::d!(x));\n+   |         ^^^^^^^^^^ expected `()`, found `i32`\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-81943.rs:8:28\n+   |\n+LL |   f(|x| match x { tmp => { g(tmp) } });\n+   |         -------------------^^^^^^----\n+   |         |                  |\n+   |         |                  expected `()`, found `i32`\n+   |         expected this to be `()`\n+   |\n+help: consider using a semicolon here\n+   |\n+LL |   f(|x| match x { tmp => { g(tmp); } });\n+   |                                  ^\n+help: consider using a semicolon here\n+   |\n+LL |   f(|x| match x { tmp => { g(tmp) } };);\n+   |                                      ^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-81943.rs:10:38\n+   |\n+LL |     ($e:expr) => { match $e { x => { g(x) } } }\n+   |                    ------------------^^^^----\n+   |                    |                 |\n+   |                    |                 expected `()`, found `i32`\n+   |                    expected this to be `()`\n+LL |   }\n+LL |   f(|x| d!(x));\n+   |         ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider using a semicolon here\n+   |\n+LL |     ($e:expr) => { match $e { x => { g(x); } } }\n+   |                                          ^\n+help: consider using a semicolon here\n+   |\n+LL |     ($e:expr) => { match $e { x => { g(x) } }; }\n+   |                                              ^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}