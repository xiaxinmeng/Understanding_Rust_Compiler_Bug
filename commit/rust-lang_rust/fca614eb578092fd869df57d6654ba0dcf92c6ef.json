{"sha": "fca614eb578092fd869df57d6654ba0dcf92c6ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYTYxNGViNTc4MDkyZmQ4NjlkZjU3ZDY2NTRiYTBkY2Y5MmM2ZWY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-01-24T20:56:08Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-02T12:20:57Z"}, "message": "Add tests for generator resume arguments", "tree": {"sha": "14e31b65e464f1df1451605b9cabbb8051b6cfb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e31b65e464f1df1451605b9cabbb8051b6cfb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fca614eb578092fd869df57d6654ba0dcf92c6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fca614eb578092fd869df57d6654ba0dcf92c6ef", "html_url": "https://github.com/rust-lang/rust/commit/fca614eb578092fd869df57d6654ba0dcf92c6ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fca614eb578092fd869df57d6654ba0dcf92c6ef/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b2059b2572cff9974e6820791c8ab57b6c50234", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2059b2572cff9974e6820791c8ab57b6c50234", "html_url": "https://github.com/rust-lang/rust/commit/5b2059b2572cff9974e6820791c8ab57b6c50234"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "0606ea71cdf372a84ef2f504543068146144f2a8", "filename": "src/test/ui/generator/retain-resume-ref.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fca614eb578092fd869df57d6654ba0dcf92c6ef/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca614eb578092fd869df57d6654ba0dcf92c6ef/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.rs?ref=fca614eb578092fd869df57d6654ba0dcf92c6ef", "patch": "@@ -0,0 +1,25 @@\n+//! This test ensures that a mutable reference cannot be passed as a resume argument twice.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::marker::Unpin;\n+use std::ops::{\n+    Generator,\n+    GeneratorState::{self, *},\n+};\n+use std::pin::Pin;\n+\n+fn main() {\n+    let mut thing = String::from(\"hello\");\n+\n+    let mut gen = |r| {\n+        if false {\n+            yield r;\n+        }\n+    };\n+\n+    let mut gen = Pin::new(&mut gen);\n+    gen.as_mut().resume(&mut thing);\n+    gen.as_mut().resume(&mut thing);\n+    //~^ cannot borrow `thing` as mutable more than once at a time\n+}"}, {"sha": "e33310d12d9ef762c7bf9ba2f02fe3fa5d371fe0", "filename": "src/test/ui/generator/retain-resume-ref.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fca614eb578092fd869df57d6654ba0dcf92c6ef/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca614eb578092fd869df57d6654ba0dcf92c6ef/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr?ref=fca614eb578092fd869df57d6654ba0dcf92c6ef", "patch": "@@ -0,0 +1,13 @@\n+error[E0499]: cannot borrow `thing` as mutable more than once at a time\n+  --> $DIR/retain-resume-ref.rs:23:25\n+   |\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                         ---------- first mutable borrow occurs here\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                  ------ ^^^^^^^^^^ second mutable borrow occurs here\n+   |                  |\n+   |                  first borrow later used by call\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "32f3ee32d77b9d96eb1320eca4ab4edce2c5129c", "filename": "src/test/ui/generator/smoke-resume-args.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/fca614eb578092fd869df57d6654ba0dcf92c6ef/src%2Ftest%2Fui%2Fgenerator%2Fsmoke-resume-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca614eb578092fd869df57d6654ba0dcf92c6ef/src%2Ftest%2Fui%2Fgenerator%2Fsmoke-resume-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsmoke-resume-args.rs?ref=fca614eb578092fd869df57d6654ba0dcf92c6ef", "patch": "@@ -0,0 +1,97 @@\n+// run-pass\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::fmt::Debug;\n+use std::marker::Unpin;\n+use std::ops::{\n+    Generator,\n+    GeneratorState::{self, *},\n+};\n+use std::pin::Pin;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+fn drain<G: Generator<R, Yield = Y> + Unpin, R, Y>(\n+    gen: &mut G,\n+    inout: Vec<(R, GeneratorState<Y, G::Return>)>,\n+) where\n+    Y: Debug + PartialEq,\n+    G::Return: Debug + PartialEq,\n+{\n+    let mut gen = Pin::new(gen);\n+\n+    for (input, out) in inout {\n+        assert_eq!(gen.as_mut().resume(input), out);\n+    }\n+}\n+\n+static DROPS: AtomicUsize = AtomicUsize::new(0);\n+\n+#[derive(Debug, PartialEq)]\n+struct DropMe;\n+\n+impl Drop for DropMe {\n+    fn drop(&mut self) {\n+        DROPS.fetch_add(1, Ordering::SeqCst);\n+    }\n+}\n+\n+fn expect_drops<T>(expected_drops: usize, f: impl FnOnce() -> T) -> T {\n+    DROPS.store(0, Ordering::SeqCst);\n+\n+    let res = f();\n+\n+    let actual_drops = DROPS.load(Ordering::SeqCst);\n+    assert_eq!(actual_drops, expected_drops);\n+    res\n+}\n+\n+fn main() {\n+    drain(\n+        &mut |mut b| {\n+            while b != 0 {\n+                b = yield (b + 1);\n+            }\n+            -1\n+        },\n+        vec![(1, Yielded(2)), (-45, Yielded(-44)), (500, Yielded(501)), (0, Complete(-1))],\n+    );\n+\n+    expect_drops(2, || drain(&mut |a| yield a, vec![(DropMe, Yielded(DropMe))]));\n+\n+    expect_drops(6, || {\n+        drain(\n+            &mut |a| yield yield a,\n+            vec![(DropMe, Yielded(DropMe)), (DropMe, Yielded(DropMe)), (DropMe, Complete(DropMe))],\n+        )\n+    });\n+\n+    #[allow(unreachable_code)]\n+    expect_drops(2, || drain(&mut |a| yield return a, vec![(DropMe, Complete(DropMe))]));\n+\n+    expect_drops(2, || {\n+        drain(\n+            &mut |a: DropMe| {\n+                if false { yield () } else { a }\n+            },\n+            vec![(DropMe, Complete(DropMe))],\n+        )\n+    });\n+\n+    expect_drops(4, || {\n+        drain(\n+            #[allow(unused_assignments, unused_variables)]\n+            &mut |mut a: DropMe| {\n+                a = yield;\n+                a = yield;\n+                a = yield;\n+            },\n+            vec![\n+                (DropMe, Yielded(())),\n+                (DropMe, Yielded(())),\n+                (DropMe, Yielded(())),\n+                (DropMe, Complete(())),\n+            ],\n+        )\n+    });\n+}"}]}