{"sha": "648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0OGI2MzRlMjFhN2Q4NTQxZDg0ZmM0NTQ3MDBkNWNiN2ZkN2YzZjQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-04T17:57:12Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-04T17:57:12Z"}, "message": "Rustup to rustc 1.45.0-nightly (56daaf669 2020-06-03)", "tree": {"sha": "394865cde66ec104496f1155f8597b898a6c7b9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/394865cde66ec104496f1155f8597b898a6c7b9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "html_url": "https://github.com/rust-lang/rust/commit/648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e70c51f60abc544d9a325c77474190f1719e560", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e70c51f60abc544d9a325c77474190f1719e560", "html_url": "https://github.com/rust-lang/rust/commit/1e70c51f60abc544d9a325c77474190f1719e560"}], "stats": {"total": 67, "additions": 35, "deletions": 32}, "files": [{"sha": "d7c331de73444d3445364c1fc498f9760aa45ffe", "filename": "build_sysroot/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/build_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/build_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.lock?ref=648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "patch": "@@ -67,9 +67,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.28\"\n+version = \"0.1.32\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"439a6fab343b1dab347823537734a5cd4ae6ae2000b465ab886f64cdb723bd14\"\n+checksum = \"7bc4ac2c824d2bfc612cba57708198547e9a26943af0632aff033e0693074d5c\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "2732c6902b1ceb2e9c5ecae60d08c4cc26820da2", "filename": "example/mini_core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "patch": "@@ -401,7 +401,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n \n #[lang = \"panic\"]\n #[track_caller]\n-pub fn panic(msg: &str) -> ! {\n+pub fn panic(_msg: &str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\n\\0\" as *const str as *const u8);\n         intrinsics::abort();"}, {"sha": "82014f594d23bb043504b751aae4da759f88c548", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "patch": "@@ -414,10 +414,10 @@ pub enum E2<X> {\n \n fn check_niche_behavior () {\n     if let E1::V2 { .. } = (E1::V1 { f: true }) {\n-        unsafe { intrinsics::abort(); }\n+        intrinsics::abort();\n     }\n \n     if let E2::V1 { .. } = E2::V3::<Infallible> {\n-        unsafe { intrinsics::abort(); }\n+        intrinsics::abort();\n     }\n }"}, {"sha": "95bcad2cd173edc5eb963ef39b816086436759a3", "filename": "example/mod_bench.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/example%2Fmod_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/example%2Fmod_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmod_bench.rs?ref=648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "patch": "@@ -6,9 +6,7 @@ extern {}\n \n #[panic_handler]\n fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n-    unsafe {\n-        core::intrinsics::abort();\n-    }\n+    core::intrinsics::abort();\n }\n \n #[lang=\"eh_personality\"]\n@@ -32,6 +30,6 @@ fn main(_argc: isize, _argv: *const *const u8) -> isize {\n #[inline(never)]\n fn black_box(i: u32) {\n     if i != 1 {\n-        unsafe { core::intrinsics::abort(); }\n+        core::intrinsics::abort();\n     }\n }"}, {"sha": "039471e8c72711468d14c46b7fafb44eab0d6e01", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "patch": "@@ -1 +1 @@\n-nightly-2020-05-25\n+nightly-2020-06-04"}, {"sha": "f6ffc372ab5a4d103250fa49a063725d29f3bbca", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "patch": "@@ -309,6 +309,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                 operands,\n                 options: _,\n                 destination,\n+                line_spans: _,\n             } => {\n                 match template {\n                     &[] => {\n@@ -396,6 +397,10 @@ fn trans_stmt<'tcx>(\n                     let place = trans_place(fx, *place);\n                     place.write_place_ref(fx, lval);\n                 }\n+                Rvalue::ThreadLocalRef(def_id) => {\n+                    let val = crate::constant::codegen_tls_ref(fx, *def_id, lval.layout());\n+                    lval.write_cvalue(fx, val);\n+                }\n                 Rvalue::BinaryOp(bin_op, lhs, rhs) => {\n                     let lhs = trans_operand(fx, lhs);\n                     let rhs = trans_operand(fx, rhs);\n@@ -708,7 +713,7 @@ pub(crate) fn trans_place<'tcx>(\n     let mut cplace = fx.get_local_place(place.local);\n \n     for elem in place.projection {\n-        match *elem {\n+        match elem {\n             PlaceElem::Deref => {\n                 cplace = cplace.place_deref(fx);\n             }"}, {"sha": "84981c72fc0ce4f07419c7e0a7b752e1f82192d1", "filename": "src/constant.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty::{Const, ConstKind};\n use rustc_target::abi::Align;\n use rustc_data_structures::fx::FxHashSet;\n \n-use cranelift_codegen::ir::GlobalValue;\n+use cranelift_codegen::ir::GlobalValueData;\n use cranelift_module::*;\n \n use crate::prelude::*;\n@@ -38,6 +38,20 @@ pub(crate) fn codegen_static(constants_cx: &mut ConstantCx, def_id: DefId) {\n     constants_cx.todo.push(TodoItem::Static(def_id));\n }\n \n+pub(crate) fn codegen_tls_ref<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    def_id: DefId,\n+    layout: TyAndLayout<'tcx>,\n+) -> CValue<'tcx> {\n+    let linkage = crate::linkage::get_static_ref_linkage(fx.tcx, def_id);\n+    let data_id = data_id_for_static(fx.tcx, fx.module, def_id, linkage);\n+    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+    #[cfg(debug_assertions)]\n+    fx.add_comment(local_data_id, format!(\"tls {:?}\", def_id));\n+    let tls_ptr = fx.bcx.ins().tls_value(fx.pointer_type, local_data_id);\n+    CValue::by_val(tls_ptr, layout)\n+}\n+\n fn codegen_static_ref<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     def_id: DefId,\n@@ -48,7 +62,10 @@ fn codegen_static_ref<'tcx>(\n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n     fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n-    cplace_for_dataid(fx, layout, local_data_id)\n+    let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);\n+    assert!(!layout.is_unsized(), \"unsized statics aren't supported\");\n+    assert!(matches!(fx.bcx.func.global_values[local_data_id], GlobalValueData::Symbol { tls: false, ..}), \"tls static referenced without Rvalue::ThreadLocalRef\");\n+    CPlace::for_ptr(crate::pointer::Pointer::new(global_ptr), layout)\n }\n \n pub(crate) fn trans_constant<'tcx>(\n@@ -245,16 +262,6 @@ fn data_id_for_static(\n     data_id\n }\n \n-fn cplace_for_dataid<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    layout: TyAndLayout<'tcx>,\n-    local_data_id: GlobalValue,\n-) -> CPlace<'tcx> {\n-    let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);\n-    assert!(!layout.is_unsized(), \"unsized statics aren't supported\");\n-    CPlace::for_ptr(crate::pointer::Pointer::new(global_ptr), layout)\n-}\n-\n fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mut ConstantCx) {\n     while let Some(todo_item) = cx.todo.pop() {\n         let (data_id, alloc) = match todo_item {"}, {"sha": "31431404cc3f7eb3fccf1bcd9a4f3b7b452d14a0", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "patch": "@@ -59,7 +59,7 @@ fn line_program_add_file(\n ) -> FileId {\n     match &file.name {\n         FileName::Real(path) => {\n-            let (dir_path, file_name) = split_path_dir_and_file(path);\n+            let (dir_path, file_name) = split_path_dir_and_file(path.stable_name());\n             let dir_name = osstr_as_utf8_bytes(dir_path.as_os_str());\n             let file_name = osstr_as_utf8_bytes(file_name);\n "}, {"sha": "d13067bb3fff4c94f5c4c9a97721d92139eea54a", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648b634e21a7d8541d84fc454700d5cb7fd7f3f4/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=648b634e21a7d8541d84fc454700d5cb7fd7f3f4", "patch": "@@ -4,8 +4,6 @@ mod unwind;\n \n use crate::prelude::*;\n \n-use rustc_span::FileName;\n-\n use cranelift_codegen::ir::{StackSlots, ValueLabel, ValueLoc};\n use cranelift_codegen::isa::TargetIsa;\n use cranelift_codegen::ValueLocRange;\n@@ -66,12 +64,7 @@ impl<'tcx> DebugContext<'tcx> {\n         let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();\n-                let info = tcx.sess\n-                    .source_map()\n-                    .get_source_file(&FileName::Real(path))\n-                    .map(|f| f.src_hash)\n-                    .and_then(line_info::make_file_info);\n-                (name, info)\n+                (name, None)\n             },\n             None => (tcx.crate_name(LOCAL_CRATE).to_string(), None),\n         };"}]}