{"sha": "7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNjY3NTJhNjE2NGRkOGUwMDRmMzJjMWE0MGYwZTA0YTYxYmNiYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-07T09:57:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-07T09:57:27Z"}, "message": "Auto merge of #53830 - davidtwco:issue-53228, r=nikomatsakis\n\nAdd help message for missing IndexMut impl with NLL\n\nFixes #53228.\n\nr? @nikomatsakis", "tree": {"sha": "54d88b00f5aa1fffe0d90bfb81e42bf91c30e587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54d88b00f5aa1fffe0d90bfb81e42bf91c30e587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "html_url": "https://github.com/rust-lang/rust/commit/7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ae11a9c22bc3d1f36d1e964cbfc4522a0e9351e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae11a9c22bc3d1f36d1e964cbfc4522a0e9351e", "html_url": "https://github.com/rust-lang/rust/commit/2ae11a9c22bc3d1f36d1e964cbfc4522a0e9351e"}, {"sha": "08a4a376782f31b73f21646a5fcde5c52b6c8c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a4a376782f31b73f21646a5fcde5c52b6c8c37", "html_url": "https://github.com/rust-lang/rust/commit/08a4a376782f31b73f21646a5fcde5c52b6c8c37"}], "stats": {"total": 149, "additions": 137, "deletions": 12}, "files": [{"sha": "272f5024f9f1a5293bbc94c77b44f73b6388fe7f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "patch": "@@ -1591,7 +1591,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         if let Some(&init_index) = first_init_index {\n             // And, if so, report an error.\n             let init = &self.move_data.inits[init_index];\n-            self.report_illegal_reassignment(context, place_span, init.span, place_span.0);\n+            let span = init.span(&self.mir);\n+            self.report_illegal_reassignment(\n+                context, place_span, span, place_span.0\n+            );\n         }\n     }\n "}, {"sha": "78ab772d9ad5b2f3ed5fd9cbd2cbf26d62f53c50", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "patch": "@@ -10,18 +10,20 @@\n \n use rustc::hir;\n use rustc::hir::Node;\n-use rustc::mir::{self, BindingForm, ClearCrossCrate, Local, Location, Mir};\n-use rustc::mir::{Mutability, Place, Projection, ProjectionElem, Static};\n-use rustc::ty::{self, TyCtxt};\n+use rustc::mir::{self, BindingForm, Constant, ClearCrossCrate, Local, Location, Mir};\n+use rustc::mir::{Mutability, Operand, Place, Projection, ProjectionElem, Static, Terminator};\n+use rustc::mir::TerminatorKind;\n+use rustc::ty::{self, Const, DefIdTree, TyS, TyKind, TyCtxt};\n use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n \n+use dataflow::move_paths::InitLocation;\n use borrow_check::MirBorrowckCtxt;\n use util::borrowck_errors::{BorrowckErrors, Origin};\n use util::collect_writes::FindAssignments;\n use util::suggest_ref_mut;\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(super) enum AccessKind {\n     MutableBorrow,\n     Mutate,\n@@ -393,6 +395,63 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 );\n             }\n \n+            Place::Projection(box Projection {\n+                base: Place::Local(local),\n+                elem: ProjectionElem::Deref,\n+            })  if error_access == AccessKind::MutableBorrow => {\n+                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n+\n+                let mpi = self.move_data.rev_lookup.find_local(*local);\n+                for i in self.move_data.init_path_map[mpi].iter() {\n+                    if let InitLocation::Statement(location) = self.move_data.inits[*i].location {\n+                        if let Some(\n+                            Terminator {\n+                                kind: TerminatorKind::Call {\n+                                    func: Operand::Constant(box Constant {\n+                                        literal: Const {\n+                                            ty: &TyS {\n+                                                sty: TyKind::FnDef(id, substs),\n+                                                ..\n+                                            },\n+                                            ..\n+                                        },\n+                                        ..\n+                                    }),\n+                                    ..\n+                                },\n+                                ..\n+                            }\n+                        ) = &self.mir.basic_blocks()[location.block].terminator {\n+                            if self.tcx.parent(id) == self.tcx.lang_items().index_trait() {\n+\n+                                let mut found = false;\n+                                self.tcx.for_each_relevant_impl(\n+                                    self.tcx.lang_items().index_mut_trait().unwrap(),\n+                                    substs.type_at(0),\n+                                    |_relevant_impl| {\n+                                        found = true;\n+                                    }\n+                                );\n+\n+                                let extra = if found {\n+                                    String::from(\"\")\n+                                } else {\n+                                    format!(\", but it is not implemented for `{}`\",\n+                                            substs.type_at(0))\n+                                };\n+\n+                                err.help(\n+                                    &format!(\n+                                        \"trait `IndexMut` is required to modify indexed content{}\",\n+                                         extra,\n+                                    ),\n+                                );\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n             _ => {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n             }"}, {"sha": "0162bb84b94b62f1080a1bf416756f5796b0b6d7", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "patch": "@@ -20,7 +20,7 @@ use std::mem;\n use super::abs_domain::Lift;\n \n use super::{LocationMap, MoveData, MovePath, MovePathLookup, MovePathIndex, MoveOut, MoveOutIndex};\n-use super::{MoveError, InitIndex, Init, LookupResult, InitKind};\n+use super::{MoveError, InitIndex, Init, InitLocation, LookupResult, InitKind};\n use super::IllegalMoveOriginKind::*;\n \n struct MoveDataBuilder<'a, 'gcx: 'tcx, 'tcx: 'a> {\n@@ -237,10 +237,9 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n     fn gather_args(&mut self) {\n         for arg in self.mir.args_iter() {\n             let path = self.data.rev_lookup.locals[arg];\n-            let span = self.mir.local_decls[arg].source_info.span;\n \n             let init = self.data.inits.push(Init {\n-                path, span, kind: InitKind::Deep\n+                path, kind: InitKind::Deep, location: InitLocation::Argument(arg),\n             });\n \n             debug!(\"gather_args: adding init {:?} of {:?} for argument {:?}\",\n@@ -428,7 +427,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n \n         if let LookupResult::Exact(path) = self.builder.data.rev_lookup.find(place) {\n             let init = self.builder.data.inits.push(Init {\n-                span: self.builder.mir.source_info(self.loc).span,\n+                location: InitLocation::Statement(self.loc),\n                 path,\n                 kind,\n             });"}, {"sha": "8728afc228fcc0c60ea3f06773b2dbe7c511d989", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "patch": "@@ -196,12 +196,21 @@ impl fmt::Debug for MoveOut {\n pub struct Init {\n     /// path being initialized\n     pub path: MovePathIndex,\n-    /// span of initialization\n-    pub span: Span,\n+    /// location of initialization\n+    pub location: InitLocation,\n     /// Extra information about this initialization\n     pub kind: InitKind,\n }\n \n+\n+/// Initializations can be from an argument or from a statement. Arguments\n+/// do not have locations, in those cases the `Local` is kept..\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub enum InitLocation {\n+    Argument(Local),\n+    Statement(Location),\n+}\n+\n /// Additional information about the initialization.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum InitKind {\n@@ -215,7 +224,16 @@ pub enum InitKind {\n \n impl fmt::Debug for Init {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{:?}@{:?} ({:?})\", self.path, self.span, self.kind)\n+        write!(fmt, \"{:?}@{:?} ({:?})\", self.path, self.location, self.kind)\n+    }\n+}\n+\n+impl Init {\n+    crate fn span<'gcx>(&self, mir: &Mir<'gcx>) -> Span {\n+        match self.location {\n+            InitLocation::Argument(local) => mir.local_decls[local].source_info.span,\n+            InitLocation::Statement(location) => mir.source_info(location).span,\n+        }\n     }\n }\n "}, {"sha": "8e7ffa67b061c68524362f4f9be08f39adb5ab2b", "filename": "src/test/ui/borrowck/index-mut-help-with-impl.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.nll.stderr?ref=7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "patch": "@@ -0,0 +1,11 @@\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/index-mut-help-with-impl.rs:19:5\n+   |\n+LL |     Index::index(&v, 1..2).make_ascii_uppercase(); //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = help: trait `IndexMut` is required to modify indexed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "a5bab48c5cc581a64a40ef6e26bc0d274a9b3f30", "filename": "src/test/ui/borrowck/index-mut-help-with-impl.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.rs?ref=7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// When mutably indexing a type that implements `Index` and `IndexMut` but\n+// `Index::index` is being used specifically, the normal special help message\n+// should not mention a missing `IndexMut` impl.\n+\n+fn main() {\n+    use std::ops::Index;\n+\n+    let v = String::from(\"dinosaur\");\n+    Index::index(&v, 1..2).make_ascii_uppercase(); //~ ERROR\n+}"}, {"sha": "9c28b86c45a92fc00ecf1cb6b2563343e8fc597a", "filename": "src/test/ui/borrowck/index-mut-help-with-impl.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.stderr?ref=7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "patch": "@@ -0,0 +1,9 @@\n+error[E0596]: cannot borrow immutable borrowed content as mutable\n+  --> $DIR/index-mut-help-with-impl.rs:19:5\n+   |\n+LL |     Index::index(&v, 1..2).make_ascii_uppercase(); //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "a15f37684e73871f460b14d1cc9f9b0663a2d86a", "filename": "src/test/ui/borrowck/index-mut-help.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.nll.stderr?ref=7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "patch": "@@ -3,6 +3,8 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n    |\n LL |     map[\"peter\"].clear();           //~ ERROR\n    |     ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/index-mut-help.rs:22:5\n@@ -15,6 +17,8 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n    |\n LL |     let _ = &mut map[\"peter\"];      //~ ERROR\n    |             ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9f727881beaf2390f2cd78a83be8d93d28f540b2", "filename": "src/test/ui/issues/issue-41726.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Ftest%2Fui%2Fissues%2Fissue-41726.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7366752a6164dd8e004f32c1a40f0e04a61bcbb2/src%2Ftest%2Fui%2Fissues%2Fissue-41726.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41726.nll.stderr?ref=7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "patch": "@@ -3,6 +3,8 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n    |\n LL |         things[src.as_str()].sort(); //~ ERROR cannot borrow immutable\n    |         ^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>`\n \n error: aborting due to previous error\n "}]}