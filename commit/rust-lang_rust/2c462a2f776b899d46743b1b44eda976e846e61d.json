{"sha": "2c462a2f776b899d46743b1b44eda976e846e61d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNDYyYTJmNzc2Yjg5OWQ0Njc0M2IxYjQ0ZWRhOTc2ZTg0NmU2MWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-20T19:19:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-20T19:19:54Z"}, "message": "Auto merge of #69325 - Centril:rollup-vce2ko2, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #68877 (On mismatched argument count point at arguments)\n - #69185 (Unify and improve const-prop lints)\n - #69305 (Tweak binding lifetime suggestion text)\n - #69311 (Clean up E0321 and E0322)\n - #69317 (Fix broken link to the rustc guide)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3d34eb0e18fc06ddc1dc39366206357e9f34cc99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d34eb0e18fc06ddc1dc39366206357e9f34cc99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c462a2f776b899d46743b1b44eda976e846e61d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c462a2f776b899d46743b1b44eda976e846e61d", "html_url": "https://github.com/rust-lang/rust/commit/2c462a2f776b899d46743b1b44eda976e846e61d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c462a2f776b899d46743b1b44eda976e846e61d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfb96048b5946e8c695790ae66ca105cb78da60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb96048b5946e8c695790ae66ca105cb78da60b", "html_url": "https://github.com/rust-lang/rust/commit/bfb96048b5946e8c695790ae66ca105cb78da60b"}, {"sha": "c1165ce78622c632a7d6859cfacce313e7fce263", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1165ce78622c632a7d6859cfacce313e7fce263", "html_url": "https://github.com/rust-lang/rust/commit/c1165ce78622c632a7d6859cfacce313e7fce263"}], "stats": {"total": 3180, "additions": 1903, "deletions": 1277}, "files": [{"sha": "bfcdabfe9de7a8b131e74d9eb848deee607521c4", "filename": "src/librustc_error_codes/error_codes/E0321.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0321.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0321.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0321.md?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,5 +1,7 @@\n A cross-crate opt-out trait was implemented on something which wasn't a struct\n-or enum type. Erroneous code example:\n+or enum type.\n+\n+Erroneous code example:\n \n ```compile_fail,E0321\n #![feature(optin_builtin_traits)]"}, {"sha": "ccef8681dd6018a928af5afbc0e382f9be3ec1df", "filename": "src/librustc_error_codes/error_codes/E0322.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0322.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0322.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0322.md?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,3 +1,13 @@\n+The `Sized` trait was implemented explicitly.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0322\n+struct Foo;\n+\n+impl Sized for Foo {} // error!\n+```\n+\n The `Sized` trait is a special trait built-in to the compiler for types with a\n constant size known at compile-time. This trait is automatically implemented\n for types as needed by the compiler, and it is currently disallowed to"}, {"sha": "1ed890962da586087deec3fb226759206bc7ec71", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1781,28 +1781,30 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             bound_kind: GenericKind<'tcx>,\n             sub: S,\n         ) {\n-            let consider = format!(\n-                \"consider adding an explicit lifetime bound {}\",\n-                if type_param_span.map(|(_, _, is_impl_trait)| is_impl_trait).unwrap_or(false) {\n-                    format!(\" `{}` to `{}`...\", sub, bound_kind)\n-                } else {\n-                    format!(\"`{}: {}`...\", bound_kind, sub)\n-                },\n-            );\n+            let msg = \"consider adding an explicit lifetime bound\";\n             if let Some((sp, has_lifetimes, is_impl_trait)) = type_param_span {\n                 let suggestion = if is_impl_trait {\n                     format!(\"{} + {}\", bound_kind, sub)\n                 } else {\n                     let tail = if has_lifetimes { \" + \" } else { \"\" };\n                     format!(\"{}: {}{}\", bound_kind, sub, tail)\n                 };\n-                err.span_suggestion_short(\n+                err.span_suggestion(\n                     sp,\n-                    &consider,\n+                    &format!(\"{}...\", msg),\n                     suggestion,\n                     Applicability::MaybeIncorrect, // Issue #41966\n                 );\n             } else {\n+                let consider = format!(\n+                    \"{} {}...\",\n+                    msg,\n+                    if type_param_span.map(|(_, _, is_impl_trait)| is_impl_trait).unwrap_or(false) {\n+                        format!(\" `{}` to `{}`\", sub, bound_kind)\n+                    } else {\n+                        format!(\"`{}: {}`\", bound_kind, sub)\n+                    },\n+                );\n                 err.help(&consider);\n             }\n         }"}, {"sha": "0e7625da30ad1c4e16d7a92efe53627f6d2bb97e", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -305,6 +305,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n     store.register_renamed(\"unstable_name_collision\", \"unstable_name_collisions\");\n     store.register_renamed(\"unused_doc_comment\", \"unused_doc_comments\");\n     store.register_renamed(\"async_idents\", \"keyword_idents\");\n+    store.register_renamed(\"exceeding_bitshifts\", \"arithmetic_overflow\");\n     store.register_removed(\"unknown_features\", \"replaced by an error\");\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");"}, {"sha": "9e05133132e05508917c0a9c269491d84b09fe96", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 86, "deletions": 91, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -4,7 +4,8 @@\n use std::borrow::Cow;\n use std::cell::Cell;\n \n-use rustc::mir::interpret::{InterpError, InterpResult, Scalar};\n+use rustc::lint;\n+use rustc::mir::interpret::{InterpResult, Scalar};\n use rustc::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n@@ -292,7 +293,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine>,\n     tcx: TyCtxt<'tcx>,\n-    source: MirSource<'tcx>,\n     can_const_prop: IndexVec<Local, ConstPropMode>,\n     param_env: ParamEnv<'tcx>,\n     // FIXME(eddyb) avoid cloning these two fields more than once,\n@@ -372,7 +372,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         ConstPropagator {\n             ecx,\n             tcx,\n-            source,\n             param_env,\n             can_const_prop,\n             // FIXME(eddyb) avoid cloning these two fields more than once,\n@@ -501,19 +500,20 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn report_panic_as_lint(&self, source_info: SourceInfo, panic: AssertKind<u64>) -> Option<()> {\n-        // Somewhat convoluted way to re-use the CTFE error reporting code.\n+    fn report_assert_as_lint(\n+        &self,\n+        lint: &'static lint::Lint,\n+        source_info: SourceInfo,\n+        message: &'static str,\n+        panic: AssertKind<u64>,\n+    ) -> Option<()> {\n         let lint_root = self.lint_root(source_info)?;\n-        let error = InterpError::MachineStop(Box::new(format!(\"{:?}\", panic)));\n-        let mut diagnostic = error_to_const_error(&self.ecx, error.into());\n-        diagnostic.span = source_info.span; // fix the span\n-        diagnostic.report_as_lint(\n-            self.tcx.at(source_info.span),\n-            \"this expression will panic at runtime\",\n-            lint_root,\n-            None,\n-        );\n-        None\n+        self.tcx.struct_span_lint_hir(lint, lint_root, source_info.span, |lint| {\n+            let mut err = lint.build(message);\n+            err.span_label(source_info.span, format!(\"{:?}\", panic));\n+            err.emit()\n+        });\n+        return None;\n     }\n \n     fn check_unary_op(\n@@ -530,7 +530,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             // `AssertKind` only has an `OverflowNeg` variant, so make sure that is\n             // appropriate to use.\n             assert_eq!(op, UnOp::Neg, \"Neg is the only UnOp that can overflow\");\n-            self.report_panic_as_lint(source_info, AssertKind::OverflowNeg)?;\n+            self.report_assert_as_lint(\n+                lint::builtin::ARITHMETIC_OVERFLOW,\n+                source_info,\n+                \"this arithmetic operation will overflow\",\n+                AssertKind::OverflowNeg,\n+            )?;\n         }\n \n         Some(())\n@@ -542,27 +547,24 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         left: &Operand<'tcx>,\n         right: &Operand<'tcx>,\n         source_info: SourceInfo,\n-        place_layout: TyLayout<'tcx>,\n     ) -> Option<()> {\n         let r =\n             self.use_ecx(|this| this.ecx.read_immediate(this.ecx.eval_operand(right, None)?))?;\n         // Check for exceeding shifts *even if* we cannot evaluate the LHS.\n         if op == BinOp::Shr || op == BinOp::Shl {\n-            let left_bits = place_layout.size.bits();\n+            // We need the type of the LHS. We cannot use `place_layout` as that is the type\n+            // of the result, which for checked binops is not the same!\n+            let left_ty = left.ty(&self.local_decls, self.tcx);\n+            let left_size_bits = self.ecx.layout_of(left_ty).ok()?.size.bits();\n             let right_size = r.layout.size;\n             let r_bits = r.to_scalar().and_then(|r| r.to_bits(right_size));\n-            if r_bits.map_or(false, |b| b >= left_bits as u128) {\n-                let lint_root = self.lint_root(source_info)?;\n-                self.tcx.struct_span_lint_hir(\n-                    ::rustc::lint::builtin::EXCEEDING_BITSHIFTS,\n-                    lint_root,\n-                    source_info.span,\n-                    |lint| {\n-                        let dir = if op == BinOp::Shr { \"right\" } else { \"left\" };\n-                        lint.build(&format!(\"attempt to shift {} with overflow\", dir)).emit()\n-                    },\n-                );\n-                return None;\n+            if r_bits.map_or(false, |b| b >= left_size_bits as u128) {\n+                self.report_assert_as_lint(\n+                    lint::builtin::ARITHMETIC_OVERFLOW,\n+                    source_info,\n+                    \"this arithmetic operation will overflow\",\n+                    AssertKind::Overflow(op),\n+                )?;\n             }\n         }\n \n@@ -572,7 +574,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             let (_res, overflow, _ty) = this.ecx.overflowing_binary_op(op, l, r)?;\n             Ok(overflow)\n         })? {\n-            self.report_panic_as_lint(source_info, AssertKind::Overflow(op))?;\n+            self.report_assert_as_lint(\n+                lint::builtin::ARITHMETIC_OVERFLOW,\n+                source_info,\n+                \"this arithmetic operation will overflow\",\n+                AssertKind::Overflow(op),\n+            )?;\n         }\n \n         Some(())\n@@ -595,8 +602,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        let overflow_check = self.tcx.sess.overflow_checks();\n-\n         // Perform any special handling for specific Rvalue types.\n         // Generally, checks here fall into one of two categories:\n         //   1. Additional checking to provide useful lints to the user\n@@ -606,20 +611,25 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         //        - In this case, we'll return `None` from this function to stop evaluation.\n         match rvalue {\n             // Additional checking: give lints to the user if an overflow would occur.\n-            // If `overflow_check` is set, running const-prop on the `Assert` terminators\n-            // will already generate the appropriate messages.\n-            Rvalue::UnaryOp(op, arg) if !overflow_check => {\n+            // We do this here and not in the `Assert` terminator as that terminator is\n+            // only sometimes emitted (overflow checks can be disabled), but we want to always\n+            // lint.\n+            Rvalue::UnaryOp(op, arg) => {\n                 trace!(\"checking UnaryOp(op = {:?}, arg = {:?})\", op, arg);\n                 self.check_unary_op(*op, arg, source_info)?;\n             }\n-\n-            // Additional checking: check for overflows on integer binary operations and report\n-            // them to the user as lints.\n-            // If `overflow_check` is set, running const-prop on the `Assert` terminators\n-            // will already generate the appropriate messages.\n-            Rvalue::BinaryOp(op, left, right) if !overflow_check => {\n+            Rvalue::BinaryOp(op, left, right) => {\n                 trace!(\"checking BinaryOp(op = {:?}, left = {:?}, right = {:?})\", op, left, right);\n-                self.check_binary_op(*op, left, right, source_info, place_layout)?;\n+                self.check_binary_op(*op, left, right, source_info)?;\n+            }\n+            Rvalue::CheckedBinaryOp(op, left, right) => {\n+                trace!(\n+                    \"checking CheckedBinaryOp(op = {:?}, left = {:?}, right = {:?})\",\n+                    op,\n+                    left,\n+                    right\n+                );\n+                self.check_binary_op(*op, left, right, source_info)?;\n             }\n \n             // Do not try creating references (#67862)\n@@ -898,54 +908,39 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             }\n                             Operand::Constant(_) => {}\n                         }\n-                        let span = terminator.source_info.span;\n-                        let hir_id = self\n-                            .tcx\n-                            .hir()\n-                            .as_local_hir_id(self.source.def_id())\n-                            .expect(\"some part of a failing const eval must be local\");\n-                        self.tcx.struct_span_lint_hir(\n-                            ::rustc::lint::builtin::CONST_ERR,\n-                            hir_id,\n-                            span,\n-                            |lint| {\n-                                let msg = match msg {\n-                                    AssertKind::Overflow(_)\n-                                    | AssertKind::OverflowNeg\n-                                    | AssertKind::DivisionByZero\n-                                    | AssertKind::RemainderByZero => msg.description().to_owned(),\n-                                    AssertKind::BoundsCheck { ref len, ref index } => {\n-                                        let len = self\n-                                            .eval_operand(len, source_info)\n-                                            .expect(\"len must be const\");\n-                                        let len = match self.ecx.read_scalar(len) {\n-                                            Ok(ScalarMaybeUndef::Scalar(Scalar::Raw {\n-                                                data,\n-                                                ..\n-                                            })) => data,\n-                                            other => bug!(\"const len not primitive: {:?}\", other),\n-                                        };\n-                                        let index = self\n-                                            .eval_operand(index, source_info)\n-                                            .expect(\"index must be const\");\n-                                        let index = match self.ecx.read_scalar(index) {\n-                                            Ok(ScalarMaybeUndef::Scalar(Scalar::Raw {\n-                                                data,\n-                                                ..\n-                                            })) => data,\n-                                            other => bug!(\"const index not primitive: {:?}\", other),\n-                                        };\n-                                        format!(\n-                                            \"index out of bounds: \\\n-                                            the len is {} but the index is {}\",\n-                                            len, index,\n-                                        )\n-                                    }\n-                                    // Need proper const propagator for these\n-                                    _ => return,\n-                                };\n-                                lint.build(&msg).emit()\n-                            },\n+                        let msg = match msg {\n+                            AssertKind::DivisionByZero => AssertKind::DivisionByZero,\n+                            AssertKind::RemainderByZero => AssertKind::RemainderByZero,\n+                            AssertKind::BoundsCheck { ref len, ref index } => {\n+                                let len =\n+                                    self.eval_operand(len, source_info).expect(\"len must be const\");\n+                                let len = self\n+                                    .ecx\n+                                    .read_scalar(len)\n+                                    .unwrap()\n+                                    .to_machine_usize(&self.tcx)\n+                                    .unwrap();\n+                                let index = self\n+                                    .eval_operand(index, source_info)\n+                                    .expect(\"index must be const\");\n+                                let index = self\n+                                    .ecx\n+                                    .read_scalar(index)\n+                                    .unwrap()\n+                                    .to_machine_usize(&self.tcx)\n+                                    .unwrap();\n+                                AssertKind::BoundsCheck { len, index }\n+                            }\n+                            // Overflow is are already covered by checks on the binary operators.\n+                            AssertKind::Overflow(_) | AssertKind::OverflowNeg => return,\n+                            // Need proper const propagator for these.\n+                            _ => return,\n+                        };\n+                        self.report_assert_as_lint(\n+                            lint::builtin::UNCONDITIONAL_PANIC,\n+                            source_info,\n+                            \"this operation will panic at runtime\",\n+                            msg,\n                         );\n                     } else {\n                         if self.should_const_prop(value) {"}, {"sha": "d0f49fdcc758ce08a6b1dae3e85f714cc7a5094b", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -4,7 +4,7 @@\n //! For more information about how MIR-based region-checking works,\n //! see the [rustc guide].\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/borrow_check.html\n \n use rustc::hir::map::Map;\n use rustc::middle::region::*;"}, {"sha": "603ed4640a0cffc5f78707b91922ef1dbac32cbc", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -41,9 +41,15 @@ declare_lint! {\n }\n \n declare_lint! {\n-    pub EXCEEDING_BITSHIFTS,\n+    pub ARITHMETIC_OVERFLOW,\n     Deny,\n-    \"shift exceeds the type's number of bits\"\n+    \"arithmetic operation overflows\"\n+}\n+\n+declare_lint! {\n+    pub UNCONDITIONAL_PANIC,\n+    Deny,\n+    \"operation will cause a panic at runtime\"\n }\n \n declare_lint! {\n@@ -495,7 +501,8 @@ declare_lint_pass! {\n     /// that are used by other parts of the compiler.\n     HardwiredLints => [\n         ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n-        EXCEEDING_BITSHIFTS,\n+        ARITHMETIC_OVERFLOW,\n+        UNCONDITIONAL_PANIC,\n         UNUSED_IMPORTS,\n         UNUSED_EXTERN_CRATES,\n         UNUSED_QUALIFICATIONS,"}, {"sha": "5325b3137af7999b2f04b2b4f3e1c21f60f91274", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -3843,17 +3843,58 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                  error_code: &str,\n                                  c_variadic: bool,\n                                  sugg_unit: bool| {\n+            let (span, start_span, args) = match &expr.kind {\n+                hir::ExprKind::Call(hir::Expr { span, .. }, args) => (*span, *span, &args[..]),\n+                hir::ExprKind::MethodCall(path_segment, span, args) => (\n+                    *span,\n+                    // `sp` doesn't point at the whole `foo.bar()`, only at `bar`.\n+                    path_segment\n+                        .args\n+                        .and_then(|args| args.args.iter().last())\n+                        // Account for `foo.bar::<T>()`.\n+                        .map(|arg| {\n+                            // Skip the closing `>`.\n+                            tcx.sess\n+                                .source_map()\n+                                .next_point(tcx.sess.source_map().next_point(arg.span()))\n+                        })\n+                        .unwrap_or(*span),\n+                    &args[1..], // Skip the receiver.\n+                ),\n+                k => span_bug!(sp, \"checking argument types on a non-call: `{:?}`\", k),\n+            };\n+            let arg_spans = if args.is_empty() {\n+                // foo()\n+                // ^^^-- supplied 0 arguments\n+                // |\n+                // expected 2 arguments\n+                vec![tcx.sess.source_map().next_point(start_span).with_hi(sp.hi())]\n+            } else {\n+                // foo(1, 2, 3)\n+                // ^^^ -  -  - supplied 3 arguments\n+                // |\n+                // expected 2 arguments\n+                args.iter().map(|arg| arg.span).collect::<Vec<Span>>()\n+            };\n+\n             let mut err = tcx.sess.struct_span_err_with_code(\n-                sp,\n+                span,\n                 &format!(\n                     \"this function takes {}{} but {} {} supplied\",\n                     if c_variadic { \"at least \" } else { \"\" },\n-                    potentially_plural_count(expected_count, \"parameter\"),\n-                    potentially_plural_count(arg_count, \"parameter\"),\n+                    potentially_plural_count(expected_count, \"argument\"),\n+                    potentially_plural_count(arg_count, \"argument\"),\n                     if arg_count == 1 { \"was\" } else { \"were\" }\n                 ),\n                 DiagnosticId::Error(error_code.to_owned()),\n             );\n+            let label = format!(\"supplied {}\", potentially_plural_count(arg_count, \"argument\"));\n+            for (i, span) in arg_spans.into_iter().enumerate() {\n+                err.span_label(\n+                    span,\n+                    if arg_count == 0 || i + 1 == arg_count { &label } else { \"\" },\n+                );\n+            }\n \n             if let Some(def_s) = def_span.map(|sp| tcx.sess.source_map().def_span(sp)) {\n                 err.span_label(def_s, \"defined here\");\n@@ -3870,11 +3911,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n             } else {\n                 err.span_label(\n-                    sp,\n+                    span,\n                     format!(\n                         \"expected {}{}\",\n                         if c_variadic { \"at least \" } else { \"\" },\n-                        potentially_plural_count(expected_count, \"parameter\")\n+                        potentially_plural_count(expected_count, \"argument\")\n                     ),\n                 );\n             }\n@@ -5622,8 +5663,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.tcx.sess.span_err(\n             span,\n-            \"this function can only be invoked \\\n-                                      directly, not through a function pointer\",\n+            \"this function can only be invoked directly, not through a function pointer\",\n         );\n     }\n "}, {"sha": "d502673e2f880d85f539f8188347c7800a68015a", "filename": "src/test/codegen/issue-56927.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fcodegen%2Fissue-56927.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fcodegen%2Fissue-56927.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-56927.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -23,7 +23,7 @@ pub fn test1(s: &mut S) {\n \n // CHECK-LABEL: @test2\n // CHECK: store i32 4, i32* %{{.+}}, align 4\n-#[allow(const_err)]\n+#[allow(unconditional_panic)]\n #[no_mangle]\n pub fn test2(s: &mut S) {\n     s.arr[usize::MAX / 4 + 1] = 4;"}, {"sha": "fc10824f0c03cf3e85384b3a09d61e8667592d9b", "filename": "src/test/compile-fail/consts/const-err3.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,20 +0,0 @@\n-#![feature(rustc_attrs)]\n-#![deny(const_err)]\n-\n-fn black_box<T>(_: T) {\n-    unimplemented!()\n-}\n-\n-fn main() {\n-    let b = 200u8 + 200u8 + 200u8;\n-    //~^ ERROR const_err\n-    let c = 200u8 * 4;\n-    //~^ ERROR const_err\n-    let d = 42u8 - (42u8 + 1);\n-    //~^ ERROR const_err\n-    let _e = [5u8][1];\n-    //~^ ERROR const_err\n-    black_box(b);\n-    black_box(c);\n-    black_box(d);\n-}"}, {"sha": "0eac2a1d57f8f291567dff0242d1a49727e527d3", "filename": "src/test/incremental/warnings-reemitted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,8 +2,8 @@\n // compile-flags: -Coverflow-checks=on\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![warn(const_err)]\n+#![warn(arithmetic_overflow)]\n \n fn main() {\n-    let _ = 255u8 + 1; //~ WARNING attempt to add with overflow\n+    let _ = 255u8 + 1; //~ WARNING operation will overflow\n }"}, {"sha": "1cd53e309ebf97da02d0b65b852b0d932f3ca9cb", "filename": "src/test/run-fail/mir_indexing_oob_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_1.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@\n \n const C: [u32; 5] = [0; 5];\n \n-#[allow(const_err)]\n+#[allow(unconditional_panic)]\n fn test() -> u32 {\n     C[10]\n }"}, {"sha": "64b260993c994ac01ab1a84d99fa348eb3134519", "filename": "src/test/run-fail/mir_indexing_oob_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_2.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@\n \n const C: &'static [u8; 5] = b\"hello\";\n \n-#[allow(const_err)]\n+#[allow(unconditional_panic)]\n fn test() -> u8 {\n     C[10]\n }"}, {"sha": "3688088439bbfe75f2a78f1e4bb0aca2a70e93c0", "filename": "src/test/run-fail/mir_indexing_oob_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_3.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@\n \n const C: &'static [u8; 5] = b\"hello\";\n \n-#[allow(const_err)]\n+#[allow(unconditional_panic)]\n fn mir() -> u8 {\n     C[10]\n }"}, {"sha": "5ca91314d95a25deac58a5676b5e9631d5fe8301", "filename": "src/test/run-fail/overflowing-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-add.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to add with overflow'\n // compile-flags: -C debug-assertions\n \n-#![allow(const_err)]\n+#![allow(arithmetic_overflow)]\n \n fn main() {\n     let _x = 200u8 + 200u8 + 200u8;"}, {"sha": "977cfea0fe05dbd13ea851cf8057f621781c0bb2", "filename": "src/test/run-fail/overflowing-lsh-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift left with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "3517dacde3aa31fe51098466c56eae8cbe426c8b", "filename": "src/test/run-fail/overflowing-lsh-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift left with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "4a575c3fa7f6a07b8dc7cea36dea130266c03b7b", "filename": "src/test/run-fail/overflowing-lsh-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift left with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "0d3912ce13f8133deef886c9ec719bad315ac5f5", "filename": "src/test/run-fail/overflowing-lsh-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -4,7 +4,7 @@\n // This function is checking that our automatic truncation does not\n // sidestep the overflow checking.\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "2dfc9bb5ae472d7e7f0cf73bff94580b68c17464", "filename": "src/test/run-fail/overflowing-mul.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to multiply with overflow'\n // compile-flags: -C debug-assertions\n \n-#![allow(const_err)]\n+#![allow(arithmetic_overflow)]\n \n fn main() {\n     let x = 200u8 * 4;"}, {"sha": "f512aa35beda66e6005d31ef635d9bbba9118c2a", "filename": "src/test/run-fail/overflowing-neg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to negate with overflow'\n // compile-flags: -C debug-assertions\n \n-#![allow(const_err)]\n+#![allow(arithmetic_overflow)]\n \n fn main() {\n     let _x = -std::i8::MIN;"}, {"sha": "4592b2b6260bd1889809ac9854e94d071f72023b", "filename": "src/test/run-fail/overflowing-rsh-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "066267b770db23f119fb657f747aa840459eada7", "filename": "src/test/run-fail/overflowing-rsh-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "67e78482866cbbd536efdfb3b6272392cf490fb7", "filename": "src/test/run-fail/overflowing-rsh-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "1877d5c9685262bda66ac59be73bd82194e87c24", "filename": "src/test/run-fail/overflowing-rsh-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -4,7 +4,7 @@\n // This function is checking that our (type-based) automatic\n // truncation does not sidestep the overflow checking.\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "20ef324a82aeb54048586fea5918529049b77529", "filename": "src/test/run-fail/overflowing-rsh-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "589a98bab0401e535dcb91ffc04f438f58c8eef0", "filename": "src/test/run-fail/overflowing-rsh-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n #![feature(const_indexing)]\n "}, {"sha": "fb096c31957ee61ce18fbeeaee246b1712259720", "filename": "src/test/run-fail/overflowing-sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to subtract with overflow'\n // compile-flags: -C debug-assertions\n \n-#![allow(const_err)]\n+#![allow(arithmetic_overflow)]\n \n fn main() {\n     let _x = 42u8 - (42u8 + 1);"}, {"sha": "dc6719ce025f2c38f161ecc94c1fde0e7ab35803", "filename": "src/test/run-fail/promoted_div_by_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Fpromoted_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Fpromoted_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpromoted_div_by_zero.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,4 +1,4 @@\n-#![allow(const_err)]\n+#![allow(unconditional_panic, const_err)]\n \n // error-pattern: attempt to divide by zero\n "}, {"sha": "3c42da4b1d8ed43dc787499a2592b5b2748b4e18", "filename": "src/test/run-fail/promoted_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Fpromoted_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Frun-fail%2Fpromoted_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpromoted_overflow.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,4 +1,4 @@\n-#![allow(const_err)]\n+#![allow(arithmetic_overflow)]\n \n // error-pattern: overflow\n // compile-flags: -C overflow-checks=yes"}, {"sha": "18926f5daf71a7a91f8db9357c9d548421bf64f0", "filename": "src/test/ui/arg-count-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Farg-count-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Farg-count-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-count-mismatch.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: parameters were supplied\n+// error-pattern: arguments were supplied\n \n fn f(x: isize) { }\n "}, {"sha": "7bc06134a690dd145903152909d5d7ab107e30b2", "filename": "src/test/ui/arg-count-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Farg-count-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Farg-count-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-count-mismatch.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,11 +1,13 @@\n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/arg-count-mismatch.rs:5:28\n    |\n LL | fn f(x: isize) { }\n    | -------------- defined here\n LL | \n LL | fn main() { let i: (); i = f(); }\n-   |                            ^^^ expected 1 parameter\n+   |                            ^-- supplied 0 arguments\n+   |                            |\n+   |                            expected 1 argument\n \n error: aborting due to previous error\n "}, {"sha": "999a5839ba6902cd736b248c4b29ed188f00e0df", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -4,7 +4,7 @@ error[E0310]: the parameter type `T` may not live long enough\n LL | impl <T: Sync> Foo for T { }\n    |       --       ^^^\n    |       |\n-   |       help: consider adding an explicit lifetime bound `T: 'static`...\n+   |       help: consider adding an explicit lifetime bound...: `T: 'static +`\n    |\n note: ...so that the type `T` will meet its required lifetime bounds\n   --> $DIR/builtin-superkinds-self-type.rs:10:16"}, {"sha": "e7197a9d16859e0bae5ab3e2d11a1f3c328f68ab", "filename": "src/test/ui/c-variadic/variadic-ffi-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -13,8 +13,8 @@ extern \"C\" fn bar(f: isize, x: u8) {}\n \n fn main() {\n     unsafe {\n-        foo();  //~ ERROR this function takes at least 2 parameters but 0 parameters were supplied\n-        foo(1); //~ ERROR this function takes at least 2 parameters but 1 parameter was supplied\n+        foo();  //~ ERROR this function takes at least 2 arguments but 0 arguments were supplied\n+        foo(1); //~ ERROR this function takes at least 2 arguments but 1 argument was supplied\n \n         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo; //~ ERROR mismatched types\n         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar; //~ ERROR mismatched types"}, {"sha": "318b8aabafb4931430ea5b5f8f88e3322b2b10eb", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -4,23 +4,27 @@ error[E0045]: C-variadic function must have C or cdecl calling convention\n LL |     fn printf(_: *const u8, ...);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n \n-error[E0060]: this function takes at least 2 parameters but 0 parameters were supplied\n+error[E0060]: this function takes at least 2 arguments but 0 arguments were supplied\n   --> $DIR/variadic-ffi-1.rs:16:9\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |     ----------------------------- defined here\n ...\n LL |         foo();\n-   |         ^^^^^ expected at least 2 parameters\n+   |         ^^^-- supplied 0 arguments\n+   |         |\n+   |         expected at least 2 arguments\n \n-error[E0060]: this function takes at least 2 parameters but 1 parameter was supplied\n+error[E0060]: this function takes at least 2 arguments but 1 argument was supplied\n   --> $DIR/variadic-ffi-1.rs:17:9\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |     ----------------------------- defined here\n ...\n LL |         foo(1);\n-   |         ^^^^^^ expected at least 2 parameters\n+   |         ^^^ - supplied 1 argument\n+   |         |\n+   |         expected at least 2 arguments\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:19:56"}, {"sha": "492afa9372c6269228e6bfe7556a2ffc74dfe109", "filename": "src/test/ui/consts/array-literal-index-oob.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,11 +1,11 @@\n // build-pass\n // ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n \n-#![warn(const_err)]\n+#![warn(const_err, unconditional_panic)]\n \n fn main() {\n     &{ [1, 2, 3][4] };\n-    //~^ WARN index out of bounds\n+    //~^ WARN operation will panic\n     //~| WARN reaching this expression at runtime will panic or abort\n     //~| WARN erroneous constant used [const_err]\n }"}, {"sha": "6e0e7fedb7b97d39d826fff98213631d9e5f7ab9", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,14 +1,14 @@\n-warning: index out of bounds: the len is 3 but the index is 4\n+warning: this operation will panic at runtime\n   --> $DIR/array-literal-index-oob.rs:7:8\n    |\n LL |     &{ [1, 2, 3][4] };\n-   |        ^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 4\n    |\n note: the lint level is defined here\n-  --> $DIR/array-literal-index-oob.rs:4:9\n+  --> $DIR/array-literal-index-oob.rs:4:20\n    |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n+LL | #![warn(const_err, unconditional_panic)]\n+   |                    ^^^^^^^^^^^^^^^^^^^\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/array-literal-index-oob.rs:7:8\n@@ -17,6 +17,12 @@ LL |     &{ [1, 2, 3][4] };\n    |     ---^^^^^^^^^^^^--\n    |        |\n    |        indexing out of bounds: the len is 3 but the index is 4\n+   |\n+note: the lint level is defined here\n+  --> $DIR/array-literal-index-oob.rs:4:9\n+   |\n+LL | #![warn(const_err, unconditional_panic)]\n+   |         ^^^^^^^^^\n \n warning: erroneous constant used\n   --> $DIR/array-literal-index-oob.rs:7:5"}, {"sha": "d1c5f4f3f32eec62ec0273a65aed57989ce7429e", "filename": "src/test/ui/consts/const-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // compile-flags: -Zforce-overflow-checks=on\n \n-#![allow(exceeding_bitshifts)]\n+#![allow(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn black_box<T>(_: T) {"}, {"sha": "5aeeec4bd1435afce765d3fd62d97bd56a64daca", "filename": "src/test/ui/consts/const-err2.noopt.stderr", "status": "renamed", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,50 +1,48 @@\n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:18:13\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:19:13\n    |\n LL |     let a = -std::i8::MIN;\n    |             ^^^^^^^^^^^^^ attempt to negate with overflow\n    |\n-note: the lint level is defined here\n-  --> $DIR/const-err2.rs:11:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:20:18\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:21:18\n    |\n LL |     let a_i128 = -std::i128::MIN;\n    |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:22:13\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:23:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n    |             ^^^^^^^^^^^^^ attempt to add with overflow\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:24:18\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:25:18\n    |\n LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:26:13\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:27:13\n    |\n LL |     let c = 200u8 * 4;\n    |             ^^^^^^^^^ attempt to multiply with overflow\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:28:13\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:29:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n    |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n \n-error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err2.rs:30:14\n+error: this operation will panic at runtime\n+  --> $DIR/const-err2.rs:31:14\n    |\n LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n error: aborting due to 7 previous errors\n ", "previous_filename": "src/test/ui/consts/const-err2.stderr"}, {"sha": "5aeeec4bd1435afce765d3fd62d97bd56a64daca", "filename": "src/test/ui/consts/const-err2.opt.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,48 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:19:13\n+   |\n+LL |     let a = -std::i8::MIN;\n+   |             ^^^^^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:21:18\n+   |\n+LL |     let a_i128 = -std::i128::MIN;\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:23:13\n+   |\n+LL |     let b = 200u8 + 200u8 + 200u8;\n+   |             ^^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:25:18\n+   |\n+LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:27:13\n+   |\n+LL |     let c = 200u8 * 4;\n+   |             ^^^^^^^^^ attempt to multiply with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:29:13\n+   |\n+LL |     let d = 42u8 - (42u8 + 1);\n+   |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/const-err2.rs:31:14\n+   |\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "5aeeec4bd1435afce765d3fd62d97bd56a64daca", "filename": "src/test/ui/consts/const-err2.opt_with_overflow_checks.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,48 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:19:13\n+   |\n+LL |     let a = -std::i8::MIN;\n+   |             ^^^^^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:21:18\n+   |\n+LL |     let a_i128 = -std::i128::MIN;\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:23:13\n+   |\n+LL |     let b = 200u8 + 200u8 + 200u8;\n+   |             ^^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:25:18\n+   |\n+LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:27:13\n+   |\n+LL |     let c = 200u8 * 4;\n+   |             ^^^^^^^^^ attempt to multiply with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:29:13\n+   |\n+LL |     let d = 42u8 - (42u8 + 1);\n+   |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/const-err2.rs:31:14\n+   |\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "2c6a987180bb1f85c9f6204e73329bf9a6ac28e2", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,33 +2,34 @@\n // optimized compilation and unoptimized compilation and thus would\n // lead to different lints being emitted\n \n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // build-fail\n-// compile-flags: -O\n \n #![feature(rustc_attrs)]\n-#![allow(exceeding_bitshifts)]\n-\n-#![deny(const_err)]\n \n fn black_box<T>(_: T) {\n     unimplemented!()\n }\n \n fn main() {\n     let a = -std::i8::MIN;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let a_i128 = -std::i128::MIN;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let b = 200u8 + 200u8 + 200u8;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let b_i128 = std::i128::MIN - std::i128::MAX;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let c = 200u8 * 4;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let d = 42u8 - (42u8 + 1);\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let _e = [5u8][1];\n-    //~^ ERROR const_err\n+    //~^ ERROR operation will panic\n     black_box(a);\n     black_box(a_i128);\n     black_box(b);"}, {"sha": "43aba4a8b012b00a6022751d586c24a74c90bb4f", "filename": "src/test/ui/consts/const-err3.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,38 +0,0 @@\n-// needed because negating int::MIN will behave differently between\n-// optimized compilation and unoptimized compilation and thus would\n-// lead to different lints being emitted\n-\n-// build-fail\n-// compile-flags: -C overflow-checks=on -O\n-\n-#![feature(rustc_attrs)]\n-#![allow(exceeding_bitshifts)]\n-\n-#![deny(const_err)]\n-\n-fn black_box<T>(_: T) {\n-    unimplemented!()\n-}\n-\n-fn main() {\n-    let a = -std::i8::MIN;\n-    //~^ ERROR const_err\n-    let a_i128 = -std::i128::MIN;\n-    //~^ ERROR const_err\n-    let b = 200u8 + 200u8 + 200u8;\n-    //~^ ERROR const_err\n-    let b_i128 = std::i128::MIN - std::i128::MAX;\n-    //~^ ERROR const_err\n-    let c = 200u8 * 4;\n-    //~^ ERROR const_err\n-    let d = 42u8 - (42u8 + 1);\n-    //~^ ERROR const_err\n-    let _e = [5u8][1];\n-    //~^ ERROR const_err\n-    black_box(a);\n-    black_box(a_i128);\n-    black_box(b);\n-    black_box(b_i128);\n-    black_box(c);\n-    black_box(d);\n-}"}, {"sha": "05f64b87fcce6debabaeb621523f95f9cb275e8c", "filename": "src/test/ui/consts/const-err3.stderr", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,50 +0,0 @@\n-error: attempt to negate with overflow\n-  --> $DIR/const-err3.rs:18:13\n-   |\n-LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/const-err3.rs:11:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-error: attempt to negate with overflow\n-  --> $DIR/const-err3.rs:20:18\n-   |\n-LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^\n-\n-error: attempt to add with overflow\n-  --> $DIR/const-err3.rs:22:13\n-   |\n-LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^\n-\n-error: attempt to subtract with overflow\n-  --> $DIR/const-err3.rs:24:18\n-   |\n-LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: attempt to multiply with overflow\n-  --> $DIR/const-err3.rs:26:13\n-   |\n-LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^\n-\n-error: attempt to subtract with overflow\n-  --> $DIR/const-err3.rs:28:13\n-   |\n-LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^\n-\n-error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err3.rs:30:14\n-   |\n-LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^\n-\n-error: aborting due to 7 previous errors\n-"}, {"sha": "608e6e112a10be5f4ad7657af9bd3e0958de17a6", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds_propagated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let array = [std::env::args().len()];\n-    array[1]; //~ ERROR index out of bounds\n+    array[1]; //~ ERROR operation will panic\n }"}, {"sha": "4188efd021d1351558a0965a93d58097b6d1fe76", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds_propagated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,10 +1,10 @@\n-error: index out of bounds: the len is 1 but the index is 1\n+error: this operation will panic at runtime\n   --> $DIR/index_out_of_bounds_propagated.rs:5:5\n    |\n LL |     array[1];\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "94c1593240bc6109f2f2bc06cad8d7756a2c3698", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,78 @@\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:12:20\n+   |\n+LL |     println!(\"{}\", 0u32 - 1);\n+   |                    ^^^^^^^^ attempt to subtract with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:20\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |                    ^^^^^^^^^^^^^^^^^^^\n+\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:14:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^ attempt to subtract with overflow\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ attempt to divide by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:41\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |                                         ^^^^^^^^^^^^^^^^^^^\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ dividing by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:20:14\n+   |\n+LL |     let _x = 1 / (1 - 1);\n+   |              ^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:26:14\n+   |\n+LL |     let _x = 1 / (false as u32);\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+"}, {"sha": "034dea06568e0899f2302141f0edabcdfe22acf0", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,72 @@\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:14:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^ attempt to subtract with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:20\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |                    ^^^^^^^^^^^^^^^^^^^\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ attempt to divide by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:41\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |                                         ^^^^^^^^^^^^^^^^^^^\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ dividing by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:20:14\n+   |\n+LL |     let _x = 1 / (1 - 1);\n+   |              ^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:26:14\n+   |\n+LL |     let _x = 1 / (false as u32);\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+"}, {"sha": "94c1593240bc6109f2f2bc06cad8d7756a2c3698", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,78 @@\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:12:20\n+   |\n+LL |     println!(\"{}\", 0u32 - 1);\n+   |                    ^^^^^^^^ attempt to subtract with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:20\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |                    ^^^^^^^^^^^^^^^^^^^\n+\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:14:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^ attempt to subtract with overflow\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ attempt to divide by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:41\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |                                         ^^^^^^^^^^^^^^^^^^^\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ dividing by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:20:14\n+   |\n+LL |     let _x = 1 / (1 - 1);\n+   |              ^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:26:14\n+   |\n+LL |     let _x = 1 / (false as u32);\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+"}, {"sha": "3ab6ce28478c39ae0d72ff356c1d89fbb5d37ae1", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,23 +1,28 @@\n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // build-pass\n // ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n-// compile-flags: -O\n \n-#![warn(const_err)]\n+#![warn(const_err, arithmetic_overflow, unconditional_panic)]\n \n fn main() {\n     println!(\"{}\", 0u32 - 1);\n+    //[opt_with_overflow_checks,noopt]~^ WARN [arithmetic_overflow]\n     let _x = 0u32 - 1;\n-    //~^ WARN const_err\n+    //~^ WARN [arithmetic_overflow]\n     println!(\"{}\", 1 / (1 - 1));\n-    //~^ WARN attempt to divide by zero [const_err]\n-    //~| WARN const_err\n+    //~^ WARN [unconditional_panic]\n+    //~| WARN panic or abort [const_err]\n     //~| WARN erroneous constant used [const_err]\n     let _x = 1 / (1 - 1);\n-    //~^ WARN const_err\n+    //~^ WARN [unconditional_panic]\n     println!(\"{}\", 1 / (false as u32));\n-    //~^ WARN attempt to divide by zero [const_err]\n-    //~| WARN const_err\n+    //~^ WARN [unconditional_panic]\n+    //~| WARN panic or abort [const_err]\n     //~| WARN erroneous constant used [const_err]\n     let _x = 1 / (false as u32);\n-    //~^ WARN const_err\n+    //~^ WARN [unconditional_panic]\n }"}, {"sha": "08ae5c7a32b65f81258193581c931d2e418688ef", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,60 +0,0 @@\n-warning: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:9:14\n-   |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to subtract with overflow\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:5:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:11:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:11:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:11:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ referenced constant has errors\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:15:14\n-   |\n-LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:17:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:17:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:17:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:21:14\n-   |\n-LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "62c77f76d9064ca7325cc14369ea7dc2b59ecb03", "filename": "src/test/ui/consts/const-eval/promoted_errors2.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,24 +0,0 @@\n-// build-pass\n-// ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n-// compile-flags: -C overflow-checks=on -O\n-\n-#![warn(const_err)]\n-\n-fn main() {\n-    println!(\"{}\", 0u32 - 1);\n-    //~^ WARN attempt to subtract with overflow\n-    let _x = 0u32 - 1;\n-    //~^ WARN attempt to subtract with overflow\n-    println!(\"{}\", 1 / (1 - 1));\n-    //~^ WARN attempt to divide by zero [const_err]\n-    //~| WARN const_err\n-    //~| WARN erroneous constant used [const_err]\n-    let _x = 1 / (1 - 1);\n-    //~^ WARN const_err\n-    println!(\"{}\", 1 / (false as u32));\n-    //~^ WARN attempt to divide by zero [const_err]\n-    //~| WARN const_err\n-    //~| WARN erroneous constant used [const_err]\n-    let _x = 1 / (false as u32);\n-    //~^ WARN const_err\n-}"}, {"sha": "d1a9cb958e1553d9e10111552c3af5904067b935", "filename": "src/test/ui/consts/const-eval/promoted_errors2.stderr", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,66 +0,0 @@\n-warning: attempt to subtract with overflow\n-  --> $DIR/promoted_errors2.rs:8:20\n-   |\n-LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors2.rs:5:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-warning: attempt to subtract with overflow\n-  --> $DIR/promoted_errors2.rs:10:14\n-   |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:12:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors2.rs:12:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors2.rs:12:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ referenced constant has errors\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:16:14\n-   |\n-LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:18:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors2.rs:18:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors2.rs:18:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:22:14\n-   |\n-LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "5bffe0206294d80718fdba1d52d1f8cfe11f3ec3", "filename": "src/test/ui/consts/const-prop-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n \n fn main() {\n-    [0; 3][3u64 as usize]; //~ ERROR the len is 3 but the index is 3\n+    [0; 3][3u64 as usize]; //~ ERROR this operation will panic at runtime\n }"}, {"sha": "7bb4acb235aa7b726434d4590ff9a1f983ace006", "filename": "src/test/ui/consts/const-prop-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,10 +1,10 @@\n-error: index out of bounds: the len is 3 but the index is 3\n+error: this operation will panic at runtime\n   --> $DIR/const-prop-ice.rs:4:5\n    |\n LL |     [0; 3][3u64 as usize];\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 3\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "d533e394c06fb5cab82cfe774d70b7c7b5d76909", "filename": "src/test/ui/consts/const-prop-ice2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     enum Enum { One=1 }\n     let xs=[0;1 as usize];\n-    println!(\"{}\", xs[Enum::One as usize]); //~ ERROR the len is 1 but the index is 1\n+    println!(\"{}\", xs[Enum::One as usize]); //~ ERROR this operation will panic at runtime\n }"}, {"sha": "73405eca3408c2c5b1441172bfbf17b50500defa", "filename": "src/test/ui/consts/const-prop-ice2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,10 +1,10 @@\n-error: index out of bounds: the len is 1 but the index is 1\n+error: this operation will panic at runtime\n   --> $DIR/const-prop-ice2.rs:6:20\n    |\n LL |     println!(\"{}\", xs[Enum::One as usize]);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "38911c3dcf69298c4dc2c21a2018865d4a0a3e6d", "filename": "src/test/ui/consts/issue-64059-2.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,6 +0,0 @@\n-// compile-flags: -C overflow-checks=on -O\n-// run-pass\n-\n-fn main() {\n-    let _ = -(-0.0);\n-}"}, {"sha": "02c8b7250324df6b97b83bffdf5be1ccb67f24ed", "filename": "src/test/ui/consts/issue-64059.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,3 +1,8 @@\n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // run-pass\n \n fn main() {"}, {"sha": "c48a106ef4656ce0287be97b5ec7b186d9c79fbc", "filename": "src/test/ui/consts/issue-69020.noopt.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.noopt.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,30 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020.rs:21:22\n+   |\n+LL |     const NEG: i32 = -i32::MIN + T::NEG;\n+   |                      ^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020.rs:23:22\n+   |\n+LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n+   |                      ^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020.rs:25:22\n+   |\n+LL |     const DIV: i32 = (1/0) + T::DIV;\n+   |                      ^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020.rs:27:22\n+   |\n+LL |     const OOB: i32 = [1][1] + T::OOB;\n+   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c48a106ef4656ce0287be97b5ec7b186d9c79fbc", "filename": "src/test/ui/consts/issue-69020.opt.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,30 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020.rs:21:22\n+   |\n+LL |     const NEG: i32 = -i32::MIN + T::NEG;\n+   |                      ^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020.rs:23:22\n+   |\n+LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n+   |                      ^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020.rs:25:22\n+   |\n+LL |     const DIV: i32 = (1/0) + T::DIV;\n+   |                      ^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020.rs:27:22\n+   |\n+LL |     const OOB: i32 = [1][1] + T::OOB;\n+   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c48a106ef4656ce0287be97b5ec7b186d9c79fbc", "filename": "src/test/ui/consts/issue-69020.opt_with_overflow_checks.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt_with_overflow_checks.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,30 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020.rs:21:22\n+   |\n+LL |     const NEG: i32 = -i32::MIN + T::NEG;\n+   |                      ^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020.rs:23:22\n+   |\n+LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n+   |                      ^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020.rs:25:22\n+   |\n+LL |     const DIV: i32 = (1/0) + T::DIV;\n+   |                      ^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020.rs:27:22\n+   |\n+LL |     const OOB: i32 = [1][1] + T::OOB;\n+   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e079feb04d4479e0640b54bf49b5181503ed8a0e", "filename": "src/test/ui/consts/issue-69020.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,29 @@\n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n+#![crate_type=\"lib\"]\n+\n+use std::i32;\n+\n+pub trait Foo {\n+    const NEG: i32;\n+    const ADD: i32;\n+    const DIV: i32;\n+    const OOB: i32;\n+}\n+\n+// These constants cannot be evaluated already (they depend on `T::N`), so\n+// they can just be linted like normal run-time code.  But codegen works\n+// a bit different in const context, so this test makes sure that we still catch overflow.\n+impl<T: Foo> Foo for Vec<T> {\n+    const NEG: i32 = -i32::MIN + T::NEG;\n+    //~^ ERROR arithmetic operation will overflow\n+    const ADD: i32 = (i32::MAX+1) + T::ADD;\n+    //~^ ERROR arithmetic operation will overflow\n+    const DIV: i32 = (1/0) + T::DIV;\n+    //~^ ERROR operation will panic\n+    const OOB: i32 = [1][1] + T::OOB;\n+    //~^ ERROR operation will panic\n+}"}, {"sha": "31579e282896402d067d47b61d507c0921f252ae", "filename": "src/test/ui/error-codes/E0057.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,14 +1,18 @@\n-error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0057]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/E0057.rs:3:13\n    |\n LL |     let a = f();\n-   |             ^^^ expected 1 parameter\n+   |             ^-- supplied 0 arguments\n+   |             |\n+   |             expected 1 argument\n \n-error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n+error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/E0057.rs:5:13\n    |\n LL |     let c = f(2, 3);\n-   |             ^^^^^^^ expected 1 parameter\n+   |             ^ -  - supplied 2 arguments\n+   |             |\n+   |             expected 1 argument\n \n error: aborting due to 2 previous errors\n "}, {"sha": "941eb2a210bf37b0ab7c77d38f8c7c9d158d83b5", "filename": "src/test/ui/error-codes/E0060.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ferror-codes%2FE0060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ferror-codes%2FE0060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0060.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -5,5 +5,5 @@ extern \"C\" {\n fn main() {\n     unsafe { printf(); }\n     //~^ ERROR E0060\n-    //~| expected at least 1 parameter\n+    //~| expected at least 1 argument\n }"}, {"sha": "a600592c6c2e7f7b54247710af5449524c9fa8f4", "filename": "src/test/ui/error-codes/E0060.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,11 +1,13 @@\n-error[E0060]: this function takes at least 1 parameter but 0 parameters were supplied\n+error[E0060]: this function takes at least 1 argument but 0 arguments were supplied\n   --> $DIR/E0060.rs:6:14\n    |\n LL |     fn printf(_: *const u8, ...) -> u32;\n    |     ------------------------------------ defined here\n ...\n LL |     unsafe { printf(); }\n-   |              ^^^^^^^^ expected at least 1 parameter\n+   |              ^^^^^^-- supplied 0 arguments\n+   |              |\n+   |              expected at least 1 argument\n \n error: aborting due to previous error\n "}, {"sha": "c7b5fe4310e9328f5c7de0cb1bbbd20bc2732fa7", "filename": "src/test/ui/error-codes/E0061.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ferror-codes%2FE0061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ferror-codes%2FE0061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0061.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -5,9 +5,9 @@ fn f2(a: u16) {}\n fn main() {\n     f(0);\n     //~^ ERROR E0061\n-    //~| expected 2 parameters\n+    //~| expected 2 arguments\n \n     f2();\n     //~^ ERROR E0061\n-    //~| expected 1 parameter\n+    //~| expected 1 argument\n }"}, {"sha": "dfefa0df31332cc8d656a816a50d87e8e2f5a6e1", "filename": "src/test/ui/error-codes/E0061.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,20 +1,24 @@\n-error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/E0061.rs:6:5\n    |\n LL | fn f(a: u16, b: &str) {}\n    | --------------------- defined here\n ...\n LL |     f(0);\n-   |     ^^^^ expected 2 parameters\n+   |     ^ - supplied 1 argument\n+   |     |\n+   |     expected 2 arguments\n \n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/E0061.rs:10:5\n    |\n LL | fn f2(a: u16) {}\n    | ------------- defined here\n ...\n LL |     f2();\n-   |     ^^^^ expected 1 parameter\n+   |     ^^-- supplied 0 arguments\n+   |     |\n+   |     expected 1 argument\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fbc4e8abc42fd642693a709434743b76e0b193c6", "filename": "src/test/ui/feature-gates/feature-gate-infer_static_outlives_requirements.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/feature-gate-infer_static_outlives_requirements.rs:5:5\n    |\n LL | struct Foo<U> {\n-   |            - help: consider adding an explicit lifetime bound `U: 'static`...\n+   |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n    |     ^^^^^^^^^^^\n    |"}, {"sha": "f36d549e476b8baa6b04d25125475c8dd3284965", "filename": "src/test/ui/hrtb/issue-58451.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -9,5 +9,5 @@ where\n {}\n \n fn main() {\n-    f(&[f()]); //~ ERROR this function takes 1 parameter\n+    f(&[f()]); //~ ERROR this function takes 1 argument\n }"}, {"sha": "c0915808bf523992aadf7ce13cc774862c1f92aa", "filename": "src/test/ui/hrtb/issue-58451.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/issue-58451.rs:12:9\n    |\n LL | / fn f<I>(i: I)\n@@ -9,7 +9,9 @@ LL | | {}\n    | |__- defined here\n ...\n LL |       f(&[f()]);\n-   |           ^^^ expected 1 parameter\n+   |           ^-- supplied 0 arguments\n+   |           |\n+   |           expected 1 argument\n \n error: aborting due to previous error\n "}, {"sha": "2290e3d5e76377ca1e4c8eba32a40bf42a94e6ef", "filename": "src/test/ui/huge-array-simple-32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fhuge-array-simple-32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fhuge-array-simple-32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple-32.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -4,7 +4,7 @@\n // FIXME https://github.com/rust-lang/rust/issues/59774\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-#![allow(exceeding_bitshifts)]\n+#![allow(arithmetic_overflow)]\n \n fn main() {\n     let _fat: [u8; (1<<31)+(1<<15)] = //~ ERROR too big for the current architecture"}, {"sha": "02c961fc5fa580761a70716eb056e3a6ec0dbd72", "filename": "src/test/ui/huge-array-simple-64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fhuge-array-simple-64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fhuge-array-simple-64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple-64.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -4,7 +4,7 @@\n // FIXME https://github.com/rust-lang/rust/issues/59774\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-#![allow(exceeding_bitshifts)]\n+#![allow(arithmetic_overflow)]\n \n fn main() {\n     let _fat: [u8; (1<<61)+(1<<31)] = //~ ERROR too big for the current architecture"}, {"sha": "cffa5ee8f146131a0aeaca2fca487807f465842e", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -67,7 +67,7 @@ error[E0310]: the parameter type `T` may not live long enough\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                 --                ^^^^^^^^^^^^^^^^^^^^\n    |                                 |\n-   |                                 help: consider adding an explicit lifetime bound `T: 'static`...\n+   |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n    |\n note: ...so that the type `T` will meet its required lifetime bounds\n   --> $DIR/must_outlive_least_region_or_bound.rs:22:51"}, {"sha": "34f0f7f1d731c5eb80e4c0099bf5cb90b49fa63b", "filename": "src/test/ui/impl-trait/type_parameters_captured.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -4,7 +4,7 @@ error[E0310]: the parameter type `T` may not live long enough\n LL | fn foo<T>(x: T) -> impl Any + 'static {\n    |        -           ^^^^^^^^^^^^^^^^^^\n    |        |\n-   |        help: consider adding an explicit lifetime bound `T: 'static`...\n+   |        help: consider adding an explicit lifetime bound...: `T: 'static`\n    |\n note: ...so that the type `T` will meet its required lifetime bounds\n   --> $DIR/type_parameters_captured.rs:7:20"}, {"sha": "103f56fa04dd332fc1dc05322b1a4ee549adea23", "filename": "src/test/ui/issues/issue-16939.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-16939.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-16939.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16939.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,8 +1,10 @@\n-error[E0057]: this function takes 0 parameters but 1 parameter was supplied\n+error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/issue-16939.rs:5:9\n    |\n LL |     |t| f(t);\n-   |         ^^^^ expected 0 parameters\n+   |         ^ - supplied 1 argument\n+   |         |\n+   |         expected 0 arguments\n \n error: aborting due to previous error\n "}, {"sha": "a952c9b46c9d8ec6a75c82986efd7f8a212c0145", "filename": "src/test/ui/issues/issue-18819.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,11 +1,13 @@\n-error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/issue-18819.rs:16:5\n    |\n LL | fn print_x(_: &dyn Foo<Item=bool>, extra: &str) {\n    | ----------------------------------------------- defined here\n ...\n LL |     print_x(X);\n-   |     ^^^^^^^^^^ expected 2 parameters\n+   |     ^^^^^^^ - supplied 1 argument\n+   |     |\n+   |     expected 2 arguments\n \n error: aborting due to previous error\n "}, {"sha": "78fb0491d82ddd6a548d50f4fc9d66134814a1f8", "filename": "src/test/ui/issues/issue-26094.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,13 +1,13 @@\n macro_rules! some_macro {\n     ($other: expr) => ({\n-        $other(None)\n-        //~^ this function takes 0 parameters but 1 parameter was supplied\n+        $other(None) //~ NOTE supplied 1 argument\n     })\n }\n \n-fn some_function() {}\n+fn some_function() {} //~ NOTE defined here\n \n fn main() {\n     some_macro!(some_function);\n-    //~^ in this expansion of some_macro!\n+    //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~| NOTE expected 0 arguments\n }"}, {"sha": "2038d88bf46519a128604be53654e63d16a6647d", "filename": "src/test/ui/issues/issue-26094.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,16 +1,14 @@\n-error[E0061]: this function takes 0 parameters but 1 parameter was supplied\n-  --> $DIR/issue-26094.rs:3:9\n+error[E0061]: this function takes 0 arguments but 1 argument was supplied\n+  --> $DIR/issue-26094.rs:10:17\n    |\n LL |         $other(None)\n-   |         ^^^^^^^^^^^^ expected 0 parameters\n+   |                ---- supplied 1 argument\n ...\n LL | fn some_function() {}\n    | ------------------ defined here\n ...\n LL |     some_macro!(some_function);\n-   |     --------------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                 ^^^^^^^^^^^^^ expected 0 arguments\n \n error: aborting due to previous error\n "}, {"sha": "81d76a90eb0ac42ab2f63936e838b418dfd8ec76", "filename": "src/test/ui/issues/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3044.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let needlesArr: Vec<char> = vec!['a', 'f'];\n     needlesArr.iter().fold(|x, y| {\n     });\n-    //~^^ ERROR this function takes 2 parameters but 1 parameter was supplied\n+    //~^^ ERROR this function takes 2 arguments but 1 argument was supplied\n }"}, {"sha": "d2c010659edd0fb477611d053c94ad776ce7eb98", "filename": "src/test/ui/issues/issue-3044.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,8 +1,12 @@\n-error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/issue-3044.rs:3:23\n    |\n-LL |     needlesArr.iter().fold(|x, y| {\n-   |                       ^^^^ expected 2 parameters\n+LL |       needlesArr.iter().fold(|x, y| {\n+   |  _______________________^^^^_-\n+   | |                       |\n+   | |                       expected 2 arguments\n+LL | |     });\n+   | |_____- supplied 1 argument\n \n error: aborting due to previous error\n "}, {"sha": "b342bbb1b8eab90d69c2b0f3ea61100b7654413e", "filename": "src/test/ui/issues/issue-4935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-4935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-4935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4935.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -3,4 +3,4 @@\n fn foo(a: usize) {}\n //~^ defined here\n fn main() { foo(5, 6) }\n-//~^ ERROR this function takes 1 parameter but 2 parameters were supplied\n+//~^ ERROR this function takes 1 argument but 2 arguments were supplied"}, {"sha": "0cc686e1cf87f9f18e52b4b5724e0c49d60c61c6", "filename": "src/test/ui/issues/issue-4935.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-4935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-4935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4935.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,11 +1,13 @@\n-error[E0061]: this function takes 1 parameter but 2 parameters were supplied\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/issue-4935.rs:5:13\n    |\n LL | fn foo(a: usize) {}\n    | ---------------- defined here\n LL |\n LL | fn main() { foo(5, 6) }\n-   |             ^^^^^^^^^ expected 1 parameter\n+   |             ^^^ -  - supplied 2 arguments\n+   |             |\n+   |             expected 1 argument\n \n error: aborting due to previous error\n "}, {"sha": "5c38d7c42f6b2797b2f1cf1c2532facea982a4f7", "filename": "src/test/ui/issues/issue-54348.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     [1][0u64 as usize];\n-    [1][1.5 as usize]; //~ ERROR index out of bounds\n-    [1][1u64 as usize]; //~ ERROR index out of bounds\n+    [1][1.5 as usize]; //~ ERROR operation will panic\n+    [1][1u64 as usize]; //~ ERROR operation will panic\n }"}, {"sha": "6b67125e36cb286e96d854ab94091c5509dbeaae", "filename": "src/test/ui/issues/issue-54348.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,16 +1,16 @@\n-error: index out of bounds: the len is 1 but the index is 1\n+error: this operation will panic at runtime\n   --> $DIR/issue-54348.rs:5:5\n    |\n LL |     [1][1.5 as usize];\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n-error: index out of bounds: the len is 1 but the index is 1\n+error: this operation will panic at runtime\n   --> $DIR/issue-54348.rs:6:5\n    |\n LL |     [1][1u64 as usize];\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3556ec08247b5af88e540557ec093ae18119e9d7", "filename": "src/test/ui/issues/issue-8460-const.noopt.stderr", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,150 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:14:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:16:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:18:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:20:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:24:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:26:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:30:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:32:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:34:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:36:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to divide by zero\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:42:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:46:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:48:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:52:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:54:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:58:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:60:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "3556ec08247b5af88e540557ec093ae18119e9d7", "filename": "src/test/ui/issues/issue-8460-const.opt.stderr", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,150 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:14:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:16:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:18:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:20:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:24:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:26:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:30:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:32:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:34:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:36:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to divide by zero\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:42:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:46:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:48:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:52:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:54:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:58:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:60:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "3556ec08247b5af88e540557ec093ae18119e9d7", "filename": "src/test/ui/issues/issue-8460-const.opt_with_overflow_checks.stderr", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,150 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:14:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:16:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:18:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:20:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:24:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:26:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:30:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:32:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:34:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:36:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to divide by zero\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:42:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:46:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:48:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:52:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:54:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:58:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:60:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "53005e46d2f47234372d58d1a27a02816a23f63f", "filename": "src/test/ui/issues/issue-8460-const.rs", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,5 +1,9 @@\n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // build-fail\n-// compile-flags: -O\n \n #![deny(const_err)]\n \n@@ -8,63 +12,51 @@ use std::thread;\n \n fn main() {\n     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n }"}, {"sha": "d7373948cb9e0519b03ba75aee12fcf156ecc2ff", "filename": "src/test/ui/issues/issue-8460-const.stderr", "status": "removed", "additions": 0, "deletions": 224, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,224 +0,0 @@\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:10:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/issue-8460-const.rs:4:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:10:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:13:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:13:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:16:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:16:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:19:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:19:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:22:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:22:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:25:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:25:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:28:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:30:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:32:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:34:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:36:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:38:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:40:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:40:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:43:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:43:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:46:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:46:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:49:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:49:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:52:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:52:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:55:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:55:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:58:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:60:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:62:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:64:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:66:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:68:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^\n-\n-error: aborting due to 36 previous errors\n-"}, {"sha": "afea859bb65a905ea32ed8f151d90c4833fdc4b7", "filename": "src/test/ui/issues/issue-8460-const2.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,58 +0,0 @@\n-// build-fail\n-// compile-flags: -C overflow-checks=on -O\n-\n-#![deny(const_err)]\n-\n-use std::{isize, i8, i16, i32, i64, i128};\n-use std::thread;\n-\n-fn main() {\n-    assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-}"}, {"sha": "e25d560fe0ce34e03b2cb53b030343fcb7e9b48c", "filename": "src/test/ui/issues/issue-8460-const2.stderr", "status": "removed", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,152 +0,0 @@\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:10:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/issue-8460-const2.rs:4:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:12:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:14:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:16:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:18:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:20:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:22:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:24:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:26:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:28:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:30:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:32:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:34:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:36:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:38:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:40:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:42:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:44:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:46:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:48:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:50:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:52:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:54:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:56:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^\n-\n-error: aborting due to 24 previous errors\n-"}, {"sha": "e60c461743c8fbe3605b8aa868d8d3c4db48499f", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:19:5\n    |\n LL | struct Foo<T> {\n-   |            - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     foo: &'static T\n    |     ^^^^^^^^^^^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19\n    |\n LL | trait X<K>: Sized {\n-   |         - help: consider adding an explicit lifetime bound `K: 'a`...\n+   |         - help: consider adding an explicit lifetime bound...: `K: 'a`\n LL |     fn foo<'a, L: X<&'a Nested<K>>>();\n    |                   ^^^^^^^^^^^^^^^^\n    |\n@@ -45,7 +45,7 @@ error[E0309]: the parameter type `L` may not live long enough\n LL |     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n    |                -     ^^^^^^^^^^^^^^^^\n    |                |\n-   |                help: consider adding an explicit lifetime bound `L: 'a`...\n+   |                help: consider adding an explicit lifetime bound...: `L: 'a`\n    |\n note: ...so that the reference type `&'a Nested<L>` does not outlive the data it points at\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:32:22\n@@ -57,7 +57,7 @@ error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:41:33\n    |\n LL | impl<K> Nested<K> {\n-   |      - help: consider adding an explicit lifetime bound `K: 'a`...\n+   |      - help: consider adding an explicit lifetime bound...: `K: 'a`\n LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n    |                                 ^^^^^^^^^^^^^^^^\n    |\n@@ -71,7 +71,7 @@ error[E0309]: the parameter type `M` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36\n    |\n LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-   |                                    ^^^^^^^^^^^^^^^^  -- help: consider adding an explicit lifetime bound `M: 'a`...\n+   |                                    ^^^^^^^^^^^^^^^^  -- help: consider adding an explicit lifetime bound...: `M: 'a +`\n    |\n note: ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36"}, {"sha": "ce9b02b6d82a781d7bc217dfb712febc569a1781", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.noopt.stderr", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,146 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n+   |\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+   |\n+LL | #![deny(arithmetic_overflow, const_err)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n+   |\n+LL |       let n = 1u8 << 8;\n+   |               ^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n+   |\n+LL |       let n = 1u16 << 16;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n+   |\n+LL |       let n = 1u32 << 32;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n+   |\n+LL |       let n = 1u64 << 64;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n+   |\n+LL |       let n = 1i8 << 8;\n+   |               ^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n+   |\n+LL |       let n = 1i16 << 16;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n+   |\n+LL |       let n = 1i32 << 32;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n+   |\n+LL |       let n = 1i64 << 64;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+   |\n+LL |       let n = 1u8 >> 8;\n+   |               ^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+   |\n+LL |       let n = 1u16 >> 16;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n+   |\n+LL |       let n = 1u32 >> 32;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n+   |\n+LL |       let n = 1u64 >> 64;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n+   |\n+LL |       let n = 1i8 >> 8;\n+   |               ^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n+   |\n+LL |       let n = 1i16 >> 16;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n+   |\n+LL |       let n = 1i32 >> 32;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n+   |\n+LL |       let n = 1i64 >> 64;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n+   |\n+LL |       let n = n << 8;\n+   |               ^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n+   |\n+LL |       let n = 1u8 << -8;\n+   |               ^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n+   |\n+LL |       let n = 1u8 << (4+4);\n+   |               ^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n+   |\n+LL |       let n = 1i64 >> [64][0];\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+   |\n+LL |       let n = 1_isize << BITS;\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n+   |\n+LL |       let n = 1_usize << BITS;\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "ce9b02b6d82a781d7bc217dfb712febc569a1781", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt.stderr", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,146 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n+   |\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+   |\n+LL | #![deny(arithmetic_overflow, const_err)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n+   |\n+LL |       let n = 1u8 << 8;\n+   |               ^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n+   |\n+LL |       let n = 1u16 << 16;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n+   |\n+LL |       let n = 1u32 << 32;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n+   |\n+LL |       let n = 1u64 << 64;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n+   |\n+LL |       let n = 1i8 << 8;\n+   |               ^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n+   |\n+LL |       let n = 1i16 << 16;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n+   |\n+LL |       let n = 1i32 << 32;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n+   |\n+LL |       let n = 1i64 << 64;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+   |\n+LL |       let n = 1u8 >> 8;\n+   |               ^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+   |\n+LL |       let n = 1u16 >> 16;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n+   |\n+LL |       let n = 1u32 >> 32;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n+   |\n+LL |       let n = 1u64 >> 64;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n+   |\n+LL |       let n = 1i8 >> 8;\n+   |               ^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n+   |\n+LL |       let n = 1i16 >> 16;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n+   |\n+LL |       let n = 1i32 >> 32;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n+   |\n+LL |       let n = 1i64 >> 64;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n+   |\n+LL |       let n = n << 8;\n+   |               ^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n+   |\n+LL |       let n = 1u8 << -8;\n+   |               ^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n+   |\n+LL |       let n = 1u8 << (4+4);\n+   |               ^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n+   |\n+LL |       let n = 1i64 >> [64][0];\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+   |\n+LL |       let n = 1_isize << BITS;\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n+   |\n+LL |       let n = 1_usize << BITS;\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "ce9b02b6d82a781d7bc217dfb712febc569a1781", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -0,0 +1,146 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n+   |\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+   |\n+LL | #![deny(arithmetic_overflow, const_err)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n+   |\n+LL |       let n = 1u8 << 8;\n+   |               ^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n+   |\n+LL |       let n = 1u16 << 16;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n+   |\n+LL |       let n = 1u32 << 32;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n+   |\n+LL |       let n = 1u64 << 64;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n+   |\n+LL |       let n = 1i8 << 8;\n+   |               ^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n+   |\n+LL |       let n = 1i16 << 16;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n+   |\n+LL |       let n = 1i32 << 32;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n+   |\n+LL |       let n = 1i64 << 64;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+   |\n+LL |       let n = 1u8 >> 8;\n+   |               ^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+   |\n+LL |       let n = 1u16 >> 16;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n+   |\n+LL |       let n = 1u32 >> 32;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n+   |\n+LL |       let n = 1u64 >> 64;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n+   |\n+LL |       let n = 1i8 >> 8;\n+   |               ^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n+   |\n+LL |       let n = 1i16 >> 16;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n+   |\n+LL |       let n = 1i32 >> 32;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n+   |\n+LL |       let n = 1i64 >> 64;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n+   |\n+LL |       let n = n << 8;\n+   |               ^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n+   |\n+LL |       let n = 1u8 << -8;\n+   |               ^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n+   |\n+LL |       let n = 1u8 << (4+4);\n+   |               ^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n+   |\n+LL |       let n = 1i64 >> [64][0];\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+   |\n+LL |       let n = 1_isize << BITS;\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n+   |\n+LL |       let n = 1_usize << BITS;\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "7deee5320a87880e4adb01de4f649400db40f798", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 50, "deletions": 21, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,50 +1,79 @@\n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // build-fail\n-// compile-flags: -O\n \n-#![deny(exceeding_bitshifts, const_err)]\n+#![crate_type=\"lib\"]\n+#![deny(arithmetic_overflow, const_err)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n \n-fn main() {\n+pub trait Foo {\n+    const N: i32;\n+}\n+\n+impl<T: Foo> Foo for Vec<T> {\n+    const N: i32 = T::N << 42; // FIXME this should warn\n+}\n+\n+pub fn foo(x: i32) {\n+    let _ = x << 42; //~ ERROR: arithmetic operation will overflow\n+}\n+\n+pub fn main() {\n       let n = 1u8 << 7;\n-      let n = 1u8 << 8;   //~ ERROR: attempt to shift left with overflow\n+      let n = 1u8 << 8;   //~ ERROR: arithmetic operation will overflow\n       let n = 1u16 << 15;\n-      let n = 1u16 << 16; //~ ERROR: attempt to shift left with overflow\n+      let n = 1u16 << 16; //~ ERROR: arithmetic operation will overflow\n       let n = 1u32 << 31;\n-      let n = 1u32 << 32; //~ ERROR: attempt to shift left with overflow\n+      let n = 1u32 << 32; //~ ERROR: arithmetic operation will overflow\n       let n = 1u64 << 63;\n-      let n = 1u64 << 64; //~ ERROR: attempt to shift left with overflow\n+      let n = 1u64 << 64; //~ ERROR: arithmetic operation will overflow\n       let n = 1i8 << 7;\n-      let n = 1i8 << 8;   //~ ERROR: attempt to shift left with overflow\n+      let n = 1i8 << 8;   //~ ERROR: arithmetic operation will overflow\n       let n = 1i16 << 15;\n-      let n = 1i16 << 16; //~ ERROR: attempt to shift left with overflow\n+      let n = 1i16 << 16; //~ ERROR: arithmetic operation will overflow\n       let n = 1i32 << 31;\n-      let n = 1i32 << 32; //~ ERROR: attempt to shift left with overflow\n+      let n = 1i32 << 32; //~ ERROR: arithmetic operation will overflow\n       let n = 1i64 << 63;\n-      let n = 1i64 << 64; //~ ERROR: attempt to shift left with overflow\n+      let n = 1i64 << 64; //~ ERROR: arithmetic operation will overflow\n \n       let n = 1u8 >> 7;\n-      let n = 1u8 >> 8;   //~ ERROR: attempt to shift right with overflow\n+      let n = 1u8 >> 8;   //~ ERROR: arithmetic operation will overflow\n       let n = 1u16 >> 15;\n-      let n = 1u16 >> 16; //~ ERROR: attempt to shift right with overflow\n+      let n = 1u16 >> 16; //~ ERROR: arithmetic operation will overflow\n       let n = 1u32 >> 31;\n-      let n = 1u32 >> 32; //~ ERROR: attempt to shift right with overflow\n+      let n = 1u32 >> 32; //~ ERROR: arithmetic operation will overflow\n       let n = 1u64 >> 63;\n-      let n = 1u64 >> 64; //~ ERROR: attempt to shift right with overflow\n+      let n = 1u64 >> 64; //~ ERROR: arithmetic operation will overflow\n       let n = 1i8 >> 7;\n-      let n = 1i8 >> 8;   //~ ERROR: attempt to shift right with overflow\n+      let n = 1i8 >> 8;   //~ ERROR: arithmetic operation will overflow\n       let n = 1i16 >> 15;\n-      let n = 1i16 >> 16; //~ ERROR: attempt to shift right with overflow\n+      let n = 1i16 >> 16; //~ ERROR: arithmetic operation will overflow\n       let n = 1i32 >> 31;\n-      let n = 1i32 >> 32; //~ ERROR: attempt to shift right with overflow\n+      let n = 1i32 >> 32; //~ ERROR: arithmetic operation will overflow\n       let n = 1i64 >> 63;\n-      let n = 1i64 >> 64; //~ ERROR: attempt to shift right with overflow\n+      let n = 1i64 >> 64; //~ ERROR: arithmetic operation will overflow\n \n       let n = 1u8;\n       let n = n << 7;\n-      let n = n << 8; //~ ERROR: attempt to shift left with overflow\n+      let n = n << 8; //~ ERROR: arithmetic operation will overflow\n \n-      let n = 1u8 << -8; //~ ERROR: attempt to shift left with overflow\n+      let n = 1u8 << -8; //~ ERROR: arithmetic operation will overflow\n \n       let n = 1i8<<(1isize+-1);\n+\n+      let n = 1u8 << (4+3);\n+      let n = 1u8 << (4+4); //~ ERROR: arithmetic operation will overflow\n+      let n = 1i64 >> [63][0];\n+      let n = 1i64 >> [64][0]; //~ ERROR: arithmetic operation will overflow\n+\n+      #[cfg(target_pointer_width = \"32\")]\n+      const BITS: usize = 32;\n+      #[cfg(target_pointer_width = \"64\")]\n+      const BITS: usize = 64;\n+      let n = 1_isize << BITS; //~ ERROR: arithmetic operation will overflow\n+      let n = 1_usize << BITS; //~ ERROR: arithmetic operation will overflow\n }"}, {"sha": "658577213b3cd57c2ac23db5db6390aa90d1ee11", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.stderr", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.stderr?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,116 +0,0 @@\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:10:15\n-   |\n-LL |       let n = 1u8 << 8;\n-   |               ^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts.rs:4:9\n-   |\n-LL | #![deny(exceeding_bitshifts, const_err)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:12:15\n-   |\n-LL |       let n = 1u16 << 16;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:14:15\n-   |\n-LL |       let n = 1u32 << 32;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:16:15\n-   |\n-LL |       let n = 1u64 << 64;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:18:15\n-   |\n-LL |       let n = 1i8 << 8;\n-   |               ^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:20:15\n-   |\n-LL |       let n = 1i16 << 16;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:22:15\n-   |\n-LL |       let n = 1i32 << 32;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:24:15\n-   |\n-LL |       let n = 1i64 << 64;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n-   |\n-LL |       let n = 1u8 >> 8;\n-   |               ^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n-   |\n-LL |       let n = 1u16 >> 16;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n-   |\n-LL |       let n = 1u32 >> 32;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n-   |\n-LL |       let n = 1u64 >> 64;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n-   |\n-LL |       let n = 1i8 >> 8;\n-   |               ^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n-   |\n-LL |       let n = 1i16 >> 16;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n-   |\n-LL |       let n = 1i32 >> 32;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n-   |\n-LL |       let n = 1i64 >> 64;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:45:15\n-   |\n-LL |       let n = n << 8;\n-   |               ^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:47:15\n-   |\n-LL |       let n = 1u8 << -8;\n-   |               ^^^^^^^^^\n-\n-error: aborting due to 18 previous errors\n-"}, {"sha": "2a7cbc10f7746c6959e79c9728c51ec228cb4d7c", "filename": "src/test/ui/lint/lint-exceeding-bitshifts2.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.rs?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,20 +0,0 @@\n-// build-fail\n-// compile-flags: -O\n-\n-#![deny(exceeding_bitshifts, const_err)]\n-#![allow(unused_variables)]\n-#![allow(dead_code)]\n-\n-fn main() {\n-      let n = 1u8 << (4+3);\n-      let n = 1u8 << (4+4); //~ ERROR: attempt to shift left with overflow\n-      let n = 1i64 >> [63][0];\n-      let n = 1i64 >> [64][0]; //~ ERROR: attempt to shift right with overflow\n-\n-      #[cfg(target_pointer_width = \"32\")]\n-      const BITS: usize = 32;\n-      #[cfg(target_pointer_width = \"64\")]\n-      const BITS: usize = 64;\n-      let n = 1_isize << BITS; //~ ERROR: attempt to shift left with overflow\n-      let n = 1_usize << BITS; //~ ERROR: attempt to shift left with overflow\n-}"}, {"sha": "ac9f3b1e56bc3953f5ed12eadd9bcd1cc66fbf4c", "filename": "src/test/ui/lint/lint-exceeding-bitshifts2.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.stderr?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -1,32 +0,0 @@\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts2.rs:10:15\n-   |\n-LL |       let n = 1u8 << (4+4);\n-   |               ^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts2.rs:4:9\n-   |\n-LL | #![deny(exceeding_bitshifts, const_err)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts2.rs:12:15\n-   |\n-LL |       let n = 1i64 >> [64][0];\n-   |               ^^^^^^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts2.rs:18:15\n-   |\n-LL |       let n = 1_isize << BITS;\n-   |               ^^^^^^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts2.rs:19:15\n-   |\n-LL |       let n = 1_usize << BITS;\n-   |               ^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "9bfacc7babf2e25244b76169968e4574a73c2e83", "filename": "src/test/ui/methods/method-call-err-msg.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -5,16 +5,18 @@ impl Foo {\n     fn zero(self) -> Foo { self }\n     fn one(self, _: isize) -> Foo { self }\n     fn two(self, _: isize, _: isize) -> Foo { self }\n+    fn three<T>(self, _: T, _: T, _: T) -> Foo { self }\n }\n \n fn main() {\n     let x = Foo;\n-    x.zero(0)   //~ ERROR this function takes 0 parameters but 1 parameter was supplied\n-     .one()     //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n-     .two(0);   //~ ERROR this function takes 2 parameters but 1 parameter was supplied\n+    x.zero(0)   //~ ERROR this function takes 0 arguments but 1 argument was supplied\n+     .one()     //~ ERROR this function takes 1 argument but 0 arguments were supplied\n+     .two(0);   //~ ERROR this function takes 2 arguments but 1 argument was supplied\n \n     let y = Foo;\n     y.zero()\n      .take()    //~ ERROR no method named `take` found\n      .one(0);\n+    y.three::<usize>(); //~ ERROR this function takes 3 arguments but 0 arguments were supplied\n }"}, {"sha": "ab1ef5b9d5aed6980f3c7f27fa94906c08119fc8", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,32 +1,38 @@\n-error[E0061]: this function takes 0 parameters but 1 parameter was supplied\n-  --> $DIR/method-call-err-msg.rs:12:7\n+error[E0061]: this function takes 0 arguments but 1 argument was supplied\n+  --> $DIR/method-call-err-msg.rs:13:7\n    |\n LL |     fn zero(self) -> Foo { self }\n    |     -------------------- defined here\n ...\n LL |     x.zero(0)\n-   |       ^^^^ expected 0 parameters\n+   |       ^^^^ - supplied 1 argument\n+   |       |\n+   |       expected 0 arguments\n \n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n-  --> $DIR/method-call-err-msg.rs:13:7\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+  --> $DIR/method-call-err-msg.rs:14:7\n    |\n LL |     fn one(self, _: isize) -> Foo { self }\n    |     ----------------------------- defined here\n ...\n LL |      .one()\n-   |       ^^^ expected 1 parameter\n+   |       ^^^- supplied 0 arguments\n+   |       |\n+   |       expected 1 argument\n \n-error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n-  --> $DIR/method-call-err-msg.rs:14:7\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n+  --> $DIR/method-call-err-msg.rs:15:7\n    |\n LL |     fn two(self, _: isize, _: isize) -> Foo { self }\n    |     --------------------------------------- defined here\n ...\n LL |      .two(0);\n-   |       ^^^ expected 2 parameters\n+   |       ^^^ - supplied 1 argument\n+   |       |\n+   |       expected 2 arguments\n \n error[E0599]: no method named `take` found for struct `Foo` in the current scope\n-  --> $DIR/method-call-err-msg.rs:18:7\n+  --> $DIR/method-call-err-msg.rs:19:7\n    |\n LL | pub struct Foo;\n    | --------------- method `take` not found for this\n@@ -41,7 +47,18 @@ LL |      .take()\n            candidate #1: `std::io::Read`\n            candidate #2: `std::iter::Iterator`\n \n-error: aborting due to 4 previous errors\n+error[E0061]: this function takes 3 arguments but 0 arguments were supplied\n+  --> $DIR/method-call-err-msg.rs:21:7\n+   |\n+LL |     fn three<T>(self, _: T, _: T, _: T) -> Foo { self }\n+   |     ------------------------------------------ defined here\n+...\n+LL |     y.three::<usize>();\n+   |       ^^^^^--------- supplied 0 arguments\n+   |       |\n+   |       expected 3 arguments\n+\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0061, E0599.\n For more information about an error, try `rustc --explain E0061`."}, {"sha": "902a6ec81d60b9cd87d328c50e1a3c89f6495382", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -27,7 +27,7 @@ fn main() {\n     };\n     let ans = s(\"what\");    //~ ERROR mismatched types\n     let ans = s();\n-    //~^ ERROR this function takes 1 parameter but 0 parameters were supplied\n+    //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n     let ans = s(\"burma\", \"shave\");\n-    //~^ ERROR this function takes 1 parameter but 2 parameters were supplied\n+    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n }"}, {"sha": "706e25529bfafbd62b2d86e2b72a0fcf30f9a2d2", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -4,17 +4,21 @@ error[E0308]: mismatched types\n LL |     let ans = s(\"what\");\n    |                 ^^^^^^ expected `isize`, found `&str`\n \n-error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0057]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:29:15\n    |\n LL |     let ans = s();\n-   |               ^^^ expected 1 parameter\n+   |               ^-- supplied 0 arguments\n+   |               |\n+   |               expected 1 argument\n \n-error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n+error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:31:15\n    |\n LL |     let ans = s(\"burma\", \"shave\");\n-   |               ^^^^^^^^^^^^^^^^^^^ expected 1 parameter\n+   |               ^ -------  ------- supplied 2 arguments\n+   |               |\n+   |               expected 1 argument\n \n error: aborting due to 3 previous errors\n "}, {"sha": "631bb1dd27415c272305dfb21ebfef79147c909d", "filename": "src/test/ui/not-enough-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fnot-enough-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fnot-enough-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-enough-arguments.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -8,5 +8,5 @@ fn foo(a: isize, b: isize, c: isize, d:isize) {\n \n fn main() {\n   foo(1, 2, 3);\n-  //~^ ERROR this function takes 4 parameters but 3\n+  //~^ ERROR this function takes 4 arguments but 3\n }"}, {"sha": "f2b57f71400f1c9fb15679185346b3c84ce60352", "filename": "src/test/ui/not-enough-arguments.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,11 +1,13 @@\n-error[E0061]: this function takes 4 parameters but 3 parameters were supplied\n+error[E0061]: this function takes 4 arguments but 3 arguments were supplied\n   --> $DIR/not-enough-arguments.rs:10:3\n    |\n LL | fn foo(a: isize, b: isize, c: isize, d:isize) {\n    | --------------------------------------------- defined here\n ...\n LL |   foo(1, 2, 3);\n-   |   ^^^^^^^^^^^^ expected 4 parameters\n+   |   ^^^ -  -  - supplied 3 arguments\n+   |   |\n+   |   expected 4 arguments\n \n error: aborting due to previous error\n "}, {"sha": "14727000b2c2404992dec9d9662744695508cdce", "filename": "src/test/ui/regions/regions-close-object-into-object-5.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |     ^^^^^^^^^^\n@@ -17,7 +17,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -32,7 +32,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:9\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |         ^\n@@ -47,7 +47,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:9\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |         ^^^^^^\n@@ -62,7 +62,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |           ^^^\n@@ -77,7 +77,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |           ^^^\n@@ -92,7 +92,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |           ^^^"}, {"sha": "ed9a604e717dd617199cc127bef35345bab87833", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:10:5\n    |\n LL | fn make_object1<A:SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n-   |                 -- help: consider adding an explicit lifetime bound `A: 'static`...\n+   |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     box v as Box<dyn SomeTrait + 'static>\n    |     ^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0310]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:10:5\n    |\n LL | fn make_object1<A:SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n-   |                 -- help: consider adding an explicit lifetime bound `A: 'static`...\n+   |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     box v as Box<dyn SomeTrait + 'static>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -30,7 +30,7 @@ error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:20:5\n    |\n LL | fn make_object3<'a,'b,A:SomeTrait+'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n-   |                       -- help: consider adding an explicit lifetime bound `A: 'b`...\n+   |                       -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n LL |     box v as Box<dyn SomeTrait + 'b>\n    |     ^^^^^\n    |\n@@ -44,7 +44,7 @@ error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:20:5\n    |\n LL | fn make_object3<'a,'b,A:SomeTrait+'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n-   |                       -- help: consider adding an explicit lifetime bound `A: 'b`...\n+   |                       -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n LL |     box v as Box<dyn SomeTrait + 'b>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "3b1a89d9ced77b1e5be4698699d45188bceacd5c", "filename": "src/test/ui/regions/regions-close-param-into-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:6:5\n    |\n LL | fn p1<T>(v: T) -> Box<dyn X + 'static>\n-   |       - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n ...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^\n@@ -17,7 +17,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:12:5\n    |\n LL | fn p2<T>(v: Box<T>) -> Box<dyn X + 'static>\n-   |       - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n ...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^\n@@ -32,7 +32,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:18:5\n    |\n LL | fn p3<'a,T>(v: T) -> Box<dyn X + 'a>\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^\n@@ -47,7 +47,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:24:5\n    |\n LL | fn p4<'a,T>(v: Box<T>) -> Box<dyn X + 'a>\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^"}, {"sha": "297fcb088d2bf0114f283e96ba6819f98ceb034a", "filename": "src/test/ui/regions/regions-enum-not-wf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:18:18\n    |\n LL | enum Ref1<'a, T> {\n-   |               - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref1Variant1(RequireOutlives<'a, T>)\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:23:25\n    |\n LL | enum Ref2<'a, T> {\n-   |               - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref2Variant1,\n LL |     Ref2Variant2(isize, RequireOutlives<'a, T>),\n    |                         ^^^^^^^^^^^^^^^^^^^^^^\n@@ -31,7 +31,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:35:1\n    |\n LL |   enum RefDouble<'a, 'b, T> {\n-   |   ^                      - help: consider adding an explicit lifetime bound `T: 'b`...\n+   |   ^                      - help: consider adding an explicit lifetime bound...: `T: 'b`\n    |  _|\n    | |\n LL | |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n@@ -52,7 +52,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:36:23\n    |\n LL | enum RefDouble<'a, 'b, T> {\n-   |                        - help: consider adding an explicit lifetime bound `T: 'b`...\n+   |                        - help: consider adding an explicit lifetime bound...: `T: 'b`\n LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "2f1a4cea8e9ac6f672f90d8343590724ed4d1865", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-implied-bounds-projection-gap-1.rs:16:10\n    |\n LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n-   |             -- help: consider adding an explicit lifetime bound `T: 'x`...\n+   |             -- help: consider adding an explicit lifetime bound...: `T: 'x +`\n LL | {\n LL |     wf::<&'x T>();\n    |          ^^^^^"}, {"sha": "a5a0ff52fac126c8012671a9693ab099346546a8", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:33:5\n    |\n LL | fn bar1<'a,A>(x: Inv<'a>, a: A) {\n-   |            - help: consider adding an explicit lifetime bound `A: 'a`...\n+   |            - help: consider adding an explicit lifetime bound...: `A: 'a`\n LL |     check_bound(x, a)\n    |     ^^^^^^^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:37:5\n    |\n LL | fn bar2<'a,'b,A:Is<'b>>(x: Inv<'a>, y: Inv<'b>, a: A) {\n-   |               -- help: consider adding an explicit lifetime bound `A: 'a`...\n+   |               -- help: consider adding an explicit lifetime bound...: `A: 'a +`\n LL |     check_bound(x, a)\n    |     ^^^^^^^^^^^\n    |"}, {"sha": "992bcd7977fcfc12931981cf7d89739229bbf3d4", "filename": "src/test/ui/resolve/resolve-primitive-fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     // Make sure primitive type fallback doesn't work in value namespace\n     std::mem::size_of(u16);\n     //~^ ERROR expected value, found builtin type `u16`\n-    //~| ERROR this function takes 0 parameters but 1 parameter was supplied\n+    //~| ERROR this function takes 0 arguments but 1 argument was supplied\n \n     // Make sure primitive type fallback doesn't work with global paths\n     let _: ::u8;"}, {"sha": "6d61d2f16cafa5861132ca1cdef748ca4c666941", "filename": "src/test/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -10,11 +10,13 @@ error[E0412]: cannot find type `u8` in the crate root\n LL |     let _: ::u8;\n    |              ^^ not found in the crate root\n \n-error[E0061]: this function takes 0 parameters but 1 parameter was supplied\n+error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/resolve-primitive-fallback.rs:3:5\n    |\n LL |     std::mem::size_of(u16);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ expected 0 parameters\n+   |     ^^^^^^^^^^^^^^^^^ --- supplied 1 argument\n+   |     |\n+   |     expected 0 arguments\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c3cfc5a4d97c82953f97e0eb558d87244cb4d09b", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/dont-infer-static.rs:8:5\n    |\n LL | struct Foo<U> {\n-   |            - help: consider adding an explicit lifetime bound `U: 'static`...\n+   |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n    |     ^^^^^^^^^^^\n    |"}, {"sha": "297fcb088d2bf0114f283e96ba6819f98ceb034a", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-enum-not-wf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:18:18\n    |\n LL | enum Ref1<'a, T> {\n-   |               - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref1Variant1(RequireOutlives<'a, T>)\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:23:25\n    |\n LL | enum Ref2<'a, T> {\n-   |               - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref2Variant1,\n LL |     Ref2Variant2(isize, RequireOutlives<'a, T>),\n    |                         ^^^^^^^^^^^^^^^^^^^^^^\n@@ -31,7 +31,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:35:1\n    |\n LL |   enum RefDouble<'a, 'b, T> {\n-   |   ^                      - help: consider adding an explicit lifetime bound `T: 'b`...\n+   |   ^                      - help: consider adding an explicit lifetime bound...: `T: 'b`\n    |  _|\n    | |\n LL | |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n@@ -52,7 +52,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:36:23\n    |\n LL | enum RefDouble<'a, 'b, T> {\n-   |                        - help: consider adding an explicit lifetime bound `T: 'b`...\n+   |                        - help: consider adding an explicit lifetime bound...: `T: 'b`\n LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "f6658891fa622182e4080ff376fd856224adfe9f", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-struct-not-wf.rs:13:5\n    |\n LL | impl<'a, T> Trait<'a, T> for usize {\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a T;\n    |     ^^^^^^^^^^^^^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-struct-not-wf.rs:21:5\n    |\n LL | impl<'a, T> Trait<'a, T> for u32 {\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = RefOk<'a, T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "31579e282896402d067d47b61d507c0921f252ae", "filename": "src/test/ui/span/E0057.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0057.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,14 +1,18 @@\n-error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0057]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/E0057.rs:3:13\n    |\n LL |     let a = f();\n-   |             ^^^ expected 1 parameter\n+   |             ^-- supplied 0 arguments\n+   |             |\n+   |             expected 1 argument\n \n-error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n+error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/E0057.rs:5:13\n    |\n LL |     let c = f(2, 3);\n-   |             ^^^^^^^ expected 1 parameter\n+   |             ^ -  - supplied 2 arguments\n+   |             |\n+   |             expected 1 argument\n \n error: aborting due to 2 previous errors\n "}, {"sha": "116f5ddd5b4b20c73f997e34b150bb2186460acc", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -50,29 +50,33 @@ help: if this is a type, explicitly ignore the parameter name\n LL | fn bar(_: x, y: usize) {}\n    |        ^^^^\n \n-error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:7:5\n    |\n LL | fn foo(Option<i32>, String) {}\n    | --------------------------- defined here\n ...\n LL |     foo(Some(42), 2, \"\");\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected 2 parameters\n+   |     ^^^ --------  -  -- supplied 3 arguments\n+   |     |\n+   |     expected 2 arguments\n \n error[E0308]: mismatched types\n   --> $DIR/issue-34264.rs:8:13\n    |\n LL |     bar(\"\", \"\");\n    |             ^^ expected `usize`, found `&str`\n \n-error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:10:5\n    |\n LL | fn bar(x, y: usize) {}\n    | ------------------- defined here\n ...\n LL |     bar(1, 2, 3);\n-   |     ^^^^^^^^^^^^ expected 2 parameters\n+   |     ^^^ -  -  - supplied 3 arguments\n+   |     |\n+   |     expected 2 arguments\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f6344fba3d3684ebca198be5241dc110582f3833", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,68 +1,72 @@\n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:11:33\n    |\n LL |     let _: Result<(), String> = Ok();\n-   |                                 ^^^^\n+   |                                 ^^-- supplied 0 arguments\n    |\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     let _: Result<(), String> = Ok(());\n    |                                    ^^\n \n-error[E0061]: this function takes 2 parameters but 0 parameters were supplied\n+error[E0061]: this function takes 2 arguments but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:12:5\n    |\n LL | fn foo(():(), ():()) {}\n    | -------------------- defined here\n ...\n LL |     foo();\n-   |     ^^^^^ expected 2 parameters\n+   |     ^^^-- supplied 0 arguments\n+   |     |\n+   |     expected 2 arguments\n \n-error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/missing-unit-argument.rs:13:5\n    |\n LL | fn foo(():(), ():()) {}\n    | -------------------- defined here\n ...\n LL |     foo(());\n-   |     ^^^^^^^ expected 2 parameters\n+   |     ^^^ -- supplied 1 argument\n+   |     |\n+   |     expected 2 arguments\n \n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:14:5\n    |\n LL | fn bar(():()) {}\n    | ------------- defined here\n ...\n LL |     bar();\n-   |     ^^^^^\n+   |     ^^^-- supplied 0 arguments\n    |\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     bar(());\n    |         ^^\n \n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:15:7\n    |\n LL |     fn baz(self, (): ()) { }\n    |     -------------------- defined here\n ...\n LL |     S.baz();\n-   |       ^^^\n+   |       ^^^- supplied 0 arguments\n    |\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     S.baz(());\n    |           ^^\n \n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:16:7\n    |\n LL |     fn generic<T>(self, _: T) { }\n    |     ------------------------- defined here\n ...\n LL |     S.generic::<()>();\n-   |       ^^^^^^^\n+   |       ^^^^^^^------ supplied 0 arguments\n    |\n help: expected the unit value `()`; create it with empty parentheses\n    |"}, {"sha": "589ee1a474ad6e2f5bf4e834c6ceeac4d54989d8", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -3,7 +3,7 @@\n use std::fmt::Debug;\n \n fn foo(d: impl Debug + 'static) {\n-//~^ HELP consider adding an explicit lifetime bound  `'static` to `impl Debug`\n+//~^ HELP consider adding an explicit lifetime bound...\n     bar(d);\n //~^ ERROR the parameter type `impl Debug` may not live long enough\n //~| NOTE ...so that the type `impl Debug` will meet its required lifetime bounds"}, {"sha": "9a87129fbf28ad2ff402e081d9a4f312f05f088b", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -3,7 +3,7 @@\n use std::fmt::Debug;\n \n fn foo(d: impl Debug) {\n-//~^ HELP consider adding an explicit lifetime bound  `'static` to `impl Debug`\n+//~^ HELP consider adding an explicit lifetime bound...\n     bar(d);\n //~^ ERROR the parameter type `impl Debug` may not live long enough\n //~| NOTE ...so that the type `impl Debug` will meet its required lifetime bounds"}, {"sha": "b6e6c0bbf32df95ec3753bb5ce9c59665a860924", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,6 +1,9 @@\n error[E0310]: the parameter type `impl Debug` may not live long enough\n   --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n    |\n+LL | fn foo(d: impl Debug) {\n+   |           ---------- help: consider adding an explicit lifetime bound...: `impl Debug + 'static`\n+LL |\n LL |     bar(d);\n    |     ^^^\n    |\n@@ -9,10 +12,6 @@ note: ...so that the type `impl Debug` will meet its required lifetime bounds\n    |\n LL |     bar(d);\n    |     ^^^\n-help: consider adding an explicit lifetime bound  `'static` to `impl Debug`...\n-   |\n-LL | fn foo(d: impl Debug + 'static) {\n-   |           ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d012687533bbeda82d1816771d1ba9fc125272a0", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -18,6 +18,6 @@ impl E2 {\n }\n \n fn main() {\n-    <E>::V(); //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n+    <E>::V(); //~ ERROR this function takes 1 argument but 0 arguments were supplied\n     let _: u8 = <E2>::V; //~ ERROR mismatched types\n }"}, {"sha": "46e7dd0c517e858ae9d081b6b31050fee1cdf8d7", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,11 +1,13 @@\n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:21:5\n    |\n LL |     V(u8)\n    |     ----- defined here\n ...\n LL |     <E>::V();\n-   |     ^^^^^^^^ expected 1 parameter\n+   |     ^^^^^^-- supplied 0 arguments\n+   |     |\n+   |     expected 1 argument\n \n error[E0308]: mismatched types\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:22:17"}, {"sha": "22e2391f8380bc89c900c92bb427c97dbd4057b5", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -25,7 +25,7 @@ LL | type WrongGeneric<T> = impl 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-   |                  - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n    |\n note: ...so that the type `T` will meet its required lifetime bounds\n   --> $DIR/generic_type_does_not_live_long_enough.rs:9:1"}, {"sha": "9f9b6f06bbc24f9a781d38a9b2ec0b29d32adc4b", "filename": "src/test/ui/type/type-ascription-instead-of-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.rs?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x: Vec::with_capacity(10, 20);  //~ ERROR expected type, found `10`\n-    //~^ ERROR this function takes 1 parameter\n+    //~^ ERROR this function takes 1 argument\n }"}, {"sha": "530f77e5ae9b946cd99c55495357d6c5a71ad47d", "filename": "src/test/ui/type/type-ascription-instead-of-initializer.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -7,11 +7,13 @@ LL |     let x: Vec::with_capacity(10, 20);\n    |         |help: use `=` if you meant to assign\n    |         while parsing the type for `x`\n \n-error[E0061]: this function takes 1 parameter but 2 parameters were supplied\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/type-ascription-instead-of-initializer.rs:2:12\n    |\n LL |     let x: Vec::with_capacity(10, 20);\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 parameter\n+   |            ^^^^^^^^^^^^^^^^^^ --  -- supplied 2 arguments\n+   |            |\n+   |            expected 1 argument\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9942c80effe4b25744674217935ed7e65bf0a022", "filename": "src/test/ui/wf/wf-impl-associated-type-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-impl-associated-type-region.rs:10:5\n    |\n LL | impl<'a, T> Foo<'a> for T {\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Bar = &'a T;\n    |     ^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "7dc8f5a96611b9d43f84b0e4d5aa4fb1b42b8e9b", "filename": "src/test/ui/wf/wf-in-fn-type-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-fn-type-static.rs:13:5\n    |\n LL | struct Foo<T> {\n-   |            - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: 'static\n LL |     x: fn() -> &'static T\n    |     ^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-fn-type-static.rs:18:5\n    |\n LL | struct Bar<T> {\n-   |            - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: Copy\n LL |     x: fn(&'static T)\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "32c3198d55be4b17c1a1d5d7460399debb4361b0", "filename": "src/test/ui/wf/wf-in-obj-type-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-obj-type-static.rs:14:5\n    |\n LL | struct Foo<T> {\n-   |            - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: 'static\n LL |     x: dyn Object<&'static T>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "52786fb3bca96e1034449427b0a47f30ef6446fd", "filename": "src/test/ui/wf/wf-outlives-ty-in-fn-or-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c462a2f776b899d46743b1b44eda976e846e61d/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr?ref=2c462a2f776b899d46743b1b44eda976e846e61d", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:9:5\n    |\n LL | impl<'a, T> Trait<'a, T> for usize {\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a fn(T);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:5\n    |\n LL | impl<'a, T> Trait<'a, T> for u32 {\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a dyn Baz<T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}]}