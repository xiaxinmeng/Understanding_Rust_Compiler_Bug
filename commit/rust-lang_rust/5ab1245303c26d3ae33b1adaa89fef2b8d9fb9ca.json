{"sha": "5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca", "node_id": "C_kwDOAAsO6NoAKDVhYjEyNDUzMDNjMjZkM2FlMzNiMWFkYWE4OWZlZjJiOGQ5ZmI5Y2E", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T21:46:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T21:46:52Z"}, "message": "Rollup merge of #89441 - Nadrieril:fix-89393, r=tmandry\n\nNormalize after substituting via `field.ty()`\n\nBack in https://github.com/rust-lang/rust/issues/72476 I hadn't understood where the problem was coming from, and only worked around the issue. What happens is that calling `field.ty()` on a field of a generic struct substitutes the appropriate generics but doesn't normalize the resulting type.\nAs a consumer of types I'm surprised that one would substitute without normalizing, feels like a footgun, so I added a comment.\n\nFixes https://github.com/rust-lang/rust/issues/89393.", "tree": {"sha": "bbd7a3f43561a8f7c88d76fc9b162c4bf7620069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbd7a3f43561a8f7c88d76fc9b162c4bf7620069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhV4HMCRBK7hj4Ov3rIwAAaA4IAFmn0CL6sJRdpHk2tCGaDV96\nFNhPBNCOHWseQX/yOjKu26AyDCYsxdwPapA0XiSLqJwukRQo3KaxVRgxCqP1WSZo\nKwOPIdVjmYRdAinqWQuhxMnm7BO6BQplkiiCaOZOtKxXulGdwwSsDRLpVpx9dWQC\nuTeuuUER64Ty1hQs3IeNQ7SbjxjL1a8MTcWABmFCh/n0UaJMbv4NHR1IEjLTwM1F\nLZZEZyVIdTFX59p1ORn1h3No4qV9zxx5TwMxgT0RbB/Kl37H8PatyI3vRGpd7Y2t\nHTs9diaoDCujTwuOJJDwAwmImdt5fb8iB1LWxSl0c6KxQI8yoBKLyg1BtbhC74w=\n=zTTn\n-----END PGP SIGNATURE-----\n", "payload": "tree bbd7a3f43561a8f7c88d76fc9b162c4bf7620069\nparent b458ecf29dc65e3e62785a4e3fdacbec1f18188b\nparent 68b76a48358e611e31de8e96c56b9e50862a960e\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633124812 -0700\ncommitter GitHub <noreply@github.com> 1633124812 -0700\n\nRollup merge of #89441 - Nadrieril:fix-89393, r=tmandry\n\nNormalize after substituting via `field.ty()`\n\nBack in https://github.com/rust-lang/rust/issues/72476 I hadn't understood where the problem was coming from, and only worked around the issue. What happens is that calling `field.ty()` on a field of a generic struct substitutes the appropriate generics but doesn't normalize the resulting type.\nAs a consumer of types I'm surprised that one would substitute without normalizing, feels like a footgun, so I added a comment.\n\nFixes https://github.com/rust-lang/rust/issues/89393.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca", "html_url": "https://github.com/rust-lang/rust/commit/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b458ecf29dc65e3e62785a4e3fdacbec1f18188b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b458ecf29dc65e3e62785a4e3fdacbec1f18188b", "html_url": "https://github.com/rust-lang/rust/commit/b458ecf29dc65e3e62785a4e3fdacbec1f18188b"}, {"sha": "68b76a48358e611e31de8e96c56b9e50862a960e", "url": "https://api.github.com/repos/rust-lang/rust/commits/68b76a48358e611e31de8e96c56b9e50862a960e", "html_url": "https://github.com/rust-lang/rust/commit/68b76a48358e611e31de8e96c56b9e50862a960e"}], "stats": {"total": 89, "additions": 62, "deletions": 27}, "files": [{"sha": "82fad07b157575d094b9090d70481cf05bc7770e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca", "patch": "@@ -1640,8 +1640,8 @@ impl ReprOptions {\n }\n \n impl<'tcx> FieldDef {\n-    /// Returns the type of this field. The `subst` is typically obtained\n-    /// via the second field of `TyKind::AdtDef`.\n+    /// Returns the type of this field. The resulting type is not normalized. The `subst` is\n+    /// typically obtained via the second field of `TyKind::AdtDef`.\n     pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {\n         tcx.type_of(self.did).subst(tcx, subst)\n     }"}, {"sha": "dfcbd0da3a6e15f80e8b079ac2df099d87a45421", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca", "patch": "@@ -1154,6 +1154,8 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n \n         variant.fields.iter().enumerate().filter_map(move |(i, field)| {\n             let ty = field.ty(cx.tcx, substs);\n+            // `field.ty()` doesn't normalize after substituting.\n+            let ty = cx.tcx.normalize_erasing_regions(cx.param_env, ty);\n             let is_visible = adt.is_enum() || field.vis.is_accessible_from(cx.module, cx.tcx);\n             let is_uninhabited = cx.is_uninhabited(ty);\n \n@@ -1671,7 +1673,7 @@ impl<'p, 'tcx> fmt::Debug for DeconstructedPat<'p, 'tcx> {\n                 write!(f, \"{}\", hi)\n             }\n             IntRange(range) => write!(f, \"{:?}\", range), // Best-effort, will render e.g. `false` as `0..=0`\n-            Wildcard | Missing { .. } | NonExhaustive => write!(f, \"_\"),\n+            Wildcard | Missing { .. } | NonExhaustive => write!(f, \"_ : {:?}\", self.ty),\n             Or => {\n                 for pat in self.iter_fields() {\n                     write!(f, \"{}{:?}\", start_or_continue(\" | \"), pat)?;"}, {"sha": "43adef3d03beda073830005de889aa75d788a28b", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca", "patch": "@@ -781,8 +781,7 @@ fn is_useful<'p, 'tcx>(\n \n     assert!(rows.iter().all(|r| r.len() == v.len()));\n \n-    // FIXME(Nadrieril): Hack to work around type normalization issues (see #72476).\n-    let ty = matrix.heads().next().map_or(v.head().ty(), |r| r.ty());\n+    let ty = v.head().ty();\n     let is_non_exhaustive = cx.is_foreign_non_exhaustive_enum(ty);\n     let pcx = PatCtxt { cx, ty, span: v.head().span(), is_top_level, is_non_exhaustive };\n "}, {"sha": "058f419679847dbbc69874557fa7b121a14c4971", "filename": "src/test/ui/pattern/usefulness/issue-72476-and-89393-associated-type.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72476-and-89393-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72476-and-89393-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72476-and-89393-associated-type.rs?ref=5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca", "patch": "@@ -0,0 +1,56 @@\n+// check-pass\n+\n+// From https://github.com/rust-lang/rust/issues/72476\n+// and https://github.com/rust-lang/rust/issues/89393\n+\n+trait Trait {\n+    type Projection;\n+}\n+\n+struct A;\n+impl Trait for A {\n+    type Projection = bool;\n+}\n+\n+struct B;\n+impl Trait for B {\n+    type Projection = (u32, u32);\n+}\n+\n+struct Next<T: Trait>(T::Projection);\n+\n+fn foo1(item: Next<A>) {\n+    match item {\n+        Next(true) => {}\n+        Next(false) => {}\n+    }\n+}\n+\n+fn foo2(x: <A as Trait>::Projection) {\n+    match x {\n+        true => {}\n+        false => {}\n+    }\n+}\n+\n+fn foo3(x: Next<B>) {\n+    let Next((_, _)) = x;\n+    match x {\n+        Next((_, _)) => {}\n+    }\n+}\n+\n+fn foo4(x: <B as Trait>::Projection) {\n+    let (_, _) = x;\n+    match x {\n+        (_, _) => {}\n+    }\n+}\n+\n+fn foo5<T: Trait>(x: <T as Trait>::Projection) {\n+    match x {\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1e1d21433b79cae613a5313bb7d89bb4fde03972", "filename": "src/test/ui/pattern/usefulness/issue-72476-associated-type.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b458ecf29dc65e3e62785a4e3fdacbec1f18188b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72476-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b458ecf29dc65e3e62785a4e3fdacbec1f18188b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72476-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72476-associated-type.rs?ref=b458ecf29dc65e3e62785a4e3fdacbec1f18188b", "patch": "@@ -1,22 +0,0 @@\n-// check-pass\n-\n-// From https://github.com/rust-lang/rust/issues/72476\n-\n-trait A {\n-    type Projection;\n-}\n-\n-impl A for () {\n-    type Projection = bool;\n-}\n-\n-struct Next<T: A>(T::Projection);\n-\n-fn f(item: Next<()>) {\n-    match item {\n-        Next(true) => {}\n-        Next(false) => {}\n-    }\n-}\n-\n-fn main() {}"}]}