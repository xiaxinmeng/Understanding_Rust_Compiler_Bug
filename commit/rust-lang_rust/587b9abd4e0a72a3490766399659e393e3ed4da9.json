{"sha": "587b9abd4e0a72a3490766399659e393e3ed4da9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4N2I5YWJkNGUwYTcyYTM0OTA3NjYzOTk2NTllMzkzZTNlZDRkYTk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-14T16:43:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-05T13:26:09Z"}, "message": "Retire rustc::ty::Attributes enum.", "tree": {"sha": "111e85be716efd37e43f64cf636394e73cbf885a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/111e85be716efd37e43f64cf636394e73cbf885a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/587b9abd4e0a72a3490766399659e393e3ed4da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/587b9abd4e0a72a3490766399659e393e3ed4da9", "html_url": "https://github.com/rust-lang/rust/commit/587b9abd4e0a72a3490766399659e393e3ed4da9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/587b9abd4e0a72a3490766399659e393e3ed4da9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "url": "https://api.github.com/repos/rust-lang/rust/commits/81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "html_url": "https://github.com/rust-lang/rust/commit/81f0e90c62bda14f5e7279b3f771f69ac6bc153f"}], "stats": {"total": 43, "additions": 10, "deletions": 33}, "files": [{"sha": "f35734fb353ddc31b1a3b41e80a0773503f2fbb8", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/587b9abd4e0a72a3490766399659e393e3ed4da9/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b9abd4e0a72a3490766399659e393e3ed4da9/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=587b9abd4e0a72a3490766399659e393e3ed4da9", "patch": "@@ -29,7 +29,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sorted_map::SortedIndexMultiMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::sync::{self, par_iter, Lrc, ParallelIterator};\n+use rustc_data_structures::sync::{self, par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n@@ -2760,22 +2760,7 @@ impl BorrowKind {\n     }\n }\n \n-#[derive(Debug, Clone)]\n-pub enum Attributes<'tcx> {\n-    Owned(Lrc<[ast::Attribute]>),\n-    Borrowed(&'tcx [ast::Attribute]),\n-}\n-\n-impl<'tcx> ::std::ops::Deref for Attributes<'tcx> {\n-    type Target = [ast::Attribute];\n-\n-    fn deref(&self) -> &[ast::Attribute] {\n-        match self {\n-            &Attributes::Owned(ref data) => &data,\n-            &Attributes::Borrowed(data) => data,\n-        }\n-    }\n-}\n+pub type Attributes<'tcx> = &'tcx [ast::Attribute];\n \n #[derive(Debug, PartialEq, Eq)]\n pub enum ImplOverlapKind {\n@@ -3011,9 +2996,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Gets the attributes of a definition.\n     pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {\n         if let Some(id) = self.hir().as_local_hir_id(did) {\n-            Attributes::Borrowed(self.hir().attrs(id))\n+            self.hir().attrs(id)\n         } else {\n-            Attributes::Borrowed(self.item_attrs(did))\n+            self.item_attrs(did)\n         }\n     }\n "}, {"sha": "4d9b36d80103dc5d3a2d97582f772b3337ca5985", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/587b9abd4e0a72a3490766399659e393e3ed4da9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b9abd4e0a72a3490766399659e393e3ed4da9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=587b9abd4e0a72a3490766399659e393e3ed4da9", "patch": "@@ -2178,13 +2178,9 @@ impl Clean<Vec<Item>> for doctree::ExternCrate<'_> {\n \n             let res = Res::Def(DefKind::Mod, DefId { krate: self.cnum, index: CRATE_DEF_INDEX });\n \n-            if let Some(items) = inline::try_inline(\n-                cx,\n-                res,\n-                self.name,\n-                Some(rustc_middle::ty::Attributes::Borrowed(self.attrs)),\n-                &mut visited,\n-            ) {\n+            if let Some(items) =\n+                inline::try_inline(cx, res, self.name, Some(self.attrs), &mut visited)\n+            {\n                 return items;\n             }\n         }\n@@ -2245,13 +2241,9 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             }\n             if !denied {\n                 let mut visited = FxHashSet::default();\n-                if let Some(items) = inline::try_inline(\n-                    cx,\n-                    path.res,\n-                    name,\n-                    Some(rustc_middle::ty::Attributes::Borrowed(self.attrs)),\n-                    &mut visited,\n-                ) {\n+                if let Some(items) =\n+                    inline::try_inline(cx, path.res, name, Some(self.attrs), &mut visited)\n+                {\n                     return items;\n                 }\n             }"}]}