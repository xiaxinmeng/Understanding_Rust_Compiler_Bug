{"sha": "da3def3ebffaefc4e8abbdba99981141ab74e4e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhM2RlZjNlYmZmYWVmYzRlOGFiYmRiYTk5OTgxMTQxYWI3NGU0ZTQ=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-02T17:56:30Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-24T00:24:40Z"}, "message": "Rename some occurences of `skol` to `placeholder`", "tree": {"sha": "30be1a0fa65cc82de693109b1ac362747e546afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30be1a0fa65cc82de693109b1ac362747e546afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da3def3ebffaefc4e8abbdba99981141ab74e4e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da3def3ebffaefc4e8abbdba99981141ab74e4e4", "html_url": "https://github.com/rust-lang/rust/commit/da3def3ebffaefc4e8abbdba99981141ab74e4e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da3def3ebffaefc4e8abbdba99981141ab74e4e4/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05995a85221cde573b81ab918b0f3686452dca3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/05995a85221cde573b81ab918b0f3686452dca3b", "html_url": "https://github.com/rust-lang/rust/commit/05995a85221cde573b81ab918b0f3686452dca3b"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "0aabb7ad713f130866ee23dab4d22d0accff2c18", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=da3def3ebffaefc4e8abbdba99981141ab74e4e4", "patch": "@@ -424,7 +424,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n         if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n             let tcx = self.selcx.tcx().global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n-                if substs.needs_infer() || substs.has_skol() {\n+                if substs.needs_infer() || substs.has_placeholders() {\n                     let identity_substs = Substs::identity_for_item(tcx, def_id);\n                     let instance = ty::Instance::resolve(tcx, param_env, def_id, identity_substs);\n                     if let Some(instance) = instance {\n@@ -1656,7 +1656,7 @@ impl<'tcx> ProjectionCache<'tcx> {\n     }\n \n     pub fn rollback_placeholder(&mut self, snapshot: &ProjectionCacheSnapshot) {\n-        self.map.partial_rollback(&snapshot.snapshot, &|k| k.ty.has_re_skol());\n+        self.map.partial_rollback(&snapshot.snapshot, &|k| k.ty.has_re_placeholders());\n     }\n \n     pub fn commit(&mut self, snapshot: &ProjectionCacheSnapshot) {"}, {"sha": "91b2ba301c312ec7b6130f557706106cd512b9f4", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=da3def3ebffaefc4e8abbdba99981141ab74e4e4", "patch": "@@ -202,7 +202,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n         if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n             let tcx = self.infcx.tcx.global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n-                if substs.needs_infer() || substs.has_skol() {\n+                if substs.needs_infer() || substs.has_placeholders() {\n                     let identity_substs = Substs::identity_for_item(tcx, def_id);\n                     let instance = ty::Instance::resolve(tcx, param_env, def_id, identity_substs);\n                     if let Some(instance) = instance {"}, {"sha": "9abc84e2a258a26fc39296e92764a22f82356f6f", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=da3def3ebffaefc4e8abbdba99981141ab74e4e4", "patch": "@@ -102,14 +102,14 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn needs_infer(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_RE_INFER)\n     }\n-    fn has_skol(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_RE_SKOL)\n+    fn has_placeholders(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_PLACEHOLDER)\n     }\n     fn needs_subst(&self) -> bool {\n         self.has_type_flags(TypeFlags::NEEDS_SUBST)\n     }\n-    fn has_re_skol(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_RE_SKOL)\n+    fn has_re_placeholders(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_PLACEHOLDER)\n     }\n     fn has_closure_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_CLOSURE)"}, {"sha": "183aaadf6e6bea8447a6a766e4f0be2c1fab51b9", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=da3def3ebffaefc4e8abbdba99981141ab74e4e4", "patch": "@@ -432,7 +432,7 @@ bitflags! {\n         const HAS_SELF           = 1 << 1;\n         const HAS_TY_INFER       = 1 << 2;\n         const HAS_RE_INFER       = 1 << 3;\n-        const HAS_RE_SKOL        = 1 << 4;\n+        const HAS_RE_PLACEHOLDER = 1 << 4;\n \n         /// Does this have any `ReEarlyBound` regions? Used to\n         /// determine whether substitition is required, since those\n@@ -478,7 +478,7 @@ bitflags! {\n                                   TypeFlags::HAS_SELF.bits |\n                                   TypeFlags::HAS_TY_INFER.bits |\n                                   TypeFlags::HAS_RE_INFER.bits |\n-                                  TypeFlags::HAS_RE_SKOL.bits |\n+                                  TypeFlags::HAS_RE_PLACEHOLDER.bits |\n                                   TypeFlags::HAS_RE_EARLY_BOUND.bits |\n                                   TypeFlags::HAS_FREE_REGIONS.bits |\n                                   TypeFlags::HAS_TY_ERR.bits |\n@@ -1689,7 +1689,7 @@ impl<'tcx> ParamEnv<'tcx> {\n             }\n \n             Reveal::All => {\n-                if value.has_skol()\n+                if value.has_placeholders()\n                     || value.needs_infer()\n                     || value.has_param_types()\n                     || value.has_self_ty()"}, {"sha": "cd69d31a00458435e6bac9348cca1fecb9a8b03f", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=da3def3ebffaefc4e8abbdba99981141ab74e4e4", "patch": "@@ -1465,7 +1465,7 @@ impl RegionKind {\n             }\n             ty::RePlaceholder(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n-                flags = flags | TypeFlags::HAS_RE_SKOL;\n+                flags = flags | TypeFlags::HAS_RE_PLACEHOLDER;\n             }\n             ty::ReLateBound(..) => {\n                 flags = flags | TypeFlags::HAS_RE_LATE_BOUND;"}, {"sha": "5b67116cb511e6ab63fad1c8f80111216c2181c2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=da3def3ebffaefc4e8abbdba99981141ab74e4e4", "patch": "@@ -1494,7 +1494,7 @@ impl<'tcx> Candidate<'tcx> {\n                     // `WhereClausePick`.\n                     assert!(\n                         !trait_ref.skip_binder().substs.needs_infer()\n-                            && !trait_ref.skip_binder().substs.has_skol()\n+                            && !trait_ref.skip_binder().substs.has_placeholders()\n                     );\n \n                     WhereClausePick(trait_ref.clone())"}, {"sha": "669f2bcb77c4d57fce76688f2c0cde52bb80005f", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3def3ebffaefc4e8abbdba99981141ab74e4e4/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=da3def3ebffaefc4e8abbdba99981141ab74e4e4", "patch": "@@ -115,7 +115,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n \n     fn write_ty_to_tables(&mut self, hir_id: hir::HirId, ty: Ty<'gcx>) {\n         debug!(\"write_ty_to_tables({:?}, {:?})\", hir_id, ty);\n-        assert!(!ty.needs_infer() && !ty.has_skol());\n+        assert!(!ty.needs_infer() && !ty.has_placeholders());\n         self.tables.node_types_mut().insert(hir_id, ty);\n     }\n \n@@ -580,7 +580,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         if let Some(substs) = self.fcx.tables.borrow().node_substs_opt(hir_id) {\n             let substs = self.resolve(&substs, &span);\n             debug!(\"write_substs_to_tcx({:?}, {:?})\", hir_id, substs);\n-            assert!(!substs.needs_infer() && !substs.has_skol());\n+            assert!(!substs.needs_infer() && !substs.has_placeholders());\n             self.tables.node_substs_mut().insert(hir_id, substs);\n         }\n "}]}