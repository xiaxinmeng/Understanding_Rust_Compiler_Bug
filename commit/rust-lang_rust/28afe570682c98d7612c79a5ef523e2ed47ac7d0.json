{"sha": "28afe570682c98d7612c79a5ef523e2ed47ac7d0", "node_id": "C_kwDOAAsO6NoAKDI4YWZlNTcwNjgyYzk4ZDc2MTJjNzlhNWVmNTIzZTJlZDQ3YWM3ZDA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-05T10:00:17Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-05T10:00:17Z"}, "message": "Add tests for LineEndings::normalize", "tree": {"sha": "5deab6e3a7317160aca8ee4ce2b2492485473893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5deab6e3a7317160aca8ee4ce2b2492485473893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28afe570682c98d7612c79a5ef523e2ed47ac7d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28afe570682c98d7612c79a5ef523e2ed47ac7d0", "html_url": "https://github.com/rust-lang/rust/commit/28afe570682c98d7612c79a5ef523e2ed47ac7d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28afe570682c98d7612c79a5ef523e2ed47ac7d0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e468a1af350f344067f7c44aae060e2977798dbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e468a1af350f344067f7c44aae060e2977798dbb", "html_url": "https://github.com/rust-lang/rust/commit/e468a1af350f344067f7c44aae060e2977798dbb"}], "stats": {"total": 60, "additions": 49, "deletions": 11}, "files": [{"sha": "7636c3da7f9afef09a2946ffbee839fc627258b4", "filename": "crates/rust-analyzer/src/line_index.rs", "status": "modified", "additions": 49, "deletions": 11, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/28afe570682c98d7612c79a5ef523e2ed47ac7d0/crates%2Frust-analyzer%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28afe570682c98d7612c79a5ef523e2ed47ac7d0/crates%2Frust-analyzer%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fline_index.rs?ref=28afe570682c98d7612c79a5ef523e2ed47ac7d0", "patch": "@@ -27,10 +27,6 @@ pub(crate) enum LineEndings {\n impl LineEndings {\n     /// Replaces `\\r\\n` with `\\n` in-place in `src`.\n     pub(crate) fn normalize(src: String) -> (String, LineEndings) {\n-        if !src.as_bytes().contains(&b'\\r') {\n-            return (src, LineEndings::Unix);\n-        }\n-\n         // We replace `\\r\\n` with `\\n` in-place, which doesn't break utf-8 encoding.\n         // While we *can* call `as_mut_vec` and do surgery on the live string\n         // directly, let's rather steal the contents of `src`. This makes the code\n@@ -39,10 +35,19 @@ impl LineEndings {\n         let mut buf = src.into_bytes();\n         let mut gap_len = 0;\n         let mut tail = buf.as_mut_slice();\n+        let mut crlf_seen = false;\n+\n+        let find_crlf = |src: &[u8]| src.windows(2).position(|it| it == b\"\\r\\n\");\n+\n         loop {\n             let idx = match find_crlf(&tail[gap_len..]) {\n-                None => tail.len(),\n-                Some(idx) => idx + gap_len,\n+                None if crlf_seen => tail.len(),\n+                // SAFETY: buf is unchanged and therefor still contains utf8 data\n+                None => return (unsafe { String::from_utf8_unchecked(buf) }, LineEndings::Unix),\n+                Some(idx) => {\n+                    crlf_seen = true;\n+                    idx + gap_len\n+                }\n             };\n             tail.copy_within(gap_len..idx, 0);\n             tail = &mut tail[idx - gap_len..];\n@@ -54,15 +59,48 @@ impl LineEndings {\n \n         // Account for removed `\\r`.\n         // After `set_len`, `buf` is guaranteed to contain utf-8 again.\n-        let new_len = buf.len() - gap_len;\n         let src = unsafe {\n+            let new_len = buf.len() - gap_len;\n             buf.set_len(new_len);\n             String::from_utf8_unchecked(buf)\n         };\n-        return (src, LineEndings::Dos);\n+        (src, LineEndings::Dos)\n+    }\n+}\n \n-        fn find_crlf(src: &[u8]) -> Option<usize> {\n-            src.windows(2).position(|it| it == b\"\\r\\n\")\n-        }\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn unix() {\n+        let src = \"a\\nb\\nc\\n\\n\\n\\n\";\n+        let (res, endings) = LineEndings::normalize(src.into());\n+        assert_eq!(endings, LineEndings::Unix);\n+        assert_eq!(res, src);\n+    }\n+\n+    #[test]\n+    fn dos() {\n+        let src = \"\\r\\na\\r\\n\\r\\nb\\r\\nc\\r\\n\\r\\n\\r\\n\\r\\n\";\n+        let (res, endings) = LineEndings::normalize(src.into());\n+        assert_eq!(endings, LineEndings::Dos);\n+        assert_eq!(res, \"\\na\\n\\nb\\nc\\n\\n\\n\\n\");\n+    }\n+\n+    #[test]\n+    fn mixed() {\n+        let src = \"a\\r\\nb\\r\\nc\\r\\n\\n\\r\\n\\n\";\n+        let (res, endings) = LineEndings::normalize(src.into());\n+        assert_eq!(endings, LineEndings::Dos);\n+        assert_eq!(res, \"a\\nb\\nc\\n\\n\\n\\n\");\n+    }\n+\n+    #[test]\n+    fn none() {\n+        let src = \"abc\";\n+        let (res, endings) = LineEndings::normalize(src.into());\n+        assert_eq!(endings, LineEndings::Unix);\n+        assert_eq!(res, src);\n     }\n }"}]}