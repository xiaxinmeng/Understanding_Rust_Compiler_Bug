{"sha": "8b060e25ba80eb2866839335302b31359c18421a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMDYwZTI1YmE4MGViMjg2NjgzOTMzNTMwMmIzMTM1OWMxODQyMWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-20T15:53:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-28T23:57:14Z"}, "message": "Implement compatibility lint for legacy constructor visibilities", "tree": {"sha": "3a1c7863bea1edd21554df025dd8b3b5f4f9530f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a1c7863bea1edd21554df025dd8b3b5f4f9530f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b060e25ba80eb2866839335302b31359c18421a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b060e25ba80eb2866839335302b31359c18421a", "html_url": "https://github.com/rust-lang/rust/commit/8b060e25ba80eb2866839335302b31359c18421a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b060e25ba80eb2866839335302b31359c18421a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "962d88b5eeeb602b2a6c9a2f96f9476152279a42", "url": "https://api.github.com/repos/rust-lang/rust/commits/962d88b5eeeb602b2a6c9a2f96f9476152279a42", "html_url": "https://github.com/rust-lang/rust/commit/962d88b5eeeb602b2a6c9a2f96f9476152279a42"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "e1605959922c0530e64e1a2b1ab299282afc6639", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b060e25ba80eb2866839335302b31359c18421a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b060e25ba80eb2866839335302b31359c18421a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=8b060e25ba80eb2866839335302b31359c18421a", "patch": "@@ -223,6 +223,12 @@ declare_lint! {\n     \"detects names that resolve to ambiguous glob imports with RFC 1560\"\n }\n \n+declare_lint! {\n+    pub LEGACY_CONSTRUCTOR_VISIBILITY,\n+    Deny,\n+    \"detects use of struct constructors that would be invisible with new visibility rules\"\n+}\n+\n declare_lint! {\n     pub DEPRECATED,\n     Warn,\n@@ -271,6 +277,7 @@ impl LintPass for HardwiredLints {\n             EXTRA_REQUIREMENT_IN_IMPL,\n             LEGACY_DIRECTORY_OWNERSHIP,\n             LEGACY_IMPORTS,\n+            LEGACY_CONSTRUCTOR_VISIBILITY,\n             DEPRECATED\n         )\n     }"}, {"sha": "18067cb86739b51cd0787c63973d8455cc183d92", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b060e25ba80eb2866839335302b31359c18421a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b060e25ba80eb2866839335302b31359c18421a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=8b060e25ba80eb2866839335302b31359c18421a", "patch": "@@ -240,6 +240,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(LEGACY_IMPORTS),\n             reference: \"issue #38260 <https://github.com/rust-lang/rust/issues/38260>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(LEGACY_CONSTRUCTOR_VISIBILITY),\n+            reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "144ec8c680ee8cc14bc7ecc18d705d1ed144b073", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b060e25ba80eb2866839335302b31359c18421a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b060e25ba80eb2866839335302b31359c18421a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=8b060e25ba80eb2866839335302b31359c18421a", "patch": "@@ -345,6 +345,9 @@ impl<'a> Resolver<'a> {\n                     let ctor_def = Def::StructCtor(self.definitions.local_def_id(struct_def.id()),\n                                                    CtorKind::from_ast(struct_def));\n                     self.define(parent, ident, ValueNS, (ctor_def, ctor_vis, sp, expansion));\n+                    if !ctor_vis.is_at_least(vis, &*self) {\n+                        self.legacy_ctor_visibilities.insert(def.def_id(), (ctor_def, ctor_vis));\n+                    }\n                 }\n             }\n "}, {"sha": "4ade64ee19850cee9b34ea601181a1611b8ec99a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b060e25ba80eb2866839335302b31359c18421a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b060e25ba80eb2866839335302b31359c18421a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8b060e25ba80eb2866839335302b31359c18421a", "patch": "@@ -45,7 +45,7 @@ use rustc::hir::def::*;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::ty;\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n-use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet};\n+use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n \n use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::ast::{self, Name, NodeId, Ident, SpannedIdent, FloatTy, IntTy, UintTy};\n@@ -1131,6 +1131,9 @@ pub struct Resolver<'a> {\n     warned_proc_macros: FxHashSet<Name>,\n \n     potentially_unused_imports: Vec<&'a ImportDirective<'a>>,\n+\n+    // Auxiliary map used only for reporting `legacy_constructor_visibility` lint.\n+    legacy_ctor_visibilities: DefIdMap<(Def, ty::Visibility)>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1310,6 +1313,7 @@ impl<'a> Resolver<'a> {\n             proc_macro_enabled: features.proc_macro,\n             warned_proc_macros: FxHashSet(),\n             potentially_unused_imports: Vec::new(),\n+            legacy_ctor_visibilities: DefIdMap(),\n         }\n     }\n \n@@ -2235,7 +2239,23 @@ impl<'a> Resolver<'a> {\n                 if is_expected(resolution.base_def) || resolution.base_def == Def::Err {\n                     resolution\n                 } else {\n-                    report_errors(self, Some(resolution.base_def))\n+                    // Add a temporary hack to smooth the transition to new struct ctor\n+                    // visibility rules. See #38932 for more details.\n+                    let mut res = None;\n+                    if let Def::Struct(def_id) = resolution.base_def {\n+                        if let Some((ctor_def, ctor_vis))\n+                                = self.legacy_ctor_visibilities.get(&def_id).cloned() {\n+                            if is_expected(ctor_def) && self.is_accessible(ctor_vis) {\n+                                let lint = lint::builtin::LEGACY_CONSTRUCTOR_VISIBILITY;\n+                                self.session.add_lint(lint, id, span,\n+                                    \"private struct constructors are not usable through \\\n+                                     reexports in outer modules\".to_string());\n+                                res = Some(PathResolution::new(ctor_def));\n+                            }\n+                        }\n+                    }\n+\n+                    res.unwrap_or_else(|| report_errors(self, Some(resolution.base_def)))\n                 }\n             }\n             Some(resolution) if source.defer_to_typeck() => {"}, {"sha": "fb65af230ace5cf05eaeb02574a83c06bd81b748", "filename": "src/test/compile-fail/privacy/legacy-ctor-visibility.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8b060e25ba80eb2866839335302b31359c18421a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b060e25ba80eb2866839335302b31359c18421a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs?ref=8b060e25ba80eb2866839335302b31359c18421a", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+\n+use m::S;\n+\n+mod m {\n+    pub struct S(u8);\n+\n+    mod n {\n+        use S;\n+        fn f() {\n+            S(10);\n+            //~^ ERROR private struct constructors are not usable through reexports in outer modules\n+            //~| WARN this was previously accepted\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}