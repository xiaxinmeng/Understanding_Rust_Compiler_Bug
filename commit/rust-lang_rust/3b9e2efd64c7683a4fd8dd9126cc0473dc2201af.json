{"sha": "3b9e2efd64c7683a4fd8dd9126cc0473dc2201af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiOWUyZWZkNjRjNzY4M2E0ZmQ4ZGQ5MTI2Y2MwNDczZGMyMjAxYWY=", "commit": {"author": {"name": "Brandon Sanderson", "email": "singingboyo@hotmail.com", "date": "2013-08-22T05:32:18Z"}, "committer": {"name": "Brandon Sanderson", "email": "singingboyo@hotmail.com", "date": "2013-08-22T05:49:17Z"}, "message": "Make json::to_xxx(&Json) fns Json::to_xxx(&self)\n\nto_str, to_pretty_str, to_writer, and to_pretty_writer were at the top\nlevel of extra::json, this moves them into an impl for Json to match\nwith what's been done for the rest of libextra and libstd.", "tree": {"sha": "5d8b61290a8b0989f50d34801453c81b65ea387f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d8b61290a8b0989f50d34801453c81b65ea387f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b9e2efd64c7683a4fd8dd9126cc0473dc2201af", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9e2efd64c7683a4fd8dd9126cc0473dc2201af", "html_url": "https://github.com/rust-lang/rust/commit/3b9e2efd64c7683a4fd8dd9126cc0473dc2201af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b9e2efd64c7683a4fd8dd9126cc0473dc2201af/comments", "author": {"login": "brandonson", "id": 1870695, "node_id": "MDQ6VXNlcjE4NzA2OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1870695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandonson", "html_url": "https://github.com/brandonson", "followers_url": "https://api.github.com/users/brandonson/followers", "following_url": "https://api.github.com/users/brandonson/following{/other_user}", "gists_url": "https://api.github.com/users/brandonson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandonson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandonson/subscriptions", "organizations_url": "https://api.github.com/users/brandonson/orgs", "repos_url": "https://api.github.com/users/brandonson/repos", "events_url": "https://api.github.com/users/brandonson/events{/privacy}", "received_events_url": "https://api.github.com/users/brandonson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brandonson", "id": 1870695, "node_id": "MDQ6VXNlcjE4NzA2OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1870695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandonson", "html_url": "https://github.com/brandonson", "followers_url": "https://api.github.com/users/brandonson/followers", "following_url": "https://api.github.com/users/brandonson/following{/other_user}", "gists_url": "https://api.github.com/users/brandonson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandonson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandonson/subscriptions", "organizations_url": "https://api.github.com/users/brandonson/orgs", "repos_url": "https://api.github.com/users/brandonson/repos", "events_url": "https://api.github.com/users/brandonson/events{/privacy}", "received_events_url": "https://api.github.com/users/brandonson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e776c75e9694c2e1711943652c64a5e076afa8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e776c75e9694c2e1711943652c64a5e076afa8f", "html_url": "https://github.com/rust-lang/rust/commit/8e776c75e9694c2e1711943652c64a5e076afa8f"}], "stats": {"total": 126, "additions": 61, "deletions": 65}, "files": [{"sha": "a13836d87bd74f88462813e4decfa28341a9e653", "filename": "src/libextra/json.rs", "status": "modified", "additions": 60, "deletions": 64, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/3b9e2efd64c7683a4fd8dd9126cc0473dc2201af/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b9e2efd64c7683a4fd8dd9126cc0473dc2201af/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=3b9e2efd64c7683a4fd8dd9126cc0473dc2201af", "patch": "@@ -459,26 +459,24 @@ impl<E: serialize::Encoder> serialize::Encodable<E> for Json {\n     }\n }\n \n-/// Encodes a json value into a io::writer\n-pub fn to_writer(wr: @io::Writer, json: &Json) {\n-    let mut encoder = Encoder(wr);\n-    json.encode(&mut encoder)\n-}\n-\n-/// Encodes a json value into a string\n-pub fn to_str(json: &Json) -> ~str {\n-    io::with_str_writer(|wr| to_writer(wr, json))\n-}\n+impl Json{\n+    /// Encodes a json value into a io::writer.  Uses a single line.\n+    pub fn to_writer(&self, wr: @io::Writer) {\n+        let mut encoder = Encoder(wr);\n+        self.encode(&mut encoder)\n+    }\n \n-/// Encodes a json value into a io::writer\n-pub fn to_pretty_writer(wr: @io::Writer, json: &Json) {\n-    let mut encoder = PrettyEncoder(wr);\n-    json.encode(&mut encoder)\n-}\n+    /// Encodes a json value into a io::writer.\n+    /// Pretty-prints in a more readable format.\n+    pub fn to_pretty_writer(&self, wr: @io::Writer) {\n+        let mut encoder = PrettyEncoder(wr);\n+        self.encode(&mut encoder)\n+    }\n \n-/// Encodes a json value into a string\n-pub fn to_pretty_str(json: &Json) -> ~str {\n-    io::with_str_writer(|wr| to_pretty_writer(wr, json))\n+    /// Encodes a json value into a string\n+    pub fn to_pretty_str(&self) -> ~str {\n+        io::with_str_writer(|wr| self.to_pretty_writer(wr))\n+    }\n }\n \n pub struct Parser<T> {\n@@ -1307,7 +1305,10 @@ impl<A:ToJson> ToJson for Option<A> {\n }\n \n impl to_str::ToStr for Json {\n-    fn to_str(&self) -> ~str { to_str(self) }\n+    /// Encodes a json value into a string\n+    fn to_str(&self) -> ~str {\n+      io::with_str_writer(|wr| self.to_writer(wr))\n+    }\n }\n \n impl to_str::ToStr for Error {\n@@ -1358,69 +1359,67 @@ mod tests {\n \n     #[test]\n     fn test_write_null() {\n-        assert_eq!(to_str(&Null), ~\"null\");\n-        assert_eq!(to_pretty_str(&Null), ~\"null\");\n+        assert_eq!(Null.to_str(), ~\"null\");\n+        assert_eq!(Null.to_pretty_str(), ~\"null\");\n     }\n \n \n     #[test]\n     fn test_write_number() {\n-        assert_eq!(to_str(&Number(3f)), ~\"3\");\n-        assert_eq!(to_pretty_str(&Number(3f)), ~\"3\");\n+        assert_eq!(Number(3f).to_str(), ~\"3\");\n+        assert_eq!(Number(3f).to_pretty_str(), ~\"3\");\n \n-        assert_eq!(to_str(&Number(3.1f)), ~\"3.1\");\n-        assert_eq!(to_pretty_str(&Number(3.1f)), ~\"3.1\");\n+        assert_eq!(Number(3.1f).to_str(), ~\"3.1\");\n+        assert_eq!(Number(3.1f).to_pretty_str(), ~\"3.1\");\n \n-        assert_eq!(to_str(&Number(-1.5f)), ~\"-1.5\");\n-        assert_eq!(to_pretty_str(&Number(-1.5f)), ~\"-1.5\");\n+        assert_eq!(Number(-1.5f).to_str(), ~\"-1.5\");\n+        assert_eq!(Number(-1.5f).to_pretty_str(), ~\"-1.5\");\n \n-        assert_eq!(to_str(&Number(0.5f)), ~\"0.5\");\n-        assert_eq!(to_pretty_str(&Number(0.5f)), ~\"0.5\");\n+        assert_eq!(Number(0.5f).to_str(), ~\"0.5\");\n+        assert_eq!(Number(0.5f).to_pretty_str(), ~\"0.5\");\n     }\n \n     #[test]\n     fn test_write_str() {\n-        assert_eq!(to_str(&String(~\"\")), ~\"\\\"\\\"\");\n-        assert_eq!(to_pretty_str(&String(~\"\")), ~\"\\\"\\\"\");\n+        assert_eq!(String(~\"\").to_str(), ~\"\\\"\\\"\");\n+        assert_eq!(String(~\"\").to_pretty_str(), ~\"\\\"\\\"\");\n \n-        assert_eq!(to_str(&String(~\"foo\")), ~\"\\\"foo\\\"\");\n-        assert_eq!(to_pretty_str(&String(~\"foo\")), ~\"\\\"foo\\\"\");\n+        assert_eq!(String(~\"foo\").to_str(), ~\"\\\"foo\\\"\");\n+        assert_eq!(String(~\"foo\").to_pretty_str(), ~\"\\\"foo\\\"\");\n     }\n \n     #[test]\n     fn test_write_bool() {\n-        assert_eq!(to_str(&Boolean(true)), ~\"true\");\n-        assert_eq!(to_pretty_str(&Boolean(true)), ~\"true\");\n+        assert_eq!(Boolean(true).to_str(), ~\"true\");\n+        assert_eq!(Boolean(true).to_pretty_str(), ~\"true\");\n \n-        assert_eq!(to_str(&Boolean(false)), ~\"false\");\n-        assert_eq!(to_pretty_str(&Boolean(false)), ~\"false\");\n+        assert_eq!(Boolean(false).to_str(), ~\"false\");\n+        assert_eq!(Boolean(false).to_pretty_str(), ~\"false\");\n     }\n \n     #[test]\n     fn test_write_list() {\n-        assert_eq!(to_str(&List(~[])), ~\"[]\");\n-        assert_eq!(to_pretty_str(&List(~[])), ~\"[]\");\n+        assert_eq!(List(~[]).to_str(), ~\"[]\");\n+        assert_eq!(List(~[]).to_pretty_str(), ~\"[]\");\n \n-        assert_eq!(to_str(&List(~[Boolean(true)])), ~\"[true]\");\n+        assert_eq!(List(~[Boolean(true)]).to_str(), ~\"[true]\");\n         assert_eq!(\n-            to_pretty_str(&List(~[Boolean(true)])),\n+            List(~[Boolean(true)]).to_pretty_str(),\n             ~\"\\\n             [\\n  \\\n                 true\\n\\\n             ]\"\n         );\n \n-        assert_eq!(to_str(&List(~[\n+        let longTestList = List(~[\n             Boolean(false),\n             Null,\n-            List(~[String(~\"foo\\nbar\"), Number(3.5f)])\n-        ])), ~\"[false,null,[\\\"foo\\\\nbar\\\",3.5]]\");\n+            List(~[String(~\"foo\\nbar\"), Number(3.5f)])]);\n+\n+        assert_eq!(longTestList.to_str(),\n+            ~\"[false,null,[\\\"foo\\\\nbar\\\",3.5]]\");\n         assert_eq!(\n-            to_pretty_str(&List(~[\n-                Boolean(false),\n-                Null,\n-                List(~[String(~\"foo\\nbar\"), Number(3.5f)])\n-            ])),\n+            longTestList.to_pretty_str(),\n             ~\"\\\n             [\\n  \\\n                 false,\\n  \\\n@@ -1435,28 +1434,30 @@ mod tests {\n \n     #[test]\n     fn test_write_object() {\n-        assert_eq!(to_str(&mk_object([])), ~\"{}\");\n-        assert_eq!(to_pretty_str(&mk_object([])), ~\"{}\");\n+        assert_eq!(mk_object([]).to_str(), ~\"{}\");\n+        assert_eq!(mk_object([]).to_pretty_str(), ~\"{}\");\n \n         assert_eq!(\n-            to_str(&mk_object([(~\"a\", Boolean(true))])),\n+            mk_object([(~\"a\", Boolean(true))]).to_str(),\n             ~\"{\\\"a\\\":true}\"\n         );\n         assert_eq!(\n-            to_pretty_str(&mk_object([(~\"a\", Boolean(true))])),\n+            mk_object([(~\"a\", Boolean(true))]).to_pretty_str(),\n             ~\"\\\n             {\\n  \\\n                 \\\"a\\\": true\\n\\\n             }\"\n         );\n \n-        assert_eq!(\n-            to_str(&mk_object([\n+        let complexObj = mk_object([\n                 (~\"b\", List(~[\n                     mk_object([(~\"c\", String(~\"\\x0c\\r\"))]),\n                     mk_object([(~\"d\", String(~\"\"))])\n                 ]))\n-            ])),\n+            ]);\n+\n+        assert_eq!(\n+            complexObj.to_str(),\n             ~\"{\\\n                 \\\"b\\\":[\\\n                     {\\\"c\\\":\\\"\\\\f\\\\r\\\"},\\\n@@ -1465,12 +1466,7 @@ mod tests {\n             }\"\n         );\n         assert_eq!(\n-            to_pretty_str(&mk_object([\n-                (~\"b\", List(~[\n-                    mk_object([(~\"c\", String(~\"\\x0c\\r\"))]),\n-                    mk_object([(~\"d\", String(~\"\"))])\n-                ]))\n-            ])),\n+            complexObj.to_pretty_str(),\n             ~\"\\\n             {\\n  \\\n                 \\\"b\\\": [\\n    \\\n@@ -1494,8 +1490,8 @@ mod tests {\n \n         // We can't compare the strings directly because the object fields be\n         // printed in a different order.\n-        assert_eq!(a.clone(), from_str(to_str(&a)).unwrap());\n-        assert_eq!(a.clone(), from_str(to_pretty_str(&a)).unwrap());\n+        assert_eq!(a.clone(), from_str(a.to_str()).unwrap());\n+        assert_eq!(a.clone(), from_str(a.to_pretty_str()).unwrap());\n     }\n \n     #[test]"}, {"sha": "b89b5801293591efb4e4597722f17374a41fa6e0", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b9e2efd64c7683a4fd8dd9126cc0473dc2201af/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b9e2efd64c7683a4fd8dd9126cc0473dc2201af/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=3b9e2efd64c7683a4fd8dd9126cc0473dc2201af", "patch": "@@ -875,7 +875,7 @@ impl MetricMap {\n     /// Write MetricDiff to a file.\n     pub fn save(&self, p: &Path) {\n         let f = io::file_writer(p, [io::Create, io::Truncate]).unwrap();\n-        json::to_pretty_writer(f, &self.to_json());\n+        self.to_json().to_pretty_writer(f);\n     }\n \n     /// Compare against another MetricMap. Optionally compare all"}]}