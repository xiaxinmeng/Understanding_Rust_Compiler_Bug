{"sha": "55af0cee15cf5c85cbb50ef41eafb4498bde24e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YWYwY2VlMTVjZjVjODVjYmI1MGVmNDFlYWZiNDQ5OGJkZTI0ZTM=", "commit": {"author": {"name": "Takayuki", "email": "takoyaki0316@gmail.com", "date": "2021-05-04T08:20:22Z"}, "committer": {"name": "Takayuki", "email": "takoyaki0316@gmail.com", "date": "2021-05-04T08:20:22Z"}, "message": "move double_neg to its own module", "tree": {"sha": "82b49265dae2b38cd96adf48f393e3d4cbb6447f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82b49265dae2b38cd96adf48f393e3d4cbb6447f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55af0cee15cf5c85cbb50ef41eafb4498bde24e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55af0cee15cf5c85cbb50ef41eafb4498bde24e3", "html_url": "https://github.com/rust-lang/rust/commit/55af0cee15cf5c85cbb50ef41eafb4498bde24e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55af0cee15cf5c85cbb50ef41eafb4498bde24e3/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64eb18e6759f4375d01d7e3352447ff6b4305184", "url": "https://api.github.com/repos/rust-lang/rust/commits/64eb18e6759f4375d01d7e3352447ff6b4305184", "html_url": "https://github.com/rust-lang/rust/commit/64eb18e6759f4375d01d7e3352447ff6b4305184"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "6f65778e1193cfc08d011e0eec606f08e683bf6a", "filename": "clippy_lints/src/misc_early/double_neg.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/55af0cee15cf5c85cbb50ef41eafb4498bde24e3/clippy_lints%2Fsrc%2Fmisc_early%2Fdouble_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55af0cee15cf5c85cbb50ef41eafb4498bde24e3/clippy_lints%2Fsrc%2Fmisc_early%2Fdouble_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fdouble_neg.rs?ref=55af0cee15cf5c85cbb50ef41eafb4498bde24e3", "patch": "@@ -0,0 +1,23 @@\n+use super::MiscEarlyLints;\n+use clippy_utils::diagnostics::span_lint;\n+use rustc_ast::ast::{Expr, ExprKind, UnOp};\n+use rustc_lint::EarlyContext;\n+\n+use super::DOUBLE_NEG;\n+\n+pub(super) fn check(cx: &EarlyContext<'_>, expr: &Expr) {\n+    match expr.kind {\n+        ExprKind::Unary(UnOp::Neg, ref inner) => {\n+            if let ExprKind::Unary(UnOp::Neg, _) = inner.kind {\n+                span_lint(\n+                    cx,\n+                    DOUBLE_NEG,\n+                    expr.span,\n+                    \"`--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\",\n+                );\n+            }\n+        },\n+        ExprKind::Lit(ref lit) => MiscEarlyLints::check_lit(cx, lit),\n+        _ => (),\n+    }\n+}"}, {"sha": "47cc87dfffb9da9d3aca675a17f53eecd2a40f64", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/55af0cee15cf5c85cbb50ef41eafb4498bde24e3/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55af0cee15cf5c85cbb50ef41eafb4498bde24e3/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=55af0cee15cf5c85cbb50ef41eafb4498bde24e3", "patch": "@@ -1,10 +1,10 @@\n mod builtin_type_shadow;\n+mod double_neg;\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_opt;\n use rustc_ast::ast::{\n-    BindingMode, Expr, ExprKind, Generics, Lit, LitFloatType, LitIntType, LitKind, Mutability, NodeId, Pat, PatKind,\n-    UnOp,\n+    BindingMode, Expr, Generics, Lit, LitFloatType, LitIntType, LitKind, Mutability, NodeId, Pat, PatKind,\n };\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashMap;\n@@ -393,20 +393,7 @@ impl EarlyLintPass for MiscEarlyLints {\n         if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n-        match expr.kind {\n-            ExprKind::Unary(UnOp::Neg, ref inner) => {\n-                if let ExprKind::Unary(UnOp::Neg, _) = inner.kind {\n-                    span_lint(\n-                        cx,\n-                        DOUBLE_NEG,\n-                        expr.span,\n-                        \"`--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\",\n-                    );\n-                }\n-            },\n-            ExprKind::Lit(ref lit) => Self::check_lit(cx, lit),\n-            _ => (),\n-        }\n+        double_neg::check(cx, expr)\n     }\n }\n "}]}