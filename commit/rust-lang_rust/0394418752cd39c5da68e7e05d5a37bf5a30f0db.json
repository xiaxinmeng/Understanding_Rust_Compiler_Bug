{"sha": "0394418752cd39c5da68e7e05d5a37bf5a30f0db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOTQ0MTg3NTJjZDM5YzVkYTY4ZTdlMDVkNWEzN2JmNWEzMGYwZGI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-01-14T15:45:40Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-01-14T15:45:40Z"}, "message": "Move some #[no_std] info to stable book.\n\nThis feature is partially stabilized, so describe each part in the appropriate place.", "tree": {"sha": "63939d68bce6a3d1d5a8b73ef96d36f6a9c73c08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63939d68bce6a3d1d5a8b73ef96d36f6a9c73c08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0394418752cd39c5da68e7e05d5a37bf5a30f0db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0394418752cd39c5da68e7e05d5a37bf5a30f0db", "html_url": "https://github.com/rust-lang/rust/commit/0394418752cd39c5da68e7e05d5a37bf5a30f0db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0394418752cd39c5da68e7e05d5a37bf5a30f0db/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3a75fe560362b812f2c4947d449558a9472496", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3a75fe560362b812f2c4947d449558a9472496", "html_url": "https://github.com/rust-lang/rust/commit/5b3a75fe560362b812f2c4947d449558a9472496"}], "stats": {"total": 141, "additions": 52, "deletions": 89}, "files": [{"sha": "fe5e1c3990c5c8412a41fd3efe9c6b7835531c03", "filename": "src/doc/book/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0394418752cd39c5da68e7e05d5a37bf5a30f0db/src%2Fdoc%2Fbook%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/0394418752cd39c5da68e7e05d5a37bf5a30f0db/src%2Fdoc%2Fbook%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2FSUMMARY.md?ref=0394418752cd39c5da68e7e05d5a37bf5a30f0db", "patch": "@@ -51,6 +51,7 @@\n     * [FFI](ffi.md)\n     * [Borrow and AsRef](borrow-and-asref.md)\n     * [Release Channels](release-channels.md)\n+    * [Using Rust without the standard library](using-rust-without-the-standard-library.md)\n * [Nightly Rust](nightly-rust.md)\n     * [Compiler Plugins](compiler-plugins.md)\n     * [Inline Assembly](inline-assembly.md)"}, {"sha": "65beaed2fc7e9a563ab08dd926b45b5efa9e831d", "filename": "src/doc/book/no-stdlib.md", "status": "modified", "additions": 10, "deletions": 89, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/0394418752cd39c5da68e7e05d5a37bf5a30f0db/src%2Fdoc%2Fbook%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/0394418752cd39c5da68e7e05d5a37bf5a30f0db/src%2Fdoc%2Fbook%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fno-stdlib.md?ref=0394418752cd39c5da68e7e05d5a37bf5a30f0db", "patch": "@@ -1,8 +1,15 @@\n % No stdlib\n \n-By default, `std` is linked to every Rust crate. In some contexts,\n-this is undesirable, and can be avoided with the `#![no_std]`\n-attribute attached to the crate.\n+Rust\u2019s standard library provides a lot of useful functionality, but assumes\n+support for various features of its host system: threads, networking, heap\n+allocation, and others. There are systems that do not have these features,\n+however, and Rust can work with those too! To do so, we tell Rust that we\n+don\u2019t want to use the standard library via an attribute: `#![no_std]`.\n+\n+> Note: This feature is technically stable, but there are some caveats. For\n+> one, you can build a `#![no_std]` _library_ on stable, but not a _binary_.\n+> For details on libraries without the standard library, see [the chapter on\n+> `#![no_std]`](using-rust-without-the-standard-library.html)\n \n Obviously there's more to life than just libraries: one can use\n `#[no_std]` with an executable, controlling the entry point is\n@@ -77,89 +84,3 @@ personality function (see the\n information), but crates which do not trigger a panic can be assured\n that this function is never called. The second function, `panic_fmt`, is\n also used by the failure mechanisms of the compiler.\n-\n-## Using libcore\n-\n-> **Note**: the core library's structure is unstable, and it is recommended to\n-> use the standard library instead wherever possible.\n-\n-With the above techniques, we've got a bare-metal executable running some Rust\n-code. There is a good deal of functionality provided by the standard library,\n-however, that is necessary to be productive in Rust. If the standard library is\n-not sufficient, then [libcore](../core/index.html) is designed to be used\n-instead.\n-\n-The core library has very few dependencies and is much more portable than the\n-standard library itself. Additionally, the core library has most of the\n-necessary functionality for writing idiomatic and effective Rust code. When\n-using `#![no_std]`, Rust will automatically inject the `core` crate, like\n-we do for `std` when we\u2019re using it.\n-\n-As an example, here is a program that will calculate the dot product of two\n-vectors provided from C, using idiomatic Rust practices.\n-\n-```rust\n-# #![feature(libc)]\n-#![feature(lang_items)]\n-#![feature(start)]\n-#![feature(raw)]\n-#![no_std]\n-\n-extern crate libc;\n-\n-use core::mem;\n-\n-#[no_mangle]\n-pub extern fn dot_product(a: *const u32, a_len: u32,\n-                          b: *const u32, b_len: u32) -> u32 {\n-    use core::raw::Slice;\n-\n-    // Convert the provided arrays into Rust slices.\n-    // The core::raw module guarantees that the Slice\n-    // structure has the same memory layout as a &[T]\n-    // slice.\n-    //\n-    // This is an unsafe operation because the compiler\n-    // cannot tell the pointers are valid.\n-    let (a_slice, b_slice): (&[u32], &[u32]) = unsafe {\n-        mem::transmute((\n-            Slice { data: a, len: a_len as usize },\n-            Slice { data: b, len: b_len as usize },\n-        ))\n-    };\n-\n-    // Iterate over the slices, collecting the result\n-    let mut ret = 0;\n-    for (i, j) in a_slice.iter().zip(b_slice.iter()) {\n-        ret += (*i) * (*j);\n-    }\n-    return ret;\n-}\n-\n-#[lang = \"panic_fmt\"]\n-extern fn panic_fmt(args: &core::fmt::Arguments,\n-                    file: &str,\n-                    line: u32) -> ! {\n-    loop {}\n-}\n-\n-#[lang = \"eh_personality\"] extern fn eh_personality() {}\n-# #[start] fn start(argc: isize, argv: *const *const u8) -> isize { 0 }\n-# #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n-# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n-# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n-# fn main() {}\n-```\n-\n-Note that there is one lang item here whose signature differs from the examples\n-above, `panic_fmt`. This must be defined by consumers of libcore because the\n-core library declares panics, but it does not define it. The `panic_fmt`\n-lang item is this crate's definition of panic, and it must be guaranteed to\n-never return.\n-\n-As can be seen in this example, the core library is intended to provide the\n-power of Rust in all circumstances, regardless of platform requirements. Further\n-libraries, such as liballoc, add functionality to libcore which make other\n-platform-specific assumptions, but continue to be more portable than the\n-standard library itself.\n-"}, {"sha": "59182e1a4efcee7fefd0a9bc0d7068052cc7ef94", "filename": "src/doc/book/using-rust-without-the-standard-library.md", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0394418752cd39c5da68e7e05d5a37bf5a30f0db/src%2Fdoc%2Fbook%2Fusing-rust-without-the-standard-library.md", "raw_url": "https://github.com/rust-lang/rust/raw/0394418752cd39c5da68e7e05d5a37bf5a30f0db/src%2Fdoc%2Fbook%2Fusing-rust-without-the-standard-library.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fusing-rust-without-the-standard-library.md?ref=0394418752cd39c5da68e7e05d5a37bf5a30f0db", "patch": "@@ -0,0 +1,41 @@\n+% Using Rust Without the Standard Library\n+\n+Rust\u2019s standard library provides a lot of useful functionality, but assumes\n+support for various features of its host system: threads, networking, heap\n+allocation, and others. There are systems that do not have these features,\n+however, and Rust can work with those too! To do so, we tell Rust that we\n+don\u2019t want to use the standard library via an attribute: `#![no_std]`.\n+\n+> Note: This feature is technically stable, but there are some caveats. For\n+> one, you can build a `#![no_std]` _library_ on stable, but not a _binary_.\n+> For details on binaries without the standard library, see [the nightly\n+> chapter on `#![no_std]`](no-stdlib.html)\n+\n+To use `#![no_std]`, add a it to your crate root:\n+\n+```rust\n+#![no_std]\n+\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+```\n+\n+Much of the functionality that\u2019s exposed in the standard library is also\n+available via the [`core` crate](../core/). When we\u2019re using the standard\n+library, Rust automatically brings `std` into scope, allowing you to use\n+its features without an explicit import. By the same token, when using\n+`!#[no_std]`, Rust will bring `core` into scope for you, as well as [its\n+prelude](../core/prelude/v1/). This means that a lot of code will Just Work:\n+\n+```rust\n+#![no_std]\n+\n+fn may_fail(failure: bool) -> Result<(), &'static str> {\n+    if failure {\n+        Err(\"this didn\u2019t work!\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+```"}]}