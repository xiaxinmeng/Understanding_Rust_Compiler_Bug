{"sha": "be8160878ab7a8e1367acecc173f92e6f509e033", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlODE2MDg3OGFiN2E4ZTEzNjdhY2VjYzE3M2Y5MmU2ZjUwOWUwMzM=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-30T21:34:53Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-10-04T05:12:53Z"}, "message": "split `interior_mutable_const` tests and clean it\n\n* remove a 'ERROR' comment from `borrow`\n   `Vec<AtomicUsize>` itself is `Freeze` as it holds the atomic in heap\n* remove `ONCE_INIT` from `declare`\n   it seems like an artifact from previous spliting", "tree": {"sha": "812f0bf448f29143c7ddfd842133b902f683179e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/812f0bf448f29143c7ddfd842133b902f683179e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be8160878ab7a8e1367acecc173f92e6f509e033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be8160878ab7a8e1367acecc173f92e6f509e033", "html_url": "https://github.com/rust-lang/rust/commit/be8160878ab7a8e1367acecc173f92e6f509e033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be8160878ab7a8e1367acecc173f92e6f509e033/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9408c68c1da55f8a47cb21e761953db30aea3d39", "url": "https://api.github.com/repos/rust-lang/rust/commits/9408c68c1da55f8a47cb21e761953db30aea3d39", "html_url": "https://github.com/rust-lang/rust/commit/9408c68c1da55f8a47cb21e761953db30aea3d39"}], "stats": {"total": 574, "additions": 430, "deletions": 144}, "files": [{"sha": "ea25729d11d4db08ae7c57c96bb0bf9bf09b05ff", "filename": "tests/ui/borrow_interior_mutable_const/others.rs", "status": "renamed", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.rs?ref=be8160878ab7a8e1367acecc173f92e6f509e033", "patch": "@@ -19,33 +19,7 @@ const NO_ANN: &dyn Display = &70;\n static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);\n const ONCE_INIT: Once = Once::new();\n \n-trait Trait<T> {\n-    type AssocType;\n-\n-    const ATOMIC: AtomicUsize;\n-    const INPUT: T;\n-    const ASSOC: Self::AssocType;\n-\n-    fn function() {\n-        let _ = &Self::INPUT;\n-        let _ = &Self::ASSOC;\n-    }\n-}\n-\n-impl Trait<u32> for u64 {\n-    type AssocType = AtomicUsize;\n-\n-    const ATOMIC: AtomicUsize = AtomicUsize::new(9);\n-    const INPUT: u32 = 10;\n-    const ASSOC: Self::AssocType = AtomicUsize::new(11);\n-\n-    fn function() {\n-        let _ = &Self::INPUT;\n-        let _ = &Self::ASSOC; //~ ERROR interior mutability\n-    }\n-}\n-\n-// This is just a pointer that can be safely dereferended,\n+// This is just a pointer that can be safely dereferenced,\n // it's semantically the same as `&'static T`;\n // but it isn't allowed to make a static reference from an arbitrary integer value at the moment.\n // For more information, please see the issue #5918.\n@@ -100,7 +74,7 @@ fn main() {\n     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability\n     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability\n-    let _ = &*ATOMIC_TUPLE.1; //~ ERROR interior mutability\n+    let _ = &*ATOMIC_TUPLE.1;\n     let _ = &ATOMIC_TUPLE.2;\n     let _ = (&&&&ATOMIC_TUPLE).0;\n     let _ = (&&&&ATOMIC_TUPLE).2;\n@@ -124,9 +98,6 @@ fn main() {\n     assert_eq!(STATIC_TUPLE.0.load(Ordering::SeqCst), 3);\n     assert!(STATIC_TUPLE.1.is_empty());\n \n-    u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n-    assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n-\n     assert_eq!(NO_ANN.to_string(), \"70\"); // should never lint this.\n \n     let _ = &CELL_REF.0;", "previous_filename": "tests/ui/borrow_interior_mutable_const.rs"}, {"sha": "9a908cf30e945cc100e1a98126448250704031f0", "filename": "tests/ui/borrow_interior_mutable_const/others.stderr", "status": "renamed", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr?ref=be8160878ab7a8e1367acecc173f92e6f509e033", "patch": "@@ -1,139 +1,115 @@\n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:44:18\n-   |\n-LL |         let _ = &Self::ASSOC; //~ ERROR interior mutability\n-   |                  ^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:80:5\n+  --> $DIR/others.rs:54:5\n    |\n LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^\n    |\n+   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:81:16\n+  --> $DIR/others.rs:55:16\n    |\n LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutability\n    |                ^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:84:22\n+  --> $DIR/others.rs:58:22\n    |\n LL |     let _once_ref = &ONCE_INIT; //~ ERROR interior mutability\n    |                      ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:85:25\n+  --> $DIR/others.rs:59:25\n    |\n LL |     let _once_ref_2 = &&ONCE_INIT; //~ ERROR interior mutability\n    |                         ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:86:27\n+  --> $DIR/others.rs:60:27\n    |\n LL |     let _once_ref_4 = &&&&ONCE_INIT; //~ ERROR interior mutability\n    |                           ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:87:26\n+  --> $DIR/others.rs:61:26\n    |\n LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability\n    |                          ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:98:14\n+  --> $DIR/others.rs:72:14\n    |\n LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:99:14\n+  --> $DIR/others.rs:73:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:100:19\n+  --> $DIR/others.rs:74:19\n    |\n LL |     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability\n    |                   ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:101:14\n+  --> $DIR/others.rs:75:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:102:13\n+  --> $DIR/others.rs:76:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:108:13\n+  --> $DIR/others.rs:82:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:113:5\n+  --> $DIR/others.rs:87:5\n    |\n LL |     CELL.set(2); //~ ERROR interior mutability\n    |     ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:114:16\n+  --> $DIR/others.rs:88:16\n    |\n LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability\n    |                ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:127:5\n-   |\n-LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:128:16\n-   |\n-LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n-   |                ^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: aborting due to 17 previous errors\n+error: aborting due to 14 previous errors\n ", "previous_filename": "tests/ui/borrow_interior_mutable_const.stderr"}, {"sha": "06b5d62e8f9a816706e03fb174c9a28a5e95189f", "filename": "tests/ui/borrow_interior_mutable_const/traits.rs", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.rs?ref=be8160878ab7a8e1367acecc173f92e6f509e033", "patch": "@@ -0,0 +1,202 @@\n+#![warn(clippy::borrow_interior_mutable_const)]\n+#![allow(clippy::declare_interior_mutable_const)]\n+\n+// this file replicates its `declare` counterpart. Please see it for more discussions.\n+\n+use std::borrow::Cow;\n+use std::cell::Cell;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+trait ConcreteTypes {\n+    const ATOMIC: AtomicUsize;\n+    const STRING: String;\n+\n+    fn function() {\n+        let _ = &Self::ATOMIC; //~ ERROR interior mutable\n+        let _ = &Self::STRING;\n+    }\n+}\n+\n+impl ConcreteTypes for u64 {\n+    const ATOMIC: AtomicUsize = AtomicUsize::new(9);\n+    const STRING: String = String::new();\n+\n+    fn function() {\n+        // Lint this again since implementers can choose not to borrow it.\n+        let _ = &Self::ATOMIC; //~ ERROR interior mutable\n+        let _ = &Self::STRING;\n+    }\n+}\n+\n+// a helper trait used below\n+trait ConstDefault {\n+    const DEFAULT: Self;\n+}\n+\n+trait GenericTypes<T, U> {\n+    const TO_REMAIN_GENERIC: T;\n+    const TO_BE_CONCRETE: U;\n+\n+    fn function() {\n+        let _ = &Self::TO_REMAIN_GENERIC;\n+    }\n+}\n+\n+impl<T: ConstDefault> GenericTypes<T, AtomicUsize> for Vec<T> {\n+    const TO_REMAIN_GENERIC: T = T::DEFAULT;\n+    const TO_BE_CONCRETE: AtomicUsize = AtomicUsize::new(11);\n+\n+    fn function() {\n+        let _ = &Self::TO_REMAIN_GENERIC;\n+        let _ = &Self::TO_BE_CONCRETE; //~ ERROR interior mutable\n+    }\n+}\n+\n+// a helper type used below\n+pub struct Wrapper<T>(T);\n+\n+trait AssocTypes {\n+    type ToBeFrozen;\n+    type ToBeUnfrozen;\n+    type ToBeGenericParam;\n+\n+    const TO_BE_FROZEN: Self::ToBeFrozen;\n+    const TO_BE_UNFROZEN: Self::ToBeUnfrozen;\n+    const WRAPPED_TO_BE_UNFROZEN: Wrapper<Self::ToBeUnfrozen>;\n+    const WRAPPED_TO_BE_GENERIC_PARAM: Wrapper<Self::ToBeGenericParam>;\n+\n+    fn function() {\n+        let _ = &Self::TO_BE_FROZEN;\n+        let _ = &Self::WRAPPED_TO_BE_UNFROZEN;\n+    }\n+}\n+\n+impl<T: ConstDefault> AssocTypes for Vec<T> {\n+    type ToBeFrozen = u16;\n+    type ToBeUnfrozen = AtomicUsize;\n+    type ToBeGenericParam = T;\n+\n+    const TO_BE_FROZEN: Self::ToBeFrozen = 12;\n+    const TO_BE_UNFROZEN: Self::ToBeUnfrozen = AtomicUsize::new(13);\n+    const WRAPPED_TO_BE_UNFROZEN: Wrapper<Self::ToBeUnfrozen> = Wrapper(AtomicUsize::new(14));\n+    const WRAPPED_TO_BE_GENERIC_PARAM: Wrapper<Self::ToBeGenericParam> = Wrapper(T::DEFAULT);\n+\n+    fn function() {\n+        let _ = &Self::TO_BE_FROZEN;\n+        let _ = &Self::TO_BE_UNFROZEN; //~ ERROR interior mutable\n+        let _ = &Self::WRAPPED_TO_BE_UNFROZEN; //~ ERROR interior mutable\n+        let _ = &Self::WRAPPED_TO_BE_GENERIC_PARAM;\n+    }\n+}\n+\n+// a helper trait used below\n+trait AssocTypesHelper {\n+    type NotToBeBounded;\n+    type ToBeBounded;\n+\n+    const NOT_TO_BE_BOUNDED: Self::NotToBeBounded;\n+}\n+\n+trait AssocTypesFromGenericParam<T>\n+where\n+    T: AssocTypesHelper<ToBeBounded = AtomicUsize>,\n+{\n+    const NOT_BOUNDED: T::NotToBeBounded;\n+    const BOUNDED: T::ToBeBounded;\n+\n+    fn function() {\n+        let _ = &Self::NOT_BOUNDED;\n+        let _ = &Self::BOUNDED; //~ ERROR interior mutable\n+    }\n+}\n+\n+impl<T> AssocTypesFromGenericParam<T> for Vec<T>\n+where\n+    T: AssocTypesHelper<ToBeBounded = AtomicUsize>,\n+{\n+    const NOT_BOUNDED: T::NotToBeBounded = T::NOT_TO_BE_BOUNDED;\n+    const BOUNDED: T::ToBeBounded = AtomicUsize::new(15);\n+\n+    fn function() {\n+        let _ = &Self::NOT_BOUNDED;\n+        let _ = &Self::BOUNDED; //~ ERROR interior mutable\n+    }\n+}\n+\n+trait SelfType: Sized {\n+    const SELF: Self;\n+    const WRAPPED_SELF: Option<Self>;\n+\n+    fn function() {\n+        let _ = &Self::SELF;\n+        let _ = &Self::WRAPPED_SELF;\n+    }\n+}\n+\n+impl SelfType for u64 {\n+    const SELF: Self = 16;\n+    const WRAPPED_SELF: Option<Self> = Some(20);\n+\n+    fn function() {\n+        let _ = &Self::SELF;\n+        let _ = &Self::WRAPPED_SELF;\n+    }\n+}\n+\n+impl SelfType for AtomicUsize {\n+    const SELF: Self = AtomicUsize::new(17);\n+    const WRAPPED_SELF: Option<Self> = Some(AtomicUsize::new(21));\n+\n+    fn function() {\n+        let _ = &Self::SELF; //~ ERROR interior mutable\n+        let _ = &Self::WRAPPED_SELF; //~ ERROR interior mutable\n+    }\n+}\n+\n+trait BothOfCellAndGeneric<T> {\n+    const DIRECT: Cell<T>;\n+    const INDIRECT: Cell<*const T>;\n+\n+    fn function() {\n+        let _ = &Self::DIRECT;\n+        let _ = &Self::INDIRECT; //~ ERROR interior mutable\n+    }\n+}\n+\n+impl<T: ConstDefault> BothOfCellAndGeneric<T> for Vec<T> {\n+    const DIRECT: Cell<T> = Cell::new(T::DEFAULT);\n+    const INDIRECT: Cell<*const T> = Cell::new(std::ptr::null());\n+\n+    fn function() {\n+        let _ = &Self::DIRECT;\n+        let _ = &Self::INDIRECT; //~ ERROR interior mutable\n+    }\n+}\n+\n+struct Local<T>(T);\n+\n+impl<T> Local<T>\n+where\n+    T: ConstDefault + AssocTypesHelper<ToBeBounded = AtomicUsize>,\n+{\n+    const ATOMIC: AtomicUsize = AtomicUsize::new(18);\n+    const COW: Cow<'static, str> = Cow::Borrowed(\"tuvwxy\");\n+\n+    const GENERIC_TYPE: T = T::DEFAULT;\n+\n+    const ASSOC_TYPE: T::NotToBeBounded = T::NOT_TO_BE_BOUNDED;\n+    const BOUNDED_ASSOC_TYPE: T::ToBeBounded = AtomicUsize::new(19);\n+\n+    fn function() {\n+        let _ = &Self::ATOMIC; //~ ERROR interior mutable\n+        let _ = &Self::COW;\n+        let _ = &Self::GENERIC_TYPE;\n+        let _ = &Self::ASSOC_TYPE;\n+        let _ = &Self::BOUNDED_ASSOC_TYPE; //~ ERROR interior mutable\n+    }\n+}\n+\n+fn main() {\n+    u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n+    assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n+}"}, {"sha": "8f26403abd3ee0444c0f05a52e4cad2677f0b065", "filename": "tests/ui/borrow_interior_mutable_const/traits.stderr", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.stderr?ref=be8160878ab7a8e1367acecc173f92e6f509e033", "patch": "@@ -0,0 +1,123 @@\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:15:18\n+   |\n+LL |         let _ = &Self::ATOMIC; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:26:18\n+   |\n+LL |         let _ = &Self::ATOMIC; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:51:18\n+   |\n+LL |         let _ = &Self::TO_BE_CONCRETE; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:86:18\n+   |\n+LL |         let _ = &Self::TO_BE_UNFROZEN; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:87:18\n+   |\n+LL |         let _ = &Self::WRAPPED_TO_BE_UNFROZEN; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:109:18\n+   |\n+LL |         let _ = &Self::BOUNDED; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:122:18\n+   |\n+LL |         let _ = &Self::BOUNDED; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:151:18\n+   |\n+LL |         let _ = &Self::SELF; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:152:18\n+   |\n+LL |         let _ = &Self::WRAPPED_SELF; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:162:18\n+   |\n+LL |         let _ = &Self::INDIRECT; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:172:18\n+   |\n+LL |         let _ = &Self::INDIRECT; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:191:18\n+   |\n+LL |         let _ = &Self::ATOMIC; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:195:18\n+   |\n+LL |         let _ = &Self::BOUNDED_ASSOC_TYPE; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:200:5\n+   |\n+LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:201:16\n+   |\n+LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n+   |                ^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "48c5e9537d6d088111316151823a6c838e55e5c4", "filename": "tests/ui/declare_interior_mutable_const/others.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.rs?ref=be8160878ab7a8e1367acecc173f92e6f509e033", "patch": "@@ -0,0 +1,34 @@\n+#![warn(clippy::declare_interior_mutable_const)]\n+\n+use std::borrow::Cow;\n+use std::cell::Cell;\n+use std::fmt::Display;\n+use std::sync::atomic::AtomicUsize;\n+use std::sync::Once;\n+\n+const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n+const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n+const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n+//~^ ERROR interior mutable\n+\n+macro_rules! declare_const {\n+    ($name:ident: $ty:ty = $e:expr) => {\n+        const $name: $ty = $e;\n+    };\n+}\n+declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n+\n+// const ATOMIC_REF: &AtomicUsize = &AtomicUsize::new(7); // This will simply trigger E0492.\n+\n+const INTEGER: u8 = 8;\n+const STRING: String = String::new();\n+const STR: &str = \"012345\";\n+const COW: Cow<str> = Cow::Borrowed(\"abcdef\");\n+//^ note: a const item of Cow is used in the `postgres` package.\n+\n+const NO_ANN: &dyn Display = &70;\n+\n+static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);\n+//^ there should be no lints on this line\n+\n+fn main() {}"}, {"sha": "6153c96edc4f425e254084377242028e490203cb", "filename": "tests/ui/declare_interior_mutable_const/others.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr?ref=be8160878ab7a8e1367acecc173f92e6f509e033", "patch": "@@ -0,0 +1,39 @@\n+error: a `const` item should never be interior mutable\n+  --> $DIR/others.rs:9:1\n+   |\n+LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | make this a static item (maybe with lazy_static)\n+   |\n+   = note: `-D clippy::declare-interior-mutable-const` implied by `-D warnings`\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/others.rs:10:1\n+   |\n+LL | const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | make this a static item (maybe with lazy_static)\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/others.rs:11:1\n+   |\n+LL | const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | make this a static item (maybe with lazy_static)\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/others.rs:16:9\n+   |\n+LL |         const $name: $ty = $e;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n+   | ------------------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "535147ccc645121259280495102cb985c4905d15", "filename": "tests/ui/declare_interior_mutable_const/traits.rs", "status": "renamed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.rs?ref=be8160878ab7a8e1367acecc173f92e6f509e033", "patch": "@@ -2,37 +2,13 @@\n \n use std::borrow::Cow;\n use std::cell::Cell;\n-use std::fmt::Display;\n use std::sync::atomic::AtomicUsize;\n-use std::sync::Once;\n-\n-const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n-const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n-const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n-//~^ ERROR interior mutable\n \n macro_rules! declare_const {\n     ($name:ident: $ty:ty = $e:expr) => {\n         const $name: $ty = $e;\n     };\n }\n-declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n-\n-// const ATOMIC_REF: &AtomicUsize = &AtomicUsize::new(7); // This will simply trigger E0492.\n-\n-const INTEGER: u8 = 8;\n-const STRING: String = String::new();\n-const STR: &str = \"012345\";\n-const COW: Cow<str> = Cow::Borrowed(\"abcdef\");\n-//^ note: a const item of Cow is used in the `postgres` package.\n-\n-const NO_ANN: &dyn Display = &70;\n-\n-static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);\n-//^ there should be no lints on this line\n-\n-#[allow(clippy::declare_interior_mutable_const)]\n-const ONCE_INIT: Once = Once::new();\n \n // a constant whose type is a concrete type should be linted at the definition site.\n trait ConcreteTypes {", "previous_filename": "tests/ui/declare_interior_mutable_const.rs"}, {"sha": "bb77f39b62c1f668a2729b871c728ecb66567816", "filename": "tests/ui/declare_interior_mutable_const/traits.stderr", "status": "renamed", "additions": 14, "deletions": 49, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be8160878ab7a8e1367acecc173f92e6f509e033/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr?ref=be8160878ab7a8e1367acecc173f92e6f509e033", "patch": "@@ -1,48 +1,13 @@\n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:9:1\n-   |\n-LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n-   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | make this a static item (maybe with lazy_static)\n-   |\n-   = note: `-D clippy::declare-interior-mutable-const` implied by `-D warnings`\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:10:1\n-   |\n-LL | const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n-   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | make this a static item (maybe with lazy_static)\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:11:1\n-   |\n-LL | const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n-   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | make this a static item (maybe with lazy_static)\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:16:9\n-   |\n-LL |         const $name: $ty = $e;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n-   | ------------------------------------------ in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:39:5\n+  --> $DIR/traits.rs:15:5\n    |\n LL |     const ATOMIC: AtomicUsize; //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::declare-interior-mutable-const` implied by `-D warnings`\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:16:9\n+  --> $DIR/traits.rs:9:9\n    |\n LL |         const $name: $ty = $e;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,58 +18,58 @@ LL |     declare_const!(ANOTHER_ATOMIC: AtomicUsize = Self::ATOMIC); //~ ERROR i\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:67:5\n+  --> $DIR/traits.rs:43:5\n    |\n LL |     const TO_BE_CONCRETE: AtomicUsize = AtomicUsize::new(11); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:92:5\n+  --> $DIR/traits.rs:68:5\n    |\n LL |     const TO_BE_UNFROZEN: Self::ToBeUnfrozen = AtomicUsize::new(13); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:93:5\n+  --> $DIR/traits.rs:69:5\n    |\n LL |     const WRAPPED_TO_BE_UNFROZEN: Wrapper<Self::ToBeUnfrozen> = Wrapper(AtomicUsize::new(14)); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:112:5\n+  --> $DIR/traits.rs:88:5\n    |\n LL |     const BOUNDED: T::ToBeBounded; //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:140:5\n+  --> $DIR/traits.rs:116:5\n    |\n LL |     const SELF: Self = AtomicUsize::new(17); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:141:5\n+  --> $DIR/traits.rs:117:5\n    |\n LL |     const WRAPPED_SELF: Option<Self> = Some(AtomicUsize::new(21)); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:149:5\n+  --> $DIR/traits.rs:125:5\n    |\n LL |     const INDIRECT: Cell<*const T>; //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:165:5\n+  --> $DIR/traits.rs:141:5\n    |\n LL |     const ATOMIC: AtomicUsize = AtomicUsize::new(18); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:171:5\n+  --> $DIR/traits.rs:147:5\n    |\n LL |     const BOUNDED_ASSOC_TYPE: T::ToBeBounded = AtomicUsize::new(19); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 11 previous errors\n ", "previous_filename": "tests/ui/declare_interior_mutable_const.stderr"}]}