{"sha": "4c43bc32b723f0727456e7d40fb5feeeb1c4d448", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNDNiYzMyYjcyM2YwNzI3NDU2ZTdkNDBmYjVmZWVlYjFjNGQ0NDg=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-06-20T20:28:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-20T20:28:25Z"}, "message": "Rollup merge of #42271 - tinaun:charfromstr, r=alexcrichton\n\nadd `FromStr` Impl for `char`\n\nfixes #24939.\n\nis it possible to use pub(restricted) instead of using a stability attribute for the internal error representation? is it needed at all?", "tree": {"sha": "a5718919322009fbdddaca0ff3d955c2292e3470", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5718919322009fbdddaca0ff3d955c2292e3470"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c43bc32b723f0727456e7d40fb5feeeb1c4d448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c43bc32b723f0727456e7d40fb5feeeb1c4d448", "html_url": "https://github.com/rust-lang/rust/commit/4c43bc32b723f0727456e7d40fb5feeeb1c4d448", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29bce6e220f6fd2292d13d65fe503af7bf4852b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/29bce6e220f6fd2292d13d65fe503af7bf4852b7", "html_url": "https://github.com/rust-lang/rust/commit/29bce6e220f6fd2292d13d65fe503af7bf4852b7"}, {"sha": "fd9d7aa2cf76c949633cb4156642654238c03921", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9d7aa2cf76c949633cb4156642654238c03921", "html_url": "https://github.com/rust-lang/rust/commit/fd9d7aa2cf76c949633cb4156642654238c03921"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "8013b4988e1414ad1ee408dd494b84da85edb034", "filename": "src/doc/unstable-book/src/library-features/char-error-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fchar-error-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fchar-error-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fchar-error-internals.md?ref=4c43bc32b723f0727456e7d40fb5feeeb1c4d448", "patch": "@@ -0,0 +1,5 @@\n+# `char_error_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "44f5fdbf4312bcfe92a9ce8a915d03831c334856", "filename": "src/libcore/char.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=4c43bc32b723f0727456e7d40fb5feeeb1c4d448", "patch": "@@ -19,7 +19,7 @@ use char_private::is_printable;\n use convert::TryFrom;\n use fmt::{self, Write};\n use slice;\n-use str::from_utf8_unchecked_mut;\n+use str::{from_utf8_unchecked_mut, FromStr};\n use iter::FusedIterator;\n use mem::transmute;\n \n@@ -208,6 +208,63 @@ impl From<u8> for char {\n     }\n }\n \n+\n+/// An error which can be returned when parsing a char.\n+#[stable(feature = \"char_from_str\", since = \"1.19.0\")]\n+#[derive(Clone, Debug)]\n+pub struct ParseCharError {\n+    kind: CharErrorKind,\n+}\n+\n+impl ParseCharError {\n+    #[unstable(feature = \"char_error_internals\",\n+               reason = \"this method should not be available publicly\",\n+               issue = \"0\")]\n+    #[doc(hidden)]\n+    pub fn __description(&self) -> &str {\n+        match self.kind {\n+            CharErrorKind::EmptyString => {\n+                \"cannot parse char from empty string\"\n+            },\n+            CharErrorKind::TooManyChars => \"too many characters in string\"\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum CharErrorKind {\n+    EmptyString,\n+    TooManyChars,\n+}\n+\n+#[stable(feature = \"char_from_str\", since = \"1.19.0\")]\n+impl fmt::Display for ParseCharError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.__description().fmt(f)\n+    }\n+}\n+\n+\n+#[stable(feature = \"char_from_str\", since = \"1.19.0\")]\n+impl FromStr for char {\n+    type Err = ParseCharError;\n+\n+    #[inline]\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        let mut chars = s.chars();\n+        match (chars.next(), chars.next()) {\n+            (None, _) => {\n+                Err(ParseCharError { kind: CharErrorKind::EmptyString })\n+            },\n+            (Some(c), None) => Ok(c),\n+            _ => {\n+                Err(ParseCharError { kind: CharErrorKind::TooManyChars })\n+            }\n+        }\n+    }\n+}\n+\n+\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n impl TryFrom<u32> for char {\n     type Error = CharTryFromError;"}, {"sha": "7c3b90c81536e16a6342d3ada76b9d68832a5306", "filename": "src/libcore/tests/char.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/src%2Flibcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/src%2Flibcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fchar.rs?ref=4c43bc32b723f0727456e7d40fb5feeeb1c4d448", "patch": "@@ -10,6 +10,7 @@\n \n use std::{char,str};\n use std::convert::TryFrom;\n+use std::str::FromStr;\n \n #[test]\n fn test_convert() {\n@@ -28,6 +29,16 @@ fn test_convert() {\n     assert!(char::try_from(0xFFFF_FFFF_u32).is_err());\n }\n \n+#[test]\n+fn test_from_str() {\n+    assert_eq!(char::from_str(\"a\").unwrap(), 'a');\n+    assert_eq!(char::try_from(\"a\").unwrap(), 'a');\n+    assert_eq!(char::from_str(\"\\0\").unwrap(), '\\0');\n+    assert_eq!(char::from_str(\"\\u{D7FF}\").unwrap(), '\\u{d7FF}');\n+    assert!(char::from_str(\"\").is_err());\n+    assert!(char::from_str(\"abc\").is_err());\n+}\n+\n #[test]\n fn test_is_lowercase() {\n     assert!('a'.is_lowercase());"}, {"sha": "4b340f70fbc745089b811af196960db05ab274d1", "filename": "src/libstd/error.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=4c43bc32b723f0727456e7d40fb5feeeb1c4d448", "patch": "@@ -340,6 +340,14 @@ impl Error for char::CharTryFromError {\n     }\n }\n \n+#[stable(feature = \"char_from_str\", since = \"1.19.0\")]\n+impl Error for char::ParseCharError {\n+    fn description(&self) -> &str {\n+        self.__description()\n+    }\n+}\n+\n+\n // copied from any.rs\n impl Error + 'static {\n     /// Returns true if the boxed type is the same as `T`"}, {"sha": "bafe23e80a030cfb3758eb43ad213b6473f31a97", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4c43bc32b723f0727456e7d40fb5feeeb1c4d448", "patch": "@@ -254,6 +254,7 @@\n #![feature(cfg_target_thread_local)]\n #![feature(cfg_target_vendor)]\n #![feature(char_escape_debug)]\n+#![feature(char_error_internals)]\n #![feature(char_internals)]\n #![feature(collections_range)]\n #![feature(compiler_builtins_lib)]"}, {"sha": "d4d8993efb3160e3b0e69dd2ce6f5d327e6e5739", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c43bc32b723f0727456e7d40fb5feeeb1c4d448/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=4c43bc32b723f0727456e7d40fb5feeeb1c4d448", "patch": "@@ -38,6 +38,8 @@ use tables::{conversions, derived_property, general_category, property};\n pub use core::char::{MAX, from_digit, from_u32, from_u32_unchecked};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::char::{EscapeDebug, EscapeDefault, EscapeUnicode};\n+#[stable(feature = \"char_from_str\", since = \"1.19.0\")]\n+pub use core::char::ParseCharError;\n \n // unstable reexports\n #[unstable(feature = \"try_from\", issue = \"33417\")]"}]}