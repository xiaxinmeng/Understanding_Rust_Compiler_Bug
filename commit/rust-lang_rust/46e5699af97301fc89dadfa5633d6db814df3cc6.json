{"sha": "46e5699af97301fc89dadfa5633d6db814df3cc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZTU2OTlhZjk3MzAxZmM4OWRhZGZhNTYzM2Q2ZGI4MTRkZjNjYzY=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-13T07:55:58Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-13T08:20:26Z"}, "message": "Add 64bit / 32bit files", "tree": {"sha": "b33ba48c15a8ab95d210134cea56713975cd5d9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b33ba48c15a8ab95d210134cea56713975cd5d9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46e5699af97301fc89dadfa5633d6db814df3cc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46e5699af97301fc89dadfa5633d6db814df3cc6", "html_url": "https://github.com/rust-lang/rust/commit/46e5699af97301fc89dadfa5633d6db814df3cc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46e5699af97301fc89dadfa5633d6db814df3cc6/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ef5b884b248f5d4a9d0bf8594077e6698f1172c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef5b884b248f5d4a9d0bf8594077e6698f1172c", "html_url": "https://github.com/rust-lang/rust/commit/9ef5b884b248f5d4a9d0bf8594077e6698f1172c"}], "stats": {"total": 113, "additions": 91, "deletions": 22}, "files": [{"sha": "df94c897e92f870b526f2a1f434dcde6546ce68d", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/46e5699af97301fc89dadfa5633d6db814df3cc6/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/46e5699af97301fc89dadfa5633d6db814df3cc6/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit?ref=46e5699af97301fc89dadfa5633d6db814df3cc6", "patch": "@@ -0,0 +1,66 @@\n+- // MIR for `foo` before MatchBranchSimplification\n++ // MIR for `foo` after MatchBranchSimplification\n+  \n+  fn foo(_1: std::option::Option<()>) -> () {\n+      debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:4:8: 4:11\n+      let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:4:25: 4:25\n+      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n+-         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n++         _2 = Eq(move _3, const 0_isize); // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++                                          // ty::Const\n++                                          // + ty: isize\n++                                          // + val: Value(Scalar(0x00000000))\n++                                          // mir::Constant\n++                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n++                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000000)) }\n++         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n+      }\n+  \n+      bb1: {\n+          _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb2: {\n+          _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb3: {\n+          switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6\n+      }\n+  \n+      bb4: {\n+          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:5:5: 7:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb5;                     // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6\n+      }\n+  \n+      bb5: {\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:8:2: 8:2\n+      }\n+  }\n+  "}, {"sha": "06849b4a5d98347be2f15c2f1c50481ce38b5be6", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "status": "renamed", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/46e5699af97301fc89dadfa5633d6db814df3cc6/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/46e5699af97301fc89dadfa5633d6db814df3cc6/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit?ref=46e5699af97301fc89dadfa5633d6db814df3cc6", "patch": "@@ -2,16 +2,23 @@\n + // MIR for `foo` after MatchBranchSimplification\n   \n   fn foo(_1: std::option::Option<()>) -> () {\n-      debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:3:8: 3:11\n-      let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:3:25: 3:25\n+      debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:4:8: 4:11\n+      let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:4:25: 4:25\n       let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:4:22: 4:26\n+      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:4:22: 4:26\n--         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:4:22: 4:26\n-+         goto -> bb2;                     // scope 0 at $DIR/matches_reduce_branches.rs:4:22: 4:26\n+          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n+-         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n++         _2 = Eq(move _3, const 0_isize); // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++                                          // ty::Const\n++                                          // + ty: isize\n++                                          // + val: Value(Scalar(0x0000000000000000))\n++                                          // mir::Constant\n++                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n++                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000000)) }\n++         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n       }\n   \n       bb1: {\n@@ -26,39 +33,34 @@\n       }\n   \n       bb2: {\n--         _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _2 = Eq(move _3, const 0_isize); // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n--                                          // + ty: bool\n--                                          // + val: Value(Scalar(0x01))\n-+                                          // + ty: isize\n-+                                          // + val: Value(Scalar(0x0000000000000000))\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n--                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n-+                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000000)) }\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb3: {\n-          switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:4:5: 6:6\n+          switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6\n       }\n   \n       bb4: {\n-          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:4:5: 6:6\n+          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:4:5: 6:6\n+                                           // + span: $DIR/matches_reduce_branches.rs:5:5: 7:6\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          goto -> bb5;                     // scope 0 at $DIR/matches_reduce_branches.rs:4:5: 6:6\n+          goto -> bb5;                     // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6\n       }\n   \n       bb5: {\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:7:1: 7:2\n-          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:7:2: 7:2\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:8:2: 8:2\n       }\n   }\n   ", "previous_filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff"}, {"sha": "91b6bfc836bd49dafc88c03708df7a070e14675e", "filename": "src/test/mir-opt/matches_reduce_branches.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46e5699af97301fc89dadfa5633d6db814df3cc6/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e5699af97301fc89dadfa5633d6db814df3cc6/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs?ref=46e5699af97301fc89dadfa5633d6db814df3cc6", "patch": "@@ -1,3 +1,4 @@\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR matches_reduce_branches.foo.MatchBranchSimplification.diff\n \n fn foo(bar: Option<()>) {"}]}