{"sha": "1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMjQ4M2ViNmZkNjc5ZmQ3ZjYzY2MwYzBmYjk2OTJhMmFhNjk4YWE=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-12-07T01:05:51Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-12-07T02:37:54Z"}, "message": "Address review feedback.", "tree": {"sha": "e8dda3b1fd911143f0ff7cae4453de124b1cb424", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8dda3b1fd911143f0ff7cae4453de124b1cb424"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa", "html_url": "https://github.com/rust-lang/rust/commit/1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99165ce1f76573729530c241036a0514ca1cf232", "url": "https://api.github.com/repos/rust-lang/rust/commits/99165ce1f76573729530c241036a0514ca1cf232", "html_url": "https://github.com/rust-lang/rust/commit/99165ce1f76573729530c241036a0514ca1cf232"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "099ba5b39bb77998b29825750c3cceb3f2f5419b", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa", "patch": "@@ -771,14 +771,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n \n         let needs_location =\n-            instance.map(|i| i.def.requires_caller_location(self.cx.tcx())).unwrap_or_default();\n+            instance.map_or(false, |i| i.def.requires_caller_location(self.cx.tcx()));\n         if needs_location {\n             assert_eq!(\n                 fn_abi.args.len(), args.len() + 1,\n                 \"#[track_caller] fn's must have 1 more argument in their ABI than in their MIR\",\n             );\n             let location = self.get_caller_location(&mut bx, span);\n-            let last_arg = &fn_abi.args.last().unwrap();\n+            let last_arg = fn_abi.args.last().unwrap();\n             self.codegen_argument(&mut bx, location, &mut llargs, last_arg);\n         }\n "}, {"sha": "33e343de86be13291f2d1f193562d8f4398d14ad", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa", "patch": "@@ -435,10 +435,10 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             \"#[track_caller] fn's must have 1 more argument in their ABI than in their MIR\",\n         );\n \n-        let arg = &fx.fn_abi.args.last().unwrap();\n+        let arg = fx.fn_abi.args.last().unwrap();\n         match arg.mode {\n             PassMode::Direct(_) => (),\n-            _ => panic!(\"caller location must be PassMode::Direct, found {:?}\", arg.mode),\n+            _ => bug!(\"caller location must be PassMode::Direct, found {:?}\", arg.mode),\n         }\n \n         fx.caller_location = Some(OperandRef {"}, {"sha": "67f0aed243da1f20bd46fc23e61d5d59451925c0", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa", "patch": "@@ -112,7 +112,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // `src/librustc/ty/constness.rs`\n         match intrinsic_name {\n             sym::caller_location => {\n-                let span = self.find_closest_untracked_caller_location(span);\n+                let span = self.find_closest_untracked_caller_location().unwrap_or(span);\n                 let location = self.alloc_caller_location_for_span(span);\n                 self.write_scalar(location.ptr, dest)?;\n             }"}, {"sha": "ec843ef7a4d86995c13fd8b74e7e48c3b13084d0", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=1c2483eb6fd679fd7f63cc0c0fb9692a2aa698aa", "patch": "@@ -7,24 +7,17 @@ use crate::interpret::{Scalar, MemoryKind, MPlaceTy, intrinsics::{InterpCx, Mach\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Walks up the callstack from the intrinsic's callsite, searching for the first frame which is\n-    /// not `#[track_caller]`. Returns the (passed) span of the intrinsic's callsite if the first\n-    /// frame in the stack is untracked so that we can display the callsite of the intrinsic within\n-    /// that function.\n-    crate fn find_closest_untracked_caller_location(\n-        &self,\n-        intrinsic_loc: Span,\n-    ) -> Span {\n-        debug!(\"finding closest untracked caller relative to {:?}\", intrinsic_loc);\n-\n-        let mut caller_span = intrinsic_loc;\n+    /// not `#[track_caller]`.\n+    crate fn find_closest_untracked_caller_location(&self) -> Option<Span> {\n+        let mut caller_span = None;\n         for next_caller in self.stack.iter().rev() {\n             if !next_caller.instance.def.requires_caller_location(*self.tcx) {\n                 return caller_span;\n             }\n-            caller_span = next_caller.span;\n+            caller_span = Some(next_caller.span);\n         }\n \n-        intrinsic_loc\n+        caller_span\n     }\n \n     /// Allocate a `const core::panic::Location` with the provided filename and line/column numbers."}]}