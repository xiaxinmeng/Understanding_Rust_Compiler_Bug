{"sha": "4caa9dfa71ffc87e6fadce3d7ba2f3f97f908930", "node_id": "C_kwDOAAsO6NoAKDRjYWE5ZGZhNzFmZmM4N2U2ZmFkY2UzZDdiYTJmM2Y5N2Y5MDg5MzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-29T05:14:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-29T05:14:17Z"}, "message": "Rollup merge of #107097 - tmiasko:ssa, r=cjgillot\n\nFix def-use dominance check\n\nA definition does not dominate a use in the same statement. For example\nin MIR generated for compound assignment x += a (when overflow checks\nare disabled).", "tree": {"sha": "ec5aff3e8ad55bf8d5d22965677c80543ed270e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec5aff3e8ad55bf8d5d22965677c80543ed270e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4caa9dfa71ffc87e6fadce3d7ba2f3f97f908930", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1gCpCRBK7hj4Ov3rIwAA3tYIAI+RbqtU2TZwiXJuLEhJTTEG\nJC17IYEmE5KDjjtl+ItPxrHI0La4aUKz/vYb97c1WXpoYzpbr4EtMfzcPeQ1n7bs\nE4epEF/RUmZjOo1bbP2lzUrMvhZImHNQQ2i9plicS5e+XHb0iyywvM16Nn1xaswg\nZQjUQH9lOWnNYjvY4LQ5OIHrD0sgVmUDM4iRhIjUvQmjR190SH35xcwr6ICYBaKG\nwzLMBQSrmr4E+TAktFDfKBQxCU8uJfLakLCBKDt3fTq2bNRflmhIgIQdpnqmzNuw\niZ0spclltlQS2b1E6LlArgcO4X4xnQxqki1/tGjnUBvuEPZdvaqTBavkXiqT7Fg=\n=JJOF\n-----END PGP SIGNATURE-----\n", "payload": "tree ec5aff3e8ad55bf8d5d22965677c80543ed270e8\nparent 0f86ada9d8095a2cc61bfaf0b21f872e34602674\nparent e489971902c814e5adb7041d1bda230a1acb4fd7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674969257 +0100\ncommitter GitHub <noreply@github.com> 1674969257 +0100\n\nRollup merge of #107097 - tmiasko:ssa, r=cjgillot\n\nFix def-use dominance check\n\nA definition does not dominate a use in the same statement. For example\nin MIR generated for compound assignment x += a (when overflow checks\nare disabled).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4caa9dfa71ffc87e6fadce3d7ba2f3f97f908930", "html_url": "https://github.com/rust-lang/rust/commit/4caa9dfa71ffc87e6fadce3d7ba2f3f97f908930", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4caa9dfa71ffc87e6fadce3d7ba2f3f97f908930/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f86ada9d8095a2cc61bfaf0b21f872e34602674", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f86ada9d8095a2cc61bfaf0b21f872e34602674", "html_url": "https://github.com/rust-lang/rust/commit/0f86ada9d8095a2cc61bfaf0b21f872e34602674"}, {"sha": "e489971902c814e5adb7041d1bda230a1acb4fd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e489971902c814e5adb7041d1bda230a1acb4fd7", "html_url": "https://github.com/rust-lang/rust/commit/e489971902c814e5adb7041d1bda230a1acb4fd7"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "95aad10fdb0f9852505cd08ebffa88f6f62ac7c2", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4caa9dfa71ffc87e6fadce3d7ba2f3f97f908930/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4caa9dfa71ffc87e6fadce3d7ba2f3f97f908930/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=4caa9dfa71ffc87e6fadce3d7ba2f3f97f908930", "patch": "@@ -36,7 +36,7 @@ pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     // Arguments get assigned to by means of the function being called\n     for arg in mir.args_iter() {\n-        analyzer.assign(arg, mir::START_BLOCK.start_location());\n+        analyzer.assign(arg, DefLocation::Argument);\n     }\n \n     // If there exists a local definition that dominates all uses of that local,\n@@ -64,7 +64,22 @@ enum LocalKind {\n     /// A scalar or a scalar pair local that is neither defined nor used.\n     Unused,\n     /// A scalar or a scalar pair local with a single definition that dominates all uses.\n-    SSA(mir::Location),\n+    SSA(DefLocation),\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq)]\n+enum DefLocation {\n+    Argument,\n+    Body(Location),\n+}\n+\n+impl DefLocation {\n+    fn dominates(self, location: Location, dominators: &Dominators<mir::BasicBlock>) -> bool {\n+        match self {\n+            DefLocation::Argument => true,\n+            DefLocation::Body(def) => def.successor_within_block().dominates(location, dominators),\n+        }\n+    }\n }\n \n struct LocalAnalyzer<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n@@ -74,17 +89,13 @@ struct LocalAnalyzer<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n }\n \n impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n-    fn assign(&mut self, local: mir::Local, location: Location) {\n+    fn assign(&mut self, local: mir::Local, location: DefLocation) {\n         let kind = &mut self.locals[local];\n         match *kind {\n             LocalKind::ZST => {}\n             LocalKind::Memory => {}\n-            LocalKind::Unused => {\n-                *kind = LocalKind::SSA(location);\n-            }\n-            LocalKind::SSA(_) => {\n-                *kind = LocalKind::Memory;\n-            }\n+            LocalKind::Unused => *kind = LocalKind::SSA(location),\n+            LocalKind::SSA(_) => *kind = LocalKind::Memory,\n         }\n     }\n \n@@ -166,7 +177,7 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n         debug!(\"visit_assign(place={:?}, rvalue={:?})\", place, rvalue);\n \n         if let Some(local) = place.as_local() {\n-            self.assign(local, location);\n+            self.assign(local, DefLocation::Body(location));\n             if self.locals[local] != LocalKind::Memory {\n                 let decl_span = self.fx.mir.local_decls[local].source_info.span;\n                 if !self.fx.rvalue_creates_operand(rvalue, decl_span) {\n@@ -189,7 +200,7 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n         match context {\n             PlaceContext::MutatingUse(MutatingUseContext::Call)\n             | PlaceContext::MutatingUse(MutatingUseContext::Yield) => {\n-                self.assign(local, location);\n+                self.assign(local, DefLocation::Body(location));\n             }\n \n             PlaceContext::NonUse(_) | PlaceContext::MutatingUse(MutatingUseContext::Retag) => {}"}, {"sha": "5e2f10cefe92b9b22d9193f5dab13386f5e3fb56", "filename": "tests/ui/mir/mir_codegen_ssa.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4caa9dfa71ffc87e6fadce3d7ba2f3f97f908930/tests%2Fui%2Fmir%2Fmir_codegen_ssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4caa9dfa71ffc87e6fadce3d7ba2f3f97f908930/tests%2Fui%2Fmir%2Fmir_codegen_ssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fmir_codegen_ssa.rs?ref=4caa9dfa71ffc87e6fadce3d7ba2f3f97f908930", "patch": "@@ -0,0 +1,19 @@\n+// build-pass\n+// compile-flags: --crate-type=lib\n+#![feature(custom_mir, core_intrinsics)]\n+use std::intrinsics::mir::*;\n+\n+#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\n+pub fn f(a: u32) -> u32 {\n+    mir!(\n+        let x: u32;\n+        {\n+            // Previously code generation failed with ICE \"use of .. before def ...\" because the\n+            // definition of x was incorrectly identified as dominating the use of x located in the\n+            // same statement:\n+            x = x + a;\n+            RET = x;\n+            Return()\n+        }\n+    )\n+}"}]}