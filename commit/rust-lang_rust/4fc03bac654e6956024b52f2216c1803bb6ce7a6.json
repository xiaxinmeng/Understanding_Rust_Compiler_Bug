{"sha": "4fc03bac654e6956024b52f2216c1803bb6ce7a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzAzYmFjNjU0ZTY5NTYwMjRiNTJmMjIxNmMxODAzYmI2Y2U3YTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-06T04:45:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-06T04:45:58Z"}, "message": "librustc: Implement \"-Z no-monomorphic-collapse\" as a debugging tool to diagnose mysterious crashes we're seeing. rs=debug-tool", "tree": {"sha": "0426eb3716b1182019d2a94919db0b9f9956a511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0426eb3716b1182019d2a94919db0b9f9956a511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc03bac654e6956024b52f2216c1803bb6ce7a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc03bac654e6956024b52f2216c1803bb6ce7a6", "html_url": "https://github.com/rust-lang/rust/commit/4fc03bac654e6956024b52f2216c1803bb6ce7a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc03bac654e6956024b52f2216c1803bb6ce7a6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa3aa3b1b2b6d648af35122905d4958ad72377fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3aa3b1b2b6d648af35122905d4958ad72377fb", "html_url": "https://github.com/rust-lang/rust/commit/aa3aa3b1b2b6d648af35122905d4958ad72377fb"}], "stats": {"total": 66, "additions": 39, "deletions": 27}, "files": [{"sha": "38594ea2c17ff2cf8f73fc873694a82997f2ae92", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fc03bac654e6956024b52f2216c1803bb6ce7a6/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc03bac654e6956024b52f2216c1803bb6ce7a6/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=4fc03bac654e6956024b52f2216c1803bb6ce7a6", "patch": "@@ -65,6 +65,7 @@ const debug_llvm: uint = 1 << 13;\n const count_type_sizes: uint = 1 << 14;\n const meta_stats: uint = 1 << 15;\n const no_opt: uint = 1 << 16;\n+const no_monomorphic_collapse: uint = 1 << 17;\n \n fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ~[(~\"verbose\", ~\"in general, enable more debug printouts\", verbose),\n@@ -90,6 +91,8 @@ fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n       count_type_sizes),\n      (~\"meta-stats\", ~\"gather metadata statistics\", meta_stats),\n      (~\"no-opt\", ~\"do not optimize, even if -O is passed\", no_opt),\n+     (~\"no-monomorphic-collapse\", ~\"do not collapse template instantiations\",\n+      no_monomorphic_collapse),\n     ]\n }\n \n@@ -242,6 +245,9 @@ impl Session {\n     fn borrowck_stats() -> bool { self.debugging_opt(borrowck_stats) }\n     fn borrowck_note_pure() -> bool { self.debugging_opt(borrowck_note_pure) }\n     fn borrowck_note_loan() -> bool { self.debugging_opt(borrowck_note_loan) }\n+    fn no_monomorphic_collapse() -> bool {\n+        self.debugging_opt(no_monomorphic_collapse)\n+    }\n \n     fn str_of(id: ast::ident) -> ~str {\n         *self.parse_sess.interner.get(id)"}, {"sha": "ed1fd0f685d72daf87148b3a6ef19d7018674302", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4fc03bac654e6956024b52f2216c1803bb6ce7a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc03bac654e6956024b52f2216c1803bb6ce7a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=4fc03bac654e6956024b52f2216c1803bb6ce7a6", "patch": "@@ -320,37 +320,43 @@ fn make_mono_id(ccx: @crate_ctxt, item: ast::def_id, substs: ~[ty::t],\n     let param_ids = match param_uses {\n       Some(uses) => {\n         vec::map2(precise_param_ids, uses, |id, uses| {\n-            match *id {\n-                (a, b@Some(_)) => mono_precise(a, b),\n-                (subst, None) => {\n-                    if *uses == 0u {\n-                        mono_any\n-                    } else if *uses == type_use::use_repr &&\n-                        !ty::type_needs_drop(ccx.tcx, subst)\n-                    {\n-                        let llty = type_of::type_of(ccx, subst);\n-                        let size = machine::llbitsize_of_real(ccx, llty);\n-                        let align = shape::llalign_of_pref(ccx, llty);\n-                        let mode = datum::appropriate_mode(subst);\n+            if ccx.sess.no_monomorphic_collapse() {\n+                match *id {\n+                    (a, b) => mono_precise(a, b)\n+                }\n+            } else {\n+                match *id {\n+                    (a, b@Some(_)) => mono_precise(a, b),\n+                    (subst, None) => {\n+                        if *uses == 0u {\n+                            mono_any\n+                        } else if *uses == type_use::use_repr &&\n+                            !ty::type_needs_drop(ccx.tcx, subst)\n+                        {\n+                            let llty = type_of::type_of(ccx, subst);\n+                            let size = machine::llbitsize_of_real(ccx, llty);\n+                            let align = shape::llalign_of_pref(ccx, llty);\n+                            let mode = datum::appropriate_mode(subst);\n \n-                        // FIXME(#3547)---scalars and floats are\n-                        // treated differently in most ABIs.  But we\n-                        // should be doing something more detailed\n-                        // here.\n-                        let is_float = match ty::get(subst).sty {\n-                            ty::ty_float(_) => true,\n-                            _ => false\n-                        };\n+                            // FIXME(#3547)---scalars and floats are\n+                            // treated differently in most ABIs.  But we\n+                            // should be doing something more detailed\n+                            // here.\n+                            let is_float = match ty::get(subst).sty {\n+                                ty::ty_float(_) => true,\n+                                _ => false\n+                            };\n \n-                        // Special value for nil to prevent problems\n-                        // with undef return pointers.\n-                        if size <= 8u && ty::type_is_nil(subst) {\n-                            mono_repr(0u, 0u, is_float, mode)\n+                            // Special value for nil to prevent problems\n+                            // with undef return pointers.\n+                            if size <= 8u && ty::type_is_nil(subst) {\n+                                mono_repr(0u, 0u, is_float, mode)\n+                            } else {\n+                                mono_repr(size, align, is_float, mode)\n+                            }\n                         } else {\n-                            mono_repr(size, align, is_float, mode)\n+                            mono_precise(subst, None)\n                         }\n-                    } else {\n-                        mono_precise(subst, None)\n                     }\n                 }\n             }"}]}