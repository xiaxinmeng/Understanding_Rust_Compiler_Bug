{"sha": "2abdc8805cf803ea53e96ca7ad44de3697fb7183", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYmRjODgwNWNmODAzZWE1M2U5NmNhN2FkNDRkZTM2OTdmYjcxODM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-13T06:25:02Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-15T21:16:51Z"}, "message": "Remove `MacroRulesTT`.", "tree": {"sha": "d7fdefb4e2686a5c1ee15dff8bb4839b19bf0c0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7fdefb4e2686a5c1ee15dff8bb4839b19bf0c0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2abdc8805cf803ea53e96ca7ad44de3697fb7183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2abdc8805cf803ea53e96ca7ad44de3697fb7183", "html_url": "https://github.com/rust-lang/rust/commit/2abdc8805cf803ea53e96ca7ad44de3697fb7183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2abdc8805cf803ea53e96ca7ad44de3697fb7183/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ddb66c4c7216f43cccac8fa08b17abc98bd6c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ddb66c4c7216f43cccac8fa08b17abc98bd6c0b", "html_url": "https://github.com/rust-lang/rust/commit/0ddb66c4c7216f43cccac8fa08b17abc98bd6c0b"}], "stats": {"total": 108, "additions": 51, "deletions": 57}, "files": [{"sha": "8f0cc2c3d750f96e35e87943371531c6e9b60d3c", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2abdc8805cf803ea53e96ca7ad44de3697fb7183/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdc8805cf803ea53e96ca7ad44de3697fb7183/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=2abdc8805cf803ea53e96ca7ad44de3697fb7183", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::transform::MirMapPass;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n use syntax::ext::base::{IdentTT, MultiModifier, MultiDecorator};\n-use syntax::ext::base::{MacroExpanderFn, MacroRulesTT};\n+use syntax::ext::base::MacroExpanderFn;\n use syntax::parse::token;\n use syntax::ast;\n use syntax::feature_gate::AttributeType;\n@@ -111,10 +111,6 @@ impl<'a> Registry<'a> {\n             }\n             MultiDecorator(ext) => MultiDecorator(ext),\n             MultiModifier(ext) => MultiModifier(ext),\n-            MacroRulesTT => {\n-                self.sess.err(\"plugin tried to register a new MacroRulesTT\");\n-                return;\n-            }\n         }));\n     }\n "}, {"sha": "9d0d74138cd4425403893e115db96f4e3baecdf7", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2abdc8805cf803ea53e96ca7ad44de3697fb7183/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdc8805cf803ea53e96ca7ad44de3697fb7183/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=2abdc8805cf803ea53e96ca7ad44de3697fb7183", "patch": "@@ -457,9 +457,6 @@ pub enum SyntaxExtension {\n     /// the block.\n     ///\n     IdentTT(Box<IdentMacroExpander + 'static>, Option<Span>, bool),\n-\n-    /// Represents `macro_rules!` itself.\n-    MacroRulesTT,\n }\n \n pub type NamedSyntaxExtension = (Name, SyntaxExtension);"}, {"sha": "4e87d8ee9dda21a2312b7a8fc66573a4e9756c94", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2abdc8805cf803ea53e96ca7ad44de3697fb7183/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdc8805cf803ea53e96ca7ad44de3697fb7183/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=2abdc8805cf803ea53e96ca7ad44de3697fb7183", "patch": "@@ -12,7 +12,7 @@ use ast::{Block, Crate, Ident, Mac_, PatKind};\n use ast::{MacStmtStyle, StmtKind, ItemKind};\n use ast;\n use ext::hygiene::Mark;\n-use ext::placeholders::{self, placeholder, PlaceholderExpander};\n+use ext::placeholders::{placeholder, PlaceholderExpander};\n use attr::{self, HasAttrs};\n use codemap::{ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n use syntax_pos::{self, Span, ExpnId};\n@@ -377,46 +377,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 kind.make_from(expander.expand(self.cx, span, ident, marked_tts, attrs))\n             }\n \n-            MacroRulesTT => {\n-                if ident.name == keywords::Invalid.name() {\n-                    self.cx.span_err(path.span,\n-                                    &format!(\"macro {}! expects an ident argument\", extname));\n-                    return kind.dummy(span);\n-                };\n-\n-                self.cx.bt_push(ExpnInfo {\n-                    call_site: span,\n-                    callee: NameAndSpan {\n-                        format: MacroBang(extname),\n-                        span: None,\n-                        // `macro_rules!` doesn't directly allow unstable\n-                        // (this is orthogonal to whether the macro it creates allows it)\n-                        allow_internal_unstable: false,\n-                    }\n-                });\n-\n-                let def = ast::MacroDef {\n-                    ident: ident,\n-                    id: ast::DUMMY_NODE_ID,\n-                    span: span,\n-                    imported_from: None,\n-                    use_locally: true,\n-                    body: marked_tts,\n-                    export: attr::contains_name(&attrs, \"macro_export\"),\n-                    allow_internal_unstable: attr::contains_name(&attrs, \"allow_internal_unstable\"),\n-                    attrs: attrs,\n-                };\n-\n-                self.cx.insert_macro(def.clone());\n-\n-                // If keep_macs is true, expands to a MacEager::items instead.\n-                if self.cx.ecfg.keep_macs {\n-                    Some(placeholders::reconstructed_macro_rules(&def, &path))\n-                } else {\n-                    Some(placeholders::macro_scope_placeholder())\n-                }\n-            }\n-\n             MultiDecorator(..) | MultiModifier(..) => {\n                 self.cx.span_err(path.span,\n                                  &format!(\"`{}` can only be used in attributes\", extname));"}, {"sha": "0ede6dd98e5b866e53c6d0b1eef1300faf0204e7", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2abdc8805cf803ea53e96ca7ad44de3697fb7183/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdc8805cf803ea53e96ca7ad44de3697fb7183/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=2abdc8805cf803ea53e96ca7ad44de3697fb7183", "patch": "@@ -13,7 +13,7 @@ use codemap::{DUMMY_SP, dummy_spanned};\n use ext::base::ExtCtxt;\n use ext::expand::{Expansion, ExpansionKind};\n use fold::*;\n-use parse::token::keywords;\n+use parse::token::{intern, keywords};\n use ptr::P;\n use util::move_map::MoveMap;\n use util::small_vector::SmallVector;\n@@ -214,15 +214,22 @@ impl<'a, 'b> Folder for PlaceholderExpander<'a, 'b> {\n     }\n }\n \n-pub fn reconstructed_macro_rules(def: &ast::MacroDef, path: &ast::Path) -> Expansion {\n+pub fn reconstructed_macro_rules(def: &ast::MacroDef) -> Expansion {\n     Expansion::Items(SmallVector::one(P(ast::Item {\n         ident: def.ident,\n         attrs: def.attrs.clone(),\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ItemKind::Mac(ast::Mac {\n             span: def.span,\n             node: ast::Mac_ {\n-                path: path.clone(),\n+                path: ast::Path {\n+                    span: DUMMY_SP,\n+                    global: false,\n+                    segments: vec![ast::PathSegment {\n+                        identifier: ast::Ident::with_empty_ctxt(intern(\"macro_rules\")),\n+                        parameters: ast::PathParameters::none(),\n+                    }],\n+                },\n                 tts: def.body.clone(),\n             }\n         }),"}, {"sha": "da82c9ffab1cb7a59065dea11518348df4aa1b1d", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2abdc8805cf803ea53e96ca7ad44de3697fb7183/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdc8805cf803ea53e96ca7ad44de3697fb7183/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=2abdc8805cf803ea53e96ca7ad44de3697fb7183", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast;\n+use {ast, attr};\n use syntax_pos::{Span, DUMMY_SP};\n-use ext::base::{DummyResult, ExtCtxt, MacResult, SyntaxExtension};\n-use ext::base::{NormalTT, TTMacroExpander};\n+use ext::base::{DummyResult, ExtCtxt, MacEager, MacResult, SyntaxExtension};\n+use ext::base::{IdentMacroExpander, NormalTT, TTMacroExpander};\n+use ext::placeholders;\n use ext::tt::macro_parser::{Success, Error, Failure};\n use ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n use ext::tt::macro_parser::parse;\n@@ -242,6 +243,38 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n      cx.span_fatal(best_fail_spot.substitute_dummy(sp), &best_fail_msg[..]);\n }\n \n+pub struct MacroRulesExpander;\n+impl IdentMacroExpander for MacroRulesExpander {\n+    fn expand(&self,\n+              cx: &mut ExtCtxt,\n+              span: Span,\n+              ident: ast::Ident,\n+              tts: Vec<tokenstream::TokenTree>,\n+              attrs: Vec<ast::Attribute>)\n+              -> Box<MacResult> {\n+        let def = ast::MacroDef {\n+            ident: ident,\n+            id: ast::DUMMY_NODE_ID,\n+            span: span,\n+            imported_from: None,\n+            use_locally: true,\n+            body: tts,\n+            export: attr::contains_name(&attrs, \"macro_export\"),\n+            allow_internal_unstable: attr::contains_name(&attrs, \"allow_internal_unstable\"),\n+            attrs: attrs,\n+        };\n+\n+        cx.insert_macro(def.clone());\n+\n+        // If keep_macs is true, expands to a MacEager::items instead.\n+        if cx.ecfg.keep_macs {\n+            MacEager::items(placeholders::reconstructed_macro_rules(&def).make_items())\n+        } else {\n+            MacEager::items(placeholders::macro_scope_placeholder().make_items())\n+        }\n+    }\n+}\n+\n // Note that macro-by-example's input is also matched against a token tree:\n //                   $( $lhs:tt => $rhs:tt );+\n //"}, {"sha": "e0c028195bab08d35dd94f1c885d3dcc50a3653e", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2abdc8805cf803ea53e96ca7ad44de3697fb7183/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdc8805cf803ea53e96ca7ad44de3697fb7183/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=2abdc8805cf803ea53e96ca7ad44de3697fb7183", "patch": "@@ -50,16 +50,17 @@ pub mod deriving;\n \n use std::rc::Rc;\n use syntax::ast;\n-use syntax::ext::base::{MacroExpanderFn, MacroRulesTT, NormalTT, MultiModifier};\n+use syntax::ext::base::{MacroExpanderFn, NormalTT, IdentTT, MultiModifier};\n use syntax::ext::hygiene::Mark;\n+use syntax::ext::tt::macro_rules::MacroRulesExpander;\n use syntax::parse::token::intern;\n \n pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver, enable_quotes: bool) {\n     let mut register = |name, ext| {\n         resolver.add_macro(Mark::root(), ast::Ident::with_empty_ctxt(intern(name)), Rc::new(ext));\n     };\n \n-    register(\"macro_rules\", MacroRulesTT);\n+    register(\"macro_rules\", IdentTT(Box::new(MacroRulesExpander), None, false));\n \n     macro_rules! register {\n         ($( $name:ident: $f:expr, )*) => { $("}]}