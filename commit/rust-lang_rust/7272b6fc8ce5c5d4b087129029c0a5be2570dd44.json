{"sha": "7272b6fc8ce5c5d4b087129029c0a5be2570dd44", "node_id": "C_kwDOAAsO6NoAKDcyNzJiNmZjOGNlNWM1ZDRiMDg3MTI5MDI5YzBhNWJlMjU3MGRkNDQ", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-09-25T21:57:26Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-10-15T23:20:02Z"}, "message": "Make char conversion functions unstably const", "tree": {"sha": "d7899704034e36ad2f7f5922a3d84bb3bb7ed52f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7899704034e36ad2f7f5922a3d84bb3bb7ed52f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7272b6fc8ce5c5d4b087129029c0a5be2570dd44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7272b6fc8ce5c5d4b087129029c0a5be2570dd44", "html_url": "https://github.com/rust-lang/rust/commit/7272b6fc8ce5c5d4b087129029c0a5be2570dd44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7272b6fc8ce5c5d4b087129029c0a5be2570dd44/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1026539bd22e9d070988deaa47b1360cbc76436", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1026539bd22e9d070988deaa47b1360cbc76436", "html_url": "https://github.com/rust-lang/rust/commit/c1026539bd22e9d070988deaa47b1360cbc76436"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "6e48faba84cfa77c708bca9a43d5095fe3c4eb06", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7272b6fc8ce5c5d4b087129029c0a5be2570dd44/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7272b6fc8ce5c5d4b087129029c0a5be2570dd44/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=7272b6fc8ce5c5d4b087129029c0a5be2570dd44", "patch": "@@ -51,8 +51,13 @@ use super::MAX;\n #[must_use]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn from_u32(i: u32) -> Option<char> {\n-    char::try_from(i).ok()\n+#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+pub const fn from_u32(i: u32) -> Option<char> {\n+    // FIXME: once Result::ok is const fn, use it here\n+    match char_try_from_u32(i) {\n+        Ok(c) => Some(c),\n+        Err(_) => None,\n+    }\n }\n \n /// Converts a `u32` to a `char`, ignoring validity.\n@@ -91,7 +96,8 @@ pub fn from_u32(i: u32) -> Option<char> {\n #[inline]\n #[must_use]\n #[stable(feature = \"char_from_unchecked\", since = \"1.5.0\")]\n-pub unsafe fn from_u32_unchecked(i: u32) -> char {\n+#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n     // SAFETY: the caller must guarantee that `i` is a valid char value.\n     if cfg!(debug_assertions) { char::from_u32(i).unwrap() } else { unsafe { transmute(i) } }\n }\n@@ -244,18 +250,23 @@ impl FromStr for char {\n     }\n }\n \n+#[inline]\n+const fn char_try_from_u32(i: u32) -> Result<char, CharTryFromError> {\n+    if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n+        Err(CharTryFromError(()))\n+    } else {\n+        // SAFETY: checked that it's a legal unicode value\n+        Ok(unsafe { transmute(i) })\n+    }\n+}\n+\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl TryFrom<u32> for char {\n     type Error = CharTryFromError;\n \n     #[inline]\n     fn try_from(i: u32) -> Result<Self, Self::Error> {\n-        if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n-            Err(CharTryFromError(()))\n-        } else {\n-            // SAFETY: checked that it's a legal unicode value\n-            Ok(unsafe { transmute(i) })\n-        }\n+        char_try_from_u32(i)\n     }\n }\n \n@@ -323,7 +334,8 @@ impl fmt::Display for CharTryFromError {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n+#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+pub const fn from_digit(num: u32, radix: u32) -> Option<char> {\n     if radix > 36 {\n         panic!(\"from_digit: radix is too high (maximum 36)\");\n     }"}, {"sha": "d5ad0c385c7012f16c666660c51fd071926531ed", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7272b6fc8ce5c5d4b087129029c0a5be2570dd44/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7272b6fc8ce5c5d4b087129029c0a5be2570dd44/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=7272b6fc8ce5c5d4b087129029c0a5be2570dd44", "patch": "@@ -136,9 +136,10 @@ impl char {\n     /// assert_eq!(None, c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n     #[must_use]\n     #[inline]\n-    pub fn from_u32(i: u32) -> Option<char> {\n+    pub const fn from_u32(i: u32) -> Option<char> {\n         super::convert::from_u32(i)\n     }\n \n@@ -178,9 +179,10 @@ impl char {\n     /// assert_eq!('\u2764', c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n     #[must_use]\n     #[inline]\n-    pub unsafe fn from_u32_unchecked(i: u32) -> char {\n+    pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n         // SAFETY: the safety contract must be upheld by the caller.\n         unsafe { super::convert::from_u32_unchecked(i) }\n     }\n@@ -235,9 +237,10 @@ impl char {\n     /// let _c = char::from_digit(1, 37);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n     #[must_use]\n     #[inline]\n-    pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n+    pub const fn from_digit(num: u32, radix: u32) -> Option<char> {\n         super::convert::from_digit(num, radix)\n     }\n \n@@ -331,10 +334,11 @@ impl char {\n     /// let _ = '1'.to_digit(37);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    pub fn to_digit(self, radix: u32) -> Option<u32> {\n+    pub const fn to_digit(self, radix: u32) -> Option<u32> {\n         assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n         // If not a digit, a number greater than radix will be created.\n         let mut digit = (self as u32).wrapping_sub('0' as u32);\n@@ -345,7 +349,8 @@ impl char {\n             // Force the 6th bit to be set to ensure ascii is lower case.\n             digit = (self as u32 | 0b10_0000).wrapping_sub('a' as u32).saturating_add(10);\n         }\n-        (digit < radix).then_some(digit)\n+        // FIXME: once then_some is const fn, use it here\n+        if digit < radix { Some(digit) } else { None }\n     }\n \n     /// Returns an iterator that yields the hexadecimal Unicode escape of a"}, {"sha": "43ba556af638ed3b73040ad4d565519bf29c4d37", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7272b6fc8ce5c5d4b087129029c0a5be2570dd44/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7272b6fc8ce5c5d4b087129029c0a5be2570dd44/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7272b6fc8ce5c5d4b087129029c0a5be2570dd44", "patch": "@@ -104,6 +104,7 @@\n #![feature(const_bigint_helper_methods)]\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n+#![feature(const_char_convert)]\n #![feature(const_discriminant)]\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]"}]}