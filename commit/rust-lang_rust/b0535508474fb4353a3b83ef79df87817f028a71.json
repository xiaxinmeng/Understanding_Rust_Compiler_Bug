{"sha": "b0535508474fb4353a3b83ef79df87817f028a71", "node_id": "C_kwDOAAsO6NoAKGIwNTM1NTA4NDc0ZmI0MzUzYTNiODNlZjc5ZGY4NzgxN2YwMjhhNzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-15T23:27:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-15T23:27:59Z"}, "message": "Auto merge of #90827 - matthewjasper:assoc-item-cleanup-2, r=cjgillot\n\nAssoc item cleanup Part 2\n\n- Remove `AssocItem` from `RegionVariableOrigin::AutoRef`\n- Use the `associated_item_def_ids` query instead of the `associated_items` query when possible\n\nThe change to `ObligationCauseCode` from #90639 is omitted because it caused a perf regression.\n\nr? `@cjgillot`", "tree": {"sha": "f518dcf48756c1ccd59508807329ce4c1ee4ac1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f518dcf48756c1ccd59508807329ce4c1ee4ac1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0535508474fb4353a3b83ef79df87817f028a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0535508474fb4353a3b83ef79df87817f028a71", "html_url": "https://github.com/rust-lang/rust/commit/b0535508474fb4353a3b83ef79df87817f028a71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0535508474fb4353a3b83ef79df87817f028a71/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "891ca5f63c3b3cfe3939710a728671243e881ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/891ca5f63c3b3cfe3939710a728671243e881ed6", "html_url": "https://github.com/rust-lang/rust/commit/891ca5f63c3b3cfe3939710a728671243e881ed6"}, {"sha": "ba518ffdd3db0b8f211e410d4f5cd7891f1891ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba518ffdd3db0b8f211e410d4f5cd7891f1891ba", "html_url": "https://github.com/rust-lang/rust/commit/ba518ffdd3db0b8f211e410d4f5cd7891f1891ba"}], "stats": {"total": 58, "additions": 20, "deletions": 38}, "files": [{"sha": "7a0db820c9c99cf3fab4751592cdf8ba34b24e41", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b0535508474fb4353a3b83ef79df87817f028a71", "patch": "@@ -1704,13 +1704,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if let ty::Opaque(def_id, substs) = ty.kind() {\n             let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n             // Future::Output\n-            let item_def_id = self\n-                .tcx\n-                .associated_items(future_trait)\n-                .in_definition_order()\n-                .next()\n-                .unwrap()\n-                .def_id;\n+            let item_def_id = self.tcx.associated_item_def_ids(future_trait)[0];\n \n             let bounds = self.tcx.explicit_item_bounds(*def_id);\n \n@@ -2528,7 +2522,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             infer::MiscVariable(_) => String::new(),\n             infer::PatternRegion(_) => \" for pattern\".to_string(),\n             infer::AddrOfRegion(_) => \" for borrow expression\".to_string(),\n-            infer::Autoref(_, _) => \" for autoref\".to_string(),\n+            infer::Autoref(_) => \" for autoref\".to_string(),\n             infer::Coercion(_) => \" for automatic coercion\".to_string(),\n             infer::LateBoundRegion(_, br, infer::FnCall) => {\n                 format!(\" for lifetime parameter {}in function call\", br_string(br))"}, {"sha": "b874947cc69682393a86dfcdae04b9d6ba8541d2", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=b0535508474fb4353a3b83ef79df87817f028a71", "patch": "@@ -459,7 +459,7 @@ pub enum RegionVariableOrigin {\n     AddrOfRegion(Span),\n \n     /// Regions created as part of an autoref of a method receiver\n-    Autoref(Span, ty::AssocItem),\n+    Autoref(Span),\n \n     /// Regions created as part of an automatic coercion\n     Coercion(Span),\n@@ -1848,7 +1848,7 @@ impl RegionVariableOrigin {\n             MiscVariable(a)\n             | PatternRegion(a)\n             | AddrOfRegion(a)\n-            | Autoref(a, _)\n+            | Autoref(a)\n             | Coercion(a)\n             | EarlyBoundRegion(a, ..)\n             | LateBoundRegion(a, ..)"}, {"sha": "5e807b2f55cdafd528871c277b9bdf6934b79b17", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=b0535508474fb4353a3b83ef79df87817f028a71", "patch": "@@ -2086,10 +2086,10 @@ impl<'tcx> TyS<'tcx> {\n             ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),\n \n             ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {\n-                let assoc_items =\n-                    tcx.associated_items(tcx.lang_items().discriminant_kind_trait().unwrap());\n-                let discriminant_def_id = assoc_items.in_definition_order().next().unwrap().def_id;\n-                tcx.mk_projection(discriminant_def_id, tcx.mk_substs([self.into()].iter()))\n+                let assoc_items = tcx.associated_item_def_ids(\n+                    tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),\n+                );\n+                tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))\n             }\n \n             ty::Bool"}, {"sha": "6e7acb244d1597a14fe80673f764381419335e5e", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=b0535508474fb4353a3b83ef79df87817f028a71", "patch": "@@ -325,9 +325,9 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let ty = self.type_of(adt_did);\n         let (did, constness) = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {\n-            if let Some(item) = self.associated_items(impl_did).in_definition_order().next() {\n+            if let Some(item_id) = self.associated_item_def_ids(impl_did).first() {\n                 if validate(self, impl_did).is_ok() {\n-                    return Some((item.def_id, self.impl_constness(impl_did)));\n+                    return Some((*item_id, self.impl_constness(impl_did)));\n                 }\n             }\n             None"}, {"sha": "11856f6e047e5c65a2db43954048045af31e7d88", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=b0535508474fb4353a3b83ef79df87817f028a71", "patch": "@@ -604,7 +604,7 @@ where\n         debug!(\"destructor_call_block({:?}, {:?})\", self, succ);\n         let tcx = self.tcx();\n         let drop_trait = tcx.require_lang_item(LangItem::Drop, None);\n-        let drop_fn = tcx.associated_items(drop_trait).in_definition_order().next().unwrap();\n+        let drop_fn = tcx.associated_item_def_ids(drop_trait)[0];\n         let ty = self.place_ty(self.place);\n         let substs = tcx.mk_substs_trait(ty, &[]);\n \n@@ -624,12 +624,7 @@ where\n             )],\n             terminator: Some(Terminator {\n                 kind: TerminatorKind::Call {\n-                    func: Operand::function_handle(\n-                        tcx,\n-                        drop_fn.def_id,\n-                        substs,\n-                        self.source_info.span,\n-                    ),\n+                    func: Operand::function_handle(tcx, drop_fn, substs, self.source_info.span),\n                     args: vec![Operand::Move(Place::from(ref_place))],\n                     destination: Some((unit_temp, succ)),\n                     cleanup: unwind.into_option(),"}, {"sha": "bdec7163cd989485caaa7e43550fcacff97345b9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b0535508474fb4353a3b83ef79df87817f028a71", "patch": "@@ -2471,13 +2471,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     obligation.param_env,\n                 );\n \n-                let item_def_id = self\n-                    .tcx\n-                    .associated_items(future_trait)\n-                    .in_definition_order()\n-                    .next()\n-                    .unwrap()\n-                    .def_id;\n+                let item_def_id = self.tcx.associated_item_def_ids(future_trait)[0];\n                 // `<T as Future>::Output`\n                 let projection_ty = ty::ProjectionTy {\n                     // `T`"}, {"sha": "4a41552a5fbef4c83a1ccfd89f56a1bd4a8bb450", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=b0535508474fb4353a3b83ef79df87817f028a71", "patch": "@@ -257,8 +257,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if is_gen {\n             // Check that we deduce the signature from the `<_ as std::ops::Generator>::Return`\n             // associated item and not yield.\n-            let return_assoc_item =\n-                self.tcx.associated_items(gen_trait).in_definition_order().nth(1).unwrap().def_id;\n+            let return_assoc_item = self.tcx.associated_item_def_ids(gen_trait)[1];\n             if return_assoc_item != projection.projection_def_id() {\n                 debug!(\"deduce_sig_from_projection: not return assoc item of generator\");\n                 return None;\n@@ -694,8 +693,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // The `Future` trait has only one associted item, `Output`,\n         // so check that this is what we see.\n-        let output_assoc_item =\n-            self.tcx.associated_items(future_trait).in_definition_order().next().unwrap().def_id;\n+        let output_assoc_item = self.tcx.associated_item_def_ids(future_trait)[0];\n         if output_assoc_item != predicate.projection_ty.item_def_id {\n             span_bug!(\n                 cause_span,"}, {"sha": "6314f2aba4efe2b4c166fa6595b7fe6be015eed0", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=b0535508474fb4353a3b83ef79df87817f028a71", "patch": "@@ -324,9 +324,10 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::unlikely => (0, vec![tcx.types.bool], tcx.types.bool),\n \n             sym::discriminant_value => {\n-                let assoc_items =\n-                    tcx.associated_items(tcx.lang_items().discriminant_kind_trait().unwrap());\n-                let discriminant_def_id = assoc_items.in_definition_order().next().unwrap().def_id;\n+                let assoc_items = tcx.associated_item_def_ids(\n+                    tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),\n+                );\n+                let discriminant_def_id = assoc_items[0];\n \n                 let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0) };\n                 ("}, {"sha": "e7e4e72f6c1d987160a5c7708c6f413df08fae72", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0535508474fb4353a3b83ef79df87817f028a71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=b0535508474fb4353a3b83ef79df87817f028a71", "patch": "@@ -162,7 +162,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n         match &pick.autoref_or_ptr_adjustment {\n             Some(probe::AutorefOrPtrAdjustment::Autoref { mutbl, unsize }) => {\n-                let region = self.next_region_var(infer::Autoref(self.span, pick.item));\n+                let region = self.next_region_var(infer::Autoref(self.span));\n                 target = self.tcx.mk_ref(region, ty::TypeAndMut { mutbl: *mutbl, ty: target });\n                 let mutbl = match mutbl {\n                     hir::Mutability::Not => AutoBorrowMutability::Not,"}]}