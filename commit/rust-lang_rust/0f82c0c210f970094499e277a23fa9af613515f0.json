{"sha": "0f82c0c210f970094499e277a23fa9af613515f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmODJjMGMyMTBmOTcwMDk0NDk5ZTI3N2EyM2ZhOWFmNjEzNTE1ZjA=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-12T01:18:47Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-08-12T22:03:44Z"}, "message": "Reduce genericity in Take", "tree": {"sha": "461ae349f31087dda306bbd2352a442583da8c80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/461ae349f31087dda306bbd2352a442583da8c80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f82c0c210f970094499e277a23fa9af613515f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f82c0c210f970094499e277a23fa9af613515f0", "html_url": "https://github.com/rust-lang/rust/commit/0f82c0c210f970094499e277a23fa9af613515f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f82c0c210f970094499e277a23fa9af613515f0/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46a62ca9a4618b9c9c858a246b175639e801a757", "url": "https://api.github.com/repos/rust-lang/rust/commits/46a62ca9a4618b9c9c858a246b175639e801a757", "html_url": "https://github.com/rust-lang/rust/commit/46a62ca9a4618b9c9c858a246b175639e801a757"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "9789796318d192a66bc87f4a5218f3188ee845de", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0f82c0c210f970094499e277a23fa9af613515f0/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f82c0c210f970094499e277a23fa9af613515f0/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=0f82c0c210f970094499e277a23fa9af613515f0", "patch": "@@ -1782,19 +1782,26 @@ impl<I> Iterator for Take<I> where I: Iterator{\n     }\n \n     #[inline]\n-    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, mut fold: Fold) -> R where\n+    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n     {\n-        if self.n == 0 {\n-            Try::from_ok(init)\n-        } else {\n-            let n = &mut self.n;\n-            self.iter.try_fold(init, move |acc, x| {\n+        fn check<'a, T, Acc, R: Try<Ok = Acc>>(\n+            n: &'a mut usize,\n+            mut fold: impl FnMut(Acc, T) -> R + 'a,\n+        ) -> impl FnMut(Acc, T) -> LoopState<Acc, R> + 'a {\n+            move |acc, x| {\n                 *n -= 1;\n                 let r = fold(acc, x);\n                 if *n == 0 { LoopState::Break(r) }\n                 else { LoopState::from_try(r) }\n-            }).into_try()\n+            }\n+        }\n+\n+        if self.n == 0 {\n+            Try::from_ok(init)\n+        } else {\n+            let n = &mut self.n;\n+            self.iter.try_fold(init, check(n, fold)).into_try()\n         }\n     }\n }"}]}