{"sha": "e574ba4994c00b1e166ce4e450b7b984e1bff5d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NzRiYTQ5OTRjMDBiMWUxNjZjZTRlNDUwYjdiOTg0ZTFiZmY1ZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-27T04:25:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-27T04:25:37Z"}, "message": "Auto merge of #43477 - est31:master, r=alexcrichton\n\nSwitch to begin_panic again\n\nIn https://github.com/rust-lang/rust/pull/42938 we made the compiler\nemit a call to begin_panic_new in order to pass column info to it. Now\nwith stage0 updated (https://github.com/rust-lang/rust/pull/43320),\nwe can safely change begin_panic and start emitting calls for it again.", "tree": {"sha": "222f3e6c234d44a78afc884451f14b4edd949340", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/222f3e6c234d44a78afc884451f14b4edd949340"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e574ba4994c00b1e166ce4e450b7b984e1bff5d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e574ba4994c00b1e166ce4e450b7b984e1bff5d4", "html_url": "https://github.com/rust-lang/rust/commit/e574ba4994c00b1e166ce4e450b7b984e1bff5d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e574ba4994c00b1e166ce4e450b7b984e1bff5d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a42ff482367afa83b6cdb1fbfad2ee69f836f97", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a42ff482367afa83b6cdb1fbfad2ee69f836f97", "html_url": "https://github.com/rust-lang/rust/commit/4a42ff482367afa83b6cdb1fbfad2ee69f836f97"}, {"sha": "90ac6408baa80fcd7fa28bc98af6046dba8c4bbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/90ac6408baa80fcd7fa28bc98af6046dba8c4bbb", "html_url": "https://github.com/rust-lang/rust/commit/90ac6408baa80fcd7fa28bc98af6046dba8c4bbb"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "03db1e4f01c6c9455380ab4da49b56a25e33212f", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e574ba4994c00b1e166ce4e450b7b984e1bff5d4/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e574ba4994c00b1e166ce4e450b7b984e1bff5d4/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=e574ba4994c00b1e166ce4e450b7b984e1bff5d4", "patch": "@@ -46,7 +46,7 @@ macro_rules! panic {\n         panic!(\"explicit panic\")\n     });\n     ($msg:expr) => ({\n-        $crate::rt::begin_panic_new($msg, {\n+        $crate::rt::begin_panic($msg, {\n             // static requires less code at runtime, more constant data\n             static _FILE_LINE_COL: (&'static str, u32, u32) = (file!(), line!(), column!());\n             &_FILE_LINE_COL"}, {"sha": "04e1a579decd4238f3c646d812b5f415b20e2dc1", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e574ba4994c00b1e166ce4e450b7b984e1bff5d4/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e574ba4994c00b1e166ce4e450b7b984e1bff5d4/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=e574ba4994c00b1e166ce4e450b7b984e1bff5d4", "patch": "@@ -518,7 +518,7 @@ pub fn begin_panic_fmt(msg: &fmt::Arguments,\n \n     let mut s = String::new();\n     let _ = s.write_fmt(*msg);\n-    begin_panic_new(s, file_line_col)\n+    begin_panic(s, file_line_col)\n }\n \n // FIXME: In PR #42938, we have added the column as info passed to the panic\n@@ -529,15 +529,17 @@ pub fn begin_panic_fmt(msg: &fmt::Arguments,\n // By changing the compiler source, we can only affect behaviour of higher\n // stages. We need to perform the switch over two stage0 replacements, using\n // a temporary function begin_panic_new while performing the switch:\n-// 0. Right now, we tell stage1 onward to emit a call to begin_panic_new.\n-// 1. In the first SNAP, stage0 calls begin_panic_new with the new ABI,\n-//    begin_panic stops being used. Now we can change begin_panic to\n-//    the new ABI, and start emitting calls to begin_panic in higher\n+// 0. Before the current switch, we told stage1 onward to emit a call\n+//    to begin_panic_new.\n+// 1. Right now, stage0 calls begin_panic_new with the new ABI,\n+//    begin_panic stops being used. We have changed begin_panic to\n+//    the new ABI, and started to emit calls to begin_panic in higher\n //    stages again, this time with the new ABI.\n // 2. After the second SNAP, stage0 calls begin_panic with the new ABI,\n //    and we can remove the temporary begin_panic_new function.\n \n /// This is the entry point of panicking for panic!() and assert!().\n+#[cfg(stage0)]\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n@@ -558,18 +560,15 @@ pub fn begin_panic_new<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n-pub fn begin_panic<M: Any + Send>(msg: M, file_line: &(&'static str, u32)) -> ! {\n+pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u32)) -> ! {\n     // Note that this should be the only allocation performed in this code path.\n     // Currently this means that panic!() on OOM will invoke this code path,\n     // but then again we're not really ready for panic on OOM anyway. If\n     // we do start doing this, then we should propagate this allocation to\n     // be performed in the parent of this thread instead of the thread that's\n     // panicking.\n \n-    let (file, line) = *file_line;\n-    let file_line_col = (file, line, 0);\n-\n-    rust_panic_with_hook(Box::new(msg), &file_line_col)\n+    rust_panic_with_hook(Box::new(msg), file_line_col)\n }\n \n /// Executes the primary logic for a panic, including checking for recursive"}, {"sha": "2aa23ea043b5bce7249df75aa5d4c3c222931e9e", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e574ba4994c00b1e166ce4e450b7b984e1bff5d4/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e574ba4994c00b1e166ce4e450b7b984e1bff5d4/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=e574ba4994c00b1e166ce4e450b7b984e1bff5d4", "patch": "@@ -25,7 +25,9 @@\n \n \n // Reexport some of our utilities which are expected by other crates.\n-pub use panicking::{begin_panic_new, begin_panic, begin_panic_fmt, update_panic_count};\n+#[cfg(stage0)]\n+pub use panicking::begin_panic_new;\n+pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n \n #[cfg(not(test))]\n #[lang = \"start\"]"}, {"sha": "d81404172148ca6c38d203f6015ba6de7bf4d506", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e574ba4994c00b1e166ce4e450b7b984e1bff5d4/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e574ba4994c00b1e166ce4e450b7b984e1bff5d4/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=e574ba4994c00b1e166ce4e450b7b984e1bff5d4", "patch": "@@ -774,7 +774,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let expr_loc_ptr = self.expr_addr_of(span, expr_loc_tuple);\n         self.expr_call_global(\n             span,\n-            self.std_path(&[\"rt\", \"begin_panic_new\"]),\n+            self.std_path(&[\"rt\", \"begin_panic\"]),\n             vec![\n                 self.expr_str(span, msg),\n                 expr_loc_ptr])"}]}