{"sha": "7475661678359a081f8a66cd35f3b3993cf788ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NzU2NjE2NzgzNTlhMDgxZjhhNjZjZDM1ZjNiMzk5M2NmNzg4YmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-06-18T17:43:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-06-18T17:43:03Z"}, "message": "improve test by using intrinsic directly", "tree": {"sha": "c547d4d7ec2adffd48dcb489a24b42d9b8687eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c547d4d7ec2adffd48dcb489a24b42d9b8687eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7475661678359a081f8a66cd35f3b3993cf788ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7475661678359a081f8a66cd35f3b3993cf788ba", "html_url": "https://github.com/rust-lang/rust/commit/7475661678359a081f8a66cd35f3b3993cf788ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7475661678359a081f8a66cd35f3b3993cf788ba/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3061777c4815ebaac8eff14d3fc1773045ce359d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3061777c4815ebaac8eff14d3fc1773045ce359d", "html_url": "https://github.com/rust-lang/rust/commit/3061777c4815ebaac8eff14d3fc1773045ce359d"}], "stats": {"total": 80, "additions": 26, "deletions": 54}, "files": [{"sha": "f8fa2c5f177ea937108c948b92025ea93d1af353", "filename": "src/test/ui/consts/offset_from_ub.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7475661678359a081f8a66cd35f3b3993cf788ba/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7475661678359a081f8a66cd35f3b3993cf788ba/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs?ref=7475661678359a081f8a66cd35f3b3993cf788ba", "patch": "@@ -1,5 +1,8 @@\n #![feature(const_raw_ptr_deref)]\n #![feature(const_ptr_offset_from)]\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::ptr_offset_from;\n \n #[repr(C)]\n struct Struct {\n@@ -12,32 +15,34 @@ pub const DIFFERENT_ALLOC: usize = {\n     let base_ptr: *const Struct = &uninit as *const _ as *const Struct;\n     let uninit2 = std::mem::MaybeUninit::<Struct>::uninit();\n     let field_ptr: *const Struct = &uninit2 as *const _ as *const Struct;\n-    let offset = unsafe { field_ptr.offset_from(base_ptr) }; //~NOTE inside `DIFFERENT_ALLOC` at\n+    let offset = unsafe { ptr_offset_from(field_ptr, base_ptr) }; //~ERROR evaluation of constant value failed\n+    //~| cannot compute offset of pointers into different allocations.\n     offset as usize\n };\n \n pub const NOT_PTR: usize = {\n-    //~^ NOTE\n     unsafe { (42 as *const u8).offset_from(&5u8) as usize }\n };\n \n pub const NOT_MULTIPLE_OF_SIZE: isize = {\n     let data = [5u8, 6, 7];\n     let base_ptr = data.as_ptr();\n     let field_ptr = &data[1] as *const u8 as *const u16;\n-    unsafe { field_ptr.offset_from(base_ptr as *const u16) } //~NOTE inside `NOT_MULTIPLE_OF_SIZE` at\n+    unsafe { ptr_offset_from(field_ptr, base_ptr as *const u16) } //~ERROR evaluation of constant value failed\n+    //~| 1_isize cannot be divided by 2_isize without remainder\n };\n \n pub const OFFSET_FROM_NULL: isize = {\n     let ptr = 0 as *const u8;\n-    unsafe { ptr.offset_from(ptr) } //~NOTE inside `OFFSET_FROM_NULL` at\n+    unsafe { ptr_offset_from(ptr, ptr) } //~ERROR evaluation of constant value failed\n+    //~| null pointer is not a valid pointer\n };\n \n pub const DIFFERENT_INT: isize = { // offset_from with two different integers: like DIFFERENT_ALLOC\n-    //~^ NOTE\n     let ptr1 = 8 as *const u8;\n     let ptr2 = 16 as *const u8;\n-    unsafe { ptr2.offset_from(ptr1) }\n+    unsafe { ptr_offset_from(ptr2, ptr1) } //~ERROR any use of this value will cause an error\n+    //~| WARN previously accepted\n };\n \n fn main() {}"}, {"sha": "4c2ba9297d84a24b2fd6098ab94200dfbe8285ab", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 15, "deletions": 48, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7475661678359a081f8a66cd35f3b3993cf788ba/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7475661678359a081f8a66cd35f3b3993cf788ba/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=7475661678359a081f8a66cd35f3b3993cf788ba", "patch": "@@ -1,16 +1,8 @@\n error[E0080]: evaluation of constant value failed\n-  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  ptr_offset_from cannot compute offset of pointers into different allocations.\n-   |                  inside `ptr::const_ptr::<impl *const Struct>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n-  ::: $DIR/offset_from_ub.rs:15:27\n+  --> $DIR/offset_from_ub.rs:18:27\n    |\n-LL |     let offset = unsafe { field_ptr.offset_from(base_ptr) };\n-   |                           ------------------------------- inside `DIFFERENT_ALLOC` at $DIR/offset_from_ub.rs:15:27\n+LL |     let offset = unsafe { ptr_offset_from(field_ptr, base_ptr) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ptr_offset_from cannot compute offset of pointers into different allocations.\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -20,12 +12,11 @@ LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n    |                    |\n    |                    unable to turn bytes into a pointer\n    |                    inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                    inside `NOT_PTR` at $DIR/offset_from_ub.rs:21:14\n+   |                    inside `NOT_PTR` at $DIR/offset_from_ub.rs:24:14\n    | \n-  ::: $DIR/offset_from_ub.rs:19:1\n+  ::: $DIR/offset_from_ub.rs:23:1\n    |\n LL | / pub const NOT_PTR: usize = {\n-LL | |\n LL | |     unsafe { (42 as *const u8).offset_from(&5u8) as usize }\n LL | | };\n    | |__-\n@@ -35,50 +26,26 @@ LL | | };\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+  --> $DIR/offset_from_ub.rs:31:14\n    |\n-LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  exact_div: 1_isize cannot be divided by 2_isize without remainder\n-   |                  inside `ptr::const_ptr::<impl *const u16>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n-  ::: $DIR/offset_from_ub.rs:28:14\n-   |\n-LL |     unsafe { field_ptr.offset_from(base_ptr as *const u16) }\n-   |              --------------------------------------------- inside `NOT_MULTIPLE_OF_SIZE` at $DIR/offset_from_ub.rs:28:14\n+LL |     unsafe { ptr_offset_from(field_ptr, base_ptr as *const u16) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ exact_div: 1_isize cannot be divided by 2_isize without remainder\n \n error[E0080]: evaluation of constant value failed\n-  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  null pointer is not a valid pointer for this operation\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n-  ::: $DIR/offset_from_ub.rs:33:14\n+  --> $DIR/offset_from_ub.rs:37:14\n    |\n-LL |     unsafe { ptr.offset_from(ptr) }\n-   |              -------------------- inside `OFFSET_FROM_NULL` at $DIR/offset_from_ub.rs:33:14\n+LL |     unsafe { ptr_offset_from(ptr, ptr) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n \n error: any use of this value will cause an error\n-  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                    |\n-   |                    unable to turn bytes into a pointer\n-   |                    inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                    inside `DIFFERENT_INT` at $DIR/offset_from_ub.rs:40:14\n-   | \n-  ::: $DIR/offset_from_ub.rs:36:1\n+  --> $DIR/offset_from_ub.rs:44:14\n    |\n LL | / pub const DIFFERENT_INT: isize = { // offset_from with two different integers: like DIFFERENT_ALLOC\n-LL | |\n LL | |     let ptr1 = 8 as *const u8;\n LL | |     let ptr2 = 16 as *const u8;\n-LL | |     unsafe { ptr2.offset_from(ptr1) }\n+LL | |     unsafe { ptr_offset_from(ptr2, ptr1) }\n+   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn bytes into a pointer\n+LL | |\n LL | | };\n    | |__-\n    |"}]}