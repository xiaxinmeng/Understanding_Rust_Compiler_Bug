{"sha": "9c4651f2eeedc6f17f970d05699706c527c7a658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNDY1MWYyZWVlZGM2ZjE3Zjk3MGQwNTY5OTcwNmM1MjdjN2E2NTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-27T04:49:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-27T04:49:56Z"}, "message": "Auto merge of #7187 - camsteffen:avoid-break-exported, r=flip1995,phansch\n\nAdd avoid_breaking_exported_api config option\n\nchangelog: Add `avoid_breaking_exported_api` config option for [`enum_variant_names`], [`large_types_passed_by_value`], [`trivially_copy_pass_by_ref`], [`unnecessary_wraps`], [`upper_case_acronyms`] and [`wrong_self_convention`].\n\nchangelog: Deprecates [`pub_enum_variant_names`] and [`wrong_pub_self_convention`] as the non-pub variants are now configurable.\n\nchangelog: Fix various false negatives for `pub` items that are not exported from the crate.\n\nA couple changes to late passes in order to use `cx.access_levels.is_exported` rather than `item.vis.kind.is_pub`.\n\nI'm not sure how to better document the config option or lints that are (not) affected (see comments in #6806). Suggestions are welcome. cc `@rust-lang/clippy`\n\nI added `/clippy.toml` to use the config internally and `/tests/clippy.toml` to maintain a default config in ui tests.\n\nCloses #6806\nCloses #4504", "tree": {"sha": "9809d36b0ebcdfa4c843ad41a0a6a4c61fa34467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9809d36b0ebcdfa4c843ad41a0a6a4c61fa34467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c4651f2eeedc6f17f970d05699706c527c7a658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c4651f2eeedc6f17f970d05699706c527c7a658", "html_url": "https://github.com/rust-lang/rust/commit/9c4651f2eeedc6f17f970d05699706c527c7a658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c4651f2eeedc6f17f970d05699706c527c7a658/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f205dd176a277457d3a5052565807b31e9391df4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f205dd176a277457d3a5052565807b31e9391df4", "html_url": "https://github.com/rust-lang/rust/commit/f205dd176a277457d3a5052565807b31e9391df4"}, {"sha": "6eea598645be5489f518f91e4b80a0f04a315fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eea598645be5489f518f91e4b80a0f04a315fda", "html_url": "https://github.com/rust-lang/rust/commit/6eea598645be5489f518f91e4b80a0f04a315fda"}], "stats": {"total": 464, "additions": 232, "deletions": 232}, "files": [{"sha": "6c556f579ca4f96cdc9e984663d2a3af00e8c364", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -147,6 +147,7 @@ Some lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml\n value` mapping eg.\n \n ```toml\n+avoid-breaking-exported-api = false\n blacklisted-names = [\"toto\", \"tata\", \"titi\"]\n cognitive-complexity-threshold = 30\n ```"}, {"sha": "b5484bec3c8b8dca5dc0a00930d846e60533d4a7", "filename": "build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -14,6 +14,6 @@ fn main() {\n     );\n     println!(\n         \"cargo:rustc-env=RUSTC_RELEASE_CHANNEL={}\",\n-        rustc_tools_util::get_channel().unwrap_or_default()\n+        rustc_tools_util::get_channel()\n     );\n }"}, {"sha": "cda8d17eed44c7cdb9e9fc1609d90e71a146fdfa", "filename": "clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy.toml?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -0,0 +1 @@\n+avoid-breaking-exported-api = false"}, {"sha": "04f3d77464f98aa764a9549279bbb9d0e63c741c", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -141,3 +141,22 @@ declare_deprecated_lint! {\n     pub FILTER_MAP,\n     \"this lint has been replaced by `manual_filter_map`, a more specific lint\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** The `avoid_breaking_exported_api` config option was added, which\n+    /// enables the `enum_variant_names` lint for public items.\n+    /// ```\n+    pub PUB_ENUM_VARIANT_NAMES,\n+    \"set the `avoid_breaking_exported_api` config option to `false` to enable the `enum_variant_names` lint for public items\"\n+}\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** The `avoid_breaking_exported_api` config option was added, which\n+    /// enables the `wrong_self_conversion` lint for public items.\n+    pub WRONG_PUB_SELF_CONVENTION,\n+    \"set the `avoid_breaking_exported_api` config option to `false` to enable the `wrong_self_convention` lint for public items\"\n+}"}, {"sha": "b1a105a51c106974b39710be3b241142cd30991f", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 29, "deletions": 51, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -3,8 +3,8 @@\n use clippy_utils::camel_case;\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::source::is_present_in_source;\n-use rustc_ast::ast::{EnumDef, Item, ItemKind, VisibilityKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass, Lint};\n+use rustc_hir::{EnumDef, Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -39,36 +39,6 @@ declare_clippy_lint! {\n     \"enums where all variants share a prefix/postfix\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Detects public enumeration variants that are\n-    /// prefixed or suffixed by the same characters.\n-    ///\n-    /// **Why is this bad?** Public enumeration variant names should specify their variant,\n-    /// not repeat the enumeration name.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// pub enum Cake {\n-    ///     BlackForestCake,\n-    ///     HummingbirdCake,\n-    ///     BattenbergCake,\n-    /// }\n-    /// ```\n-    /// Could be written as:\n-    /// ```rust\n-    /// pub enum Cake {\n-    ///     BlackForest,\n-    ///     Hummingbird,\n-    ///     Battenberg,\n-    /// }\n-    /// ```\n-    pub PUB_ENUM_VARIANT_NAMES,\n-    pedantic,\n-    \"public enums where all variants share a prefix/postfix\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Detects type names that are prefixed or suffixed by the\n     /// containing module's name.\n@@ -127,21 +97,22 @@ declare_clippy_lint! {\n pub struct EnumVariantNames {\n     modules: Vec<(Symbol, String)>,\n     threshold: u64,\n+    avoid_breaking_exported_api: bool,\n }\n \n impl EnumVariantNames {\n     #[must_use]\n-    pub fn new(threshold: u64) -> Self {\n+    pub fn new(threshold: u64, avoid_breaking_exported_api: bool) -> Self {\n         Self {\n             modules: Vec::new(),\n             threshold,\n+            avoid_breaking_exported_api,\n         }\n     }\n }\n \n impl_lint_pass!(EnumVariantNames => [\n     ENUM_VARIANT_NAMES,\n-    PUB_ENUM_VARIANT_NAMES,\n     MODULE_NAME_REPETITIONS,\n     MODULE_INCEPTION\n ]);\n@@ -167,33 +138,42 @@ fn partial_rmatch(post: &str, name: &str) -> usize {\n }\n \n fn check_variant(\n-    cx: &EarlyContext<'_>,\n+    cx: &LateContext<'_>,\n     threshold: u64,\n-    def: &EnumDef,\n+    def: &EnumDef<'_>,\n     item_name: &str,\n     item_name_chars: usize,\n     span: Span,\n-    lint: &'static Lint,\n ) {\n     if (def.variants.len() as u64) < threshold {\n         return;\n     }\n-    for var in &def.variants {\n+    for var in def.variants {\n         let name = var.ident.name.as_str();\n         if partial_match(item_name, &name) == item_name_chars\n             && name.chars().nth(item_name_chars).map_or(false, |c| !c.is_lowercase())\n             && name.chars().nth(item_name_chars + 1).map_or(false, |c| !c.is_numeric())\n         {\n-            span_lint(cx, lint, var.span, \"variant name starts with the enum's name\");\n+            span_lint(\n+                cx,\n+                ENUM_VARIANT_NAMES,\n+                var.span,\n+                \"variant name starts with the enum's name\",\n+            );\n         }\n         if partial_rmatch(item_name, &name) == item_name_chars {\n-            span_lint(cx, lint, var.span, \"variant name ends with the enum's name\");\n+            span_lint(\n+                cx,\n+                ENUM_VARIANT_NAMES,\n+                var.span,\n+                \"variant name ends with the enum's name\",\n+            );\n         }\n     }\n     let first = &def.variants[0].ident.name.as_str();\n     let mut pre = &first[..camel_case::until(&*first)];\n     let mut post = &first[camel_case::from(&*first)..];\n-    for var in &def.variants {\n+    for var in def.variants {\n         let name = var.ident.name.as_str();\n \n         let pre_match = partial_match(pre, &name);\n@@ -226,7 +206,7 @@ fn check_variant(\n     };\n     span_lint_and_help(\n         cx,\n-        lint,\n+        ENUM_VARIANT_NAMES,\n         span,\n         &format!(\"all variants have the same {}fix: `{}`\", what, value),\n         None,\n@@ -261,14 +241,14 @@ fn to_camel_case(item_name: &str) -> String {\n     s\n }\n \n-impl EarlyLintPass for EnumVariantNames {\n-    fn check_item_post(&mut self, _cx: &EarlyContext<'_>, _item: &Item) {\n+impl LateLintPass<'_> for EnumVariantNames {\n+    fn check_item_post(&mut self, _cx: &LateContext<'_>, _item: &Item<'_>) {\n         let last = self.modules.pop();\n         assert!(last.is_some());\n     }\n \n     #[allow(clippy::similar_names)]\n-    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         let item_name = item.ident.name.as_str();\n         let item_name_chars = item_name.chars().count();\n         let item_camel = to_camel_case(&item_name);\n@@ -286,7 +266,7 @@ impl EarlyLintPass for EnumVariantNames {\n                             );\n                         }\n                     }\n-                    if item.vis.kind.is_pub() {\n+                    if item.vis.node.is_pub() {\n                         let matching = partial_match(mod_camel, &item_camel);\n                         let rmatching = partial_rmatch(mod_camel, &item_camel);\n                         let nchars = mod_camel.chars().count();\n@@ -317,11 +297,9 @@ impl EarlyLintPass for EnumVariantNames {\n             }\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            let lint = match item.vis.kind {\n-                VisibilityKind::Public => PUB_ENUM_VARIANT_NAMES,\n-                _ => ENUM_VARIANT_NAMES,\n-            };\n-            check_variant(cx, self.threshold, def, &item_name, item_name_chars, item.span, lint);\n+            if !(self.avoid_breaking_exported_api && cx.access_levels.is_exported(item.hir_id())) {\n+                check_variant(cx, self.threshold, def, &item_name, item_name_chars, item.span);\n+            }\n         }\n         self.modules.push((item.ident.name, item_camel));\n     }"}, {"sha": "fb91fac659e6aa15ae648cae49a5f5f41af27ae4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -393,7 +393,6 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore) {\n \n #[doc(hidden)]\n pub fn read_conf(sess: &Session) -> Conf {\n-    use std::path::Path;\n     let file_name = match utils::conf::lookup_conf_file() {\n         Ok(Some(path)) => path,\n         Ok(None) => return Conf::default(),\n@@ -404,16 +403,6 @@ pub fn read_conf(sess: &Session) -> Conf {\n         },\n     };\n \n-    let file_name = if file_name.is_relative() {\n-        sess.local_crate_source_file\n-            .as_deref()\n-            .and_then(Path::parent)\n-            .unwrap_or_else(|| Path::new(\"\"))\n-            .join(file_name)\n-    } else {\n-        file_name\n-    };\n-\n     let TryConf { conf, errors } = utils::conf::read(&file_name);\n     // all conf errors are non-fatal, we just use the default conf in case of error\n     for error in errors {\n@@ -493,6 +482,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::filter_map\",\n         \"this lint has been replaced by `manual_filter_map`, a more specific lint\",\n     );\n+    store.register_removed(\n+        \"clippy::pub_enum_variant_names\",\n+        \"set the `avoid_breaking_exported_api` config option to `false` to enable the `enum_variant_names` lint for public items\",\n+    );\n+    store.register_removed(\n+        \"clippy::wrong_pub_self_convention\",\n+        \"set the `avoid_breaking_exported_api` config option to `false` to enable the `wrong_self_convention` lint for public items\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -606,7 +603,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         enum_variants::ENUM_VARIANT_NAMES,\n         enum_variants::MODULE_INCEPTION,\n         enum_variants::MODULE_NAME_REPETITIONS,\n-        enum_variants::PUB_ENUM_VARIANT_NAMES,\n         eq_op::EQ_OP,\n         eq_op::OP_REF,\n         erasing_op::ERASING_OP,\n@@ -790,7 +786,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         methods::UNNECESSARY_LAZY_EVALUATIONS,\n         methods::UNWRAP_USED,\n         methods::USELESS_ASREF,\n-        methods::WRONG_PUB_SELF_CONVENTION,\n         methods::WRONG_SELF_CONVENTION,\n         methods::ZST_OFFSET,\n         minmax::MIN_MAX,\n@@ -1014,7 +1009,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(methods::FILETYPE_IS_FILE),\n         LintId::of(methods::GET_UNWRAP),\n         LintId::of(methods::UNWRAP_USED),\n-        LintId::of(methods::WRONG_PUB_SELF_CONVENTION),\n         LintId::of(misc::FLOAT_CMP_CONST),\n         LintId::of(misc_early::UNNEEDED_FIELD_PATTERN),\n         LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n@@ -1066,7 +1060,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(doc::MISSING_PANICS_DOC),\n         LintId::of(empty_enum::EMPTY_ENUM),\n         LintId::of(enum_variants::MODULE_NAME_REPETITIONS),\n-        LintId::of(enum_variants::PUB_ENUM_VARIANT_NAMES),\n         LintId::of(eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n         LintId::of(excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS),\n         LintId::of(excessive_bools::STRUCT_EXCESSIVE_BOOLS),\n@@ -1850,7 +1843,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         })\n     });\n \n-    store.register_late_pass(move || box methods::Methods::new(msrv));\n+    let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n+    store.register_late_pass(move || box methods::Methods::new(avoid_breaking_exported_api, msrv));\n     store.register_late_pass(move || box matches::Matches::new(msrv));\n     store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv));\n     store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv));\n@@ -1932,6 +1926,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let pass_by_ref_or_value = pass_by_ref_or_value::PassByRefOrValue::new(\n         conf.trivial_copy_size_limit,\n         conf.pass_by_value_size_limit,\n+        conf.avoid_breaking_exported_api,\n         &sess.target,\n     );\n     store.register_late_pass(move || box pass_by_ref_or_value);\n@@ -1958,7 +1953,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box redundant_clone::RedundantClone);\n     store.register_late_pass(|| box slow_vector_initialization::SlowVectorInit);\n     store.register_late_pass(|| box unnecessary_sort_by::UnnecessarySortBy);\n-    store.register_late_pass(|| box unnecessary_wraps::UnnecessaryWraps);\n+    store.register_late_pass(move || box unnecessary_wraps::UnnecessaryWraps::new(avoid_breaking_exported_api));\n     store.register_late_pass(|| box assertions_on_constants::AssertionsOnConstants);\n     store.register_late_pass(|| box transmuting_null::TransmutingNull);\n     store.register_late_pass(|| box path_buf_push_overwrite::PathBufPushOverwrite);\n@@ -1999,10 +1994,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let literal_representation_threshold = conf.literal_representation_threshold;\n     store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n-    store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n+    store.register_late_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold, avoid_breaking_exported_api));\n     store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n     let upper_case_acronyms_aggressive = conf.upper_case_acronyms_aggressive;\n-    store.register_early_pass(move || box upper_case_acronyms::UpperCaseAcronyms::new(upper_case_acronyms_aggressive));\n+    store.register_late_pass(move || box upper_case_acronyms::UpperCaseAcronyms::new(avoid_breaking_exported_api, upper_case_acronyms_aggressive));\n     store.register_late_pass(|| box default::Default::default());\n     store.register_late_pass(|| box unused_self::UnusedSelf);\n     store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);"}, {"sha": "0b998dbf86c9ff413ac7297725f0c79d03fe4e0c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -282,30 +282,6 @@ declare_clippy_lint! {\n     \"defining a method named with an established prefix (like \\\"into_\\\") that takes `self` with the wrong convention\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** This is the same as\n-    /// [`wrong_self_convention`](#wrong_self_convention), but for public items.\n-    ///\n-    /// **Why is this bad?** See [`wrong_self_convention`](#wrong_self_convention).\n-    ///\n-    /// **Known problems:** Actually *renaming* the function may break clients if\n-    /// the function is part of the public interface. In that case, be mindful of\n-    /// the stability guarantees you've given your users.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// # struct X;\n-    /// impl<'a> X {\n-    ///     pub fn as_str(self) -> &'a str {\n-    ///         \"foo\"\n-    ///     }\n-    /// }\n-    /// ```\n-    pub WRONG_PUB_SELF_CONVENTION,\n-    restriction,\n-    \"defining a public method named with an established prefix (like \\\"into_\\\") that takes `self` with the wrong convention\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `ok().expect(..)`.\n     ///\n@@ -1658,13 +1634,17 @@ declare_clippy_lint! {\n }\n \n pub struct Methods {\n+    avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n }\n \n impl Methods {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n-        Self { msrv }\n+    pub fn new(avoid_breaking_exported_api: bool, msrv: Option<RustcVersion>) -> Self {\n+        Self {\n+            avoid_breaking_exported_api,\n+            msrv,\n+        }\n     }\n }\n \n@@ -1673,7 +1653,6 @@ impl_lint_pass!(Methods => [\n     EXPECT_USED,\n     SHOULD_IMPLEMENT_TRAIT,\n     WRONG_SELF_CONVENTION,\n-    WRONG_PUB_SELF_CONVENTION,\n     OK_EXPECT,\n     MAP_UNWRAP_OR,\n     RESULT_MAP_OR_INTO_OPTION,\n@@ -1838,11 +1817,13 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     }\n                 }\n \n-                if sig.decl.implicit_self.has_implicit_self() {\n+                if sig.decl.implicit_self.has_implicit_self()\n+                    && !(self.avoid_breaking_exported_api\n+                        && cx.access_levels.is_exported(impl_item.hir_id()))\n+                {\n                     wrong_self_convention::check(\n                         cx,\n                         &name,\n-                        item.vis.node.is_pub(),\n                         self_ty,\n                         first_arg_ty,\n                         first_arg.pat.span,\n@@ -1915,7 +1896,6 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 wrong_self_convention::check(\n                     cx,\n                     &item.ident.name.as_str(),\n-                    false,\n                     self_ty,\n                     first_arg_ty,\n                     first_arg_span,"}, {"sha": "a2e09e5ecec1f3334766d163236dfac3b1a01524", "filename": "clippy_lints/src/methods/wrong_self_convention.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -6,7 +6,6 @@ use rustc_middle::ty::TyS;\n use rustc_span::source_map::Span;\n use std::fmt;\n \n-use super::WRONG_PUB_SELF_CONVENTION;\n use super::WRONG_SELF_CONVENTION;\n \n #[rustfmt::skip]\n@@ -21,9 +20,9 @@ const CONVENTIONS: [(&[Convention], &[SelfKind]); 9] = [\n \n     // Conversion using `to_` can use borrowed (non-Copy types) or owned (Copy types).\n     // Source: https://rust-lang.github.io/api-guidelines/naming.html#ad-hoc-conversions-follow-as_-to_-into_-conventions-c-conv\n-    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(false), \n+    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(false),\n     Convention::IsTraitItem(false), Convention::ImplementsTrait(false)], &[SelfKind::Ref]),\n-    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(true), \n+    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(true),\n     Convention::IsTraitItem(false), Convention::ImplementsTrait(false)], &[SelfKind::Value]),\n ];\n \n@@ -85,18 +84,12 @@ impl fmt::Display for Convention {\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     item_name: &str,\n-    is_pub: bool,\n     self_ty: &'tcx TyS<'tcx>,\n     first_arg_ty: &'tcx TyS<'tcx>,\n     first_arg_span: Span,\n     implements_trait: bool,\n     is_trait_item: bool,\n ) {\n-    let lint = if is_pub {\n-        WRONG_PUB_SELF_CONVENTION\n-    } else {\n-        WRONG_SELF_CONVENTION\n-    };\n     if let Some((conventions, self_kinds)) = &CONVENTIONS.iter().find(|(convs, _)| {\n         convs\n             .iter()\n@@ -142,7 +135,7 @@ pub(super) fn check<'tcx>(\n \n             span_lint_and_help(\n                 cx,\n-                lint,\n+                WRONG_SELF_CONVENTION,\n                 first_arg_span,\n                 &format!(\n                     \"{} usually take {}\","}, {"sha": "f6a704785598ee44372878a9a7ab846081ec9403", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -102,10 +102,16 @@ declare_clippy_lint! {\n pub struct PassByRefOrValue {\n     ref_min_size: u64,\n     value_max_size: u64,\n+    avoid_breaking_exported_api: bool,\n }\n \n impl<'tcx> PassByRefOrValue {\n-    pub fn new(ref_min_size: Option<u64>, value_max_size: u64, target: &Target) -> Self {\n+    pub fn new(\n+        ref_min_size: Option<u64>,\n+        value_max_size: u64,\n+        avoid_breaking_exported_api: bool,\n+        target: &Target,\n+    ) -> Self {\n         let ref_min_size = ref_min_size.unwrap_or_else(|| {\n             let bit_width = u64::from(target.pointer_width);\n             // Cap the calculated bit width at 32-bits to reduce\n@@ -120,10 +126,14 @@ impl<'tcx> PassByRefOrValue {\n         Self {\n             ref_min_size,\n             value_max_size,\n+            avoid_breaking_exported_api,\n         }\n     }\n \n     fn check_poly_fn(&mut self, cx: &LateContext<'tcx>, hir_id: HirId, decl: &FnDecl<'_>, span: Option<Span>) {\n+        if self.avoid_breaking_exported_api && cx.access_levels.is_exported(hir_id) {\n+            return;\n+        }\n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n \n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n@@ -184,7 +194,6 @@ impl<'tcx> PassByRefOrValue {\n                     }\n \n                     if_chain! {\n-                        if !cx.access_levels.is_exported(hir_id);\n                         if is_copy(cx, ty);\n                         if !is_self_ty(input);\n                         if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes());"}, {"sha": "a85ffa6aa950507c823738e77be58eb397ea0d4f", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::LangItem::{OptionSome, ResultOk};\n use rustc_hir::{Body, ExprKind, FnDecl, HirId, Impl, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -52,7 +52,19 @@ declare_clippy_lint! {\n     \"functions that only return `Ok` or `Some`\"\n }\n \n-declare_lint_pass!(UnnecessaryWraps => [UNNECESSARY_WRAPS]);\n+pub struct UnnecessaryWraps {\n+    avoid_breaking_exported_api: bool,\n+}\n+\n+impl_lint_pass!(UnnecessaryWraps => [UNNECESSARY_WRAPS]);\n+\n+impl UnnecessaryWraps {\n+    pub fn new(avoid_breaking_exported_api: bool) -> Self {\n+        Self {\n+            avoid_breaking_exported_api,\n+        }\n+    }\n+}\n \n impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n     fn check_fn(\n@@ -66,13 +78,12 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n     ) {\n         // Abort if public function/method or closure.\n         match fn_kind {\n-            FnKind::ItemFn(.., visibility) | FnKind::Method(.., Some(visibility)) => {\n-                if visibility.node.is_pub() {\n+            FnKind::ItemFn(..) | FnKind::Method(..) => {\n+                if self.avoid_breaking_exported_api && cx.access_levels.is_exported(hir_id) {\n                     return;\n                 }\n             },\n             FnKind::Closure => return,\n-            FnKind::Method(..) => (),\n         }\n \n         // Abort if the method is implementing a trait or of it a trait method."}, {"sha": "0b58c6c0917ca025433ddbd853521edc190b4abc", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use itertools::Itertools;\n-use rustc_ast::ast::{Item, ItemKind, VisibilityKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_hir::{Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::Ident;\n@@ -38,12 +38,14 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct UpperCaseAcronyms {\n+    avoid_breaking_exported_api: bool,\n     upper_case_acronyms_aggressive: bool,\n }\n \n impl UpperCaseAcronyms {\n-    pub fn new(aggressive: bool) -> Self {\n+    pub fn new(avoid_breaking_exported_api: bool, aggressive: bool) -> Self {\n         Self {\n+            avoid_breaking_exported_api,\n             upper_case_acronyms_aggressive: aggressive,\n         }\n     }\n@@ -72,7 +74,7 @@ fn correct_ident(ident: &str) -> String {\n     ident\n }\n \n-fn check_ident(cx: &EarlyContext<'_>, ident: &Ident, be_aggressive: bool) {\n+fn check_ident(cx: &LateContext<'_>, ident: &Ident, be_aggressive: bool) {\n     let span = ident.span;\n     let ident = &ident.as_str();\n     let corrected = correct_ident(ident);\n@@ -96,23 +98,27 @@ fn check_ident(cx: &EarlyContext<'_>, ident: &Ident, be_aggressive: bool) {\n     }\n }\n \n-impl EarlyLintPass for UpperCaseAcronyms {\n-    fn check_item(&mut self, cx: &EarlyContext<'_>, it: &Item) {\n+impl LateLintPass<'_> for UpperCaseAcronyms {\n+    fn check_item(&mut self, cx: &LateContext<'_>, it: &Item<'_>) {\n         // do not lint public items or in macros\n-        if !in_external_macro(cx.sess(), it.span) && !matches!(it.vis.kind, VisibilityKind::Public) {\n-            if matches!(\n-                it.kind,\n-                ItemKind::TyAlias(..) | ItemKind::Struct(..) | ItemKind::Trait(..)\n-            ) {\n+        if in_external_macro(cx.sess(), it.span)\n+            || (self.avoid_breaking_exported_api && cx.access_levels.is_exported(it.hir_id()))\n+        {\n+            return;\n+        }\n+        match it.kind {\n+            ItemKind::TyAlias(..) | ItemKind::Struct(..) | ItemKind::Trait(..) => {\n                 check_ident(cx, &it.ident, self.upper_case_acronyms_aggressive);\n-            } else if let ItemKind::Enum(ref enumdef, _) = it.kind {\n+            },\n+            ItemKind::Enum(ref enumdef, _) => {\n                 // check enum variants seperately because again we only want to lint on private enums and\n                 // the fn check_variant does not know about the vis of the enum of its variants\n                 enumdef\n                     .variants\n                     .iter()\n                     .for_each(|variant| check_ident(cx, &variant.ident, self.upper_case_acronyms_aggressive));\n-            }\n+            },\n+            _ => {},\n         }\n     }\n }"}, {"sha": "1bd38dc042cb50eb541ffb12eda3d162f7cfa9c4", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -122,6 +122,8 @@ macro_rules! define_Conf {\n \n // N.B., this macro is parsed by util/lintlib.py\n define_Conf! {\n+    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION. Suppress lints whenever the suggested change would cause breakage for other crates.\n+    (avoid_breaking_exported_api: bool = true),\n     /// Lint: CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE. The minimum rust version that the project supports\n     (msrv: Option<String> = None),\n     /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n@@ -208,15 +210,13 @@ pub fn lookup_conf_file() -> io::Result<Option<PathBuf>> {\n         .map_or_else(|| PathBuf::from(\".\"), PathBuf::from);\n     loop {\n         for config_file_name in &CONFIG_FILE_NAMES {\n-            let config_file = current.join(config_file_name);\n-            match fs::metadata(&config_file) {\n-                // Only return if it's a file to handle the unlikely situation of a directory named\n-                // `clippy.toml`.\n-                Ok(ref md) if !md.is_dir() => return Ok(Some(config_file)),\n-                // Return the error if it's something other than `NotFound`; otherwise we didn't\n-                // find the project file yet, and continue searching.\n-                Err(e) if e.kind() != io::ErrorKind::NotFound => return Err(e),\n-                _ => {},\n+            if let Ok(config_file) = current.join(config_file_name).canonicalize() {\n+                match fs::metadata(&config_file) {\n+                    Err(e) if e.kind() == io::ErrorKind::NotFound => {},\n+                    Err(e) => return Err(e),\n+                    Ok(md) if md.is_dir() => {},\n+                    Ok(_) => return Ok(Some(config_file)),\n+                }\n             }\n         }\n "}, {"sha": "5f289918a7c1306e8d908c7456e0c922dd36ef37", "filename": "rustc_tools_util/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/rustc_tools_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/rustc_tools_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2Fsrc%2Flib.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -100,9 +100,9 @@ pub fn get_commit_date() -> Option<String> {\n }\n \n #[must_use]\n-pub fn get_channel() -> Option<String> {\n+pub fn get_channel() -> String {\n     match env::var(\"CFG_RELEASE_CHANNEL\") {\n-        Ok(channel) => Some(channel),\n+        Ok(channel) => channel,\n         Err(_) => {\n             // if that failed, try to ask rustc -V, do some parsing and find out\n             match std::process::Command::new(\"rustc\")\n@@ -113,16 +113,16 @@ pub fn get_channel() -> Option<String> {\n             {\n                 Some(rustc_output) => {\n                     if rustc_output.contains(\"beta\") {\n-                        Some(String::from(\"beta\"))\n+                        String::from(\"beta\")\n                     } else if rustc_output.contains(\"stable\") {\n-                        Some(String::from(\"stable\"))\n+                        String::from(\"stable\")\n                     } else {\n                         // default to nightly if we fail to parse\n-                        Some(String::from(\"nightly\"))\n+                        String::from(\"nightly\")\n                     }\n                 },\n                 // default to nightly\n-                None => Some(String::from(\"nightly\")),\n+                None => String::from(\"nightly\"),\n             }\n         },\n     }"}, {"sha": "5eb7ac03541982f7f36a590b7c8f41df7d756108", "filename": "tests/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fclippy.toml?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -0,0 +1 @@\n+# default config for tests, overrides clippy.toml at the project root"}, {"sha": "7d266a36bb666387803a921db506712d073720b4", "filename": "tests/compile-test.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -4,8 +4,8 @@\n use compiletest_rs as compiletest;\n use compiletest_rs::common::Mode as TestMode;\n \n-use std::env::{self, set_var, var};\n-use std::ffi::OsStr;\n+use std::env::{self, remove_var, set_var, var_os};\n+use std::ffi::{OsStr, OsString};\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n@@ -88,9 +88,11 @@ fn default_config() -> compiletest::Config {\n     config\n }\n \n-fn run_mode(cfg: &mut compiletest::Config) {\n+fn run_ui(cfg: &mut compiletest::Config) {\n     cfg.mode = TestMode::Ui;\n     cfg.src_base = Path::new(\"tests\").join(\"ui\");\n+    // use tests/clippy.toml\n+    let _g = VarGuard::set(\"CARGO_MANIFEST_DIR\", std::fs::canonicalize(\"tests\").unwrap());\n     compiletest::run_tests(cfg);\n }\n \n@@ -114,7 +116,7 @@ fn run_ui_toml(config: &mut compiletest::Config) {\n                 continue;\n             }\n             let dir_path = dir.path();\n-            set_var(\"CARGO_MANIFEST_DIR\", &dir_path);\n+            let _g = VarGuard::set(\"CARGO_MANIFEST_DIR\", &dir_path);\n             for file in fs::read_dir(&dir_path)? {\n                 let file = file?;\n                 let file_path = file.path();\n@@ -145,9 +147,7 @@ fn run_ui_toml(config: &mut compiletest::Config) {\n \n     let tests = compiletest::make_tests(config);\n \n-    let manifest_dir = var(\"CARGO_MANIFEST_DIR\").unwrap_or_default();\n     let res = run_tests(config, tests);\n-    set_var(\"CARGO_MANIFEST_DIR\", &manifest_dir);\n     match res {\n         Ok(true) => {},\n         Ok(false) => panic!(\"Some tests failed\"),\n@@ -208,7 +208,7 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n                         Some(\"main.rs\") => {},\n                         _ => continue,\n                     }\n-                    set_var(\"CLIPPY_CONF_DIR\", case.path());\n+                    let _g = VarGuard::set(\"CLIPPY_CONF_DIR\", case.path());\n                     let paths = compiletest::common::TestPaths {\n                         file: file_path,\n                         base: config.src_base.clone(),\n@@ -236,10 +236,8 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n     let tests = compiletest::make_tests(config);\n \n     let current_dir = env::current_dir().unwrap();\n-    let conf_dir = var(\"CLIPPY_CONF_DIR\").unwrap_or_default();\n     let res = run_tests(config, &config.filters, tests);\n     env::set_current_dir(current_dir).unwrap();\n-    set_var(\"CLIPPY_CONF_DIR\", conf_dir);\n \n     match res {\n         Ok(true) => {},\n@@ -260,8 +258,32 @@ fn prepare_env() {\n fn compile_test() {\n     prepare_env();\n     let mut config = default_config();\n-    run_mode(&mut config);\n+    run_ui(&mut config);\n     run_ui_toml(&mut config);\n     run_ui_cargo(&mut config);\n     run_internal_tests(&mut config);\n }\n+\n+/// Restores an env var on drop\n+#[must_use]\n+struct VarGuard {\n+    key: &'static str,\n+    value: Option<OsString>,\n+}\n+\n+impl VarGuard {\n+    fn set(key: &'static str, val: impl AsRef<OsStr>) -> Self {\n+        let value = var_os(key);\n+        set_var(key, val);\n+        Self { key, value }\n+    }\n+}\n+\n+impl Drop for VarGuard {\n+    fn drop(&mut self) {\n+        match self.value.as_deref() {\n+            None => remove_var(self.key),\n+            Some(value) => set_var(self.key, value),\n+        }\n+    }\n+}"}, {"sha": "a7be00426c41c4896cea47a60f534b172db1e648", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "cba7666c2d8a7c9b8039fe08c7a0f429f49420d2", "filename": "tests/ui/def_id_nocore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fdef_id_nocore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fdef_id_nocore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -20,7 +20,7 @@ fn start(_argc: isize, _argv: *const *const u8) -> isize {\n     0\n }\n \n-pub struct A;\n+struct A;\n \n impl A {\n     pub fn as_ref(self) -> &'static str {"}, {"sha": "4ba9f0c1fcfff3f81a53f7aed583846abcba43e8", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -12,5 +12,7 @@\n #[warn(clippy::unknown_clippy_lints)]\n #[warn(clippy::find_map)]\n #[warn(clippy::filter_map)]\n+#[warn(clippy::pub_enum_variant_names)]\n+#[warn(clippy::wrong_pub_self_convention)]\n \n fn main() {}"}, {"sha": "03c9f438891363fe3250e951db20ad94299e0365", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -84,5 +84,17 @@ error: lint `clippy::filter_map` has been removed: this lint has been replaced b\n LL | #[warn(clippy::filter_map)]\n    |        ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: lint `clippy::pub_enum_variant_names` has been removed: set the `avoid_breaking_exported_api` config option to `false` to enable the `enum_variant_names` lint for public items\n+  --> $DIR/deprecated.rs:15:8\n+   |\n+LL | #[warn(clippy::pub_enum_variant_names)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: lint `clippy::wrong_pub_self_convention` has been removed: set the `avoid_breaking_exported_api` config option to `false` to enable the `wrong_self_convention` lint for public items\n+  --> $DIR/deprecated.rs:16:8\n+   |\n+LL | #[warn(clippy::wrong_pub_self_convention)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 16 previous errors\n "}, {"sha": "083f5143e6e4d75c662975f2f847b63d83ea41bb", "filename": "tests/ui/enum_variants.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -1,5 +1,4 @@\n-#![feature(non_ascii_idents)]\n-#![warn(clippy::enum_variant_names, clippy::pub_enum_variant_names)]\n+#![warn(clippy::enum_variant_names)]\n #![allow(non_camel_case_types, clippy::upper_case_acronyms)]\n \n enum FakeCallType {\n@@ -97,8 +96,8 @@ pub enum PubSeall {\n     WithOut,\n }\n \n-#[allow(clippy::pub_enum_variant_names)]\n-mod allowed {\n+#[allow(clippy::enum_variant_names)]\n+pub mod allowed {\n     pub enum PubAllowed {\n         SomeThis,\n         SomeThat,"}, {"sha": "447fbb9e1bff3440c35200354408ccdeb9fe60b1", "filename": "tests/ui/enum_variants.stderr", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fenum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fenum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.stderr?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -1,31 +1,31 @@\n error: variant name ends with the enum's name\n-  --> $DIR/enum_variants.rs:16:5\n+  --> $DIR/enum_variants.rs:15:5\n    |\n LL |     cFoo,\n    |     ^^^^\n    |\n    = note: `-D clippy::enum-variant-names` implied by `-D warnings`\n \n error: variant name starts with the enum's name\n-  --> $DIR/enum_variants.rs:27:5\n+  --> $DIR/enum_variants.rs:26:5\n    |\n LL |     FoodGood,\n    |     ^^^^^^^^\n \n error: variant name starts with the enum's name\n-  --> $DIR/enum_variants.rs:28:5\n+  --> $DIR/enum_variants.rs:27:5\n    |\n LL |     FoodMiddle,\n    |     ^^^^^^^^^^\n \n error: variant name starts with the enum's name\n-  --> $DIR/enum_variants.rs:29:5\n+  --> $DIR/enum_variants.rs:28:5\n    |\n LL |     FoodBad,\n    |     ^^^^^^^\n \n error: all variants have the same prefix: `Food`\n-  --> $DIR/enum_variants.rs:26:1\n+  --> $DIR/enum_variants.rs:25:1\n    |\n LL | / enum Food {\n LL | |     FoodGood,\n@@ -37,7 +37,7 @@ LL | | }\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: all variants have the same prefix: `CallType`\n-  --> $DIR/enum_variants.rs:36:1\n+  --> $DIR/enum_variants.rs:35:1\n    |\n LL | / enum BadCallType {\n LL | |     CallTypeCall,\n@@ -49,7 +49,7 @@ LL | | }\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: all variants have the same prefix: `Constant`\n-  --> $DIR/enum_variants.rs:48:1\n+  --> $DIR/enum_variants.rs:47:1\n    |\n LL | / enum Consts {\n LL | |     ConstantInt,\n@@ -61,7 +61,7 @@ LL | | }\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: all variants have the same prefix: `With`\n-  --> $DIR/enum_variants.rs:82:1\n+  --> $DIR/enum_variants.rs:81:1\n    |\n LL | / enum Seallll {\n LL | |     WithOutCake,\n@@ -73,7 +73,7 @@ LL | | }\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: all variants have the same prefix: `Prefix`\n-  --> $DIR/enum_variants.rs:88:1\n+  --> $DIR/enum_variants.rs:87:1\n    |\n LL | / enum NonCaps {\n LL | |     Prefix\u7684,\n@@ -84,21 +84,8 @@ LL | | }\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n-error: all variants have the same prefix: `With`\n-  --> $DIR/enum_variants.rs:94:1\n-   |\n-LL | / pub enum PubSeall {\n-LL | |     WithOutCake,\n-LL | |     WithOutTea,\n-LL | |     WithOut,\n-LL | | }\n-   | |_^\n-   |\n-   = note: `-D clippy::pub-enum-variant-names` implied by `-D warnings`\n-   = help: remove the prefixes and use full paths to the variants instead of glob imports\n-\n error: all variants have the same postfix: `IData`\n-  --> $DIR/enum_variants.rs:137:1\n+  --> $DIR/enum_variants.rs:136:1\n    |\n LL | / enum IDataRequest {\n LL | |     PutIData(String),\n@@ -110,7 +97,7 @@ LL | | }\n    = help: remove the postfixes and use full paths to the variants instead of glob imports\n \n error: all variants have the same postfix: `HIData`\n-  --> $DIR/enum_variants.rs:143:1\n+  --> $DIR/enum_variants.rs:142:1\n    |\n LL | / enum HIDataRequest {\n LL | |     PutHIData(String),\n@@ -121,5 +108,5 @@ LL | | }\n    |\n    = help: remove the postfixes and use full paths to the variants instead of glob imports\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "f5908cb5701fbe9a3e62a1779951aad18baf6af6", "filename": "tests/ui/module_name_repetitions.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fmodule_name_repetitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fmodule_name_repetitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_name_repetitions.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -15,12 +15,4 @@ mod foo {\n     pub struct Foobar;\n }\n \n-#[cfg(test)]\n-mod test {\n-    #[test]\n-    fn it_works() {\n-        assert_eq!(2 + 2, 4);\n-    }\n-}\n-\n fn main() {}"}, {"sha": "2b0005bbff1db6911305327e40e40799a604ede9", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -88,12 +88,6 @@ error: this argument (N byte) is passed by reference, but would be more efficien\n LL |     fn trait_method(&self, _foo: &Foo);\n    |                                  ^^^^ help: consider passing by value instead: `Foo`\n \n-error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:80:37\n-   |\n-LL |     fn trait_method2(&self, _color: &Color);\n-   |                                     ^^^^^^ help: consider passing by value instead: `Color`\n-\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n   --> $DIR/trivially_copy_pass_by_ref.rs:108:21\n    |\n@@ -106,5 +100,5 @@ error: this argument (N byte) is passed by reference, but would be more efficien\n LL |     fn foo(x: &i32) {\n    |               ^^^^ help: consider passing by value instead: `i32`\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 16 previous errors\n "}, {"sha": "63648ef5826f6e1f2c5009050393c4b884e9a735", "filename": "tests/ui/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -65,7 +65,7 @@ fn func10() -> Option<()> {\n     unimplemented!()\n }\n \n-struct A;\n+pub struct A;\n \n impl A {\n     // should not be linted"}, {"sha": "151dd0c27d57dbab4f7b4e98f485eb3993e10b3b", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n #![warn(clippy::wrong_self_convention)]\n-#![warn(clippy::wrong_pub_self_convention)]\n #![allow(dead_code)]\n \n fn main() {}"}, {"sha": "ce23317abf651f59f66ca971aeb15e1520355cfa", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -1,5 +1,5 @@\n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:18:17\n+  --> $DIR/wrong_self_convention.rs:17:17\n    |\n LL |     fn from_i32(self) {}\n    |                 ^^^^\n@@ -8,183 +8,183 @@ LL |     fn from_i32(self) {}\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:24:21\n+  --> $DIR/wrong_self_convention.rs:23:21\n    |\n LL |     pub fn from_i64(self) {}\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/wrong_self_convention.rs:36:15\n+  --> $DIR/wrong_self_convention.rs:35:15\n    |\n LL |     fn as_i32(self) {}\n    |               ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:38:17\n+  --> $DIR/wrong_self_convention.rs:37:17\n    |\n LL |     fn into_i32(&self) {}\n    |                 ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:40:15\n+  --> $DIR/wrong_self_convention.rs:39:15\n    |\n LL |     fn is_i32(self) {}\n    |               ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n-  --> $DIR/wrong_self_convention.rs:42:15\n+  --> $DIR/wrong_self_convention.rs:41:15\n    |\n LL |     fn to_i32(self) {}\n    |               ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:44:17\n+  --> $DIR/wrong_self_convention.rs:43:17\n    |\n LL |     fn from_i32(self) {}\n    |                 ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/wrong_self_convention.rs:46:19\n+  --> $DIR/wrong_self_convention.rs:45:19\n    |\n LL |     pub fn as_i64(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:47:21\n+  --> $DIR/wrong_self_convention.rs:46:21\n    |\n LL |     pub fn into_i64(&self) {}\n    |                     ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:48:19\n+  --> $DIR/wrong_self_convention.rs:47:19\n    |\n LL |     pub fn is_i64(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n-  --> $DIR/wrong_self_convention.rs:49:19\n+  --> $DIR/wrong_self_convention.rs:48:19\n    |\n LL |     pub fn to_i64(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:50:21\n+  --> $DIR/wrong_self_convention.rs:49:21\n    |\n LL |     pub fn from_i64(self) {}\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/wrong_self_convention.rs:95:19\n+  --> $DIR/wrong_self_convention.rs:94:19\n    |\n LL |         fn as_i32(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:98:25\n+  --> $DIR/wrong_self_convention.rs:97:25\n    |\n LL |         fn into_i32_ref(&self) {}\n    |                         ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:100:19\n+  --> $DIR/wrong_self_convention.rs:99:19\n    |\n LL |         fn is_i32(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:104:21\n+  --> $DIR/wrong_self_convention.rs:103:21\n    |\n LL |         fn from_i32(self) {}\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/wrong_self_convention.rs:119:19\n+  --> $DIR/wrong_self_convention.rs:118:19\n    |\n LL |         fn as_i32(self);\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:122:25\n+  --> $DIR/wrong_self_convention.rs:121:25\n    |\n LL |         fn into_i32_ref(&self);\n    |                         ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:124:19\n+  --> $DIR/wrong_self_convention.rs:123:19\n    |\n LL |         fn is_i32(self);\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:128:21\n+  --> $DIR/wrong_self_convention.rs:127:21\n    |\n LL |         fn from_i32(self);\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:146:25\n+  --> $DIR/wrong_self_convention.rs:145:25\n    |\n LL |         fn into_i32_ref(&self);\n    |                         ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:152:21\n+  --> $DIR/wrong_self_convention.rs:151:21\n    |\n LL |         fn from_i32(self);\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:176:22\n+  --> $DIR/wrong_self_convention.rs:175:22\n    |\n LL |         fn to_u64_v2(&self) -> u64 {\n    |                      ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n-  --> $DIR/wrong_self_convention.rs:185:19\n+  --> $DIR/wrong_self_convention.rs:184:19\n    |\n LL |         fn to_u64(self) -> u64 {\n    |                   ^^^^"}, {"sha": "501bc1e6a85cbae27b04ebc7234644d4bbc12f0d", "filename": "tests/ui/wrong_self_convention2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fwrong_self_convention2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fwrong_self_convention2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention2.rs?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n #![warn(clippy::wrong_self_convention)]\n-#![warn(clippy::wrong_pub_self_convention)]\n #![allow(dead_code)]\n \n fn main() {}"}, {"sha": "0e0d066d656b56a174ff00a9190927ca16abbf70", "filename": "tests/ui/wrong_self_convention2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fwrong_self_convention2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c4651f2eeedc6f17f970d05699706c527c7a658/tests%2Fui%2Fwrong_self_convention2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention2.stderr?ref=9c4651f2eeedc6f17f970d05699706c527c7a658", "patch": "@@ -1,5 +1,5 @@\n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention2.rs:56:29\n+  --> $DIR/wrong_self_convention2.rs:55:29\n    |\n LL |         pub fn from_be_self(self) -> Self {\n    |                             ^^^^\n@@ -8,7 +8,7 @@ LL |         pub fn from_be_self(self) -> Self {\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention2.rs:65:25\n+  --> $DIR/wrong_self_convention2.rs:64:25\n    |\n LL |         fn from_be_self(self) -> Self;\n    |                         ^^^^"}]}