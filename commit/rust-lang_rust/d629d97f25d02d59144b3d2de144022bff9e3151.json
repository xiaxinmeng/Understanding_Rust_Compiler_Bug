{"sha": "d629d97f25d02d59144b3d2de144022bff9e3151", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MjlkOTdmMjVkMDJkNTkxNDRiM2QyZGUxNDQwMjJiZmY5ZTMxNTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-17T19:13:02Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T09:28:04Z"}, "message": "Fix some things", "tree": {"sha": "38b8d985316c52a28d011f2f81748856cff2f5b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38b8d985316c52a28d011f2f81748856cff2f5b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d629d97f25d02d59144b3d2de144022bff9e3151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d629d97f25d02d59144b3d2de144022bff9e3151", "html_url": "https://github.com/rust-lang/rust/commit/d629d97f25d02d59144b3d2de144022bff9e3151", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d629d97f25d02d59144b3d2de144022bff9e3151/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de32ddad23abbc831ae60d5efefab0df84e8910b", "url": "https://api.github.com/repos/rust-lang/rust/commits/de32ddad23abbc831ae60d5efefab0df84e8910b", "html_url": "https://github.com/rust-lang/rust/commit/de32ddad23abbc831ae60d5efefab0df84e8910b"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "810744527f94abd47b48cf5e825a1c33faac4c19", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d629d97f25d02d59144b3d2de144022bff9e3151/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d629d97f25d02d59144b3d2de144022bff9e3151/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=d629d97f25d02d59144b3d2de144022bff9e3151", "patch": "@@ -88,6 +88,9 @@ pub fn clif_intcast<'a, 'tcx: 'a>(\n         } else {\n             fx.bcx.ins().uextend(to, val)\n         }\n+    } else if from == types::I128 {\n+        let (lsb, msb) = fx.bcx.ins().isplit(val);\n+        fx.bcx.ins().ireduce(to, lsb)\n     } else {\n         fx.bcx.ins().ireduce(to, val)\n     }"}, {"sha": "3589d770572406176ef81cc3b19b71195e05c36d", "filename": "src/value_and_place.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d629d97f25d02d59144b3d2de144022bff9e3151/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d629d97f25d02d59144b3d2de144022bff9e3151/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=d629d97f25d02d59144b3d2de144022bff9e3151", "patch": "@@ -44,6 +44,21 @@ fn store_scalar<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>, value\n     }\n }\n \n+fn load_scalar<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+    clif_ty: Type,\n+    addr: Value,\n+    offset: i32,\n+) -> Value {\n+    if clif_ty == types::I128 {\n+        let a = fx.bcx.ins().load(clif_ty, MemFlags::new(), addr, offset);\n+        let b = fx.bcx.ins().load(clif_ty, MemFlags::new(), addr, offset + 8);\n+        fx.bcx.ins().iconcat(a, b)\n+    } else {\n+        fx.bcx.ins().load(clif_ty, MemFlags::new(), addr, offset)\n+    }\n+}\n+\n impl<'tcx> CValue<'tcx> {\n     pub fn by_ref(value: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n         CValue(CValueInner::ByRef(value), layout)\n@@ -89,7 +104,7 @@ impl<'tcx> CValue<'tcx> {\n                     _ => unreachable!(),\n                 };\n                 let clif_ty = scalar_to_clif_type(fx.tcx, scalar);\n-                fx.bcx.ins().load(clif_ty, MemFlags::new(), addr, 0)\n+                load_scalar(fx, clif_ty, addr, 0)\n             }\n             CValueInner::ByVal(value) => value,\n             CValueInner::ByValPair(_, _) => bug!(\"Please use load_scalar_pair for ByValPair\"),\n@@ -111,10 +126,10 @@ impl<'tcx> CValue<'tcx> {\n                 let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n                 let clif_ty1 = scalar_to_clif_type(fx.tcx, a_scalar.clone());\n                 let clif_ty2 = scalar_to_clif_type(fx.tcx, b_scalar.clone());\n-                let val1 = fx.bcx.ins().load(clif_ty1, MemFlags::new(), addr, 0);\n-                let val2 = fx.bcx.ins().load(\n+                let val1 = load_scalar(fx, clif_ty1, addr, 0);\n+                let val2 = load_scalar(\n+                    fx,\n                     clif_ty2,\n-                    MemFlags::new(),\n                     addr,\n                     b_offset,\n                 );"}]}