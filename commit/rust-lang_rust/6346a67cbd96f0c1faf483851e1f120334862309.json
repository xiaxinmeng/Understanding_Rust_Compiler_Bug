{"sha": "6346a67cbd96f0c1faf483851e1f120334862309", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNDZhNjdjYmQ5NmYwYzFmYWY0ODM4NTFlMWYxMjAzMzQ4NjIzMDk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-30T18:22:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-30T20:04:35Z"}, "message": "Add more tests for conditional compilation. Issue #489", "tree": {"sha": "1b7cec64b70560b69345da591b4c1639e490fcd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b7cec64b70560b69345da591b4c1639e490fcd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6346a67cbd96f0c1faf483851e1f120334862309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6346a67cbd96f0c1faf483851e1f120334862309", "html_url": "https://github.com/rust-lang/rust/commit/6346a67cbd96f0c1faf483851e1f120334862309", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6346a67cbd96f0c1faf483851e1f120334862309/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fd04a21a1f335cf5fb335e33f6e84d4d29fbef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fd04a21a1f335cf5fb335e33f6e84d4d29fbef1", "html_url": "https://github.com/rust-lang/rust/commit/7fd04a21a1f335cf5fb335e33f6e84d4d29fbef1"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "bfc9e4d8e6c5f4903b8c7bf45847f109c40cf6c3", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6346a67cbd96f0c1faf483851e1f120334862309/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6346a67cbd96f0c1faf483851e1f120334862309/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=6346a67cbd96f0c1faf483851e1f120334862309", "patch": "@@ -1,8 +1,74 @@\n // xfail-stage0\n \n+#[cfg(bogus)]\n+const bool b = false;\n+\n+const bool b = true;\n+\n+#[cfg(bogus)]\n+native \"rust\" mod rustrt {\n+  // This symbol doesn't exist and would be a link error if this\n+  // module was translated\n+  fn bogus();\n+}\n+\n+native \"rust\" mod rustrt {\n+}\n+\n+#[cfg(bogus)]\n+type t = int;\n+\n+type t = bool;\n+\n+#[cfg(bogus)]\n+tag tg {\n+  foo;\n+}\n+\n+tag tg {\n+  bar;\n+}\n+\n+#[cfg(bogus)]\n+obj o() {\n+  fn f() { ret bogus; }\n+}\n+\n+obj o() {\n+}\n+\n+#[cfg(bogus)]\n+resource r(int i) {}\n+\n+resource r(int i) {}\n+\n+#[cfg(bogus)]\n+mod m {\n+  // This needs to parse but would fail in typeck. Since it's not in\n+  // the current config it should not be typechecked.\n+  fn bogus() { ret 0; }\n+}\n+\n+mod m {\n+\n+  // Submodules have slightly different code paths than the top-level\n+  // module, so let's make sure this jazz works here as well\n+  #[cfg(bogus)]\n+  fn f() {}\n+\n+  fn f() {}\n+}\n+\n // Since the bogus configuration isn't defined main will just be\n // parsed, but nothing further will be done with it\n #[cfg(bogus)]\n fn main() { fail }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {\n+  // Exercise some of the configured items in ways that wouldn't be possible\n+  // if they had the bogus definition\n+  assert b;\n+  let t x = true;\n+  let tg y = bar;\n+}\n+"}]}