{"sha": "0c77257e56a20a81f5b4e4452cae5e460ad30140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNzcyNTdlNTZhMjBhODFmNWI0ZTQ0NTJjYWU1ZTQ2MGFkMzAxNDA=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-01T21:55:17Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-01T21:55:17Z"}, "message": "Make all remaining methods of `std::net::Ipv4Addr` const\n\nMakes the following methods of `std::net::Ipv4Addr` unstable const under the `const_ipv4` feature:\n - `is_global`\n - `is_reserved`\n - `is_broadcast`\n - `to_ipv6_compatible`\n - `to_ipv6_mapped`\n\nThis results in all methods of `Ipv4Addr` being const.\n\nAlso adds tests for these methods in a const context.", "tree": {"sha": "a657927ddb301b0719923239c6edb32f8ae79df3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a657927ddb301b0719923239c6edb32f8ae79df3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c77257e56a20a81f5b4e4452cae5e460ad30140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c77257e56a20a81f5b4e4452cae5e460ad30140", "html_url": "https://github.com/rust-lang/rust/commit/0c77257e56a20a81f5b4e4452cae5e460ad30140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c77257e56a20a81f5b4e4452cae5e460ad30140/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb64e6dcf0a7ea0518c8f2d499327a2b6974f859", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb64e6dcf0a7ea0518c8f2d499327a2b6974f859", "html_url": "https://github.com/rust-lang/rust/commit/fb64e6dcf0a7ea0518c8f2d499327a2b6974f859"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "125fc8d3488d0ceba1a3fd25aa426bebf3b729e1", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0c77257e56a20a81f5b4e4452cae5e460ad30140/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c77257e56a20a81f5b4e4452cae5e460ad30140/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=0c77257e56a20a81f5b4e4452cae5e460ad30140", "patch": "@@ -542,10 +542,13 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(1, 1, 1, 1).is_global(), true);\n     /// assert_eq!(Ipv4Addr::new(80, 9, 12, 3).is_global(), true);\n     /// ```\n-    pub fn is_global(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    pub const fn is_global(&self) -> bool {\n         // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two\n         // globally routable addresses in the 192.0.0.0/24 range.\n-        if u32::from(*self) == 0xc0000009 || u32::from(*self) == 0xc000000a {\n+        if u32::from_be_bytes(self.octets()) == 0xc0000009\n+            || u32::from_be_bytes(self.octets()) == 0xc000000a\n+        {\n             return true;\n         }\n         !self.is_private()\n@@ -667,7 +670,8 @@ impl Ipv4Addr {\n     /// // The broadcast address is not considered as reserved for future use by this implementation\n     /// assert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_reserved(), false);\n     /// ```\n-    pub fn is_reserved(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    pub const fn is_reserved(&self) -> bool {\n         self.octets()[0] & 240 == 240 && !self.is_broadcast()\n     }\n \n@@ -709,9 +713,10 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_broadcast(), true);\n     /// assert_eq!(Ipv4Addr::new(236, 168, 10, 65).is_broadcast(), false);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n-    pub fn is_broadcast(&self) -> bool {\n-        self == &Self::BROADCAST\n+    pub const fn is_broadcast(&self) -> bool {\n+        u32::from_be_bytes(self.octets()) == u32::from_be_bytes(Self::BROADCAST.octets())\n     }\n \n     /// Returns [`true`] if this address is in a range designated for documentation.\n@@ -762,10 +767,13 @@ impl Ipv4Addr {\n     ///     Ipv6Addr::new(0, 0, 0, 0, 0, 0, 49152, 767)\n     /// );\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn to_ipv6_compatible(&self) -> Ipv6Addr {\n+    pub const fn to_ipv6_compatible(&self) -> Ipv6Addr {\n         let [a, b, c, d] = self.octets();\n-        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a, b, c, d])\n+        Ipv6Addr {\n+            inner: c::in6_addr { s6_addr: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a, b, c, d] },\n+        }\n     }\n \n     /// Converts this address to an IPv4-mapped [`IPv6` address].\n@@ -782,10 +790,13 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(192, 0, 2, 255).to_ipv6_mapped(),\n     ///            Ipv6Addr::new(0, 0, 0, 0, 0, 65535, 49152, 767));\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn to_ipv6_mapped(&self) -> Ipv6Addr {\n+    pub const fn to_ipv6_mapped(&self) -> Ipv6Addr {\n         let [a, b, c, d] = self.octets();\n-        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFF, 0xFF, a, b, c, d])\n+        Ipv6Addr {\n+            inner: c::in6_addr { s6_addr: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFF, 0xFF, a, b, c, d] },\n+        }\n     }\n }\n "}, {"sha": "8c676999ae734c1952b339ad6a99b9b6403368d9", "filename": "src/test/ui/consts/std/net/ipv4.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0c77257e56a20a81f5b4e4452cae5e460ad30140/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c77257e56a20a81f5b4e4452cae5e460ad30140/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv4.rs?ref=0c77257e56a20a81f5b4e4452cae5e460ad30140", "patch": "@@ -3,7 +3,7 @@\n #![feature(ip)]\n #![feature(const_ipv4)]\n \n-use std::net::Ipv4Addr;\n+use std::net::{Ipv4Addr, Ipv6Addr};\n \n fn main() {\n     const IP_ADDRESS: Ipv4Addr = Ipv4Addr::new(127, 0, 0, 1);\n@@ -24,6 +24,9 @@ fn main() {\n     const IS_LINK_LOCAL : bool = IP_ADDRESS.is_link_local();\n     assert!(!IS_LINK_LOCAL);\n \n+    const IS_GLOBAL : bool = IP_ADDRESS.is_global();\n+    assert!(!IS_GLOBAL);\n+\n     const IS_SHARED : bool = IP_ADDRESS.is_shared();\n     assert!(!IS_SHARED);\n \n@@ -33,9 +36,23 @@ fn main() {\n     const IS_BENCHMARKING : bool = IP_ADDRESS.is_benchmarking();\n     assert!(!IS_BENCHMARKING);\n \n+    const IS_RESERVED : bool = IP_ADDRESS.is_reserved();\n+    assert!(!IS_RESERVED);\n+\n     const IS_MULTICAST : bool = IP_ADDRESS.is_multicast();\n     assert!(!IS_MULTICAST);\n \n+    const IS_BROADCAST : bool = IP_ADDRESS.is_broadcast();\n+    assert!(!IS_BROADCAST);\n+\n     const IS_DOCUMENTATION : bool = IP_ADDRESS.is_documentation();\n     assert!(!IS_DOCUMENTATION);\n+\n+    const IP_V6_COMPATIBLE : Ipv6Addr = IP_ADDRESS.to_ipv6_compatible();\n+    assert_eq!(IP_V6_COMPATIBLE,\n+        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 1]));\n+\n+    const IP_V6_MAPPED : Ipv6Addr = IP_ADDRESS.to_ipv6_mapped();\n+    assert_eq!(IP_V6_MAPPED,\n+        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 127, 0, 0, 1]));\n }"}]}