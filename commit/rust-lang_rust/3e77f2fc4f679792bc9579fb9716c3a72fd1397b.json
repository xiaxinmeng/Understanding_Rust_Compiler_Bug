{"sha": "3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNzdmMmZjNGY2Nzk3OTJiYzk1NzlmYjk3MTZjM2E3MmZkMTM5N2I=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-08-30T13:41:59Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:59Z"}, "message": "Use the method form for CodegenCx everywhere", "tree": {"sha": "5627434cc92fb9bd34851f6ef19dcf33ecc53449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5627434cc92fb9bd34851f6ef19dcf33ecc53449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "html_url": "https://github.com/rust-lang/rust/commit/3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c5b990c5f5e17f044d7c4673802a11d50bc709f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5b990c5f5e17f044d7c4673802a11d50bc709f", "html_url": "https://github.com/rust-lang/rust/commit/6c5b990c5f5e17f044d7c4673802a11d50bc709f"}], "stats": {"total": 109, "additions": 54, "deletions": 55}, "files": [{"sha": "9256eaccf91c93b49e077e703252fd3b1a9961de", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -244,7 +244,7 @@ impl ArgTypeExt<'ll, 'tcx> for ArgType<'tcx, Ty<'tcx>> {\n                                   self.layout.align,\n                                   bx.pointercast(llscratch, Type::i8p(cx)),\n                                   scratch_align,\n-                                  CodegenCx::c_usize(cx, self.layout.size.bytes()),\n+                                  cx.c_usize(self.layout.size.bytes()),\n                                   MemFlags::empty());\n \n                 bx.lifetime_end(llscratch, scratch_size);"}, {"sha": "076fa400a27842eb2d00ce04b0d1268eec6e38ca", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -111,7 +111,7 @@ pub fn codegen_inline_asm(\n         let kind = llvm::LLVMGetMDKindIDInContext(bx.cx().llcx,\n             key.as_ptr() as *const c_char, key.len() as c_uint);\n \n-        let val: &'ll Value = CodegenCx::c_i32(bx.cx(), ia.ctxt.outer().as_u32() as i32);\n+        let val: &'ll Value = bx.cx().c_i32(ia.ctxt.outer().as_u32() as i32);\n \n         llvm::LLVMSetMetadata(r, kind,\n             llvm::LLVMMDNodeInContext(bx.cx().llcx, &val, 1));"}, {"sha": "9c4570f8a31b96deabc5b633d3512a4e0afc5a86", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -157,14 +157,14 @@ pub fn bin_op_to_fcmp_predicate(op: hir::BinOpKind) -> RealPredicate {\n     }\n }\n \n-pub fn compare_simd_types(\n-    bx: &Builder<'a, 'll, 'tcx>,\n-    lhs: &'ll Value,\n-    rhs: &'ll Value,\n+pub fn compare_simd_types<'a, 'll:'a, 'tcx:'ll, Builder: BuilderMethods<'a, 'll, 'tcx>>(\n+    bx: &Builder,\n+    lhs: Builder::Value,\n+    rhs: Builder::Value,\n     t: Ty<'tcx>,\n-    ret_ty: &'ll Type,\n+    ret_ty: Builder::Type,\n     op: hir::BinOpKind\n-) -> &'ll Value {\n+) -> Builder::Value {\n     let signed = match t.sty {\n         ty::Float(_) => {\n             let cmp = bin_op_to_fcmp_predicate(op);\n@@ -198,7 +198,7 @@ pub fn unsized_info(\n     let (source, target) = cx.tcx.struct_lockstep_tails(source, target);\n     match (&source.sty, &target.sty) {\n         (&ty::Array(_, len), &ty::Slice(_)) => {\n-            CodegenCx::c_usize(cx, len.unwrap_usize(cx.tcx))\n+            cx.c_usize(len.unwrap_usize(cx.tcx))\n         }\n         (&ty::Dynamic(..), &ty::Dynamic(..)) => {\n             // For now, upcasts are limited to changes in marker\n@@ -460,7 +460,7 @@ pub fn memcpy_ty<'a, 'll: 'a, 'tcx: 'll>(\n         return;\n     }\n \n-    call_memcpy(bx, dst, dst_align, src, src_align, CodegenCx::c_usize(bx.cx(), size), flags);\n+    call_memcpy(bx, dst, dst_align, src, src_align, bx.cx().c_usize(size), flags);\n }\n \n pub fn call_memset(\n@@ -474,7 +474,7 @@ pub fn call_memset(\n     let ptr_width = &bx.cx().sess().target.target.target_pointer_width;\n     let intrinsic_key = format!(\"llvm.memset.p0i8.i{}\", ptr_width);\n     let llintrinsicfn = bx.cx().get_intrinsic(&intrinsic_key);\n-    let volatile = CodegenCx::c_bool(bx.cx(), volatile);\n+    let volatile = bx.cx().c_bool(volatile);\n     bx.call(llintrinsicfn, &[ptr, fill_byte, size, align, volatile], None)\n }\n "}, {"sha": "d74653310e342f9c4e291f255f0bbfbba9376fd3", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -577,7 +577,7 @@ impl BuilderMethods<'a, 'll, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 // *always* point to a metadata value of the integer 1.\n                 //\n                 // [1]: http://llvm.org/docs/LangRef.html#store-instruction\n-                let one = CodegenCx::c_i32(self.cx, 1);\n+                let one = self.cx.c_i32(1);\n                 let node = llvm::LLVMMDNodeInContext(self.cx.llcx, &one, 1);\n                 llvm::LLVMSetMetadata(store, llvm::MD_nontemporal as c_uint, node);\n             }\n@@ -861,7 +861,7 @@ impl BuilderMethods<'a, 'll, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe {\n             let elt_ty = self.cx.val_ty(elt);\n             let undef = llvm::LLVMGetUndef(type_::Type::vector(elt_ty, num_elts as u64));\n-            let vec = self.insert_element(undef, elt, CodegenCx::c_i32(self.cx, 0));\n+            let vec = self.insert_element(undef, elt, self.cx.c_i32(0));\n             let vec_i32_ty = type_::Type::vector(type_::Type::i32(self.cx), num_elts as u64);\n             self.shuffle_vector(vec, undef, self.cx.c_null(vec_i32_ty))\n         }\n@@ -1227,7 +1227,7 @@ impl BuilderMethods<'a, 'll, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let lifetime_intrinsic = self.cx.get_intrinsic(intrinsic);\n \n         let ptr = self.pointercast(ptr, type_::Type::i8p(self.cx));\n-        self.call(lifetime_intrinsic, &[CodegenCx::c_u64(self.cx, size), ptr], None);\n+        self.call(lifetime_intrinsic, &[self.cx.c_u64(size), ptr], None);\n     }\n \n     fn call(&self, llfn: &'ll Value, args: &[&'ll Value],"}, {"sha": "569fbc9f0813efb8cf6a0765419bbb8c15cdd028", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -50,7 +50,7 @@ pub fn type_is_freeze<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bo\n     ty.is_freeze(tcx, ty::ParamEnv::reveal_all(), DUMMY_SP)\n }\n \n-pub struct OperandBundleDef<'a, Value : 'a> {\n+pub struct OperandBundleDef<'a, Value: 'a> {\n     pub name: &'a str,\n     pub val: Value\n }\n@@ -200,7 +200,7 @@ impl Backend for CodegenCx<'ll, 'tcx> {\n     type Context = &'ll llvm::Context;\n }\n \n-impl<'ll, 'tcx : 'll> CommonMethods for CodegenCx<'ll, 'tcx> {\n+impl<'ll, 'tcx: 'll> CommonMethods for CodegenCx<'ll, 'tcx> {\n \n     // LLVM constant constructors.\n     fn c_null(&self, t: &'ll Type) -> &'ll Value {\n@@ -424,7 +424,7 @@ pub fn c_struct_in_context(\n     }\n }\n \n-impl<'ll, 'tcx : 'll> CommonWriteMethods for CodegenCx<'ll, 'tcx> {\n+impl<'ll, 'tcx: 'll> CommonWriteMethods for CodegenCx<'ll, 'tcx> {\n     fn val_ty(&self, v: &'ll Value) -> &'ll Type {\n         val_ty(v)\n     }"}, {"sha": "78958080a3b467efb83bd053e6ba4491c9ff1337", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -30,7 +30,7 @@ pub fn insert_reference_to_gdb_debug_scripts_section_global(bx: &Builder) {\n         let gdb_debug_scripts_section = get_or_insert_gdb_debug_scripts_section_global(bx.cx());\n         // Load just the first byte as that's all that's necessary to force\n         // LLVM to keep around the reference to the global.\n-        let indices = [CodegenCx::c_i32(bx.cx(), 0), CodegenCx::c_i32(bx.cx(), 0)];\n+        let indices = [bx.cx().c_i32(0), bx.cx().c_i32(0)];\n         let element = bx.inbounds_gep(gdb_debug_scripts_section, &indices);\n         let volative_load_instruction = bx.volatile_load(element);\n         unsafe {\n@@ -64,7 +64,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global(cx: &CodegenCx<'ll, '_>)\n                 bug!(\"symbol `{}` is already defined\", section_var_name)\n             });\n             llvm::LLVMSetSection(section_var, section_name.as_ptr() as *const _);\n-            llvm::LLVMSetInitializer(section_var, CodegenCx::c_bytes(cx, section_contents));\n+            llvm::LLVMSetInitializer(section_var, cx.c_bytes(section_contents));\n             llvm::LLVMSetGlobalConstant(section_var, llvm::True);\n             llvm::LLVMSetUnnamedAddr(section_var, llvm::True);\n             llvm::LLVMRustSetLinkage(section_var, llvm::Linkage::LinkOnceODRLinkage);"}, {"sha": "8e0fbe08c34aa01c074bd94c361630b3d71e5778", "filename": "src/librustc_codegen_llvm/glue.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fglue.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -16,7 +16,6 @@ use std;\n \n use builder::Builder;\n use common::*;\n-use context::CodegenCx;\n use meth;\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, Ty};\n@@ -66,8 +65,8 @@ pub fn size_and_align_of_dst(\n             let sized_align = layout.align.abi();\n             debug!(\"DST {} statically sized prefix size: {} align: {}\",\n                    t, sized_size, sized_align);\n-            let sized_size = CodegenCx::c_usize(cx, sized_size);\n-            let sized_align = CodegenCx::c_usize(cx, sized_align);\n+            let sized_size = cx.c_usize(sized_size);\n+            let sized_align = cx.c_usize(sized_align);\n \n             // Recurse to get the size of the dynamically sized field (must be\n             // the last field).\n@@ -98,7 +97,7 @@ pub fn size_and_align_of_dst(\n                 (Some(sized_align), Some(unsized_align)) => {\n                     // If both alignments are constant, (the sized_align should always be), then\n                     // pick the correct alignment statically.\n-                    CodegenCx::c_usize(cx, std::cmp::max(sized_align, unsized_align) as u64)\n+                    cx.c_usize(std::cmp::max(sized_align, unsized_align) as u64)\n                 }\n                 _ => bx.select(bx.icmp(IntPredicate::IntUGT, sized_align, unsized_align),\n                                sized_align,\n@@ -116,7 +115,7 @@ pub fn size_and_align_of_dst(\n             //\n             //   `(size + (align-1)) & -align`\n \n-            let addend = bx.sub(align, CodegenCx::c_usize(bx.cx(), 1));\n+            let addend = bx.sub(align, bx.cx().c_usize(1));\n             let size = bx.and(bx.add(size, addend), bx.neg(align));\n \n             (size, align)"}, {"sha": "6db014023e9fff8fc4c619fc38e6ab5b42a15c8c", "filename": "src/librustc_codegen_llvm/interfaces/backend.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::fmt::Debug;\n+\n pub trait Backend {\n-    type Value;\n+    type Value: Debug + PartialEq;\n     type BasicBlock;\n     type Type;\n     type Context;"}, {"sha": "143de3c5b07108c56c29d0254589a37b86cd9712", "filename": "src/librustc_codegen_llvm/interfaces/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -22,7 +22,7 @@ use syntax::ast::AsmDialect;\n \n \n \n-pub trait BuilderMethods<'a, 'll :'a, 'tcx: 'll> : Backend {\n+pub trait BuilderMethods<'a, 'll :'a, 'tcx: 'll>: Backend {\n \n     fn new_block<'b>(\n         cx: &'a CodegenCx<'ll, 'tcx, Self::Value>,\n@@ -271,7 +271,7 @@ pub trait BuilderMethods<'a, 'll :'a, 'tcx: 'll> : Backend {\n         typ: &str,\n         llfn: Self::Value,\n         args: &'b [Self::Value]\n-    ) -> Cow<'b, [Self::Value]> where [Self::Value] : ToOwned;\n+    ) -> Cow<'b, [Self::Value]> where [Self::Value]: ToOwned;\n     fn lifetime_start(&self, ptr: Self::Value, size: Size);\n     fn lifetime_end(&self, ptr: Self::Value, size: Size);\n "}, {"sha": "35f588368fe1ec3a764fb799b2058a3d543e6c97", "filename": "src/librustc_codegen_llvm/interfaces/common.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fcommon.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -11,7 +11,7 @@\n use super::Backend;\n use syntax::symbol::LocalInternedString;\n \n-pub trait CommonMethods : Backend + CommonWriteMethods {\n+pub trait CommonMethods: Backend + CommonWriteMethods {\n     // Constant constructors\n     fn c_null(&self, t: Self::Type) -> Self::Value;\n     fn c_undef(&self, t: Self::Type) -> Self::Value;\n@@ -47,12 +47,13 @@ pub trait CommonMethods : Backend + CommonWriteMethods {\n     fn const_get_elt(&self, v: Self::Value, idx: u64) -> Self::Value;\n     fn const_get_real(&self, v: Self::Value) -> Option<(f64, bool)>;\n     fn const_to_uint(&self, v: Self::Value) -> u64;\n+    fn const_to_opt_u128(&self, v: Self::Value, sign_ext: bool) -> Option<u128>;\n+\n     fn is_const_integral(&self, v: Self::Value) -> bool;\n     fn is_const_real(&self, v: Self::Value) -> bool;\n-    fn const_to_opt_u128(&self, v: Self::Value, sign_ext: bool) -> Option<u128>;\n }\n \n-pub trait CommonWriteMethods : Backend {\n+pub trait CommonWriteMethods: Backend {\n         fn val_ty(&self, v: Self::Value) -> Self::Type;\n         fn c_bytes_in_context(&self, llcx: Self::Context, bytes: &[u8]) -> Self::Value;\n         fn c_struct_in_context("}, {"sha": "e80c66fbe24597964c430e2833c4ad496b8dcc5a", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -246,7 +246,7 @@ pub enum AtomicRmwBinOp {\n }\n \n impl AtomicRmwBinOp {\n-    pub fn from_generic(op : common::AtomicRmwBinOp) -> Self {\n+    pub fn from_generic(op: common::AtomicRmwBinOp) -> Self {\n         match op {\n             common::AtomicRmwBinOp::AtomicXchg => AtomicRmwBinOp::AtomicXchg,\n             common::AtomicRmwBinOp::AtomicAdd => AtomicRmwBinOp::AtomicAdd,\n@@ -279,7 +279,7 @@ pub enum AtomicOrdering {\n }\n \n impl AtomicOrdering {\n-    pub fn from_generic(ao : common::AtomicOrdering) -> Self {\n+    pub fn from_generic(ao: common::AtomicOrdering) -> Self {\n         match ao {\n             common::AtomicOrdering::NotAtomic => AtomicOrdering::NotAtomic,\n             common::AtomicOrdering::Unordered => AtomicOrdering::Unordered,\n@@ -306,7 +306,7 @@ pub enum SynchronizationScope {\n }\n \n impl SynchronizationScope {\n-    pub fn from_generic(sc : common::SynchronizationScope) -> Self {\n+    pub fn from_generic(sc: common::SynchronizationScope) -> Self {\n         match sc {\n             common::SynchronizationScope::Other => SynchronizationScope::Other,\n             common::SynchronizationScope::SingleThread => SynchronizationScope::SingleThread,\n@@ -356,7 +356,7 @@ pub enum AsmDialect {\n }\n \n impl AsmDialect {\n-    pub fn from_generic(asm : syntax::ast::AsmDialect) -> Self {\n+    pub fn from_generic(asm: syntax::ast::AsmDialect) -> Self {\n         match asm {\n             syntax::ast::AsmDialect::Att => AsmDialect::Att,\n             syntax::ast::AsmDialect::Intel => AsmDialect::Intel"}, {"sha": "1d90f8be46d648065f39053f1682b74c60a00ac1", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -273,7 +273,7 @@ impl OperandBundleDef<'a> {\n         OperandBundleDef { raw: def }\n     }\n \n-    pub fn from_generic(bundle : &common::OperandBundleDef<'a, &'a Value>) -> Self {\n+    pub fn from_generic(bundle: &common::OperandBundleDef<'a, &'a Value>) -> Self {\n         Self::new(bundle.name, &[bundle.val])\n     }\n }"}, {"sha": "e4c4417654aa101f4abd66faa47937cbd7228238", "filename": "src/librustc_codegen_llvm/meth.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmeth.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'tcx> VirtualIndex {\n         let llvtable = bx.pointercast(llvtable, fn_ty.ptr_to_llvm_type(bx.cx()).ptr_to());\n         let ptr_align = bx.tcx().data_layout.pointer_align;\n         let ptr = bx.load(\n-            bx.inbounds_gep(llvtable, &[CodegenCx::c_usize(bx.cx(), self.0)]),\n+            bx.inbounds_gep(llvtable, &[bx.cx().c_usize(self.0)]),\n             ptr_align\n         );\n         bx.nonnull_metadata(ptr);\n@@ -64,7 +64,7 @@ impl<'a, 'tcx> VirtualIndex {\n         let llvtable = bx.pointercast(llvtable, Type::isize(bx.cx()).ptr_to());\n         let usize_align = bx.tcx().data_layout.pointer_align;\n         let ptr = bx.load(\n-            bx.inbounds_gep(llvtable, &[CodegenCx::c_usize(bx.cx(), self.0)]),\n+            bx.inbounds_gep(llvtable, &[bx.cx().c_usize(self.0)]),\n             usize_align\n         );\n         // Vtable loads are invariant\n@@ -112,11 +112,11 @@ pub fn get_vtable(\n     // /////////////////////////////////////////////////////////////////////////////////////////////\n     let components: Vec<_> = [\n         callee::get_fn(cx, monomorphize::resolve_drop_in_place(cx.tcx, ty)),\n-        CodegenCx::c_usize(cx, size.bytes()),\n-        CodegenCx::c_usize(cx, align.abi())\n+        cx.c_usize(size.bytes()),\n+        cx.c_usize(align.abi())\n     ].iter().cloned().chain(methods).collect();\n \n-    let vtable_const = CodegenCx::c_struct(cx, &components, false);\n+    let vtable_const = cx.c_struct(&components, false);\n     let align = cx.data_layout().pointer_align;\n     let vtable = consts::addr_of(cx, vtable_const, align, Some(\"vtable\"));\n "}, {"sha": "4b9727d1e7adb0bfc97eff42b26b1527deb5fbd6", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -19,7 +19,6 @@ use base;\n use callee;\n use builder::{Builder, MemFlags};\n use common::{self, IntPredicate};\n-use context::CodegenCx;\n use consts;\n use meth;\n use monomorphize;\n@@ -347,7 +346,7 @@ impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n \n                 // Pass the condition through llvm.expect for branch hinting.\n                 let expect = bx.cx().get_intrinsic(&\"llvm.expect.i1\");\n-                let cond = bx.call(expect, &[cond, CodegenCx::c_bool(bx.cx(), expected)], None);\n+                let cond = bx.call(expect, &[cond, bx.cx().c_bool(expected)], None);\n \n                 // Create the failure block and the conditional branch to it.\n                 let lltarget = llblock(self, target);\n@@ -365,9 +364,9 @@ impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n                 // Get the location information.\n                 let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n                 let filename = Symbol::intern(&loc.file.name.to_string()).as_str();\n-                let filename = CodegenCx::c_str_slice(bx.cx(), filename);\n-                let line = CodegenCx::c_u32(bx.cx(), loc.line as u32);\n-                let col = CodegenCx::c_u32(bx.cx(), loc.col.to_usize() as u32 + 1);\n+                let filename = bx.cx().c_str_slice(filename);\n+                let line = bx.cx().c_u32(loc.line as u32);\n+                let col = bx.cx().c_u32(loc.col.to_usize() as u32 + 1);\n                 let align = tcx.data_layout.aggregate_align\n                     .max(tcx.data_layout.i32_align)\n                     .max(tcx.data_layout.pointer_align);\n@@ -378,8 +377,7 @@ impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n                         let len = self.codegen_operand(&mut bx, len).immediate();\n                         let index = self.codegen_operand(&mut bx, index).immediate();\n \n-                        let file_line_col = CodegenCx::c_struct(bx.cx(),\n-                             &[filename, line, col], false);\n+                        let file_line_col = bx.cx().c_struct(&[filename, line, col], false);\n                         let file_line_col = consts::addr_of(bx.cx(),\n                                                             file_line_col,\n                                                             align,\n@@ -390,9 +388,8 @@ impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n                     _ => {\n                         let str = msg.description();\n                         let msg_str = Symbol::intern(str).as_str();\n-                        let msg_str = CodegenCx::c_str_slice(bx.cx(), msg_str);\n-                        let msg_file_line_col = CodegenCx::c_struct(\n-                            bx.cx(),\n+                        let msg_str = bx.cx().c_str_slice(msg_str);\n+                        let msg_file_line_col = bx.cx().c_struct(\n                             &[msg_str, filename, line, col],\n                             false\n                         );"}, {"sha": "70e86b690fa307576e5d07fbf1d73f19d5997640", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -96,7 +96,7 @@ pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll\n         assert_eq!(offset as usize as u64, offset);\n         let offset = offset as usize;\n         if offset > next_offset {\n-            llvals.push(CodegenCx::c_bytes(cx, &alloc.bytes[next_offset..offset]));\n+            llvals.push(cx.c_bytes(&alloc.bytes[next_offset..offset]));\n         }\n         let ptr_offset = read_target_uint(\n             dl.endian,\n@@ -114,10 +114,10 @@ pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll\n         next_offset = offset + pointer_size;\n     }\n     if alloc.bytes.len() >= next_offset {\n-        llvals.push(CodegenCx::c_bytes(cx, &alloc.bytes[next_offset ..]));\n+        llvals.push(cx.c_bytes(&alloc.bytes[next_offset ..]));\n     }\n \n-    CodegenCx::c_struct(cx, &llvals, true)\n+    cx.c_struct(&llvals, true)\n }\n \n pub fn codegen_static_initializer(\n@@ -207,7 +207,7 @@ impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n                         bug!(\"simd shuffle field {:?}\", field)\n                     }\n                 }).collect();\n-                let llval = CodegenCx::c_struct(bx.cx(), &values?, false);\n+                let llval = bx.cx().c_struct(&values?, false);\n                 Ok((llval, c.ty))\n             })\n             .unwrap_or_else(|_| {"}, {"sha": "84bc4280239bda995a5440623d8cef95f693edcd", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e77f2fc4f679792bc9579fb9716c3a72fd1397b/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=3e77f2fc4f679792bc9579fb9716c3a72fd1397b", "patch": "@@ -421,7 +421,7 @@ fn create_funclets(\n                 // it's null. The 64 here is actually a bitfield which\n                 // represents that this is a catch-all block.\n                 let null = bx.cx().c_null(Type::i8p(bx.cx()));\n-                let sixty_four = CodegenCx::c_i32(bx.cx(), 64);\n+                let sixty_four = bx.cx().c_i32(64);\n                 cleanup = cp_bx.catch_pad(cs, &[null, sixty_four, null]);\n                 cp_bx.br(llbb);\n             }"}]}