{"sha": "6621279a756909a55624a19f39abc9675eff3d0c", "node_id": "C_kwDOAAsO6NoAKDY2MjEyNzlhNzU2OTA5YTU1NjI0YTE5ZjM5YWJjOTY3NWVmZjNkMGM", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-26T21:18:59Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-29T21:04:10Z"}, "message": "Cleanup weak lang items", "tree": {"sha": "c7725e86551f4235dcb3101d400f1374a1404977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7725e86551f4235dcb3101d400f1374a1404977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6621279a756909a55624a19f39abc9675eff3d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6621279a756909a55624a19f39abc9675eff3d0c", "html_url": "https://github.com/rust-lang/rust/commit/6621279a756909a55624a19f39abc9675eff3d0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6621279a756909a55624a19f39abc9675eff3d0c/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e349fb0dd1fdd81e05bbcb8e7d6364d2c4c1f53", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e349fb0dd1fdd81e05bbcb8e7d6364d2c4c1f53", "html_url": "https://github.com/rust-lang/rust/commit/1e349fb0dd1fdd81e05bbcb8e7d6364d2c4c1f53"}], "stats": {"total": 105, "additions": 40, "deletions": 65}, "files": [{"sha": "a92087305b82f45336bd8883fb45934026c7b6a1", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6621279a756909a55624a19f39abc9675eff3d0c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6621279a756909a55624a19f39abc9675eff3d0c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=6621279a756909a55624a19f39abc9675eff3d0c", "patch": "@@ -22,7 +22,6 @@ use rustc_data_structures::sync::ParallelIterator;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::weak_lang_items::WEAK_ITEMS_SYMBOLS;\n use rustc_index::vec::Idx;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n@@ -887,14 +886,14 @@ impl CrateInfo {\n         // by the compiler, but that's ok because all this stuff is unstable anyway.\n         let target = &tcx.sess.target;\n         if !are_upstream_rust_objects_already_included(tcx.sess) {\n-            let missing_weak_lang_items: FxHashSet<&Symbol> = info\n+            let missing_weak_lang_items: FxHashSet<Symbol> = info\n                 .used_crates\n                 .iter()\n-                .flat_map(|cnum| {\n-                    tcx.missing_lang_items(*cnum)\n-                        .iter()\n-                        .filter(|l| lang_items::required(tcx, **l))\n-                        .filter_map(|item| WEAK_ITEMS_SYMBOLS.get(item))\n+                .flat_map(|&cnum| tcx.missing_lang_items(cnum))\n+                .filter(|l| l.is_weak())\n+                .filter_map(|&l| {\n+                    let name = l.link_name()?;\n+                    lang_items::required(tcx, l).then_some(name)\n                 })\n                 .collect();\n             let prefix = if target.is_like_windows && target.arch == \"x86\" { \"_\" } else { \"\" };"}, {"sha": "1c55cd8fee8f922f94a92bc398f291ee68748b0e", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6621279a756909a55624a19f39abc9675eff3d0c/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6621279a756909a55624a19f39abc9675eff3d0c/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=6621279a756909a55624a19f39abc9675eff3d0c", "patch": "@@ -5,7 +5,6 @@\n #![feature(associated_type_defaults)]\n #![feature(closure_track_caller)]\n #![feature(const_btree_len)]\n-#![feature(once_cell)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "d8e5dd4ffdc2ecedf67cf9eaee9626cf74203b12", "filename": "compiler/rustc_hir/src/weak_lang_items.rs", "status": "modified", "additions": 19, "deletions": 41, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6621279a756909a55624a19f39abc9675eff3d0c/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6621279a756909a55624a19f39abc9675eff3d0c/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs?ref=6621279a756909a55624a19f39abc9675eff3d0c", "patch": "@@ -1,53 +1,31 @@\n //! Validity checking for weak lang items\n \n-use crate::def_id::DefId;\n-use crate::{lang_items, LangItem, LanguageItems};\n+use crate::LangItem;\n \n-use rustc_ast as ast;\n-use rustc_data_structures::fx::FxIndexMap;\n use rustc_span::symbol::{sym, Symbol};\n \n-use std::sync::LazyLock;\n-\n macro_rules! weak_lang_items {\n-    ($($name:ident, $item:ident, $sym:ident;)*) => (\n-\n-pub static WEAK_ITEMS_REFS: LazyLock<FxIndexMap<Symbol, LangItem>> = LazyLock::new(|| {\n-    let mut map = FxIndexMap::default();\n-    $(map.insert(sym::$name, LangItem::$item);)*\n-    map\n-});\n-\n-pub static WEAK_ITEMS_SYMBOLS: LazyLock<FxIndexMap<LangItem, Symbol>> = LazyLock::new(|| {\n-    let mut map = FxIndexMap::default();\n-    $(map.insert(LangItem::$item, sym::$sym);)*\n-    map\n-});\n-\n-pub fn link_name(attrs: &[ast::Attribute]) -> Option<Symbol>\n-{\n-    lang_items::extract(attrs).and_then(|(name, _)| {\n-        $(if name == sym::$name {\n-            Some(sym::$sym)\n-        } else)* {\n-            None\n+    ($($item:ident, $sym:ident;)*) => {\n+        pub static WEAK_LANG_ITEMS: &[LangItem] = &[$(LangItem::$item,)*];\n+\n+        impl LangItem {\n+            pub fn is_weak(self) -> bool {\n+                matches!(self, $(LangItem::$item)|*)\n+            }\n+\n+            pub fn link_name(self) -> Option<Symbol> {\n+                match self {\n+                    $( LangItem::$item => Some(sym::$sym),)*\n+                    _ => None,\n+                }\n+            }\n         }\n-    })\n-}\n-\n-impl LanguageItems {\n-    pub fn is_weak_lang_item(&self, item_def_id: DefId) -> bool {\n-        let did = Some(item_def_id);\n-\n-        $(self.$name() == did)||*\n     }\n }\n \n-) }\n-\n weak_lang_items! {\n-    panic_impl,         PanicImpl,          rust_begin_unwind;\n-    eh_personality,     EhPersonality,      rust_eh_personality;\n-    eh_catch_typeinfo,  EhCatchTypeinfo,    rust_eh_catch_typeinfo;\n-    oom,                Oom,                rust_oom;\n+    PanicImpl,          rust_begin_unwind;\n+    EhPersonality,      rust_eh_personality;\n+    EhCatchTypeinfo,    rust_eh_catch_typeinfo;\n+    Oom,                rust_oom;\n }"}, {"sha": "65a1d61e87c1c6d073eed419e2263ea0f840129d", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6621279a756909a55624a19f39abc9675eff3d0c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6621279a756909a55624a19f39abc9675eff3d0c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=6621279a756909a55624a19f39abc9675eff3d0c", "patch": "@@ -27,8 +27,8 @@ use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::weak_lang_items;\n-use rustc_hir::{GenericParamKind, Node};\n+use rustc_hir::weak_lang_items::WEAK_LANG_ITEMS;\n+use rustc_hir::{lang_items, GenericParamKind, LangItem, Node};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n@@ -2104,12 +2104,15 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n     // strippable by the linker.\n     //\n     // Additionally weak lang items have predetermined symbol names.\n-    if tcx.is_weak_lang_item(did.to_def_id()) {\n+    if WEAK_LANG_ITEMS.iter().any(|&l| tcx.lang_items().get(l) == Some(did.to_def_id())) {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n     }\n-    if let Some(name) = weak_lang_items::link_name(attrs) {\n-        codegen_fn_attrs.export_name = Some(name);\n-        codegen_fn_attrs.link_name = Some(name);\n+    if let Some((name, _)) = lang_items::extract(attrs)\n+        && let Some(lang_item) = LangItem::from_name(name)\n+        && let Some(link_name) = lang_item.link_name()\n+    {\n+        codegen_fn_attrs.export_name = Some(link_name);\n+        codegen_fn_attrs.link_name = Some(link_name);\n     }\n     check_link_name_xor_ordinal(tcx, &codegen_fn_attrs, link_ordinal_span);\n "}, {"sha": "dd4332d0db6d2132b0ccda20cf4bc83f5469db4d", "filename": "compiler/rustc_middle/src/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6621279a756909a55624a19f39abc9675eff3d0c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6621279a756909a55624a19f39abc9675eff3d0c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs?ref=6621279a756909a55624a19f39abc9675eff3d0c", "patch": "@@ -36,10 +36,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             _ => None,\n         }\n     }\n-\n-    pub fn is_weak_lang_item(self, item_def_id: DefId) -> bool {\n-        self.lang_items().is_weak_lang_item(item_def_id)\n-    }\n }\n \n /// Returns `true` if the specified `lang_item` must be present for this"}, {"sha": "94d6a405b530e557d24abdbdb23ba844da1d12f8", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6621279a756909a55624a19f39abc9675eff3d0c/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6621279a756909a55624a19f39abc9675eff3d0c/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=6621279a756909a55624a19f39abc9675eff3d0c", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::lang_items::{self, LangItem};\n-use rustc_hir::weak_lang_items::WEAK_ITEMS_REFS;\n+use rustc_hir::weak_lang_items::WEAK_LANG_ITEMS;\n use rustc_middle::middle::lang_items::required;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::CrateType;\n@@ -29,8 +29,8 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>, items: &mut lang_items::LanguageItem\n     for id in crate_items.foreign_items() {\n         let attrs = tcx.hir().attrs(id.hir_id());\n         if let Some((lang_item, _)) = lang_items::extract(attrs) {\n-            if let Some(&item) = WEAK_ITEMS_REFS.get(&lang_item) {\n-                if items.require(item).is_err() {\n+            if let Some(item) = LangItem::from_name(lang_item) && item.is_weak() {\n+                if items.get(item).is_none() {\n                     items.missing.push(item);\n                 }\n             } else {\n@@ -65,8 +65,8 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n         }\n     }\n \n-    for (name, &item) in WEAK_ITEMS_REFS.iter() {\n-        if missing.contains(&item) && required(tcx, item) && items.require(item).is_err() {\n+    for &item in WEAK_LANG_ITEMS.iter() {\n+        if missing.contains(&item) && required(tcx, item) && items.get(item).is_none() {\n             if item == LangItem::PanicImpl {\n                 tcx.sess.emit_err(MissingPanicHandler);\n             } else if item == LangItem::Oom {\n@@ -75,7 +75,7 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n                     tcx.sess.emit_note(MissingAllocErrorHandler);\n                 }\n             } else {\n-                tcx.sess.emit_err(MissingLangItem { name: *name });\n+                tcx.sess.emit_err(MissingLangItem { name: item.name() });\n             }\n         }\n     }"}]}