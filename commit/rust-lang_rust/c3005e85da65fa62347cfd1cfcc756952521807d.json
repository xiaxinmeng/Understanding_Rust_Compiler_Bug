{"sha": "c3005e85da65fa62347cfd1cfcc756952521807d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMDA1ZTg1ZGE2NWZhNjIzNDdjZmQxY2ZjYzc1Njk1MjUyMTgwN2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-23T09:55:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-23T09:55:31Z"}, "message": "avoid redundant immutability check", "tree": {"sha": "f0cf21a6e45e9ebf4aa8d10bd8937c282796e46d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0cf21a6e45e9ebf4aa8d10bd8937c282796e46d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3005e85da65fa62347cfd1cfcc756952521807d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3005e85da65fa62347cfd1cfcc756952521807d", "html_url": "https://github.com/rust-lang/rust/commit/c3005e85da65fa62347cfd1cfcc756952521807d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3005e85da65fa62347cfd1cfcc756952521807d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcba11c353c15f3e8d95d330cb1fa98bacc652d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcba11c353c15f3e8d95d330cb1fa98bacc652d", "html_url": "https://github.com/rust-lang/rust/commit/3bcba11c353c15f3e8d95d330cb1fa98bacc652d"}], "stats": {"total": 3, "additions": 0, "deletions": 3}, "files": [{"sha": "c26fcf8328869b918b674849ca47e4625a5bd7a5", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3005e85da65fa62347cfd1cfcc756952521807d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3005e85da65fa62347cfd1cfcc756952521807d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=c3005e85da65fa62347cfd1cfcc756952521807d", "patch": "@@ -628,9 +628,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             // Need to make a copy, even if `get_global_alloc` is able\n             // to give us a cheap reference.\n             let alloc = Self::get_global_alloc(memory_extra, tcx, id, /*is_write*/ true)?;\n-            if alloc.mutability == Mutability::Not {\n-                throw_ub!(WriteToReadOnly(id))\n-            }\n             let kind = M::GLOBAL_KIND.expect(\n                 \"I got a global allocation that I have to copy but the machine does \\\n                     not expect that to happen\","}]}