{"sha": "16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YzFkMGFlMDY1NmE1YWE5MjlmYjBhOWFiNWMwYzc0MGM5NTBkZWQ=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-02-07T22:49:00Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-04-02T21:37:49Z"}, "message": "Maintain supported sanitizers as a target property\n\nThis commit adds an additional target property \u2013 `supported_sanitizers`,\nand replaces the hardcoded allowlists in argument parsing to use this\nnew property.\n\nFixes #81802", "tree": {"sha": "29b9c6864d1c8d388b1ef270258337de61603cd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29b9c6864d1c8d388b1ef270258337de61603cd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "html_url": "https://github.com/rust-lang/rust/commit/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "html_url": "https://github.com/rust-lang/rust/commit/64af7eae1ea25102c8197f9f190ee65ddc4f8a10"}], "stats": {"total": 115, "additions": 49, "deletions": 66}, "files": [{"sha": "3488efacd1126e99036f0bf6bcfb86dbf1ff0a9e", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 16, "deletions": 53, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "patch": "@@ -1517,59 +1517,22 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         );\n     }\n \n-    const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n-        \"aarch64-apple-darwin\",\n-        \"aarch64-fuchsia\",\n-        \"aarch64-unknown-linux-gnu\",\n-        \"x86_64-apple-darwin\",\n-        \"x86_64-fuchsia\",\n-        \"x86_64-unknown-freebsd\",\n-        \"x86_64-unknown-linux-gnu\",\n-    ];\n-    const LSAN_SUPPORTED_TARGETS: &[&str] = &[\n-        \"aarch64-apple-darwin\",\n-        \"aarch64-unknown-linux-gnu\",\n-        \"x86_64-apple-darwin\",\n-        \"x86_64-unknown-linux-gnu\",\n-    ];\n-    const MSAN_SUPPORTED_TARGETS: &[&str] =\n-        &[\"aarch64-unknown-linux-gnu\", \"x86_64-unknown-freebsd\", \"x86_64-unknown-linux-gnu\"];\n-    const TSAN_SUPPORTED_TARGETS: &[&str] = &[\n-        \"aarch64-apple-darwin\",\n-        \"aarch64-unknown-linux-gnu\",\n-        \"x86_64-apple-darwin\",\n-        \"x86_64-unknown-freebsd\",\n-        \"x86_64-unknown-linux-gnu\",\n-    ];\n-    const HWASAN_SUPPORTED_TARGETS: &[&str] =\n-        &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n-\n-    // Sanitizers can only be used on some tested platforms.\n-    for s in sess.opts.debugging_opts.sanitizer {\n-        let supported_targets = match s {\n-            SanitizerSet::ADDRESS => ASAN_SUPPORTED_TARGETS,\n-            SanitizerSet::LEAK => LSAN_SUPPORTED_TARGETS,\n-            SanitizerSet::MEMORY => MSAN_SUPPORTED_TARGETS,\n-            SanitizerSet::THREAD => TSAN_SUPPORTED_TARGETS,\n-            SanitizerSet::HWADDRESS => HWASAN_SUPPORTED_TARGETS,\n-            _ => panic!(\"unrecognized sanitizer {}\", s),\n-        };\n-        if !supported_targets.contains(&&*sess.opts.target_triple.triple()) {\n-            sess.err(&format!(\n-                \"`-Zsanitizer={}` only works with targets: {}\",\n-                s,\n-                supported_targets.join(\", \")\n-            ));\n-        }\n-        let conflicting = sess.opts.debugging_opts.sanitizer - s;\n-        if !conflicting.is_empty() {\n-            sess.err(&format!(\n-                \"`-Zsanitizer={}` is incompatible with `-Zsanitizer={}`\",\n-                s, conflicting,\n-            ));\n-            // Don't report additional errors.\n-            break;\n-        }\n+    // Sanitizers can only be used on platforms that we know have working sanitizer codegen.\n+    let supported_sanitizers = sess.target.options.supported_sanitizers;\n+    let unsupported_sanitizers = sess.opts.debugging_opts.sanitizer - supported_sanitizers;\n+    match unsupported_sanitizers.into_iter().count() {\n+        0 => {}\n+        1 => sess\n+            .err(&format!(\"{} sanitizer is not supported for this target\", unsupported_sanitizers)),\n+        _ => sess.err(&format!(\n+            \"{} sanitizers are not supported for this target\",\n+            unsupported_sanitizers\n+        )),\n+    }\n+    // Cannot mix and match sanitizers.\n+    let mut sanitizer_iter = sess.opts.debugging_opts.sanitizer.into_iter();\n+    if let (Some(first), Some(second)) = (sanitizer_iter.next(), sanitizer_iter.next()) {\n+        sess.err(&format!(\"`-Zsanitizer={}` is incompatible with `-Zsanitizer={}`\", first, second));\n     }\n }\n "}, {"sha": "feadd4e891cec706e0123c5407ddf89484d117ac", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "patch": "@@ -1,11 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n     base.cpu = \"apple-a12\".to_string();\n     base.max_atomic_width = Some(128);\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), \"arm64\".to_string()]);\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::THREAD;\n \n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), \"arm64\".to_string()]);\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n \n     // Clang automatically chooses a more specific target based on"}, {"sha": "c9cb21f1eb1e9bf891250da0ce39ac50b523c7bc", "filename": "compiler/rustc_target/src/spec/aarch64_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs?ref=16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "patch": "@@ -1,8 +1,9 @@\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::fuchsia_base::opts();\n     base.max_atomic_width = Some(128);\n+    base.supported_sanitizers = SanitizerSet::ADDRESS;\n \n     Target {\n         llvm_target: \"aarch64-fuchsia\".to_string(),"}, {"sha": "eaf3a2dbcf8c2cbc5d02baf99e2bc5af9ddad28a", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n // See https://developer.android.com/ndk/guides/abis.html#arm64-v8a\n // for target ABI requirements.\n@@ -9,6 +9,7 @@ pub fn target() -> Target {\n     // As documented in http://developer.android.com/ndk/guides/cpu-features.html\n     // the neon (ASIMD) and FP must exist on all android aarch64 targets.\n     base.features = \"+neon,+fp-armv8\".to_string();\n+    base.supported_sanitizers = SanitizerSet::HWADDRESS;\n     Target {\n         llvm_target: \"aarch64-linux-android\".to_string(),\n         pointer_width: 64,"}, {"sha": "a07cd7db8897d190347fdb41c487cb3d27224ead", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "patch": "@@ -1,8 +1,13 @@\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.max_atomic_width = Some(128);\n+    base.supported_sanitizers = SanitizerSet::ADDRESS\n+        | SanitizerSet::LEAK\n+        | SanitizerSet::MEMORY\n+        | SanitizerSet::THREAD\n+        | SanitizerSet::HWADDRESS;\n \n     Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),"}, {"sha": "390e5332c0051c1f39a738a586ce433236572c56", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "patch": "@@ -614,7 +614,7 @@ impl fmt::Display for SanitizerSet {\n                 _ => panic!(\"unrecognized sanitizer {:?}\", s),\n             };\n             if !first {\n-                f.write_str(\",\")?;\n+                f.write_str(\", \")?;\n             }\n             f.write_str(name)?;\n             first = false;\n@@ -1219,6 +1219,13 @@ pub struct TargetOptions {\n     /// How to handle split debug information, if at all. Specifying `None` has\n     /// target-specific meaning.\n     pub split_debuginfo: SplitDebuginfo,\n+\n+    /// The sanitizers supported by this target\n+    ///\n+    /// Note that the support here is at a codegen level. If the machine code with sanitizer\n+    /// enabled can generated on this target, but the necessary supporting libraries are not\n+    /// distributed with the target, the sanitizer should still appear in this list for the target.\n+    pub supported_sanitizers: SanitizerSet,\n }\n \n impl Default for TargetOptions {\n@@ -1320,6 +1327,7 @@ impl Default for TargetOptions {\n             eh_frame_header: true,\n             has_thumb_interworking: false,\n             split_debuginfo: SplitDebuginfo::Off,\n+            supported_sanitizers: SanitizerSet::empty(),\n         }\n     }\n }"}, {"sha": "c82359223da609d7ab9560e3fe92e5f3429021cf", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n@@ -11,6 +11,7 @@ pub fn target() -> Target {\n     );\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::THREAD;\n \n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work"}, {"sha": "99acc7c207bc280c960fd21f16f504a2799436c2", "filename": "compiler/rustc_target/src/spec/x86_64_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs?ref=16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "patch": "@@ -1,10 +1,11 @@\n-use crate::spec::{StackProbeType, Target};\n+use crate::spec::{SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::fuchsia_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    base.supported_sanitizers = SanitizerSet::ADDRESS;\n \n     Target {\n         llvm_target: \"x86_64-fuchsia\".to_string(),"}, {"sha": "ca3556fc48e502d348693e2e59d40c5398898fd4", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "patch": "@@ -1,11 +1,12 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n \n     Target {\n         llvm_target: \"x86_64-unknown-freebsd\".to_string(),"}, {"sha": "9569e98ed59a87c96e38f665e39fbefe00d2d9c8", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "patch": "@@ -1,11 +1,13 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    base.supported_sanitizers =\n+        SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n \n     Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),"}, {"sha": "3fb749815f7c3ba4af3348cd8480887cefb47c14", "filename": "src/test/ui/sanitize/unsupported-target.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs?ref=16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -Z sanitizer=leak --target i686-unknown-linux-gnu\n-// error-pattern: error: `-Zsanitizer=leak` only works with targets:\n-\n+// error-pattern: error: leak sanitizer is not supported for this target\n #![feature(no_core)]\n #![no_core]\n #![no_main]"}, {"sha": "9bb8405020d730c4f320a0dd59173bc6c9a160e5", "filename": "src/test/ui/sanitize/unsupported-target.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr?ref=16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "patch": "@@ -1,4 +1,4 @@\n-error: `-Zsanitizer=leak` only works with targets: aarch64-apple-darwin, aarch64-unknown-linux-gnu, x86_64-apple-darwin, x86_64-unknown-linux-gnu\n+error: leak sanitizer is not supported for this target\n \n error: aborting due to previous error\n "}]}