{"sha": "faa7d4221be02551d475e5b359a1317401bcfd0d", "node_id": "C_kwDOAAsO6NoAKGZhYTdkNDIyMWJlMDI1NTFkNDc1ZTViMzU5YTEzMTc0MDFiY2ZkMGQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-12T09:58:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-30T15:39:54Z"}, "message": "Do not pass hir::Crate to lints.", "tree": {"sha": "2cd3d655108dde98d3f732875d62f005e2eec6a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cd3d655108dde98d3f732875d62f005e2eec6a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faa7d4221be02551d475e5b359a1317401bcfd0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faa7d4221be02551d475e5b359a1317401bcfd0d", "html_url": "https://github.com/rust-lang/rust/commit/faa7d4221be02551d475e5b359a1317401bcfd0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faa7d4221be02551d475e5b359a1317401bcfd0d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abc57f63ad98436f8a97c710f357e1e45088effc", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc57f63ad98436f8a97c710f357e1e45088effc", "html_url": "https://github.com/rust-lang/rust/commit/abc57f63ad98436f8a97c710f357e1e45088effc"}], "stats": {"total": 65, "additions": 32, "deletions": 33}, "files": [{"sha": "4513c8329cab7936505b71626e5295b4536e5f76", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -584,7 +584,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n     }\n \n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &hir::Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         self.check_missing_docs_attrs(\n             cx,\n             CRATE_DEF_ID,"}, {"sha": "773e5751f13706f768075eda261ea922224f4ee5", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -430,8 +430,6 @@ pub fn late_lint_mod<'tcx, T: LateLintPass<'tcx>>(\n fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T) {\n     let access_levels = &tcx.privacy_access_levels(());\n \n-    let krate = tcx.hir().krate();\n-\n     let context = LateContext {\n         tcx,\n         enclosing_body: None,\n@@ -450,10 +448,10 @@ fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T)\n     cx.with_lint_attrs(hir::CRATE_HIR_ID, |cx| {\n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n-        lint_callback!(cx, check_crate, krate);\n+        lint_callback!(cx, check_crate,);\n         tcx.hir().walk_toplevel_module(cx);\n         tcx.hir().walk_attributes(cx);\n-        lint_callback!(cx, check_crate_post, krate);\n+        lint_callback!(cx, check_crate_post,);\n     })\n }\n "}, {"sha": "b1b4229b1f73864d8ffbdfe3c3017e0ab060e13b", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -16,8 +16,8 @@ macro_rules! late_lint_methods {\n             fn check_body(a: &$hir hir::Body<$hir>);\n             fn check_body_post(a: &$hir hir::Body<$hir>);\n             fn check_name(a: Span, b: Symbol);\n-            fn check_crate(a: &$hir hir::Crate<$hir>);\n-            fn check_crate_post(a: &$hir hir::Crate<$hir>);\n+            fn check_crate();\n+            fn check_crate_post();\n             fn check_mod(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n             fn check_mod_post(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n             fn check_foreign_item(a: &$hir hir::ForeignItem<$hir>);"}, {"sha": "3989a94a47c2ea66d4fbaea6b9e95b038d34fae3", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -164,7 +164,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    crate fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {\n+    pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {\n         let krate = self.krate();\n         krate.owners.iter().filter_map(|owner| match owner.as_ref()? {\n             OwnerNode::Item(item) => Some(*item),"}, {"sha": "ff619c59b6e2412da3d5ef45ddacb137848bebe6", "filename": "src/tools/clippy/clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -1,7 +1,7 @@\n //! lint on missing cargo common metadata\n \n use clippy_utils::{diagnostics::span_lint, is_lint_allowed};\n-use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n+use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::DUMMY_SP;\n@@ -77,7 +77,7 @@ fn is_empty_vec(value: &[String]) -> bool {\n }\n \n impl LateLintPass<'_> for CargoCommonMetadata {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         if is_lint_allowed(cx, CARGO_COMMON_METADATA, CRATE_HIR_ID) {\n             return;\n         }"}, {"sha": "22d726cdcb7b6cda63ecf67592aaec7afef19e22", "filename": "src/tools/clippy/clippy_lints/src/disallowed_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_method.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::fn_def_id;\n \n-use rustc_hir::{def::Res, def_id::DefIdMap, Crate, Expr};\n+use rustc_hir::{def::Res, def_id::DefIdMap, Expr};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n@@ -70,7 +70,7 @@ impl DisallowedMethod {\n impl_lint_pass!(DisallowedMethod => [DISALLOWED_METHOD]);\n \n impl<'tcx> LateLintPass<'tcx> for DisallowedMethod {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         for conf in &self.conf_disallowed {\n             let (path, reason) = match conf {\n                 conf::DisallowedMethod::Simple(path) => (path, None),"}, {"sha": "87124f093a86dbf7c327581296397e5d0e58a55d", "filename": "src/tools/clippy/clippy_lints/src/disallowed_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_type.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::{\n-    def::Res, def_id::DefId, Crate, Item, ItemKind, PolyTraitRef, PrimTy, TraitBoundModifier, Ty, TyKind, UseKind,\n+    def::Res, def_id::DefId, Item, ItemKind, PolyTraitRef, PrimTy, TraitBoundModifier, Ty, TyKind, UseKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -75,7 +75,7 @@ impl DisallowedType {\n impl_lint_pass!(DisallowedType => [DISALLOWED_TYPE]);\n \n impl<'tcx> LateLintPass<'tcx> for DisallowedType {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         for path in &self.disallowed {\n             let segs = path.iter().map(ToString::to_string).collect::<Vec<_>>();\n             match clippy_utils::path_to_res(cx, &segs.iter().map(String::as_str).collect::<Vec<_>>()) {"}, {"sha": "84f3b76a3c7d5f88d8fde224691507fdcc606cc8", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -212,7 +212,7 @@ impl_lint_pass!(DocMarkdown =>\n );\n \n impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n-    fn check_crate(&mut self, cx: &LateContext<'tcx>, _: &'tcx hir::Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'tcx>) {\n         let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n         check_attrs(cx, &self.valid_idents, attrs);\n     }"}, {"sha": "f534327f7a0cda0bccafcbdca12c0205e5625956", "filename": "src/tools/clippy/clippy_lints/src/feature_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffeature_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffeature_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffeature_name.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::{diagnostics::span_lint, is_lint_allowed};\n-use rustc_hir::{Crate, CRATE_HIR_ID};\n+use rustc_hir::CRATE_HIR_ID;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::DUMMY_SP;\n@@ -110,7 +110,7 @@ fn lint(cx: &LateContext<'_>, feature: &str, substring: &str, is_prefix: bool) {\n }\n \n impl LateLintPass<'_> for FeatureName {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         if is_lint_allowed(cx, REDUNDANT_FEATURE_NAMES, CRATE_HIR_ID)\n             && is_lint_allowed(cx, NEGATIVE_FEATURE_NAMES, CRATE_HIR_ID)\n         {"}, {"sha": "0d23bec27a3a753e7789ecde2e20db8f068a13d9", "filename": "src/tools/clippy/clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -3,7 +3,7 @@\n use clippy_utils::diagnostics::span_lint_and_note;\n use clippy_utils::{in_macro, is_lint_allowed};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::{def_id::LocalDefId, Crate, Item, ItemKind, Node};\n+use rustc_hir::{def_id::LocalDefId, Item, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n@@ -44,7 +44,7 @@ declare_clippy_lint! {\n declare_lint_pass!(MultipleInherentImpl => [MULTIPLE_INHERENT_IMPL]);\n \n impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n-    fn check_crate_post(&mut self, cx: &LateContext<'tcx>, _: &'tcx Crate<'_>) {\n+    fn check_crate_post(&mut self, cx: &LateContext<'tcx>) {\n         // Map from a type to it's first impl block. Needed to distinguish generic arguments.\n         // e.g. `Foo<Bar>` and `Foo<Baz>`\n         let mut type_map = FxHashMap::default();"}, {"sha": "c38162743a3ea654311f802ccd62ab9b48ed8159", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -135,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         }\n     }\n     #[allow(clippy::too_many_lines)]\n-    fn check_crate_post(&mut self, cx: &LateContext<'_>, _krate: &hir::Crate<'_>) {\n+    fn check_crate_post(&mut self, cx: &LateContext<'_>) {\n         let mut used = FxHashMap::default();\n         let mut check_dup = vec![];\n         for (import, span) in &self.imports {"}, {"sha": "23b3ba2296eaf1dedd01840553c754c9fe554c03", "filename": "src/tools/clippy/clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmain_recursion.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::source::snippet;\n use clippy_utils::{is_entrypoint_fn, is_no_std_crate};\n use if_chain::if_chain;\n-use rustc_hir::{Crate, Expr, ExprKind, QPath};\n+use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n@@ -33,7 +33,7 @@ pub struct MainRecursion {\n impl_lint_pass!(MainRecursion => [MAIN_RECURSION]);\n \n impl LateLintPass<'_> for MainRecursion {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         self.has_no_std_attr = is_no_std_crate(cx);\n     }\n "}, {"sha": "564f021268cc8c02eb9da57bf233e922ea6a137a", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -12,6 +12,7 @@ use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n@@ -102,9 +103,9 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n     }\n \n-    fn check_crate(&mut self, cx: &LateContext<'tcx>, _: &'tcx hir::Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'tcx>) {\n         let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n-        self.check_missing_docs_attrs(cx, attrs, cx.tcx.hir().root_module().inner, \"the\", \"crate\");\n+        self.check_missing_docs_attrs(cx, attrs, cx.tcx.def_span(CRATE_DEF_ID), \"the\", \"crate\");\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx hir::Item<'_>) {"}, {"sha": "448bfc2fdd67c98f33fe60ca83399dfa35b79505", "filename": "src/tools/clippy/clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::{diagnostics::span_lint_and_sugg, source::snippet_opt};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n-use rustc_hir::{def::Res, def_id::DefId, Crate, Item, ItemKind, UseKind};\n+use rustc_hir::{def::Res, def_id::DefId, Item, ItemKind, UseKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Symbol;\n@@ -55,7 +55,7 @@ impl ImportRename {\n impl_lint_pass!(ImportRename => [MISSING_ENFORCED_IMPORT_RENAMES]);\n \n impl LateLintPass<'_> for ImportRename {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         for Rename { path, rename } in &self.conf_renames {\n             if let Res::Def(_, id) = clippy_utils::path_to_res(cx, &path.split(\"::\").collect::<Vec<_>>()) {\n                 self.renames.insert(id, Symbol::intern(rename));"}, {"sha": "816b2f275fb5e17fb7a701d8867b7bb1f6ab2f32", "filename": "src/tools/clippy/clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -3,7 +3,7 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::is_lint_allowed;\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_hir::{Crate, CRATE_HIR_ID};\n+use rustc_hir::CRATE_HIR_ID;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::DUMMY_SP;\n@@ -41,7 +41,7 @@ declare_clippy_lint! {\n declare_lint_pass!(MultipleCrateVersions => [MULTIPLE_CRATE_VERSIONS]);\n \n impl LateLintPass<'_> for MultipleCrateVersions {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         if is_lint_allowed(cx, MULTIPLE_CRATE_VERSIONS, CRATE_HIR_ID) {\n             return;\n         }"}, {"sha": "737ff634e449c4ff4406667e8f4d9e2afd4a6262", "filename": "src/tools/clippy/clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsame_name_method.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{Crate, Impl, ItemKind, Node, Path, QPath, TraitRef, TyKind};\n+use rustc_hir::{Impl, ItemKind, Node, Path, QPath, TraitRef, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::AssocKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -46,10 +46,10 @@ struct ExistingName {\n }\n \n impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n-    fn check_crate_post(&mut self, cx: &LateContext<'tcx>, krate: &'tcx Crate<'tcx>) {\n+    fn check_crate_post(&mut self, cx: &LateContext<'tcx>) {\n         let mut map = FxHashMap::<Res, ExistingName>::default();\n \n-        for item in krate.items() {\n+        for item in cx.tcx.hir().items() {\n             if let ItemKind::Impl(Impl {\n                 items,\n                 of_trait,"}, {"sha": "d0c98b6bd798a5a368ef7b1fcb2427bf044c44f5", "filename": "src/tools/clippy/clippy_lints/src/wildcard_dependencies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa7d4221be02551d475e5b359a1317401bcfd0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=faa7d4221be02551d475e5b359a1317401bcfd0d", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::{diagnostics::span_lint, is_lint_allowed};\n-use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n+use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::DUMMY_SP;\n@@ -28,7 +28,7 @@ declare_clippy_lint! {\n declare_lint_pass!(WildcardDependencies => [WILDCARD_DEPENDENCIES]);\n \n impl LateLintPass<'_> for WildcardDependencies {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         if is_lint_allowed(cx, WILDCARD_DEPENDENCIES, CRATE_HIR_ID) {\n             return;\n         }"}]}