{"sha": "7af29abbc1c2531d4172a9c69f250007c2ff1037", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZjI5YWJiYzFjMjUzMWQ0MTcyYTljNjlmMjUwMDA3YzJmZjEwMzc=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-10T21:16:06Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-10T21:22:15Z"}, "message": "log-color: Detect TTY based on stderr, not stdout\n\nLogging goes to stderr, not stdout, so we should base our automated\ndetection on stderr instead of stdout.\n\nThanks to Ralf Jung for noticing and reporting the bug!", "tree": {"sha": "1415a678bba403823bfdc9f2e2c7bf91e23b08d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1415a678bba403823bfdc9f2e2c7bf91e23b08d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7af29abbc1c2531d4172a9c69f250007c2ff1037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7af29abbc1c2531d4172a9c69f250007c2ff1037", "html_url": "https://github.com/rust-lang/rust/commit/7af29abbc1c2531d4172a9c69f250007c2ff1037", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7af29abbc1c2531d4172a9c69f250007c2ff1037/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f30733adb9150a9b965a6af1650d5213bec8ddf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f30733adb9150a9b965a6af1650d5213bec8ddf6", "html_url": "https://github.com/rust-lang/rust/commit/f30733adb9150a9b965a6af1650d5213bec8ddf6"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "c2a0d8ef7ea119434c6b473276ffbe7323245a08", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7af29abbc1c2531d4172a9c69f250007c2ff1037/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af29abbc1c2531d4172a9c69f250007c2ff1037/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=7af29abbc1c2531d4172a9c69f250007c2ff1037", "patch": "@@ -566,6 +566,25 @@ fn stdout_isatty() -> bool {\n     }\n }\n \n+// FIXME remove these and use winapi 0.3 instead\n+#[cfg(unix)]\n+fn stderr_isatty() -> bool {\n+    unsafe { libc::isatty(libc::STDERR_FILENO) != 0 }\n+}\n+\n+#[cfg(windows)]\n+fn stderr_isatty() -> bool {\n+    use winapi::um::consoleapi::GetConsoleMode;\n+    use winapi::um::processenv::GetStdHandle;\n+    use winapi::um::winbase::STD_ERROR_HANDLE;\n+\n+    unsafe {\n+        let handle = GetStdHandle(STD_ERROR_HANDLE);\n+        let mut out = 0;\n+        GetConsoleMode(handle, &mut out) != 0\n+    }\n+}\n+\n fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     let normalised =\n         if code.starts_with('E') { code.to_string() } else { format!(\"E{0:0>4}\", code) };\n@@ -1290,7 +1309,7 @@ pub fn init_env_logger(env: &str) {\n         Ok(value) => match value.as_ref() {\n             \"always\" => true,\n             \"never\" => false,\n-            \"auto\" => stdout_isatty(),\n+            \"auto\" => stderr_isatty(),\n             _ => early_error(\n                 ErrorOutputType::default(),\n                 &format!(\n@@ -1299,7 +1318,7 @@ pub fn init_env_logger(env: &str) {\n                 ),\n             ),\n         },\n-        Err(std::env::VarError::NotPresent) => stdout_isatty(),\n+        Err(std::env::VarError::NotPresent) => stderr_isatty(),\n         Err(std::env::VarError::NotUnicode(_value)) => early_error(\n             ErrorOutputType::default(),\n             \"non-Unicode log color value: expected one of always, never, or auto\","}]}