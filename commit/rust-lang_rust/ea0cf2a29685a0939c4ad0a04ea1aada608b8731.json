{"sha": "ea0cf2a29685a0939c4ad0a04ea1aada608b8731", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMGNmMmEyOTY4NWEwOTM5YzRhZDBhMDRlYTFhYWRhNjA4Yjg3MzE=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-13T09:31:09Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-13T09:34:51Z"}, "message": "update script: also generate lint list in lib.rs", "tree": {"sha": "f6ba3ec5c23139db3efcdc3384c9b93a3245c272", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6ba3ec5c23139db3efcdc3384c9b93a3245c272"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea0cf2a29685a0939c4ad0a04ea1aada608b8731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0cf2a29685a0939c4ad0a04ea1aada608b8731", "html_url": "https://github.com/rust-lang/rust/commit/ea0cf2a29685a0939c4ad0a04ea1aada608b8731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea0cf2a29685a0939c4ad0a04ea1aada608b8731/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "html_url": "https://github.com/rust-lang/rust/commit/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab"}], "stats": {"total": 261, "additions": 146, "deletions": 115}, "files": [{"sha": "9fc5def88c4f671f714d92dadc30daf9a27bcd2a", "filename": "src/lib.rs", "status": "modified", "additions": 36, "deletions": 35, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ea0cf2a29685a0939c4ad0a04ea1aada608b8731/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0cf2a29685a0939c4ad0a04ea1aada608b8731/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ea0cf2a29685a0939c4ad0a04ea1aada608b8731", "patch": "@@ -64,39 +64,40 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box loops::LoopsPass as LintPassObject);\n     reg.register_lint_pass(box lifetimes::LifetimePass as LintPassObject);\n \n-    reg.register_lint_group(\"clippy\", vec![types::BOX_VEC,\n-                                           types::LINKEDLIST,\n-                                           types::LET_UNIT_VALUE,\n-                                           misc::SINGLE_MATCH,\n-                                           misc::TOPLEVEL_REF_ARG,\n-                                           misc::CMP_NAN,\n-                                           misc::FLOAT_CMP,\n-                                           misc::PRECEDENCE,\n-                                           misc::CMP_OWNED,\n-                                           eq_op::EQ_OP,\n-                                           bit_mask::BAD_BIT_MASK,\n-                                           bit_mask::INEFFECTIVE_BIT_MASK,\n-                                           ptr_arg::PTR_ARG,\n-                                           needless_bool::NEEDLESS_BOOL,\n-                                           approx_const::APPROX_CONSTANT,\n-                                           eta_reduction::REDUNDANT_CLOSURE,\n-                                           identity_op::IDENTITY_OP,\n-                                           mut_mut::MUT_MUT,\n-                                           len_zero::LEN_ZERO,\n-                                           len_zero::LEN_WITHOUT_IS_EMPTY,\n-                                           attrs::INLINE_ALWAYS,\n-                                           collapsible_if::COLLAPSIBLE_IF,\n-                                           unicode::ZERO_WIDTH_SPACE,\n-                                           unicode::NON_ASCII_LITERAL,\n-                                           strings::STRING_ADD_ASSIGN,\n-                                           returns::NEEDLESS_RETURN,\n-                                           returns::LET_AND_RETURN,\n-                                           misc::MODULO_ONE,\n-                                           methods::OPTION_UNWRAP_USED,\n-                                           methods::RESULT_UNWRAP_USED,\n-                                           methods::STR_TO_STRING,\n-                                           methods::STRING_TO_STRING,\n-                                           lifetimes::NEEDLESS_LIFETIMES,\n-                                           loops::NEEDLESS_RANGE_LOOP,\n-                                           ]);\n+    reg.register_lint_group(\"clippy\", vec![\n+        approx_const::APPROX_CONSTANT,\n+        attrs::INLINE_ALWAYS,\n+        bit_mask::BAD_BIT_MASK,\n+        bit_mask::INEFFECTIVE_BIT_MASK,\n+        collapsible_if::COLLAPSIBLE_IF,\n+        eq_op::EQ_OP,\n+        eta_reduction::REDUNDANT_CLOSURE,\n+        identity_op::IDENTITY_OP,\n+        len_zero::LEN_WITHOUT_IS_EMPTY,\n+        len_zero::LEN_ZERO,\n+        lifetimes::NEEDLESS_LIFETIMES,\n+        loops::NEEDLESS_RANGE_LOOP,\n+        methods::OPTION_UNWRAP_USED,\n+        methods::RESULT_UNWRAP_USED,\n+        methods::STR_TO_STRING,\n+        methods::STRING_TO_STRING,\n+        misc::CMP_NAN,\n+        misc::CMP_OWNED,\n+        misc::FLOAT_CMP,\n+        misc::MODULO_ONE,\n+        misc::PRECEDENCE,\n+        misc::SINGLE_MATCH,\n+        misc::TOPLEVEL_REF_ARG,\n+        mut_mut::MUT_MUT,\n+        needless_bool::NEEDLESS_BOOL,\n+        ptr_arg::PTR_ARG,\n+        returns::LET_AND_RETURN,\n+        returns::NEEDLESS_RETURN,\n+        strings::STRING_ADD_ASSIGN,\n+        types::BOX_VEC,\n+        types::LET_UNIT_VALUE,\n+        types::LINKEDLIST,\n+        unicode::NON_ASCII_LITERAL,\n+        unicode::ZERO_WIDTH_SPACE,\n+    ]);\n }"}, {"sha": "c2a9e08c993e0854f1cde1117db209ae51abc538", "filename": "util/update_lints.py", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/ea0cf2a29685a0939c4ad0a04ea1aada608b8731/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/ea0cf2a29685a0939c4ad0a04ea1aada608b8731/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=ea0cf2a29685a0939c4ad0a04ea1aada608b8731", "patch": "@@ -0,0 +1,110 @@\n+# Generate a Markdown table of all lints, and put it in README.md.\n+# With -n option, only print the new table to stdout.\n+\n+import os\n+import re\n+import sys\n+\n+declare_lint_re = re.compile(r'''\n+    declare_lint! \\s* [{(] \\s*\n+    pub \\s+ (?P<name>[A-Z_]+) \\s*,\\s*\n+    (?P<level>Forbid|Deny|Warn|Allow) \\s*,\\s*\n+    \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n+''', re.X | re.S)\n+\n+nl_escape_re = re.compile(r'\\\\\\n\\s*')\n+\n+\n+def collect(lints, fn):\n+    \"\"\"Collect all lints from a file.\n+\n+    Adds entries to the lints list as `(module, name, level, desc)`.\n+    \"\"\"\n+    with open(fn) as fp:\n+        code = fp.read()\n+    for match in declare_lint_re.finditer(code):\n+        # remove \\-newline escapes from description string\n+        desc = nl_escape_re.sub('', match.group('desc'))\n+        lints.append((os.path.splitext(os.path.basename(fn))[0],\n+                      match.group('name').lower(),\n+                      match.group('level').lower(),\n+                      desc.replace('\\\\\"', '\"')))\n+\n+\n+def write_tbl(lints, fp):\n+    \"\"\"Write lint table in Markdown format.\"\"\"\n+    # first and third column widths\n+    w_name = max(len(l[1]) for l in lints)\n+    w_desc = max(len(l[3]) for l in lints)\n+    # header and underline\n+    fp.write('%-*s | default | meaning\\n' % (w_name, 'name'))\n+    fp.write('%s-|-%s-|-%s\\n' % ('-' * w_name, '-' * 7, '-' * w_desc))\n+    # one table row per lint\n+    for (_, name, default, meaning) in sorted(lints, key=lambda l: l[1]):\n+        fp.write('%-*s | %-7s | %s\\n' % (w_name, name, default, meaning))\n+\n+\n+def write_group(lints, fp):\n+    \"\"\"Write lint group (list of all lints in the form module::NAME).\"\"\"\n+    for (module, name, _, _) in sorted(lints):\n+        fp.write('        %s::%s,\\n' % (module, name.upper()))\n+\n+\n+def replace_region(fn, region_start, region_end, callback,\n+                   replace_start=True):\n+    \"\"\"Replace a region in a file delimited by two lines matching regexes.\n+\n+    A callback is called to write the new region.  If `replace_start` is true,\n+    the start delimiter line is replaced as well.  The end delimiter line is\n+    never replaced.\n+    \"\"\"\n+    # read current content\n+    with open(fn) as fp:\n+        lines = list(fp)\n+\n+    # replace old region with new region\n+    with open(fn, 'w') as fp:\n+        in_old_region = False\n+        for line in lines:\n+            if in_old_region:\n+                if re.search(region_end, line):\n+                    in_old_region = False\n+                    fp.write(line)\n+            elif re.search(region_start, line):\n+                if not replace_start:\n+                    fp.write(line)\n+                # old region starts here\n+                in_old_region = True\n+                callback(fp)\n+            else:\n+                fp.write(line)\n+\n+\n+def main(print_only=False):\n+    lints = []\n+\n+    # check directory\n+    if not os.path.isfile('src/lib.rs'):\n+        print('Error: call this script from clippy checkout directory!')\n+        return\n+\n+    # collect all lints from source files\n+    for root, dirs, files in os.walk('src'):\n+        for fn in files:\n+            if fn.endswith('.rs'):\n+                collect(lints, os.path.join(root, fn))\n+\n+    if print_only:\n+        write_tbl(lints, sys.stdout)\n+        return\n+\n+    # replace table in README.md\n+    replace_region('README.md', r'^name +\\|', '^$', lambda fp: write_tbl(lints, fp))\n+\n+    # same for \"clippy\" lint collection\n+    replace_region('src/lib.rs', r'reg.register_lint_group\\(\"clippy\"', r'\\]\\);',\n+                   lambda fp: write_group(lints, fp), replace_start=False)\n+\n+\n+if __name__ == '__main__':\n+    main(print_only='-n' in sys.argv)"}, {"sha": "0b54afa83ea91698fb8225eb6f26b8a2c71db416", "filename": "util/update_readme.py", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/util%2Fupdate_readme.py", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/util%2Fupdate_readme.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_readme.py?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -1,80 +0,0 @@\n-# Generate a Markdown table of all lints, and put it in README.md.\n-# With -n option, only print the new table to stdout.\n-\n-import os\n-import re\n-import sys\n-\n-declare_lint_re = re.compile(r'''\n-    declare_lint! \\s* [{(] \\s*\n-    pub \\s+ (?P<name>[A-Z_]+) \\s*,\\s*\n-    (?P<level>Forbid|Deny|Warn|Allow) \\s*,\\s*\n-    \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n-''', re.X | re.S)\n-\n-nl_escape_re = re.compile(r'\\\\\\n\\s*')\n-\n-\n-def collect(lints, fp):\n-    code = fp.read()\n-    for match in declare_lint_re.finditer(code):\n-        # remove \\-newline escapes from description string\n-        desc = nl_escape_re.sub('', match.group('desc'))\n-        lints.append((match.group('name').lower(),\n-                      match.group('level').lower(),\n-                      desc.replace('\\\\\"', '\"')))\n-\n-\n-def write_tbl(lints, fp):\n-    # first and third column widths\n-    w_name = max(len(l[0]) for l in lints)\n-    w_desc = max(len(l[2]) for l in lints)\n-    # header and underline\n-    fp.write('%-*s | default | meaning\\n' % (w_name, 'name'))\n-    fp.write('%s-|-%s-|-%s\\n' % ('-' * w_name, '-' * 7, '-' * w_desc))\n-    # one table row per lint\n-    for (name, default, meaning) in sorted(lints):\n-        fp.write('%-*s | %-7s | %s\\n' % (w_name, name, default, meaning))\n-\n-\n-def main(print_only=False):\n-    lints = []\n-\n-    # check directory\n-    if not os.path.isfile('src/lib.rs'):\n-        print('Error: call this script from clippy checkout directory!')\n-        return\n-\n-    # collect all lints from source files\n-    for root, dirs, files in os.walk('src'):\n-        for fn in files:\n-            if fn.endswith('.rs'):\n-                with open(os.path.join(root, fn)) as fp:\n-                    collect(lints, fp)\n-\n-    if print_only:\n-        write_tbl(lints, sys.stdout)\n-        return\n-\n-    # read current README.md content\n-    with open('README.md') as fp:\n-        lines = list(fp)\n-\n-    # replace old table with new table\n-    with open('README.md', 'w') as fp:\n-        in_old_tbl = False\n-        for line in lines:\n-            if line.replace(' ', '').strip() == 'name|default|meaning':\n-                # old table starts here\n-                write_tbl(lints, fp)\n-                in_old_tbl = True\n-            if in_old_tbl:\n-                # the old table is finished by an empty line\n-                if line.strip():\n-                    continue\n-                in_old_tbl = False\n-            fp.write(line)\n-\n-\n-if __name__ == '__main__':\n-    main(print_only='-n' in sys.argv)"}]}