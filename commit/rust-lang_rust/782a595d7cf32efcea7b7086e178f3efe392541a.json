{"sha": "782a595d7cf32efcea7b7086e178f3efe392541a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MmE1OTVkN2NmMzJlZmNlYTdiNzA4NmUxNzhmM2VmZTM5MjU0MWE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-29T18:19:40Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-30T02:20:33Z"}, "message": "Return a `DiagnosticBuilder` from structured errors\n\nThis ensures that `emit_error` will actually cause compilation to fail.", "tree": {"sha": "a5c82abca5777ea144054d1bfbade2061cfd157f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5c82abca5777ea144054d1bfbade2061cfd157f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/782a595d7cf32efcea7b7086e178f3efe392541a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/782a595d7cf32efcea7b7086e178f3efe392541a", "html_url": "https://github.com/rust-lang/rust/commit/782a595d7cf32efcea7b7086e178f3efe392541a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/782a595d7cf32efcea7b7086e178f3efe392541a/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20e07e7b8e1468f12a88281f6497304eb98d48f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/20e07e7b8e1468f12a88281f6497304eb98d48f1", "html_url": "https://github.com/rust-lang/rust/commit/20e07e7b8e1468f12a88281f6497304eb98d48f1"}], "stats": {"total": 139, "additions": 64, "deletions": 75}, "files": [{"sha": "920c73a08c3ed13c78b177980960fbc5d0f0aaa0", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 64, "deletions": 75, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/782a595d7cf32efcea7b7086e178f3efe392541a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/782a595d7cf32efcea7b7086e178f3efe392541a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=782a595d7cf32efcea7b7086e178f3efe392541a", "patch": "@@ -1,6 +1,6 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n-use rustc_errors::{struct_span_err, Applicability};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_session::config::nightly_options;\n@@ -49,7 +49,9 @@ pub fn non_const<O: NonConstOp>(ccx: &ConstCx<'_, '_>, op: O, span: Span) -> boo\n         return false;\n     }\n \n-    op.emit_error(ccx, span);\n+    let mut err = op.build_error(ccx, span);\n+    assert!(err.is_error());\n+    err.emit();\n     true\n }\n \n@@ -69,7 +71,7 @@ pub trait NonConstOp: std::fmt::Debug {\n         Status::Forbidden\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -94,7 +96,8 @@ pub trait NonConstOp: std::fmt::Debug {\n                       expression! However, you can use it anywhere else.\",\n             );\n         }\n-        err.emit();\n+\n+        err\n     }\n }\n \n@@ -105,8 +108,8 @@ impl NonConstOp for Abort {\n         mcf_status_in_item(ccx)\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        mcf_emit_error(ccx, span, \"abort is not stable in const fn\")\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        mcf_build_error(ccx, span, \"abort is not stable in const fn\")\n     }\n }\n \n@@ -121,42 +124,38 @@ impl NonConstOp for FloatingPointOp {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_floating_point_arithmetic,\n             span,\n             &format!(\"floating point arithmetic is not allowed in {}s\", ccx.const_kind()),\n         )\n-        .emit();\n     }\n }\n \n /// A function call where the callee is a pointer.\n #[derive(Debug)]\n pub struct FnCallIndirect;\n impl NonConstOp for FnCallIndirect {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        let mut err =\n-            ccx.tcx.sess.struct_span_err(span, \"function pointers are not allowed in const fn\");\n-        err.emit();\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        ccx.tcx.sess.struct_span_err(span, \"function pointers are not allowed in const fn\")\n     }\n }\n \n /// A function call where the callee is not marked as `const`.\n #[derive(Debug)]\n pub struct FnCallNonConst(pub DefId);\n impl NonConstOp for FnCallNonConst {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        let mut err = struct_span_err!(\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        struct_span_err!(\n             ccx.tcx.sess,\n             span,\n             E0015,\n             \"calls in {}s are limited to constant functions, \\\n              tuple structs and tuple variants\",\n             ccx.const_kind(),\n-        );\n-        err.emit();\n+        )\n     }\n }\n \n@@ -167,7 +166,7 @@ impl NonConstOp for FnCallNonConst {\n pub struct FnCallUnstable(pub DefId, pub Option<Symbol>);\n \n impl NonConstOp for FnCallUnstable {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let FnCallUnstable(def_id, feature) = *self;\n \n         let mut err = ccx.tcx.sess.struct_span_err(\n@@ -185,7 +184,8 @@ impl NonConstOp for FnCallUnstable {\n                 ));\n             }\n         }\n-        err.emit();\n+\n+        err\n     }\n }\n \n@@ -202,14 +202,13 @@ impl NonConstOp for FnPtrCast {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_fn_ptr_basics,\n             span,\n             &format!(\"function pointer casts are not allowed in {}s\", ccx.const_kind()),\n         )\n-        .emit()\n     }\n }\n \n@@ -220,15 +219,15 @@ impl NonConstOp for Generator {\n         Status::Forbidden\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        ccx.tcx.sess.struct_span_err(span, \"Generators and `async` functions cannot be `const`\").emit();\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        ccx.tcx.sess.struct_span_err(span, \"Generators and `async` functions cannot be `const`\")\n     }\n }\n \n #[derive(Debug)]\n pub struct HeapAllocation;\n impl NonConstOp for HeapAllocation {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -245,7 +244,7 @@ impl NonConstOp for HeapAllocation {\n                  be done at compile time.\",\n             );\n         }\n-        err.emit();\n+        err\n     }\n }\n \n@@ -258,33 +257,32 @@ pub struct LiveDrop {\n     pub dropped_at: Option<Span>,\n }\n impl NonConstOp for LiveDrop {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        let mut diagnostic = struct_span_err!(\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n             E0493,\n             \"destructors cannot be evaluated at compile-time\"\n         );\n-        diagnostic.span_label(span, format!(\"{}s cannot evaluate destructors\", ccx.const_kind()));\n+        err.span_label(span, format!(\"{}s cannot evaluate destructors\", ccx.const_kind()));\n         if let Some(span) = self.dropped_at {\n-            diagnostic.span_label(span, \"value is dropped here\");\n+            err.span_label(span, \"value is dropped here\");\n         }\n-        diagnostic.emit();\n+        err\n     }\n }\n \n #[derive(Debug)]\n pub struct CellBorrow;\n impl NonConstOp for CellBorrow {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         struct_span_err!(\n             ccx.tcx.sess,\n             span,\n             E0492,\n             \"cannot borrow a constant which may contain \\\n             interior mutability, create a static instead\"\n         )\n-        .emit();\n     }\n }\n \n@@ -300,7 +298,7 @@ impl NonConstOp for MutBorrow {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let mut err = if ccx.const_kind() == hir::ConstContext::ConstFn {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n@@ -331,7 +329,7 @@ impl NonConstOp for MutBorrow {\n                       static mut or a global UnsafeCell.\",\n             );\n         }\n-        err.emit();\n+        err\n     }\n }\n \n@@ -348,14 +346,13 @@ impl NonConstOp for MutAddressOf {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_mut_refs,\n             span,\n             &format!(\"`&raw mut` is not allowed in {}s\", ccx.const_kind()),\n         )\n-        .emit();\n     }\n }\n \n@@ -374,21 +371,20 @@ impl NonConstOp for Panic {\n         Status::Unstable(sym::const_panic)\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_panic,\n             span,\n             &format!(\"panicking in {}s is unstable\", ccx.const_kind()),\n         )\n-        .emit();\n     }\n }\n \n #[derive(Debug)]\n pub struct RawPtrComparison;\n impl NonConstOp for RawPtrComparison {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let mut err = ccx\n             .tcx\n             .sess\n@@ -397,7 +393,7 @@ impl NonConstOp for RawPtrComparison {\n             \"see issue #53020 <https://github.com/rust-lang/rust/issues/53020> \\\n             for more information\",\n         );\n-        err.emit();\n+        err\n     }\n }\n \n@@ -408,14 +404,13 @@ impl NonConstOp for RawPtrDeref {\n         Status::Unstable(sym::const_raw_ptr_deref)\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_raw_ptr_deref,\n             span,\n             &format!(\"dereferencing raw pointers in {}s is unstable\", ccx.const_kind(),),\n         )\n-        .emit();\n     }\n }\n \n@@ -426,14 +421,13 @@ impl NonConstOp for RawPtrToIntCast {\n         Status::Unstable(sym::const_raw_ptr_to_usize_cast)\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_raw_ptr_to_usize_cast,\n             span,\n             &format!(\"casting pointers to integers in {}s is unstable\", ccx.const_kind(),),\n         )\n-        .emit();\n     }\n }\n \n@@ -449,7 +443,7 @@ impl NonConstOp for StaticAccess {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -467,23 +461,22 @@ impl NonConstOp for StaticAccess {\n             );\n             err.help(\"To fix this, the value can be extracted to a `const` and then used.\");\n         }\n-        err.emit();\n+        err\n     }\n }\n \n /// An access to a thread-local `static`.\n #[derive(Debug)]\n pub struct ThreadLocalAccess;\n impl NonConstOp for ThreadLocalAccess {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         struct_span_err!(\n             ccx.tcx.sess,\n             span,\n             E0625,\n             \"thread-local statics cannot be \\\n             accessed at compile-time\"\n         )\n-        .emit();\n     }\n }\n \n@@ -498,15 +491,15 @@ impl NonConstOp for Transmute {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        feature_err(\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        let mut err = feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_transmute,\n             span,\n             &format!(\"`transmute` is not allowed in {}s\", ccx.const_kind()),\n-        )\n-        .note(\"`transmute` is only allowed in constants and statics for now\")\n-        .emit();\n+        );\n+        err.note(\"`transmute` is only allowed in constants and statics for now\");\n+        err\n     }\n }\n \n@@ -522,14 +515,13 @@ impl NonConstOp for UnionAccess {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_union,\n             span,\n             \"unions in const fn are unstable\",\n         )\n-        .emit();\n     }\n }\n \n@@ -543,12 +535,12 @@ impl NonConstOp for UnsizingCast {\n         mcf_status_in_item(ccx)\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        mcf_emit_error(\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        mcf_build_error(\n             ccx,\n             span,\n             \"unsizing casts to types besides slices are not allowed in const fn\",\n-        );\n+        )\n     }\n }\n \n@@ -565,14 +557,13 @@ pub mod ty {\n             Status::Unstable(sym::const_mut_refs)\n         }\n \n-        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_mut_refs,\n                 span,\n                 &format!(\"mutable references are not allowed in {}s\", ccx.const_kind()),\n             )\n-            .emit()\n         }\n     }\n \n@@ -589,14 +580,13 @@ pub mod ty {\n             }\n         }\n \n-        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_fn_fn_ptr_basics,\n                 span,\n                 &format!(\"function pointers cannot appear in {}s\", ccx.const_kind()),\n             )\n-            .emit()\n         }\n     }\n \n@@ -607,8 +597,8 @@ pub mod ty {\n             mcf_status_in_item(ccx)\n         }\n \n-        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-            mcf_emit_error(ccx, span, \"`impl Trait` in const fn is unstable\");\n+        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+            mcf_build_error(ccx, span, \"`impl Trait` in const fn is unstable\")\n         }\n     }\n \n@@ -621,12 +611,12 @@ pub mod ty {\n             mcf_status_in_item(ccx)\n         }\n \n-        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-            mcf_emit_error(\n+        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+            mcf_build_error(\n                 ccx,\n                 span,\n                 \"trait bounds other than `Sized` on const fn parameters are unstable\",\n-            );\n+            )\n         }\n     }\n \n@@ -638,14 +628,13 @@ pub mod ty {\n             Status::Unstable(sym::const_trait_bound_opt_out)\n         }\n \n-        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_trait_bound_opt_out,\n                 span,\n                 \"`?const Trait` syntax is unstable\",\n             )\n-            .emit()\n         }\n     }\n }\n@@ -658,12 +647,12 @@ fn mcf_status_in_item(ccx: &ConstCx<'_, '_>) -> Status {\n     }\n }\n \n-fn mcf_emit_error(ccx: &ConstCx<'_, '_>, span: Span, msg: &str) {\n-    struct_span_err!(ccx.tcx.sess, span, E0723, \"{}\", msg)\n-        .note(\n-            \"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> \\\n+fn mcf_build_error(ccx: &ConstCx<'_, 'tcx>, span: Span, msg: &str) -> DiagnosticBuilder<'tcx> {\n+    let mut err = struct_span_err!(ccx.tcx.sess, span, E0723, \"{}\", msg);\n+    err.note(\n+        \"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> \\\n              for more information\",\n-        )\n-        .help(\"add `#![feature(const_fn)]` to the crate attributes to enable\")\n-        .emit();\n+    );\n+    err.help(\"add `#![feature(const_fn)]` to the crate attributes to enable\");\n+    err\n }"}]}