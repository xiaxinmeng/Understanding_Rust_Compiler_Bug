{"sha": "3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ODA2ODRmNWFhY2ViNWY3OWMwMGYwYzBjZTVhOTZkOGVkZDAwZWU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-06-24T20:37:03Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-07-03T00:11:25Z"}, "message": "Update directly tagged enums to visualize the same as niche-layout enums\n\nPreviously, directly tagged enums had a `variant$` field which would\nshow the name of the active variant. We now show the variant using a\n`[variant]` synthetic item just like we do for niche-layout enums.", "tree": {"sha": "4320681597bd9f362bad037ebdd16b60b7886f1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4320681597bd9f362bad037ebdd16b60b7886f1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee", "html_url": "https://github.com/rust-lang/rust/commit/3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "798baebde1fe77e5a660490ec64e727a5d79970d", "url": "https://api.github.com/repos/rust-lang/rust/commits/798baebde1fe77e5a660490ec64e727a5d79970d", "html_url": "https://github.com/rust-lang/rust/commit/798baebde1fe77e5a660490ec64e727a5d79970d"}], "stats": {"total": 156, "additions": 61, "deletions": 95}, "files": [{"sha": "11fca11350d47572ea64c7af1a446ddcdcaf90b5", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 34, "deletions": 89, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee", "patch": "@@ -1,4 +1,3 @@\n-use self::EnumTagInfo::*;\n use self::MemberDescriptionFactory::*;\n use self::RecursiveTypeDescription::*;\n \n@@ -28,7 +27,7 @@ use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ich::NodeIdHashingMode;\n-use rustc_middle::mir::{self, Field, GeneratorLayout};\n+use rustc_middle::mir::{self, GeneratorLayout};\n use rustc_middle::ty::layout::{self, IntegerExt, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::Instance;\n@@ -1188,7 +1187,7 @@ enum MemberDescriptionFactory<'ll, 'tcx> {\n     TupleMDF(TupleMemberDescriptionFactory<'tcx>),\n     EnumMDF(EnumMemberDescriptionFactory<'ll, 'tcx>),\n     UnionMDF(UnionMemberDescriptionFactory<'tcx>),\n-    VariantMDF(VariantMemberDescriptionFactory<'ll, 'tcx>),\n+    VariantMDF(VariantMemberDescriptionFactory<'tcx>),\n }\n \n impl MemberDescriptionFactory<'ll, 'tcx> {\n@@ -1505,14 +1504,8 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 }\n \n                 let variant_info = variant_info_for(index);\n-                let (variant_type_metadata, member_description_factory) = describe_enum_variant(\n-                    cx,\n-                    self.layout,\n-                    variant_info,\n-                    None,\n-                    self_metadata,\n-                    self.span,\n-                );\n+                let (variant_type_metadata, member_description_factory) =\n+                    describe_enum_variant(cx, self.layout, variant_info, self_metadata, self.span);\n \n                 let member_descriptions = member_description_factory.create_member_descriptions(cx);\n \n@@ -1540,28 +1533,38 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 ref variants,\n                 ..\n             } => {\n-                let tag_info = if fallback {\n-                    // For MSVC, we generate a union of structs for each variant with an explicit\n-                    // discriminant field roughly equivalent to the following C:\n+                let fallback_discr_variant = if fallback {\n+                    // For MSVC, we generate a union of structs for each variant and an\n+                    // explicit discriminant field roughly equivalent to the following C:\n                     // ```c\n                     // union enum$<{name}> {\n                     //   struct {variant 0 name} {\n-                    //     tag$ variant$;\n                     //     <variant 0 fields>\n                     //   } variant0;\n                     //   <other variant structs>\n+                    //   {name} discriminant;\n                     // }\n                     // ```\n-                    // The natvis in `intrinsic.nativs` then matches on `this.variant0.variant$` to\n+                    // The natvis in `intrinsic.nativs` then matches on `this.discriminant` to\n                     // determine which variant is active and then displays it.\n-                    Some(DirectTag {\n-                        tag_field: Field::from(tag_field),\n-                        tag_type_metadata: self.tag_type_metadata.unwrap(),\n+                    let enum_layout = self.layout;\n+                    let offset = enum_layout.fields.offset(tag_field);\n+                    let discr_ty = enum_layout.field(cx, tag_field).ty;\n+                    let (size, align) = cx.size_and_align_of(discr_ty);\n+                    Some(MemberDescription {\n+                        name: \"discriminant\".into(),\n+                        type_metadata: self.tag_type_metadata.unwrap(),\n+                        offset,\n+                        size,\n+                        align,\n+                        flags: DIFlags::FlagZero,\n+                        discriminant: None,\n+                        source_info: None,\n                     })\n                 } else {\n-                    // This doesn't matter in this case.\n                     None\n                 };\n+\n                 variants\n                     .iter_enumerated()\n                     .map(|(i, _)| {\n@@ -1571,7 +1574,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             cx,\n                             variant,\n                             variant_info,\n-                            tag_info,\n                             self_metadata,\n                             self.span,\n                         );\n@@ -1605,6 +1607,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             source_info: variant_info.source_info(cx),\n                         }\n                     })\n+                    .chain(fallback_discr_variant.into_iter())\n                     .collect()\n             }\n             Variants::Multiple {\n@@ -1702,7 +1705,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         cx,\n                         dataful_variant_layout,\n                         variant_info,\n-                        Some(NicheTag),\n                         self_metadata,\n                         self.span,\n                     );\n@@ -1754,7 +1756,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                     cx,\n                                     variant,\n                                     variant_info,\n-                                    Some(NicheTag),\n                                     self_metadata,\n                                     self.span,\n                                 );\n@@ -1791,39 +1792,27 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n }\n \n // Creates `MemberDescription`s for the fields of a single enum variant.\n-struct VariantMemberDescriptionFactory<'ll, 'tcx> {\n+struct VariantMemberDescriptionFactory<'tcx> {\n     /// Cloned from the `layout::Struct` describing the variant.\n     offsets: Vec<Size>,\n     args: Vec<(String, Ty<'tcx>)>,\n-    tag_type_metadata: Option<&'ll DIType>,\n     span: Span,\n }\n \n-impl VariantMemberDescriptionFactory<'ll, 'tcx> {\n+impl VariantMemberDescriptionFactory<'tcx> {\n     fn create_member_descriptions(&self, cx: &CodegenCx<'ll, 'tcx>) -> Vec<MemberDescription<'ll>> {\n         self.args\n             .iter()\n             .enumerate()\n             .map(|(i, &(ref name, ty))| {\n-                // Discriminant is always the first field of our variant\n-                // when using the enum fallback.\n-                let is_artificial_discr = use_enum_fallback(cx) && i == 0;\n                 let (size, align) = cx.size_and_align_of(ty);\n                 MemberDescription {\n                     name: name.to_string(),\n-                    type_metadata: if is_artificial_discr {\n-                        self.tag_type_metadata.unwrap_or_else(|| type_metadata(cx, ty, self.span))\n-                    } else {\n-                        type_metadata(cx, ty, self.span)\n-                    },\n+                    type_metadata: type_metadata(cx, ty, self.span),\n                     offset: self.offsets[i],\n                     size,\n                     align,\n-                    flags: if is_artificial_discr {\n-                        DIFlags::FlagArtificial\n-                    } else {\n-                        DIFlags::FlagZero\n-                    },\n+                    flags: DIFlags::FlagZero,\n                     discriminant: None,\n                     source_info: None,\n                 }\n@@ -1832,12 +1821,6 @@ impl VariantMemberDescriptionFactory<'ll, 'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-enum EnumTagInfo<'ll> {\n-    DirectTag { tag_field: Field, tag_type_metadata: &'ll DIType },\n-    NicheTag,\n-}\n-\n #[derive(Copy, Clone)]\n enum VariantInfo<'a, 'tcx> {\n     Adt(&'tcx ty::VariantDef),\n@@ -1916,7 +1899,6 @@ fn describe_enum_variant(\n     cx: &CodegenCx<'ll, 'tcx>,\n     layout: layout::TyAndLayout<'tcx>,\n     variant: VariantInfo<'_, 'tcx>,\n-    discriminant_info: Option<EnumTagInfo<'ll>>,\n     containing_scope: &'ll DIScope,\n     span: Span,\n ) -> (&'ll DICompositeType, MemberDescriptionFactory<'ll, 'tcx>) {\n@@ -1935,50 +1917,13 @@ fn describe_enum_variant(\n         )\n     });\n \n-    // Build an array of (field name, field type) pairs to be captured in the factory closure.\n-    let (offsets, args) = if use_enum_fallback(cx) {\n-        // If this is not a univariant enum, there is also the discriminant field.\n-        let (discr_offset, discr_arg) = match discriminant_info {\n-            Some(DirectTag { tag_field, .. }) => {\n-                // We have the layout of an enum variant, we need the layout of the outer enum\n-                let enum_layout = cx.layout_of(layout.ty);\n-                let offset = enum_layout.fields.offset(tag_field.as_usize());\n-                let args = (\"variant$\".to_owned(), enum_layout.field(cx, tag_field.as_usize()).ty);\n-                (Some(offset), Some(args))\n-            }\n-            _ => (None, None),\n-        };\n-        (\n-            discr_offset\n-                .into_iter()\n-                .chain((0..layout.fields.count()).map(|i| layout.fields.offset(i)))\n-                .collect(),\n-            discr_arg\n-                .into_iter()\n-                .chain(\n-                    (0..layout.fields.count())\n-                        .map(|i| (variant.field_name(i), layout.field(cx, i).ty)),\n-                )\n-                .collect(),\n-        )\n-    } else {\n-        (\n-            (0..layout.fields.count()).map(|i| layout.fields.offset(i)).collect(),\n-            (0..layout.fields.count())\n-                .map(|i| (variant.field_name(i), layout.field(cx, i).ty))\n-                .collect(),\n-        )\n-    };\n+    let offsets = (0..layout.fields.count()).map(|i| layout.fields.offset(i)).collect();\n+    let args = (0..layout.fields.count())\n+        .map(|i| (variant.field_name(i), layout.field(cx, i).ty))\n+        .collect();\n \n-    let member_description_factory = VariantMDF(VariantMemberDescriptionFactory {\n-        offsets,\n-        args,\n-        tag_type_metadata: match discriminant_info {\n-            Some(DirectTag { tag_type_metadata, .. }) => Some(tag_type_metadata),\n-            _ => None,\n-        },\n-        span,\n-    });\n+    let member_description_factory =\n+        VariantMDF(VariantMemberDescriptionFactory { offsets, args, span });\n \n     (metadata_stub, member_description_factory)\n }"}, {"sha": "8bf51732a2be87541afe6010e35e9905869e7259", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee", "patch": "@@ -150,7 +150,7 @@\n     </Expand>\n   </Type>\n   <Type Name=\"enum$&lt;*&gt;\">\n-    <Intrinsic Name=\"tag\" Expression=\"variant0.variant$\" />\n+    <Intrinsic Name=\"tag\" Expression=\"discriminant\" />\n     <DisplayString Condition=\"tag() == 0\">{tag(),en}</DisplayString>\n     <DisplayString Condition=\"tag() == 1\" Optional=\"true\">{tag(),en}</DisplayString>\n     <DisplayString Condition=\"tag() == 2\" Optional=\"true\">{tag(),en}</DisplayString>\n@@ -169,6 +169,9 @@\n     <DisplayString Condition=\"tag() == 15\" Optional=\"true\">{tag(),en}</DisplayString>\n \n     <Expand>\n+      <Synthetic Name=\"[variant]\">\n+        <DisplayString>{tag(),en}</DisplayString>\n+      </Synthetic>\n       <ExpandedItem Condition=\"tag() == 0\">variant0</ExpandedItem>\n       <ExpandedItem Condition=\"tag() == 1\" Optional=\"true\">variant1</ExpandedItem>\n       <ExpandedItem Condition=\"tag() == 2\" Optional=\"true\">variant2</ExpandedItem>"}, {"sha": "67a67863f340f1d1c4ba4e3575ecb7350822eb1e", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee", "patch": "@@ -48,14 +48,30 @@\n // cdb-check:        [+0x000] __0              : 0x0 [Type: unsigned int *]\n // cdb-check:    [+0x000] discriminant     : None (0x0) [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Discriminant$]\n \n+// cdb-command: dx -r2 h,!\n+// cdb-check:h,!              : Some [Type: enum$<core::option::Option<u32> >]\n+// cdb-check:    [+0x000] variant0         [Type: enum$<core::option::Option<u32> >::None]\n+// cdb-check:    [+0x000] variant1         [Type: enum$<core::option::Option<u32> >::Some]\n+// cdb-check:        [+0x004] __0              : 0xc [Type: unsigned int]\n+// cdb-check:    [+0x000] discriminant     : Some (0x1) [Type: core::option::Option]\n+\n // cdb-command: dx h\n // cdb-check:h                : Some [Type: enum$<core::option::Option<u32> >]\n-// cdb-check:    [+0x000] variant$         : Some (0x1) [Type: core::option::Option]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<u32> >]\n+// cdb-check:    [variant]        : Some\n // cdb-check:    [+0x004] __0              : 0xc [Type: unsigned int]\n \n+// cdb-command: dx -r2 i,!\n+// cdb-check:i,!              : None [Type: enum$<core::option::Option<u32> >]\n+// cdb-check:    [+0x000] variant0         [Type: enum$<core::option::Option<u32> >::None]\n+// cdb-check:    [+0x000] variant1         [Type: enum$<core::option::Option<u32> >::Some]\n+// cdb-check:        [+0x004] __0              : 0x5c0065 [Type: unsigned int]\n+// cdb-check:    [+0x000] discriminant     : None (0x0) [Type: core::option::Option]\n+\n // cdb-command: dx i\n // cdb-check:i                : None [Type: enum$<core::option::Option<u32> >]\n-// cdb-check:    [+0x000] variant$         : None (0x0) [Type: core::option::Option]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<u32> >]\n+// cdb-check:    [variant]        : None\n \n // cdb-command: dx j\n // cdb-check:j                : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]"}, {"sha": "7ed76beb8c6d91b0717de2c37f8ba747a7e89ee2", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=3780684f5aaceb5f79c00f0c0ce5a96d8edd00ee", "patch": "@@ -116,12 +116,14 @@\n \n // cdb-command: dx some\n // cdb-check:some             : Some [Type: enum$<core::option::Option<i16> >]\n-// cdb-check:    [...] variant$         : Some (0x1) [Type: core::option::Option]\n-// cdb-check:    [...] __0              : 8 [Type: short]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<i16> >]\n+// cdb-check:    [variant]        : Some\n+// cdb-check:    [+0x002] __0              : 8 [Type: short]\n \n // cdb-command: dx none\n // cdb-check:none             : None [Type: enum$<core::option::Option<i64> >]\n-// cdb-check:    [...] variant$         : None (0x0) [Type: core::option::Option]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<i64> >]\n+// cdb-check:    [variant]        : None\n \n // cdb-command: dx some_string\n // NOTE: cdb fails to interpret debug info of Option enums on i686."}]}