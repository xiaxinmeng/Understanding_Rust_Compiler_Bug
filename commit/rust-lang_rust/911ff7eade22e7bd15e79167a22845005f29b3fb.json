{"sha": "911ff7eade22e7bd15e79167a22845005f29b3fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMWZmN2VhZGUyMmU3YmQxNWU3OTE2N2EyMjg0NTAwNWYyOWIzZmI=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T03:49:53Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Improve style and comments.", "tree": {"sha": "e05d1bd65802c0624dec2c163f130e92353266a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e05d1bd65802c0624dec2c163f130e92353266a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/911ff7eade22e7bd15e79167a22845005f29b3fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/911ff7eade22e7bd15e79167a22845005f29b3fb", "html_url": "https://github.com/rust-lang/rust/commit/911ff7eade22e7bd15e79167a22845005f29b3fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/911ff7eade22e7bd15e79167a22845005f29b3fb/comments", "author": null, "committer": null, "parents": [{"sha": "c4574dde8dbd3f996418927a3edc8a83e9709f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4574dde8dbd3f996418927a3edc8a83e9709f9c", "html_url": "https://github.com/rust-lang/rust/commit/c4574dde8dbd3f996418927a3edc8a83e9709f9c"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "89d61d141a23b67b7d726dc489abf22d0f820155", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/911ff7eade22e7bd15e79167a22845005f29b3fb/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911ff7eade22e7bd15e79167a22845005f29b3fb/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=911ff7eade22e7bd15e79167a22845005f29b3fb", "patch": "@@ -211,7 +211,7 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n                     assert!(ecx.step()?, \"a terminated thread was scheduled for execution\");\n                 }\n                 SchedulingAction::ExecuteDtors => {\n-                    ecx.schedule_tls_dtors_for_active_thread()?;\n+                    ecx.schedule_next_tls_dtor_for_active_thread()?;\n                 }\n                 SchedulingAction::Stop => {\n                     break;"}, {"sha": "54850de82c87c9f94e6453b8ecd15ba26f4751db", "filename": "src/shims/tls.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/911ff7eade22e7bd15e79167a22845005f29b3fb/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911ff7eade22e7bd15e79167a22845005f29b3fb/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=911ff7eade22e7bd15e79167a22845005f29b3fb", "patch": "@@ -105,9 +105,9 @@ impl<'tcx> TlsData<'tcx> {\n         match self.keys.get_mut(&key) {\n             Some(TlsEntry { data, .. }) => {\n                 match new_data {\n-                    Some(ptr) => {\n-                        trace!(\"TLS key {} for thread {:?} stored: {:?}\", key, thread_id, ptr);\n-                        data.insert(thread_id, ptr);\n+                    Some(scalar) => {\n+                        trace!(\"TLS key {} for thread {:?} stored: {:?}\", key, thread_id, scalar);\n+                        data.insert(thread_id, scalar);\n                     }\n                     None => {\n                         trace!(\"TLS key {} for thread {:?} removed\", key, thread_id);\n@@ -271,7 +271,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some((instance, ptr, key)) = dtor {\n             this.machine.tls.last_dtor_key.insert(active_thread, key);\n             trace!(\"Running TLS dtor {:?} on {:?} at {:?}\", instance, ptr, active_thread);\n-            assert!(!this.is_null(ptr).unwrap(), \"Data can't be NULL when dtor is called!\");\n+            assert!(!this.is_null(ptr).unwrap(), \"data can't be NULL when dtor is called!\");\n \n             let ret_place = MPlaceTy::dangling(this.machine.layouts.unit, this).into();\n             this.call_function(\n@@ -295,10 +295,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     /// Schedule an active thread's TLS destructor to run on the active thread.\n     /// Note that this function does not run the destructors itself, it just\n-    /// schedules them one by one each time it is called.\n+    /// schedules them one by one each time it is called and reenables the\n+    /// thread so that it can be executed normally by the main execution loop.\n     ///\n     /// FIXME: we do not support yet deallocation of thread local statics.\n-    fn schedule_tls_dtors_for_active_thread(&mut self) -> InterpResult<'tcx> {\n+    /// Issue: https://github.com/rust-lang/miri/issues/1369\n+    fn schedule_next_tls_dtor_for_active_thread(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let active_thread = this.get_active_thread()?;\n "}]}