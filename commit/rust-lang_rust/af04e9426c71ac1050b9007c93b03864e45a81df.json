{"sha": "af04e9426c71ac1050b9007c93b03864e45a81df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMDRlOTQyNmM3MWFjMTA1MGI5MDA3YzkzYjAzODY0ZTQ1YTgxZGY=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-06-27T10:12:47Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T15:12:47Z"}, "message": "rustc_codegen_llvm: move from empty enums to extern types.", "tree": {"sha": "2dc77be7130023d314af9626641e1487ee26eacc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dc77be7130023d314af9626641e1487ee26eacc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af04e9426c71ac1050b9007c93b03864e45a81df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af04e9426c71ac1050b9007c93b03864e45a81df", "html_url": "https://github.com/rust-lang/rust/commit/af04e9426c71ac1050b9007c93b03864e45a81df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af04e9426c71ac1050b9007c93b03864e45a81df/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "077be49bde25ca92dc03c86c805438609133a82a", "url": "https://api.github.com/repos/rust-lang/rust/commits/077be49bde25ca92dc03c86c805438609133a82a", "html_url": "https://github.com/rust-lang/rust/commit/077be49bde25ca92dc03c86c805438609133a82a"}], "stats": {"total": 375, "additions": 178, "deletions": 197}, "files": [{"sha": "49cdbf34fa95a6ac19e95e30a13ac2654eb78032", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::ffi::CString;\n-use std::ptr;\n \n use attributes;\n use libc::c_uint;\n@@ -90,7 +89,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind\n                                           callee,\n                                           args.as_ptr(),\n                                           args.len() as c_uint,\n-                                          ptr::null_mut(),\n+                                          None,\n                                           \"\\0\".as_ptr() as *const _);\n         llvm::LLVMSetTailCall(ret, True);\n         if output.is_some() {"}, {"sha": "4ea97911830c7aefa8b39adec53d2f46ced8405b", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -14,7 +14,7 @@ use std::ffi::{CString, CStr};\n use std::io;\n use std::mem;\n use std::path::{Path, PathBuf};\n-use std::ptr;\n+use std::ptr::{self, NonNull};\n use std::str;\n \n use back::bytecode::RLIB_BYTECODE_EXTENSION;\n@@ -246,7 +246,7 @@ impl<'a> ArchiveBuilder<'a> {\n                     let name = CString::new(child_name)?;\n                     members.push(llvm::LLVMRustArchiveMemberNew(ptr::null(),\n                                                                 name.as_ptr(),\n-                                                                child.raw()));\n+                                                                NonNull::new(child.raw())));\n                     strings.push(name);\n                 }\n             }\n@@ -257,7 +257,7 @@ impl<'a> ArchiveBuilder<'a> {\n                         let name = CString::new(name_in_archive)?;\n                         members.push(llvm::LLVMRustArchiveMemberNew(path.as_ptr(),\n                                                                     name.as_ptr(),\n-                                                                    ptr::null_mut()));\n+                                                                    None));\n                         strings.push(path);\n                         strings.push(name);\n                     }\n@@ -284,7 +284,7 @@ impl<'a> ArchiveBuilder<'a> {\n                             let name = CString::new(child_name)?;\n                             let m = llvm::LLVMRustArchiveMemberNew(ptr::null(),\n                                                                    name.as_ptr(),\n-                                                                   child.raw());\n+                                                                   NonNull::new(child.raw()));\n                             members.push(m);\n                             strings.push(name);\n                         }"}, {"sha": "5f460a14ef9879914e4d15a33504c4811f81a5ca", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -26,6 +26,7 @@ use std::borrow::Cow;\n use std::ffi::CString;\n use std::ops::Range;\n use std::ptr;\n+use std::ptr::NonNull;\n use syntax_pos::Span;\n \n // All Builders must have an llfn associated with them\n@@ -211,7 +212,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                    .join(\", \"));\n \n         let args = self.check_call(\"invoke\", llfn, args);\n-        let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(ptr::null_mut());\n+        let bundle = bundle.as_ref().and_then(|b| NonNull::new(b.raw()));\n \n         unsafe {\n             llvm::LLVMRustBuildInvoke(self.llbuilder,\n@@ -909,7 +910,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                    .join(\", \"));\n \n         let args = self.check_call(\"call\", llfn, args);\n-        let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(ptr::null_mut());\n+        let bundle = bundle.as_ref().and_then(|b| NonNull::new(b.raw()));\n \n         unsafe {\n             llvm::LLVMRustBuildCall(self.llbuilder, llfn, args.as_ptr(),\n@@ -1196,7 +1197,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                        parent: Option<ValueRef>,\n                        args: &[ValueRef]) -> ValueRef {\n         self.count_insn(\"cleanuppad\");\n-        let parent = parent.unwrap_or(ptr::null_mut());\n+        let parent = parent.and_then(NonNull::new);\n         let name = CString::new(\"cleanuppad\").unwrap();\n         let ret = unsafe {\n             llvm::LLVMRustBuildCleanupPad(self.llbuilder,\n@@ -1212,7 +1213,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn cleanup_ret(&self, cleanup: ValueRef,\n                        unwind: Option<BasicBlockRef>) -> ValueRef {\n         self.count_insn(\"cleanupret\");\n-        let unwind = unwind.unwrap_or(ptr::null_mut());\n+        let unwind = unwind.and_then(NonNull::new);\n         let ret = unsafe {\n             llvm::LLVMRustBuildCleanupRet(self.llbuilder, cleanup, unwind)\n         };\n@@ -1248,8 +1249,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         unwind: Option<BasicBlockRef>,\n                         num_handlers: usize) -> ValueRef {\n         self.count_insn(\"catchswitch\");\n-        let parent = parent.unwrap_or(ptr::null_mut());\n-        let unwind = unwind.unwrap_or(ptr::null_mut());\n+        let parent = parent.and_then(NonNull::new);\n+        let unwind = unwind.and_then(NonNull::new);\n         let name = CString::new(\"catchswitch\").unwrap();\n         let ret = unsafe {\n             llvm::LLVMRustBuildCatchSwitch(self.llbuilder, parent, unwind,"}, {"sha": "130e14c976dee2817cacb1125838425c505843f4", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -35,7 +35,6 @@ use rustc_target::spec::{HasTargetSpec, Target};\n \n use std::ffi::{CStr, CString};\n use std::cell::{Cell, RefCell};\n-use std::ptr;\n use std::iter;\n use std::str;\n use std::sync::Arc;\n@@ -280,7 +279,9 @@ impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n                 None\n             };\n \n-            let mut cx = CodegenCx {\n+            let isize_ty = Type::ix_llcx(llcx, tcx.data_layout.pointer_size.bits());\n+\n+            CodegenCx {\n                 tcx,\n                 check_overflow,\n                 use_dll_storage_attrs,\n@@ -300,16 +301,14 @@ impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n                 lltypes: RefCell::new(FxHashMap()),\n                 scalar_lltypes: RefCell::new(FxHashMap()),\n                 pointee_infos: RefCell::new(FxHashMap()),\n-                isize_ty: Type::from_ref(ptr::null_mut()),\n+                isize_ty,\n                 dbg_cx,\n                 eh_personality: Cell::new(None),\n                 eh_unwind_resume: Cell::new(None),\n                 rust_try_fn: Cell::new(None),\n                 intrinsics: RefCell::new(FxHashMap()),\n                 local_gen_sym_counter: Cell::new(0),\n-            };\n-            cx.isize_ty = Type::isize(&cx);\n-            cx\n+            }\n         }\n     }\n "}, {"sha": "dc92363a83354e2d79fc5ab056ed605a27662e4c", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -13,12 +13,12 @@ use super::metadata::file_metadata;\n use super::utils::{DIB, span_start};\n \n use llvm;\n-use llvm::debuginfo::DIScope;\n+use llvm::debuginfo::DIScope_opaque;\n use common::CodegenCx;\n use rustc::mir::{Mir, SourceScope};\n+use std::ptr::NonNull;\n \n use libc::c_uint;\n-use std::ptr;\n \n use syntax_pos::Pos;\n \n@@ -29,7 +29,7 @@ use syntax_pos::BytePos;\n \n #[derive(Clone, Copy, Debug)]\n pub struct MirDebugScope {\n-    pub scope_metadata: DIScope,\n+    pub scope_metadata: Option<NonNull<DIScope_opaque>>,\n     // Start and end offsets of the file to which this DIScope belongs.\n     // These are used to quickly determine whether some span refers to the same file.\n     pub file_start_pos: BytePos,\n@@ -38,7 +38,7 @@ pub struct MirDebugScope {\n \n impl MirDebugScope {\n     pub fn is_valid(&self) -> bool {\n-        !self.scope_metadata.is_null()\n+        !self.scope_metadata.is_none()\n     }\n }\n \n@@ -47,7 +47,7 @@ impl MirDebugScope {\n pub fn create_mir_scopes(cx: &CodegenCx, mir: &Mir, debug_context: &FunctionDebugContext)\n     -> IndexVec<SourceScope, MirDebugScope> {\n     let null_scope = MirDebugScope {\n-        scope_metadata: ptr::null_mut(),\n+        scope_metadata: None,\n         file_start_pos: BytePos(0),\n         file_end_pos: BytePos(0)\n     };\n@@ -95,7 +95,7 @@ fn make_mir_scope(cx: &CodegenCx,\n         // The root is the function itself.\n         let loc = span_start(cx, mir.span);\n         scopes[scope] = MirDebugScope {\n-            scope_metadata: debug_context.fn_metadata,\n+            scope_metadata: NonNull::new(debug_context.fn_metadata),\n             file_start_pos: loc.file.start_pos,\n             file_end_pos: loc.file.end_pos,\n         };\n@@ -109,7 +109,7 @@ fn make_mir_scope(cx: &CodegenCx,\n         // However, we don't skip creating a nested scope if\n         // our parent is the root, because we might want to\n         // put arguments in the root and not have shadowing.\n-        if parent_scope.scope_metadata != debug_context.fn_metadata {\n+        if parent_scope.scope_metadata.unwrap().as_ptr() != debug_context.fn_metadata {\n             scopes[scope] = parent_scope;\n             return;\n         }\n@@ -121,12 +121,12 @@ fn make_mir_scope(cx: &CodegenCx,\n                                       debug_context.defining_crate);\n \n     let scope_metadata = unsafe {\n-        llvm::LLVMRustDIBuilderCreateLexicalBlock(\n+        NonNull::new(llvm::LLVMRustDIBuilderCreateLexicalBlock(\n             DIB(cx),\n-            parent_scope.scope_metadata,\n+            parent_scope.scope_metadata.unwrap().as_ptr(),\n             file_metadata,\n             loc.line as c_uint,\n-            loc.col.to_usize() as c_uint)\n+            loc.col.to_usize() as c_uint))\n     };\n     scopes[scope] = MirDebugScope {\n         scope_metadata,"}, {"sha": "4014ad95b9dd01ade3d0af9d6be03cec3790518b", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -18,7 +18,6 @@ use declare;\n use type_::Type;\n use rustc::session::config::NoDebugInfo;\n \n-use std::ptr;\n use syntax::attr;\n \n \n@@ -50,7 +49,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global(cx: &CodegenCx)\n                                  c_section_var_name.as_ptr() as *const _)\n     };\n \n-    if section_var == ptr::null_mut() {\n+    if section_var.is_null() {\n         let section_name = b\".debug_gdb_scripts\\0\";\n         let section_contents = b\"\\x01gdb_load_rust_pretty_printers.py\\0\";\n "}, {"sha": "59c14a6910ba2f896d0feefb9ca37cf49da77199", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -20,7 +20,7 @@ use super::{CrateDebugContext};\n use abi;\n \n use llvm::{self, ValueRef};\n-use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor,\n+use llvm::debuginfo::{DIType, DIFile, DIScope_opaque, DIScope, DIDescriptor,\n                       DICompositeType, DILexicalBlock, DIFlags};\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -41,6 +41,7 @@ use std::ffi::CString;\n use std::fmt::Write;\n use std::iter;\n use std::ptr;\n+use std::ptr::NonNull;\n use std::path::{Path, PathBuf};\n use syntax::ast;\n use syntax::symbol::{Interner, InternedString, Symbol};\n@@ -64,8 +65,7 @@ const DW_ATE_unsigned_char: c_uint = 0x08;\n pub const UNKNOWN_LINE_NUMBER: c_uint = 0;\n pub const UNKNOWN_COLUMN_NUMBER: c_uint = 0;\n \n-// ptr::null() doesn't work :(\n-pub const NO_SCOPE_METADATA: DIScope = (0 as DIScope);\n+pub const NO_SCOPE_METADATA: Option<NonNull<DIScope_opaque>> = None;\n \n #[derive(Copy, Debug, Hash, Eq, PartialEq, Clone)]\n pub struct UniqueTypeId(ast::Name);\n@@ -289,7 +289,7 @@ fn fixed_vec_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     };\n \n     let subrange = unsafe {\n-        llvm::LLVMRustDIBuilderGetOrCreateSubrange(DIB(cx), 0, upper_bound)\n+        NonNull::new(llvm::LLVMRustDIBuilderGetOrCreateSubrange(DIB(cx), 0, upper_bound))\n     };\n \n     let subscripts = create_DIArray(DIB(cx), &[subrange]);\n@@ -365,15 +365,17 @@ fn subroutine_type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         &signature,\n     );\n \n-    let signature_metadata: Vec<DIType> = iter::once(\n+    let signature_metadata: Vec<_> = iter::once(\n         // return type\n         match signature.output().sty {\n-            ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n-            _ => type_metadata(cx, signature.output(), span)\n+            ty::TyTuple(ref tys) if tys.is_empty() => None,\n+            _ => NonNull::new(type_metadata(cx, signature.output(), span))\n         }\n     ).chain(\n         // regular arguments\n-        signature.inputs().iter().map(|argument_type| type_metadata(cx, argument_type, span))\n+        signature.inputs().iter().map(|argument_type| {\n+            NonNull::new(type_metadata(cx, argument_type, span))\n+        })\n     ).collect();\n \n     return_if_metadata_created_in_meantime!(cx, unique_type_id);\n@@ -406,7 +408,7 @@ fn trait_pointer_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     let containing_scope = match trait_type.sty {\n         ty::TyDynamic(ref data, ..) => if let Some(principal) = data.principal() {\n             let def_id = principal.def_id();\n-            get_namespace_for_item(cx, def_id)\n+            NonNull::new(get_namespace_for_item(cx, def_id))\n         } else {\n             NO_SCOPE_METADATA\n         },\n@@ -985,7 +987,7 @@ fn prepare_struct_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                                                   struct_type,\n                                                   &struct_name,\n                                                   unique_type_id,\n-                                                  containing_scope);\n+                                                  NonNull::new(containing_scope));\n \n     create_and_register_recursive_type_forward_declaration(\n         cx,\n@@ -1317,7 +1319,7 @@ fn describe_enum_variant<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                                            layout.ty,\n                                            &variant_name,\n                                            unique_type_id,\n-                                           containing_scope);\n+                                           NonNull::new(containing_scope));\n \n     // If this is not a univariant enum, there is also the discriminant field.\n     let (discr_offset, discr_arg) = match discriminant_info {\n@@ -1376,17 +1378,17 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     let file_metadata = unknown_file_metadata(cx);\n \n     let def = enum_type.ty_adt_def().unwrap();\n-    let enumerators_metadata: Vec<DIDescriptor> = def.discriminants(cx.tcx)\n+    let enumerators_metadata: Vec<_> = def.discriminants(cx.tcx)\n         .zip(&def.variants)\n         .map(|(discr, v)| {\n             let token = v.name.as_str();\n             let name = CString::new(token.as_bytes()).unwrap();\n             unsafe {\n-                llvm::LLVMRustDIBuilderCreateEnumerator(\n+                NonNull::new(llvm::LLVMRustDIBuilderCreateEnumerator(\n                     DIB(cx),\n                     name.as_ptr(),\n                     // FIXME: what if enumeration has i128 discriminant?\n-                    discr.val as u64)\n+                    discr.val as u64))\n             }\n         })\n         .collect();\n@@ -1459,7 +1461,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         enum_type_size.bits(),\n         enum_type_align.abi_bits() as u32,\n         DIFlags::FlagZero,\n-        ptr::null_mut(),\n+        None,\n         0, // RuntimeLang\n         unique_type_id_str.as_ptr())\n     };\n@@ -1494,7 +1496,7 @@ fn composite_type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                                      composite_type_name: &str,\n                                      composite_type_unique_id: UniqueTypeId,\n                                      member_descriptions: &[MemberDescription],\n-                                     containing_scope: DIScope,\n+                                     containing_scope: Option<NonNull<DIScope_opaque>>,\n \n                                      // Ignore source location information as long as it\n                                      // can't be reconstructed for non-local crates.\n@@ -1535,13 +1537,13 @@ fn set_members_of_composite_type(cx: &CodegenCx,\n         }\n     }\n \n-    let member_metadata: Vec<DIDescriptor> = member_descriptions\n+    let member_metadata: Vec<_> = member_descriptions\n         .iter()\n         .map(|member_description| {\n             let member_name = member_description.name.as_bytes();\n             let member_name = CString::new(member_name).unwrap();\n             unsafe {\n-                llvm::LLVMRustDIBuilderCreateMemberType(\n+                NonNull::new(llvm::LLVMRustDIBuilderCreateMemberType(\n                     DIB(cx),\n                     composite_type_metadata,\n                     member_name.as_ptr(),\n@@ -1551,7 +1553,7 @@ fn set_members_of_composite_type(cx: &CodegenCx,\n                     member_description.align.abi_bits() as u32,\n                     member_description.offset.bits(),\n                     member_description.flags,\n-                    member_description.type_metadata)\n+                    member_description.type_metadata))\n             }\n         })\n         .collect();\n@@ -1570,7 +1572,7 @@ fn create_struct_stub<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                                 struct_type: Ty<'tcx>,\n                                 struct_type_name: &str,\n                                 unique_type_id: UniqueTypeId,\n-                                containing_scope: DIScope)\n+                                containing_scope: Option<NonNull<DIScope_opaque>>)\n                                 -> DICompositeType {\n     let (struct_size, struct_align) = cx.size_and_align_of(struct_type);\n \n@@ -1593,10 +1595,10 @@ fn create_struct_stub<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             struct_size.bits(),\n             struct_align.abi_bits() as u32,\n             DIFlags::FlagZero,\n-            ptr::null_mut(),\n+            None,\n             empty_array,\n             0,\n-            ptr::null_mut(),\n+            None,\n             unique_type_id.as_ptr())\n     };\n \n@@ -1630,7 +1632,7 @@ fn create_union_stub<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             union_size.bits(),\n             union_align.abi_bits() as u32,\n             DIFlags::FlagZero,\n-            empty_array,\n+            NonNull::new(empty_array),\n             0, // RuntimeLang\n             unique_type_id.as_ptr())\n     };\n@@ -1684,7 +1686,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx,\n \n     unsafe {\n         llvm::LLVMRustDIBuilderCreateStaticVariable(DIB(cx),\n-                                                    var_scope,\n+                                                    NonNull::new(var_scope),\n                                                     var_name.as_ptr(),\n                                                     // If null, linkage_name field is omitted,\n                                                     // which is what we want for no_mangle statics\n@@ -1695,7 +1697,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx,\n                                                     type_metadata,\n                                                     is_local_to_unit,\n                                                     global,\n-                                                    ptr::null_mut(),\n+                                                    None,\n                                                     global_align.abi() as u32,\n         );\n     }\n@@ -1749,10 +1751,10 @@ pub fn create_vtable_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             Size::ZERO.bits(),\n             cx.tcx.data_layout.pointer_align.abi_bits() as u32,\n             DIFlags::FlagArtificial,\n-            ptr::null_mut(),\n+            None,\n             empty_array,\n             0,\n-            type_metadata,\n+            NonNull::new(type_metadata),\n             name.as_ptr()\n         );\n \n@@ -1771,7 +1773,7 @@ pub fn create_vtable_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                                                     vtable_type,\n                                                     true,\n                                                     vtable,\n-                                                    ptr::null_mut(),\n+                                                    None,\n                                                     0);\n     }\n }"}, {"sha": "fcabd27332654c71cb4f359124fc7a4607f7017f", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -39,7 +39,7 @@ use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet};\n use libc::c_uint;\n use std::cell::{Cell, RefCell};\n use std::ffi::CString;\n-use std::ptr;\n+use std::ptr::NonNull;\n \n use syntax_pos::{self, Span, Pos};\n use syntax::ast;\n@@ -290,7 +290,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             cx.sess().opts.optimize != config::OptLevel::No,\n             llfn,\n             template_parameters,\n-            ptr::null_mut())\n+            None)\n     };\n \n     // Initialize fn debug context (including scope map and namespace map)\n@@ -312,8 +312,8 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n         // Return type -- llvm::DIBuilder wants this at index 0\n         signature.push(match sig.output().sty {\n-            ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n-            _ => type_metadata(cx, sig.output(), syntax_pos::DUMMY_SP)\n+            ty::TyTuple(ref tys) if tys.is_empty() => None,\n+            _ => NonNull::new(type_metadata(cx, sig.output(), syntax_pos::DUMMY_SP))\n         });\n \n         let inputs = if sig.abi == Abi::RustCall {\n@@ -342,19 +342,20 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                     }\n                     _ => t\n                 };\n-                type_metadata(cx, t, syntax_pos::DUMMY_SP)\n+                NonNull::new(type_metadata(cx, t, syntax_pos::DUMMY_SP))\n             }));\n         } else {\n             signature.extend(inputs.iter().map(|t| {\n-                type_metadata(cx, t, syntax_pos::DUMMY_SP)\n+                NonNull::new(type_metadata(cx, t, syntax_pos::DUMMY_SP))\n             }));\n         }\n \n         if sig.abi == Abi::RustCall && !sig.inputs().is_empty() {\n             if let ty::TyTuple(args) = sig.inputs()[sig.inputs().len() - 1].sty {\n                 signature.extend(\n-                    args.iter().map(|argument_type|\n-                        type_metadata(cx, argument_type, syntax_pos::DUMMY_SP))\n+                    args.iter().map(|argument_type| {\n+                        NonNull::new(type_metadata(cx, argument_type, syntax_pos::DUMMY_SP))\n+                    })\n                 );\n             }\n         }\n@@ -398,14 +399,14 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                         type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n                     let name = CString::new(name.as_str().as_bytes()).unwrap();\n                     Some(unsafe {\n-                        llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n+                        NonNull::new(llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n                             DIB(cx),\n-                            ptr::null_mut(),\n+                            None,\n                             name.as_ptr(),\n                             actual_type_metadata,\n                             file_metadata,\n                             0,\n-                            0)\n+                            0))\n                     })\n                 } else {\n                     None"}, {"sha": "b651f813408a066c56be819e979fe6c104d45282", "filename": "src/librustc_codegen_llvm/debuginfo/namespace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -22,7 +22,7 @@ use rustc::hir::map::DefPathData;\n use common::CodegenCx;\n \n use std::ffi::CString;\n-use std::ptr;\n+use std::ptr::NonNull;\n \n pub fn mangled_name_of_instance<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,\n@@ -38,11 +38,11 @@ pub fn item_namespace(cx: &CodegenCx, def_id: DefId) -> DIScope {\n     }\n \n     let def_key = cx.tcx.def_key(def_id);\n-    let parent_scope = def_key.parent.map_or(ptr::null_mut(), |parent| {\n-        item_namespace(cx, DefId {\n+    let parent_scope = def_key.parent.and_then(|parent| {\n+        NonNull::new(item_namespace(cx, DefId {\n             krate: def_id.krate,\n             index: parent\n-        })\n+        }))\n     });\n \n     let namespace_name = match def_key.disambiguated_data.data {"}, {"sha": "1a1462da3dd9ce12a096be18ae6bc48b1c47a692", "filename": "src/librustc_codegen_llvm/debuginfo/source_loc.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -15,18 +15,18 @@ use super::metadata::UNKNOWN_COLUMN_NUMBER;\n use super::FunctionDebugContext;\n \n use llvm;\n-use llvm::debuginfo::DIScope;\n+use llvm::debuginfo::{DIScope_opaque, DIScope};\n use builder::Builder;\n \n use libc::c_uint;\n-use std::ptr;\n+use std::ptr::NonNull;\n use syntax_pos::{Span, Pos};\n \n /// Sets the current debug location at the beginning of the span.\n ///\n /// Maps to a call to llvm::LLVMSetCurrentDebugLocation(...).\n pub fn set_source_location(\n-    debug_context: &FunctionDebugContext, bx: &Builder, scope: DIScope, span: Span\n+    debug_context: &FunctionDebugContext, bx: &Builder, scope: Option<NonNull<DIScope_opaque>>, span: Span\n ) {\n     let function_debug_context = match *debug_context {\n         FunctionDebugContext::DebugInfoDisabled => return,\n@@ -40,7 +40,7 @@ pub fn set_source_location(\n     let dbg_loc = if function_debug_context.source_locations_enabled.get() {\n         debug!(\"set_source_location: {}\", bx.sess().codemap().span_to_string(span));\n         let loc = span_start(bx.cx, span);\n-        InternalDebugLocation::new(scope, loc.line, loc.col.to_usize())\n+        InternalDebugLocation::new(scope.unwrap().as_ptr(), loc.line, loc.col.to_usize())\n     } else {\n         UnknownLocation\n     };\n@@ -93,17 +93,17 @@ pub fn set_debug_location(bx: &Builder, debug_location: InternalDebugLocation) {\n             debug!(\"setting debug location to {} {}\", line, col);\n \n             unsafe {\n-                llvm::LLVMRustDIBuilderCreateDebugLocation(\n+                NonNull::new(llvm::LLVMRustDIBuilderCreateDebugLocation(\n                     debug_context(bx.cx).llcontext,\n                     line as c_uint,\n                     col_used,\n                     scope,\n-                    ptr::null_mut())\n+                    None))\n             }\n         }\n         UnknownLocation => {\n             debug!(\"clearing debug location \");\n-            ptr::null_mut()\n+            None\n         }\n     };\n "}, {"sha": "87da33166286ff4bdb2157cd99c07cb5344edfdd", "filename": "src/librustc_codegen_llvm/debuginfo/utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -17,9 +17,10 @@ use rustc::hir::def_id::DefId;\n use rustc::ty::DefIdTree;\n \n use llvm;\n-use llvm::debuginfo::{DIScope, DIBuilderRef, DIDescriptor, DIArray};\n+use llvm::debuginfo::{DIScope, DIBuilderRef, DIDescriptor_opaque, DIArray};\n use common::{CodegenCx};\n \n+use std::ptr::NonNull;\n use syntax_pos::{self, Span};\n \n pub fn is_node_local_to_unit(cx: &CodegenCx, def_id: DefId) -> bool\n@@ -36,7 +37,7 @@ pub fn is_node_local_to_unit(cx: &CodegenCx, def_id: DefId) -> bool\n }\n \n #[allow(non_snake_case)]\n-pub fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n+pub fn create_DIArray(builder: DIBuilderRef, arr: &[Option<NonNull<DIDescriptor_opaque>>]) -> DIArray {\n     return unsafe {\n         llvm::LLVMRustDIBuilderGetOrCreateArray(builder, arr.as_ptr(), arr.len() as u32)\n     };"}, {"sha": "0b5524990e89c53191984f2ef4103dade8a8cf35", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -21,6 +21,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(custom_attribute)]\n+#![feature(extern_types)]\n #![feature(fs_read_write)]\n #![allow(unused_attributes)]\n #![feature(libc)]"}, {"sha": "99175864b39a07b85855f5d202d56ccf2bdff177", "filename": "src/librustc_codegen_llvm/llvm/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -14,7 +14,6 @@ pub use self::OptimizationDiagnosticKind::*;\n pub use self::Diagnostic::*;\n \n use libc::c_uint;\n-use std::ptr;\n \n use super::{DiagnosticInfoRef, TwineRef, ValueRef};\n \n@@ -56,7 +55,7 @@ impl OptimizationDiagnostic {\n     unsafe fn unpack(kind: OptimizationDiagnosticKind,\n                      di: DiagnosticInfoRef)\n                      -> OptimizationDiagnostic {\n-        let mut function = ptr::null_mut();\n+        let mut function = 0 as *mut _;\n         let mut line = 0;\n         let mut column = 0;\n \n@@ -105,8 +104,8 @@ impl InlineAsmDiagnostic {\n \n         let mut opt = InlineAsmDiagnostic {\n             cookie: 0,\n-            message: ptr::null_mut(),\n-            instruction: ptr::null_mut(),\n+            message: 0 as *mut _,\n+            instruction: 0 as *mut _,\n         };\n \n         super::LLVMRustUnpackInlineAsmDiagnostic(di,"}, {"sha": "6e61b327f1d796241612fc97c53c1be8100d9f90", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 65, "deletions": 83, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -15,15 +15,17 @@\n // https://reviews.llvm.org/D26769\n \n use super::debuginfo::{\n-    DIBuilderRef, DIDescriptor, DIFile, DILexicalBlock, DISubprogram, DIType,\n-    DIBasicType, DIDerivedType, DICompositeType, DIScope, DIVariable,\n-    DIGlobalVariable, DIArray, DISubrange, DITemplateTypeParameter, DIEnumerator,\n+    DIBuilderRef, DIDescriptor_opaque, DIDescriptor, DIFile, DILexicalBlock, DISubprogram, DIType_opaque,\n+    DIType, DIBasicType, DIDerivedType, DICompositeType, DIScope_opaque, DIScope, DIVariable,\n+    DIGlobalVariable, DIArray_opaque, DIArray, DISubrange, DITemplateTypeParameter, DIEnumerator,\n     DINameSpace, DIFlags,\n };\n \n use libc::{c_uint, c_int, size_t, c_char};\n use libc::{c_longlong, c_ulonglong, c_void};\n \n+use std::ptr::NonNull;\n+\n use super::RustStringRef;\n \n pub type Opcode = u32;\n@@ -348,10 +350,10 @@ pub enum PassKind {\n }\n \n /// LLVMRustThinLTOData\n-pub enum ThinLTOData {}\n+extern { pub type ThinLTOData; }\n \n /// LLVMRustThinLTOBuffer\n-pub enum ThinLTOBuffer {}\n+extern { pub type ThinLTOBuffer; }\n \n /// LLVMRustThinLTOModule\n #[repr(C)]\n@@ -373,110 +375,89 @@ pub enum ThreadLocalMode {\n }\n \n // Opaque pointer types\n-#[allow(missing_copy_implementations)]\n-pub enum Module_opaque {}\n+extern { pub type Module_opaque; }\n pub type ModuleRef = *mut Module_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum Context_opaque {}\n+extern { pub type Context_opaque; }\n pub type ContextRef = *mut Context_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum Type_opaque {}\n+extern { pub type Type_opaque; }\n pub type TypeRef = *mut Type_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum Value_opaque {}\n+extern { pub type Value_opaque; }\n pub type ValueRef = *mut Value_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum Metadata_opaque {}\n+extern { pub type Metadata_opaque; }\n pub type MetadataRef = *mut Metadata_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum BasicBlock_opaque {}\n+extern { pub type BasicBlock_opaque; }\n pub type BasicBlockRef = *mut BasicBlock_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum Builder_opaque {}\n+extern { pub type Builder_opaque; }\n pub type BuilderRef = *mut Builder_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum ExecutionEngine_opaque {}\n+extern { pub type ExecutionEngine_opaque; }\n pub type ExecutionEngineRef = *mut ExecutionEngine_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum MemoryBuffer_opaque {}\n+extern { pub type MemoryBuffer_opaque; }\n pub type MemoryBufferRef = *mut MemoryBuffer_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum PassManager_opaque {}\n+extern { pub type PassManager_opaque; }\n pub type PassManagerRef = *mut PassManager_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum PassManagerBuilder_opaque {}\n+extern { pub type PassManagerBuilder_opaque; }\n pub type PassManagerBuilderRef = *mut PassManagerBuilder_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum Use_opaque {}\n+extern { pub type Use_opaque; }\n pub type UseRef = *mut Use_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum TargetData_opaque {}\n+extern { pub type TargetData_opaque; }\n pub type TargetDataRef = *mut TargetData_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum ObjectFile_opaque {}\n+extern { pub type ObjectFile_opaque; }\n pub type ObjectFileRef = *mut ObjectFile_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum SectionIterator_opaque {}\n+extern { pub type SectionIterator_opaque; }\n pub type SectionIteratorRef = *mut SectionIterator_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum Pass_opaque {}\n+extern { pub type Pass_opaque; }\n pub type PassRef = *mut Pass_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum TargetMachine_opaque {}\n+extern { pub type TargetMachine_opaque; }\n pub type TargetMachineRef = *mut TargetMachine_opaque;\n-pub enum Archive_opaque {}\n+extern { pub type Archive_opaque; }\n pub type ArchiveRef = *mut Archive_opaque;\n-pub enum ArchiveIterator_opaque {}\n+extern { pub type ArchiveIterator_opaque; }\n pub type ArchiveIteratorRef = *mut ArchiveIterator_opaque;\n-pub enum ArchiveChild_opaque {}\n+extern { pub type ArchiveChild_opaque; }\n pub type ArchiveChildRef = *mut ArchiveChild_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum Twine_opaque {}\n+extern { pub type Twine_opaque; }\n pub type TwineRef = *mut Twine_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum DiagnosticInfo_opaque {}\n+extern { pub type DiagnosticInfo_opaque; }\n pub type DiagnosticInfoRef = *mut DiagnosticInfo_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum DebugLoc_opaque {}\n+extern { pub type DebugLoc_opaque; }\n pub type DebugLocRef = *mut DebugLoc_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum SMDiagnostic_opaque {}\n+extern { pub type SMDiagnostic_opaque; }\n pub type SMDiagnosticRef = *mut SMDiagnostic_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum RustArchiveMember_opaque {}\n+extern { pub type RustArchiveMember_opaque; }\n pub type RustArchiveMemberRef = *mut RustArchiveMember_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum OperandBundleDef_opaque {}\n+extern { pub type OperandBundleDef_opaque; }\n pub type OperandBundleDefRef = *mut OperandBundleDef_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum Linker_opaque {}\n+extern { pub type Linker_opaque; }\n pub type LinkerRef = *mut Linker_opaque;\n \n pub type DiagnosticHandler = unsafe extern \"C\" fn(DiagnosticInfoRef, *mut c_void);\n pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(SMDiagnosticRef, *const c_void, c_uint);\n \n \n pub mod debuginfo {\n-    use super::MetadataRef;\n+    use super::Metadata_opaque;\n \n-    #[allow(missing_copy_implementations)]\n-    pub enum DIBuilder_opaque {}\n+    extern { pub type DIBuilder_opaque; }\n     pub type DIBuilderRef = *mut DIBuilder_opaque;\n \n-    pub type DIDescriptor = MetadataRef;\n-    pub type DIScope = DIDescriptor;\n+    pub type DIDescriptor_opaque = Metadata_opaque;\n+    pub type DIDescriptor = *mut DIDescriptor_opaque;\n+    pub type DIScope_opaque = DIDescriptor_opaque;\n+    pub type DIScope = *mut DIScope_opaque;\n     pub type DILocation = DIDescriptor;\n     pub type DIFile = DIScope;\n     pub type DILexicalBlock = DIScope;\n     pub type DISubprogram = DIScope;\n     pub type DINameSpace = DIScope;\n-    pub type DIType = DIDescriptor;\n+    pub type DIType_opaque = DIDescriptor_opaque;\n+    pub type DIType = *mut DIType_opaque;\n     pub type DIBasicType = DIType;\n     pub type DIDerivedType = DIType;\n     pub type DICompositeType = DIDerivedType;\n     pub type DIVariable = DIDescriptor;\n     pub type DIGlobalVariable = DIDescriptor;\n-    pub type DIArray = DIDescriptor;\n+    pub type DIArray_opaque = DIDescriptor_opaque;\n+    pub type DIArray = *mut DIArray_opaque;\n     pub type DISubrange = DIDescriptor;\n     pub type DIEnumerator = DIDescriptor;\n     pub type DITemplateTypeParameter = DIDescriptor;\n@@ -512,8 +493,9 @@ pub mod debuginfo {\n     }\n }\n \n-pub enum ModuleBuffer {}\n+extern { pub type ModuleBuffer; }\n \n+#[allow(improper_ctypes)] // TODO remove this (use for NonNull)\n extern \"C\" {\n     // Create and destroy contexts.\n     pub fn LLVMRustContextCreate(shouldDiscardNames: bool) -> ContextRef;\n@@ -793,7 +775,7 @@ extern \"C\" {\n     pub fn LLVMDisposeBuilder(Builder: BuilderRef);\n \n     // Metadata\n-    pub fn LLVMSetCurrentDebugLocation(Builder: BuilderRef, L: ValueRef);\n+    pub fn LLVMSetCurrentDebugLocation(Builder: BuilderRef, L: Option<NonNull<Value_opaque>>);\n     pub fn LLVMGetCurrentDebugLocation(Builder: BuilderRef) -> ValueRef;\n     pub fn LLVMSetInstDebugLocation(Builder: BuilderRef, Inst: ValueRef);\n \n@@ -819,7 +801,7 @@ extern \"C\" {\n                                NumArgs: c_uint,\n                                Then: BasicBlockRef,\n                                Catch: BasicBlockRef,\n-                               Bundle: OperandBundleDefRef,\n+                               Bundle: Option<NonNull<OperandBundleDef_opaque>>,\n                                Name: *const c_char)\n                                -> ValueRef;\n     pub fn LLVMBuildLandingPad(B: BuilderRef,\n@@ -832,14 +814,14 @@ extern \"C\" {\n     pub fn LLVMBuildUnreachable(B: BuilderRef) -> ValueRef;\n \n     pub fn LLVMRustBuildCleanupPad(B: BuilderRef,\n-                                   ParentPad: ValueRef,\n+                                   ParentPad: Option<NonNull<Value_opaque>>,\n                                    ArgCnt: c_uint,\n                                    Args: *const ValueRef,\n                                    Name: *const c_char)\n                                    -> ValueRef;\n     pub fn LLVMRustBuildCleanupRet(B: BuilderRef,\n                                    CleanupPad: ValueRef,\n-                                   UnwindBB: BasicBlockRef)\n+                                   UnwindBB: Option<NonNull<BasicBlock_opaque>>)\n                                    -> ValueRef;\n     pub fn LLVMRustBuildCatchPad(B: BuilderRef,\n                                  ParentPad: ValueRef,\n@@ -849,8 +831,8 @@ extern \"C\" {\n                                  -> ValueRef;\n     pub fn LLVMRustBuildCatchRet(B: BuilderRef, Pad: ValueRef, BB: BasicBlockRef) -> ValueRef;\n     pub fn LLVMRustBuildCatchSwitch(Builder: BuilderRef,\n-                                    ParentPad: ValueRef,\n-                                    BB: BasicBlockRef,\n+                                    ParentPad: Option<NonNull<Value_opaque>>,\n+                                    BB: Option<NonNull<BasicBlock_opaque>>,\n                                     NumHandlers: c_uint,\n                                     Name: *const c_char)\n                                     -> ValueRef;\n@@ -1161,7 +1143,7 @@ extern \"C\" {\n                              Fn: ValueRef,\n                              Args: *const ValueRef,\n                              NumArgs: c_uint,\n-                             Bundle: OperandBundleDefRef,\n+                             Bundle: Option<NonNull<OperandBundleDef_opaque>>,\n                              Name: *const c_char)\n                              -> ValueRef;\n     pub fn LLVMBuildSelect(B: BuilderRef,\n@@ -1433,7 +1415,7 @@ extern \"C\" {\n                                            isOptimized: bool,\n                                            Fn: ValueRef,\n                                            TParam: DIArray,\n-                                           Decl: DIDescriptor)\n+                                           Decl: Option<NonNull<DIDescriptor_opaque>>)\n                                            -> DISubprogram;\n \n     pub fn LLVMRustDIBuilderCreateBasicType(Builder: DIBuilderRef,\n@@ -1451,17 +1433,17 @@ extern \"C\" {\n                                               -> DIDerivedType;\n \n     pub fn LLVMRustDIBuilderCreateStructType(Builder: DIBuilderRef,\n-                                             Scope: DIDescriptor,\n+                                             Scope: Option<NonNull<DIDescriptor_opaque>>,\n                                              Name: *const c_char,\n                                              File: DIFile,\n                                              LineNumber: c_uint,\n                                              SizeInBits: u64,\n                                              AlignInBits: u32,\n                                              Flags: DIFlags,\n-                                             DerivedFrom: DIType,\n+                                             DerivedFrom: Option<NonNull<DIType_opaque>>,\n                                              Elements: DIArray,\n                                              RunTimeLang: c_uint,\n-                                             VTableHolder: DIType,\n+                                             VTableHolder: Option<NonNull<DIType_opaque>>,\n                                              UniqueId: *const c_char)\n                                              -> DICompositeType;\n \n@@ -1490,15 +1472,15 @@ extern \"C\" {\n                                                    -> DILexicalBlock;\n \n     pub fn LLVMRustDIBuilderCreateStaticVariable(Builder: DIBuilderRef,\n-                                                 Context: DIScope,\n+                                                 Context: Option<NonNull<DIScope_opaque>>,\n                                                  Name: *const c_char,\n                                                  LinkageName: *const c_char,\n                                                  File: DIFile,\n                                                  LineNo: c_uint,\n                                                  Ty: DIType,\n                                                  isLocalToUnit: bool,\n                                                  Val: ValueRef,\n-                                                 Decl: DIDescriptor,\n+                                                 Decl: Option<NonNull<DIDescriptor_opaque>>,\n                                                  AlignInBits: u32)\n                                                  -> DIGlobalVariable;\n \n@@ -1535,7 +1517,7 @@ extern \"C\" {\n                                                 -> DISubrange;\n \n     pub fn LLVMRustDIBuilderGetOrCreateArray(Builder: DIBuilderRef,\n-                                             Ptr: *const DIDescriptor,\n+                                             Ptr: *const Option<NonNull<DIDescriptor_opaque>>,\n                                              Count: c_uint)\n                                              -> DIArray;\n \n@@ -1572,15 +1554,15 @@ extern \"C\" {\n                                             SizeInBits: u64,\n                                             AlignInBits: u32,\n                                             Flags: DIFlags,\n-                                            Elements: DIArray,\n+                                            Elements: Option<NonNull<DIArray_opaque>>,\n                                             RunTimeLang: c_uint,\n                                             UniqueId: *const c_char)\n                                             -> DIType;\n \n     pub fn LLVMSetUnnamedAddr(GlobalVar: ValueRef, UnnamedAddr: Bool);\n \n     pub fn LLVMRustDIBuilderCreateTemplateTypeParameter(Builder: DIBuilderRef,\n-                                                        Scope: DIScope,\n+                                                        Scope: Option<NonNull<DIScope_opaque>>,\n                                                         Name: *const c_char,\n                                                         Ty: DIType,\n                                                         File: DIFile,\n@@ -1590,7 +1572,7 @@ extern \"C\" {\n \n \n     pub fn LLVMRustDIBuilderCreateNameSpace(Builder: DIBuilderRef,\n-                                            Scope: DIScope,\n+                                            Scope: Option<NonNull<DIScope_opaque>>,\n                                             Name: *const c_char,\n                                             File: DIFile,\n                                             LineNo: c_uint)\n@@ -1604,7 +1586,7 @@ extern \"C\" {\n                                                 Line: c_uint,\n                                                 Column: c_uint,\n                                                 Scope: DIScope,\n-                                                InlinedAt: MetadataRef)\n+                                                InlinedAt: Option<NonNull<Metadata_opaque>>)\n                                                 -> ValueRef;\n     pub fn LLVMRustDIBuilderCreateOpDeref() -> i64;\n     pub fn LLVMRustDIBuilderCreateOpPlusUconst() -> i64;\n@@ -1720,7 +1702,7 @@ extern \"C\" {\n                                 -> LLVMRustResult;\n     pub fn LLVMRustArchiveMemberNew(Filename: *const c_char,\n                                     Name: *const c_char,\n-                                    Child: ArchiveChildRef)\n+                                    Child: Option<NonNull<ArchiveChild_opaque>>)\n                                     -> RustArchiveMemberRef;\n     pub fn LLVMRustArchiveMemberFree(Member: RustArchiveMemberRef);\n "}, {"sha": "5fb4cbfb982d52ff0a6574a1baac7b4944212523", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -11,7 +11,7 @@\n use common::{C_i32, C_null};\n use libc::c_uint;\n use llvm::{self, ValueRef, BasicBlockRef};\n-use llvm::debuginfo::DIScope;\n+use llvm::debuginfo::DIScope_opaque;\n use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts};\n use rustc::ty::layout::{LayoutOf, TyLayout};\n use rustc::mir::{self, Mir};\n@@ -29,6 +29,7 @@ use syntax_pos::{DUMMY_SP, NO_EXPANSION, BytePos, Span};\n use syntax::symbol::keywords;\n \n use std::iter;\n+use std::ptr::NonNull;\n \n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -121,7 +122,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n         debuginfo::set_source_location(&self.debug_context, bx, scope, span);\n     }\n \n-    pub fn debug_loc(&mut self, source_info: mir::SourceInfo) -> (DIScope, Span) {\n+    pub fn debug_loc(&mut self, source_info: mir::SourceInfo) -> (Option<NonNull<DIScope_opaque>>, Span) {\n         // Bail out if debug info emission is not enabled.\n         match self.debug_context {\n             FunctionDebugContext::DebugInfoDisabled |\n@@ -161,16 +162,16 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n     // corresponding to span's containing source scope.  If so, we need to create a DIScope\n     // \"extension\" into that file.\n     fn scope_metadata_for_loc(&self, scope_id: mir::SourceScope, pos: BytePos)\n-                               -> llvm::debuginfo::DIScope {\n+                               -> Option<NonNull<DIScope_opaque>> {\n         let scope_metadata = self.scopes[scope_id].scope_metadata;\n         if pos < self.scopes[scope_id].file_start_pos ||\n            pos >= self.scopes[scope_id].file_end_pos {\n             let cm = self.cx.sess().codemap();\n             let defining_crate = self.debug_context.get_ref(DUMMY_SP).defining_crate;\n-            debuginfo::extend_scope_to_file(self.cx,\n-                                            scope_metadata,\n+            NonNull::new(debuginfo::extend_scope_to_file(self.cx,\n+                                            scope_metadata.unwrap().as_ptr(),\n                                             &cm.lookup_char_pos(pos).file,\n-                                            defining_crate)\n+                                            defining_crate))\n         } else {\n             scope_metadata\n         }\n@@ -280,7 +281,7 @@ pub fn codegen_mir<'a, 'tcx: 'a>(\n                         span: decl.source_info.span,\n                         scope: decl.visibility_scope,\n                     });\n-                    declare_local(&bx, &fx.debug_context, name, layout.ty, scope,\n+                    declare_local(&bx, &fx.debug_context, name, layout.ty, scope.unwrap().as_ptr(),\n                         VariableAccess::DirectVariable { alloca: place.llval },\n                         VariableKind::LocalVariable, span);\n                 }\n@@ -424,8 +425,8 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n \n     // Get the argument scope, if it exists and if we need it.\n     let arg_scope = scopes[mir::OUTERMOST_SOURCE_SCOPE];\n-    let arg_scope = if arg_scope.is_valid() && bx.sess().opts.debuginfo == FullDebugInfo {\n-        Some(arg_scope.scope_metadata)\n+    let arg_scope = if bx.sess().opts.debuginfo == FullDebugInfo {\n+        arg_scope.scope_metadata\n     } else {\n         None\n     };\n@@ -471,7 +472,7 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                     bx,\n                     &fx.debug_context,\n                     arg_decl.name.unwrap_or(keywords::Invalid.name()),\n-                    arg_ty, scope,\n+                    arg_ty, scope.as_ptr(),\n                     variable_access,\n                     VariableKind::ArgumentVariable(arg_index + 1),\n                     DUMMY_SP\n@@ -550,7 +551,7 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                     &fx.debug_context,\n                     arg_decl.name.unwrap_or(keywords::Invalid.name()),\n                     arg.layout.ty,\n-                    scope,\n+                    scope.as_ptr(),\n                     variable_access,\n                     VariableKind::ArgumentVariable(arg_index + 1),\n                     DUMMY_SP\n@@ -601,7 +602,7 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                     &fx.debug_context,\n                     decl.debug_name,\n                     ty,\n-                    scope,\n+                    scope.as_ptr(),\n                     variable_access,\n                     VariableKind::LocalVariable,\n                     DUMMY_SP"}, {"sha": "78c83f200a517da5db04f9c48005422bd1483943", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -24,7 +24,6 @@ use value::Value;\n use type_of::LayoutLlvmExt;\n \n use std::fmt;\n-use std::ptr;\n \n use super::{FunctionCx, LocalRef};\n use super::constant::scalar_to_llvm;\n@@ -160,7 +159,7 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n         let projected_ty = self.layout.ty.builtin_deref(true)\n             .unwrap_or_else(|| bug!(\"deref of non-pointer {:?}\", self)).ty;\n         let (llptr, llextra) = match self.val {\n-            OperandValue::Immediate(llptr) => (llptr, ptr::null_mut()),\n+            OperandValue::Immediate(llptr) => (llptr, 0 as *mut _),\n             OperandValue::Pair(llptr, llextra) => (llptr, llextra),\n             OperandValue::Ref(..) => bug!(\"Deref of by-Ref operand {:?}\", self)\n         };"}, {"sha": "aff29b06b8f31b1fc76f65f43582498e09bc199f", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -24,8 +24,6 @@ use value::Value;\n use glue;\n use mir::constant::const_alloc_to_llvm;\n \n-use std::ptr;\n-\n use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};\n \n@@ -51,7 +49,7 @@ impl<'a, 'tcx> PlaceRef<'tcx> {\n                      -> PlaceRef<'tcx> {\n         PlaceRef {\n             llval,\n-            llextra: ptr::null_mut(),\n+            llextra: 0 as *mut _,\n             layout,\n             align\n         }\n@@ -126,7 +124,7 @@ impl<'a, 'tcx> PlaceRef<'tcx> {\n         };\n \n         let val = if self.layout.is_llvm_immediate() {\n-            let mut const_llval = ptr::null_mut();\n+            let mut const_llval = 0 as *mut _;\n             unsafe {\n                 let global = llvm::LLVMIsAGlobalVariable(self.llval);\n                 if !global.is_null() && llvm::LLVMIsGlobalConstant(global) == llvm::True {\n@@ -187,7 +185,7 @@ impl<'a, 'tcx> PlaceRef<'tcx> {\n                 llextra: if cx.type_has_metadata(field.ty) {\n                     self.llextra\n                 } else {\n-                    ptr::null_mut()\n+                    0 as *mut _\n                 },\n                 layout: field,\n                 align,\n@@ -390,7 +388,7 @@ impl<'a, 'tcx> PlaceRef<'tcx> {\n                          -> PlaceRef<'tcx> {\n         PlaceRef {\n             llval: bx.inbounds_gep(self.llval, &[C_usize(bx.cx, 0), llindex]),\n-            llextra: ptr::null_mut(),\n+            llextra: 0 as *mut _,\n             layout: self.layout.field(bx.cx, 0),\n             align: self.align\n         }"}, {"sha": "37157635b2d67578f94cf30ffb6d301cb317f96a", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04e9426c71ac1050b9007c93b03864e45a81df/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=af04e9426c71ac1050b9007c93b03864e45a81df", "patch": "@@ -22,7 +22,6 @@ use rustc::ty::layout::{self, Align, Size};\n use std::ffi::CString;\n use std::fmt;\n use std::mem;\n-use std::ptr;\n \n use libc::c_uint;\n \n@@ -103,6 +102,11 @@ impl Type {\n         ty!(llvm::LLVMIntTypeInContext(cx.llcx, num_bits as c_uint))\n     }\n \n+    // Creates an integer type with the given number of bits, e.g. i24\n+    pub fn ix_llcx(llcx: ContextRef, num_bits: u64) -> Type {\n+        ty!(llvm::LLVMIntTypeInContext(llcx, num_bits as c_uint))\n+    }\n+\n     pub fn f32(cx: &CodegenCx) -> Type {\n         ty!(llvm::LLVMFloatTypeInContext(cx.llcx))\n     }\n@@ -128,12 +132,7 @@ impl Type {\n     }\n \n     pub fn isize(cx: &CodegenCx) -> Type {\n-        match &cx.tcx.sess.target.target.target_pointer_width[..] {\n-            \"16\" => Type::i16(cx),\n-            \"32\" => Type::i32(cx),\n-            \"64\" => Type::i64(cx),\n-            tws => bug!(\"Unsupported target word size for int: {}\", tws),\n-        }\n+        cx.isize_ty\n     }\n \n     pub fn c_int(cx: &CodegenCx) -> Type {\n@@ -241,7 +240,7 @@ impl Type {\n     pub fn func_params(&self) -> Vec<Type> {\n         unsafe {\n             let n_args = llvm::LLVMCountParamTypes(self.to_ref()) as usize;\n-            let mut args = vec![Type { rf: ptr::null_mut() }; n_args];\n+            let mut args = vec![Type { rf: 0 as *mut _ }; n_args];\n             llvm::LLVMGetParamTypes(self.to_ref(),\n                                     args.as_mut_ptr() as *mut TypeRef);\n             args"}]}