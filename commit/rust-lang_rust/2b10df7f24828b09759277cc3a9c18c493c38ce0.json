{"sha": "2b10df7f24828b09759277cc3a9c18c493c38ce0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMTBkZjdmMjQ4MjhiMDk3NTkyNzdjYzNhOWMxOGM0OTNjMzhjZTA=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2016-08-26T00:56:47Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2016-08-26T10:37:36Z"}, "message": "Replace unnecessary uses of `TraitObject` with casts", "tree": {"sha": "8a10bb092c5adea8b94ecbf5c4c415adb008fecf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a10bb092c5adea8b94ecbf5c4c415adb008fecf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b10df7f24828b09759277cc3a9c18c493c38ce0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXwBvwAAoJENpc3BX5vtsrOrwQAJoRtohCtx1shBY3ZPwaUagB\nMI2Qk8uIruU3WrRBvu+u66ODLRsqMPrXOyQleVN4oqltVSC7uqj5CEfyi5ZmcE/0\nWXle/rfl+60//QBXeXwBWu9PkWdSG58wY9XcCsKpwqA9k9tbJIxxcGB4zW80G41h\n6CPeoWgLBAph8Pd/EqD52GjRRb6rzTUDFhOb6tPB67hrh3p3QWFYDg1vgY7sIqEW\n/h+mi5X964XrxMaQGp2NbR6UcZUbG/ST8Oraehq0WBy6G3AadwwSydGbPIHbj40Q\nkUAEbLjz3HJtT31r/l/vgtRaZAQ1RqTwj5QxVLj8wlr2H2N/np5qDqd+seQrTztJ\n1MDDFW+A9h1e/mPmFhu1SotoQ1ARHccUgN1ISSJc6Muz/oJrdOixECPqnLMK+rOo\nXQmrBFhyXYrI2UEq5ANydKx8169lpf27a2r6Tn+LOj3LEflWsEn0iI2p2gJi4D9L\nhid36HWHb+WonItqf3EXpGebr3xGibO6hR3bE4gho74Pck47vyXn3+B4HXQHiLsB\n8r7To2zCt9CVZOhxtP4WVsLoTaHPDVfPEkXPSyeMM0H0f5roXhkcyOnbB/Qe+VLi\n/k0RwXTV4p0ycsTOrGPh1RzwAO9znHn6Z3YjaIeMic4RgKmzwv8B7cW60LR1H/sG\nG9dcEtjuFa2d6V8jO8no\n=2Bty\n-----END PGP SIGNATURE-----", "payload": "tree 8a10bb092c5adea8b94ecbf5c4c415adb008fecf\nparent eaf71f8d1034f16140791f566cab3f3c9a0bf96a\nauthor Andrew Paseltiner <apaseltiner@gmail.com> 1472173007 -0400\ncommitter Andrew Paseltiner <apaseltiner@gmail.com> 1472207856 -0400\n\nReplace unnecessary uses of `TraitObject` with casts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b10df7f24828b09759277cc3a9c18c493c38ce0", "html_url": "https://github.com/rust-lang/rust/commit/2b10df7f24828b09759277cc3a9c18c493c38ce0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b10df7f24828b09759277cc3a9c18c493c38ce0/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "html_url": "https://github.com/rust-lang/rust/commit/eaf71f8d1034f16140791f566cab3f3c9a0bf96a"}], "stats": {"total": 47, "additions": 9, "deletions": 38}, "files": [{"sha": "c8a78f84f185768fde245c014c5d9bf29559833a", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b10df7f24828b09759277cc3a9c18c493c38ce0/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b10df7f24828b09759277cc3a9c18c493c38ce0/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=2b10df7f24828b09759277cc3a9c18c493c38ce0", "patch": "@@ -67,7 +67,6 @@ use core::mem;\n use core::ops::{CoerceUnsized, Deref, DerefMut};\n use core::ops::{BoxPlace, Boxed, InPlace, Place, Placer};\n use core::ptr::{self, Unique};\n-use core::raw::TraitObject;\n use core::convert::From;\n \n /// A value that represents the heap. This is the default place that the `box`\n@@ -428,12 +427,8 @@ impl Box<Any> {\n     pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any>> {\n         if self.is::<T>() {\n             unsafe {\n-                // Get the raw representation of the trait object\n-                let raw = Box::into_raw(self);\n-                let to: TraitObject = mem::transmute::<*mut Any, TraitObject>(raw);\n-\n-                // Extract the data pointer\n-                Ok(Box::from_raw(to.data as *mut T))\n+                let raw: *mut Any = Box::into_raw(self);\n+                Ok(Box::from_raw(raw as *mut T))\n             }\n         } else {\n             Err(self)"}, {"sha": "c6453da3f4697d5f660634cf59a088a4197059ea", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b10df7f24828b09759277cc3a9c18c493c38ce0/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b10df7f24828b09759277cc3a9c18c493c38ce0/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=2b10df7f24828b09759277cc3a9c18c493c38ce0", "patch": "@@ -91,7 +91,7 @@\n #![cfg_attr(stage0, feature(unsafe_no_drop_flag))]\n #![feature(unsize)]\n \n-#![cfg_attr(not(test), feature(fused, raw, fn_traits, placement_new_protocol))]\n+#![cfg_attr(not(test), feature(fused, fn_traits, placement_new_protocol))]\n #![cfg_attr(test, feature(test, box_heap))]\n \n // Allow testing this library"}, {"sha": "a3018a46eea22063545331e6937609597a98654d", "filename": "src/libcore/any.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b10df7f24828b09759277cc3a9c18c493c38ce0/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b10df7f24828b09759277cc3a9c18c493c38ce0/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=2b10df7f24828b09759277cc3a9c18c493c38ce0", "patch": "@@ -72,8 +72,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use fmt;\n-use mem::transmute;\n-use raw::TraitObject;\n use intrinsics;\n use marker::Reflect;\n \n@@ -199,11 +197,7 @@ impl Any {\n     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n         if self.is::<T>() {\n             unsafe {\n-                // Get the raw representation of the trait object\n-                let to: TraitObject = transmute(self);\n-\n-                // Extract the data pointer\n-                Some(&*(to.data as *const T))\n+                Some(&*(self as *const Any as *const T))\n             }\n         } else {\n             None\n@@ -240,11 +234,7 @@ impl Any {\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n             unsafe {\n-                // Get the raw representation of the trait object\n-                let to: TraitObject = transmute(self);\n-\n-                // Extract the data pointer\n-                Some(&mut *(to.data as *const T as *mut T))\n+                Some(&mut *(self as *mut Any as *mut T))\n             }\n         } else {\n             None"}, {"sha": "ab537f39bf96a268a2c8161ca30e70cce9b0a9ec", "filename": "src/libstd/error.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2b10df7f24828b09759277cc3a9c18c493c38ce0/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b10df7f24828b09759277cc3a9c18c493c38ce0/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=2b10df7f24828b09759277cc3a9c18c493c38ce0", "patch": "@@ -54,7 +54,6 @@ use fmt::{self, Debug, Display};\n use marker::Reflect;\n use mem::transmute;\n use num;\n-use raw::TraitObject;\n use str;\n use string;\n \n@@ -326,11 +325,7 @@ impl Error + 'static {\n     pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n         if self.is::<T>() {\n             unsafe {\n-                // Get the raw representation of the trait object\n-                let to: TraitObject = transmute(self);\n-\n-                // Extract the data pointer\n-                Some(&*(to.data as *const T))\n+                Some(&*(self as *const Error as *const T))\n             }\n         } else {\n             None\n@@ -344,11 +339,7 @@ impl Error + 'static {\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n             unsafe {\n-                // Get the raw representation of the trait object\n-                let to: TraitObject = transmute(self);\n-\n-                // Extract the data pointer\n-                Some(&mut *(to.data as *const T as *mut T))\n+                Some(&mut *(self as *mut Error as *mut T))\n             }\n         } else {\n             None\n@@ -409,13 +400,8 @@ impl Error {\n     pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<Error>> {\n         if self.is::<T>() {\n             unsafe {\n-                // Get the raw representation of the trait object\n-                let raw = Box::into_raw(self);\n-                let to: TraitObject =\n-                    transmute::<*mut Error, TraitObject>(raw);\n-\n-                // Extract the data pointer\n-                Ok(Box::from_raw(to.data as *mut T))\n+                let raw: *mut Error = Box::into_raw(self);\n+                Ok(Box::from_raw(raw as *mut T))\n             }\n         } else {\n             Err(self)"}]}