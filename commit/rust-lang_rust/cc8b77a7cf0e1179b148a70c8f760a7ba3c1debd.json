{"sha": "cc8b77a7cf0e1179b148a70c8f760a7ba3c1debd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjOGI3N2E3Y2YwZTExNzliMTQ4YTcwYzhmNzYwYTdiYTNjMWRlYmQ=", "commit": {"author": {"name": "Canop", "email": "cano.petrole@gmail.com", "date": "2020-10-03T08:29:11Z"}, "committer": {"name": "Canop", "email": "cano.petrole@gmail.com", "date": "2020-10-23T09:41:19Z"}, "message": "fix naming unconsistency between function doc and prototype", "tree": {"sha": "b8799ce12933d055b3b6a365933dc77cf0fc7bdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8799ce12933d055b3b6a365933dc77cf0fc7bdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc8b77a7cf0e1179b148a70c8f760a7ba3c1debd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8b77a7cf0e1179b148a70c8f760a7ba3c1debd", "html_url": "https://github.com/rust-lang/rust/commit/cc8b77a7cf0e1179b148a70c8f760a7ba3c1debd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc8b77a7cf0e1179b148a70c8f760a7ba3c1debd/comments", "author": {"login": "Canop", "id": 617006, "node_id": "MDQ6VXNlcjYxNzAwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/617006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Canop", "html_url": "https://github.com/Canop", "followers_url": "https://api.github.com/users/Canop/followers", "following_url": "https://api.github.com/users/Canop/following{/other_user}", "gists_url": "https://api.github.com/users/Canop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Canop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Canop/subscriptions", "organizations_url": "https://api.github.com/users/Canop/orgs", "repos_url": "https://api.github.com/users/Canop/repos", "events_url": "https://api.github.com/users/Canop/events{/privacy}", "received_events_url": "https://api.github.com/users/Canop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Canop", "id": 617006, "node_id": "MDQ6VXNlcjYxNzAwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/617006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Canop", "html_url": "https://github.com/Canop", "followers_url": "https://api.github.com/users/Canop/followers", "following_url": "https://api.github.com/users/Canop/following{/other_user}", "gists_url": "https://api.github.com/users/Canop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Canop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Canop/subscriptions", "organizations_url": "https://api.github.com/users/Canop/orgs", "repos_url": "https://api.github.com/users/Canop/repos", "events_url": "https://api.github.com/users/Canop/events{/privacy}", "received_events_url": "https://api.github.com/users/Canop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60a96cae336b621be3a5e01cf6c87649b327f836", "url": "https://api.github.com/repos/rust-lang/rust/commits/60a96cae336b621be3a5e01cf6c87649b327f836", "html_url": "https://github.com/rust-lang/rust/commit/60a96cae336b621be3a5e01cf6c87649b327f836"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "8fd3bfe77b8008e56968983cb430c7b2fcd772fb", "filename": "library/core/src/option.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cc8b77a7cf0e1179b148a70c8f760a7ba3c1debd/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8b77a7cf0e1179b148a70c8f760a7ba3c1debd/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=cc8b77a7cf0e1179b148a70c8f760a7ba3c1debd", "patch": "@@ -566,8 +566,7 @@ impl<T> Option<T> {\n     // Setting a new value\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Inserts `v` into the option then returns a mutable reference\n-    /// to the contained value.\n+    /// Inserts `value` into the option then returns a mutable reference to it.\n     ///\n     /// # Example\n     ///\n@@ -585,8 +584,8 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"option_insert\", reason = \"newly added\", issue = \"none\")]\n-    pub fn insert(&mut self, val: T) -> &mut T {\n-        *self = Some(val);\n+    pub fn insert(&mut self, value: T) -> &mut T {\n+        *self = Some(value);\n \n         match self {\n             Some(v) => v,\n@@ -825,7 +824,7 @@ impl<T> Option<T> {\n     // Entry-like operations to insert if None and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Inserts `v` into the option if it is [`None`], then\n+    /// Inserts `value` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n     /// # Examples\n@@ -844,12 +843,12 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n-    pub fn get_or_insert(&mut self, val: T) -> &mut T {\n-        self.get_or_insert_with(|| val)\n+    pub fn get_or_insert(&mut self, value: T) -> &mut T {\n+        self.get_or_insert_with(|| value)\n     }\n \n-    /// Inserts a value computed from `f` into the option if it is [`None`], then\n-    /// returns a mutable reference to the contained value.\n+    /// Inserts a value computed from `f` into the option if it is [`None`],\n+    /// then returns a mutable reference to the contained value.\n     ///\n     /// # Examples\n     ///"}]}