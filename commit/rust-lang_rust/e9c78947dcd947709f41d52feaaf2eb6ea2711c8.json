{"sha": "e9c78947dcd947709f41d52feaaf2eb6ea2711c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5Yzc4OTQ3ZGNkOTQ3NzA5ZjQxZDUyZmVhYWYyZWI2ZWEyNzExYzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-01-18T12:59:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-02-06T20:58:01Z"}, "message": "add the ability to skip leak check within a snapshot\n\nThe intention is that coherence code will skip the leak check and\ndetermine whether two impls *would have* overlapped, and then issue a\nwarning.", "tree": {"sha": "6d5bed3965a0f0c4f060bca7217ef909e2be7a56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d5bed3965a0f0c4f060bca7217ef909e2be7a56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9c78947dcd947709f41d52feaaf2eb6ea2711c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c78947dcd947709f41d52feaaf2eb6ea2711c8", "html_url": "https://github.com/rust-lang/rust/commit/e9c78947dcd947709f41d52feaaf2eb6ea2711c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9c78947dcd947709f41d52feaaf2eb6ea2711c8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f", "html_url": "https://github.com/rust-lang/rust/commit/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "d25d186f4d74e86756fc66abca5f134b78748db9", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9c78947dcd947709f41d52feaaf2eb6ea2711c8/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c78947dcd947709f41d52feaaf2eb6ea2711c8/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=e9c78947dcd947709f41d52feaaf2eb6ea2711c8", "patch": "@@ -128,6 +128,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         placeholder_map: &PlaceholderMap<'tcx>,\n         snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> RelateResult<'tcx, ()> {\n+        // If the user gave `-Zno-leak-check`, or we have been\n+        // configured to skip the leak check, then skip the leak check\n+        // completely. The leak check is deprecated. Any legitimate\n+        // subtyping errors that it would have caught will now be\n+        // caught later on, during region checking. However, we\n+        // continue to use it for a transition period.\n+        if self.tcx.sess.opts.debugging_opts.no_leak_check || self.skip_leak_check.get() {\n+            return Ok(());\n+        }\n+\n         self.borrow_region_constraints().leak_check(\n             self.tcx,\n             overly_polymorphic,"}, {"sha": "35863a3a89a73073287468e9507e31da1ce725a5", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e9c78947dcd947709f41d52feaaf2eb6ea2711c8/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c78947dcd947709f41d52feaaf2eb6ea2711c8/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=e9c78947dcd947709f41d52feaaf2eb6ea2711c8", "patch": "@@ -125,6 +125,13 @@ pub struct InferCtxt<'a, 'tcx> {\n     /// order, represented by its upper and lower bounds.\n     pub type_variables: RefCell<type_variable::TypeVariableTable<'tcx>>,\n \n+    /// If set, this flag causes us to skip the 'leak check' during\n+    /// higher-ranked subtyping operations. This flag is a temporary one used\n+    /// to manage the removal of the leak-check: for the time being, we still run the\n+    /// leak-check, but we issue warnings. This flag can only be set to true\n+    /// when entering a snapshot.\n+    skip_leak_check: Cell<bool>,\n+\n     /// Map from const parameter variable to the kind of const it represents.\n     const_unification_table: RefCell<ut::UnificationTable<ut::InPlace<ty::ConstVid<'tcx>>>>,\n \n@@ -550,6 +557,7 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n                 tainted_by_errors_flag: Cell::new(false),\n                 err_count_on_creation: tcx.sess.err_count(),\n                 in_snapshot: Cell::new(false),\n+                skip_leak_check: Cell::new(false),\n                 region_obligations: RefCell::new(vec![]),\n                 universe: Cell::new(ty::UniverseIndex::ROOT),\n             })\n@@ -593,6 +601,7 @@ pub struct CombinedSnapshot<'a, 'tcx> {\n     region_obligations_snapshot: usize,\n     universe: ty::UniverseIndex,\n     was_in_snapshot: bool,\n+    was_skip_leak_check: bool,\n     _in_progress_tables: Option<Ref<'a, ty::TypeckTables<'tcx>>>,\n }\n \n@@ -720,6 +729,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             region_obligations_snapshot: self.region_obligations.borrow().len(),\n             universe: self.universe(),\n             was_in_snapshot: in_snapshot,\n+            was_skip_leak_check: self.skip_leak_check.get(),\n             // Borrow tables \"in progress\" (i.e., during typeck)\n             // to ban writes from within a snapshot to them.\n             _in_progress_tables: self.in_progress_tables.map(|tables| tables.borrow()),\n@@ -738,11 +748,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             region_obligations_snapshot,\n             universe,\n             was_in_snapshot,\n+            was_skip_leak_check,\n             _in_progress_tables,\n         } = snapshot;\n \n         self.in_snapshot.set(was_in_snapshot);\n         self.universe.set(universe);\n+        self.skip_leak_check.set(was_skip_leak_check);\n \n         self.projection_cache.borrow_mut().rollback_to(projection_cache_snapshot);\n         self.type_variables.borrow_mut().rollback_to(type_snapshot);\n@@ -765,10 +777,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             region_obligations_snapshot: _,\n             universe: _,\n             was_in_snapshot,\n+            was_skip_leak_check,\n             _in_progress_tables,\n         } = snapshot;\n \n         self.in_snapshot.set(was_in_snapshot);\n+        self.skip_leak_check.set(was_skip_leak_check);\n \n         self.projection_cache.borrow_mut().commit(projection_cache_snapshot);\n         self.type_variables.borrow_mut().commit(type_snapshot);\n@@ -822,6 +836,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         r\n     }\n \n+    /// Execute `f` then unroll any bindings it creates.\n+    pub fn skip_leak_check<R, F>(&self, f: F) -> R\n+    where\n+        F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,\n+    {\n+        debug!(\"probe()\");\n+        let snapshot = self.start_snapshot();\n+        self.skip_leak_check.set(true);\n+        let r = f(&snapshot);\n+        self.rollback_to(\"probe\", snapshot);\n+        r\n+    }\n+\n     /// Scan the constraints produced since `snapshot` began and returns:\n     ///\n     /// - `None` -- if none of them involve \"region outlives\" constraints"}, {"sha": "29290cef2d28825b7e91ad98d959f419692240ad", "filename": "src/librustc/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9c78947dcd947709f41d52feaaf2eb6ea2711c8/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c78947dcd947709f41d52feaaf2eb6ea2711c8/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=e9c78947dcd947709f41d52feaaf2eb6ea2711c8", "patch": "@@ -33,18 +33,6 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n \n         assert!(self.in_snapshot());\n \n-        // If the user gave `-Zno-leak-check`, then skip the leak\n-        // check completely. This is wildly unsound and also not\n-        // unlikely to cause an ICE or two. It is intended for use\n-        // only during a transition period, in which the MIR typeck\n-        // uses the \"universe-style\" check, and the rest of typeck\n-        // uses the more conservative leak check.  Since the leak\n-        // check is more conservative, we can't test the\n-        // universe-style check without disabling it.\n-        if tcx.sess.opts.debugging_opts.no_leak_check {\n-            return Ok(());\n-        }\n-\n         // Go through each placeholder that we created.\n         for (_, &placeholder_region) in placeholder_map {\n             // Find the universe this placeholder inhabits."}]}