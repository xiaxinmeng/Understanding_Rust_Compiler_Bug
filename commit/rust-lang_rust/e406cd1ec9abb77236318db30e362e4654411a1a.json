{"sha": "e406cd1ec9abb77236318db30e362e4654411a1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MDZjZDFlYzlhYmI3NzIzNjMxOGRiMzBlMzYyZTQ2NTQ0MTFhMWE=", "commit": {"author": {"name": "David LeGare", "email": "excaliburhissheath@gmail.com", "date": "2017-05-06T01:35:35Z"}, "committer": {"name": "David LeGare", "email": "excaliburhissheath@gmail.com", "date": "2017-05-06T01:35:35Z"}, "message": "Update documentation in windows::ffi", "tree": {"sha": "fb9789a5aafba215c14beaff890bd14195661c7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb9789a5aafba215c14beaff890bd14195661c7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e406cd1ec9abb77236318db30e362e4654411a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e406cd1ec9abb77236318db30e362e4654411a1a", "html_url": "https://github.com/rust-lang/rust/commit/e406cd1ec9abb77236318db30e362e4654411a1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e406cd1ec9abb77236318db30e362e4654411a1a/comments", "author": {"login": "randomPoison", "id": 1900829, "node_id": "MDQ6VXNlcjE5MDA4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1900829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomPoison", "html_url": "https://github.com/randomPoison", "followers_url": "https://api.github.com/users/randomPoison/followers", "following_url": "https://api.github.com/users/randomPoison/following{/other_user}", "gists_url": "https://api.github.com/users/randomPoison/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomPoison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomPoison/subscriptions", "organizations_url": "https://api.github.com/users/randomPoison/orgs", "repos_url": "https://api.github.com/users/randomPoison/repos", "events_url": "https://api.github.com/users/randomPoison/events{/privacy}", "received_events_url": "https://api.github.com/users/randomPoison/received_events", "type": "User", "site_admin": false}, "committer": {"login": "randomPoison", "id": 1900829, "node_id": "MDQ6VXNlcjE5MDA4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1900829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomPoison", "html_url": "https://github.com/randomPoison", "followers_url": "https://api.github.com/users/randomPoison/followers", "following_url": "https://api.github.com/users/randomPoison/following{/other_user}", "gists_url": "https://api.github.com/users/randomPoison/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomPoison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomPoison/subscriptions", "organizations_url": "https://api.github.com/users/randomPoison/orgs", "repos_url": "https://api.github.com/users/randomPoison/repos", "events_url": "https://api.github.com/users/randomPoison/events{/privacy}", "received_events_url": "https://api.github.com/users/randomPoison/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db16ca7c839c6dcc5a3103b5e0b37239dd21e450", "url": "https://api.github.com/repos/rust-lang/rust/commits/db16ca7c839c6dcc5a3103b5e0b37239dd21e450", "html_url": "https://github.com/rust-lang/rust/commit/db16ca7c839c6dcc5a3103b5e0b37239dd21e450"}], "stats": {"total": 112, "additions": 91, "deletions": 21}, "files": [{"sha": "ea322b9822a9cfeea6c45b41b7974d0404f5f9a7", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 91, "deletions": 21, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/e406cd1ec9abb77236318db30e362e4654411a1a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e406cd1ec9abb77236318db30e362e4654411a1a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=e406cd1ec9abb77236318db30e362e4654411a1a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Windows-specific extensions for the primitives in `std::fs`\n+//! Windows-specific extensions for the primitives in the `std::fs` module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -35,6 +35,25 @@ pub trait FileExt {\n     /// Note that similar to `File::read`, it is not an error to return with a\n     /// short read. When returning from such a short read, the file pointer is\n     /// still updated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    /// let mut buffer = [0; 10];\n+    ///\n+    /// // Read 10 bytes, starting 72 bytes from the\n+    /// // start of the file.\n+    /// file.seek_read(&mut buffer[..], 72)?;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn seek_read(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>;\n \n@@ -52,6 +71,23 @@ pub trait FileExt {\n     /// Note that similar to `File::write`, it is not an error to return a\n     /// short write. When returning from such a short write, the file pointer\n     /// is still updated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut buffer = File::create(\"foo.txt\")?;\n+    ///\n+    /// // Write a byte string starting 72 bytes from\n+    /// // the start of the file.\n+    /// buffer.write(b\"some bytes\", offset)?;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn seek_write(&self, buf: &[u8], offset: u64) -> io::Result<usize>;\n }\n@@ -70,13 +106,13 @@ impl FileExt for fs::File {\n /// Windows-specific extensions to `OpenOptions`\n #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n pub trait OpenOptionsExt {\n-    /// Overrides the `dwDesiredAccess` argument to the call to `CreateFile`\n+    /// Overrides the `dwDesiredAccess` argument to the call to [`CreateFile`]\n     /// with the specified value.\n     ///\n     /// This will override the `read`, `write`, and `append` flags on the\n     /// `OpenOptions` structure. This method provides fine-grained control over\n     /// the permissions to read, write and append data, attributes (like hidden\n-    /// and system) and extended attributes.\n+    /// and system), and extended attributes.\n     ///\n     /// # Examples\n     ///\n@@ -88,16 +124,20 @@ pub trait OpenOptionsExt {\n     /// // to call `stat()` on the file\n     /// let file = OpenOptions::new().access_mode(0).open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn access_mode(&mut self, access: u32) -> &mut Self;\n \n-    /// Overrides the `dwShareMode` argument to the call to `CreateFile` with\n+    /// Overrides the `dwShareMode` argument to the call to [`CreateFile`] with\n     /// the specified value.\n     ///\n     /// By default `share_mode` is set to\n-    /// `FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE`. Specifying\n-    /// less permissions denies others to read from, write to and/or delete the\n-    /// file while it is open.\n+    /// `FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE`. This allows\n+    /// other processes to to read, write, and delete/rename the same file\n+    /// while it is open. Removing any of the flags will prevent other\n+    /// processes from performing the corresponding operation until the file\n+    /// handle is closed.\n     ///\n     /// # Examples\n     ///\n@@ -106,42 +146,46 @@ pub trait OpenOptionsExt {\n     /// use std::os::windows::fs::OpenOptionsExt;\n     ///\n     /// // Do not allow others to read or modify this file while we have it open\n-    /// // for writing\n+    /// // for writing.\n     /// let file = OpenOptions::new().write(true)\n     ///                              .share_mode(0)\n     ///                              .open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn share_mode(&mut self, val: u32) -> &mut Self;\n \n     /// Sets extra flags for the `dwFileFlags` argument to the call to\n-    /// `CreateFile2` (or combines it with `attributes` and `security_qos_flags`\n-    /// to set the `dwFlagsAndAttributes` for `CreateFile`).\n+    /// [`CreateFile2`] to the specified value (or combines it with\n+    /// `attributes` and `security_qos_flags` to set the `dwFlagsAndAttributes`\n+    /// for [`CreateFile`]).\n     ///\n-    /// Custom flags can only set flags, not remove flags set by Rusts options.\n-    /// This options overwrites any previously set custom flags.\n+    /// Custom flags can only set flags, not remove flags set by Rust's options.\n+    /// This option overwrites any previously set custom flags.\n     ///\n     /// # Examples\n     ///\n-    /// ```rust,ignore\n+    /// ```ignore\n     /// extern crate winapi;\n     /// use std::fs::OpenOptions;\n     /// use std::os::windows::fs::OpenOptionsExt;\n     ///\n     /// let mut options = OpenOptions::new();\n     /// options.create(true).write(true);\n-    /// if cfg!(windows) {\n-    ///     options.custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE);\n-    /// }\n+    /// options.custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE);\n     /// let file = options.open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n+    /// [`CreateFile2`]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn custom_flags(&mut self, flags: u32) -> &mut Self;\n \n-    /// Sets the `dwFileAttributes` argument to the call to `CreateFile2` to\n+    /// Sets the `dwFileAttributes` argument to the call to [`CreateFile2`] to\n     /// the specified value (or combines it with `custom_flags` and\n     /// `security_qos_flags` to set the `dwFlagsAndAttributes` for\n-    /// `CreateFile`).\n+    /// [`CreateFile`]).\n     ///\n     /// If a _new_ file is created because it does not yet exist and\n     ///`.create(true)` or `.create_new(true)` are specified, the new file is\n@@ -155,7 +199,7 @@ pub trait OpenOptionsExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust,ignore\n+    /// ```ignore\n     /// extern crate winapi;\n     /// use std::fs::OpenOptions;\n     /// use std::os::windows::fs::OpenOptionsExt;\n@@ -164,12 +208,38 @@ pub trait OpenOptionsExt {\n     ///                              .attributes(winapi::FILE_ATTRIBUTE_HIDDEN)\n     ///                              .open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n+    /// [`CreateFile2`]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn attributes(&mut self, val: u32) -> &mut Self;\n \n-    /// Sets the `dwSecurityQosFlags` argument to the call to `CreateFile2` to\n+    /// Sets the `dwSecurityQosFlags` argument to the call to [`CreateFile2`] to\n     /// the specified value (or combines it with `custom_flags` and `attributes`\n-    /// to set the `dwFlagsAndAttributes` for `CreateFile`).\n+    /// to set the `dwFlagsAndAttributes` for [`CreateFile`]).\n+    ///\n+    /// By default, `security_qos_flags` is set to `SECURITY_ANONYMOUS`. For\n+    /// information about possible values, see [Impersonation Levels] on the\n+    /// Windows Dev Center site.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```ignore\n+    /// use std::fs::OpenOptions;\n+    /// use std::os::windows::fs::OpenOptionsExt;\n+    ///\n+    /// let options = OpenOptions::new();\n+    /// options.write(true).create(true);\n+    ///\n+    /// // Sets the flag value to `SecurityIdentification`.\n+    /// options.security_qos_flags(1);\n+    ///\n+    /// let file = options.open(\"foo.txt\");\n+    /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n+    /// [`CreateFile2`]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx\n+    /// [Impersonation Levels]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa379572.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn security_qos_flags(&mut self, flags: u32) -> &mut OpenOptions;\n }"}]}