{"sha": "776544f011a6a5beccb7923a261b0dcecdd2396a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NjU0NGYwMTFhNmE1YmVjY2I3OTIzYTI2MWIwZGNlY2RkMjM5NmE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-09T23:53:36Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-19T22:19:13Z"}, "message": "Add message to `rustc_on_unimplemented` attributes in core", "tree": {"sha": "1324f0d410e2ec3bd75ea5378a79fbc5a39c8a3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1324f0d410e2ec3bd75ea5378a79fbc5a39c8a3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/776544f011a6a5beccb7923a261b0dcecdd2396a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/776544f011a6a5beccb7923a261b0dcecdd2396a", "html_url": "https://github.com/rust-lang/rust/commit/776544f011a6a5beccb7923a261b0dcecdd2396a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/776544f011a6a5beccb7923a261b0dcecdd2396a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3a1d56ebe34276916f34ffb0fed34d406f73c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a1d56ebe34276916f34ffb0fed34d406f73c55", "html_url": "https://github.com/rust-lang/rust/commit/b3a1d56ebe34276916f34ffb0fed34d406f73c55"}], "stats": {"total": 712, "additions": 394, "deletions": 318}, "files": [{"sha": "752a6c966d51a35bcd4de701b6055f640255d4f9", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1693,7 +1693,10 @@ impl<T: Hash> Hash for Vec<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n+#[rustc_on_unimplemented(\n+    message=\"vector indices are of type `usize` or ranges of `usize`\",\n+    label=\"vector indices are of type `usize` or ranges of `usize`\",\n+)]\n impl<T, I> Index<I> for Vec<T>\n where\n     I: ::core::slice::SliceIndex<[T]>,\n@@ -1707,7 +1710,10 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n+#[rustc_on_unimplemented(\n+    message=\"vector indices are of type `usize` or ranges of `usize`\",\n+    label=\"vector indices are of type `usize` or ranges of `usize`\",\n+)]\n impl<T, I> IndexMut<I> for Vec<T>\n where\n     I: ::core::slice::SliceIndex<[T]>,"}, {"sha": "3626a266ad5d3f0d86cd059ede2c21fbae92c816", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -108,7 +108,10 @@ use self::Ordering::*;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(alias = \"==\")]\n #[doc(alias = \"!=\")]\n-#[rustc_on_unimplemented = \"can't compare `{Self}` with `{Rhs}`\"]\n+#[rustc_on_unimplemented(\n+    message=\"can't compare `{Self}` with `{Rhs}`\",\n+    label=\"no implementation for `{Self} == {Rhs}`\",\n+)]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n     /// This method tests for `self` and `other` values to be equal, and is used\n     /// by `==`.\n@@ -611,7 +614,10 @@ impl PartialOrd for Ordering {\n #[doc(alias = \"<\")]\n #[doc(alias = \"<=\")]\n #[doc(alias = \">=\")]\n-#[rustc_on_unimplemented = \"can't compare `{Self}` with `{Rhs}`\"]\n+#[rustc_on_unimplemented(\n+    message=\"can't compare `{Self}` with `{Rhs}`\",\n+    label=\"no implementation for `{Self} < {Rhs}` and `{Self} > {Rhs}`\",\n+)]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// This method returns an ordering between `self` and `other` values if one exists.\n     ///"}, {"sha": "4b2c1aa551e994ad7470de7480abea31edb20e42", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -104,8 +104,11 @@ use super::LoopState;\n /// assert_eq!(c.0, vec![0, 1, 2, 3, 4]);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be \\\n-                          built from an iterator over elements of type `{A}`\"]\n+#[rustc_on_unimplemented(\n+    message=\"a collection of type `{Self}` cannot be built from an iterator \\\n+             over elements of type `{A}`\",\n+    label=\"a collection of type `{Self}` cannot be built from `std::iter::Iterator<Item={A}>`\",\n+)]\n pub trait FromIterator<A>: Sized {\n     /// Creates a value from an iterator.\n     ///"}, {"sha": "d5416e393f463b3a4ad49fcb79008e1c75160d65", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -39,7 +39,10 @@ use hash::Hasher;\n /// [arc]: ../../std/sync/struct.Arc.html\n /// [ub]: ../../reference/behavior-considered-undefined.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n+#[rustc_on_unimplemented(\n+    message=\"`{Self}` cannot be sent between threads safely\",\n+    label=\"`{Self}` cannot be sent between threads safely\"\n+)]\n pub unsafe auto trait Send {\n     // empty.\n }\n@@ -88,7 +91,10 @@ impl<T: ?Sized> !Send for *mut T { }\n /// [trait object]: ../../book/first-edition/trait-objects.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sized\"]\n-#[rustc_on_unimplemented = \"`{Self}` does not have a constant size known at compile-time\"]\n+#[rustc_on_unimplemented(\n+    message=\"`{Self}` does not have a constant size known at compile-time\",\n+    label=\"`{Self}` does not have a constant size known at compile-time\"\n+)]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n pub trait Sized {\n     // Empty."}, {"sha": "1ac80ecc96ffeb775cd6fc3ffc2d52f018aacbb2", "filename": "src/libcore/ops/index.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -60,7 +60,10 @@\n /// assert_eq!(nucleotide_count[Nucleotide::T], 12);\n /// ```\n #[lang = \"index\"]\n-#[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n+#[rustc_on_unimplemented(\n+    message=\"the type `{Self}` cannot be indexed by `{Idx}`\",\n+    label=\"`{Self}` cannot be indexed by `{Idx}`\",\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[\")]\n@@ -147,7 +150,10 @@ pub trait Index<Idx: ?Sized> {\n /// balance[Side::Left] = Weight::Kilogram(3.0);\n /// ```\n #[lang = \"index_mut\"]\n-#[rustc_on_unimplemented = \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"]\n+#[rustc_on_unimplemented(\n+    message=\"the type `{Self}` cannot be mutably indexed by `{Idx}`\",\n+    label=\"`{Self}` cannot be mutably indexed by `{Idx}`\",\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]"}, {"sha": "2c11c262488b2d04f396ea37e74d9e785971b4f0", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -110,8 +110,10 @@ pub use core::panic::{PanicInfo, Location};\n ///\n /// [`AssertUnwindSafe`]: ./struct.AssertUnwindSafe.html\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[rustc_on_unimplemented = \"the type {Self} may not be safely transferred \\\n-                            across an unwind boundary\"]\n+#[rustc_on_unimplemented(\n+    message=\"the type `{Self}` may not be safely transferred across an unwind boundary\",\n+    label=\"`{Self}` may not be safely transferred across an unwind boundary\",\n+)]\n pub auto trait UnwindSafe {}\n \n /// A marker trait representing types where a shared reference is considered\n@@ -126,9 +128,12 @@ pub auto trait UnwindSafe {}\n /// [`UnsafeCell`]: ../cell/struct.UnsafeCell.html\n /// [`UnwindSafe`]: ./trait.UnwindSafe.html\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[rustc_on_unimplemented = \"the type {Self} may contain interior mutability \\\n-                            and a reference may not be safely transferrable \\\n-                            across a catch_unwind boundary\"]\n+#[rustc_on_unimplemented(\n+    message=\"the type `{Self}` may contain interior mutability and a reference may not be safely \\\n+             transferrable across a catch_unwind boundary\",\n+    label=\"`{Self}` may contain interior mutability and a reference may not be safely \\\n+           transferrable across a catch_unwind boundary\",\n+)]\n pub auto trait RefUnwindSafe {}\n \n /// A simple wrapper around a type to assert that it is unwind safe."}, {"sha": "5d04aa711c1370ecc2e1791baa6fcd124a1304c5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1204,14 +1204,6 @@ impl<'a> Parser<'a> {\n     fn span_fatal_err<S: Into<MultiSpan>>(&self, sp: S, err: Error) -> DiagnosticBuilder<'a> {\n         err.span_err(sp, self.diagnostic())\n     }\n-    fn span_fatal_help<S: Into<MultiSpan>>(&self,\n-                                            sp: S,\n-                                            m: &str,\n-                                            help: &str) -> DiagnosticBuilder<'a> {\n-        let mut err = self.sess.span_diagnostic.struct_span_fatal(sp, m);\n-        err.help(help);\n-        err\n-    }\n     fn bug(&self, m: &str) -> ! {\n         self.sess.span_diagnostic.span_bug(self.span, m)\n     }"}, {"sha": "8c0ce26b294df4caf1c6bf3c10adf8bcc042cbe5", "filename": "src/test/compile-fail/associated-types-unsized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -14,7 +14,7 @@ trait Get {\n }\n \n fn foo<T:Get>(t: T) {\n-    let x = t.get(); //~ ERROR `<T as Get>::Value: std::marker::Sized` is not\n+    let x = t.get(); //~ ERROR `<T as Get>::Value` does not have a constant size known at compile-time\n }\n \n fn main() {"}, {"sha": "7cef3f13dfc2cef2c574a2916f839748471d0aa0", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<T:'static>() {\n-    1.bar::<T>(); //~ ERROR `T: std::marker::Send` is not satisfied\n+    1.bar::<T>(); //~ ERROR `T` cannot be sent between threads safely\n }\n \n trait bar {"}, {"sha": "55b009aef4f16c961568208f8aba179446ab888e", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -13,6 +13,6 @@ trait Trait {}\n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n-    //~| ERROR the trait bound `Trait: std::marker::Sized` is not satisfied\n-    //~| ERROR the trait bound `Trait: std::marker::Sized` is not satisfied\n+    //~| ERROR `Trait` does not have a constant size known at compile-time\n+    //~| ERROR `Trait` does not have a constant size known at compile-time\n }"}, {"sha": "3f7f2adabdfb114d5dae43c5502319c942028642", "filename": "src/test/compile-fail/builtin-superkinds-double-superkind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -14,7 +14,7 @@\n trait Foo : Send+Sync { }\n \n impl <T: Sync+'static> Foo for (T,) { }\n-//~^ ERROR the trait bound `T: std::marker::Send` is not satisfied in `(T,)` [E0277]\n+//~^ ERROR `T` cannot be sent between threads safely [E0277]\n \n impl <T: Send> Foo for (T,T) { }\n //~^ ERROR `T` cannot be shared between threads safely [E0277]"}, {"sha": "88b5a3fbb55b63337fbcd6cb14cacf4f8580f12d", "filename": "src/test/compile-fail/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -22,6 +22,6 @@ struct X<T>(T);\n impl <T:Sync> RequiresShare for X<T> { }\n \n impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n-//~^ ERROR `T: std::marker::Send` is not satisfied\n+//~^ ERROR `T` cannot be sent between threads safely [E0277]\n \n fn main() { }"}, {"sha": "22dc9598d29ca1d373d409a63d9a5c261434a53e", "filename": "src/test/compile-fail/builtin-superkinds-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -14,6 +14,6 @@\n trait Foo : Send { }\n \n impl Foo for std::rc::Rc<i8> { }\n-//~^ ERROR `std::rc::Rc<i8>: std::marker::Send` is not satisfied\n+//~^ ERROR `std::rc::Rc<i8>` cannot be sent between threads safely\n \n fn main() { }"}, {"sha": "e0b2043c1107c80e6fdc81f7565cbdaa94455dac", "filename": "src/test/compile-fail/builtin-superkinds-typaram-not-send.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -12,6 +12,7 @@\n \n trait Foo : Send { }\n \n-impl <T: Sync+'static> Foo for T { } //~ ERROR `T: std::marker::Send` is not satisfied\n+impl <T: Sync+'static> Foo for T { }\n+//~^ ERROR `T` cannot be sent between threads safely\n \n fn main() { }"}, {"sha": "12e9fb30902b5a5dafc6a488393984ebee701f57", "filename": "src/test/compile-fail/closure-bounds-cant-promote-superkind-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -13,7 +13,7 @@ struct X<F> where F: FnOnce() + 'static + Send {\n }\n \n fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n-    //~^ ERROR `F: std::marker::Send` is not satisfied\n+    //~^ ERROR `F` cannot be sent between threads safely\n     return X { field: blk };\n }\n "}, {"sha": "c3cbc90484250a12adfc5f45daab0c88e440a459", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -43,5 +43,5 @@ pub fn main() {\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = *z;\n-    //~^ ERROR `ToBar: std::marker::Sized` is not satisfied\n+    //~^ ERROR `ToBar` does not have a constant size known at compile-time\n }"}, {"sha": "1cd5b51fe34d4e13af4fa9507641647da3608cba", "filename": "src/test/compile-fail/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -45,5 +45,5 @@ pub fn main() {\n     //~| expected type `ToBar`\n     //~| found type `Bar1`\n     //~| expected trait ToBar, found struct `Bar1`\n-    //~| ERROR `ToBar: std::marker::Sized` is not satisfied\n+    //~| ERROR `ToBar` does not have a constant size known at compile-time\n }"}, {"sha": "dcd78ac044cd63c6281172d8c4547a72a95ce3ca", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -47,5 +47,5 @@ pub fn main() {\n     //~| expected type `ToBar`\n     //~| found type `Bar1`\n     //~| expected trait ToBar, found struct `Bar1`\n-    //~| ERROR `ToBar: std::marker::Sized` is not satisfied\n+    //~| ERROR `ToBar` does not have a constant size known at compile-time\n }"}, {"sha": "9ed2ec8d98d22692adce9431c64f0c4d826e53ab", "filename": "src/test/compile-fail/dst-bad-deep-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep-2.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -19,5 +19,5 @@ pub fn main() {\n     let f: ([isize; 3],) = ([5, 6, 7],);\n     let g: &([isize],) = &f;\n     let h: &(([isize],),) = &(*g,);\n-    //~^ ERROR `[isize]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[isize]` does not have a constant size known at compile-time\n }"}, {"sha": "9b575ae4aad30742b1743f497186c9fedc390b64", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -21,5 +21,5 @@ pub fn main() {\n     let f: Fat<[isize; 3]> = Fat { ptr: [5, 6, 7] };\n     let g: &Fat<[isize]> = &f;\n     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n-    //~^ ERROR `[isize]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[isize]` does not have a constant size known at compile-time\n }"}, {"sha": "678eef76fdea55536e12fba07c47bca23368b987", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -16,22 +16,22 @@ impl Foo for [u8] {}\n \n fn test1<T: ?Sized + Foo>(t: &T) {\n     let u: &Foo = t;\n-    //~^ ERROR `T: std::marker::Sized` is not satisfied\n+    //~^ ERROR `T` does not have a constant size known at compile-time\n }\n \n fn test2<T: ?Sized + Foo>(t: &T) {\n     let v: &Foo = t as &Foo;\n-    //~^ ERROR `T: std::marker::Sized` is not satisfied\n+    //~^ ERROR `T` does not have a constant size known at compile-time\n }\n \n fn test3() {\n     let _: &[&Foo] = &[\"hi\"];\n-    //~^ ERROR `str: std::marker::Sized` is not satisfied\n+    //~^ ERROR `str` does not have a constant size known at compile-time\n }\n \n fn test4(x: &[u8]) {\n     let _: &Foo = x as &Foo;\n-    //~^ ERROR `[u8]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[u8]` does not have a constant size known at compile-time\n }\n \n fn main() { }"}, {"sha": "cafd67809f8128d51fb43d2e8fdbcea22db91499", "filename": "src/test/compile-fail/dst-sized-trait-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -15,9 +15,9 @@\n trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n \n impl Foo<[isize]> for usize { }\n-//~^ ERROR `[isize]: std::marker::Sized` is not satisfied\n+//~^ ERROR `[isize]` does not have a constant size known at compile-time\n \n impl Foo<isize> for [usize] { }\n-//~^ ERROR `[usize]: std::marker::Sized` is not satisfied\n+//~^ ERROR `[usize]` does not have a constant size known at compile-time\n \n pub fn main() { }"}, {"sha": "10abb80a2f71b9072c0422bc60926ef4a29fec1b", "filename": "src/test/compile-fail/extern-types-not-sync-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fextern-types-not-sync-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fextern-types-not-sync-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-types-not-sync-send.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -24,5 +24,5 @@ fn main() {\n     //~^ ERROR `A` cannot be shared between threads safely [E0277]\n \n     assert_send::<A>();\n-    //~^ ERROR the trait bound `A: std::marker::Send` is not satisfied\n+    //~^ ERROR `A` cannot be sent between threads safely [E0277]\n }"}, {"sha": "b3e19899a67a8a52a00d485486d26d790a2738ca", "filename": "src/test/compile-fail/extern-types-unsized.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fextern-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fextern-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-types-unsized.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -30,14 +30,14 @@ fn assert_sized<T>() { }\n \n fn main() {\n     assert_sized::<A>();\n-    //~^ ERROR the trait bound `A: std::marker::Sized` is not satisfied\n+    //~^ ERROR `A` does not have a constant size known at compile-time\n \n     assert_sized::<Foo>();\n-    //~^ ERROR the trait bound `A: std::marker::Sized` is not satisfied\n+    //~^ ERROR `A` does not have a constant size known at compile-time\n \n     assert_sized::<Bar<A>>();\n-    //~^ ERROR the trait bound `A: std::marker::Sized` is not satisfied\n+    //~^ ERROR `A` does not have a constant size known at compile-time\n \n     assert_sized::<Bar<Bar<A>>>();\n-    //~^ ERROR the trait bound `A: std::marker::Sized` is not satisfied\n+    //~^ ERROR `A` does not have a constant size known at compile-time\n }"}, {"sha": "7b4954a2d4ec9ea726e89325a234d1ac3b217a22", "filename": "src/test/compile-fail/issue-14366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let _x = \"test\" as &::std::any::Any;\n-//~^ ERROR `str: std::marker::Sized` is not satisfied\n+    //~^ ERROR `str` does not have a constant size known at compile-time\n }"}, {"sha": "0df82de83381b41ef6a6968c605b8a7ad7a3c864", "filename": "src/test/compile-fail/issue-15756.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -15,7 +15,7 @@ fn dft_iter<'a, T>(arg1: Chunks<'a,T>, arg2: ChunksMut<'a,T>)\n {\n     for\n     &mut something\n-//~^ ERROR `[T]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[T]` does not have a constant size known at compile-time\n     in arg2\n     {\n     }"}, {"sha": "13548b06ea18ba4cdd6b3ecf0063a38972f9cae0", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -13,5 +13,5 @@\n \n fn main() {\n     (|| Box::new(*(&[0][..])))();\n-    //~^ ERROR `[{integer}]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[{integer}]` does not have a constant size known at compile-time\n }"}, {"sha": "5faa8885e73191d4f3f3c78e0a337c0b8074be33", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -12,7 +12,7 @@ pub trait AbstractRenderer {}\n \n fn _create_render(_: &()) ->\n     AbstractRenderer\n-//~^ ERROR: `AbstractRenderer + 'static: std::marker::Sized` is not satisfied\n+//~^ ERROR: `AbstractRenderer + 'static` does not have a constant size known at compile-time\n {\n     match 0 {\n         _ => unimplemented!()"}, {"sha": "14b776cb1ff2426ceeb50f81634cd9c2f89fb1b7", "filename": "src/test/compile-fail/issue-18919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -11,7 +11,7 @@\n type FuncType<'f> = Fn(&isize) -> isize + 'f;\n \n fn ho_func(f: Option<FuncType>) {\n-    //~^ ERROR: `for<'r> std::ops::Fn(&'r isize) -> isize: std::marker::Sized` is not satisfied\n+    //~^ ERROR: `for<'r> std::ops::Fn(&'r isize) -> isize` does not have a constant size known at\n }\n \n fn main() {}"}, {"sha": "ab47f687fc23c6803f546d66a13a063d74667e4f", "filename": "src/test/compile-fail/issue-20005.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -15,7 +15,7 @@ trait From<Src> {\n }\n \n trait To {\n-    fn to<Dst>(  //~ ERROR `Self: std::marker::Sized` is not satisfied\n+    fn to<Dst>(  //~ ERROR `Self` does not have a constant size known at compile-time\n         self\n     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n         From::from(self)"}, {"sha": "d8ca00d313f7a609eb9a5967d7c132f26ae36ea9", "filename": "src/test/compile-fail/issue-20433.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-20433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-20433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20433.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -14,5 +14,5 @@ struct The;\n \n impl The {\n     fn iceman(c: Vec<[i32]>) {}\n-    //~^ ERROR the trait bound `[i32]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[i32]` does not have a constant size known at compile-time\n }"}, {"sha": "c5a724bba807af4b1b404a9b61036df93b3f23ec", "filename": "src/test/compile-fail/issue-20605.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -10,7 +10,7 @@\n \n fn changer<'a>(mut things: Box<Iterator<Item=&'a mut u8>>) {\n     for item in *things { *item = 0 }\n-//~^ ERROR the trait bound `std::iter::Iterator<Item=&mut u8>: std::marker::Sized` is not satisfied\n+//~^ ERROR `std::iter::Iterator<Item=&mut u8>` does not have a constant size known at compile-time\n }\n \n fn main() {}"}, {"sha": "b4f952c87d4aae25a705d07395a95812b67fcf1e", "filename": "src/test/compile-fail/issue-21763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -17,5 +17,5 @@ fn foo<T: Send>() {}\n \n fn main() {\n     foo::<HashMap<Rc<()>, Rc<()>>>();\n-    //~^ ERROR: `std::rc::Rc<()>: std::marker::Send` is not satisfied\n+    //~^ ERROR `std::rc::Rc<()>` cannot be sent between threads safely\n }"}, {"sha": "de176486af7dbbdab9498305cb85ff05451d38de", "filename": "src/test/compile-fail/issue-22874.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-22874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-22874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22874.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -10,7 +10,7 @@\n \n struct Table {\n     rows: [[String]],\n-    //~^ ERROR the trait bound `[std::string::String]: std::marker::Sized` is not satisfied [E0277]\n+    //~^ ERROR `[std::string::String]` does not have a constant size known at compile-time\n }\n \n fn f(table: &Table) -> &[String] {"}, {"sha": "fdab3b59d1bb6a41c509092f7b7eb82457b5dd69", "filename": "src/test/compile-fail/issue-23281.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-23281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-23281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23281.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -14,7 +14,7 @@ pub struct Struct;\n \n impl Struct {\n     pub fn function(funs: Vec<Fn() -> ()>) {}\n-    //~^ ERROR the trait bound `std::ops::Fn() + 'static: std::marker::Sized` is not satisfied\n+    //~^ ERROR `std::ops::Fn() + 'static` does not have a constant size known at compile-time\n }\n \n fn main() {}"}, {"sha": "5f36bbcf5fd6a7d95116a7672817263d4ec69eb6", "filename": "src/test/compile-fail/issue-24446.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     static foo: Fn() -> u32 = || -> u32 {\n         //~^ ERROR: mismatched types\n-        //~| ERROR: `std::ops::Fn() -> u32 + 'static: std::marker::Sized` is not satisfied\n+        //~| ERROR: `std::ops::Fn() -> u32 + 'static` does not have a constant size known at compile-time\n         0\n     };\n }"}, {"sha": "123bbf3358d89e58fa608c11d0fc1b4a43a832db", "filename": "src/test/compile-fail/issue-27060-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-27060-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-27060-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27060-2.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -10,7 +10,7 @@\n \n #[repr(packed)]\n pub struct Bad<T: ?Sized> {\n-    data: T, //~ ERROR `T: std::marker::Sized` is not satisfied\n+    data: T, //~ ERROR `T` does not have a constant size known at compile-time\n }\n \n fn main() {}"}, {"sha": "32933fa6176f7c92fffd0c0081a9993dd0811038", "filename": "src/test/compile-fail/issue-27078.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-27078.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-27078.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27078.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -13,7 +13,7 @@\n trait Foo {\n     const BAR: i32;\n     fn foo(self) -> &'static i32 {\n-        //~^ ERROR the trait bound `Self: std::marker::Sized` is not satisfied\n+        //~^ ERROR `Self` does not have a constant size known at compile-time\n         &<Self>::BAR\n     }\n }"}, {"sha": "8f5b68986e52c40d64b519a1c0bcd4ba6460cd64", "filename": "src/test/compile-fail/issue-35988.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-35988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-35988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35988.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -10,7 +10,7 @@\n \n enum E {\n     V([Box<E>]),\n-    //~^ ERROR the trait bound `[std::boxed::Box<E>]: std::marker::Sized` is not satisfied [E0277]\n+    //~^ ERROR `[std::boxed::Box<E>]` does not have a constant size known at compile-time\n }\n \n fn main() {}"}, {"sha": "960099f31934a069e75511d917e63d6cf2240726", "filename": "src/test/compile-fail/issue-38954.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-38954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-38954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-38954.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn _test(ref _p: str) {}\n-//~^ ERROR the trait bound `str: std::marker::Sized` is not satisfied [E0277]\n+//~^ ERROR `str` does not have a constant size known at compile-time\n \n fn main() { }"}, {"sha": "b1e24c818d8a3f68adf592a2b6d6b7f77c21d484", "filename": "src/test/compile-fail/issue-41229-ref-str.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-41229-ref-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-41229-ref-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41229-ref-str.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n pub fn example(ref s: str) {}\n-//~^ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n-//~| `str` does not have a constant size known at compile-time\n-//~| the trait `std::marker::Sized` is not implemented for `str`\n+//~^ ERROR `str` does not have a constant size known at compile-time\n \n fn main() {}"}, {"sha": "89eb5c5ebc18ed0093e3f0d733aa0eb80f7c7989", "filename": "src/test/compile-fail/issue-42312.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-42312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-42312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-42312.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -12,10 +12,10 @@ use std::ops::Deref;\n \n pub trait Foo {\n     fn baz(_: Self::Target) where Self: Deref {}\n-    //~^ ERROR `<Self as std::ops::Deref>::Target: std::marker::Sized` is not satisfied\n+    //~^ ERROR `<Self as std::ops::Deref>::Target` does not have a constant size known at\n }\n \n pub fn f(_: ToString) {}\n-//~^ ERROR the trait bound `std::string::ToString + 'static: std::marker::Sized` is not satisfied\n+//~^ ERROR `std::string::ToString + 'static` does not have a constant size known at compile-time\n \n fn main() { }"}, {"sha": "580625f495530063da275c4b4d72d28b3fc6f9fb", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -15,8 +15,8 @@ struct Struct {\n }\n \n fn new_struct(r: A+'static)\n-    -> Struct { //~^  ERROR `A + 'static: std::marker::Sized` is not satisfied\n-    //~^ ERROR `A + 'static: std::marker::Sized` is not satisfied\n+    -> Struct { //~^  ERROR `A + 'static` does not have a constant size known at compile-time\n+    //~^ ERROR `A + 'static` does not have a constant size known at compile-time\n     Struct { r: r }\n }\n "}, {"sha": "0c19780bcb4cab442589df9fd9f661689308f137", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -34,5 +34,5 @@ struct A {\n \n fn main() {\n     let a = A {v: box B{v: None} as Box<Foo+Send>};\n-    //~^ ERROR `std::rc::Rc<std::cell::RefCell<A>>: std::marker::Send` is not satisfied\n+    //~^ ERROR `std::rc::Rc<std::cell::RefCell<A>>` cannot be sent between threads safely\n }"}, {"sha": "3a0e66f58e0765e0fd48d7a6726ae4451eb1f2bc", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -26,15 +26,15 @@ impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n fn f<T>(val: T) {\n     let t: S<T> = S(marker::PhantomData);\n     let a = &t as &Gettable<T>;\n-    //~^ ERROR : std::marker::Send` is not satisfied\n-    //~^^ ERROR : std::marker::Copy` is not satisfied\n+    //~^ ERROR `T` cannot be sent between threads safely\n+    //~| ERROR : std::marker::Copy` is not satisfied\n }\n \n fn g<T>(val: T) {\n     let t: S<T> = S(marker::PhantomData);\n     let a: &Gettable<T> = &t;\n-    //~^ ERROR : std::marker::Send` is not satisfied\n-    //~^^ ERROR : std::marker::Copy` is not satisfied\n+    //~^ ERROR `T` cannot be sent between threads safely\n+    //~| ERROR : std::marker::Copy` is not satisfied\n }\n \n fn foo<'a>() {"}, {"sha": "43c212b2af58278d8e7efe365edd2254d322e9e4", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -18,5 +18,5 @@ fn bar<F:FnOnce() + Send>(_: F) { }\n fn main() {\n     let x = Rc::new(3);\n     bar(move|| foo(x));\n-    //~^ ERROR : std::marker::Send` is not satisfied\n+    //~^ ERROR `std::rc::Rc<usize>` cannot be sent between threads safely\n }"}, {"sha": "a3eb47be3eed8a4212e2a9a7e233b5c0b25f6dee", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -24,7 +24,8 @@ fn object_ref_with_static_bound_not_ok() {\n }\n \n fn box_object_with_no_bound_not_ok<'a>() {\n-    assert_send::<Box<Dummy>>(); //~ ERROR : std::marker::Send` is not satisfied\n+    assert_send::<Box<Dummy>>();\n+    //~^ ERROR `Dummy` cannot be sent between threads safely\n }\n \n fn object_with_send_bound_ok() {"}, {"sha": "673a6abc5f03df178b0abbf78bf8efc120e75c5b", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -37,7 +37,7 @@ fn test61() {\n // them not ok\n fn test_71<'a>() {\n     assert_send::<Box<Dummy+'a>>();\n-    //~^ ERROR : std::marker::Send` is not satisfied\n+    //~^ ERROR `Dummy + 'a` cannot be sent between threads safely\n }\n \n fn main() { }"}, {"sha": "3a935af200054a0e3d6f20460fb88038cbe15090", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -19,7 +19,8 @@ fn test50() {\n }\n \n fn test53() {\n-    assert_send::<Box<Dummy>>(); //~ ERROR : std::marker::Send` is not satisfied\n+    assert_send::<Box<Dummy>>();\n+    //~^ ERROR `Dummy` cannot be sent between threads safely\n }\n \n // ...unless they are properly bounded"}, {"sha": "e48460a87537f2d5aa62d2d41c6fb0e8d375696e", "filename": "src/test/compile-fail/kindck-send-owned.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -19,7 +19,8 @@ fn test32() { assert_send::<Vec<isize> >(); }\n \n // but not if they own a bad thing\n fn test40() {\n-    assert_send::<Box<*mut u8>>(); //~ ERROR : std::marker::Send` is not satisfied\n+    assert_send::<Box<*mut u8>>();\n+    //~^ ERROR `*mut u8` cannot be sent between threads safely\n }\n \n fn main() { }"}, {"sha": "99b995b0906b4edd66f0a2ee9a1770fd4a4c1389", "filename": "src/test/compile-fail/kindck-send-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -14,7 +14,7 @@ fn assert_send<T:Send>() { }\n \n fn test71<'a>() {\n     assert_send::<*mut &'a isize>();\n-    //~^ ERROR `*mut &'a isize: std::marker::Send` is not satisfied\n+    //~^ ERROR `*mut &'a isize` cannot be sent between threads safely\n }\n \n fn main() {"}, {"sha": "6825963c486470f69e41692e8e1a8f7058ef1fd0", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -33,7 +33,7 @@ fn main() {\n     let x = foo(Port(Rc::new(())));\n \n     thread::spawn(move|| {\n-        //~^ ERROR `std::rc::Rc<()>: std::marker::Send` is not satisfied\n+        //~^ ERROR `std::rc::Rc<()>` cannot be sent between threads safely\n         let y = x;\n         println!(\"{:?}\", y);\n     });"}, {"sha": "83f19ed19efc22a5c0f3c4eb00388e6ea0ad45a9", "filename": "src/test/compile-fail/no_send-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -24,5 +24,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Foo::A(NoSend);\n     bar(x);\n-    //~^ ERROR `NoSend: std::marker::Send` is not satisfied\n+    //~^ ERROR `NoSend` cannot be sent between threads safely\n }"}, {"sha": "d3616d144229c648e8731f9034c7f2ce92946227", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -15,5 +15,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Rc::new(5);\n     bar(x);\n-    //~^ ERROR `std::rc::Rc<{integer}>: std::marker::Send` is not satisfied\n+    //~^ ERROR `std::rc::Rc<{integer}>` cannot be sent between threads safely\n }"}, {"sha": "d38d993e7e8e6f2af7b56da73b498f88b12b981b", "filename": "src/test/compile-fail/no_send-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -23,5 +23,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Foo { a: 5 };\n     bar(x);\n-    //~^ ERROR `Foo: std::marker::Send` is not satisfied\n+    //~^ ERROR `Foo` cannot be sent between threads safely\n }"}, {"sha": "d750851b719e4e691a7691c24255a2480503c6df", "filename": "src/test/compile-fail/not-panic-safe-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-2.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -18,6 +18,6 @@ fn assert<T: UnwindSafe + ?Sized>() {}\n \n fn main() {\n     assert::<Rc<RefCell<i32>>>();\n-    //~^ ERROR `std::cell::UnsafeCell<i32>: std::panic::RefUnwindSafe` is not satisfied\n-    //~^^ ERROR `std::cell::UnsafeCell<usize>: std::panic::RefUnwindSafe` is not satisfied\n+    //~^ ERROR the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a\n+    //~| ERROR the type `std::cell::UnsafeCell<usize>` may contain interior mutability and a\n }"}, {"sha": "cd27b274258ea3d49619ef0622576c6cf22a003e", "filename": "src/test/compile-fail/not-panic-safe-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-3.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -18,6 +18,6 @@ fn assert<T: UnwindSafe + ?Sized>() {}\n \n fn main() {\n     assert::<Arc<RefCell<i32>>>();\n-    //~^ ERROR `std::cell::UnsafeCell<i32>: std::panic::RefUnwindSafe` is not satisfied\n-    //~^^ ERROR `std::cell::UnsafeCell<usize>: std::panic::RefUnwindSafe` is not satisfied\n+    //~^ ERROR the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a\n+    //~| ERROR the type `std::cell::UnsafeCell<usize>` may contain interior mutability and a\n }"}, {"sha": "956eca432c5f06f1602ca0e1a86723c62cce462c", "filename": "src/test/compile-fail/not-panic-safe-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-4.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -17,6 +17,6 @@ fn assert<T: UnwindSafe + ?Sized>() {}\n \n fn main() {\n     assert::<&RefCell<i32>>();\n-    //~^ ERROR `std::cell::UnsafeCell<i32>: std::panic::RefUnwindSafe` is not satisfied\n-    //~^^ ERROR `std::cell::UnsafeCell<usize>: std::panic::RefUnwindSafe` is not satisfied\n+    //~^ ERROR the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a\n+    //~| ERROR the type `std::cell::UnsafeCell<usize>` may contain interior mutability and a\n }"}, {"sha": "d0ca1db52120480d29447df6491d6f3190516b26", "filename": "src/test/compile-fail/not-panic-safe-6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-6.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -17,6 +17,6 @@ fn assert<T: UnwindSafe + ?Sized>() {}\n \n fn main() {\n     assert::<*mut RefCell<i32>>();\n-    //~^ ERROR `std::cell::UnsafeCell<i32>: std::panic::RefUnwindSafe` is not satisfied\n-    //~^^ ERROR `std::cell::UnsafeCell<usize>: std::panic::RefUnwindSafe` is not satisfied\n+    //~^ ERROR the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a\n+    //~| ERROR the type `std::cell::UnsafeCell<usize>` may contain interior mutability and a\n }"}, {"sha": "0ebf3d3fed7b5dcfb97c3764e3319c68148b15d1", "filename": "src/test/compile-fail/not-panic-safe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -16,5 +16,6 @@ use std::panic::UnwindSafe;\n fn assert<T: UnwindSafe + ?Sized>() {}\n \n fn main() {\n-    assert::<&mut i32>(); //~ ERROR: UnwindSafe` is not satisfied\n+    assert::<&mut i32>();\n+    //~^ ERROR the type `&mut i32` may not be safely transferred across an unwind boundary\n }"}, {"sha": "3fb62b8d869284c18aa1a9b88e58f89f72fce7e4", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -22,5 +22,5 @@ pub fn main() {\n     // Unsized type.\n     let arr: &[_] = &[1, 2, 3];\n     let range = *arr..;\n-    //~^ ERROR `[{integer}]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[{integer}]` does not have a constant size known at compile-time\n }"}, {"sha": "78d3702b449caa7613cb167d13d30c4005a2f825", "filename": "src/test/compile-fail/range_traits-1.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Frange_traits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Frange_traits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange_traits-1.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -13,23 +13,23 @@ use std::ops::*;\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n struct AllTheRanges {\n     a: Range<usize>,\n-    //~^ ERROR PartialOrd\n-    //~^^ ERROR Ord\n+    //~^ ERROR can't compare\n+    //~| ERROR Ord\n     b: RangeTo<usize>,\n-    //~^ ERROR PartialOrd\n-    //~^^ ERROR Ord\n+    //~^ ERROR can't compare\n+    //~| ERROR Ord\n     c: RangeFrom<usize>,\n-    //~^ ERROR PartialOrd\n-    //~^^ ERROR Ord\n+    //~^ ERROR can't compare\n+    //~| ERROR Ord\n     d: RangeFull,\n-    //~^ ERROR PartialOrd\n-    //~^^ ERROR Ord\n+    //~^ ERROR can't compare\n+    //~| ERROR Ord\n     e: RangeInclusive<usize>,\n-    //~^ ERROR PartialOrd\n-    //~^^ ERROR Ord\n+    //~^ ERROR can't compare\n+    //~| ERROR Ord\n     f: RangeToInclusive<usize>,\n-    //~^ ERROR PartialOrd\n-    //~^^ ERROR Ord\n+    //~^ ERROR can't compare\n+    //~| ERROR Ord\n }\n \n fn main() {}"}, {"sha": "b5f1ffb977ed630e85a2bebd1c8c09a67a7fb943", "filename": "src/test/compile-fail/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let s: &str = \"hello\";\n-    let c: u8 = s[4]; //~ ERROR `str: std::ops::Index<{integer}>` is not satisfied\n+    let c: u8 = s[4]; //~ ERROR the type `str` cannot be indexed by `{integer}`\n }"}, {"sha": "c25d257d5f860ba182ad8ce20b3f0b84a46dae11", "filename": "src/test/compile-fail/str-mut-idx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -12,10 +12,10 @@ fn bot<T>() -> T { loop {} }\n \n fn mutate(s: &mut str) {\n     s[1..2] = bot();\n-    //~^ ERROR `str: std::marker::Sized` is not satisfied\n-    //~| ERROR `str: std::marker::Sized` is not satisfied\n+    //~^ ERROR `str` does not have a constant size known at compile-time\n+    //~| ERROR `str` does not have a constant size known at compile-time\n     s[1usize] = bot();\n-    //~^ ERROR `str: std::ops::IndexMut<usize>` is not satisfied\n+    //~^ ERROR the type `str` cannot be mutably indexed by `usize`\n }\n \n pub fn main() {}"}, {"sha": "94d2a549a86066d1ad0aa8986004604427e04edd", "filename": "src/test/compile-fail/substs-ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -56,6 +56,6 @@ fn foo<'z>() where &'z (): Sized {\n     //[normal]~| found type `fn() {foo::<'static>}`\n \n     <str as Foo<u8>>::bar;\n-    //[verbose]~^ ERROR `str: std::marker::Sized` is not satisfied\n-    //[normal]~^^ ERROR `str: std::marker::Sized` is not satisfied\n+    //[verbose]~^ ERROR `str` does not have a constant size known at compile-time\n+    //[normal]~^^ ERROR `str` does not have a constant size known at compile-time\n }"}, {"sha": "effee4a70f3429216accfece9ce7f37eed1493f6", "filename": "src/test/compile-fail/trait-bounds-not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -15,7 +15,7 @@ trait Foo {\n // This should emit the less confusing error, not the more confusing one.\n \n fn foo(_x: Foo + Send) {\n-    //~^ ERROR the trait bound `Foo + std::marker::Send + 'static: std::marker::Sized` is not\n+    //~^ ERROR `Foo + std::marker::Send + 'static` does not have a constant size known at compile-time\n }\n \n fn main() { }"}, {"sha": "a272686c535738ab38071e163c12b2c14cc47d73", "filename": "src/test/compile-fail/traits-negative-impls.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -31,40 +31,40 @@ fn dummy() {\n     impl !Send for TestType {}\n \n     Outer(TestType);\n-    //~^ ERROR `dummy::TestType: std::marker::Send` is not satisfied\n-    //~| ERROR `dummy::TestType: std::marker::Send` is not satisfied\n+    //~^ ERROR `dummy::TestType` cannot be sent between threads safely\n+    //~| ERROR `dummy::TestType` cannot be sent between threads safely\n }\n \n fn dummy1b() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send(TestType);\n-    //~^ ERROR `dummy1b::TestType: std::marker::Send` is not satisfied\n+    //~^ ERROR `dummy1b::TestType` cannot be sent between threads safely\n }\n \n fn dummy1c() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send((8, TestType));\n-    //~^ ERROR `dummy1c::TestType: std::marker::Send` is not satisfied\n+    //~^ ERROR `dummy1c::TestType` cannot be sent between threads safely\n }\n \n fn dummy2() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send(Box::new(TestType));\n-    //~^ ERROR `dummy2::TestType: std::marker::Send` is not satisfied\n+    //~^ ERROR `dummy2::TestType` cannot be sent between threads safely\n }\n \n fn dummy3() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send(Box::new(Outer2(TestType)));\n-    //~^ ERROR `dummy3::TestType: std::marker::Send` is not satisfied\n+    //~^ ERROR `dummy3::TestType` cannot be sent between threads safely\n }\n \n fn main() {\n@@ -74,5 +74,5 @@ fn main() {\n     // This will complain about a missing Send impl because `Sync` is implement *just*\n     // for T that are `Send`. Look at #20366 and #19950\n     is_sync(Outer2(TestType));\n-    //~^ ERROR `main::TestType: std::marker::Send` is not satisfied\n+    //~^ ERROR `main::TestType` cannot be sent between threads safely\n }"}, {"sha": "65438e5df8e08e73a2256c0f961038b76ff19227", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-send.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -27,5 +27,5 @@ fn is_send<T: Send>() {}\n fn main() {\n     is_send::<MySendable>();\n     is_send::<MyNotSendable>();\n-    //~^ ERROR `MyNotSendable: std::marker::Send` is not satisfied\n+    //~^ ERROR `MyNotSendable` cannot be sent between threads safely\n }"}, {"sha": "32f22f052c17eea6e144cb76cfb24ff3d63203e9", "filename": "src/test/compile-fail/union/union-unsized.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsized.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -11,13 +11,15 @@\n #![feature(untagged_unions)]\n \n union U {\n-    a: str, //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+    a: str,\n+    //~^ ERROR `str` does not have a constant size known at compile-time\n     b: u8,\n }\n \n union W {\n     a: u8,\n-    b: str, //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+    b: str,\n+    //~^ ERROR `str` does not have a constant size known at compile-time\n }\n \n fn main() {}"}, {"sha": "be1f1dea28cd1a663dd0074f31b454c7140cfffb", "filename": "src/test/compile-fail/unsized-bare-typaram.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -9,5 +9,6 @@\n // except according to those terms.\n \n fn bar<T: Sized>() { }\n-fn foo<T: ?Sized>() { bar::<T>() } //~ ERROR `T: std::marker::Sized` is not satisfied\n+fn foo<T: ?Sized>() { bar::<T>() }\n+//~^ ERROR `T` does not have a constant size known at compile-time\n fn main() { }"}, {"sha": "2041c69da54edf48881edfb2a6a3f8d6618e14b8", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -15,7 +15,7 @@ fn not_sized<T: ?Sized>() { }\n enum Foo<U> { FooSome(U), FooNone }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR `T: std::marker::Sized` is not satisfied\n+//~^ ERROR `T` does not have a constant size known at compile-time\n //\n // Not OK: `T` is not sized.\n "}, {"sha": "5e5280ff3ea391922508b0cc6e68b39a65967c88", "filename": "src/test/compile-fail/unsized-inherent-impl-self-type.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -14,7 +14,8 @@\n \n struct S5<Y>(Y);\n \n-impl<X: ?Sized> S5<X> { //~ ERROR E0277\n+impl<X: ?Sized> S5<X> {\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n }\n \n fn main() { }"}, {"sha": "830ac5d6c207bb904fcf5367f518d869a2d82d49", "filename": "src/test/compile-fail/unsized-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -15,14 +15,14 @@ fn not_sized<T: ?Sized>() { }\n struct Foo<T> { data: T }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR `T: std::marker::Sized` is not satisfied\n+//~^ ERROR `T` does not have a constant size known at compile-time\n //\n // Not OK: `T` is not sized.\n \n struct Bar<T: ?Sized> { data: T }\n fn bar1<T: ?Sized>() { not_sized::<Bar<T>>() }\n fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-//~^ ERROR `T: std::marker::Sized` is not satisfied\n+//~^ ERROR `T` does not have a constant size known at compile-time\n //\n // Not OK: `Bar<T>` is not sized, but it should be.\n "}, {"sha": "9bf4cf7a0bb20635b0877354c4ea50c9556d2d5d", "filename": "src/test/compile-fail/unsized-trait-impl-self-type.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -17,7 +17,8 @@ trait T3<Z: ?Sized> {\n \n struct S5<Y>(Y);\n \n-impl<X: ?Sized> T3<X> for S5<X> { //~ ERROR E0277\n+impl<X: ?Sized> T3<X> for S5<X> {\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n }\n \n fn main() { }"}, {"sha": "b3a848954d1046c42f6fffdd69fe9770927ad53a", "filename": "src/test/compile-fail/unsized-trait-impl-trait-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -16,7 +16,7 @@ trait T2<Z> {\n }\n struct S4<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized> T2<X> for S4<X> {\n-    //~^ ERROR `X: std::marker::Sized` is not satisfied\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n }\n \n fn main() { }"}, {"sha": "e08cf8280fdf640a8b87eb96a3471ec60216f407", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -15,7 +15,7 @@ use std::marker;\n // Unbounded.\n fn f1<X: ?Sized>(x: &X) {\n     f2::<X>(x);\n-    //~^ ERROR `X: std::marker::Sized` is not satisfied\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n }\n fn f2<X>(x: &X) {\n }\n@@ -26,7 +26,7 @@ trait T {\n }\n fn f3<X: ?Sized + T>(x: &X) {\n     f4::<X>(x);\n-    //~^ ERROR `X: std::marker::Sized` is not satisfied\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n }\n fn f4<X: T>(x: &X) {\n }\n@@ -41,20 +41,20 @@ struct S<X: ?Sized> {\n \n fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n     f5(x1);\n-    //~^ ERROR `X: std::marker::Sized` is not satisfied\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n     f6(x2); // ok\n }\n \n // Test some tuples.\n fn f9<X: ?Sized>(x1: Box<S<X>>) {\n     f5(&(*x1, 34));\n-    //~^ ERROR `X: std::marker::Sized` is not satisfied\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n }\n \n fn f10<X: ?Sized>(x1: Box<S<X>>) {\n     f5(&(32, *x1));\n-    //~^ ERROR `X: std::marker::Sized` is not satisfied\n-    //~| ERROR `X: std::marker::Sized` is not satisfied\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~| ERROR `X` does not have a constant size known at compile-time\n }\n \n pub fn main() {"}, {"sha": "1fb32da5e319f7e1099430eb83cdc25c640ca8fd", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -11,27 +11,33 @@\n // Test `?Sized` types not allowed in fields (except the last one).\n \n struct S1<X: ?Sized> {\n-    f1: X, //~ ERROR `X: std::marker::Sized` is not satisfied\n+    f1: X,\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n     f2: isize,\n }\n struct S2<X: ?Sized> {\n     f: isize,\n-    g: X, //~ ERROR `X: std::marker::Sized` is not satisfied\n+    g: X,\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n     h: isize,\n }\n struct S3 {\n-    f: str, //~ ERROR `str: std::marker::Sized` is not satisfied\n+    f: str,\n+    //~^ ERROR `str` does not have a constant size known at compile-time\n     g: [usize]\n }\n struct S4 {\n-    f: [u8], //~ ERROR `[u8]: std::marker::Sized` is not satisfied\n+    f: [u8],\n+    //~^ ERROR `[u8]` does not have a constant size known at compile-time\n     g: usize\n }\n enum E<X: ?Sized> {\n-    V1(X, isize), //~ERROR `X: std::marker::Sized` is not satisfied\n+    V1(X, isize),\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n }\n enum F<X: ?Sized> {\n-    V2{f1: X, f: isize}, //~ERROR `X: std::marker::Sized` is not satisfied\n+    V2{f1: X, f: isize},\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n }\n \n pub fn main() {"}, {"sha": "7ce0e1eb4d850ead8610198818fb8afa39667f48", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -14,28 +14,41 @@ trait T {}\n \n fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n     let _: W; // <-- this is OK, no bindings created, no initializer.\n-    let _: (isize, (X, isize)); //~ERROR `X: std::marker::Sized` is not satisfie\n-    let y: Y; //~ERROR `Y: std::marker::Sized` is not satisfied\n-    let y: (isize, (Z, usize)); //~ERROR `Z: std::marker::Sized` is not satisfied\n+    let _: (isize, (X, isize));\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n+    let y: Y;\n+    //~^ ERROR `Y` does not have a constant size known at compile-time\n+    let y: (isize, (Z, usize));\n+    //~^ ERROR `Z` does not have a constant size known at compile-time\n }\n fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n-    let y: X; //~ERROR `X: std::marker::Sized` is not satisfied\n-    let y: (isize, (Y, isize)); //~ERROR `Y: std::marker::Sized` is not satisfied\n+    let y: X;\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n+    let y: (isize, (Y, isize));\n+    //~^ ERROR `Y` does not have a constant size known at compile-time\n }\n \n fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-    let y: X = *x1; //~ERROR `X: std::marker::Sized` is not satisfied\n-    let y = *x2; //~ERROR `X: std::marker::Sized` is not satisfied\n-    let (y, z) = (*x3, 4); //~ERROR `X: std::marker::Sized` is not satisfied\n+    let y: X = *x1;\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n+    let y = *x2;\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n+    let (y, z) = (*x3, 4);\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n }\n fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-    let y: X = *x1;         //~ERROR `X: std::marker::Sized` is not satisfied\n-    let y = *x2;            //~ERROR `X: std::marker::Sized` is not satisfied\n-    let (y, z) = (*x3, 4); //~ERROR `X: std::marker::Sized` is not satisfied\n+    let y: X = *x1;\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n+    let y = *x2;\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n+    let (y, z) = (*x3, 4);\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n }\n \n-fn g1<X: ?Sized>(x: X) {} //~ERROR `X: std::marker::Sized` is not satisfied\n-fn g2<X: ?Sized + T>(x: X) {} //~ERROR `X: std::marker::Sized` is not satisfied\n+fn g1<X: ?Sized>(x: X) {}\n+//~^ ERROR `X` does not have a constant size known at compile-time\n+fn g2<X: ?Sized + T>(x: X) {}\n+//~^ ERROR `X` does not have a constant size known at compile-time\n \n pub fn main() {\n }"}, {"sha": "8a3d78f0827160e39022a2f49d64e4adab81fe3d", "filename": "src/test/compile-fail/unsized7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized7.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -20,7 +20,7 @@ trait T1<Z: T> {\n \n struct S3<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized + T> T1<X> for S3<X> {\n-    //~^ ERROR `X: std::marker::Sized` is not satisfied\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n }\n \n fn main() { }"}, {"sha": "61ee622e21be9f30ae6605bad34268f82b5ffbe9", "filename": "src/test/ui/const-unsized.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -11,16 +11,16 @@\n use std::fmt::Debug;\n \n const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n-//~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n+//~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at\n \n const CONST_FOO: str = *\"foo\";\n-//~^ ERROR `str: std::marker::Sized` is not satisfied\n+//~^ ERROR `str` does not have a constant size known at compile-time\n \n static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n-//~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n+//~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at\n \n static STATIC_BAR: str = *\"bar\";\n-//~^ ERROR `str: std::marker::Sized` is not satisfied\n+//~^ ERROR `str` does not have a constant size known at compile-time\n \n fn main() {\n     println!(\"{:?} {:?} {:?} {:?}\", &CONST_0, &CONST_FOO, &STATIC_1, &STATIC_BAR);"}, {"sha": "ca434541cc285e8e9a3aed635bdb32efa96f46be", "filename": "src/test/ui/const-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n+error[E0277]: `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n   --> $DIR/const-unsized.rs:13:29\n    |\n LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n@@ -7,7 +7,7 @@ LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n    = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n    = note: constant expressions must have a statically known size\n \n-error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+error[E0277]: `str` does not have a constant size known at compile-time\n   --> $DIR/const-unsized.rs:16:24\n    |\n LL | const CONST_FOO: str = *\"foo\";\n@@ -16,7 +16,7 @@ LL | const CONST_FOO: str = *\"foo\";\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: constant expressions must have a statically known size\n \n-error[E0277]: the trait bound `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n+error[E0277]: `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n   --> $DIR/const-unsized.rs:19:31\n    |\n LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n@@ -25,7 +25,7 @@ LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n    = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n    = note: constant expressions must have a statically known size\n \n-error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+error[E0277]: `str` does not have a constant size known at compile-time\n   --> $DIR/const-unsized.rs:22:26\n    |\n LL | static STATIC_BAR: str = *\"bar\";"}, {"sha": "313aa1f706e9320b186743ce46dcd6d7d5db648d", "filename": "src/test/ui/error-codes/E0277-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -24,5 +24,5 @@ fn is_send<T: Send>() { }\n \n fn main() {\n     is_send::<Foo>();\n-    //~^ ERROR the trait bound `*const u8: std::marker::Send` is not satisfied in `Foo`\n+    //~^ ERROR `*const u8` cannot be sent between threads safely\n }"}, {"sha": "32776f028b4cec69fc7657c3c899c625b3fbb807", "filename": "src/test/ui/error-codes/E0277-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `*const u8: std::marker::Send` is not satisfied in `Foo`\n+error[E0277]: `*const u8` cannot be sent between threads safely\n   --> $DIR/E0277-2.rs:26:5\n    |\n LL |     is_send::<Foo>();"}, {"sha": "9ff2ef4da90bcff6a78a50e196259ac8a74b7321", "filename": "src/test/ui/error-codes/E0277.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -21,7 +21,7 @@ fn some_func<T: Foo>(foo: T) {\n }\n \n fn f(p: Path) { }\n-//~^ ERROR the trait bound `[u8]: std::marker::Sized` is not satisfied in `std::path::Path`\n+//~^ ERROR `[u8]` does not have a constant size known at compile-time\n \n fn main() {\n     some_func(5i32);"}, {"sha": "9cfd42b9c195d16b472544253ef74ba991250bee", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `[u8]: std::marker::Sized` is not satisfied in `std::path::Path`\n+error[E0277]: `[u8]` does not have a constant size known at compile-time\n   --> $DIR/E0277.rs:23:6\n    |\n LL | fn f(p: Path) { }"}, {"sha": "3c6d87e059a2fcd53c1e4f70af8e1d5221588c07", "filename": "src/test/ui/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -87,7 +87,7 @@ LL | | }\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+error[E0277]: `str` does not have a constant size known at compile-time\n   --> $DIR/feature-gate-trivial_bounds.rs:62:1\n    |\n LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n@@ -97,7 +97,7 @@ LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: the trait bound `A + 'static: std::marker::Sized` is not satisfied in `Dst<A + 'static>`\n+error[E0277]: `A + 'static` does not have a constant size known at compile-time\n   --> $DIR/feature-gate-trivial_bounds.rs:65:1\n    |\n LL | / fn unsized_local() where Dst<A>: Sized { //~ ERROR\n@@ -110,7 +110,7 @@ LL | | }\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+error[E0277]: `str` does not have a constant size known at compile-time\n   --> $DIR/feature-gate-trivial_bounds.rs:69:1\n    |\n LL | / fn return_str() -> str where str: Sized { //~ ERROR"}, {"sha": "165e27025973d9114d3c856e89244a7522b8b618", "filename": "src/test/ui/generator/sized-yield.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -14,8 +14,10 @@ use std::ops::Generator;\n \n fn main() {\n    let s = String::from(\"foo\");\n-   let mut gen = move || { //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+   let mut gen = move || {\n+   //~^ ERROR `str` does not have a constant size known at compile-time\n        yield s[..];\n    };\n-   unsafe { gen.resume(); } //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+   unsafe { gen.resume(); }\n+   //~^ ERROR `str` does not have a constant size known at compile-time\n }"}, {"sha": "45f0665905368b22bd816cd2819218a4e70a6516", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,19 +1,20 @@\n-error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+error[E0277]: `str` does not have a constant size known at compile-time\n   --> $DIR/sized-yield.rs:17:26\n    |\n-LL |      let mut gen = move || { //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+LL |      let mut gen = move || {\n    |  __________________________^\n+LL | |    //~^ ERROR `str` does not have a constant size known at compile-time\n LL | |        yield s[..];\n LL | |    };\n    | |____^ `str` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: the yield type of a generator must have a statically known size\n \n-error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n-  --> $DIR/sized-yield.rs:20:17\n+error[E0277]: `str` does not have a constant size known at compile-time\n+  --> $DIR/sized-yield.rs:21:17\n    |\n-LL |    unsafe { gen.resume(); } //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+LL |    unsafe { gen.resume(); }\n    |                 ^^^^^^ `str` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`"}, {"sha": "f6b64b394fc12580dfceb696ee1799170aea1713", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -25,7 +25,7 @@ fn cycle1() -> impl Clone {\n     //~^ ERROR cycle detected\n     //~| ERROR cycle detected\n     send(cycle2().clone());\n-    //~^ ERROR Send` is not satisfied\n+    //~^ ERROR `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n \n     Rc::new(Cell::new(5))\n }"}, {"sha": "b34facd2d39ce471e76832022c5f3ca92d66377f", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -47,7 +47,7 @@ LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires processing `cycle1::{{exist-impl-Trait}}`, completing the cycle\n \n-error[E0277]: the trait bound `std::rc::Rc<std::string::String>: std::marker::Send` is not satisfied in `impl std::clone::Clone`\n+error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak.rs:27:5\n    |\n LL |     send(cycle2().clone());"}, {"sha": "3c61543a711bd8f3762378c6a025d10ebd253e41", "filename": "src/test/ui/impl-trait/auto-trait-leak2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -23,10 +23,10 @@ fn send<T: Send>(_: T) {}\n \n fn main() {\n     send(before());\n-    //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n+    //~^ ERROR `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n \n     send(after());\n-    //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n+    //~^ ERROR `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n }\n \n // Deferred path, main has to wait until typeck finishes,"}, {"sha": "fb00c41f79c8f4c4e0fcbd357602c31bb8023ae7", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied in `impl std::ops::Fn<(i32,)>`\n+error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak2.rs:25:5\n    |\n LL |     send(before());\n@@ -13,7 +13,7 @@ note: required by `send`\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied in `impl std::ops::Fn<(i32,)>`\n+error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak2.rs:28:5\n    |\n LL |     send(after());"}, {"sha": "b0288463e9157432aa11bacb1c07e9d1d40b3e3c", "filename": "src/test/ui/interior-mutability/interior-mutability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -12,5 +12,6 @@ use std::cell::Cell;\n use std::panic::catch_unwind;\n fn main() {\n     let mut x = Cell::new(22);\n-    catch_unwind(|| { x.set(23); }); //~ ERROR the trait bound\n+    catch_unwind(|| { x.set(23); });\n+    //~^ ERROR the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a\n }"}, {"sha": "f2aecc55ccb41ad3daf01e42fcbc3c998408b72d", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `std::cell::UnsafeCell<i32>: std::panic::RefUnwindSafe` is not satisfied in `std::cell::Cell<i32>`\n+error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/interior-mutability.rs:15:5\n    |\n-LL |     catch_unwind(|| { x.set(23); }); //~ ERROR the trait bound\n-   |     ^^^^^^^^^^^^ the type std::cell::UnsafeCell<i32> may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+LL |     catch_unwind(|| { x.set(23); });\n+   |     ^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `std::cell::Cell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n    = note: required because it appears within the type `std::cell::Cell<i32>`"}, {"sha": "86785f24f3637fbc9a9a059ece035cdd9c5dff5d", "filename": "src/test/ui/mismatched_types/binops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -13,6 +13,6 @@ fn main() {\n     2 as usize - Some(1); //~ ERROR cannot subtract `std::option::Option<{integer}>` from `usize`\n     3 * (); //~ ERROR cannot multiply `()` to `{integer}`\n     4 / \"\"; //~ ERROR cannot divide `{integer}` by `&str`\n-    5 < String::new(); //~ ERROR is not satisfied\n-    6 == Ok(1); //~ ERROR is not satisfied\n+    5 < String::new(); //~ ERROR can't compare `{integer}` with `std::string::String`\n+    6 == Ok(1); //~ ERROR can't compare `{integer}` with `std::result::Result<{integer}, _>`\n }"}, {"sha": "4c6d95efadb1557fa071bb0c560f8e00f6bcb4cd", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -30,19 +30,19 @@ LL |     4 / \"\"; //~ ERROR cannot divide `{integer}` by `&str`\n    |\n    = help: the trait `std::ops::Div<&str>` is not implemented for `{integer}`\n \n-error[E0277]: the trait bound `{integer}: std::cmp::PartialOrd<std::string::String>` is not satisfied\n+error[E0277]: can't compare `{integer}` with `std::string::String`\n   --> $DIR/binops.rs:16:7\n    |\n-LL |     5 < String::new(); //~ ERROR is not satisfied\n-   |       ^ can't compare `{integer}` with `std::string::String`\n+LL |     5 < String::new(); //~ ERROR can't compare `{integer}` with `std::string::String`\n+   |       ^ no implementation for `{integer} < std::string::String` and `{integer} > std::string::String`\n    |\n    = help: the trait `std::cmp::PartialOrd<std::string::String>` is not implemented for `{integer}`\n \n-error[E0277]: the trait bound `{integer}: std::cmp::PartialEq<std::result::Result<{integer}, _>>` is not satisfied\n+error[E0277]: can't compare `{integer}` with `std::result::Result<{integer}, _>`\n   --> $DIR/binops.rs:17:7\n    |\n-LL |     6 == Ok(1); //~ ERROR is not satisfied\n-   |       ^^ can't compare `{integer}` with `std::result::Result<{integer}, _>`\n+LL |     6 == Ok(1); //~ ERROR can't compare `{integer}` with `std::result::Result<{integer}, _>`\n+   |       ^^ no implementation for `{integer} == std::result::Result<{integer}, _>`\n    |\n    = help: the trait `std::cmp::PartialEq<std::result::Result<{integer}, _>>` is not implemented for `{integer}`\n "}, {"sha": "7ec9593d2dec7f275b871f6c1c7f15bfa7003d59", "filename": "src/test/ui/mismatched_types/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -60,7 +60,7 @@ fn main()\n \n     let _ = 42usize as *const [u8]; //~ ERROR is invalid\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n-    let _ = fat_v as *const Foo; //~ ERROR is not satisfied\n+    let _ = fat_v as *const Foo; //~ ERROR `[u8]` does not have a constant size known at compile-time\n     let _ = foo as *const str; //~ ERROR is invalid\n     let _ = foo as *mut str; //~ ERROR is invalid\n     let _ = main as *mut str; //~ ERROR is invalid\n@@ -69,7 +69,7 @@ fn main()\n     let _ = fat_sv as usize; //~ ERROR is invalid\n \n     let a : *const str = \"hello\";\n-    let _ = a as *const Foo; //~ ERROR is not satisfied\n+    let _ = a as *const Foo; //~ ERROR `str` does not have a constant size known at compile-time\n \n     // check no error cascade\n     let _ = main.f as *const u32; //~ ERROR no field"}, {"sha": "2b00c20e201ff203924d3b1b4c9385feb4377ed5", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -216,19 +216,19 @@ LL |     let _ = cf as *const Bar; //~ ERROR is invalid\n    |\n    = note: vtable kinds may not match\n \n-error[E0277]: the trait bound `[u8]: std::marker::Sized` is not satisfied\n+error[E0277]: `[u8]` does not have a constant size known at compile-time\n   --> $DIR/cast-rfc0401.rs:63:13\n    |\n-LL |     let _ = fat_v as *const Foo; //~ ERROR is not satisfied\n+LL |     let _ = fat_v as *const Foo; //~ ERROR `[u8]` does not have a constant size known at compile-time\n    |             ^^^^^ `[u8]` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: required for the cast to the object type `Foo`\n \n-error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+error[E0277]: `str` does not have a constant size known at compile-time\n   --> $DIR/cast-rfc0401.rs:72:13\n    |\n-LL |     let _ = a as *const Foo; //~ ERROR is not satisfied\n+LL |     let _ = a as *const Foo; //~ ERROR `str` does not have a constant size known at compile-time\n    |             ^ `str` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`"}, {"sha": "43f13d45684e8c7ee46cdf5d1ce08fc74422e91d", "filename": "src/test/ui/partialeq_help.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fpartialeq_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fpartialeq_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpartialeq_help.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `&T: std::cmp::PartialEq<T>` is not satisfied\n+error[E0277]: can't compare `&T` with `T`\n   --> $DIR/partialeq_help.rs:12:7\n    |\n LL |     a == b; //~ ERROR E0277\n-   |       ^^ can't compare `&T` with `T`\n+   |       ^^ no implementation for `&T == T`\n    |\n    = help: the trait `std::cmp::PartialEq<T>` is not implemented for `&T`\n    = help: consider adding a `where &T: std::cmp::PartialEq<T>` bound"}, {"sha": "f6cdb05394a470cedb6a281be39d21d5a28b2475", "filename": "src/test/ui/resolve/issue-5035-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -11,6 +11,7 @@\n trait I {}\n type K = I+'static;\n \n-fn foo(_x: K) {} //~ ERROR: `I + 'static: std::marker::Sized` is not satisfied\n+fn foo(_x: K) {}\n+//~^ ERROR `I + 'static` does not have a constant size known at compile-time\n \n fn main() {}"}, {"sha": "554e97a12815cd725b2cc2b48208f54d849e9a61", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,7 +1,7 @@\n-error[E0277]: the trait bound `I + 'static: std::marker::Sized` is not satisfied\n+error[E0277]: `I + 'static` does not have a constant size known at compile-time\n   --> $DIR/issue-5035-2.rs:14:8\n    |\n-LL | fn foo(_x: K) {} //~ ERROR: `I + 'static: std::marker::Sized` is not satisfied\n+LL | fn foo(_x: K) {}\n    |        ^^ `I + 'static` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `I + 'static`"}, {"sha": "f6b75981a662b6db095ecd5e7f957e90be9092ea", "filename": "src/test/ui/suggestions/str-array-assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -15,7 +15,7 @@ fn main() {\n   let u: &str = if true { s[..2] } else { s };\n   //~^ ERROR mismatched types\n   let v = s[..2];\n-  //~^ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+  //~^ ERROR `str` does not have a constant size known at compile-time\n   let w: &str = s[..2];\n   //~^ ERROR mismatched types\n }"}, {"sha": "91e86e344b41c4eb36d0e5ee81e68c0becbe1606", "filename": "src/test/ui/suggestions/str-array-assignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -19,7 +19,7 @@ LL |   let u: &str = if true { s[..2] } else { s };\n    = note: expected type `&str`\n               found type `str`\n \n-error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+error[E0277]: `str` does not have a constant size known at compile-time\n   --> $DIR/str-array-assignment.rs:17:7\n    |\n LL |   let v = s[..2];"}, {"sha": "7962dbea3711f57f001fe4528f638955cf653249", "filename": "src/test/ui/trait-suggest-where-clause.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -15,10 +15,10 @@ struct Misc<T:?Sized>(T);\n fn check<T: Iterator, U: ?Sized>() {\n     // suggest a where-clause, if needed\n     mem::size_of::<U>();\n-    //~^ ERROR `U: std::marker::Sized` is not satisfied\n+    //~^ ERROR `U` does not have a constant size known at compile-time\n \n     mem::size_of::<Misc<U>>();\n-    //~^ ERROR `U: std::marker::Sized` is not satisfied\n+    //~^ ERROR `U` does not have a constant size known at compile-time\n \n     // ... even if T occurs as a type parameter\n \n@@ -36,10 +36,10 @@ fn check<T: Iterator, U: ?Sized>() {\n     // ... and also not if the error is not related to the type\n \n     mem::size_of::<[T]>();\n-    //~^ ERROR `[T]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[T]` does not have a constant size known at compile-time\n \n     mem::size_of::<[&U]>();\n-    //~^ ERROR `[&U]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[&U]` does not have a constant size known at compile-time\n }\n \n fn main() {"}, {"sha": "d31e92880372114f3d0703d120f43fb5d3eb78ea", "filename": "src/test/ui/trait-suggest-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `U: std::marker::Sized` is not satisfied\n+error[E0277]: `U` does not have a constant size known at compile-time\n   --> $DIR/trait-suggest-where-clause.rs:17:5\n    |\n LL |     mem::size_of::<U>();\n@@ -8,7 +8,7 @@ LL |     mem::size_of::<U>();\n    = help: consider adding a `where U: std::marker::Sized` bound\n    = note: required by `std::mem::size_of`\n \n-error[E0277]: the trait bound `U: std::marker::Sized` is not satisfied in `Misc<U>`\n+error[E0277]: `U` does not have a constant size known at compile-time\n   --> $DIR/trait-suggest-where-clause.rs:20:5\n    |\n LL |     mem::size_of::<Misc<U>>();\n@@ -45,7 +45,7 @@ LL |     <Misc<_> as From<T>>::from;\n    |\n    = note: required by `std::convert::From::from`\n \n-error[E0277]: the trait bound `[T]: std::marker::Sized` is not satisfied\n+error[E0277]: `[T]` does not have a constant size known at compile-time\n   --> $DIR/trait-suggest-where-clause.rs:38:5\n    |\n LL |     mem::size_of::<[T]>();\n@@ -54,7 +54,7 @@ LL |     mem::size_of::<[T]>();\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n    = note: required by `std::mem::size_of`\n \n-error[E0277]: the trait bound `[&U]: std::marker::Sized` is not satisfied\n+error[E0277]: `[&U]` does not have a constant size known at compile-time\n   --> $DIR/trait-suggest-where-clause.rs:41:5\n    |\n LL |     mem::size_of::<[&U]>();"}, {"sha": "d54414110b1f81c9ebe206d07c4abe7683dcde35", "filename": "src/test/ui/trivial-bounds-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+error[E0277]: `str` does not have a constant size known at compile-time\n   --> $DIR/trivial-bounds-leak.rs:22:25\n    |\n LL | fn cant_return_str() -> str { //~ ERROR"}, {"sha": "92a45db0689680e81b63a003e3200ae583f79eb5", "filename": "src/test/ui/type-check-defaults.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -14,24 +14,24 @@ use std::ops::Add;\n \n struct Foo<T, U: FromIterator<T>>(T, U);\n struct WellFormed<Z = Foo<i32, i32>>(Z);\n-//~^ error: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfied [E0277]\n+//~^ ERROR a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n-//~^ error: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfied [E0277]\n+//~^ ERROR a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n \n struct Bounds<T:Copy=String>(T);\n-//~^ error: the trait bound `std::string::String: std::marker::Copy` is not satisfied [E0277]\n+//~^ ERROR the trait bound `std::string::String: std::marker::Copy` is not satisfied [E0277]\n \n struct WhereClause<T=String>(T) where T: Copy;\n-//~^ error: the trait bound `std::string::String: std::marker::Copy` is not satisfied [E0277]\n+//~^ ERROR the trait bound `std::string::String: std::marker::Copy` is not satisfied [E0277]\n \n trait TraitBound<T:Copy=String> {}\n-//~^ error: the trait bound `std::string::String: std::marker::Copy` is not satisfied [E0277]\n+//~^ ERROR the trait bound `std::string::String: std::marker::Copy` is not satisfied [E0277]\n \n trait Super<T: Copy> { }\n trait Base<T = String>: Super<T> { }\n-//~^ error: the trait bound `T: std::marker::Copy` is not satisfied [E0277]\n+//~^ ERROR the trait bound `T: std::marker::Copy` is not satisfied [E0277]\n \n trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n-//~^ error:  cannot add `u8` to `i32` [E0277]\n+//~^ ERROR cannot add `u8` to `i32` [E0277]\n \n fn main() { }"}, {"sha": "aa124110243a52cc6cdb67cedb742d45237a8843", "filename": "src/test/ui/type-check-defaults.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfied\n+error[E0277]: a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n   --> $DIR/type-check-defaults.rs:16:19\n    |\n LL | struct WellFormed<Z = Foo<i32, i32>>(Z);\n-   |                   ^ a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n+   |                   ^ a collection of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `std::iter::FromIterator<i32>` is not implemented for `i32`\n note: required by `Foo`\n@@ -11,11 +11,11 @@ note: required by `Foo`\n LL | struct Foo<T, U: FromIterator<T>>(T, U);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfied\n+error[E0277]: a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n   --> $DIR/type-check-defaults.rs:18:27\n    |\n LL | struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n-   |                           ^ a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n+   |                           ^ a collection of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `std::iter::FromIterator<i32>` is not implemented for `i32`\n note: required by `Foo`"}, {"sha": "e40c6d11cb32c219ea84a5656eb34751626100ed", "filename": "src/test/ui/union/union-sized-field.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Funion%2Funion-sized-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Funion%2Funion-sized-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -11,16 +11,19 @@\n #![feature(untagged_unions)]\n \n union Foo<T: ?Sized> {\n-    value: T, //~ ERROR the trait bound `T: std::marker::Sized` is not satisfied\n+    value: T,\n+    //~^ ERROR `T` does not have a constant size known at compile-time\n }\n \n struct Foo2<T: ?Sized> {\n-    value: T, //~ ERROR the trait bound `T: std::marker::Sized` is not satisfied\n+    value: T,\n+    //~^ ERROR `T` does not have a constant size known at compile-time\n     t: u32,\n }\n \n enum Foo3<T: ?Sized> {\n-    Value(T), //~ ERROR the trait bound `T: std::marker::Sized` is not satisfied\n+    Value(T),\n+    //~^ ERROR `T` does not have a constant size known at compile-time\n }\n \n fn main() {}"}, {"sha": "ce6de86cff9b97b582f05c554afd4716fe8d3516", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,27 +1,27 @@\n-error[E0277]: the trait bound `T: std::marker::Sized` is not satisfied\n+error[E0277]: `T` does not have a constant size known at compile-time\n   --> $DIR/union-sized-field.rs:14:5\n    |\n-LL |     value: T, //~ ERROR the trait bound `T: std::marker::Sized` is not satisfied\n+LL |     value: T,\n    |     ^^^^^^^^ `T` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of a union may have a dynamically sized type\n \n-error[E0277]: the trait bound `T: std::marker::Sized` is not satisfied\n-  --> $DIR/union-sized-field.rs:18:5\n+error[E0277]: `T` does not have a constant size known at compile-time\n+  --> $DIR/union-sized-field.rs:19:5\n    |\n-LL |     value: T, //~ ERROR the trait bound `T: std::marker::Sized` is not satisfied\n+LL |     value: T,\n    |     ^^^^^^^^ `T` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n-error[E0277]: the trait bound `T: std::marker::Sized` is not satisfied\n-  --> $DIR/union-sized-field.rs:23:11\n+error[E0277]: `T` does not have a constant size known at compile-time\n+  --> $DIR/union-sized-field.rs:25:11\n    |\n-LL |     Value(T), //~ ERROR the trait bound `T: std::marker::Sized` is not satisfied\n+LL |     Value(T),\n    |           ^ `T` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`"}, {"sha": "4e42b92289b3632ed036b2dcbd2e753f2dad3c5a", "filename": "src/test/ui/unsized-enum2.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Funsized-enum2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Funsized-enum2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-enum2.rs?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -30,37 +30,54 @@ struct Path4(PathHelper4);\n \n enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n     // parameter\n-    VA(W), //~ ERROR `W: std::marker::Sized` is not satisfied\n-    VB{x: X}, //~ ERROR `X: std::marker::Sized` is not satisfied\n-    VC(isize, Y), //~ ERROR `Y: std::marker::Sized` is not satisfied\n-    VD{u: isize, x: Z}, //~ ERROR `Z: std::marker::Sized` is not satisfied\n+    VA(W),\n+    //~^ ERROR `W` does not have a constant size known at compile-time\n+    VB{x: X},\n+    //~^ ERROR `X` does not have a constant size known at compile-time\n+    VC(isize, Y),\n+    //~^ ERROR `Y` does not have a constant size known at compile-time\n+    VD{u: isize, x: Z},\n+    //~^ ERROR `Z` does not have a constant size known at compile-time\n \n     // slice / str\n-    VE([u8]), //~ ERROR `[u8]: std::marker::Sized` is not satisfied\n-    VF{x: str}, //~ ERROR `str: std::marker::Sized` is not satisfied\n-    VG(isize, [f32]), //~ ERROR `[f32]: std::marker::Sized` is not satisfied\n-    VH{u: isize, x: [u32]}, //~ ERROR `[u32]: std::marker::Sized` is not satisfied\n+    VE([u8]),\n+    //~^ ERROR `[u8]` does not have a constant size known at compile-time\n+    VF{x: str},\n+    //~^ ERROR `str` does not have a constant size known at compile-time\n+    VG(isize, [f32]),\n+    //~^ ERROR `[f32]` does not have a constant size known at compile-time\n+    VH{u: isize, x: [u32]},\n+    //~^ ERROR `[u32]` does not have a constant size known at compile-time\n \n     // unsized struct\n-    VI(Path1), //~ ERROR `PathHelper1 + 'static: std::marker::Sized` is not satisfied\n-    VJ{x: Path2}, //~ ERROR `PathHelper2 + 'static: std::marker::Sized` is not satisfied\n-    VK(isize, Path3), //~ ERROR `PathHelper3 + 'static: std::marker::Sized` is not satisfied\n-    VL{u: isize, x: Path4}, //~ ERROR `PathHelper4 + 'static: std::marker::Sized` is not satisfied\n+    VI(Path1),\n+    //~^ ERROR `PathHelper1 + 'static` does not have a constant size known at compile-time\n+    VJ{x: Path2},\n+    //~^ ERROR `PathHelper2 + 'static` does not have a constant size known at compile-time\n+    VK(isize, Path3),\n+    //~^ ERROR `PathHelper3 + 'static` does not have a constant size known at compile-time\n+    VL{u: isize, x: Path4},\n+    //~^ ERROR `PathHelper4 + 'static` does not have a constant size known at compile-time\n \n     // plain trait\n-    VM(Foo),  //~ ERROR `Foo + 'static: std::marker::Sized` is not satisfied\n-    VN{x: Bar}, //~ ERROR `Bar + 'static: std::marker::Sized` is not satisfied\n-    VO(isize, FooBar), //~ ERROR `FooBar + 'static: std::marker::Sized` is not satisfied\n-    VP{u: isize, x: BarFoo}, //~ ERROR `BarFoo + 'static: std::marker::Sized` is not satisfied\n+    VM(Foo),\n+    //~^ ERROR `Foo + 'static` does not have a constant size known at compile-time\n+    VN{x: Bar},\n+    //~^ ERROR `Bar + 'static` does not have a constant size known at compile-time\n+    VO(isize, FooBar),\n+    //~^ ERROR `FooBar + 'static` does not have a constant size known at compile-time\n+    VP{u: isize, x: BarFoo},\n+    //~^ ERROR `BarFoo + 'static` does not have a constant size known at compile-time\n \n     // projected\n-    VQ(<&'static [i8] as Deref>::Target), //~ ERROR `[i8]: std::marker::Sized` is not satisfied\n+    VQ(<&'static [i8] as Deref>::Target),\n+    //~^ ERROR `[i8]` does not have a constant size known at compile-time\n     VR{x: <&'static [char] as Deref>::Target},\n-    //~^ ERROR `[char]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[char]` does not have a constant size known at compile-time\n     VS(isize, <&'static [f64] as Deref>::Target),\n-    //~^ ERROR `[f64]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[f64]` does not have a constant size known at compile-time\n     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n-    //~^ ERROR `[i32]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[i32]` does not have a constant size known at compile-time\n }\n \n "}, {"sha": "2784bf5af1b9d47194935ddb3187734c79b137ed", "filename": "src/test/ui/unsized-enum2.stderr", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/776544f011a6a5beccb7923a261b0dcecdd2396a/src%2Ftest%2Fui%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-enum2.stderr?ref=776544f011a6a5beccb7923a261b0dcecdd2396a", "patch": "@@ -1,185 +1,185 @@\n-error[E0277]: the trait bound `W: std::marker::Sized` is not satisfied\n+error[E0277]: `W` does not have a constant size known at compile-time\n   --> $DIR/unsized-enum2.rs:33:8\n    |\n-LL |     VA(W), //~ ERROR `W: std::marker::Sized` is not satisfied\n+LL |     VA(W),\n    |        ^ `W` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `W`\n    = help: consider adding a `where W: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `X: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:34:8\n+error[E0277]: `X` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:35:8\n    |\n-LL |     VB{x: X}, //~ ERROR `X: std::marker::Sized` is not satisfied\n+LL |     VB{x: X},\n    |        ^^^^ `X` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `Y: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:35:15\n+error[E0277]: `Y` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:37:15\n    |\n-LL |     VC(isize, Y), //~ ERROR `Y: std::marker::Sized` is not satisfied\n+LL |     VC(isize, Y),\n    |               ^ `Y` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `Z: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:36:18\n+error[E0277]: `Z` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:39:18\n    |\n-LL |     VD{u: isize, x: Z}, //~ ERROR `Z: std::marker::Sized` is not satisfied\n+LL |     VD{u: isize, x: Z},\n    |                  ^^^^ `Z` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n    = help: consider adding a `where Z: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `[u8]: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:39:8\n+error[E0277]: `[u8]` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:43:8\n    |\n-LL |     VE([u8]), //~ ERROR `[u8]: std::marker::Sized` is not satisfied\n+LL |     VE([u8]),\n    |        ^^^^ `[u8]` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:40:8\n+error[E0277]: `str` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:45:8\n    |\n-LL |     VF{x: str}, //~ ERROR `str: std::marker::Sized` is not satisfied\n+LL |     VF{x: str},\n    |        ^^^^^^ `str` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `[f32]: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:41:15\n+error[E0277]: `[f32]` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:47:15\n    |\n-LL |     VG(isize, [f32]), //~ ERROR `[f32]: std::marker::Sized` is not satisfied\n+LL |     VG(isize, [f32]),\n    |               ^^^^^ `[f32]` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f32]`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `[u32]: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:42:18\n+error[E0277]: `[u32]` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:49:18\n    |\n-LL |     VH{u: isize, x: [u32]}, //~ ERROR `[u32]: std::marker::Sized` is not satisfied\n+LL |     VH{u: isize, x: [u32]},\n    |                  ^^^^^^^^ `[u32]` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u32]`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `Foo + 'static: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:51:8\n+error[E0277]: `Foo + 'static` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:63:8\n    |\n-LL |     VM(Foo),  //~ ERROR `Foo + 'static: std::marker::Sized` is not satisfied\n+LL |     VM(Foo),\n    |        ^^^ `Foo + 'static` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Foo + 'static`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `Bar + 'static: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:52:8\n+error[E0277]: `Bar + 'static` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:65:8\n    |\n-LL |     VN{x: Bar}, //~ ERROR `Bar + 'static: std::marker::Sized` is not satisfied\n+LL |     VN{x: Bar},\n    |        ^^^^^^ `Bar + 'static` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Bar + 'static`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `FooBar + 'static: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:53:15\n+error[E0277]: `FooBar + 'static` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:67:15\n    |\n-LL |     VO(isize, FooBar), //~ ERROR `FooBar + 'static: std::marker::Sized` is not satisfied\n+LL |     VO(isize, FooBar),\n    |               ^^^^^^ `FooBar + 'static` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `FooBar + 'static`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `BarFoo + 'static: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:54:18\n+error[E0277]: `BarFoo + 'static` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:69:18\n    |\n-LL |     VP{u: isize, x: BarFoo}, //~ ERROR `BarFoo + 'static: std::marker::Sized` is not satisfied\n+LL |     VP{u: isize, x: BarFoo},\n    |                  ^^^^^^^^^ `BarFoo + 'static` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `BarFoo + 'static`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `[i8]: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:57:8\n+error[E0277]: `[i8]` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:73:8\n    |\n-LL |     VQ(<&'static [i8] as Deref>::Target), //~ ERROR `[i8]: std::marker::Sized` is not satisfied\n+LL |     VQ(<&'static [i8] as Deref>::Target),\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `[i8]` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `[char]: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:58:8\n+error[E0277]: `[char]` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:75:8\n    |\n LL |     VR{x: <&'static [char] as Deref>::Target},\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `[char]` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[char]`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `[f64]: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:60:15\n+error[E0277]: `[f64]` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:77:15\n    |\n LL |     VS(isize, <&'static [f64] as Deref>::Target),\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `[f64]` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f64]`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `[i32]: std::marker::Sized` is not satisfied\n-  --> $DIR/unsized-enum2.rs:62:18\n+error[E0277]: `[i32]` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:79:18\n    |\n LL |     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `[i32]` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `PathHelper1 + 'static: std::marker::Sized` is not satisfied in `Path1`\n-  --> $DIR/unsized-enum2.rs:45:8\n+error[E0277]: `PathHelper1 + 'static` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:53:8\n    |\n-LL |     VI(Path1), //~ ERROR `PathHelper1 + 'static: std::marker::Sized` is not satisfied\n+LL |     VI(Path1),\n    |        ^^^^^ `PathHelper1 + 'static` does not have a constant size known at compile-time\n    |\n    = help: within `Path1`, the trait `std::marker::Sized` is not implemented for `PathHelper1 + 'static`\n    = note: required because it appears within the type `Path1`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `PathHelper2 + 'static: std::marker::Sized` is not satisfied in `Path2`\n-  --> $DIR/unsized-enum2.rs:46:8\n+error[E0277]: `PathHelper2 + 'static` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:55:8\n    |\n-LL |     VJ{x: Path2}, //~ ERROR `PathHelper2 + 'static: std::marker::Sized` is not satisfied\n+LL |     VJ{x: Path2},\n    |        ^^^^^^^^ `PathHelper2 + 'static` does not have a constant size known at compile-time\n    |\n    = help: within `Path2`, the trait `std::marker::Sized` is not implemented for `PathHelper2 + 'static`\n    = note: required because it appears within the type `Path2`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `PathHelper3 + 'static: std::marker::Sized` is not satisfied in `Path3`\n-  --> $DIR/unsized-enum2.rs:47:15\n+error[E0277]: `PathHelper3 + 'static` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:57:15\n    |\n-LL |     VK(isize, Path3), //~ ERROR `PathHelper3 + 'static: std::marker::Sized` is not satisfied\n+LL |     VK(isize, Path3),\n    |               ^^^^^ `PathHelper3 + 'static` does not have a constant size known at compile-time\n    |\n    = help: within `Path3`, the trait `std::marker::Sized` is not implemented for `PathHelper3 + 'static`\n    = note: required because it appears within the type `Path3`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the trait bound `PathHelper4 + 'static: std::marker::Sized` is not satisfied in `Path4`\n-  --> $DIR/unsized-enum2.rs:48:18\n+error[E0277]: `PathHelper4 + 'static` does not have a constant size known at compile-time\n+  --> $DIR/unsized-enum2.rs:59:18\n    |\n-LL |     VL{u: isize, x: Path4}, //~ ERROR `PathHelper4 + 'static: std::marker::Sized` is not satisfied\n+LL |     VL{u: isize, x: Path4},\n    |                  ^^^^^^^^ `PathHelper4 + 'static` does not have a constant size known at compile-time\n    |\n    = help: within `Path4`, the trait `std::marker::Sized` is not implemented for `PathHelper4 + 'static`"}]}