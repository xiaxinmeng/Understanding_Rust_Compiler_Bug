{"sha": "312c9a37f26d1f0a98fc410109abb961e945b85e", "node_id": "C_kwDOAAsO6NoAKDMxMmM5YTM3ZjI2ZDFmMGE5OGZjNDEwMTA5YWJiOTYxZTk0NWI4NWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-03T14:05:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-03T14:05:44Z"}, "message": "Auto merge of #101792 - lqd:rust-lld, r=petrochenkov\n\nOnly specify `--target` by default for `-Zgcc-ld=lld` on wasm\n\nOn macOS, it's not yet clear which cases of clang/OS/target/SDK version impact how to find ld/lld/rust-lld. The `--target` argument is not needed on our current targets with a vanilla config to do so, but may be in some cases ?\n\nThat is, things look to be different and more subtle than suggested in https://github.com/rust-lang/rust/issues/97402#issuecomment-1147404520.\n\nSpecifying this argument unconditionally currently breaks `-Zgcc-ld=lld` on the 10.7+ targets on x64 macOS. Vanilla configs on x64 and aarch64 don't seem to need it to be able to find `rust-lld`.\n\nThis fixes #101653 on macOS (I've tried on x64 and aarch64: vanilla installs with the most recent command line tools available for each of the OS versions I have access to, `run-make/issue-71519` passes).\n\nI didn't expect the previous PRs to fail because of the existing tests, but CI does not actually run those tests yet, which explains the regressions. I was hoping to fix those in this PR but it's more involved (building lld is required for the tests to run, llvm/lld is not built on the test builders but on the dist builders, the dist builders don't run tests). This PR is just to unblock current users on macOS who have reported issues, but a regression could happen in the future by mistake until then.\n\nr? `@petrochenkov`", "tree": {"sha": "54842336b473d813eae7e9f562a8feb15519c60d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54842336b473d813eae7e9f562a8feb15519c60d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/312c9a37f26d1f0a98fc410109abb961e945b85e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/312c9a37f26d1f0a98fc410109abb961e945b85e", "html_url": "https://github.com/rust-lang/rust/commit/312c9a37f26d1f0a98fc410109abb961e945b85e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/312c9a37f26d1f0a98fc410109abb961e945b85e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b435960c4cfd3975651c7051be56d7f5d6c201ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b435960c4cfd3975651c7051be56d7f5d6c201ab", "html_url": "https://github.com/rust-lang/rust/commit/b435960c4cfd3975651c7051be56d7f5d6c201ab"}, {"sha": "7770b06b06efc4abda75e608e67044a0a344771e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7770b06b06efc4abda75e608e67044a0a344771e", "html_url": "https://github.com/rust-lang/rust/commit/7770b06b06efc4abda75e608e67044a0a344771e"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "36f7e5954bf2ae30543932d264c1667c8fa65602", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/312c9a37f26d1f0a98fc410109abb961e945b85e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312c9a37f26d1f0a98fc410109abb961e945b85e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=312c9a37f26d1f0a98fc410109abb961e945b85e", "patch": "@@ -2822,11 +2822,30 @@ fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n                     // Implement the \"linker flavor\" part of -Zgcc-ld\n                     // by asking cc to use some kind of lld.\n                     cmd.arg(\"-fuse-ld=lld\");\n+\n                     if !flavor.is_gnu() {\n                         // Tell clang to use a non-default LLD flavor.\n                         // Gcc doesn't understand the target option, but we currently assume\n                         // that gcc is not used for Apple and Wasm targets (#97402).\n-                        cmd.arg(format!(\"--target={}\", sess.target.llvm_target));\n+                        //\n+                        // Note that we don't want to do that by default on macOS: e.g. passing a\n+                        // 10.7 target to LLVM works, but not to recent versions of clang/macOS, as\n+                        // shown in issue #101653 and the discussion in PR #101792.\n+                        //\n+                        // It could be required in some cases of cross-compiling with\n+                        // `-Zgcc-ld=lld`, but this is generally unspecified, and we don't know\n+                        // which specific versions of clang, macOS SDK, host and target OS\n+                        // combinations impact us here.\n+                        //\n+                        // So we do a simple first-approximation until we know more of what the\n+                        // Apple targets require (and which would be handled prior to hitting this\n+                        // `-Zgcc-ld=lld` codepath anyway), but the expectation is that until then\n+                        // this should be manually passed if needed. We specify the target when\n+                        // targeting a different linker flavor on macOS, and that's also always\n+                        // the case when targeting WASM.\n+                        if sess.target.linker_flavor != sess.host.linker_flavor {\n+                            cmd.arg(format!(\"--target={}\", sess.target.llvm_target));\n+                        }\n                     }\n                 }\n             }"}]}