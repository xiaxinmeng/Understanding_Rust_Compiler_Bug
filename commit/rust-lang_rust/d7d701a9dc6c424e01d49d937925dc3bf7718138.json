{"sha": "d7d701a9dc6c424e01d49d937925dc3bf7718138", "node_id": "C_kwDOAAsO6NoAKGQ3ZDcwMWE5ZGM2YzQyNGUwMWQ0OWQ5Mzc5MjVkYzNiZjc3MTgxMzg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-14T12:54:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-22T22:08:42Z"}, "message": "Create specific ConstantHasGenerics for ConstantItemRibKind.", "tree": {"sha": "84fd35f90d55519f20265eadb4a1fbae6099cf0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84fd35f90d55519f20265eadb4a1fbae6099cf0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7d701a9dc6c424e01d49d937925dc3bf7718138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d701a9dc6c424e01d49d937925dc3bf7718138", "html_url": "https://github.com/rust-lang/rust/commit/d7d701a9dc6c424e01d49d937925dc3bf7718138", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7d701a9dc6c424e01d49d937925dc3bf7718138/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7851767419e56280110fe2859bbc15d5cbdd468", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7851767419e56280110fe2859bbc15d5cbdd468", "html_url": "https://github.com/rust-lang/rust/commit/a7851767419e56280110fe2859bbc15d5cbdd468"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "193610ff57d55ece636d18be4be29de822b9b0f3", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d701a9dc6c424e01d49d937925dc3bf7718138/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d701a9dc6c424e01d49d937925dc3bf7718138/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=d7d701a9dc6c424e01d49d937925dc3bf7718138", "patch": "@@ -550,7 +550,7 @@ impl<'a> Resolver<'a> {\n                     }\n                 }\n \n-                if has_generic_params == HasGenericParams::Yes {\n+                if let HasGenericParams::Yes = has_generic_params {\n                     // Try to retrieve the span of the function signature and generate a new\n                     // message with a local type or const parameter.\n                     let sugg_msg = \"try using a local generic parameter instead\";"}, {"sha": "be50eecf4b1284cc2097b9cb385d8f5398792cc0", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7d701a9dc6c424e01d49d937925dc3bf7718138/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d701a9dc6c424e01d49d937925dc3bf7718138/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=d7d701a9dc6c424e01d49d937925dc3bf7718138", "patch": "@@ -13,7 +13,9 @@ use rustc_span::{Span, DUMMY_SP};\n \n use std::ptr;\n \n-use crate::late::{ConstantItemKind, HasGenericParams, PathSource, Rib, RibKind};\n+use crate::late::{\n+    ConstantHasGenerics, ConstantItemKind, HasGenericParams, PathSource, Rib, RibKind,\n+};\n use crate::macros::{sub_namespace_match, MacroRulesScope};\n use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy, Finalize};\n use crate::{ImportKind, LexicalScopeBinding, Module, ModuleKind, ModuleOrUniformRoot};\n@@ -1180,7 +1182,9 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !(trivial == HasGenericParams::Yes || features.generic_const_exprs) {\n+                            if !(trivial == ConstantHasGenerics::Yes\n+                                || features.generic_const_exprs)\n+                            {\n                                 // HACK(min_const_generics): If we encounter `Self` in an anonymous constant\n                                 // we can't easily tell if it's generic at this stage, so we instead remember\n                                 // this and then enforce the self type to be concrete later on.\n@@ -1253,7 +1257,9 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !(trivial == HasGenericParams::Yes || features.generic_const_exprs) {\n+                            if !(trivial == ConstantHasGenerics::Yes\n+                                || features.generic_const_exprs)\n+                            {\n                                 if let Some(span) = finalize {\n                                     self.report_error(\n                                         span,"}, {"sha": "b6fedd838bb33793cf73bba01ae154cd0a44232f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d7d701a9dc6c424e01d49d937925dc3bf7718138/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d701a9dc6c424e01d49d937925dc3bf7718138/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=d7d701a9dc6c424e01d49d937925dc3bf7718138", "patch": "@@ -91,13 +91,20 @@ enum PatBoundCtx {\n }\n \n /// Does this the item (from the item rib scope) allow generic parameters?\n-#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+#[derive(Copy, Clone, Debug)]\n pub(crate) enum HasGenericParams {\n     Yes,\n     No,\n }\n \n-impl HasGenericParams {\n+/// May this constant have generics?\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub(crate) enum ConstantHasGenerics {\n+    Yes,\n+    No,\n+}\n+\n+impl ConstantHasGenerics {\n     fn force_yes_if(self, b: bool) -> Self {\n         if b { Self::Yes } else { self }\n     }\n@@ -136,7 +143,7 @@ pub(crate) enum RibKind<'a> {\n     ///\n     /// The item may reference generic parameters in trivial constant expressions.\n     /// All other constants aren't allowed to use generic params at all.\n-    ConstantItemRibKind(HasGenericParams, Option<(Ident, ConstantItemKind)>),\n+    ConstantItemRibKind(ConstantHasGenerics, Option<(Ident, ConstantItemKind)>),\n \n     /// We passed through a module.\n     ModuleRibKind(Module<'a>),\n@@ -995,7 +1002,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             // non-trivial constants this is doesn't matter.\n                             self.with_constant_rib(\n                                 IsRepeatExpr::No,\n-                                HasGenericParams::Yes,\n+                                ConstantHasGenerics::Yes,\n                                 None,\n                                 |this| {\n                                     this.smart_resolve_path(\n@@ -2251,7 +2258,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             // so it doesn't matter whether this is a trivial constant.\n                             this.with_constant_rib(\n                                 IsRepeatExpr::No,\n-                                HasGenericParams::Yes,\n+                                ConstantHasGenerics::Yes,\n                                 Some((item.ident, constant_item_kind)),\n                                 |this| this.visit_expr(expr),\n                             );\n@@ -2450,7 +2457,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     fn with_constant_rib(\n         &mut self,\n         is_repeat: IsRepeatExpr,\n-        may_use_generics: HasGenericParams,\n+        may_use_generics: ConstantHasGenerics,\n         item: Option<(Ident, ConstantItemKind)>,\n         f: impl FnOnce(&mut Self),\n     ) {\n@@ -2517,7 +2524,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             |this| {\n                                 this.with_constant_rib(\n                                     IsRepeatExpr::No,\n-                                    HasGenericParams::Yes,\n+                                    ConstantHasGenerics::Yes,\n                                     None,\n                                     |this| this.visit_expr(expr),\n                                 )\n@@ -2689,7 +2696,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     self.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Infer), |this| {\n                         this.with_constant_rib(\n                             IsRepeatExpr::No,\n-                            HasGenericParams::Yes,\n+                            ConstantHasGenerics::Yes,\n                             None,\n                             |this| this.visit_expr(expr),\n                         )\n@@ -3696,9 +3703,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.with_constant_rib(\n             is_repeat,\n             if constant.value.is_potential_trivial_const_param() {\n-                HasGenericParams::Yes\n+                ConstantHasGenerics::Yes\n             } else {\n-                HasGenericParams::No\n+                ConstantHasGenerics::No\n             },\n             None,\n             |this| visit::walk_anon_const(this, constant),\n@@ -3707,8 +3714,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n     fn resolve_inline_const(&mut self, constant: &'ast AnonConst) {\n         debug!(\"resolve_anon_const {constant:?}\");\n-        self.with_constant_rib(IsRepeatExpr::No, HasGenericParams::Yes, None, |this| {\n-            visit::walk_anon_const(this, constant);\n+        self.with_constant_rib(IsRepeatExpr::No, ConstantHasGenerics::Yes, None, |this| {\n+            visit::walk_anon_const(this, constant)\n         });\n     }\n \n@@ -3814,9 +3821,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         self.with_constant_rib(\n                             IsRepeatExpr::No,\n                             if argument.is_potential_trivial_const_param() {\n-                                HasGenericParams::Yes\n+                                ConstantHasGenerics::Yes\n                             } else {\n-                                HasGenericParams::No\n+                                ConstantHasGenerics::No\n                             },\n                             None,\n                             |this| {"}]}