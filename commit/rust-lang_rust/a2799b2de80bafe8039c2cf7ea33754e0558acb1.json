{"sha": "a2799b2de80bafe8039c2cf7ea33754e0558acb1", "node_id": "C_kwDOAAsO6NoAKGEyNzk5YjJkZTgwYmFmZTgwMzljMmNmN2VhMzM3NTRlMDU1OGFjYjE", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-05-09T04:23:52Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-07-06T08:59:16Z"}, "message": "fix projectionelem validation", "tree": {"sha": "15d0154e2f164bba6ea95cdabd2260670f9bc895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d0154e2f164bba6ea95cdabd2260670f9bc895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2799b2de80bafe8039c2cf7ea33754e0558acb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2799b2de80bafe8039c2cf7ea33754e0558acb1", "html_url": "https://github.com/rust-lang/rust/commit/a2799b2de80bafe8039c2cf7ea33754e0558acb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2799b2de80bafe8039c2cf7ea33754e0558acb1/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "html_url": "https://github.com/rust-lang/rust/commit/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "56ecc5535285bcc5393f71d18a6b7bd6069b33e0", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a2799b2de80bafe8039c2cf7ea33754e0558acb1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2799b2de80bafe8039c2cf7ea33754e0558acb1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=a2799b2de80bafe8039c2cf7ea33754e0558acb1", "patch": "@@ -12,6 +12,7 @@ use rustc_middle::mir::{\n     Statement, StatementKind, Terminator, TerminatorKind, UnOp, START_BLOCK,\n };\n use rustc_middle::ty::fold::BottomUpFolder;\n+use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n use rustc_mir_dataflow::storage::always_live_locals;\n@@ -275,7 +276,14 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     }\n                 };\n \n-                match parent_ty.ty.kind() {\n+                let kind = match parent_ty.ty.kind() {\n+                    &ty::Opaque(def_id, substs) => {\n+                        self.tcx.bound_type_of(def_id).subst(self.tcx, substs).kind()\n+                    }\n+                    kind => kind,\n+                };\n+\n+                match kind {\n                     ty::Tuple(fields) => {\n                         let Some(f_ty) = fields.get(f.as_usize()) else {\n                             fail_out_of_bounds(self, location);\n@@ -299,12 +307,39 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         };\n                         check_equal(self, location, f_ty);\n                     }\n-                    ty::Generator(_, substs, _) => {\n-                        let substs = substs.as_generator();\n-                        let Some(f_ty) = substs.upvar_tys().nth(f.as_usize()) else {\n-                            fail_out_of_bounds(self, location);\n-                            return;\n+                    &ty::Generator(def_id, substs, _) => {\n+                        let f_ty = if let Some(var) = parent_ty.variant_index {\n+                            let gen_body = if def_id == self.body.source.def_id() {\n+                                self.body\n+                            } else {\n+                                self.tcx.optimized_mir(def_id)\n+                            };\n+\n+                            let Some(layout) = gen_body.generator_layout() else {\n+                                self.fail(location, format!(\"No generator layout for {:?}\", parent_ty));\n+                                return;\n+                            };\n+\n+                            let Some(&local) = layout.variant_fields[var].get(f) else {\n+                                fail_out_of_bounds(self, location);\n+                                return;\n+                            };\n+\n+                            let Some(&f_ty) = layout.field_tys.get(local) else {\n+                                self.fail(location, format!(\"Out of bounds local {:?} for {:?}\", local, parent_ty));\n+                                return;\n+                            };\n+\n+                            f_ty\n+                        } else {\n+                            let Some(f_ty) = substs.as_generator().prefix_tys().nth(f.index()) else {\n+                                fail_out_of_bounds(self, location);\n+                                return;\n+                            };\n+\n+                            f_ty\n                         };\n+\n                         check_equal(self, location, f_ty);\n                     }\n                     _ => {\n@@ -328,6 +363,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         {\n             self.fail(location, format!(\"{:?}, has deref at the wrong place\", place));\n         }\n+\n+        self.super_place(place, cntxt, location);\n     }\n \n     fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {"}, {"sha": "ebc3e2f8c0e314fcf2beba517bca0b533699ff2b", "filename": "src/test/ui/mir/ssa-analysis-regression-50041.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2799b2de80bafe8039c2cf7ea33754e0558acb1/src%2Ftest%2Fui%2Fmir%2Fssa-analysis-regression-50041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2799b2de80bafe8039c2cf7ea33754e0558acb1/src%2Ftest%2Fui%2Fmir%2Fssa-analysis-regression-50041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fssa-analysis-regression-50041.rs?ref=a2799b2de80bafe8039c2cf7ea33754e0558acb1", "patch": "@@ -5,7 +5,7 @@\n #![feature(lang_items)]\n #![no_std]\n \n-struct NonNull<T: ?Sized>(*mut T);\n+struct NonNull<T: ?Sized>(*const T);\n \n struct Unique<T: ?Sized>(NonNull<T>);\n \n@@ -23,7 +23,7 @@ unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n }\n \n #[inline(never)]\n-fn dealloc<T: ?Sized>(_: *mut T) {}\n+fn dealloc<T: ?Sized>(_: *const T) {}\n \n pub struct Foo<T>(T);\n "}]}