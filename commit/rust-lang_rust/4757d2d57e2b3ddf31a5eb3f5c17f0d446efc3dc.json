{"sha": "4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc", "node_id": "C_kwDOAAsO6NoAKDQ3NTdkMmQ1N2UyYjNkZGYzMWE1ZWIzZjVjMTdmMGQ0NDZlZmMzZGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-17T17:27:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-17T17:27:06Z"}, "message": "Rollup merge of #101801 - SparrowLii:query_depth_note, r=estebank\n\nadd note for `layout_of` when query depth overflows\n\nFixes #101747\nAdded `try_find_layout_root` function to add a note for `layout_of` when query depth overflows. This would make the error in #101747 look like this:\n```\nerror: queries overflow the depth limit!\n   |\nnote: Query depth increased by 66 when computing layout of `core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<alloc::boxed::Box<alloc::string::String>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`!\n  --> D:\\rust-backup\\parallel_rust\\query_depth.rs:40:1\n   |\n40 | fn main() {\n   | ^^^^^^^^^\n\nerror: aborting due to previous error\n```\n\ncc ``@semicoleon``", "tree": {"sha": "df70a37f2d37505840e6cdcd2744020c1f956de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df70a37f2d37505840e6cdcd2744020c1f956de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjJgNqCRBK7hj4Ov3rIwAAANgIACqYp1kCUVFUxq38MW/EUroi\nqd+5N/ph6l5R3Hkc/A9PVkNUDocQLTX1iKoVEGzk1Chp7prr/RCMNxKANsgQcAMe\nwTJnx5xS8vWguMVMpQMvKGE0NzX+O/GBpfX87W9dYWAynWPJLB80n/uyzBfcAX5/\nno4l0ruYdfG2pUJ9VXCp2QhR44xDnMgnqFp7Rf9wByjPHmvz8s/hGNlITpEZU601\nOaYRHzzVF9aDN6QnrsntEAbSMHqO/4lQ5dvc0tdNFRCpvp9QhhZznfFHd9LgNI09\nxejx5p1p9TR48YFBD9darhev+ZlCkJYjqSKu+vyxWKn7cYemDDV0otMzC+bIVvQ=\n=l+QJ\n-----END PGP SIGNATURE-----\n", "payload": "tree df70a37f2d37505840e6cdcd2744020c1f956de0\nparent 9c32773a8df5ce1f5065a3cf007c531ce6321b2e\nparent 89fd6ae458c96f7c3be00d93861ed3f0aa53d95b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1663435626 +0200\ncommitter GitHub <noreply@github.com> 1663435626 +0200\n\nRollup merge of #101801 - SparrowLii:query_depth_note, r=estebank\n\nadd note for `layout_of` when query depth overflows\n\nFixes #101747\nAdded `try_find_layout_root` function to add a note for `layout_of` when query depth overflows. This would make the error in #101747 look like this:\n```\nerror: queries overflow the depth limit!\n   |\nnote: Query depth increased by 66 when computing layout of `core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<alloc::boxed::Box<alloc::string::String>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`!\n  --> D:\\rust-backup\\parallel_rust\\query_depth.rs:40:1\n   |\n40 | fn main() {\n   | ^^^^^^^^^\n\nerror: aborting due to previous error\n```\n\ncc ``@semicoleon``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc", "html_url": "https://github.com/rust-lang/rust/commit/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c32773a8df5ce1f5065a3cf007c531ce6321b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c32773a8df5ce1f5065a3cf007c531ce6321b2e", "html_url": "https://github.com/rust-lang/rust/commit/9c32773a8df5ce1f5065a3cf007c531ce6321b2e"}, {"sha": "89fd6ae458c96f7c3be00d93861ed3f0aa53d95b", "url": "https://api.github.com/repos/rust-lang/rust/commits/89fd6ae458c96f7c3be00d93861ed3f0aa53d95b", "html_url": "https://github.com/rust-lang/rust/commit/89fd6ae458c96f7c3be00d93861ed3f0aa53d95b"}], "stats": {"total": 123, "additions": 114, "deletions": 9}, "files": [{"sha": "b914ba52a7353ac219710beaae0eea3814102cef", "filename": "compiler/rustc_error_messages/locales/en-US/query_system.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fquery_system.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fquery_system.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fquery_system.ftl?ref=4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc", "patch": "@@ -23,3 +23,6 @@ query_system_cycle_recursive_trait_alias = trait aliases cannot be recursive\n query_system_cycle_which_requires = ...which requires {$desc}...\n \n query_system_query_overflow = queries overflow the depth limit!\n+    .help = consider increasing the recursion limit by adding a `#![recursion_limit = \"{$suggested_limit}\"]` attribute to your crate (`{$crate_name}`)\n+\n+query_system_layout_of_depth = query depth increased by {$depth} when {$desc}"}, {"sha": "d819f4774d54d1dfd701b30a4d784286ab8674f6", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc", "patch": "@@ -19,8 +19,10 @@ use rustc_query_system::query::{\n     force_query, QueryConfig, QueryContext, QueryDescription, QueryJobId, QueryMap,\n     QuerySideEffects, QueryStackFrame,\n };\n-use rustc_query_system::Value;\n+use rustc_query_system::{LayoutOfDepth, QueryOverflow, Value};\n use rustc_serialize::Decodable;\n+use rustc_session::Limit;\n+use rustc_span::def_id::LOCAL_CRATE;\n use std::any::Any;\n use std::num::NonZeroU64;\n use thin_vec::ThinVec;\n@@ -109,7 +111,7 @@ impl QueryContext for QueryCtxt<'_> {\n         // when accessing the `ImplicitCtxt`.\n         tls::with_related_context(**self, move |current_icx| {\n             if depth_limit && !self.recursion_limit().value_within_limit(current_icx.query_depth) {\n-                self.depth_limit_error();\n+                self.depth_limit_error(token);\n             }\n \n             // Update the `ImplicitCtxt` to point to our new query job.\n@@ -127,6 +129,29 @@ impl QueryContext for QueryCtxt<'_> {\n             })\n         })\n     }\n+\n+    fn depth_limit_error(&self, job: QueryJobId) {\n+        let mut span = None;\n+        let mut layout_of_depth = None;\n+        if let Some(map) = self.try_collect_active_jobs() {\n+            if let Some((info, depth)) = job.try_find_layout_root(map) {\n+                span = Some(info.job.span);\n+                layout_of_depth = Some(LayoutOfDepth { desc: info.query.description, depth });\n+            }\n+        }\n+\n+        let suggested_limit = match self.recursion_limit() {\n+            Limit(0) => Limit(2),\n+            limit => limit * 2,\n+        };\n+\n+        self.sess.emit_fatal(QueryOverflow {\n+            span,\n+            layout_of_depth,\n+            suggested_limit,\n+            crate_name: self.crate_name(LOCAL_CRATE),\n+        });\n+    }\n }\n \n impl<'tcx> QueryCtxt<'tcx> {"}, {"sha": "bececca7585ae98980ac040387536e6883a8b473", "filename": "compiler/rustc_query_system/src/error.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs?ref=4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc", "patch": "@@ -1,5 +1,6 @@\n use rustc_errors::AddSubdiagnostic;\n-use rustc_span::Span;\n+use rustc_session::Limit;\n+use rustc_span::{Span, Symbol};\n \n pub struct CycleStack {\n     pub span: Span,\n@@ -76,5 +77,20 @@ pub struct IncrementCompilation {\n }\n \n #[derive(SessionDiagnostic)]\n+#[help]\n #[diag(query_system::query_overflow)]\n-pub struct QueryOverflow;\n+pub struct QueryOverflow {\n+    #[primary_span]\n+    pub span: Option<Span>,\n+    #[subdiagnostic]\n+    pub layout_of_depth: Option<LayoutOfDepth>,\n+    pub suggested_limit: Limit,\n+    pub crate_name: Symbol,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[note(query_system::layout_of_depth)]\n+pub struct LayoutOfDepth {\n+    pub desc: String,\n+    pub depth: usize,\n+}"}, {"sha": "5987651322af7a871ad6b52a62c76f26452afd3b", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc", "patch": "@@ -23,4 +23,6 @@ pub mod query;\n mod values;\n \n pub use error::HandleCycleError;\n+pub use error::LayoutOfDepth;\n+pub use error::QueryOverflow;\n pub use values::Value;"}, {"sha": "95305eabd0d347ce85f7732737f560288fde2abe", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc", "patch": "@@ -59,6 +59,7 @@ impl QueryJobId {\n     }\n }\n \n+#[derive(Clone)]\n pub struct QueryJobInfo {\n     pub query: QueryStackFrame,\n     pub job: QueryJob,\n@@ -116,10 +117,10 @@ impl QueryJob {\n     }\n }\n \n-#[cfg(not(parallel_compiler))]\n impl QueryJobId {\n     #[cold]\n     #[inline(never)]\n+    #[cfg(not(parallel_compiler))]\n     pub(super) fn find_cycle_in_stack(\n         &self,\n         query_map: QueryMap,\n@@ -156,6 +157,24 @@ impl QueryJobId {\n \n         panic!(\"did not find a cycle\")\n     }\n+\n+    #[cold]\n+    #[inline(never)]\n+    pub fn try_find_layout_root(&self, query_map: QueryMap) -> Option<(QueryJobInfo, usize)> {\n+        let mut last_layout = None;\n+        let mut current_id = Some(*self);\n+        let mut depth = 0;\n+\n+        while let Some(id) = current_id {\n+            let info = query_map.get(&id).unwrap();\n+            if info.query.name == \"layout_of\" {\n+                depth += 1;\n+                last_layout = Some((info.clone(), depth));\n+            }\n+            current_id = info.job.parent;\n+        }\n+        last_layout\n+    }\n }\n \n #[cfg(parallel_compiler)]"}, {"sha": "7a96c53b604814a78d00aa755f541e5f71472b04", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc", "patch": "@@ -14,7 +14,7 @@ pub use self::caches::{\n mod config;\n pub use self::config::{QueryConfig, QueryDescription, QueryVTable};\n \n-use crate::dep_graph::{DepContext, DepNodeIndex, HasDepContext, SerializedDepNodeIndex};\n+use crate::dep_graph::{DepNodeIndex, HasDepContext, SerializedDepNodeIndex};\n use rustc_data_structures::sync::Lock;\n use rustc_errors::Diagnostic;\n use rustc_hir::def::DefKind;\n@@ -123,7 +123,5 @@ pub trait QueryContext: HasDepContext {\n         compute: impl FnOnce() -> R,\n     ) -> R;\n \n-    fn depth_limit_error(&self) {\n-        self.dep_context().sess().emit_fatal(crate::error::QueryOverflow);\n-    }\n+    fn depth_limit_error(&self, job: QueryJobId);\n }"}, {"sha": "e600c1c08e5cfbb702eaef675c60dd171ed0a5ea", "filename": "src/test/ui/query-system/query_depth.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/src%2Ftest%2Fui%2Fquery-system%2Fquery_depth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/src%2Ftest%2Fui%2Fquery-system%2Fquery_depth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquery-system%2Fquery_depth.rs?ref=4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc", "patch": "@@ -0,0 +1,31 @@\n+// build-fail\n+\n+#![recursion_limit = \"64\"]\n+type Byte = Option<Option<Option<Option< Option<Option<Option<Option<\n+    Option<Option<Option<Option< Option<Option<Option<Option<\n+        Option<Option<Option<Option< Option<Option<Option<Option<\n+            Option<Option<Option<Option< Option<Option<Option<Option<\n+                Option<Option<Option<Option< Option<Option<Option<Option<\n+                    Option<Option<Option<Option< Option<Option<Option<Option<\n+                        Option<Option<Option<Option< Option<Option<Option<Option<\n+                            Option<Option<Option<Option< Option<Option<Option<Option<\n+                                Option<Option<Option<Option< Option<Option<Option<Option<\n+                                    Option<Option<Option<Option< Option<Option<Option<Option<\n+                                        Option<Option<Option<Option< Option<Option<Option<Option<\n+                                            Box<String>\n+                                        >>>> >>>>\n+                                    >>>> >>>>\n+                                >>>> >>>>\n+                            >>>> >>>>\n+                        >>>> >>>>\n+                    >>>> >>>>\n+                >>>> >>>>\n+            >>>> >>>>\n+        >>>> >>>>\n+    >>>> >>>>\n+>>>> >>>>;\n+\n+fn main() {\n+//~^ ERROR: queries overflow the depth limit!\n+    println!(\"{}\", std::mem::size_of::<Byte>());\n+}"}, {"sha": "43a18b4e07455cb10b776eab3a3706f8dd366fcd", "filename": "src/test/ui/query-system/query_depth.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/src%2Ftest%2Fui%2Fquery-system%2Fquery_depth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc/src%2Ftest%2Fui%2Fquery-system%2Fquery_depth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquery-system%2Fquery_depth.stderr?ref=4757d2d57e2b3ddf31a5eb3f5c17f0d446efc3dc", "patch": "@@ -0,0 +1,11 @@\n+error: queries overflow the depth limit!\n+  --> $DIR/query_depth.rs:28:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"128\"]` attribute to your crate (`query_depth`)\n+   = note: query depth increased by 66 when computing layout of `core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<alloc::boxed::Box<alloc::string::String>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+\n+error: aborting due to previous error\n+"}]}