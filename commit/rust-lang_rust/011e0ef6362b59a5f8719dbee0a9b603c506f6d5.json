{"sha": "011e0ef6362b59a5f8719dbee0a9b603c506f6d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMWUwZWY2MzYyYjU5YTVmODcxOWRiZWUwYTliNjAzYzUwNmY2ZDU=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-07-31T21:12:05Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-07-31T21:18:39Z"}, "message": "Removed error check in order to prevent ICE", "tree": {"sha": "331c1a7111113832f1fa2633357f0f18b8ef695a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/331c1a7111113832f1fa2633357f0f18b8ef695a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/011e0ef6362b59a5f8719dbee0a9b603c506f6d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/011e0ef6362b59a5f8719dbee0a9b603c506f6d5", "html_url": "https://github.com/rust-lang/rust/commit/011e0ef6362b59a5f8719dbee0a9b603c506f6d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/011e0ef6362b59a5f8719dbee0a9b603c506f6d5/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1799d31847294d6e3816c17679247a5c206e809a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1799d31847294d6e3816c17679247a5c206e809a", "html_url": "https://github.com/rust-lang/rust/commit/1799d31847294d6e3816c17679247a5c206e809a"}], "stats": {"total": 184, "additions": 178, "deletions": 6}, "files": [{"sha": "08a12797a1bcccdd1fa06975e18310e0c9c4b0e8", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/011e0ef6362b59a5f8719dbee0a9b603c506f6d5/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/011e0ef6362b59a5f8719dbee0a9b603c506f6d5/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=011e0ef6362b59a5f8719dbee0a9b603c506f6d5", "patch": "@@ -161,12 +161,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_sig(current_item, tcx.fn_sig(def_id), self.covariant);\n             }\n \n-            _ => {\n-                span_bug!(\n-                    tcx.def_span(def_id),\n-                    \"`build_constraints_for_item` unsupported for this item\"\n-                );\n-            }\n+            _ => {}\n         }\n     }\n "}, {"sha": "12ea850c8f686f79a3c39950df8f10e19874f9b6", "filename": "src/test/ui/const-generics/nested-type.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/011e0ef6362b59a5f8719dbee0a9b603c506f6d5/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/011e0ef6362b59a5f8719dbee0a9b603c506f6d5/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs?ref=011e0ef6362b59a5f8719dbee0a9b603c506f6d5", "patch": "@@ -0,0 +1,18 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: [u8; {\n+//~^ ERROR cycle detected\n+//~| ERROR cycle detected\n+    struct Foo<const N: usize>;\n+\n+    impl<const N: usize> Foo<N> {\n+        fn value() -> usize {\n+            N\n+        }\n+    }\n+\n+    Foo::<17>::value()\n+}]>;\n+\n+fn main() {}"}, {"sha": "da0e8032404fc53c4c70d28e49821f30b65c9593", "filename": "src/test/ui/const-generics/nested-type.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/011e0ef6362b59a5f8719dbee0a9b603c506f6d5/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/011e0ef6362b59a5f8719dbee0a9b603c506f6d5/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.stderr?ref=011e0ef6362b59a5f8719dbee0a9b603c506f6d5", "patch": "@@ -0,0 +1,159 @@\n+error[E0391]: cycle detected when computing type of `Foo`\n+  --> $DIR/nested-type.rs:4:1\n+   |\n+LL | struct Foo<const N: [u8; {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires computing type of `Foo::N`...\n+  --> $DIR/nested-type.rs:4:18\n+   |\n+LL | struct Foo<const N: [u8; {\n+   |                  ^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires type-checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires computing the variances of `Foo::{{constant}}#0::Foo`...\n+  --> $DIR/nested-type.rs:7:5\n+   |\n+LL |     struct Foo<const N: usize>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires computing the variances for items in this crate...\n+   = note: ...which again requires computing type of `Foo`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/nested-type.rs:1:1\n+   |\n+LL | / #![feature(const_generics)]\n+LL | | #![allow(incomplete_features)]\n+LL | |\n+LL | | struct Foo<const N: [u8; {\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n+error[E0391]: cycle detected when computing type of `Foo`\n+  --> $DIR/nested-type.rs:4:1\n+   |\n+LL | struct Foo<const N: [u8; {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires computing type of `Foo::N`...\n+  --> $DIR/nested-type.rs:4:18\n+   |\n+LL | struct Foo<const N: [u8; {\n+   |                  ^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires type-checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires computing the variances of `Foo::{{constant}}#0::Foo`...\n+  --> $DIR/nested-type.rs:7:5\n+   |\n+LL |     struct Foo<const N: usize>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires computing the variances for items in this crate...\n+   = note: ...which again requires computing type of `Foo`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/nested-type.rs:1:1\n+   |\n+LL | / #![feature(const_generics)]\n+LL | | #![allow(incomplete_features)]\n+LL | |\n+LL | | struct Foo<const N: [u8; {\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0391`."}]}