{"sha": "63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZmE1ZDI0ZTE1YmU3OWMyYTVkZmNjOGIwMjAwYzFkM2ViN2ZmYjQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2018-11-27T20:49:09Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2018-11-27T20:49:09Z"}, "message": "Fix some formatting issues", "tree": {"sha": "7c4bb3540ea97783091f4296511cd5d39775d768", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c4bb3540ea97783091f4296511cd5d39775d768"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE46kBTF5vnyuSPg0W6OiXpYcOQcIFAlv9rcUACgkQ6OiXpYcO\nQcK9wg//fKmjABeREunX7Ed1Vew69YLQPuUuiZ+kNf90G/JIR4YZPHgHgIzJ4h31\ndDkBxnoZB8RAZj/+a9Z2NIe2p4MtXRJrFE8/cwDck8RGizDTMgoUdh8A0bZQIwgI\ng/Fv6QOEsD6FkXIt/HhKQ6ziCqLKtL3ULrZ4dLVsAbU3l1TWtS3oV2If0tbqb1PD\nyIfdMqp5Pu5KlJgfk7uyzzYYzX+arsmUrDuDiREGXIddxzMqzqM4JLJxCug3hswt\nf/KrH9w7M3jz77LsalgJOF4pbQwphX9thxZPk56eYTTi4KewJunbtJqQL06bzP2y\nMQb2ENywQ1fx/HxXKcbt1tQ8pYJOxubqwvEO5ddVitF+ghFSzt9+gznnUQH2YQIA\nAkA7oeiGAzupe66KMcAZ2Szh20f814ntJGR9KDghJluHD3Wz8E64t0KtNbF9S/Vy\nYup4q4EXrtQN7K2JSs4obtvxybD4lh374mjMw0bHCs74gzTn77J4W9gvBLcvs1Zy\nSUy47h3+xa09fckbYhksdAbus1sxcJUR6hobrSnvI+HnLINXaWTBgM115c6H5fdl\njlF0LZVmOK4nONVrARxvGXB51V9aBya1qvtHxKntwAD59KMqbQRVsCxHOKk6ZaGY\nNaO38r9QhjiyYKsixECeuL0pzCP/5G84VpwxJXSeTfV3DZqZPsw=\n=5hs7\n-----END PGP SIGNATURE-----", "payload": "tree 7c4bb3540ea97783091f4296511cd5d39775d768\nparent 1751d2496d4241b2a705ed871a8ad3d4402180b5\nauthor flip1995 <hello@philkrones.com> 1543351749 +0100\ncommitter flip1995 <hello@philkrones.com> 1543351749 +0100\n\nFix some formatting issues\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "html_url": "https://github.com/rust-lang/rust/commit/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1751d2496d4241b2a705ed871a8ad3d4402180b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1751d2496d4241b2a705ed871a8ad3d4402180b5", "html_url": "https://github.com/rust-lang/rust/commit/1751d2496d4241b2a705ed871a8ad3d4402180b5"}], "stats": {"total": 259, "additions": 120, "deletions": 139}, "files": [{"sha": "7719e35902bd01f383d404d959f0a642c903fb2a", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -49,44 +49,44 @@ impl LintPass for DefaultTraitAccess {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_chain! {\n-           if let ExprKind::Call(ref path, ..) = expr.node;\n-           if !any_parent_is_automatically_derived(cx.tcx, expr.id);\n-           if let ExprKind::Path(ref qpath) = path.node;\n-           if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path.hir_id));\n-           if match_def_path(cx.tcx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n-           then {\n-               match qpath {\n-                   QPath::Resolved(..) => {\n-                       if_chain! {\n-                           // Detect and ignore <Foo as Default>::default() because these calls do\n-                           // explicitly name the type.\n-                           if let ExprKind::Call(ref method, ref _args) = expr.node;\n-                           if let ExprKind::Path(ref p) = method.node;\n-                           if let QPath::Resolved(Some(_ty), _path) = p;\n-                           then {\n-                               return;\n-                           }\n-                       }\n-\n-                       // TODO: Work out a way to put \"whatever the imported way of referencing\n-                       // this type in this file\" rather than a fully-qualified type.\n-                       let expr_ty = cx.tables.expr_ty(expr);\n-                       if let TyKind::Adt(..) = expr_ty.sty {\n-                           let replacement = format!(\"{}::default()\", expr_ty);\n-                           span_lint_and_sugg(\n-                               cx,\n-                               DEFAULT_TRAIT_ACCESS,\n-                               expr.span,\n-                               &format!(\"Calling {} is more clear than this expression\", replacement),\n-                               \"try\",\n-                               replacement,\n-                               Applicability::Unspecified, // First resolve the TODO above\n-                           );\n+            if let ExprKind::Call(ref path, ..) = expr.node;\n+            if !any_parent_is_automatically_derived(cx.tcx, expr.id);\n+            if let ExprKind::Path(ref qpath) = path.node;\n+            if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path.hir_id));\n+            if match_def_path(cx.tcx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n+            then {\n+                match qpath {\n+                    QPath::Resolved(..) => {\n+                        if_chain! {\n+                            // Detect and ignore <Foo as Default>::default() because these calls do\n+                            // explicitly name the type.\n+                            if let ExprKind::Call(ref method, ref _args) = expr.node;\n+                            if let ExprKind::Path(ref p) = method.node;\n+                            if let QPath::Resolved(Some(_ty), _path) = p;\n+                            then {\n+                                return;\n+                            }\n                         }\n-                   },\n-                   QPath::TypeRelative(..) => {},\n-               }\n-           }\n+\n+                        // TODO: Work out a way to put \"whatever the imported way of referencing\n+                        // this type in this file\" rather than a fully-qualified type.\n+                        let expr_ty = cx.tables.expr_ty(expr);\n+                        if let TyKind::Adt(..) = expr_ty.sty {\n+                            let replacement = format!(\"{}::default()\", expr_ty);\n+                            span_lint_and_sugg(\n+                                cx,\n+                                DEFAULT_TRAIT_ACCESS,\n+                                expr.span,\n+                                &format!(\"Calling {} is more clear than this expression\", replacement),\n+                                \"try\",\n+                                replacement,\n+                                Applicability::Unspecified, // First resolve the TODO above\n+                            );\n+                         }\n+                    },\n+                    QPath::TypeRelative(..) => {},\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "94bd0ab209cb572a9054122c6d09cd389db16271", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -27,10 +27,9 @@ use if_chain::if_chain;\n /// writeln!(&mut io::stderr(), \"foo: {:?}\", bar).unwrap();\n /// ```\n declare_clippy_lint! {\n-pub EXPLICIT_WRITE,\n-complexity,\n-\"using the `write!()` family of functions instead of the `print!()` family \\\n- of functions, when using the latter would work\"\n+    pub EXPLICIT_WRITE,\n+    complexity,\n+    \"using the `write!()` family of functions instead of the `print!()` family of functions, when using the latter would work\"\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "08ae3a55a2c8c2f17160f28e2630443a6b2e13ee", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -249,10 +249,9 @@ declare_clippy_lint! {\n /// vec.iter().map(|x| /* some operation returning () */).collect::<Vec<_>>();\n /// ```\n declare_clippy_lint! {\n-pub UNUSED_COLLECT,\n-perf,\n-\"`collect()`ing an iterator without using the result; this is usually better \\\n- written as a for loop\"\n+    pub UNUSED_COLLECT,\n+    perf,\n+    \"`collect()`ing an iterator without using the result; this is usually better written as a for loop\"\n }\n \n /// **What it does:** Checks for functions collecting an iterator when collect"}, {"sha": "af85a279ca35762fc1396abf23fa568447b2a8df", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, name, None) => {\n                         match closure_expr.node {\n                             hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner) => {\n-                                if !cx.tables.expr_ty(inner).is_box() => {\n+                                if !cx.tables.expr_ty(inner).is_box() {\n                                     lint(cx, e.span, args[0].span, name, inner);\n                                 }\n                             },"}, {"sha": "dedf9a16b356d215c5cf0b2f452468ce70be8318", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -40,10 +40,9 @@ use std::collections::Bound;\n /// }\n /// ```\n declare_clippy_lint! {\n-pub SINGLE_MATCH,\n-style,\n-\"a match statement with a single nontrivial arm (i.e. where the other arm \\\n- is `_ => {}`) instead of `if let`\"\n+    pub SINGLE_MATCH,\n+    style,\n+    \"a match statement with a single nontrivial arm (i.e. where the other arm is `_ => {}`) instead of `if let`\"\n }\n \n /// **What it does:** Checks for matches with a two arms where an `if let` will\n@@ -61,10 +60,9 @@ style,\n /// }\n /// ```\n declare_clippy_lint! {\n-pub SINGLE_MATCH_ELSE,\n-pedantic,\n-\"a match statement with a two arms where the second arm's pattern is a wildcard \\\n- instead of `if let`\"\n+    pub SINGLE_MATCH_ELSE,\n+    pedantic,\n+    \"a match statement with a two arms where the second arm's pattern is a wildcard instead of `if let`\"\n }\n \n /// **What it does:** Checks for matches where all arms match a reference,"}, {"sha": "0df166a0796d433909a2c16ad92c941694043680", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 30, "deletions": 40, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -131,10 +131,9 @@ declare_clippy_lint! {\n /// }\n /// ```\n declare_clippy_lint! {\n-pub WRONG_SELF_CONVENTION,\n-style,\n-\"defining a method named with an established prefix (like \\\"into_\\\") that takes \\\n- `self` with the wrong convention\"\n+    pub WRONG_SELF_CONVENTION,\n+    style,\n+    \"defining a method named with an established prefix (like \\\"into_\\\") that takes `self` with the wrong convention\"\n }\n \n /// **What it does:** This is the same as\n@@ -155,10 +154,9 @@ style,\n /// }\n /// ```\n declare_clippy_lint! {\n-pub WRONG_PUB_SELF_CONVENTION,\n-restriction,\n-\"defining a public method named with an established prefix (like \\\"into_\\\") that takes \\\n- `self` with the wrong convention\"\n+    pub WRONG_PUB_SELF_CONVENTION,\n+    restriction,\n+    \"defining a public method named with an established prefix (like \\\"into_\\\") that takes `self` with the wrong convention\"\n }\n \n /// **What it does:** Checks for usage of `ok().expect(..)`.\n@@ -173,10 +171,9 @@ restriction,\n /// x.ok().expect(\"why did I do this again?\")\n /// ```\n declare_clippy_lint! {\n-pub OK_EXPECT,\n-style,\n-\"using `ok().expect()`, which gives worse error messages than \\\n- calling `expect` directly on the Result\"\n+    pub OK_EXPECT,\n+    style,\n+    \"using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result\"\n }\n \n /// **What it does:** Checks for usage of `_.map(_).unwrap_or(_)`.\n@@ -209,10 +206,9 @@ pedantic,\n /// x.map(|a| a + 1).unwrap_or_else(some_function)\n /// ```\n declare_clippy_lint! {\n-pub OPTION_MAP_UNWRAP_OR_ELSE,\n-pedantic,\n-\"using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as \\\n- `map_or_else(g, f)`\"\n+    pub OPTION_MAP_UNWRAP_OR_ELSE,\n+    pedantic,\n+    \"using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `map_or_else(g, f)`\"\n }\n \n /// **What it does:** Checks for usage of `result.map(_).unwrap_or_else(_)`.\n@@ -227,10 +223,9 @@ pedantic,\n /// x.map(|a| a + 1).unwrap_or_else(some_function)\n /// ```\n declare_clippy_lint! {\n-pub RESULT_MAP_UNWRAP_OR_ELSE,\n-pedantic,\n-\"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as \\\n- `.ok().map_or_else(g, f)`\"\n+    pub RESULT_MAP_UNWRAP_OR_ELSE,\n+    pedantic,\n+    \"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `.ok().map_or_else(g, f)`\"\n }\n \n /// **What it does:** Checks for usage of `_.map_or(None, _)`.\n@@ -245,10 +240,9 @@ pedantic,\n /// opt.map_or(None, |a| a + 1)\n /// ```\n declare_clippy_lint! {\n-pub OPTION_MAP_OR_NONE,\n-style,\n-\"using `Option.map_or(None, f)`, which is more succinctly expressed as \\\n- `and_then(f)`\"\n+    pub OPTION_MAP_OR_NONE,\n+    style,\n+    \"using `Option.map_or(None, f)`, which is more succinctly expressed as `and_then(f)`\"\n }\n \n /// **What it does:** Checks for usage of `_.filter(_).next()`.\n@@ -280,10 +274,9 @@ declare_clippy_lint! {\n /// iter.map(|x| x.iter()).flatten()\n /// ```\n declare_clippy_lint! {\n-pub MAP_FLATTEN,\n-pedantic,\n-\"using combinations of `flatten` and `map` which can usually be written as a \\\n- single method call\"\n+    pub MAP_FLATTEN,\n+    pedantic,\n+    \"using combinations of `flatten` and `map` which can usually be written as a single method call\"\n }\n \n /// **What it does:** Checks for usage of `_.filter(_).map(_)`,\n@@ -300,10 +293,9 @@ pedantic,\n /// iter.filter(|x| x == 0).map(|x| x * 2)\n /// ```\n declare_clippy_lint! {\n-pub FILTER_MAP,\n-pedantic,\n-\"using combinations of `filter`, `map`, `filter_map` and `flat_map` which can \\\n- usually be written as a single method call\"\n+    pub FILTER_MAP,\n+    pedantic,\n+    \"using combinations of `filter`, `map`, `filter_map` and `flat_map` which can usually be written as a single method call\"\n }\n \n /// **What it does:** Checks for an iterator search (such as `find()`,\n@@ -319,10 +311,9 @@ pedantic,\n /// iter.find(|x| x == 0).is_some()\n /// ```\n declare_clippy_lint! {\n-pub SEARCH_IS_SOME,\n-complexity,\n-\"using an iterator search followed by `is_some()`, which is more succinctly \\\n- expressed as a call to `any()`\"\n+    pub SEARCH_IS_SOME,\n+    complexity,\n+    \"using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\"\n }\n \n /// **What it does:** Checks for usage of `.chars().next()` on a `str` to check\n@@ -485,10 +476,9 @@ declare_clippy_lint! {\n /// **Example:**\n /// `_.split(\"x\")` could be `_.split('x')`\n declare_clippy_lint! {\n-pub SINGLE_CHAR_PATTERN,\n-perf,\n-\"using a single-character str where a char could be used, e.g. \\\n- `_.split(\\\"x\\\")`\"\n+    pub SINGLE_CHAR_PATTERN,\n+    perf,\n+    \"using a single-character str where a char could be used, e.g. `_.split(\\\"x\\\")`\"\n }\n \n /// **What it does:** Checks for getting the inner pointer of a temporary"}, {"sha": "b92b3358ceaca94087e72e2c96f3aa602ae7d9ab", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -27,10 +27,9 @@ use crate::utils::span_lint;\n /// my_vec.push(&mut value)\n /// ```\n declare_clippy_lint! {\n-pub UNNECESSARY_MUT_PASSED,\n-style,\n-\"an argument passed as a mutable reference although the callee only demands an \\\n- immutable reference\"\n+    pub UNNECESSARY_MUT_PASSED,\n+    style,\n+    \"an argument passed as a mutable reference although the callee only demands an immutable reference\"\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "e3db1f79ed7fa88b8d762aa1829fd7317cb91b9c", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -40,10 +40,9 @@ use crate::utils::{in_macro, snippet_with_applicability, span_lint, span_lint_an\n /// }\n /// ```\n declare_clippy_lint! {\n-pub NEEDLESS_BOOL,\n-complexity,\n-\"if-statements with plain booleans in the then- and else-clause, e.g. \\\n- `if p { true } else { false }`\"\n+    pub NEEDLESS_BOOL,\n+    complexity,\n+    \"if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\"\n }\n \n /// **What it does:** Checks for expressions of the form `x == true` (or vice"}, {"sha": "82e698893953c7fbeecbdee8c6cad21a64888c9d", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -54,10 +54,9 @@ use std::borrow::Cow;\n /// fn foo(&Vec<u32>) { .. }\n /// ```\n declare_clippy_lint! {\n-pub PTR_ARG,\n-style,\n-\"fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` \\\n- instead, respectively\"\n+    pub PTR_ARG,\n+    style,\n+    \"fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\"\n }\n \n /// **What it does:** This lint checks for equality comparisons with `ptr::null`"}, {"sha": "c7dc6e1cde7b4726f7b4d0c01a36bd4d0993ddd3", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -65,10 +65,9 @@ declare_clippy_lint! {\n /// }\n /// ```\n declare_clippy_lint! {\n-pub LET_AND_RETURN,\n-style,\n-\"creating a let-binding and then immediately returning it like `let x = expr; x` at \\\n- the end of a block\"\n+    pub LET_AND_RETURN,\n+    style,\n+    \"creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\"\n }\n \n /// **What it does:** Checks for unit (`()`) expressions that can be removed."}, {"sha": "472596beaf71e9cfee160fe2713fab7167730101", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -56,10 +56,9 @@ declare_clippy_lint! {\n /// let y = x + 1;\n /// ```\n declare_clippy_lint! {\n-pub SHADOW_REUSE,\n-restriction,\n-\"rebinding a name to an expression that re-uses the original value, e.g. \\\n- `let x = x + 1`\"\n+    pub SHADOW_REUSE,\n+    restriction,\n+    \"rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\"\n }\n \n /// **What it does:** Checks for bindings that shadow other bindings already in"}, {"sha": "ec6439aef954e398a2cafcf1bc0db3ec962e1ad6", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -81,7 +81,8 @@ declare_clippy_lint! {\n /// **Example:**\n /// ```rust\n /// let _: &T = std::mem::transmute(p); // where p: *const T\n-///                                     // can be written:\n+///\n+/// // can be written:\n /// let _: &T = &*p;\n /// ```\n declare_clippy_lint! {\n@@ -108,7 +109,8 @@ declare_clippy_lint! {\n /// **Example:**\n /// ```rust\n /// let _: char = std::mem::transmute(x); // where x: u32\n-///                                       // should be:\n+///\n+/// // should be:\n /// let _ = std::char::from_u32(x).unwrap();\n /// ```\n declare_clippy_lint! {\n@@ -135,7 +137,8 @@ declare_clippy_lint! {\n /// **Example:**\n /// ```rust\n /// let _: &str = std::mem::transmute(b); // where b: &[u8]\n-///                                       // should be:\n+///\n+/// // should be:\n /// let _ = std::str::from_utf8(b).unwrap();\n /// ```\n declare_clippy_lint! {\n@@ -153,7 +156,8 @@ declare_clippy_lint! {\n /// **Example:**\n /// ```rust\n /// let _: bool = std::mem::transmute(x); // where x: u8\n-///                                       // should be:\n+///\n+/// // should be:\n /// let _: bool = x != 0;\n /// ```\n declare_clippy_lint! {\n@@ -171,7 +175,8 @@ declare_clippy_lint! {\n /// **Example:**\n /// ```rust\n /// let _: f32 = std::mem::transmute(x); // where x: u32\n-///                                      // should be:\n+///\n+/// // should be:\n /// let _: f32 = f32::from_bits(x);\n /// ```\n declare_clippy_lint! {"}, {"sha": "1b98a89f868fa07205109a8d6f322e4c25b49603", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -117,10 +117,9 @@ declare_clippy_lint! {\n /// let x = LinkedList::new();\n /// ```\n declare_clippy_lint! {\n-pub LINKEDLIST,\n-pedantic,\n-\"usage of LinkedList, usually a vector is faster, or a more specialized data \\\n- structure like a VecDeque\"\n+    pub LINKEDLIST,\n+    pedantic,\n+    \"usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque\"\n }\n \n /// **What it does:** Checks for use of `&Box<T>` anywhere in the code.\n@@ -668,10 +667,9 @@ declare_clippy_lint! {\n /// }\n /// ```\n declare_clippy_lint! {\n-pub CAST_POSSIBLE_TRUNCATION,\n-pedantic,\n-\"casts that may cause truncation of the value, e.g. `x as u8` where `x: u32`, \\\n- or `x as i32` where `x: f32`\"\n+    pub CAST_POSSIBLE_TRUNCATION,\n+    pedantic,\n+    \"casts that may cause truncation of the value, e.g. `x as u8` where `x: u32`, or `x as i32` where `x: f32`\"\n }\n \n /// **What it does:** Checks for casts from an unsigned type to a signed type of\n@@ -692,10 +690,9 @@ pedantic,\n /// u32::MAX as i32 // will yield a value of `-1`\n /// ```\n declare_clippy_lint! {\n-pub CAST_POSSIBLE_WRAP,\n-pedantic,\n-\"casts that may cause wrapping around the value, e.g. `x as i32` where `x: u32` \\\n- and `x > i32::MAX`\"\n+    pub CAST_POSSIBLE_WRAP,\n+    pedantic,\n+    \"casts that may cause wrapping around the value, e.g. `x as i32` where `x: u32` and `x > i32::MAX`\"\n }\n \n /// **What it does:** Checks for on casts between numerical types that may"}, {"sha": "723565b3a9b9b0a5ceabc8f535a26a8efa7f1e3e", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=63fa5d24e15be79c2a5dfcc8b0200c1d3eb7ffb4", "patch": "@@ -45,10 +45,9 @@ declare_clippy_lint! {\n /// let x = \"H\u00e4?\"\n /// ```\n declare_clippy_lint! {\n-pub NON_ASCII_LITERAL,\n-pedantic,\n-\"using any literal non-ASCII chars in a string literal instead of \\\n- using the `\\\\u` escape\"\n+    pub NON_ASCII_LITERAL,\n+    pedantic,\n+    \"using any literal non-ASCII chars in a string literal instead of using the `\\\\u` escape\"\n }\n \n /// **What it does:** Checks for string literals that contain Unicode in a form\n@@ -63,10 +62,9 @@ pedantic,\n /// **Example:** You may not see it, but \u201ca\u0300\u201d and \u201c\u00e0\u201d aren't the same string. The\n /// former when escaped is actually `\"a\\u{300}\"` while the latter is `\"\\u{e0}\"`.\n declare_clippy_lint! {\n-pub UNICODE_NOT_NFC,\n-pedantic,\n-\"using a unicode literal not in NFC normal form (see \\\n- [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\"\n+    pub UNICODE_NOT_NFC,\n+    pedantic,\n+    \"using a unicode literal not in NFC normal form (see [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\"\n }\n \n #[derive(Copy, Clone)]"}]}