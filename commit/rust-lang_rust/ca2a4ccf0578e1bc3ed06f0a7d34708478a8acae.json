{"sha": "ca2a4ccf0578e1bc3ed06f0a7d34708478a8acae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMmE0Y2NmMDU3OGUxYmMzZWQwNmYwYTdkMzQ3MDg0NzhhOGFjYWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-21T13:43:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-21T13:43:56Z"}, "message": "Document new rust-project.json format", "tree": {"sha": "9aeee001880a61a424598372b231ccb804b53add", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aeee001880a61a424598372b231ccb804b53add"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca2a4ccf0578e1bc3ed06f0a7d34708478a8acae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2a4ccf0578e1bc3ed06f0a7d34708478a8acae", "html_url": "https://github.com/rust-lang/rust/commit/ca2a4ccf0578e1bc3ed06f0a7d34708478a8acae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca2a4ccf0578e1bc3ed06f0a7d34708478a8acae/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b48336bf940ce1b55e72d244ff9f28573f2e5548", "url": "https://api.github.com/repos/rust-lang/rust/commits/b48336bf940ce1b55e72d244ff9f28573f2e5548", "html_url": "https://github.com/rust-lang/rust/commit/b48336bf940ce1b55e72d244ff9f28573f2e5548"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "8e95f51e353cc1c6282a922e07680f18d6ba61cb", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ca2a4ccf0578e1bc3ed06f0a7d34708478a8acae/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/ca2a4ccf0578e1bc3ed06f0a7d34708478a8acae/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=ca2a4ccf0578e1bc3ed06f0a7d34708478a8acae", "patch": "@@ -273,9 +273,6 @@ However, if you use some other build system, you'll have to describe the structu\n [source,TypeScript]\n ----\n interface JsonProject {\n-   /// The set of paths containing the crates for this project.\n-   /// Any `Crate` must be nested inside some `root`.\n-   roots: string[];\n    /// The set of crates comprising the current project.\n    /// Must include all transitive dependencies as well as sysroot crate (libstd, libcore and such).\n    crates: Crate[];\n@@ -288,11 +285,37 @@ interface Crate {\n     edition: \"2015\" | \"2018\";\n     /// Dependencies\n     deps: Dep[];\n+    /// Should this crate be treated as a member of current \"workspace\".\n+    ///\n+    /// By default, inferred from the `root_module` (members are the crates which reside\n+    /// inside the directory opened in the editor).\n+    ///\n+    /// Set this too `false` for things like standard library and 3rd party crates to\n+    /// enable performance optimizations (rust-analyzer assumes that non-member crates\n+    /// don't change).\n+    is_workspace_member?: boolean;\n+    /// Optionally specify the (super)set of `.rs` files comprising this crate.\n+    ///\n+    /// By default, rust-analyzer assumes that only files under `root_module.parent` can belong to a crate.\n+    /// `include_dirs` are included recursively, unless a subdirectory is in `exclude_dirs`.\n+    ///\n+    /// Different crates can share the same `source`.\n+\n+    /// If two crates share an `.rs` file in common, they *must* have the same `source`.\n+    /// rust-analyzer assumes that files from one source can't refer to files in another source.\n+    source?: {\n+        include_dirs: string[],\n+        exclude_dirs: string[],\n+    },\n     /// The set of cfgs activated for a given crate, like `[\"unix\", \"feature=foo\", \"feature=bar\"]`.\n     cfg: string[];\n+    /// Target tripple for this Crate.\n+    ///\n+    /// It is use when running `rustc --print cfg` to get target-specific cfgs.\n+    target?: string;\n+    /// Environment variables, used for `env!` macro\n+    env: : { [key: string]: string; },\n \n-    /// value of the OUT_DIR env variable.\n-    out_dir?: string;\n     /// For proc-macro crates, path to compiles proc-macro (.so file).\n     proc_macro_dylib_path?: string;\n }"}]}