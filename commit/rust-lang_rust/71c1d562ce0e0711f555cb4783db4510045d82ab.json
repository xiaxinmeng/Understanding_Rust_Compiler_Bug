{"sha": "71c1d562ce0e0711f555cb4783db4510045d82ab", "node_id": "C_kwDOAAsO6NoAKDcxYzFkNTYyY2UwZTA3MTFmNTU1Y2I0NzgzZGI0NTEwMDQ1ZDgyYWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-10T21:40:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-10T21:40:28Z"}, "message": "Rollup merge of #90407 - pierwill:edit-rustc-incremental-docs, r=cjgillot\n\nDocument all public items in `rustc_incremental`\n\nAlso:\n\n- Review and edit current docs\n- Enforce documentation for the module.", "tree": {"sha": "3080f779b479eeb0b0d15d3f0aac2538a1bac4b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3080f779b479eeb0b0d15d3f0aac2538a1bac4b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71c1d562ce0e0711f555cb4783db4510045d82ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhs8lNCRBK7hj4Ov3rIwAAa2AIAFLoNkED+OeQoJrL9cGaVYuL\nGi+UKcgQnOWdOuNYCKKDzbfZPGr7mqbI7Mhd6CY7zD+PKSMYbUaj5XdIkvjMCBNL\n4c1zDXLwpklXDTj8sIUcNlp8znLod1b1KXmPZ6M4HVNL1cksyZXKr+N9QuKfx8ZD\nDm6VBpvz7zt28E3XmzaOFnowC1eqwVbZUboAfr5IDP7qacU6OkQqo/yiQHpVAMbt\nCbpUSHhmn9vRBDCeKReLu3ifAVqHYVky7VZ0oxdOwKhqiEjBgyWTm3Q2VPJsFt9s\nITz2AoEdPLlt4QgVvb3DXK3m3aM68okCgwROTintBLVF3t74MxSwIbsRZ1sRJOw=\n=NnWh\n-----END PGP SIGNATURE-----\n", "payload": "tree 3080f779b479eeb0b0d15d3f0aac2538a1bac4b8\nparent 0b42deaccc2cbe17a68067aa5fdb76104369e1fd\nparent 41f76924d06ad4b267c0c1e5c83acf666c07f34e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639172428 +0100\ncommitter GitHub <noreply@github.com> 1639172428 +0100\n\nRollup merge of #90407 - pierwill:edit-rustc-incremental-docs, r=cjgillot\n\nDocument all public items in `rustc_incremental`\n\nAlso:\n\n- Review and edit current docs\n- Enforce documentation for the module.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71c1d562ce0e0711f555cb4783db4510045d82ab", "html_url": "https://github.com/rust-lang/rust/commit/71c1d562ce0e0711f555cb4783db4510045d82ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71c1d562ce0e0711f555cb4783db4510045d82ab/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "html_url": "https://github.com/rust-lang/rust/commit/0b42deaccc2cbe17a68067aa5fdb76104369e1fd"}, {"sha": "41f76924d06ad4b267c0c1e5c83acf666c07f34e", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f76924d06ad4b267c0c1e5c83acf666c07f34e", "html_url": "https://github.com/rust-lang/rust/commit/41f76924d06ad4b267c0c1e5c83acf666c07f34e"}], "stats": {"total": 76, "additions": 63, "deletions": 13}, "files": [{"sha": "7b5b015d5a509f35f9b6afc96735619928c6591f", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=71c1d562ce0e0711f555cb4783db4510045d82ab", "patch": "@@ -52,6 +52,7 @@ use std::env;\n use std::fs::{self, File};\n use std::io::{BufWriter, Write};\n \n+#[allow(missing_docs)]\n pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.debugging_opts.dump_dep_graph {\n@@ -262,6 +263,7 @@ fn dump_graph(query: &DepGraphQuery) {\n     }\n }\n \n+#[allow(missing_docs)]\n pub struct GraphvizDepGraph<'q>(FxHashSet<&'q DepNode>, Vec<(&'q DepNode, &'q DepNode)>);\n \n impl<'a, 'q> dot::GraphWalk<'a> for GraphvizDepGraph<'q> {"}, {"sha": "2cf8f9b08e190908fe13990e5c195785031dead7", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=71c1d562ce0e0711f555cb4783db4510045d82ab", "patch": "@@ -29,6 +29,7 @@ use rustc_session::cgu_reuse_tracker::*;\n use rustc_span::symbol::{sym, Symbol};\n use std::collections::BTreeSet;\n \n+#[allow(missing_docs)]\n pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.incremental.is_none() {"}, {"sha": "07e9f8b00ca1bd75184000545deaeb0a0bc2ea37", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=71c1d562ce0e0711f555cb4783db4510045d82ab", "patch": "@@ -1,5 +1,6 @@\n //! Support for serializing the dep-graph and reloading it.\n \n+#![deny(missing_docs)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(in_band_lifetimes)]\n #![feature(let_else)]"}, {"sha": "a49a1554d5bfeaed97809caa80936612e0e146d8", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=71c1d562ce0e0711f555cb4783db4510045d82ab", "patch": "@@ -133,21 +133,26 @@ const QUERY_CACHE_FILENAME: &str = \"query-cache.bin\";\n // case-sensitive (as opposed to base64, for example).\n const INT_ENCODE_BASE: usize = base_n::CASE_INSENSITIVE;\n \n+/// Returns the path to a session's dependency graph.\n pub fn dep_graph_path(sess: &Session) -> PathBuf {\n     in_incr_comp_dir_sess(sess, DEP_GRAPH_FILENAME)\n }\n+/// Returns the path to a session's staging dependency graph.\n+///\n+/// On the difference between dep-graph and staging dep-graph,\n+/// see `build_dep_graph`.\n pub fn staging_dep_graph_path(sess: &Session) -> PathBuf {\n     in_incr_comp_dir_sess(sess, STAGING_DEP_GRAPH_FILENAME)\n }\n-\n pub fn work_products_path(sess: &Session) -> PathBuf {\n     in_incr_comp_dir_sess(sess, WORK_PRODUCTS_FILENAME)\n }\n-\n+/// Returns the path to a session's query cache.\n pub fn query_cache_path(sess: &Session) -> PathBuf {\n     in_incr_comp_dir_sess(sess, QUERY_CACHE_FILENAME)\n }\n \n+/// Locks a given session directory.\n pub fn lock_file_path(session_dir: &Path) -> PathBuf {\n     let crate_dir = session_dir.parent().unwrap();\n \n@@ -166,23 +171,35 @@ pub fn lock_file_path(session_dir: &Path) -> PathBuf {\n     crate_dir.join(&directory_name[0..dash_indices[2]]).with_extension(&LOCK_FILE_EXT[1..])\n }\n \n+/// Returns the path for a given filename within the incremental compilation directory\n+/// in the current session.\n pub fn in_incr_comp_dir_sess(sess: &Session, file_name: &str) -> PathBuf {\n     in_incr_comp_dir(&sess.incr_comp_session_dir(), file_name)\n }\n \n+/// Returns the path for a given filename within the incremental compilation directory,\n+/// not necessarily from the current session.\n+///\n+/// To ensure the file is part of the current session, use [`in_incr_comp_dir_sess`].\n pub fn in_incr_comp_dir(incr_comp_session_dir: &Path, file_name: &str) -> PathBuf {\n     incr_comp_session_dir.join(file_name)\n }\n \n-/// Allocates the private session directory. The boolean in the Ok() result\n-/// indicates whether we should try loading a dep graph from the successfully\n-/// initialized directory, or not.\n-/// The post-condition of this fn is that we have a valid incremental\n-/// compilation session directory, if the result is `Ok`. A valid session\n+/// Allocates the private session directory.\n+///\n+/// If the result of this function is `Ok`, we have a valid incremental\n+/// compilation session directory. A valid session\n /// directory is one that contains a locked lock file. It may or may not contain\n /// a dep-graph and work products from a previous session.\n-/// If the call fails, the fn may leave behind an invalid session directory.\n+///\n+/// This always attempts to load a dep-graph from the directory.\n+/// If loading fails for some reason, we fallback to a disabled `DepGraph`.\n+/// See [`rustc_interface::queries::dep_graph`].\n+///\n+/// If this function returns an error, it may leave behind an invalid session directory.\n /// The garbage collection will take care of it.\n+///\n+/// [`rustc_interface::queries::dep_graph`]: ../../rustc_interface/struct.Queries.html#structfield.dep_graph\n pub fn prepare_session_directory(\n     sess: &Session,\n     crate_name: &str,\n@@ -661,6 +678,7 @@ fn is_old_enough_to_be_collected(timestamp: SystemTime) -> bool {\n     timestamp < SystemTime::now() - Duration::from_secs(10)\n }\n \n+/// Runs garbage collection for the current session.\n pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n     debug!(\"garbage_collect_session_directories() - begin\");\n "}, {"sha": "9cae4e9181899d97ceb6871e18edfec91bd25f27", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=71c1d562ce0e0711f555cb4783db4510045d82ab", "patch": "@@ -18,13 +18,24 @@ use super::work_product;\n type WorkProductMap = FxHashMap<WorkProductId, WorkProduct>;\n \n #[derive(Debug)]\n+/// Represents the result of an attempt to load incremental compilation data.\n pub enum LoadResult<T> {\n-    Ok { data: T },\n+    /// Loading was successful.\n+    Ok {\n+        #[allow(missing_docs)]\n+        data: T,\n+    },\n+    /// The file either didn't exist or was produced by an incompatible compiler version.\n     DataOutOfDate,\n-    Error { message: String },\n+    /// An error occured.\n+    Error {\n+        #[allow(missing_docs)]\n+        message: String,\n+    },\n }\n \n impl<T: Default> LoadResult<T> {\n+    /// Accesses the data returned in [`LoadResult::Ok`].\n     pub fn open(self, sess: &Session) -> T {\n         // Check for errors when using `-Zassert-incremental-state`\n         match (sess.opts.assert_incr_state, &self) {\n@@ -99,6 +110,7 @@ pub enum MaybeAsync<T> {\n }\n \n impl<T> MaybeAsync<LoadResult<T>> {\n+    /// Accesses the data returned in [`LoadResult::Ok`] in an asynchronous way if possible.\n     pub fn open(self) -> LoadResult<T> {\n         match self {\n             MaybeAsync::Sync(result) => result,\n@@ -109,6 +121,7 @@ impl<T> MaybeAsync<LoadResult<T>> {\n     }\n }\n \n+/// An asynchronous type for computing the dependency graph.\n pub type DepGraphFuture = MaybeAsync<LoadResult<(SerializedDepGraph, WorkProductMap)>>;\n \n /// Launch a thread and load the dependency graph in the background."}, {"sha": "9601a49267f0808c3a8605abe626eb01e8f03174", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=71c1d562ce0e0711f555cb4783db4510045d82ab", "patch": "@@ -13,9 +13,13 @@ use super::file_format;\n use super::fs::*;\n use super::work_product;\n \n-/// Save and dump the DepGraph.\n+/// Saves and writes the [`DepGraph`] to the file system.\n ///\n-/// No query must be invoked after this function.\n+/// This function saves both the dep-graph and the query result cache,\n+/// and drops the result cache.\n+///\n+/// This function should only run after all queries have completed.\n+/// Trying to execute a query afterwards would attempt to read the result cache we just dropped.\n pub fn save_dep_graph(tcx: TyCtxt<'_>) {\n     debug!(\"save_dep_graph()\");\n     tcx.dep_graph.with_ignore(|| {\n@@ -75,6 +79,7 @@ pub fn save_dep_graph(tcx: TyCtxt<'_>) {\n     })\n }\n \n+/// Saves the work product index.\n pub fn save_work_product_index(\n     sess: &Session,\n     dep_graph: &DepGraph,\n@@ -139,6 +144,12 @@ fn encode_query_cache(tcx: TyCtxt<'_>, encoder: &mut FileEncoder) -> FileEncodeR\n     tcx.sess.time(\"incr_comp_serialize_result_cache\", || tcx.serialize_query_result_cache(encoder))\n }\n \n+/// Builds the dependency graph.\n+///\n+/// This function breates the *staging dep-graph*. When the dep-graph is modified by a query\n+/// execution, the new dependency information is not kept in memory but directly\n+/// output to this file. `save_dep_graph` then finalizes the staging dep-graph\n+/// and moves it to the permanent dep-graph path\n pub fn build_dep_graph(\n     sess: &Session,\n     prev_graph: SerializedDepGraph,"}, {"sha": "85b44ed7531923986ee51c4e5dc2475dc5fbc202", "filename": "compiler/rustc_incremental/src/persist/work_product.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c1d562ce0e0711f555cb4783db4510045d82ab/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs?ref=71c1d562ce0e0711f555cb4783db4510045d82ab", "patch": "@@ -1,4 +1,6 @@\n-//! This module contains files for saving intermediate work-products.\n+//! Functions for saving and removing intermediate [work products].\n+//!\n+//! [work products]: WorkProduct\n \n use crate::persist::fs::*;\n use rustc_fs_util::link_or_copy;\n@@ -7,6 +9,7 @@ use rustc_session::Session;\n use std::fs as std_fs;\n use std::path::PathBuf;\n \n+/// Copies a CGU work product to the incremental compilation directory, so next compilation can find and reuse it.\n pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n     sess: &Session,\n     cgu_name: &str,\n@@ -40,6 +43,7 @@ pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n     Some((work_product_id, work_product))\n }\n \n+/// Removes files for a given work product.\n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {\n     if let Some(ref file_name) = work_product.saved_file {\n         let path = in_incr_comp_dir_sess(sess, file_name);"}]}