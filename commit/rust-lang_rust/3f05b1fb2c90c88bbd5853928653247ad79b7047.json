{"sha": "3f05b1fb2c90c88bbd5853928653247ad79b7047", "node_id": "C_kwDOAAsO6NoAKDNmMDViMWZiMmM5MGM4OGJiZDU4NTM5Mjg2NTMyNDdhZDc5YjcwNDc", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-06-03T19:45:43Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-06-03T19:47:45Z"}, "message": "don't return a `Result` from symlink_dir_force\n\nthis gives a more helpful backtrace if it fails\n\nbefore:\n```\n  thread 'main' panicked at 'symlink_dir_force(&builder.config, &out, &out_dir) failed with No such file or directory (os error 2)', doc.rs:697:9\n```\n\nafter:\n```\nthread 'main' panicked at 'symlink_dir(config, original, link) failed with No such file or directory (os error 2) (\"failed to create link from /home/jyn/src/rust2/build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/doc -> /home/jyn/src/rust2/build/x86_64-unknown-linux-gnu/compiler-doc\")', doc.rs:975:5\n```", "tree": {"sha": "4a8b8b8181eed3e3fafe39bac2b2cd6456ff838d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a8b8b8181eed3e3fafe39bac2b2cd6456ff838d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f05b1fb2c90c88bbd5853928653247ad79b7047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f05b1fb2c90c88bbd5853928653247ad79b7047", "html_url": "https://github.com/rust-lang/rust/commit/3f05b1fb2c90c88bbd5853928653247ad79b7047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f05b1fb2c90c88bbd5853928653247ad79b7047/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c57eb1bb6e8284b141f715d83c4572559652586e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c57eb1bb6e8284b141f715d83c4572559652586e", "html_url": "https://github.com/rust-lang/rust/commit/c57eb1bb6e8284b141f715d83c4572559652586e"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "be3d7aacafdd848ff1e8a3ba70952d1980d61aa9", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f05b1fb2c90c88bbd5853928653247ad79b7047/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f05b1fb2c90c88bbd5853928653247ad79b7047/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=3f05b1fb2c90c88bbd5853928653247ad79b7047", "patch": "@@ -8,7 +8,6 @@\n //! `rustdoc`.\n \n use std::fs;\n-use std::io;\n use std::path::{Path, PathBuf};\n \n use crate::builder::crate_description;\n@@ -694,11 +693,11 @@ impl Step for Rustc {\n         // rustc. rustdoc needs to be able to see everything, for example when\n         // merging the search index, or generating local (relative) links.\n         let out_dir = builder.stage_out(compiler, Mode::Rustc).join(target.triple).join(\"doc\");\n-        t!(symlink_dir_force(&builder.config, &out, &out_dir));\n+        symlink_dir_force(&builder.config, &out, &out_dir);\n         // Cargo puts proc macros in `target/doc` even if you pass `--target`\n         // explicitly (https://github.com/rust-lang/cargo/issues/7677).\n         let proc_macro_out_dir = builder.stage_out(compiler, Mode::Rustc).join(\"doc\");\n-        t!(symlink_dir_force(&builder.config, &out, &proc_macro_out_dir));\n+        symlink_dir_force(&builder.config, &out, &proc_macro_out_dir);\n \n         // Build cargo command.\n         let mut cargo = builder.cargo(compiler, Mode::Rustc, SourceType::InTree, target, \"doc\");\n@@ -816,7 +815,7 @@ macro_rules! tool_doc {\n                 ];\n                 for out_dir in out_dirs {\n                     t!(fs::create_dir_all(&out_dir));\n-                    t!(symlink_dir_force(&builder.config, &out, &out_dir));\n+                    symlink_dir_force(&builder.config, &out, &out_dir);\n                 }\n \n                 // Build cargo command.\n@@ -959,21 +958,24 @@ impl Step for UnstableBookGen {\n     }\n }\n \n-fn symlink_dir_force(config: &Config, original: &Path, link: &Path) -> io::Result<()> {\n+fn symlink_dir_force(config: &Config, original: &Path, link: &Path) {\n     if config.dry_run() {\n-        return Ok(());\n+        return;\n     }\n     if let Ok(m) = fs::symlink_metadata(link) {\n         if m.file_type().is_dir() {\n-            fs::remove_dir_all(link)?;\n+            t!(fs::remove_dir_all(link));\n         } else {\n             // handle directory junctions on windows by falling back to\n             // `remove_dir`.\n-            fs::remove_file(link).or_else(|_| fs::remove_dir(link))?;\n+            t!(fs::remove_file(link).or_else(|_| fs::remove_dir(link)));\n         }\n     }\n \n-    symlink_dir(config, original, link)\n+    t!(\n+        symlink_dir(config, original, link),\n+        format!(\"failed to create link from {} -> {}\", link.display(), original.display())\n+    );\n }\n \n #[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]"}]}