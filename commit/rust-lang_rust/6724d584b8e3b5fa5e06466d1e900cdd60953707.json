{"sha": "6724d584b8e3b5fa5e06466d1e900cdd60953707", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MjRkNTg0YjhlM2I1ZmE1ZTA2NDY2ZDFlOTAwY2RkNjA5NTM3MDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-19T05:57:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-19T05:57:57Z"}, "message": "Auto merge of #70132 - Centril:rollup-oe8unsn, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #68941 (Properly handle Spans that reference imported SourceFiles)\n - #69036 (rustc: don't resolve Instances which would produce malformed shims.)\n - #69443 (tidy: Better license checks.)\n - #69814 (Smaller and more correct generator codegen)\n - #69929 (Regenerate tables for Unicode 13.0.0)\n - #69959 (std: Don't abort process when printing panics in tests)\n - #69969 (unix: Set a guard page at the end of signal stacks)\n - #70005 ([rustdoc] Improve visibility for code blocks warnings)\n - #70088 (Use copy bound in atomic operations to generate simpler MIR)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2a74d472f50888a9211edacc653966d649a8d602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a74d472f50888a9211edacc653966d649a8d602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6724d584b8e3b5fa5e06466d1e900cdd60953707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6724d584b8e3b5fa5e06466d1e900cdd60953707", "html_url": "https://github.com/rust-lang/rust/commit/6724d584b8e3b5fa5e06466d1e900cdd60953707", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6724d584b8e3b5fa5e06466d1e900cdd60953707/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e1da59cd0761330b4ea8d47b16340a78eeafa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e1da59cd0761330b4ea8d47b16340a78eeafa9", "html_url": "https://github.com/rust-lang/rust/commit/57e1da59cd0761330b4ea8d47b16340a78eeafa9"}, {"sha": "605bb61ddfefc12bc8a7bfee0cf9d54357ac995f", "url": "https://api.github.com/repos/rust-lang/rust/commits/605bb61ddfefc12bc8a7bfee0cf9d54357ac995f", "html_url": "https://github.com/rust-lang/rust/commit/605bb61ddfefc12bc8a7bfee0cf9d54357ac995f"}], "stats": {"total": 2312, "additions": 1389, "deletions": 923}, "files": [{"sha": "1b0516f71613efaf72ff13b62797996a6fa58731", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -386,9 +386,9 @@ dependencies = [\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.9.0\"\n+version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8d2d1617e838936c0d2323a65cc151e03ae19a7678dd24f72bccf27119b90a5d\"\n+checksum = \"46e3374c604fb39d1a2f35ed5e4a4e30e60d01fab49446e08f1b3e9a90aef202\"\n dependencies = [\n  \"semver\",\n  \"serde\",\n@@ -450,7 +450,7 @@ dependencies = [\n name = \"clippy\"\n version = \"0.0.212\"\n dependencies = [\n- \"cargo_metadata 0.9.0\",\n+ \"cargo_metadata 0.9.1\",\n  \"clippy-mini-macro-test\",\n  \"clippy_lints\",\n  \"compiletest_rs\",\n@@ -473,7 +473,7 @@ version = \"0.2.0\"\n name = \"clippy_lints\"\n version = \"0.0.212\"\n dependencies = [\n- \"cargo_metadata 0.9.0\",\n+ \"cargo_metadata 0.9.1\",\n  \"if_chain\",\n  \"itertools 0.9.0\",\n  \"lazy_static 1.4.0\",\n@@ -2132,7 +2132,7 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder\",\n- \"cargo_metadata 0.9.0\",\n+ \"cargo_metadata 0.9.1\",\n  \"colored\",\n  \"compiletest_rs\",\n  \"directories\",\n@@ -4860,10 +4860,9 @@ dependencies = [\n name = \"tidy\"\n version = \"0.1.0\"\n dependencies = [\n+ \"cargo_metadata 0.9.1\",\n  \"lazy_static 1.4.0\",\n  \"regex\",\n- \"serde\",\n- \"serde_json\",\n  \"walkdir\",\n ]\n "}, {"sha": "aa1d1b7c424130d565db34a9a74c2bde13baaeca", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -728,9 +728,6 @@ impl Step for Tidy {\n         let mut cmd = builder.tool_cmd(Tool::Tidy);\n         cmd.arg(builder.src.join(\"src\"));\n         cmd.arg(&builder.initial_cargo);\n-        if !builder.config.vendor {\n-            cmd.arg(\"--no-vendor\");\n-        }\n         if builder.is_verbose() {\n             cmd.arg(\"--verbose\");\n         }"}, {"sha": "220f221cdd36dc2713fb836392d44d706b2cefae", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -2259,7 +2259,7 @@ fn strongest_failure_ordering(order: Ordering) -> Ordering {\n }\n \n #[inline]\n-unsafe fn atomic_store<T>(dst: *mut T, val: T, order: Ordering) {\n+unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {\n     match order {\n         Release => intrinsics::atomic_store_rel(dst, val),\n         Relaxed => intrinsics::atomic_store_relaxed(dst, val),\n@@ -2270,7 +2270,7 @@ unsafe fn atomic_store<T>(dst: *mut T, val: T, order: Ordering) {\n }\n \n #[inline]\n-unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n+unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_load_acq(dst),\n         Relaxed => intrinsics::atomic_load_relaxed(dst),\n@@ -2282,7 +2282,7 @@ unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_swap<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xchg_acq(dst, val),\n         Release => intrinsics::atomic_xchg_rel(dst, val),\n@@ -2295,7 +2295,7 @@ unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// Returns the previous value (like __sync_fetch_and_add).\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xadd_acq(dst, val),\n         Release => intrinsics::atomic_xadd_rel(dst, val),\n@@ -2308,7 +2308,7 @@ unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// Returns the previous value (like __sync_fetch_and_sub).\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xsub_acq(dst, val),\n         Release => intrinsics::atomic_xsub_rel(dst, val),\n@@ -2320,7 +2320,7 @@ unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_compare_exchange<T>(\n+unsafe fn atomic_compare_exchange<T: Copy>(\n     dst: *mut T,\n     old: T,\n     new: T,\n@@ -2346,7 +2346,7 @@ unsafe fn atomic_compare_exchange<T>(\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_compare_exchange_weak<T>(\n+unsafe fn atomic_compare_exchange_weak<T: Copy>(\n     dst: *mut T,\n     old: T,\n     new: T,\n@@ -2372,7 +2372,7 @@ unsafe fn atomic_compare_exchange_weak<T>(\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_and<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_and_acq(dst, val),\n         Release => intrinsics::atomic_and_rel(dst, val),\n@@ -2384,7 +2384,7 @@ unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_nand<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_nand<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_nand_acq(dst, val),\n         Release => intrinsics::atomic_nand_rel(dst, val),\n@@ -2396,7 +2396,7 @@ unsafe fn atomic_nand<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_or_acq(dst, val),\n         Release => intrinsics::atomic_or_rel(dst, val),\n@@ -2408,7 +2408,7 @@ unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_xor<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xor_acq(dst, val),\n         Release => intrinsics::atomic_xor_rel(dst, val),\n@@ -2421,7 +2421,7 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// returns the max value (signed comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_max<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_max<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_max_acq(dst, val),\n         Release => intrinsics::atomic_max_rel(dst, val),\n@@ -2434,7 +2434,7 @@ unsafe fn atomic_max<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// returns the min value (signed comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_min<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_min<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_min_acq(dst, val),\n         Release => intrinsics::atomic_min_rel(dst, val),\n@@ -2447,7 +2447,7 @@ unsafe fn atomic_min<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// returns the max value (unsigned comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_umax<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_umax<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_umax_acq(dst, val),\n         Release => intrinsics::atomic_umax_rel(dst, val),\n@@ -2460,7 +2460,7 @@ unsafe fn atomic_umax<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// returns the min value (unsigned comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_umin<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_umin<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_umin_acq(dst, val),\n         Release => intrinsics::atomic_umin_rel(dst, val),"}, {"sha": "9680aa14d3b54568c0816b33469a5df9bcda6c79", "filename": "src/libcore/unicode/printable.rs", "status": "modified", "additions": 92, "deletions": 81, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibcore%2Funicode%2Fprintable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibcore%2Funicode%2Fprintable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fprintable.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn is_printable(x: char) -> bool {\n     } else if x < 0x20000 {\n         check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1)\n     } else {\n-        if 0x2a6d7 <= x && x < 0x2a700 {\n+        if 0x2a6de <= x && x < 0x2a700 {\n             return false;\n         }\n         if 0x2b735 <= x && x < 0x2b740 {\n@@ -59,7 +59,10 @@ pub(crate) fn is_printable(x: char) -> bool {\n         if 0x2ebe1 <= x && x < 0x2f800 {\n             return false;\n         }\n-        if 0x2fa1e <= x && x < 0xe0100 {\n+        if 0x2fa1e <= x && x < 0x30000 {\n+            return false;\n+        }\n+        if 0x3134b <= x && x < 0xe0100 {\n             return false;\n         }\n         if 0xe01f0 <= x && x < 0x110000 {\n@@ -81,7 +84,7 @@ const SINGLETONS0U: &[(u8, u8)] = &[\n     (0x0a, 28),\n     (0x0b, 25),\n     (0x0c, 20),\n-    (0x0d, 18),\n+    (0x0d, 16),\n     (0x0e, 13),\n     (0x0f, 4),\n     (0x10, 3),\n@@ -96,7 +99,7 @@ const SINGLETONS0U: &[(u8, u8)] = &[\n     (0x1d, 1),\n     (0x1f, 22),\n     (0x20, 3),\n-    (0x2b, 4),\n+    (0x2b, 3),\n     (0x2c, 2),\n     (0x2d, 11),\n     (0x2e, 1),\n@@ -129,29 +132,29 @@ const SINGLETONS0L: &[u8] = &[\n     0x4a, 0x5e, 0x64, 0x65, 0x84, 0x91, 0x9b, 0x9d,\n     0xc9, 0xce, 0xcf, 0x0d, 0x11, 0x29, 0x45, 0x49,\n     0x57, 0x64, 0x65, 0x8d, 0x91, 0xa9, 0xb4, 0xba,\n-    0xbb, 0xc5, 0xc9, 0xdf, 0xe4, 0xe5, 0xf0, 0x04,\n-    0x0d, 0x11, 0x45, 0x49, 0x64, 0x65, 0x80, 0x81,\n-    0x84, 0xb2, 0xbc, 0xbe, 0xbf, 0xd5, 0xd7, 0xf0,\n-    0xf1, 0x83, 0x85, 0x8b, 0xa4, 0xa6, 0xbe, 0xbf,\n-    0xc5, 0xc7, 0xce, 0xcf, 0xda, 0xdb, 0x48, 0x98,\n-    0xbd, 0xcd, 0xc6, 0xce, 0xcf, 0x49, 0x4e, 0x4f,\n-    0x57, 0x59, 0x5e, 0x5f, 0x89, 0x8e, 0x8f, 0xb1,\n-    0xb6, 0xb7, 0xbf, 0xc1, 0xc6, 0xc7, 0xd7, 0x11,\n-    0x16, 0x17, 0x5b, 0x5c, 0xf6, 0xf7, 0xfe, 0xff,\n-    0x80, 0x0d, 0x6d, 0x71, 0xde, 0xdf, 0x0e, 0x0f,\n-    0x1f, 0x6e, 0x6f, 0x1c, 0x1d, 0x5f, 0x7d, 0x7e,\n-    0xae, 0xaf, 0xbb, 0xbc, 0xfa, 0x16, 0x17, 0x1e,\n-    0x1f, 0x46, 0x47, 0x4e, 0x4f, 0x58, 0x5a, 0x5c,\n-    0x5e, 0x7e, 0x7f, 0xb5, 0xc5, 0xd4, 0xd5, 0xdc,\n-    0xf0, 0xf1, 0xf5, 0x72, 0x73, 0x8f, 0x74, 0x75,\n-    0x96, 0x97, 0x2f, 0x5f, 0x26, 0x2e, 0x2f, 0xa7,\n-    0xaf, 0xb7, 0xbf, 0xc7, 0xcf, 0xd7, 0xdf, 0x9a,\n-    0x40, 0x97, 0x98, 0x30, 0x8f, 0x1f, 0xc0, 0xc1,\n-    0xce, 0xff, 0x4e, 0x4f, 0x5a, 0x5b, 0x07, 0x08,\n-    0x0f, 0x10, 0x27, 0x2f, 0xee, 0xef, 0x6e, 0x6f,\n-    0x37, 0x3d, 0x3f, 0x42, 0x45, 0x90, 0x91, 0xfe,\n-    0xff, 0x53, 0x67, 0x75, 0xc8, 0xc9, 0xd0, 0xd1,\n-    0xd8, 0xd9, 0xe7, 0xfe, 0xff,\n+    0xbb, 0xc5, 0xc9, 0xdf, 0xe4, 0xe5, 0xf0, 0x0d,\n+    0x11, 0x45, 0x49, 0x64, 0x65, 0x80, 0x84, 0xb2,\n+    0xbc, 0xbe, 0xbf, 0xd5, 0xd7, 0xf0, 0xf1, 0x83,\n+    0x85, 0x8b, 0xa4, 0xa6, 0xbe, 0xbf, 0xc5, 0xc7,\n+    0xce, 0xcf, 0xda, 0xdb, 0x48, 0x98, 0xbd, 0xcd,\n+    0xc6, 0xce, 0xcf, 0x49, 0x4e, 0x4f, 0x57, 0x59,\n+    0x5e, 0x5f, 0x89, 0x8e, 0x8f, 0xb1, 0xb6, 0xb7,\n+    0xbf, 0xc1, 0xc6, 0xc7, 0xd7, 0x11, 0x16, 0x17,\n+    0x5b, 0x5c, 0xf6, 0xf7, 0xfe, 0xff, 0x80, 0x0d,\n+    0x6d, 0x71, 0xde, 0xdf, 0x0e, 0x0f, 0x1f, 0x6e,\n+    0x6f, 0x1c, 0x1d, 0x5f, 0x7d, 0x7e, 0xae, 0xaf,\n+    0xbb, 0xbc, 0xfa, 0x16, 0x17, 0x1e, 0x1f, 0x46,\n+    0x47, 0x4e, 0x4f, 0x58, 0x5a, 0x5c, 0x5e, 0x7e,\n+    0x7f, 0xb5, 0xc5, 0xd4, 0xd5, 0xdc, 0xf0, 0xf1,\n+    0xf5, 0x72, 0x73, 0x8f, 0x74, 0x75, 0x96, 0x2f,\n+    0x5f, 0x26, 0x2e, 0x2f, 0xa7, 0xaf, 0xb7, 0xbf,\n+    0xc7, 0xcf, 0xd7, 0xdf, 0x9a, 0x40, 0x97, 0x98,\n+    0x30, 0x8f, 0x1f, 0xc0, 0xc1, 0xce, 0xff, 0x4e,\n+    0x4f, 0x5a, 0x5b, 0x07, 0x08, 0x0f, 0x10, 0x27,\n+    0x2f, 0xee, 0xef, 0x6e, 0x6f, 0x37, 0x3d, 0x3f,\n+    0x42, 0x45, 0x90, 0x91, 0xfe, 0xff, 0x53, 0x67,\n+    0x75, 0xc8, 0xc9, 0xd0, 0xd1, 0xd8, 0xd9, 0xe7,\n+    0xfe, 0xff,\n ];\n #[rustfmt::skip]\n const SINGLETONS1U: &[(u8, u8)] = &[\n@@ -163,14 +166,15 @@ const SINGLETONS1U: &[(u8, u8)] = &[\n     (0x09, 2),\n     (0x0a, 5),\n     (0x0b, 2),\n+    (0x0e, 4),\n     (0x10, 1),\n-    (0x11, 4),\n+    (0x11, 2),\n     (0x12, 5),\n     (0x13, 17),\n-    (0x14, 2),\n+    (0x14, 1),\n     (0x15, 2),\n     (0x17, 2),\n-    (0x19, 4),\n+    (0x19, 13),\n     (0x1c, 5),\n     (0x1d, 8),\n     (0x24, 1),\n@@ -188,32 +192,35 @@ const SINGLETONS1U: &[(u8, u8)] = &[\n     (0xe8, 2),\n     (0xee, 32),\n     (0xf0, 4),\n-    (0xf9, 6),\n+    (0xf8, 2),\n+    (0xf9, 2),\n     (0xfa, 2),\n+    (0xfb, 1),\n ];\n #[rustfmt::skip]\n const SINGLETONS1L: &[u8] = &[\n     0x0c, 0x27, 0x3b, 0x3e, 0x4e, 0x4f, 0x8f, 0x9e,\n     0x9e, 0x9f, 0x06, 0x07, 0x09, 0x36, 0x3d, 0x3e,\n     0x56, 0xf3, 0xd0, 0xd1, 0x04, 0x14, 0x18, 0x36,\n-    0x37, 0x56, 0x57, 0xbd, 0x35, 0xce, 0xcf, 0xe0,\n-    0x12, 0x87, 0x89, 0x8e, 0x9e, 0x04, 0x0d, 0x0e,\n-    0x11, 0x12, 0x29, 0x31, 0x34, 0x3a, 0x45, 0x46,\n-    0x49, 0x4a, 0x4e, 0x4f, 0x64, 0x65, 0x5a, 0x5c,\n-    0xb6, 0xb7, 0x1b, 0x1c, 0xa8, 0xa9, 0xd8, 0xd9,\n-    0x09, 0x37, 0x90, 0x91, 0xa8, 0x07, 0x0a, 0x3b,\n-    0x3e, 0x66, 0x69, 0x8f, 0x92, 0x6f, 0x5f, 0xee,\n-    0xef, 0x5a, 0x62, 0x9a, 0x9b, 0x27, 0x28, 0x55,\n-    0x9d, 0xa0, 0xa1, 0xa3, 0xa4, 0xa7, 0xa8, 0xad,\n-    0xba, 0xbc, 0xc4, 0x06, 0x0b, 0x0c, 0x15, 0x1d,\n-    0x3a, 0x3f, 0x45, 0x51, 0xa6, 0xa7, 0xcc, 0xcd,\n-    0xa0, 0x07, 0x19, 0x1a, 0x22, 0x25, 0x3e, 0x3f,\n-    0xc5, 0xc6, 0x04, 0x20, 0x23, 0x25, 0x26, 0x28,\n-    0x33, 0x38, 0x3a, 0x48, 0x4a, 0x4c, 0x50, 0x53,\n-    0x55, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x63,\n-    0x65, 0x66, 0x6b, 0x73, 0x78, 0x7d, 0x7f, 0x8a,\n-    0xa4, 0xaa, 0xaf, 0xb0, 0xc0, 0xd0, 0x0c, 0x72,\n-    0xa3, 0xa4, 0xcb, 0xcc, 0x6e, 0x6f,\n+    0x37, 0x56, 0x57, 0x7f, 0xaa, 0xae, 0xaf, 0xbd,\n+    0x35, 0xe0, 0x12, 0x87, 0x89, 0x8e, 0x9e, 0x04,\n+    0x0d, 0x0e, 0x11, 0x12, 0x29, 0x31, 0x34, 0x3a,\n+    0x45, 0x46, 0x49, 0x4a, 0x4e, 0x4f, 0x64, 0x65,\n+    0x5c, 0xb6, 0xb7, 0x1b, 0x1c, 0x07, 0x08, 0x0a,\n+    0x0b, 0x14, 0x17, 0x36, 0x39, 0x3a, 0xa8, 0xa9,\n+    0xd8, 0xd9, 0x09, 0x37, 0x90, 0x91, 0xa8, 0x07,\n+    0x0a, 0x3b, 0x3e, 0x66, 0x69, 0x8f, 0x92, 0x6f,\n+    0x5f, 0xee, 0xef, 0x5a, 0x62, 0x9a, 0x9b, 0x27,\n+    0x28, 0x55, 0x9d, 0xa0, 0xa1, 0xa3, 0xa4, 0xa7,\n+    0xa8, 0xad, 0xba, 0xbc, 0xc4, 0x06, 0x0b, 0x0c,\n+    0x15, 0x1d, 0x3a, 0x3f, 0x45, 0x51, 0xa6, 0xa7,\n+    0xcc, 0xcd, 0xa0, 0x07, 0x19, 0x1a, 0x22, 0x25,\n+    0x3e, 0x3f, 0xc5, 0xc6, 0x04, 0x20, 0x23, 0x25,\n+    0x26, 0x28, 0x33, 0x38, 0x3a, 0x48, 0x4a, 0x4c,\n+    0x50, 0x53, 0x55, 0x56, 0x58, 0x5a, 0x5c, 0x5e,\n+    0x60, 0x63, 0x65, 0x66, 0x6b, 0x73, 0x78, 0x7d,\n+    0x7f, 0x8a, 0xa4, 0xaa, 0xaf, 0xb0, 0xc0, 0xd0,\n+    0xae, 0xaf, 0x79, 0xcc, 0x6e, 0x6f, 0x93,\n ];\n #[rustfmt::skip]\n const NORMAL0: &[u8] = &[\n@@ -225,7 +232,7 @@ const NORMAL0: &[u8] = &[\n     0x06, 0x11,\n     0x81, 0xac, 0x0e,\n     0x80, 0xab, 0x35,\n-    0x1e, 0x15,\n+    0x28, 0x0b,\n     0x80, 0xe0, 0x03,\n     0x19, 0x08,\n     0x01, 0x04,\n@@ -237,8 +244,8 @@ const NORMAL0: &[u8] = &[\n     0x11, 0x0a,\n     0x50, 0x0f,\n     0x12, 0x07,\n-    0x55, 0x08,\n-    0x02, 0x04,\n+    0x55, 0x07,\n+    0x03, 0x04,\n     0x1c, 0x0a,\n     0x09, 0x03,\n     0x08, 0x03,\n@@ -292,7 +299,7 @@ const NORMAL0: &[u8] = &[\n     0x0b, 0x03,\n     0x80, 0xac, 0x06,\n     0x0a, 0x06,\n-    0x1f, 0x41,\n+    0x21, 0x3f,\n     0x4c, 0x04,\n     0x2d, 0x03,\n     0x74, 0x08,\n@@ -315,21 +322,19 @@ const NORMAL0: &[u8] = &[\n     0x3b, 0x07,\n     0x02, 0x0e,\n     0x18, 0x09,\n-    0x80, 0xb0, 0x30,\n+    0x80, 0xb3, 0x2d,\n     0x74, 0x0c,\n     0x80, 0xd6, 0x1a,\n     0x0c, 0x05,\n     0x80, 0xff, 0x05,\n-    0x80, 0xb6, 0x05,\n-    0x24, 0x0c,\n-    0x9b, 0xc6, 0x0a,\n-    0xd2, 0x30, 0x10,\n+    0x80, 0xdf, 0x0c,\n+    0xee, 0x0d, 0x03,\n     0x84, 0x8d, 0x03,\n     0x37, 0x09,\n     0x81, 0x5c, 0x14,\n     0x80, 0xb8, 0x08,\n-    0x80, 0xc7, 0x30,\n-    0x35, 0x04,\n+    0x80, 0xcb, 0x2a,\n+    0x38, 0x03,\n     0x0a, 0x06,\n     0x38, 0x08,\n     0x46, 0x08,\n@@ -341,7 +346,7 @@ const NORMAL0: &[u8] = &[\n     0x80, 0x83, 0x18,\n     0x1c, 0x0a,\n     0x16, 0x09,\n-    0x48, 0x08,\n+    0x4c, 0x04,\n     0x80, 0x8a, 0x06,\n     0xab, 0xa4, 0x0c,\n     0x17, 0x04,\n@@ -365,7 +370,7 @@ const NORMAL1: &[u8] = &[\n     0x7b, 0x05,\n     0x03, 0x04,\n     0x2d, 0x03,\n-    0x65, 0x04,\n+    0x66, 0x03,\n     0x01, 0x2f,\n     0x2e, 0x80, 0x82,\n     0x1d, 0x03,\n@@ -410,16 +415,17 @@ const NORMAL1: &[u8] = &[\n     0x33, 0x07,\n     0x2e, 0x08,\n     0x0a, 0x81, 0x26,\n-    0x1f, 0x80, 0x81,\n+    0x52, 0x4e,\n     0x28, 0x08,\n-    0x2a, 0x80, 0x86,\n+    0x2a, 0x56,\n+    0x1c, 0x14,\n     0x17, 0x09,\n     0x4e, 0x04,\n     0x1e, 0x0f,\n     0x43, 0x0e,\n     0x19, 0x07,\n     0x0a, 0x06,\n-    0x47, 0x09,\n+    0x48, 0x08,\n     0x27, 0x09,\n     0x75, 0x0b,\n     0x3f, 0x41,\n@@ -430,7 +436,7 @@ const NORMAL1: &[u8] = &[\n     0x01, 0x05,\n     0x10, 0x03,\n     0x05, 0x80, 0x8b,\n-    0x60, 0x20,\n+    0x62, 0x1e,\n     0x48, 0x08,\n     0x0a, 0x80, 0xa6,\n     0x5e, 0x22,\n@@ -443,7 +449,8 @@ const NORMAL1: &[u8] = &[\n     0x10, 0x80, 0xc0,\n     0x3c, 0x64,\n     0x53, 0x0c,\n-    0x01, 0x80, 0xa0,\n+    0x48, 0x09,\n+    0x0a, 0x46,\n     0x45, 0x1b,\n     0x48, 0x08,\n     0x53, 0x1d,\n@@ -456,7 +463,8 @@ const NORMAL1: &[u8] = &[\n     0x0a, 0x06,\n     0x39, 0x07,\n     0x0a, 0x81, 0x36,\n-    0x19, 0x80, 0xc7,\n+    0x19, 0x80, 0xb7,\n+    0x01, 0x0f,\n     0x32, 0x0d,\n     0x83, 0x9b, 0x66,\n     0x75, 0x0b,\n@@ -474,9 +482,11 @@ const NORMAL1: &[u8] = &[\n     0x4b, 0x04,\n     0x39, 0x07,\n     0x11, 0x40,\n-    0x04, 0x1c,\n+    0x05, 0x0b,\n+    0x02, 0x0e,\n     0x97, 0xf8, 0x08,\n-    0x82, 0xf3, 0xa5, 0x0d,\n+    0x84, 0xd6, 0x2a,\n+    0x09, 0xa2, 0xf7,\n     0x81, 0x1f, 0x31,\n     0x03, 0x11,\n     0x04, 0x08,\n@@ -515,30 +525,31 @@ const NORMAL1: &[u8] = &[\n     0x2c, 0x04,\n     0x64, 0x0c,\n     0x56, 0x0a,\n-    0x0d, 0x03,\n-    0x5d, 0x03,\n-    0x3d, 0x39,\n+    0x80, 0xae, 0x38,\n     0x1d, 0x0d,\n     0x2c, 0x04,\n     0x09, 0x07,\n     0x02, 0x0e,\n     0x06, 0x80, 0x9a,\n-    0x83, 0xd6, 0x0a,\n+    0x83, 0xd8, 0x08,\n+    0x0d, 0x03,\n     0x0d, 0x03,\n-    0x0b, 0x05,\n     0x74, 0x0c,\n     0x59, 0x07,\n     0x0c, 0x14,\n     0x0c, 0x04,\n     0x38, 0x08,\n     0x0a, 0x06,\n     0x28, 0x08,\n-    0x1e, 0x52,\n-    0x77, 0x03,\n-    0x31, 0x03,\n-    0x80, 0xa6, 0x0c,\n-    0x14, 0x04,\n+    0x22, 0x4e,\n+    0x81, 0x54, 0x0c,\n+    0x15, 0x03,\n     0x03, 0x05,\n+    0x07, 0x09,\n+    0x19, 0x07,\n+    0x07, 0x09,\n     0x03, 0x0d,\n-    0x06, 0x85, 0x6a,\n+    0x07, 0x29,\n+    0x80, 0xcb, 0x25,\n+    0x0a, 0x84, 0x06,\n ];"}, {"sha": "3e90028613ce1c3df30850b712c38b259a579e1d", "filename": "src/libcore/unicode/unicode_data.rs", "status": "modified", "additions": 370, "deletions": 364, "changes": 734, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibcore%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibcore%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode_data.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -1,128 +1,130 @@\n ///! This file is generated by src/tools/unicode-table-generator; do not edit manually!\n use super::range_search;\n \n-pub const UNICODE_VERSION: (u32, u32, u32) = (12, 1, 0);\n+pub const UNICODE_VERSION: (u32, u32, u32) = (13, 0, 0);\n \n #[rustfmt::skip]\n pub mod alphabetic {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (190, 37);\n-    static BITSET_CHUNKS_MAP: [u8; 187] = [\n-        6, 32, 10, 18, 19, 23, 21, 12, 7, 5, 0, 20, 14, 49, 49, 49, 49, 49, 49, 36, 49, 49, 49, 49,\n-        49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 47, 49, 30, 8, 49, 49, 49, 49,\n-        49, 49, 49, 49, 49, 49, 45, 0, 0, 0, 0, 0, 0, 0, 0, 4, 35, 17, 31, 16, 25, 24, 26, 13, 15,\n-        44, 27, 0, 0, 49, 11, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 38, 1, 49, 49, 49, 49, 49, 48,\n-        42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 28, 0, 0, 0, 0, 0, 29, 0, 0, 9, 0, 33, 2, 3, 0, 0,\n-        0, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,\n-        49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 49, 49, 49,\n-        43, 22, 49, 49, 49, 49, 40, 49, 49, 49, 49, 49, 49, 46,\n+    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (196, 44);\n+    static BITSET_CHUNKS_MAP: [u8; 196] = [\n+        6, 32, 10, 18, 19, 23, 21, 12, 7, 5, 0, 20, 14, 50, 50, 50, 50, 50, 50, 37, 50, 50, 50, 50,\n+        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 49, 50, 30, 8, 50, 50, 50, 50,\n+        50, 50, 50, 50, 50, 50, 46, 0, 0, 0, 0, 0, 0, 0, 0, 4, 36, 17, 31, 16, 25, 24, 26, 13, 15,\n+        45, 27, 0, 0, 50, 11, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 39, 1, 50, 50, 50, 50, 50, 48,\n+        50, 34, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 28, 0, 0, 0, 0, 0, 29, 0, 0, 9, 0, 33, 2, 3, 0, 0,\n+        0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n+        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 42, 50, 50, 50,\n+        43, 22, 50, 50, 50, 50, 41, 50, 50, 50, 50, 50, 50, 47, 0, 0, 0, 38, 0, 50, 50, 50, 50,\n     ];\n-    static BITSET_INDEX_CHUNKS: [[u8; 16]; 50] = [\n+    static BITSET_INDEX_CHUNKS: [[u8; 16]; 51] = [\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 248, 241, 38, 40],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 108, 133, 110, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 190, 200, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 248, 248, 248, 248, 248, 205, 248, 23, 134, 245, 68, 237],\n-        [0, 0, 179, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 103, 99, 176, 248, 248, 248, 248, 248, 248, 248, 61, 0, 151, 217, 178],\n-        [0, 145, 28, 0, 168, 221, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [48, 77, 248, 165, 201, 120, 184, 137, 91, 175, 143, 83, 206, 196, 248, 56],\n-        [53, 0, 0, 0, 126, 15, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0],\n-        [59, 54, 127, 199, 167, 186, 157, 114, 154, 84, 160, 115, 158, 66, 155, 21],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 254, 247, 39, 68],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 111, 135, 113, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 195, 205, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 254, 254, 254, 254, 254, 210, 254, 25, 136, 251, 71, 243],\n+        [0, 0, 182, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 107, 103, 180, 254, 254, 254, 254, 254, 254, 254, 61, 0, 155, 222, 181],\n+        [0, 148, 30, 0, 172, 226, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [48, 80, 254, 169, 206, 123, 189, 139, 95, 179, 145, 86, 211, 204, 254, 56],\n+        [53, 0, 0, 0, 129, 17, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0],\n+        [59, 54, 185, 203, 171, 191, 161, 117, 158, 87, 164, 118, 162, 67, 159, 23],\n         [62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [91, 129, 164, 101, 248, 248, 248, 79, 248, 248, 248, 248, 230, 128, 135, 117],\n-        [97, 0, 220, 144, 0, 0, 212, 44, 142, 240, 30, 97, 0, 0, 0, 0],\n-        [116, 247, 219, 171, 188, 248, 104, 190, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [141, 185, 88, 0, 149, 213, 22, 0, 0, 0, 0, 89, 0, 0, 0, 0],\n-        [147, 90, 35, 82, 98, 0, 153, 0, 85, 119, 29, 45, 86, 71, 18, 0],\n-        [150, 32, 248, 107, 0, 81, 0, 0, 0, 0, 227, 17, 211, 105, 231, 19],\n-        [162, 41, 161, 69, 163, 173, 123, 73, 106, 14, 124, 37, 1, 187, 121, 0],\n-        [172, 240, 228, 170, 248, 248, 248, 248, 248, 229, 138, 235, 234, 24, 222, 125],\n-        [208, 233, 248, 74, 204, 64, 140, 232, 63, 0, 0, 0, 0, 0, 0, 0],\n-        [220, 97, 202, 86, 94, 78, 203, 9, 226, 80, 46, 0, 183, 11, 174, 67],\n-        [231, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248],\n-        [247, 248, 248, 248, 248, 248, 248, 248, 248, 209, 225, 95, 76, 75, 180, 25],\n-        [248, 5, 96, 50, 72, 87, 248, 26, 132, 0, 198, 51, 159, 42, 0, 0],\n-        [248, 8, 72, 72, 49, 0, 0, 0, 0, 0, 0, 0, 194, 5, 0, 89],\n-        [248, 36, 248, 7, 0, 0, 139, 31, 143, 3, 93, 0, 55, 0, 0, 0],\n-        [248, 62, 248, 248, 248, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [248, 118, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [248, 236, 166, 246, 136, 239, 248, 248, 248, 248, 215, 169, 182, 207, 214, 12],\n-        [248, 248, 13, 130, 248, 248, 248, 248, 57, 146, 248, 65, 218, 248, 243, 177],\n-        [248, 248, 191, 111, 197, 43, 0, 0, 248, 248, 248, 248, 91, 47, 0, 0],\n-        [248, 248, 244, 248, 189, 223, 152, 70, 224, 210, 248, 148, 240, 242, 68, 100],\n-        [248, 248, 248, 4, 248, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [248, 248, 248, 248, 35, 195, 248, 248, 248, 248, 248, 113, 0, 0, 0, 0],\n-        [248, 248, 248, 248, 131, 240, 238, 109, 0, 181, 248, 122, 102, 216, 143, 27],\n-        [248, 248, 248, 248, 248, 248, 86, 0, 248, 248, 248, 248, 248, 248, 248, 248],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 33, 0, 0, 0, 0, 0, 0, 0],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 97, 35, 0, 60, 65, 156, 16, 0],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 248, 6, 0, 0, 0, 0, 0, 0],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 192, 248, 248, 248, 248, 248],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 20, 248, 248, 248, 248],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 72, 0, 0, 0, 0],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 81, 248, 248, 248],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 23, 0],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 193, 112],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 39],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 65],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 92],\n-        [248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248],\n+        [95, 131, 168, 105, 254, 254, 254, 82, 254, 254, 254, 254, 236, 130, 137, 120],\n+        [101, 0, 225, 146, 151, 2, 217, 45, 144, 246, 32, 101, 0, 0, 0, 0],\n+        [119, 253, 224, 175, 193, 254, 227, 195, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [143, 190, 91, 0, 153, 218, 24, 0, 0, 0, 0, 92, 0, 0, 66, 0],\n+        [150, 94, 37, 85, 102, 0, 157, 0, 88, 122, 31, 46, 89, 74, 20, 0],\n+        [154, 34, 254, 110, 0, 84, 0, 0, 0, 0, 233, 19, 216, 108, 237, 21],\n+        [166, 42, 165, 72, 167, 177, 126, 76, 109, 16, 127, 38, 1, 192, 124, 0],\n+        [176, 246, 234, 174, 254, 254, 254, 254, 254, 235, 140, 241, 240, 26, 228, 128],\n+        [213, 239, 254, 77, 209, 64, 142, 238, 63, 0, 0, 0, 0, 0, 0, 0],\n+        [225, 101, 207, 89, 98, 81, 208, 10, 232, 83, 147, 1, 188, 13, 178, 70],\n+        [237, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254],\n+        [253, 254, 254, 254, 254, 254, 254, 254, 254, 214, 231, 99, 79, 78, 183, 27],\n+        [254, 6, 100, 50, 75, 90, 254, 28, 134, 0, 202, 51, 163, 43, 0, 0],\n+        [254, 9, 75, 75, 49, 0, 0, 0, 0, 0, 69, 0, 199, 6, 195, 93],\n+        [254, 41, 254, 8, 0, 0, 141, 33, 145, 4, 97, 0, 55, 0, 0, 0],\n+        [254, 62, 254, 254, 254, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [254, 121, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [254, 242, 170, 252, 138, 245, 254, 254, 254, 254, 220, 173, 186, 212, 219, 14],\n+        [254, 254, 15, 132, 254, 254, 254, 254, 57, 149, 254, 65, 223, 254, 249, 187],\n+        [254, 254, 196, 114, 201, 44, 0, 0, 254, 254, 254, 254, 95, 47, 0, 0],\n+        [254, 254, 250, 254, 194, 229, 156, 73, 230, 215, 254, 152, 246, 248, 71, 104],\n+        [254, 254, 254, 5, 254, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [254, 254, 254, 22, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [254, 254, 254, 254, 37, 200, 254, 254, 254, 254, 254, 116, 0, 0, 0, 0],\n+        [254, 254, 254, 254, 133, 246, 244, 112, 0, 184, 254, 125, 106, 221, 145, 29],\n+        [254, 254, 254, 254, 254, 254, 254, 0, 254, 254, 254, 254, 254, 254, 254, 254],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 35, 0, 0, 0, 0, 0, 0, 0],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 101, 37, 0, 60, 65, 160, 18, 0],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 254, 7, 0, 0, 0, 0, 0, 0],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 197, 254, 254, 254, 254, 254],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 35, 254, 254, 254, 254],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 84, 254, 254, 254],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 11, 0, 0],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 25, 0],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 198, 115],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 40],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 96],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 125],\n+        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254],\n     ];\n-    static BITSET: [u64; 249] = [\n-        0, 1, 15, 17, 31, 63, 127, 179, 511, 1023, 2191, 4079, 4087, 8191, 8319, 16384, 65535,\n-        131071, 262143, 4128527, 8388607, 8461767, 24870911, 67108863, 134217727, 276824575,\n-        335544350, 486341884, 536805376, 536870911, 553648127, 1056964608, 1073692671, 1073741823,\n-        1140785663, 2147483647, 2147485627, 4026540127, 4294934783, 8589934591, 47244640256,\n-        64548249055, 68191066527, 68719476735, 115913785343, 137438953215, 549755813888,\n-        1095220854783, 1099511627711, 1099511627775, 2199023190016, 2199023255551, 4398046511103,\n-        8641373536127, 8791831609343, 8795690369023, 8796093022207, 13198434443263, 17592186044415,\n-        35184321757183, 70368744112128, 88094074470339, 140737488355327, 140737488355328,\n-        141836999983103, 281474976710655, 563017343310239, 1125625028935679, 1125899906842623,\n-        1688915364814303, 2119858418286774, 2251795522912255, 2251799813685247, 3377704004976767,\n-        3509778554814463, 3905461007941631, 4503595333443583, 4503599627370495, 8796093022142464,\n-        9006649498927104, 9007192812290047, 9007199254740991, 15762594400829440, 17169970223906821,\n-        17732925109967239, 18014398491652207, 18014398509481983, 20266198323101808,\n-        36027697507139583, 36028792723996672, 36028792728190975, 36028797018963967,\n-        72057594037927935, 90071992547409919, 143851303137705983, 144053615424700415,\n-        144115188075855868, 144115188075855871, 288230371860938751, 297241973452963840,\n-        301749971126844416, 319718190147960832, 576460743713488896, 576460743847706622,\n-        576460748008488959, 576460752303359999, 576460752303423486, 576460752303423487,\n-        790380184120328175, 1152640029630136575, 1152917029519358975, 1152921504591118335,\n-        1152921504606845055, 1152921504606846975, 1153765996922689951, 2161727885562420159,\n-        2251241253188403424, 2295745090394464220, 2305570330330005503, 2305843004918726656,\n-        2305843004919250943, 2305843009196916483, 2305843009213693951, 3457638613854978028,\n-        4323455298678290390, 4557642822898941951, 4575692405780512767, 4602678814877679616,\n-        4611686017001275199, 4611686018360336384, 4611686018427322368, 4611686018427387903,\n-        4656722014700830719, 6843210385291930244, 6881498031078244479, 6908521828386340863,\n-        8935141660164089791, 8935423131384840192, 9168765891372858879, 9169328841326329855,\n-        9187201948305063935, 9187343239835811327, 9216616637413720063, 9223372036854775807,\n-        9223372041149743103, 9223934986808197120, 10371930679322607615, 10502394331027995967,\n-        11241233151490523135, 13006395723845991295, 13258596753222922239, 13609596598936928288,\n-        13834776580305453567, 13907115649320091647, 14082190885810440174, 14123225865944680428,\n-        16212958624174047247, 16412803692974677999, 16424062692043104238, 16424062692043104239,\n-        16424062692043243502, 16424625641996804079, 16429129241624174575, 16717361816799141871,\n-        16717361816799216127, 16788293510930366511, 17005555242810474495, 17293822569102704639,\n-        17581979622616071300, 17870283321271910397, 17870283321406070975, 17870283321406128127,\n-        17978369712463020031, 18158513764145585631, 18158781978395017215, 18194542490281852927,\n-        18410715276682199039, 18410715276690587772, 18428729675200069631, 18428729675200069632,\n-        18433233274827440127, 18437455399478099968, 18437736874452713471, 18442240474082181119,\n+    static BITSET: [u64; 255] = [\n+        0, 1, 7, 15, 17, 31, 63, 127, 179, 511, 1023, 2047, 2191, 4079, 4087, 8191, 8319, 16384,\n+        65535, 131071, 262143, 4128527, 4194303, 8461767, 24870911, 67108863, 134217727, 276824575,\n+        335593502, 486341884, 536805376, 536870911, 553648127, 1056964608, 1073692671, 1073741823,\n+        1140785663, 2147483647, 4026540127, 4294934783, 8589934591, 15032387515, 64548249055,\n+        68191066527, 68719476735, 115913785343, 137438953215, 1095220854783, 1099511627711,\n+        1099511627775, 2199023190016, 2199023255551, 4398046511103, 8641373536127, 8791831609343,\n+        8795690369023, 8796093022207, 13198434443263, 17592186044415, 35184321757183,\n+        70368744112128, 88094074470339, 140737488355327, 140737488355328, 141836999983103,\n+        281474976710655, 281474976710656, 563017343310239, 844472174772224, 875211255709695,\n+        1125625028935679, 1125899906842623, 1688915364814303, 2119858418286774, 2251795522912255,\n+        2251799813685247, 3377704004976767, 3509778554814463, 3905461007941631, 4503595333443583,\n+        4503599627370495, 8796093022142464, 9006649498927104, 9007192812290047, 9007199254740991,\n+        15762594400829440, 17169970223906821, 17732925109967239, 18014398491652207,\n+        18014398509481983, 20266198323101936, 36027697507139583, 36028792723996672,\n+        36028792723996703, 36028792728190975, 36028797018963967, 72057594037927935,\n+        90071992547409919, 143851303137705983, 144053615424700415, 144115188075855868,\n+        144115188075855871, 288230371860938751, 297241973452963840, 301749971126844416,\n+        319718190147960832, 576460743713488896, 576460743847706622, 576460752303359999,\n+        576460752303423486, 576460752303423487, 790380184120328175, 1152640029630136575,\n+        1152917029519358975, 1152921504591118335, 1152921504606845055, 1152921504606846975,\n+        1153765996922689951, 2161727885562420159, 2251241253188403424, 2295745090394464220,\n+        2305570330330005503, 2305843004918726656, 2305843004919250943, 2305843009196916483,\n+        2305843009213693951, 3457638613854978030, 4323455298678290390, 4557642822898941951,\n+        4575692405780512767, 4611686017001275199, 4611686018360336384, 4611686018427322368,\n+        4611686018427387903, 4656722014700830719, 6843210385291930244, 6881498031078244479,\n+        6908521828386340863, 8935141660164089791, 8935423131384840192, 9168765891372858879,\n+        9169328841326329855, 9187201948305063935, 9187343239835811327, 9216616637413720063,\n+        9223372036854775807, 9223372041149743103, 9223372586610589696, 9223934986808197120,\n+        10371930679322607615, 10502394331027995967, 11078855083321979519, 11241233151490523135,\n+        13006395723845991295, 13258596753222922239, 13609596598936928288, 13834776580305453567,\n+        13907115649320091647, 14082190885810440174, 14123225865944680428, 16212958624174047247,\n+        16412803692974677999, 16424062692043104238, 16424062692043104239, 16424062692043243502,\n+        16424625641996804079, 16429129241624174575, 16717361816799141887, 16717361816799216127,\n+        16788293510930366511, 17005555242810474495, 17293822569102704639, 17581979622616071300,\n+        17870283321271910397, 17870283321406070975, 17870283321406128127, 17978369712463020031,\n+        18158513764145585631, 18158781978395017215, 18194542490281852927, 18410715276682199039,\n+        18428729675200069631, 18428729675200069632, 18433233274827440127, 18437455399478099968,\n+        18437736870159843328, 18437736874452713471, 18437736874454812668, 18442240474082181119,\n         18444492273895866367, 18445618173802708993, 18446181192473632767, 18446216308128218879,\n         18446462598732840928, 18446462598732840959, 18446462598732840960, 18446462599806582783,\n         18446462615912710143, 18446462667452317695, 18446463149025525759, 18446463629525450752,\n-        18446463698110251007, 18446463698244468735, 18446464796682337663, 18446466966713532416,\n+        18446463698244468735, 18446464796682337663, 18446466966713532671, 18446466996645134335,\n         18446466996779287551, 18446471394825862144, 18446471394825863167, 18446480190918885375,\n         18446498607738650623, 18446532967477018623, 18446602782178705022, 18446603336221163519,\n         18446603336221196287, 18446638520593285119, 18446673709243564031, 18446708893632430079,\n         18446740770879700992, 18446741595513422027, 18446741874686295551, 18446743249075830783,\n         18446743798965862398, 18446744056529672000, 18446744060816261120, 18446744068886102015,\n-        18446744069414584320, 18446744069414601696, 18446744069414649855, 18446744069456527359,\n-        18446744069548736512, 18446744069548802046, 18446744069683019775, 18446744069951455231,\n-        18446744070421282815, 18446744070446333439, 18446744070475743231, 18446744070488326143,\n-        18446744071553646463, 18446744071562067967, 18446744073696837631, 18446744073701162813,\n-        18446744073707454463, 18446744073709027328, 18446744073709355007, 18446744073709419615,\n-        18446744073709486080, 18446744073709520895, 18446744073709543424, 18446744073709550079,\n-        18446744073709550595, 18446744073709551579, 18446744073709551599, 18446744073709551614,\n-        18446744073709551615,\n+        18446744069414584320, 18446744069414601696, 18446744069414617087, 18446744069414649855,\n+        18446744069456527359, 18446744069548736512, 18446744069548802046, 18446744069683019775,\n+        18446744069951455231, 18446744070421282815, 18446744070446333439, 18446744070475743231,\n+        18446744070488326143, 18446744071553646463, 18446744071562067967, 18446744073696837631,\n+        18446744073701162813, 18446744073707454463, 18446744073709027328, 18446744073709355007,\n+        18446744073709419615, 18446744073709486080, 18446744073709520895, 18446744073709543424,\n+        18446744073709550079, 18446744073709550595, 18446744073709551579, 18446744073709551599,\n+        18446744073709551614, 18446744073709551615,\n     ];\n \n     pub fn lookup(c: char) -> bool {\n@@ -141,82 +143,83 @@ pub mod case_ignorable {\n     static BITSET_LAST_CHUNK_MAP: (u16, u8) = (896, 33);\n     static BITSET_CHUNKS_MAP: [u8; 125] = [\n         25, 14, 21, 30, 28, 4, 17, 23, 22, 0, 0, 16, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 13, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 13, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 3, 6, 9, 0, 7, 11, 32, 31, 26, 29, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0,\n-        10, 0, 8, 0, 20, 0, 12, 0, 1,\n+        10, 0, 8, 0, 19, 0, 12, 0, 1,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 16]; 34] = [\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 47, 52],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 171, 2],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 88, 134, 38],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 102, 6, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 76, 26, 0, 146, 136, 79, 43, 117],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 58, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 165, 97, 75, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 48, 0, 114, 0, 0],\n-        [0, 0, 0, 0, 0, 170, 68, 0, 0, 7, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0],\n-        [0, 0, 0, 28, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 133, 0, 0, 0, 0, 15, 160, 45, 84, 51, 78, 12, 109],\n-        [0, 0, 11, 0, 0, 30, 161, 90, 35, 80, 0, 69, 173, 13, 81, 129],\n-        [0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 131, 0, 85, 0, 148, 0, 175, 73, 0, 0, 0, 0, 0, 0, 0],\n-        [20, 4, 62, 0, 118, 0, 0, 0, 32, 154, 145, 0, 124, 89, 67, 86],\n-        [25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [59, 0, 0, 150, 70, 24, 132, 60, 100, 122, 163, 99, 0, 46, 0, 66],\n-        [63, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0],\n-        [71, 33, 0, 178, 123, 83, 120, 137, 121, 98, 121, 167, 153, 55, 3, 18],\n-        [72, 149, 36, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [104, 133, 0, 110, 174, 105, 177, 166, 0, 0, 0, 0, 0, 0, 155, 139],\n-        [107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [111, 50, 106, 0, 0, 0, 0, 0, 0, 0, 172, 179, 179, 112, 9, 0],\n-        [113, 0, 0, 0, 0, 0, 0, 49, 142, 34, 31, 0, 0, 0, 0, 0],\n-        [116, 0, 42, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [140, 93, 37, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0],\n-        [159, 0, 101, 0, 158, 10, 29, 0, 0, 0, 0, 91, 0, 0, 0, 0],\n-        [162, 56, 153, 54, 125, 53, 0, 27, 115, 21, 126, 19, 108, 144, 127, 8],\n-        [168, 41, 151, 5, 0, 0, 157, 39, 156, 1, 103, 0, 65, 0, 0, 0],\n-        [169, 147, 130, 17, 96, 87, 143, 16, 138, 0, 0, 64, 125, 95, 0, 0],\n-        [176, 179, 0, 0, 179, 179, 179, 77, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 47, 57],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 173, 3],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 90, 136, 38],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 104, 7, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 78, 27, 0, 148, 138, 81, 44, 119],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 58, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 167, 99, 77, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 48, 0, 116, 0, 0],\n+        [0, 0, 0, 0, 0, 172, 70, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 67, 0, 0, 24, 0, 0],\n+        [0, 0, 0, 29, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 135, 0, 0, 0, 0, 16, 162, 46, 86, 51, 80, 13, 111],\n+        [0, 0, 12, 0, 0, 43, 163, 92, 35, 82, 0, 71, 175, 14, 83, 131],\n+        [0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 133, 0, 87, 0, 150, 0, 178, 75, 0, 0, 0, 0, 0, 0, 0],\n+        [20, 5, 61, 0, 120, 0, 0, 0, 32, 156, 176, 1, 126, 91, 69, 88],\n+        [26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [62, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0],\n+        [66, 0, 0, 152, 72, 25, 134, 59, 102, 124, 165, 101, 0, 64, 0, 68],\n+        [73, 33, 0, 181, 125, 85, 122, 139, 123, 100, 123, 169, 155, 54, 4, 18],\n+        [74, 151, 36, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [106, 135, 0, 112, 177, 107, 180, 168, 0, 0, 0, 0, 0, 0, 157, 142],\n+        [109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [113, 50, 108, 0, 0, 0, 0, 0, 0, 0, 174, 182, 182, 114, 10, 0],\n+        [115, 0, 0, 0, 141, 5, 0, 49, 145, 34, 31, 0, 0, 0, 0, 0],\n+        [118, 0, 42, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [143, 95, 37, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0],\n+        [161, 0, 103, 0, 160, 11, 30, 0, 0, 0, 0, 93, 0, 0, 0, 0],\n+        [164, 55, 155, 53, 127, 52, 2, 28, 117, 21, 128, 19, 110, 147, 129, 9],\n+        [170, 41, 153, 6, 0, 0, 159, 39, 158, 1, 105, 0, 65, 0, 0, 0],\n+        [171, 149, 132, 17, 98, 89, 146, 23, 140, 0, 0, 63, 127, 97, 0, 0],\n+        [179, 182, 0, 0, 182, 182, 182, 79, 0, 0, 0, 0, 0, 0, 0, 0],\n     ];\n-    static BITSET: [u64; 180] = [\n-        0, 1, 3, 4, 8, 13, 15, 28, 64, 176, 191, 1016, 1792, 2047, 4080, 4096, 7680, 8192, 8193,\n-        16192, 30720, 32704, 32768, 131008, 262016, 2097152, 2359296, 6030336, 8323072, 10682368,\n-        33554432, 58719232, 159383552, 234881024, 243138688, 402587711, 536805376, 536879204,\n-        546307648, 805306369, 1073741824, 1073741916, 2113929216, 3221225472, 3758096384,\n-        4026531840, 4160749568, 4294934528, 4294967296, 4512022528, 5368709120, 17179869183,\n-        47244640256, 51539615774, 51539619904, 51543810078, 51545914817, 66035122176, 412316860416,\n-        412316862532, 412316893184, 1030792151040, 2199023255648, 8641373536127, 8763880767488,\n-        17303886364672, 36421322670080, 65128884076547, 65970697670631, 68168642985984,\n-        70093866270720, 70368739983360, 136957967529984, 140737488355328, 263882790666240,\n-        281470547525648, 281470682333183, 281474976710655, 281474976710656, 281474976710657,\n-        281479271675905, 562675075514368, 562949953355776, 563001509683710, 844424930131968,\n-        985162418487296, 1023920203366400, 2251799813685248, 3377699721314304, 4494803534348292,\n-        4503599627370678, 6755399441055744, 7881299349733376, 8444256867844096, 8725724278030336,\n-        8760633772212225, 8989057312882695, 9042383626829823, 9851624185018758, 24822575045541890,\n-        28848986089586688, 30958948903026688, 35747322042253312, 53805701016846336,\n-        58529202969772032, 72066390130950143, 112767012056334336, 143833713099145216,\n-        189151184399892480, 216172782113783808, 220713756545974272, 288301294651703296,\n-        302022650010533887, 504262420777140224, 558446353793941504, 572520102629474304,\n-        593978171557150752, 1008806350890729472, 1009933895770046464, 1152921504606846976,\n-        1152921504606846978, 1152921504606846982, 1153202979583561736, 1441151880758558727,\n-        1715871458028158991, 1729382256910270467, 2301902359539744768, 2305843009196908767,\n-        2305843009213693952, 2612078987781865472, 2771965570646540291, 3458764513820540928,\n-        3731232291276455943, 4539628424389459968, 4589168020290535424, 4611404543450677248,\n-        4611686018494513280, 4611686069967003678, 4671217976001691648, 6917775322003857411,\n-        7421334051581067264, 8070450532247928832, 8788774672813524990, 9205357638345293827,\n-        9222809086901354496, 9223091111633879040, 9223372036854775808, 9223372036854775935,\n-        9223512774343131136, 9224216320050987008, 9224497932466651184, 9653465801268658176,\n-        9727775195120332910, 10376293541461622786, 11526998316797657088, 11529215046068469760,\n-        12103423998558208000, 12699025049277956096, 13005832773892571136, 13798747783286489088,\n-        13832665517980123136, 13835058055282032640, 13835058055282163729, 13951307220663664640,\n-        17870283321406128128, 17906312118425092095, 18158513697557839871, 18158513749097456062,\n-        18374686479671623680, 18374686479671623682, 18444496122186563584, 18445618173802708992,\n-        18446462598732840960, 18446462598733004800, 18446726481523507200, 18446744069414584320,\n-        18446744069414584322, 18446744073575333888, 18446744073709027328, 18446744073709551615,\n+    static BITSET: [u64; 183] = [\n+        0, 1, 2, 3, 4, 8, 13, 15, 28, 64, 176, 191, 1016, 1792, 2047, 4080, 4096, 8192, 8193,\n+        16192, 30720, 32704, 32768, 40448, 131008, 262016, 2097152, 2359296, 6030336, 8323072,\n+        10682368, 58719232, 159383552, 234881024, 243138688, 402587711, 536805376, 536879204,\n+        546307648, 805306369, 1073741824, 1073741916, 2113929216, 2181038080, 3221225472,\n+        3758096384, 4026531840, 4294934528, 4294967296, 4512022528, 5368709120, 17179869183,\n+        51539615774, 51539619904, 51545907230, 51545914817, 66035122176, 115964116992, 412316860416,\n+        412316893184, 1030792151040, 2199023255648, 8641373536127, 8763880767488, 15397323538432,\n+        17303886364672, 18004502906948, 26388279066624, 36421322670080, 65128884076547,\n+        65970697670631, 68168642985984, 70093866270720, 70368739983360, 136957967529984,\n+        140737488355328, 263882790666240, 281470547525648, 281470682333183, 281474976710655,\n+        281474976710656, 281474976710657, 281479271675905, 562675075514368, 562949953355776,\n+        563001509683710, 844424930131968, 985162418487296, 1023920203366400, 2251799813685248,\n+        3377699721314304, 4494803534348292, 4503599627370678, 6755399441055744, 7881299349733376,\n+        8444256867844096, 8725724278030336, 8760633772212225, 8989057312882695, 9042383626829823,\n+        9851624185018758, 24822575045541890, 28848986089586688, 30958948903026688,\n+        35747322042253312, 53805701016846336, 58529202969772032, 72066390130950143,\n+        112767012056334336, 143833713099145216, 189151184399892480, 216172782113783808,\n+        220713756545974272, 288301294651703296, 302022650010533887, 504262420777140224,\n+        558446353793941504, 572520102629474304, 593978171557150752, 1008806350890729472,\n+        1009933895770046464, 1152921504606846976, 1152921504606846978, 1152921504606846982,\n+        1153202979583561736, 1441151880758558727, 1715871458028158991, 1729382256910270467,\n+        2301902359539744768, 2305843009196908767, 2305843009213693952, 2612078987781865472,\n+        2771965570646540291, 3458764513820540928, 3731232291276455943, 4539628424389459968,\n+        4589168020290535424, 4611404543450677248, 4611686018494513280, 4611686069967003678,\n+        4671217976001691648, 6341068275337658368, 6917775322003857411, 7421334051581067264,\n+        8070450532247928832, 8788774672813524990, 9205357638345293827, 9222809086901354496,\n+        9223372036854775808, 9223372036854775935, 9223512774343131136, 9224216320050987008,\n+        9224497932466651184, 9653465801268658176, 9727775195120332910, 10376293541461622786,\n+        11526998316797657088, 11529215046068469760, 12103423998558208000, 12699025049277956096,\n+        13005832773892571136, 13798747783286489088, 13832665517980123136, 13835058055282032640,\n+        13835058055282163729, 13951307220663664640, 17870283321406128128, 17906312118425092095,\n+        18158513697557839871, 18158513749097456062, 18374686479671623680, 18374686479671623682,\n+        18444496122186563584, 18445618173802708992, 18446462598732840960, 18446462598733004800,\n+        18446463148488654848, 18446726481523507200, 18446744069414584320, 18446744069414584322,\n+        18446744073575333888, 18446744073709027328, 18446744073709551615,\n     ];\n \n     pub fn lookup(c: char) -> bool {\n@@ -264,13 +267,13 @@ pub mod cased {\n     static BITSET: [u64; 63] = [\n         0, 15, 24, 511, 1023, 4087, 65535, 16253055, 134217726, 536805376, 1073741823, 4294967295,\n         133143986179, 4398046511103, 36009005809663, 70368744177663, 2251799813685247,\n-        3509778554814463, 144115188074807295, 297241973452963840, 504403158265495676,\n+        3509778554814463, 144115188074807295, 297241973452963840, 531424756029720572,\n         576460743713488896, 576460743847706622, 1152921504591118335, 2295745090394464220,\n         4557642822898941951, 4611686017001275199, 6908521828386340863, 8935141660164089791,\n         9223934986808197120, 13605092999309557792, 16717361816799216127, 16717361816799223999,\n         17005555242810474495, 17446871633794956420, 17870283321271910397, 17870283321406128127,\n         18410715276682199039, 18428729675200069631, 18428729675200069632, 18437736874452713471,\n-        18446462598732840959, 18446462598732840960, 18446463698110251007, 18446466996779287551,\n+        18446462598732840959, 18446462598732840960, 18446464797621878783, 18446466996779287551,\n         18446603336221163519, 18446603336221196287, 18446741874686295551, 18446743249075830783,\n         18446744056529672000, 18446744056529682432, 18446744069414584320, 18446744069414601696,\n         18446744069422972927, 18446744070475743231, 18446744071562067967, 18446744073707454463,\n@@ -317,72 +320,72 @@ pub mod grapheme_extend {\n     static BITSET_LAST_CHUNK_MAP: (u16, u8) = (896, 30);\n     static BITSET_CHUNKS_MAP: [u8; 123] = [\n         4, 15, 21, 27, 25, 3, 18, 23, 17, 0, 0, 14, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 2, 7, 10, 0, 8, 12, 29, 28, 24, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0,\n-        11, 0, 9, 0, 20, 0, 13,\n+        11, 0, 9, 0, 19, 0, 13,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 16]; 31] = [\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 18, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 70, 102, 29],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 62, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 83, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 35, 66, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 35, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 45, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 130, 78, 60, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 37, 0, 90, 0, 0],\n-        [0, 0, 0, 0, 0, 129, 54, 0, 0, 3, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0],\n-        [0, 0, 0, 19, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 67, 0, 114, 0, 137, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 7, 0, 0, 0, 125, 5, 24, 63, 0, 55, 135, 9, 64, 100],\n-        [0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [10, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [12, 0, 48, 0, 92, 0, 0, 0, 25, 119, 113, 0, 96, 71, 53, 68],\n-        [46, 0, 0, 116, 57, 17, 101, 44, 81, 94, 127, 80, 0, 0, 0, 52],\n-        [49, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0],\n-        [56, 26, 0, 136, 95, 43, 107, 105, 93, 79, 93, 132, 128, 42, 104, 20],\n-        [59, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [85, 0, 0, 87, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [89, 0, 0, 0, 0, 0, 0, 38, 110, 27, 22, 0, 0, 0, 0, 0],\n-        [109, 74, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0],\n-        [124, 0, 82, 0, 123, 6, 21, 0, 0, 0, 0, 72, 0, 0, 0, 0],\n-        [126, 40, 118, 39, 108, 41, 0, 34, 91, 14, 97, 13, 86, 112, 98, 4],\n-        [133, 32, 120, 2, 0, 0, 122, 30, 121, 1, 84, 0, 51, 0, 0, 0],\n-        [134, 115, 88, 0, 77, 69, 111, 11, 106, 0, 0, 50, 108, 76, 0, 0],\n-        [137, 138, 0, 0, 138, 138, 138, 62, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20, 46],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 74, 106, 31],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 66, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 87, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 37, 70, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 37, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 48, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 134, 82, 64, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 39, 0, 94, 0, 0],\n+        [0, 0, 0, 0, 0, 133, 58, 0, 0, 5, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 55, 0, 0, 18, 0, 0],\n+        [0, 0, 0, 21, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 71, 0, 118, 0, 142, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 9, 0, 0, 0, 129, 7, 26, 67, 0, 59, 140, 11, 68, 104],\n+        [0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [12, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [13, 0, 50, 0, 96, 0, 0, 0, 27, 123, 139, 1, 100, 75, 57, 72],\n+        [51, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0],\n+        [54, 0, 0, 120, 61, 19, 105, 47, 85, 98, 131, 84, 0, 0, 0, 56],\n+        [60, 28, 0, 141, 99, 45, 111, 109, 97, 83, 97, 136, 132, 44, 108, 22],\n+        [63, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [89, 0, 0, 91, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [93, 0, 0, 0, 113, 3, 0, 40, 115, 29, 24, 0, 0, 0, 0, 0],\n+        [114, 78, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0],\n+        [128, 0, 86, 0, 127, 8, 23, 0, 0, 0, 0, 76, 0, 0, 0, 0],\n+        [130, 42, 122, 41, 112, 43, 2, 36, 95, 15, 101, 14, 90, 117, 102, 6],\n+        [137, 34, 124, 4, 0, 0, 126, 32, 125, 1, 88, 0, 53, 0, 0, 0],\n+        [138, 119, 92, 0, 81, 73, 116, 17, 110, 0, 0, 52, 112, 80, 0, 0],\n+        [142, 143, 0, 0, 143, 143, 143, 66, 0, 0, 0, 0, 0, 0, 0, 0],\n     ];\n-    static BITSET: [u64; 139] = [\n-        0, 1, 13, 28, 64, 182, 191, 1016, 2032, 2047, 4096, 7680, 14336, 16128, 32640, 32768,\n-        131008, 262016, 491520, 8323072, 8396801, 10682368, 58719232, 100663296, 134152192,\n+    static BITSET: [u64; 144] = [\n+        0, 1, 2, 8, 13, 28, 64, 182, 191, 1016, 2032, 2047, 4096, 14336, 16128, 32640, 32768,\n+        40448, 131008, 262016, 491520, 8323072, 8396801, 10682368, 58719232, 100663296, 134152192,\n         159383552, 234881024, 243138688, 536879204, 537919040, 805306369, 1073741824, 1073741916,\n         1610612736, 2153546752, 3221225472, 3758096384, 4294967296, 4512022528, 51545911364,\n-        51545914817, 51548004382, 51552198686, 51556262398, 137438953472, 412316860416,\n-        412316862532, 1030792151040, 2199023255648, 8641373536127, 8763880767488, 17303886364672,\n-        36421322670080, 65128884076547, 65970697670631, 67755789254656, 69200441769984,\n-        70093866270720, 263882790666240, 277076930199552, 281470547525648, 281470681808895,\n-        281474976710655, 281479271675904, 562675075514368, 562949953355776, 844424930131968,\n-        985162418487296, 1023920203366400, 2251799813685248, 3377699721314304, 4494803534348292,\n-        6755399441055744, 7881299349733376, 8444256867844096, 8725724278030336, 8760633780600833,\n-        8989057312882695, 9042383626829823, 9851624185018758, 18067175067615234, 28848986089586688,\n-        30958948903026688, 35747322042253312, 53805701016846336, 58529202969772032,\n-        189151184399892480, 220713756545974272, 466122561432846339, 504262420777140224,\n-        558446353793941504, 572520102629474304, 1009933895770046464, 1152921504606846982,\n-        1152921504606851080, 1441151880758558727, 1724878657282899983, 2301902359539744768,\n-        2305843009196908767, 2305843009213693952, 2310337812748042240, 3731232291276455943,\n-        4589168020290535424, 4609293481125347328, 4611686018427387908, 4611686069975392286,\n-        4671217976001691648, 5764607523034234882, 6341068275337658371, 7421334051581067264,\n-        8788774672813524990, 9205357638345293827, 9222809086901354496, 9223090561878065152,\n-        9223372036854775808, 9223372036854775935, 9224497932466651184, 9727775195120332910,\n-        10376293541461622786, 11526998316797657088, 11959590285459062784, 12103423998558208000,\n-        12699165786766311424, 13005832773892571136, 13798747783286489088, 13835058055282032640,\n-        13835058055282163729, 13951307220663664640, 14987979559889010690, 17872468738205286400,\n-        17906312118425092095, 18158513697557839871, 18158513749097456062, 18374686479671623680,\n-        18374686479671623682, 18446462598732972032, 18446744056529158144, 18446744069414584320,\n-        18446744073709551615,\n+        51545914817, 51548004382, 51554295838, 51556262398, 68719476736, 137438953472, 412316860416,\n+        1030792151040, 2199023255648, 8641373536127, 8763880767488, 17303886364672, 18004502906948,\n+        26388279066624, 36421322670080, 65128884076547, 65970697670631, 67755789254656,\n+        69200441769984, 70093866270720, 263882790666240, 277076930199552, 281470547525648,\n+        281470681808895, 281474976710655, 281479271675904, 562675075514368, 562949953355776,\n+        844424930131968, 985162418487296, 1023920203366400, 2251799813685248, 3377699721314304,\n+        4494803534348292, 6755399441055744, 7881299349733376, 8444256867844096, 8725724278030336,\n+        8760633780600833, 8989057312882695, 9042383626829823, 9851624185018758, 18067175067615234,\n+        28848986089586688, 30958948903026688, 35747322042253312, 53805701016846336,\n+        58529202969772032, 189151184399892480, 220713756545974272, 466122561432846339,\n+        504262420777140224, 558446353793941504, 572520102629474304, 1009933895770046464,\n+        1152921504606846982, 1152921504606851080, 1441151880758558727, 1724878657282899983,\n+        2301902359539744768, 2305843009196908767, 2305843009213693952, 2310337812748042240,\n+        3731232291276455943, 4589168020290535424, 4609293481125347328, 4611686018427387908,\n+        4611686069975392286, 4671217976001691648, 5764607523034234882, 6341068275337658371,\n+        6341349750314369024, 7421334051581067264, 8788774672813524990, 9205357638345293827,\n+        9222809086901354496, 9223372036854775808, 9223372036854775935, 9224497932466651184,\n+        9727775195120332910, 10376293541461622786, 11526998316797657088, 11959590285459062784,\n+        12103423998558208000, 12699165786766311424, 13005832773892571136, 13798747783286489088,\n+        13835058055282032640, 13835058055282163729, 13951307220663664640, 14987979559889010690,\n+        17872468738205286400, 17906312118425092095, 18158513697557839871, 18158513749097456062,\n+        18374686479671623680, 18374686479671623682, 18446462598732840960, 18446462598732972032,\n+        18446744056529158144, 18446744069414584320, 18446744073709551615,\n     ];\n \n     pub fn lookup(c: char) -> bool {\n@@ -430,7 +433,7 @@ pub mod lowercase {\n         133143986179, 274877905920, 1099509514240, 4398046445568, 17592185782272, 36009005809663,\n         46912496118442, 187649984473770, 281474972516352, 2251799813685247, 2339875276368554,\n         4503599560261632, 61925590106570972, 71777214282006783, 72057592964186127,\n-        144115188074807295, 297241973452963840, 504403158265495560, 576460743713488896,\n+        144115188074807295, 297241973452963840, 522417556774978824, 576460743713488896,\n         1152921487426978047, 1152921504590069760, 1814856824841797631, 3607524039012697088,\n         4362299189061746720, 4539628424389459968, 4601013482110844927, 4611405638684049471,\n         4674456033467236607, 6172933889249159850, 9223934986808197120, 10663022717737544362,\n@@ -439,7 +442,7 @@ pub mod lowercase {\n         12298110845996498944, 15324248332066007893, 16596095761559859497, 16717361816799215616,\n         16987577794709946364, 17293822586148356092, 18158513701852807104, 18410715274543104000,\n         18428729675466407935, 18446462598732840960, 18446462598732858304, 18446462598737002495,\n-        18446463698110251007, 18446673704966422527, 18446726481523572736, 18446739675663105535,\n+        18446464797621878783, 18446673704966422527, 18446726481523572736, 18446739675663105535,\n         18446739675663106031, 18446742974197923840, 18446744056529682432, 18446744069414584320,\n         18446744073709529733, 18446744073709551615,\n     ];\n@@ -457,56 +460,57 @@ pub mod lowercase {\n \n #[rustfmt::skip]\n pub mod n {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (124, 11);\n-    static BITSET_CHUNKS_MAP: [u8; 124] = [\n-        30, 7, 10, 24, 18, 3, 28, 20, 23, 27, 0, 15, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 2, 12, 17, 25, 16, 22, 19, 14, 21, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        4, 1, 0, 0, 9, 0, 13, 26,\n+    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (127, 0);\n+    static BITSET_CHUNKS_MAP: [u8; 127] = [\n+        31, 8, 11, 25, 19, 4, 29, 21, 24, 28, 0, 16, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 3, 13, 18, 26, 17, 23, 20, 15, 22, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        5, 2, 0, 0, 10, 0, 14, 27, 12, 0, 1,\n     ];\n-    static BITSET_INDEX_CHUNKS: [[u8; 16]; 33] = [\n+    static BITSET_INDEX_CHUNKS: [[u8; 16]; 34] = [\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 48],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 42, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 21, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 46, 0, 0, 0, 2],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 30, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 30, 0, 44, 0, 30, 0, 30, 0, 40, 0, 33],\n-        [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 36, 43, 4, 0, 0, 0, 0, 51, 22, 3, 0, 12],\n-        [0, 0, 0, 6, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 61, 46, 0, 0, 0, 0, 59, 0, 0, 23, 9, 0, 0],\n-        [0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 2, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0],\n-        [0, 14, 0, 14, 0, 0, 0, 0, 0, 14, 0, 2, 50, 0, 0, 0],\n-        [0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 25, 0, 0, 0, 14, 24, 0, 0, 0, 0, 0, 0, 0, 0, 10],\n-        [0, 31, 0, 46, 64, 0, 0, 38, 0, 0, 0, 46, 0, 0, 0, 0],\n-        [0, 45, 2, 0, 0, 70, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 58, 0, 30, 0, 41, 0, 30, 0, 14, 0, 14, 35, 0, 0, 0],\n-        [0, 62, 29, 60, 17, 0, 54, 69, 0, 56, 19, 27, 0, 63, 28, 0],\n-        [0, 65, 37, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 68, 18, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 0],\n-        [14, 0, 0, 0, 0, 7, 0, 16, 0, 0, 15, 0, 0, 14, 46, 0],\n-        [39, 0, 0, 14, 2, 0, 0, 47, 0, 14, 0, 0, 0, 0, 0, 46],\n-        [46, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [49, 0, 0, 0, 0, 0, 11, 0, 24, 20, 66, 0, 0, 0, 0, 0],\n-        [72, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 49],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 43, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 22, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 47, 0, 0, 0, 2],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 31, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 31, 0, 45, 0, 31, 0, 31, 0, 41, 0, 34],\n+        [0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 37, 44, 4, 0, 0, 0, 0, 52, 23, 3, 0, 13],\n+        [0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 35, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 62, 47, 0, 0, 0, 0, 60, 0, 0, 24, 10, 0, 5],\n+        [0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 2, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0],\n+        [0, 15, 0, 15, 0, 0, 0, 0, 0, 15, 0, 2, 51, 0, 0, 0],\n+        [0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 26, 0, 0, 0, 15, 25, 0, 0, 0, 0, 0, 0, 0, 0, 11],\n+        [0, 32, 0, 47, 65, 0, 0, 39, 0, 0, 0, 47, 0, 0, 0, 0],\n+        [0, 46, 2, 0, 0, 71, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 59, 0, 31, 0, 42, 0, 31, 0, 15, 0, 15, 36, 0, 0, 0],\n+        [0, 63, 30, 61, 18, 0, 55, 70, 0, 57, 20, 28, 0, 64, 29, 0],\n+        [0, 66, 38, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 69, 19, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 9, 0],\n+        [15, 0, 0, 0, 0, 8, 0, 17, 0, 0, 16, 0, 0, 15, 47, 0],\n+        [40, 0, 0, 15, 2, 0, 0, 48, 0, 15, 0, 0, 0, 0, 0, 47],\n+        [47, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [50, 0, 0, 0, 0, 0, 12, 0, 25, 21, 67, 0, 0, 0, 0, 0],\n+        [73, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n     ];\n-    static BITSET: [u64; 73] = [\n-        0, 999, 1023, 1026, 3072, 8191, 65408, 65472, 1048575, 1966080, 2097151, 3932160, 4063232,\n-        8388607, 67043328, 67044351, 134152192, 264241152, 268435455, 3758096384, 4294901504,\n-        17112694784, 64424509440, 549218942976, 4393751543808, 35184372023296, 140737488355327,\n-        272678883688448, 279275953455104, 280925220896768, 281200098803712, 281474976448512,\n-        492581209243648, 2251524935778304, 2251795518717952, 4503595332403200, 4503599627370368,\n-        8708132091985919, 9007190731849728, 17732923532771328, 71212894229889024,\n+    static BITSET: [u64; 74] = [\n+        0, 999, 1023, 1026, 3072, 4064, 8191, 65408, 65472, 1048575, 1966080, 2097151, 3932160,\n+        4063232, 8388607, 67043328, 67044351, 134152192, 264241152, 268435455, 3758096384,\n+        4294901504, 17112694784, 64424509440, 549218942976, 4393751543808, 35184372023296,\n+        140737488355327, 272678883688448, 279275953455104, 280925220896768, 281200098803712,\n+        281474976448512, 492581209243648, 2251524935778304, 2251795518717952, 4503595332403200,\n+        4503599627370368, 8708132091985919, 9007190731849728, 17732923532771328, 71212894229889024,\n         144114915328655360, 144115183780888576, 144115188075855871, 284007976623144960,\n         284008251501051904, 287948901175001088, 287948901242044416, 287953294926544896,\n         504407547722072192, 1152640029630136320, 1152921496016912384, 2305840810190438400,\n@@ -541,28 +545,28 @@ pub mod uppercase {\n     static BITSET_INDEX_CHUNKS: [[u8; 16]; 17] = [\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 10, 0, 38, 46, 44, 2],\n-        [0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 51, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 60, 62, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 54, 0, 0, 0, 0, 0, 43, 43, 40, 43, 56, 23, 34, 35],\n-        [0, 0, 57, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 9, 0, 38, 46, 44, 28],\n+        [0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 51, 23, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 60, 62, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 54, 0, 0, 0, 0, 0, 43, 43, 40, 43, 56, 22, 34, 35],\n+        [0, 0, 57, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 66, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 30],\n-        [0, 11, 0, 12, 50, 37, 36, 45, 47, 6, 0, 0, 0, 49, 18, 53],\n-        [15, 0, 60, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [22, 52, 43, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [25, 39, 42, 41, 59, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [58, 65, 29, 17, 48, 63, 31, 20, 55, 61, 64, 32, 28, 21, 16, 4],\n+        [0, 0, 66, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 30],\n+        [0, 10, 0, 11, 50, 37, 36, 45, 47, 5, 0, 0, 0, 49, 17, 53],\n+        [14, 0, 60, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [21, 52, 43, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [24, 39, 42, 41, 59, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [58, 65, 29, 16, 48, 63, 31, 19, 55, 61, 64, 32, 27, 20, 15, 3],\n     ];\n     static BITSET: [u64; 67] = [\n-        0, 8, 116, 1023, 1024, 8383, 21882, 65535, 1048575, 8388607, 89478485, 134217726,\n-        2139095039, 4294967295, 17179869183, 1099511627775, 2199023190016, 4398046445568,\n-        17575006099264, 23456248059221, 70368743129088, 140737484161024, 140737488355327,\n-        280378317225728, 281470681743392, 281474976710655, 1169903278445909, 2251799813685247,\n-        9007198986305536, 17977448100528131, 18014398509481983, 288230371856744511,\n+        0, 8, 1023, 1024, 8383, 21882, 65535, 1048575, 8388607, 89478485, 134217726, 2139095039,\n+        4294967295, 17179869183, 1099511627775, 2199023190016, 4398046445568, 17575006099264,\n+        23456248059221, 70368743129088, 140737484161024, 140737488355327, 280378317225728,\n+        281470681743392, 281474976710655, 1169903278445909, 2251799813685247, 9007198986305536,\n+        9007199254741748, 17977448100528131, 18014398509481983, 288230371856744511,\n         576460735123554305, 576460743713488896, 1080863910568919040, 1080897995681042176,\n         1274187559846268630, 3122495741643543722, 6148633210533183488, 6148914689804861440,\n         6148914690880001365, 6148914691236506283, 6148914691236516865, 6148914691236517205,\n@@ -1202,20 +1206,21 @@ pub mod conversions {\n         ('\\u{a7ba}', ['\\u{a7bb}', '\\u{0}', '\\u{0}']), ('\\u{a7bc}', ['\\u{a7bd}', '\\u{0}', '\\u{0}']),\n         ('\\u{a7be}', ['\\u{a7bf}', '\\u{0}', '\\u{0}']), ('\\u{a7c2}', ['\\u{a7c3}', '\\u{0}', '\\u{0}']),\n         ('\\u{a7c4}', ['\\u{a794}', '\\u{0}', '\\u{0}']), ('\\u{a7c5}', ['\\u{282}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7c6}', ['\\u{1d8e}', '\\u{0}', '\\u{0}']), ('\\u{ff21}', ['\\u{ff41}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff22}', ['\\u{ff42}', '\\u{0}', '\\u{0}']), ('\\u{ff23}', ['\\u{ff43}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff24}', ['\\u{ff44}', '\\u{0}', '\\u{0}']), ('\\u{ff25}', ['\\u{ff45}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff26}', ['\\u{ff46}', '\\u{0}', '\\u{0}']), ('\\u{ff27}', ['\\u{ff47}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff28}', ['\\u{ff48}', '\\u{0}', '\\u{0}']), ('\\u{ff29}', ['\\u{ff49}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff2a}', ['\\u{ff4a}', '\\u{0}', '\\u{0}']), ('\\u{ff2b}', ['\\u{ff4b}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff2c}', ['\\u{ff4c}', '\\u{0}', '\\u{0}']), ('\\u{ff2d}', ['\\u{ff4d}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff2e}', ['\\u{ff4e}', '\\u{0}', '\\u{0}']), ('\\u{ff2f}', ['\\u{ff4f}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff30}', ['\\u{ff50}', '\\u{0}', '\\u{0}']), ('\\u{ff31}', ['\\u{ff51}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff32}', ['\\u{ff52}', '\\u{0}', '\\u{0}']), ('\\u{ff33}', ['\\u{ff53}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff34}', ['\\u{ff54}', '\\u{0}', '\\u{0}']), ('\\u{ff35}', ['\\u{ff55}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff36}', ['\\u{ff56}', '\\u{0}', '\\u{0}']), ('\\u{ff37}', ['\\u{ff57}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff38}', ['\\u{ff58}', '\\u{0}', '\\u{0}']), ('\\u{ff39}', ['\\u{ff59}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff3a}', ['\\u{ff5a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7c6}', ['\\u{1d8e}', '\\u{0}', '\\u{0}']), ('\\u{a7c7}', ['\\u{a7c8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7c9}', ['\\u{a7ca}', '\\u{0}', '\\u{0}']), ('\\u{a7f5}', ['\\u{a7f6}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff21}', ['\\u{ff41}', '\\u{0}', '\\u{0}']), ('\\u{ff22}', ['\\u{ff42}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff23}', ['\\u{ff43}', '\\u{0}', '\\u{0}']), ('\\u{ff24}', ['\\u{ff44}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff25}', ['\\u{ff45}', '\\u{0}', '\\u{0}']), ('\\u{ff26}', ['\\u{ff46}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff27}', ['\\u{ff47}', '\\u{0}', '\\u{0}']), ('\\u{ff28}', ['\\u{ff48}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff29}', ['\\u{ff49}', '\\u{0}', '\\u{0}']), ('\\u{ff2a}', ['\\u{ff4a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff2b}', ['\\u{ff4b}', '\\u{0}', '\\u{0}']), ('\\u{ff2c}', ['\\u{ff4c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff2d}', ['\\u{ff4d}', '\\u{0}', '\\u{0}']), ('\\u{ff2e}', ['\\u{ff4e}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff2f}', ['\\u{ff4f}', '\\u{0}', '\\u{0}']), ('\\u{ff30}', ['\\u{ff50}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff31}', ['\\u{ff51}', '\\u{0}', '\\u{0}']), ('\\u{ff32}', ['\\u{ff52}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff33}', ['\\u{ff53}', '\\u{0}', '\\u{0}']), ('\\u{ff34}', ['\\u{ff54}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff35}', ['\\u{ff55}', '\\u{0}', '\\u{0}']), ('\\u{ff36}', ['\\u{ff56}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff37}', ['\\u{ff57}', '\\u{0}', '\\u{0}']), ('\\u{ff38}', ['\\u{ff58}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff39}', ['\\u{ff59}', '\\u{0}', '\\u{0}']), ('\\u{ff3a}', ['\\u{ff5a}', '\\u{0}', '\\u{0}']),\n         ('\\u{10400}', ['\\u{10428}', '\\u{0}', '\\u{0}']),\n         ('\\u{10401}', ['\\u{10429}', '\\u{0}', '\\u{0}']),\n         ('\\u{10402}', ['\\u{1042a}', '\\u{0}', '\\u{0}']),\n@@ -2052,51 +2057,52 @@ pub mod conversions {\n         ('\\u{a7b7}', ['\\u{a7b6}', '\\u{0}', '\\u{0}']), ('\\u{a7b9}', ['\\u{a7b8}', '\\u{0}', '\\u{0}']),\n         ('\\u{a7bb}', ['\\u{a7ba}', '\\u{0}', '\\u{0}']), ('\\u{a7bd}', ['\\u{a7bc}', '\\u{0}', '\\u{0}']),\n         ('\\u{a7bf}', ['\\u{a7be}', '\\u{0}', '\\u{0}']), ('\\u{a7c3}', ['\\u{a7c2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab53}', ['\\u{a7b3}', '\\u{0}', '\\u{0}']), ('\\u{ab70}', ['\\u{13a0}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab71}', ['\\u{13a1}', '\\u{0}', '\\u{0}']), ('\\u{ab72}', ['\\u{13a2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab73}', ['\\u{13a3}', '\\u{0}', '\\u{0}']), ('\\u{ab74}', ['\\u{13a4}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab75}', ['\\u{13a5}', '\\u{0}', '\\u{0}']), ('\\u{ab76}', ['\\u{13a6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab77}', ['\\u{13a7}', '\\u{0}', '\\u{0}']), ('\\u{ab78}', ['\\u{13a8}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab79}', ['\\u{13a9}', '\\u{0}', '\\u{0}']), ('\\u{ab7a}', ['\\u{13aa}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab7b}', ['\\u{13ab}', '\\u{0}', '\\u{0}']), ('\\u{ab7c}', ['\\u{13ac}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab7d}', ['\\u{13ad}', '\\u{0}', '\\u{0}']), ('\\u{ab7e}', ['\\u{13ae}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab7f}', ['\\u{13af}', '\\u{0}', '\\u{0}']), ('\\u{ab80}', ['\\u{13b0}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab81}', ['\\u{13b1}', '\\u{0}', '\\u{0}']), ('\\u{ab82}', ['\\u{13b2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab83}', ['\\u{13b3}', '\\u{0}', '\\u{0}']), ('\\u{ab84}', ['\\u{13b4}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab85}', ['\\u{13b5}', '\\u{0}', '\\u{0}']), ('\\u{ab86}', ['\\u{13b6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab87}', ['\\u{13b7}', '\\u{0}', '\\u{0}']), ('\\u{ab88}', ['\\u{13b8}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab89}', ['\\u{13b9}', '\\u{0}', '\\u{0}']), ('\\u{ab8a}', ['\\u{13ba}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab8b}', ['\\u{13bb}', '\\u{0}', '\\u{0}']), ('\\u{ab8c}', ['\\u{13bc}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab8d}', ['\\u{13bd}', '\\u{0}', '\\u{0}']), ('\\u{ab8e}', ['\\u{13be}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab8f}', ['\\u{13bf}', '\\u{0}', '\\u{0}']), ('\\u{ab90}', ['\\u{13c0}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab91}', ['\\u{13c1}', '\\u{0}', '\\u{0}']), ('\\u{ab92}', ['\\u{13c2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab93}', ['\\u{13c3}', '\\u{0}', '\\u{0}']), ('\\u{ab94}', ['\\u{13c4}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab95}', ['\\u{13c5}', '\\u{0}', '\\u{0}']), ('\\u{ab96}', ['\\u{13c6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab97}', ['\\u{13c7}', '\\u{0}', '\\u{0}']), ('\\u{ab98}', ['\\u{13c8}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab99}', ['\\u{13c9}', '\\u{0}', '\\u{0}']), ('\\u{ab9a}', ['\\u{13ca}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab9b}', ['\\u{13cb}', '\\u{0}', '\\u{0}']), ('\\u{ab9c}', ['\\u{13cc}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab9d}', ['\\u{13cd}', '\\u{0}', '\\u{0}']), ('\\u{ab9e}', ['\\u{13ce}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab9f}', ['\\u{13cf}', '\\u{0}', '\\u{0}']), ('\\u{aba0}', ['\\u{13d0}', '\\u{0}', '\\u{0}']),\n-        ('\\u{aba1}', ['\\u{13d1}', '\\u{0}', '\\u{0}']), ('\\u{aba2}', ['\\u{13d2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{aba3}', ['\\u{13d3}', '\\u{0}', '\\u{0}']), ('\\u{aba4}', ['\\u{13d4}', '\\u{0}', '\\u{0}']),\n-        ('\\u{aba5}', ['\\u{13d5}', '\\u{0}', '\\u{0}']), ('\\u{aba6}', ['\\u{13d6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{aba7}', ['\\u{13d7}', '\\u{0}', '\\u{0}']), ('\\u{aba8}', ['\\u{13d8}', '\\u{0}', '\\u{0}']),\n-        ('\\u{aba9}', ['\\u{13d9}', '\\u{0}', '\\u{0}']), ('\\u{abaa}', ['\\u{13da}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abab}', ['\\u{13db}', '\\u{0}', '\\u{0}']), ('\\u{abac}', ['\\u{13dc}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abad}', ['\\u{13dd}', '\\u{0}', '\\u{0}']), ('\\u{abae}', ['\\u{13de}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abaf}', ['\\u{13df}', '\\u{0}', '\\u{0}']), ('\\u{abb0}', ['\\u{13e0}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abb1}', ['\\u{13e1}', '\\u{0}', '\\u{0}']), ('\\u{abb2}', ['\\u{13e2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abb3}', ['\\u{13e3}', '\\u{0}', '\\u{0}']), ('\\u{abb4}', ['\\u{13e4}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abb5}', ['\\u{13e5}', '\\u{0}', '\\u{0}']), ('\\u{abb6}', ['\\u{13e6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abb7}', ['\\u{13e7}', '\\u{0}', '\\u{0}']), ('\\u{abb8}', ['\\u{13e8}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abb9}', ['\\u{13e9}', '\\u{0}', '\\u{0}']), ('\\u{abba}', ['\\u{13ea}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abbb}', ['\\u{13eb}', '\\u{0}', '\\u{0}']), ('\\u{abbc}', ['\\u{13ec}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abbd}', ['\\u{13ed}', '\\u{0}', '\\u{0}']), ('\\u{abbe}', ['\\u{13ee}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abbf}', ['\\u{13ef}', '\\u{0}', '\\u{0}']), ('\\u{fb00}', ['F', 'F', '\\u{0}']),\n-        ('\\u{fb01}', ['F', 'I', '\\u{0}']), ('\\u{fb02}', ['F', 'L', '\\u{0}']),\n-        ('\\u{fb03}', ['F', 'F', 'I']), ('\\u{fb04}', ['F', 'F', 'L']),\n-        ('\\u{fb05}', ['S', 'T', '\\u{0}']), ('\\u{fb06}', ['S', 'T', '\\u{0}']),\n-        ('\\u{fb13}', ['\\u{544}', '\\u{546}', '\\u{0}']),\n+        ('\\u{a7c8}', ['\\u{a7c7}', '\\u{0}', '\\u{0}']), ('\\u{a7ca}', ['\\u{a7c9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7f6}', ['\\u{a7f5}', '\\u{0}', '\\u{0}']), ('\\u{ab53}', ['\\u{a7b3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab70}', ['\\u{13a0}', '\\u{0}', '\\u{0}']), ('\\u{ab71}', ['\\u{13a1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab72}', ['\\u{13a2}', '\\u{0}', '\\u{0}']), ('\\u{ab73}', ['\\u{13a3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab74}', ['\\u{13a4}', '\\u{0}', '\\u{0}']), ('\\u{ab75}', ['\\u{13a5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab76}', ['\\u{13a6}', '\\u{0}', '\\u{0}']), ('\\u{ab77}', ['\\u{13a7}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab78}', ['\\u{13a8}', '\\u{0}', '\\u{0}']), ('\\u{ab79}', ['\\u{13a9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab7a}', ['\\u{13aa}', '\\u{0}', '\\u{0}']), ('\\u{ab7b}', ['\\u{13ab}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab7c}', ['\\u{13ac}', '\\u{0}', '\\u{0}']), ('\\u{ab7d}', ['\\u{13ad}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab7e}', ['\\u{13ae}', '\\u{0}', '\\u{0}']), ('\\u{ab7f}', ['\\u{13af}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab80}', ['\\u{13b0}', '\\u{0}', '\\u{0}']), ('\\u{ab81}', ['\\u{13b1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab82}', ['\\u{13b2}', '\\u{0}', '\\u{0}']), ('\\u{ab83}', ['\\u{13b3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab84}', ['\\u{13b4}', '\\u{0}', '\\u{0}']), ('\\u{ab85}', ['\\u{13b5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab86}', ['\\u{13b6}', '\\u{0}', '\\u{0}']), ('\\u{ab87}', ['\\u{13b7}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab88}', ['\\u{13b8}', '\\u{0}', '\\u{0}']), ('\\u{ab89}', ['\\u{13b9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab8a}', ['\\u{13ba}', '\\u{0}', '\\u{0}']), ('\\u{ab8b}', ['\\u{13bb}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab8c}', ['\\u{13bc}', '\\u{0}', '\\u{0}']), ('\\u{ab8d}', ['\\u{13bd}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab8e}', ['\\u{13be}', '\\u{0}', '\\u{0}']), ('\\u{ab8f}', ['\\u{13bf}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab90}', ['\\u{13c0}', '\\u{0}', '\\u{0}']), ('\\u{ab91}', ['\\u{13c1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab92}', ['\\u{13c2}', '\\u{0}', '\\u{0}']), ('\\u{ab93}', ['\\u{13c3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab94}', ['\\u{13c4}', '\\u{0}', '\\u{0}']), ('\\u{ab95}', ['\\u{13c5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab96}', ['\\u{13c6}', '\\u{0}', '\\u{0}']), ('\\u{ab97}', ['\\u{13c7}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab98}', ['\\u{13c8}', '\\u{0}', '\\u{0}']), ('\\u{ab99}', ['\\u{13c9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab9a}', ['\\u{13ca}', '\\u{0}', '\\u{0}']), ('\\u{ab9b}', ['\\u{13cb}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab9c}', ['\\u{13cc}', '\\u{0}', '\\u{0}']), ('\\u{ab9d}', ['\\u{13cd}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab9e}', ['\\u{13ce}', '\\u{0}', '\\u{0}']), ('\\u{ab9f}', ['\\u{13cf}', '\\u{0}', '\\u{0}']),\n+        ('\\u{aba0}', ['\\u{13d0}', '\\u{0}', '\\u{0}']), ('\\u{aba1}', ['\\u{13d1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{aba2}', ['\\u{13d2}', '\\u{0}', '\\u{0}']), ('\\u{aba3}', ['\\u{13d3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{aba4}', ['\\u{13d4}', '\\u{0}', '\\u{0}']), ('\\u{aba5}', ['\\u{13d5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{aba6}', ['\\u{13d6}', '\\u{0}', '\\u{0}']), ('\\u{aba7}', ['\\u{13d7}', '\\u{0}', '\\u{0}']),\n+        ('\\u{aba8}', ['\\u{13d8}', '\\u{0}', '\\u{0}']), ('\\u{aba9}', ['\\u{13d9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abaa}', ['\\u{13da}', '\\u{0}', '\\u{0}']), ('\\u{abab}', ['\\u{13db}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abac}', ['\\u{13dc}', '\\u{0}', '\\u{0}']), ('\\u{abad}', ['\\u{13dd}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abae}', ['\\u{13de}', '\\u{0}', '\\u{0}']), ('\\u{abaf}', ['\\u{13df}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abb0}', ['\\u{13e0}', '\\u{0}', '\\u{0}']), ('\\u{abb1}', ['\\u{13e1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abb2}', ['\\u{13e2}', '\\u{0}', '\\u{0}']), ('\\u{abb3}', ['\\u{13e3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abb4}', ['\\u{13e4}', '\\u{0}', '\\u{0}']), ('\\u{abb5}', ['\\u{13e5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abb6}', ['\\u{13e6}', '\\u{0}', '\\u{0}']), ('\\u{abb7}', ['\\u{13e7}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abb8}', ['\\u{13e8}', '\\u{0}', '\\u{0}']), ('\\u{abb9}', ['\\u{13e9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abba}', ['\\u{13ea}', '\\u{0}', '\\u{0}']), ('\\u{abbb}', ['\\u{13eb}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abbc}', ['\\u{13ec}', '\\u{0}', '\\u{0}']), ('\\u{abbd}', ['\\u{13ed}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abbe}', ['\\u{13ee}', '\\u{0}', '\\u{0}']), ('\\u{abbf}', ['\\u{13ef}', '\\u{0}', '\\u{0}']),\n+        ('\\u{fb00}', ['F', 'F', '\\u{0}']), ('\\u{fb01}', ['F', 'I', '\\u{0}']),\n+        ('\\u{fb02}', ['F', 'L', '\\u{0}']), ('\\u{fb03}', ['F', 'F', 'I']),\n+        ('\\u{fb04}', ['F', 'F', 'L']), ('\\u{fb05}', ['S', 'T', '\\u{0}']),\n+        ('\\u{fb06}', ['S', 'T', '\\u{0}']), ('\\u{fb13}', ['\\u{544}', '\\u{546}', '\\u{0}']),\n         ('\\u{fb14}', ['\\u{544}', '\\u{535}', '\\u{0}']),\n         ('\\u{fb15}', ['\\u{544}', '\\u{53b}', '\\u{0}']),\n         ('\\u{fb16}', ['\\u{54e}', '\\u{546}', '\\u{0}']),"}, {"sha": "8b276d0a762c3be214c96d8668a83a094dd28f1c", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::CRATE_DEF_INDEX;\n-use rustc_hir::def_id::{CrateNum, DefIndex, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefIndex, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -175,7 +175,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             .source_map\n             .files()\n             .iter()\n-            .filter(|source_file| CrateNum::from_u32(source_file.crate_of_origin) == LOCAL_CRATE)\n+            .filter(|source_file| source_file.cnum == LOCAL_CRATE)\n             .map(|source_file| source_file.name_hash)\n             .collect();\n "}, {"sha": "c5a4b53b10df85487663ba4d1bb238ff21aea3ea", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -5,7 +5,6 @@ use crate::ich::StableHashingContext;\n \n use rustc_ast::ast;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_span::SourceFile;\n \n use smallvec::SmallVec;\n@@ -59,7 +58,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n             name_hash,\n             name_was_remapped,\n             unmapped_path: _,\n-            crate_of_origin,\n+            cnum,\n             // Do not hash the source as it is not encoded\n             src: _,\n             src_hash,\n@@ -75,9 +74,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n         (name_hash as u64).hash_stable(hcx, hasher);\n         name_was_remapped.hash_stable(hcx, hasher);\n \n-        DefId { krate: CrateNum::from_u32(crate_of_origin), index: CRATE_DEF_INDEX }\n-            .hash_stable(hcx, hasher);\n-\n         src_hash.hash_stable(hcx, hasher);\n \n         // We only hash the relative position within this source_file\n@@ -101,6 +97,8 @@ impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n         for &char_pos in normalized_pos.iter() {\n             stable_normalized_pos(char_pos, start_pos).hash_stable(hcx, hasher);\n         }\n+\n+        cnum.hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "c9ad8707a7454d934a4dc189c4d75df22767a7e1", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -39,6 +39,10 @@ pub enum InstanceDef<'tcx> {\n \n     /// `<fn() as FnTrait>::call_*`\n     /// `DefId` is `FnTrait::call_*`.\n+    ///\n+    /// NB: the (`fn` pointer) type must currently be monomorphic to avoid double substitution\n+    /// problems with the MIR shim bodies. `Instance::resolve` enforces this.\n+    // FIXME(#69925) support polymorphic MIR shim bodies properly instead.\n     FnPtrShim(DefId, Ty<'tcx>),\n \n     /// `<dyn Trait as Trait>::fn`, \"direct calls\" of which are implicitly\n@@ -57,9 +61,17 @@ pub enum InstanceDef<'tcx> {\n     /// The `DefId` is for `core::ptr::drop_in_place`.\n     /// The `Option<Ty<'tcx>>` is either `Some(T)`, or `None` for empty drop\n     /// glue.\n+    ///\n+    /// NB: the type must currently be monomorphic to avoid double substitution\n+    /// problems with the MIR shim bodies. `Instance::resolve` enforces this.\n+    // FIXME(#69925) support polymorphic MIR shim bodies properly instead.\n     DropGlue(DefId, Option<Ty<'tcx>>),\n \n     ///`<T as Clone>::clone` shim.\n+    ///\n+    /// NB: the type must currently be monomorphic to avoid double substitution\n+    /// problems with the MIR shim bodies. `Instance::resolve` enforces this.\n+    // FIXME(#69925) support polymorphic MIR shim bodies properly instead.\n     CloneShim(DefId, Ty<'tcx>),\n }\n "}, {"sha": "9cad086b4e863be8942f3d216c5248511325dd21", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 85, "deletions": 6, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -386,7 +386,7 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n             return Ok(DUMMY_SP);\n         }\n \n-        debug_assert_eq!(tag, TAG_VALID_SPAN);\n+        debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);\n \n         let lo = BytePos::decode(self)?;\n         let len = BytePos::decode(self)?;\n@@ -398,7 +398,68 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n             bug!(\"Cannot decode Span without Session.\")\n         };\n \n-        let imported_source_files = self.cdata().imported_source_files(&sess.source_map());\n+        // There are two possibilities here:\n+        // 1. This is a 'local span', which is located inside a `SourceFile`\n+        // that came from this crate. In this case, we use the source map data\n+        // encoded in this crate. This branch should be taken nearly all of the time.\n+        // 2. This is a 'foreign span', which is located inside a `SourceFile`\n+        // that came from a *different* crate (some crate upstream of the one\n+        // whose metadata we're looking at). For example, consider this dependency graph:\n+        //\n+        // A -> B -> C\n+        //\n+        // Suppose that we're currently compiling crate A, and start deserializing\n+        // metadata from crate B. When we deserialize a Span from crate B's metadata,\n+        // there are two posibilites:\n+        //\n+        // 1. The span references a file from crate B. This makes it a 'local' span,\n+        // which means that we can use crate B's serialized source map information.\n+        // 2. The span references a file from crate C. This makes it a 'foreign' span,\n+        // which means we need to use Crate *C* (not crate B) to determine the source\n+        // map information. We only record source map information for a file in the\n+        // crate that 'owns' it, so deserializing a Span may require us to look at\n+        // a transitive dependency.\n+        //\n+        // When we encode a foreign span, we adjust its 'lo' and 'high' values\n+        // to be based on the *foreign* crate (e.g. crate C), not the crate\n+        // we are writing metadata for (e.g. crate B). This allows us to\n+        // treat the 'local' and 'foreign' cases almost identically during deserialization:\n+        // we can call `imported_source_files` for the proper crate, and binary search\n+        // through the returned slice using our span.\n+        let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {\n+            self.cdata().imported_source_files(sess.source_map())\n+        } else {\n+            // FIXME: We don't decode dependencies of proc-macros.\n+            // Remove this once #69976 is merged\n+            if self.cdata().root.is_proc_macro_crate() {\n+                debug!(\n+                    \"SpecializedDecoder<Span>::specialized_decode: skipping span for proc-macro crate {:?}\",\n+                    self.cdata().cnum\n+                );\n+                // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE\n+                // since we don't have `cnum_map` populated.\n+                // This advances the decoder position so that we can continue\n+                // to read metadata.\n+                let _ = u32::decode(self)?;\n+                return Ok(DUMMY_SP);\n+            }\n+            // tag is TAG_VALID_SPAN_FOREIGN, checked by `debug_assert` above\n+            let cnum = CrateNum::decode(self)?;\n+            debug!(\n+                \"SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}\",\n+                cnum\n+            );\n+\n+            // Decoding 'foreign' spans should be rare enough that it's\n+            // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.\n+            // We just set it to 0, to ensure that we don't try to access something out\n+            // of bounds for our initial 'guess'\n+            self.last_source_file_index = 0;\n+\n+            let foreign_data = self.cdata().cstore.get_crate_data(cnum);\n+            foreign_data.imported_source_files(sess.source_map())\n+        };\n+\n         let source_file = {\n             // Optimize for the case that most spans within a translated item\n             // originate from the same source_file.\n@@ -412,16 +473,32 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n                     .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)\n                     .unwrap_or_else(|index| index - 1);\n \n-                self.last_source_file_index = index;\n+                // Don't try to cache the index for foreign spans,\n+                // as this would require a map from CrateNums to indices\n+                if tag == TAG_VALID_SPAN_LOCAL {\n+                    self.last_source_file_index = index;\n+                }\n                 &imported_source_files[index]\n             }\n         };\n \n         // Make sure our binary search above is correct.\n-        debug_assert!(lo >= source_file.original_start_pos && lo <= source_file.original_end_pos);\n+        debug_assert!(\n+            lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,\n+            \"Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}\",\n+            lo,\n+            source_file.original_start_pos,\n+            source_file.original_end_pos\n+        );\n \n         // Make sure we correctly filtered out invalid spans during encoding\n-        debug_assert!(hi >= source_file.original_start_pos && hi <= source_file.original_end_pos);\n+        debug_assert!(\n+            hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,\n+            \"Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}\",\n+            hi,\n+            source_file.original_start_pos,\n+            source_file.original_end_pos\n+        );\n \n         let lo =\n             (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;\n@@ -1425,14 +1502,16 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     let local_version = local_source_map.new_imported_source_file(\n                         name,\n                         name_was_remapped,\n-                        self.cnum.as_u32(),\n                         src_hash,\n                         name_hash,\n                         source_length,\n+                        self.cnum,\n                         lines,\n                         multibyte_chars,\n                         non_narrow_chars,\n                         normalized_pos,\n+                        start_pos,\n+                        end_pos,\n                     );\n                     debug!(\n                         \"CrateMetaData::imported_source_files alloc \\"}, {"sha": "98528018d9e8087b985f2e1a41947ae81a7543cb", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 48, "deletions": 13, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -1,6 +1,7 @@\n use crate::rmeta::table::FixedSizeEncoding;\n use crate::rmeta::*;\n \n+use log::{debug, trace};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::map::Map;\n use rustc::middle::cstore::{EncodedMetadata, ForeignModule, LinkagePreference, NativeLibrary};\n@@ -29,9 +30,7 @@ use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder};\n use rustc_session::config::{self, CrateType};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{self, FileName, SourceFile, Span};\n-\n-use log::{debug, trace};\n+use rustc_span::{self, ExternalSource, FileName, SourceFile, Span};\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n use std::path::Path;\n@@ -165,20 +164,56 @@ impl<'tcx> SpecializedEncoder<Span> for EncodeContext<'tcx> {\n             return TAG_INVALID_SPAN.encode(self);\n         }\n \n-        // HACK(eddyb) there's no way to indicate which crate a Span is coming\n-        // from right now, so decoding would fail to find the SourceFile if\n-        // it's not local to the crate the Span is found in.\n-        if self.source_file_cache.is_imported() {\n-            return TAG_INVALID_SPAN.encode(self);\n-        }\n+        // There are two possible cases here:\n+        // 1. This span comes from a 'foreign' crate - e.g. some crate upstream of the\n+        // crate we are writing metadata for. When the metadata for *this* crate gets\n+        // deserialized, the deserializer will need to know which crate it originally came\n+        // from. We use `TAG_VALID_SPAN_FOREIGN` to indicate that a `CrateNum` should\n+        // be deserialized after the rest of the span data, which tells the deserializer\n+        // which crate contains the source map information.\n+        // 2. This span comes from our own crate. No special hamdling is needed - we just\n+        // write `TAG_VALID_SPAN_LOCAL` to let the deserializer know that it should use\n+        // our own source map information.\n+        let (tag, lo, hi) = if self.source_file_cache.is_imported() {\n+            // To simplify deserialization, we 'rebase' this span onto the crate it originally came from\n+            // (the crate that 'owns' the file it references. These rebased 'lo' and 'hi' values\n+            // are relative to the source map information for the 'foreign' crate whose CrateNum\n+            // we write into the metadata. This allows `imported_source_files` to binary\n+            // search through the 'foreign' crate's source map information, using the\n+            // deserialized 'lo' and 'hi' values directly.\n+            //\n+            // All of this logic ensures that the final result of deserialization is a 'normal'\n+            // Span that can be used without any additional trouble.\n+            let external_start_pos = {\n+                // Introduce a new scope so that we drop the 'lock()' temporary\n+                match &*self.source_file_cache.external_src.lock() {\n+                    ExternalSource::Foreign { original_start_pos, .. } => *original_start_pos,\n+                    src => panic!(\"Unexpected external source {:?}\", src),\n+                }\n+            };\n+            let lo = (span.lo - self.source_file_cache.start_pos) + external_start_pos;\n+            let hi = (span.hi - self.source_file_cache.start_pos) + external_start_pos;\n \n-        TAG_VALID_SPAN.encode(self)?;\n-        span.lo.encode(self)?;\n+            (TAG_VALID_SPAN_FOREIGN, lo, hi)\n+        } else {\n+            (TAG_VALID_SPAN_LOCAL, span.lo, span.hi)\n+        };\n+\n+        tag.encode(self)?;\n+        lo.encode(self)?;\n \n         // Encode length which is usually less than span.hi and profits more\n         // from the variable-length integer encoding that we use.\n-        let len = span.hi - span.lo;\n-        len.encode(self)\n+        let len = hi - lo;\n+        len.encode(self)?;\n+\n+        if tag == TAG_VALID_SPAN_FOREIGN {\n+            // This needs to be two lines to avoid holding the `self.source_file_cache`\n+            // while calling `cnum.encode(self)`\n+            let cnum = self.source_file_cache.cnum;\n+            cnum.encode(self)?;\n+        }\n+        Ok(())\n \n         // Don't encode the expansion context.\n     }"}, {"sha": "05d834e5dee12b04097f253edf3fd785136c76ac", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -405,5 +405,6 @@ struct GeneratorData<'tcx> {\n }\n \n // Tags used for encoding Spans:\n-const TAG_VALID_SPAN: u8 = 0;\n-const TAG_INVALID_SPAN: u8 = 1;\n+const TAG_VALID_SPAN_LOCAL: u8 = 0;\n+const TAG_VALID_SPAN_FOREIGN: u8 = 1;\n+const TAG_INVALID_SPAN: u8 = 2;"}, {"sha": "c1d969a4b51633c37de4e4f6b40ad44490c555a8", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -2,13 +2,13 @@ use rustc::mir::*;\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{InternalSubsts, Subst};\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n \n use rustc_index::vec::{Idx, IndexVec};\n \n-use rustc_span::{sym, Span};\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n use std::fmt;\n@@ -39,6 +39,11 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n             None,\n         ),\n         ty::InstanceDef::FnPtrShim(def_id, ty) => {\n+            // FIXME(eddyb) support generating shims for a \"shallow type\",\n+            // e.g. `Foo<_>` or `[_]` instead of requiring a fully monomorphic\n+            // `Foo<Bar>` or `[String]` etc.\n+            assert!(!ty.needs_subst());\n+\n             let trait_ = tcx.trait_of_item(def_id).unwrap();\n             let adjustment = match tcx.fn_trait_kind_from_lang_item(trait_) {\n                 Some(ty::ClosureKind::FnOnce) => Adjustment::Identity,\n@@ -81,17 +86,21 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n                 None,\n             )\n         }\n-        ty::InstanceDef::DropGlue(def_id, ty) => build_drop_shim(tcx, def_id, ty),\n+        ty::InstanceDef::DropGlue(def_id, ty) => {\n+            // FIXME(eddyb) support generating shims for a \"shallow type\",\n+            // e.g. `Foo<_>` or `[_]` instead of requiring a fully monomorphic\n+            // `Foo<Bar>` or `[String]` etc.\n+            assert!(!ty.needs_subst());\n+\n+            build_drop_shim(tcx, def_id, ty)\n+        }\n         ty::InstanceDef::CloneShim(def_id, ty) => {\n-            let name = tcx.item_name(def_id);\n-            if name == sym::clone {\n-                build_clone_shim(tcx, def_id, ty)\n-            } else if name == sym::clone_from {\n-                debug!(\"make_shim({:?}: using default trait implementation\", instance);\n-                return tcx.optimized_mir(def_id);\n-            } else {\n-                bug!(\"builtin clone shim {:?} not supported\", instance)\n-            }\n+            // FIXME(eddyb) support generating shims for a \"shallow type\",\n+            // e.g. `Foo<_>` or `[_]` instead of requiring a fully monomorphic\n+            // `Foo<Bar>` or `[String]` etc.\n+            assert!(!ty.needs_subst());\n+\n+            build_clone_shim(tcx, def_id, ty)\n         }\n         ty::InstanceDef::Virtual(..) => {\n             bug!(\"InstanceDef::Virtual ({:?}) is for direct calls only\", instance)"}, {"sha": "b2906739ff1b1de3ffcc86b7ea62188712f31b8c", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 104, "deletions": 7, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -988,18 +988,101 @@ fn insert_panic_block<'tcx>(\n     assert_block\n }\n \n+fn can_return<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n+    // Returning from a function with an uninhabited return type is undefined behavior.\n+    if body.return_ty().conservative_is_privately_uninhabited(tcx) {\n+        return false;\n+    }\n+\n+    // If there's a return terminator the function may return.\n+    for block in body.basic_blocks() {\n+        if let TerminatorKind::Return = block.terminator().kind {\n+            return true;\n+        }\n+    }\n+\n+    // Otherwise the function can't return.\n+    false\n+}\n+\n+fn can_unwind<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n+    // Nothing can unwind when landing pads are off.\n+    if tcx.sess.no_landing_pads() {\n+        return false;\n+    }\n+\n+    // Unwinds can only start at certain terminators.\n+    for block in body.basic_blocks() {\n+        match block.terminator().kind {\n+            // These never unwind.\n+            TerminatorKind::Goto { .. }\n+            | TerminatorKind::SwitchInt { .. }\n+            | TerminatorKind::Abort\n+            | TerminatorKind::Return\n+            | TerminatorKind::Unreachable\n+            | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseUnwind { .. } => {}\n+\n+            // Resume will *continue* unwinding, but if there's no other unwinding terminator it\n+            // will never be reached.\n+            TerminatorKind::Resume => {}\n+\n+            TerminatorKind::Yield { .. } => {\n+                unreachable!(\"`can_unwind` called before generator transform\")\n+            }\n+\n+            // These may unwind.\n+            TerminatorKind::Drop { .. }\n+            | TerminatorKind::DropAndReplace { .. }\n+            | TerminatorKind::Call { .. }\n+            | TerminatorKind::Assert { .. } => return true,\n+        }\n+    }\n+\n+    // If we didn't find an unwinding terminator, the function cannot unwind.\n+    false\n+}\n+\n fn create_generator_resume_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     transform: TransformVisitor<'tcx>,\n     def_id: DefId,\n     source: MirSource<'tcx>,\n     body: &mut BodyAndCache<'tcx>,\n+    can_return: bool,\n ) {\n+    let can_unwind = can_unwind(tcx, body);\n+\n     // Poison the generator when it unwinds\n-    for block in body.basic_blocks_mut() {\n-        let source_info = block.terminator().source_info;\n-        if let &TerminatorKind::Resume = &block.terminator().kind {\n-            block.statements.push(transform.set_discr(VariantIdx::new(POISONED), source_info));\n+    if can_unwind {\n+        let poison_block = BasicBlock::new(body.basic_blocks().len());\n+        let source_info = source_info(body);\n+        body.basic_blocks_mut().push(BasicBlockData {\n+            statements: vec![transform.set_discr(VariantIdx::new(POISONED), source_info)],\n+            terminator: Some(Terminator { source_info, kind: TerminatorKind::Resume }),\n+            is_cleanup: true,\n+        });\n+\n+        for (idx, block) in body.basic_blocks_mut().iter_enumerated_mut() {\n+            let source_info = block.terminator().source_info;\n+\n+            if let TerminatorKind::Resume = block.terminator().kind {\n+                // An existing `Resume` terminator is redirected to jump to our dedicated\n+                // \"poisoning block\" above.\n+                if idx != poison_block {\n+                    *block.terminator_mut() = Terminator {\n+                        source_info,\n+                        kind: TerminatorKind::Goto { target: poison_block },\n+                    };\n+                }\n+            } else if !block.is_cleanup {\n+                // Any terminators that *can* unwind but don't have an unwind target set are also\n+                // pointed at our poisoning block (unless they're part of the cleanup path).\n+                if let Some(unwind @ None) = block.terminator_mut().unwind_mut() {\n+                    *unwind = Some(poison_block);\n+                }\n+            }\n         }\n     }\n \n@@ -1012,8 +1095,20 @@ fn create_generator_resume_function<'tcx>(\n \n     // Panic when resumed on the returned or poisoned state\n     let generator_kind = body.generator_kind.unwrap();\n-    cases.insert(1, (RETURNED, insert_panic_block(tcx, body, ResumedAfterReturn(generator_kind))));\n-    cases.insert(2, (POISONED, insert_panic_block(tcx, body, ResumedAfterPanic(generator_kind))));\n+\n+    if can_unwind {\n+        cases.insert(\n+            1,\n+            (POISONED, insert_panic_block(tcx, body, ResumedAfterPanic(generator_kind))),\n+        );\n+    }\n+\n+    if can_return {\n+        cases.insert(\n+            1,\n+            (RETURNED, insert_panic_block(tcx, body, ResumedAfterReturn(generator_kind))),\n+        );\n+    }\n \n     insert_switch(body, cases, &transform, TerminatorKind::Unreachable);\n \n@@ -1197,6 +1292,8 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         let (remap, layout, storage_liveness) =\n             compute_layout(tcx, source, &upvars, interior, movable, body);\n \n+        let can_return = can_return(tcx, body);\n+\n         // Run the transformation which converts Places from Local to generator struct\n         // accesses for locals in `remap`.\n         // It also rewrites `return x` and `yield y` as writing a new generator state and returning\n@@ -1240,6 +1337,6 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         body.generator_drop = Some(box drop_shim);\n \n         // Create the Generator::resume function\n-        create_generator_resume_function(tcx, transform, def_id, source, body);\n+        create_generator_resume_function(tcx, transform, def_id, source, body, can_return);\n     }\n }"}, {"sha": "dbc180114f1c1dafd90a9f296a057d1023457736", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 40, "deletions": 21, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -27,7 +27,7 @@ pub mod hygiene;\n use hygiene::Transparency;\n pub use hygiene::{DesugaringKind, ExpnData, ExpnId, ExpnKind, MacroKind, SyntaxContext};\n pub mod def_id;\n-use def_id::DefId;\n+use def_id::{CrateNum, DefId, LOCAL_CRATE};\n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n \n@@ -839,30 +839,42 @@ pub struct NormalizedPos {\n     pub diff: u32,\n }\n \n-/// The state of the lazy external source loading mechanism of a `SourceFile`.\n-#[derive(PartialEq, Eq, Clone)]\n+#[derive(PartialEq, Eq, Clone, Debug)]\n pub enum ExternalSource {\n+    /// No external source has to be loaded, since the `SourceFile` represents a local crate.\n+    Unneeded,\n+    Foreign {\n+        kind: ExternalSourceKind,\n+        /// This SourceFile's byte-offset within the source_map of its original crate\n+        original_start_pos: BytePos,\n+        /// The end of this SourceFile within the source_map of its original crate\n+        original_end_pos: BytePos,\n+    },\n+}\n+\n+/// The state of the lazy external source loading mechanism of a `SourceFile`.\n+#[derive(PartialEq, Eq, Clone, Debug)]\n+pub enum ExternalSourceKind {\n     /// The external source has been loaded already.\n     Present(String),\n     /// No attempt has been made to load the external source.\n     AbsentOk,\n     /// A failed attempt has been made to load the external source.\n     AbsentErr,\n-    /// No external source has to be loaded, since the `SourceFile` represents a local crate.\n     Unneeded,\n }\n \n impl ExternalSource {\n     pub fn is_absent(&self) -> bool {\n-        match *self {\n-            ExternalSource::Present(_) => false,\n+        match self {\n+            ExternalSource::Foreign { kind: ExternalSourceKind::Present(_), .. } => false,\n             _ => true,\n         }\n     }\n \n     pub fn get_source(&self) -> Option<&str> {\n-        match *self {\n-            ExternalSource::Present(ref src) => Some(src),\n+        match self {\n+            ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),\n             _ => None,\n         }\n     }\n@@ -883,8 +895,6 @@ pub struct SourceFile {\n     /// The unmapped path of the file that the source came from.\n     /// Set to `None` if the `SourceFile` was imported from an external crate.\n     pub unmapped_path: Option<FileName>,\n-    /// Indicates which crate this `SourceFile` was imported from.\n-    pub crate_of_origin: u32,\n     /// The complete source code.\n     pub src: Option<Lrc<String>>,\n     /// The source code's hash.\n@@ -906,6 +916,8 @@ pub struct SourceFile {\n     pub normalized_pos: Vec<NormalizedPos>,\n     /// A hash of the filename, used for speeding up hashing in incremental compilation.\n     pub name_hash: u128,\n+    /// Indicates which crate this `SourceFile` was imported from.\n+    pub cnum: CrateNum,\n }\n \n impl Encodable for SourceFile {\n@@ -972,7 +984,8 @@ impl Encodable for SourceFile {\n             s.emit_struct_field(\"multibyte_chars\", 6, |s| self.multibyte_chars.encode(s))?;\n             s.emit_struct_field(\"non_narrow_chars\", 7, |s| self.non_narrow_chars.encode(s))?;\n             s.emit_struct_field(\"name_hash\", 8, |s| self.name_hash.encode(s))?;\n-            s.emit_struct_field(\"normalized_pos\", 9, |s| self.normalized_pos.encode(s))\n+            s.emit_struct_field(\"normalized_pos\", 9, |s| self.normalized_pos.encode(s))?;\n+            s.emit_struct_field(\"cnum\", 10, |s| self.cnum.encode(s))\n         })\n     }\n }\n@@ -1022,24 +1035,24 @@ impl Decodable for SourceFile {\n             let name_hash: u128 = d.read_struct_field(\"name_hash\", 8, |d| Decodable::decode(d))?;\n             let normalized_pos: Vec<NormalizedPos> =\n                 d.read_struct_field(\"normalized_pos\", 9, |d| Decodable::decode(d))?;\n+            let cnum: CrateNum = d.read_struct_field(\"cnum\", 10, |d| Decodable::decode(d))?;\n             Ok(SourceFile {\n                 name,\n                 name_was_remapped,\n                 unmapped_path: None,\n-                // `crate_of_origin` has to be set by the importer.\n-                // This value matches up with `rustc_hir::def_id::INVALID_CRATE`.\n-                // That constant is not available here, unfortunately.\n-                crate_of_origin: std::u32::MAX - 1,\n                 start_pos,\n                 end_pos,\n                 src: None,\n                 src_hash,\n-                external_src: Lock::new(ExternalSource::AbsentOk),\n+                // Unused - the metadata decoder will construct\n+                // a new SourceFile, filling in `external_src` properly\n+                external_src: Lock::new(ExternalSource::Unneeded),\n                 lines,\n                 multibyte_chars,\n                 non_narrow_chars,\n                 normalized_pos,\n                 name_hash,\n+                cnum,\n             })\n         })\n     }\n@@ -1081,7 +1094,6 @@ impl SourceFile {\n             name,\n             name_was_remapped,\n             unmapped_path: Some(unmapped_path),\n-            crate_of_origin: 0,\n             src: Some(Lrc::new(src)),\n             src_hash,\n             external_src: Lock::new(ExternalSource::Unneeded),\n@@ -1092,6 +1104,7 @@ impl SourceFile {\n             non_narrow_chars,\n             normalized_pos,\n             name_hash,\n+            cnum: LOCAL_CRATE,\n         }\n     }\n \n@@ -1109,21 +1122,27 @@ impl SourceFile {\n     where\n         F: FnOnce() -> Option<String>,\n     {\n-        if *self.external_src.borrow() == ExternalSource::AbsentOk {\n+        if matches!(\n+            *self.external_src.borrow(),\n+            ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }\n+        ) {\n             let src = get_src();\n             let mut external_src = self.external_src.borrow_mut();\n             // Check that no-one else have provided the source while we were getting it\n-            if *external_src == ExternalSource::AbsentOk {\n+            if let ExternalSource::Foreign {\n+                kind: src_kind @ ExternalSourceKind::AbsentOk, ..\n+            } = &mut *external_src\n+            {\n                 if let Some(src) = src {\n                     let mut hasher: StableHasher = StableHasher::new();\n                     hasher.write(src.as_bytes());\n \n                     if hasher.finish::<u128>() == self.src_hash {\n-                        *external_src = ExternalSource::Present(src);\n+                        *src_kind = ExternalSourceKind::Present(src);\n                         return true;\n                     }\n                 } else {\n-                    *external_src = ExternalSource::AbsentErr;\n+                    *src_kind = ExternalSourceKind::AbsentErr;\n                 }\n \n                 false"}, {"sha": "7dd9e2f6316b41631dc899307893836499fe7f73", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -296,14 +296,16 @@ impl SourceMap {\n         &self,\n         filename: FileName,\n         name_was_remapped: bool,\n-        crate_of_origin: u32,\n         src_hash: u128,\n         name_hash: u128,\n         source_len: usize,\n+        cnum: CrateNum,\n         mut file_local_lines: Vec<BytePos>,\n         mut file_local_multibyte_chars: Vec<MultiByteChar>,\n         mut file_local_non_narrow_chars: Vec<NonNarrowChar>,\n         mut file_local_normalized_pos: Vec<NormalizedPos>,\n+        original_start_pos: BytePos,\n+        original_end_pos: BytePos,\n     ) -> Lrc<SourceFile> {\n         let start_pos = self\n             .allocate_address_space(source_len)\n@@ -332,17 +334,21 @@ impl SourceMap {\n             name: filename,\n             name_was_remapped,\n             unmapped_path: None,\n-            crate_of_origin,\n             src: None,\n             src_hash,\n-            external_src: Lock::new(ExternalSource::AbsentOk),\n+            external_src: Lock::new(ExternalSource::Foreign {\n+                kind: ExternalSourceKind::AbsentOk,\n+                original_start_pos,\n+                original_end_pos,\n+            }),\n             start_pos,\n             end_pos,\n             lines: file_local_lines,\n             multibyte_chars: file_local_multibyte_chars,\n             non_narrow_chars: file_local_non_narrow_chars,\n             normalized_pos: file_local_normalized_pos,\n             name_hash,\n+            cnum,\n         });\n \n         let mut files = self.files.borrow_mut();"}, {"sha": "a5abe7b6413cc23ceb6684237eeb731fbeb4b4ae", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -1,6 +1,7 @@\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Instance, TyCtxt, TypeFoldable};\n use rustc_hir::def_id::DefId;\n+use rustc_span::sym;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n \n@@ -31,21 +32,26 @@ pub fn resolve_instance<'tcx>(\n                 debug!(\" => intrinsic\");\n                 ty::InstanceDef::Intrinsic(def_id)\n             }\n-            _ => {\n-                if Some(def_id) == tcx.lang_items().drop_in_place_fn() {\n-                    let ty = substs.type_at(0);\n-                    if ty.needs_drop(tcx, param_env.with_reveal_all()) {\n-                        debug!(\" => nontrivial drop glue\");\n-                        ty::InstanceDef::DropGlue(def_id, Some(ty))\n-                    } else {\n-                        debug!(\" => trivial drop glue\");\n-                        ty::InstanceDef::DropGlue(def_id, None)\n+            ty::FnDef(def_id, substs) if Some(def_id) == tcx.lang_items().drop_in_place_fn() => {\n+                let ty = substs.type_at(0);\n+\n+                if ty.needs_drop(tcx, param_env) {\n+                    // `DropGlue` requires a monomorphic aka concrete type.\n+                    if ty.needs_subst() {\n+                        return None;\n                     }\n+\n+                    debug!(\" => nontrivial drop glue\");\n+                    ty::InstanceDef::DropGlue(def_id, Some(ty))\n                 } else {\n-                    debug!(\" => free item\");\n-                    ty::InstanceDef::Item(def_id)\n+                    debug!(\" => trivial drop glue\");\n+                    ty::InstanceDef::DropGlue(def_id, None)\n                 }\n             }\n+            _ => {\n+                debug!(\" => free item\");\n+                ty::InstanceDef::Item(def_id)\n+            }\n         };\n         Some(Instance { def, substs })\n     };\n@@ -113,20 +119,44 @@ fn resolve_associated_item<'tcx>(\n                 trait_closure_kind,\n             ))\n         }\n-        traits::VtableFnPointer(ref data) => Some(Instance {\n-            def: ty::InstanceDef::FnPtrShim(trait_item.def_id, data.fn_ty),\n-            substs: rcvr_substs,\n-        }),\n+        traits::VtableFnPointer(ref data) => {\n+            // `FnPtrShim` requires a monomorphic aka concrete type.\n+            if data.fn_ty.needs_subst() {\n+                return None;\n+            }\n+\n+            Some(Instance {\n+                def: ty::InstanceDef::FnPtrShim(trait_item.def_id, data.fn_ty),\n+                substs: rcvr_substs,\n+            })\n+        }\n         traits::VtableObject(ref data) => {\n             let index = traits::get_vtable_index_of_object_method(tcx, data, def_id);\n             Some(Instance { def: ty::InstanceDef::Virtual(def_id, index), substs: rcvr_substs })\n         }\n         traits::VtableBuiltin(..) => {\n-            if tcx.lang_items().clone_trait().is_some() {\n-                Some(Instance {\n-                    def: ty::InstanceDef::CloneShim(def_id, trait_ref.self_ty()),\n-                    substs: rcvr_substs,\n-                })\n+            if Some(trait_ref.def_id) == tcx.lang_items().clone_trait() {\n+                // FIXME(eddyb) use lang items for methods instead of names.\n+                let name = tcx.item_name(def_id);\n+                if name == sym::clone {\n+                    let self_ty = trait_ref.self_ty();\n+\n+                    // `CloneShim` requires a monomorphic aka concrete type.\n+                    if self_ty.needs_subst() {\n+                        return None;\n+                    }\n+\n+                    Some(Instance {\n+                        def: ty::InstanceDef::CloneShim(def_id, self_ty),\n+                        substs: rcvr_substs,\n+                    })\n+                } else {\n+                    assert_eq!(name, sym::clone_from);\n+\n+                    // Use the default `fn clone_from` from `trait Clone`.\n+                    let substs = tcx.erase_regions(&rcvr_substs);\n+                    Some(ty::Instance::new(def_id, substs))\n+                }\n             } else {\n                 None\n             }"}, {"sha": "8887bca3c5962a7e1eaa6ae71e2785da0a4a8fb4", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -1032,7 +1032,7 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \n .information {\n \tposition: absolute;\n-\tleft: -20px;\n+\tleft: -25px;\n \tmargin-top: 7px;\n \tz-index: 1;\n }\n@@ -1047,12 +1047,13 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \twidth: 120px;\n \tdisplay: none;\n \ttext-align: center;\n-\tpadding: 5px 3px;\n+\tpadding: 5px 3px 3px 3px;\n \tborder-radius: 6px;\n \tmargin-left: 5px;\n \ttop: -5px;\n \tleft: 105%;\n \tz-index: 10;\n+\tfont-size: 16px;\n }\n \n .tooltip:hover .tooltiptext {\n@@ -1063,14 +1064,20 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tcontent: \" \";\n \tposition: absolute;\n \ttop: 50%;\n-\tleft: 11px;\n+\tleft: 16px;\n \tmargin-top: -5px;\n \tborder-width: 5px;\n \tborder-style: solid;\n }\n \n+.tooltip.compile_fail, .tooltip.ignore {\n+\tfont-weight: bold;\n+\tfont-size: 20px;\n+}\n+\n .tooltip .tooltiptext {\n \tborder: 1px solid;\n+\tfont-weight: normal;\n }\n \n pre.rust {"}, {"sha": "ff32a0fa09e4d1a9c26f274f05733b1ac2beb47b", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -254,7 +254,7 @@ a.test-arrow:hover{\n }\n \n pre.compile_fail {\n-\tborder-left: 2px solid rgba(255,0,0,.6);\n+\tborder-left: 2px solid rgba(255,0,0,.8);\n }\n \n pre.compile_fail:hover, .information:hover + pre.compile_fail {\n@@ -270,7 +270,7 @@ pre.ignore:hover, .information:hover + pre.ignore {\n }\n \n .tooltip.compile_fail {\n-\tcolor: rgba(255,0,0,.6);\n+\tcolor: rgba(255,0,0,.8);\n }\n \n .information > .compile_fail:hover {\n@@ -282,16 +282,17 @@ pre.ignore:hover, .information:hover + pre.ignore {\n }\n \n .information > .ignore:hover {\n-\tcolor: rgba(255,142,0,1);\n+\tcolor: #ff9200;\n }\n \n .search-failed a {\n \tcolor: #0089ff;\n }\n \n .tooltip .tooltiptext {\n-\tbackground-color: black;\n+\tbackground-color: #000;\n \tcolor: #fff;\n+\tborder-color: #000;\n }\n \n .tooltip .tooltiptext::after {"}, {"sha": "2b2819f7126b4aa2582623296248fd3424e42f41", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -248,43 +248,43 @@ a.test-arrow:hover{\n }\n \n pre.compile_fail {\n-\tborder-left: 2px solid rgba(255,0,0,.4);\n+\tborder-left: 2px solid rgba(255,0,0,.5);\n }\n \n pre.compile_fail:hover, .information:hover + pre.compile_fail {\n \tborder-left: 2px solid #f00;\n }\n \n pre.ignore {\n-\tborder-left: 2px solid rgba(255,142,0,.4);\n+\tborder-left: 2px solid rgba(255,142,0,.6);\n }\n \n pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-left: 2px solid #ff9200;\n }\n \n .tooltip.compile_fail {\n-\tcolor: rgba(255,0,0,.3);\n+\tcolor: rgba(255,0,0,.5);\n }\n \n .information > .compile_fail:hover {\n \tcolor: #f00;\n }\n \n .tooltip.ignore {\n-\tcolor: rgba(255,142,0,.3);\n+\tcolor: rgba(255,142,0,.6);\n }\n \n .information > .ignore:hover {\n-\tcolor: rgba(255,142,0,1);\n+\tcolor: #ff9200;\n }\n \n .search-failed a {\n \tcolor: #0089ff;\n }\n \n .tooltip .tooltiptext {\n-\tbackground-color: black;\n+\tbackground-color: #000;\n \tcolor: #fff;\n }\n "}, {"sha": "0fb0757792ed7c3ade51ac38223d597db3aed1ee", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -792,10 +792,14 @@ fn print_to<T>(\n {\n     let result = local_s\n         .try_with(|s| {\n-            if let Ok(mut borrowed) = s.try_borrow_mut() {\n-                if let Some(w) = borrowed.as_mut() {\n-                    return w.write_fmt(args);\n-                }\n+            // Note that we completely remove a local sink to write to in case\n+            // our printing recursively panics/prints, so the recursive\n+            // panic/print goes to the global sink instead of our local sink.\n+            let prev = s.borrow_mut().take();\n+            if let Some(mut w) = prev {\n+                let result = w.write_fmt(args);\n+                *s.borrow_mut() = Some(w);\n+                return result;\n             }\n             global_s().write_fmt(args)\n         })"}, {"sha": "2626ca37cf8b866d326e9e8665d226356c2d2568", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -45,8 +45,9 @@ mod imp {\n     use libc::{mmap, munmap};\n     use libc::{sigaction, sighandler_t, SA_ONSTACK, SA_SIGINFO, SIGBUS, SIG_DFL};\n     use libc::{sigaltstack, SIGSTKSZ, SS_DISABLE};\n-    use libc::{MAP_ANON, MAP_PRIVATE, PROT_READ, PROT_WRITE, SIGSEGV};\n+    use libc::{MAP_ANON, MAP_PRIVATE, PROT_NONE, PROT_READ, PROT_WRITE, SIGSEGV};\n \n+    use crate::sys::unix::os::page_size;\n     use crate::sys_common::thread_info;\n \n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n@@ -137,12 +138,22 @@ mod imp {\n     }\n \n     unsafe fn get_stackp() -> *mut libc::c_void {\n-        let stackp =\n-            mmap(ptr::null_mut(), SIGSTKSZ, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0);\n+        let stackp = mmap(\n+            ptr::null_mut(),\n+            SIGSTKSZ + page_size(),\n+            PROT_READ | PROT_WRITE,\n+            MAP_PRIVATE | MAP_ANON,\n+            -1,\n+            0,\n+        );\n         if stackp == MAP_FAILED {\n             panic!(\"failed to allocate an alternative stack\");\n         }\n-        stackp\n+        let guard_result = libc::mprotect(stackp, page_size(), PROT_NONE);\n+        if guard_result != 0 {\n+            panic!(\"failed to set up alternative stack guard page\");\n+        }\n+        stackp.add(page_size())\n     }\n \n     #[cfg(any(\n@@ -190,7 +201,9 @@ mod imp {\n                 ss_size: SIGSTKSZ,\n             };\n             sigaltstack(&stack, ptr::null_mut());\n-            munmap(handler._data, SIGSTKSZ);\n+            // We know from `get_stackp` that the alternate stack we installed is part of a mapping\n+            // that started one page earlier, so walk back a page and unmap from there.\n+            munmap(handler._data.sub(page_size()), SIGSTKSZ + page_size());\n         }\n     }\n }"}, {"sha": "09e943bd962e64489ff25db8b0283dc08c559357", "filename": "src/test/mir-opt/generator-tiny.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fmir-opt%2Fgenerator-tiny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fmir-opt%2Fgenerator-tiny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -0,0 +1,34 @@\n+//! Tests that generators that cannot return or unwind don't have unnecessary\n+//! panic branches.\n+\n+// compile-flags: -Zno-landing-pads\n+\n+#![feature(generators, generator_trait)]\n+\n+struct HasDrop;\n+\n+impl Drop for HasDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+fn callee() {}\n+\n+fn main() {\n+    let _gen = |_x: u8| {\n+        let _d = HasDrop;\n+        loop {\n+            yield;\n+            callee();\n+        }\n+    };\n+}\n+\n+// END RUST SOURCE\n+\n+// START rustc.main-{{closure}}.generator_resume.0.mir\n+// bb0: {\n+//     ...\n+//     switchInt(move _11) -> [0u32: bb1, 3u32: bb5, otherwise: bb6];\n+// }\n+// ...\n+// END rustc.main-{{closure}}.generator_resume.0.mir"}, {"sha": "7e9fa16b0847a0156b9664e466f2f29f71781c5a", "filename": "src/test/ui/panic-while-printing.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-while-printing.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -0,0 +1,24 @@\n+// run-pass\n+// ignore-emscripten no subprocess support\n+\n+#![feature(set_stdio)]\n+\n+use std::fmt;\n+use std::fmt::{Display, Formatter};\n+use std::io::set_panic;\n+\n+pub struct A;\n+\n+impl Display for A {\n+    fn fmt(&self, _f: &mut Formatter<'_>) -> fmt::Result {\n+        panic!();\n+    }\n+}\n+\n+fn main() {\n+    set_panic(Some(Box::new(Vec::new())));\n+    assert!(std::panic::catch_unwind(|| {\n+        eprintln!(\"{}\", A);\n+    })\n+    .is_err());\n+}"}, {"sha": "99b51625ac3ec2e041e34742173d133cbdd68290", "filename": "src/test/ui/span/auxiliary/transitive_dep_three.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fui%2Fspan%2Fauxiliary%2Ftransitive_dep_three.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fui%2Fspan%2Fauxiliary%2Ftransitive_dep_three.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fauxiliary%2Ftransitive_dep_three.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -0,0 +1,9 @@\n+#[macro_export]\n+macro_rules! define_parse_error {\n+    () => {\n+        #[macro_export]\n+        macro_rules! parse_error {\n+            () => { parse error }\n+        }\n+    }\n+}"}, {"sha": "5110c42765b6dae8a9fbb6ab25e205160d843aec", "filename": "src/test/ui/span/auxiliary/transitive_dep_two.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fui%2Fspan%2Fauxiliary%2Ftransitive_dep_two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fui%2Fspan%2Fauxiliary%2Ftransitive_dep_two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fauxiliary%2Ftransitive_dep_two.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -0,0 +1,3 @@\n+extern crate transitive_dep_three;\n+\n+transitive_dep_three::define_parse_error!();"}, {"sha": "b445d389c561ae9a82bba9a1defbbbd4538c3488", "filename": "src/test/ui/span/transitive-dep-span.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fui%2Fspan%2Ftransitive-dep-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fui%2Fspan%2Ftransitive-dep-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftransitive-dep-span.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -0,0 +1,13 @@\n+// Tests that we properly serialize/deserialize spans from transitive dependencies\n+// (e.g. imported SourceFiles)\n+//\n+// The order of these next lines is important, since we need\n+// transitive_dep_two.rs to be able to reference transitive_dep_three.rs\n+//\n+// aux-build: transitive_dep_three.rs\n+// aux-build: transitive_dep_two.rs\n+// compile-flags: -Z macro-backtrace\n+\n+extern crate transitive_dep_two;\n+\n+transitive_dep_two::parse_error!(); //~ ERROR expected one of"}, {"sha": "68d8911a4351cbbde4250393b16b31a21950eee9", "filename": "src/test/ui/span/transitive-dep-span.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fui%2Fspan%2Ftransitive-dep-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fui%2Fspan%2Ftransitive-dep-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftransitive-dep-span.stderr?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -0,0 +1,19 @@\n+error: expected one of `!` or `::`, found `error`\n+  --> $DIR/auxiliary/transitive_dep_three.rs:6:27\n+   |\n+LL | /         macro_rules! parse_error {\n+LL | |             () => { parse error }\n+   | |                           ^^^^^ expected one of `!` or `::`\n+LL | |         }\n+   | |_________- in this expansion of `transitive_dep_two::parse_error!`\n+   | \n+  ::: $DIR/transitive-dep-span.rs:13:1\n+   |\n+LL |   transitive_dep_two::parse_error!();\n+   |   -----------------------------------\n+   |   |\n+   |   in this macro invocation\n+   |   in this macro invocation\n+\n+error: aborting due to previous error\n+"}, {"sha": "23f45407c1af3d91c79d164c932787a24e7167dd", "filename": "src/test/ui/test-panic-while-printing.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fui%2Ftest-panic-while-printing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftest%2Fui%2Ftest-panic-while-printing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-while-printing.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags:--test\n+// run-pass\n+// ignore-emscripten no subprocess support\n+\n+use std::fmt;\n+use std::fmt::{Display, Formatter};\n+\n+pub struct A(Vec<u32>);\n+\n+impl Display for A {\n+    fn fmt(&self, _f: &mut Formatter<'_>) -> fmt::Result {\n+        self.0[0];\n+        Ok(())\n+    }\n+}\n+\n+#[test]\n+fn main() {\n+    let result = std::panic::catch_unwind(|| {\n+        let a = A(vec![]);\n+        eprintln!(\"{}\", a);\n+    });\n+    assert!(result.is_err());\n+}"}, {"sha": "f984e5b61a5fd5462c812f52abd275763af7c830", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -5,8 +5,7 @@ authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n edition = \"2018\"\n \n [dependencies]\n+cargo_metadata = \"0.9.1\"\n regex = \"1\"\n-serde = { version = \"1.0.8\", features = [\"derive\"] }\n-serde_json = \"1.0.2\"\n lazy_static = \"1\"\n walkdir = \"2\""}, {"sha": "1ffc415fb2497cc146c9114011a6fde66849c167", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 354, "deletions": 334, "changes": 688, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -1,13 +1,11 @@\n-//! Checks the licenses of third-party dependencies by inspecting vendors.\n+//! Checks the licenses of third-party dependencies.\n \n-use std::collections::{BTreeSet, HashMap, HashSet};\n-use std::fs;\n+use cargo_metadata::{Metadata, Package, PackageId, Resolve};\n+use std::collections::{BTreeSet, HashSet};\n use std::path::Path;\n-use std::process::Command;\n-\n-use serde::Deserialize;\n-use serde_json;\n \n+/// These are licenses that are allowed for all crates, including the runtime,\n+/// rustc, tools, etc.\n const LICENSES: &[&str] = &[\n     \"MIT/Apache-2.0\",\n     \"MIT / Apache-2.0\",\n@@ -25,404 +23,426 @@ const LICENSES: &[&str] = &[\n /// should be considered bugs. Exceptions are only allowed in Rust\n /// tooling. It is _crucial_ that no exception crates be dependencies\n /// of the Rust runtime (std/test).\n-const EXCEPTIONS: &[&str] = &[\n-    \"mdbook\",             // MPL2, mdbook\n-    \"openssl\",            // BSD+advertising clause, cargo, mdbook\n-    \"pest\",               // MPL2, mdbook via handlebars\n-    \"arrayref\",           // BSD-2-Clause, mdbook via handlebars via pest\n-    \"thread-id\",          // Apache-2.0, mdbook\n-    \"toml-query\",         // MPL-2.0, mdbook\n-    \"is-match\",           // MPL-2.0, mdbook\n-    \"cssparser\",          // MPL-2.0, rustdoc\n-    \"smallvec\",           // MPL-2.0, rustdoc\n-    \"rdrand\",             // ISC, mdbook, rustfmt\n-    \"fuchsia-cprng\",      // BSD-3-Clause, mdbook, rustfmt\n-    \"fuchsia-zircon-sys\", // BSD-3-Clause, rustdoc, rustc, cargo\n-    \"fuchsia-zircon\",     // BSD-3-Clause, rustdoc, rustc, cargo (jobserver & tempdir)\n-    \"cssparser-macros\",   // MPL-2.0, rustdoc\n-    \"selectors\",          // MPL-2.0, rustdoc\n-    \"clippy_lints\",       // MPL-2.0, rls\n-    \"colored\",            // MPL-2.0, rustfmt\n-    \"ordslice\",           // Apache-2.0, rls\n-    \"cloudabi\",           // BSD-2-Clause, (rls -> crossbeam-channel 0.2 -> rand 0.5)\n-    \"ryu\",                // Apache-2.0, rls/cargo/... (because of serde)\n-    \"bytesize\",           // Apache-2.0, cargo\n-    \"im-rc\",              // MPL-2.0+, cargo\n-    \"adler32\",            // BSD-3-Clause AND Zlib, cargo dep that isn't used\n-    \"constant_time_eq\",   // CC0-1.0, rustfmt\n-    \"utf8parse\",          // Apache-2.0 OR MIT, cargo via strip-ansi-escapes\n-    \"vte\",                // Apache-2.0 OR MIT, cargo via strip-ansi-escapes\n-    \"sized-chunks\",       // MPL-2.0+, cargo via im-rc\n-    \"bitmaps\",            // MPL-2.0+, cargo via im-rc\n+const EXCEPTIONS: &[(&str, &str)] = &[\n+    (\"mdbook\", \"MPL-2.0\"),                  // mdbook\n+    (\"openssl\", \"Apache-2.0\"),              // cargo, mdbook\n+    (\"arrayref\", \"BSD-2-Clause\"),           // mdbook via handlebars via pest\n+    (\"toml-query\", \"MPL-2.0\"),              // mdbook\n+    (\"toml-query_derive\", \"MPL-2.0\"),       // mdbook\n+    (\"is-match\", \"MPL-2.0\"),                // mdbook\n+    (\"rdrand\", \"ISC\"),                      // mdbook, rustfmt\n+    (\"fuchsia-cprng\", \"BSD-3-Clause\"),      // mdbook, rustfmt\n+    (\"fuchsia-zircon-sys\", \"BSD-3-Clause\"), // rustdoc, rustc, cargo\n+    (\"fuchsia-zircon\", \"BSD-3-Clause\"),     // rustdoc, rustc, cargo (jobserver & tempdir)\n+    (\"colored\", \"MPL-2.0\"),                 // rustfmt\n+    (\"ordslice\", \"Apache-2.0\"),             // rls\n+    (\"cloudabi\", \"BSD-2-Clause\"),           // (rls -> crossbeam-channel 0.2 -> rand 0.5)\n+    (\"ryu\", \"Apache-2.0 OR BSL-1.0\"),       // rls/cargo/... (because of serde)\n+    (\"bytesize\", \"Apache-2.0\"),             // cargo\n+    (\"im-rc\", \"MPL-2.0+\"),                  // cargo\n+    (\"adler32\", \"BSD-3-Clause AND Zlib\"),   // cargo dep that isn't used\n+    (\"constant_time_eq\", \"CC0-1.0\"),        // rustfmt\n+    (\"sized-chunks\", \"MPL-2.0+\"),           // cargo via im-rc\n+    (\"bitmaps\", \"MPL-2.0+\"),                // cargo via im-rc\n     // FIXME: this dependency violates the documentation comment above:\n-    \"fortanix-sgx-abi\",   // MPL-2.0+, libstd but only for `sgx` target\n-    \"dunce\",              // CC0-1.0 mdbook-linkcheck\n-    \"codespan-reporting\", // Apache-2.0 mdbook-linkcheck\n-    \"codespan\",           // Apache-2.0 mdbook-linkcheck\n-    \"crossbeam-channel\",  // MIT/Apache-2.0 AND BSD-2-Clause, cargo\n+    (\"fortanix-sgx-abi\", \"MPL-2.0\"), // libstd but only for `sgx` target\n+    (\"dunce\", \"CC0-1.0\"),            // mdbook-linkcheck\n+    (\"codespan-reporting\", \"Apache-2.0\"), // mdbook-linkcheck\n+    (\"codespan\", \"Apache-2.0\"),      // mdbook-linkcheck\n+    (\"crossbeam-channel\", \"MIT/Apache-2.0 AND BSD-2-Clause\"), // cargo\n ];\n \n+/// These are the root crates that are part of the runtime. The licenses for\n+/// these and all their dependencies *must not* be in the exception list.\n+const RUNTIME_CRATES: &[&str] = &[\"std\", \"core\", \"alloc\", \"test\", \"panic_abort\", \"panic_unwind\"];\n+\n /// Which crates to check against the whitelist?\n-const WHITELIST_CRATES: &[CrateVersion<'_>] =\n-    &[CrateVersion(\"rustc\", \"0.0.0\"), CrateVersion(\"rustc_codegen_llvm\", \"0.0.0\")];\n+const WHITELIST_CRATES: &[&str] = &[\"rustc\", \"rustc_codegen_llvm\"];\n \n /// Whitelist of crates rustc is allowed to depend on. Avoid adding to the list if possible.\n-const WHITELIST: &[Crate<'_>] = &[\n-    Crate(\"adler32\"),\n-    Crate(\"aho-corasick\"),\n-    Crate(\"annotate-snippets\"),\n-    Crate(\"ansi_term\"),\n-    Crate(\"arrayvec\"),\n-    Crate(\"atty\"),\n-    Crate(\"autocfg\"),\n-    Crate(\"backtrace\"),\n-    Crate(\"backtrace-sys\"),\n-    Crate(\"bitflags\"),\n-    Crate(\"build_const\"),\n-    Crate(\"byteorder\"),\n-    Crate(\"c2-chacha\"),\n-    Crate(\"cc\"),\n-    Crate(\"cfg-if\"),\n-    Crate(\"chalk-engine\"),\n-    Crate(\"chalk-macros\"),\n-    Crate(\"cloudabi\"),\n-    Crate(\"cmake\"),\n-    Crate(\"compiler_builtins\"),\n-    Crate(\"crc\"),\n-    Crate(\"crc32fast\"),\n-    Crate(\"crossbeam-deque\"),\n-    Crate(\"crossbeam-epoch\"),\n-    Crate(\"crossbeam-queue\"),\n-    Crate(\"crossbeam-utils\"),\n-    Crate(\"datafrog\"),\n-    Crate(\"dlmalloc\"),\n-    Crate(\"either\"),\n-    Crate(\"ena\"),\n-    Crate(\"env_logger\"),\n-    Crate(\"filetime\"),\n-    Crate(\"flate2\"),\n-    Crate(\"fortanix-sgx-abi\"),\n-    Crate(\"fuchsia-zircon\"),\n-    Crate(\"fuchsia-zircon-sys\"),\n-    Crate(\"getopts\"),\n-    Crate(\"getrandom\"),\n-    Crate(\"hashbrown\"),\n-    Crate(\"humantime\"),\n-    Crate(\"indexmap\"),\n-    Crate(\"itertools\"),\n-    Crate(\"jobserver\"),\n-    Crate(\"kernel32-sys\"),\n-    Crate(\"lazy_static\"),\n-    Crate(\"libc\"),\n-    Crate(\"libz-sys\"),\n-    Crate(\"lock_api\"),\n-    Crate(\"log\"),\n-    Crate(\"log_settings\"),\n-    Crate(\"measureme\"),\n-    Crate(\"memchr\"),\n-    Crate(\"memmap\"),\n-    Crate(\"memoffset\"),\n-    Crate(\"miniz-sys\"),\n-    Crate(\"miniz_oxide\"),\n-    Crate(\"miniz_oxide_c_api\"),\n-    Crate(\"nodrop\"),\n-    Crate(\"num_cpus\"),\n-    Crate(\"owning_ref\"),\n-    Crate(\"parking_lot\"),\n-    Crate(\"parking_lot_core\"),\n-    Crate(\"pkg-config\"),\n-    Crate(\"polonius-engine\"),\n-    Crate(\"ppv-lite86\"),\n-    Crate(\"proc-macro2\"),\n-    Crate(\"punycode\"),\n-    Crate(\"quick-error\"),\n-    Crate(\"quote\"),\n-    Crate(\"rand\"),\n-    Crate(\"rand_chacha\"),\n-    Crate(\"rand_core\"),\n-    Crate(\"rand_hc\"),\n-    Crate(\"rand_isaac\"),\n-    Crate(\"rand_pcg\"),\n-    Crate(\"rand_xorshift\"),\n-    Crate(\"redox_syscall\"),\n-    Crate(\"redox_termios\"),\n-    Crate(\"regex\"),\n-    Crate(\"regex-syntax\"),\n-    Crate(\"remove_dir_all\"),\n-    Crate(\"rustc-demangle\"),\n-    Crate(\"rustc-hash\"),\n-    Crate(\"rustc-rayon\"),\n-    Crate(\"rustc-rayon-core\"),\n-    Crate(\"rustc_version\"),\n-    Crate(\"scoped-tls\"),\n-    Crate(\"scopeguard\"),\n-    Crate(\"semver\"),\n-    Crate(\"semver-parser\"),\n-    Crate(\"serde\"),\n-    Crate(\"serde_derive\"),\n-    Crate(\"smallvec\"),\n-    Crate(\"stable_deref_trait\"),\n-    Crate(\"syn\"),\n-    Crate(\"synstructure\"),\n-    Crate(\"tempfile\"),\n-    Crate(\"termcolor\"),\n-    Crate(\"terminon\"),\n-    Crate(\"termion\"),\n-    Crate(\"termize\"),\n-    Crate(\"thread_local\"),\n-    Crate(\"ucd-util\"),\n-    Crate(\"unicode-normalization\"),\n-    Crate(\"unicode-script\"),\n-    Crate(\"unicode-security\"),\n-    Crate(\"unicode-width\"),\n-    Crate(\"unicode-xid\"),\n-    Crate(\"unreachable\"),\n-    Crate(\"utf8-ranges\"),\n-    Crate(\"vcpkg\"),\n-    Crate(\"version_check\"),\n-    Crate(\"void\"),\n-    Crate(\"wasi\"),\n-    Crate(\"winapi\"),\n-    Crate(\"winapi-build\"),\n-    Crate(\"winapi-i686-pc-windows-gnu\"),\n-    Crate(\"winapi-util\"),\n-    Crate(\"winapi-x86_64-pc-windows-gnu\"),\n-    Crate(\"wincolor\"),\n-    Crate(\"hermit-abi\"),\n+///\n+/// This list is here to provide a speed-bump to adding a new dependency to\n+/// rustc. Please check with the compiler team before adding an entry.\n+const WHITELIST: &[&str] = &[\n+    \"adler32\",\n+    \"aho-corasick\",\n+    \"annotate-snippets\",\n+    \"ansi_term\",\n+    \"arrayvec\",\n+    \"atty\",\n+    \"autocfg\",\n+    \"backtrace\",\n+    \"backtrace-sys\",\n+    \"bitflags\",\n+    \"byteorder\",\n+    \"c2-chacha\",\n+    \"cc\",\n+    \"cfg-if\",\n+    \"cloudabi\",\n+    \"cmake\",\n+    \"compiler_builtins\",\n+    \"crc32fast\",\n+    \"crossbeam-deque\",\n+    \"crossbeam-epoch\",\n+    \"crossbeam-queue\",\n+    \"crossbeam-utils\",\n+    \"datafrog\",\n+    \"dlmalloc\",\n+    \"either\",\n+    \"ena\",\n+    \"env_logger\",\n+    \"filetime\",\n+    \"flate2\",\n+    \"fortanix-sgx-abi\",\n+    \"fuchsia-zircon\",\n+    \"fuchsia-zircon-sys\",\n+    \"getopts\",\n+    \"getrandom\",\n+    \"hashbrown\",\n+    \"hermit-abi\",\n+    \"humantime\",\n+    \"indexmap\",\n+    \"itertools\",\n+    \"jobserver\",\n+    \"kernel32-sys\",\n+    \"lazy_static\",\n+    \"libc\",\n+    \"libz-sys\",\n+    \"lock_api\",\n+    \"log\",\n+    \"log_settings\",\n+    \"measureme\",\n+    \"memchr\",\n+    \"memmap\",\n+    \"memoffset\",\n+    \"miniz_oxide\",\n+    \"nodrop\",\n+    \"num_cpus\",\n+    \"parking_lot\",\n+    \"parking_lot_core\",\n+    \"pkg-config\",\n+    \"polonius-engine\",\n+    \"ppv-lite86\",\n+    \"proc-macro2\",\n+    \"punycode\",\n+    \"quick-error\",\n+    \"quote\",\n+    \"rand\",\n+    \"rand_chacha\",\n+    \"rand_core\",\n+    \"rand_hc\",\n+    \"rand_isaac\",\n+    \"rand_pcg\",\n+    \"rand_xorshift\",\n+    \"redox_syscall\",\n+    \"redox_termios\",\n+    \"regex\",\n+    \"regex-syntax\",\n+    \"remove_dir_all\",\n+    \"rustc-demangle\",\n+    \"rustc-hash\",\n+    \"rustc-rayon\",\n+    \"rustc-rayon-core\",\n+    \"rustc_version\",\n+    \"scoped-tls\",\n+    \"scopeguard\",\n+    \"semver\",\n+    \"semver-parser\",\n+    \"serde\",\n+    \"serde_derive\",\n+    \"smallvec\",\n+    \"stable_deref_trait\",\n+    \"syn\",\n+    \"synstructure\",\n+    \"tempfile\",\n+    \"termcolor\",\n+    \"termion\",\n+    \"termize\",\n+    \"thread_local\",\n+    \"ucd-util\",\n+    \"unicode-normalization\",\n+    \"unicode-script\",\n+    \"unicode-security\",\n+    \"unicode-width\",\n+    \"unicode-xid\",\n+    \"utf8-ranges\",\n+    \"vcpkg\",\n+    \"version_check\",\n+    \"wasi\",\n+    \"winapi\",\n+    \"winapi-build\",\n+    \"winapi-i686-pc-windows-gnu\",\n+    \"winapi-util\",\n+    \"winapi-x86_64-pc-windows-gnu\",\n+    \"wincolor\",\n ];\n \n-// Some types for Serde to deserialize the output of `cargo metadata` to.\n-\n-#[derive(Deserialize)]\n-struct Output {\n-    resolve: Resolve,\n-}\n-\n-#[derive(Deserialize)]\n-struct Resolve {\n-    nodes: Vec<ResolveNode>,\n-}\n-\n-#[derive(Deserialize)]\n-struct ResolveNode {\n-    id: String,\n-    dependencies: Vec<String>,\n-}\n-\n-/// A unique identifier for a crate.\n-#[derive(Copy, Clone, PartialOrd, Ord, PartialEq, Eq, Debug, Hash)]\n-struct Crate<'a>(&'a str); // (name)\n-\n-#[derive(Copy, Clone, PartialOrd, Ord, PartialEq, Eq, Debug, Hash)]\n-struct CrateVersion<'a>(&'a str, &'a str); // (name, version)\n-\n-impl Crate<'_> {\n-    pub fn id_str(&self) -> String {\n-        format!(\"{} \", self.0)\n-    }\n-}\n-\n-impl<'a> CrateVersion<'a> {\n-    /// Returns the struct and whether or not the dependency is in-tree.\n-    pub fn from_str(s: &'a str) -> (Self, bool) {\n-        let mut parts = s.split(' ');\n-        let name = parts.next().unwrap();\n-        let version = parts.next().unwrap();\n-        let path = parts.next().unwrap();\n-\n-        let is_path_dep = path.starts_with(\"(path+\");\n-\n-        (CrateVersion(name, version), is_path_dep)\n-    }\n-\n-    pub fn id_str(&self) -> String {\n-        format!(\"{} {}\", self.0, self.1)\n-    }\n+/// Dependency checks.\n+///\n+/// `path` is path to the `src` directory, `cargo` is path to the cargo executable.\n+pub fn check(path: &Path, cargo: &Path, bad: &mut bool) {\n+    let mut cmd = cargo_metadata::MetadataCommand::new();\n+    cmd.cargo_path(cargo)\n+        .manifest_path(path.parent().unwrap().join(\"Cargo.toml\"))\n+        .features(cargo_metadata::CargoOpt::AllFeatures);\n+    let metadata = t!(cmd.exec());\n+    check_exceptions(&metadata, bad);\n+    check_whitelist(&metadata, bad);\n+    check_crate_duplicate(&metadata, bad);\n }\n \n-impl<'a> From<CrateVersion<'a>> for Crate<'a> {\n-    fn from(cv: CrateVersion<'a>) -> Crate<'a> {\n-        Crate(cv.0)\n+/// Check that all licenses are in the valid list in `LICENSES`.\n+///\n+/// Packages listed in `EXCEPTIONS` are allowed for tools.\n+fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n+    // Validate the EXCEPTIONS list hasn't changed.\n+    for (name, license) in EXCEPTIONS {\n+        // Check that the package actually exists.\n+        if !metadata.packages.iter().any(|p| p.name == *name) {\n+            println!(\n+                \"could not find exception package `{}`\\n\\\n+                Remove from EXCEPTIONS list if it is no longer used.\",\n+                name\n+            );\n+            *bad = true;\n+        }\n+        // Check that the license hasn't changed.\n+        for pkg in metadata.packages.iter().filter(|p| p.name == *name) {\n+            if pkg.name == \"fuchsia-cprng\" {\n+                // This package doesn't declare a license expression. Manual\n+                // inspection of the license file is necessary, which appears\n+                // to be BSD-3-Clause.\n+                assert!(pkg.license.is_none());\n+                continue;\n+            }\n+            match &pkg.license {\n+                None => {\n+                    println!(\n+                        \"dependency exception `{}` does not declare a license expression\",\n+                        pkg.id\n+                    );\n+                    *bad = true;\n+                }\n+                Some(pkg_license) => {\n+                    if pkg_license.as_str() != *license {\n+                        println!(\"dependency exception `{}` license has changed\", name);\n+                        println!(\"    previously `{}` now `{}`\", license, pkg_license);\n+                        println!(\"    update EXCEPTIONS for the new license\");\n+                        *bad = true;\n+                    }\n+                }\n+            }\n+        }\n     }\n-}\n \n-/// Checks the dependency at the given path. Changes `bad` to `true` if a check failed.\n-///\n-/// Specifically, this checks that the license is correct.\n-pub fn check(path: &Path, bad: &mut bool) {\n-    // Check licences.\n-    let path = path.join(\"../vendor\");\n-    assert!(path.exists(), \"vendor directory missing\");\n-    let mut saw_dir = false;\n-    for dir in t!(path.read_dir()) {\n-        saw_dir = true;\n-        let dir = t!(dir);\n+    let exception_names: Vec<_> = EXCEPTIONS.iter().map(|(name, _license)| *name).collect();\n+    let runtime_ids = compute_runtime_crates(metadata);\n \n-        // Skip our exceptions.\n-        let is_exception = EXCEPTIONS.iter().any(|exception| {\n-            dir.path().to_str().unwrap().contains(&format!(\"vendor/{}\", exception))\n-        });\n-        if is_exception {\n+    // Check if any package does not have a valid license.\n+    for pkg in &metadata.packages {\n+        if pkg.source.is_none() {\n+            // No need to check local packages.\n             continue;\n         }\n-\n-        let toml = dir.path().join(\"Cargo.toml\");\n-        *bad = !check_license(&toml) || *bad;\n+        if !runtime_ids.contains(&pkg.id) && exception_names.contains(&pkg.name.as_str()) {\n+            continue;\n+        }\n+        let license = match &pkg.license {\n+            Some(license) => license,\n+            None => {\n+                println!(\"dependency `{}` does not define a license expression\", pkg.id,);\n+                *bad = true;\n+                continue;\n+            }\n+        };\n+        if !LICENSES.contains(&license.as_str()) {\n+            if pkg.name == \"fortanix-sgx-abi\" {\n+                // This is a specific exception because SGX is considered\n+                // \"third party\". See\n+                // https://github.com/rust-lang/rust/issues/62620 for more. In\n+                // general, these should never be added.\n+                continue;\n+            }\n+            println!(\"invalid license `{}` in `{}`\", license, pkg.id);\n+            *bad = true;\n+        }\n     }\n-    assert!(saw_dir, \"no vendored source\");\n }\n \n /// Checks the dependency of `WHITELIST_CRATES` at the given path. Changes `bad` to `true` if a\n /// check failed.\n ///\n /// Specifically, this checks that the dependencies are on the `WHITELIST`.\n-pub fn check_whitelist(path: &Path, cargo: &Path, bad: &mut bool) {\n-    // Get dependencies from Cargo metadata.\n-    let resolve = get_deps(path, cargo);\n-\n+fn check_whitelist(metadata: &Metadata, bad: &mut bool) {\n+    // Check that the WHITELIST does not have unused entries.\n+    for name in WHITELIST {\n+        if !metadata.packages.iter().any(|p| p.name == *name) {\n+            println!(\n+                \"could not find whitelisted package `{}`\\n\\\n+                Remove from WHITELIST list if it is no longer used.\",\n+                name\n+            );\n+            *bad = true;\n+        }\n+    }\n     // Get the whitelist in a convenient form.\n     let whitelist: HashSet<_> = WHITELIST.iter().cloned().collect();\n \n     // Check dependencies.\n     let mut visited = BTreeSet::new();\n     let mut unapproved = BTreeSet::new();\n     for &krate in WHITELIST_CRATES.iter() {\n-        let mut bad = check_crate_whitelist(&whitelist, &resolve, &mut visited, krate, false);\n+        let pkg = pkg_from_name(metadata, krate);\n+        let mut bad = check_crate_whitelist(&whitelist, metadata, &mut visited, pkg);\n         unapproved.append(&mut bad);\n     }\n \n     if !unapproved.is_empty() {\n         println!(\"Dependencies not on the whitelist:\");\n         for dep in unapproved {\n-            println!(\"* {}\", dep.id_str());\n+            println!(\"* {}\", dep);\n         }\n         *bad = true;\n     }\n-\n-    check_crate_duplicate(&resolve, bad);\n-}\n-\n-fn check_license(path: &Path) -> bool {\n-    if !path.exists() {\n-        panic!(\"{} does not exist\", path.display());\n-    }\n-    let contents = t!(fs::read_to_string(&path));\n-\n-    let mut found_license = false;\n-    for line in contents.lines() {\n-        if !line.starts_with(\"license\") {\n-            continue;\n-        }\n-        let license = extract_license(line);\n-        if !LICENSES.contains(&&*license) {\n-            println!(\"invalid license {} in {}\", license, path.display());\n-            return false;\n-        }\n-        found_license = true;\n-        break;\n-    }\n-    if !found_license {\n-        println!(\"no license in {}\", path.display());\n-        return false;\n-    }\n-\n-    true\n-}\n-\n-fn extract_license(line: &str) -> String {\n-    let first_quote = line.find('\"');\n-    let last_quote = line.rfind('\"');\n-    if let (Some(f), Some(l)) = (first_quote, last_quote) {\n-        let license = &line[f + 1..l];\n-        license.into()\n-    } else {\n-        \"bad-license-parse\".into()\n-    }\n-}\n-\n-/// Gets the dependencies of the crate at the given path using `cargo metadata`.\n-fn get_deps(path: &Path, cargo: &Path) -> Resolve {\n-    // Run `cargo metadata` to get the set of dependencies.\n-    let output = Command::new(cargo)\n-        .arg(\"metadata\")\n-        .arg(\"--format-version\")\n-        .arg(\"1\")\n-        .arg(\"--manifest-path\")\n-        .arg(path.join(\"../Cargo.toml\"))\n-        .output()\n-        .expect(\"Unable to run `cargo metadata`\")\n-        .stdout;\n-    let output = String::from_utf8_lossy(&output);\n-    let output: Output = serde_json::from_str(&output).unwrap();\n-\n-    output.resolve\n }\n \n /// Checks the dependencies of the given crate from the given cargo metadata to see if they are on\n /// the whitelist. Returns a list of illegal dependencies.\n fn check_crate_whitelist<'a>(\n-    whitelist: &'a HashSet<Crate<'_>>,\n-    resolve: &'a Resolve,\n-    visited: &mut BTreeSet<CrateVersion<'a>>,\n-    krate: CrateVersion<'a>,\n-    must_be_on_whitelist: bool,\n-) -> BTreeSet<Crate<'a>> {\n+    whitelist: &'a HashSet<&'static str>,\n+    metadata: &'a Metadata,\n+    visited: &mut BTreeSet<&'a PackageId>,\n+    krate: &'a Package,\n+) -> BTreeSet<&'a PackageId> {\n     // This will contain bad deps.\n     let mut unapproved = BTreeSet::new();\n \n     // Check if we have already visited this crate.\n-    if visited.contains(&krate) {\n+    if visited.contains(&krate.id) {\n         return unapproved;\n     }\n \n-    visited.insert(krate);\n+    visited.insert(&krate.id);\n \n     // If this path is in-tree, we don't require it to be on the whitelist.\n-    if must_be_on_whitelist {\n+    if krate.source.is_some() {\n         // If this dependency is not on `WHITELIST`, add to bad set.\n-        if !whitelist.contains(&krate.into()) {\n-            unapproved.insert(krate.into());\n+        if !whitelist.contains(krate.name.as_str()) {\n+            unapproved.insert(&krate.id);\n         }\n     }\n \n-    // Do a DFS in the crate graph (it's a DAG, so we know we have no cycles!).\n-    let to_check = resolve\n-        .nodes\n-        .iter()\n-        .find(|n| n.id.starts_with(&krate.id_str()))\n-        .expect(\"crate does not exist\");\n+    // Do a DFS in the crate graph.\n+    let to_check = deps_of(metadata, &krate.id);\n \n-    for dep in to_check.dependencies.iter() {\n-        let (krate, is_path_dep) = CrateVersion::from_str(dep);\n-\n-        let mut bad = check_crate_whitelist(whitelist, resolve, visited, krate, !is_path_dep);\n+    for dep in to_check {\n+        let mut bad = check_crate_whitelist(whitelist, metadata, visited, dep);\n         unapproved.append(&mut bad);\n     }\n \n     unapproved\n }\n \n-fn check_crate_duplicate(resolve: &Resolve, bad: &mut bool) {\n+/// Prevents multiple versions of some expensive crates.\n+fn check_crate_duplicate(metadata: &Metadata, bad: &mut bool) {\n     const FORBIDDEN_TO_HAVE_DUPLICATES: &[&str] = &[\n         // These two crates take quite a long time to build, so don't allow two versions of them\n         // to accidentally sneak into our dependency graph, in order to ensure we keep our CI times\n         // under control.\n         \"cargo\",\n         \"rustc-ap-syntax\",\n     ];\n-    let mut name_to_id: HashMap<_, Vec<_>> = HashMap::new();\n-    for node in resolve.nodes.iter() {\n-        name_to_id.entry(node.id.split_whitespace().next().unwrap()).or_default().push(&node.id);\n-    }\n \n-    for name in FORBIDDEN_TO_HAVE_DUPLICATES {\n-        if name_to_id[name].len() <= 1 {\n-            continue;\n-        }\n-        println!(\"crate `{}` is duplicated in `Cargo.lock`\", name);\n-        for id in name_to_id[name].iter() {\n-            println!(\"  * {}\", id);\n+    for &name in FORBIDDEN_TO_HAVE_DUPLICATES {\n+        let matches: Vec<_> = metadata.packages.iter().filter(|pkg| pkg.name == name).collect();\n+        match matches.len() {\n+            0 => {\n+                println!(\n+                    \"crate `{}` is missing, update `check_crate_duplicate` \\\n+                    if it is no longer used\",\n+                    name\n+                );\n+                *bad = true;\n+            }\n+            1 => {}\n+            _ => {\n+                println!(\n+                    \"crate `{}` is duplicated in `Cargo.lock`, \\\n+                    it is too expensive to build multiple times, \\\n+                    so make sure only one version appears across all dependencies\",\n+                    name\n+                );\n+                for pkg in matches {\n+                    println!(\"  * {}\", pkg.id);\n+                }\n+                *bad = true;\n+            }\n         }\n-        *bad = true;\n+    }\n+}\n+\n+/// Returns a list of dependencies for the given package.\n+fn deps_of<'a>(metadata: &'a Metadata, pkg_id: &'a PackageId) -> Vec<&'a Package> {\n+    let resolve = metadata.resolve.as_ref().unwrap();\n+    let node = resolve\n+        .nodes\n+        .iter()\n+        .find(|n| &n.id == pkg_id)\n+        .unwrap_or_else(|| panic!(\"could not find `{}` in resolve\", pkg_id));\n+    node.deps\n+        .iter()\n+        .map(|dep| {\n+            metadata.packages.iter().find(|pkg| pkg.id == dep.pkg).unwrap_or_else(|| {\n+                panic!(\"could not find dep `{}` for pkg `{}` in resolve\", dep.pkg, pkg_id)\n+            })\n+        })\n+        .collect()\n+}\n+\n+/// Finds a package with the given name.\n+fn pkg_from_name<'a>(metadata: &'a Metadata, name: &'static str) -> &'a Package {\n+    let mut i = metadata.packages.iter().filter(|p| p.name == name);\n+    let result =\n+        i.next().unwrap_or_else(|| panic!(\"could not find package `{}` in package list\", name));\n+    assert!(i.next().is_none(), \"more than one package found for `{}`\", name);\n+    result\n+}\n+\n+/// Finds all the packages that are in the rust runtime.\n+fn compute_runtime_crates<'a>(metadata: &'a Metadata) -> HashSet<&'a PackageId> {\n+    let resolve = metadata.resolve.as_ref().unwrap();\n+    let mut result = HashSet::new();\n+    for name in RUNTIME_CRATES {\n+        let id = &pkg_from_name(metadata, name).id;\n+        normal_deps_of_r(resolve, id, &mut result);\n+    }\n+    result\n+}\n+\n+/// Recursively find all normal dependencies.\n+fn normal_deps_of_r<'a>(\n+    resolve: &'a Resolve,\n+    pkg_id: &'a PackageId,\n+    result: &mut HashSet<&'a PackageId>,\n+) {\n+    if !result.insert(pkg_id) {\n+        return;\n+    }\n+    let node = resolve\n+        .nodes\n+        .iter()\n+        .find(|n| &n.id == pkg_id)\n+        .unwrap_or_else(|| panic!(\"could not find `{}` in resolve\", pkg_id));\n+    // Don't care about dev-dependencies.\n+    // Build dependencies *shouldn't* matter unless they do some kind of\n+    // codegen. For now we'll assume they don't.\n+    let deps = node.deps.iter().filter(|node_dep| {\n+        node_dep\n+            .dep_kinds\n+            .iter()\n+            .any(|kind_info| kind_info.kind == cargo_metadata::DependencyKind::Normal)\n+    });\n+    for dep in deps {\n+        normal_deps_of_r(resolve, &dep.pkg, result);\n     }\n }"}, {"sha": "e2856c690550abfd9d0c828649406a20590cf924", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724d584b8e3b5fa5e06466d1e900cdd60953707/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=6724d584b8e3b5fa5e06466d1e900cdd60953707", "patch": "@@ -30,10 +30,7 @@ fn main() {\n     pal::check(&path, &mut bad);\n     unstable_book::check(&path, collected, &mut bad);\n     unit_tests::check(&path, &mut bad);\n-    if !args.iter().any(|s| *s == \"--no-vendor\") {\n-        deps::check(&path, &mut bad);\n-    }\n-    deps::check_whitelist(&path, &cargo, &mut bad);\n+    deps::check(&path, &cargo, &mut bad);\n     extdeps::check(&path, &mut bad);\n     ui_tests::check(&path, &mut bad);\n     error_codes_check::check(&path, &mut bad);"}]}