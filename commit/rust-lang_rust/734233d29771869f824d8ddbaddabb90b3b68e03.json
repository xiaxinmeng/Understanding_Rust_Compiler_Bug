{"sha": "734233d29771869f824d8ddbaddabb90b3b68e03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNDIzM2QyOTc3MTg2OWY4MjRkOGRkYmFkZGFiYjkwYjNiNjhlMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-20T21:38:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-20T21:38:46Z"}, "message": "Auto merge of #74569 - Manishearth:rollup-hkn5ex9, r=Manishearth\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #72714 (Fix debug assertion in typeck)\n - #73197 (Impl Default for ranges)\n - #73323 (wf: check foreign fn decls for well-formedness)\n - #74051 (disallow non-static lifetimes in const generics)\n - #74376 (test caching opt_const_param_of on disc)\n - #74501 (Ayu theme: Use different background color for Run button)\n - #74505 (Fix search input focus in ayu theme)\n - #74522 (Update sanitizer docs)\n - #74546 (Fix duplicate maybe_uninit_extra attribute)\n - #74552 (Stabilize TAU constant.)\n - #74555 (Improve \"important traits\" popup display on mobile)\n - #74557 (Fix an ICE on an invalid `binding @ ...` in a tuple struct pattern)\n - #74561 (update backtrace-rs)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "ce00874b3ee64b5353fd5cacb7892b0a26f861f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce00874b3ee64b5353fd5cacb7892b0a26f861f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/734233d29771869f824d8ddbaddabb90b3b68e03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/734233d29771869f824d8ddbaddabb90b3b68e03", "html_url": "https://github.com/rust-lang/rust/commit/734233d29771869f824d8ddbaddabb90b3b68e03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/734233d29771869f824d8ddbaddabb90b3b68e03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9a3086363f214f2b56bef30f0ac572e1a9127f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a3086363f214f2b56bef30f0ac572e1a9127f1", "html_url": "https://github.com/rust-lang/rust/commit/f9a3086363f214f2b56bef30f0ac572e1a9127f1"}, {"sha": "df8d169c31b56a893b8a6d0caa3a5931b9b2f968", "url": "https://api.github.com/repos/rust-lang/rust/commits/df8d169c31b56a893b8a6d0caa3a5931b9b2f968", "html_url": "https://github.com/rust-lang/rust/commit/df8d169c31b56a893b8a6d0caa3a5931b9b2f968"}], "stats": {"total": 386, "additions": 305, "deletions": 81}, "files": [{"sha": "5965cf5fc17affc84c11dc9972ae8f4dc2c32db1", "filename": "src/backtrace", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbacktrace?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -1 +1 @@\n-Subproject commit 8f89434446f72f27f8145d8bbc1a302c6ef29d1e\n+Subproject commit 5965cf5fc17affc84c11dc9972ae8f4dc2c32db1"}, {"sha": "93908e9190e6436af2fdc6290aec711543fe252e", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -26,6 +26,9 @@ of bugs:\n * Double-free, invalid free\n * Memory leaks\n \n+The memory leak detection is enabled by default on Linux, and can be enabled\n+with runtime flag `ASAN_OPTIONS=detect_leaks=1` on macOS.\n+\n AddressSanitizer is supported on the following targets:\n \n * `x86_64-apple-darwin`\n@@ -196,10 +199,6 @@ fn main() {\n \n ```shell\n $ export \\\n-  CC=clang \\\n-  CXX=clang++ \\\n-  CFLAGS='-fsanitize=memory -fsanitize-memory-track-origins' \\\n-  CXXFLAGS='-fsanitize=memory -fsanitize-memory-track-origins' \\\n   RUSTFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins' \\\n   RUSTDOCFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins'\n $ cargo clean"}, {"sha": "9fb7296ce31cc32d873d7eb0e91ff21fe9929318", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -242,7 +242,7 @@ pub mod consts {\n     /// The full circle constant (\u03c4)\n     ///\n     /// Equal to 2\u03c0.\n-    #[unstable(feature = \"tau_constant\", issue = \"66770\")]\n+    #[stable(feature = \"tau_constant\", since = \"1.47.0\")]\n     pub const TAU: f32 = 6.28318530717958647692528676655900577_f32;\n \n     /// \u03c0/2"}, {"sha": "bcb6cd4084691da478fb7e2ebc4175b6b564d8a9", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -242,7 +242,7 @@ pub mod consts {\n     /// The full circle constant (\u03c4)\n     ///\n     /// Equal to 2\u03c0.\n-    #[unstable(feature = \"tau_constant\", issue = \"66770\")]\n+    #[stable(feature = \"tau_constant\", since = \"1.47.0\")]\n     pub const TAU: f64 = 6.28318530717958647692528676655900577_f64;\n \n     /// \u03c0/2"}, {"sha": "179038d1977c86ada516b1fce43454eb335c0fb5", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -39,7 +39,7 @@ use crate::hash::Hash;\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n #[doc(alias = \"..\")]\n-#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Default, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFull;\n \n@@ -71,7 +71,7 @@ impl fmt::Debug for RangeFull {\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n #[doc(alias = \"..\")]\n-#[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n+#[derive(Clone, Default, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Range<Idx> {\n     /// The lower bound of the range (inclusive)."}, {"sha": "279c65ce03d2dabaf251f463202f368256fd1461", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -453,6 +453,7 @@ E0767: include_str!(\"./error_codes/E0767.md\"),\n E0768: include_str!(\"./error_codes/E0768.md\"),\n E0769: include_str!(\"./error_codes/E0769.md\"),\n E0770: include_str!(\"./error_codes/E0770.md\"),\n+E0771: include_str!(\"./error_codes/E0771.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "824a955f6b3f48933d115c511d9ff4649c807caa", "filename": "src/librustc_error_codes/error_codes/E0771.md", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_error_codes%2Ferror_codes%2FE0771.md", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_error_codes%2Ferror_codes%2FE0771.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0771.md?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -0,0 +1,23 @@\n+A non-`'static` lifetime was used in a const generic. This is currently not\n+allowed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0771\n+#![feature(const_generics)]\n+\n+fn function_with_str<'a, const STRING: &'a str>() {} // error!\n+```\n+\n+To fix this issue, the lifetime in the const generic need to be changed to\n+`'static`:\n+\n+```\n+#![feature(const_generics)]\n+\n+fn function_with_str<const STRING: &'static str>() {} // ok!\n+```\n+\n+For more information, see [GitHub issue #74052].\n+\n+[GitHub issue #74052]: https://github.com/rust-lang/rust/issues/74052"}, {"sha": "f479a030d6325fb2a7e18aaa876b117e90859f36", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -103,9 +103,13 @@ rustc_queries! {\n         /// // ^ While calling `opt_const_param_of` for other bodies returns `None`.\n         /// }\n         /// ```\n+        // It looks like caching this query on disk actually slightly\n+        // worsened performance in #74376.\n+        //\n+        // Once const generics are more prevalently used, we might want to\n+        // consider only caching calls returning `Some`.\n         query opt_const_param_of(key: LocalDefId) -> Option<DefId> {\n             desc { |tcx| \"computing the optional const parameter of `{}`\", tcx.def_path_str(key.to_def_id()) }\n-            // FIXME(#74113): consider storing this query on disk.\n         }\n \n         /// Records the type of every item."}, {"sha": "261c2031364f66d409a012139a21231a4e11dc06", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -1500,11 +1500,17 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         pat_src: PatternSource,\n         bindings: &mut SmallVec<[(PatBoundCtx, FxHashSet<Ident>); 1]>,\n     ) {\n+        let is_tuple_struct_pat = matches!(pat.kind, PatKind::TupleStruct(_, _));\n+\n         // Visit all direct subpatterns of this pattern.\n         pat.walk(&mut |pat| {\n             debug!(\"resolve_pattern pat={:?} node={:?}\", pat, pat.kind);\n             match pat.kind {\n-                PatKind::Ident(bmode, ident, ref sub) => {\n+                // In tuple struct patterns ignore the invalid `ident @ ...`.\n+                // It will be handled as an error by the AST lowering.\n+                PatKind::Ident(bmode, ident, ref sub)\n+                    if !(is_tuple_struct_pat && sub.as_ref().filter(|p| p.is_rest()).is_some()) =>\n+                {\n                     // First try to resolve the identifier as some existing entity,\n                     // then fall back to a fresh binding.\n                     let has_sub = sub.is_some();"}, {"sha": "c86b414184759114559e253ac9c4ed78d7b357e3", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -1141,6 +1141,24 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         err.emit();\n     }\n \n+    // FIXME(const_generics): This patches over a ICE caused by non-'static lifetimes in const\n+    // generics. We are disallowing this until we can decide on how we want to handle non-'static\n+    // lifetimes in const generics. See issue #74052 for discussion.\n+    crate fn emit_non_static_lt_in_const_generic_error(&self, lifetime_ref: &hir::Lifetime) {\n+        let mut err = struct_span_err!(\n+            self.tcx.sess,\n+            lifetime_ref.span,\n+            E0771,\n+            \"use of non-static lifetime `{}` in const generic\",\n+            lifetime_ref\n+        );\n+        err.note(\n+            \"for more information, see issue #74052 \\\n+            <https://github.com/rust-lang/rust/issues/74052>\",\n+        );\n+        err.emit();\n+    }\n+\n     crate fn is_trait_ref_fn_scope(&mut self, trait_ref: &'tcx hir::PolyTraitRef<'tcx>) -> bool {\n         if let def::Res::Def(_, did) = trait_ref.trait_ref.path.res {\n             if ["}, {"sha": "6009e48a54f5ef028f9e4530a93af01e05c362e5", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -173,6 +173,8 @@ crate struct LifetimeContext<'a, 'tcx> {\n     /// Used to disallow the use of in-band lifetimes in `fn` or `Fn` syntax.\n     is_in_fn_syntax: bool,\n \n+    is_in_const_generic: bool,\n+\n     /// List of labels in the function/method currently under analysis.\n     labels_in_fn: Vec<Ident>,\n \n@@ -333,6 +335,7 @@ fn krate(tcx: TyCtxt<'_>) -> NamedRegionMap {\n             scope: ROOT_SCOPE,\n             trait_ref_hack: false,\n             is_in_fn_syntax: false,\n+            is_in_const_generic: false,\n             labels_in_fn: vec![],\n             xcrate_object_lifetime_defaults: Default::default(),\n             lifetime_uses: &mut Default::default(),\n@@ -828,6 +831,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             self.insert_lifetime(lifetime_ref, Region::Static);\n             return;\n         }\n+        if self.is_in_const_generic && lifetime_ref.name != LifetimeName::Error {\n+            self.emit_non_static_lt_in_const_generic_error(lifetime_ref);\n+            return;\n+        }\n         self.resolve_lifetime_ref(lifetime_ref);\n     }\n \n@@ -860,8 +867,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     }\n                 }\n                 GenericParamKind::Const { ref ty, .. } => {\n+                    let was_in_const_generic = self.is_in_const_generic;\n+                    self.is_in_const_generic = true;\n                     walk_list!(self, visit_param_bound, param.bounds);\n                     self.visit_ty(&ty);\n+                    self.is_in_const_generic = was_in_const_generic;\n                 }\n             }\n         }\n@@ -1317,6 +1327,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             scope: &wrap_scope,\n             trait_ref_hack: self.trait_ref_hack,\n             is_in_fn_syntax: self.is_in_fn_syntax,\n+            is_in_const_generic: self.is_in_const_generic,\n             labels_in_fn,\n             xcrate_object_lifetime_defaults,\n             lifetime_uses,"}, {"sha": "dabae6cbc41377a3fdf75e55101086b8c8da6dd8", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::{\n     self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_session::parse::feature_err;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_trait_selection::opaque_types::may_define_opaque_type;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -142,8 +142,8 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                 _ => unreachable!(),\n             }\n         }\n-        hir::ItemKind::Fn(..) => {\n-            check_item_fn(tcx, item);\n+        hir::ItemKind::Fn(ref sig, ..) => {\n+            check_item_fn(tcx, item.hir_id, item.ident, item.span, sig.decl);\n         }\n         hir::ItemKind::Static(ref ty, ..) => {\n             check_item_type(tcx, item.hir_id, ty.span, false);\n@@ -153,8 +153,14 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         }\n         hir::ItemKind::ForeignMod(ref module) => {\n             for it in module.items.iter() {\n-                if let hir::ForeignItemKind::Static(ref ty, ..) = it.kind {\n-                    check_item_type(tcx, it.hir_id, ty.span, true);\n+                match it.kind {\n+                    hir::ForeignItemKind::Fn(ref decl, ..) => {\n+                        check_item_fn(tcx, it.hir_id, it.ident, it.span, decl)\n+                    }\n+                    hir::ForeignItemKind::Static(ref ty, ..) => {\n+                        check_item_type(tcx, it.hir_id, ty.span, true)\n+                    }\n+                    hir::ForeignItemKind::Type => (),\n                 }\n             }\n         }\n@@ -303,7 +309,7 @@ fn check_associated_item(\n                     fcx,\n                     item.ident.span,\n                     sig,\n-                    hir_sig,\n+                    hir_sig.decl,\n                     item.def_id,\n                     &mut implied_bounds,\n                 );\n@@ -564,22 +570,24 @@ fn check_associated_type_defaults(fcx: &FnCtxt<'_, '_>, trait_def_id: DefId) {\n     }\n }\n \n-fn check_item_fn(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n-    for_item(tcx, item).with_fcx(|fcx, tcx| {\n-        let def_id = fcx.tcx.hir().local_def_id(item.hir_id);\n+fn check_item_fn(\n+    tcx: TyCtxt<'_>,\n+    item_id: hir::HirId,\n+    ident: Ident,\n+    span: Span,\n+    decl: &hir::FnDecl<'_>,\n+) {\n+    for_id(tcx, item_id, span).with_fcx(|fcx, tcx| {\n+        let def_id = fcx.tcx.hir().local_def_id(item_id);\n         let sig = fcx.tcx.fn_sig(def_id);\n-        let sig = fcx.normalize_associated_types_in(item.span, &sig);\n+        let sig = fcx.normalize_associated_types_in(span, &sig);\n         let mut implied_bounds = vec![];\n-        let hir_sig = match &item.kind {\n-            ItemKind::Fn(sig, ..) => sig,\n-            _ => bug!(\"expected `ItemKind::Fn`, found `{:?}`\", item.kind),\n-        };\n         check_fn_or_method(\n             tcx,\n             fcx,\n-            item.ident.span,\n+            ident.span,\n             sig,\n-            hir_sig,\n+            decl,\n             def_id.to_def_id(),\n             &mut implied_bounds,\n         );\n@@ -835,28 +843,28 @@ fn check_fn_or_method<'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n     span: Span,\n     sig: ty::PolyFnSig<'tcx>,\n-    hir_sig: &hir::FnSig<'_>,\n+    hir_decl: &hir::FnDecl<'_>,\n     def_id: DefId,\n     implied_bounds: &mut Vec<Ty<'tcx>>,\n ) {\n     let sig = fcx.normalize_associated_types_in(span, &sig);\n     let sig = fcx.tcx.liberate_late_bound_regions(def_id, &sig);\n \n-    for (&input_ty, span) in sig.inputs().iter().zip(hir_sig.decl.inputs.iter().map(|t| t.span)) {\n+    for (&input_ty, span) in sig.inputs().iter().zip(hir_decl.inputs.iter().map(|t| t.span)) {\n         fcx.register_wf_obligation(input_ty.into(), span, ObligationCauseCode::MiscObligation);\n     }\n     implied_bounds.extend(sig.inputs());\n \n     fcx.register_wf_obligation(\n         sig.output().into(),\n-        hir_sig.decl.output.span(),\n+        hir_decl.output.span(),\n         ObligationCauseCode::ReturnType,\n     );\n \n     // FIXME(#25759) return types should not be implied bounds\n     implied_bounds.push(sig.output());\n \n-    check_where_clauses(tcx, fcx, span, def_id, Some((sig.output(), hir_sig.decl.output.span())));\n+    check_where_clauses(tcx, fcx, span, def_id, Some((sig.output(), hir_decl.output.span())));\n }\n \n /// Checks \"defining uses\" of opaque `impl Trait` types to ensure that they meet the restrictions"}, {"sha": "c3b54f146142649591cad2bffb5e4ad4747f3004", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -1927,7 +1927,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n                         let re_root_empty = tcx.lifetimes.re_root_empty;\n                         let predicate = ty::OutlivesPredicate(ty, re_root_empty);\n                         predicates.push((\n-                            ty::PredicateKind::TypeOutlives(ty::Binder::dummy(predicate))\n+                            ty::PredicateKind::TypeOutlives(ty::Binder::bind(predicate))\n                                 .to_predicate(tcx),\n                             span,\n                         ));"}, {"sha": "850a4b3cbc216f38dce50447e486f0e05b80c3e6", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -1511,6 +1511,11 @@ h4 > .important-traits {\n \t#main > .line-numbers {\n \t\tmargin-top: 0;\n \t}\n+\n+\t.important-traits .important-traits-tooltiptext {\n+\t\tleft: 0;\n+\t\ttop: 100%;\n+\t}\n }\n \n @media print {"}, {"sha": "96ba5c46a3cded556bf73b004fd4425155bd245e", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -237,16 +237,6 @@ a {\n \n #crate-search+.search-input:focus {\n \tbox-shadow: 0 0 0 1px #148099,0 0 0 2px transparent;\n-\tcolor: #ffffff;\n-\tbackground-color: #141920;\n-\tbox-shadow: none;\n-\ttransition: box-shadow 150ms ease-in-out;\n-\tborder-radius: 4px;\n-\tmargin-left: 8px;\n-}\n-\n-#crate-search+.search-input:focus {\n-\tbox-shadow: 0px 6px 20px 0px black;\n }\n \n .search-focus:disabled {\n@@ -318,12 +308,12 @@ a.test-arrow {\n \tfont-size: 100%;\n \tcolor: #788797;\n \tborder-radius: 4px;\n-\tbackground-color: rgba(255, 255, 255, 0);\n+\tbackground-color: rgba(57, 175, 215, 0.09);\n }\n \n a.test-arrow:hover {\n-\tbackground-color: rgba(242, 151, 24, 0.05);\n-\tcolor: #ffb44c;\n+\tbackground-color: rgba(57, 175, 215, 0.368);\n+\tcolor: #c5c5c5;\n }\n \n .toggle-label {"}, {"sha": "02de3fff29f87131bed42d6449157de5fd7803d4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -224,10 +224,7 @@\n     all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n     feature(slice_index_methods, coerce_unsized, sgx_platform, ptr_wrapping_offset_from)\n )]\n-#![cfg_attr(\n-    all(test, target_vendor = \"fortanix\", target_env = \"sgx\"),\n-    feature(fixed_size_array, maybe_uninit_extra)\n-)]\n+#![cfg_attr(all(test, target_vendor = \"fortanix\", target_env = \"sgx\"), feature(fixed_size_array))]\n // std is implemented with unstable features, many of which are internal\n // compiler details that will never be stable\n // NB: the following list is sorted to minimize merge conflicts."}, {"sha": "bc09ba2ab553bbec5fb1cfbef12a853c9a22344a", "filename": "src/test/ui/const-generics/const-argument-non-static-lifetime.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+#![allow(dead_code)]\n+\n+fn test<const N: usize>() {}\n+\n+fn wow<'a>() -> &'a () {\n+    test::<{\n+        let _: &'a ();\n+        3\n+    }>();\n+    &()\n+}\n+\n+fn main() {}"}, {"sha": "53a7550090d44e7b8fcc147ec31c226203e1374b", "filename": "src/test/ui/const-generics/const-argument-non-static-lifetime.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.stderr?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/const-argument-non-static-lifetime.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "ba3592719408c5bc997e51a4076312a5f7766cd1", "filename": "src/test/ui/error-codes/E0771.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Ferror-codes%2FE0771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Ferror-codes%2FE0771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0771.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -0,0 +1,8 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+fn function_with_str<'a, const STRING: &'a str>() {} //~ ERROR E0771\n+\n+fn main() {\n+    function_with_str::<\"Hello, world!\">()\n+}"}, {"sha": "60220be6b57ba55e1667c790aa3dfd05b723c0f5", "filename": "src/test/ui/error-codes/E0771.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/E0771.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error[E0771]: use of non-static lifetime `'a` in const generic\n+  --> $DIR/E0771.rs:4:41\n+   |\n+LL | fn function_with_str<'a, const STRING: &'a str>() {}\n+   |                                         ^^\n+   |\n+   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0771`."}, {"sha": "75632d11c1df0d65d00272b69db73c9d63442a20", "filename": "src/test/ui/issues/issue-74539.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Fissues%2Fissue-74539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Fissues%2Fissue-74539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74539.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -0,0 +1,12 @@\n+enum E {\n+    A(u8, u8),\n+}\n+\n+fn main() {\n+    let e = E::A(2, 3);\n+    match e {\n+        E::A(x @ ..) => {  //~ ERROR `x @` is not allowed in a tuple\n+            x //~ ERROR cannot find value `x` in this scope\n+        }\n+    };\n+}"}, {"sha": "94526dcd7cb3971223bcfa3bd263b9fb1d09bb59", "filename": "src/test/ui/issues/issue-74539.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Fissues%2Fissue-74539.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Fissues%2Fissue-74539.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74539.stderr?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -0,0 +1,21 @@\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-74539.rs:9:13\n+   |\n+LL |             x\n+   |             ^ help: a local variable with a similar name exists: `e`\n+\n+error: `x @` is not allowed in a tuple struct\n+  --> $DIR/issue-74539.rs:8:14\n+   |\n+LL |         E::A(x @ ..) => {\n+   |              ^^^^^^ this is only allowed in slice patterns\n+   |\n+   = help: remove this and bind each tuple field independently\n+help: if you don't need to use the contents of x, discard the tuple's remaining fields\n+   |\n+LL |         E::A(..) => {\n+   |              ^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "f485766bcd34e32d049ff3dd36ee7273bec8fa7d", "filename": "src/test/ui/lint/lint-ctypes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -7,6 +7,7 @@ extern crate libc;\n \n use std::marker::PhantomData;\n \n+trait Bar { }\n trait Mirror { type It: ?Sized; }\n impl<T: ?Sized> Mirror for T { type It = Self; }\n #[repr(C)]\n@@ -53,7 +54,7 @@ extern {\n     pub fn char_type(p: char); //~ ERROR uses type `char`\n     pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n     pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n-    pub fn trait_type(p: &dyn Clone); //~ ERROR uses type `dyn std::clone::Clone`\n+    pub fn trait_type(p: &dyn Bar); //~ ERROR uses type `dyn Bar`\n     pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n     pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n     pub fn zero_size(p: ZeroSize); //~ ERROR uses type `ZeroSize`"}, {"sha": "a54226a7fc4a2c7e9ebd557becc123166541d797", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -1,5 +1,5 @@\n error: `extern` block uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:46:28\n+  --> $DIR/lint-ctypes.rs:47:28\n    |\n LL |     pub fn ptr_type1(size: *const Foo);\n    |                            ^^^^^^^^^^ not FFI-safe\n@@ -12,27 +12,27 @@ LL | #![deny(improper_ctypes)]\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n note: the type is defined here\n-  --> $DIR/lint-ctypes.rs:24:1\n+  --> $DIR/lint-ctypes.rs:25:1\n    |\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:47:28\n+  --> $DIR/lint-ctypes.rs:48:28\n    |\n LL |     pub fn ptr_type2(size: *const Foo);\n    |                            ^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n note: the type is defined here\n-  --> $DIR/lint-ctypes.rs:24:1\n+  --> $DIR/lint-ctypes.rs:25:1\n    |\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `[u32]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:48:26\n+  --> $DIR/lint-ctypes.rs:49:26\n    |\n LL |     pub fn slice_type(p: &[u32]);\n    |                          ^^^^^^ not FFI-safe\n@@ -41,7 +41,7 @@ LL |     pub fn slice_type(p: &[u32]);\n    = note: slices have no C equivalent\n \n error: `extern` block uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:49:24\n+  --> $DIR/lint-ctypes.rs:50:24\n    |\n LL |     pub fn str_type(p: &str);\n    |                        ^^^^ not FFI-safe\n@@ -50,7 +50,7 @@ LL |     pub fn str_type(p: &str);\n    = note: string slices have no C equivalent\n \n error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:50:24\n+  --> $DIR/lint-ctypes.rs:51:24\n    |\n LL |     pub fn box_type(p: Box<u32>);\n    |                        ^^^^^^^^ not FFI-safe\n@@ -59,7 +59,7 @@ LL |     pub fn box_type(p: Box<u32>);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `std::option::Option<std::boxed::Box<u32>>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:51:28\n+  --> $DIR/lint-ctypes.rs:52:28\n    |\n LL |     pub fn opt_box_type(p: Option<Box<u32>>);\n    |                            ^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -68,7 +68,7 @@ LL |     pub fn opt_box_type(p: Option<Box<u32>>);\n    = note: enum has no representation hint\n \n error: `extern` block uses type `char`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:53:25\n+  --> $DIR/lint-ctypes.rs:54:25\n    |\n LL |     pub fn char_type(p: char);\n    |                         ^^^^ not FFI-safe\n@@ -77,31 +77,31 @@ LL |     pub fn char_type(p: char);\n    = note: the `char` type has no C equivalent\n \n error: `extern` block uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:54:25\n+  --> $DIR/lint-ctypes.rs:55:25\n    |\n LL |     pub fn i128_type(p: i128);\n    |                         ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:55:25\n+  --> $DIR/lint-ctypes.rs:56:25\n    |\n LL |     pub fn u128_type(p: u128);\n    |                         ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n-error: `extern` block uses type `dyn std::clone::Clone`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:56:26\n+error: `extern` block uses type `dyn Bar`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:57:26\n    |\n-LL |     pub fn trait_type(p: &dyn Clone);\n-   |                          ^^^^^^^^^^ not FFI-safe\n+LL |     pub fn trait_type(p: &dyn Bar);\n+   |                          ^^^^^^^^ not FFI-safe\n    |\n    = note: trait objects have no C equivalent\n \n error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:57:26\n+  --> $DIR/lint-ctypes.rs:58:26\n    |\n LL |     pub fn tuple_type(p: (i32, i32));\n    |                          ^^^^^^^^^^ not FFI-safe\n@@ -110,7 +110,7 @@ LL |     pub fn tuple_type(p: (i32, i32));\n    = note: tuples have unspecified layout\n \n error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:58:27\n+  --> $DIR/lint-ctypes.rs:59:27\n    |\n LL |     pub fn tuple_type2(p: I32Pair);\n    |                           ^^^^^^^ not FFI-safe\n@@ -119,42 +119,42 @@ LL |     pub fn tuple_type2(p: I32Pair);\n    = note: tuples have unspecified layout\n \n error: `extern` block uses type `ZeroSize`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:59:25\n+  --> $DIR/lint-ctypes.rs:60:25\n    |\n LL |     pub fn zero_size(p: ZeroSize);\n    |                         ^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a member to this struct\n    = note: this struct has no fields\n note: the type is defined here\n-  --> $DIR/lint-ctypes.rs:20:1\n+  --> $DIR/lint-ctypes.rs:21:1\n    |\n LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:60:33\n+  --> $DIR/lint-ctypes.rs:61:33\n    |\n LL |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData);\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n note: the type is defined here\n-  --> $DIR/lint-ctypes.rs:43:1\n+  --> $DIR/lint-ctypes.rs:44:1\n    |\n LL | pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:63:12\n+  --> $DIR/lint-ctypes.rs:64:12\n    |\n LL |         -> ::std::marker::PhantomData<bool>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` block uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:64:23\n+  --> $DIR/lint-ctypes.rs:65:23\n    |\n LL |     pub fn fn_type(p: RustFn);\n    |                       ^^^^^^ not FFI-safe\n@@ -163,7 +163,7 @@ LL |     pub fn fn_type(p: RustFn);\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` block uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:65:24\n+  --> $DIR/lint-ctypes.rs:66:24\n    |\n LL |     pub fn fn_type2(p: fn());\n    |                        ^^^^ not FFI-safe\n@@ -172,7 +172,7 @@ LL |     pub fn fn_type2(p: fn());\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:66:28\n+  --> $DIR/lint-ctypes.rs:67:28\n    |\n LL |     pub fn fn_contained(p: RustBadRet);\n    |                            ^^^^^^^^^^ not FFI-safe\n@@ -181,15 +181,15 @@ LL |     pub fn fn_contained(p: RustBadRet);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:67:32\n+  --> $DIR/lint-ctypes.rs:68:32\n    |\n LL |     pub fn transparent_i128(p: TransparentI128);\n    |                                ^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:68:31\n+  --> $DIR/lint-ctypes.rs:69:31\n    |\n LL |     pub fn transparent_str(p: TransparentStr);\n    |                               ^^^^^^^^^^^^^^ not FFI-safe\n@@ -198,7 +198,7 @@ LL |     pub fn transparent_str(p: TransparentStr);\n    = note: string slices have no C equivalent\n \n error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:69:30\n+  --> $DIR/lint-ctypes.rs:70:30\n    |\n LL |     pub fn transparent_fn(p: TransparentBadFn);\n    |                              ^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -207,7 +207,7 @@ LL |     pub fn transparent_fn(p: TransparentBadFn);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `[u8; 8]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:70:27\n+  --> $DIR/lint-ctypes.rs:71:27\n    |\n LL |     pub fn raw_array(arr: [u8; 8]);\n    |                           ^^^^^^^ not FFI-safe\n@@ -216,15 +216,15 @@ LL |     pub fn raw_array(arr: [u8; 8]);\n    = note: passing raw arrays by value is not FFI-safe\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:72:34\n+  --> $DIR/lint-ctypes.rs:73:34\n    |\n LL |     pub static static_u128_type: u128;\n    |                                  ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:73:40\n+  --> $DIR/lint-ctypes.rs:74:40\n    |\n LL |     pub static static_u128_array_type: [u128; 16];\n    |                                        ^^^^^^^^^^ not FFI-safe"}, {"sha": "c95f1dfdca53a8ab34f6691c1508b0b0251edb4b", "filename": "src/test/ui/traits/issue-72410.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Ftraits%2Fissue-72410.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Ftraits%2Fissue-72410.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-72410.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -0,0 +1,18 @@\n+// Regression test for #72410, this should be used with debug assertion enabled.\n+\n+// should be fine\n+pub trait Foo {\n+    fn map()\n+    where\n+        Self: Sized,\n+        for<'a> &'a mut [u8]: ;\n+}\n+\n+// should fail\n+pub trait Bar {\n+    fn map()\n+    where for<'a> &'a mut [dyn Bar]: ;\n+    //~^ ERROR: the trait `Bar` cannot be made into an object\n+}\n+\n+fn main() {}"}, {"sha": "1db2320841ff7791aaa129656fa7d78782be4e15", "filename": "src/test/ui/traits/issue-72410.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Ftraits%2Fissue-72410.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Ftraits%2Fissue-72410.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-72410.stderr?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -0,0 +1,18 @@\n+error[E0038]: the trait `Bar` cannot be made into an object\n+  --> $DIR/issue-72410.rs:14:19\n+   |\n+LL | pub trait Bar {\n+   |           --- this trait cannot be made into an object...\n+LL |     fn map()\n+   |        --- ...because associated function `map` has no `self` parameter\n+LL |     where for<'a> &'a mut [dyn Bar]: ;\n+   |                   ^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+help: consider turning `map` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     where for<'a> &'a mut [dyn Bar]:, Self: Sized ;\n+   |                                     ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "b9d956c0568694574bd096482027c0ef11283ad4", "filename": "src/test/ui/wf/wf-foreign-fn-decl-ret.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.rs?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -0,0 +1,18 @@\n+pub trait Unsatisfied {}\n+\n+#[repr(transparent)]\n+pub struct Bar<T: Unsatisfied>(T);\n+\n+pub trait Foo {\n+    type Assoc;\n+}\n+\n+extern \"C\" {\n+    pub fn lint_me() -> <() as Foo>::Assoc;\n+    //~^ ERROR: the trait bound `(): Foo` is not satisfied [E0277]\n+\n+    pub fn lint_me_aswell() -> Bar<u32>;\n+    //~^ ERROR: the trait bound `u32: Unsatisfied` is not satisfied [E0277]\n+}\n+\n+fn main() {}"}, {"sha": "9081b7929d935676221fddc052407f4c487a4592", "filename": "src/test/ui/wf/wf-foreign-fn-decl-ret.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/734233d29771869f824d8ddbaddabb90b3b68e03/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr?ref=734233d29771869f824d8ddbaddabb90b3b68e03", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `(): Foo` is not satisfied\n+  --> $DIR/wf-foreign-fn-decl-ret.rs:11:5\n+   |\n+LL |     pub fn lint_me() -> <() as Foo>::Assoc;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n+\n+error[E0277]: the trait bound `u32: Unsatisfied` is not satisfied\n+  --> $DIR/wf-foreign-fn-decl-ret.rs:14:32\n+   |\n+LL | pub struct Bar<T: Unsatisfied>(T);\n+   |                   ----------- required by this bound in `Bar`\n+...\n+LL |     pub fn lint_me_aswell() -> Bar<u32>;\n+   |                                ^^^^^^^^ the trait `Unsatisfied` is not implemented for `u32`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}