{"sha": "11c2d43485e92a00d86b3a5bc1655165b6b8371b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYzJkNDM0ODVlOTJhMDBkODZiM2E1YmMxNjU1MTY1YjZiODM3MWI=", "commit": {"author": {"name": "Guanqun Lu", "email": "guanqun.lu@gmail.com", "date": "2019-10-02T04:09:30Z"}, "committer": {"name": "Guanqun Lu", "email": "guanqun.lu@gmail.com", "date": "2019-10-02T04:09:30Z"}, "message": "typo fix in the code", "tree": {"sha": "311d99a8536726fb04d5f0df848f93b5e9ac0548", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/311d99a8536726fb04d5f0df848f93b5e9ac0548"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11c2d43485e92a00d86b3a5bc1655165b6b8371b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11c2d43485e92a00d86b3a5bc1655165b6b8371b", "html_url": "https://github.com/rust-lang/rust/commit/11c2d43485e92a00d86b3a5bc1655165b6b8371b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11c2d43485e92a00d86b3a5bc1655165b6b8371b/comments", "author": null, "committer": null, "parents": [{"sha": "51482d0b75de535243032265269562ffa7538c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/51482d0b75de535243032265269562ffa7538c46", "html_url": "https://github.com/rust-lang/rust/commit/51482d0b75de535243032265269562ffa7538c46"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "ebeb26be23df64d38724ce5955496435bbb7622c", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11c2d43485e92a00d86b3a5bc1655165b6b8371b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c2d43485e92a00d86b3a5bc1655165b6b8371b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=11c2d43485e92a00d86b3a5bc1655165b6b8371b", "patch": "@@ -1778,7 +1778,7 @@ impl<'tcx> TyS<'tcx> {\n \n     /// Returns `true` if this type is a `str`.\n     #[inline]\n-    pub fn is_str(&self) -> bool { self.sty == Str }\n+    pub fn is_str(&self) -> bool { self.kind == Str }\n \n     #[inline]\n     pub fn is_param(&self, index: u32) -> bool {"}]}