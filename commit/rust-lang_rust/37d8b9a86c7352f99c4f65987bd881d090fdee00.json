{"sha": "37d8b9a86c7352f99c4f65987bd881d090fdee00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZDhiOWE4NmM3MzUyZjk5YzRmNjU5ODdiZDg4MWQwOTBmZGVlMDA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-25T11:12:07Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:09Z"}, "message": "Don't borrow the interpret_interner for anything but a direct function call", "tree": {"sha": "a48a85c0d2a545b742f347726fc85b70d4cc63b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a48a85c0d2a545b742f347726fc85b70d4cc63b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37d8b9a86c7352f99c4f65987bd881d090fdee00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53EACgkQpp+NIls6\n19nncQ//T+7aNIt96xetWxzBVGQb1MHOBhcSg97cR+SaqgDgRIjrnD7PdeBPx2lb\nEUGNwScfBWFGDAmoX+jVF418CBQpPA+Dij+HdanUau8LLSPs4U1dQCKikgm6L7RR\ngmXjfdUa4h3aJy+uHxLF+e2w0J1xfEBWieT0BzeC4CAslXsRJbr/phmrMYwRDXG8\nvRxuX3WHlIE9k38gxfRw+HcxxPvBfUGbWJPPj9GD/rNI5bEna/rTMKwgFVp5S9aU\nJcZ6z8oEPN5V7/g37xSRn59e/HPUCggH9p6GzbtpOZM6HU1OpM7hrSjMTO80n0/P\nN2xEnNPY+UPTmeDbrVWgZDu6yrLbzvKNeqBjDAeqljwDpCptbUbZ0HKbDeXbW9Ql\nMYNyQkqs8nTn1PXmag9UxxSeTNursfPWijclSGCrF8Zg8zyOuBKTQf6qwYKuoW+H\n3Jzl+5JqHS6ayC+8xECLXFFHZPbPNx7Mz8Q6TzUDH4RD5nUCfi0Mbrpy3WgScIfz\n6GfrOTY+mvprKzFV+BlEj3JFzbYeXtsm2hPnCVLYYkFMV6svy3V6AFUpbXFieVk4\nMK3L9qThUfOlWX1PESZdtRpU5ZHaJlks0h87z7E1Ro8h+WO+jy2yR+cP5l2QvFR+\nNmN1Tal5wV2Pe25pvXaZVaPq7axBW7iKHhEdTO2XV00ta60S8Ok=\n=YpDb\n-----END PGP SIGNATURE-----", "payload": "tree a48a85c0d2a545b742f347726fc85b70d4cc63b4\nparent 1d438f87e7f2a7f61195a9b614f11449d06aaa85\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516878727 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494449 +0100\n\nDon't borrow the interpret_interner for anything but a direct function call\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37d8b9a86c7352f99c4f65987bd881d090fdee00", "html_url": "https://github.com/rust-lang/rust/commit/37d8b9a86c7352f99c4f65987bd881d090fdee00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37d8b9a86c7352f99c4f65987bd881d090fdee00/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d438f87e7f2a7f61195a9b614f11449d06aaa85", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d438f87e7f2a7f61195a9b614f11449d06aaa85", "html_url": "https://github.com/rust-lang/rust/commit/1d438f87e7f2a7f61195a9b614f11449d06aaa85"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "84e566e57e6266f2010d7983bb200760326f6887", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37d8b9a86c7352f99c4f65987bd881d090fdee00/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d8b9a86c7352f99c4f65987bd881d090fdee00/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=37d8b9a86c7352f99c4f65987bd881d090fdee00", "patch": "@@ -796,15 +796,14 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<interpret::AllocId> for CacheEncoder<\n         // cache the allocation shorthand now, because the allocation itself might recursively\n         // point to itself.\n         self.interpret_alloc_shorthands.insert(*alloc_id, start);\n-        let interpret_interner = self.tcx.interpret_interner.borrow();\n-        if let Some(alloc) = interpret_interner.get_alloc(*alloc_id) {\n+        if let Some(alloc) = self.tcx.interpret_interner.borrow().get_alloc(*alloc_id) {\n             trace!(\"encoding {:?} with {:#?}\", alloc_id, alloc);\n             usize::max_value().encode(self)?;\n             alloc.encode(self)?;\n-            interpret_interner\n+            self.tcx.interpret_interner.borrow()\n                 .get_corresponding_static_def_id(*alloc_id)\n                 .encode(self)?;\n-        } else if let Some(fn_instance) = interpret_interner.get_fn(*alloc_id) {\n+        } else if let Some(fn_instance) = self.tcx.interpret_interner.borrow().get_fn(*alloc_id) {\n             trace!(\"encoding {:?} with {:#?}\", alloc_id, fn_instance);\n             (usize::max_value() - 1).encode(self)?;\n             fn_instance.encode(self)?;"}, {"sha": "c74063c66bdfa9789de587a2dc0f0bce75cc2861", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37d8b9a86c7352f99c4f65987bd881d090fdee00/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d8b9a86c7352f99c4f65987bd881d090fdee00/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=37d8b9a86c7352f99c4f65987bd881d090fdee00", "patch": "@@ -205,15 +205,14 @@ impl<'a, 'tcx> SpecializedEncoder<interpret::AllocId> for EncodeContext<'a, 'tcx\n         // cache the allocation shorthand now, because the allocation itself might recursively\n         // point to itself.\n         self.interpret_alloc_shorthands.insert(*alloc_id, start);\n-        let interpret_interner = self.tcx.interpret_interner.borrow();\n-        if let Some(alloc) = interpret_interner.get_alloc(*alloc_id) {\n+        if let Some(alloc) = self.tcx.interpret_interner.borrow().get_alloc(*alloc_id) {\n             trace!(\"encoding {:?} with {:#?}\", alloc_id, alloc);\n             usize::max_value().encode(self)?;\n             alloc.encode(self)?;\n-            interpret_interner\n+            self.tcx.interpret_interner.borrow()\n                 .get_corresponding_static_def_id(*alloc_id)\n                 .encode(self)?;\n-        } else if let Some(fn_instance) = interpret_interner.get_fn(*alloc_id) {\n+        } else if let Some(fn_instance) = self.tcx.interpret_interner.borrow().get_fn(*alloc_id) {\n             trace!(\"encoding {:?} with {:#?}\", alloc_id, fn_instance);\n             (usize::max_value() - 1).encode(self)?;\n             fn_instance.encode(self)?;\n@@ -1155,7 +1154,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 _ => None,\n             },\n             mir: match item.node {\n-                hir::ItemStatic(..) if self.tcx.sess.opts.debugging_opts.always_encode_mir => {\n+                hir::ItemStatic(..) => {\n                     self.encode_optimized_mir(def_id)\n                 }\n                 hir::ItemConst(..) => self.encode_optimized_mir(def_id),"}, {"sha": "a246898873c5c3c6358073151946d6d683f32709", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37d8b9a86c7352f99c4f65987bd881d090fdee00/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d8b9a86c7352f99c4f65987bd881d090fdee00/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=37d8b9a86c7352f99c4f65987bd881d090fdee00", "patch": "@@ -375,11 +375,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n                     None => match self.uninitialized_statics.get(&id) {\n                         Some(a) => (a, \" (static in the process of initialization)\".to_owned()),\n                         None => {\n-                            let int = self.tcx.interpret_interner.borrow();\n                             // static alloc?\n-                            match int.get_alloc(id) {\n+                            match self.tcx.interpret_interner.borrow().get_alloc(id) {\n                                 Some(a) => (a, \"(immutable)\".to_owned()),\n-                                None => if let Some(func) = int.get_fn(id) {\n+                                None => if let Some(func) = self.tcx.interpret_interner.borrow().get_fn(id) {\n                                     trace!(\"{} {}\", msg, func);\n                                     continue;\n                                 } else {"}, {"sha": "35c561e02e07e5cbdf7557d1cb4062943ad14f3e", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37d8b9a86c7352f99c4f65987bd881d090fdee00/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d8b9a86c7352f99c4f65987bd881d090fdee00/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=37d8b9a86c7352f99c4f65987bd881d090fdee00", "patch": "@@ -1117,13 +1117,12 @@ fn collect_miri<'a, 'tcx>(\n     alloc_id: AllocId,\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n-    let interpret_interner = tcx.interpret_interner.borrow();\n-    if let Some(alloc) = interpret_interner.get_alloc(alloc_id) {\n+    if let Some(alloc) = tcx.interpret_interner.borrow().get_alloc(alloc_id) {\n         trace!(\"collecting {:?} with {:#?}\", alloc_id, alloc);\n         for &inner in alloc.relocations.values() {\n             collect_miri(tcx, inner, output);\n         }\n-    } else if let Some(fn_instance) = interpret_interner.get_fn(alloc_id) {\n+    } else if let Some(fn_instance) = tcx.interpret_interner.borrow().get_fn(alloc_id) {\n         if should_monomorphize_locally(tcx, &fn_instance) {\n             trace!(\"collecting {:?} with {:#?}\", alloc_id, fn_instance);\n             output.push(create_fn_mono_item(fn_instance));"}, {"sha": "1ca9bd81893aab83aea97ac5f16f3cdc6cab1e22", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37d8b9a86c7352f99c4f65987bd881d090fdee00/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d8b9a86c7352f99c4f65987bd881d090fdee00/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=37d8b9a86c7352f99c4f65987bd881d090fdee00", "patch": "@@ -151,15 +151,19 @@ pub fn primval_to_llvm(cx: &CodegenCx,\n             }\n         },\n         PrimVal::Ptr(ptr) => {\n-            let interpret_interner = cx.tcx.interpret_interner.borrow();\n-            if let Some(fn_instance) = interpret_interner.get_fn(ptr.alloc_id) {\n+            if let Some(fn_instance) = cx.tcx.interpret_interner.borrow().get_fn(ptr.alloc_id) {\n                 callee::get_fn(cx, fn_instance)\n             } else {\n-                let static_ = interpret_interner.get_corresponding_static_def_id(ptr.alloc_id);\n+                let static_ = cx\n+                    .tcx\n+                    .interpret_interner\n+                    .borrow()\n+                    .get_corresponding_static_def_id(ptr.alloc_id);\n                 let base_addr = if let Some(def_id) = static_ {\n                     assert!(cx.tcx.is_static(def_id).is_some());\n                     consts::get_static(cx, def_id)\n-                } else if let Some(alloc) = interpret_interner.get_alloc(ptr.alloc_id) {\n+                } else if let Some(alloc) = cx.tcx.interpret_interner.borrow()\n+                                              .get_alloc(ptr.alloc_id) {\n                     let init = global_initializer(cx, alloc);\n                     if alloc.mutable {\n                         consts::addr_of_mut(cx, init, alloc.align, \"byte_str\")"}]}