{"sha": "542f441d445026d0996eebee9ddddee98f5dc3e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MmY0NDFkNDQ1MDI2ZDA5OTZlZWJlZTlkZGRkZWU5OGY1ZGMzZTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-02T17:57:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-02T17:57:31Z"}, "message": "Rollup merge of #83629 - the8472:fix-inplace-panic-on-drop, r=m-ou-se\n\nFix double-drop in `Vec::from_iter(vec.into_iter())` specialization when items drop during panic\n\nThis fixes the double-drop but it leaves a behavioral difference compared to the default implementation intact: In the default implementation the source and the destination vec are separate objects, so they get dropped separately. Here they share an allocation and the latter only exists as a pointer into the former. So if dropping the former panics then this fix will leak more items than the default implementation would. Is this acceptable or should the specialization also mimic the default implementation's drops-during-panic behavior?\n\nFixes #83618\n\n`@rustbot` label T-libs-impl", "tree": {"sha": "0873cca9285235dd23dcb3d3e48132bed9a18eb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0873cca9285235dd23dcb3d3e48132bed9a18eb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/542f441d445026d0996eebee9ddddee98f5dc3e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZ1sLCRBK7hj4Ov3rIwAAdHIIAEBg8QqQHETQERnpsWjnDJ9Q\nm7oORVCUFguvSEWbJOq5WJf85GfLnCxPE0ZwNQbGYEJbjL3jk8SCYNfsYrR19Y56\n2PlN1J6cxDkdg546BRYr5t5yPwIMq4d7e++tbINmRtcfmjSRDNRRrYrm4H5KmZcz\nm1dcT7mSVVjD1PPWf50IrBejJiaMsSU1GWdklSIDjcZK5qo+ix2nCu4gPRXDiypt\n2KrbgYIgMeJd4DJJIa5B74UbAm4vL8mQuTPffeHuy12yDf+kbx5xpeCUiRkPgpSC\nA+9w9HMVrcvmzXQRZRaKzAx2UNqKMZi5c7qVF2hMilNvZAt8oBXSa8pTNt8POx4=\n=70Hd\n-----END PGP SIGNATURE-----\n", "payload": "tree 0873cca9285235dd23dcb3d3e48132bed9a18eb4\nparent 31f532092c4172ba2f3764d3ef63a790ea1387e3\nparent 421f5d282a51e130d3ca7c4524d8ad6753437da9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617386251 +0200\ncommitter GitHub <noreply@github.com> 1617386251 +0200\n\nRollup merge of #83629 - the8472:fix-inplace-panic-on-drop, r=m-ou-se\n\nFix double-drop in `Vec::from_iter(vec.into_iter())` specialization when items drop during panic\n\nThis fixes the double-drop but it leaves a behavioral difference compared to the default implementation intact: In the default implementation the source and the destination vec are separate objects, so they get dropped separately. Here they share an allocation and the latter only exists as a pointer into the former. So if dropping the former panics then this fix will leak more items than the default implementation would. Is this acceptable or should the specialization also mimic the default implementation's drops-during-panic behavior?\n\nFixes #83618\n\n`@rustbot` label T-libs-impl\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/542f441d445026d0996eebee9ddddee98f5dc3e5", "html_url": "https://github.com/rust-lang/rust/commit/542f441d445026d0996eebee9ddddee98f5dc3e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/542f441d445026d0996eebee9ddddee98f5dc3e5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f532092c4172ba2f3764d3ef63a790ea1387e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f532092c4172ba2f3764d3ef63a790ea1387e3", "html_url": "https://github.com/rust-lang/rust/commit/31f532092c4172ba2f3764d3ef63a790ea1387e3"}, {"sha": "421f5d282a51e130d3ca7c4524d8ad6753437da9", "url": "https://api.github.com/repos/rust-lang/rust/commits/421f5d282a51e130d3ca7c4524d8ad6753437da9", "html_url": "https://github.com/rust-lang/rust/commit/421f5d282a51e130d3ca7c4524d8ad6753437da9"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "324e894bafd23a0d698573a507dd57a2bcf6e13e", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/542f441d445026d0996eebee9ddddee98f5dc3e5/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542f441d445026d0996eebee9ddddee98f5dc3e5/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=542f441d445026d0996eebee9ddddee98f5dc3e5", "patch": "@@ -85,20 +85,29 @@ impl<T, A: Allocator> IntoIter<T, A> {\n         ptr::slice_from_raw_parts_mut(self.ptr as *mut T, self.len())\n     }\n \n-    pub(super) fn drop_remaining(&mut self) {\n-        unsafe {\n-            ptr::drop_in_place(self.as_mut_slice());\n-        }\n-        self.ptr = self.end;\n-    }\n+    /// Drops remaining elements and relinquishes the backing allocation.\n+    ///\n+    /// This is roughly equivalent to the following, but more efficient\n+    ///\n+    /// ```\n+    /// # let mut into_iter = Vec::<u8>::with_capacity(10).into_iter();\n+    /// (&mut into_iter).for_each(core::mem::drop);\n+    /// unsafe { core::ptr::write(&mut into_iter, Vec::new().into_iter()); }\n+    /// ```\n+    pub(super) fn forget_allocation_drop_remaining(&mut self) {\n+        let remaining = self.as_raw_mut_slice();\n \n-    /// Relinquishes the backing allocation, equivalent to\n-    /// `ptr::write(&mut self, Vec::new().into_iter())`\n-    pub(super) fn forget_allocation(&mut self) {\n+        // overwrite the individual fields instead of creating a new\n+        // struct and then overwriting &mut self.\n+        // this creates less assembly\n         self.cap = 0;\n         self.buf = unsafe { NonNull::new_unchecked(RawVec::NEW.ptr()) };\n         self.ptr = self.buf.as_ptr();\n         self.end = self.buf.as_ptr();\n+\n+        unsafe {\n+            ptr::drop_in_place(remaining);\n+        }\n     }\n }\n "}, {"sha": "e857d284d3ab654d14710d73d08a921f96f6661e", "filename": "library/alloc/src/vec/source_iter_marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/542f441d445026d0996eebee9ddddee98f5dc3e5/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542f441d445026d0996eebee9ddddee98f5dc3e5/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs?ref=542f441d445026d0996eebee9ddddee98f5dc3e5", "patch": "@@ -69,9 +69,9 @@ where\n         }\n \n         // drop any remaining values at the tail of the source\n-        src.drop_remaining();\n         // but prevent drop of the allocation itself once IntoIter goes out of scope\n-        src.forget_allocation();\n+        // if the drop panics then we also leak any elements collected into dst_buf\n+        src.forget_allocation_drop_remaining();\n \n         let vec = unsafe { Vec::from_raw_parts(dst_buf, len, cap) };\n "}, {"sha": "b926c697d58abe739526f809d274ae6fa4be0fc2", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/542f441d445026d0996eebee9ddddee98f5dc3e5/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542f441d445026d0996eebee9ddddee98f5dc3e5/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=542f441d445026d0996eebee9ddddee98f5dc3e5", "patch": "@@ -1027,7 +1027,7 @@ fn test_from_iter_specialization_head_tail_drop() {\n }\n \n #[test]\n-fn test_from_iter_specialization_panic_drop() {\n+fn test_from_iter_specialization_panic_during_iteration_drops() {\n     let drop_count: Vec<_> = (0..=2).map(|_| Rc::new(())).collect();\n     let src: Vec<_> = drop_count.iter().cloned().collect();\n     let iter = src.into_iter();\n@@ -1050,6 +1050,42 @@ fn test_from_iter_specialization_panic_drop() {\n     );\n }\n \n+#[test]\n+fn test_from_iter_specialization_panic_during_drop_leaks() {\n+    static mut DROP_COUNTER: usize = 0;\n+\n+    #[derive(Debug)]\n+    enum Droppable {\n+        DroppedTwice(Box<i32>),\n+        PanicOnDrop,\n+    }\n+\n+    impl Drop for Droppable {\n+        fn drop(&mut self) {\n+            match self {\n+                Droppable::DroppedTwice(_) => {\n+                    unsafe {\n+                        DROP_COUNTER += 1;\n+                    }\n+                    println!(\"Dropping!\")\n+                }\n+                Droppable::PanicOnDrop => {\n+                    if !std::thread::panicking() {\n+                        panic!();\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    let _ = std::panic::catch_unwind(AssertUnwindSafe(|| {\n+        let v = vec![Droppable::DroppedTwice(Box::new(123)), Droppable::PanicOnDrop];\n+        let _ = v.into_iter().take(0).collect::<Vec<_>>();\n+    }));\n+\n+    assert_eq!(unsafe { DROP_COUNTER }, 1);\n+}\n+\n #[test]\n fn test_cow_from() {\n     let borrowed: &[_] = &[\"borrowed\", \"(slice)\"];"}]}