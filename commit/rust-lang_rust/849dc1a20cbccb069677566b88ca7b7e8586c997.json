{"sha": "849dc1a20cbccb069677566b88ca7b7e8586c997", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OWRjMWEyMGNiY2NiMDY5Njc3NTY2Yjg4Y2E3YjdlODU4NmM5OTc=", "commit": {"author": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2021-01-25T20:56:21Z"}, "committer": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2021-01-29T20:46:29Z"}, "message": "Indicate both start and end of pass RSS in time-passes output\n\nPreviously, only the end of pass RSS was indicated. This could easily\nlead one to believe that the change in RSS from one pass to the next was\nattributable to the second pass, when in fact it occurred between the\nend of the first pass and the start of the second.\n\nAlso, improve alignment of columns.", "tree": {"sha": "3c562fab48be476194c3522be3aa6e555eb365f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c562fab48be476194c3522be3aa6e555eb365f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/849dc1a20cbccb069677566b88ca7b7e8586c997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/849dc1a20cbccb069677566b88ca7b7e8586c997", "html_url": "https://github.com/rust-lang/rust/commit/849dc1a20cbccb069677566b88ca7b7e8586c997", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/849dc1a20cbccb069677566b88ca7b7e8586c997/comments", "author": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b122908617436af187252572ed5db96850551380", "url": "https://api.github.com/repos/rust-lang/rust/commits/b122908617436af187252572ed5db96850551380", "html_url": "https://github.com/rust-lang/rust/commit/b122908617436af187252572ed5db96850551380"}], "stats": {"total": 96, "additions": 68, "deletions": 28}, "files": [{"sha": "be369b07fddfe35f3c41bcd4c56dc97c46ef1dce", "filename": "compiler/rustc_codegen_cranelift/src/bin/cg_clif.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/849dc1a20cbccb069677566b88ca7b7e8586c997/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849dc1a20cbccb069677566b88ca7b7e8586c997/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs?ref=849dc1a20cbccb069677566b88ca7b7e8586c997", "patch": "@@ -6,7 +6,7 @@ extern crate rustc_interface;\n extern crate rustc_session;\n extern crate rustc_target;\n \n-use rustc_data_structures::profiling::print_time_passes_entry;\n+use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n use rustc_interface::interface;\n use rustc_session::config::ErrorOutputType;\n use rustc_session::early_error;\n@@ -39,7 +39,8 @@ impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n }\n \n fn main() {\n-    let start = std::time::Instant::now();\n+    let start_time = std::time::Instant::now();\n+    let start_rss = get_resident_set_size();\n     rustc_driver::init_rustc_env_logger();\n     let mut callbacks = CraneliftPassesCallbacks::default();\n     rustc_driver::install_ice_hook();\n@@ -61,7 +62,11 @@ fn main() {\n         })));\n         run_compiler.run()\n     });\n-    // The extra `\\t` is necessary to align this label with the others.\n-    print_time_passes_entry(callbacks.time_passes, \"\\ttotal\", start.elapsed());\n+\n+    if callbacks.time_passes {\n+        let end_rss = get_resident_set_size();\n+        print_time_passes_entry(\"total\", start_time.elapsed(), start_rss, end_rss);\n+    }\n+\n     std::process::exit(exit_code)\n }"}, {"sha": "604760af33db9d41be1c57e5ea4ad4b7e391fd16", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/849dc1a20cbccb069677566b88ca7b7e8586c997/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849dc1a20cbccb069677566b88ca7b7e8586c997/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=849dc1a20cbccb069677566b88ca7b7e8586c997", "patch": "@@ -12,7 +12,7 @@ use crate::{CachedModuleCodegen, CrateInfo, MemFlags, ModuleCodegen, ModuleKind}\n \n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::profiling::print_time_passes_entry;\n+use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n use rustc_data_structures::sync::{par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n@@ -595,6 +595,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     let mut cgu_reuse = Vec::new();\n     let mut pre_compiled_cgus: Option<FxHashMap<usize, _>> = None;\n     let mut total_codegen_time = Duration::new(0, 0);\n+    let start_rss = tcx.sess.time_passes().then(|| get_resident_set_size());\n \n     for (i, cgu) in codegen_units.iter().enumerate() {\n         ongoing_codegen.wait_for_signal_to_codegen_item();\n@@ -664,7 +665,16 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n \n     // Since the main thread is sometimes blocked during codegen, we keep track\n     // -Ztime-passes output manually.\n-    print_time_passes_entry(tcx.sess.time_passes(), \"codegen_to_LLVM_IR\", total_codegen_time);\n+    if tcx.sess.time_passes() {\n+        let end_rss = get_resident_set_size();\n+\n+        print_time_passes_entry(\n+            \"codegen_to_LLVM_IR\",\n+            total_codegen_time,\n+            start_rss.unwrap(),\n+            end_rss,\n+        );\n+    }\n \n     ongoing_codegen.check_for_errors(tcx.sess);\n "}, {"sha": "9a85b9d02c9953893949d1f0419d1acdbb82fa26", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/849dc1a20cbccb069677566b88ca7b7e8586c997/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849dc1a20cbccb069677566b88ca7b7e8586c997/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=849dc1a20cbccb069677566b88ca7b7e8586c997", "patch": "@@ -555,13 +555,16 @@ impl<'a> TimingGuard<'a> {\n \n #[must_use]\n pub struct VerboseTimingGuard<'a> {\n-    start_and_message: Option<(Instant, String)>,\n+    start_and_message: Option<(Instant, Option<usize>, String)>,\n     _guard: TimingGuard<'a>,\n }\n \n impl<'a> VerboseTimingGuard<'a> {\n     pub fn start(message: Option<String>, _guard: TimingGuard<'a>) -> Self {\n-        VerboseTimingGuard { _guard, start_and_message: message.map(|msg| (Instant::now(), msg)) }\n+        VerboseTimingGuard {\n+            _guard,\n+            start_and_message: message.map(|msg| (Instant::now(), get_resident_set_size(), msg)),\n+        }\n     }\n \n     #[inline(always)]\n@@ -573,25 +576,42 @@ impl<'a> VerboseTimingGuard<'a> {\n \n impl Drop for VerboseTimingGuard<'_> {\n     fn drop(&mut self) {\n-        if let Some((start, ref message)) = self.start_and_message {\n-            print_time_passes_entry(true, &message[..], start.elapsed());\n+        if let Some((start_time, start_rss, ref message)) = self.start_and_message {\n+            let end_rss = get_resident_set_size();\n+            print_time_passes_entry(&message[..], start_time.elapsed(), start_rss, end_rss);\n         }\n     }\n }\n \n-pub fn print_time_passes_entry(do_it: bool, what: &str, dur: Duration) {\n-    if !do_it {\n-        return;\n-    }\n-\n-    let mem_string = match get_resident() {\n-        Some(n) => {\n-            let mb = n as f64 / 1_000_000.0;\n-            format!(\"; rss: {}MB\", mb.round() as usize)\n+pub fn print_time_passes_entry(\n+    what: &str,\n+    dur: Duration,\n+    start_rss: Option<usize>,\n+    end_rss: Option<usize>,\n+) {\n+    let rss_to_mb = |rss| (rss as f64 / 1_000_000.0).round() as usize;\n+\n+    let mem_string = match (start_rss, end_rss) {\n+        (Some(start_rss), Some(end_rss)) => {\n+            // It's tempting to add the change in RSS from start to end, but its somewhat confusing\n+            // and misleading when looking at time-passes output. Consider two adjacent entries:\n+            //\n+            // time:  10.000; rss start:  1000MB, end:  1000MB, change:     0MB     pass1\n+            // time:   5.000; rss start:  2000MB, end:  2000MB, change:     0MB     pass2\n+            //\n+            // If you're looking for jumps in RSS based on the change column, you miss the fact\n+            // that a 1GB jump happened between pass1 and pass2 (supposing pass1 and pass2 actually\n+            // occur sequentially and pass1 isn't just nested within pass2). It's easy to imagine\n+            // someone missing this or being confused by the fact that the change is zero.\n+\n+            format!(\"; rss: {:>5}MB -> {:>5}MB\", rss_to_mb(start_rss), rss_to_mb(end_rss))\n         }\n-        None => String::new(),\n+        (Some(start_rss), None) => format!(\"; rss start: {:>5}MB\", rss_to_mb(start_rss)),\n+        (None, Some(end_rss)) => format!(\"; rss end: {:5>}MB\", rss_to_mb(end_rss)),\n+        (None, None) => String::new(),\n     };\n-    println!(\"time: {}{}\\t{}\", duration_to_secs_str(dur), mem_string, what);\n+\n+    println!(\"time: {:>7}{}\\t{}\", duration_to_secs_str(dur), mem_string, what);\n }\n \n // Hack up our own formatting for the duration to make it easier for scripts\n@@ -603,7 +623,7 @@ pub fn duration_to_secs_str(dur: std::time::Duration) -> String {\n // Memory reporting\n cfg_if! {\n     if #[cfg(windows)] {\n-        fn get_resident() -> Option<usize> {\n+        pub fn get_resident_set_size() -> Option<usize> {\n             use std::mem::{self, MaybeUninit};\n             use winapi::shared::minwindef::DWORD;\n             use winapi::um::processthreadsapi::GetCurrentProcess;\n@@ -621,7 +641,7 @@ cfg_if! {\n             }\n         }\n     } else if #[cfg(unix)] {\n-        fn get_resident() -> Option<usize> {\n+        pub fn get_resident_set_size() -> Option<usize> {\n             let field = 1;\n             let contents = fs::read(\"/proc/self/statm\").ok()?;\n             let contents = String::from_utf8(contents).ok()?;\n@@ -630,7 +650,7 @@ cfg_if! {\n             Some(npages * 4096)\n         }\n     } else {\n-        fn get_resident() -> Option<usize> {\n+        pub fn get_resident_set_size() -> Option<usize> {\n             None\n         }\n     }"}, {"sha": "8295e88f75ac70779d3d3c763f0ebecc5a129c19", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/849dc1a20cbccb069677566b88ca7b7e8586c997/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849dc1a20cbccb069677566b88ca7b7e8586c997/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=849dc1a20cbccb069677566b88ca7b7e8586c997", "patch": "@@ -16,7 +16,7 @@ pub extern crate rustc_plugin_impl as plugin;\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::{traits::CodegenBackend, CodegenResults};\n-use rustc_data_structures::profiling::print_time_passes_entry;\n+use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n use rustc_errors::{ErrorReported, PResult};\n@@ -1312,7 +1312,8 @@ pub fn init_env_logger(env: &str) {\n }\n \n pub fn main() -> ! {\n-    let start = Instant::now();\n+    let start_time = Instant::now();\n+    let start_rss = get_resident_set_size();\n     init_rustc_env_logger();\n     let mut callbacks = TimePassesCallbacks::default();\n     install_ice_hook();\n@@ -1330,7 +1331,11 @@ pub fn main() -> ! {\n             .collect::<Vec<_>>();\n         RunCompiler::new(&args, &mut callbacks).run()\n     });\n-    // The extra `\\t` is necessary to align this label with the others.\n-    print_time_passes_entry(callbacks.time_passes, \"\\ttotal\", start.elapsed());\n+\n+    if callbacks.time_passes {\n+        let end_rss = get_resident_set_size();\n+        print_time_passes_entry(\"total\", start_time.elapsed(), start_rss, end_rss);\n+    }\n+\n     process::exit(exit_code)\n }"}]}