{"sha": "4d0dba944c3e103ddd59b7ab3df9ccd437985863", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMGRiYTk0NGMzZTEwM2RkZDU5YjdhYjNkZjljY2Q0Mzc5ODU4NjM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-12T15:01:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-12T15:01:34Z"}, "message": "Some refactorings for codegen_mono_items", "tree": {"sha": "34eb452b5af7ef3bcdb0bd66c9549e88eb5af5fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34eb452b5af7ef3bcdb0bd66c9549e88eb5af5fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d0dba944c3e103ddd59b7ab3df9ccd437985863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d0dba944c3e103ddd59b7ab3df9ccd437985863", "html_url": "https://github.com/rust-lang/rust/commit/4d0dba944c3e103ddd59b7ab3df9ccd437985863", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d0dba944c3e103ddd59b7ab3df9ccd437985863/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94eac08a489181795c5780ad490a1afb3523f149", "url": "https://api.github.com/repos/rust-lang/rust/commits/94eac08a489181795c5780ad490a1afb3523f149", "html_url": "https://github.com/rust-lang/rust/commit/94eac08a489181795c5780ad490a1afb3523f149"}], "stats": {"total": 68, "additions": 38, "deletions": 30}, "files": [{"sha": "9c444d8cfc51cc61ca0a14b7480c356240f494ff", "filename": "src/allocator.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dba944c3e103ddd59b7ab3df9ccd437985863/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dba944c3e103ddd59b7ab3df9ccd437985863/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=4d0dba944c3e103ddd59b7ab3df9ccd437985863", "patch": "@@ -13,7 +13,22 @@ use crate::prelude::*;\n use rustc::middle::allocator::AllocatorKind;\n use rustc_allocator::{AllocatorTy, ALLOCATOR_METHODS};\n \n-pub fn codegen(module: &mut Module<impl Backend + 'static>, kind: AllocatorKind) {\n+pub fn codegen(sess: &Session, module: &mut Module<impl Backend + 'static>) {\n+    let any_dynamic_crate = sess\n+        .dependency_formats\n+        .borrow()\n+        .iter()\n+        .any(|(_, list)| {\n+            use rustc::middle::dependency_format::Linkage;\n+            list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n+        });\n+    if any_dynamic_crate {\n+    } else if let Some(kind) = *sess.allocator_kind.get() {\n+        codegen_inner(module, kind);\n+    }\n+}\n+\n+pub fn codegen_inner(module: &mut Module<impl Backend + 'static>, kind: AllocatorKind) {\n     let usize_ty = module.target_config().pointer_type();\n \n     for method in ALLOCATOR_METHODS {"}, {"sha": "1890caaf830a5471bdc445fa73c7bd618d95db1d", "filename": "src/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dba944c3e103ddd59b7ab3df9ccd437985863/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dba944c3e103ddd59b7ab3df9ccd437985863/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=4d0dba944c3e103ddd59b7ab3df9ccd437985863", "patch": "@@ -1,6 +1,5 @@\n use std::fmt;\n \n-use rustc_codegen_ssa::traits::BackendTypes;\n use rustc_target::spec::{HasTargetSpec, Target};\n \n use cranelift_module::Module;"}, {"sha": "efedfbd1da37308fdf71e300e16de7f5504af4a0", "filename": "src/lib.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dba944c3e103ddd59b7ab3df9ccd437985863/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dba944c3e103ddd59b7ab3df9ccd437985863/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4d0dba944c3e103ddd59b7ab3df9ccd437985863", "patch": "@@ -80,6 +80,7 @@ mod prelude {\n \n     pub use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n     pub use rustc_codegen_ssa::{CodegenResults, CompiledModule, ModuleKind};\n+    pub use rustc_codegen_ssa::traits::*;\n \n     pub use cranelift::codegen::ir::{\n         condcodes::IntCC, function::Function, ExternalName, FuncRef, Inst, StackSlot,\n@@ -200,6 +201,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 .unwrap();\n \n             codegen_mono_items(tcx, &mut jit_module, &mut log);\n+            crate::allocator::codegen(tcx.sess, &mut jit_module);\n+            jit_module.finalize_definitions();\n \n             tcx.sess.abort_if_errors();\n             println!(\"Compiled everything\");\n@@ -216,10 +219,9 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             jit_module.finish();\n             ::std::process::exit(0);\n         } else {\n-            let isa = build_isa(tcx.sess);\n             let mut faerie_module: Module<FaerieBackend> = Module::new(\n                 FaerieBuilder::new(\n-                    isa,\n+                    build_isa(tcx.sess),\n                     \"some_file.o\".to_string(),\n                     FaerieTrapCollection::Disabled,\n                     FaerieBuilder::default_libcall_names(),\n@@ -232,6 +234,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             );\n \n             codegen_mono_items(tcx, &mut faerie_module, &mut log);\n+            crate::allocator::codegen(tcx.sess, &mut faerie_module);\n+            faerie_module.finalize_definitions();\n \n             tcx.sess.abort_if_errors();\n \n@@ -339,36 +343,26 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n         .flatten()\n         .collect::<FxHashSet<(_, _)>>();\n \n-    let before = ::std::time::Instant::now();\n-    println!(\"[codegen mono items] start\");\n-\n-    for (&mono_item, &(_linkage, _vis)) in mono_items {\n-        unimpl::try_unimpl(tcx, log, || {\n-            base::trans_mono_item(tcx, module, &mut caches, &mut ccx, mono_item);\n-        });\n-    }\n-\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, module);\n+    time(\"codegen mono items\", move || {\n+        for (&mono_item, &(_linkage, _vis)) in mono_items {\n+            unimpl::try_unimpl(tcx, log, || {\n+                base::trans_mono_item(tcx, module, &mut caches, &mut ccx, mono_item);\n+            });\n+        }\n \n-    let any_dynamic_crate = tcx\n-        .sess\n-        .dependency_formats\n-        .borrow()\n-        .iter()\n-        .any(|(_, list)| {\n-            use rustc::middle::dependency_format::Linkage;\n-            list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n-        });\n-    if any_dynamic_crate {\n-    } else if let Some(kind) = *tcx.sess.allocator_kind.get() {\n-        allocator::codegen(module, kind);\n-    }\n+        crate::main_shim::maybe_create_entry_wrapper(tcx, module);\n \n-    ccx.finalize(tcx, module);\n-    module.finalize_definitions();\n+        ccx.finalize(tcx, module);\n+    });\n+}\n \n+fn time<R>(name: &str, f: impl FnOnce() -> R) -> R {\n+    println!(\"[{}] start\", name);\n+    let before = ::std::time::Instant::now();\n+    let res = f();\n     let after = ::std::time::Instant::now();\n-    println!(\"[codegen mono items] end time: {:?}\", after - before);\n+    println!(\"[{}] end time: {:?}\", name, after - before);\n+    res\n }\n \n fn save_incremental<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}]}