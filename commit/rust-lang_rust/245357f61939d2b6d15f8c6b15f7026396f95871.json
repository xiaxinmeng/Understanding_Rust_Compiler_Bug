{"sha": "245357f61939d2b6d15f8c6b15f7026396f95871", "node_id": "C_kwDOAAsO6NoAKDI0NTM1N2Y2MTkzOWQyYjZkMTVmOGM2YjE1ZjcwMjYzOTZmOTU4NzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-24T08:13:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-24T08:13:31Z"}, "message": "Auto merge of #2646 - saethlin:data-race-spans, r=RalfJung\n\nData race spans\n\nFixes https://github.com/rust-lang/miri/issues/2205\n\nThis adds output to data race errors very similar to the spans we emit for Stacked Borrows errors. For example, from our test suite:\n```\nhelp: The Atomic Load on thread `<unnamed>` is here\n  --> tests/fail/data_race/atomic_read_na_write_race1.rs:23:13\n   |\n23 | ...   (&*c.0).load(Ordering::SeqCst) //~ ERROR: Data race detected between Atomic Load on thread `<unnamed>` and Write o...\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: The Write on thread `<unnamed>` is here\n  --> tests/fail/data_race/atomic_read_na_write_race1.rs:19:13\n   |\n19 |             *(c.0 as *mut usize) = 32;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^```\n```\n\nBecause of https://github.com/rust-lang/miri/pull/2647 this comes without a perf regression, according to our benchmarks.", "tree": {"sha": "6747e7279af4e764d4e06b215bb04f51395925f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6747e7279af4e764d4e06b215bb04f51395925f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/245357f61939d2b6d15f8c6b15f7026396f95871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/245357f61939d2b6d15f8c6b15f7026396f95871", "html_url": "https://github.com/rust-lang/rust/commit/245357f61939d2b6d15f8c6b15f7026396f95871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/245357f61939d2b6d15f8c6b15f7026396f95871/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b64c91c262a6a148a35d24180b23ffafbbab1dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b64c91c262a6a148a35d24180b23ffafbbab1dc", "html_url": "https://github.com/rust-lang/rust/commit/5b64c91c262a6a148a35d24180b23ffafbbab1dc"}, {"sha": "81fe37a90099b80ea059e11d2c97759bdff1fa37", "url": "https://api.github.com/repos/rust-lang/rust/commits/81fe37a90099b80ea059e11d2c97759bdff1fa37", "html_url": "https://github.com/rust-lang/rust/commit/81fe37a90099b80ea059e11d2c97759bdff1fa37"}], "stats": {"total": 828, "additions": 555, "deletions": 273}, "files": [{"sha": "9646327966896a745ab6f4decad299aaf61df112", "filename": "src/tools/miri/src/concurrency/data_race.rs", "status": "modified", "additions": 104, "deletions": 71, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -50,8 +50,10 @@ use rustc_ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir;\n+use rustc_span::Span;\n use rustc_target::abi::{Align, Size};\n \n+use crate::diagnostics::RacingOp;\n use crate::*;\n \n use super::{\n@@ -144,8 +146,8 @@ impl ThreadClockSet {\n     /// Increment the happens-before clock at a\n     /// known index.\n     #[inline]\n-    fn increment_clock(&mut self, index: VectorIdx) {\n-        self.clock.increment_index(index);\n+    fn increment_clock(&mut self, index: VectorIdx, current_span: Span) {\n+        self.clock.increment_index(index, current_span);\n     }\n \n     /// Join the happens-before clock with that of\n@@ -356,13 +358,9 @@ impl MemoryCellClocks {\n         index: VectorIdx,\n     ) -> Result<(), DataRace> {\n         log::trace!(\"Atomic read with vectors: {:#?} :: {:#?}\", self, clocks);\n-        if self.write <= clocks.clock[self.write_index] {\n-            let atomic = self.atomic_mut();\n-            atomic.read_vector.set_at_index(&clocks.clock, index);\n-            Ok(())\n-        } else {\n-            Err(DataRace)\n-        }\n+        let atomic = self.atomic_mut();\n+        atomic.read_vector.set_at_index(&clocks.clock, index);\n+        if self.write <= clocks.clock[self.write_index] { Ok(()) } else { Err(DataRace) }\n     }\n \n     /// Detect data-races with an atomic write, either with a non-atomic read or with\n@@ -373,9 +371,9 @@ impl MemoryCellClocks {\n         index: VectorIdx,\n     ) -> Result<(), DataRace> {\n         log::trace!(\"Atomic write with vectors: {:#?} :: {:#?}\", self, clocks);\n+        let atomic = self.atomic_mut();\n+        atomic.write_vector.set_at_index(&clocks.clock, index);\n         if self.write <= clocks.clock[self.write_index] && self.read <= clocks.clock {\n-            let atomic = self.atomic_mut();\n-            atomic.write_vector.set_at_index(&clocks.clock, index);\n             Ok(())\n         } else {\n             Err(DataRace)\n@@ -386,22 +384,22 @@ impl MemoryCellClocks {\n     /// returns true if a data-race is detected.\n     fn read_race_detect(\n         &mut self,\n-        clocks: &ThreadClockSet,\n+        clocks: &mut ThreadClockSet,\n         index: VectorIdx,\n+        current_span: Span,\n     ) -> Result<(), DataRace> {\n         log::trace!(\"Unsynchronized read with vectors: {:#?} :: {:#?}\", self, clocks);\n+        if !current_span.is_dummy() {\n+            clocks.clock[index].span = current_span;\n+        }\n         if self.write <= clocks.clock[self.write_index] {\n             let race_free = if let Some(atomic) = self.atomic() {\n                 atomic.write_vector <= clocks.clock\n             } else {\n                 true\n             };\n-            if race_free {\n-                self.read.set_at_index(&clocks.clock, index);\n-                Ok(())\n-            } else {\n-                Err(DataRace)\n-            }\n+            self.read.set_at_index(&clocks.clock, index);\n+            if race_free { Ok(()) } else { Err(DataRace) }\n         } else {\n             Err(DataRace)\n         }\n@@ -411,21 +409,25 @@ impl MemoryCellClocks {\n     /// returns true if a data-race is detected.\n     fn write_race_detect(\n         &mut self,\n-        clocks: &ThreadClockSet,\n+        clocks: &mut ThreadClockSet,\n         index: VectorIdx,\n         write_type: WriteType,\n+        current_span: Span,\n     ) -> Result<(), DataRace> {\n         log::trace!(\"Unsynchronized write with vectors: {:#?} :: {:#?}\", self, clocks);\n+        if !current_span.is_dummy() {\n+            clocks.clock[index].span = current_span;\n+        }\n         if self.write <= clocks.clock[self.write_index] && self.read <= clocks.clock {\n             let race_free = if let Some(atomic) = self.atomic() {\n                 atomic.write_vector <= clocks.clock && atomic.read_vector <= clocks.clock\n             } else {\n                 true\n             };\n+            self.write = clocks.clock[index];\n+            self.write_index = index;\n+            self.write_type = write_type;\n             if race_free {\n-                self.write = clocks.clock[index];\n-                self.write_index = index;\n-                self.write_type = write_type;\n                 self.read.set_zero_vector();\n                 Ok(())\n             } else {\n@@ -621,30 +623,35 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n     /// Update the data-race detector for an atomic fence on the current thread.\n     fn atomic_fence(&mut self, atomic: AtomicFenceOrd) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n+        let current_span = this.machine.current_span();\n         if let Some(data_race) = &mut this.machine.data_race {\n-            data_race.maybe_perform_sync_operation(&this.machine.threads, |index, mut clocks| {\n-                log::trace!(\"Atomic fence on {:?} with ordering {:?}\", index, atomic);\n-\n-                // Apply data-race detection for the current fences\n-                // this treats AcqRel and SeqCst as the same as an acquire\n-                // and release fence applied in the same timestamp.\n-                if atomic != AtomicFenceOrd::Release {\n-                    // Either Acquire | AcqRel | SeqCst\n-                    clocks.apply_acquire_fence();\n-                }\n-                if atomic != AtomicFenceOrd::Acquire {\n-                    // Either Release | AcqRel | SeqCst\n-                    clocks.apply_release_fence();\n-                }\n-                if atomic == AtomicFenceOrd::SeqCst {\n-                    data_race.last_sc_fence.borrow_mut().set_at_index(&clocks.clock, index);\n-                    clocks.fence_seqcst.join(&data_race.last_sc_fence.borrow());\n-                    clocks.write_seqcst.join(&data_race.last_sc_write.borrow());\n-                }\n+            data_race.maybe_perform_sync_operation(\n+                &this.machine.threads,\n+                current_span,\n+                |index, mut clocks| {\n+                    log::trace!(\"Atomic fence on {:?} with ordering {:?}\", index, atomic);\n+\n+                    // Apply data-race detection for the current fences\n+                    // this treats AcqRel and SeqCst as the same as an acquire\n+                    // and release fence applied in the same timestamp.\n+                    if atomic != AtomicFenceOrd::Release {\n+                        // Either Acquire | AcqRel | SeqCst\n+                        clocks.apply_acquire_fence();\n+                    }\n+                    if atomic != AtomicFenceOrd::Acquire {\n+                        // Either Release | AcqRel | SeqCst\n+                        clocks.apply_release_fence();\n+                    }\n+                    if atomic == AtomicFenceOrd::SeqCst {\n+                        data_race.last_sc_fence.borrow_mut().set_at_index(&clocks.clock, index);\n+                        clocks.fence_seqcst.join(&data_race.last_sc_fence.borrow());\n+                        clocks.write_seqcst.join(&data_race.last_sc_write.borrow());\n+                    }\n \n-                // Increment timestamp in case of release semantics.\n-                Ok(atomic != AtomicFenceOrd::Acquire)\n-            })\n+                    // Increment timestamp in case of release semantics.\n+                    Ok(atomic != AtomicFenceOrd::Acquire)\n+                },\n+            )\n         } else {\n             Ok(())\n         }\n@@ -682,6 +689,7 @@ impl VClockAlloc {\n         thread_mgr: &ThreadManager<'_, '_>,\n         len: Size,\n         kind: MemoryKind<MiriMemoryKind>,\n+        current_span: Span,\n     ) -> VClockAlloc {\n         let (alloc_timestamp, alloc_index) = match kind {\n             // User allocated and stack memory should track allocation.\n@@ -693,7 +701,8 @@ impl VClockAlloc {\n             )\n             | MemoryKind::Stack => {\n                 let (alloc_index, clocks) = global.current_thread_state(thread_mgr);\n-                let alloc_timestamp = clocks.clock[alloc_index];\n+                let mut alloc_timestamp = clocks.clock[alloc_index];\n+                alloc_timestamp.span = current_span;\n                 (alloc_timestamp, alloc_index)\n             }\n             // Other global memory should trace races but be allocated at the 0 timestamp.\n@@ -704,7 +713,7 @@ impl VClockAlloc {\n                 | MiriMemoryKind::ExternStatic\n                 | MiriMemoryKind::Tls,\n             )\n-            | MemoryKind::CallerLocation => (0, VectorIdx::MAX_INDEX),\n+            | MemoryKind::CallerLocation => (VTimestamp::ZERO, VectorIdx::MAX_INDEX),\n         };\n         VClockAlloc {\n             alloc_ranges: RefCell::new(RangeMap::new(\n@@ -735,7 +744,7 @@ impl VClockAlloc {\n                     let idx = l_remainder_slice\n                         .iter()\n                         .enumerate()\n-                        .find_map(|(idx, &r)| if r == 0 { None } else { Some(idx) })\n+                        .find_map(|(idx, &r)| if r == VTimestamp::ZERO { None } else { Some(idx) })\n                         .expect(\"Invalid VClock Invariant\");\n                     Some(idx + r_slice.len())\n                 } else {\n@@ -762,7 +771,7 @@ impl VClockAlloc {\n     ) -> InterpResult<'tcx> {\n         let (current_index, current_clocks) = global.current_thread_state(thread_mgr);\n         let write_clock;\n-        let (other_action, other_thread, _other_clock) = if range.write\n+        let (other_action, other_thread, other_clock) = if range.write\n             > current_clocks.clock[range.write_index]\n         {\n             // Convert the write action into the vector clock it\n@@ -799,14 +808,19 @@ impl VClockAlloc {\n         let other_thread_info = global.print_thread_metadata(thread_mgr, other_thread);\n \n         // Throw the data-race detection.\n-        throw_ub_format!(\n-            \"Data race detected between {} on {} and {} on {} at {:?}\",\n-            action,\n-            current_thread_info,\n-            other_action,\n-            other_thread_info,\n-            ptr_dbg,\n-        )\n+        Err(err_machine_stop!(TerminationInfo::DataRace {\n+            ptr: ptr_dbg,\n+            op1: RacingOp {\n+                action: other_action.to_string(),\n+                thread_info: other_thread_info,\n+                span: other_clock.as_slice()[other_thread.index()].span_data(),\n+            },\n+            op2: RacingOp {\n+                action: action.to_string(),\n+                thread_info: current_thread_info,\n+                span: current_clocks.clock.as_slice()[current_index.index()].span_data(),\n+            },\n+        }))?\n     }\n \n     /// Detect racing atomic read and writes (not data races)\n@@ -840,12 +854,14 @@ impl VClockAlloc {\n         range: AllocRange,\n         machine: &MiriMachine<'_, '_>,\n     ) -> InterpResult<'tcx> {\n+        let current_span = machine.current_span();\n         let global = machine.data_race.as_ref().unwrap();\n         if global.race_detecting() {\n-            let (index, clocks) = global.current_thread_state(&machine.threads);\n+            let (index, mut clocks) = global.current_thread_state_mut(&machine.threads);\n             let mut alloc_ranges = self.alloc_ranges.borrow_mut();\n             for (offset, range) in alloc_ranges.iter_mut(range.start, range.size) {\n-                if let Err(DataRace) = range.read_race_detect(&clocks, index) {\n+                if let Err(DataRace) = range.read_race_detect(&mut clocks, index, current_span) {\n+                    drop(clocks);\n                     // Report data-race.\n                     return Self::report_data_race(\n                         global,\n@@ -871,11 +887,15 @@ impl VClockAlloc {\n         write_type: WriteType,\n         machine: &mut MiriMachine<'_, '_>,\n     ) -> InterpResult<'tcx> {\n+        let current_span = machine.current_span();\n         let global = machine.data_race.as_mut().unwrap();\n         if global.race_detecting() {\n-            let (index, clocks) = global.current_thread_state(&machine.threads);\n+            let (index, mut clocks) = global.current_thread_state_mut(&machine.threads);\n             for (offset, range) in self.alloc_ranges.get_mut().iter_mut(range.start, range.size) {\n-                if let Err(DataRace) = range.write_race_detect(&clocks, index, write_type) {\n+                if let Err(DataRace) =\n+                    range.write_race_detect(&mut clocks, index, write_type, current_span)\n+                {\n+                    drop(clocks);\n                     // Report data-race\n                     return Self::report_data_race(\n                         global,\n@@ -1100,9 +1120,11 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n                     size.bytes()\n                 );\n \n+                let current_span = this.machine.current_span();\n                 // Perform the atomic operation.\n                 data_race.maybe_perform_sync_operation(\n                     &this.machine.threads,\n+                    current_span,\n                     |index, mut clocks| {\n                         for (offset, range) in\n                             alloc_meta.alloc_ranges.borrow_mut().iter_mut(base_offset, size)\n@@ -1303,7 +1325,12 @@ impl GlobalState {\n     // Hook for thread creation, enabled multi-threaded execution and marks\n     // the current thread timestamp as happening-before the current thread.\n     #[inline]\n-    pub fn thread_created(&mut self, thread_mgr: &ThreadManager<'_, '_>, thread: ThreadId) {\n+    pub fn thread_created(\n+        &mut self,\n+        thread_mgr: &ThreadManager<'_, '_>,\n+        thread: ThreadId,\n+        current_span: Span,\n+    ) {\n         let current_index = self.current_index(thread_mgr);\n \n         // Enable multi-threaded execution, there are now at least two threads\n@@ -1320,7 +1347,7 @@ impl GlobalState {\n             // Now re-configure the re-use candidate, increment the clock\n             // for the new sync use of the vector.\n             let vector_clocks = self.vector_clocks.get_mut();\n-            vector_clocks[reuse_index].increment_clock(reuse_index);\n+            vector_clocks[reuse_index].increment_clock(reuse_index, current_span);\n \n             // Locate the old thread the vector was associated with and update\n             // it to represent the new thread instead.\n@@ -1360,8 +1387,8 @@ impl GlobalState {\n \n         // Advance both threads after the synchronized operation.\n         // Both operations are considered to have release semantics.\n-        current.increment_clock(current_index);\n-        created.increment_clock(created_index);\n+        current.increment_clock(current_index, current_span);\n+        created.increment_clock(created_index, current_span);\n     }\n \n     /// Hook on a thread join to update the implicit happens-before relation between the joined\n@@ -1427,13 +1454,13 @@ impl GlobalState {\n     /// This should be called strictly before any calls to\n     /// `thread_joined`.\n     #[inline]\n-    pub fn thread_terminated(&mut self, thread_mgr: &ThreadManager<'_, '_>) {\n+    pub fn thread_terminated(&mut self, thread_mgr: &ThreadManager<'_, '_>, current_span: Span) {\n         let current_index = self.current_index(thread_mgr);\n \n         // Increment the clock to a unique termination timestamp.\n         let vector_clocks = self.vector_clocks.get_mut();\n         let current_clocks = &mut vector_clocks[current_index];\n-        current_clocks.increment_clock(current_index);\n+        current_clocks.increment_clock(current_index, current_span);\n \n         // Load the current thread id for the executing vector.\n         let vector_info = self.vector_info.get_mut();\n@@ -1462,13 +1489,14 @@ impl GlobalState {\n     fn maybe_perform_sync_operation<'tcx>(\n         &self,\n         thread_mgr: &ThreadManager<'_, '_>,\n+        current_span: Span,\n         op: impl FnOnce(VectorIdx, RefMut<'_, ThreadClockSet>) -> InterpResult<'tcx, bool>,\n     ) -> InterpResult<'tcx> {\n         if self.multi_threaded.get() {\n             let (index, clocks) = self.current_thread_state_mut(thread_mgr);\n             if op(index, clocks)? {\n                 let (_, mut clocks) = self.current_thread_state_mut(thread_mgr);\n-                clocks.increment_clock(index);\n+                clocks.increment_clock(index, current_span);\n             }\n         }\n         Ok(())\n@@ -1501,10 +1529,10 @@ impl GlobalState {\n     /// since an acquire operation should have occurred before, however\n     /// for futex & condvar operations this is not the case and this\n     /// operation must be used.\n-    pub fn validate_lock_release(&self, lock: &mut VClock, thread: ThreadId) {\n+    pub fn validate_lock_release(&self, lock: &mut VClock, thread: ThreadId, current_span: Span) {\n         let (index, mut clocks) = self.load_thread_state_mut(thread);\n         lock.clone_from(&clocks.clock);\n-        clocks.increment_clock(index);\n+        clocks.increment_clock(index, current_span);\n     }\n \n     /// Release a lock handle, express that this happens-before\n@@ -1514,10 +1542,15 @@ impl GlobalState {\n     /// For normal locks this should be equivalent to `validate_lock_release`.\n     /// This function only exists for joining over the set of concurrent readers\n     /// in a read-write lock and should not be used for anything else.\n-    pub fn validate_lock_release_shared(&self, lock: &mut VClock, thread: ThreadId) {\n+    pub fn validate_lock_release_shared(\n+        &self,\n+        lock: &mut VClock,\n+        thread: ThreadId,\n+        current_span: Span,\n+    ) {\n         let (index, mut clocks) = self.load_thread_state_mut(thread);\n         lock.join(&clocks.clock);\n-        clocks.increment_clock(index);\n+        clocks.increment_clock(index, current_span);\n     }\n \n     /// Load the vector index used by the given thread as well as the set of vector clocks"}, {"sha": "867683d3552107d6f52db98d275e9c82c6df66f4", "filename": "src/tools/miri/src/concurrency/init_once.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -160,6 +160,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn init_once_complete(&mut self, id: InitOnceId) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let current_thread = this.get_active_thread();\n+        let current_span = this.machine.current_span();\n         let init_once = &mut this.machine.threads.sync.init_onces[id];\n \n         assert_eq!(\n@@ -172,7 +173,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         // Each complete happens-before the end of the wait\n         if let Some(data_race) = &this.machine.data_race {\n-            data_race.validate_lock_release(&mut init_once.data_race, current_thread);\n+            data_race.validate_lock_release(&mut init_once.data_race, current_thread, current_span);\n         }\n \n         // Wake up everyone.\n@@ -188,6 +189,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn init_once_fail(&mut self, id: InitOnceId) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let current_thread = this.get_active_thread();\n+        let current_span = this.machine.current_span();\n         let init_once = &mut this.machine.threads.sync.init_onces[id];\n         assert_eq!(\n             init_once.status,\n@@ -197,7 +199,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         // Each complete happens-before the end of the wait\n         if let Some(data_race) = &this.machine.data_race {\n-            data_race.validate_lock_release(&mut init_once.data_race, current_thread);\n+            data_race.validate_lock_release(&mut init_once.data_race, current_thread, current_span);\n         }\n \n         // Wake up one waiting thread, so they can go ahead and try to init this."}, {"sha": "b962052397498b9869a81ae65e2b5ba9d3b0e802", "filename": "src/tools/miri/src/concurrency/sync.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -359,6 +359,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// return `None`.\n     fn mutex_unlock(&mut self, id: MutexId, expected_owner: ThreadId) -> Option<usize> {\n         let this = self.eval_context_mut();\n+        let current_span = this.machine.current_span();\n         let mutex = &mut this.machine.threads.sync.mutexes[id];\n         if let Some(current_owner) = mutex.owner {\n             // Mutex is locked.\n@@ -375,7 +376,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // The mutex is completely unlocked. Try transfering ownership\n                 // to another thread.\n                 if let Some(data_race) = &this.machine.data_race {\n-                    data_race.validate_lock_release(&mut mutex.data_race, current_owner);\n+                    data_race.validate_lock_release(\n+                        &mut mutex.data_race,\n+                        current_owner,\n+                        current_span,\n+                    );\n                 }\n                 this.mutex_dequeue_and_lock(id);\n             }\n@@ -454,6 +459,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Returns `true` if succeeded, `false` if this `reader` did not hold the lock.\n     fn rwlock_reader_unlock(&mut self, id: RwLockId, reader: ThreadId) -> bool {\n         let this = self.eval_context_mut();\n+        let current_span = this.machine.current_span();\n         let rwlock = &mut this.machine.threads.sync.rwlocks[id];\n         match rwlock.readers.entry(reader) {\n             Entry::Occupied(mut entry) => {\n@@ -470,7 +476,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             Entry::Vacant(_) => return false, // we did not even own this lock\n         }\n         if let Some(data_race) = &this.machine.data_race {\n-            data_race.validate_lock_release_shared(&mut rwlock.data_race_reader, reader);\n+            data_race.validate_lock_release_shared(\n+                &mut rwlock.data_race_reader,\n+                reader,\n+                current_span,\n+            );\n         }\n \n         // The thread was a reader. If the lock is not held any more, give it to a writer.\n@@ -511,6 +521,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     #[inline]\n     fn rwlock_writer_unlock(&mut self, id: RwLockId, expected_writer: ThreadId) -> bool {\n         let this = self.eval_context_mut();\n+        let current_span = this.machine.current_span();\n         let rwlock = &mut this.machine.threads.sync.rwlocks[id];\n         if let Some(current_writer) = rwlock.writer {\n             if current_writer != expected_writer {\n@@ -523,8 +534,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             //  since this writer happens-before both the union of readers once they are finished\n             //  and the next writer\n             if let Some(data_race) = &this.machine.data_race {\n-                data_race.validate_lock_release(&mut rwlock.data_race, current_writer);\n-                data_race.validate_lock_release(&mut rwlock.data_race_reader, current_writer);\n+                data_race.validate_lock_release(\n+                    &mut rwlock.data_race,\n+                    current_writer,\n+                    current_span,\n+                );\n+                data_race.validate_lock_release(\n+                    &mut rwlock.data_race_reader,\n+                    current_writer,\n+                    current_span,\n+                );\n             }\n             // The thread was a writer.\n             //\n@@ -595,12 +614,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn condvar_signal(&mut self, id: CondvarId) -> Option<(ThreadId, CondvarLock)> {\n         let this = self.eval_context_mut();\n         let current_thread = this.get_active_thread();\n+        let current_span = this.machine.current_span();\n         let condvar = &mut this.machine.threads.sync.condvars[id];\n         let data_race = &this.machine.data_race;\n \n         // Each condvar signal happens-before the end of the condvar wake\n         if let Some(data_race) = data_race {\n-            data_race.validate_lock_release(&mut condvar.data_race, current_thread);\n+            data_race.validate_lock_release(&mut condvar.data_race, current_thread, current_span);\n         }\n         condvar.waiters.pop_front().map(|waiter| {\n             if let Some(data_race) = data_race {\n@@ -628,12 +648,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn futex_wake(&mut self, addr: u64, bitset: u32) -> Option<ThreadId> {\n         let this = self.eval_context_mut();\n         let current_thread = this.get_active_thread();\n+        let current_span = this.machine.current_span();\n         let futex = &mut this.machine.threads.sync.futexes.get_mut(&addr)?;\n         let data_race = &this.machine.data_race;\n \n         // Each futex-wake happens-before the end of the futex wait\n         if let Some(data_race) = data_race {\n-            data_race.validate_lock_release(&mut futex.data_race, current_thread);\n+            data_race.validate_lock_release(&mut futex.data_race, current_thread, current_span);\n         }\n \n         // Wake up the first thread in the queue that matches any of the bits in the bitset."}, {"sha": "9173eb3c4ee663f57e7527b3dccf4968d7240f84", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::layout::TyAndLayout;\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n use crate::concurrency::data_race;\n@@ -617,6 +618,7 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     fn thread_terminated(\n         &mut self,\n         mut data_race: Option<&mut data_race::GlobalState>,\n+        current_span: Span,\n     ) -> Vec<Pointer<Provenance>> {\n         let mut free_tls_statics = Vec::new();\n         {\n@@ -634,7 +636,7 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         }\n         // Set the thread into a terminated state in the data-race detector.\n         if let Some(ref mut data_race) = data_race {\n-            data_race.thread_terminated(self);\n+            data_race.thread_terminated(self, current_span);\n         }\n         // Check if we need to unblock any threads.\n         let mut joined_threads = vec![]; // store which threads joined, we'll need it\n@@ -813,8 +815,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             let mut state = tls::TlsDtorsState::default();\n             Box::new(move |m| state.on_stack_empty(m))\n         });\n+        let current_span = this.machine.current_span();\n         if let Some(data_race) = &mut this.machine.data_race {\n-            data_race.thread_created(&this.machine.threads, new_thread_id);\n+            data_race.thread_created(&this.machine.threads, new_thread_id, current_span);\n         }\n \n         // Write the current thread-id, switch to the next thread later\n@@ -1041,7 +1044,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         assert!(thread.stack.is_empty(), \"only threads with an empty stack can be terminated\");\n         thread.state = ThreadState::Terminated;\n \n-        for ptr in this.machine.threads.thread_terminated(this.machine.data_race.as_mut()) {\n+        let current_span = this.machine.current_span();\n+        for ptr in\n+            this.machine.threads.thread_terminated(this.machine.data_race.as_mut(), current_span)\n+        {\n             this.deallocate_ptr(ptr.into(), None, MiriMemoryKind::Tls.into())?;\n         }\n         Ok(())"}, {"sha": "ab4764dd1c87a84cf4df94d7a368c98e654b9227", "filename": "src/tools/miri/src/concurrency/vector_clock.rs", "status": "modified", "additions": 74, "deletions": 16, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,6 +1,11 @@\n use rustc_index::vec::Idx;\n+use rustc_span::{Span, SpanData, DUMMY_SP};\n use smallvec::SmallVec;\n-use std::{cmp::Ordering, fmt::Debug, ops::Index};\n+use std::{\n+    cmp::Ordering,\n+    fmt::Debug,\n+    ops::{Index, IndexMut},\n+};\n \n /// A vector clock index, this is associated with a thread id\n /// but in some cases one vector index may be shared with\n@@ -40,9 +45,42 @@ impl From<u32> for VectorIdx {\n /// clock vectors larger than this will be stored on the heap\n const SMALL_VECTOR: usize = 4;\n \n-/// The type of the time-stamps recorded in the data-race detector\n-/// set to a type of unsigned integer\n-pub type VTimestamp = u32;\n+/// The time-stamps recorded in the data-race detector consist of both\n+/// a 32-bit unsigned integer which is the actual timestamp, and a `Span`\n+/// so that diagnostics can report what code was responsible for an operation.\n+#[derive(Clone, Copy, Debug)]\n+pub struct VTimestamp {\n+    time: u32,\n+    pub span: Span,\n+}\n+\n+impl VTimestamp {\n+    pub const ZERO: VTimestamp = VTimestamp { time: 0, span: DUMMY_SP };\n+\n+    pub fn span_data(&self) -> SpanData {\n+        self.span.data()\n+    }\n+}\n+\n+impl PartialEq for VTimestamp {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.time == other.time\n+    }\n+}\n+\n+impl Eq for VTimestamp {}\n+\n+impl PartialOrd for VTimestamp {\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+impl Ord for VTimestamp {\n+    fn cmp(&self, other: &Self) -> Ordering {\n+        self.time.cmp(&other.time)\n+    }\n+}\n \n /// A vector clock for detecting data-races, this is conceptually\n /// a map from a vector index (and thus a thread id) to a timestamp.\n@@ -62,7 +100,7 @@ impl VClock {\n     /// for a value at the given index\n     pub fn new_with_index(index: VectorIdx, timestamp: VTimestamp) -> VClock {\n         let len = index.index() + 1;\n-        let mut vec = smallvec::smallvec![0; len];\n+        let mut vec = smallvec::smallvec![VTimestamp::ZERO; len];\n         vec[index.index()] = timestamp;\n         VClock(vec)\n     }\n@@ -79,7 +117,7 @@ impl VClock {\n     #[inline]\n     fn get_mut_with_min_len(&mut self, min_len: usize) -> &mut [VTimestamp] {\n         if self.0.len() < min_len {\n-            self.0.resize(min_len, 0);\n+            self.0.resize(min_len, VTimestamp::ZERO);\n         }\n         assert!(self.0.len() >= min_len);\n         self.0.as_mut_slice()\n@@ -88,11 +126,14 @@ impl VClock {\n     /// Increment the vector clock at a known index\n     /// this will panic if the vector index overflows\n     #[inline]\n-    pub fn increment_index(&mut self, idx: VectorIdx) {\n+    pub fn increment_index(&mut self, idx: VectorIdx, current_span: Span) {\n         let idx = idx.index();\n         let mut_slice = self.get_mut_with_min_len(idx + 1);\n         let idx_ref = &mut mut_slice[idx];\n-        *idx_ref = idx_ref.checked_add(1).expect(\"Vector clock overflow\")\n+        idx_ref.time = idx_ref.time.checked_add(1).expect(\"Vector clock overflow\");\n+        if !current_span.is_dummy() {\n+            idx_ref.span = current_span;\n+        }\n     }\n \n     // Join the two vector-clocks together, this\n@@ -102,14 +143,23 @@ impl VClock {\n         let rhs_slice = other.as_slice();\n         let lhs_slice = self.get_mut_with_min_len(rhs_slice.len());\n         for (l, &r) in lhs_slice.iter_mut().zip(rhs_slice.iter()) {\n+            let l_span = l.span;\n+            let r_span = r.span;\n             *l = r.max(*l);\n+            l.span = l.span.substitute_dummy(r_span).substitute_dummy(l_span);\n         }\n     }\n \n     /// Set the element at the current index of the vector\n     pub fn set_at_index(&mut self, other: &Self, idx: VectorIdx) {\n         let mut_slice = self.get_mut_with_min_len(idx.index() + 1);\n+\n+        let prev_span = mut_slice[idx.index()].span;\n+\n         mut_slice[idx.index()] = other[idx];\n+\n+        let span = &mut mut_slice[idx.index()].span;\n+        *span = span.substitute_dummy(prev_span);\n     }\n \n     /// Set the vector to the all-zero vector\n@@ -313,7 +363,14 @@ impl Index<VectorIdx> for VClock {\n \n     #[inline]\n     fn index(&self, index: VectorIdx) -> &VTimestamp {\n-        self.as_slice().get(index.to_u32() as usize).unwrap_or(&0)\n+        self.as_slice().get(index.to_u32() as usize).unwrap_or(&VTimestamp::ZERO)\n+    }\n+}\n+\n+impl IndexMut<VectorIdx> for VClock {\n+    #[inline]\n+    fn index_mut(&mut self, index: VectorIdx) -> &mut VTimestamp {\n+        self.0.as_mut_slice().get_mut(index.to_u32() as usize).unwrap()\n     }\n }\n \n@@ -324,20 +381,21 @@ impl Index<VectorIdx> for VClock {\n mod tests {\n \n     use super::{VClock, VTimestamp, VectorIdx};\n+    use rustc_span::DUMMY_SP;\n     use std::cmp::Ordering;\n \n     #[test]\n     fn test_equal() {\n         let mut c1 = VClock::default();\n         let mut c2 = VClock::default();\n         assert_eq!(c1, c2);\n-        c1.increment_index(VectorIdx(5));\n+        c1.increment_index(VectorIdx(5), DUMMY_SP);\n         assert_ne!(c1, c2);\n-        c2.increment_index(VectorIdx(53));\n+        c2.increment_index(VectorIdx(53), DUMMY_SP);\n         assert_ne!(c1, c2);\n-        c1.increment_index(VectorIdx(53));\n+        c1.increment_index(VectorIdx(53), DUMMY_SP);\n         assert_ne!(c1, c2);\n-        c2.increment_index(VectorIdx(5));\n+        c2.increment_index(VectorIdx(5), DUMMY_SP);\n         assert_eq!(c1, c2);\n     }\n \n@@ -386,14 +444,14 @@ mod tests {\n         );\n     }\n \n-    fn from_slice(mut slice: &[VTimestamp]) -> VClock {\n+    fn from_slice(mut slice: &[u32]) -> VClock {\n         while let Some(0) = slice.last() {\n             slice = &slice[..slice.len() - 1]\n         }\n-        VClock(smallvec::SmallVec::from_slice(slice))\n+        VClock(slice.iter().copied().map(|time| VTimestamp { time, span: DUMMY_SP }).collect())\n     }\n \n-    fn assert_order(l: &[VTimestamp], r: &[VTimestamp], o: Option<Ordering>) {\n+    fn assert_order(l: &[u32], r: &[u32], o: Option<Ordering>) {\n         let l = from_slice(l);\n         let r = from_slice(r);\n "}, {"sha": "2a48c9e6cd0158e7bd09680a03baf448f3c8f097", "filename": "src/tools/miri/src/concurrency/weak_memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -258,7 +258,7 @@ impl<'mir, 'tcx: 'mir> StoreBuffer {\n             // The thread index and timestamp of the initialisation write\n             // are never meaningfully used, so it's fine to leave them as 0\n             store_index: VectorIdx::from(0),\n-            timestamp: 0,\n+            timestamp: VTimestamp::ZERO,\n             val: init,\n             is_seqcst: false,\n             load_info: RefCell::new(LoadInfo::default()),"}, {"sha": "035c0e6423381fb3f1a3c63ccb2b79add3a6152b", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -35,6 +35,17 @@ pub enum TerminationInfo {\n         link_name: Symbol,\n         span: SpanData,\n     },\n+    DataRace {\n+        op1: RacingOp,\n+        op2: RacingOp,\n+        ptr: Pointer,\n+    },\n+}\n+\n+pub struct RacingOp {\n+    pub action: String,\n+    pub thread_info: String,\n+    pub span: SpanData,\n }\n \n impl fmt::Display for TerminationInfo {\n@@ -55,6 +66,12 @@ impl fmt::Display for TerminationInfo {\n                 write!(f, \"multiple definitions of symbol `{link_name}`\"),\n             SymbolShimClashing { link_name, .. } =>\n                 write!(f, \"found `{link_name}` symbol definition that clashes with a built-in shim\",),\n+            DataRace { ptr, op1, op2 } =>\n+                write!(\n+                    f,\n+                    \"Data race detected between (1) {} on {} and (2) {} on {} at {ptr:?}. (2) just happened here\",\n+                    op1.action, op1.thread_info, op2.action, op2.thread_info\n+                ),\n         }\n     }\n }\n@@ -167,7 +184,7 @@ pub fn report_error<'tcx, 'mir>(\n             Abort(_) => Some(\"abnormal termination\"),\n             UnsupportedInIsolation(_) | Int2PtrWithStrictProvenance =>\n                 Some(\"unsupported operation\"),\n-            StackedBorrowsUb { .. } => Some(\"Undefined Behavior\"),\n+            StackedBorrowsUb { .. } | DataRace { .. } => Some(\"Undefined Behavior\"),\n             Deadlock => Some(\"deadlock\"),\n             MultipleSymbolDefinitions { .. } | SymbolShimClashing { .. } => None,\n         };\n@@ -205,6 +222,12 @@ pub fn report_error<'tcx, 'mir>(\n                 vec![(Some(*span), format!(\"the `{link_name}` symbol is defined here\"))],\n             Int2PtrWithStrictProvenance =>\n                 vec![(None, format!(\"use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\"))],\n+            DataRace { op1, .. } =>\n+                vec![\n+                    (Some(op1.span), format!(\"and (1) occurred earlier here\")),\n+                    (None, format!(\"this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\")),\n+                    (None, format!(\"see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\")),\n+                ],\n             _ => vec![],\n         };\n         (title, helps)\n@@ -339,23 +362,26 @@ fn report_msg<'tcx>(\n     }\n \n     // Show note and help messages.\n+    let mut extra_span = false;\n     for (span_data, note) in &notes {\n         if let Some(span_data) = span_data {\n             err.span_note(span_data.span(), note);\n+            extra_span = true;\n         } else {\n             err.note(note);\n         }\n     }\n     for (span_data, help) in &helps {\n         if let Some(span_data) = span_data {\n             err.span_help(span_data.span(), help);\n+            extra_span = true;\n         } else {\n             err.help(help);\n         }\n     }\n     if notes.len() + helps.len() > 0 {\n         // Add visual separator before backtrace.\n-        err.note(\"BACKTRACE:\");\n+        err.note(if extra_span { \"BACKTRACE (of the first span):\" } else { \"BACKTRACE:\" });\n     }\n     // Add backtrace\n     for (idx, frame_info) in stacktrace.iter().enumerate() {"}, {"sha": "01a3d7550e2e0c480b5bb545ef77782837471924", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -956,6 +956,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n                 &ecx.machine.threads,\n                 alloc.size(),\n                 kind,\n+                ecx.machine.current_span(),\n             )\n         });\n         let buffer_alloc = ecx.machine.weak_memory.then(weak_memory::AllocState::new_allocation);"}, {"sha": "fc946d6d39b3ef58a6823138c1bf8a180e328944", "filename": "src/tools/miri/tests/fail/box-cell-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbox-cell-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbox-cell-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbox-cell-alias.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x1] by a Unique retag\n    |\n LL |     let res = helper(val, ptr);\n    |                      ^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `helper` at $DIR/box-cell-alias.rs:LL:CC\n note: inside `main`\n   --> $DIR/box-cell-alias.rs:LL:CC"}, {"sha": "2698c63a44563e000d4a1acea45e24e37f2309b8", "filename": "src/tools/miri/tests/fail/data_race/alloc_read_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -37,7 +37,7 @@ pub fn main() {\n             let pointer = &*ptr.0;\n \n             // Note: could also error due to reading uninitialized memory, but the data-race detector triggers first.\n-            *pointer.load(Ordering::Relaxed) //~ ERROR: Data race detected between Read on thread `<unnamed>` and Allocate on thread `<unnamed>`\n+            *pointer.load(Ordering::Relaxed) //~ ERROR: Data race detected between (1) Allocate on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "5b809722c70952c3867301e0816bb4964395367b", "filename": "src/tools/miri/tests/fail/data_race/alloc_read_race.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Allocate on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/alloc_read_race.rs:LL:CC\n    |\n LL |             *pointer.load(Ordering::Relaxed)\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between (1) Allocate on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/alloc_read_race.rs:LL:CC\n+   |\n+LL |             pointer.store(Box::into_raw(Box::new_uninit()), Ordering::Relaxed);\n+   |                                         ^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/alloc_read_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b78d5ef27d39f1be20103156ae32e47dbbde2d2e", "filename": "src/tools/miri/tests/fail/data_race/alloc_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -35,7 +35,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let pointer = &*ptr.0;\n-            *pointer.load(Ordering::Relaxed) = 2; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Allocate on thread `<unnamed>`\n+            *pointer.load(Ordering::Relaxed) = 2; //~ ERROR: Data race detected between (1) Allocate on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "8520bcf4e4ee1a0f0cbe2e4766ef57761462f118", "filename": "src/tools/miri/tests/fail/data_race/alloc_write_race.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Allocate on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/alloc_write_race.rs:LL:CC\n    |\n LL |             *pointer.load(Ordering::Relaxed) = 2;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between (1) Allocate on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/alloc_write_race.rs:LL:CC\n+   |\n+LL |                 .store(Box::into_raw(Box::<usize>::new_uninit()) as *mut usize, Ordering::Relaxed);\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/alloc_write_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3f811d0f64d0493a4acd898eab458bff8529ad88", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            (&*c.0).load(Ordering::SeqCst) //~ ERROR: Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>`\n+            (&*c.0).load(Ordering::SeqCst) //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Atomic Load on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "e25629e14eada40978753c0ad2b0571ac93c8d0d", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race1.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Atomic Load on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/atomic_read_na_write_race1.rs:LL:CC\n    |\n LL |             (&*c.0).load(Ordering::SeqCst)\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Atomic Load on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/atomic_read_na_write_race1.rs:LL:CC\n+   |\n+LL |             *(c.0 as *mut usize) = 32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/atomic_read_na_write_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "34fb3ac066f5fc30190b3f59b984833d3aa07280", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let atomic_ref = &mut *c.0;\n-            *atomic_ref.get_mut() = 32; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Atomic Load on thread `<unnamed>`\n+            *atomic_ref.get_mut() = 32; //~ ERROR: Data race detected between (1) Atomic Load on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "6953b1403b4b5e87e8e838454edbc6e8a4f3af05", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race2.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Atomic Load on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Atomic Load on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/atomic_read_na_write_race2.rs:LL:CC\n    |\n LL |             *atomic_ref.get_mut() = 32;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Atomic Load on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between (1) Atomic Load on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/atomic_read_na_write_race2.rs:LL:CC\n+   |\n+LL |             atomic_ref.load(Ordering::SeqCst)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/atomic_read_na_write_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "63b0806f3bb24fe145c00055b9c5701755710d5d", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let atomic_ref = &mut *c.0;\n-            *atomic_ref.get_mut() //~ ERROR: Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>`\n+            *atomic_ref.get_mut() //~ ERROR: Data race detected between (1) Atomic Store on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "e52b8895a6af68b57d4dcfbc73c9a697fe8f2011", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race1.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Atomic Store on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/atomic_write_na_read_race1.rs:LL:CC\n    |\n LL |             *atomic_ref.get_mut()\n-   |             ^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^ Data race detected between (1) Atomic Store on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/atomic_write_na_read_race1.rs:LL:CC\n+   |\n+LL |             atomic_ref.store(32, Ordering::SeqCst)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/atomic_write_na_read_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9092254be2164411744cd45875e44e8bb94e0d13", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            (&*c.0).store(32, Ordering::SeqCst); //~ ERROR: Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>`\n+            (&*c.0).store(32, Ordering::SeqCst); //~ ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Atomic Store on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "513d13b0349a0ca734430a650c70a56a054c489a", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race2.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Read on thread `<unnamed>` and (2) Atomic Store on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/atomic_write_na_read_race2.rs:LL:CC\n    |\n LL |             (&*c.0).store(32, Ordering::SeqCst);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between (1) Read on thread `<unnamed>` and (2) Atomic Store on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/atomic_write_na_read_race2.rs:LL:CC\n+   |\n+LL |             let _val = *(c.0 as *mut usize);\n+   |                        ^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/atomic_write_na_read_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5a713905f4edc4c23c383dd9719aeb57d32a0a11", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            (&*c.0).store(64, Ordering::SeqCst); //~ ERROR: Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>`\n+            (&*c.0).store(64, Ordering::SeqCst); //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Atomic Store on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "2ff70ef1f6d73410a151ea23ed5675a0aa2ef5a0", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race1.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Atomic Store on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/atomic_write_na_write_race1.rs:LL:CC\n    |\n LL |             (&*c.0).store(64, Ordering::SeqCst);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Atomic Store on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/atomic_write_na_write_race1.rs:LL:CC\n+   |\n+LL |             *(c.0 as *mut usize) = 32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/atomic_write_na_write_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5848aa262b3eb4cac2884cbf44da4014456221b8", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let atomic_ref = &mut *c.0;\n-            *atomic_ref.get_mut() = 32; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Atomic Store on thread `<unnamed>`\n+            *atomic_ref.get_mut() = 32; //~ ERROR: Data race detected between (1) Atomic Store on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "166b4d2269a88d6fce10dcf9ab6ae33703a0d7be", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race2.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Atomic Store on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/atomic_write_na_write_race2.rs:LL:CC\n    |\n LL |             *atomic_ref.get_mut() = 32;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between (1) Atomic Store on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/atomic_write_na_write_race2.rs:LL:CC\n+   |\n+LL |             atomic_ref.store(64, Ordering::SeqCst);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/atomic_write_na_write_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "eecb980e90504ccc46a0e8d5d4227488c16f00a3", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_async_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -34,7 +34,7 @@ fn main() {\n \n     let join2 = unsafe {\n         spawn(move || {\n-            *c.0 = 64; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n+            *c.0 = 64; //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         })\n     };\n "}, {"sha": "a08b21ab0e4aba99fd34c60a8f553cb7824a7429", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_async_race.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/dangling_thread_async_race.rs:LL:CC\n    |\n LL |             *c.0 = 64;\n-   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/dangling_thread_async_race.rs:LL:CC\n+   |\n+LL |             *c.0 = 32;\n+   |             ^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/dangling_thread_async_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4c7fbdd7fe6e1ef6c26210cc1a4cf6c6d5ebe6c4", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -33,6 +33,6 @@ fn main() {\n     spawn(|| ()).join().unwrap();\n \n     unsafe {\n-        *c.0 = 64; //~ ERROR: Data race detected between Write on thread `main` and Write on thread `<unnamed>`\n+        *c.0 = 64; //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `main`\n     }\n }"}, {"sha": "aa2e6a6f7126576d6663eafa13d974a182291b8e", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_race.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `main` at ALLOC. (2) just happened here\n   --> $DIR/dangling_thread_race.rs:LL:CC\n    |\n LL |         *c.0 = 64;\n-   |         ^^^^^^^^^ Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC\n+   |         ^^^^^^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `main` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/dangling_thread_race.rs:LL:CC\n+   |\n+LL |             *c.0 = 32;\n+   |             ^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/dangling_thread_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "18593cf56ae56dcfd064b72c54f379942b3a1b28", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -25,7 +25,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             __rust_dealloc(\n-                //~^ ERROR: Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>`\n+                //~^ ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>`\n                 ptr.0 as *mut _,\n                 std::mem::size_of::<usize>(),\n                 std::mem::align_of::<usize>(),"}, {"sha": "5e546646479d214241e7df91da5753bd4c0c3a9f", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race1.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,4 +1,4 @@\n-error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Read on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/dealloc_read_race1.rs:LL:CC\n    |\n LL | /             __rust_dealloc(\n@@ -7,11 +7,16 @@ LL | |                 ptr.0 as *mut _,\n LL | |                 std::mem::size_of::<usize>(),\n LL | |                 std::mem::align_of::<usize>(),\n LL | |             );\n-   | |_____________^ Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+   | |_____________^ Data race detected between (1) Read on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/dealloc_read_race1.rs:LL:CC\n+   |\n+LL |             let _val = *ptr.0;\n+   |                        ^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/dealloc_read_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a6f83d489e587c7072247cd10c2b84588f617e60", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            // Also an error of the form: Data race detected between Read on thread `<unnamed>` and Deallocate on thread `<unnamed>`\n+            // Also an error of the form: Data race detected between (1) Deallocate on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             // but the invalid allocation is detected first.\n             *ptr.0 //~ ERROR: dereferenced after this allocation got freed\n         });"}, {"sha": "c82bfed09ee51aca9c955802dfcb2734e3423599", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -35,7 +35,7 @@ pub fn main() {\n                 sleep(Duration::from_millis(200));\n \n                 // Now `stack_var` gets deallocated.\n-            } //~ ERROR: Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>`\n+            } //~ ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>`\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "beb70c5a7fa820099e21eb84cd0990309bf38b59", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race_stack.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Read on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/dealloc_read_race_stack.rs:LL:CC\n    |\n LL |             }\n-   |             ^ Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+   |             ^ Data race detected between (1) Read on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/dealloc_read_race_stack.rs:LL:CC\n+   |\n+LL |             *pointer.load(Ordering::Acquire)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/dealloc_read_race_stack.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1e93a6cb0940d266347c231c237ab4c84a1a377d", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             __rust_dealloc(\n-                //~^ ERROR: Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>`\n+                //~^ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>`\n                 ptr.0 as *mut _,\n                 std::mem::size_of::<usize>(),\n                 std::mem::align_of::<usize>(),"}, {"sha": "cc4c4524ba25d5a3c63a674b733189d7a0c14c24", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race1.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,4 +1,4 @@\n-error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/dealloc_write_race1.rs:LL:CC\n    |\n LL | /             __rust_dealloc(\n@@ -7,11 +7,16 @@ LL | |                 ptr.0 as *mut _,\n LL | |                 std::mem::size_of::<usize>(),\n LL | |                 std::mem::align_of::<usize>(),\n LL | |             );\n-   | |_____________^ Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   | |_____________^ Data race detected between (1) Write on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/dealloc_write_race1.rs:LL:CC\n+   |\n+LL |             *ptr.0 = 2;\n+   |             ^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/dealloc_write_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "385584db27f927ef322bb7626b2e5164b9df4f7e", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -27,7 +27,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            // Also an error of the form: Data race detected between Write on thread `<unnamed>` and Deallocate on thread `<unnamed>`\n+            // Also an error of the form: Data race detected between (1) Deallocate on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n             // but the invalid allocation is detected first.\n             *ptr.0 = 2; //~ ERROR: dereferenced after this allocation got freed\n         });"}, {"sha": "259fbdc497a2c3541ec0fe9480fcbf2509fd7b63", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -35,7 +35,7 @@ pub fn main() {\n                 sleep(Duration::from_millis(200));\n \n                 // Now `stack_var` gets deallocated.\n-            } //~ ERROR: Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>`\n+            } //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>`\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "5f9f4f9bee42394486d2471e71875f35e3b2342b", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race_stack.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/dealloc_write_race_stack.rs:LL:CC\n    |\n LL |             }\n-   |             ^ Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^ Data race detected between (1) Write on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/dealloc_write_race_stack.rs:LL:CC\n+   |\n+LL |             *pointer.load(Ordering::Acquire) = 3;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/dealloc_write_race_stack.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3d47b1accb31bee69a21a57062b6e3df05b74d47", "filename": "src/tools/miri/tests/fail/data_race/enable_after_join_to_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -30,7 +30,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n+            *c.0 = 64; //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "84d1c0bf7e666dc9cc548aa38b59bdd0e77323bc", "filename": "src/tools/miri/tests/fail/data_race/enable_after_join_to_main.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/enable_after_join_to_main.rs:LL:CC\n    |\n LL |             *c.0 = 64;\n-   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/enable_after_join_to_main.rs:LL:CC\n+   |\n+LL |             *c.0 = 32;\n+   |             ^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/enable_after_join_to_main.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0648aa55f4aa4d44d8e25613b33cbe1935be7557", "filename": "src/tools/miri/tests/fail/data_race/fence_after_load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -20,5 +20,5 @@ fn main() {\n     // The fence is useless, since it did not happen-after the `store` in the other thread.\n     // Hence this is a data race.\n     // Also see https://github.com/rust-lang/miri/issues/2192.\n-    unsafe { V = 2 } //~ERROR: Data race detected between Write on thread `main` and Write on thread `<unnamed>`\n+    unsafe { V = 2 } //~ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `main`\n }"}, {"sha": "c30d2354e768d6a4e084335485e06f4abcc01f86", "filename": "src/tools/miri/tests/fail/data_race/fence_after_load.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `main` at ALLOC. (2) just happened here\n   --> $DIR/fence_after_load.rs:LL:CC\n    |\n LL |     unsafe { V = 2 }\n-   |              ^^^^^ Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC\n+   |              ^^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `main` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/fence_after_load.rs:LL:CC\n+   |\n+LL |         unsafe { V = 1 }\n+   |                  ^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/fence_after_load.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "d996141db3ef1c27a397994d0d3f7580c737e0e3", "filename": "src/tools/miri/tests/fail/data_race/read_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>`\n+            *c.0 = 64; //~ ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "13bc5c74ae33300f4c066c20da17ffebcc25cff1", "filename": "src/tools/miri/tests/fail/data_race/read_write_race.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Read on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/read_write_race.rs:LL:CC\n    |\n LL |             *c.0 = 64;\n-   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^ Data race detected between (1) Read on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/read_write_race.rs:LL:CC\n+   |\n+LL |             let _val = *c.0;\n+   |                        ^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/read_write_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b4e371f430d2e83736156c23182396cdb46c50a0", "filename": "src/tools/miri/tests/fail/data_race/read_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -42,7 +42,7 @@ pub fn main() {\n \n             sleep(Duration::from_millis(200));\n \n-            stack_var //~ ERROR: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n+            stack_var //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "96fcb494822257191272c5574dc6bb52e206c279", "filename": "src/tools/miri/tests/fail/data_race/read_write_race_stack.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/read_write_race_stack.rs:LL:CC\n    |\n LL |             stack_var\n-   |             ^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/read_write_race_stack.rs:LL:CC\n+   |\n+LL |             *pointer.load(Ordering::Acquire) = 3;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/read_write_race_stack.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b7226fa626fbfd4e2a08d267561fb1dc3cc00976", "filename": "src/tools/miri/tests/fail/data_race/relax_acquire_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -37,7 +37,7 @@ pub fn main() {\n \n         let j3 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 2 {\n-                *c.0 //~ ERROR: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n+                *c.0 //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             } else {\n                 0\n             }"}, {"sha": "92755f5551d97be3314cc52868cae5e05f2b7e32", "filename": "src/tools/miri/tests/fail/data_race/relax_acquire_race.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/relax_acquire_race.rs:LL:CC\n    |\n LL |                 *c.0\n-   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |                 ^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/relax_acquire_race.rs:LL:CC\n+   |\n+LL |             *c.0 = 1;\n+   |             ^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/relax_acquire_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "dff33a42a1c2b51ccfabd0a030eae918799db147", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -41,7 +41,7 @@ pub fn main() {\n         let j3 = spawn(move || {\n             sleep(Duration::from_millis(500));\n             if SYNC.load(Ordering::Acquire) == 3 {\n-                *c.0 //~ ERROR: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n+                *c.0 //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             } else {\n                 0\n             }"}, {"sha": "880268730db1301ddfe8715acc64e62edebc22c4", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/release_seq_race.rs:LL:CC\n    |\n LL |                 *c.0\n-   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |                 ^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/release_seq_race.rs:LL:CC\n+   |\n+LL |             *c.0 = 1;\n+   |             ^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/release_seq_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f7a523841b81210f5d52dce66f4c5474699ca5df", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race_same_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -37,7 +37,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 2 {\n-                *c.0 //~ ERROR: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n+                *c.0 //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             } else {\n                 0\n             }"}, {"sha": "386c012ba4e5e1c00fe9dfc35c26885587bc84f6", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race_same_thread.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/release_seq_race_same_thread.rs:LL:CC\n    |\n LL |                 *c.0\n-   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |                 ^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/release_seq_race_same_thread.rs:LL:CC\n+   |\n+LL |             *c.0 = 1;\n+   |             ^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/release_seq_race_same_thread.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2201362b167f75bf1f36122acdffaecbdfba7f05", "filename": "src/tools/miri/tests/fail/data_race/rmw_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -38,7 +38,7 @@ pub fn main() {\n \n         let j3 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 3 {\n-                *c.0 //~ ERROR: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n+                *c.0 //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             } else {\n                 0\n             }"}, {"sha": "82cb2c4ecbb4739d14dbad0f14ef7842f62b0a3f", "filename": "src/tools/miri/tests/fail/data_race/rmw_race.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/rmw_race.rs:LL:CC\n    |\n LL |                 *c.0\n-   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |                 ^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/rmw_race.rs:LL:CC\n+   |\n+LL |             *c.0 = 1;\n+   |             ^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/rmw_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "dec5ff274ccf9f6baea491397fc69cee163484fa", "filename": "src/tools/miri/tests/fail/data_race/stack_pop_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -21,4 +21,4 @@ fn race(local: i32) {\n     // Deallocating the local (when `main` returns)\n     // races with the read in the other thread.\n     // Make sure the error points at this function's end, not just the call site.\n-} //~ERROR: Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>`\n+} //~ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Deallocate on thread `main`"}, {"sha": "71e38c2727e1a4d11dd142c4e051834fb33b83cc", "filename": "src/tools/miri/tests/fail/data_race/stack_pop_race.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Read on thread `<unnamed>` and (2) Deallocate on thread `main` at ALLOC. (2) just happened here\n   --> $DIR/stack_pop_race.rs:LL:CC\n    |\n LL | }\n-   |  ^ Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>` at ALLOC\n+   |  ^ Data race detected between (1) Read on thread `<unnamed>` and (2) Deallocate on thread `main` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/stack_pop_race.rs:LL:CC\n+   |\n+LL |         let _val = unsafe { *ptr.0 };\n+   |                             ^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `race` at $DIR/stack_pop_race.rs:LL:CC\n note: inside `main`\n   --> $DIR/stack_pop_race.rs:LL:CC"}, {"sha": "fe02d02f9dce632f4bb30b3b66c498b459fb0b3a", "filename": "src/tools/miri/tests/fail/data_race/write_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n+            *c.0 = 64; //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "3b7eb2b8000179d49499314a9b00f352b4e5cff1", "filename": "src/tools/miri/tests/fail/data_race/write_write_race.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/write_write_race.rs:LL:CC\n    |\n LL |             *c.0 = 64;\n-   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/write_write_race.rs:LL:CC\n+   |\n+LL |             *c.0 = 32;\n+   |             ^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/write_write_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c1c1b1fa6e38aac68424ccc67674dbbd1078602e", "filename": "src/tools/miri/tests/fail/data_race/write_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -39,7 +39,7 @@ pub fn main() {\n \n             sleep(Duration::from_millis(200));\n \n-            stack_var = 1usize; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n+            stack_var = 1usize; //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n \n             // read to silence errors\n             stack_var"}, {"sha": "c501ecd11a6d14eb9ffde975b49da5575fee75cf", "filename": "src/tools/miri/tests/fail/data_race/write_write_race_stack.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/write_write_race_stack.rs:LL:CC\n    |\n LL |             stack_var = 1usize;\n-   |             ^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/write_write_race_stack.rs:LL:CC\n+   |\n+LL |             *pointer.load(Ordering::Acquire) = 3;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside closure at $DIR/write_write_race_stack.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "09e4157b31f4fd7b2d74462076b8298195cd01e4", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_clashing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -14,7 +14,7 @@ help: then it's defined here again, in crate `exported_symbol_clashing`\n    |\n LL | fn bar() {}\n    | ^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/exported_symbol_clashing.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0d0055bb85c8ced9b39e0087f35c6ca565011149", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_shim_clashing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -12,7 +12,7 @@ LL | |\n LL | |     unreachable!()\n LL | | }\n    | |_^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/exported_symbol_shim_clashing.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b22db3eb121ee0b09daaa136a768985692620808", "filename": "src/tools/miri/tests/fail/stacked_borrows/alias_through_mutation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     *target = 13;\n    |     ^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/alias_through_mutation.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3ce39968cbb139aaa5b9a737f57fa4e63c2eccb1", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | pub fn safe(_x: &mut i32, _y: &mut i32) {}\n    |             ^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `safe` at $DIR/aliasing_mut1.rs:LL:CC\n note: inside `main`\n   --> $DIR/aliasing_mut1.rs:LL:CC"}, {"sha": "df4b6cf02561c3f5a33cbb48363f3bc529dc15f4", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | pub fn safe(_x: &i32, _y: &mut i32) {}\n    |             ^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `safe` at $DIR/aliasing_mut2.rs:LL:CC\n note: inside `main`\n   --> $DIR/aliasing_mut2.rs:LL:CC"}, {"sha": "55aaed62f4f5f8d8c9939c335fcdf4efa8548f49", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry reta\n    |\n LL |     safe_raw(xraw, xshr);\n    |     ^^^^^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `safe` at $DIR/aliasing_mut3.rs:LL:CC\n note: inside `main`\n   --> $DIR/aliasing_mut3.rs:LL:CC"}, {"sha": "ddf197bc63955f8dd67c17416915323077fbaf18", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | pub fn safe(_x: &i32, _y: &mut Cell<i32>) {}\n    |             ^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `safe` at $DIR/aliasing_mut4.rs:LL:CC\n note: inside `main`\n   --> $DIR/aliasing_mut4.rs:LL:CC"}, {"sha": "76f4e81f71ba2bdc7a96a9c703bdd874faa09677", "filename": "src/tools/miri/tests/fail/stacked_borrows/box_exclusive_violation1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     *our = 5;\n    |     ^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `unknown_code_2` at $DIR/box_exclusive_violation1.rs:LL:CC\n note: inside `demo_box_advanced_unique`\n   --> $DIR/box_exclusive_violation1.rs:LL:CC"}, {"sha": "59377aeb971a83a42c530c4894a1dea5147e75ab", "filename": "src/tools/miri/tests/fail/stacked_borrows/box_noalias_violation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_noalias_violation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_noalias_violation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_noalias_violation.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | unsafe fn test(mut x: Box<i32>, y: *const i32) -> i32 {\n    |                ^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `test` at $DIR/box_noalias_violation.rs:LL:CC\n note: inside `main`\n   --> $DIR/box_noalias_violation.rs:LL:CC"}, {"sha": "fa3d7ca367625514f3d6da82df12a7336a3dd38e", "filename": "src/tools/miri/tests/fail/stacked_borrows/buggy_as_mut_slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0xc] by a Unique retag\n    |\n LL |         unsafe { from_raw_parts_mut(self_.as_ptr() as *mut T, self_.len()) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/buggy_as_mut_slice.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c75d8cab3fc85b947e417960c7deaea78afd6aa2", "filename": "src/tools/miri/tests/fail/stacked_borrows/buggy_split_at_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x10] by a Unique retag\n    |\n LL |                 from_raw_parts_mut(ptr.offset(mid as isize), len - mid),\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/buggy_split_at_mut.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "bd79b401f667f16f2593ab12e1ead2a210da3745", "filename": "src/tools/miri/tests/fail/stacked_borrows/disable_mut_does_not_merge_srw.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |         *base = 1;\n    |         ^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/disable_mut_does_not_merge_srw.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e3bffde1f0176c337c1ca5fab767dcddb0291a18", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry reta\n    |\n LL |     x.do_bad();\n    |     ^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/fnentry_invalidation.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b104de4b8d94d2b02e6ea1257bbfa2ee8ee4a817", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0xc] by a Unique FnEntry reta\n    |\n LL |     let _ = t.sli.as_mut_ptr();\n    |             ^^^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/fnentry_invalidation2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7fff60f25fbbe60315c4e409a263095ddf1cab92", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_dealloc1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_dealloc1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_dealloc1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_dealloc1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -16,7 +16,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x1] by a write access\n    |\n LL |         ptr1.write(0);\n    |         ^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main`\n   --> $DIR/illegal_deALLOC.rs:LL:CC"}, {"sha": "7a159c9d3fefce8ebfebb3641501c3137b161c17", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |     let _val = unsafe { *xraw };\n    |                         ^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_read1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e3e79f6f0f05ef7bf5aa92f57c77881dd202794e", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read2.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a SharedReadOnly reta\n    |\n LL |     let shr = unsafe { &*xraw };\n    |                        ^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_read2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3a8687ad9aa19a98f9316e8487f22834fc90c73f", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |     let _val = unsafe { *xref1.r };\n    |                         ^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_read3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "dcf37b26901542c79604ae9fc280f6fd219bce1f", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read4.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |     let _val = unsafe { *xraw }; // use the raw again, this invalidates xref2 *even* with the special read except for uniq refs\n    |                         ^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_read4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1793798d15f6af69f55f90f057444003d347f713", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read5.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [$HEX..$HEX] by a read access\n    |\n LL |     mem::forget(unsafe { ptr::read(xshr) }); // but after reading through the shared ref\n    |                          ^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_read5.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "17b28dee3c7caf3868267d87189a165e71479f11", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n    |\n LL |         let x = &mut *x; // kill `raw`\n    |                 ^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_read6.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b76446d60f6d2bb2fe142b7969527f77ad6c5166", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |         let _val = ptr::read(raw);\n    |                    ^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_read7.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b43079c3b7f3b9a9ea91618c2f9ae57f51525ab2", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read8.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |         *y2 += 1;\n    |         ^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_read8.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "fbd5d8b956d9794d9df99c3d5387e7c2f172b423", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read_despite_exposed1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |         *exposed_ptr = 0;\n    |         ^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_read_despite_exposed1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "19e4cbdb9385521d0af0177929e9cacb05e35271", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read_despite_exposed2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |         let _val = *exposed_ptr;\n    |                    ^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_read_despite_exposed2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c1e4918146587c7b12f36830934bb8659bc81d6a", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x4]\n    |\n LL |         let x: *mut u32 = xref as *const _ as *mut _;\n    |                           ^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_write1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3e11e86eb81b36f10837798621f2a87251401b58", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n    |\n LL |     drop(&mut *target); // reborrow\n    |          ^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_write2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4053325821e75120ef533d18a60ef56c1d19a371", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x4]\n    |\n LL |     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n    |               ^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_write3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "fceda8db4cef5a0962f1974f248c73b974fb1287", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write4.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n    |\n LL |     let _mut_ref: &mut i32 = unsafe { mem::transmute(raw) }; // &mut, with raw tag\n    |                                       ^^^^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_write4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c71780b7e03e0332067d998e1de1133572209a21", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write5.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     unsafe { *xraw = 15 };\n    |              ^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_write5.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3d3d2a24c2852954ff89c193517beb40dcb5112f", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | fn foo(a: &mut u32, y: *mut u32) -> u32 {\n    |        ^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `foo` at $DIR/illegal_write6.rs:LL:CC\n note: inside `main`\n   --> $DIR/illegal_write6.rs:LL:CC"}, {"sha": "1bb3afe483ebad8c8546275e0d693ecc0fad57f8", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write_despite_exposed1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |         *exposed_ptr = 0;\n    |         ^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/illegal_write_despite_exposed1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "da55e724fd81e77d19f561f28bce40fa5806811b", "filename": "src/tools/miri/tests/fail/stacked_borrows/interior_mut1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finterior_mut1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finterior_mut1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finterior_mut1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |         *c.get() = UnsafeCell::new(1); // invalidates inner_shr\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/interior_mut1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8c8a96cbbbd639e7182cb8f868f6ca80f729eb25", "filename": "src/tools/miri/tests/fail/stacked_borrows/interior_mut2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |         *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/interior_mut2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "95fa4c51d12fdad7f3d783ffc2caefa13ad23ce6", "filename": "src/tools/miri/tests/fail/stacked_borrows/invalidate_against_protector1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | fn inner(x: *mut i32, _y: &mut i32) {\n    |                       ^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `inner` at $DIR/invalidate_against_protector1.rs:LL:CC\n note: inside `main`\n   --> $DIR/invalidate_against_protector1.rs:LL:CC"}, {"sha": "8f677bd547ce356ea7c79a058ff7f0557a130749", "filename": "src/tools/miri/tests/fail/stacked_borrows/invalidate_against_protector2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | fn inner(x: *mut i32, _y: &i32) {\n    |                       ^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `inner` at $DIR/invalidate_against_protector2.rs:LL:CC\n note: inside `main`\n   --> $DIR/invalidate_against_protector2.rs:LL:CC"}, {"sha": "1648ca9e58bb11f2627dfa21ce4479876788d6dd", "filename": "src/tools/miri/tests/fail/stacked_borrows/invalidate_against_protector3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector3.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | fn inner(x: *mut i32, _y: &i32) {\n    |                       ^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `inner` at $DIR/invalidate_against_protector3.rs:LL:CC\n note: inside `main`\n   --> $DIR/invalidate_against_protector3.rs:LL:CC"}, {"sha": "7aca065ca0d701598803f6e46fe57ff056b23c38", "filename": "src/tools/miri/tests/fail/stacked_borrows/load_invalid_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/load_invalid_mut.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7eb973ae7f2af94732dd5a84749acc95ebd24a80", "filename": "src/tools/miri/tests/fail/stacked_borrows/load_invalid_shr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     unsafe { *xraw = 42 }; // unfreeze\n    |              ^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/load_invalid_shr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3e7fe11b5202a9595ad5c8b087552fbab827209f", "filename": "src/tools/miri/tests/fail/stacked_borrows/mut_exclusive_violation1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     *our = 5;\n    |     ^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `unknown_code_2` at $DIR/mut_exclusive_violation1.rs:LL:CC\n note: inside `demo_mut_advanced_unique`\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC"}, {"sha": "30ce698761f3da570ae4d95e573a6d87f05eeec6", "filename": "src/tools/miri/tests/fail/stacked_borrows/mut_exclusive_violation2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n    |\n LL |         let _raw2 = ptr2.as_mut();\n    |                     ^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/mut_exclusive_violation2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0cba380ea1a30db629bf4396115dae0ede3bf224", "filename": "src/tools/miri/tests/fail/stacked_borrows/newtype_pair_retagging.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_pair_retagging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_pair_retagging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_pair_retagging.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {\n    |                          ^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `std::boxed::Box::<i32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<i32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n note: inside closure"}, {"sha": "f76b6a57eaca0662e81ac56ff6d55685f9f00a20", "filename": "src/tools/miri/tests/fail/stacked_borrows/newtype_retagging.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {\n    |                          ^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `std::boxed::Box::<i32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<i32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n note: inside closure"}, {"sha": "ad366bdabcee668b98b8edb2517efe6838232439", "filename": "src/tools/miri/tests/fail/stacked_borrows/outdated_local.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Foutdated_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Foutdated_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Foutdated_local.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     x = 1; // this invalidates y by reactivating the lowermost uniq borrow for this local\n    |     ^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/outdated_local.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "96cec327b9df53ddcf5dc461951bd58d53bafbfb", "filename": "src/tools/miri/tests/fail/stacked_borrows/pass_invalid_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/pass_invalid_mut.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5243858a91a7deb9444cabc29bd1579c72989a15", "filename": "src/tools/miri/tests/fail/stacked_borrows/pass_invalid_shr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     unsafe { *xraw = 42 }; // unfreeze\n    |              ^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/pass_invalid_shr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e20b5b89a2fca5e27fe17237a1408e91ce6b394a", "filename": "src/tools/miri/tests/fail/stacked_borrows/pointer_smuggling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x1] by a write access\n    |\n LL |     *val = 2; // this invalidates any raw ptrs `fun1` might have created.\n    |     ^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `fun2` at $DIR/pointer_smuggling.rs:LL:CC\n note: inside `main`\n   --> $DIR/pointer_smuggling.rs:LL:CC"}, {"sha": "9f7e7a058dfcfac5c406722e63c812d18fb04210", "filename": "src/tools/miri/tests/fail/stacked_borrows/raw_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fraw_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fraw_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fraw_tracking.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n    |\n LL |     let raw2 = &mut l as *mut _; // invalidates raw1\n    |                ^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/raw_tracking.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a63cd03366f68c7cccf2d67d0c5d885acfc668b4", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -15,7 +15,7 @@ fn thread_1(p: SendPtr) {\n fn thread_2(p: SendPtr) {\n     let p = p.0;\n     unsafe {\n-        *p = 5; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>`\n+        *p = 5; //~ ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n     }\n }\n "}, {"sha": "c53a495b5e18b7da7842ffd4e51582e9d50e4b9b", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_read.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Read on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/retag_data_race_read.rs:LL:CC\n    |\n LL |         *p = 5;\n-   |         ^^^^^^ Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+   |         ^^^^^^ Data race detected between (1) Read on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/retag_data_race_read.rs:LL:CC\n+   |\n+LL |         let _r = &*p;\n+   |                  ^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `thread_2` at $DIR/retag_data_race_read.rs:LL:CC\n note: inside closure\n   --> $DIR/retag_data_race_read.rs:LL:CC"}, {"sha": "c1dded40d3c355f2a10b469708a63c20c6920f66", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.rs?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -15,7 +15,7 @@ fn thread_1(p: SendPtr) {\n fn thread_2(p: SendPtr) {\n     let p = p.0;\n     unsafe {\n-        *p = 5; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n+        *p = 5; //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n     }\n }\n "}, {"sha": "da5af60067565680a517513f87722b2b5422572a", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_write.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -1,12 +1,17 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n   --> $DIR/retag_data_race_write.rs:LL:CC\n    |\n LL |         *p = 5;\n-   |         ^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |         ^^^^^^ Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n    |\n+help: and (1) occurred earlier here\n+  --> $DIR/retag_data_race_write.rs:LL:CC\n+   |\n+LL |         let _r = &mut *p;\n+   |                  ^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `thread_2` at $DIR/retag_data_race_write.rs:LL:CC\n note: inside closure\n   --> $DIR/retag_data_race_write.rs:LL:CC"}, {"sha": "2bf91b676c4c0fe0e7245853bfa190346d03279b", "filename": "src/tools/miri/tests/fail/stacked_borrows/return_invalid_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8] by a read access\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `foo` at $DIR/return_invalid_mut.rs:LL:CC\n note: inside `main`\n   --> $DIR/return_invalid_mut.rs:LL:CC"}, {"sha": "ff00c54570cd30daea1f2140425ea2e04134d018", "filename": "src/tools/miri/tests/fail/stacked_borrows/return_invalid_mut_option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8] by a read access\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `foo` at $DIR/return_invalid_mut_option.rs:LL:CC\n note: inside `main`\n   --> $DIR/return_invalid_mut_option.rs:LL:CC"}, {"sha": "61d041a8816d2d53879bf2bb2c8310054276aaa6", "filename": "src/tools/miri/tests/fail/stacked_borrows/return_invalid_mut_tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8] by a read access\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `foo` at $DIR/return_invalid_mut_tuple.rs:LL:CC\n note: inside `main`\n   --> $DIR/return_invalid_mut_tuple.rs:LL:CC"}, {"sha": "d3a73a00fa60549853483c9179a4dcc0f80c07ff", "filename": "src/tools/miri/tests/fail/stacked_borrows/return_invalid_shr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8] by a write access\n    |\n LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n    |              ^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `foo` at $DIR/return_invalid_shr.rs:LL:CC\n note: inside `main`\n   --> $DIR/return_invalid_shr.rs:LL:CC"}, {"sha": "f14e8b8532f55a713a7550cb03d6d786d9b9459d", "filename": "src/tools/miri/tests/fail/stacked_borrows/return_invalid_shr_option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8] by a write access\n    |\n LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n    |              ^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `foo` at $DIR/return_invalid_shr_option.rs:LL:CC\n note: inside `main`\n   --> $DIR/return_invalid_shr_option.rs:LL:CC"}, {"sha": "9ddaad4d1be30647f6715217f0c092d5c11954f9", "filename": "src/tools/miri/tests/fail/stacked_borrows/return_invalid_shr_tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8] by a write access\n    |\n LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n    |              ^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `foo` at $DIR/return_invalid_shr_tuple.rs:LL:CC\n note: inside `main`\n   --> $DIR/return_invalid_shr_tuple.rs:LL:CC"}, {"sha": "589e1291ba731123f467dd0193ea7175bc81913c", "filename": "src/tools/miri/tests/fail/stacked_borrows/shared_rw_borrows_are_weak1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n    |\n LL |         shr_rw.set(1);\n    |         ^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0e37c4ffb394c7e4167c4d2100752af0cc8c99e3", "filename": "src/tools/miri/tests/fail/stacked_borrows/shared_rw_borrows_are_weak2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [$HEX..$HEX] by a Unique retag\n    |\n LL |         shr_rw.replace(1);\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a69116f2afae73aeb3340edcd9f0412a5a7e8b3d", "filename": "src/tools/miri/tests/fail/stacked_borrows/shr_frozen_violation1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x4]\n    |\n LL |         *(x as *const i32 as *mut i32) = 7;\n    |           ^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `unknown_code` at $DIR/shr_frozen_violation1.rs:LL:CC\n note: inside `foo`\n   --> $DIR/shr_frozen_violation1.rs:LL:CC"}, {"sha": "05be0d3f1e98a4cfc1db53c830f835cde85471f2", "filename": "src/tools/miri/tests/fail/stacked_borrows/track_caller.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ftrack_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ftrack_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ftrack_caller.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |     callee(xraw);\n    |     ^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/track_caller.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ac962311d42600f78f7def596ee8b75176fa51b9", "filename": "src/tools/miri/tests/fail/stacked_borrows/transmute-is-no-escape.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadWrite retag at offsets [0x4..0x8]\n    |\n LL |     let raw = (&mut x[1] as *mut i32).wrapping_offset(-1);\n    |                ^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/transmute-is-no-escape.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7a40d1078b3b74768f04e3b9a4ab443f890dcbd8", "filename": "src/tools/miri/tests/fail/stacked_borrows/unescaped_static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Funescaped_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Funescaped_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Funescaped_static.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x1]\n    |\n LL |     let ptr_to_first = &ARRAY[0] as *const u8;\n    |                        ^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/unescaped_static.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "950abc4cbcf92fefae4579f24a72e57512a476e0", "filename": "src/tools/miri/tests/fail/stacked_borrows/zst_slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fzst_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245357f61939d2b6d15f8c6b15f7026396f95871/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fzst_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fzst_slice.stderr?ref=245357f61939d2b6d15f8c6b15f7026396f95871", "patch": "@@ -14,7 +14,7 @@ help: <TAG> would have been created here, but this is a zero-size retag ([0x0..0\n    |\n LL |         assert_eq!(*s.get_unchecked(1), 2);\n    |                     ^^^^^^^^^^^^^^^^^^\n-   = note: BACKTRACE:\n+   = note: BACKTRACE (of the first span):\n    = note: inside `core::slice::<impl [i32]>::get_unchecked::<usize>` at RUSTLIB/core/src/slice/mod.rs:LL:CC\n note: inside `main`\n   --> $DIR/zst_slice.rs:LL:CC"}]}