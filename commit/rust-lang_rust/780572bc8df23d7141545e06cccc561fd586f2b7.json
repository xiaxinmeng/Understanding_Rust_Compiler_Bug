{"sha": "780572bc8df23d7141545e06cccc561fd586f2b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MDU3MmJjOGRmMjNkNzE0MTU0NWUwNmNjY2M1NjFmZDU4NmYyYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-21T14:43:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-21T14:43:56Z"}, "message": "Auto merge of #5614 - ebroto:test_cargo_lints, r=flip1995\n\nTest cargo lints\n\nchangelog: Add infrastructure to test cargo lints\n\nCloses #5603", "tree": {"sha": "eb2de4cb6ce91ae3bb915d8bc4d47befa2147451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb2de4cb6ce91ae3bb915d8bc4d47befa2147451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/780572bc8df23d7141545e06cccc561fd586f2b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/780572bc8df23d7141545e06cccc561fd586f2b7", "html_url": "https://github.com/rust-lang/rust/commit/780572bc8df23d7141545e06cccc561fd586f2b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/780572bc8df23d7141545e06cccc561fd586f2b7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1831385ff0fe329c143b59f09cb8b5f2a2568678", "url": "https://api.github.com/repos/rust-lang/rust/commits/1831385ff0fe329c143b59f09cb8b5f2a2568678", "html_url": "https://github.com/rust-lang/rust/commit/1831385ff0fe329c143b59f09cb8b5f2a2568678"}, {"sha": "f9013ff197a693798f0532f88bab0ae591d5ff82", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9013ff197a693798f0532f88bab0ae591d5ff82", "html_url": "https://github.com/rust-lang/rust/commit/f9013ff197a693798f0532f88bab0ae591d5ff82"}], "stats": {"total": 503, "additions": 394, "deletions": 109}, "files": [{"sha": "08a2e0c0918f0372de6f8918e1fea5b95cd8839c", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 106, "deletions": 73, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -1,91 +1,110 @@\n use crate::clippy_project_root;\n-use std::fs::{File, OpenOptions};\n-use std::io;\n+use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n-use std::io::ErrorKind;\n-use std::path::Path;\n+use std::io::{self, ErrorKind};\n+use std::path::{Path, PathBuf};\n+\n+struct LintData<'a> {\n+    pass: &'a str,\n+    name: &'a str,\n+    category: &'a str,\n+    project_root: PathBuf,\n+}\n+\n+trait Context {\n+    fn context<C: AsRef<str>>(self, text: C) -> Self;\n+}\n \n-/// Creates files required to implement and test a new lint and runs `update_lints`.\n+impl<T> Context for io::Result<T> {\n+    fn context<C: AsRef<str>>(self, text: C) -> Self {\n+        match self {\n+            Ok(t) => Ok(t),\n+            Err(e) => {\n+                let message = format!(\"{}: {}\", text.as_ref(), e);\n+                Err(io::Error::new(ErrorKind::Other, message))\n+            },\n+        }\n+    }\n+}\n+\n+/// Creates the files required to implement and test a new lint and runs `update_lints`.\n ///\n /// # Errors\n ///\n-/// This function errors, if the files couldn't be created\n-pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>) -> Result<(), io::Error> {\n-    let pass = pass.expect(\"`pass` argument is validated by clap\");\n-    let lint_name = lint_name.expect(\"`name` argument is validated by clap\");\n-    let category = category.expect(\"`category` argument is validated by clap\");\n-\n-    match open_files(lint_name) {\n-        Ok((mut test_file, mut lint_file)) => {\n-            let (pass_type, pass_lifetimes, pass_import, context_import) = match pass {\n-                \"early\" => (\"EarlyLintPass\", \"\", \"use rustc_ast::ast::*;\", \"EarlyContext\"),\n-                \"late\" => (\"LateLintPass\", \"<'_, '_>\", \"use rustc_hir::*;\", \"LateContext\"),\n-                _ => {\n-                    unreachable!(\"`pass_type` should only ever be `early` or `late`!\");\n-                },\n-            };\n-\n-            let camel_case_name = to_camel_case(lint_name);\n-\n-            if let Err(e) = test_file.write_all(get_test_file_contents(lint_name).as_bytes()) {\n-                return Err(io::Error::new(\n-                    ErrorKind::Other,\n-                    format!(\"Could not write to test file: {}\", e),\n-                ));\n-            };\n-\n-            if let Err(e) = lint_file.write_all(\n-                get_lint_file_contents(\n-                    pass_type,\n-                    pass_lifetimes,\n-                    lint_name,\n-                    &camel_case_name,\n-                    category,\n-                    pass_import,\n-                    context_import,\n-                )\n-                .as_bytes(),\n-            ) {\n-                return Err(io::Error::new(\n-                    ErrorKind::Other,\n-                    format!(\"Could not write to lint file: {}\", e),\n-                ));\n-            }\n-            Ok(())\n+/// This function errors out if the files couldn't be created or written to.\n+pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>) -> io::Result<()> {\n+    let lint = LintData {\n+        pass: pass.expect(\"`pass` argument is validated by clap\"),\n+        name: lint_name.expect(\"`name` argument is validated by clap\"),\n+        category: category.expect(\"`category` argument is validated by clap\"),\n+        project_root: clippy_project_root(),\n+    };\n+\n+    create_lint(&lint).context(\"Unable to create lint implementation\")?;\n+    create_test(&lint).context(\"Unable to create a test for the new lint\")\n+}\n+\n+fn create_lint(lint: &LintData) -> io::Result<()> {\n+    let (pass_type, pass_lifetimes, pass_import, context_import) = match lint.pass {\n+        \"early\" => (\"EarlyLintPass\", \"\", \"use rustc_ast::ast::*;\", \"EarlyContext\"),\n+        \"late\" => (\"LateLintPass\", \"<'_, '_>\", \"use rustc_hir::*;\", \"LateContext\"),\n+        _ => {\n+            unreachable!(\"`pass_type` should only ever be `early` or `late`!\");\n         },\n-        Err(e) => Err(io::Error::new(\n-            ErrorKind::Other,\n-            format!(\"Unable to create lint: {}\", e),\n-        )),\n-    }\n+    };\n+\n+    let camel_case_name = to_camel_case(lint.name);\n+    let lint_contents = get_lint_file_contents(\n+        pass_type,\n+        pass_lifetimes,\n+        lint.name,\n+        &camel_case_name,\n+        lint.category,\n+        pass_import,\n+        context_import,\n+    );\n+\n+    let lint_path = format!(\"clippy_lints/src/{}.rs\", lint.name);\n+    write_file(lint.project_root.join(&lint_path), lint_contents.as_bytes())\n }\n \n-fn open_files(lint_name: &str) -> Result<(File, File), io::Error> {\n-    let project_root = clippy_project_root();\n+fn create_test(lint: &LintData) -> io::Result<()> {\n+    fn create_project_layout<P: Into<PathBuf>>(lint_name: &str, location: P, case: &str, hint: &str) -> io::Result<()> {\n+        let mut path = location.into().join(case);\n+        fs::create_dir(&path)?;\n+        write_file(path.join(\"Cargo.toml\"), get_manifest_contents(lint_name, hint))?;\n \n-    let test_file_path = project_root.join(\"tests\").join(\"ui\").join(format!(\"{}.rs\", lint_name));\n-    let lint_file_path = project_root\n-        .join(\"clippy_lints\")\n-        .join(\"src\")\n-        .join(format!(\"{}.rs\", lint_name));\n+        path.push(\"src\");\n+        fs::create_dir(&path)?;\n+        write_file(path.join(\"main.rs\"), get_test_file_contents(lint_name))?;\n \n-    if Path::new(&test_file_path).exists() {\n-        return Err(io::Error::new(\n-            ErrorKind::AlreadyExists,\n-            format!(\"test file {:?} already exists\", test_file_path),\n-        ));\n+        Ok(())\n     }\n-    if Path::new(&lint_file_path).exists() {\n-        return Err(io::Error::new(\n-            ErrorKind::AlreadyExists,\n-            format!(\"lint file {:?} already exists\", lint_file_path),\n-        ));\n+\n+    if lint.category == \"cargo\" {\n+        let relative_test_dir = format!(\"tests/ui-cargo/{}\", lint.name);\n+        let test_dir = lint.project_root.join(relative_test_dir);\n+        fs::create_dir(&test_dir)?;\n+\n+        create_project_layout(lint.name, &test_dir, \"fail\", \"Content that triggers the lint goes here\")?;\n+        create_project_layout(lint.name, &test_dir, \"pass\", \"This file should not trigger the lint\")\n+    } else {\n+        let test_path = format!(\"tests/ui/{}.rs\", lint.name);\n+        let test_contents = get_test_file_contents(lint.name);\n+        write_file(lint.project_root.join(test_path), test_contents)\n     }\n+}\n \n-    let test_file = OpenOptions::new().write(true).create_new(true).open(test_file_path)?;\n-    let lint_file = OpenOptions::new().write(true).create_new(true).open(lint_file_path)?;\n+fn write_file<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> {\n+    fn inner(path: &Path, contents: &[u8]) -> io::Result<()> {\n+        OpenOptions::new()\n+            .write(true)\n+            .create_new(true)\n+            .open(path)?\n+            .write_all(contents)\n+    }\n \n-    Ok((test_file, lint_file))\n+    inner(path.as_ref(), contents.as_ref()).context(format!(\"writing to file: {}\", path.as_ref().display()))\n }\n \n fn to_camel_case(name: &str) -> String {\n@@ -112,6 +131,20 @@ fn main() {{\n     )\n }\n \n+fn get_manifest_contents(lint_name: &str, hint: &str) -> String {\n+    format!(\n+        r#\"\n+# {}\n+\n+[package]\n+name = \"{}\"\n+version = \"0.1.0\"\n+publish = false\n+\"#,\n+        hint, lint_name\n+    )\n+}\n+\n fn get_lint_file_contents(\n     pass_type: &str,\n     pass_lifetimes: &str,"}, {"sha": "16b46423c8f013da962bb37aa0ab4d348cc37e3d", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -23,6 +23,7 @@ declare_clippy_lint! {\n     /// [package]\n     /// name = \"clippy\"\n     /// version = \"0.0.212\"\n+    /// authors = [\"Someone <someone@rust-lang.org>\"]\n     /// description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n     /// repository = \"https://github.com/rust-lang/rust-clippy\"\n     /// readme = \"README.md\""}, {"sha": "c4decfc9401117eadb9d4c9129ac9e3ea6ba2aef", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -54,7 +54,9 @@ impl LateLintPass<'_, '_> for MultipleCrateVersions {\n             let group: Vec<cargo_metadata::Package> = group.collect();\n \n             if group.len() > 1 {\n-                let versions = group.into_iter().map(|p| p.version).join(\", \");\n+                let mut versions: Vec<_> = group.into_iter().map(|p| p.version).collect();\n+                versions.sort();\n+                let versions = versions.iter().join(\", \");\n \n                 span_lint(\n                     cx,"}, {"sha": "b3f5a62d55307798298c250ae6d5524c633cc427", "filename": "doc/adding_lints.md", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -42,8 +42,10 @@ case), and we don't need type information so it will have an early pass type\n `cargo dev new_lint --name=foo_functions --pass=early --category=pedantic`\n (category will default to nursery if not provided). This command will create\n two files: `tests/ui/foo_functions.rs` and `clippy_lints/src/foo_functions.rs`,\n-as well as run `cargo dev update_lints` to register the new lint. Next, we'll\n-open up these files and add our lint!\n+as well as run `cargo dev update_lints` to register the new lint. For cargo lints,\n+two project hierarchies (fail/pass) will be created by default under `tests/ui-cargo`.\n+\n+Next, we'll open up these files and add our lint!\n \n ## Testing\n \n@@ -105,6 +107,24 @@ our lint, we need to commit the generated `.stderr` files, too. In general, you\n should only commit files changed by `tests/ui/update-all-references.sh` for the\n specific lint you are creating/editing.\n \n+### Cargo lints\n+\n+For cargo lints, the process of testing differs in that we are interested in\n+the `Cargo.toml` manifest file. We also need a minimal crate associated\n+with that manifest.\n+\n+If our new lint is named e.g. `foo_categories`, after running `cargo dev new_lint` \n+we will find by default two new crates, each with its manifest file:\n+\n+* `tests/ui-cargo/foo_categories/fail/Cargo.toml`: this file should cause the new lint to raise an error.\n+* `tests/ui-cargo/foo_categories/pass/Cargo.toml`: this file should not trigger the lint.\n+\n+If you need more cases, you can copy one of those crates (under `foo_categories`) and rename it.\n+\n+The process of generating the `.stderr` file is the same, and prepending the `TESTNAME`\n+variable to `cargo uitest` works too, but the script to update the references\n+is in another path: `tests/ui-cargo/update-all-references.sh`.\n+\n ## Rustfix tests\n \n If the lint you are working on is making use of structured suggestions, the"}, {"sha": "a5de84293909f24c8e99b77aedb8c6e3afd8be08", "filename": "tests/compile-test.rs", "status": "modified", "additions": 113, "deletions": 33, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -101,54 +101,133 @@ fn run_mode(cfg: &mut compiletest::Config) {\n     compiletest::run_tests(&cfg);\n }\n \n-#[allow(clippy::identity_conversion)]\n-fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<tester::TestDescAndFn>) -> Result<bool, io::Error> {\n-    let mut result = true;\n-    let opts = compiletest::test_opts(config);\n-    for dir in fs::read_dir(&config.src_base)? {\n-        let dir = dir?;\n-        if !dir.file_type()?.is_dir() {\n-            continue;\n-        }\n-        let dir_path = dir.path();\n-        set_var(\"CARGO_MANIFEST_DIR\", &dir_path);\n-        for file in fs::read_dir(&dir_path)? {\n-            let file = file?;\n-            let file_path = file.path();\n-            if file.file_type()?.is_dir() {\n+fn run_ui_toml(config: &mut compiletest::Config) {\n+    fn run_tests(config: &compiletest::Config, mut tests: Vec<tester::TestDescAndFn>) -> Result<bool, io::Error> {\n+        let mut result = true;\n+        let opts = compiletest::test_opts(config);\n+        for dir in fs::read_dir(&config.src_base)? {\n+            let dir = dir?;\n+            if !dir.file_type()?.is_dir() {\n                 continue;\n             }\n-            if file_path.extension() != Some(OsStr::new(\"rs\")) {\n-                continue;\n+            let dir_path = dir.path();\n+            set_var(\"CARGO_MANIFEST_DIR\", &dir_path);\n+            for file in fs::read_dir(&dir_path)? {\n+                let file = file?;\n+                let file_path = file.path();\n+                if file.file_type()?.is_dir() {\n+                    continue;\n+                }\n+                if file_path.extension() != Some(OsStr::new(\"rs\")) {\n+                    continue;\n+                }\n+                let paths = compiletest::common::TestPaths {\n+                    file: file_path,\n+                    base: config.src_base.clone(),\n+                    relative_dir: dir_path.file_name().unwrap().into(),\n+                };\n+                let test_name = compiletest::make_test_name(&config, &paths);\n+                let index = tests\n+                    .iter()\n+                    .position(|test| test.desc.name == test_name)\n+                    .expect(\"The test should be in there\");\n+                result &= tester::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n             }\n-            let paths = compiletest::common::TestPaths {\n-                file: file_path,\n-                base: config.src_base.clone(),\n-                relative_dir: dir_path.file_name().unwrap().into(),\n-            };\n-            let test_name = compiletest::make_test_name(&config, &paths);\n-            let index = tests\n-                .iter()\n-                .position(|test| test.desc.name == test_name)\n-                .expect(\"The test should be in there\");\n-            result &= tester::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n         }\n+        Ok(result)\n     }\n-    Ok(result)\n-}\n \n-fn run_ui_toml(config: &mut compiletest::Config) {\n     config.mode = TestMode::Ui;\n     config.src_base = Path::new(\"tests\").join(\"ui-toml\").canonicalize().unwrap();\n \n     let tests = compiletest::make_tests(&config);\n \n-    let res = run_ui_toml_tests(&config, tests);\n+    let res = run_tests(&config, tests);\n+    match res {\n+        Ok(true) => {},\n+        Ok(false) => panic!(\"Some tests failed\"),\n+        Err(e) => {\n+            panic!(\"I/O failure during tests: {:?}\", e);\n+        },\n+    }\n+}\n+\n+fn run_ui_cargo(config: &mut compiletest::Config) {\n+    fn run_tests(\n+        config: &compiletest::Config,\n+        filter: &Option<String>,\n+        mut tests: Vec<tester::TestDescAndFn>,\n+    ) -> Result<bool, io::Error> {\n+        let mut result = true;\n+        let opts = compiletest::test_opts(config);\n+\n+        for dir in fs::read_dir(&config.src_base)? {\n+            let dir = dir?;\n+            if !dir.file_type()?.is_dir() {\n+                continue;\n+            }\n+\n+            // Use the filter if provided\n+            let dir_path = dir.path();\n+            match &filter {\n+                Some(name) if !dir_path.ends_with(name) => continue,\n+                _ => {},\n+            }\n+\n+            for case in fs::read_dir(&dir_path)? {\n+                let case = case?;\n+                if !case.file_type()?.is_dir() {\n+                    continue;\n+                }\n+\n+                let src_path = case.path().join(\"src\");\n+                env::set_current_dir(&src_path)?;\n+\n+                for file in fs::read_dir(&src_path)? {\n+                    let file = file?;\n+                    if file.file_type()?.is_dir() {\n+                        continue;\n+                    }\n+\n+                    // Search for the main file to avoid running a test for each file in the project\n+                    let file_path = file.path();\n+                    match file_path.file_name().and_then(OsStr::to_str) {\n+                        Some(\"main.rs\") => {},\n+                        _ => continue,\n+                    }\n+\n+                    let paths = compiletest::common::TestPaths {\n+                        file: file_path,\n+                        base: config.src_base.clone(),\n+                        relative_dir: src_path.strip_prefix(&config.src_base).unwrap().into(),\n+                    };\n+                    let test_name = compiletest::make_test_name(&config, &paths);\n+                    let index = tests\n+                        .iter()\n+                        .position(|test| test.desc.name == test_name)\n+                        .expect(\"The test should be in there\");\n+                    result &= tester::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n+                }\n+            }\n+        }\n+        Ok(result)\n+    }\n+\n+    config.mode = TestMode::Ui;\n+    config.src_base = Path::new(\"tests\").join(\"ui-cargo\").canonicalize().unwrap();\n+\n+    let tests = compiletest::make_tests(&config);\n+\n+    let current_dir = env::current_dir().unwrap();\n+    let filter = env::var(\"TESTNAME\").ok();\n+    let res = run_tests(&config, &filter, tests);\n+    env::set_current_dir(current_dir).unwrap();\n+\n     match res {\n         Ok(true) => {},\n         Ok(false) => panic!(\"Some tests failed\"),\n         Err(e) => {\n-            println!(\"I/O failure during tests: {:?}\", e);\n+            panic!(\"I/O failure during tests: {:?}\", e);\n         },\n     }\n }\n@@ -165,4 +244,5 @@ fn compile_test() {\n     let mut config = default_config();\n     run_mode(&mut config);\n     run_ui_toml(&mut config);\n+    run_ui_cargo(&mut config);\n }"}, {"sha": "c64adcf7c013154d895e6f8811d8f65b7ecb53d8", "filename": "tests/ui-cargo/cargo_common_metadata/fail/Cargo.toml", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2FCargo.toml?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,4 @@\n+[package]\n+name = \"cargo_common_metadata\"\n+version = \"0.1.0\"\n+publish = false"}, {"sha": "c67166fc4b0074c1413b57574391ff56466e0f3b", "filename": "tests/ui-cargo/cargo_common_metadata/fail/src/main.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2Fsrc%2Fmain.rs?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,3 @@\n+#![warn(clippy::cargo_common_metadata)]\n+\n+fn main() {}"}, {"sha": "c8ae6c820df9de4de3f3561451d27e97c9416563", "filename": "tests/ui-cargo/cargo_common_metadata/fail/src/main.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2Fsrc%2Fmain.stderr?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,18 @@\n+error: package `cargo_common_metadata` is missing `package.authors` metadata\n+   |\n+   = note: `-D clippy::cargo-common-metadata` implied by `-D warnings`\n+\n+error: package `cargo_common_metadata` is missing `package.description` metadata\n+\n+error: package `cargo_common_metadata` is missing `either package.license or package.license_file` metadata\n+\n+error: package `cargo_common_metadata` is missing `package.repository` metadata\n+\n+error: package `cargo_common_metadata` is missing `package.readme` metadata\n+\n+error: package `cargo_common_metadata` is missing `package.keywords` metadata\n+\n+error: package `cargo_common_metadata` is missing `package.categories` metadata\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "c8233f328bb05a49de5cdfa5b7e7fba41e5b14be", "filename": "tests/ui-cargo/cargo_common_metadata/pass/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass%2FCargo.toml?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"cargo_common_metadata\"\n+version = \"0.1.0\"\n+publish = false\n+authors = [\"Random person from the Internet <someone@someplace.org>\"]\n+description = \"A test package for the cargo_common_metadata lint\"\n+repository = \"https://github.com/someone/cargo_common_metadata\"\n+readme = \"README.md\"\n+license = \"MIT OR Apache-2.0\"\n+keywords = [\"metadata\", \"lint\", \"clippy\"]\n+categories = [\"development-tools::testing\"]"}, {"sha": "c67166fc4b0074c1413b57574391ff56466e0f3b", "filename": "tests/ui-cargo/cargo_common_metadata/pass/src/main.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass%2Fsrc%2Fmain.rs?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,3 @@\n+#![warn(clippy::cargo_common_metadata)]\n+\n+fn main() {}"}, {"sha": "3a94b723f3fdbd02355135b49d6720c4eb2411e2", "filename": "tests/ui-cargo/multiple_crate_versions/fail/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2FCargo.toml?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"multiple_crate_versions\"\n+version = \"0.1.0\"\n+publish = false\n+\n+[dependencies]\n+ctrlc = \"=3.1.0\"\n+ansi_term = \"=0.11.0\""}, {"sha": "4bc61dd62992f3e76a7cd504a7baa0d7e44707a7", "filename": "tests/ui-cargo/multiple_crate_versions/fail/src/main.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2Fsrc%2Fmain.rs?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,3 @@\n+#![warn(clippy::multiple_crate_versions)]\n+\n+fn main() {}"}, {"sha": "4f668599be950ffbae42e0af7bbd8c30f99887fa", "filename": "tests/ui-cargo/multiple_crate_versions/fail/src/main.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2Fsrc%2Fmain.stderr?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,6 @@\n+error: multiple versions for dependency `winapi`: 0.2.8, 0.3.8\n+   |\n+   = note: `-D clippy::multiple-crate-versions` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a9b06420b333da3a7ee0cbdd0e3e751abd829b81", "filename": "tests/ui-cargo/multiple_crate_versions/pass/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fmultiple_crate_versions%2Fpass%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fmultiple_crate_versions%2Fpass%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fmultiple_crate_versions%2Fpass%2FCargo.toml?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"cargo_common_metadata\"\n+version = \"0.1.0\"\n+publish = false\n+\n+[dependencies]\n+regex = \"1.3.7\"\n+serde = \"1.0.110\""}, {"sha": "4bc61dd62992f3e76a7cd504a7baa0d7e44707a7", "filename": "tests/ui-cargo/multiple_crate_versions/pass/src/main.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fmultiple_crate_versions%2Fpass%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fmultiple_crate_versions%2Fpass%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fmultiple_crate_versions%2Fpass%2Fsrc%2Fmain.rs?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,3 @@\n+#![warn(clippy::multiple_crate_versions)]\n+\n+fn main() {}"}, {"sha": "7028b251ea0307bb669524afb702a8d62a038924", "filename": "tests/ui-cargo/update-all-references.sh", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fupdate-all-references.sh?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,18 @@\n+#!/bin/bash\n+#\n+# A script to update the references for all tests. The idea is that\n+# you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. You then\n+# run this script, which will copy those files over. If you find\n+# yourself manually editing a foo.stderr file, you're doing it wrong.\n+#\n+# See all `update-references.sh`, if you just want to update a single test.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" ]]; then\n+    echo \"usage: $0\"\n+fi\n+\n+BUILD_DIR=$PWD/target/debug/test_build_base\n+MY_DIR=$(dirname \"$0\")\n+cd \"$MY_DIR\" || exit\n+find . -name '*.rs' -exec ./update-references.sh \"$BUILD_DIR\" {} +"}, {"sha": "50d42678734e9caca32b8d6c806ed576f4b04a8e", "filename": "tests/ui-cargo/update-references.sh", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fupdate-references.sh?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,38 @@\n+#!/bin/bash\n+\n+# A script to update the references for particular tests. The idea is\n+# that you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. This\n+# script will then copy that output and replace the \"expected output\"\n+# files. You can then commit the changes.\n+#\n+# If you find yourself manually editing a foo.stderr file, you're\n+# doing it wrong.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n+    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n+    echo \"\"\n+    echo \"For example:\"\n+    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n+fi\n+\n+MYDIR=$(dirname \"$0\")\n+\n+BUILD_DIR=\"$1\"\n+shift\n+\n+while [[ \"$1\" != \"\" ]]; do\n+    STDERR_NAME=\"${1/%.rs/.stderr}\"\n+    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n+    shift\n+    if [[ -f \"$BUILD_DIR\"/\"$STDOUT_NAME\" ]] && \\\n+           ! (cmp -s -- \"$BUILD_DIR\"/\"$STDOUT_NAME\" \"$MYDIR\"/\"$STDOUT_NAME\"); then\n+        echo updating \"$MYDIR\"/\"$STDOUT_NAME\"\n+        cp \"$BUILD_DIR\"/\"$STDOUT_NAME\" \"$MYDIR\"/\"$STDOUT_NAME\"\n+    fi\n+    if [[ -f \"$BUILD_DIR\"/\"$STDERR_NAME\" ]] && \\\n+           ! (cmp -s -- \"$BUILD_DIR\"/\"$STDERR_NAME\" \"$MYDIR\"/\"$STDERR_NAME\"); then\n+        echo updating \"$MYDIR\"/\"$STDERR_NAME\"\n+        cp \"$BUILD_DIR\"/\"$STDERR_NAME\" \"$MYDIR\"/\"$STDERR_NAME\"\n+    fi\n+done"}, {"sha": "fd2a341485683d6effcd79e3f45ef98a65b508d0", "filename": "tests/ui-cargo/wildcard_dependencies/fail/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fwildcard_dependencies%2Ffail%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fwildcard_dependencies%2Ffail%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fwildcard_dependencies%2Ffail%2FCargo.toml?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"wildcard_dependencies\"\n+version = \"0.1.0\"\n+publish = false\n+\n+[dependencies]\n+regex = \"*\""}, {"sha": "3491ccb0d47d5ea1b1a49d9b2d91ff83551ea39e", "filename": "tests/ui-cargo/wildcard_dependencies/fail/src/main.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fwildcard_dependencies%2Ffail%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fwildcard_dependencies%2Ffail%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fwildcard_dependencies%2Ffail%2Fsrc%2Fmain.rs?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,3 @@\n+#![warn(clippy::wildcard_dependencies)]\n+\n+fn main() {}"}, {"sha": "9e65d2f99420a1c56c03d1c4073a0e8de6ced801", "filename": "tests/ui-cargo/wildcard_dependencies/fail/src/main.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fwildcard_dependencies%2Ffail%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fwildcard_dependencies%2Ffail%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fwildcard_dependencies%2Ffail%2Fsrc%2Fmain.stderr?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,6 @@\n+error: wildcard dependency for `regex`\n+   |\n+   = note: `-D clippy::wildcard-dependencies` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "38cb139146e0563f6ab556af93278c35fc586ac7", "filename": "tests/ui-cargo/wildcard_dependencies/pass/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fwildcard_dependencies%2Fpass%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fwildcard_dependencies%2Fpass%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fwildcard_dependencies%2Fpass%2FCargo.toml?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"wildcard_dependencies\"\n+version = \"0.1.0\"\n+publish = false\n+\n+[dependencies]\n+regex = \"1\""}, {"sha": "3491ccb0d47d5ea1b1a49d9b2d91ff83551ea39e", "filename": "tests/ui-cargo/wildcard_dependencies/pass/src/main.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fwildcard_dependencies%2Fpass%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780572bc8df23d7141545e06cccc561fd586f2b7/tests%2Fui-cargo%2Fwildcard_dependencies%2Fpass%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fwildcard_dependencies%2Fpass%2Fsrc%2Fmain.rs?ref=780572bc8df23d7141545e06cccc561fd586f2b7", "patch": "@@ -0,0 +1,3 @@\n+#![warn(clippy::wildcard_dependencies)]\n+\n+fn main() {}"}]}