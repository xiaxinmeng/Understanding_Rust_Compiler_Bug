{"sha": "b3ed38f2196e8636f9f295da8d06c6921db183fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZWQzOGYyMTk2ZTg2MzZmOWYyOTVkYThkMDZjNjkyMWRiMTgzZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-18T10:51:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-18T10:51:49Z"}, "message": "auto merge of #12345 : huonw/rust/speeling, r=cmr", "tree": {"sha": "02968a54be00a4a213dece5f5900230809ce7f5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02968a54be00a4a213dece5f5900230809ce7f5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3ed38f2196e8636f9f295da8d06c6921db183fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ed38f2196e8636f9f295da8d06c6921db183fe", "html_url": "https://github.com/rust-lang/rust/commit/b3ed38f2196e8636f9f295da8d06c6921db183fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3ed38f2196e8636f9f295da8d06c6921db183fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e60084257ca6f264610544964bf553f1feba83b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e60084257ca6f264610544964bf553f1feba83b", "html_url": "https://github.com/rust-lang/rust/commit/1e60084257ca6f264610544964bf553f1feba83b"}, {"sha": "6555b04dd2fbcd18c8fa8beb2bebc4b81febc6b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6555b04dd2fbcd18c8fa8beb2bebc4b81febc6b0", "html_url": "https://github.com/rust-lang/rust/commit/6555b04dd2fbcd18c8fa8beb2bebc4b81febc6b0"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "edf5bb63b300421eebb3f153beaaba0555d6ef48", "filename": "src/libextra/json.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=b3ed38f2196e8636f9f295da8d06c6921db183fe", "patch": "@@ -125,7 +125,7 @@ fn main() {\n }\n ```\n \n-To decode a json string using `Decodable` trait :\n+To decode a JSON string using `Decodable` trait :\n \n ```rust\n extern crate serialize;\n@@ -172,7 +172,7 @@ fn main() {\n          {data_int: 1, data_str:~\"toto\", data_vector:~[2,3,4,5]};\n     let encoded_str: ~str = json::Encoder::str_encode(&to_encode_object);\n \n-    // To unserialize use the `extra::json::from_str` and `extra::json::Decoder`\n+    // To deserialize use the `extra::json::from_str` and `extra::json::Decoder`\n \n     let json_object = extra::json::from_str(encoded_str);\n     let mut decoder = json::Decoder::new(json_object.unwrap());\n@@ -182,7 +182,7 @@ fn main() {\n \n ## Using `ToJson`\n \n-This example use the ToJson impl to unserialize the json string.\n+This example use the ToJson impl to deserialize the JSON string.\n Example of `ToJson` trait implementation for TestStruct1.\n \n ```rust\n@@ -212,13 +212,13 @@ impl ToJson for TestStruct1 {\n }\n \n fn main() {\n-    // Seralization using our impl of to_json\n+    // Serialization using our impl of to_json\n \n     let test2: TestStruct1 = TestStruct1 {data_int: 1, data_str:~\"toto\", data_vector:~[2,3,4,5]};\n     let tjson: json::Json = test2.to_json();\n     let json_str: ~str = tjson.to_str();\n \n-    // Unserialize like before.\n+    // Deserialize like before.\n \n     let mut decoder = json::Decoder::new(json::from_str(json_str).unwrap());\n     // create the final object"}, {"sha": "fe397c30ab581f5921d3bf36af0a45ccf1edf050", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=b3ed38f2196e8636f9f295da8d06c6921db183fe", "patch": "@@ -1110,7 +1110,7 @@ impl MetricMap {\n \n // Benchmarking\n \n-/// A function that is opaque to the optimiser, to allow benchmarks to\n+/// A function that is opaque to the optimizer, to allow benchmarks to\n /// pretend to use outputs to assist in avoiding dead-code\n /// elimination.\n ///"}, {"sha": "a966dff000ae0b2a3ae6047652ed012550a55e56", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=b3ed38f2196e8636f9f295da8d06c6921db183fe", "patch": "@@ -86,7 +86,7 @@ pub struct Scheduler {\n     /// A flag to tell the scheduler loop it needs to do some stealing\n     /// in order to introduce randomness as part of a yield\n     steal_for_yield: bool,\n-    /// Bookeeping for the number of tasks which are currently running around\n+    /// Bookkeeping for the number of tasks which are currently running around\n     /// inside this pool of schedulers\n     task_state: TaskState,\n "}, {"sha": "02066086ad7735d316c6d69b48fccd4198bcf932", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=b3ed38f2196e8636f9f295da8d06c6921db183fe", "patch": "@@ -144,7 +144,7 @@ impl Select {\n         }\n     }\n \n-    /// Waits for an event on this port set. The returned valus is *not* and\n+    /// Waits for an event on this port set. The returned value is *not* an\n     /// index, but rather an id. This id can be queried against any active\n     /// `Handle` structures (each one has an `id` method). The handle with\n     /// the matching `id` will have some sort of event available on it. The"}, {"sha": "2eadf9a7f4fc69de81b22b493a5f39aba1fdc44a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b3ed38f2196e8636f9f295da8d06c6921db183fe", "patch": "@@ -1287,7 +1287,7 @@ pub trait Acceptor<T> {\n ///\n /// Since connection attempts can continue forever, this iterator always returns\n /// `Some`. The `Some` contains the `IoResult` representing whether the\n-/// connection attempt was succesful.  A successful connection will be wrapped\n+/// connection attempt was successful.  A successful connection will be wrapped\n /// in `Ok`. A failed connection is represented as an `Err`.\n pub struct IncomingConnections<'a, A> {\n     priv inc: &'a mut A,"}, {"sha": "7516a3ddf543eb1a802e3d5f10d7e603aff647a6", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=b3ed38f2196e8636f9f295da8d06c6921db183fe", "patch": "@@ -883,7 +883,7 @@ pub trait OrdIterator<A> {\n     /// ```\n     fn min(&mut self) -> Option<A>;\n \n-    /// `min_max` finds the mininum and maximum elements in the iterator.\n+    /// `min_max` finds the minimum and maximum elements in the iterator.\n     ///\n     /// The return type `MinMaxResult` is an enum of three variants:\n     /// - `NoElements` if the iterator is empty."}, {"sha": "72ba98eab4f7dacdacd3c7e6e1480ed62e68f5bb", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=b3ed38f2196e8636f9f295da8d06c6921db183fe", "patch": "@@ -254,7 +254,7 @@ impl Task {\n         ops.deschedule(amt, self, f)\n     }\n \n-    /// Wakes up a previously blocked task, optionally specifiying whether the\n+    /// Wakes up a previously blocked task, optionally specifying whether the\n     /// current task can accept a change in scheduling. This function can only\n     /// be called on tasks that were previously blocked in `deschedule`.\n     pub fn reawaken(mut ~self) {"}, {"sha": "ef8bd94c89766f1883ff51eb4bbfc2502eb2f652", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=b3ed38f2196e8636f9f295da8d06c6921db183fe", "patch": "@@ -400,7 +400,7 @@ pub fn begin_unwind_raw(msg: *u8, file: *u8, line: uint) -> ! {\n /// The entry point for unwinding with a formatted message.\n ///\n /// This is designed to reduce the amount of code required at the call\n-/// site as much as possible (so that `fail!()` has as low an implact\n+/// site as much as possible (so that `fail!()` has as low an impact\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n #[inline(never)] #[cold]"}, {"sha": "2dc63380cb8902c39712cf3307024b21f56fd7f3", "filename": "src/libstd/sync/mpsc_queue.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibstd%2Fsync%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibstd%2Fsync%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc_queue.rs?ref=b3ed38f2196e8636f9f295da8d06c6921db183fe", "patch": "@@ -104,7 +104,7 @@ impl<T: Send> Queue<T> {\n     ///\n     /// Note that the current implementation means that this function cannot\n     /// return `Option<T>`. It is possible for this queue to be in an\n-    /// inconsistent state where many pushes have suceeded and completely\n+    /// inconsistent state where many pushes have succeeded and completely\n     /// finished, but pops cannot return `Some(t)`. This inconsistent state\n     /// happens when a pusher is pre-empted at an inopportune moment.\n     ///\n@@ -203,4 +203,3 @@ mod tests {\n         }\n     }\n }\n-"}, {"sha": "923f12ed1d19aac4db99fd1eb296469782a0e548", "filename": "src/libsync/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibsync%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ed38f2196e8636f9f295da8d06c6921db183fe/src%2Flibsync%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fsync%2Fmutex.rs?ref=b3ed38f2196e8636f9f295da8d06c6921db183fe", "patch": "@@ -460,7 +460,7 @@ impl Mutex {\n \n     /// Acquires a mutex, blocking the current task until it is able to do so.\n     ///\n-    /// This function will block the local task until it is availble to acquire\n+    /// This function will block the local task until it is available to acquire\n     /// the mutex. Upon returning, the task is the only task with the mutex\n     /// held. An RAII guard is returned to allow scoped unlock of the lock. When\n     /// the guard goes out of scope, the mutex will be unlocked."}]}