{"sha": "6ae803eedfeb57944cd0d2930d9a8b7a606baf4a", "node_id": "C_kwDOAAsO6NoAKDZhZTgwM2VlZGZlYjU3OTQ0Y2QwZDI5MzBkOWE4YjdhNjA2YmFmNGE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-04-18T14:09:48Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-12T10:26:07Z"}, "message": "add `query opaque_types_defined_by`", "tree": {"sha": "2f61c61689f81c0bf35f1de007982c325114855a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f61c61689f81c0bf35f1de007982c325114855a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ae803eedfeb57944cd0d2930d9a8b7a606baf4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae803eedfeb57944cd0d2930d9a8b7a606baf4a", "html_url": "https://github.com/rust-lang/rust/commit/6ae803eedfeb57944cd0d2930d9a8b7a606baf4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ae803eedfeb57944cd0d2930d9a8b7a606baf4a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2daccc4acbb7a3150e1aef32f8cbe2736e5bd99", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2daccc4acbb7a3150e1aef32f8cbe2736e5bd99", "html_url": "https://github.com/rust-lang/rust/commit/e2daccc4acbb7a3150e1aef32f8cbe2736e5bd99"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "5acdd68e60eac32677005de79ee75124f1efd483", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ae803eedfeb57944cd0d2930d9a8b7a606baf4a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae803eedfeb57944cd0d2930d9a8b7a606baf4a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=6ae803eedfeb57944cd0d2930d9a8b7a606baf4a", "patch": "@@ -236,6 +236,15 @@ rustc_queries! {\n         cache_on_disk_if { key.is_local() }\n     }\n \n+    query opaque_types_defined_by(\n+        key: LocalDefId\n+    ) -> &'tcx [LocalDefId] {\n+        desc {\n+            |tcx| \"computing the opaque types defined by `{}`\",\n+            tcx.def_path_str(key.to_def_id())\n+        }\n+    }\n+\n     /// Returns the list of bounds that can be used for\n     /// `SelectionCandidate::ProjectionCandidate(_)` and\n     /// `ProjectionTyCandidate::TraitDef`."}, {"sha": "8306c5ae49360c82ea5e0e2a1196ad083652085b", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae803eedfeb57944cd0d2930d9a8b7a606baf4a/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae803eedfeb57944cd0d2930d9a8b7a606baf4a/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=6ae803eedfeb57944cd0d2930d9a8b7a606baf4a", "patch": "@@ -33,6 +33,7 @@ pub mod instance;\n mod layout;\n mod layout_sanity_check;\n mod needs_drop;\n+mod opaque_types;\n pub mod representability;\n mod structural_match;\n mod ty;\n@@ -47,6 +48,7 @@ pub fn provide(providers: &mut Providers) {\n     implied_bounds::provide(providers);\n     layout::provide(providers);\n     needs_drop::provide(providers);\n+    opaque_types::provide(providers);\n     representability::provide(providers);\n     ty::provide(providers);\n     instance::provide(providers);"}, {"sha": "cdb8e4a439d941f388c1f10b87d0b8b035386b2f", "filename": "compiler/rustc_ty_utils/src/opaque_types.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/6ae803eedfeb57944cd0d2930d9a8b7a606baf4a/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae803eedfeb57944cd0d2930d9a8b7a606baf4a/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs?ref=6ae803eedfeb57944cd0d2930d9a8b7a606baf4a", "patch": "@@ -0,0 +1,80 @@\n+use rustc_hir::{def::DefKind, def_id::LocalDefId};\n+use rustc_middle::ty::util::CheckRegions;\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_type_ir::AliasKind;\n+use std::ops::ControlFlow;\n+\n+struct OpaqueTypeCollector<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    opaques: Vec<LocalDefId>,\n+}\n+\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeCollector<'tcx> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<!> {\n+        match t.kind() {\n+            ty::Alias(AliasKind::Opaque, alias_ty) => {\n+                if let Some(def_id) = alias_ty.def_id.as_local() {\n+                    if self\n+                        .tcx\n+                        .uses_unique_generic_params(alias_ty.substs, CheckRegions::OnlyEarlyBound)\n+                        .is_ok()\n+                    {\n+                        self.opaques.push(def_id);\n+                        return ControlFlow::Continue(());\n+                    } else {\n+                        warn!(?t, \"opaque types with non-unique params in sig: {t:?}\");\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        t.super_visit_with(self)\n+    }\n+}\n+\n+fn opaque_types_defined_by<'tcx>(tcx: TyCtxt<'tcx>, item: LocalDefId) -> &'tcx [LocalDefId] {\n+    // FIXME(type_alias_impl_trait): This is definitely still wrong except for RPIT.\n+    match tcx.def_kind(item) {\n+        DefKind::Fn | DefKind::AssocFn => {\n+            let sig = tcx.fn_sig(item).subst_identity();\n+            let mut collector = OpaqueTypeCollector { tcx, opaques: Vec::new() };\n+            sig.visit_with(&mut collector);\n+            tcx.arena.alloc_from_iter(collector.opaques)\n+        }\n+        DefKind::Mod\n+        | DefKind::Struct\n+        | DefKind::Union\n+        | DefKind::Enum\n+        | DefKind::Variant\n+        | DefKind::Trait\n+        | DefKind::TyAlias\n+        | DefKind::ForeignTy\n+        | DefKind::TraitAlias\n+        | DefKind::AssocTy\n+        | DefKind::TyParam\n+        | DefKind::Const\n+        | DefKind::ConstParam\n+        | DefKind::Static(_)\n+        | DefKind::Ctor(_, _)\n+        | DefKind::AssocConst\n+        | DefKind::Macro(_)\n+        | DefKind::ExternCrate\n+        | DefKind::Use\n+        | DefKind::ForeignMod\n+        | DefKind::AnonConst\n+        | DefKind::InlineConst\n+        | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n+        | DefKind::Field\n+        | DefKind::LifetimeParam\n+        | DefKind::GlobalAsm\n+        | DefKind::Impl { .. }\n+        | DefKind::Closure\n+        | DefKind::Generator => &[],\n+    }\n+}\n+\n+pub(super) fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers { opaque_types_defined_by, ..*providers };\n+}"}]}