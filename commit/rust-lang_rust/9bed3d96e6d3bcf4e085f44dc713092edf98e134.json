{"sha": "9bed3d96e6d3bcf4e085f44dc713092edf98e134", "node_id": "C_kwDOAAsO6NoAKDliZWQzZDk2ZTZkM2JjZjRlMDg1ZjQ0ZGM3MTMwOTJlZGY5OGUxMzQ", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-09T23:05:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-09T23:05:36Z"}, "message": "Rollup merge of #106640 - lcnr:update-test, r=jackh726\n\nupdate test for inductive canonical cycles\n\nthe previous test always resulted in a cycle :sweat_smile: cc https://github.com/rust-lang/chalk/pull/787.\n\nI checked with #102713 and this is the only test which fails with that PR.\n\nr? ``@jackh726``", "tree": {"sha": "8bb8f5d38e732ac7ddfbf899ac2885951aa633ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bb8f5d38e732ac7ddfbf899ac2885951aa633ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bed3d96e6d3bcf4e085f44dc713092edf98e134", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvJ3ACRBK7hj4Ov3rIwAAaKUIAHGVnrULOO4GKtLUtzx9iIGs\n6EMpqDRQkUTnK8id19v7QED5GYabcH08Z9grE+88p3o65xlkA7xe2psFY7564it3\nX3aiZRbu4WkHrT1IhweC0ehdwODJPdNazFobLU1ekUO3WyyeWPAdpt6rD3hCEMDt\ndsyckxpAHU5HKJFITcF9DaSa3cyLb/l8PrJCnYs1Ulh7T5XG4KVraiB4jTYFtnkW\np0IUnQPZGGCPCiriYOy029Ds8gdHkPBQ5BVwyr04Mk6TE+/wbowE7oIF8WrtyoSA\nuD6Jsfkfto7zzEI0a1Vm0Ai0jhnTggTM7Szmpa9bvXq/Rad+jNIKV/SKuLYdnnw=\n=6hoj\n-----END PGP SIGNATURE-----\n", "payload": "tree 8bb8f5d38e732ac7ddfbf899ac2885951aa633ce\nparent 0ba27de3ac0a33e8d6b082e7ebef44b601b038f4\nparent 31099ee3840f26c59b5f9057001fd656284deb81\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673305536 +0900\ncommitter GitHub <noreply@github.com> 1673305536 +0900\n\nRollup merge of #106640 - lcnr:update-test, r=jackh726\n\nupdate test for inductive canonical cycles\n\nthe previous test always resulted in a cycle :sweat_smile: cc https://github.com/rust-lang/chalk/pull/787.\n\nI checked with #102713 and this is the only test which fails with that PR.\n\nr? ``@jackh726``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bed3d96e6d3bcf4e085f44dc713092edf98e134", "html_url": "https://github.com/rust-lang/rust/commit/9bed3d96e6d3bcf4e085f44dc713092edf98e134", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bed3d96e6d3bcf4e085f44dc713092edf98e134/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "html_url": "https://github.com/rust-lang/rust/commit/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4"}, {"sha": "31099ee3840f26c59b5f9057001fd656284deb81", "url": "https://api.github.com/repos/rust-lang/rust/commits/31099ee3840f26c59b5f9057001fd656284deb81", "html_url": "https://github.com/rust-lang/rust/commit/31099ee3840f26c59b5f9057001fd656284deb81"}], "stats": {"total": 101, "additions": 58, "deletions": 43}, "files": [{"sha": "5449f5f00d52a8699d7132f7b7e86ce3bf5f8cc7", "filename": "src/test/ui/traits/solver-cycles/inductive-canonical-cycle.rs", "status": "modified", "additions": 58, "deletions": 17, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9bed3d96e6d3bcf4e085f44dc713092edf98e134/src%2Ftest%2Fui%2Ftraits%2Fsolver-cycles%2Finductive-canonical-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bed3d96e6d3bcf4e085f44dc713092edf98e134/src%2Ftest%2Fui%2Ftraits%2Fsolver-cycles%2Finductive-canonical-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsolver-cycles%2Finductive-canonical-cycle.rs?ref=9bed3d96e6d3bcf4e085f44dc713092edf98e134", "patch": "@@ -1,28 +1,69 @@\n-// known-bug\n+// check-pass\n+\n+// This test checks that we're correctly dealing with inductive cycles\n+// with canonical inference variables.\n \n-// This should compile but fails with the current solver.\n-//\n-// This checks that the new solver uses `Ambiguous` when hitting the\n-// inductive cycle here when proving `exists<^0, ^1> (): Trait<^0, ^1>`\n-// which requires proving `Trait<?1, ?0>` but that has the same\n-// canonical representation.\n trait Trait<T, U> {}\n \n-impl<T, U> Trait<T, U> for ()\n+trait IsNotU32 {}\n+impl IsNotU32 for i32 {}\n+impl<T: IsNotU32, U> Trait<T, U> for () // impl 1\n where\n-    (): Trait<U, T>,\n-    T: OtherTrait,\n+    (): Trait<U, T>\n {}\n \n-trait OtherTrait {}\n-impl OtherTrait for u32 {}\n+impl<T> Trait<u32, T> for () {} // impl 2\n+\n+// If we now check whether `(): Trait<?0, ?1>` holds this has to\n+// result in ambiguity as both `for<T> (): Trait<u32, T>` and `(): Trait<i32, u32>`\n+// applies. The remainder of this test asserts that.\n+\n+// If we were to error on inductive cycles with canonical inference variables\n+// this would be wrong:\n \n-fn require_trait<T, U>()\n+// (): Trait<?0, ?1>\n+//  - impl 1\n+//      - ?0: IsNotU32 // ambig\n+//      - (): Trait<?1, ?0> // canonical cycle -> err\n+//      - ERR\n+//  - impl 2\n+//      - OK ?0 == u32\n+//\n+// Result: OK ?0 == u32.\n+\n+// (): Trait<i32, u32>\n+//  - impl 1\n+//      - i32: IsNotU32 // ok\n+//      - (): Trait<u32, i32>\n+//          - impl 1\n+//              - u32: IsNotU32 // err\n+//              - ERR\n+//          - impl 2\n+//              - OK\n+//      - OK\n+//  - impl 2 (trivial ERR)\n+//\n+// Result OK\n+\n+// This would mean that `(): Trait<?0, ?1>` is not complete,\n+// which is unsound if we're in coherence.\n+\n+fn implements_trait<T, U>() -> (T, U)\n where\n-    (): Trait<T, U>\n-{}\n+    (): Trait<T, U>,\n+{\n+    todo!()\n+}\n+\n+// A hack to only constrain the infer vars after first checking\n+// the `(): Trait<_, _>`.\n+trait Constrain<T> {}\n+impl<T> Constrain<T> for  T {}\n+fn constrain<T: Constrain<U>, U>(_: U) {}\n \n fn main() {\n-    require_trait::<_, _>();\n-    //~^ ERROR overflow evaluating\n+    let (x, y) = implements_trait::<_, _>();\n+\n+    constrain::<i32, _>(x);\n+    constrain::<u32, _>(y);\n }"}, {"sha": "e4b84e07822d28c784896071f43f19244aff4da6", "filename": "src/test/ui/traits/solver-cycles/inductive-canonical-cycle.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftest%2Fui%2Ftraits%2Fsolver-cycles%2Finductive-canonical-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftest%2Fui%2Ftraits%2Fsolver-cycles%2Finductive-canonical-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsolver-cycles%2Finductive-canonical-cycle.stderr?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -1,26 +0,0 @@\n-error[E0275]: overflow evaluating the requirement `_: Sized`\n-  --> $DIR/inductive-canonical-cycle.rs:26:5\n-   |\n-LL |     require_trait::<_, _>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`inductive_canonical_cycle`)\n-note: required for `()` to implement `Trait<_, _>`\n-  --> $DIR/inductive-canonical-cycle.rs:11:12\n-   |\n-LL | impl<T, U> Trait<T, U> for ()\n-   |            ^^^^^^^^^^^     ^^\n-   = note: 128 redundant requirements hidden\n-   = note: required for `()` to implement `Trait<_, _>`\n-note: required by a bound in `require_trait`\n-  --> $DIR/inductive-canonical-cycle.rs:22:9\n-   |\n-LL | fn require_trait<T, U>()\n-   |    ------------- required by a bound in this\n-LL | where\n-LL |     (): Trait<T, U>\n-   |         ^^^^^^^^^^^ required by this bound in `require_trait`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0275`."}]}