{"sha": "96905d568a6f1db806d43047a6392c5e2766009e", "node_id": "C_kwDOAAsO6NoAKDk2OTA1ZDU2OGE2ZjFkYjgwNmQ0MzA0N2E2MzkyYzVlMjc2NjAwOWU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-20T18:49:40Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-20T18:49:40Z"}, "message": "Use `impl Tag for $T` syntax for `impl_tag!`", "tree": {"sha": "d0c88ebfa7ca0b750253454fe63c35baf8a93e66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0c88ebfa7ca0b750253454fe63c35baf8a93e66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96905d568a6f1db806d43047a6392c5e2766009e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96905d568a6f1db806d43047a6392c5e2766009e", "html_url": "https://github.com/rust-lang/rust/commit/96905d568a6f1db806d43047a6392c5e2766009e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96905d568a6f1db806d43047a6392c5e2766009e/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77c83c09653f5c4437717e2e8aa7f10c1ff94fe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4", "html_url": "https://github.com/rust-lang/rust/commit/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "c996895936866b0bfd51014c4f11992949abcba5", "filename": "compiler/rustc_data_structures/src/tagged_ptr/impl_tag.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96905d568a6f1db806d43047a6392c5e2766009e/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96905d568a6f1db806d43047a6392c5e2766009e/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs?ref=96905d568a6f1db806d43047a6392c5e2766009e", "patch": "@@ -23,7 +23,7 @@\n ///\n /// impl_tag! {\n ///     // The type for which the `Tag` will be implemented\n-///     for SomeTag;\n+///     impl Tag for SomeTag;\n ///     // You need to specify the `{value_of_the_type} <=> {tag}` relationship\n ///     SomeTag::A <=> 0,\n ///     SomeTag::B <=> 1,\n@@ -54,7 +54,7 @@\n /// struct Flags { a: bool, b: bool }\n ///\n /// impl_tag! {\n-///     for Flags;\n+///     impl Tag for Flags;\n ///     Flags { a: true,  b: true  } <=> 3,\n ///     Flags { a: false, b: true  } <=> 2,\n ///     Flags { a: true,  b: false } <=> 1,\n@@ -73,7 +73,7 @@\n // struct Unit;\n //\n // impl_tag! {\n-//     for Unit;\n+//     impl Tag for Unit;\n //     Unit <=> 0,\n //     Unit <=> 1,\n // }\n@@ -87,7 +87,7 @@\n // enum E { A, B };\n //\n // impl_tag! {\n-//     for E;\n+//     impl Tag for E;\n //     E::A <=> 0,\n //     E::B <=> 0,\n // }\n@@ -104,14 +104,14 @@\n /// }\n ///\n /// impl_tag! {\n-///     for E;\n+///     impl Tag for E;\n ///     E::A <=> 0,\n /// }\n /// ```\n #[macro_export]\n macro_rules! impl_tag {\n     (\n-        for $Self:ty;\n+        impl Tag for $Self:ty;\n         $(\n             $($path:ident)::* $( { $( $fields:tt )* })? <=> $tag:literal,\n         )*"}, {"sha": "cd19b30ff5340e3d156b7d870e0478a70a9922da", "filename": "compiler/rustc_data_structures/src/tagged_ptr/impl_tag/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96905d568a6f1db806d43047a6392c5e2766009e/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96905d568a6f1db806d43047a6392c5e2766009e/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs?ref=96905d568a6f1db806d43047a6392c5e2766009e", "patch": "@@ -4,22 +4,22 @@ fn bits_constant() {\n \n     #[derive(Copy, Clone)]\n     struct Unit;\n-    impl_tag! { for Unit; Unit <=> 0, }\n+    impl_tag! { impl Tag for Unit; Unit <=> 0, }\n     assert_eq!(Unit::BITS, 0);\n \n     #[derive(Copy, Clone)]\n     struct Unit1;\n-    impl_tag! { for Unit1; Unit1 <=> 1, }\n+    impl_tag! { impl Tag for Unit1; Unit1 <=> 1, }\n     assert_eq!(Unit1::BITS, 1);\n \n     #[derive(Copy, Clone)]\n     struct Unit2;\n-    impl_tag! { for Unit2; Unit2 <=> 0b10, }\n+    impl_tag! { impl Tag for Unit2; Unit2 <=> 0b10, }\n     assert_eq!(Unit2::BITS, 2);\n \n     #[derive(Copy, Clone)]\n     struct Unit3;\n-    impl_tag! { for Unit3; Unit3 <=> 0b100, }\n+    impl_tag! { impl Tag for Unit3; Unit3 <=> 0b100, }\n     assert_eq!(Unit3::BITS, 3);\n \n     #[derive(Copy, Clone)]\n@@ -28,6 +28,6 @@ fn bits_constant() {\n         B,\n         C,\n     }\n-    impl_tag! { for Enum; Enum::A <=> 0b1, Enum::B <=> 0b1000, Enum::C <=> 0b10, }\n+    impl_tag! { impl Tag for Enum; Enum::A <=> 0b1, Enum::B <=> 0b1000, Enum::C <=> 0b10, }\n     assert_eq!(Enum::BITS, 4);\n }"}, {"sha": "d13c71b78e46631d1001e5f0f29336694ae29750", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96905d568a6f1db806d43047a6392c5e2766009e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96905d568a6f1db806d43047a6392c5e2766009e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=96905d568a6f1db806d43047a6392c5e2766009e", "patch": "@@ -1627,7 +1627,7 @@ struct ParamTag {\n }\n \n impl_tag! {\n-    for ParamTag;\n+    impl Tag for ParamTag;\n     ParamTag { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } <=> 0,\n     ParamTag { reveal: traits::Reveal::All,        constness: hir::Constness::NotConst } <=> 1,\n     ParamTag { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const    } <=> 2,"}]}