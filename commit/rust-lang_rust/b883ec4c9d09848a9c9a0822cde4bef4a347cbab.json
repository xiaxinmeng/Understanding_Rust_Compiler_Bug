{"sha": "b883ec4c9d09848a9c9a0822cde4bef4a347cbab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ODNlYzRjOWQwOTg0OGE5YzlhMDgyMmNkZTRiZWY0YTM0N2NiYWI=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-08T00:37:56Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-08T02:53:16Z"}, "message": "Avoid some gotchas with logging macros\n\nI think this is sufficient to eliminate multiple evaluation and the\npossibility of accidental miscompilation from the logging macros.", "tree": {"sha": "56880d5c7818ecd71d41ef8d061bea096b2b7223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56880d5c7818ecd71d41ef8d061bea096b2b7223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b883ec4c9d09848a9c9a0822cde4bef4a347cbab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b883ec4c9d09848a9c9a0822cde4bef4a347cbab", "html_url": "https://github.com/rust-lang/rust/commit/b883ec4c9d09848a9c9a0822cde4bef4a347cbab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b883ec4c9d09848a9c9a0822cde4bef4a347cbab/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0abccc6370a6f943f9f41e6baec444dd3de2182a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0abccc6370a6f943f9f41e6baec444dd3de2182a", "html_url": "https://github.com/rust-lang/rust/commit/0abccc6370a6f943f9f41e6baec444dd3de2182a"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "1eba9585ad661fa8458fd678e10bfbba431871db", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b883ec4c9d09848a9c9a0822cde4bef4a347cbab/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b883ec4c9d09848a9c9a0822cde4bef4a347cbab/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=b883ec4c9d09848a9c9a0822cde4bef4a347cbab", "patch": "@@ -1,9 +1,11 @@\n #include \"rust_internal.h\"\n \n #define KLOG(...)                                 \\\n-  if (_log.is_tracing(rust_log::KERN)) {          \\\n-      log(rust_log::KERN, __VA_ARGS__);           \\\n-  } else\n+  do {                                            \\\n+    if (_log.is_tracing(rust_log::KERN)) {        \\\n+        log(rust_log::KERN, __VA_ARGS__);         \\\n+    }                                             \\\n+  } while(0)\n \n rust_kernel::rust_kernel(rust_srv *srv) :\n     _region(&srv->local_region),"}, {"sha": "3b40869b71c721697202e48b410fcca7f2d9d172", "filename": "src/rt/rust_log.h", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b883ec4c9d09848a9c9a0822cde4bef4a347cbab/src%2Frt%2Frust_log.h", "raw_url": "https://github.com/rust-lang/rust/raw/b883ec4c9d09848a9c9a0822cde4bef4a347cbab/src%2Frt%2Frust_log.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.h?ref=b883ec4c9d09848a9c9a0822cde4bef4a347cbab", "patch": "@@ -1,19 +1,27 @@\n #ifndef RUST_LOG_H\n #define RUST_LOG_H\n \n-#define DLOG(dom, mask, ...)                      \\\n-  if ((dom)->get_log().is_tracing(mask)) {        \\\n-      (dom)->log(mask, __VA_ARGS__);              \\\n-  } else\n-#define LOG(task, mask, ...)                      \\\n+#define DLOG(dom, mask, ...)                         \\\n+  do {                                               \\\n+    rust_dom *_dom = dom;                            \\\n+    uint32_t _mask = mask;                           \\\n+    if ((_dom)->get_log().is_tracing(_mask)) {       \\\n+        (_dom)->log(_mask, __VA_ARGS__);             \\\n+    }                                                \\\n+  } while(0)\n+#define LOG(task, mask, ...)                         \\\n   DLOG((task)->dom, mask, __VA_ARGS__)\n-#define LOG_I(task, mask, ...)                    \\\n-  if ((task)->dom->get_log().is_tracing(mask)) {  \\\n-      (task)->dom->get_log().reset_indent(0);     \\\n-      (task)->dom->log(mask, __VA_ARGS__);        \\\n-      (task)->dom->get_log().indent();            \\\n-  } else\n-#define LOGPTR(dom, msg, ptrval)                  \\\n+#define LOG_I(task, mask, ...)                       \\\n+  do {                                               \\\n+    rust_task *_task = task;                         \\\n+    uint32_t _mask = mask;                           \\\n+    if ((_task)->dom->get_log().is_tracing(_mask)) { \\\n+      (_task)->dom->get_log().reset_indent(0);       \\\n+      (_task)->dom->log(_mask, __VA_ARGS__);         \\\n+      (_task)->dom->get_log().indent();              \\\n+    }                                                \\\n+  } while(0)\n+#define LOGPTR(dom, msg, ptrval)                     \\\n   DLOG(dom, rust_log::MEM, \"%s 0x%\" PRIxPTR, msg, ptrval)\n \n class rust_dom;"}]}