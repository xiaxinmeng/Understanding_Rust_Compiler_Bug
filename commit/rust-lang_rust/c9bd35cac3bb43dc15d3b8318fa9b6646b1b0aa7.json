{"sha": "c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YmQzNWNhYzNiYjQzZGMxNWQzYjgzMThmYTliNjY0NmIxYjBhYTc=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-06-02T07:59:11Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-06-10T01:35:47Z"}, "message": "Migrate to numeric associated consts", "tree": {"sha": "af3e89834444ae834093371a1f27e446fdc5211d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af3e89834444ae834093371a1f27e446fdc5211d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7", "html_url": "https://github.com/rust-lang/rust/commit/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8db24840f7457f005cb73807197992922ca960b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8db24840f7457f005cb73807197992922ca960b1", "html_url": "https://github.com/rust-lang/rust/commit/8db24840f7457f005cb73807197992922ca960b1"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "22c5acca064e9242b4f7c1f962ccd25044ba9d08", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7", "patch": "@@ -254,11 +254,11 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                     if let [\"core\", \"num\", int_impl, \"max_value\"] = *def_path;\n                     then {\n                        let value = match int_impl {\n-                           \"<impl i8>\" => i8::max_value() as u128,\n-                           \"<impl i16>\" => i16::max_value() as u128,\n-                           \"<impl i32>\" => i32::max_value() as u128,\n-                           \"<impl i64>\" => i64::max_value() as u128,\n-                           \"<impl i128>\" => i128::max_value() as u128,\n+                           \"<impl i8>\" => i8::MAX as u128,\n+                           \"<impl i16>\" => i16::MAX as u128,\n+                           \"<impl i32>\" => i32::MAX as u128,\n+                           \"<impl i64>\" => i64::MAX as u128,\n+                           \"<impl i128>\" => i128::MAX as u128,\n                            _ => return None,\n                        };\n                        Some(Constant::Int(value))"}, {"sha": "12b62f5cf97899792eada3b8f46295924ce9a24f", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n                                     continue;\n                                 }\n                             },\n-                            ty::Uint(UintTy::Usize) if val > u128::from(u32::max_value()) => {},\n+                            ty::Uint(UintTy::Usize) if val > u128::from(u32::MAX) => {},\n                             _ => continue,\n                         }\n                         span_lint("}, {"sha": "a9d8c66f26189421d428bc6baeb8f6b4c4d5c898", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7", "patch": "@@ -1946,18 +1946,18 @@ fn detect_extreme_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n     let which = match (&ty.kind, cv) {\n         (&ty::Bool, Constant::Bool(false)) | (&ty::Uint(_), Constant::Int(0)) => Minimum,\n         (&ty::Int(ity), Constant::Int(i))\n-            if i == unsext(cx.tcx, i128::min_value() >> (128 - int_bits(cx.tcx, ity)), ity) =>\n+            if i == unsext(cx.tcx, i128::MIN >> (128 - int_bits(cx.tcx, ity)), ity) =>\n         {\n             Minimum\n         },\n \n         (&ty::Bool, Constant::Bool(true)) => Maximum,\n         (&ty::Int(ity), Constant::Int(i))\n-            if i == unsext(cx.tcx, i128::max_value() >> (128 - int_bits(cx.tcx, ity)), ity) =>\n+            if i == unsext(cx.tcx, i128::MAX >> (128 - int_bits(cx.tcx, ity)), ity) =>\n         {\n             Maximum\n         },\n-        (&ty::Uint(uty), Constant::Int(i)) if clip(cx.tcx, u128::max_value(), uty) == i => Maximum,\n+        (&ty::Uint(uty), Constant::Int(i)) if clip(cx.tcx, u128::MAX, uty) == i => Maximum,\n \n         _ => return None,\n     };\n@@ -2039,7 +2039,7 @@ impl FullInt {\n     fn cmp_s_u(s: i128, u: u128) -> Ordering {\n         if s < 0 {\n             Ordering::Less\n-        } else if u > (i128::max_value() as u128) {\n+        } else if u > (i128::MAX as u128) {\n             Ordering::Greater\n         } else {\n             (s as u128).cmp(&u)\n@@ -2084,48 +2084,48 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr<'_>)\n         match pre_cast_ty.kind {\n             ty::Int(int_ty) => Some(match int_ty {\n                 IntTy::I8 => (\n-                    FullInt::S(i128::from(i8::min_value())),\n-                    FullInt::S(i128::from(i8::max_value())),\n+                    FullInt::S(i128::from(i8::MIN)),\n+                    FullInt::S(i128::from(i8::MAX)),\n                 ),\n                 IntTy::I16 => (\n-                    FullInt::S(i128::from(i16::min_value())),\n-                    FullInt::S(i128::from(i16::max_value())),\n+                    FullInt::S(i128::from(i16::MIN)),\n+                    FullInt::S(i128::from(i16::MAX)),\n                 ),\n                 IntTy::I32 => (\n-                    FullInt::S(i128::from(i32::min_value())),\n-                    FullInt::S(i128::from(i32::max_value())),\n+                    FullInt::S(i128::from(i32::MIN)),\n+                    FullInt::S(i128::from(i32::MAX)),\n                 ),\n                 IntTy::I64 => (\n-                    FullInt::S(i128::from(i64::min_value())),\n-                    FullInt::S(i128::from(i64::max_value())),\n+                    FullInt::S(i128::from(i64::MIN)),\n+                    FullInt::S(i128::from(i64::MAX)),\n                 ),\n-                IntTy::I128 => (FullInt::S(i128::min_value()), FullInt::S(i128::max_value())),\n+                IntTy::I128 => (FullInt::S(i128::MIN), FullInt::S(i128::MAX)),\n                 IntTy::Isize => (\n-                    FullInt::S(isize::min_value() as i128),\n-                    FullInt::S(isize::max_value() as i128),\n+                    FullInt::S(isize::MIN as i128),\n+                    FullInt::S(isize::MAX as i128),\n                 ),\n             }),\n             ty::Uint(uint_ty) => Some(match uint_ty {\n                 UintTy::U8 => (\n-                    FullInt::U(u128::from(u8::min_value())),\n-                    FullInt::U(u128::from(u8::max_value())),\n+                    FullInt::U(u128::from(u8::MIN)),\n+                    FullInt::U(u128::from(u8::MAX)),\n                 ),\n                 UintTy::U16 => (\n-                    FullInt::U(u128::from(u16::min_value())),\n-                    FullInt::U(u128::from(u16::max_value())),\n+                    FullInt::U(u128::from(u16::MIN)),\n+                    FullInt::U(u128::from(u16::MAX)),\n                 ),\n                 UintTy::U32 => (\n-                    FullInt::U(u128::from(u32::min_value())),\n-                    FullInt::U(u128::from(u32::max_value())),\n+                    FullInt::U(u128::from(u32::MIN)),\n+                    FullInt::U(u128::from(u32::MAX)),\n                 ),\n                 UintTy::U64 => (\n-                    FullInt::U(u128::from(u64::min_value())),\n-                    FullInt::U(u128::from(u64::max_value())),\n+                    FullInt::U(u128::from(u64::MIN)),\n+                    FullInt::U(u128::from(u64::MAX)),\n                 ),\n-                UintTy::U128 => (FullInt::U(u128::min_value()), FullInt::U(u128::max_value())),\n+                UintTy::U128 => (FullInt::U(u128::MIN), FullInt::U(u128::MAX)),\n                 UintTy::Usize => (\n-                    FullInt::U(usize::min_value() as u128),\n-                    FullInt::U(usize::max_value() as u128),\n+                    FullInt::U(usize::MIN as u128),\n+                    FullInt::U(usize::MAX as u128),\n                 ),\n             }),\n             _ => None,"}, {"sha": "8ee0969b0f0761b16371eb485570ac83ad3abe5d", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7", "patch": "@@ -37,11 +37,11 @@ fn main() {\n     1isize as usize;\n     -1isize as usize;\n     0i8 as u8;\n-    i8::max_value() as u8;\n-    i16::max_value() as u16;\n-    i32::max_value() as u32;\n-    i64::max_value() as u64;\n-    i128::max_value() as u128;\n+    i8::MAX as u8;\n+    i16::MAX as u16;\n+    i32::MAX as u32;\n+    i64::MAX as u64;\n+    i128::MAX as u128;\n \n     (-1i8).abs() as u8;\n     (-1i16).abs() as u16;"}, {"sha": "2f32a7b1578219a2a5c951b9099994a22681bed5", "filename": "tests/ui/implicit_saturating_sub.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/tests%2Fui%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/tests%2Fui%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_saturating_sub.rs?ref=c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7", "patch": "@@ -110,7 +110,7 @@ fn main() {\n     }\n \n     // Lint\n-    if i_8 > i8::min_value() {\n+    if i_8 > i8::MIN {\n         i_8 -= 1;\n     }\n \n@@ -120,7 +120,7 @@ fn main() {\n     }\n \n     // Lint\n-    if i_8 != i8::min_value() {\n+    if i_8 != i8::MIN {\n         i_8 -= 1;\n     }\n \n@@ -135,7 +135,7 @@ fn main() {\n     }\n \n     // Lint\n-    if i_16 > i16::min_value() {\n+    if i_16 > i16::MIN {\n         i_16 -= 1;\n     }\n \n@@ -145,7 +145,7 @@ fn main() {\n     }\n \n     // Lint\n-    if i_16 != i16::min_value() {\n+    if i_16 != i16::MIN {\n         i_16 -= 1;\n     }\n \n@@ -160,7 +160,7 @@ fn main() {\n     }\n \n     // Lint\n-    if i_32 > i32::min_value() {\n+    if i_32 > i32::MIN {\n         i_32 -= 1;\n     }\n \n@@ -170,7 +170,7 @@ fn main() {\n     }\n \n     // Lint\n-    if i_32 != i32::min_value() {\n+    if i_32 != i32::MIN {\n         i_32 -= 1;\n     }\n \n@@ -180,7 +180,7 @@ fn main() {\n     let mut i_64: i64 = endi_64 - starti_64;\n \n     // Lint\n-    if i64::min_value() < i_64 {\n+    if i64::MIN < i_64 {\n         i_64 -= 1;\n     }\n "}, {"sha": "2eb2023b3b9ef44bbdfa0c0c7f23169f6b0de117", "filename": "tests/ui/implicit_saturating_sub.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/tests%2Fui%2Fimplicit_saturating_sub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7/tests%2Fui%2Fimplicit_saturating_sub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_saturating_sub.stderr?ref=c9bd35cac3bb43dc15d3b8318fa9b6646b1b0aa7", "patch": "@@ -75,7 +75,7 @@ LL | |     }\n error: Implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:113:5\n    |\n-LL | /     if i_8 > i8::min_value() {\n+LL | /     if i_8 > i8::MIN {\n LL | |         i_8 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_8 = i_8.saturating_sub(1);`\n@@ -91,7 +91,7 @@ LL | |     }\n error: Implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:123:5\n    |\n-LL | /     if i_8 != i8::min_value() {\n+LL | /     if i_8 != i8::MIN {\n LL | |         i_8 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_8 = i_8.saturating_sub(1);`\n@@ -107,7 +107,7 @@ LL | |     }\n error: Implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:138:5\n    |\n-LL | /     if i_16 > i16::min_value() {\n+LL | /     if i_16 > i16::MIN {\n LL | |         i_16 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_16 = i_16.saturating_sub(1);`\n@@ -123,7 +123,7 @@ LL | |     }\n error: Implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:148:5\n    |\n-LL | /     if i_16 != i16::min_value() {\n+LL | /     if i_16 != i16::MIN {\n LL | |         i_16 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_16 = i_16.saturating_sub(1);`\n@@ -139,7 +139,7 @@ LL | |     }\n error: Implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:163:5\n    |\n-LL | /     if i_32 > i32::min_value() {\n+LL | /     if i_32 > i32::MIN {\n LL | |         i_32 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_32 = i_32.saturating_sub(1);`\n@@ -155,15 +155,15 @@ LL | |     }\n error: Implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:173:5\n    |\n-LL | /     if i_32 != i32::min_value() {\n+LL | /     if i_32 != i32::MIN {\n LL | |         i_32 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_32 = i_32.saturating_sub(1);`\n \n error: Implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:183:5\n    |\n-LL | /     if i64::min_value() < i_64 {\n+LL | /     if i64::MIN < i_64 {\n LL | |         i_64 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_64 = i_64.saturating_sub(1);`"}]}