{"sha": "8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYzFkOWRiMjFmYTlkNGFiZDliNDBkMDliZThmYTA2MWFiYjNiYjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-17T09:12:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-24T22:46:03Z"}, "message": "std: Convert the runtime TLS key to a Rust global to avoid FFI", "tree": {"sha": "543ee79365aff171c5555d4a0582696619c298a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/543ee79365aff171c5555d4a0582696619c298a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5", "html_url": "https://github.com/rust-lang/rust/commit/8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a37bdde3f9c0b711ecfbaffa5b00b8272d76b131", "url": "https://api.github.com/repos/rust-lang/rust/commits/a37bdde3f9c0b711ecfbaffa5b00b8272d76b131", "html_url": "https://github.com/rust-lang/rust/commit/a37bdde3f9c0b711ecfbaffa5b00b8272d76b131"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "e843fd1adef07aa6e258ac16cc52c628b1b374f7", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5", "patch": "@@ -23,14 +23,16 @@ use option::{Option, Some, None};\n use unstable::finally::Finally;\n use tls = rt::thread_local_storage;\n \n+static mut RT_TLS_KEY: tls::Key = -1;\n+\n /// Initialize the TLS key. Other ops will fail if this isn't executed first.\n #[fixed_stack_segment]\n #[inline(never)]\n pub fn init_tls_key() {\n     unsafe {\n-        rust_initialize_rt_tls_key();\n+        rust_initialize_rt_tls_key(&mut RT_TLS_KEY);\n         extern {\n-            fn rust_initialize_rt_tls_key();\n+            fn rust_initialize_rt_tls_key(key: *mut tls::Key);\n         }\n     }\n }\n@@ -151,15 +153,10 @@ fn tls_key() -> tls::Key {\n     }\n }\n \n-#[fixed_stack_segment]\n-#[inline(never)]\n-fn maybe_tls_key() -> Option<tls::Key> {\n+#[inline]\n+#[cfg(not(test))]\n+pub fn maybe_tls_key() -> Option<tls::Key> {\n     unsafe {\n-        let key: *mut c_void = rust_get_rt_tls_key();\n-        let key: &mut tls::Key = cast::transmute(key);\n-        let key = *key;\n-        // Check that the key has been initialized.\n-\n         // NB: This is a little racy because, while the key is\n         // initalized under a mutex and it's assumed to be initalized\n         // in the Scheduler ctor by any thread that needs to use it,\n@@ -170,14 +167,19 @@ fn maybe_tls_key() -> Option<tls::Key> {\n         // another thread. I think this is fine since the only action\n         // they could take if it was initialized would be to check the\n         // thread-local value and see that it's not set.\n-        if key != -1 {\n-            return Some(key);\n+        if RT_TLS_KEY != -1 {\n+            return Some(RT_TLS_KEY);\n         } else {\n             return None;\n         }\n     }\n+}\n \n-    extern {\n-        fn rust_get_rt_tls_key() -> *mut c_void;\n-    }\n+// XXX: The boundary between the running runtime and the testing runtime\n+// seems to be fuzzy at the moment, and trying to use two different keys\n+// results in disaster. This should not be necessary.\n+#[inline]\n+#[cfg(test)]\n+pub fn maybe_tls_key() -> Option<tls::Key> {\n+    unsafe { ::cast::transmute(::realstd::rt::local_ptr::maybe_tls_key()) }\n }"}, {"sha": "27cc486c39efc2bfd48e09c7868269045b791a02", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5", "patch": "@@ -447,19 +447,14 @@ rust_readdir() {\n #endif\n \n #ifndef _WIN32\n-pthread_key_t rt_key = -1;\n+typedef pthread_key_t tls_key;\n #else\n-DWORD rt_key = -1;\n+typedef DWORD tls_key;\n #endif\n \n-extern \"C\" void*\n-rust_get_rt_tls_key() {\n-    return &rt_key;\n-}\n-\n // Initialize the TLS key used by the new scheduler\n extern \"C\" CDECL void\n-rust_initialize_rt_tls_key() {\n+rust_initialize_rt_tls_key(tls_key *key) {\n \n     static lock_and_signal init_lock;\n     static bool initialized = false;\n@@ -469,10 +464,10 @@ rust_initialize_rt_tls_key() {\n     if (!initialized) {\n \n #ifndef _WIN32\n-        assert(!pthread_key_create(&rt_key, NULL));\n+        assert(!pthread_key_create(key, NULL));\n #else\n-        rt_key = TlsAlloc();\n-        assert(rt_key != TLS_OUT_OF_INDEXES);\n+        *key = TlsAlloc();\n+        assert(*key != TLS_OUT_OF_INDEXES);\n #endif\n \n         initialized = true;"}, {"sha": "b668d3944066252084add406d8c8043e66f6e0e8", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5", "patch": "@@ -143,7 +143,6 @@ linenoiseHistoryLoad\n rust_raw_thread_start\n rust_raw_thread_join\n rust_raw_thread_delete\n-rust_get_rt_tls_key\n swap_registers\n rust_readdir\n rust_opendir"}]}