{"sha": "f41cf208b7809bcb5cd12e81970802a52b2c265e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MWNmMjA4Yjc4MDliY2I1Y2QxMmU4MTk3MDgwMmE1MmIyYzI2NWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-26T22:24:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-26T22:25:17Z"}, "message": "libcore: De-export box, cast, and dlist", "tree": {"sha": "597b4146fb7da2234bb5fc24faa2d2e59144d291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/597b4146fb7da2234bb5fc24faa2d2e59144d291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f41cf208b7809bcb5cd12e81970802a52b2c265e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f41cf208b7809bcb5cd12e81970802a52b2c265e", "html_url": "https://github.com/rust-lang/rust/commit/f41cf208b7809bcb5cd12e81970802a52b2c265e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f41cf208b7809bcb5cd12e81970802a52b2c265e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7b8388cb44b24ed53870a4e42306bd1092d1962", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b8388cb44b24ed53870a4e42306bd1092d1962", "html_url": "https://github.com/rust-lang/rust/commit/e7b8388cb44b24ed53870a4e42306bd1092d1962"}], "stats": {"total": 98, "additions": 44, "deletions": 54}, "files": [{"sha": "65a641d208fd79a18d16fe301365486f50b93022", "filename": "src/libcore/box.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f41cf208b7809bcb5cd12e81970802a52b2c265e/src%2Flibcore%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41cf208b7809bcb5cd12e81970802a52b2c265e/src%2Flibcore%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbox.rs?ref=f41cf208b7809bcb5cd12e81970802a52b2c265e", "patch": "@@ -7,26 +7,22 @@\n use cmp::{Eq, Ord};\n use intrinsic::TyDesc;\n \n-export ptr_eq, raw;\n-\n-mod raw {\n-    #[legacy_exports];\n-\n-    struct BoxHeaderRepr {\n+pub mod raw {\n+    pub struct BoxHeaderRepr {\n         ref_count: uint,\n         type_desc: *TyDesc,\n         prev: *BoxRepr,\n         next: *BoxRepr,\n     }\n \n-    struct BoxRepr {\n+    pub struct BoxRepr {\n         header: BoxHeaderRepr,\n         data: u8\n     }\n \n }\n \n-pure fn ptr_eq<T>(a: @T, b: @T) -> bool {\n+pub pure fn ptr_eq<T>(a: @T, b: @T) -> bool {\n     //! Determine if two shared boxes point to the same object\n     unsafe { ptr::addr_of(*a) == ptr::addr_of(*b) }\n }"}, {"sha": "679e62c16845d82fce37ef436fd349d0adf63768", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f41cf208b7809bcb5cd12e81970802a52b2c265e/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41cf208b7809bcb5cd12e81970802a52b2c265e/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=f41cf208b7809bcb5cd12e81970802a52b2c265e", "patch": "@@ -1,11 +1,5 @@\n //! Unsafe operations\n \n-export reinterpret_cast, forget, bump_box_refcount, transmute;\n-export transmute_mut, transmute_immut, transmute_region, transmute_mut_region;\n-export transmute_mut_unsafe, transmute_immut_unsafe;\n-\n-export copy_lifetime, copy_lifetime_vec;\n-\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n     #[legacy_exports];\n@@ -15,7 +9,7 @@ extern mod rusti {\n \n /// Casts the value at `src` to U. The two types must have the same length.\n #[inline(always)]\n-unsafe fn reinterpret_cast<T, U>(src: &T) -> U {\n+pub unsafe fn reinterpret_cast<T, U>(src: &T) -> U {\n     rusti::reinterpret_cast(*src)\n }\n \n@@ -28,15 +22,15 @@ unsafe fn reinterpret_cast<T, U>(src: &T) -> U {\n  * reinterpret_cast on managed pointer types.\n  */\n #[inline(always)]\n-unsafe fn forget<T>(-thing: T) { rusti::forget(move thing); }\n+pub unsafe fn forget<T>(-thing: T) { rusti::forget(move thing); }\n \n /**\n  * Force-increment the reference count on a shared box. If used\n  * carelessly, this can leak the box. Use this in conjunction with transmute\n  * and/or reinterpret_cast when such calls would otherwise scramble a box's\n  * reference count\n  */\n-unsafe fn bump_box_refcount<T>(+t: @T) { forget(move t); }\n+pub unsafe fn bump_box_refcount<T>(+t: @T) { forget(move t); }\n \n /**\n  * Transform a value of one type into a value of another type.\n@@ -47,47 +41,53 @@ unsafe fn bump_box_refcount<T>(+t: @T) { forget(move t); }\n  *     assert transmute(\"L\") == ~[76u8, 0u8];\n  */\n #[inline(always)]\n-unsafe fn transmute<L, G>(-thing: L) -> G {\n+pub unsafe fn transmute<L, G>(-thing: L) -> G {\n     let newthing: G = reinterpret_cast(&thing);\n     forget(move thing);\n     move newthing\n }\n \n /// Coerce an immutable reference to be mutable.\n #[inline(always)]\n-unsafe fn transmute_mut<T>(+ptr: &a/T) -> &a/mut T { transmute(move ptr) }\n+pub unsafe fn transmute_mut<T>(+ptr: &a/T) -> &a/mut T { transmute(move ptr) }\n \n /// Coerce a mutable reference to be immutable.\n #[inline(always)]\n-unsafe fn transmute_immut<T>(+ptr: &a/mut T) -> &a/T { transmute(move ptr) }\n+pub unsafe fn transmute_immut<T>(+ptr: &a/mut T) -> &a/T {\n+    transmute(move ptr)\n+}\n \n /// Coerce a borrowed pointer to have an arbitrary associated region.\n #[inline(always)]\n-unsafe fn transmute_region<T>(+ptr: &a/T) -> &b/T { transmute(move ptr) }\n+pub unsafe fn transmute_region<T>(+ptr: &a/T) -> &b/T { transmute(move ptr) }\n \n /// Coerce an immutable reference to be mutable.\n #[inline(always)]\n-unsafe fn transmute_mut_unsafe<T>(+ptr: *const T) -> *mut T { transmute(ptr) }\n+pub unsafe fn transmute_mut_unsafe<T>(+ptr: *const T) -> *mut T {\n+    transmute(ptr)\n+}\n \n /// Coerce an immutable reference to be mutable.\n #[inline(always)]\n-unsafe fn transmute_immut_unsafe<T>(+ptr: *const T) -> *T { transmute(ptr) }\n+pub unsafe fn transmute_immut_unsafe<T>(+ptr: *const T) -> *T {\n+    transmute(ptr)\n+}\n \n /// Coerce a borrowed mutable pointer to have an arbitrary associated region.\n #[inline(always)]\n-unsafe fn transmute_mut_region<T>(+ptr: &a/mut T) -> &b/mut T {\n+pub unsafe fn transmute_mut_region<T>(+ptr: &a/mut T) -> &b/mut T {\n     transmute(move ptr)\n }\n \n /// Transforms lifetime of the second pointer to match the first.\n #[inline(always)]\n-unsafe fn copy_lifetime<S,T>(_ptr: &a/S, ptr: &T) -> &a/T {\n+pub unsafe fn copy_lifetime<S,T>(_ptr: &a/S, ptr: &T) -> &a/T {\n     transmute_region(ptr)\n }\n \n /// Transforms lifetime of the second pointer to match the first.\n #[inline(always)]\n-unsafe fn copy_lifetime_vec<S,T>(_ptr: &a/[S], ptr: &T) -> &a/T {\n+pub unsafe fn copy_lifetime_vec<S,T>(_ptr: &a/[S], ptr: &T) -> &a/T {\n     transmute_region(ptr)\n }\n \n@@ -97,16 +97,14 @@ unsafe fn copy_lifetime_vec<S,T>(_ptr: &a/[S], ptr: &T) -> &a/T {\n  ****************************************************************************/\n \n #[cfg(test)]\n-mod tests {\n-    #[legacy_exports];\n-\n+pub mod tests {\n     #[test]\n-    fn test_reinterpret_cast() {\n+    pub fn test_reinterpret_cast() {\n         assert 1u == unsafe { reinterpret_cast(&1) };\n     }\n \n     #[test]\n-    fn test_bump_box_refcount() {\n+    pub fn test_bump_box_refcount() {\n         unsafe {\n             let box = @~\"box box box\";       // refcount 1\n             bump_box_refcount(box);         // refcount 2\n@@ -121,7 +119,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_transmute() {\n+    pub fn test_transmute() {\n         unsafe {\n             let x = @1;\n             let x: *int = transmute(x);\n@@ -131,7 +129,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_transmute2() {\n+    pub fn test_transmute2() {\n         unsafe {\n             assert ~[76u8, 0u8] == transmute(~\"L\");\n         }"}, {"sha": "dedb295dacb87f4dad764694b21e8ca1b0a8073f", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f41cf208b7809bcb5cd12e81970802a52b2c265e/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41cf208b7809bcb5cd12e81970802a52b2c265e/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=f41cf208b7809bcb5cd12e81970802a52b2c265e", "patch": "@@ -14,17 +14,16 @@ and `Eq` to overload the `==` and `!=` operators.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-use nounittest::*;\n-use unittest::*;\n-export Ord;\n-export Eq;\n+pub use nounittest::*;\n+pub use unittest::*;\n+\n+export Ord, Eq;\n \n /// Interfaces used for comparison.\n \n // Awful hack to work around duplicate lang items in core test.\n #[cfg(notest)]\n mod nounittest {\n-    #[legacy_exports];\n     /**\n      * Trait for values that can be compared for a sort-order.\n      *\n@@ -33,7 +32,7 @@ mod nounittest {\n      * default implementations.\n      */\n     #[lang=\"ord\"]\n-    trait Ord {\n+    pub trait Ord {\n         pure fn lt(other: &self) -> bool;\n         pure fn le(other: &self) -> bool;\n         pure fn ge(other: &self) -> bool;\n@@ -50,7 +49,7 @@ mod nounittest {\n      * a default implementation.\n      */\n     #[lang=\"eq\"]\n-    trait Eq {\n+    pub trait Eq {\n         pure fn eq(other: &self) -> bool;\n         pure fn ne(other: &self) -> bool;\n     }\n@@ -63,14 +62,14 @@ mod nounittest {\n #[cfg(test)]\n mod unittest {\n     #[legacy_exports];\n-    trait Ord {\n+    pub trait Ord {\n         pure fn lt(other: &self) -> bool;\n         pure fn le(other: &self) -> bool;\n         pure fn ge(other: &self) -> bool;\n         pure fn gt(other: &self) -> bool;\n     }\n \n-    trait Eq {\n+    pub trait Eq {\n         pure fn eq(other: &self) -> bool;\n         pure fn ne(other: &self) -> bool;\n     }\n@@ -80,27 +79,27 @@ mod unittest {\n mod unittest {\n     #[legacy_exports];}\n \n-pure fn lt<T: Ord>(v1: &T, v2: &T) -> bool {\n+pub pure fn lt<T: Ord>(v1: &T, v2: &T) -> bool {\n     (*v1).lt(v2)\n }\n \n-pure fn le<T: Ord Eq>(v1: &T, v2: &T) -> bool {\n+pub pure fn le<T: Ord Eq>(v1: &T, v2: &T) -> bool {\n     (*v1).lt(v2) || (*v1).eq(v2)\n }\n \n-pure fn eq<T: Eq>(v1: &T, v2: &T) -> bool {\n+pub pure fn eq<T: Eq>(v1: &T, v2: &T) -> bool {\n     (*v1).eq(v2)\n }\n \n-pure fn ne<T: Eq>(v1: &T, v2: &T) -> bool {\n+pub pure fn ne<T: Eq>(v1: &T, v2: &T) -> bool {\n     (*v1).ne(v2)\n }\n \n-pure fn ge<T: Ord>(v1: &T, v2: &T) -> bool {\n+pub pure fn ge<T: Ord>(v1: &T, v2: &T) -> bool {\n     (*v1).ge(v2)\n }\n \n-pure fn gt<T: Ord>(v1: &T, v2: &T) -> bool {\n+pub pure fn gt<T: Ord>(v1: &T, v2: &T) -> bool {\n     (*v1).gt(v2)\n }\n "}, {"sha": "d50abc64f2b05ecd41cbc541e6f3f01b8846c136", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f41cf208b7809bcb5cd12e81970802a52b2c265e/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41cf208b7809bcb5cd12e81970802a52b2c265e/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=f41cf208b7809bcb5cd12e81970802a52b2c265e", "patch": "@@ -12,9 +12,6 @@ Do not use ==, !=, <, etc on doubly-linked lists -- it may not terminate.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-export DList;\n-export new_dlist, from_elem, from_vec, extensions;\n-\n type DListLink<T> = Option<DListNode<T>>;\n \n enum DListNode<T> = @{\n@@ -24,7 +21,7 @@ enum DListNode<T> = @{\n     mut next: DListLink<T>\n };\n \n-enum DList<T> {\n+pub enum DList<T> {\n     DList_(@{\n         mut size: uint,\n         mut hd:   DListLink<T>,\n@@ -94,13 +91,13 @@ pure fn DList<T>() -> DList<T> {\n }\n \n /// Creates a new dlist with a single element\n-pure fn from_elem<T>(+data: T) -> DList<T> {\n+pub pure fn from_elem<T>(+data: T) -> DList<T> {\n     let list = DList();\n     unsafe { list.push(move data); }\n     list\n }\n \n-fn from_vec<T: Copy>(+vec: &[T]) -> DList<T> {\n+pub fn from_vec<T: Copy>(+vec: &[T]) -> DList<T> {\n     do vec::foldl(DList(), vec) |list,data| {\n         list.push(data); // Iterating left-to-right -- add newly to the tail.\n         list"}]}