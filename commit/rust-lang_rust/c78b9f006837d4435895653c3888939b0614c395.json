{"sha": "c78b9f006837d4435895653c3888939b0614c395", "node_id": "C_kwDOAAsO6NoAKGM3OGI5ZjAwNjgzN2Q0NDM1ODk1NjUzYzM4ODg5MzliMDYxNGMzOTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-14T13:50:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-14T13:50:11Z"}, "message": "Auto merge of #13949 - WaffleLapkin:either_ast_node, r=Veykril\n\nminor: implement `AstNode` for `Either`\n\nMakes code a little bit nicer", "tree": {"sha": "8987b896386f21a08446e5e833cf000a329f4e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8987b896386f21a08446e5e833cf000a329f4e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c78b9f006837d4435895653c3888939b0614c395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c78b9f006837d4435895653c3888939b0614c395", "html_url": "https://github.com/rust-lang/rust/commit/c78b9f006837d4435895653c3888939b0614c395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c78b9f006837d4435895653c3888939b0614c395/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce86f12e8d1e9466060a97aa3042dc3cfae53bf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce86f12e8d1e9466060a97aa3042dc3cfae53bf3", "html_url": "https://github.com/rust-lang/rust/commit/ce86f12e8d1e9466060a97aa3042dc3cfae53bf3"}, {"sha": "cfc01150bf9793934f504c5cfdef680c3799ddea", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc01150bf9793934f504c5cfdef680c3799ddea", "html_url": "https://github.com/rust-lang/rust/commit/cfc01150bf9793934f504c5cfdef680c3799ddea"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "b801cd785e008e9825aa95395a4e0679d889e5db", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c78b9f006837d4435895653c3888939b0614c395/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c78b9f006837d4435895653c3888939b0614c395/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=c78b9f006837d4435895653c3888939b0614c395", "patch": "@@ -1472,14 +1472,7 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn is_inside_unsafe(&self, expr: &ast::Expr) -> bool {\n-        let item_or_variant = |ancestor: SyntaxNode| {\n-            if ast::Item::can_cast(ancestor.kind()) {\n-                ast::Item::cast(ancestor).map(Either::Left)\n-            } else {\n-                ast::Variant::cast(ancestor).map(Either::Right)\n-            }\n-        };\n-        let Some(enclosing_item) = expr.syntax().ancestors().find_map(item_or_variant) else { return false };\n+        let Some(enclosing_item) = expr.syntax().ancestors().find_map(Either::<ast::Item, ast::Variant>::cast) else { return false };\n \n         let def = match &enclosing_item {\n             Either::Left(ast::Item::Fn(it)) if it.unsafe_token().is_some() => return true,"}, {"sha": "385a4e0a3cee1e5c515c4bbd8996c08387470291", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c78b9f006837d4435895653c3888939b0614c395/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c78b9f006837d4435895653c3888939b0614c395/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=c78b9f006837d4435895653c3888939b0614c395", "patch": "@@ -13,6 +13,8 @@ pub mod prec;\n \n use std::marker::PhantomData;\n \n+use itertools::Either;\n+\n use crate::{\n     syntax_node::{SyntaxNode, SyntaxNodeChildren, SyntaxToken},\n     SyntaxKind,\n@@ -98,6 +100,34 @@ impl<N: AstNode> Iterator for AstChildren<N> {\n     }\n }\n \n+impl<L, R> AstNode for Either<L, R>\n+where\n+    L: AstNode,\n+    R: AstNode,\n+{\n+    fn can_cast(kind: SyntaxKind) -> bool\n+    where\n+        Self: Sized,\n+    {\n+        L::can_cast(kind) || R::can_cast(kind)\n+    }\n+\n+    fn cast(syntax: SyntaxNode) -> Option<Self>\n+    where\n+        Self: Sized,\n+    {\n+        if L::can_cast(syntax.kind()) {\n+            L::cast(syntax).map(Either::Left)\n+        } else {\n+            R::cast(syntax).map(Either::Right)\n+        }\n+    }\n+\n+    fn syntax(&self) -> &SyntaxNode {\n+        self.as_ref().either(L::syntax, R::syntax)\n+    }\n+}\n+\n mod support {\n     use super::{AstChildren, AstNode, SyntaxKind, SyntaxNode, SyntaxToken};\n "}]}