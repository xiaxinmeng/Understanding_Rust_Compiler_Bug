{"sha": "1d202692ecfddb4b731993a5db4271c8698cbade", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMjAyNjkyZWNmZGRiNGI3MzE5OTNhNWRiNDI3MWM4Njk4Y2JhZGU=", "commit": {"author": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2015-07-10T08:54:00Z"}, "committer": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2015-07-10T08:54:00Z"}, "message": "Use CopyFileEx for fs::copy on Windows\nAdds a couple more tests for fs::copy\n\nSigned-off-by: Peter Atashian <retep998@gmail.com>", "tree": {"sha": "34287c51a624f75750215bc208d0ef74bc8a8ead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34287c51a624f75750215bc208d0ef74bc8a8ead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d202692ecfddb4b731993a5db4271c8698cbade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d202692ecfddb4b731993a5db4271c8698cbade", "html_url": "https://github.com/rust-lang/rust/commit/1d202692ecfddb4b731993a5db4271c8698cbade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d202692ecfddb4b731993a5db4271c8698cbade/comments", "author": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "committer": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6a9be10bc1b178dc0b23c505fc8f17e925cabb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2", "html_url": "https://github.com/rust-lang/rust/commit/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2"}], "stats": {"total": 109, "additions": 93, "deletions": 16}, "files": [{"sha": "58c535855de6023613029396766be2a572aaeae0", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1d202692ecfddb4b731993a5db4271c8698cbade/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d202692ecfddb4b731993a5db4271c8698cbade/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=1d202692ecfddb4b731993a5db4271c8698cbade", "patch": "@@ -21,7 +21,7 @@ use core::prelude::*;\n \n use fmt;\n use ffi::OsString;\n-use io::{self, Error, ErrorKind, SeekFrom, Seek, Read, Write};\n+use io::{self, SeekFrom, Seek, Read, Write};\n use path::{Path, PathBuf};\n use sys::fs as fs_imp;\n use sys_common::{AsInnerMut, FromInner, AsInner};\n@@ -858,20 +858,7 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {\n-    let from = from.as_ref();\n-    let to = to.as_ref();\n-    if !from.is_file() {\n-        return Err(Error::new(ErrorKind::InvalidInput,\n-                              \"the source path is not an existing file\"))\n-    }\n-\n-    let mut reader = try!(File::open(from));\n-    let mut writer = try!(File::create(to));\n-    let perm = try!(reader.metadata()).permissions();\n-\n-    let ret = try!(io::copy(&mut reader, &mut writer));\n-    try!(set_permissions(to, perm));\n-    Ok(ret)\n+    fs_imp::copy(from.as_ref(), to.as_ref())\n }\n \n /// Creates a new hard link on the filesystem.\n@@ -1745,6 +1732,19 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn copy_src_does_not_exist() {\n+        let tmpdir = tmpdir();\n+        let from = Path2::new(\"test/nonexistent-bogus-path\");\n+        let to = tmpdir.join(\"out.txt\");\n+        check!(check!(File::create(&to)).write(b\"hello\"));\n+        assert!(fs::copy(&from, &to).is_err());\n+        assert!(!from.exists());\n+        let mut v = Vec::new();\n+        check!(check!(File::open(&to)).read_to_end(&mut v));\n+        assert_eq!(v, b\"hello\");\n+    }\n+\n     #[test]\n     fn copy_file_ok() {\n         let tmpdir = tmpdir();\n@@ -1814,6 +1814,18 @@ mod tests {\n         check!(fs::set_permissions(&out, attr.permissions()));\n     }\n \n+    #[cfg(windows)]\n+    #[test]\n+    fn copy_file_preserves_streams() {\n+        let tmp = tmpdir();\n+        check!(check!(File::create(tmp.join(\"in.txt:bunny\"))).write(\"carrot\".as_bytes()));\n+        assert_eq!(check!(fs::copy(tmp.join(\"in.txt\"), tmp.join(\"out.txt\"))), 6);\n+        assert_eq!(check!(tmp.join(\"out.txt\").metadata()).len(), 0);\n+        let mut v = Vec::new();\n+        check!(check!(File::open(tmp.join(\"out.txt:bunny\"))).read_to_end(&mut v));\n+        assert_eq!(v, b\"carrot\".to_vec());\n+    }\n+\n     #[cfg(not(windows))] // FIXME(#10264) operation not permitted?\n     #[test]\n     fn symlinks_work() {"}, {"sha": "991e62b4ebbd7807e2c0bcb4719db75a73dfc4b9", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d202692ecfddb4b731993a5db4271c8698cbade/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d202692ecfddb4b731993a5db4271c8698cbade/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=1d202692ecfddb4b731993a5db4271c8698cbade", "patch": "@@ -14,7 +14,7 @@ use os::unix::prelude::*;\n \n use ffi::{CString, CStr, OsString, OsStr};\n use fmt;\n-use io::{self, Error, SeekFrom};\n+use io::{self, Error, ErrorKind, SeekFrom};\n use libc::{self, c_int, size_t, off_t, c_char, mode_t};\n use mem;\n use path::{Path, PathBuf};\n@@ -516,3 +516,19 @@ pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {\n     buf.truncate(p);\n     Ok(PathBuf::from(OsString::from_vec(buf)))\n }\n+\n+pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n+    use fs::{File, PathExt, set_permissions};\n+    if !from.is_file() {\n+        return Err(Error::new(ErrorKind::InvalidInput,\n+                              \"the source path is not an existing file\"))\n+    }\n+\n+    let mut reader = try!(File::open(from));\n+    let mut writer = try!(File::create(to));\n+    let perm = try!(reader.metadata()).permissions();\n+\n+    let ret = try!(io::copy(&mut reader, &mut writer));\n+    try!(set_permissions(to, perm));\n+    Ok(ret)\n+}"}, {"sha": "16563be2cfb79ee1dbb9656bd5e34fe88eb2a121", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1d202692ecfddb4b731993a5db4271c8698cbade/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d202692ecfddb4b731993a5db4271c8698cbade/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=1d202692ecfddb4b731993a5db4271c8698cbade", "patch": "@@ -66,6 +66,11 @@ pub const STD_ERROR_HANDLE: libc::DWORD = -12i32 as libc::DWORD;\n \n pub const HANDLE_FLAG_INHERIT: libc::DWORD = 0x00000001;\n \n+pub const PROGRESS_CONTINUE: libc::DWORD = 0;\n+pub const PROGRESS_CANCEL: libc::DWORD = 1;\n+pub const PROGRESS_STOP: libc::DWORD = 2;\n+pub const PROGRESS_QUIET: libc::DWORD = 3;\n+\n #[repr(C)]\n #[cfg(target_arch = \"x86\")]\n pub struct WSADATA {\n@@ -249,6 +254,19 @@ pub type PCONDITION_VARIABLE = *mut CONDITION_VARIABLE;\n pub type PSRWLOCK = *mut SRWLOCK;\n pub type ULONG = c_ulong;\n pub type ULONG_PTR = c_ulong;\n+pub type LPBOOL = *mut BOOL;\n+\n+pub type LPPROGRESS_ROUTINE = ::option::Option<unsafe extern \"system\" fn(\n+    TotalFileSize: libc::LARGE_INTEGER,\n+    TotalBytesTransferred: libc::LARGE_INTEGER,\n+    StreamSize: libc::LARGE_INTEGER,\n+    StreamBytesTransferred: libc::LARGE_INTEGER,\n+    dwStreamNumber: DWORD,\n+    dwCallbackReason: DWORD,\n+    hSourceFile: HANDLE,\n+    hDestinationFile: HANDLE,\n+    lpData: LPVOID,\n+) -> DWORD>;\n \n #[repr(C)]\n pub struct CONDITION_VARIABLE { pub ptr: LPVOID }\n@@ -413,6 +431,12 @@ extern \"system\" {\n     pub fn SetHandleInformation(hObject: libc::HANDLE,\n                                 dwMask: libc::DWORD,\n                                 dwFlags: libc::DWORD) -> libc::BOOL;\n+    pub fn CopyFileExW(lpExistingFileName: libc::LPCWSTR,\n+                       lpNewFileName: libc::LPCWSTR,\n+                       lpProgressRoutine: LPPROGRESS_ROUTINE,\n+                       lpData: libc::LPVOID,\n+                       pbCancel: LPBOOL,\n+                       dwCopyFlags: libc::DWORD) -> libc::BOOL;\n }\n \n // Functions that aren't available on Windows XP, but we still use them and just"}, {"sha": "ae6b20de63910079d53270f749ece6c32bfa446a", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1d202692ecfddb4b731993a5db4271c8698cbade/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d202692ecfddb4b731993a5db4271c8698cbade/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=1d202692ecfddb4b731993a5db4271c8698cbade", "patch": "@@ -575,3 +575,28 @@ pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {\n         PathBuf::from(OsString::from_wide(buf))\n     })\n }\n+\n+pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n+    unsafe extern \"system\" fn callback(\n+        _TotalFileSize: libc::LARGE_INTEGER,\n+        TotalBytesTransferred: libc::LARGE_INTEGER,\n+        _StreamSize: libc::LARGE_INTEGER,\n+        _StreamBytesTransferred: libc::LARGE_INTEGER,\n+        _dwStreamNumber: libc::DWORD,\n+        _dwCallbackReason: libc::DWORD,\n+        _hSourceFile: HANDLE,\n+        _hDestinationFile: HANDLE,\n+        lpData: libc::LPVOID,\n+    ) -> libc::DWORD {\n+        *(lpData as *mut i64) = TotalBytesTransferred;\n+        c::PROGRESS_CONTINUE\n+    }\n+    let pfrom = to_utf16(from);\n+    let pto = to_utf16(to);\n+    let mut size = 0i64;\n+    try!(cvt(unsafe {\n+        c::CopyFileExW(pfrom.as_ptr(), pto.as_ptr(), Some(callback),\n+                       &mut size as *mut _ as *mut _, ptr::null_mut(), 0)\n+    }));\n+    Ok(size as u64)\n+}"}]}