{"sha": "665266bf66d3702880ca8a0e84c42a80c37342a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NTI2NmJmNjZkMzcwMjg4MGNhOGEwZTg0YzQyYTgwYzM3MzQyYTg=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-27T15:34:35Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-27T15:34:35Z"}, "message": "Replace empty dbg with unit in letexprs, better removal in blocks", "tree": {"sha": "a4cb4c7a6fd35ab6a8ce5bbedef2b82087aa4069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4cb4c7a6fd35ab6a8ce5bbedef2b82087aa4069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/665266bf66d3702880ca8a0e84c42a80c37342a8", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmBfUIsACgkQ2MS9WuTZ\nzE20Jgf8CpdjROd2sFtOM6oUQUqLN7fbFHK6it0/Bh+k2ByCf6mkCOBH17wA7l/P\nLD/L8HEnqB6P5P2uTkGccqF6QslhkQ4tJUK30LMFc4qbEzk5pNPzBZAv3GpxTXTg\nk/+yWe4zTFowfzHkJ7tZW4juG0q/n8HozS0nUH/SDWMxdFv9SnB+ulhkg41qKGt1\n8fFz24/bqvrQMnOcf8w9m5to0wT+0d+khGphnBt204qm+huWbLu83KuMT7M0L/9r\n9BaJdhrb7+JNOEEQxK0WE5lXM3v4Rg7I2cwFRw2CZuEBW3HfGREzsqyEneQ8/8SP\nr51n9pqnjfI84nmjWZpvca/xb46l7g==\n=CzTW\n-----END PGP SIGNATURE-----", "payload": "tree a4cb4c7a6fd35ab6a8ce5bbedef2b82087aa4069\nparent 0a5badbcba9fad01ccff60a71de7bc891fd05300\nauthor ivan770 <leshenko.ivan770@gmail.com> 1616859275 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1616859275 +0200\n\nReplace empty dbg with unit in letexprs, better removal in blocks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/665266bf66d3702880ca8a0e84c42a80c37342a8", "html_url": "https://github.com/rust-lang/rust/commit/665266bf66d3702880ca8a0e84c42a80c37342a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/665266bf66d3702880ca8a0e84c42a80c37342a8/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a5badbcba9fad01ccff60a71de7bc891fd05300", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5badbcba9fad01ccff60a71de7bc891fd05300", "html_url": "https://github.com/rust-lang/rust/commit/0a5badbcba9fad01ccff60a71de7bc891fd05300"}], "stats": {"total": 85, "additions": 72, "deletions": 13}, "files": [{"sha": "46033fc126c3e949ed34c4d0f04de0579129949d", "filename": "crates/ide_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 72, "deletions": 13, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/665266bf66d3702880ca8a0e84c42a80c37342a8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665266bf66d3702880ca8a0e84c42a80c37342a8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=665266bf66d3702880ca8a0e84c42a80c37342a8", "patch": "@@ -24,18 +24,35 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let macro_call = ctx.find_node_at_offset::<ast::MacroCall>()?;\n     let new_contents = adjusted_macro_contents(&macro_call)?;\n \n-    let macro_text_range = if new_contents.is_empty() {\n-        let parent = macro_call.syntax().parent()?;\n-\n-        let start = parent\n-            .prev_sibling_or_token()\n-            .and_then(|el| {\n-                Some(el.into_token().and_then(ast::Whitespace::cast)?.syntax().text_range().start())\n-            })\n-            .unwrap_or(parent.text_range().start());\n-        let end = parent.text_range().end();\n-\n-        TextRange::new(start, end)\n+    let parent = macro_call.syntax().parent();\n+\n+    let macro_text_range = if let Some(it) = parent.as_ref() {\n+        if new_contents.is_empty() {\n+            match_ast! {\n+                match it {\n+                    ast::BlockExpr(it) => {\n+                        macro_call.syntax()\n+                            .prev_sibling_or_token()\n+                            .and_then(whitespace_start)\n+                            .map(|start| TextRange::new(start, macro_call.syntax().text_range().end()))\n+                            .unwrap_or(macro_call.syntax().text_range())\n+                    },\n+                    ast::ExprStmt(it) => {\n+                        let start = it\n+                            .syntax()\n+                            .prev_sibling_or_token()\n+                            .and_then(whitespace_start)\n+                            .unwrap_or(it.syntax().text_range().start());\n+                        let end = it.syntax().text_range().end();\n+\n+                        TextRange::new(start, end)\n+                    },\n+                    _ => macro_call.syntax().text_range()\n+                }\n+            }\n+        } else {\n+            macro_call.syntax().text_range()\n+        }\n     } else {\n         macro_call.syntax().text_range()\n     };\n@@ -51,11 +68,22 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         \"Remove dbg!()\",\n         macro_text_range,\n         |builder| {\n-            builder.replace(TextRange::new(macro_text_range.start(), macro_end), new_contents);\n+            builder.replace(\n+                TextRange::new(macro_text_range.start(), macro_end),\n+                if new_contents.is_empty() && parent.and_then(ast::LetStmt::cast).is_some() {\n+                    ast::make::expr_unit().to_string()\n+                } else {\n+                    new_contents\n+                },\n+            );\n         },\n     )\n }\n \n+fn whitespace_start(it: SyntaxElement) -> Option<TextSize> {\n+    Some(it.into_token().and_then(ast::Whitespace::cast)?.syntax().text_range().start())\n+}\n+\n fn adjusted_macro_contents(macro_call: &ast::MacroCall) -> Option<String> {\n     let contents = get_valid_macrocall_contents(&macro_call, \"dbg\")?;\n     let macro_text_with_brackets = macro_call.token_tree()?.syntax().text();\n@@ -439,6 +467,37 @@ fn main() {\n $0dbg!();\n }\"#,\n             r#\"fn foo() {\n+}\"#,\n+        );\n+        check_assist(\n+            remove_dbg,\n+            r#\"fn foo() {\n+let test = $0dbg!();\n+}\"#,\n+            r#\"fn foo() {\n+let test = ();\n+}\"#,\n+        );\n+        check_assist(\n+            remove_dbg,\n+            r#\"fn foo() {\n+$0dbg!()\n+}\"#,\n+            r#\"fn foo() {\n+}\"#,\n+        );\n+        check_assist(\n+            remove_dbg,\n+            r#\"fn foo() {\n+let t = {\n+    println!(\"Hello, world\");\n+    $0dbg!()\n+};\n+}\"#,\n+            r#\"fn foo() {\n+let t = {\n+    println!(\"Hello, world\");\n+};\n }\"#,\n         );\n     }"}]}