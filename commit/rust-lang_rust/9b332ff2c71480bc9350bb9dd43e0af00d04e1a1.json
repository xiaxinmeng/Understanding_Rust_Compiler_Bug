{"sha": "9b332ff2c71480bc9350bb9dd43e0af00d04e1a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMzMyZmYyYzcxNDgwYmM5MzUwYmI5ZGQ0M2UwYWYwMGQwNGUxYTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-05T10:46:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-05T10:46:12Z"}, "message": "Address nits by @nrc.", "tree": {"sha": "24acbe8c0b1bee22f60aff044853b5f70d125934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24acbe8c0b1bee22f60aff044853b5f70d125934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1", "html_url": "https://github.com/rust-lang/rust/commit/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3de19e99603cd2666f25335f02a096eb6d9b46", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3de19e99603cd2666f25335f02a096eb6d9b46", "html_url": "https://github.com/rust-lang/rust/commit/1d3de19e99603cd2666f25335f02a096eb6d9b46"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "e57c16b5a0fb8ef4afea6de7c86f5770c1179582", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=9b332ff2c71480bc9350bb9dd43e0af00d04e1a1", "patch": "@@ -2501,7 +2501,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let obligation_def_id = obligation.predicate.def_id();\n         let mut upcast_trait_refs = util::upcast(self.tcx(), obj_trait_ref, obligation_def_id);\n \n-        // retain only those upcast versions that match the trait-ref we are looking for\n+        // Retain only those upcast versions that match the trait-ref\n+        // we are looking for.  In particular, we know that all of\n+        // `upcast_trait_refs` apply to the correct trait, but\n+        // possibly with incorrect type parameters. For example, we\n+        // may be trying to upcast `Foo` to `Bar<i32>`, but `Foo` is\n+        // declared as `trait Foo : Bar<u32>`.\n         upcast_trait_refs.retain(|upcast_trait_ref| {\n             let upcast_trait_ref = upcast_trait_ref.clone();\n             self.infcx.probe(|_| self.match_poly_trait_ref(obligation, upcast_trait_ref)).is_ok()"}, {"sha": "4527985302aedaddb31493dae3e51b40e9a2181b", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=9b332ff2c71480bc9350bb9dd43e0af00d04e1a1", "patch": "@@ -110,8 +110,8 @@ pub fn elaborate_predicates<'cx, 'tcx>(\n }\n \n impl<'cx, 'tcx> Elaborator<'cx, 'tcx> {\n-    pub fn filter_to_traits(self) -> JustTraits<Elaborator<'cx, 'tcx>> {\n-        JustTraits::new(self)\n+    pub fn filter_to_traits(self) -> FilterToTraits<Elaborator<'cx, 'tcx>> {\n+        FilterToTraits::new(self)\n     }\n \n     fn push(&mut self, predicate: &ty::Predicate<'tcx>) {\n@@ -193,7 +193,7 @@ impl<'cx, 'tcx> Iterator for Elaborator<'cx, 'tcx> {\n // Supertrait iterator\n ///////////////////////////////////////////////////////////////////////////\n \n-pub type Supertraits<'cx, 'tcx> = JustTraits<Elaborator<'cx, 'tcx>>;\n+pub type Supertraits<'cx, 'tcx> = FilterToTraits<Elaborator<'cx, 'tcx>>;\n \n pub fn supertraits<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,\n                               trait_ref: ty::PolyTraitRef<'tcx>)\n@@ -215,17 +215,17 @@ pub fn transitive_bounds<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,\n \n /// A filter around an iterator of predicates that makes it yield up\n /// just trait references.\n-pub struct JustTraits<I> {\n+pub struct FilterToTraits<I> {\n     base_iterator: I\n }\n \n-impl<I> JustTraits<I> {\n-    fn new(base: I) -> JustTraits<I> {\n-        JustTraits { base_iterator: base }\n+impl<I> FilterToTraits<I> {\n+    fn new(base: I) -> FilterToTraits<I> {\n+        FilterToTraits { base_iterator: base }\n     }\n }\n \n-impl<'tcx,I:Iterator<Item=ty::Predicate<'tcx>>> Iterator for JustTraits<I> {\n+impl<'tcx,I:Iterator<Item=ty::Predicate<'tcx>>> Iterator for FilterToTraits<I> {\n     type Item = ty::PolyTraitRef<'tcx>;\n \n     fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {"}, {"sha": "add829074c4f0dcc6689d055e87f179580a348aa", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9b332ff2c71480bc9350bb9dd43e0af00d04e1a1", "patch": "@@ -1510,7 +1510,7 @@ impl<T> Binder<T> {\n     ///\n     /// Some examples where `skip_binder` is reasonable:\n     /// - extracting the def-id from a PolyTraitRef;\n-    /// - compariing the self type of a PolyTraitRef to see if it is equal to\n+    /// - comparing the self type of a PolyTraitRef to see if it is equal to\n     ///   a type parameter `X`, since the type `X`  does not reference any regions\n     pub fn skip_binder(&self) -> &T {\n         &self.0"}, {"sha": "0c82d681eed15ece14aafa2f71b9022cc224e0d4", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=9b332ff2c71480bc9350bb9dd43e0af00d04e1a1", "patch": "@@ -300,7 +300,9 @@ pub fn trans_static_method_callee<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                   .position(|item| item.def_id() == method_id)\n                                   .unwrap();\n             let (llfn, ty) =\n-                trans_object_shim(ccx, data.object_ty, data.upcast_trait_ref.clone(),\n+                trans_object_shim(ccx,\n+                                  data.object_ty,\n+                                  data.upcast_trait_ref.clone(),\n                                   method_offset_in_trait);\n             immediate_rvalue(llfn, ty)\n         }\n@@ -387,8 +389,10 @@ fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             Callee { bcx: bcx, data: Fn(llfn) }\n         }\n         traits::VtableObject(ref data) => {\n-            let (llfn, _) = trans_object_shim(bcx.ccx(), data.object_ty,\n-                                              data.upcast_trait_ref.clone(), n_method);\n+            let (llfn, _) = trans_object_shim(bcx.ccx(),\n+                                              data.object_ty,\n+                                              data.upcast_trait_ref.clone(),\n+                                              n_method);\n             Callee { bcx: bcx, data: Fn(llfn) }\n         }\n         traits::VtableBuiltin(..) |"}, {"sha": "12bcf5cf5ada47a2af3d506559ab3e65538ae01d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b332ff2c71480bc9350bb9dd43e0af00d04e1a1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9b332ff2c71480bc9350bb9dd43e0af00d04e1a1", "patch": "@@ -1251,6 +1251,11 @@ fn ensure_super_predicates_step(ccx: &CrateCtxt,\n     debug!(\"ensure_super_predicates_step(trait_def_id={})\", trait_def_id.repr(tcx));\n \n     if trait_def_id.krate != ast::LOCAL_CRATE {\n+        // If this trait comes from an external crate, then all of the\n+        // supertraits it may depend on also must come from external\n+        // crates, and hence all of them already have their\n+        // super-predicates \"converted\" (and available from crate\n+        // meta-data), so there is no need to transitively test them.\n         return Vec::new();\n     }\n \n@@ -2111,8 +2116,11 @@ fn compute_bounds<'tcx>(astconv: &AstConv<'tcx>,\n     param_bounds\n }\n \n-/// Converts a specific TyParamBound from the AST into the\n-/// appropriate poly-trait-reference.\n+/// Converts a specific TyParamBound from the AST into a set of\n+/// predicates that apply to the self-type. A vector is returned\n+/// because this can be anywhere from 0 predicates (`T:?Sized` adds no\n+/// predicates) to 1 (`T:Foo`) to many (`T:Bar<X=i32>` adds `T:Bar`\n+/// and `<T as Bar>::X == i32`).\n fn predicates_from_bound<'tcx>(astconv: &AstConv<'tcx>,\n                                param_ty: Ty<'tcx>,\n                                bound: &ast::TyParamBound)"}]}