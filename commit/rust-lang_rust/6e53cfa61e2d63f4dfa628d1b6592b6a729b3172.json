{"sha": "6e53cfa61e2d63f4dfa628d1b6592b6a729b3172", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNTNjZmE2MWUyZDYzZjRkZmE2MjhkMWI2NTkyYjZhNzI5YjMxNzI=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-23T16:16:06Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-23T16:22:09Z"}, "message": "syntax: fix de-@rooting fallout", "tree": {"sha": "7609930da13009f3b078a98c2053b7b14e5fd4d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7609930da13009f3b078a98c2053b7b14e5fd4d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e53cfa61e2d63f4dfa628d1b6592b6a729b3172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e53cfa61e2d63f4dfa628d1b6592b6a729b3172", "html_url": "https://github.com/rust-lang/rust/commit/6e53cfa61e2d63f4dfa628d1b6592b6a729b3172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e53cfa61e2d63f4dfa628d1b6592b6a729b3172/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aff620de1e5e0791b7c91f765cf17f3214848230", "url": "https://api.github.com/repos/rust-lang/rust/commits/aff620de1e5e0791b7c91f765cf17f3214848230", "html_url": "https://github.com/rust-lang/rust/commit/aff620de1e5e0791b7c91f765cf17f3214848230"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "865c3be4ae6469c1a5ee0b00b621d1498a8d4a95", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e53cfa61e2d63f4dfa628d1b6592b6a729b3172/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e53cfa61e2d63f4dfa628d1b6592b6a729b3172/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=6e53cfa61e2d63f4dfa628d1b6592b6a729b3172", "patch": "@@ -363,14 +363,15 @@ impl Map {\n     }\n \n     pub fn with_attrs<T>(&self, id: NodeId, f: |Option<&[Attribute]>| -> T) -> T {\n-        let attrs = match self.get(id) {\n-            NodeItem(i) => Some(i.attrs.as_slice()),\n-            NodeForeignItem(fi) => Some(fi.attrs.as_slice()),\n-            NodeTraitMethod(tm) => match *tm {\n+        let node = self.get(id);\n+        let attrs = match node {\n+            NodeItem(ref i) => Some(i.attrs.as_slice()),\n+            NodeForeignItem(ref fi) => Some(fi.attrs.as_slice()),\n+            NodeTraitMethod(ref tm) => match **tm {\n                 Required(ref type_m) => Some(type_m.attrs.as_slice()),\n-                Provided(m) => Some(m.attrs.as_slice())\n+                Provided(ref m) => Some(m.attrs.as_slice())\n             },\n-            NodeMethod(m) => Some(m.attrs.as_slice()),\n+            NodeMethod(ref m) => Some(m.attrs.as_slice()),\n             NodeVariant(ref v) => Some(v.node.attrs.as_slice()),\n             // unit/tuple structs take the attributes straight from\n             // the struct definition."}, {"sha": "852dd0ed02a37fd24dca66ea0bbbdea086a6b279", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6e53cfa61e2d63f4dfa628d1b6592b6a729b3172/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e53cfa61e2d63f4dfa628d1b6592b6a729b3172/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=6e53cfa61e2d63f4dfa628d1b6592b6a729b3172", "patch": "@@ -814,26 +814,25 @@ impl<'a> MethodDef<'a> {\n                                 \"no self match on an enum in \\\n                                 generic `deriving`\");\n             }\n+\n+            // `ref` inside let matches is buggy. Causes havoc wih rusc.\n+            // let (variant_index, ref self_vec) = matches_so_far[0];\n+            let (variant, self_vec) = match matches_so_far.get(0) {\n+                &(_, v, ref s) => (v, s)\n+            };\n+\n             // we currently have a vec of vecs, where each\n             // subvec is the fields of one of the arguments,\n             // but if the variants all match, we want this as\n             // vec of tuples, where each tuple represents a\n             // field.\n \n-            let substructure;\n-\n             // most arms don't have matching variants, so do a\n             // quick check to see if they match (even though\n             // this means iterating twice) instead of being\n             // optimistic and doing a pile of allocations etc.\n-            match matching {\n+            let substructure = match matching {\n                 Some(variant_index) => {\n-                    // `ref` inside let matches is buggy. Causes havoc wih rusc.\n-                    // let (variant_index, ref self_vec) = matches_so_far[0];\n-                    let (variant, self_vec) = match matches_so_far.get(0) {\n-                        &(_, v, ref s) => (v, s)\n-                    };\n-\n                     let mut enum_matching_fields = Vec::from_elem(self_vec.len(), Vec::new());\n \n                     for triple in matches_so_far.tail().iter() {\n@@ -856,12 +855,12 @@ impl<'a> MethodDef<'a> {\n                             other: (*other).clone()\n                         }\n                     }).collect();\n-                    substructure = EnumMatching(variant_index, variant, field_tuples);\n+                    EnumMatching(variant_index, variant, field_tuples)\n                 }\n                 None => {\n-                    substructure = EnumNonMatching(matches_so_far.as_slice());\n+                    EnumNonMatching(matches_so_far.as_slice())\n                 }\n-            }\n+            };\n             self.call_substructure_method(cx, trait_, type_ident,\n                                           self_args, nonself_args,\n                                           &substructure)"}]}