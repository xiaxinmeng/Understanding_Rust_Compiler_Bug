{"sha": "fa8c53bae4592395565fc3c06cdcc093fc4b0dbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhOGM1M2JhZTQ1OTIzOTU1NjVmYzNjMDZjZGNjMDkzZmM0YjBkYmU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-14T09:31:03Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-22T01:52:04Z"}, "message": "Start warning cycle.", "tree": {"sha": "37136941ac391831a41f3132b7c3fdd40e17f35e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37136941ac391831a41f3132b7c3fdd40e17f35e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe", "html_url": "https://github.com/rust-lang/rust/commit/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "808a7ca805e25fd60bfbdfce5780a05e98b5f1b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/808a7ca805e25fd60bfbdfce5780a05e98b5f1b1", "html_url": "https://github.com/rust-lang/rust/commit/808a7ca805e25fd60bfbdfce5780a05e98b5f1b1"}], "stats": {"total": 105, "additions": 92, "deletions": 13}, "files": [{"sha": "c369bc10e94824955c2bd1285fc4259a7bfa0fc9", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=fa8c53bae4592395565fc3c06cdcc093fc4b0dbe", "patch": "@@ -204,6 +204,13 @@ declare_lint! {\n     \"detects extra requirements in impls that were erroneously allowed\"\n }\n \n+declare_lint! {\n+    pub LEGACY_DIRECTORY_OWNERSHIP,\n+    Warn,\n+    \"non-inline, non-`#[path]` modules (e.g. `mod foo;`) were erroneously allowed in some files \\\n+     not named `mod.rs`\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -242,7 +249,8 @@ impl LintPass for HardwiredLints {\n             LIFETIME_UNDERSCORE,\n             SAFE_EXTERN_STATICS,\n             PATTERNS_IN_FNS_WITHOUT_BODY,\n-            EXTRA_REQUIREMENT_IN_IMPL\n+            EXTRA_REQUIREMENT_IN_IMPL,\n+            LEGACY_DIRECTORY_OWNERSHIP\n         )\n     }\n }"}, {"sha": "1a3ea5db871ebedc1363cba4e1f9550f9623fcbc", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=fa8c53bae4592395565fc3c06cdcc093fc4b0dbe", "patch": "@@ -232,6 +232,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(EXTRA_REQUIREMENT_IN_IMPL),\n             reference: \"issue #37166 <https://github.com/rust-lang/rust/issues/37166>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(LEGACY_DIRECTORY_OWNERSHIP),\n+            reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "105155d75aba6c5228f592fc4670bf0100ed4e15", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=fa8c53bae4592395565fc3c06cdcc093fc4b0dbe", "patch": "@@ -207,6 +207,13 @@ impl<'a> Visitor for AstValidator<'a> {\n             ItemKind::Mod(_) => {\n                 // Ensure that `path` attributes on modules are recorded as used (c.f. #35584).\n                 attr::first_attr_value_str_by_name(&item.attrs, \"path\");\n+                if let Some(attr) =\n+                        item.attrs.iter().find(|attr| attr.name() == \"warn_directory_ownership\") {\n+                    let lint = lint::builtin::LEGACY_DIRECTORY_OWNERSHIP;\n+                    let msg = \"cannot declare a new module at this location\";\n+                    self.session.add_lint(lint, item.id, item.span, msg.to_string());\n+                    attr::mark_used(attr);\n+                }\n             }\n             ItemKind::Union(ref vdata, _) => {\n                 if !vdata.is_struct() {"}, {"sha": "fd6cae1e1b6688bbfdea9b91da5935b06d5fad99", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=fa8c53bae4592395565fc3c06cdcc093fc4b0dbe", "patch": "@@ -790,7 +790,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                         PathBuf::from(self.cx.parse_sess.codemap().span_to_filename(inner));\n                     let directory_ownership = match path.file_name().unwrap().to_str() {\n                         Some(\"mod.rs\") => DirectoryOwnership::Owned,\n-                        _ => DirectoryOwnership::UnownedViaMod,\n+                        _ => DirectoryOwnership::UnownedViaMod(false),\n                     };\n                     path.pop();\n                     module.directory = path;"}, {"sha": "bfaf00a3d3f0814ee319772f306d564a2fea5c73", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=fa8c53bae4592395565fc3c06cdcc093fc4b0dbe", "patch": "@@ -86,7 +86,7 @@ pub struct Directory {\n pub enum DirectoryOwnership {\n     Owned,\n     UnownedViaBlock,\n-    UnownedViaMod,\n+    UnownedViaMod(bool /* legacy warnings? */),\n }\n \n // a bunch of utility functions of the form parse_<thing>_from_<source>"}, {"sha": "b00e6b5d58f04011e6efcff9b87b70c9421079d6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fa8c53bae4592395565fc3c06cdcc093fc4b0dbe", "patch": "@@ -38,7 +38,7 @@ use ast::{Ty, TyKind, TypeBinding, TyParam, TyParamBounds};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n use ast::{BinOpKind, UnOp};\n-use ast;\n+use {ast, attr};\n use codemap::{self, CodeMap, Spanned, spanned, respan};\n use syntax_pos::{self, Span, BytePos, mk_sp};\n use errors::{self, DiagnosticBuilder};\n@@ -243,6 +243,7 @@ pub struct ModulePath {\n pub struct ModulePathSuccess {\n     pub path: PathBuf,\n     pub directory_ownership: DirectoryOwnership,\n+    warn: bool,\n }\n \n pub struct ModulePathError {\n@@ -5268,10 +5269,25 @@ impl<'a> Parser<'a> {\n             self.bump();\n             if in_cfg {\n                 // This mod is in an external file. Let's go get it!\n-                let ModulePathSuccess { path, directory_ownership } =\n+                let ModulePathSuccess { path, directory_ownership, warn } =\n                     self.submod_path(id, &outer_attrs, id_span)?;\n-                let (module, attrs) =\n+                let (module, mut attrs) =\n                     self.eval_src_mod(path, directory_ownership, id.to_string(), id_span)?;\n+                if warn {\n+                    let attr = ast::Attribute {\n+                        id: attr::mk_attr_id(),\n+                        style: ast::AttrStyle::Outer,\n+                        value: ast::MetaItem {\n+                            name: Symbol::intern(\"warn_directory_ownership\"),\n+                            node: ast::MetaItemKind::Word,\n+                            span: syntax_pos::DUMMY_SP,\n+                        },\n+                        is_sugared_doc: false,\n+                        span: syntax_pos::DUMMY_SP,\n+                    };\n+                    attr::mark_known(&attr);\n+                    attrs.push(attr);\n+                }\n                 Ok((id, module, Some(attrs)))\n             } else {\n                 let placeholder = ast::Mod { inner: syntax_pos::DUMMY_SP, items: Vec::new() };\n@@ -5290,7 +5306,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn push_directory(&mut self, id: Ident, attrs: &[Attribute]) {\n-        if let Some(path) = ::attr::first_attr_value_str_by_name(attrs, \"path\") {\n+        if let Some(path) = attr::first_attr_value_str_by_name(attrs, \"path\") {\n             self.directory.path.push(&*path.as_str());\n             self.directory.ownership = DirectoryOwnership::Owned;\n         } else {\n@@ -5299,7 +5315,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn submod_path_from_attr(attrs: &[ast::Attribute], dir_path: &Path) -> Option<PathBuf> {\n-        ::attr::first_attr_value_str_by_name(attrs, \"path\").map(|d| dir_path.join(&*d.as_str()))\n+        attr::first_attr_value_str_by_name(attrs, \"path\").map(|d| dir_path.join(&*d.as_str()))\n     }\n \n     /// Returns either a path to a module, or .\n@@ -5316,11 +5332,13 @@ impl<'a> Parser<'a> {\n         let result = match (default_exists, secondary_exists) {\n             (true, false) => Ok(ModulePathSuccess {\n                 path: default_path,\n-                directory_ownership: DirectoryOwnership::UnownedViaMod,\n+                directory_ownership: DirectoryOwnership::UnownedViaMod(false),\n+                warn: false,\n             }),\n             (false, true) => Ok(ModulePathSuccess {\n                 path: secondary_path,\n                 directory_ownership: DirectoryOwnership::Owned,\n+                warn: false,\n             }),\n             (false, false) => Err(ModulePathError {\n                 err_msg: format!(\"file not found for module `{}`\", mod_name),\n@@ -5353,9 +5371,10 @@ impl<'a> Parser<'a> {\n             return Ok(ModulePathSuccess {\n                 directory_ownership: match path.file_name().and_then(|s| s.to_str()) {\n                     Some(\"mod.rs\") => DirectoryOwnership::Owned,\n-                    _ => DirectoryOwnership::UnownedViaMod,\n+                    _ => DirectoryOwnership::UnownedViaMod(true),\n                 },\n                 path: path,\n+                warn: false,\n             });\n         }\n \n@@ -5371,7 +5390,12 @@ impl<'a> Parser<'a> {\n                 err.span_note(id_sp, &msg);\n             }\n             return Err(err);\n-        } else if let DirectoryOwnership::UnownedViaMod = self.directory.ownership {\n+        } else if let DirectoryOwnership::UnownedViaMod(warn) = self.directory.ownership {\n+            if warn {\n+                if let Ok(result) = paths.result {\n+                    return Ok(ModulePathSuccess { warn: true, ..result });\n+                }\n+            }\n             let mut err = self.diagnostic().struct_span_err(id_sp,\n                 \"cannot declare a new module at this location\");\n             let this_module = match self.directory.path.file_name() {\n@@ -5387,8 +5411,10 @@ impl<'a> Parser<'a> {\n                               &format!(\"... or maybe `use` the module `{}` instead \\\n                                         of possibly redeclaring it\",\n                                        paths.name));\n-            }\n-            return Err(err);\n+                return Err(err);\n+            } else {\n+                return Err(err);\n+            };\n         }\n \n         match paths.result {"}, {"sha": "75e3426a399359ff32c9d5f4748bb9d5c5cc7973", "filename": "src/test/compile-fail/directory_ownership/backcompat-warnings.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fbackcompat-warnings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fbackcompat-warnings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fbackcompat-warnings.rs?ref=fa8c53bae4592395565fc3c06cdcc093fc4b0dbe", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: cannot declare a new module at this location\n+// error-pattern: will become a hard error\n+// error-pattern: compilation successful\n+\n+#![feature(rustc_attrs)]\n+\n+#[path=\"mod_file_not_owning_aux3.rs\"]\n+mod foo;\n+\n+#[rustc_error]\n+fn main() {}"}, {"sha": "3a164fd55d92702a01dbe8c6d7befdd3ca823b17", "filename": "src/test/compile-fail/directory_ownership/mod_file_not_owning_aux3.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmod_file_not_owning_aux3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8c53bae4592395565fc3c06cdcc093fc4b0dbe/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmod_file_not_owning_aux3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmod_file_not_owning_aux3.rs?ref=fa8c53bae4592395565fc3c06cdcc093fc4b0dbe", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-test this is not a test\n+\n+mod mod_file_not_owning_aux2;"}]}