{"sha": "e2f7f4a7b74967b66ea0e1c07aa114d0223747f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZjdmNGE3Yjc0OTY3YjY2ZWEwZTFjMDdhYTExNGQwMjIzNzQ3Zjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-25T15:12:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T23:47:04Z"}, "message": "port `nice_region_error` code to not track depth but rather index\n\nCo-authored-by: csmoe <35686186+csmoe@users.noreply.github.com>", "tree": {"sha": "7798bc61ce617d62158325420aaa57c88c5510c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7798bc61ce617d62158325420aaa57c88c5510c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2f7f4a7b74967b66ea0e1c07aa114d0223747f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f7f4a7b74967b66ea0e1c07aa114d0223747f9", "html_url": "https://github.com/rust-lang/rust/commit/e2f7f4a7b74967b66ea0e1c07aa114d0223747f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2f7f4a7b74967b66ea0e1c07aa114d0223747f9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bd4bffe50b77782b9cd147e2b92ddc50af10435", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd4bffe50b77782b9cd147e2b92ddc50af10435", "html_url": "https://github.com/rust-lang/rust/commit/8bd4bffe50b77782b9cd147e2b92ddc50af10435"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "13c849ec0b764d72823eae0d824859d30e30fcdd", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e2f7f4a7b74967b66ea0e1c07aa114d0223747f9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f7f4a7b74967b66ea0e1c07aa114d0223747f9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=e2f7f4a7b74967b66ea0e1c07aa114d0223747f9", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             tcx: self.tcx,\n             bound_region: *br,\n             found_type: None,\n-            depth: 1,\n+            current_index: ty::DebruijnIndex::INNERMOST,\n         };\n         nested_visitor.visit_ty(arg);\n         nested_visitor.found_type\n@@ -99,7 +99,7 @@ struct FindNestedTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     // The type where the anonymous lifetime appears\n     // for e.g. Vec<`&u8`> and <`&u8`>\n     found_type: Option<&'gcx hir::Ty>,\n-    depth: u32,\n+    current_index: ty::DebruijnIndex,\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n@@ -110,16 +110,16 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n     fn visit_ty(&mut self, arg: &'gcx hir::Ty) {\n         match arg.node {\n             hir::TyBareFn(_) => {\n-                self.depth += 1;\n+                self.current_index.shift_in(1);\n                 intravisit::walk_ty(self, arg);\n-                self.depth -= 1;\n+                self.current_index.shift_out(1);\n                 return;\n             }\n \n             hir::TyTraitObject(ref bounds, _) => for bound in bounds {\n-                self.depth += 1;\n+                self.current_index.shift_in(1);\n                 self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n-                self.depth -= 1;\n+                self.current_index.shift_out(1);\n             },\n \n             hir::TyRptr(ref lifetime, _) => {\n@@ -135,11 +135,11 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                     ) => {\n                         debug!(\n                             \"LateBoundAnon depth = {:?} anon_index = {:?} br_index={:?}\",\n-                            debruijn_index.depth,\n+                            debruijn_index,\n                             anon_index,\n                             br_index\n                         );\n-                        if debruijn_index.depth == self.depth && anon_index == br_index {\n+                        if debruijn_index == self.current_index && anon_index == br_index {\n                             self.found_type = Some(arg);\n                             return; // we can stop visiting now\n                         }\n@@ -170,11 +170,11 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                     ) => {\n                         debug!(\n                             \"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\",\n-                            debruijn_index.depth\n+                            debruijn_index\n                         );\n                         debug!(\"self.infcx.tcx.hir.local_def_id(id)={:?}\", id);\n                         debug!(\"def_id={:?}\", def_id);\n-                        if debruijn_index.depth == self.depth && id == def_id {\n+                        if debruijn_index == self.current_index && id == def_id {\n                             self.found_type = Some(arg);\n                             return; // we can stop visiting now\n                         }\n@@ -196,7 +196,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                     tcx: self.tcx,\n                     found_it: false,\n                     bound_region: self.bound_region,\n-                    depth: self.depth,\n+                    current_index: self.current_index,\n                 };\n                 intravisit::walk_ty(subvisitor, arg); // call walk_ty; as visit_ty is empty,\n                                                       // this will visit only outermost type\n@@ -222,7 +222,7 @@ struct TyPathVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     found_it: bool,\n     bound_region: ty::BoundRegion,\n-    depth: u32,\n+    current_index: ty::DebruijnIndex,\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n@@ -235,7 +235,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n         match (self.tcx.named_region(hir_id), self.bound_region) {\n             // the lifetime of the TyPath!\n             (Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)), ty::BrAnon(br_index)) => {\n-                if debruijn_index.depth == self.depth && anon_index == br_index {\n+                if debruijn_index == self.current_index && anon_index == br_index {\n                     self.found_it = true;\n                     return;\n                 }\n@@ -257,11 +257,11 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n             (Some(rl::Region::LateBound(debruijn_index, id, _)), ty::BrNamed(def_id, _)) => {\n                 debug!(\n                     \"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\",\n-                    debruijn_index.depth\n+                    debruijn_index,\n                 );\n                 debug!(\"id={:?}\", id);\n                 debug!(\"def_id={:?}\", def_id);\n-                if debruijn_index.depth == self.depth && id == def_id {\n+                if debruijn_index == self.current_index && id == def_id {\n                     self.found_it = true;\n                     return; // we can stop visiting now\n                 }"}]}