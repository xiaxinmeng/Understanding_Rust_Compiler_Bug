{"sha": "bb552dc96fc46ff0b33bc48f7c3c48f3acf2a306", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNTUyZGM5NmZjNDZmZjBiMzNiYzQ4ZjdjM2M0OGYzYWNmMmEzMDY=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-26T15:09:37Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-26T15:09:51Z"}, "message": "eta_reduction: fix false positive for unsafe fns (fixes #243)", "tree": {"sha": "da05ca7a216d01be3b1370abe8da3bb24c8c6193", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da05ca7a216d01be3b1370abe8da3bb24c8c6193"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb552dc96fc46ff0b33bc48f7c3c48f3acf2a306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb552dc96fc46ff0b33bc48f7c3c48f3acf2a306", "html_url": "https://github.com/rust-lang/rust/commit/bb552dc96fc46ff0b33bc48f7c3c48f3acf2a306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb552dc96fc46ff0b33bc48f7c3c48f3acf2a306/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb3b47de6f0d61d1680e83cac0522d5c7b8d9a8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb3b47de6f0d61d1680e83cac0522d5c7b8d9a8b", "html_url": "https://github.com/rust-lang/rust/commit/bb3b47de6f0d61d1680e83cac0522d5c7b8d9a8b"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "da2149f0539f110fea9cfd3a4d95bf1c7a9400b5", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bb552dc96fc46ff0b33bc48f7c3c48f3acf2a306/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb552dc96fc46ff0b33bc48f7c3c48f3acf2a306/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=bb552dc96fc46ff0b33bc48f7c3c48f3acf2a306", "patch": "@@ -1,8 +1,8 @@\n use rustc::lint::*;\n use syntax::ast::*;\n-use syntax::print::pprust::expr_to_string;\n+use rustc::middle::ty;\n \n-use utils::span_lint;\n+use utils::{snippet, span_lint};\n \n \n #[allow(missing_copy_implementations)]\n@@ -47,7 +47,17 @@ fn check_closure(cx: &Context, expr: &Expr) {\n                     // is no way the closure is the same as the function\n                     return;\n                 }\n-                if args.iter().any(|arg| is_adjusted(cx, arg)) { return; }\n+                if args.iter().any(|arg| is_adjusted(cx, arg)) {\n+                    // Are the arguments type-adjusted? Then we need the closure\n+                    return;\n+                }\n+                let fn_ty = cx.tcx.expr_ty(caller);\n+                if let ty::TyBareFn(_, fn_ty) = fn_ty.sty {\n+                    // Is it an unsafe function? They don't implement the closure traits\n+                    if fn_ty.unsafety == Unsafety::Unsafe {\n+                        return;\n+                    }\n+                }\n                 for (ref a1, ref a2) in decl.inputs.iter().zip(args) {\n                     if let PatIdent(_, ident, _) = a1.pat.node {\n                         // XXXManishearth Should I be checking the binding mode here?\n@@ -67,9 +77,9 @@ fn check_closure(cx: &Context, expr: &Expr) {\n                         return\n                     }\n                 }\n-                span_lint(cx, REDUNDANT_CLOSURE, expr.span,\n-                             &format!(\"redundant closure found. Consider using `{}` in its place\",\n-                                      expr_to_string(caller))[..])\n+                span_lint(cx, REDUNDANT_CLOSURE, expr.span, &format!(\n+                    \"redundant closure found. Consider using `{}` in its place\",\n+                    snippet(cx, caller.span, \"..\")));\n             }\n         }\n     }"}, {"sha": "d53ea4e97d7bfc78637d6c425994c88e54eb9cf9", "filename": "tests/compile-fail/eta.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb552dc96fc46ff0b33bc48f7c3c48f3acf2a306/tests%2Fcompile-fail%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb552dc96fc46ff0b33bc48f7c3c48f3acf2a306/tests%2Fcompile-fail%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feta.rs?ref=bb552dc96fc46ff0b33bc48f7c3c48f3acf2a306", "patch": "@@ -9,9 +9,12 @@ fn main() {\n     meta(|a| foo(a));\n     //~^ ERROR redundant closure found. Consider using `foo` in its place\n     let c = Some(1u8).map(|a| {1+2; foo}(a));\n-    //~^ ERROR redundant closure found. Consider using `{ 1 + 2; foo }` in its place\n+    //~^ ERROR redundant closure found. Consider using `{1+2; foo}` in its place\n     let d = Some(1u8).map(|a| foo((|b| foo2(b))(a))); //is adjusted?\n     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n+    unsafe {\n+        Some(1u8).map(|a| unsafe_fn(a)); // unsafe fn\n+    }\n }\n \n fn meta<F>(f: F) where F: Fn(u8) {\n@@ -32,3 +35,5 @@ where F: Fn(&X, &X) -> bool {\n }\n \n fn below(x: &u8, y: &u8) -> bool { x < y }\n+\n+unsafe fn unsafe_fn(_: u8) { }"}]}