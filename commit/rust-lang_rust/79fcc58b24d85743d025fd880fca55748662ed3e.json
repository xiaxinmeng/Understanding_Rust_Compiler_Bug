{"sha": "79fcc58b24d85743d025fd880fca55748662ed3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZmNjNThiMjRkODU3NDNkMDI1ZmQ4ODBmY2E1NTc0ODY2MmVkM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-18T11:39:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-18T11:39:51Z"}, "message": "Auto merge of #54034 - pnkfelix:issue-15287-bind-by-move-pattern-guards, r=nikomatsakis\n\nAdd feature to enable bind by move pattern guards\n\nImplement #15287 as described on https://github.com/rust-lang/rust/issues/15287#issuecomment-404827419", "tree": {"sha": "e9ef5ee5914fd8a21dec343df158f243d1bddd3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9ef5ee5914fd8a21dec343df158f243d1bddd3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79fcc58b24d85743d025fd880fca55748662ed3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79fcc58b24d85743d025fd880fca55748662ed3e", "html_url": "https://github.com/rust-lang/rust/commit/79fcc58b24d85743d025fd880fca55748662ed3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79fcc58b24d85743d025fd880fca55748662ed3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f004cae5360c4a3f365c7f7525b4293559201ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f004cae5360c4a3f365c7f7525b4293559201ce2", "html_url": "https://github.com/rust-lang/rust/commit/f004cae5360c4a3f365c7f7525b4293559201ce2"}, {"sha": "3a07d3dbd6cdb2014369935b62b36c64d6c580a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a07d3dbd6cdb2014369935b62b36c64d6c580a6", "html_url": "https://github.com/rust-lang/rust/commit/3a07d3dbd6cdb2014369935b62b36c64d6c580a6"}], "stats": {"total": 339, "additions": 318, "deletions": 21}, "files": [{"sha": "b7b0fdca2e6349c895c6b4556ea66e47252e5064", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -1448,10 +1448,37 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.queries.on_disk_cache.serialize(self.global_tcx(), encoder)\n     }\n \n+    /// This checks whether one is allowed to have pattern bindings\n+    /// that bind-by-move on a match arm that has a guard, e.g.:\n+    ///\n+    /// ```rust\n+    /// match foo { A(inner) if { /* something */ } => ..., ... }\n+    /// ```\n+    ///\n+    /// It is separate from check_for_mutation_in_guard_via_ast_walk,\n+    /// because that method has a narrower effect that can be toggled\n+    /// off via a separate `-Z` flag, at least for the short term.\n+    pub fn allow_bind_by_move_patterns_with_guards(self) -> bool {\n+        self.features().bind_by_move_pattern_guards && self.use_mir_borrowck()\n+    }\n+\n     /// If true, we should use a naive AST walk to determine if match\n     /// guard could perform bad mutations (or mutable-borrows).\n     pub fn check_for_mutation_in_guard_via_ast_walk(self) -> bool {\n-        !self.sess.opts.debugging_opts.disable_ast_check_for_mutation_in_guard\n+        // If someone passes the `-Z` flag, they're asking for the footgun.\n+        if self.sess.opts.debugging_opts.disable_ast_check_for_mutation_in_guard {\n+            return false;\n+        }\n+\n+        // If someone requests the feature, then be a little more\n+        // careful and ensure that MIR-borrowck is enabled (which can\n+        // happen via edition selection, via `feature(nll)`, or via an\n+        // appropriate `-Z` flag) before disabling the mutation check.\n+        if self.allow_bind_by_move_patterns_with_guards() {\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     /// If true, we should use the AST-based borrowck (we may *also* use"}, {"sha": "23667d1b331a3b1e8386e9d7a8ec00b7116ceb08", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -537,11 +537,15 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n                              \"cannot bind by-move with sub-bindings\")\n                 .span_label(p.span, \"binds an already bound by-move value by moving it\")\n                 .emit();\n-        } else if has_guard {\n-            struct_span_err!(cx.tcx.sess, p.span, E0008,\n-                      \"cannot bind by-move into a pattern guard\")\n-                .span_label(p.span, \"moves value into pattern guard\")\n-                .emit();\n+        } else if has_guard && !cx.tcx.allow_bind_by_move_patterns_with_guards() {\n+            let mut err = struct_span_err!(cx.tcx.sess, p.span, E0008,\n+                                       \"cannot bind by-move into a pattern guard\");\n+            err.span_label(p.span, \"moves value into pattern guard\");\n+            if cx.tcx.sess.opts.unstable_features.is_nightly_build() && cx.tcx.use_mir_borrowck() {\n+                err.help(\"add #![feature(bind_by_move_pattern_guards)] to the \\\n+                          crate attributes to enable\");\n+            }\n+            err.emit();\n         } else if let Some(by_ref_span) = by_ref_span {\n             struct_span_err!(\n                 cx.tcx.sess,\n@@ -613,10 +617,16 @@ impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n               _: LoanCause) {\n         match kind {\n             ty::MutBorrow => {\n-                struct_span_err!(self.cx.tcx.sess, span, E0301,\n-                          \"cannot mutably borrow in a pattern guard\")\n-                    .span_label(span, \"borrowed mutably in pattern guard\")\n-                    .emit();\n+                let mut err = struct_span_err!(self.cx.tcx.sess, span, E0301,\n+                          \"cannot mutably borrow in a pattern guard\");\n+                err.span_label(span, \"borrowed mutably in pattern guard\");\n+                if self.cx.tcx.sess.opts.unstable_features.is_nightly_build() &&\n+                    self.cx.tcx.use_mir_borrowck()\n+                {\n+                    err.help(\"add #![feature(bind_by_move_pattern_guards)] to the \\\n+                              crate attributes to enable\");\n+                }\n+                err.emit();\n             }\n             ty::ImmBorrow | ty::UniqueImmBorrow => {}\n         }"}, {"sha": "8ddb7473162b0db32780d199bb3812cfe36f64c2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -515,6 +515,12 @@ declare_features! (\n \n     // Self struct constructor  (RFC 2302)\n     (active, self_struct_ctor, \"1.31.0\", Some(51994), None),\n+\n+    // allow mixing of bind-by-move in patterns and references to\n+    // those identifiers in guards, *if* we are using MIR-borrowck\n+    // (aka NLL). Essentially this means you need to be on\n+    // edition:2018 or later.\n+    (active, bind_by_move_pattern_guards, \"1.30.0\", Some(15287), None),\n );\n \n declare_features! ("}, {"sha": "5f8b7007f304c5468b746ded4904efa753fa52d4", "filename": "src/test/ui/bind-by-move/bind-by-move-no-guards.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.nll.stderr?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,11 @@\n+error[E0008]: cannot bind by-move into a pattern guard\n+  --> $DIR/bind-by-move-no-guards.rs:8:14\n+   |\n+LL |         Some(z) if z.recv().unwrap() => { panic!() },\n+   |              ^ moves value into pattern guard\n+   |\n+   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0008`."}, {"sha": "bc9b3a8de4ef5d41416773358b04214960f2989d", "filename": "src/test/ui/bind-by-move/bind-by-move-no-guards.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.rs?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::sync::mpsc::channel;\n \n fn main() {"}, {"sha": "2af2b0d660efa3cf1882e4ae5d56934406a70c12", "filename": "src/test/ui/bind-by-move/bind-by-move-no-guards.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -1,5 +1,5 @@\n error[E0008]: cannot bind by-move into a pattern guard\n-  --> $DIR/bind-by-move-no-guards.rs:18:14\n+  --> $DIR/bind-by-move-no-guards.rs:8:14\n    |\n LL |         Some(z) if z.recv().unwrap() => { panic!() },\n    |              ^ moves value into pattern guard"}, {"sha": "b363a78cbc206825a19594ed858ea858e843ee77", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,24 @@\n+error[E0302]: cannot assign in a pattern guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:20:25\n+   |\n+LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n+   |                         ^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n+\n+error[E0301]: cannot mutably borrow in a pattern guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:22:38\n+   |\n+LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n+   |                                      ^ borrowed mutably in pattern guard\n+   |\n+   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+\n+error[E0302]: cannot assign in a pattern guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:22:41\n+   |\n+LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n+   |                                         ^^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0301, E0302.\n+For more information about an error, try `rustc --explain E0301`."}, {"sha": "ce627cb741a378c06078a84d9a793473f9dc1568", "filename": "src/test/ui/error-codes/E0008.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Ferror-codes%2FE0008.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Ferror-codes%2FE0008.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0008.nll.stderr?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,11 @@\n+error[E0008]: cannot bind by-move into a pattern guard\n+  --> $DIR/E0008.rs:13:14\n+   |\n+LL |         Some(s) if s.len() == 0 => {},\n+   |              ^ moves value into pattern guard\n+   |\n+   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0008`."}, {"sha": "f060eb9043535a398ea625d8b3e6e6ddb47fed30", "filename": "src/test/ui/error-codes/E0301.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Ferror-codes%2FE0301.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Ferror-codes%2FE0301.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.nll.stderr?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,11 @@\n+error[E0301]: cannot mutably borrow in a pattern guard\n+  --> $DIR/E0301.rs:14:19\n+   |\n+LL |         option if option.take().is_none() => {}, //~ ERROR E0301\n+   |                   ^^^^^^ borrowed mutably in pattern guard\n+   |\n+   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0301`."}, {"sha": "2f3c094ff3954b8d53e529e48569e0249528c18b", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/bind-by-move-no-guards.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,21 @@\n+// Adaptation of existing ui test (from way back in\n+// rust-lang/rust#2329), that starts passing with this feature in\n+// place.\n+\n+// compile-pass\n+\n+#![feature(nll)]\n+#![feature(bind_by_move_pattern_guards)]\n+\n+use std::sync::mpsc::channel;\n+\n+fn main() {\n+    let (tx, rx) = channel();\n+    let x = Some(rx);\n+    tx.send(false);\n+    match x {\n+        Some(z) if z.recv().unwrap() => { panic!() },\n+        Some(z) => { assert!(!z.recv().unwrap()); },\n+        None => panic!()\n+    }\n+}"}, {"sha": "4c17ce23b3768d15964fa7c129cfc20dd86984de", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_2015.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,9 @@\n+error[E0008]: cannot bind by-move into a pattern guard\n+  --> $DIR/feature-gate.rs:33:16\n+   |\n+LL |         A { a: v } if *v == 42 => v,\n+   |                ^ moves value into pattern guard\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0008`."}, {"sha": "4bde9b0c8d910127954e69bdac37422d6a97bc50", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_2018.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,10 @@\n+error: compilation successful\n+  --> $DIR/feature-gate.rs:42:1\n+   |\n+LL | / fn main() {\n+LL | |     foo(107)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4bde9b0c8d910127954e69bdac37422d6a97bc50", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_feature_nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_feature_nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_feature_nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_feature_nll.stderr?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,10 @@\n+error: compilation successful\n+  --> $DIR/feature-gate.rs:42:1\n+   |\n+LL | / fn main() {\n+LL | |     foo(107)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4bde9b0c8d910127954e69bdac37422d6a97bc50", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_znll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_znll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_znll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_znll.stderr?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,10 @@\n+error: compilation successful\n+  --> $DIR/feature-gate.rs:42:1\n+   |\n+LL | / fn main() {\n+LL | |     foo(107)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4c17ce23b3768d15964fa7c129cfc20dd86984de", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.no_gate.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,9 @@\n+error[E0008]: cannot bind by-move into a pattern guard\n+  --> $DIR/feature-gate.rs:33:16\n+   |\n+LL |         A { a: v } if *v == 42 => v,\n+   |                ^ moves value into pattern guard\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0008`."}, {"sha": "f6df4d07baad0c9a472141d2a9852666d01c0160", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,47 @@\n+// Check that pattern-guards with move-bound variables is only allowed\n+// with the appropriate set of feature gates. (Note that we require\n+// the code to opt into MIR-borrowck in *some* way before the feature\n+// will work; we use the revision system here to enumerate a number of\n+// ways that opt-in could occur.)\n+\n+// gate-test-bind_by_move_pattern_guards\n+\n+// revisions: no_gate gate_and_2015 gate_and_2018 gate_and_znll gate_and_feature_nll\n+\n+// (We're already testing NLL behavior quite explicitly, no need for compare-mode=nll.)\n+// ignore-compare-mode-nll\n+\n+#![feature(rustc_attrs)]\n+\n+#![cfg_attr(gate_and_2015, feature(bind_by_move_pattern_guards))]\n+#![cfg_attr(gate_and_2018, feature(bind_by_move_pattern_guards))]\n+#![cfg_attr(gate_and_znll, feature(bind_by_move_pattern_guards))]\n+#![cfg_attr(gate_and_feature_nll, feature(bind_by_move_pattern_guards))]\n+\n+#![cfg_attr(gate_and_feature_nll, feature(nll))]\n+\n+//[gate_and_2015] edition:2015\n+//[gate_and_2018] edition:2018\n+//[gate_and_znll] compile-flags: -Z borrowck=mir\n+\n+struct A { a: Box<i32> }\n+\n+fn foo(n: i32) {\n+    let x = A { a: Box::new(n) };\n+    let _y = match x {\n+\n+        A { a: v } if *v == 42 => v,\n+        //[no_gate]~^ ERROR cannot bind by-move into a pattern guard\n+        //[gate_and_2015]~^^ ERROR cannot bind by-move into a pattern guard\n+\n+        _ => Box::new(0)\n+    };\n+}\n+\n+#[rustc_error]\n+fn main() {\n+    foo(107)\n+}\n+//[gate_and_2018]~^^^ ERROR compilation successful\n+//[gate_and_znll]~^^^^ ERROR compilation successful\n+//[gate_and_feature_nll]~^^^^^ ERROR compilation successful"}, {"sha": "9a9d11ce1b13ed37d893361ee6ffb9eb9ad74db4", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-basic-examples.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,40 @@\n+#![feature(nll)]\n+#![feature(bind_by_move_pattern_guards)]\n+\n+// compile-pass\n+\n+struct A { a: Box<i32> }\n+\n+impl A {\n+    fn get(&self) -> i32 { *self.a }\n+}\n+\n+fn foo(n: i32) {\n+    let x = A { a: Box::new(n) };\n+    let y = match x {\n+        A { a: v } if *v == 42 => v,\n+        _ => Box::new(0),\n+    };\n+}\n+\n+fn bar(n: i32) {\n+    let x = A { a: Box::new(n) };\n+    let y = match x {\n+        A { a: v } if x.get() == 42 => v,\n+        _ => Box::new(0),\n+    };\n+}\n+\n+fn baz(n: i32) {\n+    let x = A { a: Box::new(n) };\n+    let y = match x {\n+        A { a: v } if *v.clone() == 42 => v,\n+        _ => Box::new(0),\n+    };\n+}\n+\n+fn main() {\n+    foo(107);\n+    bar(107);\n+    baz(107);\n+}"}, {"sha": "0fec6b273d3bccdb949a918184ef8edba8d48631", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,16 @@\n+#![feature(nll)]\n+#![feature(bind_by_move_pattern_guards)]\n+\n+enum VecWrapper { A(Vec<i32>) }\n+\n+fn foo(x: VecWrapper) -> usize {\n+    match x {\n+        VecWrapper::A(v) if { drop(v); false } => 1,\n+        //~^ ERROR cannot move out of borrowed content\n+        VecWrapper::A(v) => v.len()\n+    }\n+}\n+\n+fn main() {\n+    foo(VecWrapper::A(vec![107]));\n+}"}, {"sha": "502006e1b3f909965bfa5c167bb06911e3668811", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/rfc-reject-double-move-across-arms.rs:8:36\n+   |\n+LL |         VecWrapper::A(v) if { drop(v); false } => 1,\n+   |                                    ^ cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "396bfc1c9319945d55b9d7f9095fffaf1889131e", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,17 @@\n+#![feature(nll)]\n+#![feature(bind_by_move_pattern_guards)]\n+\n+struct A { a: Box<i32> }\n+\n+fn foo(n: i32) {\n+    let x = A { a: Box::new(n) };\n+    let _y = match x {\n+        A { a: v } if { drop(v); true } => v,\n+        //~^ ERROR cannot move out of borrowed content\n+        _ => Box::new(0),\n+    };\n+}\n+\n+fn main() {\n+    foo(107);\n+}"}, {"sha": "dd8f42f74970992880f266e1c7288cec6d7b4489", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79fcc58b24d85743d025fd880fca55748662ed3e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr?ref=79fcc58b24d85743d025fd880fca55748662ed3e", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/rfc-reject-double-move-in-first-arm.rs:9:30\n+   |\n+LL |         A { a: v } if { drop(v); true } => v,\n+   |                              ^ cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}]}