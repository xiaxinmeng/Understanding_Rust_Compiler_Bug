{"sha": "ff0a22d99ff9dfbaa849db2cd9d23a77fa2b97a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMGEyMmQ5OWZmOWRmYmFhODQ5ZGIyY2Q5ZDIzYTc3ZmEyYjk3YTE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-18T12:05:42Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-18T12:05:42Z"}, "message": "Allow `unused_self` lint at the function level", "tree": {"sha": "9d9391aa74a7ec1f64c29be80fdf5f2ae600a9b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d9391aa74a7ec1f64c29be80fdf5f2ae600a9b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff0a22d99ff9dfbaa849db2cd9d23a77fa2b97a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0a22d99ff9dfbaa849db2cd9d23a77fa2b97a1", "html_url": "https://github.com/rust-lang/rust/commit/ff0a22d99ff9dfbaa849db2cd9d23a77fa2b97a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff0a22d99ff9dfbaa849db2cd9d23a77fa2b97a1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e36a33fac779458b65ae6b45c692a1700b08e506", "url": "https://api.github.com/repos/rust-lang/rust/commits/e36a33fac779458b65ae6b45c692a1700b08e506", "html_url": "https://github.com/rust-lang/rust/commit/e36a33fac779458b65ae6b45c692a1700b08e506"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "247da580f45143f25a98b4f1ee527f69b0e56fa1", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a22d99ff9dfbaa849db2cd9d23a77fa2b97a1/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a22d99ff9dfbaa849db2cd9d23a77fa2b97a1/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=ff0a22d99ff9dfbaa849db2cd9d23a77fa2b97a1", "patch": "@@ -2,7 +2,7 @@ use if_chain::if_chain;\n use rustc::hir::map::Map;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n-use rustc_hir::{AssocItemKind, HirId, ImplItemKind, ImplItemRef, Item, ItemKind, Path};\n+use rustc_hir::{AssocItemKind, HirId, ImplItem, ImplItemKind, ImplItemRef, ItemKind, Path};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -40,10 +40,12 @@ declare_clippy_lint! {\n declare_lint_pass!(UnusedSelf => [UNUSED_SELF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &Item<'_>) {\n-        if item.span.from_expansion() {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &ImplItem<'_>) {\n+        if impl_item.span.from_expansion() {\n             return;\n         }\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id);\n+        let item = cx.tcx.hir().expect_item(parent);\n         if let ItemKind::Impl {\n             of_trait: None,\n             items: impl_item_refs,\n@@ -56,10 +58,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n                         kind: AssocItemKind::Method { has_self: true },\n                         ..\n                     } = impl_item_ref;\n-                    let impl_item = cx.tcx.hir().impl_item(impl_item_ref.id);\n                     if let ImplItemKind::Method(_, body_id) = &impl_item.kind;\n+                    let body = cx.tcx.hir().body(*body_id);\n+                    if !body.params.is_empty();\n                     then {\n-                        let body = cx.tcx.hir().body(*body_id);\n                         let self_param = &body.params[0];\n                         let self_hir_id = self_param.pat.hir_id;\n                         let mut visitor = UnusedSelfVisitor {\n@@ -75,7 +77,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n                                 self_param.span,\n                                 \"unused `self` argument\",\n                                 \"consider refactoring to a associated function\",\n-                            )\n+                            );\n+                            return;\n                         }\n                     }\n                 }"}, {"sha": "711c1cd9d6c09b2609dad90735df1f044f97654b", "filename": "tests/ui/unused_self.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a22d99ff9dfbaa849db2cd9d23a77fa2b97a1/tests%2Fui%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a22d99ff9dfbaa849db2cd9d23a77fa2b97a1/tests%2Fui%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.rs?ref=ff0a22d99ff9dfbaa849db2cd9d23a77fa2b97a1", "patch": "@@ -26,6 +26,24 @@ mod unused_self {\n     }\n }\n \n+mod unused_self_allow {\n+    struct A {}\n+\n+    impl A {\n+        // shouldn't trigger\n+        #[allow(clippy::unused_self)]\n+        fn unused_self_move(self) {}\n+    }\n+\n+    struct B {}\n+\n+    // shouldn't trigger\n+    #[allow(clippy::unused_self)]\n+    impl B {\n+        fn unused_self_move(self) {}\n+    }\n+}\n+\n mod used_self {\n     use std::pin::Pin;\n "}]}