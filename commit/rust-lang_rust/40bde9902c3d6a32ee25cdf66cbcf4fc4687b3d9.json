{"sha": "40bde9902c3d6a32ee25cdf66cbcf4fc4687b3d9", "node_id": "C_kwDOAAsO6NoAKDQwYmRlOTkwMmMzZDZhMzJlZTI1Y2RmNjZjYmNmNGZjNDY4N2IzZDk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-25T13:43:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-25T13:43:21Z"}, "message": "Address review.", "tree": {"sha": "52128e4c3f696bb43a2abd1a99b6c91a21c14e2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52128e4c3f696bb43a2abd1a99b6c91a21c14e2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40bde9902c3d6a32ee25cdf66cbcf4fc4687b3d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40bde9902c3d6a32ee25cdf66cbcf4fc4687b3d9", "html_url": "https://github.com/rust-lang/rust/commit/40bde9902c3d6a32ee25cdf66cbcf4fc4687b3d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40bde9902c3d6a32ee25cdf66cbcf4fc4687b3d9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d5c62601d90bebdd6ef6238b928d461b85fa68", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d5c62601d90bebdd6ef6238b928d461b85fa68", "html_url": "https://github.com/rust-lang/rust/commit/c5d5c62601d90bebdd6ef6238b928d461b85fa68"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "b2578e4c4b4467161cd38ec4b5a5f55b43c0ee72", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/40bde9902c3d6a32ee25cdf66cbcf4fc4687b3d9/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40bde9902c3d6a32ee25cdf66cbcf4fc4687b3d9/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=40bde9902c3d6a32ee25cdf66cbcf4fc4687b3d9", "patch": "@@ -34,7 +34,7 @@ use rustc_data_structures::unord::UnordSet;\n use rustc_errors::{pluralize, MultiSpan};\n use rustc_session::lint::builtin::{MACRO_USE_EXTERN_CRATE, UNUSED_EXTERN_CRATES, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n \n struct UnusedImport<'a> {\n@@ -72,10 +72,8 @@ struct ExternCrateToLint {\n     has_attrs: bool,\n     /// Name used to refer to the crate.\n     ident: Ident,\n-    /// If `Some`, then this is renamed (`extern crate orig_name as\n-    /// crate_name`), and -- perhaps surprisingly -- this stores the\n-    /// *original* name (`item.name` will contain the new name)\n-    orig_name: Option<Symbol>,\n+    /// Whether the statement renames the crate `extern crate orig_name as new_name;`.\n+    renames: bool,\n }\n \n impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n@@ -130,7 +128,7 @@ impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n                     span_with_attributes: item.span_with_attributes(),\n                     has_attrs: !item.attrs.is_empty(),\n                     ident: item.ident,\n-                    orig_name,\n+                    renames: orig_name.is_some(),\n                 });\n             }\n             _ => {}\n@@ -423,18 +421,16 @@ impl Resolver<'_, '_> {\n             // If the extern crate is renamed, then we cannot suggest replacing it with a use as this\n             // would not insert the new name into the prelude, where other imports in the crate may be\n             // expecting it.\n-            if extern_crate.orig_name.is_some() {\n+            if extern_crate.renames {\n                 continue;\n             }\n \n             // If the extern crate isn't in the extern prelude,\n             // there is no way it can be written as a `use`.\n-            let usage_name =\n-                extern_crate.orig_name.map_or(extern_crate.ident, Ident::with_dummy_span);\n             if !visitor\n                 .r\n                 .extern_prelude\n-                .get(&usage_name)\n+                .get(&extern_crate.ident)\n                 .map_or(false, |entry| !entry.introduced_by_item)\n             {\n                 continue;"}]}