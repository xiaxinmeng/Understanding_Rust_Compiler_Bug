{"sha": "4ede63bee1c4ef6af808f1bdcd7439a88f23b096", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZGU2M2JlZTFjNGVmNmFmODA4ZjFiZGNkNzQzOWE4OGYyM2IwOTY=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-12-16T18:53:50Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-01-08T23:34:06Z"}, "message": "Add HashSet::get_or_insert_owned", "tree": {"sha": "c915bea07197fad03009c2d22718a9fe1dad1a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c915bea07197fad03009c2d22718a9fe1dad1a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ede63bee1c4ef6af808f1bdcd7439a88f23b096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ede63bee1c4ef6af808f1bdcd7439a88f23b096", "html_url": "https://github.com/rust-lang/rust/commit/4ede63bee1c4ef6af808f1bdcd7439a88f23b096", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ede63bee1c4ef6af808f1bdcd7439a88f23b096/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa231d998a5e853c7ba1455d7a05b500df9d63c", "url": "https://api.github.com/repos/rust-lang/rust/commits/caa231d998a5e853c7ba1455d7a05b500df9d63c", "html_url": "https://github.com/rust-lang/rust/commit/caa231d998a5e853c7ba1455d7a05b500df9d63c"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "b48700fb94420b0a044d701f18e3b6edd1de8b99", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4ede63bee1c4ef6af808f1bdcd7439a88f23b096/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ede63bee1c4ef6af808f1bdcd7439a88f23b096/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=4ede63bee1c4ef6af808f1bdcd7439a88f23b096", "patch": "@@ -631,6 +631,38 @@ where\n         self.map.raw_entry_mut().from_key(&value).or_insert(value, ()).0\n     }\n \n+    /// Inserts an owned copy of the given `value` into the set if it is not\n+    /// present, then returns a reference to the value in the set.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(hash_set_entry)]\n+    ///\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n+    ///     .iter().map(|&pet| pet.to_owned()).collect();\n+    ///\n+    /// assert_eq!(set.len(), 3);\n+    /// for &pet in &[\"cat\", \"dog\", \"fish\"] {\n+    ///     let value = set.get_or_insert_owned(pet);\n+    ///     assert_eq!(value, pet);\n+    /// }\n+    /// assert_eq!(set.len(), 4); // a new \"fish\" was inserted\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"hash_set_entry\", issue = \"60896\")]\n+    pub fn get_or_insert_owned<Q: ?Sized>(&mut self, value: &Q) -> &T\n+    where\n+        T: Borrow<Q>,\n+        Q: Hash + Eq + ToOwned<Owned = T>,\n+    {\n+        // Although the raw entry gives us `&mut T`, we only return `&T` to be consistent with\n+        // `get`. Key mutation is \"raw\" because you're not supposed to affect `Eq` or `Hash`.\n+        self.map.raw_entry_mut().from_key(value).or_insert_with(|| (value.to_owned(), ())).0\n+    }\n+\n     /// Inserts a value computed from `f` into the set if the given `value` is\n     /// not present, then returns a reference to the value in the set.\n     ///"}]}