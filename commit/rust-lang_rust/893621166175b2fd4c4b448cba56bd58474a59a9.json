{"sha": "893621166175b2fd4c4b448cba56bd58474a59a9", "node_id": "C_kwDOAAsO6NoAKDg5MzYyMTE2NjE3NWIyZmQ0YzRiNDQ4Y2JhNTZiZDU4NDc0YTU5YTk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-06T11:04:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-06T11:04:45Z"}, "message": "Rollup merge of #101427 - compiler-errors:issue-101421, r=cjgillot\n\nFix ICE, generalize 'move generics to trait' suggestion for >0 non-rcvr arguments\n\nFixes #101421\ncc #100838", "tree": {"sha": "21bd8334243525119dd67ee9f9ac10cbb19b9852", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21bd8334243525119dd67ee9f9ac10cbb19b9852"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/893621166175b2fd4c4b448cba56bd58474a59a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjFylNCRBK7hj4Ov3rIwAAoJsIAB96AySQvocDj37LB45EC6Bb\niGU5aXmBPDlN9u7epYsNMC4WyPIrj8gDV4Xr+g/MtRKaNfFr/0ga9RHKvgD+SyX3\n6405OuPZhFwOD57lFzpq4s/hD6vZMuBQ19n6lMifD1X7RumfxNCdadxHv59tgCwm\nn1O1rz6IGOYtWJvDV6OWQcWGoAmJa7gSyNzSjF3jiIvEP+v+yXm2KDmsdvK+oZvh\nckDfNoP+KQ8XTfkRD8b/y+enX1jp3vFKHCBDZ34XPOFjBG3HKEG8t3dItm161p3O\nJ5MqQ2USILkJUZFd8cSom3r/aizoFr3JSVv8w3bmxAr6l2p95fdhi3q3E1myZHo=\n=1oJg\n-----END PGP SIGNATURE-----\n", "payload": "tree 21bd8334243525119dd67ee9f9ac10cbb19b9852\nparent 00db13fcc99ad722487ac1f565ee2717f9eb89e3\nparent bee48e3fdc44d8c322fb6b86b7c18dc0faf76beb\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662462285 +0530\ncommitter GitHub <noreply@github.com> 1662462285 +0530\n\nRollup merge of #101427 - compiler-errors:issue-101421, r=cjgillot\n\nFix ICE, generalize 'move generics to trait' suggestion for >0 non-rcvr arguments\n\nFixes #101421\ncc #100838\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/893621166175b2fd4c4b448cba56bd58474a59a9", "html_url": "https://github.com/rust-lang/rust/commit/893621166175b2fd4c4b448cba56bd58474a59a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/893621166175b2fd4c4b448cba56bd58474a59a9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00db13fcc99ad722487ac1f565ee2717f9eb89e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/00db13fcc99ad722487ac1f565ee2717f9eb89e3", "html_url": "https://github.com/rust-lang/rust/commit/00db13fcc99ad722487ac1f565ee2717f9eb89e3"}, {"sha": "bee48e3fdc44d8c322fb6b86b7c18dc0faf76beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bee48e3fdc44d8c322fb6b86b7c18dc0faf76beb", "html_url": "https://github.com/rust-lang/rust/commit/bee48e3fdc44d8c322fb6b86b7c18dc0faf76beb"}], "stats": {"total": 115, "additions": 104, "deletions": 11}, "files": [{"sha": "4359124646df15b984a0662344532fe93821feca", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/893621166175b2fd4c4b448cba56bd58474a59a9/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893621166175b2fd4c4b448cba56bd58474a59a9/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=893621166175b2fd4c4b448cba56bd58474a59a9", "patch": "@@ -749,23 +749,45 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     fn suggest_moving_args_from_assoc_fn_to_trait_for_method_call(\n         &self,\n         err: &mut Diagnostic,\n-        trait_: DefId,\n+        trait_def_id: DefId,\n         expr: &'tcx hir::Expr<'tcx>,\n         msg: String,\n         num_assoc_fn_excess_args: usize,\n         num_trait_generics_except_self: usize,\n     ) {\n-        if let hir::ExprKind::MethodCall(_, receiver, args, ..) = expr.kind {\n-            assert_eq!(args.len(), 0);\n-            if num_assoc_fn_excess_args == num_trait_generics_except_self {\n-                if let Some(gen_args) = self.gen_args.span_ext()\n-                && let Ok(gen_args) = self.tcx.sess.source_map().span_to_snippet(gen_args)\n-                && let Ok(receiver) = self.tcx.sess.source_map().span_to_snippet(receiver.span) {\n-                    let sugg = format!(\"{}::{}::{}({})\", self.tcx.item_name(trait_), gen_args, self.tcx.item_name(self.def_id), receiver);\n-                    err.span_suggestion(expr.span, msg, sugg, Applicability::MaybeIncorrect);\n-                }\n-            }\n+        let sm = self.tcx.sess.source_map();\n+        let hir::ExprKind::MethodCall(_, rcvr, args, _) = expr.kind else { return; };\n+        if num_assoc_fn_excess_args != num_trait_generics_except_self {\n+            return;\n         }\n+        let Some(gen_args) = self.gen_args.span_ext() else { return; };\n+        let Ok(generics) = sm.span_to_snippet(gen_args) else { return; };\n+        let Ok(rcvr) = sm.span_to_snippet(\n+            rcvr.span.find_ancestor_inside(expr.span).unwrap_or(rcvr.span)\n+        ) else { return; };\n+        let Ok(rest) =\n+            (match args {\n+                [] => Ok(String::new()),\n+                [arg] => sm.span_to_snippet(\n+                    arg.span.find_ancestor_inside(expr.span).unwrap_or(arg.span),\n+                ),\n+                [first, .., last] => {\n+                    let first_span =\n+                        first.span.find_ancestor_inside(expr.span).unwrap_or(first.span);\n+                    let last_span =\n+                        last.span.find_ancestor_inside(expr.span).unwrap_or(last.span);\n+                    sm.span_to_snippet(first_span.to(last_span))\n+                }\n+            }) else { return; };\n+        let comma = if args.len() > 0 { \", \" } else { \"\" };\n+        let trait_path = self.tcx.def_path_str(trait_def_id);\n+        let method_name = self.tcx.item_name(self.def_id);\n+        err.span_suggestion(\n+            expr.span,\n+            msg,\n+            format!(\"{trait_path}::{generics}::{method_name}({rcvr}{comma}{rest})\"),\n+            Applicability::MaybeIncorrect,\n+        );\n     }\n \n     /// Suggests to remove redundant argument(s):"}, {"sha": "b615997d1a9a74ef94b47aa9fcc32cd5728ce5e0", "filename": "src/test/ui/suggestions/issue-101421.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/893621166175b2fd4c4b448cba56bd58474a59a9/src%2Ftest%2Fui%2Fsuggestions%2Fissue-101421.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893621166175b2fd4c4b448cba56bd58474a59a9/src%2Ftest%2Fui%2Fsuggestions%2Fissue-101421.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-101421.rs?ref=893621166175b2fd4c4b448cba56bd58474a59a9", "patch": "@@ -0,0 +1,12 @@\n+pub trait Ice {\n+    fn f(&self, _: ());\n+}\n+\n+impl Ice for () {\n+    fn f(&self, _: ()) {}\n+}\n+\n+fn main() {\n+    ().f::<()>(());\n+    //~^ ERROR this associated function takes 0 generic arguments but 1 generic argument was supplied\n+}"}, {"sha": "f8e1efb88202e00981d46813ad9b2f9b8a9e2f22", "filename": "src/test/ui/suggestions/issue-101421.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/893621166175b2fd4c4b448cba56bd58474a59a9/src%2Ftest%2Fui%2Fsuggestions%2Fissue-101421.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/893621166175b2fd4c4b448cba56bd58474a59a9/src%2Ftest%2Fui%2Fsuggestions%2Fissue-101421.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-101421.stderr?ref=893621166175b2fd4c4b448cba56bd58474a59a9", "patch": "@@ -0,0 +1,17 @@\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/issue-101421.rs:10:8\n+   |\n+LL |     ().f::<()>(());\n+   |        ^------ help: remove these generics\n+   |        |\n+   |        expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $DIR/issue-101421.rs:2:8\n+   |\n+LL |     fn f(&self, _: ());\n+   |        ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "2f540060a349d80d50730a95b11cd9d231d9cec5", "filename": "src/test/ui/suggestions/move-generic-to-trait-in-method-with-params.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/893621166175b2fd4c4b448cba56bd58474a59a9/src%2Ftest%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893621166175b2fd4c4b448cba56bd58474a59a9/src%2Ftest%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.rs?ref=893621166175b2fd4c4b448cba56bd58474a59a9", "patch": "@@ -0,0 +1,18 @@\n+// Generalizes the suggestion introduced in #100838\n+\n+trait Foo<T> {\n+    fn bar(&self, _: T);\n+}\n+\n+impl Foo<i32> for i32 {\n+    fn bar(&self, x: i32) {\n+        println!(\"{}\", self + x);\n+    }\n+}\n+\n+fn main() {\n+    1.bar::<i32>(0);\n+    //~^ ERROR this associated function takes 0 generic arguments but 1 generic argument was supplied\n+    //~| HELP consider moving this generic argument to the `Foo` trait, which takes up to 1 argument\n+    //~| HELP remove these generics\n+}"}, {"sha": "9557220f6bb5ea5127a540975a2c75ab92d98f69", "filename": "src/test/ui/suggestions/move-generic-to-trait-in-method-with-params.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/893621166175b2fd4c4b448cba56bd58474a59a9/src%2Ftest%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/893621166175b2fd4c4b448cba56bd58474a59a9/src%2Ftest%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.stderr?ref=893621166175b2fd4c4b448cba56bd58474a59a9", "patch": "@@ -0,0 +1,24 @@\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/move-generic-to-trait-in-method-with-params.rs:14:7\n+   |\n+LL |     1.bar::<i32>(0);\n+   |       ^^^ expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $DIR/move-generic-to-trait-in-method-with-params.rs:4:8\n+   |\n+LL |     fn bar(&self, _: T);\n+   |        ^^^\n+help: consider moving this generic argument to the `Foo` trait, which takes up to 1 argument\n+   |\n+LL |     Foo::<i32>::bar(1, 0);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n+help: remove these generics\n+   |\n+LL -     1.bar::<i32>(0);\n+LL +     1.bar(0);\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}