{"sha": "00c7a3f4dce52caad94decd820e8cd66a30b3d8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYzdhM2Y0ZGNlNTJjYWFkOTRkZWNkODIwZThjZDY2YTMwYjNkOGQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2017-12-10T21:15:52Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2017-12-11T22:20:12Z"}, "message": "Refactored and tidied up report function", "tree": {"sha": "0adaa312c68148caa3266aae8e204cdede78d8bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0adaa312c68148caa3266aae8e204cdede78d8bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00c7a3f4dce52caad94decd820e8cd66a30b3d8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaLwScAAoJEAF2C0+fU/FU9EcP/1Q0TaCNsKGegEwINqFzZy55\nwPmDlZPxV/DEblysuQt/tm7mdLE3KaA2lAH0t/aTGBP8F6hKvsc9C//Xn/0cbMW6\nPQftiIzfKEartR40X4nI93NjHerHYzOg6R/miPUNE7q4vdrrhtx6Q4RYfInDJfH7\nAzxP7Rlt9BefuBSOBx10gYiJsZVdgUC0RPFdCj+cAS1XkdJ24yXOfDdxcq+8mLEZ\nsoVYhgIcWC2myFwe6FOWVsPMDANCyWTbafXNb6tjAOpOMSyTOhHRfZbVyYqRjK2X\nVdCntgHTgsKGPA7gFTrLJ+kTyXcn9Jz8PC/cNimkY/auZrXVmI1LEmb3uNYPM1gp\nKManSlnz6kAQV4nAobxKkvDLHLblrCvv1lUj3bI+Pftg6mzPwTNXcBpipITkIsAq\nXRlmmvrTI3I7w1mjBmknrShjRW1MSUz424caT6RraWIZYCAZKBzp/npxEfY2fQcu\naHWVMf7Xcs0oaPVukTQ4wqlhLHaP4gqyC1Ji/BVfU9AWAsYylegsQZkh7E3CSBtt\nLhI9apXFVwozTa1b0vKlabWtXCayjOUz+MbWEKtnnrsyRWSGIeM49HckXoo4gFXn\nSKCOVPQ46CeNJQ2KyeH7tNELMDNlgSBubzK2pxJb1wtltqD8tOROqAeZxtJiddCh\nxMN6DVrISLTSFqa8CmIm\n=A8UC\n-----END PGP SIGNATURE-----", "payload": "tree 0adaa312c68148caa3266aae8e204cdede78d8bc\nparent baf68d3a3756b040aae2028f8d5a7a0a239458ef\nauthor David Wood <david@davidtw.co> 1512940552 +0000\ncommitter David Wood <david@davidtw.co> 1513030812 +0000\n\nRefactored and tidied up report function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00c7a3f4dce52caad94decd820e8cd66a30b3d8d", "html_url": "https://github.com/rust-lang/rust/commit/00c7a3f4dce52caad94decd820e8cd66a30b3d8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00c7a3f4dce52caad94decd820e8cd66a30b3d8d/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baf68d3a3756b040aae2028f8d5a7a0a239458ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/baf68d3a3756b040aae2028f8d5a7a0a239458ef", "html_url": "https://github.com/rust-lang/rust/commit/baf68d3a3756b040aae2028f8d5a7a0a239458ef"}], "stats": {"total": 145, "additions": 92, "deletions": 53}, "files": [{"sha": "186598001da6a67f1cbd1dec4c6496a83078799c", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 92, "deletions": 53, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/00c7a3f4dce52caad94decd820e8cd66a30b3d8d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c7a3f4dce52caad94decd820e8cd66a30b3d8d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=00c7a3f4dce52caad94decd820e8cd66a30b3d8d", "patch": "@@ -9,11 +9,14 @@\n // except according to those terms.\n \n use syntax_pos::Span;\n+use rustc::middle::region::ScopeTree;\n use rustc::mir::{BorrowKind, Field, Local, Location, Operand};\n use rustc::mir::{Place, ProjectionElem, Rvalue, StatementKind};\n use rustc::ty::{self, RegionKind};\n use rustc_data_structures::indexed_vec::Idx;\n \n+use std::rc::Rc;\n+\n use super::{MirBorrowckCtxt, Context};\n use super::{InitializationRequiringAction, PrefixSet};\n use dataflow::{BorrowData, Borrows, FlowAtLocation, MovingOutStatements};\n@@ -354,64 +357,100 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             _ => drop_span,\n         };\n \n-        match &self.describe_place(&borrow.place) {\n-            Some(description) => {\n-                match borrow.region {\n-                    RegionKind::ReScope(_) => {\n-                        let mut err = self.tcx.path_does_not_live_long_enough(\n-                            drop_span, &format!(\"`{}`\", description), Origin::Mir);\n-                        err.span_label(borrow_span, \"borrow occurs here\");\n-                        err.span_label(drop_span,\n-                                       format!(\"`{}` dropped here while still borrowed\",\n-                                               description));\n-                        if let Some(end) = end_span {\n-                            err.span_label(end, \"borrowed value needs to live until here\");\n-                        }\n-                        err.emit();\n-                    },\n-                    _ => {\n-                        let mut err = self.tcx.path_does_not_live_long_enough(\n-                            borrow_span, &format!(\"`{}`\", description), Origin::Mir);\n-                        err.span_label(borrow_span, \"does not live long enough\");\n-                        err.span_label(drop_span, \"borrowed value only lives until here\");\n-                        self.tcx.note_and_explain_region(scope_tree, &mut err,\n-                                                         \"borrowed value must be valid for \",\n-                                                         borrow.region, \"...\");\n-                        err.emit();\n-                    }\n-                }\n+        match (borrow.region, &self.describe_place(&borrow.place)) {\n+            (RegionKind::ReScope(_), Some(name)) => {\n+                self.report_scoped_local_value_does_not_live_long_enough(\n+                    name, &scope_tree, &borrow, drop_span, borrow_span, proper_span, end_span);\n             },\n-            None => {\n-                match borrow.region {\n-                    RegionKind::ReEarlyBound(_) | RegionKind::ReFree(_) => {\n-                        let mut err = self.tcx.path_does_not_live_long_enough(proper_span,\n-                                                                              \"borrowed value\",\n-                                                                              Origin::Mir);\n-                        err.span_label(proper_span, \"does not live long enough\");\n-                        err.span_label(drop_span, \"temporary value only lives until here\");\n-                        self.tcx.note_and_explain_region(scope_tree, &mut err,\n-                                                         \"borrowed value must be valid for \",\n-                                                         borrow.region, \"...\");\n-                        err.emit();\n-                    },\n-                    _ => {\n-                        let mut err = self.tcx.path_does_not_live_long_enough(drop_span,\n-                                                                              \"borrowed value\",\n-                                                                              Origin::Mir);\n-                        err.span_label(proper_span, \"temporary value created here\");\n-                        err.span_label(drop_span,\n-                                       \"temporary value dropped here while still borrowed\");\n-                        err.note(\"consider using a `let` binding to increase its lifetime\");\n-                        if let Some(end) = end_span {\n-                            err.span_label(end, \"temporary value needs to live until here\");\n-                        }\n-                        err.emit();\n-                    },\n-                }\n+            (RegionKind::ReScope(_), None) => {\n+                self.report_scoped_temporary_value_does_not_live_long_enough(\n+                    &scope_tree, &borrow, drop_span, borrow_span, proper_span, end_span);\n+            },\n+            (RegionKind::ReEarlyBound(_), Some(name)) |\n+            (RegionKind::ReFree(_), Some(name)) |\n+            (RegionKind::ReStatic, Some(name)) |\n+            (RegionKind::ReEmpty, Some(name)) |\n+            (RegionKind::ReVar(_), Some(name)) => {\n+                self.report_unscoped_local_value_does_not_live_long_enough(\n+                    name, &scope_tree, &borrow, drop_span, borrow_span, proper_span, end_span);\n+            },\n+            (RegionKind::ReEarlyBound(_), None) |\n+            (RegionKind::ReFree(_), None) |\n+            (RegionKind::ReStatic, None) |\n+            (RegionKind::ReEmpty, None) |\n+            (RegionKind::ReVar(_), None) => {\n+                self.report_unscoped_temporary_value_does_not_live_long_enough(\n+                    &scope_tree, &borrow, drop_span, borrow_span, proper_span, end_span);\n+            },\n+            (RegionKind::ReLateBound(_, _), _) |\n+            (RegionKind::ReSkolemized(_, _), _) |\n+            (RegionKind::ReErased, _) => {\n+                span_bug!(drop_span, \"region does not make sense in this context\");\n             },\n         }\n     }\n \n+    fn report_scoped_local_value_does_not_live_long_enough(\n+        &mut self, name: &String, _scope_tree: &Rc<ScopeTree>, _borrow: &BorrowData<'tcx>,\n+        drop_span: Span, borrow_span: Span, _proper_span: Span, end_span: Option<Span>\n+    ) {\n+        let mut err = self.tcx.path_does_not_live_long_enough(drop_span,\n+                                                              &format!(\"`{}`\", name),\n+                                                              Origin::Mir);\n+        err.span_label(borrow_span, \"borrow occurs here\");\n+        err.span_label(drop_span, format!(\"`{}` dropped here while still borrowed\", name));\n+        if let Some(end) = end_span {\n+            err.span_label(end, \"borrowed value needs to live until here\");\n+        }\n+        err.emit();\n+    }\n+\n+    fn report_scoped_temporary_value_does_not_live_long_enough(\n+        &mut self, _scope_tree: &Rc<ScopeTree>, _borrow: &BorrowData<'tcx>,\n+        drop_span: Span, borrow_span: Span, proper_span: Span, end_span: Option<Span>\n+    ) {\n+        let mut err = self.tcx.path_does_not_live_long_enough(borrow_span,\n+                                                              \"borrowed value\",\n+                                                              Origin::Mir);\n+        err.span_label(proper_span, \"temporary value created here\");\n+        err.span_label(drop_span, \"temporary value dropped here while still borrowed\");\n+        err.note(\"consider using a `let` binding to increase its lifetime\");\n+        if let Some(end) = end_span {\n+            err.span_label(end, \"temporary value needs to live until here\");\n+        }\n+        err.emit();\n+    }\n+\n+    fn report_unscoped_local_value_does_not_live_long_enough(\n+        &mut self, name: &String, scope_tree: &Rc<ScopeTree>, borrow: &BorrowData<'tcx>,\n+        drop_span: Span, borrow_span: Span, _proper_span: Span, _end_span: Option<Span>\n+    ) {\n+        let mut err = self.tcx.path_does_not_live_long_enough(borrow_span,\n+                                                              &format!(\"`{}`\", name),\n+                                                              Origin::Mir);\n+        err.span_label(borrow_span, \"does not live long enough\");\n+        err.span_label(drop_span, \"borrowed value only lives until here\");\n+        self.tcx.note_and_explain_region(scope_tree, &mut err,\n+                                         \"borrowed value must be valid for \",\n+                                         borrow.region, \"...\");\n+        err.emit();\n+    }\n+\n+    fn report_unscoped_temporary_value_does_not_live_long_enough(\n+        &mut self, scope_tree: &Rc<ScopeTree>, borrow: &BorrowData<'tcx>,\n+        drop_span: Span, _borrow_span: Span, proper_span: Span, _end_span: Option<Span>\n+    ) {\n+        let mut err = self.tcx.path_does_not_live_long_enough(proper_span,\n+                                                              \"borrowed value\",\n+                                                              Origin::Mir);\n+        err.span_label(proper_span, \"does not live long enough\");\n+        err.span_label(drop_span, \"temporary value only lives until here\");\n+        self.tcx.note_and_explain_region(scope_tree, &mut err,\n+                                         \"borrowed value must be valid for \",\n+                                         borrow.region, \"...\");\n+        err.emit();\n+    }\n+\n     pub(super) fn report_illegal_mutation_of_borrowed(\n         &mut self,\n         _: Context,"}]}