{"sha": "2d6d73fafe2f087354f7cea37297cd81316cae98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNmQ3M2ZhZmUyZjA4NzM1NGY3Y2VhMzcyOTdjZDgxMzE2Y2FlOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-18T08:21:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-18T08:21:15Z"}, "message": "Auto merge of #1517 - RalfJung:align-test, r=RalfJung\n\nforgot to add alignment test loop in one test\n\nAs expected, checking the physical integer address made alignment tests fragile, and I forgot to add the retry loop for this one.", "tree": {"sha": "f3297202fd62ca8834edda4c8404114ecf63c7c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3297202fd62ca8834edda4c8404114ecf63c7c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d6d73fafe2f087354f7cea37297cd81316cae98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6d73fafe2f087354f7cea37297cd81316cae98", "html_url": "https://github.com/rust-lang/rust/commit/2d6d73fafe2f087354f7cea37297cd81316cae98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d6d73fafe2f087354f7cea37297cd81316cae98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "066fa629f2db7c248e50b03e5aa38c2c9f07031a", "url": "https://api.github.com/repos/rust-lang/rust/commits/066fa629f2db7c248e50b03e5aa38c2c9f07031a", "html_url": "https://github.com/rust-lang/rust/commit/066fa629f2db7c248e50b03e5aa38c2c9f07031a"}, {"sha": "d5b15297acc5f585b308700d27c0f1420154a14e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b15297acc5f585b308700d27c0f1420154a14e", "html_url": "https://github.com/rust-lang/rust/commit/d5b15297acc5f585b308700d27c0f1420154a14e"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "6d85c7fb38887d538419e30c703b433359dac838", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d6d73fafe2f087354f7cea37297cd81316cae98/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/2d6d73fafe2f087354f7cea37297cd81316cae98/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=2d6d73fafe2f087354f7cea37297cd81316cae98", "patch": "@@ -1 +1 @@\n-8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421\n+515c9fa505e18a65d7f61bc3e9eb833b79a68618"}, {"sha": "ff31fc6c293e95fc1553e561b3d9b95d786ed717", "filename": "tests/compile-fail/unaligned_pointers/alignment.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs?ref=2d6d73fafe2f087354f7cea37297cd81316cae98", "patch": "@@ -1,6 +1,8 @@\n // error-pattern: but alignment 4 is required\n \n fn main() {\n+    // No retry needed, this fails reliably.\n+\n     let mut x = [0u8; 20];\n     let x_ptr: *mut u8 = x.as_mut_ptr();\n     // At least one of these is definitely unaligned."}, {"sha": "7e0704ac6fc06315f7cabb5bc494ba494a64b34e", "filename": "tests/compile-fail/unaligned_pointers/atomic_unaligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Fatomic_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Fatomic_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fatomic_unaligned.rs?ref=2d6d73fafe2f087354f7cea37297cd81316cae98", "patch": "@@ -8,6 +8,6 @@ fn main() {\n     let zptr = &z as *const _ as *const u64;\n     unsafe {\n         ::std::intrinsics::atomic_load(zptr);\n-        //~^ ERROR accessing memory with alignment 4, but alignment 8 is required\n+        //~^ERROR accessing memory with alignment 4, but alignment 8 is required\n     }\n }"}, {"sha": "91d9ec475b1fefca737d72f41752131490f305cb", "filename": "tests/compile-fail/unaligned_pointers/dyn_alignment.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs?ref=2d6d73fafe2f087354f7cea37297cd81316cae98", "patch": "@@ -6,14 +6,16 @@\n struct MuchAlign;\n \n fn main() {\n-    let buf = [0u32; 256];\n-    // `buf` is sufficiently aligned for `layout.align` on a `dyn Debug`, but not\n-    // for the actual alignment required by `MuchAlign`.\n-    // We craft a wide reference `&dyn Debug` with the vtable for `MuchAlign`. That should be UB,\n-    // as the reference is not aligned to its dynamic alignment requirements.\n-    let mut ptr = &MuchAlign as &dyn std::fmt::Debug;\n-    // Overwrite the data part of `ptr` so it points to `buf`.\n-    unsafe { (&mut ptr as *mut _ as *mut *const u8).write(&buf as *const _ as *const u8); }\n-    // Re-borrow that. This should be UB.\n-    let _ptr = &*ptr; //~ ERROR alignment 256 is required\n+    for _ in 0..10 { // Try many times as this might work by chance.\n+        let buf = [0u32; 256];\n+        // `buf` is sufficiently aligned for `layout.align` on a `dyn Debug`, but not\n+        // for the actual alignment required by `MuchAlign`.\n+        // We craft a wide reference `&dyn Debug` with the vtable for `MuchAlign`. That should be UB,\n+        // as the reference is not aligned to its dynamic alignment requirements.\n+        let mut ptr = &MuchAlign as &dyn std::fmt::Debug;\n+        // Overwrite the data part of `ptr` so it points to `buf`.\n+        unsafe { (&mut ptr as *mut _ as *mut *const u8).write(&buf as *const _ as *const u8); }\n+        // Re-borrow that. This should be UB.\n+        let _ptr = &*ptr; //~ERROR alignment 256 is required\n+    }\n }"}, {"sha": "9872a493c02a9b6c68c0f1a19fe63e9de576514f", "filename": "tests/compile-fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=2d6d73fafe2f087354f7cea37297cd81316cae98", "patch": "@@ -9,8 +9,9 @@\n fn main() {\n     let x = &mut [0u8; 3];\n     let base_addr = x as *mut _ as usize;\n+    // Manually make sure the pointer is properly aligned.\n     let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr+1 };\n     let u16_ptr = base_addr_aligned as *mut u16;\n-    unsafe { *u16_ptr = 2; } //~ ERROR memory with alignment 1, but alignment 2 is required\n+    unsafe { *u16_ptr = 2; } //~ERROR memory with alignment 1, but alignment 2 is required\n     println!(\"{:?}\", x);\n }"}, {"sha": "6fa95211853524915cf66cb27f1fe59d8d116c27", "filename": "tests/compile-fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs?ref=2d6d73fafe2f087354f7cea37297cd81316cae98", "patch": "@@ -16,6 +16,6 @@ fn main() {\n             y: 99,\n         };\n         let p = unsafe { &foo.x };\n-        let i = *p; //~ ERROR alignment 4 is required\n+        let i = *p; //~ERROR alignment 4 is required\n     }\n }"}, {"sha": "1d72e5170b7c2d99f770f88f206dfc7af2fbaff9", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs?ref=2d6d73fafe2f087354f7cea37297cd81316cae98", "patch": "@@ -6,6 +6,6 @@ fn main() {\n         let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n-        let _x = unsafe { *x }; //~ ERROR memory with alignment 2, but alignment 4 is required\n+        let _x = unsafe { *x }; //~ERROR memory with alignment 2, but alignment 4 is required\n     }\n }"}, {"sha": "49612e2b8a0964087d7a6f3e1233218fd362fdce", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs?ref=2d6d73fafe2f087354f7cea37297cd81316cae98", "patch": "@@ -2,11 +2,11 @@\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n-    for _ in 0..10 { // Try many times as this might work by chance.\n-        let x = [2u32, 3]; // Make it big enough so we don't get an out-of-bounds error.\n-        let x = (x.as_ptr() as *const u8).wrapping_offset(3) as *const u32;\n-        // This must fail because alignment is violated: the offset is not sufficiently aligned.\n-        // Also make the offset not a power of 2, that used to ICE.\n-        let _x = unsafe { *x }; //~ ERROR memory with alignment 1, but alignment 4 is required\n-    }\n+    // No retry needed, this fails reliably.\n+\n+    let x = [2u32, 3]; // Make it big enough so we don't get an out-of-bounds error.\n+    let x = (x.as_ptr() as *const u8).wrapping_offset(3) as *const u32;\n+    // This must fail because alignment is violated: the offset is not sufficiently aligned.\n+    // Also make the offset not a power of 2, that used to ICE.\n+    let _x = unsafe { *x }; //~ERROR memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "ecab83b05a09fbcc8a88744dc28d4ff38c01010f", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr3.rs?ref=2d6d73fafe2f087354f7cea37297cd81316cae98", "patch": "@@ -7,7 +7,6 @@ fn main() {\n         let x = &x[0] as *const _ as *const *const u8; // cast to ptr-to-ptr, so that we load a ptr\n         // This must fail because alignment is violated. Test specifically for loading pointers,\n         // which have special code in miri's memory.\n-        let _x = unsafe { *x };\n-        //~^ ERROR but alignment\n+        let _x = unsafe { *x }; //~ERROR but alignment\n     }\n }"}, {"sha": "2b6ff3f71c60f85e3e4300b02d53d165cac96af8", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr_zst.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6d73fafe2f087354f7cea37297cd81316cae98/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs?ref=2d6d73fafe2f087354f7cea37297cd81316cae98", "patch": "@@ -2,9 +2,10 @@\n // compile-flags: -Zmiri-disable-validation\n \n fn main() {\n-    let x = &2u8;\n-    let x = x as *const _ as *const [u32; 0];\n-    // This must fail because alignment is violated. Test specifically for loading ZST.\n-    let _x = unsafe { *x };\n-    //~^ ERROR alignment 4 is required\n+    for _ in 0..10 { // Try many times as this might work by chance.\n+        let x = &2u8;\n+        let x = x as *const _ as *const [u32; 0];\n+        // This must fail because alignment is violated. Test specifically for loading ZST.\n+        let _x = unsafe { *x }; //~ERROR alignment 4 is required\n+    }\n }"}]}