{"sha": "b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ODUyZTg5Y2VkMGEwY2RmNjY5NjNhYmEwODM4MmZmMThmZDJkNGI=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2014-02-05T16:52:54Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2014-02-05T18:38:22Z"}, "message": "pull extra::{serialize, ebml} into a separate libserialize crate\n\n- `extra::json` didn't make the cut, because of `extra::json` required\n   dep on `extra::TreeMap`. If/when `extra::TreeMap` moves out of `extra`,\n   then `extra::json` could move into `serialize`\n- `libextra`, `libsyntax` and `librustc` depend on the newly created\n  `libserialize`\n- The extensions to various `extra` types like `DList`, `RingBuf`, `TreeMap`\n  and `TreeSet` for `Encodable`/`Decodable` were moved into the respective\n  modules in `extra`\n- There is some trickery, evident in `src/libextra/lib.rs` where a stub\n  of `extra::serialize` is set up (in `src/libextra/serialize.rs`) for\n  use in the stage0 build, where the snapshot rustc is still making\n  deriving for `Encodable` and `Decodable` point at extra. Big props to\n  @huonw for help working out the re-export solution for this\n\nextra: inline extra::serialize stub\n\nfix stuff clobbered in rebase + don't reexport serialize::serialize\n\nno more globs in libserialize\n\nsyntax: fix import of libserialize traits\n\nlibrustc: fix bad imports in encoder/decoder\n\nadd serialize dep to librustdoc\n\nfix failing run-pass tests w/ serialize dep\n\nadjust uuid dep\n\nmore rebase de-clobbering for libserialize\n\nfixing tests, pushing libextra dep into cfg(test)\n\nfix doc code in extra::json\n\nadjust index.md links to serialize and uuid library", "tree": {"sha": "436f978485e7ceb1fc7daa36ab999afcdea30193", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/436f978485e7ceb1fc7daa36ab999afcdea30193"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "html_url": "https://github.com/rust-lang/rust/commit/b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bf575c86fd3c053df83b90862441fec71c7a622", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf575c86fd3c053df83b90862441fec71c7a622", "html_url": "https://github.com/rust-lang/rust/commit/2bf575c86fd3c053df83b90862441fec71c7a622"}], "stats": {"total": 452, "additions": 259, "deletions": 193}, "files": [{"sha": "ea573b9db8d21c21cedf0e2b41d3b56ab7c463a1", "filename": "mk/crates.mk", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -49,25 +49,26 @@\n # automatically generated for all stage/host/target combinations.\n ################################################################################\n \n-TARGET_CRATES := std extra green rustuv native flate arena glob term semver uuid sync\n+TARGET_CRATES := std extra green rustuv native flate arena glob term semver uuid serialize sync\n HOST_CRATES := syntax rustc rustdoc\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n DEPS_std := native:rustrt\n-DEPS_extra := std term sync\n+DEPS_extra := std serialize sync term\n DEPS_green := std\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n-DEPS_syntax := std extra term\n-DEPS_rustc := syntax native:rustllvm flate arena sync\n-DEPS_rustdoc := rustc native:sundown sync\n+DEPS_syntax := std extra term serialize\n+DEPS_rustc := syntax native:rustllvm flate arena serialize sync\n+DEPS_rustdoc := rustc native:sundown serialize sync\n DEPS_flate := std native:miniz\n DEPS_arena := std extra\n DEPS_glob := std\n+DEPS_serialize := std\n DEPS_term := std\n DEPS_semver := std\n-DEPS_uuid := std extra\n+DEPS_uuid := std serialize\n DEPS_sync := std\n \n TOOL_DEPS_compiletest := extra green rustuv"}, {"sha": "54b8b484693a9b954e35b3156fe0ec87c2b01e08", "filename": "src/doc/index.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -41,9 +41,10 @@ li {list-style-type: none; }\n * [The `flate` compression library](flate/index.html)\n * [The `glob` file path matching library](glob/index.html)\n * [The `semver` version collation library](semver/index.html)\n-* [The `term` terminal-handling library](term/index.html)\n-* [The UUID library](uuid/index.html)\n+* [The `serialize` value encoding/decoding library](serialize/index.html)\n * [The `sync` library for concurrency-enabled mechanisms and primitives](sync/index.html)\n+* [The `term` terminal-handling library](term/index.html)\n+* [The `uuid` 128-bit universally unique identifier library](uuid/index.html)\n \n # Tooling\n "}, {"sha": "88df73845d03dd6a9c08954b1ec30cec1cd3282f", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -30,6 +30,8 @@ use std::iter;\n \n use container::Deque;\n \n+use serialize::{Encodable, Decodable, Encoder, Decoder};\n+\n /// A doubly-linked list.\n pub struct DList<T> {\n     priv length: uint,\n@@ -628,6 +630,31 @@ impl<A: Clone> Clone for DList<A> {\n     }\n }\n \n+impl<\n+    S: Encoder,\n+    T: Encodable<S>\n+> Encodable<S> for DList<T> {\n+    fn encode(&self, s: &mut S) {\n+        s.emit_seq(self.len(), |s| {\n+            for (i, e) in self.iter().enumerate() {\n+                s.emit_seq_elt(i, |s| e.encode(s));\n+            }\n+        })\n+    }\n+}\n+\n+impl<D:Decoder,T:Decodable<D>> Decodable<D> for DList<T> {\n+    fn decode(d: &mut D) -> DList<T> {\n+        let mut list = DList::new();\n+        d.read_seq(|d, len| {\n+            for i in range(0u, len) {\n+                list.push_back(d.read_seq_elt(i, |d| Decodable::decode(d)));\n+            }\n+        });\n+        list\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use container::Deque;"}, {"sha": "8b082bf3056d6c9ecc99727c636a8f244d6b33e4", "filename": "src/libextra/json.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -51,17 +51,18 @@ A simple JSON document encoding a person, his/her age, address and phone numbers\n \n Rust provides a mechanism for low boilerplate encoding & decoding\n of values to and from JSON via the serialization API.\n-To be able to encode a piece of data, it must implement the `extra::serialize::Encodable` trait.\n-To be able to decode a piece of data, it must implement the `extra::serialize::Decodable` trait.\n+To be able to encode a piece of data, it must implement the `serialize::Encodable` trait.\n+To be able to decode a piece of data, it must implement the `serialize::Decodable` trait.\n The Rust compiler provides an annotation to automatically generate\n the code for these traits: `#[deriving(Decodable, Encodable)]`\n \n To encode using Encodable :\n \n ```rust\n+extern mod serialize;\n use extra::json;\n use std::io;\n-use extra::serialize::Encodable;\n+use serialize::Encodable;\n \n  #[deriving(Encodable)]\n  pub struct TestStruct   {\n@@ -125,7 +126,8 @@ fn main() {\n To decode a json string using `Decodable` trait :\n \n ```rust\n-use extra::serialize::Decodable;\n+extern mod serialize;\n+use serialize::Decodable;\n \n #[deriving(Decodable)]\n pub struct MyStruct  {\n@@ -150,8 +152,9 @@ Create a struct called TestStruct1 and serialize and deserialize it to and from\n using the serialization API, using the derived serialization code.\n \n ```rust\n+extern mod serialize;\n use extra::json;\n-use extra::serialize::{Encodable, Decodable};\n+use serialize::{Encodable, Decodable};\n \n  #[deriving(Decodable, Encodable)] //generate Decodable, Encodable impl.\n  pub struct TestStruct1  {\n@@ -181,9 +184,10 @@ This example use the ToJson impl to unserialize the json string.\n Example of `ToJson` trait implementation for TestStruct1.\n \n ```rust\n+extern mod serialize;\n use extra::json;\n use extra::json::ToJson;\n-use extra::serialize::{Encodable, Decodable};\n+use serialize::{Encodable, Decodable};\n use extra::treemap::TreeMap;\n \n #[deriving(Decodable, Encodable)] // generate Decodable, Encodable impl.\n@@ -312,7 +316,7 @@ impl<'a> Encoder<'a> {\n     }\n \n     /// Encode the specified struct into a json [u8]\n-    pub fn buffer_encode<T:Encodable<Encoder<'a>>>(to_encode_object: &T) -> ~[u8]  {\n+    pub fn buffer_encode<T:serialize::Encodable<Encoder<'a>>>(to_encode_object: &T) -> ~[u8]  {\n        //Serialize the object in a string using a writer\n         let mut m = MemWriter::new();\n         {\n@@ -323,7 +327,7 @@ impl<'a> Encoder<'a> {\n     }\n \n     /// Encode the specified struct into a json str\n-    pub fn str_encode<T:Encodable<Encoder<'a>>>(to_encode_object: &T) -> ~str  {\n+    pub fn str_encode<T:serialize::Encodable<Encoder<'a>>>(to_encode_object: &T) -> ~str  {\n         let buff:~[u8] = Encoder::buffer_encode(to_encode_object);\n         str::from_utf8_owned(buff).unwrap()\n     }\n@@ -684,7 +688,7 @@ impl<E: serialize::Encoder> serialize::Encodable<E> for Json {\n     }\n }\n \n-impl Json{\n+impl Json {\n     /// Encodes a json value into a io::writer.  Uses a single line.\n     pub fn to_writer(&self, wr: &mut io::Writer) -> io::IoResult<()> {\n         let mut encoder = Encoder::new(wr);"}, {"sha": "37b4d3cc524be841c1b7c2e5fd51e721d2e9119c", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -35,6 +35,17 @@ Rust extras are part of the standard Rust distribution.\n #[deny(missing_doc)];\n \n extern mod sync;\n+#[cfg(not(stage0))]\n+extern mod serialize;\n+\n+#[cfg(stage0)]\n+pub mod serialize {\n+    #[allow(missing_doc)];\n+    // Temp re-export until after a snapshot\n+    extern mod serialize = \"serialize\";\n+    pub use self::serialize::{Encoder, Decoder, Encodable, Decodable,\n+                                   EncoderHelpers, DecoderHelpers};\n+}\n \n #[cfg(stage0)]\n macro_rules! if_ok (\n@@ -62,7 +73,6 @@ pub mod lru_cache;\n // And ... other stuff\n \n pub mod url;\n-pub mod ebml;\n pub mod getopts;\n pub mod json;\n pub mod tempfile;\n@@ -85,7 +95,6 @@ mod unicode;\n // Compiler support modules\n \n pub mod test;\n-pub mod serialize;\n \n // A curious inner-module that's not exported that contains the binding\n // 'extra' so that macro-expanded references to extra::serialize and such"}, {"sha": "17631f5bdff0110f29e6a8f1984a2c82854685ba", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -19,6 +19,8 @@ use std::iter::{Rev, RandomAccessIterator};\n \n use container::Deque;\n \n+use serialize::{Encodable, Decodable, Encoder, Decoder};\n+\n static INITIAL_CAPACITY: uint = 8u; // 2^3\n static MINIMUM_CAPACITY: uint = 2u;\n \n@@ -402,6 +404,31 @@ impl<A> Extendable<A> for RingBuf<A> {\n     }\n }\n \n+impl<\n+    S: Encoder,\n+    T: Encodable<S>\n+> Encodable<S> for RingBuf<T> {\n+    fn encode(&self, s: &mut S) {\n+        s.emit_seq(self.len(), |s| {\n+            for (i, e) in self.iter().enumerate() {\n+                s.emit_seq_elt(i, |s| e.encode(s));\n+            }\n+        })\n+    }\n+}\n+\n+impl<D:Decoder,T:Decodable<D>> Decodable<D> for RingBuf<T> {\n+    fn decode(d: &mut D) -> RingBuf<T> {\n+        let mut deque = RingBuf::new();\n+        d.read_seq(|d, len| {\n+            for i in range(0u, len) {\n+                deque.push_back(d.read_seq_elt(i, |d| Decodable::decode(d)));\n+            }\n+        });\n+        deque\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use container::Deque;"}, {"sha": "449e72dd0ec8151c0bebc017e33e95b362bf46f3", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -17,6 +17,8 @@ use std::iter::{Peekable};\n use std::cmp::Ordering;\n use std::ptr;\n \n+use serialize::{Encodable, Decodable, Encoder, Decoder};\n+\n // This is implemented as an AA tree, which is a simplified variation of\n // a red-black tree where red (horizontal) nodes can only be added\n // as a right child. The time complexity is the same, and re-balancing\n@@ -1004,6 +1006,71 @@ impl<T: TotalOrd> Extendable<T> for TreeSet<T> {\n     }\n }\n \n+impl<\n+    E: Encoder,\n+    K: Encodable<E> + Eq + TotalOrd,\n+    V: Encodable<E> + Eq\n+> Encodable<E> for TreeMap<K, V> {\n+    fn encode(&self, e: &mut E) {\n+        e.emit_map(self.len(), |e| {\n+            let mut i = 0;\n+            for (key, val) in self.iter() {\n+                e.emit_map_elt_key(i, |e| key.encode(e));\n+                e.emit_map_elt_val(i, |e| val.encode(e));\n+                i += 1;\n+            }\n+        })\n+    }\n+}\n+\n+impl<\n+    D: Decoder,\n+    K: Decodable<D> + Eq + TotalOrd,\n+    V: Decodable<D> + Eq\n+> Decodable<D> for TreeMap<K, V> {\n+    fn decode(d: &mut D) -> TreeMap<K, V> {\n+        d.read_map(|d, len| {\n+            let mut map = TreeMap::new();\n+            for i in range(0u, len) {\n+                let key = d.read_map_elt_key(i, |d| Decodable::decode(d));\n+                let val = d.read_map_elt_val(i, |d| Decodable::decode(d));\n+                map.insert(key, val);\n+            }\n+            map\n+        })\n+    }\n+}\n+\n+impl<\n+    S: Encoder,\n+    T: Encodable<S> + Eq + TotalOrd\n+> Encodable<S> for TreeSet<T> {\n+    fn encode(&self, s: &mut S) {\n+        s.emit_seq(self.len(), |s| {\n+            let mut i = 0;\n+            for e in self.iter() {\n+                s.emit_seq_elt(i, |s| e.encode(s));\n+                i += 1;\n+            }\n+        })\n+    }\n+}\n+\n+impl<\n+    D: Decoder,\n+    T: Decodable<D> + Eq + TotalOrd\n+> Decodable<D> for TreeSet<T> {\n+    fn decode(d: &mut D) -> TreeSet<T> {\n+        d.read_seq(|d, len| {\n+            let mut set = TreeSet::new();\n+            for i in range(0u, len) {\n+                set.insert(d.read_seq_elt(i, |d| Decodable::decode(d)));\n+            }\n+            set\n+        })\n+    }\n+}\n+\n #[cfg(test)]\n mod test_treemap {\n "}, {"sha": "52ddc8c810888e980073b1b1c4fc45009f1b24c8", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -35,6 +35,7 @@ extern mod extra;\n extern mod flate;\n extern mod arena;\n extern mod syntax;\n+extern mod serialize;\n extern mod sync;\n \n use back::link;"}, {"sha": "8a6ba824dcb2792a78ba08e7c0ae72440634c57e", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -18,8 +18,8 @@ use middle::ty;\n use middle::typeck;\n \n use std::vec;\n+use reader = serialize::ebml::reader;\n use std::rc::Rc;\n-use reader = extra::ebml::reader;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::diagnostic::expect;"}, {"sha": "d18017d00439be083683c6e5fd2672ab7b4d0597", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -31,9 +31,9 @@ use std::io::extensions::u64_from_be_bytes;\n use std::option;\n use std::rc::Rc;\n use std::vec;\n-use extra::ebml::reader;\n-use extra::ebml;\n-use extra::serialize::Decodable;\n+use serialize::ebml::reader;\n+use serialize::ebml;\n+use serialize::Decodable;\n use syntax::ast_map;\n use syntax::attr;\n use syntax::parse::token::{IdentInterner, special_idents};"}, {"sha": "ba33f57309f8e41324d9adfa752443a881978c58", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -22,7 +22,7 @@ use middle::ty;\n use middle::typeck;\n use middle;\n \n-use extra::serialize::Encodable;\n+use serialize::Encodable;\n use std::cast;\n use std::cell::{Cell, RefCell};\n use std::hashmap::{HashMap, HashSet};\n@@ -45,7 +45,7 @@ use syntax::parse::token;\n use syntax::visit::Visitor;\n use syntax::visit;\n use syntax;\n-use writer = extra::ebml::writer;\n+use writer = serialize::ebml::writer;\n \n // used by astencode:\n type abbrev_map = @RefCell<HashMap<ty::t, tyencode::ty_abbrev>>;"}, {"sha": "8adbd37462b9463f110925221d7d115c68706817", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -37,12 +37,12 @@ use std::cast;\n use std::io::Seek;\n use std::rc::Rc;\n \n-use extra::ebml::reader;\n-use extra::ebml;\n-use extra::serialize;\n-use extra::serialize::{Encoder, Encodable, EncoderHelpers, DecoderHelpers};\n-use extra::serialize::{Decoder, Decodable};\n-use writer = extra::ebml::writer;\n+use serialize::ebml::reader;\n+use serialize::ebml;\n+use serialize;\n+use serialize::{Encoder, Encodable, EncoderHelpers, DecoderHelpers};\n+use serialize::{Decoder, Decodable};\n+use writer = serialize::ebml::writer;\n \n #[cfg(test)] use syntax::parse;\n #[cfg(test)] use syntax::print::pprust;"}, {"sha": "7256e8923fa871a8b92fba9ccfe3455411ff63d3", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -18,6 +18,7 @@\n extern mod syntax;\n extern mod rustc;\n extern mod extra;\n+extern mod serialize;\n extern mod sync;\n \n use std::local_data;\n@@ -27,7 +28,7 @@ use std::str;\n use extra::getopts;\n use extra::getopts::groups;\n use extra::json;\n-use extra::serialize::{Decodable, Encodable};\n+use serialize::{Decodable, Encodable};\n use extra::time;\n \n pub mod clean;"}, {"sha": "9d1c099c6f0fb8990b592c2e0e1dfe693e203fb6", "filename": "src/libserialize/ebml.rs", "status": "renamed", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -83,15 +83,19 @@ pub enum EbmlEncoderTag {\n \n pub mod reader {\n     use std::char;\n-    use super::*;\n-\n-    use serialize;\n \n     use std::cast::transmute;\n     use std::int;\n     use std::option::{None, Option, Some};\n     use std::io::extensions::u64_from_be_bytes;\n \n+    use serialize;\n+\n+    use super::{ EsVec, EsMap, EsEnum, EsVecLen, EsVecElt, EsMapLen, EsMapKey,\n+        EsEnumVid, EsU64, EsU32, EsU16, EsU8, EsInt, EsI64, EsI32, EsI16, EsI8,\n+        EsBool, EsF64, EsF32, EsChar, EsStr, EsMapVal, EsEnumBody, EsUint,\n+        EsOpaque, EsLabel, EbmlEncoderTag, Doc, TaggedDoc };\n+\n     // ebml reading\n \n     pub struct Res {\n@@ -588,15 +592,20 @@ pub mod reader {\n }\n \n pub mod writer {\n-    use super::*;\n-\n     use std::cast;\n     use std::clone::Clone;\n     use std::io;\n     use std::io::{Writer, Seek};\n     use std::io::MemWriter;\n     use std::io::extensions::u64_to_be_bytes;\n \n+    use super::{ EsVec, EsMap, EsEnum, EsVecLen, EsVecElt, EsMapLen, EsMapKey,\n+        EsEnumVid, EsU64, EsU32, EsU16, EsU8, EsInt, EsI64, EsI32, EsI16, EsI8,\n+        EsBool, EsF64, EsF32, EsChar, EsStr, EsMapVal, EsEnumBody, EsUint,\n+        EsOpaque, EsLabel, EbmlEncoderTag };\n+\n+    use serialize;\n+\n     // ebml writing\n     pub struct Encoder<'a> {\n         // FIXME(#5665): this should take a trait object. Note that if you\n@@ -775,7 +784,7 @@ pub mod writer {\n         }\n     }\n \n-    impl<'a> ::serialize::Encoder for Encoder<'a> {\n+    impl<'a> serialize::Encoder for Encoder<'a> {\n         fn emit_nil(&mut self) {}\n \n         fn emit_uint(&mut self, v: uint) {\n@@ -952,8 +961,7 @@ pub mod writer {\n mod tests {\n     use ebml::reader;\n     use ebml::writer;\n-    use serialize::Encodable;\n-    use serialize;\n+    use {Encodable, Decodable};\n \n     use std::io::MemWriter;\n     use std::option::{None, Option, Some};\n@@ -1017,7 +1025,7 @@ mod tests {\n             }\n             let ebml_doc = reader::Doc(wr.get_ref());\n             let mut deser = reader::Decoder(ebml_doc);\n-            let v1 = serialize::Decodable::decode(&mut deser);\n+            let v1 = Decodable::decode(&mut deser);\n             debug!(\"v1 == {:?}\", v1);\n             assert_eq!(v, v1);\n         }\n@@ -1031,7 +1039,7 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use ebml::reader;\n-    use test::BenchHarness;\n+    use extra::test::BenchHarness;\n \n     #[bench]\n     pub fn vuint_at_A_aligned(bh: &mut BenchHarness) {", "previous_filename": "src/libextra/ebml.rs"}, {"sha": "5f473b253697c0bd5ab80331017f686d93512204", "filename": "src/libserialize/lib.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Support code for encoding and decoding types.\n+\n+/*\n+Core encoding and decoding interfaces.\n+*/\n+\n+#[crate_id = \"serialize#0.10-pre\"];\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+#[license = \"MIT/ASL2\"];\n+#[allow(missing_doc)];\n+#[forbid(non_camel_case_types)];\n+#[feature(macro_rules,managed_boxes)];\n+\n+// test harness access\n+#[cfg(test)]\n+extern mod extra;\n+\n+pub use self::serialize::{Decoder, Encoder, Decodable, Encodable,\n+    DecoderHelpers, EncoderHelpers};\n+\n+mod serialize;\n+pub mod ebml;"}, {"sha": "c4f0a7a1830f31d2e28c786226083273e5da4026", "filename": "src/libserialize/serialize.rs", "status": "renamed", "additions": 1, "deletions": 124, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,18 +14,10 @@\n Core encoding and decoding interfaces.\n */\n \n-#[allow(missing_doc)];\n-#[forbid(non_camel_case_types)];\n-\n-\n use std::hashmap::{HashMap, HashSet};\n use std::rc::Rc;\n use std::trie::{TrieMap, TrieSet};\n use std::vec;\n-use ringbuf::RingBuf;\n-use container::Deque;\n-use dlist::DList;\n-use treemap::{TreeMap, TreeSet};\n \n pub trait Encoder {\n     // Primitive types:\n@@ -614,56 +606,6 @@ impl<\n     }\n }\n \n-impl<\n-    S: Encoder,\n-    T: Encodable<S>\n-> Encodable<S> for DList<T> {\n-    fn encode(&self, s: &mut S) {\n-        s.emit_seq(self.len(), |s| {\n-            for (i, e) in self.iter().enumerate() {\n-                s.emit_seq_elt(i, |s| e.encode(s));\n-            }\n-        })\n-    }\n-}\n-\n-impl<D:Decoder,T:Decodable<D>> Decodable<D> for DList<T> {\n-    fn decode(d: &mut D) -> DList<T> {\n-        let mut list = DList::new();\n-        d.read_seq(|d, len| {\n-            for i in range(0u, len) {\n-                list.push_back(d.read_seq_elt(i, |d| Decodable::decode(d)));\n-            }\n-        });\n-        list\n-    }\n-}\n-\n-impl<\n-    S: Encoder,\n-    T: Encodable<S>\n-> Encodable<S> for RingBuf<T> {\n-    fn encode(&self, s: &mut S) {\n-        s.emit_seq(self.len(), |s| {\n-            for (i, e) in self.iter().enumerate() {\n-                s.emit_seq_elt(i, |s| e.encode(s));\n-            }\n-        })\n-    }\n-}\n-\n-impl<D:Decoder,T:Decodable<D>> Decodable<D> for RingBuf<T> {\n-    fn decode(d: &mut D) -> RingBuf<T> {\n-        let mut deque = RingBuf::new();\n-        d.read_seq(|d, len| {\n-            for i in range(0u, len) {\n-                deque.push_back(d.read_seq_elt(i, |d| Decodable::decode(d)));\n-            }\n-        });\n-        deque\n-    }\n-}\n-\n impl<\n     E: Encoder,\n     K: Encodable<E> + Hash + IterBytes + Eq,\n@@ -782,71 +724,6 @@ impl<D: Decoder> Decodable<D> for TrieSet {\n     }\n }\n \n-impl<\n-    E: Encoder,\n-    K: Encodable<E> + Eq + TotalOrd,\n-    V: Encodable<E> + Eq\n-> Encodable<E> for TreeMap<K, V> {\n-    fn encode(&self, e: &mut E) {\n-        e.emit_map(self.len(), |e| {\n-            let mut i = 0;\n-            for (key, val) in self.iter() {\n-                e.emit_map_elt_key(i, |e| key.encode(e));\n-                e.emit_map_elt_val(i, |e| val.encode(e));\n-                i += 1;\n-            }\n-        })\n-    }\n-}\n-\n-impl<\n-    D: Decoder,\n-    K: Decodable<D> + Eq + TotalOrd,\n-    V: Decodable<D> + Eq\n-> Decodable<D> for TreeMap<K, V> {\n-    fn decode(d: &mut D) -> TreeMap<K, V> {\n-        d.read_map(|d, len| {\n-            let mut map = TreeMap::new();\n-            for i in range(0u, len) {\n-                let key = d.read_map_elt_key(i, |d| Decodable::decode(d));\n-                let val = d.read_map_elt_val(i, |d| Decodable::decode(d));\n-                map.insert(key, val);\n-            }\n-            map\n-        })\n-    }\n-}\n-\n-impl<\n-    S: Encoder,\n-    T: Encodable<S> + Eq + TotalOrd\n-> Encodable<S> for TreeSet<T> {\n-    fn encode(&self, s: &mut S) {\n-        s.emit_seq(self.len(), |s| {\n-            let mut i = 0;\n-            for e in self.iter() {\n-                s.emit_seq_elt(i, |s| e.encode(s));\n-                i += 1;\n-            }\n-        })\n-    }\n-}\n-\n-impl<\n-    D: Decoder,\n-    T: Decodable<D> + Eq + TotalOrd\n-> Decodable<D> for TreeSet<T> {\n-    fn decode(d: &mut D) -> TreeSet<T> {\n-        d.read_seq(|d, len| {\n-            let mut set = TreeSet::new();\n-            for i in range(0u, len) {\n-                set.insert(d.read_seq_elt(i, |d| Decodable::decode(d)));\n-            }\n-            set\n-        })\n-    }\n-}\n-\n // ___________________________________________________________________________\n // Helper routines\n //", "previous_filename": "src/libextra/serialize.rs"}, {"sha": "abfd119acbb99e8a3cfcf86a66042f25fc0f2fc3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -22,7 +22,7 @@ use std::hashmap::HashMap;\n use std::option::Option;\n use std::rc::Rc;\n use std::to_str::ToStr;\n-use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n+use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n /// A pointer abstraction. FIXME(eddyb) #10676 use Rc<T> in the future.\n pub type P<T> = @T;\n@@ -1204,6 +1204,7 @@ pub enum InlinedItem {\n \n #[cfg(test)]\n mod test {\n+    use serialize;\n     use extra;\n     use codemap::*;\n     use super::*;\n@@ -1230,6 +1231,6 @@ mod test {\n             },\n         };\n         // doesn't matter which encoder we use....\n-        let _f = (@e as @extra::serialize::Encodable<extra::json::Encoder>);\n+        let _f = (@e as @serialize::Encodable<extra::json::Encoder>);\n     }\n }"}, {"sha": "a6c1a373d887fd0fbe2b84896600c3730117eb2d", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -23,7 +23,7 @@ source code snippets, etc.\n \n use std::cell::RefCell;\n use std::cmp;\n-use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n+use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub trait Pos {\n     fn from_uint(n: uint) -> Self;"}, {"sha": "ad7b3a2e950ae0c815abfdc5ea87852686294d01", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -28,12 +28,12 @@ pub fn expand_deriving_decodable(cx: &ExtCtxt,\n     let trait_def = TraitDef {\n         cx: cx, span: span,\n \n-        path: Path::new_(~[\"extra\", \"serialize\", \"Decodable\"], None,\n+        path: Path::new_(~[\"serialize\", \"Decodable\"], None,\n                          ~[~Literal(Path::new_local(\"__D\"))], true),\n         additional_bounds: ~[],\n         generics: LifetimeBounds {\n             lifetimes: ~[],\n-            bounds: ~[(\"__D\", ~[Path::new(~[\"extra\", \"serialize\", \"Decoder\"])])],\n+            bounds: ~[(\"__D\", ~[Path::new(~[\"serialize\", \"Decoder\"])])],\n         },\n         methods: ~[\n             MethodDef {\n@@ -56,8 +56,7 @@ pub fn expand_deriving_decodable(cx: &ExtCtxt,\n fn decodable_substructure(cx: &ExtCtxt, trait_span: Span,\n                           substr: &Substructure) -> @Expr {\n     let decoder = substr.nonself_args[0];\n-    let recurse = ~[cx.ident_of(\"extra\"),\n-                    cx.ident_of(\"serialize\"),\n+    let recurse = ~[cx.ident_of(\"serialize\"),\n                     cx.ident_of(\"Decodable\"),\n                     cx.ident_of(\"decode\")];\n     // throw an underscore in front to suppress unused variable warnings"}, {"sha": "66b744ecbcb4ace93be39d2f03d5116e9474699c", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -22,7 +22,7 @@ For example, a type like:\n \n would generate two implementations like:\n \n-impl<S:extra::serialize::Encoder> Encodable<S> for Node {\n+impl<S:serialize::Encoder> Encodable<S> for Node {\n     fn encode(&self, s: &S) {\n         s.emit_struct(\"Node\", 1, || {\n             s.emit_field(\"id\", 0, || s.emit_uint(self.id))\n@@ -89,12 +89,12 @@ pub fn expand_deriving_encodable(cx: &ExtCtxt,\n     let trait_def = TraitDef {\n         cx: cx, span: span,\n \n-        path: Path::new_(~[\"extra\", \"serialize\", \"Encodable\"], None,\n+        path: Path::new_(~[\"serialize\", \"Encodable\"], None,\n                          ~[~Literal(Path::new_local(\"__E\"))], true),\n         additional_bounds: ~[],\n         generics: LifetimeBounds {\n             lifetimes: ~[],\n-            bounds: ~[(\"__E\", ~[Path::new(~[\"extra\", \"serialize\", \"Encoder\"])])],\n+            bounds: ~[(\"__E\", ~[Path::new(~[\"serialize\", \"Encoder\"])])],\n         },\n         methods: ~[\n             MethodDef {"}, {"sha": "992ee3175edd9f9685d2ec21d038bba748d29fce", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -204,7 +204,7 @@ pub struct TraitDef<'a> {\n     /// other than the current trait\n     additional_bounds: ~[Ty<'a>],\n \n-    /// Any extra lifetimes and/or bounds, e.g. `D: extra::serialize::Decoder`\n+    /// Any extra lifetimes and/or bounds, e.g. `D: serialize::Decoder`\n     generics: LifetimeBounds<'a>,\n \n     methods: ~[MethodDef<'a>]"}, {"sha": "3f305a4eb0e64586871d8b4c6fbd14512f995b90", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -33,6 +33,7 @@ This API is completely unstable and subject to change.\n #[deny(non_camel_case_types)];\n \n extern mod extra;\n+extern mod serialize;\n extern mod term;\n \n pub mod util {"}, {"sha": "faebd97e7c27025e3e3bbe9a92b268549df5db58", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -284,7 +284,7 @@ pub fn maybe_aborted<T>(result: T, mut p: Parser) -> T {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use extra::serialize::Encodable;\n+    use serialize::Encodable;\n     use extra;\n     use std::io;\n     use std::io::MemWriter;"}, {"sha": "090774ec76ff290f2c1c9225067978271a19480d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -15,7 +15,7 @@ use parse::token;\n use util::interner::{RcStr, StrInterner};\n use util::interner;\n \n-use extra::serialize::{Decodable, Decoder, Encodable, Encoder};\n+use serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::cast;\n use std::char;\n use std::fmt;"}, {"sha": "1951c52237f5f40cf293460eaa5f22bc66da2bd3", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -59,7 +59,10 @@ Examples of string representations:\n #[crate_type = \"dylib\"];\n #[license = \"MIT/ASL2\"];\n \n+// test harness access\n+#[cfg(test)]\n extern mod extra;\n+extern mod serialize;\n \n use std::str;\n use std::vec;\n@@ -73,7 +76,7 @@ use std::cmp::Eq;\n use std::cast::{transmute,transmute_copy};\n use std::to_bytes::{IterBytes, Cb};\n \n-use extra::serialize::{Encoder, Encodable, Decoder, Decodable};\n+use serialize::{Encoder, Encodable, Decoder, Decodable};\n \n /// A 128-bit (16 byte) buffer containing the ID\n pub type UuidBytes = [u8, ..16];\n@@ -784,8 +787,8 @@ mod test {\n \n     #[test]\n     fn test_serialize_round_trip() {\n-        use extra::ebml;\n-        use extra::serialize::{Encodable, Decodable};\n+        use serialize::ebml;\n+        use serialize::{Encodable, Decodable};\n \n         let u = Uuid::new_v4();\n         let mut wr = MemWriter::new();"}, {"sha": "027b329b1783103768ae82772937753b0990b760", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -26,7 +26,7 @@ use EBWriter = extra::ebml::writer;\n use std::cmp::Eq;\n use std::cmp;\n use std::io;\n-use extra::serialize::{Decodable, Encodable};\n+use serialize::{Decodable, Encodable};\n use extra::time;\n \n fn test_ebml<'a, A:"}, {"sha": "dedacd92535a5c4cca4aec69213b9e09ba519795", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -16,14 +16,14 @@\n \n #[feature(struct_variant, managed_boxes)];\n \n-extern mod extra;\n+extern mod serialize;\n \n use std::io::MemWriter;\n use std::rand::{random, Rand};\n-use extra::serialize::{Encodable, Decodable};\n-use extra::ebml;\n-use extra::ebml::writer::Encoder;\n-use extra::ebml::reader::Decoder;\n+use serialize::{Encodable, Decodable};\n+use serialize::ebml;\n+use serialize::ebml::writer::Encoder;\n+use serialize::ebml::reader::Decoder;\n \n #[deriving(Encodable, Decodable, Eq, Rand)]\n struct A;"}, {"sha": "a7a3784877c596a5577ed8b8ee2b84c7ade56686", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -11,7 +11,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra; // {En,De}codable\n+extern mod serialize; // {En,De}codable\n mod submod {\n     // if any of these are implemented without global calls for any\n     // function calls, then being in a submodule will (correctly)"}, {"sha": "87a52de2269d292e99191881e0089b61ded2d383", "filename": "src/test/run-pass/issue-4016.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4016.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -9,10 +9,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-fast\n+\n extern mod extra;\n+extern mod serialize;\n \n use extra::json;\n-use extra::serialize::Decodable;\n+use serialize::Decodable;\n \n trait JD : Decodable<json::Decoder> { }\n "}, {"sha": "b746e524d7f0c3a196789ef763b6f488cf18ff01", "filename": "src/test/run-pass/issue-4036.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Ftest%2Frun-pass%2Fissue-4036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8852e89ced0a0cdf66963aba08382ff18fd2d4b/src%2Ftest%2Frun-pass%2Fissue-4036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4036.rs?ref=b8852e89ced0a0cdf66963aba08382ff18fd2d4b", "patch": "@@ -8,15 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-fast\n+\n // Issue #4036: Test for an issue that arose around fixing up type inference\n // byproducts in vtable records.\n \n extern mod extra;\n-use self::extra::json;\n-use self::extra::serialize;\n+extern mod serialize;\n+use extra::json;\n+use serialize::Decodable;\n \n pub fn main() {\n     let json = json::from_str(\"[1]\").unwrap();\n     let mut decoder = json::Decoder::new(json);\n-    let _x: ~[int] = serialize::Decodable::decode(&mut decoder);\n+    let _x: ~[int] = Decodable::decode(&mut decoder);\n }"}]}