{"sha": "06786227fdb92f7a905cfd4a0131f2ec9db5072f", "node_id": "C_kwDOAAsO6NoAKDA2Nzg2MjI3ZmRiOTJmN2E5MDVjZmQ0YTAxMzFmMmVjOWRiNTA3MmY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-25T18:00:27Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-28T17:35:39Z"}, "message": "Simplify more FnCtxt normalization", "tree": {"sha": "0aed1a52d5c4b5e7c4f600498cc2a8219c85c9e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aed1a52d5c4b5e7c4f600498cc2a8219c85c9e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06786227fdb92f7a905cfd4a0131f2ec9db5072f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06786227fdb92f7a905cfd4a0131f2ec9db5072f", "html_url": "https://github.com/rust-lang/rust/commit/06786227fdb92f7a905cfd4a0131f2ec9db5072f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06786227fdb92f7a905cfd4a0131f2ec9db5072f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52cd34269644e65b88ac4faf29777b249a2cf188", "url": "https://api.github.com/repos/rust-lang/rust/commits/52cd34269644e65b88ac4faf29777b249a2cf188", "html_url": "https://github.com/rust-lang/rust/commit/52cd34269644e65b88ac4faf29777b249a2cf188"}], "stats": {"total": 157, "additions": 46, "deletions": 111}, "files": [{"sha": "82150310638270c4c69e74d917099c2d666c9e4e", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=06786227fdb92f7a905cfd4a0131f2ec9db5072f", "patch": "@@ -109,7 +109,7 @@ pub trait AstConv<'tcx> {\n     ) -> Ty<'tcx>;\n \n     /// Normalize an associated type coming from the user.\n-    /// \n+    ///\n     /// This should only be used by astconv. Use `FnCtxt::normalize`\n     /// or `ObligationCtxt::normalize` in downstream crates.\n     fn normalize_ty(&self, span: Span, ty: Ty<'tcx>) -> Ty<'tcx>;"}, {"sha": "890a068a7befc8c78cc14ad9d9c0d4fe96851cb7", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=06786227fdb92f7a905cfd4a0131f2ec9db5072f", "patch": "@@ -752,10 +752,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 match *self.expr_ty.kind() {\n                     ty::FnDef(..) => {\n                         // Attempt a coercion to a fn pointer type.\n-                        let f = fcx.normalize(\n-                            self.expr_span,\n-                            self.expr_ty.fn_sig(fcx.tcx),\n-                        );\n+                        let f = fcx.normalize(self.expr_span, self.expr_ty.fn_sig(fcx.tcx));\n                         let res = fcx.try_coerce(\n                             self.expr,\n                             self.expr_ty,"}, {"sha": "0c9a350c295f4227866c20eb5e4ae887b027ed7d", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=06786227fdb92f7a905cfd4a0131f2ec9db5072f", "patch": "@@ -1,6 +1,6 @@\n use crate::coercion::CoerceMany;\n use crate::gather_locals::GatherLocalsVisitor;\n-use crate::{FnCtxt, Inherited};\n+use crate::FnCtxt;\n use crate::{GeneratorTypes, UnsafetyState};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -20,21 +20,16 @@ use std::cell::RefCell;\n ///\n /// * ...\n /// * inherited: other fields inherited from the enclosing fn (if any)\n-#[instrument(skip(inherited, body), level = \"debug\")]\n+#[instrument(skip(fcx, body), level = \"debug\")]\n pub(super) fn check_fn<'a, 'tcx>(\n-    inherited: &'a Inherited<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n+    fcx: &mut FnCtxt<'a, 'tcx>,\n     fn_sig: ty::FnSig<'tcx>,\n     decl: &'tcx hir::FnDecl<'tcx>,\n     fn_def_id: LocalDefId,\n     body: &'tcx hir::Body<'tcx>,\n     can_be_generator: Option<hir::Movability>,\n-) -> (FnCtxt<'a, 'tcx>, Option<GeneratorTypes<'tcx>>) {\n-    let fn_id = inherited.tcx.hir().local_def_id_to_hir_id(fn_def_id);\n-\n-    // Create the function context. This is either derived from scratch or,\n-    // in the case of closures, based on the outer context.\n-    let mut fcx = FnCtxt::new(inherited, param_env, body.value.hir_id);\n+) -> Option<GeneratorTypes<'tcx>> {\n+    let fn_id = fcx.tcx.hir().local_def_id_to_hir_id(fn_def_id);\n     fcx.ps.set(UnsafetyState::function(fn_sig.unsafety, fn_id));\n \n     let tcx = fcx.tcx;\n@@ -47,7 +42,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n             declared_ret_ty,\n             body.value.hir_id,\n             decl.output.span(),\n-            param_env,\n+            fcx.param_env,\n         ));\n \n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n@@ -105,7 +100,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         fcx.write_ty(param.hir_id, param_ty);\n     }\n \n-    inherited.typeck_results.borrow_mut().liberated_fn_sigs_mut().insert(fn_id, fn_sig);\n+    fcx.typeck_results.borrow_mut().liberated_fn_sigs_mut().insert(fn_id, fn_sig);\n \n     if let ty::Dynamic(_, _, ty::Dyn) = declared_ret_ty.kind() {\n         // FIXME: We need to verify that the return type is `Sized` after the return expression has\n@@ -174,7 +169,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         check_panic_info_fn(tcx, panic_impl_did.expect_local(), fn_sig, decl, declared_ret_ty);\n     }\n \n-    (fcx, gen_ty)\n+    gen_ty\n }\n \n fn check_panic_info_fn("}, {"sha": "5d3419b3b6e66c16be7e11c09dc0d0630ef0454c", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=06786227fdb92f7a905cfd4a0131f2ec9db5072f", "patch": "@@ -79,16 +79,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         debug!(?bound_sig, ?liberated_sig);\n \n+        let mut fcx = FnCtxt::new(self, self.param_env.without_const(), body.value.hir_id);\n         let generator_types = check_fn(\n-            self,\n-            self.param_env.without_const(),\n+            &mut fcx,\n             liberated_sig,\n             closure.fn_decl,\n             expr_def_id,\n             body,\n             closure.movability,\n-        )\n-        .1;\n+        );\n \n         let parent_substs = InternalSubsts::identity_for_item(\n             self.tcx,\n@@ -797,10 +796,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> ClosureSignatures<'tcx> {\n         let liberated_sig =\n             self.tcx().liberate_late_bound_regions(expr_def_id.to_def_id(), bound_sig);\n-        let liberated_sig = self.normalize(\n-            body.value.span,\n-            liberated_sig,\n-        );\n+        let liberated_sig = self.normalize(body.value.span, liberated_sig);\n         ClosureSignatures { bound_sig, liberated_sig }\n     }\n }"}, {"sha": "f0b349f0c98dd667f349083ab9555df2aa758589", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=06786227fdb92f7a905cfd4a0131f2ec9db5072f", "patch": "@@ -62,7 +62,9 @@ use rustc_span::{self, BytePos, DesugaringKind, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, ObligationCtxt};\n+use rustc_trait_selection::traits::{\n+    self, NormalizeExt, ObligationCause, ObligationCauseCode, ObligationCtxt,\n+};\n \n use smallvec::{smallvec, SmallVec};\n use std::ops::Deref;\n@@ -832,7 +834,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         let b = self.shallow_resolve(b);\n         let InferOk { value: b, mut obligations } =\n-            self.normalize_associated_types_in_as_infer_ok(self.cause.span, b);\n+            self.at(&self.cause, self.param_env).normalize(b);\n         debug!(\"coerce_from_fn_item(a={:?}, b={:?})\", a, b);\n \n         match b.kind() {\n@@ -854,7 +856,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 }\n \n                 let InferOk { value: a_sig, obligations: o1 } =\n-                    self.normalize_associated_types_in_as_infer_ok(self.cause.span, a_sig);\n+                    self.at(&self.cause, self.param_env).normalize(a_sig);\n                 obligations.extend(o1);\n \n                 let a_fn_pointer = self.tcx.mk_fn_ptr(a_sig);"}, {"sha": "0c5bbb3e20be32cc3a83e063e1d36006be387b30", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=06786227fdb92f7a905cfd4a0131f2ec9db5072f", "patch": "@@ -1748,9 +1748,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ty::Adt(adt, substs) if adt.is_struct() => variant\n                         .fields\n                         .iter()\n-                        .map(|f| {\n-                            self.normalize(expr_span, f.ty(self.tcx, substs))\n-                        })\n+                        .map(|f| self.normalize(expr_span, f.ty(self.tcx, substs)))\n                         .collect(),\n                     _ => {\n                         self.tcx"}, {"sha": "952d2726259187c736488ccd827d17973b571ed7", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=06786227fdb92f7a905cfd4a0131f2ec9db5072f", "patch": "@@ -16,7 +16,7 @@ use rustc_hir_analysis::astconv::{\n };\n use rustc_infer::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n-use rustc_infer::infer::{InferOk, InferResult};\n+use rustc_infer::infer::InferResult;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n@@ -31,9 +31,7 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::{\n-    self, NormalizeExt, ObligationCause, ObligationCauseCode, ObligationCtxt,\n-};\n+use rustc_trait_selection::traits::{self, NormalizeExt, ObligationCauseCode, ObligationCtxt};\n \n use std::collections::hash_map::Entry;\n use std::slice;\n@@ -377,42 +375,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )\n     }\n \n-    pub(in super::super) fn normalize_associated_types_in_as_infer_ok<T>(\n-        &self,\n-        span: Span,\n-        value: T,\n-    ) -> InferOk<'tcx, T>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        self.at(&ObligationCause::misc(span, self.body_id), self.param_env).normalize(value)\n-    }\n-\n-    pub(in super::super) fn normalize_op_associated_types_in_as_infer_ok<T>(\n-        &self,\n-        span: Span,\n-        value: T,\n-        opt_input_expr: Option<&hir::Expr<'_>>,\n-    ) -> InferOk<'tcx, T>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        self.at(\n-            &ObligationCause::new(\n-                span,\n-                self.body_id,\n-                traits::BinOp {\n-                    rhs_span: opt_input_expr.map(|expr| expr.span),\n-                    is_lit: opt_input_expr\n-                        .map_or(false, |expr| matches!(expr.kind, ExprKind::Lit(_))),\n-                    output_ty: None,\n-                },\n-            ),\n-            self.param_env,\n-        )\n-        .normalize(value)\n-    }\n-\n     pub fn require_type_meets(\n         &self,\n         ty: Ty<'tcx>,"}, {"sha": "b9a8d16311c93a7f0465c5035f37c95d19375ca8", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=06786227fdb92f7a905cfd4a0131f2ec9db5072f", "patch": "@@ -20,6 +20,7 @@ use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::error_reporting::DefIdOrName;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n+use rustc_trait_selection::traits::NormalizeExt;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(crate) fn body_fn_sig(&self) -> Option<ty::FnSig<'tcx>> {\n@@ -245,7 +246,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // implied by wf, but also because that would possibly result in\n         // erroneous errors later on.\n         let infer::InferOk { value: output, obligations: _ } =\n-            self.normalize_associated_types_in_as_infer_ok(expr.span, output);\n+            self.at(&self.misc(expr.span), self.param_env).normalize(output);\n \n         if output.is_ty_var() { None } else { Some((def_id_or_name, output, inputs)) }\n     }"}, {"sha": "09bd123350dfd1e3f794a4f7e13210a7acf50f3e", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=06786227fdb92f7a905cfd4a0131f2ec9db5072f", "patch": "@@ -48,8 +48,6 @@ pub use diverges::Diverges;\n pub use expectation::Expectation;\n pub use fn_ctxt::*;\n pub use inherited::{Inherited, InheritedBuilder};\n-use rustc_infer::traits::ObligationCause;\n-use rustc_trait_selection::traits::NormalizeExt;\n \n use crate::check::check_fn;\n use crate::coercion::DynamicCoerceMany;\n@@ -235,9 +233,10 @@ fn typeck_with_fallback<'tcx>(\n \n     let typeck_results = Inherited::build(tcx, def_id).enter(|inh| {\n         let param_env = tcx.param_env(def_id);\n-        let mut fcx = if let Some(hir::FnSig { header, decl, .. }) = fn_sig {\n+        let mut fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n+\n+        if let Some(hir::FnSig { header, decl, .. }) = fn_sig {\n             let fn_sig = if rustc_hir_analysis::collect::get_infer_ret_ty(&decl.output).is_some() {\n-                let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n                 <dyn AstConv<'_>>::ty_of_fn(&fcx, id, header.unsafety, header.abi, decl, None, None)\n             } else {\n                 tcx.fn_sig(def_id)\n@@ -247,16 +246,10 @@ fn typeck_with_fallback<'tcx>(\n \n             // Compute the function signature from point of view of inside the fn.\n             let fn_sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), fn_sig);\n-            // FIXME(compiler-errors): Remove\n-            let fn_sig = inh\n-                .register_infer_ok_obligations(\n-                    inh.at(&ObligationCause::misc(body.value.span, body_id.hir_id),\n-                    param_env,\n-                )\n-                .normalize(fn_sig));\n-            check_fn(&inh, param_env, fn_sig, decl, def_id, body, None).0\n+            let fn_sig = fcx.normalize(body.value.span, fn_sig);\n+\n+            check_fn(&mut fcx, fn_sig, decl, def_id, body, None);\n         } else {\n-            let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n             let expected_type = body_ty\n                 .and_then(|ty| match ty.kind {\n                     hir::TyKind::Infer => Some(<dyn AstConv<'_>>::ast_ty_to_ty(&fcx, ty)),\n@@ -316,8 +309,6 @@ fn typeck_with_fallback<'tcx>(\n             fcx.check_expr_coercable_to_type(&body.value, expected_type, None);\n \n             fcx.write_ty(id, expected_type);\n-\n-            fcx\n         };\n \n         fcx.type_inference_fallback();"}, {"sha": "ebbd5eb1e6478cafdb717373c908f1f5724ff01b", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06786227fdb92f7a905cfd4a0131f2ec9db5072f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=06786227fdb92f7a905cfd4a0131f2ec9db5072f", "patch": "@@ -23,8 +23,8 @@ use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, Ty, TypeVisitable};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n-use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+use rustc_trait_selection::traits::{self, NormalizeExt};\n \n use self::probe::{IsSuggestion, ProbeScope};\n \n@@ -465,11 +465,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let fn_sig = fn_sig.subst(self.tcx, substs);\n         let fn_sig = self.replace_bound_vars_with_fresh_vars(span, infer::FnCall, fn_sig);\n \n-        let InferOk { value, obligations: o } = if is_op {\n-            self.normalize_op_associated_types_in_as_infer_ok(span, fn_sig, opt_input_expr)\n+        let cause = if is_op {\n+            ObligationCause::new(\n+                span,\n+                self.body_id,\n+                traits::BinOp {\n+                    rhs_span: opt_input_expr.map(|expr| expr.span),\n+                    is_lit: opt_input_expr\n+                        .map_or(false, |expr| matches!(expr.kind, hir::ExprKind::Lit(_))),\n+                    output_ty: None,\n+                },\n+            )\n         } else {\n-            self.normalize_associated_types_in_as_infer_ok(span, fn_sig)\n+            traits::ObligationCause::misc(span, self.body_id)\n         };\n+\n+        let InferOk { value, obligations: o } = self.at(&cause, self.param_env).normalize(fn_sig);\n         let fn_sig = {\n             obligations.extend(o);\n             value\n@@ -485,32 +496,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // any late-bound regions appearing in its bounds.\n         let bounds = self.tcx.predicates_of(def_id).instantiate(self.tcx, substs);\n \n-        let InferOk { value, obligations: o } = if is_op {\n-            self.normalize_op_associated_types_in_as_infer_ok(span, bounds, opt_input_expr)\n-        } else {\n-            self.normalize_associated_types_in_as_infer_ok(span, bounds)\n-        };\n+        let InferOk { value, obligations: o } = self.at(&cause, self.param_env).normalize(bounds);\n         let bounds = {\n             obligations.extend(o);\n             value\n         };\n \n         assert!(!bounds.has_escaping_bound_vars());\n \n-        let cause = if is_op {\n-            ObligationCause::new(\n-                span,\n-                self.body_id,\n-                traits::BinOp {\n-                    rhs_span: opt_input_expr.map(|expr| expr.span),\n-                    is_lit: opt_input_expr\n-                        .map_or(false, |expr| matches!(expr.kind, hir::ExprKind::Lit(_))),\n-                    output_ty: None,\n-                },\n-            )\n-        } else {\n-            traits::ObligationCause::misc(span, self.body_id)\n-        };\n         let predicates_cause = cause.clone();\n         obligations.extend(traits::predicates_for_generics(\n             move |_, _| predicates_cause.clone(),"}]}