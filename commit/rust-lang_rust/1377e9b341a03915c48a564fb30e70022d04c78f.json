{"sha": "1377e9b341a03915c48a564fb30e70022d04c78f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNzdlOWIzNDFhMDM5MTVjNDhhNTY0ZmIzMGU3MDAyMmQwNGM3OGY=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-06-02T22:12:17Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-06-02T22:12:17Z"}, "message": "Implement pcwalton's code review suggestions.", "tree": {"sha": "5e02a3c95be7475d4bc4bb64af2097a6b033cfa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e02a3c95be7475d4bc4bb64af2097a6b033cfa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1377e9b341a03915c48a564fb30e70022d04c78f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1377e9b341a03915c48a564fb30e70022d04c78f", "html_url": "https://github.com/rust-lang/rust/commit/1377e9b341a03915c48a564fb30e70022d04c78f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1377e9b341a03915c48a564fb30e70022d04c78f/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cd10d2fef8ffa68903b18726f19ac52a04725cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd10d2fef8ffa68903b18726f19ac52a04725cc", "html_url": "https://github.com/rust-lang/rust/commit/5cd10d2fef8ffa68903b18726f19ac52a04725cc"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "32d9ee1678f00695a91896acf8ccbefae74eb5aa", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1377e9b341a03915c48a564fb30e70022d04c78f/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1377e9b341a03915c48a564fb30e70022d04c78f/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=1377e9b341a03915c48a564fb30e70022d04c78f", "patch": "@@ -504,7 +504,7 @@ fn is_constraint_arg(@expr e) -> bool {\n }\n \n fn eq_ty(&@ty a, &@ty b) -> bool {\n-    ret a == b;\n+    ret std::box::ptr_eq(a,b);\n }\n \n fn hash_ty(&@ty t) -> uint {"}, {"sha": "4e33b0b844b4124bfaf66072da5744005ffb1d4f", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1377e9b341a03915c48a564fb30e70022d04c78f/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1377e9b341a03915c48a564fb30e70022d04c78f/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1377e9b341a03915c48a564fb30e70022d04c78f", "patch": "@@ -61,11 +61,6 @@ type item_table = hashmap[ast::def_id,any_item];\n \n type mt = rec(t ty, ast::mutability mut);\n \n-tag cached_ty {\n-    in_progress;\n-    done(t);\n-}\n-\n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n type creader_cache = hashmap[tup(int,uint,uint),ty::t];\n@@ -77,7 +72,7 @@ type ctxt = rec(@type_store ts,\n                 type_cache tcache,\n                 creader_cache rcache,\n                 hashmap[t,str] short_names_cache,\n-                hashmap[@ast::ty,cached_ty] ast_ty_to_ty_cache);\n+                hashmap[@ast::ty,option::t[t]] ast_ty_to_ty_cache);\n type ty_ctxt = ctxt;    // Needed for disambiguation from unify::ctxt.\n \n // Convert from method type to function type.  Pretty easy; we just drop\n@@ -253,7 +248,7 @@ fn mk_ctxt(session::session s, resolve::def_map dm) -> ctxt {\n             short_names_cache =\n             map::mk_hashmap[ty::t,str](ty::hash_ty, ty::eq_ty),\n             ast_ty_to_ty_cache = \n-            map::mk_hashmap[@ast::ty,cached_ty](ast::hash_ty, ast::eq_ty));\n+            map::mk_hashmap[@ast::ty,option::t[t]](ast::hash_ty, ast::eq_ty));\n \n     populate_type_store(cx);\n     ret cx;"}, {"sha": "0c21090d6e48acfe8cb7b4d168db3ca01a885f40", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1377e9b341a03915c48a564fb30e70022d04c78f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1377e9b341a03915c48a564fb30e70022d04c78f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1377e9b341a03915c48a564fb30e70022d04c78f", "patch": "@@ -228,14 +228,14 @@ fn ast_mode_to_mode(ast::mode mode) -> ty::mode {\n // corresponding to a definition ID:\n fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n     alt (tcx.ast_ty_to_ty_cache.find(ast_ty)) {\n-        case (some[ty::cached_ty](ty::done(?ty))) { ret ty; } \n-        case (some[ty::cached_ty](ty::in_progress)) {\n+        case (some[option::t[ty::t]](some[ty::t](?ty))) { ret ty; } \n+        case (some[option::t[ty::t]](none)) {\n             tcx.sess.span_err(ast_ty.span, \"illegal recursive type \"\n                 + \"(insert a tag in the cycle, if this is desired)\");\n         }\n-        case (none[ty::cached_ty]) { } /* go on */\n+        case (none[option::t[ty::t]]) { } /* go on */\n     }\n-    tcx.ast_ty_to_ty_cache.insert(ast_ty, ty::in_progress);\n+    tcx.ast_ty_to_ty_cache.insert(ast_ty, none[ty::t]);\n     \n     fn ast_arg_to_arg(&ty::ctxt tcx,\n                       &ty_getter getter,\n@@ -371,7 +371,7 @@ fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n         }\n     }\n \n-    tcx.ast_ty_to_ty_cache.insert(ast_ty, ty::done(typ));\n+    tcx.ast_ty_to_ty_cache.insert(ast_ty, some(typ));\n     ret typ;\n }\n "}, {"sha": "5de96b82a791c7857787d9d3a2d0c44ad2931547", "filename": "src/test/compile-fail/type-recursive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1377e9b341a03915c48a564fb30e70022d04c78f/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1377e9b341a03915c48a564fb30e70022d04c78f/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs?ref=1377e9b341a03915c48a564fb30e70022d04c78f", "patch": "@@ -1,4 +1,4 @@\n // error-pattern:illegal recursive type\n type t1 = rec(int foo, t1 foolish);\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}]}