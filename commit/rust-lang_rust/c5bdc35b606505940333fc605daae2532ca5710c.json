{"sha": "c5bdc35b606505940333fc605daae2532ca5710c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YmRjMzViNjA2NTA1OTQwMzMzZmM2MDVkYWFlMjUzMmNhNTcxMGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-02T03:05:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-02T10:02:04Z"}, "message": "refactor and generalize revisions", "tree": {"sha": "99e75f895f4c37c8c7a27f657332747cc6597f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99e75f895f4c37c8c7a27f657332747cc6597f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5bdc35b606505940333fc605daae2532ca5710c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5bdc35b606505940333fc605daae2532ca5710c", "html_url": "https://github.com/rust-lang/rust/commit/c5bdc35b606505940333fc605daae2532ca5710c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5bdc35b606505940333fc605daae2532ca5710c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb2a425d5861297a9a5d08b8d5826b7703ecea04", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2a425d5861297a9a5d08b8d5826b7703ecea04", "html_url": "https://github.com/rust-lang/rust/commit/bb2a425d5861297a9a5d08b8d5826b7703ecea04"}], "stats": {"total": 68, "additions": 52, "deletions": 16}, "files": [{"sha": "44634e4d565ff0f68158a8932f5e154eb45f596f", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5bdc35b606505940333fc605daae2532ca5710c/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bdc35b606505940333fc605daae2532ca5710c/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=c5bdc35b606505940333fc605daae2532ca5710c", "patch": "@@ -33,7 +33,7 @@ enum WhichLine { ThisLine, FollowPrevious(usize), AdjustBackward(usize) }\n ///\n /// If cfg is not None (i.e., in an incremental test), then we look\n /// for `//[X]~` instead, where `X` is the current `cfg`.\n-pub fn load_errors(testfile: &Path, cfg: &Option<String>) -> Vec<ExpectedError> {\n+pub fn load_errors(testfile: &Path, cfg: Option<&str>) -> Vec<ExpectedError> {\n     let rdr = BufReader::new(File::open(testfile).unwrap());\n \n     // `last_nonfollow_error` tracks the most recently seen\n@@ -46,8 +46,8 @@ pub fn load_errors(testfile: &Path, cfg: &Option<String>) -> Vec<ExpectedError>\n     // updating it in the map callback below.)\n     let mut last_nonfollow_error = None;\n \n-    let tag = match *cfg {\n-        Some(ref rev) => format!(\"//[{}]~\", rev),\n+    let tag = match cfg {\n+        Some(rev) => format!(\"//[{}]~\", rev),\n         None => format!(\"//~\")\n     };\n "}, {"sha": "75d7ada8719b78c8141bd36073f47bb46b1a5ddc", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5bdc35b606505940333fc605daae2532ca5710c/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bdc35b606505940333fc605daae2532ca5710c/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=c5bdc35b606505940333fc605daae2532ca5710c", "patch": "@@ -20,16 +20,6 @@ use util;\n \n #[derive(Clone, Debug)]\n pub struct TestProps {\n-    // For the main test file, this is initialized to `None`. But\n-    // when running tests that test multiple revisions, such as\n-    // incremental tests, we will set this to `Some(foo)` where `foo`\n-    // is the current revision identifier.\n-    //\n-    // Note that, unlike the other options here, this value is never\n-    // loaded from the input file (though it is always set to one of\n-    // the values listed in the vec `self.revisions`, which is loaded\n-    // from the file).\n-    pub revision: Option<String>,\n     // Lines that should be expected, in order, on standard out\n     pub error_patterns: Vec<String> ,\n     // Extra flags to pass to the compiler\n@@ -81,7 +71,6 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let pretty_compare_only = false;\n     let forbid_output = Vec::new();\n     let mut props = TestProps {\n-        revision: None,\n         error_patterns: error_patterns,\n         compile_flags: vec![],\n         run_flags: run_flags,"}, {"sha": "880f9742b1066d9818901462f395aed8c31bf0d1", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c5bdc35b606505940333fc605daae2532ca5710c/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bdc35b606505940333fc605daae2532ca5710c/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c5bdc35b606505940333fc605daae2532ca5710c", "patch": "@@ -70,7 +70,36 @@ fn get_output(props: &TestProps, proc_res: &ProcRes) -> String {\n     }\n }\n \n+\n+fn for_each_revision<OP>(config: &Config, props: &TestProps, testpaths: &TestPaths,\n+                         mut op: OP)\n+    where OP: FnMut(&Config, &TestProps, &TestPaths, Option<&str>)\n+{\n+    if props.revisions.is_empty() {\n+        op(config, props, testpaths, None)\n+    } else {\n+        for revision in &props.revisions {\n+            let mut revision_props = props.clone();\n+            header::load_props_into(&mut revision_props,\n+                                    &testpaths.file,\n+                                    Some(&revision));\n+            revision_props.compile_flags.extend(vec![\n+                format!(\"--cfg\"),\n+                format!(\"{}\", revision),\n+            ]);\n+            op(config, &revision_props, testpaths, Some(revision));\n+        }\n+    }\n+}\n+\n fn run_cfail_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n+    for_each_revision(config, props, testpaths, run_cfail_test_revision);\n+}\n+\n+fn run_cfail_test_revision(config: &Config,\n+                           props: &TestProps,\n+                           testpaths: &TestPaths,\n+                           revision: Option<&str>) {\n     let proc_res = compile_test(config, props, testpaths);\n \n     if proc_res.status.success() {\n@@ -85,7 +114,7 @@ fn run_cfail_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n     }\n \n     let output_to_check = get_output(props, &proc_res);\n-    let expected_errors = errors::load_errors(&testpaths.file, &props.revision);\n+    let expected_errors = errors::load_errors(&testpaths.file, revision);\n     if !expected_errors.is_empty() {\n         if !props.error_patterns.is_empty() {\n             fatal(\"both error pattern and expected errors specified\");\n@@ -99,6 +128,13 @@ fn run_cfail_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n }\n \n fn run_rfail_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n+    for_each_revision(config, props, testpaths, run_rfail_test_revision);\n+}\n+\n+fn run_rfail_test_revision(config: &Config,\n+                           props: &TestProps,\n+                           testpaths: &TestPaths,\n+                           _revision: Option<&str>) {\n     let proc_res = compile_test(config, props, testpaths);\n \n     if !proc_res.status.success() {\n@@ -130,6 +166,13 @@ fn check_correct_failure_status(proc_res: &ProcRes) {\n }\n \n fn run_rpass_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n+    for_each_revision(config, props, testpaths, run_rpass_test_revision);\n+}\n+\n+fn run_rpass_test_revision(config: &Config,\n+                           props: &TestProps,\n+                           testpaths: &TestPaths,\n+                           _revision: Option<&str>) {\n     let proc_res = compile_test(config, props, testpaths);\n \n     if !proc_res.status.success() {\n@@ -144,6 +187,8 @@ fn run_rpass_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n }\n \n fn run_valgrind_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n+    assert!(props.revisions.is_empty(), \"revisions not relevant to rpass tests\");\n+\n     if config.valgrind_path.is_none() {\n         assert!(!config.force_valgrind);\n         return run_rpass_test(config, props, testpaths);\n@@ -1804,6 +1849,8 @@ fn run_rustdoc_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n }\n \n fn run_codegen_units_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n+    assert!(props.revisions.is_empty(), \"revisions not relevant to codegen units\");\n+\n     let proc_res = compile_test(config, props, testpaths);\n \n     if !proc_res.status.success() {\n@@ -1821,7 +1868,7 @@ fn run_codegen_units_test(config: &Config, props: &TestProps, testpaths: &TestPa\n         .map(|s| (&s[prefix.len()..]).to_string())\n         .collect();\n \n-    let expected: HashSet<String> = errors::load_errors(&testpaths.file, &props.revision)\n+    let expected: HashSet<String> = errors::load_errors(&testpaths.file, None)\n         .iter()\n         .map(|e| e.msg.trim().to_string())\n         .collect();"}]}