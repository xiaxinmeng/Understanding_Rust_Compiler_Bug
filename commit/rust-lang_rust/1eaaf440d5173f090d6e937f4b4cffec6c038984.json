{"sha": "1eaaf440d5173f090d6e937f4b4cffec6c038984", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYWFmNDQwZDUxNzNmMDkwZDZlOTM3ZjRiNGNmZmVjNmMwMzg5ODQ=", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2019-06-09T10:58:40Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2019-06-09T10:58:40Z"}, "message": "Allow attributes in formal function parameters", "tree": {"sha": "9f0beed7bc92e5815b4db44b8e32973678140fcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f0beed7bc92e5815b4db44b8e32973678140fcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eaaf440d5173f090d6e937f4b4cffec6c038984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eaaf440d5173f090d6e937f4b4cffec6c038984", "html_url": "https://github.com/rust-lang/rust/commit/1eaaf440d5173f090d6e937f4b4cffec6c038984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eaaf440d5173f090d6e937f4b4cffec6c038984/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c45343f11fbf93cf4e15568aee3ff3f2f287466", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c45343f11fbf93cf4e15568aee3ff3f2f287466", "html_url": "https://github.com/rust-lang/rust/commit/5c45343f11fbf93cf4e15568aee3ff3f2f287466"}], "stats": {"total": 1189, "additions": 1115, "deletions": 74}, "files": [{"sha": "6692903cd4fe9d31a0004ced8c80061cf6f2f0e6", "filename": "src/librustc_data_structures/thin_vec.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibrustc_data_structures%2Fthin_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibrustc_data_structures%2Fthin_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fthin_vec.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -66,3 +66,9 @@ impl<T: HashStable<CTX>, CTX> HashStable<CTX> for ThinVec<T> {\n         (**self).hash_stable(hcx, hasher)\n     }\n }\n+\n+impl<T> Default for ThinVec<T> {\n+    fn default() -> Self {\n+        Self(None)\n+    }\n+}"}, {"sha": "00b6db0ed9a1273b84833739fe5e998294f0e95a", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -14,6 +14,7 @@ use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::*;\n use syntax::attr;\n+use syntax::feature_gate::is_builtin_attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym};\n use syntax::ptr::P;\n@@ -365,6 +366,29 @@ impl<'a> AstValidator<'a> {\n             _ => None,\n         }\n     }\n+\n+    fn check_fn_decl(&self, fn_decl: &FnDecl) {\n+        fn_decl\n+            .inputs\n+            .iter()\n+            .flat_map(|i| i.attrs.as_ref())\n+            .filter(|attr| {\n+                let arr = [sym::allow, sym::cfg, sym::cfg_attr, sym::deny, sym::forbid, sym::warn];\n+                !arr.contains(&attr.name_or_empty()) && is_builtin_attr(attr)\n+            })\n+            .for_each(|attr| if attr.is_sugared_doc {\n+                let mut err = self.err_handler().struct_span_err(\n+                    attr.span,\n+                    \"documentation comments cannot be applied to function parameters\"\n+                );\n+                err.span_label(attr.span, \"doc comments are not allowed here\");\n+                err.emit();\n+            }\n+            else {\n+                self.err_handler().span_err(attr.span, \"allow, cfg, cfg_attr, deny, \\\n+                forbid, and warn are the only allowed built-in attributes in function parameters\")\n+            });\n+    }\n }\n \n enum GenericPosition {\n@@ -470,6 +494,9 @@ fn validate_generics_order<'a>(\n impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_expr(&mut self, expr: &'a Expr) {\n         match expr.node {\n+            ExprKind::Closure(_, _, _, ref fn_decl, _, _) => {\n+                self.check_fn_decl(fn_decl);\n+            }\n             ExprKind::IfLet(_, ref expr, _, _) | ExprKind::WhileLet(_, ref expr, _, _) =>\n                 self.while_if_let_ambiguity(&expr),\n             ExprKind::InlineAsm(..) if !self.session.target.target.options.allow_asm => {\n@@ -484,6 +511,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_ty(&mut self, ty: &'a Ty) {\n         match ty.node {\n             TyKind::BareFn(ref bfty) => {\n+                self.check_fn_decl(&bfty.decl);\n                 self.check_decl_no_pat(&bfty.decl, |span, _| {\n                     struct_span_err!(self.session, span, E0561,\n                                      \"patterns aren't allowed in function pointer types\").emit();\n@@ -601,10 +629,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .note(\"only trait implementations may be annotated with default\").emit();\n                 }\n             }\n-            ItemKind::Fn(_, ref header, ref generics, _) => {\n+            ItemKind::Fn(ref decl, ref header, ref generics, _) => {\n+                self.visit_fn_header(header);\n+                self.check_fn_decl(decl);\n                 // We currently do not permit const generics in `const fn`, as\n                 // this is tantamount to allowing compile-time dependent typing.\n-                self.visit_fn_header(header);\n                 if header.constness.node == Constness::Const {\n                     // Look for const generics and error if we find any.\n                     for param in &generics.params {\n@@ -657,6 +686,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n                 for trait_item in trait_items {\n                     if let TraitItemKind::Method(ref sig, ref block) = trait_item.node {\n+                        self.check_fn_decl(&sig.decl);\n                         self.check_trait_fn_not_async(trait_item.span, sig.header.asyncness.node);\n                         self.check_trait_fn_not_const(sig.header.constness);\n                         if block.is_none() {\n@@ -711,6 +741,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {\n         match fi.node {\n             ForeignItemKind::Fn(ref decl, _) => {\n+                self.check_fn_decl(decl);\n                 self.check_decl_no_pat(decl, |span, _| {\n                     struct_span_err!(self.session, span, E0130,\n                                      \"patterns aren't allowed in foreign function declarations\")\n@@ -864,6 +895,16 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                              \"`async fn` is not permitted in the 2015 edition\").emit();\n         }\n     }\n+\n+    fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n+        match ii.node {\n+            ImplItemKind::Method(ref sig, _) => {\n+                self.check_fn_decl(&sig.decl);\n+            }\n+            _ => {}\n+        }\n+        visit::walk_impl_item(self, ii);\n+    }\n }\n \n pub fn check_crate(session: &Session, krate: &Crate) -> (bool, bool) {"}, {"sha": "68cb8c8574d8be5d9522e2aec752c8480deae73b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -1770,6 +1770,7 @@ pub struct InlineAsm {\n /// E.g., `bar: usize` as in `fn foo(bar: usize)`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Arg {\n+    pub attrs: ThinVec<Attribute>,\n     pub ty: P<Ty>,\n     pub pat: P<Pat>,\n     pub id: NodeId,\n@@ -1817,14 +1818,15 @@ impl Arg {\n         }\n     }\n \n-    pub fn from_self(eself: ExplicitSelf, eself_ident: Ident) -> Arg {\n+    pub fn from_self(attrs: ThinVec<Attribute>, eself: ExplicitSelf, eself_ident: Ident) -> Arg {\n         let span = eself.span.to(eself_ident.span);\n         let infer_ty = P(Ty {\n             id: DUMMY_NODE_ID,\n             node: TyKind::ImplicitSelf,\n             span,\n         });\n         let arg = |mutbl, ty| Arg {\n+            attrs,\n             pat: P(Pat {\n                 id: DUMMY_NODE_ID,\n                 node: PatKind::Ident(BindingMode::ByValue(mutbl), eself_ident, None),"}, {"sha": "f99397408ba2694758ebb1678349aae2d840dcee", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -724,7 +724,7 @@ macro_rules! derive_has_attrs {\n \n derive_has_attrs! {\n     Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::ImplItem, ast::TraitItem, ast::Arm,\n-    ast::Field, ast::FieldPat, ast::Variant_\n+    ast::Field, ast::FieldPat, ast::Variant_, ast::Arg\n }\n \n pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {"}, {"sha": "1cc13ac7878bedd825a29cc3fb58687369dbf409", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -298,6 +298,10 @@ impl<'a> StripUnconfigured<'a> {\n         }\n     }\n \n+    pub fn configure_fn_decl(&mut self, fn_decl: &mut ast::FnDecl) {\n+        fn_decl.inputs.flat_map_in_place(|arg| self.configure(arg));\n+    }\n+\n     /// Denies `#[cfg]` on generic parameters until we decide what to do with it.\n     /// See issue #51279.\n     pub fn disallow_cfg_on_generic_param(&mut self, param: &ast::GenericParam) {\n@@ -364,6 +368,11 @@ impl<'a> MutVisitor for StripUnconfigured<'a> {\n         self.configure_pat(pat);\n         noop_visit_pat(pat, self)\n     }\n+\n+    fn visit_fn_decl(&mut self, mut fn_decl: &mut P<ast::FnDecl>) {\n+        self.configure_fn_decl(&mut fn_decl);\n+        noop_visit_fn_decl(fn_decl, self);\n+    }\n }\n \n fn is_cfg(attr: &ast::Attribute) -> bool {"}, {"sha": "9d4bf7d518d75081098ab4bcfb8a2e08c88c6574", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -963,9 +963,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn arg(&self, span: Span, ident: ast::Ident, ty: P<ast::Ty>) -> ast::Arg {\n         let arg_pat = self.pat_ident(span, ident);\n         ast::Arg {\n-            ty,\n+            attrs: ThinVec::default(),\n+            id: ast::DUMMY_NODE_ID,\n             pat: arg_pat,\n-            id: ast::DUMMY_NODE_ID\n+            ty,\n         }\n     }\n "}, {"sha": "671c01c53bbbb2105f6020ec3c89bc6ab021e883", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -1616,6 +1616,11 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             *id = self.cx.resolver.next_node_id()\n         }\n     }\n+\n+    fn visit_fn_decl(&mut self, mut fn_decl: &mut P<ast::FnDecl>) {\n+        self.cfg.configure_fn_decl(&mut fn_decl);\n+        noop_visit_fn_decl(fn_decl, self);\n+    }\n }\n \n pub struct ExpansionConfig<'feat> {"}, {"sha": "93683074a570eddb34509ada1a11bee09553d025", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -560,6 +560,9 @@ declare_features! (\n     // Allows the user of associated type bounds.\n     (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n \n+    // Attributes on formal function params\n+    (active, param_attrs, \"1.36.0\", Some(60406), None),\n+\n     // Allows calling constructor functions in `const fn`\n     // FIXME Create issue\n     (active, const_constructor, \"1.37.0\", Some(61456), None),\n@@ -2508,6 +2511,18 @@ pub fn check_crate(krate: &ast::Crate,\n         parse_sess: sess,\n         plugin_attributes,\n     };\n+\n+    sess\n+        .param_attr_spans\n+        .borrow()\n+        .iter()\n+        .for_each(|span| gate_feature!(\n+            &ctx,\n+            param_attrs,\n+            *span,\n+            \"attributes on function parameters are unstable\"\n+        ));\n+\n     let visitor = &mut PostExpansionVisitor {\n         context: &ctx,\n         builtin_attributes: &*BUILTIN_ATTRIBUTE_MAP,"}, {"sha": "02e2c96868dd6e82fe7e8a631127206d4e507cf4", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -568,8 +568,9 @@ pub fn noop_visit_meta_item<T: MutVisitor>(mi: &mut MetaItem, vis: &mut T) {\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_arg<T: MutVisitor>(Arg { id, pat, ty }: &mut Arg, vis: &mut T) {\n+pub fn noop_visit_arg<T: MutVisitor>(Arg { attrs, id, pat, ty }: &mut Arg, vis: &mut T) {\n     vis.visit_id(id);\n+    visit_thin_attrs(attrs, vis);\n     vis.visit_pat(pat);\n     vis.visit_ty(ty);\n }"}, {"sha": "b28d48b9445fdcd6c66a9db199bd988f0ee2dbef", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -18,6 +18,14 @@ const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n                                                      permitted in this context\";\n \n impl<'a> Parser<'a> {\n+    crate fn parse_arg_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n+        let attrs = self.parse_outer_attributes()?;\n+        attrs.iter().for_each(|a|\n+            self.sess.param_attr_spans.borrow_mut().push(a.span)\n+        );\n+        Ok(attrs)\n+    }\n+\n     /// Parse attributes that appear before an item\n     crate fn parse_outer_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let mut attrs: Vec<ast::Attribute> = Vec::new();\n@@ -35,7 +43,8 @@ impl<'a> Parser<'a> {\n                     };\n                     let inner_parse_policy =\n                         InnerAttributeParsePolicy::NotPermitted { reason: inner_error_reason };\n-                    attrs.push(self.parse_attribute_with_inner_parse_policy(inner_parse_policy)?);\n+                    let attr = self.parse_attribute_with_inner_parse_policy(inner_parse_policy)?;\n+                    attrs.push(attr);\n                     just_parsed_doc_comment = false;\n                 }\n                 token::DocComment(s) => {"}, {"sha": "472cbcd0f795eea5d67b1c82a662544ffde1450c", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -28,7 +28,7 @@ crate fn dummy_arg(ident: Ident) -> Arg {\n         span: ident.span,\n         id: ast::DUMMY_NODE_ID\n     };\n-    Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID }\n+    Arg { attrs: ThinVec::default(), id: ast::DUMMY_NODE_ID, pat, ty: P(ty) }\n }\n \n pub enum Error {\n@@ -1074,11 +1074,11 @@ impl<'a> Parser<'a> {\n         Err(err)\n     }\n \n-    crate fn eat_incorrect_doc_comment(&mut self, applied_to: &str) {\n+    crate fn eat_incorrect_doc_comment_for_arg_type(&mut self) {\n         if let token::DocComment(_) = self.token.kind {\n             let mut err = self.diagnostic().struct_span_err(\n                 self.token.span,\n-                &format!(\"documentation comments cannot be applied to {}\", applied_to),\n+                \"documentation comments cannot be applied to a function parameter's type\",\n             );\n             err.span_label(self.token.span, \"doc comments are not allowed here\");\n             err.emit();\n@@ -1095,7 +1095,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n             let mut err = self.diagnostic().struct_span_err(\n                 sp,\n-                &format!(\"attributes cannot be applied to {}\", applied_to),\n+                \"attributes cannot be applied to a function parameter's type\",\n             );\n             err.span_label(sp, \"attributes are not allowed here\");\n             err.emit();"}, {"sha": "fca0bda2a3e6a274a0853e41d167bd45e2208463", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -1532,6 +1532,7 @@ mod tests {\n             buffered_lints: Lock::new(vec![]),\n             edition: Edition::from_session(),\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n+            param_attr_spans: Lock::new(Vec::new()),\n         }\n     }\n "}, {"sha": "c4da876a2e7980816511dd977142b60a057ace59", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -54,6 +54,7 @@ pub struct ParseSess {\n     /// operation token that followed it, but that the parser cannot identify without further\n     /// analysis.\n     pub ambiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n+    pub param_attr_spans: Lock<Vec<Span>>\n }\n \n impl ParseSess {\n@@ -79,6 +80,7 @@ impl ParseSess {\n             buffered_lints: Lock::new(vec![]),\n             edition: Edition::from_session(),\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n+            param_attr_spans: Lock::new(Vec::new()),\n         }\n     }\n "}, {"sha": "7b99f7bd4e5237e6b78ac34d43ea81abb15c45e3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 52, "deletions": 28, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -1188,7 +1188,8 @@ impl<'a> Parser<'a> {\n                 // definition...\n \n                 // We don't allow argument names to be left off in edition 2018.\n-                p.parse_arg_general(p.token.span.rust_2018(), true, false)\n+                let is_name_required = p.token.span.rust_2018();\n+                p.parse_arg_general(true, false, |_| is_name_required)\n             })?;\n             generics.where_clause = self.parse_where_clause()?;\n \n@@ -1487,26 +1488,31 @@ impl<'a> Parser<'a> {\n     /// Skips unexpected attributes and doc comments in this position and emits an appropriate\n     /// error.\n     /// This version of parse arg doesn't necessarily require identifier names.\n-    fn parse_arg_general(\n+    fn parse_arg_general<F>(\n         &mut self,\n-        require_name: bool,\n         is_trait_item: bool,\n         allow_c_variadic: bool,\n-    ) -> PResult<'a, Arg> {\n-        if let Ok(Some(arg)) = self.parse_self_arg() {\n+        is_name_required: F,\n+    ) -> PResult<'a, Arg>\n+    where\n+        F: Fn(&token::Token) -> bool\n+    {\n+        let attrs = self.parse_arg_attributes()?;\n+        if let Ok(Some(mut arg)) = self.parse_self_arg() {\n+            arg.attrs = attrs.into();\n             return self.recover_bad_self_arg(arg, is_trait_item);\n         }\n \n-        let (pat, ty) = if require_name || self.is_named_argument() {\n-            debug!(\"parse_arg_general parse_pat (require_name:{})\", require_name);\n-            self.eat_incorrect_doc_comment(\"method arguments\");\n-            let pat = self.parse_pat(Some(\"argument name\"))?;\n+        let is_name_required = is_name_required(&self.token);\n+        let (pat, ty) = if is_name_required || self.is_named_argument() {\n+            debug!(\"parse_arg_general parse_pat (is_name_required:{})\", is_name_required);\n \n+            let pat = self.parse_pat(Some(\"argument name\"))?;\n             if let Err(mut err) = self.expect(&token::Colon) {\n                 if let Some(ident) = self.argument_without_type(\n                     &mut err,\n                     pat,\n-                    require_name,\n+                    is_name_required,\n                     is_trait_item,\n                 ) {\n                     err.emit();\n@@ -1516,12 +1522,12 @@ impl<'a> Parser<'a> {\n                 }\n             }\n \n-            self.eat_incorrect_doc_comment(\"a method argument's type\");\n+            self.eat_incorrect_doc_comment_for_arg_type();\n             (pat, self.parse_ty_common(true, true, allow_c_variadic)?)\n         } else {\n             debug!(\"parse_arg_general ident_to_pat\");\n             let parser_snapshot_before_ty = self.clone();\n-            self.eat_incorrect_doc_comment(\"a method argument's type\");\n+            self.eat_incorrect_doc_comment_for_arg_type();\n             let mut ty = self.parse_ty_common(true, true, allow_c_variadic);\n             if ty.is_ok() && self.token != token::Comma &&\n                self.token != token::CloseDelim(token::Paren) {\n@@ -1554,11 +1560,12 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        Ok(Arg { ty, pat, id: ast::DUMMY_NODE_ID })\n+        Ok(Arg { attrs: attrs.into(), id: ast::DUMMY_NODE_ID, pat, ty })\n     }\n \n     /// Parses an argument in a lambda header (e.g., `|arg, arg|`).\n     fn parse_fn_block_arg(&mut self) -> PResult<'a, Arg> {\n+        let attrs = self.parse_arg_attributes()?;\n         let pat = self.parse_pat(Some(\"argument name\"))?;\n         let t = if self.eat(&token::Colon) {\n             self.parse_ty()?\n@@ -1570,6 +1577,7 @@ impl<'a> Parser<'a> {\n             })\n         };\n         Ok(Arg {\n+            attrs: attrs.into(),\n             ty: t,\n             pat,\n             id: ast::DUMMY_NODE_ID\n@@ -5411,15 +5419,19 @@ impl<'a> Parser<'a> {\n                 &token::CloseDelim(token::Paren),\n                 SeqSep::trailing_allowed(token::Comma),\n                 |p| {\n-                    // If the argument is a C-variadic argument we should not\n-                    // enforce named arguments.\n-                    let enforce_named_args = if p.token == token::DotDotDot {\n-                        false\n-                    } else {\n-                        named_args\n-                    };\n-                    match p.parse_arg_general(enforce_named_args, false,\n-                                              allow_c_variadic) {\n+                    let do_not_enforce_named_arguments_for_c_variadic =\n+                        |token: &token::Token| -> bool {\n+                            if token == &token::DotDotDot {\n+                                false\n+                            } else {\n+                                named_args\n+                            }\n+                        };\n+                    match p.parse_arg_general(\n+                        false,\n+                        allow_c_variadic,\n+                        do_not_enforce_named_arguments_for_c_variadic\n+                    ) {\n                         Ok(arg) => {\n                             if let TyKind::CVarArgs = arg.ty.node {\n                                 c_variadic = true;\n@@ -5464,7 +5476,6 @@ impl<'a> Parser<'a> {\n \n     /// Parses the argument list and result type of a function declaration.\n     fn parse_fn_decl(&mut self, allow_c_variadic: bool) -> PResult<'a, P<FnDecl>> {\n-\n         let (args, c_variadic) = self.parse_fn_args(true, allow_c_variadic)?;\n         let ret_ty = self.parse_ret_ty(true)?;\n \n@@ -5476,6 +5487,8 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Returns the parsed optional self argument and whether a self shortcut was used.\n+    ///\n+    /// See `parse_self_arg_with_attrs` to collect attributes.\n     fn parse_self_arg(&mut self) -> PResult<'a, Option<Arg>> {\n         let expect_ident = |this: &mut Self| match this.token.kind {\n             // Preserve hygienic context.\n@@ -5581,7 +5594,18 @@ impl<'a> Parser<'a> {\n         };\n \n         let eself = source_map::respan(eself_lo.to(eself_hi), eself);\n-        Ok(Some(Arg::from_self(eself, eself_ident)))\n+        Ok(Some(Arg::from_self(ThinVec::default(), eself, eself_ident)))\n+    }\n+\n+    /// Returns the parsed optional self argument with attributes and whether a self\n+    /// shortcut was used.\n+    fn parse_self_arg_with_attrs(&mut self) -> PResult<'a, Option<Arg>> {\n+        let attrs = self.parse_arg_attributes()?;\n+        let arg_opt = self.parse_self_arg()?;\n+        Ok(arg_opt.map(|mut arg| {\n+            arg.attrs = attrs.into();\n+            arg\n+        }))\n     }\n \n     /// Parses the parameter list and result type of a function that may have a `self` parameter.\n@@ -5591,7 +5615,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::OpenDelim(token::Paren))?;\n \n         // Parse optional self argument.\n-        let self_arg = self.parse_self_arg()?;\n+        let self_arg = self.parse_self_arg_with_attrs()?;\n \n         // Parse the rest of the function parameter list.\n         let sep = SeqSep::trailing_allowed(token::Comma);\n@@ -5865,7 +5889,7 @@ impl<'a> Parser<'a> {\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n             let decl = self.parse_fn_decl_with_self(|p| {\n-                p.parse_arg_general(true, true, false)\n+                p.parse_arg_general(true, false, |_| true)\n             })?;\n             generics.where_clause = self.parse_where_clause()?;\n             *at_end = true;\n@@ -7441,7 +7465,7 @@ impl<'a> Parser<'a> {\n             } else if self.look_ahead(1, |t| *t == token::OpenDelim(token::Paren)) {\n                 let ident = self.parse_ident().unwrap();\n                 self.bump();  // `(`\n-                let kw_name = if let Ok(Some(_)) = self.parse_self_arg() {\n+                let kw_name = if let Ok(Some(_)) = self.parse_self_arg_with_attrs() {\n                     \"method\"\n                 } else {\n                     \"function\"\n@@ -7492,7 +7516,7 @@ impl<'a> Parser<'a> {\n                 self.eat_to_tokens(&[&token::Gt]);\n                 self.bump();  // `>`\n                 let (kw, kw_name, ambiguous) = if self.eat(&token::OpenDelim(token::Paren)) {\n-                    if let Ok(Some(_)) = self.parse_self_arg() {\n+                    if let Ok(Some(_)) = self.parse_self_arg_with_attrs() {\n                         (\"fn\", \"method\", false)\n                     } else {\n                         (\"fn\", \"function\", false)"}, {"sha": "8132024416a30ce473c958cd1e9a5292baab65c2", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -550,8 +550,9 @@ pub fn walk_fn_ret_ty<'a, V: Visitor<'a>>(visitor: &mut V, ret_ty: &'a FunctionR\n \n pub fn walk_fn_decl<'a, V: Visitor<'a>>(visitor: &mut V, function_declaration: &'a FnDecl) {\n     for argument in &function_declaration.inputs {\n+        walk_list!(visitor, visit_attribute, argument.attrs.iter());\n         visitor.visit_pat(&argument.pat);\n-        visitor.visit_ty(&argument.ty)\n+        visitor.visit_ty(&argument.ty);\n     }\n     visitor.visit_fn_ret_ty(&function_declaration.output)\n }"}, {"sha": "8b719b5477c65c5a9849932334b4b4b126e55558", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -928,7 +928,7 @@ impl<'a> MethodDef<'a> {\n         let args = {\n             let self_args = explicit_self.map(|explicit_self| {\n                 let ident = Ident::with_empty_ctxt(kw::SelfLower).with_span_pos(trait_.span);\n-                ast::Arg::from_self(explicit_self, ident)\n+                ast::Arg::from_self(ThinVec::default(), explicit_self, ident)\n             });\n             let nonself_args = arg_types.into_iter()\n                 .map(|(name, ty)| cx.arg(trait_.span, name, ty));"}, {"sha": "260bad6dc08b081499c3c0a4744c3a3216752749", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -444,6 +444,7 @@ symbols! {\n         panic_implementation,\n         panic_runtime,\n         partial_cmp,\n+        param_attrs,\n         PartialOrd,\n         passes,\n         pat,"}, {"sha": "4a4f959e21353ceab96d8cae4b7334fdb2c8757c", "filename": "src/test/ui/parser/fn-arg-doc-comment.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -1,20 +1,20 @@\n pub fn f(\n     /// Comment\n-    //~^ ERROR documentation comments cannot be applied to method arguments\n+    //~^ ERROR documentation comments cannot be applied to function parameters\n     //~| NOTE doc comments are not allowed here\n+    //~| ERROR attributes on function parameters are unstable\n+    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n     id: u8,\n     /// Other\n-    //~^ ERROR documentation comments cannot be applied to method arguments\n+    //~^ ERROR documentation comments cannot be applied to function parameters\n     //~| NOTE doc comments are not allowed here\n+    //~| ERROR attributes on function parameters are unstable\n+    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n     a: u8,\n ) {}\n \n-fn foo(#[allow(dead_code)] id: i32) {}\n-//~^ ERROR attributes cannot be applied to method arguments\n-//~| NOTE attributes are not allowed here\n-\n fn bar(id: #[allow(dead_code)] i32) {}\n-//~^ ERROR attributes cannot be applied to a method argument's type\n+//~^ ERROR attributes cannot be applied to a function parameter's type\n //~| NOTE attributes are not allowed here\n \n fn main() {\n@@ -26,10 +26,6 @@ fn main() {\n     //~| ERROR mismatched types\n     //~| NOTE expected u8, found reference\n     //~| NOTE expected\n-    foo(\"\");\n-    //~^ ERROR mismatched types\n-    //~| NOTE expected i32, found reference\n-    //~| NOTE expected\n     bar(\"\");\n     //~^ ERROR mismatched types\n     //~| NOTE expected i32, found reference"}, {"sha": "9058e88d1d7b71dff6145d74f85df4af428c1b6f", "filename": "src/test/ui/parser/fn-arg-doc-comment.stderr", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -1,26 +1,38 @@\n-error: documentation comments cannot be applied to method arguments\n+error: attributes cannot be applied to a function parameter's type\n+  --> $DIR/fn-arg-doc-comment.rs:16:12\n+   |\n+LL | fn bar(id: #[allow(dead_code)] i32) {}\n+   |            ^^^^^^^^^^^^^^^^^^^ attributes are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n   --> $DIR/fn-arg-doc-comment.rs:2:5\n    |\n LL |     /// Comment\n    |     ^^^^^^^^^^^ doc comments are not allowed here\n \n-error: documentation comments cannot be applied to method arguments\n-  --> $DIR/fn-arg-doc-comment.rs:6:5\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/fn-arg-doc-comment.rs:8:5\n    |\n LL |     /// Other\n    |     ^^^^^^^^^ doc comments are not allowed here\n \n-error: attributes cannot be applied to method arguments\n-  --> $DIR/fn-arg-doc-comment.rs:12:8\n+error[E0658]: attributes on function parameters are unstable\n+  --> $DIR/fn-arg-doc-comment.rs:2:5\n+   |\n+LL |     /// Comment\n+   |     ^^^^^^^^^^^\n    |\n-LL | fn foo(#[allow(dead_code)] id: i32) {}\n-   |        ^^^^^^^^^^^^^^^^^^^ attributes are not allowed here\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n+   = help: add #![feature(param_attrs)] to the crate attributes to enable\n \n-error: attributes cannot be applied to a method argument's type\n-  --> $DIR/fn-arg-doc-comment.rs:16:12\n+error[E0658]: attributes on function parameters are unstable\n+  --> $DIR/fn-arg-doc-comment.rs:8:5\n    |\n-LL | fn bar(id: #[allow(dead_code)] i32) {}\n-   |            ^^^^^^^^^^^^^^^^^^^ attributes are not allowed here\n+LL |     /// Other\n+   |     ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n+   = help: add #![feature(param_attrs)] to the crate attributes to enable\n \n error[E0308]: mismatched types\n   --> $DIR/fn-arg-doc-comment.rs:22:7\n@@ -43,15 +55,6 @@ LL |     f(\"\", \"\");\n error[E0308]: mismatched types\n   --> $DIR/fn-arg-doc-comment.rs:29:9\n    |\n-LL |     foo(\"\");\n-   |         ^^ expected i32, found reference\n-   |\n-   = note: expected type `i32`\n-              found type `&'static str`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:33:9\n-   |\n LL |     bar(\"\");\n    |         ^^ expected i32, found reference\n    |\n@@ -60,4 +63,5 @@ LL |     bar(\"\");\n \n error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0658.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "e900ccab4fd833a77690ed3028b3b1fb30287604", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -0,0 +1,8 @@\n+// edition:2018\n+\n+#![feature(param_attrs)]\n+\n+trait Trait2015 { fn foo(#[allow(C)] i32); }\n+//~^ ERROR expected one of `:` or `@`, found `)`\n+\n+fn main() {}"}, {"sha": "d0ed65f2880110b27038831a68443c4e928150cd", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -0,0 +1,18 @@\n+error: expected one of `:` or `@`, found `)`\n+  --> $DIR/param-attrs-2018.rs:5:41\n+   |\n+LL | trait Trait2015 { fn foo(#[allow(C)] i32); }\n+   |                                         ^ expected one of `:` or `@` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this was a parameter name, give it a type\n+   |\n+LL | trait Trait2015 { fn foo(#[allow(C)] i32: TypeName); }\n+   |                                      ^^^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | trait Trait2015 { fn foo(#[allow(C)] _: i32); }\n+   |                                      ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c521d04fda5626c191dbd2f905ef888ae8c8dbe4", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-allowed.rs", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -0,0 +1,225 @@\n+// compile-flags: --cfg something\n+// compile-pass\n+\n+#![feature(param_attrs)]\n+\n+extern \"C\" {\n+    fn ffi(\n+        #[allow(C)] a: i32,\n+        #[cfg(something)] b: i32,\n+        #[cfg_attr(something, cfg(nothing))] c: i32,\n+        #[deny(C)] d: i32,\n+        #[forbid(C)] #[warn(C)] ...\n+    );\n+}\n+\n+type FnType = fn(\n+    #[allow(C)] a: i32,\n+    #[cfg(something)] b: i32,\n+    #[cfg_attr(something, cfg(nothing))] c: i32,\n+    #[deny(C)] d: i32,\n+    #[forbid(C)] #[warn(C)] e: i32\n+);\n+\n+pub fn foo(\n+    #[allow(C)] a: i32,\n+    #[cfg(something)] b: i32,\n+    #[cfg_attr(something, cfg(nothing))] c: i32,\n+    #[deny(C)] d: i32,\n+    #[forbid(C)] #[warn(C)] e: i32\n+) {}\n+\n+// self, &self and &mut self\n+\n+struct SelfStruct {}\n+impl SelfStruct {\n+    fn foo(\n+        #[allow(C)] self,\n+        #[cfg(something)] a: i32,\n+        #[cfg_attr(something, cfg(nothing))]\n+        #[deny(C)] b: i32,\n+    ) {}\n+}\n+\n+struct RefStruct {}\n+impl RefStruct {\n+    fn foo(\n+        #[allow(C)] &self,\n+        #[cfg(something)] a: i32,\n+        #[cfg_attr(something, cfg(nothing))]\n+        #[deny(C)] b: i32,\n+    ) {}\n+}\n+trait RefTrait {\n+    fn foo(\n+        #[forbid(C)] &self,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+impl RefTrait for RefStruct {\n+    fn foo(\n+        #[forbid(C)] &self,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+\n+struct MutStruct {}\n+impl MutStruct {\n+    fn foo(\n+        #[allow(C)] &mut self,\n+        #[cfg(something)] a: i32,\n+        #[cfg_attr(something, cfg(nothing))]\n+        #[deny(C)] b: i32,\n+    ) {}\n+}\n+trait MutTrait {\n+    fn foo(\n+        #[forbid(C)] &mut self,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+impl MutTrait for MutStruct {\n+    fn foo(\n+        #[forbid(C)] &mut self,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+\n+// self: Self, self: &Self and self: &mut Self\n+\n+struct NamedSelfSelfStruct {}\n+impl NamedSelfSelfStruct {\n+    fn foo(\n+        #[allow(C)] self: Self,\n+        #[cfg(something)] a: i32,\n+        #[cfg_attr(something, cfg(nothing))]\n+        #[deny(C)] b: i32,\n+    ) {}\n+}\n+\n+struct NamedSelfRefStruct {}\n+impl NamedSelfRefStruct {\n+    fn foo(\n+        #[allow(C)] self: &Self,\n+        #[cfg(something)] a: i32,\n+        #[cfg_attr(something, cfg(nothing))]\n+        #[deny(C)] b: i32,\n+    ) {}\n+}\n+trait NamedSelfRefTrait {\n+    fn foo(\n+        #[forbid(C)] self: &Self,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+impl NamedSelfRefTrait for NamedSelfRefStruct {\n+    fn foo(\n+        #[forbid(C)] self: &Self,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+\n+struct NamedSelfMutStruct {}\n+impl NamedSelfMutStruct {\n+    fn foo(\n+        #[allow(C)] self: &mut Self,\n+        #[cfg(something)] a: i32,\n+        #[cfg_attr(something, cfg(nothing))]\n+        #[deny(C)] b: i32,\n+    ) {}\n+}\n+trait NamedSelfMutTrait {\n+    fn foo(\n+        #[forbid(C)] self: &mut Self,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+impl NamedSelfMutTrait for NamedSelfMutStruct {\n+    fn foo(\n+        #[forbid(C)] self: &mut Self,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+\n+// &'a self and &'a mut self\n+\n+struct NamedLifetimeRefStruct {}\n+impl NamedLifetimeRefStruct {\n+    fn foo<'a>(\n+        #[allow(C)] self: &'a Self,\n+        #[cfg(something)] a: i32,\n+        #[cfg_attr(something, cfg(nothing))]\n+        #[deny(C)] b: i32,\n+    ) {}\n+}\n+trait NamedLifetimeRefTrait {\n+    fn foo<'a>(\n+        #[forbid(C)] &'a self,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+impl NamedLifetimeRefTrait for NamedLifetimeRefStruct {\n+    fn foo<'a>(\n+        #[forbid(C)] &'a self,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+\n+struct NamedLifetimeMutStruct {}\n+impl NamedLifetimeMutStruct {\n+    fn foo<'a>(\n+        #[allow(C)] self: &'a mut Self,\n+        #[cfg(something)] a: i32,\n+        #[cfg_attr(something, cfg(nothing))]\n+        #[deny(C)] b: i32,\n+    ) {}\n+}\n+trait NamedLifetimeMutTrait {\n+    fn foo<'a>(\n+        #[forbid(C)] &'a mut self,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+impl NamedLifetimeMutTrait for NamedLifetimeMutStruct {\n+    fn foo<'a>(\n+        #[forbid(C)] &'a mut self,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+\n+// Box<Self>\n+\n+struct BoxSelfStruct {}\n+impl BoxSelfStruct {\n+    fn foo(\n+        #[allow(C)] self: Box<Self>,\n+        #[cfg(something)] a: i32,\n+        #[cfg_attr(something, cfg(nothing))]\n+        #[deny(C)] b: i32,\n+    ) {}\n+}\n+trait BoxSelfTrait {\n+    fn foo(\n+        #[forbid(C)] self: Box<Self>,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+impl BoxSelfTrait for BoxSelfStruct {\n+    fn foo(\n+        #[forbid(C)] self: Box<Self>,\n+        #[warn(C)] a: i32\n+    ) {}\n+}\n+\n+fn main() {\n+    let _: unsafe extern \"C\" fn(_, _, _, ...) = ffi;\n+    let _: fn(_, _, _, _) = foo;\n+    let _: FnType = |_, _, _, _| {};\n+    let c = |\n+        #[allow(C)] a: u32,\n+        #[cfg(something)] b: i32,\n+        #[cfg_attr(something, cfg(nothing))]\n+        #[deny(C)] c: i32,\n+    | {};\n+    let _ = c(1, 2);\n+}"}, {"sha": "352375729bd45dd375c6b4aefc72b22d57678d2a", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -0,0 +1,145 @@\n+#![feature(param_attrs)]\n+\n+extern \"C\" {\n+    fn ffi(\n+        /// Foo\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[test] a: i32,\n+        //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+        /// Bar\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[must_use]\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        /// Baz\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[no_mangle] b: i32,\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    );\n+}\n+\n+type FnType = fn(\n+    /// Foo\n+    //~^ ERROR documentation comments cannot be applied to function\n+    #[test] a: u32,\n+    //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+    /// Bar\n+    //~^ ERROR documentation comments cannot be applied to function\n+    #[must_use]\n+    //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    /// Baz\n+    //~^ ERROR documentation comments cannot be applied to function\n+    #[no_mangle] b: i32,\n+    //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+);\n+\n+pub fn foo(\n+    /// Foo\n+    //~^ ERROR documentation comments cannot be applied to function\n+    #[test] a: u32,\n+    //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+    /// Bar\n+    //~^ ERROR documentation comments cannot be applied to function\n+    #[must_use]\n+    //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    /// Baz\n+    //~^ ERROR documentation comments cannot be applied to function\n+    #[no_mangle] b: i32,\n+    //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+) {}\n+\n+struct SelfStruct {}\n+impl SelfStruct {\n+    fn foo(\n+        /// Foo\n+        //~^ ERROR documentation comments cannot be applied to function\n+        self,\n+        /// Bar\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[test] a: i32,\n+        //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+        /// Baz\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[must_use]\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        /// Qux\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[no_mangle] b: i32,\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    ) {}\n+}\n+\n+struct RefStruct {}\n+impl RefStruct {\n+    fn foo(\n+        /// Foo\n+        //~^ ERROR documentation comments cannot be applied to function\n+        &self,\n+        /// Bar\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[test] a: i32,\n+        //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+        /// Baz\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[must_use]\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        /// Qux\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[no_mangle] b: i32,\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    ) {}\n+}\n+trait RefTrait {\n+    fn foo(\n+        /// Foo\n+        //~^ ERROR documentation comments cannot be applied to function\n+        &self,\n+        /// Bar\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[test] a: i32,\n+        //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+        /// Baz\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[must_use]\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        /// Qux\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[no_mangle] b: i32,\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    ) {}\n+}\n+impl RefTrait for RefStruct {\n+    fn foo(\n+        /// Foo\n+        //~^ ERROR documentation comments cannot be applied to function\n+        &self,\n+        /// Bar\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[test] a: i32,\n+        //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+        /// Baz\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[must_use]\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        /// Qux\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[no_mangle] b: i32,\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    ) {}\n+}\n+\n+fn main() {\n+    let _ = |\n+        /// Foo\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[test] a: u32,\n+        //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+        /// Bar\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[must_use]\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        /// Baz\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[no_mangle] b: i32\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    | {};\n+}"}, {"sha": "e6f3efc04ce27d3dee2f6f8c7e326dc1e7a9d818", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.stderr", "status": "added", "additions": 339, "deletions": 0, "changes": 339, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -0,0 +1,339 @@\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:5:9\n+   |\n+LL |         /// Foo\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:9:9\n+   |\n+LL |         /// Bar\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:11:9\n+   |\n+LL |         #[must_use]\n+   |         ^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:13:9\n+   |\n+LL |         /// Baz\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:15:9\n+   |\n+LL |         #[no_mangle] b: i32,\n+   |         ^^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:21:5\n+   |\n+LL |     /// Foo\n+   |     ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:25:5\n+   |\n+LL |     /// Bar\n+   |     ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:27:5\n+   |\n+LL |     #[must_use]\n+   |     ^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:29:5\n+   |\n+LL |     /// Baz\n+   |     ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:31:5\n+   |\n+LL |     #[no_mangle] b: i32,\n+   |     ^^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:36:5\n+   |\n+LL |     /// Foo\n+   |     ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:40:5\n+   |\n+LL |     /// Bar\n+   |     ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:42:5\n+   |\n+LL |     #[must_use]\n+   |     ^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:44:5\n+   |\n+LL |     /// Baz\n+   |     ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:46:5\n+   |\n+LL |     #[no_mangle] b: i32,\n+   |     ^^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:53:9\n+   |\n+LL |         /// Foo\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:56:9\n+   |\n+LL |         /// Bar\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:60:9\n+   |\n+LL |         /// Baz\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:62:9\n+   |\n+LL |         #[must_use]\n+   |         ^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:64:9\n+   |\n+LL |         /// Qux\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:66:9\n+   |\n+LL |         #[no_mangle] b: i32,\n+   |         ^^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:74:9\n+   |\n+LL |         /// Foo\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:77:9\n+   |\n+LL |         /// Bar\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:81:9\n+   |\n+LL |         /// Baz\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:83:9\n+   |\n+LL |         #[must_use]\n+   |         ^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:85:9\n+   |\n+LL |         /// Qux\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:87:9\n+   |\n+LL |         #[no_mangle] b: i32,\n+   |         ^^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:93:9\n+   |\n+LL |         /// Foo\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:96:9\n+   |\n+LL |         /// Bar\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:100:9\n+   |\n+LL |         /// Baz\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:102:9\n+   |\n+LL |         #[must_use]\n+   |         ^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:104:9\n+   |\n+LL |         /// Qux\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:106:9\n+   |\n+LL |         #[no_mangle] b: i32,\n+   |         ^^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:112:9\n+   |\n+LL |         /// Foo\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:115:9\n+   |\n+LL |         /// Bar\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:119:9\n+   |\n+LL |         /// Baz\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:121:9\n+   |\n+LL |         #[must_use]\n+   |         ^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:123:9\n+   |\n+LL |         /// Qux\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:125:9\n+   |\n+LL |         #[no_mangle] b: i32,\n+   |         ^^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:132:9\n+   |\n+LL |         /// Foo\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:136:9\n+   |\n+LL |         /// Bar\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:138:9\n+   |\n+LL |         #[must_use]\n+   |         ^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:140:9\n+   |\n+LL |         /// Baz\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:142:9\n+   |\n+LL |         #[no_mangle] b: i32\n+   |         ^^^^^^^^^^^^\n+\n+error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/param-attrs-builtin-attrs.rs:7:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/param-attrs-builtin-attrs.rs:23:5\n+   |\n+LL |     #[test] a: u32,\n+   |     ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/param-attrs-builtin-attrs.rs:38:5\n+   |\n+LL |     #[test] a: u32,\n+   |     ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/param-attrs-builtin-attrs.rs:58:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/param-attrs-builtin-attrs.rs:79:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/param-attrs-builtin-attrs.rs:98:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/param-attrs-builtin-attrs.rs:117:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/param-attrs-builtin-attrs.rs:134:9\n+   |\n+LL |         #[test] a: u32,\n+   |         ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 52 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "977b5d9ce349580a35167269833b1c787b65bac9", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -0,0 +1,79 @@\n+// compile-flags: --cfg something\n+\n+#![feature(param_attrs)]\n+#![deny(unused_variables)]\n+\n+extern \"C\" {\n+    fn ffi(\n+        #[cfg(nothing)] a: i32,\n+        #[cfg(something)] b: i32,\n+        #[cfg_attr(something, cfg(nothing))] c: i32,\n+        #[cfg_attr(nothing, cfg(nothing))] ...\n+    );\n+}\n+\n+type FnType = fn(\n+    #[cfg(nothing)] a: i32,\n+    #[cfg(something)] b: i32,\n+    #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+    #[cfg_attr(something, cfg(nothing))] d: i32,\n+);\n+\n+fn foo(\n+    #[cfg(nothing)] a: i32,\n+    #[cfg(something)] b: i32,\n+    //~^ ERROR unused variable: `b` [unused_variables]\n+    #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+    //~^ ERROR unused variable: `c` [unused_variables]\n+    #[cfg_attr(something, cfg(nothing))] d: i32,\n+) {}\n+\n+struct RefStruct {}\n+impl RefStruct {\n+    fn bar(\n+        &self,\n+        #[cfg(nothing)] a: i32,\n+        #[cfg(something)] b: i32,\n+        //~^ ERROR unused variable: `b` [unused_variables]\n+        #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+        //~^ ERROR unused variable: `c` [unused_variables]\n+        #[cfg_attr(something, cfg(nothing))] d: i32,\n+    ) {}\n+}\n+trait RefTrait {\n+    fn bar(\n+        &self,\n+        #[cfg(nothing)] a: i32,\n+        #[cfg(something)] b: i32,\n+        //~^ ERROR unused variable: `b` [unused_variables]\n+        #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+        //~^ ERROR unused variable: `c` [unused_variables]\n+        #[cfg_attr(something, cfg(nothing))] d: i32,\n+    ) {}\n+}\n+impl RefTrait for RefStruct {\n+    fn bar(\n+        &self,\n+        #[cfg(nothing)] a: i32,\n+        #[cfg(something)] b: i32,\n+        //~^ ERROR unused variable: `b` [unused_variables]\n+        #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+        //~^ ERROR unused variable: `c` [unused_variables]\n+        #[cfg_attr(something, cfg(nothing))] d: i32,\n+    ) {}\n+}\n+\n+fn main() {\n+    let _: unsafe extern \"C\" fn(_, ...) = ffi;\n+    let _: fn(_, _) = foo;\n+    let _: FnType = |_, _| {};\n+    let c = |\n+        #[cfg(nothing)] a: i32,\n+        #[cfg(something)] b: i32,\n+        //~^ ERROR unused variable: `b` [unused_variables]\n+        #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+        //~^ ERROR unused variable: `c` [unused_variables]\n+        #[cfg_attr(something, cfg(nothing))] d: i32,\n+    | {};\n+    let _ = c(1, 2);\n+}"}, {"sha": "c97190324e5a27081fae882466a2150cb95f0b4c", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -0,0 +1,68 @@\n+error: unused variable: `b`\n+  --> $DIR/param-attrs-cfg.rs:24:23\n+   |\n+LL |     #[cfg(something)] b: i32,\n+   |                       ^ help: consider prefixing with an underscore: `_b`\n+   |\n+note: lint level defined here\n+  --> $DIR/param-attrs-cfg.rs:4:9\n+   |\n+LL | #![deny(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: unused variable: `c`\n+  --> $DIR/param-attrs-cfg.rs:26:40\n+   |\n+LL |     #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+   |                                        ^ help: consider prefixing with an underscore: `_c`\n+\n+error: unused variable: `b`\n+  --> $DIR/param-attrs-cfg.rs:72:27\n+   |\n+LL |         #[cfg(something)] b: i32,\n+   |                           ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `c`\n+  --> $DIR/param-attrs-cfg.rs:74:44\n+   |\n+LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+   |                                            ^ help: consider prefixing with an underscore: `_c`\n+\n+error: unused variable: `b`\n+  --> $DIR/param-attrs-cfg.rs:47:27\n+   |\n+LL |         #[cfg(something)] b: i32,\n+   |                           ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `c`\n+  --> $DIR/param-attrs-cfg.rs:49:44\n+   |\n+LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+   |                                            ^ help: consider prefixing with an underscore: `_c`\n+\n+error: unused variable: `b`\n+  --> $DIR/param-attrs-cfg.rs:36:27\n+   |\n+LL |         #[cfg(something)] b: i32,\n+   |                           ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `c`\n+  --> $DIR/param-attrs-cfg.rs:38:44\n+   |\n+LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+   |                                            ^ help: consider prefixing with an underscore: `_c`\n+\n+error: unused variable: `b`\n+  --> $DIR/param-attrs-cfg.rs:58:27\n+   |\n+LL |         #[cfg(something)] b: i32,\n+   |                           ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `c`\n+  --> $DIR/param-attrs-cfg.rs:60:44\n+   |\n+LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+   |                                            ^ help: consider prefixing with an underscore: `_c`\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "c5a6514efb0f09528ef42d894022620412640d48", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-feature-gate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.rs?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -0,0 +1,14 @@\n+// gate-test-param_attrs\n+\n+fn foo(\n+    /// Foo\n+    //~^ ERROR documentation comments cannot be applied to function parameters\n+    //~| NOTE doc comments are not allowed here\n+    //~| ERROR attributes on function parameters are unstable\n+    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n+    #[allow(C)] a: u8\n+    //~^ ERROR attributes on function parameters are unstable\n+    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n+) {}\n+\n+fn main() {}"}, {"sha": "82f21e7fdbcb4ce31ddedcc10f27356ffd91be9b", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-feature-gate.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eaaf440d5173f090d6e937f4b4cffec6c038984/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.stderr?ref=1eaaf440d5173f090d6e937f4b4cffec6c038984", "patch": "@@ -0,0 +1,27 @@\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-feature-gate.rs:4:5\n+   |\n+LL |     /// Foo\n+   |     ^^^^^^^ doc comments are not allowed here\n+\n+error[E0658]: attributes on function parameters are unstable\n+  --> $DIR/param-attrs-feature-gate.rs:4:5\n+   |\n+LL |     /// Foo\n+   |     ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n+   = help: add #![feature(param_attrs)] to the crate attributes to enable\n+\n+error[E0658]: attributes on function parameters are unstable\n+  --> $DIR/param-attrs-feature-gate.rs:9:5\n+   |\n+LL |     #[allow(C)] a: u8\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n+   = help: add #![feature(param_attrs)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}