{"sha": "0dfd9c30f2c61458343e0816c66f448019e826d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZmQ5YzMwZjJjNjE0NTgzNDNlMDgxNmM2NmY0NDgwMTllODI2ZDE=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-06-24T18:26:04Z"}, "committer": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-06-27T18:39:38Z"}, "message": "syntax: allow negative integer literal expression to be interpolated as pattern", "tree": {"sha": "c372f56ca32275416f35ef2a76561c9086752334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c372f56ca32275416f35ef2a76561c9086752334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dfd9c30f2c61458343e0816c66f448019e826d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dfd9c30f2c61458343e0816c66f448019e826d1", "html_url": "https://github.com/rust-lang/rust/commit/0dfd9c30f2c61458343e0816c66f448019e826d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dfd9c30f2c61458343e0816c66f448019e826d1/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "229d0d3266002d343cdd2f4a3bf7f2fe9da15f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/229d0d3266002d343cdd2f4a3bf7f2fe9da15f38", "html_url": "https://github.com/rust-lang/rust/commit/229d0d3266002d343cdd2f4a3bf7f2fe9da15f38"}], "stats": {"total": 111, "additions": 103, "deletions": 8}, "files": [{"sha": "57843047f51a1984c6429bb00fad61c7aec2a539", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0dfd9c30f2c61458343e0816c66f448019e826d1/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfd9c30f2c61458343e0816c66f448019e826d1/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0dfd9c30f2c61458343e0816c66f448019e826d1", "patch": "@@ -684,13 +684,9 @@ fn fl_lit_check_expr(cx: &EarlyContext, expr: &ast::Expr) {\n         // These may occur in patterns\n         // and can maybe contain float literals\n         ExprKind::Unary(_, ref f) => fl_lit_check_expr(cx, f),\n-        // These may occur in patterns\n-        // and can't contain float literals\n-        ExprKind::Path(..) => (),\n-        // If something unhandled is encountered, we need to expand the\n-        // search or ignore more ExprKinds.\n-        _ => span_bug!(expr.span, \"Unhandled expression {:?} in float lit pattern lint\",\n-                       expr.node),\n+        // Other kinds of exprs can't occur in patterns so we don't have to check them\n+        // (ast_validation will emit an error if they occur)\n+        _ => (),\n     }\n }\n "}, {"sha": "6ad03186dc778136cc8ca6402207cd463cb325da", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0dfd9c30f2c61458343e0816c66f448019e826d1/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfd9c30f2c61458343e0816c66f448019e826d1/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=0dfd9c30f2c61458343e0816c66f448019e826d1", "patch": "@@ -93,6 +93,17 @@ impl<'a> AstValidator<'a> {\n             }\n         }\n     }\n+\n+    /// matches '-' lit | lit (cf. parser::Parser::parse_pat_literal_maybe_minus)\n+    fn check_expr_within_pat(&self, expr: &Expr) {\n+        match expr.node {\n+            ExprKind::Lit(..) | ExprKind::Path(..) => {}\n+            ExprKind::Unary(UnOp::Neg, ref inner)\n+                if match inner.node { ExprKind::Lit(_) => true, _ => false } => {}\n+            _ => self.err_handler().span_err(expr.span, \"arbitrary expressions aren't allowed \\\n+                                                         in patterns\")\n+        }\n+    }\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n@@ -308,6 +319,21 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n         visit::walk_generics(self, g)\n     }\n+\n+    fn visit_pat(&mut self, pat: &'a Pat) {\n+        match pat.node {\n+            PatKind::Lit(ref expr) => {\n+                self.check_expr_within_pat(expr);\n+            }\n+            PatKind::Range(ref start, ref end, _) => {\n+                self.check_expr_within_pat(start);\n+                self.check_expr_within_pat(end);\n+            }\n+            _ => {}\n+        }\n+\n+        visit::walk_pat(self, pat)\n+    }\n }\n \n pub fn check_crate(session: &Session, krate: &Crate) {"}, {"sha": "5b0031b2f179fb0ffa62cded3adc83698fd72921", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dfd9c30f2c61458343e0816c66f448019e826d1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfd9c30f2c61458343e0816c66f448019e826d1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0dfd9c30f2c61458343e0816c66f448019e826d1", "patch": "@@ -1659,8 +1659,10 @@ impl<'a> Parser<'a> {\n         Ok(codemap::Spanned { node: lit, span: lo.to(self.prev_span) })\n     }\n \n-    /// matches '-' lit | lit\n+    /// matches '-' lit | lit (cf. ast_validation::AstValidator::check_expr_within_pat)\n     pub fn parse_pat_literal_maybe_minus(&mut self) -> PResult<'a, P<Expr>> {\n+        maybe_whole_expr!(self);\n+\n         let minus_lo = self.span;\n         let minus_present = self.eat(&token::BinOp(token::Minus));\n         let lo = self.span;"}, {"sha": "afb2cbb7db397395619453d0c9c2c98a23899f1d", "filename": "src/test/compile-fail/patkind-litrange-no-expr.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0dfd9c30f2c61458343e0816c66f448019e826d1/src%2Ftest%2Fcompile-fail%2Fpatkind-litrange-no-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfd9c30f2c61458343e0816c66f448019e826d1/src%2Ftest%2Fcompile-fail%2Fpatkind-litrange-no-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpatkind-litrange-no-expr.rs?ref=0dfd9c30f2c61458343e0816c66f448019e826d1", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! enum_number {\n+    ($name:ident { $($variant:ident = $value:expr, )* }) => {\n+        enum $name {\n+            $($variant = $value,)*\n+        }\n+\n+        fn foo(value: i32) -> Option<$name> {\n+            match value {\n+                $( $value => Some($name::$variant), )* // PatKind::Lit\n+                $( $value ... 42 => Some($name::$variant), )* // PatKind::Range\n+                _ => None\n+            }\n+        }\n+    }\n+}\n+\n+enum_number!(Change {\n+    Pos = 1,\n+    Neg = -1,\n+    Arith = 1 + 1, //~ ERROR arbitrary expressions aren't allowed in patterns\n+                   //~^ ERROR arbitrary expressions aren't allowed in patterns\n+                   //~^^ ERROR only char and numeric types are allowed in range patterns\n+});\n+\n+fn main() {}\n+"}, {"sha": "43ac697edced90f5df4f6a6ec185d582bace6f4c", "filename": "src/test/run-pass/macro-pat-neg-lit.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0dfd9c30f2c61458343e0816c66f448019e826d1/src%2Ftest%2Frun-pass%2Fmacro-pat-neg-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfd9c30f2c61458343e0816c66f448019e826d1/src%2Ftest%2Frun-pass%2Fmacro-pat-neg-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-pat-neg-lit.rs?ref=0dfd9c30f2c61458343e0816c66f448019e826d1", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! enum_number {\n+    ($name:ident { $($variant:ident = $value:expr, )* }) => {\n+        enum $name {\n+            $($variant = $value,)*\n+        }\n+\n+        fn foo(value: i32) -> Option<$name> {\n+            match value {\n+                $( $value => Some($name::$variant), )*\n+                _ => None\n+            }\n+        }\n+    }\n+}\n+\n+enum_number!(Change {\n+    Down = -1,\n+    None = 0,\n+    Up = 1,\n+});\n+\n+fn main() {\n+    if let Some(Change::Down) = foo(-1) {} else { panic!() }\n+}\n+"}]}