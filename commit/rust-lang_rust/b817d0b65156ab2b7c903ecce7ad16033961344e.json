{"sha": "b817d0b65156ab2b7c903ecce7ad16033961344e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MTdkMGI2NTE1NmFiMmI3YzkwM2VjY2U3YWQxNjAzMzk2MTM0NGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-02T22:22:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-02T22:22:12Z"}, "message": "Auto merge of #56110 - varkor:inhabitedness-union-enum, r=cramertj\n\nConsider references and unions potentially inhabited during privacy-respecting inhabitedness checks\n\nIt isn't settled exactly how references to uninhabited types and unions of uninhabited types should act, but we should be more conservative here, as it's likely it will be permitted to soundly have values of such types.\n\nThis will also be more important in light of the changes at https://github.com/rust-lang/rust/pull/54125.\n\ncc @RalfJung", "tree": {"sha": "d25fd24f39435d8d6fc1eb246b3698436705dc1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d25fd24f39435d8d6fc1eb246b3698436705dc1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b817d0b65156ab2b7c903ecce7ad16033961344e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b817d0b65156ab2b7c903ecce7ad16033961344e", "html_url": "https://github.com/rust-lang/rust/commit/b817d0b65156ab2b7c903ecce7ad16033961344e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b817d0b65156ab2b7c903ecce7ad16033961344e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f26849506c141a6760532ca5bdfd8345247fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f26849506c141a6760532ca5bdfd8345247fdb", "html_url": "https://github.com/rust-lang/rust/commit/21f26849506c141a6760532ca5bdfd8345247fdb"}, {"sha": "1cdf5df4517eabc4e4db86fc4b67a4fa984d3800", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdf5df4517eabc4e4db86fc4b67a4fa984d3800", "html_url": "https://github.com/rust-lang/rust/commit/1cdf5df4517eabc4e4db86fc4b67a4fa984d3800"}], "stats": {"total": 166, "additions": 105, "deletions": 61}, "files": [{"sha": "721d5e14ccc6378c63520d15d9ca29b3cad346f5", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=b817d0b65156ab2b7c903ecce7ad16033961344e", "patch": "@@ -167,23 +167,16 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n         substs: &'tcx Substs<'tcx>,\n         adt_kind: AdtKind) -> DefIdForest\n     {\n-        match adt_kind {\n-            AdtKind::Union => {\n-                DefIdForest::intersection(tcx, self.fields.iter().map(|f| {\n-                    f.uninhabited_from(visited, tcx, substs, false)\n-                }))\n-            },\n-            AdtKind::Struct => {\n-                DefIdForest::union(tcx, self.fields.iter().map(|f| {\n-                    f.uninhabited_from(visited, tcx, substs, false)\n-                }))\n-            },\n-            AdtKind::Enum => {\n-                DefIdForest::union(tcx, self.fields.iter().map(|f| {\n-                    f.uninhabited_from(visited, tcx, substs, true)\n-                }))\n-            },\n-        }\n+        let is_enum = match adt_kind {\n+            // For now, `union`s are never considered uninhabited.\n+            // The precise semantics of inhabitedness with respect to unions is currently undecided.\n+            AdtKind::Union => return DefIdForest::empty(),\n+            AdtKind::Enum => true,\n+            AdtKind::Struct => false,\n+        };\n+        DefIdForest::union(tcx, self.fields.iter().map(|f| {\n+            f.uninhabited_from(visited, tcx, substs, is_enum)\n+        }))\n     }\n }\n \n@@ -194,8 +187,8 @@ impl<'a, 'gcx, 'tcx> FieldDef {\n         visited: &mut FxHashMap<DefId, FxHashSet<&'tcx Substs<'tcx>>>,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         substs: &'tcx Substs<'tcx>,\n-        is_enum: bool) -> DefIdForest\n-    {\n+        is_enum: bool,\n+    ) -> DefIdForest {\n         let mut data_uninhabitedness = move || {\n             self.ty(tcx, substs).uninhabited_from(visited, tcx)\n         };\n@@ -253,14 +246,16 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                 let substs_set = visited.get_mut(&def.did).unwrap();\n                 substs_set.remove(substs);\n                 ret\n-            },\n+            }\n \n             Never => DefIdForest::full(tcx),\n+\n             Tuple(ref tys) => {\n                 DefIdForest::union(tcx, tys.iter().map(|ty| {\n                     ty.uninhabited_from(visited, tcx)\n                 }))\n-            },\n+            }\n+\n             Array(ty, len) => {\n                 match len.assert_usize(tcx) {\n                     // If the array is definitely non-empty, it's uninhabited if\n@@ -269,9 +264,13 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                     _ => DefIdForest::empty()\n                 }\n             }\n-            Ref(_, ty, _) => {\n-                ty.uninhabited_from(visited, tcx)\n-            }\n+\n+            // References to uninitialised memory is valid for any type, including\n+            // uninhabited types, in unsafe code, so we treat all references as\n+            // inhabited.\n+            // The precise semantics of inhabitedness with respect to references is currently\n+            // undecided.\n+            Ref(..) => DefIdForest::empty(),\n \n             _ => DefIdForest::empty(),\n         }"}, {"sha": "7fb7eec12560145768c1e4e5efc0035b9c908520", "filename": "src/test/run-pass/binding/empty-types-in-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Ftest%2Frun-pass%2Fbinding%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Ftest%2Frun-pass%2Fbinding%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fempty-types-in-patterns.rs?ref=b817d0b65156ab2b7c903ecce7ad16033961344e", "patch": "@@ -60,6 +60,7 @@ fn main() {\n     let x: Result<u32, &!> = Ok(123);\n     match x {\n         Ok(y) => y,\n+        Err(_) => unimplemented!(),\n     };\n \n     bar(&[]);"}, {"sha": "11eae2af9c95f74711ca9c4e0e5e9c0a316129ff", "filename": "src/test/ui/always-inhabited-union-ref.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Ftest%2Fui%2Falways-inhabited-union-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Ftest%2Fui%2Falways-inhabited-union-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falways-inhabited-union-ref.rs?ref=b817d0b65156ab2b7c903ecce7ad16033961344e", "patch": "@@ -0,0 +1,32 @@\n+// The precise semantics of inhabitedness with respect to unions and references is currently\n+// undecided. This test file currently checks a conservative choice.\n+\n+#![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n+\n+#![allow(dead_code)]\n+#![allow(unreachable_code)]\n+\n+pub union Foo {\n+    foo: !,\n+}\n+\n+fn uninhab_ref() -> &'static ! {\n+    unimplemented!()\n+}\n+\n+fn uninhab_union() -> Foo {\n+    unimplemented!()\n+}\n+\n+fn match_on_uninhab() {\n+    match uninhab_ref() {\n+        //~^ ERROR non-exhaustive patterns: type `&'static !` is non-empty\n+    }\n+\n+    match uninhab_union() {\n+        //~^ ERROR non-exhaustive patterns: type `Foo` is non-empty\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "212f5d7c525f5907786826b461ce533bcf16d766", "filename": "src/test/ui/always-inhabited-union-ref.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Ftest%2Fui%2Falways-inhabited-union-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Ftest%2Fui%2Falways-inhabited-union-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falways-inhabited-union-ref.stderr?ref=b817d0b65156ab2b7c903ecce7ad16033961344e", "patch": "@@ -0,0 +1,27 @@\n+error[E0004]: non-exhaustive patterns: type `&'static !` is non-empty\n+  --> $DIR/always-inhabited-union-ref.rs:23:11\n+   |\n+LL |     match uninhab_ref() {\n+   |           ^^^^^^^^^^^^^\n+   |\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+  --> $DIR/always-inhabited-union-ref.rs:23:11\n+   |\n+LL |     match uninhab_ref() {\n+   |           ^^^^^^^^^^^^^\n+\n+error[E0004]: non-exhaustive patterns: type `Foo` is non-empty\n+  --> $DIR/always-inhabited-union-ref.rs:27:11\n+   |\n+LL |     match uninhab_union() {\n+   |           ^^^^^^^^^^^^^^^\n+   |\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+  --> $DIR/always-inhabited-union-ref.rs:27:11\n+   |\n+LL |     match uninhab_union() {\n+   |           ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "d11aacec1963169919de344b7bd762004d5d3058", "filename": "src/test/ui/inhabitedness-infinite-loop.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/21f26849506c141a6760532ca5bdfd8345247fdb/src%2Ftest%2Fui%2Finhabitedness-infinite-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f26849506c141a6760532ca5bdfd8345247fdb/src%2Ftest%2Fui%2Finhabitedness-infinite-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finhabitedness-infinite-loop.rs?ref=21f26849506c141a6760532ca5bdfd8345247fdb", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:reached recursion limit\n-\n-#![feature(never_type)]\n-#![feature(exhaustive_patterns)]\n-\n-struct Foo<'a, T: 'a> {\n-    ph: std::marker::PhantomData<T>,\n-    foo: &'a Foo<'a, (T, T)>,\n-}\n-\n-fn wub(f: Foo<!>) {\n-    match f {}\n-}\n-\n-fn main() {}\n-"}, {"sha": "24237f3a1b64bea51065aa663f92e137d4b7471f", "filename": "src/test/ui/inhabitedness-infinite-loop.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f26849506c141a6760532ca5bdfd8345247fdb/src%2Ftest%2Fui%2Finhabitedness-infinite-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21f26849506c141a6760532ca5bdfd8345247fdb/src%2Ftest%2Fui%2Finhabitedness-infinite-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finhabitedness-infinite-loop.stderr?ref=21f26849506c141a6760532ca5bdfd8345247fdb"}, {"sha": "ecc5edbbbf4bdbfe4ef05d09641379dd9351c8f1", "filename": "src/test/ui/issues/issue-44402.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Ftest%2Fui%2Fissues%2Fissue-44402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Ftest%2Fui%2Fissues%2Fissue-44402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44402.rs?ref=b817d0b65156ab2b7c903ecce7ad16033961344e", "patch": "@@ -33,7 +33,10 @@ fn test_a() {\n \n fn test_b() {\n     let x: Option<Bar> = None;\n-    match x { None => () }\n+    match x {\n+        Some(_) => (),\n+        None => ()\n+    }\n }\n \n fn main() { }"}, {"sha": "eae630fa7dbe6db09e6f6c8d408d721c3f28583b", "filename": "src/test/ui/unreachable/unreachable-loop-patterns.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Ftest%2Fui%2Funreachable%2Funreachable-loop-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Ftest%2Fui%2Funreachable%2Funreachable-loop-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-loop-patterns.rs?ref=b817d0b65156ab2b7c903ecce7ad16033961344e", "patch": "@@ -8,14 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-fail\n+\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n+\n+#![allow(unreachable_code)]\n #![deny(unreachable_patterns)]\n \n-fn main() {\n-    let x: &[!] = &[];\n+enum Void {}\n+\n+impl Iterator for Void {\n+    type Item = Void;\n \n-    for _ in x {}\n+    fn next(&mut self) -> Option<Void> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    for _ in unimplemented!() as Void {}\n     //~^ ERROR unreachable pattern\n }\n "}, {"sha": "6cf875783930ad949f3c06c43dfb6c85d90d81a9", "filename": "src/test/ui/unreachable/unreachable-loop-patterns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Ftest%2Fui%2Funreachable%2Funreachable-loop-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b817d0b65156ab2b7c903ecce7ad16033961344e/src%2Ftest%2Fui%2Funreachable%2Funreachable-loop-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-loop-patterns.stderr?ref=b817d0b65156ab2b7c903ecce7ad16033961344e", "patch": "@@ -1,11 +1,11 @@\n error: unreachable pattern\n-  --> $DIR/unreachable-loop-patterns.rs:18:9\n+  --> $DIR/unreachable-loop-patterns.rs:30:9\n    |\n-LL |     for _ in x {}\n+LL |     for _ in unimplemented!() as Void {}\n    |         ^\n    |\n note: lint level defined here\n-  --> $DIR/unreachable-loop-patterns.rs:13:9\n+  --> $DIR/unreachable-loop-patterns.rs:17:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^"}]}