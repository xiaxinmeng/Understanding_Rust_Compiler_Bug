{"sha": "bd113623a02dc253549464667af8931e2ff378bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMTEzNjIzYTAyZGMyNTM1NDk0NjQ2NjdhZjg5MzFlMmZmMzc4YmM=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-16T23:47:14Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-17T00:07:11Z"}, "message": "vscode: minor refactorings", "tree": {"sha": "a3fabd75ef0e1b5b60381d62f761c94daf2d1299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3fabd75ef0e1b5b60381d62f761c94daf2d1299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd113623a02dc253549464667af8931e2ff378bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd113623a02dc253549464667af8931e2ff378bc", "html_url": "https://github.com/rust-lang/rust/commit/bd113623a02dc253549464667af8931e2ff378bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd113623a02dc253549464667af8931e2ff378bc/comments", "author": null, "committer": null, "parents": [{"sha": "31ae64644864257b2375167df56c0b2e3839a9fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/31ae64644864257b2375167df56c0b2e3839a9fd", "html_url": "https://github.com/rust-lang/rust/commit/31ae64644864257b2375167df56c0b2e3839a9fd"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "53e2a414b05ebb9f5911c7e666fa2c4a999973b3", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd113623a02dc253549464667af8931e2ff378bc/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bd113623a02dc253549464667af8931e2ff378bc/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=bd113623a02dc253549464667af8931e2ff378bc", "patch": "@@ -44,7 +44,6 @@ export class Config {\n         this.refreshConfig();\n     }\n \n-\n     private refreshConfig() {\n         this.cfg = vscode.workspace.getConfiguration(Config.rootSection);\n         console.log(\"Using configuration:\", this.cfg);"}, {"sha": "ff6245f78990be319b8db9c78242144acacc3420", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd113623a02dc253549464667af8931e2ff378bc/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bd113623a02dc253549464667af8931e2ff378bc/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=bd113623a02dc253549464667af8931e2ff378bc", "patch": "@@ -91,15 +91,11 @@ export async function sendRequestWithRetry<R>(\n     for (const delay of [2, 4, 6, 8, 10, null]) {\n         try {\n             return await (token ? client.sendRequest(method, param, token) : client.sendRequest(method, param));\n-        } catch (e) {\n-            if (\n-                e.code === lc.ErrorCodes.ContentModified &&\n-                delay !== null\n-            ) {\n-                await sleep(10 * (1 << delay));\n-                continue;\n+        } catch (err) {\n+            if (delay === null || err.code !== lc.ErrorCodes.ContentModified) {\n+                throw err;\n             }\n-            throw e;\n+            await sleep(10 * (1 << delay));\n         }\n     }\n     throw 'unreachable';"}, {"sha": "3896878cda528e3f7e808c570a50e20278508402", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bd113623a02dc253549464667af8931e2ff378bc/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bd113623a02dc253549464667af8931e2ff378bc/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=bd113623a02dc253549464667af8931e2ff378bc", "patch": "@@ -38,7 +38,7 @@ interface InlayHintsParams {\n \n interface InlayHint {\n     range: vscode.Range;\n-    kind: string;\n+    kind: \"TypeHint\" | \"ParameterHint\";\n     label: string;\n }\n \n@@ -55,7 +55,7 @@ const parameterHintDecorationType = vscode.window.createTextEditorDecorationType\n });\n \n class HintsUpdater {\n-    private pending: Map<string, vscode.CancellationTokenSource> = new Map();\n+    private pending = new Map<string, vscode.CancellationTokenSource>();\n     private ctx: Ctx;\n     private enabled: boolean;\n \n@@ -64,30 +64,36 @@ class HintsUpdater {\n         this.enabled = ctx.config.displayInlayHints;\n     }\n \n-    async setEnabled(enabled: boolean) {\n+    async setEnabled(enabled: boolean): Promise<void> {\n         if (this.enabled == enabled) return;\n         this.enabled = enabled;\n \n         if (this.enabled) {\n-            await this.refresh();\n-        } else {\n-            this.allEditors.forEach(it => {\n-                this.setTypeDecorations(it, []);\n-                this.setParameterDecorations(it, []);\n-            });\n+            return await this.refresh();\n         }\n+        this.allEditors.forEach(it => {\n+            this.setTypeDecorations(it, []);\n+            this.setParameterDecorations(it, []);\n+        });\n     }\n \n     async refresh() {\n         if (!this.enabled) return;\n-        const promises = this.allEditors.map(it => this.refreshEditor(it));\n-        await Promise.all(promises);\n+        await Promise.all(this.allEditors.map(it => this.refreshEditor(it)));\n+    }\n+\n+    private get allEditors(): vscode.TextEditor[] {\n+        return vscode.window.visibleTextEditors.filter(\n+            editor => editor.document.languageId === 'rust',\n+        );\n     }\n \n     private async refreshEditor(editor: vscode.TextEditor): Promise<void> {\n         const newHints = await this.queryHints(editor.document.uri.toString());\n         if (newHints == null) return;\n-        const newTypeDecorations = newHints.filter(hint => hint.kind === 'TypeHint')\n+\n+        const newTypeDecorations = newHints\n+            .filter(hint => hint.kind === 'TypeHint')\n             .map(hint => ({\n                 range: hint.range,\n                 renderOptions: {\n@@ -98,7 +104,8 @@ class HintsUpdater {\n             }));\n         this.setTypeDecorations(editor, newTypeDecorations);\n \n-        const newParameterDecorations = newHints.filter(hint => hint.kind === 'ParameterHint')\n+        const newParameterDecorations = newHints\n+            .filter(hint => hint.kind === 'ParameterHint')\n             .map(hint => ({\n                 range: hint.range,\n                 renderOptions: {\n@@ -110,12 +117,6 @@ class HintsUpdater {\n         this.setParameterDecorations(editor, newParameterDecorations);\n     }\n \n-    private get allEditors(): vscode.TextEditor[] {\n-        return vscode.window.visibleTextEditors.filter(\n-            editor => editor.document.languageId === 'rust',\n-        );\n-    }\n-\n     private setTypeDecorations(\n         editor: vscode.TextEditor,\n         decorations: vscode.DecorationOptions[],\n@@ -139,12 +140,14 @@ class HintsUpdater {\n     private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n         const client = this.ctx.client;\n         if (!client) return null;\n+\n         const request: InlayHintsParams = {\n             textDocument: { uri: documentUri },\n         };\n         const tokenSource = new vscode.CancellationTokenSource();\n-        const prev = this.pending.get(documentUri);\n-        if (prev) prev.cancel();\n+        const prevHintsRequest = this.pending.get(documentUri);\n+        prevHintsRequest?.cancel();\n+\n         this.pending.set(documentUri, tokenSource);\n         try {\n             return await sendRequestWithRetry<InlayHint[] | null>("}]}