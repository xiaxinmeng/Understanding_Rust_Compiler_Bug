{"sha": "82f963e347fa16ac3824e81c53f5d15155fe319b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjk2M2UzNDdmYTE2YWMzODI0ZTgxYzUzZjVkMTUxNTVmZTMxOWI=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-11T22:56:08Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-11T23:06:31Z"}, "message": "libcore: Change `each_val` to follow new for-loop protocol", "tree": {"sha": "ac37842eaa85aafa4b1dc0ce77a77201206486aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac37842eaa85aafa4b1dc0ce77a77201206486aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f963e347fa16ac3824e81c53f5d15155fe319b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f963e347fa16ac3824e81c53f5d15155fe319b", "html_url": "https://github.com/rust-lang/rust/commit/82f963e347fa16ac3824e81c53f5d15155fe319b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f963e347fa16ac3824e81c53f5d15155fe319b/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ca64a423bea5dd9f4149fe343f7cec87e25316c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca64a423bea5dd9f4149fe343f7cec87e25316c", "html_url": "https://github.com/rust-lang/rust/commit/8ca64a423bea5dd9f4149fe343f7cec87e25316c"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "a596b07dc78d2b434cdcb9c317cacbae90d0d1c4", "filename": "src/libcore/old_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f963e347fa16ac3824e81c53f5d15155fe319b/src%2Flibcore%2Fold_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f963e347fa16ac3824e81c53f5d15155fe319b/src%2Flibcore%2Fold_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fold_iter.rs?ref=82f963e347fa16ac3824e81c53f5d15155fe319b", "patch": "@@ -93,7 +93,7 @@ pub trait CopyableNonstrictIter<A:Copy> {\n     // Like \"each\", but copies out the value. If the receiver is mutated while\n     // iterating over it, the semantics must not be memory-unsafe but are\n     // otherwise undefined.\n-    fn each_val(&const self, f: &fn(A) -> bool);\n+    fn each_val(&const self, f: &fn(A) -> bool) -> bool;\n }\n \n // A trait for sequences that can be built by imperatively pushing elements"}, {"sha": "604f0297b647e116f6bae2e28fd5c01f160e9cf8", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/82f963e347fa16ac3824e81c53f5d15155fe319b/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f963e347fa16ac3824e81c53f5d15155fe319b/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=82f963e347fa16ac3824e81c53f5d15155fe319b", "patch": "@@ -2945,34 +2945,37 @@ impl<A:Copy + Ord> old_iter::CopyableOrderedIter<A> for @[A] {\n }\n \n impl<'self,A:Copy> old_iter::CopyableNonstrictIter<A> for &'self [A] {\n-    fn each_val(&const self, f: &fn(A) -> bool) {\n+    fn each_val(&const self, f: &fn(A) -> bool) -> bool {\n         let mut i = 0;\n         while i < self.len() {\n-            if !f(copy self[i]) { break; }\n+            if !f(copy self[i]) { return false; }\n             i += 1;\n         }\n+        return true;\n     }\n }\n \n // FIXME(#4148): This should be redundant\n impl<A:Copy> old_iter::CopyableNonstrictIter<A> for ~[A] {\n-    fn each_val(&const self, f: &fn(A) -> bool) {\n+    fn each_val(&const self, f: &fn(A) -> bool) -> bool {\n         let mut i = 0;\n         while i < uniq_len(self) {\n-            if !f(copy self[i]) { break; }\n+            if !f(copy self[i]) { return false; }\n             i += 1;\n         }\n+        return true;\n     }\n }\n \n // FIXME(#4148): This should be redundant\n impl<A:Copy> old_iter::CopyableNonstrictIter<A> for @[A] {\n-    fn each_val(&const self, f: &fn(A) -> bool) {\n+    fn each_val(&const self, f: &fn(A) -> bool) -> bool {\n         let mut i = 0;\n         while i < self.len() {\n-            if !f(copy self[i]) { break; }\n+            if !f(copy self[i]) { return false; }\n             i += 1;\n         }\n+        return true;\n     }\n }\n \n@@ -4688,4 +4691,14 @@ mod tests {\n             i += 1;\n         }\n     }\n+\n+    #[test]\n+    fn test_each_val() {\n+        use old_iter::CopyableNonstrictIter;\n+        let mut i = 0;\n+        for [1, 2, 3].each_val |v| {\n+            i += v;\n+        }\n+        assert!(i == 6);\n+    }\n }"}]}