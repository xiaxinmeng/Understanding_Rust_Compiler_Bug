{"sha": "ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMDgwOTczY2IzYmZhOTZmNzFiN2QyOWZjNWMzZTM0ODkzY2Y4OTY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-15T15:47:51Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-06T19:32:07Z"}, "message": "rustc_errors: hide \"in this macro invocation\" when redundant, more explicitly.", "tree": {"sha": "12425bd6a346cea10960873edcab64816349bedb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12425bd6a346cea10960873edcab64816349bedb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "html_url": "https://github.com/rust-lang/rust/commit/ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eaa9a150d470019ac0924ece7a23a0d1cefe5f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eaa9a150d470019ac0924ece7a23a0d1cefe5f4", "html_url": "https://github.com/rust-lang/rust/commit/5eaa9a150d470019ac0924ece7a23a0d1cefe5f4"}], "stats": {"total": 121, "additions": 53, "deletions": 68}, "files": [{"sha": "d83175694f407933ff9fa1eff575ddf06965f418", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "patch": "@@ -32,7 +32,7 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n         let mut children = diag.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&diag);\n \n-        self.render_multispans_macro_backtrace_and_fix_extern_macros(\n+        self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n             &self.source_map,\n             &mut primary_span,\n             &mut children,"}, {"sha": "4857ff47462c8b49ad78470e6328ae6abaebb225", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "patch": "@@ -271,18 +271,24 @@ pub trait Emitter {\n         }\n     }\n \n-    fn render_multispans_macro_backtrace_and_fix_extern_macros(\n+    fn fix_multispans_in_extern_macros_and_render_macro_backtrace(\n         &self,\n         source_map: &Option<Lrc<SourceMap>>,\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n         level: &Level,\n         backtrace: bool,\n     ) {\n-        self.render_multispans_macro_backtrace(source_map, span, children, backtrace);\n+        let mut external_spans_updated = false;\n+        if !backtrace {\n+            external_spans_updated =\n+                self.fix_multispans_in_extern_macros(source_map, span, children);\n+        }\n+\n+        self.render_multispans_macro_backtrace(span, children, backtrace);\n \n         if !backtrace {\n-            if self.fix_multispans_in_extern_macros(source_map, span, children) {\n+            if external_spans_updated {\n                 let msg = format!(\n                     \"this {} originates in a macro outside of the current crate \\\n                     (in Nightly builds, run with -Z macro-backtrace for more info)\",\n@@ -301,42 +307,33 @@ pub trait Emitter {\n \n     fn render_multispans_macro_backtrace(\n         &self,\n-        source_map: &Option<Lrc<SourceMap>>,\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n         backtrace: bool,\n     ) {\n-        self.render_multispan_macro_backtrace(source_map, span, backtrace);\n+        self.render_multispan_macro_backtrace(span, backtrace);\n         for child in children.iter_mut() {\n-            self.render_multispan_macro_backtrace(source_map, &mut child.span, backtrace);\n+            self.render_multispan_macro_backtrace(&mut child.span, backtrace);\n         }\n     }\n \n-    fn render_multispan_macro_backtrace(\n-        &self,\n-        source_map: &Option<Lrc<SourceMap>>,\n-        span: &mut MultiSpan,\n-        always_backtrace: bool,\n-    ) {\n-        let sm = match source_map {\n-            Some(ref sm) => sm,\n-            None => return,\n-        };\n-\n+    fn render_multispan_macro_backtrace(&self, span: &mut MultiSpan, always_backtrace: bool) {\n         let mut new_labels: Vec<(Span, String)> = vec![];\n \n-        // First, find all the spans in <*macros> and point instead at their use site\n         for &sp in span.primary_spans() {\n             if sp.is_dummy() {\n                 continue;\n             }\n+\n+            // FIXME(eddyb) use `retain` on `macro_backtrace` to remove all the\n+            // entries we don't want to print, to make sure the indices being\n+            // printed are contiguous (or omitted if there's only one entry).\n             let macro_backtrace: Vec<_> = sp.macro_backtrace().collect();\n             for (i, trace) in macro_backtrace.iter().rev().enumerate() {\n-                // Only show macro locations that are local\n-                // and display them like a span_note\n                 if trace.def_site.is_dummy() {\n                     continue;\n                 }\n+\n                 if always_backtrace {\n                     new_labels.push((\n                         trace.def_site,\n@@ -353,9 +350,21 @@ pub trait Emitter {\n                         ),\n                     ));\n                 }\n-                // Check to make sure we're not in any <*macros>\n-                if !sm.span_to_filename(trace.def_site).is_macros()\n-                    && matches!(trace.kind, ExpnKind::Macro(MacroKind::Bang, _))\n+\n+                // Don't add a label on the call site if the diagnostic itself\n+                // already points to (a part of) that call site, as the label\n+                // is meant for showing the relevant invocation when the actual\n+                // diagnostic is pointing to some part of macro definition.\n+                //\n+                // This also handles the case where an external span got replaced\n+                // with the call site span by `fix_multispans_in_extern_macros`.\n+                //\n+                // NB: `-Zmacro-backtrace` overrides this, for uniformity, as the\n+                // \"in this expansion of\" label above is always added in that mode,\n+                // and it needs an \"in this macro invocation\" label to match that.\n+                let redundant_span = trace.call_site.contains(sp);\n+\n+                if !redundant_span && matches!(trace.kind, ExpnKind::Macro(MacroKind::Bang, _))\n                     || always_backtrace\n                 {\n                     new_labels.push((\n@@ -371,9 +380,9 @@ pub trait Emitter {\n                             },\n                         ),\n                     ));\n-                    if !always_backtrace {\n-                        break;\n-                    }\n+                }\n+                if !always_backtrace {\n+                    break;\n                 }\n             }\n         }\n@@ -447,7 +456,7 @@ impl Emitter for EmitterWriter {\n         let mut children = diag.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&diag);\n \n-        self.render_multispans_macro_backtrace_and_fix_extern_macros(\n+        self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n             &self.sm,\n             &mut primary_span,\n             &mut children,"}, {"sha": "0a7e019e59f33ec767d1a15a10a37c3bcd5aae8b", "filename": "src/test/ui/macros/same-sequence-span.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr?ref=ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "patch": "@@ -33,10 +33,7 @@ error: `$x:expr` may be followed by `=`, which is not allowed for `expr` fragmen\n   --> $DIR/same-sequence-span.rs:19:1\n    |\n LL | proc_macro_sequence::make_foo!();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | not allowed after `expr` fragments\n-   | in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not allowed after `expr` fragments\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n "}, {"sha": "496bd86e9882ecd810b255f5b621829aca48fe0b", "filename": "src/test/ui/proc-macro/generate-mod.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr?ref=ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "patch": "@@ -2,10 +2,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:9:1\n    |\n LL | generate_mod::check!();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | not found in this scope\n-   | in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n    = note: possible candidate is found in another module, you can import it into scope:\n            FromOutside\n@@ -14,10 +11,7 @@ error[E0412]: cannot find type `Outer` in this scope\n   --> $DIR/generate-mod.rs:9:1\n    |\n LL | generate_mod::check!();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | not found in this scope\n-   | in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n    = note: possible candidate is found in another module, you can import it into scope:\n            Outer"}, {"sha": "cf85974316abc49dc5b88530f6ae417d500a8933", "filename": "src/test/ui/proc-macro/invalid-punct-ident-4.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr?ref=ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "patch": "@@ -2,10 +2,7 @@ error: unexpected closing delimiter: `)`\n   --> $DIR/invalid-punct-ident-4.rs:6:1\n    |\n LL | lexer_failure!();\n-   | ^^^^^^^^^^^^^^^^^\n-   | |\n-   | unexpected closing delimiter\n-   | in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^ unexpected closing delimiter\n \n error: proc macro panicked\n   --> $DIR/invalid-punct-ident-4.rs:6:1"}, {"sha": "2d97cd700be9ffe3cbcfa7059f83c436b0efd6f7", "filename": "src/test/ui/proc-macro/lints_in_proc_macros.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.stderr?ref=ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "patch": "@@ -2,10 +2,7 @@ error[E0425]: cannot find value `foobar2` in this scope\n   --> $DIR/lints_in_proc_macros.rs:12:5\n    |\n LL |     bang_proc_macro2!();\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     help: a local variable with a similar name exists: `foobar`\n-   |     in this macro invocation\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `foobar`\n \n error: aborting due to previous error\n "}, {"sha": "b5ca6cb9b29e40df454a5f9f49bd76c3969330f6", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "patch": "@@ -2,19 +2,13 @@ error[E0426]: use of undeclared label `'label_use`\n   --> $DIR/mixed-site-span.rs:15:9\n    |\n LL |         proc_macro_rules!();\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         undeclared label `'label_use`\n-   |         in this macro invocation\n+   |         ^^^^^^^^^^^^^^^^^^^^ undeclared label `'label_use`\n \n error[E0425]: cannot find value `local_use` in this scope\n   --> $DIR/mixed-site-span.rs:15:9\n    |\n LL |         proc_macro_rules!();\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         not found in this scope\n-   |         in this macro invocation\n+   |         ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `local_def` in this scope\n   --> $DIR/mixed-site-span.rs:19:9"}, {"sha": "5117dd6d32d498fb8a46310992a9a2d982d15e80", "filename": "src/test/ui/proc-macro/subspan.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.stderr?ref=ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "patch": "@@ -2,7 +2,7 @@ error: found 'hi's\n   --> $DIR/subspan.rs:11:1\n    |\n LL | subspan!(\"hi\");\n-   | ^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:11:11\n@@ -14,7 +14,7 @@ error: found 'hi's\n   --> $DIR/subspan.rs:14:1\n    |\n LL | subspan!(\"hihi\");\n-   | ^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:14:11\n@@ -26,7 +26,7 @@ error: found 'hi's\n   --> $DIR/subspan.rs:17:1\n    |\n LL | subspan!(\"hihihi\");\n-   | ^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:17:11\n@@ -38,7 +38,7 @@ error: found 'hi's\n   --> $DIR/subspan.rs:20:1\n    |\n LL | subspan!(\"why I hide? hi!\");\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:20:17\n@@ -50,7 +50,7 @@ error: found 'hi's\n   --> $DIR/subspan.rs:21:1\n    |\n LL | subspan!(\"hey, hi, hidy, hidy, hi hi\");\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:21:16\n@@ -62,7 +62,7 @@ error: found 'hi's\n   --> $DIR/subspan.rs:22:1\n    |\n LL | subspan!(\"this is a hi, and this is another hi\");\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:22:12\n@@ -74,7 +74,7 @@ error: found 'hi's\n   --> $DIR/subspan.rs:23:1\n    |\n LL | subspan!(\"how are you this evening\");\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:23:24\n@@ -86,7 +86,7 @@ error: found 'hi's\n   --> $DIR/subspan.rs:24:1\n    |\n LL | subspan!(\"this is highly eradic\");\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:24:12"}, {"sha": "f928510454ae31fbfdac198555f84d531e42588c", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab080973cb3bfa96f71b7d29fc5c3e34893cf896/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr?ref=ab080973cb3bfa96f71b7d29fc5c3e34893cf896", "patch": "@@ -4,10 +4,7 @@ error[E0308]: mismatched types\n LL | /     intrinsic_match! {\n LL | |         \"abc\"\n LL | |     };\n-   | |      ^\n-   | |      |\n-   | |______expected `&str`, found struct `std::string::String`\n-   |        in this macro invocation\n+   | |______^ expected `&str`, found struct `std::string::String`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n "}]}