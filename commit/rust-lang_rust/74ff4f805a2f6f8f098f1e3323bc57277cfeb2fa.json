{"sha": "74ff4f805a2f6f8f098f1e3323bc57277cfeb2fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZmY0ZjgwNWEyZjZmOGYwOThmMWUzMzIzYmM1NzI3N2NmZWIyZmE=", "commit": {"author": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-07-12T14:57:19Z"}, "committer": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-07-12T14:57:19Z"}, "message": "Read into buffer of fixed size for `read`s to STDIN\n\nAlso:\n- Check isolation is disabled.\n- Add FIXMEs to set error numbers in `read` and `write`.", "tree": {"sha": "7d579e828320684ca4f22c18ee7d8f6ffb85cfa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d579e828320684ca4f22c18ee7d8f6ffb85cfa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74ff4f805a2f6f8f098f1e3323bc57277cfeb2fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74ff4f805a2f6f8f098f1e3323bc57277cfeb2fa", "html_url": "https://github.com/rust-lang/rust/commit/74ff4f805a2f6f8f098f1e3323bc57277cfeb2fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74ff4f805a2f6f8f098f1e3323bc57277cfeb2fa/comments", "author": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2602e951c0301e6502e835b1842e3e144d10c306", "url": "https://api.github.com/repos/rust-lang/rust/commits/2602e951c0301e6502e835b1842e3e144d10c306", "html_url": "https://github.com/rust-lang/rust/commit/2602e951c0301e6502e835b1842e3e144d10c306"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "200d50433b3ee57452d2d39cfa343fb5a43086aa", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74ff4f805a2f6f8f098f1e3323bc57277cfeb2fa/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ff4f805a2f6f8f098f1e3323bc57277cfeb2fa/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=74ff4f805a2f6f8f098f1e3323bc57277cfeb2fa", "patch": "@@ -69,14 +69,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = if fd == 0 {\n                     use std::io::{self, Read};\n \n-                    let mut buffer = String::new();\n-                    let res = io::stdin().read_to_string(&mut buffer);\n+                    this.check_no_isolation(\"read\")?;\n+\n+                    let mut buffer = vec![0; count as usize];\n+                    let res = io::stdin()\n+                        .read(&mut buffer)\n+                        // `Stdin::read` never returns a value larger\n+                        // than `count`, so this cannot fail.\n+                        .map(|c| i64::try_from(c).unwrap());\n \n                     match res {\n                         Ok(bytes) => {\n-                            this.memory.write_bytes(buf, buffer.bytes())?;\n+                            this.memory.write_bytes(buf, buffer)?;\n                             i64::try_from(bytes).unwrap()\n                         },\n+                        // FIXME: set errno to appropriate value\n                         Err(_) => -1,\n                     }\n                 } else if fd == 1 || fd == 2 {\n@@ -114,6 +121,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     };\n                     match res {\n                         Ok(n) => i64::try_from(n).unwrap(),\n+                        // FIXME: set errno to appropriate value\n                         Err(_) => -1,\n                     }\n                 } else {"}]}