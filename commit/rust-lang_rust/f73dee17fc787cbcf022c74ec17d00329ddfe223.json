{"sha": "f73dee17fc787cbcf022c74ec17d00329ddfe223", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3M2RlZTE3ZmM3ODdjYmNmMDIyYzc0ZWMxN2QwMDMyOWRkZmUyMjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T05:14:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:30Z"}, "message": "librustc: De-`@mut` the export map", "tree": {"sha": "8c1267f00718a96ea4945648bf057f40dbc17ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c1267f00718a96ea4945648bf057f40dbc17ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f73dee17fc787cbcf022c74ec17d00329ddfe223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f73dee17fc787cbcf022c74ec17d00329ddfe223", "html_url": "https://github.com/rust-lang/rust/commit/f73dee17fc787cbcf022c74ec17d00329ddfe223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f73dee17fc787cbcf022c74ec17d00329ddfe223/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5f07cfc1adfb23523c986b1c7e1b099ebbd8605", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5f07cfc1adfb23523c986b1c7e1b099ebbd8605", "html_url": "https://github.com/rust-lang/rust/commit/c5f07cfc1adfb23523c986b1c7e1b099ebbd8605"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "81467ef1115ac2773a0ad9431b557ecdd2d36dc4", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f73dee17fc787cbcf022c74ec17d00329ddfe223/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73dee17fc787cbcf022c74ec17d00329ddfe223/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=f73dee17fc787cbcf022c74ec17d00329ddfe223", "patch": "@@ -272,8 +272,7 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n                                           method_map, ty_cx));\n \n     let maps = (external_exports, last_private_map);\n-    let exported_items =\n-        time(time_passes, \"privacy checking\", maps, |(a, b)|\n+    let exported_items = time(time_passes, \"privacy checking\", maps, |(a, b)|\n              middle::privacy::check_crate(ty_cx, &method_map, &exp_map2,\n                                           a, b, crate));\n "}, {"sha": "1ea8b0ce40c217b25f099f456bd8cc203e8da0f7", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f73dee17fc787cbcf022c74ec17d00329ddfe223/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73dee17fc787cbcf022c74ec17d00329ddfe223/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=f73dee17fc787cbcf022c74ec17d00329ddfe223", "patch": "@@ -556,7 +556,8 @@ fn encode_reexports(ecx: &EncodeContext,\n                     id: NodeId,\n                     path: &[ast_map::path_elt]) {\n     debug!(\"(encoding info for module) encoding reexports for {}\", id);\n-    match ecx.reexports2.find(&id) {\n+    let reexports2 = ecx.reexports2.borrow();\n+    match reexports2.get().find(&id) {\n         Some(ref exports) => {\n             debug!(\"(encoding info for module) found reexports for {}\", id);\n             for exp in exports.iter() {"}, {"sha": "7a634a7892f88659088b0ac15240e1cc4e3f1bc2", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f73dee17fc787cbcf022c74ec17d00329ddfe223/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73dee17fc787cbcf022c74ec17d00329ddfe223/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=f73dee17fc787cbcf022c74ec17d00329ddfe223", "patch": "@@ -293,8 +293,9 @@ impl<'a> Visitor<()> for EmbargoVisitor<'a> {\n         // This code is here instead of in visit_item so that the\n         // crate module gets processed as well.\n         if self.prev_exported {\n-            assert!(self.exp_map2.contains_key(&id), \"wut {:?}\", id);\n-            for export in self.exp_map2.get(&id).iter() {\n+            let exp_map2 = self.exp_map2.borrow();\n+            assert!(exp_map2.get().contains_key(&id), \"wut {:?}\", id);\n+            for export in exp_map2.get().get(&id).iter() {\n                 if is_local(export.def_id) && export.reexport {\n                     self.reexports.insert(export.def_id.node);\n                 }"}, {"sha": "862a6424466032368f4a180fd06b8462c9520dfb", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f73dee17fc787cbcf022c74ec17d00329ddfe223/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73dee17fc787cbcf022c74ec17d00329ddfe223/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=f73dee17fc787cbcf022c74ec17d00329ddfe223", "patch": "@@ -29,7 +29,7 @@ use syntax::opt_vec::OptVec;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n-use std::cell::Cell;\n+use std::cell::{Cell, RefCell};\n use std::uint;\n use std::hashmap::{HashMap, HashSet};\n use std::util;\n@@ -50,7 +50,7 @@ pub type TraitMap = HashMap<NodeId,@mut ~[DefId]>;\n \n // This is the replacement export map. It maps a module to all of the exports\n // within.\n-pub type ExportMap2 = @mut HashMap<NodeId, ~[Export2]>;\n+pub type ExportMap2 = @RefCell<HashMap<NodeId, ~[Export2]>>;\n \n pub struct Export2 {\n     name: @str,        // The name of the target.\n@@ -808,7 +808,7 @@ fn Resolver(session: Session,\n         namespaces: ~[ TypeNS, ValueNS ],\n \n         def_map: @mut HashMap::new(),\n-        export_map2: @mut HashMap::new(),\n+        export_map2: @RefCell::new(HashMap::new()),\n         trait_map: HashMap::new(),\n         used_imports: HashSet::new(),\n         external_exports: HashSet::new(),\n@@ -3249,7 +3249,8 @@ impl Resolver {\n         self.add_exports_for_module(&mut exports2, module_);\n         match module_.def_id.get() {\n             Some(def_id) => {\n-                self.export_map2.insert(def_id.node, exports2);\n+                let mut export_map2 = self.export_map2.borrow_mut();\n+                export_map2.get().insert(def_id.node, exports2);\n                 debug!(\"(computing exports) writing exports for {} (some)\",\n                        def_id.node);\n             }"}]}