{"sha": "46becfdf9c807e0108a78bb4df9b8330b10422c8", "node_id": "C_kwDOAAsO6NoAKDQ2YmVjZmRmOWM4MDdlMDEwOGE3OGJiNGRmOWI4MzMwYjEwNDIyYzg", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-04-10T11:20:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-06-09T21:35:21Z"}, "message": "expand: Change how `#![cfg(FALSE)]` behaves on crate root\n\nPreviously it removed all other attributes from the crate root.\nNow it removes only attributes below itself.\n\nSo it becomes possible to configure some global crate properties even for fully unconfigured crates.", "tree": {"sha": "4e99e4fbfbb74507bffef388ea3c39e1f31dbbef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e99e4fbfbb74507bffef388ea3c39e1f31dbbef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46becfdf9c807e0108a78bb4df9b8330b10422c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46becfdf9c807e0108a78bb4df9b8330b10422c8", "html_url": "https://github.com/rust-lang/rust/commit/46becfdf9c807e0108a78bb4df9b8330b10422c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46becfdf9c807e0108a78bb4df9b8330b10422c8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397641f3bd4f4211d0a1e9ada8d477bf495735b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/397641f3bd4f4211d0a1e9ada8d477bf495735b2", "html_url": "https://github.com/rust-lang/rust/commit/397641f3bd4f4211d0a1e9ada8d477bf495735b2"}], "stats": {"total": 94, "additions": 63, "deletions": 31}, "files": [{"sha": "bcfa5313bde3aa3c12eec648c6145a4474cea180", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46becfdf9c807e0108a78bb4df9b8330b10422c8/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46becfdf9c807e0108a78bb4df9b8330b10422c8/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=46becfdf9c807e0108a78bb4df9b8330b10422c8", "patch": "@@ -197,9 +197,11 @@ pub fn pre_configure_attrs(sess: &Session, attrs: &[Attribute]) -> ast::AttrVec\n         config_tokens: false,\n         lint_node_id: ast::CRATE_NODE_ID,\n     };\n-    let attrs: ast::AttrVec =\n-        attrs.iter().flat_map(|attr| strip_unconfigured.process_cfg_attr(attr)).collect();\n-    if strip_unconfigured.in_cfg(&attrs) { attrs } else { ast::AttrVec::new() }\n+    attrs\n+        .iter()\n+        .flat_map(|attr| strip_unconfigured.process_cfg_attr(attr))\n+        .take_while(|attr| !is_cfg(attr) || strip_unconfigured.cfg_true(attr).0)\n+        .collect()\n }\n \n #[macro_export]"}, {"sha": "9850723a857e94486cfe8bfa5a00cb9672be9103", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46becfdf9c807e0108a78bb4df9b8330b10422c8/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46becfdf9c807e0108a78bb4df9b8330b10422c8/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=46becfdf9c807e0108a78bb4df9b8330b10422c8", "patch": "@@ -1039,7 +1039,12 @@ trait InvocationCollectorNode: HasAttrs + HasNodeId + Sized {\n     ) -> Result<Self::OutputTy, Self> {\n         Ok(noop_flat_map(node, collector))\n     }\n-    fn expand_cfg_false(&mut self, collector: &mut InvocationCollector<'_, '_>, span: Span) {\n+    fn expand_cfg_false(\n+        &mut self,\n+        collector: &mut InvocationCollector<'_, '_>,\n+        _pos: usize,\n+        span: Span,\n+    ) {\n         collector.cx.emit_err(RemoveNodeNotSupported { span, descr: Self::descr() });\n     }\n \n@@ -1409,8 +1414,15 @@ impl InvocationCollectorNode for ast::Crate {\n     fn noop_visit<V: MutVisitor>(&mut self, visitor: &mut V) {\n         noop_visit_crate(self, visitor)\n     }\n-    fn expand_cfg_false(&mut self, collector: &mut InvocationCollector<'_, '_>, _span: Span) {\n-        self.attrs.clear();\n+    fn expand_cfg_false(\n+        &mut self,\n+        collector: &mut InvocationCollector<'_, '_>,\n+        pos: usize,\n+        _span: Span,\n+    ) {\n+        // Attributes above `cfg(FALSE)` are left in place, because we may want to configure\n+        // some global crate properties even on fully unconfigured crates.\n+        self.attrs.truncate(pos);\n         // Standard prelude imports are left in the crate for backward compatibility.\n         self.items.truncate(collector.cx.num_standard_library_imports);\n     }\n@@ -1804,7 +1816,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                             continue;\n                         }\n \n-                        node.expand_cfg_false(self, span);\n+                        node.expand_cfg_false(self, pos, span);\n                         continue;\n                     }\n                     sym::cfg_attr => {"}, {"sha": "6c2dbb44d2a40735ba5e7a0fc9c75a3978d28d8a", "filename": "tests/ui/cfg/auxiliary/cfg_false_lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fauxiliary%2Fcfg_false_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fauxiliary%2Fcfg_false_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fauxiliary%2Fcfg_false_lib.rs?ref=46becfdf9c807e0108a78bb4df9b8330b10422c8", "patch": "@@ -1,6 +1,4 @@\n-// It is unclear whether a fully unconfigured crate should link to standard library,\n-// or what its `no_std`/`no_core`/`compiler_builtins` status, more precisely.\n-// Currently the usual standard library prelude is added to such crates,\n-// and therefore they link to libstd.\n+// `#![no_std]` on a fully unconfigured crate is respected if it's placed before `cfg(FALSE)`.\n+// This crate has no such attribute, therefore this crate does link to libstd.\n \n #![cfg(FALSE)]"}, {"sha": "3cfa6c510d020f5bfb38094665e84b1b4b53f622", "filename": "tests/ui/cfg/auxiliary/cfg_false_lib_no_std_after.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fauxiliary%2Fcfg_false_lib_no_std_after.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fauxiliary%2Fcfg_false_lib_no_std_after.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fauxiliary%2Fcfg_false_lib_no_std_after.rs?ref=46becfdf9c807e0108a78bb4df9b8330b10422c8", "patch": "@@ -0,0 +1,5 @@\n+// `#![no_std]` on a fully unconfigured crate is respected if it's placed before `cfg(FALSE)`.\n+// Therefore this crate does link to libstd.\n+\n+#![cfg(FALSE)]\n+#![no_std]"}, {"sha": "8e89545b8f40d1419229f42fe7970c19f1d27bf2", "filename": "tests/ui/cfg/auxiliary/cfg_false_lib_no_std_before.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fauxiliary%2Fcfg_false_lib_no_std_before.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fauxiliary%2Fcfg_false_lib_no_std_before.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fauxiliary%2Fcfg_false_lib_no_std_before.rs?ref=46becfdf9c807e0108a78bb4df9b8330b10422c8", "patch": "@@ -0,0 +1,8 @@\n+// `#![no_std]` on a fully unconfigured crate is respected if it's placed before `cfg(FALSE)`.\n+// Therefore this crate doesn't link to libstd.\n+\n+// no-prefer-dynamic\n+\n+#![no_std]\n+#![crate_type = \"lib\"]\n+#![cfg(FALSE)]"}, {"sha": "84c231562f1e11d60da78c875a12df4267f47776", "filename": "tests/ui/cfg/cfg-false-feature.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fcfg-false-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fcfg-false-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fcfg-false-feature.rs?ref=46becfdf9c807e0108a78bb4df9b8330b10422c8", "patch": "@@ -1,5 +1,4 @@\n-// It is unclear which features should be in effect in a fully unconfigured crate (issue #104633).\n-// Currently none on the features are in effect, so we get the feature gates reported.\n+// Features above `cfg(FALSE)` are in effect in a fully unconfigured crate (issue #104633).\n \n // check-pass\n // compile-flags: --crate-type lib\n@@ -8,8 +7,7 @@\n #![cfg(FALSE)]\n #![feature(box_syntax)]\n \n-macro mac() {} //~ WARN `macro` is experimental\n-               //~| WARN unstable syntax can change at any point in the future\n+macro mac() {} // OK\n \n trait A = Clone; //~ WARN trait aliases are experimental\n                  //~| WARN unstable syntax can change at any point in the future"}, {"sha": "34093036205fefa9b65d68adaabc4a1035f3e191", "filename": "tests/ui/cfg/cfg-false-feature.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fcfg-false-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fcfg-false-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fcfg-false-feature.stderr?ref=46becfdf9c807e0108a78bb4df9b8330b10422c8", "patch": "@@ -1,5 +1,5 @@\n warning: trait aliases are experimental\n-  --> $DIR/cfg-false-feature.rs:14:1\n+  --> $DIR/cfg-false-feature.rs:12:1\n    |\n LL | trait A = Clone;\n    | ^^^^^^^^^^^^^^^^\n@@ -9,19 +9,8 @@ LL | trait A = Clone;\n    = warning: unstable syntax can change at any point in the future, causing a hard error!\n    = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n \n-warning: `macro` is experimental\n-  --> $DIR/cfg-false-feature.rs:11:1\n-   |\n-LL | macro mac() {}\n-   | ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #39412 <https://github.com/rust-lang/rust/issues/39412> for more information\n-   = help: add `#![feature(decl_macro)]` to the crate attributes to enable\n-   = warning: unstable syntax can change at any point in the future, causing a hard error!\n-   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n-\n warning: box pattern syntax is experimental\n-  --> $DIR/cfg-false-feature.rs:18:9\n+  --> $DIR/cfg-false-feature.rs:16:9\n    |\n LL |     let box _ = Box::new(0);\n    |         ^^^^^\n@@ -31,5 +20,5 @@ LL |     let box _ = Box::new(0);\n    = warning: unstable syntax can change at any point in the future, causing a hard error!\n    = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n \n-warning: 3 warnings emitted\n+warning: 2 warnings emitted\n "}, {"sha": "bcb49e5135364a2d654d1a68fc0c8bc730cf88cd", "filename": "tests/ui/cfg/cfg_false_no_std-1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fcfg_false_no_std-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fcfg_false_no_std-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fcfg_false_no_std-1.rs?ref=46becfdf9c807e0108a78bb4df9b8330b10422c8", "patch": "@@ -0,0 +1,10 @@\n+// No error, panic handler is supplied by libstd linked though the empty library.\n+\n+// check-pass\n+// aux-build: cfg_false_lib_no_std_after.rs\n+\n+#![no_std]\n+\n+extern crate cfg_false_lib_no_std_after as _;\n+\n+fn main() {}"}, {"sha": "0a2bfd5f68b128bc9e997f0fde37d8c85646fcc0", "filename": "tests/ui/cfg/cfg_false_no_std-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fcfg_false_no_std-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fcfg_false_no_std-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fcfg_false_no_std-2.rs?ref=46becfdf9c807e0108a78bb4df9b8330b10422c8", "patch": "@@ -0,0 +1,11 @@\n+// Error, the linked empty library is `no_std` and doesn't provide a panic handler.\n+\n+// dont-check-compiler-stderr\n+// error-pattern: `#[panic_handler]` function required, but not found\n+// aux-build: cfg_false_lib_no_std_before.rs\n+\n+#![no_std]\n+\n+extern crate cfg_false_lib_no_std_before as _;\n+\n+fn main() {}"}, {"sha": "4fa831715ede105fd9cd7176efb8724ff0bc7def", "filename": "tests/ui/cfg/cfg_false_no_std.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fcfg_false_no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46becfdf9c807e0108a78bb4df9b8330b10422c8/tests%2Fui%2Fcfg%2Fcfg_false_no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fcfg_false_no_std.rs?ref=46becfdf9c807e0108a78bb4df9b8330b10422c8", "patch": "@@ -1,5 +1,4 @@\n-// Currently no error because the panic handler is supplied by libstd linked though the empty\n-// library, but the desirable behavior is unclear (see comments in cfg_false_lib.rs).\n+// No error, panic handler is supplied by libstd linked though the empty library.\n \n // check-pass\n // aux-build: cfg_false_lib.rs"}]}