{"sha": "9828559aad8672bb320517bd0fa1992ce144b848", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Mjg1NTlhYWQ4NjcyYmIzMjA1MTdiZDBmYTE5OTJjZTE0NGI4NDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-11T07:40:16Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T09:40:17Z"}, "message": "parser: is_fn_front_matter -> check_fn_front_matter", "tree": {"sha": "f5f5389477017c943087b76cdbec10c1a58b5b53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f5389477017c943087b76cdbec10c1a58b5b53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9828559aad8672bb320517bd0fa1992ce144b848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9828559aad8672bb320517bd0fa1992ce144b848", "html_url": "https://github.com/rust-lang/rust/commit/9828559aad8672bb320517bd0fa1992ce144b848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9828559aad8672bb320517bd0fa1992ce144b848/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ca3bbf0b21c82d50d14aca9b74a4dd919d9087f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca3bbf0b21c82d50d14aca9b74a4dd919d9087f", "html_url": "https://github.com/rust-lang/rust/commit/4ca3bbf0b21c82d50d14aca9b74a4dd919d9087f"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "ccd55c5c08a70d82a83a084c16cd280c285d52cb", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9828559aad8672bb320517bd0fa1992ce144b848/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9828559aad8672bb320517bd0fa1992ce144b848/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=9828559aad8672bb320517bd0fa1992ce144b848", "patch": "@@ -96,7 +96,7 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n \n-        if self.is_fn_front_matter() {\n+        if self.check_fn_front_matter() {\n             // FUNCTION ITEM\n             let (ident, sig, generics, body) = self.parse_fn(&mut false, &mut attrs, |_| true)?;\n             let kind = ItemKind::Fn(sig, generics, body);\n@@ -742,7 +742,7 @@ impl<'a> Parser<'a> {\n         let defaultness = self.parse_defaultness();\n         let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n             self.parse_assoc_ty()?\n-        } else if self.is_fn_front_matter() {\n+        } else if self.check_fn_front_matter() {\n             let (ident, sig, generics, body) = self.parse_fn(at_end, &mut attrs, req_name)?;\n             (ident, AssocItemKind::Fn(sig, body), generics)\n         } else if let Some(mac) = self.parse_assoc_macro_invoc(\"associated\", Some(&vis), at_end)? {\n@@ -978,7 +978,7 @@ impl<'a> Parser<'a> {\n         if self.check_keyword(kw::Type) {\n             // FOREIGN TYPE ITEM\n             self.parse_item_foreign_type(vis, lo, attrs)\n-        } else if self.is_fn_front_matter() {\n+        } else if self.check_fn_front_matter() {\n             // FOREIGN FUNCTION ITEM\n             let (ident, sig, generics, body) = self.parse_fn(&mut false, &mut attrs, |_| true)?;\n             let kind = ForeignItemKind::Fn(sig, generics, body);\n@@ -1658,7 +1658,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Is the current token the start of an `FnHeader` / not a valid parse?\n-    fn is_fn_front_matter(&mut self) -> bool {\n+    fn check_fn_front_matter(&mut self) -> bool {\n         // We use an over-approximation here.\n         // `const const`, `fn const` won't parse, but we're not stepping over other syntax either.\n         const QUALS: [Symbol; 4] = [kw::Const, kw::Async, kw::Unsafe, kw::Extern];"}]}