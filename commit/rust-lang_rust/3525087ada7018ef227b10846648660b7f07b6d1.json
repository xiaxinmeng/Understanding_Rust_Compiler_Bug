{"sha": "3525087ada7018ef227b10846648660b7f07b6d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MjUwODdhZGE3MDE4ZWYyMjdiMTA4NDY2NDg2NjBiN2YwN2I2ZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-08T20:43:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-08T20:43:01Z"}, "message": "Auto merge of #77110 - lzutao:e0596-amp_mut, r=davidtwco\n\nSuggest removing `&mut` from a `&mut borrow`\n\nModify the code added in #54720.\n\nCloses  #75871", "tree": {"sha": "3ff94b02040b8d697058158ebaf47a98b940a8a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ff94b02040b8d697058158ebaf47a98b940a8a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3525087ada7018ef227b10846648660b7f07b6d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3525087ada7018ef227b10846648660b7f07b6d1", "html_url": "https://github.com/rust-lang/rust/commit/3525087ada7018ef227b10846648660b7f07b6d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3525087ada7018ef227b10846648660b7f07b6d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b8d7911a1d329d0d98b90606d8c2cb808af090a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8d7911a1d329d0d98b90606d8c2cb808af090a", "html_url": "https://github.com/rust-lang/rust/commit/6b8d7911a1d329d0d98b90606d8c2cb808af090a"}, {"sha": "ab226bda9a7ad56d2d417ab9451d5980c9fd35cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab226bda9a7ad56d2d417ab9451d5980c9fd35cd", "html_url": "https://github.com/rust-lang/rust/commit/ab226bda9a7ad56d2d417ab9451d5980c9fd35cd"}], "stats": {"total": 106, "additions": 60, "deletions": 46}, "files": [{"sha": "92a2baa30ee8ceeb162e83328790e33b9e058db1", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3525087ada7018ef227b10846648660b7f07b6d1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525087ada7018ef227b10846648660b7f07b6d1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=3525087ada7018ef227b10846648660b7f07b6d1", "patch": "@@ -813,7 +813,7 @@ pub struct BlockTailInfo {\n /// argument, or the return place.\n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n pub struct LocalDecl<'tcx> {\n-    /// Whether this is a mutable minding (i.e., `let x` or `let mut x`).\n+    /// Whether this is a mutable binding (i.e., `let x` or `let mut x`).\n     ///\n     /// Temporaries and the return place are always mutable.\n     pub mutability: Mutability,"}, {"sha": "e1af6fc07cf8fd30be4f2a46c1d3808764ce202b", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3525087ada7018ef227b10846648660b7f07b6d1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525087ada7018ef227b10846648660b7f07b6d1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=3525087ada7018ef227b10846648660b7f07b6d1", "patch": "@@ -1,11 +1,11 @@\n use rustc_hir as hir;\n use rustc_hir::Node;\n use rustc_index::vec::Idx;\n-use rustc_middle::mir::{self, ClearCrossCrate, Local, LocalInfo, Location};\n+use rustc_middle::mir::{self, ClearCrossCrate, Local, LocalDecl, LocalInfo, Location};\n use rustc_middle::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::source_map::DesugaringKind;\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, Symbol};\n use rustc_span::Span;\n \n use crate::borrow_check::diagnostics::BorrowedContentSource;\n@@ -211,36 +211,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n             // Suggest removing a `&mut` from the use of a mutable reference.\n             PlaceRef { local, projection: [] }\n-                if {\n-                    self.body\n-                        .local_decls\n-                        .get(local)\n-                        .map(|local_decl| {\n-                            if let Some(box LocalInfo::User(ClearCrossCrate::Set(\n-                                mir::BindingForm::ImplicitSelf(kind),\n-                            ))) = local_decl.local_info\n-                            {\n-                                // Check if the user variable is a `&mut self` and we can therefore\n-                                // suggest removing the `&mut`.\n-                                //\n-                                // Deliberately fall into this case for all implicit self types,\n-                                // so that we don't fall in to the next case with them.\n-                                kind == mir::ImplicitSelfKind::MutRef\n-                            } else if Some(kw::SelfLower) == self.local_names[local] {\n-                                // Otherwise, check if the name is the self kewyord - in which case\n-                                // we have an explicit self. Do the same thing in this case and check\n-                                // for a `self: &mut Self` to suggest removing the `&mut`.\n-                                if let ty::Ref(_, _, hir::Mutability::Mut) = local_decl.ty.kind() {\n-                                    true\n-                                } else {\n-                                    false\n-                                }\n-                            } else {\n-                                false\n-                            }\n-                        })\n-                        .unwrap_or(false)\n-                } =>\n+                if self\n+                    .body\n+                    .local_decls\n+                    .get(local)\n+                    .map(|l| mut_borrow_of_mutable_ref(l, self.local_names[local]))\n+                    .unwrap_or(false) =>\n             {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n                 err.span_label(span, \"try removing `&mut` here\");\n@@ -581,6 +557,34 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     }\n }\n \n+fn mut_borrow_of_mutable_ref(local_decl: &LocalDecl<'_>, local_name: Option<Symbol>) -> bool {\n+    debug!(\"local_info: {:?}, ty.kind(): {:?}\", local_decl.local_info, local_decl.ty.kind());\n+\n+    match local_decl.local_info.as_deref() {\n+        // Check if mutably borrowing a mutable reference.\n+        Some(LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n+            mir::VarBindingForm {\n+                binding_mode: ty::BindingMode::BindByValue(Mutability::Not), ..\n+            },\n+        )))) => matches!(local_decl.ty.kind(), ty::Ref(_, _, hir::Mutability::Mut)),\n+        Some(LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::ImplicitSelf(kind)))) => {\n+            // Check if the user variable is a `&mut self` and we can therefore\n+            // suggest removing the `&mut`.\n+            //\n+            // Deliberately fall into this case for all implicit self types,\n+            // so that we don't fall in to the next case with them.\n+            *kind == mir::ImplicitSelfKind::MutRef\n+        }\n+        _ if Some(kw::SelfLower) == local_name => {\n+            // Otherwise, check if the name is the `self` keyword - in which case\n+            // we have an explicit self. Do the same thing in this case and check\n+            // for a `self: &mut Self` to suggest removing the `&mut`.\n+            matches!(local_decl.ty.kind(), ty::Ref(_, _, hir::Mutability::Mut))\n+        }\n+        _ => false,\n+    }\n+}\n+\n fn suggest_ampmut_self<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     local_decl: &mir::LocalDecl<'tcx>,"}, {"sha": "59b541a24d1bb6cbf73eb319ea8b0e87570cac22", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3525087ada7018ef227b10846648660b7f07b6d1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525087ada7018ef227b10846648660b7f07b6d1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs?ref=3525087ada7018ef227b10846648660b7f07b6d1", "patch": "@@ -1,11 +1,11 @@\n // Suggest not mutably borrowing a mutable reference\n+#![crate_type = \"rlib\"]\n \n-fn main() {\n-    f(&mut 0)\n+pub fn f(b: &mut i32) {\n+    g(&mut b);\n+    //~^ ERROR cannot borrow\n+    g(&mut &mut b);\n+    //~^ ERROR cannot borrow\n }\n \n-fn f(b: &mut i32) {\n-    g(&mut b) //~ ERROR cannot borrow\n-}\n-\n-fn g(_: &mut i32) {}\n+pub fn g(_: &mut i32) {}"}, {"sha": "8710f2046986887e82003767a70585630e47f9ab", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.stderr", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3525087ada7018ef227b10846648660b7f07b6d1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3525087ada7018ef227b10846648660b7f07b6d1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr?ref=3525087ada7018ef227b10846648660b7f07b6d1", "patch": "@@ -1,11 +1,21 @@\n error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:8:7\n+  --> $DIR/mut-borrow-of-mut-ref.rs:5:7\n    |\n-LL | fn f(b: &mut i32) {\n-   |      - help: consider changing this to be mutable: `mut b`\n-LL |     g(&mut b)\n-   |       ^^^^^^ cannot borrow as mutable\n+LL |     g(&mut b);\n+   |       ^^^^^^\n+   |       |\n+   |       cannot borrow as mutable\n+   |       try removing `&mut` here\n \n-error: aborting due to previous error\n+error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n+  --> $DIR/mut-borrow-of-mut-ref.rs:7:12\n+   |\n+LL |     g(&mut &mut b);\n+   |            ^^^^^^\n+   |            |\n+   |            cannot borrow as mutable\n+   |            try removing `&mut` here\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}]}