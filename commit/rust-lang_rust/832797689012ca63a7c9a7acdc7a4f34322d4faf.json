{"sha": "832797689012ca63a7c9a7acdc7a4f34322d4faf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMjc5NzY4OTAxMmNhNjNhN2M5YTdhY2RjN2E0ZjM0MzIyZDRmYWY=", "commit": {"author": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2018-10-03T09:47:09Z"}, "committer": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2018-10-03T11:57:47Z"}, "message": "Remove duplicate predicates in `explicit_predicates_of`\nFixes #52187.", "tree": {"sha": "2ba255d75bb953a1f6a8a5fd990f6d61f92f7ecb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ba255d75bb953a1f6a8a5fd990f6d61f92f7ecb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/832797689012ca63a7c9a7acdc7a4f34322d4faf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/832797689012ca63a7c9a7acdc7a4f34322d4faf", "html_url": "https://github.com/rust-lang/rust/commit/832797689012ca63a7c9a7acdc7a4f34322d4faf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/832797689012ca63a7c9a7acdc7a4f34322d4faf/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e812ca472a2a5284e9f15cd9af32285d7ff3fd39", "url": "https://api.github.com/repos/rust-lang/rust/commits/e812ca472a2a5284e9f15cd9af32285d7ff3fd39", "html_url": "https://github.com/rust-lang/rust/commit/e812ca472a2a5284e9f15cd9af32285d7ff3fd39"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "f96c85ae7ae3fc497036a0e1a19cb0ecfa097384", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/832797689012ca63a7c9a7acdc7a4f34322d4faf/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832797689012ca63a7c9a7acdc7a4f34322d4faf/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=832797689012ca63a7c9a7acdc7a4f34322d4faf", "patch": "@@ -1637,9 +1637,39 @@ fn explicit_predicates_of<'a, 'tcx>(\n     def_id: DefId,\n ) -> ty::GenericPredicates<'tcx> {\n     use rustc::hir::*;\n+    use rustc_data_structures::fx::FxHashSet;\n \n     debug!(\"explicit_predicates_of(def_id={:?})\", def_id);\n \n+    /// A data structure with unique elements, which preserves order of insertion.\n+    /// Preserving the order of insertion is important here so as not to break\n+    /// compile-fail UI tests.\n+    struct UniquePredicates<'tcx> {\n+        predicates: Vec<(ty::Predicate<'tcx>, Span)>,\n+        uniques: FxHashSet<(ty::Predicate<'tcx>, Span)>,\n+    }\n+\n+    impl<'tcx> UniquePredicates<'tcx> {\n+        fn new() -> Self {\n+            UniquePredicates {\n+                predicates: vec![],\n+                uniques: FxHashSet::default(),\n+            }\n+        }\n+\n+        fn push(&mut self, value: (ty::Predicate<'tcx>, Span)) {\n+            if self.uniques.insert(value) {\n+                self.predicates.push(value);\n+            }\n+        }\n+\n+        fn extend<I: IntoIterator<Item = (ty::Predicate<'tcx>, Span)>>(&mut self, iter: I) {\n+            for value in iter {\n+                self.push(value);\n+            }\n+        }\n+    }\n+\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n     let node = tcx.hir.get(node_id);\n \n@@ -1649,7 +1679,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n     let icx = ItemCtxt::new(tcx, def_id);\n     let no_generics = hir::Generics::empty();\n \n-    let mut predicates = vec![];\n+    let mut predicates = UniquePredicates::new();\n \n     let ast_generics = match node {\n         Node::TraitItem(item) => &item.generics,\n@@ -1744,7 +1774,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n     // on a trait we need to add in the supertrait bounds and bounds found on\n     // associated types.\n     if let Some((_trait_ref, _)) = is_trait {\n-        predicates = tcx.super_predicates_of(def_id).predicates;\n+        predicates.extend(tcx.super_predicates_of(def_id).predicates);\n     }\n \n     // In default impls, we can assume that the self type implements\n@@ -1895,6 +1925,8 @@ fn explicit_predicates_of<'a, 'tcx>(\n         }))\n     }\n \n+    let mut predicates = predicates.predicates;\n+\n     // Subtle: before we store the predicates into the tcx, we\n     // sort them so that predicates like `T: Foo<Item=U>` come\n     // before uses of `U`.  This avoids false ambiguity errors"}, {"sha": "4a3e14ac034721e712f53e07ad4fde770f20056f", "filename": "src/test/ui/chalkify/lower_env1.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/832797689012ca63a7c9a7acdc7a4f34322d4faf/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/832797689012ca63a7c9a7acdc7a4f34322d4faf/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr?ref=832797689012ca63a7c9a7acdc7a4f34322d4faf", "patch": "@@ -5,9 +5,8 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n-   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo), WellFormed(Self: Foo).\n+   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo).\n \n error: program clause dump\n   --> $DIR/lower_env1.rs:19:1\n@@ -16,11 +15,10 @@ LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n-   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Foo) :- FromEnv(Self: Foo).\n    = note: Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo), WellFormed(Self: Foo).\n+   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo).\n    = note: WellFormed(Self: Foo) :- Implemented(Self: Foo).\n    = note: WellFormed(Self: std::marker::Sized) :- Implemented(Self: std::marker::Sized).\n "}]}