{"sha": "9fcebbc51284408203c05219a0ee92519f51ea74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmY2ViYmM1MTI4NDQwODIwM2MwNTIxOWEwZWU5MjUxOWY1MWVhNzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-30T13:27:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-30T13:27:09Z"}, "message": "subscriptions", "tree": {"sha": "5fd3f53769e3fe5b8f6a0d2a5eaa86167b7a3b10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd3f53769e3fe5b8f6a0d2a5eaa86167b7a3b10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fcebbc51284408203c05219a0ee92519f51ea74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fcebbc51284408203c05219a0ee92519f51ea74", "html_url": "https://github.com/rust-lang/rust/commit/9fcebbc51284408203c05219a0ee92519f51ea74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fcebbc51284408203c05219a0ee92519f51ea74/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7570d85869da7e2d35958047f8d1a90e3b6e2212", "url": "https://api.github.com/repos/rust-lang/rust/commits/7570d85869da7e2d35958047f8d1a90e3b6e2212", "html_url": "https://github.com/rust-lang/rust/commit/7570d85869da7e2d35958047f8d1a90e3b6e2212"}], "stats": {"total": 146, "additions": 85, "deletions": 61}, "files": [{"sha": "97802bd5047f043e3408b2754ce76dd41372413c", "filename": "crates/libanalysis/src/imp.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9fcebbc51284408203c05219a0ee92519f51ea74/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcebbc51284408203c05219a0ee92519f51ea74/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fimp.rs?ref=9fcebbc51284408203c05219a0ee92519f51ea74", "patch": "@@ -39,11 +39,11 @@ impl AnalysisHostImpl {\n \n     pub fn analysis(\n         &self,\n-        file_resolver: impl FileResolver,\n+        file_resolver: Arc<dyn FileResolver>,\n     ) -> AnalysisImpl {\n         AnalysisImpl {\n             needs_reindex: AtomicBool::new(false),\n-            file_resolver: Arc::new(file_resolver),\n+            file_resolver,\n             data: self.data.clone(),\n         }\n     }\n@@ -78,7 +78,7 @@ impl AnalysisHostImpl {\n \n pub(crate) struct AnalysisImpl {\n     needs_reindex: AtomicBool,\n-    file_resolver: Arc<FileResolver>,\n+    file_resolver: Arc<dyn FileResolver>,\n     data: Arc<WorldData>,\n }\n \n@@ -236,15 +236,13 @@ impl AnalysisImpl {\n             (\"add `#[derive]`\", libeditor::add_derive(&file, offset).map(|f| f())),\n             (\"add impl\", libeditor::add_impl(&file, offset).map(|f| f())),\n         ];\n-        let mut res = Vec::new();\n-        for (name, local_edit) in actions {\n-            if let Some(local_edit) = local_edit {\n-                res.push(SourceChange::from_local_edit(\n-                    file_id, name, local_edit\n+        actions.into_iter()\n+            .filter_map(|(name, local_edit)| {\n+                Some(SourceChange::from_local_edit(\n+                    file_id, name, local_edit?,\n                 ))\n-            }\n-        }\n-        res\n+            })\n+            .collect()\n     }\n \n     fn index_resolve(&self, name_ref: ast::NameRef) -> Vec<(FileId, FileSymbol)> {"}, {"sha": "c25d31f4bcb16b9c6b8bb10c29c237c0382caaed", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fcebbc51284408203c05219a0ee92519f51ea74/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcebbc51284408203c05219a0ee92519f51ea74/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=9fcebbc51284408203c05219a0ee92519f51ea74", "patch": "@@ -12,6 +12,8 @@ mod symbol_index;\n mod module_map;\n mod imp;\n \n+use std::sync::Arc;\n+\n use relative_path::{RelativePath, RelativePathBuf};\n use libsyntax2::{File, TextRange, TextUnit, AtomEdit};\n use imp::{AnalysisImpl, AnalysisHostImpl};\n@@ -31,15 +33,15 @@ pub trait FileResolver: Send + Sync + 'static {\n \n #[derive(Debug)]\n pub struct AnalysisHost {\n-    pub(crate) imp: AnalysisHostImpl\n+    imp: AnalysisHostImpl\n }\n \n impl AnalysisHost {\n     pub fn new() -> AnalysisHost {\n         AnalysisHost { imp: AnalysisHostImpl::new() }\n     }\n     pub fn analysis(&self, file_resolver: impl FileResolver) -> Analysis {\n-        Analysis { imp: self.imp.analysis(file_resolver) }\n+        Analysis { imp: self.imp.analysis(Arc::new(file_resolver)) }\n     }\n     pub fn change_file(&mut self, file_id: FileId, text: Option<String>) {\n         self.change_files(::std::iter::once((file_id, text)));\n@@ -121,7 +123,7 @@ impl Query {\n \n #[derive(Clone, Debug)]\n pub struct Analysis {\n-    pub(crate) imp: AnalysisImpl\n+    imp: AnalysisImpl\n }\n \n impl Analysis {"}, {"sha": "6b70399b07fbd901f9ce13627ce2db5d52a4fede", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fcebbc51284408203c05219a0ee92519f51ea74/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcebbc51284408203c05219a0ee92519f51ea74/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=9fcebbc51284408203c05219a0ee92519f51ea74", "patch": "@@ -1,7 +1,7 @@\n use std::collections::HashMap;\n \n use languageserver_types::{\n-    Diagnostic, DiagnosticSeverity, Url, DocumentSymbol,\n+    Diagnostic, DiagnosticSeverity, DocumentSymbol,\n     Command, TextDocumentIdentifier,\n     SymbolInformation, Position, Location, TextEdit,\n     CompletionItem, InsertTextFormat, CompletionItemKind,\n@@ -325,9 +325,9 @@ pub fn handle_code_action(\n \n pub fn publish_diagnostics(\n     world: ServerWorld,\n-    uri: Url\n+    file_id: FileId,\n ) -> Result<req::PublishDiagnosticsParams> {\n-    let file_id = world.uri_to_file_id(&uri)?;\n+    let uri = world.file_id_to_uri(file_id)?;\n     let line_index = world.analysis().file_line_index(file_id);\n     let diagnostics = world.analysis().diagnostics(file_id)\n         .into_iter()\n@@ -344,9 +344,9 @@ pub fn publish_diagnostics(\n \n pub fn publish_decorations(\n     world: ServerWorld,\n-    uri: Url\n+    file_id: FileId,\n ) -> Result<req::PublishDecorationsParams> {\n-    let file_id = world.uri_to_file_id(&uri)?;\n+    let uri = world.file_id_to_uri(file_id)?;\n     Ok(req::PublishDecorationsParams {\n         uri,\n         decorations: highlight(&world, file_id),"}, {"sha": "cd17cab56916916854805903e4b15e6a1ca1ffc8", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 41, "deletions": 39, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9fcebbc51284408203c05219a0ee92519f51ea74/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcebbc51284408203c05219a0ee92519f51ea74/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=9fcebbc51284408203c05219a0ee92519f51ea74", "patch": "@@ -1,19 +1,21 @@\n mod handlers;\n+mod subscriptions;\n \n use std::{\n     collections::{HashSet},\n };\n \n use threadpool::ThreadPool;\n use crossbeam_channel::{Sender, Receiver};\n-use languageserver_types::Url;\n+use libanalysis::FileId;\n \n use {\n     req, dispatch,\n     Task, Result,\n     io::{Io, RawMsg, RawRequest, RawNotification},\n     vfs::FileEvent,\n     server_world::{ServerWorldState, ServerWorld},\n+    main_loop::subscriptions::{Subscriptions},\n };\n \n pub(super) fn main_loop(\n@@ -28,6 +30,7 @@ pub(super) fn main_loop(\n \n     let mut pending_requests: HashSet<u64> = HashSet::new();\n     let mut fs_events_receiver = Some(&fs_events_receiver);\n+    let mut subs = Subscriptions::new();\n     loop {\n         enum Event {\n             Msg(RawMsg),\n@@ -47,7 +50,7 @@ pub(super) fn main_loop(\n                 None => Event::FsWatcherDead,\n             }\n         };\n-\n+        let mut state_changed = false;\n         match event {\n             Event::ReceiverDead => {\n                 io.cleanup_receiver()?;\n@@ -70,6 +73,7 @@ pub(super) fn main_loop(\n             Event::Fs(events) => {\n                 trace!(\"fs change, {} events\", events.len());\n                 state.apply_fs_changes(events);\n+                state_changed = true;\n             }\n             Event::Msg(msg) => {\n                 match msg {\n@@ -79,7 +83,8 @@ pub(super) fn main_loop(\n                         }\n                     }\n                     RawMsg::Notification(not) => {\n-                        on_notification(io, &mut state, pool, &task_sender, not)?\n+                        on_notification(io, &mut state, &mut subs, not)?;\n+                        state_changed = true;\n                     }\n                     RawMsg::Response(resp) => {\n                         if !pending_requests.remove(&resp.id) {\n@@ -89,6 +94,15 @@ pub(super) fn main_loop(\n                 }\n             }\n         };\n+\n+        if state_changed {\n+            update_file_notifications_on_threadpool(\n+                pool,\n+                state.snapshot(),\n+                task_sender.clone(),\n+                subs.subscriptions(),\n+            )\n+        }\n     }\n }\n \n@@ -140,22 +154,16 @@ fn on_request(\n fn on_notification(\n     io: &mut Io,\n     state: &mut ServerWorldState,\n-    pool: &ThreadPool,\n-    sender: &Sender<Task>,\n+    subs: &mut Subscriptions,\n     not: RawNotification,\n ) -> Result<()> {\n     let mut not = Some(not);\n     dispatch::handle_notification::<req::DidOpenTextDocument, _>(&mut not, |params| {\n         let uri = params.text_document.uri;\n         let path = uri.to_file_path()\n             .map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n-        state.add_mem_file(path, params.text_document.text);\n-        update_file_notifications_on_threadpool(\n-            pool,\n-            state.snapshot(),\n-            sender.clone(),\n-            uri,\n-        );\n+        let file_id = state.add_mem_file(path, params.text_document.text);\n+        subs.add_sub(file_id);\n         Ok(())\n     })?;\n     dispatch::handle_notification::<req::DidChangeTextDocument, _>(&mut not, |mut params| {\n@@ -166,23 +174,15 @@ fn on_notification(\n             .ok_or_else(|| format_err!(\"empty changes\"))?\n             .text;\n         state.change_mem_file(path.as_path(), text)?;\n-        update_file_notifications_on_threadpool(\n-            pool,\n-            state.snapshot(),\n-            sender.clone(),\n-            uri,\n-        );\n         Ok(())\n     })?;\n     dispatch::handle_notification::<req::DidCloseTextDocument, _>(&mut not, |params| {\n         let uri = params.text_document.uri;\n         let path = uri.to_file_path()\n             .map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n-        state.remove_mem_file(path.as_path())?;\n-        let not = req::PublishDiagnosticsParams {\n-            uri,\n-            diagnostics: Vec::new(),\n-        };\n+        let file_id = state.remove_mem_file(path.as_path())?;\n+        subs.remove_sub(file_id);\n+        let not = req::PublishDiagnosticsParams { uri, diagnostics: Vec::new() };\n         let not = dispatch::send_notification::<req::PublishDiagnostics>(not);\n         io.send(RawMsg::Notification(not));\n         Ok(())\n@@ -227,25 +227,27 @@ fn update_file_notifications_on_threadpool(\n     pool: &ThreadPool,\n     world: ServerWorld,\n     sender: Sender<Task>,\n-    uri: Url,\n+    subscriptions: Vec<FileId>,\n ) {\n     pool.execute(move || {\n-        match handlers::publish_diagnostics(world.clone(), uri.clone()) {\n-            Err(e) => {\n-                error!(\"failed to compute diagnostics: {:?}\", e)\n-            }\n-            Ok(params) => {\n-                let not = dispatch::send_notification::<req::PublishDiagnostics>(params);\n-                sender.send(Task::Notify(not));\n-            }\n-        }\n-        match handlers::publish_decorations(world, uri) {\n-            Err(e) => {\n-                error!(\"failed to compute decorations: {:?}\", e)\n+        for file_id in subscriptions {\n+            match handlers::publish_diagnostics(world.clone(), file_id) {\n+                Err(e) => {\n+                    error!(\"failed to compute diagnostics: {:?}\", e)\n+                }\n+                Ok(params) => {\n+                    let not = dispatch::send_notification::<req::PublishDiagnostics>(params);\n+                    sender.send(Task::Notify(not));\n+                }\n             }\n-            Ok(params) => {\n-                let not = dispatch::send_notification::<req::PublishDecorations>(params);\n-                sender.send(Task::Notify(not))\n+            match handlers::publish_decorations(world.clone(), file_id) {\n+                Err(e) => {\n+                    error!(\"failed to compute decorations: {:?}\", e)\n+                }\n+                Ok(params) => {\n+                    let not = dispatch::send_notification::<req::PublishDecorations>(params);\n+                    sender.send(Task::Notify(not))\n+                }\n             }\n         }\n     });"}, {"sha": "963096aefe6227f221b688e24ab63e94a483707f", "filename": "crates/server/src/main_loop/subscriptions.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9fcebbc51284408203c05219a0ee92519f51ea74/crates%2Fserver%2Fsrc%2Fmain_loop%2Fsubscriptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcebbc51284408203c05219a0ee92519f51ea74/crates%2Fserver%2Fsrc%2Fmain_loop%2Fsubscriptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fsubscriptions.rs?ref=9fcebbc51284408203c05219a0ee92519f51ea74", "patch": "@@ -0,0 +1,21 @@\n+use std::collections::HashSet;\n+use libanalysis::FileId;\n+\n+pub struct Subscriptions {\n+    subs: HashSet<FileId>,\n+}\n+\n+impl Subscriptions {\n+    pub fn new() -> Subscriptions {\n+        Subscriptions { subs: HashSet::new() }\n+    }\n+    pub fn add_sub(&mut self, file_id: FileId) {\n+        self.subs.insert(file_id);\n+    }\n+    pub fn remove_sub(&mut self, file_id: FileId) {\n+        self.subs.remove(&file_id);\n+    }\n+    pub fn subscriptions(&self) -> Vec<FileId> {\n+        self.subs.iter().cloned().collect()\n+    }\n+}"}, {"sha": "d99ef661e2b5c90d051ab9aa6de0d945f716e27a", "filename": "crates/server/src/server_world.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fcebbc51284408203c05219a0ee92519f51ea74/crates%2Fserver%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcebbc51284408203c05219a0ee92519f51ea74/crates%2Fserver%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fserver_world.rs?ref=9fcebbc51284408203c05219a0ee92519f51ea74", "patch": "@@ -61,10 +61,11 @@ impl ServerWorldState {\n         self.analysis_host.change_files(changes);\n     }\n \n-    pub fn add_mem_file(&mut self, path: PathBuf, text: String) {\n+    pub fn add_mem_file(&mut self, path: PathBuf, text: String) -> FileId {\n         let file_id = self.path_map.get_or_insert(path);\n         self.mem_map.insert(file_id, None);\n         self.analysis_host.change_file(file_id, Some(text));\n+        file_id\n     }\n \n     pub fn change_mem_file(&mut self, path: &Path, text: String) -> Result<()> {\n@@ -75,7 +76,7 @@ impl ServerWorldState {\n         Ok(())\n     }\n \n-    pub fn remove_mem_file(&mut self, path: &Path) -> Result<()> {\n+    pub fn remove_mem_file(&mut self, path: &Path) -> Result<FileId> {\n         let file_id = self.path_map.get_id(path).ok_or_else(|| {\n             format_err!(\"change to unknown file: {}\", path.display())\n         })?;\n@@ -86,7 +87,7 @@ impl ServerWorldState {\n         // Do this via file watcher ideally.\n         let text = fs::read_to_string(path).ok();\n         self.analysis_host.change_file(file_id, text);\n-        Ok(())\n+        Ok(file_id)\n     }\n \n     pub fn snapshot(&self) -> ServerWorld {"}]}