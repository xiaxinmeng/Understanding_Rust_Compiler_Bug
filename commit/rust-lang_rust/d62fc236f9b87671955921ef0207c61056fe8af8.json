{"sha": "d62fc236f9b87671955921ef0207c61056fe8af8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MmZjMjM2ZjliODc2NzE5NTU5MjFlZjAyMDdjNjEwNTZmZThhZjg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-18T16:15:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:31Z"}, "message": "Refactor to address comments", "tree": {"sha": "2d5bb7cc721f74f197c249e8057d9b0bf8c57034", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d5bb7cc721f74f197c249e8057d9b0bf8c57034"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d62fc236f9b87671955921ef0207c61056fe8af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d62fc236f9b87671955921ef0207c61056fe8af8", "html_url": "https://github.com/rust-lang/rust/commit/d62fc236f9b87671955921ef0207c61056fe8af8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d62fc236f9b87671955921ef0207c61056fe8af8/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df1c256a2b1e7c68f343f40a870fa762a63a0a05", "url": "https://api.github.com/repos/rust-lang/rust/commits/df1c256a2b1e7c68f343f40a870fa762a63a0a05", "html_url": "https://github.com/rust-lang/rust/commit/df1c256a2b1e7c68f343f40a870fa762a63a0a05"}], "stats": {"total": 135, "additions": 60, "deletions": 75}, "files": [{"sha": "7c68d5522fcc39cb6e1cc6124ea0f2cde2c25d6f", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=d62fc236f9b87671955921ef0207c61056fe8af8", "patch": "@@ -387,7 +387,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n }\n \n pub(super) fn is_object_safe_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                         trait_def_id: DefId)\n-                                         -> bool {\n+                                                trait_def_id: DefId) -> bool {\n     tcx.object_safety_violations(trait_def_id).is_empty()\n }"}, {"sha": "635713a7866508e4a36d91d766a569e076b7634b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d62fc236f9b87671955921ef0207c61056fe8af8", "patch": "@@ -767,7 +767,14 @@ impl GenericParamDef {\n     pub fn index(&self) -> u32 {\n         match self {\n             GenericParamDef::Lifetime(lt) => lt.index,\n-            GenericParamDef::Type(ty)     => ty.index,\n+            GenericParamDef::Type(ty) => ty.index,\n+        }\n+    }\n+\n+    pub fn def_id(&self) -> DefId {\n+        match self {\n+            GenericParamDef::Lifetime(lt) => lt.def_id,\n+            GenericParamDef::Type(ty) => ty.def_id,\n         }\n     }\n \n@@ -795,7 +802,7 @@ pub struct Generics {\n     pub parent_count: usize,\n     pub params: Vec<GenericParamDef>,\n \n-    /// Reverse map to each `TypeParamDef`'s `index` field\n+    /// Reverse map to the `index` field of each `GenericParamDef`'s inner type\n     pub param_def_id_to_index: FxHashMap<DefId, u32>,\n \n     pub has_self: bool,\n@@ -826,18 +833,6 @@ impl<'a, 'gcx, 'tcx> Generics {\n         param_counts\n     }\n \n-    pub fn type_params_without_defaults(&self) -> usize {\n-        let mut count = 0;\n-        for param in self.params.iter() {\n-            if let GenericParamDef::Type(ty) = param {\n-                if !ty.has_default {\n-                    count += 1\n-                }\n-            }\n-        }\n-        count\n-    }\n-\n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n         if self.params.iter().any(|p| p.get_type().is_some()) {\n             return true;"}, {"sha": "0808cc84bf7aaf9fe61abf10b1bfa86ae6404429", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=d62fc236f9b87671955921ef0207c61056fe8af8", "patch": "@@ -241,25 +241,12 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                            mk_type: &mut FT)\n     where FR: FnMut(&ty::RegionParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n           FT: FnMut(&ty::TypeParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n-        // Handle Self first, before all regions.\n-        let mut skip_self = defs.parent.is_none() && defs.has_self;\n-        if skip_self {\n-            let def = defs.params.iter().find_map(|p| p.get_type()).unwrap();\n-            let ty = mk_type(&def, substs);\n-            assert_eq!(def.index as usize, substs.len());\n-            substs.push(ty.into());\n-        }\n-\n         for def in &defs.params {\n             let param = match def {\n                 ty::GenericParamDef::Lifetime(ref lt) => {\n                     mk_region(lt, substs).into()\n                 }\n                 ty::GenericParamDef::Type(ref ty) => {\n-                    if skip_self {\n-                        skip_self = false;\n-                        continue\n-                    }\n                     mk_type(ty, substs).into()\n                 }\n             };"}, {"sha": "f333968829286af0eb6cf7d49b8a61e9ef6143f6", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=d62fc236f9b87671955921ef0207c61056fe8af8", "patch": "@@ -280,12 +280,7 @@ crate fn adt_dtorck_constraint<'a, 'tcx>(\n     if def.is_phantom_data() {\n         let result = DtorckConstraint {\n             outlives: vec![],\n-            dtorck_types: vec![tcx.mk_param_from_def(\n-                &tcx.generics_of(def_id)\n-                    .params\n-                    .iter()\n-                    .find_map(|p| p.get_type())\n-                    .expect(\"should be at least one type parameter\"))],\n+            dtorck_types: vec![tcx.mk_param_from_def(&tcx.generics_of(def_id).params[0].get_type().unwrap())],\n             overflows: vec![],\n         };\n         debug!(\"dtorck_constraint: {:?} => {:?}\", def, result);"}, {"sha": "31ef1eddfcbf5a648083709615fdb8b3d19f159f", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=d62fc236f9b87671955921ef0207c61056fe8af8", "patch": "@@ -25,7 +25,7 @@ use llvm::{ModuleRef, ContextRef, ValueRef};\n use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArray, DIFlags};\n use rustc::hir::TransFnAttrFlags;\n use rustc::hir::def_id::{DefId, CrateNum};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{Substs, UnpackedKind};\n use rustc::ty::GenericParamDef;\n \n use abi::Abi;\n@@ -197,12 +197,6 @@ pub fn finalize(cx: &CodegenCx) {\n     };\n }\n \n-#[derive(PartialEq, Eq, Hash)]\n-pub enum Kind {\n-    Lifetime,\n-    Type,\n-}\n-\n /// Creates the function-specific debug context.\n ///\n /// Returns the FunctionDebugContext for the function which holds state needed\n@@ -398,27 +392,25 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         // Again, only create type information if full debuginfo is enabled\n         let template_params: Vec<_> = if cx.sess().opts.debuginfo == FullDebugInfo {\n             let names = get_parameter_names(cx, generics);\n-            let names = names.iter().flat_map(|(kind, param)| {\n-                if kind == &Kind::Type {\n-                    Some(param)\n+            substs.iter().zip(names).filter_map(|(kind, name)| {\n+                if let UnpackedKind::Type(ty) = kind.unpack() {\n+                    let actual_type = cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n+                    let actual_type_metadata =\n+                        type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n+                    let name = CString::new(name.as_str().as_bytes()).unwrap();\n+                    Some(unsafe {\n+                        llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n+                            DIB(cx),\n+                            ptr::null_mut(),\n+                            name.as_ptr(),\n+                            actual_type_metadata,\n+                            file_metadata,\n+                            0,\n+                            0)\n+                    })\n                 } else {\n                     None\n                 }\n-            });\n-            substs.types().zip(names).map(|(ty, name)| {\n-                let actual_type = cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n-                let actual_type_metadata = type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n-                let name = CString::new(name.as_str().as_bytes()).unwrap();\n-                unsafe {\n-                    llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n-                        DIB(cx),\n-                        ptr::null_mut(),\n-                        name.as_ptr(),\n-                        actual_type_metadata,\n-                        file_metadata,\n-                        0,\n-                        0)\n-                }\n             }).collect()\n         } else {\n             vec![]\n@@ -429,14 +421,14 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n     fn get_parameter_names(cx: &CodegenCx,\n                            generics: &ty::Generics)\n-                           -> Vec<(Kind, InternedString)> {\n+                           -> Vec<InternedString> {\n         let mut names = generics.parent.map_or(vec![], |def_id| {\n             get_parameter_names(cx, cx.tcx.generics_of(def_id))\n         });\n         names.extend(generics.params.iter().map(|param| {\n             match param {\n-                GenericParamDef::Lifetime(lt) => (Kind::Lifetime, lt.name),\n-                GenericParamDef::Type(ty) => (Kind::Type, ty.name),\n+                GenericParamDef::Lifetime(lt) => lt.name,\n+                GenericParamDef::Type(ty) => ty.name,\n             }\n         }));\n         names"}, {"sha": "84d94539f743681e16898dd7c5b1879c765e392e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d62fc236f9b87671955921ef0207c61056fe8af8", "patch": "@@ -225,11 +225,23 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let type_params_offset = self_ty.is_some() as usize;\n         let ty_param_defs = param_counts.types - type_params_offset;\n         if !infer_types || num_types_provided > ty_param_defs {\n+            let type_params_without_defaults = {\n+                let mut count = 0;\n+                for param in decl_generics.params.iter() {\n+                    if let ty::GenericParamDef::Type(ty) = param {\n+                        if !ty.has_default {\n+                            count += 1\n+                        }\n+                    }\n+                }\n+                count\n+            };\n+\n             check_type_argument_count(tcx,\n                 span,\n                 num_types_provided,\n                 ty_param_defs,\n-                decl_generics.type_params_without_defaults() - type_params_offset);\n+                type_params_without_defaults - type_params_offset);\n         }\n \n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);"}, {"sha": "f860c1358a6daaeded71a6610acac6f021d8ef07", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d62fc236f9b87671955921ef0207c61056fe8af8", "patch": "@@ -4925,8 +4925,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let type_params_offset\n                     = (generics.parent.is_none() && generics.has_self) as usize;\n                 let type_params = param_counts.types - type_params_offset;\n+                let type_params_without_defaults = {\n+                    let mut count = 0;\n+                    for param in generics.params.iter() {\n+                        if let ty::GenericParamDef::Type(ty) = param {\n+                            if !ty.has_default {\n+                                count += 1\n+                            }\n+                        }\n+                    }\n+                    count\n+                };\n                 let type_params_barring_defaults =\n-                    generics.type_params_without_defaults() - type_params_offset;\n+                    type_params_without_defaults - type_params_offset;\n \n                 (type_params_barring_defaults, type_params, param_counts.lifetimes)\n             });"}, {"sha": "75380c685daa391b33bf5251a04769ccbd3a4540", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d62fc236f9b87671955921ef0207c61056fe8af8", "patch": "@@ -662,7 +662,7 @@ fn reject_shadowing_parameters(tcx: TyCtxt, def_id: DefId) {\n                      .collect();\n \n     for method_param in generics.params.iter() {\n-        // Shadowing is currently permitted with lifetimes.\n+        // Shadowing is checked in resolve_lifetime.\n         if let GenericParamDef::Lifetime(_) = method_param {\n             continue;\n         }"}, {"sha": "b8c78c7b36a5e0c597721d8f6f97ba827c078b04", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62fc236f9b87671955921ef0207c61056fe8af8/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d62fc236f9b87671955921ef0207c61056fe8af8", "patch": "@@ -973,15 +973,9 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  .chain(types)\n                                  .collect();\n \n-    let param_def_id_to_index =\n-        params.iter()\n-              .map(|param| {\n-                  match param {\n-                      ty::GenericParamDef::Lifetime(lt) => (lt.def_id, lt.index),\n-                      ty::GenericParamDef::Type(ty) => (ty.def_id, ty.index),\n-                  }\n-              })\n-              .collect();\n+    let param_def_id_to_index = params.iter()\n+                                      .map(|param| (param.def_id(), param.index()))\n+                                      .collect();\n \n     tcx.alloc_generics(ty::Generics {\n         parent: parent_def_id,"}]}