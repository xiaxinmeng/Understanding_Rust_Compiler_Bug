{"sha": "a13c7da23e65d0c6d2b5c9402cd7db76d50e6131", "node_id": "C_kwDOAAsO6NoAKGExM2M3ZGEyM2U2NWQwYzZkMmI1Yzk0MDJjZDdkYjc2ZDUwZTYxMzE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-11T16:59:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-11T16:59:50Z"}, "message": "Rollup merge of #102893 - TaKO8Ki:fix-102878, r=davidtwco\n\nFix ICE #102878\n\nFixes #102878", "tree": {"sha": "41ab04a4f0013bcdef1543dd6cc341a30b1796ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41ab04a4f0013bcdef1543dd6cc341a30b1796ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a13c7da23e65d0c6d2b5c9402cd7db76d50e6131", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRaEGCRBK7hj4Ov3rIwAAfuEIAEfkQWtLe9W+/Ihp9i0YpDEY\nbCaELbMHUNje1O1z6VvVkPir9ne4tYKGVPlBk+AnWnIL7r5ITW1G18K3bHcm1qMN\nL7JEaf8UV483K2l4HBKsu/l7qrV1JWdMcsLLe8ZSXwjl3JnIW4SnuFIdAmYIt/9G\nFl4wkAgIbc/kbj+t8OEWYfEYD9jxc7kBkPumtHABhnaa52o2epV2jkLTqcBrEC/d\nlcpSp6udR0PZ3qLDIuhkj9VxqJ6FSW8pjU/xF+tBNuMxDBLb4pYftCoX59ljLPd+\nVL9sRlnhclo8+U2DE64aWptYC9hlaFiL8R3flxQyAfv94WtUXMPx4hO9QLDM5nY=\n=+Jni\n-----END PGP SIGNATURE-----\n", "payload": "tree 41ab04a4f0013bcdef1543dd6cc341a30b1796ae\nparent cb6728339298a83cf18df7f941a57628be4cf6e8\nparent 68260289b5afa6728c32378c581e67c714ea4263\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665507590 +0200\ncommitter GitHub <noreply@github.com> 1665507590 +0200\n\nRollup merge of #102893 - TaKO8Ki:fix-102878, r=davidtwco\n\nFix ICE #102878\n\nFixes #102878\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a13c7da23e65d0c6d2b5c9402cd7db76d50e6131", "html_url": "https://github.com/rust-lang/rust/commit/a13c7da23e65d0c6d2b5c9402cd7db76d50e6131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a13c7da23e65d0c6d2b5c9402cd7db76d50e6131/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb6728339298a83cf18df7f941a57628be4cf6e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6728339298a83cf18df7f941a57628be4cf6e8", "html_url": "https://github.com/rust-lang/rust/commit/cb6728339298a83cf18df7f941a57628be4cf6e8"}, {"sha": "68260289b5afa6728c32378c581e67c714ea4263", "url": "https://api.github.com/repos/rust-lang/rust/commits/68260289b5afa6728c32378c581e67c714ea4263", "html_url": "https://github.com/rust-lang/rust/commit/68260289b5afa6728c32378c581e67c714ea4263"}], "stats": {"total": 102, "additions": 81, "deletions": 21}, "files": [{"sha": "a2d507328b3899dd5a6a3a165bfd7233a462bdff", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a13c7da23e65d0c6d2b5c9402cd7db76d50e6131/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13c7da23e65d0c6d2b5c9402cd7db76d50e6131/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=a13c7da23e65d0c6d2b5c9402cd7db76d50e6131", "patch": "@@ -337,19 +337,6 @@ impl DiagnosticMessage {\n             }\n         }\n     }\n-\n-    /// Returns the `String` contained within the `DiagnosticMessage::Str` variant, assuming that\n-    /// this diagnostic message is of the legacy, non-translatable variety. Panics if this\n-    /// assumption does not hold.\n-    ///\n-    /// Don't use this - it exists to support some places that do comparison with diagnostic\n-    /// strings.\n-    pub fn expect_str(&self) -> &str {\n-        match self {\n-            DiagnosticMessage::Str(s) => s,\n-            _ => panic!(\"expected non-translatable diagnostic message\"),\n-        }\n-    }\n }\n \n /// `From` impl that enables existing diagnostic calls to functions which now take"}, {"sha": "30aa4f0fa3482ea51b46e70a75fdc0e9b26d2e29", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a13c7da23e65d0c6d2b5c9402cd7db76d50e6131/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13c7da23e65d0c6d2b5c9402cd7db76d50e6131/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=a13c7da23e65d0c6d2b5c9402cd7db76d50e6131", "patch": "@@ -14,7 +14,7 @@ use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, TransparencyError};\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, DiagnosticMessage};\n use rustc_feature::Features;\n use rustc_lint_defs::builtin::{\n     RUST_2021_INCOMPATIBLE_OR_PATTERNS, SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n@@ -68,19 +68,22 @@ fn emit_frag_parse_err(\n     kind: AstFragmentKind,\n ) {\n     // FIXME(davidtwco): avoid depending on the error message text\n-    if parser.token == token::Eof && e.message[0].0.expect_str().ends_with(\", found `<eof>`\") {\n-        if !e.span.is_dummy() {\n-            // early end of macro arm (#52866)\n-            e.replace_span_with(parser.sess.source_map().next_point(parser.token.span));\n-        }\n+    if parser.token == token::Eof\n+        && let DiagnosticMessage::Str(message) = &e.message[0].0\n+        && message.ends_with(\", found `<eof>`\")\n+    {\n         let msg = &e.message[0];\n         e.message[0] = (\n-            rustc_errors::DiagnosticMessage::Str(format!(\n+            DiagnosticMessage::Str(format!(\n                 \"macro expansion ends with an incomplete expression: {}\",\n-                msg.0.expect_str().replace(\", found `<eof>`\", \"\"),\n+                message.replace(\", found `<eof>`\", \"\"),\n             )),\n             msg.1,\n         );\n+        if !e.span.is_dummy() {\n+            // early end of macro arm (#52866)\n+            e.replace_span_with(parser.sess.source_map().next_point(parser.token.span));\n+        }\n     }\n     if e.span.is_dummy() {\n         // Get around lack of span in error (#30128)"}, {"sha": "aac5891939e0ce823f9333fb7affcb831d3a0844", "filename": "src/test/ui/macros/issue-102878.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a13c7da23e65d0c6d2b5c9402cd7db76d50e6131/src%2Ftest%2Fui%2Fmacros%2Fissue-102878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13c7da23e65d0c6d2b5c9402cd7db76d50e6131/src%2Ftest%2Fui%2Fmacros%2Fissue-102878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-102878.rs?ref=a13c7da23e65d0c6d2b5c9402cd7db76d50e6131", "patch": "@@ -0,0 +1,10 @@\n+macro_rules!test{($l:expr,$_:r)=>({const:y y)}\n+//~^ ERROR mismatched closing delimiter: `)`\n+//~| ERROR invalid fragment specifier `r`\n+//~| ERROR expected identifier, found keyword `const`\n+//~| ERROR expected identifier, found keyword `const`\n+//~| ERROR expected identifier, found `:`\n+\n+fn s(){test!(1,i)}\n+\n+fn main() {}"}, {"sha": "e0b8855a38d05c23dde3282070f2c8a4aebee95f", "filename": "src/test/ui/macros/issue-102878.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a13c7da23e65d0c6d2b5c9402cd7db76d50e6131/src%2Ftest%2Fui%2Fmacros%2Fissue-102878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a13c7da23e65d0c6d2b5c9402cd7db76d50e6131/src%2Ftest%2Fui%2Fmacros%2Fissue-102878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-102878.stderr?ref=a13c7da23e65d0c6d2b5c9402cd7db76d50e6131", "patch": "@@ -0,0 +1,60 @@\n+error: mismatched closing delimiter: `)`\n+  --> $DIR/issue-102878.rs:1:35\n+   |\n+LL | macro_rules!test{($l:expr,$_:r)=>({const:y y)}\n+   |                                  -^         ^ mismatched closing delimiter\n+   |                                  ||\n+   |                                  |unclosed delimiter\n+   |                                  closing delimiter possibly meant for this\n+\n+error: invalid fragment specifier `r`\n+  --> $DIR/issue-102878.rs:1:27\n+   |\n+LL | macro_rules!test{($l:expr,$_:r)=>({const:y y)}\n+   |                           ^^^^\n+   |\n+   = help: valid fragment specifiers are `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, `literal`, `path`, `meta`, `tt`, `item` and `vis`\n+\n+error: expected identifier, found keyword `const`\n+  --> $DIR/issue-102878.rs:1:36\n+   |\n+LL | macro_rules!test{($l:expr,$_:r)=>({const:y y)}\n+   |                                    ^^^^^ expected identifier, found keyword\n+...\n+LL | fn s(){test!(1,i)}\n+   |        ---------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: escape `const` to use it as an identifier\n+   |\n+LL | macro_rules!test{($l:expr,$_:r)=>({r#const:y y)}\n+   |                                    ++\n+\n+error: expected identifier, found keyword `const`\n+  --> $DIR/issue-102878.rs:1:36\n+   |\n+LL | macro_rules!test{($l:expr,$_:r)=>({const:y y)}\n+   |                                    ^^^^^ expected identifier, found keyword\n+...\n+LL | fn s(){test!(1,i)}\n+   |        ---------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: escape `const` to use it as an identifier\n+   |\n+LL | macro_rules!test{($l:expr,$_:r)=>({r#const:y y)}\n+   |                                    ++\n+\n+error: expected identifier, found `:`\n+  --> $DIR/issue-102878.rs:1:41\n+   |\n+LL | macro_rules!test{($l:expr,$_:r)=>({const:y y)}\n+   |                                         ^ expected identifier\n+...\n+LL | fn s(){test!(1,i)}\n+   |        ---------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 5 previous errors\n+"}]}