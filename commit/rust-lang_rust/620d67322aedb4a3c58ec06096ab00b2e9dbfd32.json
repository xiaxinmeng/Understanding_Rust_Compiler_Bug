{"sha": "620d67322aedb4a3c58ec06096ab00b2e9dbfd32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMGQ2NzMyMmFlZGI0YTNjNThlYzA2MDk2YWIwMGIyZTlkYmZkMzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-18T09:08:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-18T09:08:00Z"}, "message": "Merge #5790\n\n5790: Revive cache cleaning\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9d88875b060e5b941ce58c389f4dab2dfbab278f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d88875b060e5b941ce58c389f4dab2dfbab278f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/620d67322aedb4a3c58ec06096ab00b2e9dbfd32", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfO5pxCRBK7hj4Ov3rIwAAdHIIABj4pL8wZZ0+38QXLahUi7/A\n7m0xnyssuG337K7ukRNxj8ExiaS+6ewZ4E1gQqKsg58yR95uqDvH5ayal4JvC0VH\ncmr8kN0HhOPnciYukAJWkvZfvJCIJTlyLbqmHLxm4EC4EyypHSlBP3z/g2+tybLA\n43gucZzAqRdlrjX3Ij1X0/D+paq+D2yIulvHTJSwtuy4kwGiFkadCj1npsOdMaSB\n20BnV+e5nk1J50MbLaR+Aa5H1s1veRusaO68hM1UF8NnijMsgNdo5C8nDY2tBBfx\nLQ4fRKr7N3nApAtURtnkXpOzEKcyAi3SN9RlZcOVyQiSxHcYdC0UVgm1aOsG20Y=\n=6m1e\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d88875b060e5b941ce58c389f4dab2dfbab278f\nparent 80ab6c8cd53bc9bca43b8b95e80e39677cd319f8\nparent 6cff076513924430c8cdf422fa56dbe711faee40\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597741680 +0000\ncommitter GitHub <noreply@github.com> 1597741680 +0000\n\nMerge #5790\n\n5790: Revive cache cleaning\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/620d67322aedb4a3c58ec06096ab00b2e9dbfd32", "html_url": "https://github.com/rust-lang/rust/commit/620d67322aedb4a3c58ec06096ab00b2e9dbfd32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80ab6c8cd53bc9bca43b8b95e80e39677cd319f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/80ab6c8cd53bc9bca43b8b95e80e39677cd319f8", "html_url": "https://github.com/rust-lang/rust/commit/80ab6c8cd53bc9bca43b8b95e80e39677cd319f8"}, {"sha": "6cff076513924430c8cdf422fa56dbe711faee40", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cff076513924430c8cdf422fa56dbe711faee40", "html_url": "https://github.com/rust-lang/rust/commit/6cff076513924430c8cdf422fa56dbe711faee40"}], "stats": {"total": 140, "additions": 98, "deletions": 42}, "files": [{"sha": "fa315ff8eefcf8bc5de75cd8b9f6ffc117770af2", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "renamed", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=620d67322aedb4a3c58ec06096ab00b2e9dbfd32", "patch": "@@ -1,3 +1,13 @@\n+//! The most high-level integrated tests for rust-analyzer.\n+//!\n+//! This tests run a full LSP event loop, spawn cargo and process stdlib from\n+//! sysroot. For this reason, the tests here are very slow, and should be\n+//! avoided unless absolutely necessary.\n+//!\n+//! In particular, it's fine *not* to test that client & server agree on\n+//! specific JSON shapes here -- there's little value in such tests, as we can't\n+//! be sure without a real client anyway.\n+\n mod testdir;\n mod support;\n ", "previous_filename": "crates/rust-analyzer/tests/heavy_tests/main.rs"}, {"sha": "5bafeba79776f00955bfcfbb96cfffeacf95c852", "filename": "crates/rust-analyzer/tests/rust-analyzer/support.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs?ref=620d67322aedb4a3c58ec06096ab00b2e9dbfd32", "previous_filename": "crates/rust-analyzer/tests/heavy_tests/support.rs"}, {"sha": "7487e7429473b598e14a5c3370832e8d488e68bc", "filename": "crates/rust-analyzer/tests/rust-analyzer/testdir.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Ftestdir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Ftestdir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Ftestdir.rs?ref=620d67322aedb4a3c58ec06096ab00b2e9dbfd32", "previous_filename": "crates/rust-analyzer/tests/heavy_tests/testdir.rs"}, {"sha": "e790d995fb37b38be146efa6dcbbabfe6d371928", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 5, "deletions": 40, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=620d67322aedb4a3c58ec06096ab00b2e9dbfd32", "patch": "@@ -3,14 +3,15 @@\n //! See https://github.com/matklad/cargo-xtask/\n \n pub mod not_bash;\n+pub mod codegen;\n+mod ast_src;\n+\n pub mod install;\n pub mod release;\n pub mod dist;\n pub mod pre_commit;\n pub mod metrics;\n-\n-pub mod codegen;\n-mod ast_src;\n+pub mod pre_cache;\n \n use std::{\n     env,\n@@ -21,7 +22,7 @@ use walkdir::{DirEntry, WalkDir};\n \n use crate::{\n     codegen::Mode,\n-    not_bash::{fs2, pushd, pushenv, rm_rf},\n+    not_bash::{pushd, pushenv},\n };\n \n pub use anyhow::{bail, Context as _, Result};\n@@ -108,42 +109,6 @@ pub fn run_fuzzer() -> Result<()> {\n     Ok(())\n }\n \n-/// Cleans the `./target` dir after the build such that only\n-/// dependencies are cached on CI.\n-pub fn run_pre_cache() -> Result<()> {\n-    let slow_tests_cookie = Path::new(\"./target/.slow_tests_cookie\");\n-    if !slow_tests_cookie.exists() {\n-        panic!(\"slow tests were skipped on CI!\")\n-    }\n-    rm_rf(slow_tests_cookie)?;\n-\n-    for entry in Path::new(\"./target/debug\").read_dir()? {\n-        let entry = entry?;\n-        if entry.file_type().map(|it| it.is_file()).ok() == Some(true) {\n-            // Can't delete yourself on windows :-(\n-            if !entry.path().ends_with(\"xtask.exe\") {\n-                rm_rf(&entry.path())?\n-            }\n-        }\n-    }\n-\n-    fs2::remove_file(\"./target/.rustc_info.json\")?;\n-    let to_delete = [\"hir\", \"heavy_test\", \"xtask\", \"ide\", \"rust-analyzer\"];\n-    for &dir in [\"./target/debug/deps\", \"target/debug/.fingerprint\"].iter() {\n-        for entry in Path::new(dir).read_dir()? {\n-            let entry = entry?;\n-            if to_delete.iter().any(|&it| entry.path().display().to_string().contains(it)) {\n-                // Can't delete yourself on windows :-(\n-                if !entry.path().ends_with(\"xtask.exe\") {\n-                    rm_rf(&entry.path())?\n-                }\n-            }\n-        }\n-    }\n-\n-    Ok(())\n-}\n-\n fn is_release_tag(tag: &str) -> bool {\n     tag.len() == \"2020-02-24\".len() && tag.starts_with(|c: char| c.is_ascii_digit())\n }"}, {"sha": "fb38fdc92f6f19056977ab08be43543cfe98838d", "filename": "xtask/src/main.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=620d67322aedb4a3c58ec06096ab00b2e9dbfd32", "patch": "@@ -17,9 +17,10 @@ use xtask::{\n     install::{ClientOpt, InstallCmd, Malloc, ServerOpt},\n     metrics::MetricsCmd,\n     not_bash::pushd,\n+    pre_cache::PreCacheCmd,\n     pre_commit, project_root,\n     release::{PromoteCmd, ReleaseCmd},\n-    run_clippy, run_fuzzer, run_pre_cache, run_rustfmt, Result,\n+    run_clippy, run_fuzzer, run_rustfmt, Result,\n };\n \n fn main() -> Result<()> {\n@@ -100,7 +101,7 @@ FLAGS:\n         }\n         \"pre-cache\" => {\n             args.finish()?;\n-            run_pre_cache()\n+            PreCacheCmd.run()\n         }\n         \"release\" => {\n             let dry_run = args.contains(\"--dry-run\");"}, {"sha": "47ba6ba246c5f599862605a06b8854ba2ca70779", "filename": "xtask/src/pre_cache.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/xtask%2Fsrc%2Fpre_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620d67322aedb4a3c58ec06096ab00b2e9dbfd32/xtask%2Fsrc%2Fpre_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpre_cache.rs?ref=620d67322aedb4a3c58ec06096ab00b2e9dbfd32", "patch": "@@ -0,0 +1,80 @@\n+use std::{\n+    fs::FileType,\n+    path::{Path, PathBuf},\n+};\n+\n+use anyhow::Result;\n+\n+use crate::not_bash::{fs2, rm_rf};\n+\n+pub struct PreCacheCmd;\n+\n+impl PreCacheCmd {\n+    /// Cleans the `./target` dir after the build such that only\n+    /// dependencies are cached on CI.\n+    pub fn run(self) -> Result<()> {\n+        let slow_tests_cookie = Path::new(\"./target/.slow_tests_cookie\");\n+        if !slow_tests_cookie.exists() {\n+            panic!(\"slow tests were skipped on CI!\")\n+        }\n+        rm_rf(slow_tests_cookie)?;\n+\n+        for path in read_dir(\"./target/debug\", FileType::is_file)? {\n+            // Can't delete yourself on windows :-(\n+            if !path.ends_with(\"xtask.exe\") {\n+                rm_rf(&path)?\n+            }\n+        }\n+\n+        fs2::remove_file(\"./target/.rustc_info.json\")?;\n+\n+        let to_delete = read_dir(\"./crates\", FileType::is_dir)?\n+            .into_iter()\n+            .map(|path| path.file_name().unwrap().to_string_lossy().replace('-', \"_\"))\n+            .collect::<Vec<_>>();\n+\n+        for &dir in [\"./target/debug/deps\", \"target/debug/.fingerprint\"].iter() {\n+            for path in read_dir(dir, |_file_type| true)? {\n+                if path.ends_with(\"xtask.exe\") {\n+                    continue;\n+                }\n+                let file_name = path.file_name().unwrap().to_string_lossy();\n+                let (stem, _) = match rsplit_once(&file_name, '-') {\n+                    Some(it) => it,\n+                    None => {\n+                        rm_rf(path)?;\n+                        continue;\n+                    }\n+                };\n+                let stem = stem.replace('-', \"_\");\n+                if to_delete.contains(&stem) {\n+                    rm_rf(path)?;\n+                }\n+            }\n+        }\n+\n+        Ok(())\n+    }\n+}\n+fn read_dir(path: impl AsRef<Path>, cond: impl Fn(&FileType) -> bool) -> Result<Vec<PathBuf>> {\n+    read_dir_impl(path.as_ref(), &cond)\n+}\n+\n+fn read_dir_impl(path: &Path, cond: &dyn Fn(&FileType) -> bool) -> Result<Vec<PathBuf>> {\n+    let mut res = Vec::new();\n+    for entry in path.read_dir()? {\n+        let entry = entry?;\n+        let file_type = entry.file_type()?;\n+        if cond(&file_type) {\n+            res.push(entry.path())\n+        }\n+    }\n+    Ok(res)\n+}\n+\n+fn rsplit_once(haystack: &str, delim: char) -> Option<(&str, &str)> {\n+    let mut split = haystack.rsplitn(2, delim);\n+    let suffix = split.next()?;\n+    let prefix = split.next()?;\n+    Some((prefix, suffix))\n+}"}]}