{"sha": "61f33bfd2940ea55559b253a66c42937a17d3c87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZjMzYmZkMjk0MGVhNTU1NTliMjUzYTY2YzQyOTM3YTE3ZDNjODc=", "commit": {"author": {"name": "Julian Knodt", "email": "julianknodt@gmail.com", "date": "2020-12-31T00:58:27Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-01-01T09:55:10Z"}, "message": "first pass at default values for const generics\n\n- Adds optional default values to const generic parameters in the AST\n  and HIR\n- Parses these optional default values\n- Adds a `const_generics_defaults` feature gate", "tree": {"sha": "173260ca2dd9a2fb7738ec86a4229df30767ce96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/173260ca2dd9a2fb7738ec86a4229df30767ce96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61f33bfd2940ea55559b253a66c42937a17d3c87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61f33bfd2940ea55559b253a66c42937a17d3c87", "html_url": "https://github.com/rust-lang/rust/commit/61f33bfd2940ea55559b253a66c42937a17d3c87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61f33bfd2940ea55559b253a66c42937a17d3c87/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8ab56bf3201b0638e44caf5a484041f22e32d65", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ab56bf3201b0638e44caf5a484041f22e32d65", "html_url": "https://github.com/rust-lang/rust/commit/f8ab56bf3201b0638e44caf5a484041f22e32d65"}], "stats": {"total": 131, "additions": 99, "deletions": 32}, "files": [{"sha": "8167bde0322f27f4736b5a41c28caa2d58fdd5c2", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -368,6 +368,8 @@ pub enum GenericParamKind {\n         ty: P<Ty>,\n         /// Span of the `const` keyword.\n         kw_span: Span,\n+        /// Optional default value for the const generic param\n+        default: Option<AnonConst>,\n     },\n }\n "}, {"sha": "97966cc326055b62833aa21da843774a23b0a837", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -790,8 +790,9 @@ pub fn noop_flat_map_generic_param<T: MutVisitor>(\n         GenericParamKind::Type { default } => {\n             visit_opt(default, |default| vis.visit_ty(default));\n         }\n-        GenericParamKind::Const { ty, kw_span: _ } => {\n+        GenericParamKind::Const { ty, kw_span: _, default } => {\n             vis.visit_ty(ty);\n+            visit_opt(default, |default| vis.visit_anon_const(default));\n         }\n     }\n     smallvec![param]"}, {"sha": "a696626f8c419bfcc2cee63c1e4a9b63fe852f8f", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -578,7 +578,12 @@ pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a Generi\n     match param.kind {\n         GenericParamKind::Lifetime => (),\n         GenericParamKind::Type { ref default } => walk_list!(visitor, visit_ty, default),\n-        GenericParamKind::Const { ref ty, .. } => visitor.visit_ty(ty),\n+        GenericParamKind::Const { ref ty, ref default, .. } => {\n+            visitor.visit_ty(ty);\n+            if let Some(default) = default {\n+                visitor.visit_anon_const(default);\n+            }\n+        }\n     }\n }\n "}, {"sha": "f81dc39842cb9fa10e564c8fae2aadf7ea8a9bc4", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -2242,13 +2242,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 (hir::ParamName::Plain(param.ident), kind)\n             }\n-            GenericParamKind::Const { ref ty, kw_span: _ } => {\n+            GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n                 let ty = self\n                     .with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n                         this.lower_ty(&ty, ImplTraitContext::disallowed())\n                     });\n+                let default = default.as_ref().map(|def| self.lower_anon_const(def));\n \n-                (hir::ParamName::Plain(param.ident), hir::GenericParamKind::Const { ty })\n+                (hir::ParamName::Plain(param.ident), hir::GenericParamKind::Const { ty, default })\n             }\n         };\n "}, {"sha": "fd080fa59921c32f1377e02b96fb91b28b2e1d48", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -733,7 +733,7 @@ fn validate_generic_param_order(\n         let (ord_kind, ident) = match &param.kind {\n             GenericParamKind::Lifetime => (ParamKindOrd::Lifetime, ident),\n             GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident),\n-            GenericParamKind::Const { ref ty, kw_span: _ } => {\n+            GenericParamKind::Const { ref ty, kw_span: _, default: _ } => {\n                 let ty = pprust::ty_to_string(ty);\n                 let unordered = sess.features_untracked().const_generics;\n                 (ParamKindOrd::Const { unordered }, Some(format!(\"const {}: {}\", param.ident, ty)))\n@@ -775,7 +775,7 @@ fn validate_generic_param_order(\n                 GenericParamKind::Type { default: None } => (),\n                 GenericParamKind::Lifetime => (),\n                 // FIXME(const_generics:defaults)\n-                GenericParamKind::Const { ty: _, kw_span: _ } => (),\n+                GenericParamKind::Const { ty: _, kw_span: _, default: _ } => (),\n             }\n             first = false;\n         }\n@@ -1166,6 +1166,20 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n             }\n+            if !self.session.features_untracked().const_generics_defaults {\n+                if let GenericParamKind::Const { default: Some(ref default), .. } = param.kind {\n+                    let mut err = self.err_handler().struct_span_err(\n+                        default.value.span,\n+                        \"default values for const generic parameters are unstable\",\n+                    );\n+                    err.help(\n+                        \"add `#![feature(const_generics_defaults)]` \\\n+                         to the crate attributes to enable\",\n+                    );\n+                    err.emit();\n+                    break;\n+                }\n+            }\n         }\n \n         validate_generic_param_order("}, {"sha": "bdd378b34e144829e81d1bfb7ce9e6e5f5bc018e", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -2668,13 +2668,17 @@ impl<'a> State<'a> {\n                         s.print_type(default)\n                     }\n                 }\n-                ast::GenericParamKind::Const { ref ty, kw_span: _ } => {\n+                ast::GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n                     s.word_space(\"const\");\n                     s.print_ident(param.ident);\n                     s.s.space();\n                     s.word_space(\":\");\n                     s.print_type(ty);\n-                    s.print_type_bounds(\":\", &param.bounds)\n+                    s.print_type_bounds(\":\", &param.bounds);\n+                    if let Some(ref _default) = default {\n+                        // FIXME(const_generics_defaults): print the `default` value here\n+                        todo!();\n+                    }\n                 }\n             }\n         });"}, {"sha": "3c8bf12b3d415879bb17a4c4bf66b23a55e41b77", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -145,7 +145,8 @@ fn inject_impl_of_structural_trait(\n                 *default = None;\n                 ast::GenericArg::Type(cx.ty_ident(span, param.ident))\n             }\n-            ast::GenericParamKind::Const { ty: _, kw_span: _ } => {\n+            ast::GenericParamKind::Const { ty: _, kw_span: _, default } => {\n+                *default = None;\n                 ast::GenericArg::Const(cx.const_ident(span, param.ident))\n             }\n         })"}, {"sha": "70213f346f68c8c4cc3b08a5d97c88fc702de7f1", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -623,6 +623,9 @@ declare_features! (\n     /// `:pat2018` and `:pat2021` macro matchers.\n     (active, edition_macro_pats, \"1.51.0\", Some(54883), None),\n \n+    /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n+    (active, const_generics_defaults, \"1.51.0\", Some(44580), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "ebeb1bae2a314396ebdc5219bf97f28121e47e90", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -418,6 +418,8 @@ pub enum GenericParamKind<'hir> {\n     },\n     Const {\n         ty: &'hir Ty<'hir>,\n+        /// Optional default value for the const generic param\n+        default: Option<AnonConst>,\n     },\n }\n "}, {"sha": "87a2434152fcf20f4446b55ca86ebd16f21e22a0", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -877,7 +877,12 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n     match param.kind {\n         GenericParamKind::Lifetime { .. } => {}\n         GenericParamKind::Type { ref default, .. } => walk_list!(visitor, visit_ty, default),\n-        GenericParamKind::Const { ref ty } => visitor.visit_ty(ty),\n+        GenericParamKind::Const { ref ty, ref default } => {\n+            visitor.visit_ty(ty);\n+            if let Some(ref default) = default {\n+                visitor.visit_anon_const(default);\n+            }\n+        }\n     }\n     walk_list!(visitor, visit_param_bound, param.bounds);\n }"}, {"sha": "85bc38daa3d2804800b55fa8b87055b035a854f9", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -2205,9 +2205,13 @@ impl<'a> State<'a> {\n                     self.print_type(&default)\n                 }\n             }\n-            GenericParamKind::Const { ref ty } => {\n+            GenericParamKind::Const { ref ty, ref default } => {\n                 self.word_space(\":\");\n-                self.print_type(ty)\n+                self.print_type(ty);\n+                if let Some(ref _default) = default {\n+                    // FIXME(const_generics_defaults): print the `default` value here\n+                    todo!();\n+                }\n             }\n         }\n     }"}, {"sha": "ff84dba417728d995a689d61811c2f69acc0779e", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -56,12 +56,15 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n \n+        // Parse optional const generics default value.\n+        let default = if self.eat(&token::Eq) { Some(self.parse_const_arg()?) } else { None };\n+\n         Ok(GenericParam {\n             ident,\n             id: ast::DUMMY_NODE_ID,\n             attrs: preceding_attrs.into(),\n             bounds: Vec::new(),\n-            kind: GenericParamKind::Const { ty, kw_span: const_span },\n+            kind: GenericParamKind::Const { ty, kw_span: const_span, default },\n             is_placeholder: false,\n         })\n     }"}, {"sha": "43dee391c171aaf5e529dd7ce2da95aa585b0928", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -515,6 +515,23 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Parse a const argument, e.g. `<3>`. It is assumed the angle brackets will be parsed by\n+    /// the caller.\n+    pub(super) fn parse_const_arg(&mut self) -> PResult<'a, AnonConst> {\n+        // Parse const argument.\n+        let value = if let token::OpenDelim(token::Brace) = self.token.kind {\n+            self.parse_block_expr(\n+                None,\n+                self.token.span,\n+                BlockCheckMode::Default,\n+                ast::AttrVec::new(),\n+            )?\n+        } else {\n+            self.handle_unambiguous_unbraced_const_arg()?\n+        };\n+        Ok(AnonConst { id: ast::DUMMY_NODE_ID, value })\n+    }\n+\n     /// Parse a generic argument in a path segment.\n     /// This does not include constraints, e.g., `Item = u8`, which is handled in `parse_angle_arg`.\n     fn parse_generic_arg(&mut self) -> PResult<'a, Option<GenericArg>> {\n@@ -524,17 +541,7 @@ impl<'a> Parser<'a> {\n             GenericArg::Lifetime(self.expect_lifetime())\n         } else if self.check_const_arg() {\n             // Parse const argument.\n-            let value = if let token::OpenDelim(token::Brace) = self.token.kind {\n-                self.parse_block_expr(\n-                    None,\n-                    self.token.span,\n-                    BlockCheckMode::Default,\n-                    ast::AttrVec::new(),\n-                )?\n-            } else {\n-                self.handle_unambiguous_unbraced_const_arg()?\n-            };\n-            GenericArg::Const(AnonConst { id: ast::DUMMY_NODE_ID, value })\n+            GenericArg::Const(self.parse_const_arg()?)\n         } else if self.check_type() {\n             // Parse type argument.\n             match self.parse_ty() {"}, {"sha": "fbe99a31150549a356f88a4ba39e894bd7ac34ba", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -586,7 +586,8 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     // Allow all following defaults to refer to this type parameter.\n                     default_ban_rib.bindings.remove(&Ident::with_dummy_span(param.ident.name));\n                 }\n-                GenericParamKind::Const { ref ty, kw_span: _ } => {\n+                GenericParamKind::Const { ref ty, kw_span: _, default: _ } => {\n+                    // FIXME(const_generics_defaults): handle `default` value here\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }"}, {"sha": "987badcedde4cb375214b2d13726c212dd8547f4", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -1343,9 +1343,12 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                         self.visit_ty(ty);\n                     }\n                 }\n-                hir::GenericParamKind::Const { ref ty } => {\n+                hir::GenericParamKind::Const { ref ty, ref default } => {\n                     self.process_bounds(param.bounds);\n                     self.visit_ty(ty);\n+                    if let Some(default) = default {\n+                        self.visit_anon_const(default);\n+                    }\n                 }\n             }\n         }"}, {"sha": "e7d1c9d3bbe581f276f375a3ad539d8b69d1c1d1", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -614,9 +614,13 @@ impl<'hir> Sig for hir::Generics<'hir> {\n                 start: offset + text.len(),\n                 end: offset + text.len() + param_text.as_str().len(),\n             });\n-            if let hir::GenericParamKind::Const { ref ty } = param.kind {\n+            if let hir::GenericParamKind::Const { ref ty, ref default } = param.kind {\n                 param_text.push_str(\": \");\n                 param_text.push_str(&ty_to_string(&ty));\n+                if let Some(ref _default) = default {\n+                    // FIXME(const_generics_defaults): push the `default` value here\n+                    todo!();\n+                }\n             }\n             if !param.bounds.is_empty() {\n                 param_text.push_str(\": \");"}, {"sha": "64b50a9b70a7028111bb16652c8748f4ed222ce3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -368,6 +368,7 @@ symbols! {\n         const_fn_transmute,\n         const_fn_union,\n         const_generics,\n+        const_generics_defaults,\n         const_if_match,\n         const_impl_trait,\n         const_in_array_repeat_expressions,"}, {"sha": "18c63cb433da16deed2d24342e04400cd96679eb", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -286,9 +286,9 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n         // We currently only check wf of const params here.\n         hir::GenericParamKind::Lifetime { .. } | hir::GenericParamKind::Type { .. } => (),\n \n-        // Const parameters are well formed if their\n-        // type is structural match.\n-        hir::GenericParamKind::Const { ty: hir_ty } => {\n+        // Const parameters are well formed if their type is structural match.\n+        // FIXME(const_generics_defaults): we also need to check that the `default` is wf.\n+        hir::GenericParamKind::Const { ty: hir_ty, default: _ } => {\n             let ty = tcx.type_of(tcx.hir().local_def_id(param.hir_id));\n \n             let err_ty_str;"}, {"sha": "022161164d1e526f04df272091defc8cfd74ed59", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -607,11 +607,12 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n                     synthetic,\n                 },\n             ),\n-            hir::GenericParamKind::Const { ref ty } => (\n+            hir::GenericParamKind::Const { ref ty, default: _ } => (\n                 self.name.ident().name,\n                 GenericParamDefKind::Const {\n                     did: cx.tcx.hir().local_def_id(self.hir_id).to_def_id(),\n                     ty: ty.clean(cx),\n+                    // FIXME(const_generics_defaults): add `default` field here to the docs\n                 },\n             ),\n         };"}, {"sha": "940573e4caa69799c64ee4d874586780f0ff7b7d", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61f33bfd2940ea55559b253a66c42937a17d3c87/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f33bfd2940ea55559b253a66c42937a17d3c87/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=61f33bfd2940ea55559b253a66c42937a17d3c87", "patch": "@@ -407,6 +407,10 @@ pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n     }\n }\n \n+pub fn eq_anon_const(l: &AnonConst, r: &AnonConst) -> bool {\n+    eq_expr(&l.value, &r.value)\n+}\n+\n pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n     matches!(\n         (l, r),\n@@ -497,7 +501,8 @@ pub fn eq_generic_param(l: &GenericParam, r: &GenericParam) -> bool {\n         && match (&l.kind, &r.kind) {\n             (Lifetime, Lifetime) => true,\n             (Type { default: l }, Type { default: r }) => both(l, r, |l, r| eq_ty(l, r)),\n-            (Const { ty: l, kw_span: _ }, Const { ty: r, kw_span: _ }) => eq_ty(l, r),\n+            (Const { ty: lt, kw_span: _ , default: ld}, Const { ty: rt, kw_span: _, default: rd }) =>\n+                eq_ty(lt, rt) && both(ld, rd, |ld, rd| eq_anon_const(ld, rd)),\n             _ => false,\n         }\n         && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))"}]}