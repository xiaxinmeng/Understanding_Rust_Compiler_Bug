{"sha": "7d9c98e4755e2d81c894e6517e3848b786cf7a3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOWM5OGU0NzU1ZTJkODFjODk0ZTY1MTdlMzg0OGI3ODZjZjdhM2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-31T20:19:33Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:37:58Z"}, "message": "rustc: Hide `maybe_unused_*` fields in queries\n\nThis commit makes the `maybe_unused_extern_crates` and\n`maybe_unused_trait_imports` fields of `TyCtxt` private and ensures that they're\naccessed with queries so the values and results can be tracked.", "tree": {"sha": "46916a9c13cf4d3b09bf8443fb7da499a96faaec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46916a9c13cf4d3b09bf8443fb7da499a96faaec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d9c98e4755e2d81c894e6517e3848b786cf7a3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d9c98e4755e2d81c894e6517e3848b786cf7a3b", "html_url": "https://github.com/rust-lang/rust/commit/7d9c98e4755e2d81c894e6517e3848b786cf7a3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d9c98e4755e2d81c894e6517e3848b786cf7a3b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f", "html_url": "https://github.com/rust-lang/rust/commit/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "d1453c247a3532aeba5fb2325e046b454a58f961", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9c98e4755e2d81c894e6517e3848b786cf7a3b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9c98e4755e2d81c894e6517e3848b786cf7a3b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=7d9c98e4755e2d81c894e6517e3848b786cf7a3b", "patch": "@@ -571,6 +571,8 @@ define_dep_nodes!( <'tcx>\n     [] PostorderCnums,\n \n     [] Freevars(HirId),\n+    [] MaybeUnusedTraitImport(HirId),\n+    [] MaybeUnusedExternCrates,\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "2104e78981212ee74aa0289e5ec060c10daaddeb", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7d9c98e4755e2d81c894e6517e3848b786cf7a3b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9c98e4755e2d81c894e6517e3848b786cf7a3b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7d9c98e4755e2d81c894e6517e3848b786cf7a3b", "patch": "@@ -838,9 +838,9 @@ pub struct GlobalCtxt<'tcx> {\n     // scratch every time.\n     freevars: FxHashMap<HirId, Rc<Vec<hir::Freevar>>>,\n \n-    pub maybe_unused_trait_imports: NodeSet,\n+    maybe_unused_trait_imports: FxHashSet<HirId>,\n \n-    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n+    maybe_unused_extern_crates: Vec<(HirId, Span)>,\n \n     // Internal cache for metadata decoding. No need to track deps on this.\n     pub rcache: RefCell<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,\n@@ -1068,12 +1068,20 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             freevars: resolutions.freevars.into_iter().map(|(k, v)| {\n                 (hir.node_to_hir_id(k), Rc::new(v))\n             }).collect(),\n+            maybe_unused_trait_imports:\n+                resolutions.maybe_unused_trait_imports\n+                    .into_iter()\n+                    .map(|id| hir.node_to_hir_id(id))\n+                    .collect(),\n+            maybe_unused_extern_crates:\n+                resolutions.maybe_unused_extern_crates\n+                    .into_iter()\n+                    .map(|(id, sp)| (hir.node_to_hir_id(id), sp))\n+                    .collect(),\n             hir,\n             def_path_hash_to_def_id,\n             maps: maps::Maps::new(providers),\n             mir_passes,\n-            maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n-            maybe_unused_extern_crates: resolutions.maybe_unused_extern_crates,\n             rcache: RefCell::new(FxHashMap()),\n             normalized_cache: RefCell::new(FxHashMap()),\n             inhabitedness_cache: RefCell::new(FxHashMap()),\n@@ -2020,4 +2028,11 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         Rc::new(middle::lang_items::collect(tcx))\n     };\n     providers.freevars = |tcx, id| tcx.gcx.freevars.get(&id).cloned();\n+    providers.maybe_unused_trait_import = |tcx, id| {\n+        tcx.maybe_unused_trait_imports.contains(&id)\n+    };\n+    providers.maybe_unused_extern_crates = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        Rc::new(tcx.maybe_unused_extern_crates.clone())\n+    };\n }"}, {"sha": "9f8eb2f75350ed58185d6a9eed54b0e04ffeeb61", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7d9c98e4755e2d81c894e6517e3848b786cf7a3b/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9c98e4755e2d81c894e6517e3848b786cf7a3b/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=7d9c98e4755e2d81c894e6517e3848b786cf7a3b", "patch": "@@ -736,6 +736,18 @@ impl<'tcx> QueryDescription for queries::freevars<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::maybe_unused_trait_import<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n+        format!(\"testing if a trait import is unused\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::maybe_unused_extern_crates<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"looking up all possibly unused extern crates\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1353,6 +1365,9 @@ define_maps! { <'tcx>\n     [] postorder_cnums: postorder_cnums_node(CrateNum) -> Rc<Vec<CrateNum>>,\n \n     [] freevars: Freevars(HirId) -> Option<Rc<Vec<hir::Freevar>>>,\n+    [] maybe_unused_trait_import: MaybeUnusedTraitImport(HirId) -> bool,\n+    [] maybe_unused_extern_crates: maybe_unused_extern_crates_node(CrateNum)\n+        -> Rc<Vec<(HirId, Span)>>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n@@ -1454,3 +1469,7 @@ fn visible_parent_map_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n fn postorder_cnums_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::PostorderCnums\n }\n+\n+fn maybe_unused_extern_crates_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n+    DepConstructor::MaybeUnusedExternCrates\n+}"}, {"sha": "93f15775b15606b00052cd0572981391281e30dd", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7d9c98e4755e2d81c894e6517e3848b786cf7a3b/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9c98e4755e2d81c894e6517e3848b786cf7a3b/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=7d9c98e4755e2d81c894e6517e3848b786cf7a3b", "patch": "@@ -14,8 +14,9 @@ use rustc::ty::TyCtxt;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n \n-use rustc::hir;\n+use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir;\n use rustc::util::nodemap::DefIdSet;\n \n struct CheckVisitor<'a, 'tcx: 'a> {\n@@ -25,7 +26,8 @@ struct CheckVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> CheckVisitor<'a, 'tcx> {\n     fn check_import(&self, id: ast::NodeId, span: Span) {\n-        if !self.tcx.maybe_unused_trait_imports.contains(&id) {\n+        let hir_id = self.tcx.hir.node_to_hir_id(id);\n+        if !self.tcx.maybe_unused_trait_import(hir_id) {\n             return;\n         }\n \n@@ -73,15 +75,20 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = CheckVisitor { tcx, used_trait_imports };\n     tcx.hir.krate().visit_all_item_likes(&mut visitor);\n \n-    for &(id, span) in &tcx.maybe_unused_extern_crates {\n-        let hir_id = tcx.hir.node_to_hir_id(id);\n+    for &(hir_id, span) in tcx.maybe_unused_extern_crates(LOCAL_CRATE).iter() {\n         let cnum = tcx.extern_mod_stmt_cnum(hir_id).unwrap();\n-        if !tcx.is_compiler_builtins(cnum)\n-            && !tcx.is_panic_runtime(cnum)\n-            && !tcx.has_global_allocator(cnum) {\n-                let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n-                let msg = \"unused extern crate\";\n-                tcx.lint_node(lint, id, span, msg);\n-            }\n+        if tcx.is_compiler_builtins(cnum) {\n+            continue\n+        }\n+        if tcx.is_panic_runtime(cnum) {\n+            continue\n+        }\n+        if tcx.has_global_allocator(cnum) {\n+            continue\n+        }\n+        let id = tcx.hir.definitions().find_node_for_hir_id(hir_id);\n+        let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n+        let msg = \"unused extern crate\";\n+        tcx.lint_node(lint, id, span, msg);\n     }\n }"}]}