{"sha": "71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZGZhNWJlZmUyZGRmM2QxNmZiNWUyM2Y2OTIyMTI1Y2YxY2Y1ZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-15T08:02:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-15T08:02:21Z"}, "message": "auto merge of #18053 : nick29581/rust/ufcs1, r=pcwalton\n\nWith the 'receiver' as an argument and static dispatch. Part of UFCS implementation (#16293).\r\n\r\nr?", "tree": {"sha": "3d416ef1e7ec6e03930f7de4a281a82b3457cf1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d416ef1e7ec6e03930f7de4a281a82b3457cf1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "html_url": "https://github.com/rust-lang/rust/commit/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5201bf17e6a051dd1411513346d8efc4afcb3c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/5201bf17e6a051dd1411513346d8efc4afcb3c36", "html_url": "https://github.com/rust-lang/rust/commit/5201bf17e6a051dd1411513346d8efc4afcb3c36"}, {"sha": "fe8e591147857a0f5ad10570e7cc3f304e9b2cd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe8e591147857a0f5ad10570e7cc3f304e9b2cd2", "html_url": "https://github.com/rust-lang/rust/commit/fe8e591147857a0f5ad10570e7cc3f304e9b2cd2"}], "stats": {"total": 345, "additions": 231, "deletions": 114}, "files": [{"sha": "009a06f5290f5494327c0242183d90267c5e6265", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -407,13 +407,10 @@ fn encode_reexported_static_base_methods(ecx: &EncodeContext,\n                         method_did.def_id());\n                     match impl_item {\n                         ty::MethodTraitItem(ref m) => {\n-                            if m.explicit_self ==\n-                                    ty::StaticExplicitSelfCategory {\n-                                encode_reexported_static_method(rbml_w,\n-                                                                exp,\n-                                                                m.def_id,\n-                                                                m.ident);\n-                            }\n+                            encode_reexported_static_method(rbml_w,\n+                                                            exp,\n+                                                            m.def_id,\n+                                                            m.ident);\n                         }\n                         ty::TypeTraitItem(_) => {}\n                     }\n@@ -434,8 +431,7 @@ fn encode_reexported_static_trait_methods(ecx: &EncodeContext,\n         Some(trait_items) => {\n             for trait_item in trait_items.iter() {\n                 match *trait_item {\n-                    ty::MethodTraitItem(ref m) if m.explicit_self ==\n-                            ty::StaticExplicitSelfCategory => {\n+                    ty::MethodTraitItem(ref m) => {\n                         encode_reexported_static_method(rbml_w,\n                                                         exp,\n                                                         m.def_id,\n@@ -1408,18 +1404,16 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                             encode_family(rbml_w,\n                                           fn_style_static_method_family(\n                                               method_ty.fty.fn_style));\n-\n-                            let pty = ty::lookup_item_type(tcx,\n-                                                           method_def_id);\n-                            encode_bounds_and_type(rbml_w, ecx, &pty);\n                         }\n-\n                         _ => {\n                             encode_family(rbml_w,\n                                           style_fn_family(\n                                               method_ty.fty.fn_style));\n                         }\n                     }\n+                    let pty = ty::lookup_item_type(tcx,\n+                                                   method_def_id);\n+                    encode_bounds_and_type(rbml_w, ecx, &pty);\n \n                     is_nonstatic_method = method_ty.explicit_self !=\n                         ty::StaticExplicitSelfCategory;"}, {"sha": "7cadcb745ca13aa2d6f4f53cf017859733b3b849", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -453,8 +453,8 @@ impl tr for def::Def {\n                                    },\n                                    p)\n           }\n-          def::DefMethod(did0, did1) => {\n-            def::DefMethod(did0.tr(dcx), did1.map(|did1| did1.tr(dcx)))\n+          def::DefMethod(did0, did1, p) => {\n+            def::DefMethod(did0.tr(dcx), did1.map(|did1| did1.tr(dcx)), p)\n           }\n           def::DefSelfTy(nid) => { def::DefSelfTy(dcx.tr_id(nid)) }\n           def::DefMod(did) => { def::DefMod(did.tr(dcx)) }"}, {"sha": "3facf0b0c0a49220e4db51565b6a13ef9b67cbda", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -46,7 +46,7 @@ pub enum Def {\n     DefTyParamBinder(ast::NodeId), /* struct, impl or trait with ty params */\n     DefRegion(ast::NodeId),\n     DefLabel(ast::NodeId),\n-    DefMethod(ast::DefId /* method */, Option<ast::DefId> /* trait */),\n+    DefMethod(ast::DefId /* method */, Option<ast::DefId> /* trait */, MethodProvenance),\n }\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n@@ -62,7 +62,7 @@ impl Def {\n             DefForeignMod(id) | DefStatic(id, _) |\n             DefVariant(_, id, _) | DefTy(id, _) | DefAssociatedTy(id) |\n             DefTyParam(_, id, _) | DefUse(id) | DefStruct(id) | DefTrait(id) |\n-            DefMethod(id, _) | DefConst(id) => {\n+            DefMethod(id, _, _) | DefConst(id) => {\n                 id\n             }\n             DefLocal(id) |"}, {"sha": "8b9207134ea2671b4d2a380ac4992273f80717d7", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -811,7 +811,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             def::DefTy(_, true) => ck(\"enum\"),\n             def::DefTrait(..) => ck(\"trait\"),\n             def::DefStruct(..) => ck(\"struct\"),\n-            def::DefMethod(_, Some(..)) => ck(\"trait method\"),\n+            def::DefMethod(_, Some(..), _) => ck(\"trait method\"),\n             def::DefMethod(..) => ck(\"method\"),\n             def::DefMod(..) => ck(\"module\"),\n             _ => {}"}, {"sha": "a53cd52ca8433fe5f1f5386db59a907fb4c5d05e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 21, "deletions": 57, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -250,7 +250,7 @@ enum FallbackSuggestion {\n     Method,\n     TraitItem,\n     StaticMethod(String),\n-    StaticTraitMethod(String),\n+    TraitMethod(String),\n }\n \n enum TypeParameters<'a> {\n@@ -1386,17 +1386,17 @@ impl<'a> Resolver<'a> {\n                                                           .node {\n                                         SelfStatic => {\n                                             // Static methods become\n-                                            // `def_static_method`s.\n-                                            DefStaticMethod(\n-                                                local_def(method.id),\n-                                                FromImpl(local_def(item.id)),\n-                                                         method.pe_fn_style())\n+                                            // `DefStaticMethod`s.\n+                                            DefStaticMethod(local_def(method.id),\n+                                                            FromImpl(local_def(item.id)),\n+                                                                     method.pe_fn_style())\n                                         }\n                                         _ => {\n                                             // Non-static methods become\n-                                            // `def_method`s.\n+                                            // `DefMethod`s.\n                                             DefMethod(local_def(method.id),\n-                                                      None)\n+                                                      None,\n+                                                      FromImpl(local_def(item.id)))\n                                         }\n                                     };\n \n@@ -1476,19 +1476,18 @@ impl<'a> Resolver<'a> {\n                             let (def, static_flag) = match ty_m.explicit_self\n                                                                .node {\n                                 SelfStatic => {\n-                                    // Static methods become\n-                                    // `def_static_method`s.\n+                                    // Static methods become `DefStaticMethod`s.\n                                     (DefStaticMethod(\n                                             local_def(ty_m.id),\n                                             FromTrait(local_def(item.id)),\n                                             ty_m.fn_style),\n                                      StaticMethodTraitItemKind)\n                                 }\n                                 _ => {\n-                                    // Non-static methods become\n-                                    // `def_method`s.\n+                                    // Non-static methods become `DefMethod`s.\n                                     (DefMethod(local_def(ty_m.id),\n-                                               Some(local_def(item.id))),\n+                                               Some(local_def(item.id)),\n+                                               FromTrait(local_def(item.id))),\n                                      NonstaticMethodTraitItemKind)\n                                 }\n                             };\n@@ -4607,8 +4606,7 @@ impl<'a> Resolver<'a> {\n                                 // We also need a new scope for the method-\n                                 // specific type parameters.\n                                 this.resolve_method(\n-                                    MethodRibKind(id,\n-                                                  ProvidedMethod(method.id)),\n+                                    MethodRibKind(id, ProvidedMethod(method.id)),\n                                     &**method);\n                             }\n                             TypeImplItem(ref typedef) => {\n@@ -5393,8 +5391,8 @@ impl<'a> Resolver<'a> {\n \n         let ident = path.segments.last().unwrap().identifier;\n         let def = match self.resolve_definition_of_name_in_module(containing_module.clone(),\n-                                                        ident.name,\n-                                                        namespace) {\n+                                                                  ident.name,\n+                                                                  namespace) {\n             NoNameDefinition => {\n                 // We failed to resolve the name. Report an error.\n                 return None;\n@@ -5403,26 +5401,6 @@ impl<'a> Resolver<'a> {\n                 (def, last_private.or(lp))\n             }\n         };\n-        match containing_module.kind.get() {\n-            TraitModuleKind | ImplModuleKind => {\n-                match containing_module.def_id.get() {\n-                    Some(def_id) => {\n-                        match self.trait_item_map.find(&(ident.name, def_id)) {\n-                            Some(&StaticMethodTraitItemKind) => (),\n-                            Some(&TypeTraitItemKind) => (),\n-                            None => (),\n-                            Some(&NonstaticMethodTraitItemKind) => {\n-                                debug!(\"containing module was a trait or impl \\\n-                                and name was a method -> not resolved\");\n-                                return None;\n-                            }\n-                        }\n-                    },\n-                    _ => (),\n-                }\n-            },\n-            _ => (),\n-        }\n         match containing_module.def_id.get() {\n             Some(DefId{krate: kid, ..}) => { self.used_crates.insert(kid); },\n             _ => {}\n@@ -5668,8 +5646,8 @@ impl<'a> Resolver<'a> {\n                                 FromTrait(_) => unreachable!()\n                             }\n                         }\n-                        Some(DefMethod(_, None)) if allowed == Everything => return Method,\n-                        Some(DefMethod(_, Some(_))) => return TraitItem,\n+                        Some(DefMethod(_, None, _)) if allowed == Everything => return Method,\n+                        Some(DefMethod(_, Some(_), _)) => return TraitItem,\n                         _ => ()\n                     }\n                 }\n@@ -5684,7 +5662,9 @@ impl<'a> Resolver<'a> {\n                 let path_str = self.path_idents_to_string(&trait_ref.path);\n \n                 match self.trait_item_map.find(&(name, did)) {\n-                    Some(&StaticMethodTraitItemKind) => return StaticTraitMethod(path_str),\n+                    Some(&StaticMethodTraitItemKind) => {\n+                        return TraitMethod(path_str)\n+                    }\n                     Some(_) => return TraitItem,\n                     None => {}\n                 }\n@@ -5751,22 +5731,6 @@ impl<'a> Resolver<'a> {\n                         // Write the result into the def map.\n                         debug!(\"(resolving expr) resolved `{}`\",\n                                self.path_idents_to_string(path));\n-\n-                        // First-class methods are not supported yet; error\n-                        // out here.\n-                        match def {\n-                            (DefMethod(..), _) => {\n-                                self.resolve_error(expr.span,\n-                                                      \"first-class methods \\\n-                                                       are not supported\");\n-                                self.session.span_note(expr.span,\n-                                                       \"call the method \\\n-                                                        using the `.` \\\n-                                                        syntax\");\n-                            }\n-                            _ => {}\n-                        }\n-\n                         self.record_def(expr.id, def);\n                     }\n                     None => {\n@@ -5826,7 +5790,7 @@ impl<'a> Resolver<'a> {\n                                         Method\n                                         | TraitItem =>\n                                             format!(\"to call `self.{}`\", wrong_name),\n-                                        StaticTraitMethod(path_str)\n+                                        TraitMethod(path_str)\n                                         | StaticMethod(path_str) =>\n                                             format!(\"to call `{}::{}`\", path_str, wrong_name)\n                                     };"}, {"sha": "21810b608b4d3890c4d428c40eff8b31fb69e7d7", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -244,7 +244,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             def::DefStaticMethod(_, _, _) |\n             def::DefTyParam(..) |\n             def::DefUse(_) |\n-            def::DefMethod(_, _) |\n+            def::DefMethod(..) |\n             def::DefPrimTy(_) => {\n                 self.sess.span_bug(span, format!(\"lookup_def_kind for unexpected item: {:?}\",\n                                                  def).as_slice());"}, {"sha": "bb32fdcea7ef68bbc6aeb6feb838625ff26a06f4", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -137,7 +137,9 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n         };\n     }\n \n-    fn trans_def<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, def: def::Def, ref_expr: &ast::Expr)\n+    fn trans_def<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+                             def: def::Def,\n+                             ref_expr: &ast::Expr)\n                              -> Callee<'blk, 'tcx> {\n         debug!(\"trans_def(def={}, ref_expr={})\", def.repr(bcx.tcx()), ref_expr.repr(bcx.tcx()));\n         let expr_ty = node_id_type(bcx, ref_expr.id);\n@@ -165,14 +167,13 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n                 let def_id = inline::maybe_instantiate_inline(bcx.ccx(), did);\n                 Callee { bcx: bcx, data: Intrinsic(def_id.node, substs) }\n             }\n-            def::DefFn(did, _, _) |\n+            def::DefFn(did, _, _) | def::DefMethod(did, _, def::FromImpl(_)) |\n             def::DefStaticMethod(did, def::FromImpl(_), _) => {\n                 fn_callee(bcx, trans_fn_ref(bcx, did, ExprId(ref_expr.id)))\n             }\n-            def::DefStaticMethod(impl_did,\n-                                 def::FromTrait(trait_did),\n-                                 _) => {\n-                fn_callee(bcx, meth::trans_static_method_callee(bcx, impl_did,\n+            def::DefStaticMethod(meth_did, def::FromTrait(trait_did), _) |\n+            def::DefMethod(meth_did, _, def::FromTrait(trait_did)) => {\n+                fn_callee(bcx, meth::trans_static_method_callee(bcx, meth_did,\n                                                                 trait_did,\n                                                                 ref_expr.id))\n             }\n@@ -205,7 +206,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n             def::DefTy(..) | def::DefPrimTy(..) | def::DefAssociatedTy(..) |\n             def::DefUse(..) | def::DefTyParamBinder(..) |\n             def::DefRegion(..) | def::DefLabel(..) | def::DefTyParam(..) |\n-            def::DefSelfTy(..) | def::DefMethod(..) => {\n+            def::DefSelfTy(..) => {\n                 bcx.tcx().sess.span_bug(\n                     ref_expr.span,\n                     format!(\"cannot translate def {:?} \\"}, {"sha": "d88e01f6e495f4b6976202fa14daa6480067c425", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -5027,7 +5027,7 @@ pub fn polytype_for_def(fcx: &FnCtxt,\n           let typ = fcx.local_ty(sp, nid);\n           return no_params(typ);\n       }\n-      def::DefFn(id, _, _) | def::DefStaticMethod(id, _, _) |\n+      def::DefFn(id, _, _) | def::DefStaticMethod(id, _, _) | def::DefMethod(id, _, _) |\n       def::DefStatic(id, _) | def::DefVariant(_, id, _) |\n       def::DefStruct(id) | def::DefConst(id) => {\n         return ty::lookup_item_type(fcx.ccx.tcx, id);\n@@ -5057,9 +5057,6 @@ pub fn polytype_for_def(fcx: &FnCtxt,\n       def::DefSelfTy(..) => {\n         fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found self ty\");\n       }\n-      def::DefMethod(..) => {\n-        fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found method\");\n-      }\n     }\n }\n \n@@ -5231,8 +5228,7 @@ pub fn instantiate_path(fcx: &FnCtxt,\n     }\n \n     fcx.add_obligations_for_parameters(\n-        traits::ObligationCause::new(span,\n-                                     traits::ItemObligation(def.def_id())),\n+        traits::ObligationCause::new(span, traits::ItemObligation(def.def_id())),\n         &substs,\n         &polytype.generics);\n "}, {"sha": "6e25b23daace0aa99bf1c8ff20fe1b45949f93ff", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -77,10 +77,12 @@ pub fn collect_item_types(ccx: &CrateCtxt) {\n     }\n \n     match ccx.tcx.lang_items.ty_desc() {\n-        Some(id) => { collect_intrinsic_type(ccx, id); } None => {}\n+        Some(id) => { collect_intrinsic_type(ccx, id); }\n+        None => {}\n     }\n     match ccx.tcx.lang_items.opaque() {\n-        Some(id) => { collect_intrinsic_type(ccx, id); } None => {}\n+        Some(id) => { collect_intrinsic_type(ccx, id); }\n+        None => {}\n     }\n \n     let mut visitor = CollectTraitDefVisitor{ ccx: ccx };\n@@ -306,10 +308,7 @@ fn collect_trait_methods(ccx: &CrateCtxt,\n                                     }\n                                 });\n \n-                                if ty_method.explicit_self ==\n-                                        ty::StaticExplicitSelfCategory {\n-                                    make_static_method_ty(ccx, &*ty_method);\n-                                }\n+                                make_method_ty(ccx, &*ty_method);\n \n                                 tcx.impl_or_trait_items\n                                    .borrow_mut()\n@@ -364,7 +363,7 @@ fn collect_trait_methods(ccx: &CrateCtxt,\n         _ => { /* Ignore things that aren't traits */ }\n     }\n \n-    fn make_static_method_ty(ccx: &CrateCtxt, m: &ty::Method) {\n+    fn make_method_ty(ccx: &CrateCtxt, m: &ty::Method) {\n         ccx.tcx.tcache.borrow_mut().insert(\n             m.def_id,\n             Polytype {"}, {"sha": "86ebeedda6795a9c07358324df4c1f8c05727bad", "filename": "src/test/compile-fail/call-extern-trait-as-function.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5201bf17e6a051dd1411513346d8efc4afcb3c36/src%2Ftest%2Fcompile-fail%2Fcall-extern-trait-as-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5201bf17e6a051dd1411513346d8efc4afcb3c36/src%2Ftest%2Fcompile-fail%2Fcall-extern-trait-as-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcall-extern-trait-as-function.rs?ref=5201bf17e6a051dd1411513346d8efc4afcb3c36", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// issue #6698\n-\n-fn V() -> bool {\n-    std::clone::Clone::clone(true) //~ ERROR error: unresolved name `std::clone::Clone::clone`.\n-}\n-\n-fn main() {}"}, {"sha": "82d75b45394e3ce2be6315d38c599b0ffaa26227", "filename": "src/test/compile-fail/method-self-arg-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test method calls with self as an argument cannot subvert type checking.\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn bar(&self) {}\n+}\n+\n+fn main() {\n+    let x = Foo;\n+    Foo::bar(x); //~ERROR mismatched types: expected `&Foo`, found `Foo`\n+    Foo::bar(&&x); //~ERROR mismatched types: expected `&Foo`, found `&&Foo`\n+    Foo::bar(&42i); //~ERROR mismatched types: expected `&Foo`, found `&int`\n+}"}, {"sha": "0ac0851619c59e4f094ca6cd3bd4bf2a99ff94ca", "filename": "src/test/compile-fail/method-self-arg-2.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-2.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test method calls with self as an argument cannot subvert borrow checking.\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn bar(&self) {}\n+    fn baz(&mut self) {}\n+}\n+\n+fn main() {\n+    let mut x = Foo;\n+    let y = &mut x;\n+    Foo::bar(&x); //~ERROR cannot borrow `x`\n+\n+    let x = Foo;\n+    Foo::baz(&x); //~ERROR cannot borrow immutable dereference of `&`-pointer as mutable\n+}"}, {"sha": "b821c064cacfe25f21af897f0c11babb2a82ebfb", "filename": "src/test/run-pass/method-self-arg-trait.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test method calls with self as an argument\n+\n+static mut COUNT: u64 = 1;\n+\n+struct Foo;\n+\n+trait Bar {\n+    fn foo1(&self);\n+    fn foo2(self);\n+    fn foo3(self: Box<Self>);\n+\n+    fn bar1(&self) {\n+        unsafe { COUNT *= 7; }\n+    }\n+    fn bar2(self) {\n+        unsafe { COUNT *= 11; }\n+    }\n+    fn bar3(self: Box<Self>) {\n+        unsafe { COUNT *= 13; }\n+    }\n+}\n+\n+impl Bar for Foo {\n+    fn foo1(&self) {\n+        unsafe { COUNT *= 2; }\n+    }\n+\n+    fn foo2(self) {\n+        unsafe { COUNT *= 3; }\n+    }\n+\n+    fn foo3(self: Box<Foo>) {\n+        unsafe { COUNT *= 5; }\n+    }\n+}\n+\n+impl Foo {\n+    fn baz(self) {\n+        unsafe { COUNT *= 17; }\n+        // Test internal call.\n+        Bar::foo1(&self);\n+        Bar::foo2(self);\n+        Bar::foo3(box self);\n+\n+        Bar::bar1(&self);\n+        Bar::bar2(self);\n+        Bar::bar3(box self);\n+    }\n+}\n+\n+fn main() {\n+    let x = Foo;\n+    // Test external call.\n+    Bar::foo1(&x);\n+    Bar::foo2(x);\n+    Bar::foo3(box x);\n+\n+    Bar::bar1(&x);\n+    Bar::bar2(x);\n+    Bar::bar3(box x);\n+\n+    x.baz();\n+\n+    unsafe { assert!(COUNT == 2u64*2*3*3*5*5*7*7*11*11*13*13*17); }\n+}"}, {"sha": "3d73f34f8cfd6edcb182af1e5ed14fd09b3ac431", "filename": "src/test/run-pass/method-self-arg.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs?ref=71dfa5befe2ddf3d16fb5e23f6922125cf1cf5e6", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test method calls with self as an argument\n+\n+static mut COUNT: uint = 1;\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn foo(self, x: &Foo) {\n+        unsafe { COUNT *= 2; }\n+        // Test internal call.\n+        Foo::bar(&self);\n+        Foo::bar(x);\n+\n+        Foo::baz(self);\n+        Foo::baz(*x);\n+\n+        Foo::qux(box self);\n+        Foo::qux(box *x);\n+    }\n+\n+    fn bar(&self) {\n+        unsafe { COUNT *= 3; }\n+    }\n+\n+    fn baz(self) {\n+        unsafe { COUNT *= 5; }\n+    }\n+\n+    fn qux(self: Box<Foo>) {\n+        unsafe { COUNT *= 7; }\n+    }\n+}\n+\n+fn main() {\n+    let x = Foo;\n+    // Test external call.\n+    Foo::bar(&x);\n+    Foo::baz(x);\n+    Foo::qux(box x);\n+\n+    x.foo(&x);\n+\n+    unsafe { assert!(COUNT == 2u*3*3*3*5*5*5*7*7*7); }\n+}"}]}