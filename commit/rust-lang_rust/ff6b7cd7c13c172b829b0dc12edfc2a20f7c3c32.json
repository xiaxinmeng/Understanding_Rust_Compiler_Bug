{"sha": "ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNmI3Y2Q3YzEzYzE3MmI4MjliMGRjMTJlZGZjMmEyMGY3YzNjMzI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-08T22:11:31Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-12T19:14:53Z"}, "message": "Rename in librustc_traits.", "tree": {"sha": "9b9332a63cac2f5ebb29fa7082a22681a68791c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b9332a63cac2f5ebb29fa7082a22681a68791c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32", "html_url": "https://github.com/rust-lang/rust/commit/ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee33e0279a66526f8edf6b71e5d47fc5d9fbd0bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee33e0279a66526f8edf6b71e5d47fc5d9fbd0bc", "html_url": "https://github.com/rust-lang/rust/commit/ee33e0279a66526f8edf6b71e5d47fc5d9fbd0bc"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "d9f0b8550bb961ad32ca2c661367874ec79e838d", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32", "patch": "@@ -37,7 +37,6 @@ use rustc::ty::{self, TyCtxt};\n use rustc::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{GenericArg, GenericArgKind};\n-use rustc::mir::interpret::ConstValue;\n use syntax_pos::DUMMY_SP;\n \n use std::fmt::{self, Debug};\n@@ -286,7 +285,7 @@ impl context::ContextOps<ChalkArenas<'tcx>> for ChalkContext<'tcx> {\n                     _ => false,\n                 },\n                 GenericArgKind::Const(ct) => match ct.val {\n-                    ConstValue::Bound(debruijn, bound_ct) => {\n+                    ty::ConstKind::Bound(debruijn, bound_ct) => {\n                         debug_assert_eq!(debruijn, ty::INNERMOST);\n                         cvar == bound_ct\n                     }"}, {"sha": "b8893d65ced0d9ddcec3a874d800b622c269e9f7", "filename": "src/librustc_traits/chalk_context/resolvent_ops.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs?ref=ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32", "patch": "@@ -19,7 +19,6 @@ use rustc::traits::{\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::GenericArg;\n use rustc::ty::relate::{Relate, RelateResult, TypeRelation};\n-use rustc::mir::interpret::ConstValue;\n use syntax_pos::DUMMY_SP;\n \n use super::{ChalkInferenceContext, ChalkArenas, ChalkExClause, ConstrainedSubst};\n@@ -287,7 +286,7 @@ impl TypeRelation<'tcx> for AnswerSubstitutor<'cx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        if let ty::Const { val: ConstValue::Bound(debruijn, bound_ct), .. } = a {\n+        if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), .. } = a {\n             if *debruijn == self.binder_index {\n                 self.unify_free_answer_var(*bound_ct, b.into())?;\n                 return Ok(b);\n@@ -296,8 +295,8 @@ impl TypeRelation<'tcx> for AnswerSubstitutor<'cx, 'tcx> {\n \n         match (a, b) {\n             (\n-                ty::Const { val: ConstValue::Bound(a_debruijn, a_bound), .. },\n-                ty::Const { val: ConstValue::Bound(b_debruijn, b_bound), .. },\n+                ty::Const { val: ty::ConstKind::Bound(a_debruijn, a_bound), .. },\n+                ty::Const { val: ty::ConstKind::Bound(b_debruijn, b_bound), .. },\n             ) => {\n                 assert_eq!(a_debruijn, b_debruijn);\n                 assert_eq!(a_bound, b_bound);"}]}