{"sha": "14780b310e88e0b69e15a2dd7f7870087ced685d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NzgwYjMxMGU4OGUwYjY5ZTE1YTJkZDdmNzg3MDA4N2NlZDY4NWQ=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-01-11T00:20:01Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-01-16T01:16:40Z"}, "message": "[incremental] Cache AdtDef hashes\n\nPart of #47294", "tree": {"sha": "3a45948691ee5c30a3cb633848914a2552ca8b40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a45948691ee5c30a3cb633848914a2552ca8b40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14780b310e88e0b69e15a2dd7f7870087ced685d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14780b310e88e0b69e15a2dd7f7870087ced685d", "html_url": "https://github.com/rust-lang/rust/commit/14780b310e88e0b69e15a2dd7f7870087ced685d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14780b310e88e0b69e15a2dd7f7870087ced685d/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adc9d86363e0997f8378ea0260dfec3a9d09bcf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/adc9d86363e0997f8378ea0260dfec3a9d09bcf0", "html_url": "https://github.com/rust-lang/rust/commit/adc9d86363e0997f8378ea0260dfec3a9d09bcf0"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "81444bc09f296b47904c094bafade3111676cfea", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/14780b310e88e0b69e15a2dd7f7870087ced685d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14780b310e88e0b69e15a2dd7f7870087ced685d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=14780b310e88e0b69e15a2dd7f7870087ced685d", "patch": "@@ -20,6 +20,7 @@ use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use hir::map::DefPathData;\n use hir::svh::Svh;\n+use ich::Fingerprint;\n use ich::StableHashingContext;\n use middle::const_val::ConstVal;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n@@ -37,6 +38,7 @@ use util::common::ErrorReported;\n use util::nodemap::{NodeSet, DefIdMap, FxHashMap, FxHashSet};\n \n use serialize::{self, Encodable, Encoder};\n+use std::cell::RefCell;\n use std::collections::BTreeMap;\n use std::cmp;\n use std::fmt;\n@@ -1476,17 +1478,32 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for AdtDef {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'gcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        let ty::AdtDef {\n-            did,\n-            ref variants,\n-            ref flags,\n-            ref repr,\n-        } = *self;\n-\n-        did.hash_stable(hcx, hasher);\n-        variants.hash_stable(hcx, hasher);\n-        flags.hash_stable(hcx, hasher);\n-        repr.hash_stable(hcx, hasher);\n+        thread_local! {\n+            static CACHE: RefCell<FxHashMap<usize, Fingerprint>> =\n+                RefCell::new(FxHashMap());\n+        }\n+\n+        let hash: Fingerprint = CACHE.with(|cache| {\n+            let addr = self as *const AdtDef as usize;\n+            *cache.borrow_mut().entry(addr).or_insert_with(|| {\n+                let ty::AdtDef {\n+                    did,\n+                    ref variants,\n+                    ref flags,\n+                    ref repr,\n+                } = *self;\n+\n+                let mut hasher = StableHasher::new();\n+                did.hash_stable(hcx, &mut hasher);\n+                variants.hash_stable(hcx, &mut hasher);\n+                flags.hash_stable(hcx, &mut hasher);\n+                repr.hash_stable(hcx, &mut hasher);\n+\n+                hasher.finish()\n+           })\n+        });\n+\n+        hash.hash_stable(hcx, hasher);\n     }\n }\n "}]}