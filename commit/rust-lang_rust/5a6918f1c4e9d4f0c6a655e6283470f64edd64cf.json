{"sha": "5a6918f1c4e9d4f0c6a655e6283470f64edd64cf", "node_id": "C_kwDOAAsO6NoAKDVhNjkxOGYxYzRlOWQ0ZjBjNmE2NTVlNjI4MzQ3MGY2NGVkZDY0Y2Y", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-04T20:08:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-04T20:08:37Z"}, "message": "Merge #11899\n\n11899: fix: Skip match check on patterns of unexpected TyKind::FnDef r=Veykril a=iDawer\n\nMatch checking does not expect patterns of `TyKind::FnDef` type.\r\nIt seems that in _rustc_ match checking is ruled out due to such type errors at the typecheck stage.\r\n\r\nSpotted in #11319\n\nCo-authored-by: iDawer <ilnur.iskhakov.oss@outlook.com>", "tree": {"sha": "e9422571206c51fe83d65d3a0b891a5676607028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9422571206c51fe83d65d3a0b891a5676607028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiS1BFCRBK7hj4Ov3rIwAA1EYIAAsT/K5UTuzndDqLcnrtB2TQ\nmHl3JGyci3nDt4ZMVF7y+6KzdErNQhM9CiIsE1OQ+2gQTQzpaSrV1aAbdKcGF/eV\nBtNWVWWQMSbzgUniZm/+qNwomsTkf4WFsCaZSdBbUKSOqOV5hpSq4YGQgjKWz1Qa\nzcwy9AcT46vuG2zHVQRwWulioodq84QduRtYqsqAO8u74q/ZSI49EyVqR1QDh3A7\naZj5b7u2IM+kl7ZZmjmVmlHTtMBRmrv665CrxHoEv+k2R/djiTgwsANWmmbXyv7H\ndg9QyZHbPM9cVowEo9+CiNeMEAGCJ7ca0CtW4+dfKLuBK1CaXV76pUA80Dyf3SA=\n=fy95\n-----END PGP SIGNATURE-----\n", "payload": "tree e9422571206c51fe83d65d3a0b891a5676607028\nparent bf6303df3721119090dfb50340f6cccc71d5ccc8\nparent 86665e50c2072725802f58e9dd1cd28d4644eb9f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649102917 +0000\ncommitter GitHub <noreply@github.com> 1649102917 +0000\n\nMerge #11899\n\n11899: fix: Skip match check on patterns of unexpected TyKind::FnDef r=Veykril a=iDawer\n\nMatch checking does not expect patterns of `TyKind::FnDef` type.\r\nIt seems that in _rustc_ match checking is ruled out due to such type errors at the typecheck stage.\r\n\r\nSpotted in #11319\n\nCo-authored-by: iDawer <ilnur.iskhakov.oss@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf", "html_url": "https://github.com/rust-lang/rust/commit/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf6303df3721119090dfb50340f6cccc71d5ccc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf6303df3721119090dfb50340f6cccc71d5ccc8", "html_url": "https://github.com/rust-lang/rust/commit/bf6303df3721119090dfb50340f6cccc71d5ccc8"}, {"sha": "86665e50c2072725802f58e9dd1cd28d4644eb9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/86665e50c2072725802f58e9dd1cd28d4644eb9f", "html_url": "https://github.com/rust-lang/rust/commit/86665e50c2072725802f58e9dd1cd28d4644eb9f"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "d21ea32d9e46e9d054806bb1f48364a61e91975b", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=5a6918f1c4e9d4f0c6a655e6283470f64edd64cf", "patch": "@@ -11,7 +11,7 @@ pub(crate) mod deconstruct_pat;\n pub(crate) mod usefulness;\n \n use hir_def::{body::Body, expr::PatId, EnumVariantId, LocalFieldId, VariantId};\n-use stdx::never;\n+use stdx::{always, never};\n \n use crate::{\n     db::HirDatabase, infer::BindingMode, InferenceResult, Interner, Substitution, Ty, TyKind,\n@@ -127,7 +127,11 @@ impl<'a> PatCtxt<'a> {\n             hir_def::expr::Pat::Tuple { ref args, ellipsis } => {\n                 let arity = match *ty.kind(Interner) {\n                     TyKind::Tuple(arity, _) => arity,\n-                    _ => panic!(\"unexpected type for tuple pattern: {:?}\", ty),\n+                    _ => {\n+                        never!(\"unexpected type for tuple pattern: {:?}\", ty);\n+                        self.errors.push(PatternError::UnexpectedType);\n+                        return Pat { ty: ty.clone(), kind: PatKind::Wild.into() };\n+                    }\n                 };\n                 let subpatterns = self.lower_tuple_subpats(args, arity, ellipsis);\n                 PatKind::Leaf { subpatterns }\n@@ -227,11 +231,16 @@ impl<'a> PatCtxt<'a> {\n             Some(variant_id) => {\n                 if let VariantId::EnumVariantId(enum_variant) = variant_id {\n                     let substs = match ty.kind(Interner) {\n-                        TyKind::Adt(_, substs) | TyKind::FnDef(_, substs) => substs.clone(),\n-                        TyKind::Error => {\n+                        TyKind::Adt(_, substs) => substs.clone(),\n+                        kind => {\n+                            always!(\n+                                matches!(kind, TyKind::FnDef(..) | TyKind::Error),\n+                                \"inappropriate type for def: {:?}\",\n+                                ty\n+                            );\n+                            self.errors.push(PatternError::UnexpectedType);\n                             return PatKind::Wild;\n                         }\n-                        _ => panic!(\"inappropriate type for def: {:?}\", ty),\n                     };\n                     PatKind::Variant { substs, enum_variant, subpatterns }\n                 } else {"}, {"sha": "3eb4cf60a968d937c2fbea8f48c938abd0e4fcb7", "filename": "crates/ide_diagnostics/src/handlers/missing_match_arms.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs?ref=5a6918f1c4e9d4f0c6a655e6283470f64edd64cf", "patch": "@@ -931,6 +931,22 @@ fn f(ty: Enum) {\n         );\n     }\n \n+    #[test]\n+    fn unexpected_ty_fndef() {\n+        cov_mark::check!(validate_match_bailed_out);\n+        check_diagnostics(\n+            r\"\n+enum Exp {\n+    Tuple(()),\n+}\n+fn f() {\n+    match __unknown {\n+        Exp::Tuple => {}\n+    }\n+}\",\n+        );\n+    }\n+\n     mod false_negatives {\n         //! The implementation of match checking here is a work in progress. As we roll this out, we\n         //! prefer false negatives to false positives (ideally there would be no false positives). This"}]}