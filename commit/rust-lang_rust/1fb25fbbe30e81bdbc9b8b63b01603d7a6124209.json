{"sha": "1fb25fbbe30e81bdbc9b8b63b01603d7a6124209", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYjI1ZmJiZTMwZTgxYmRiYzliOGI2M2IwMTYwM2Q3YTYxMjQyMDk=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-04-06T14:30:21Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-04-06T14:30:21Z"}, "message": "reduce nested loops in the code", "tree": {"sha": "202ff7f36ac499492539a65134ca224cb490d9c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/202ff7f36ac499492539a65134ca224cb490d9c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fb25fbbe30e81bdbc9b8b63b01603d7a6124209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb25fbbe30e81bdbc9b8b63b01603d7a6124209", "html_url": "https://github.com/rust-lang/rust/commit/1fb25fbbe30e81bdbc9b8b63b01603d7a6124209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fb25fbbe30e81bdbc9b8b63b01603d7a6124209/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12d141561dcd33d3074e09351df46c7129ce46ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/12d141561dcd33d3074e09351df46c7129ce46ce", "html_url": "https://github.com/rust-lang/rust/commit/12d141561dcd33d3074e09351df46c7129ce46ce"}], "stats": {"total": 90, "additions": 61, "deletions": 29}, "files": [{"sha": "9f84e3469cdc3cefb42c8b610b90a09c91f027e3", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 59, "deletions": 27, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/1fb25fbbe30e81bdbc9b8b63b01603d7a6124209/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb25fbbe30e81bdbc9b8b63b01603d7a6124209/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=1fb25fbbe30e81bdbc9b8b63b01603d7a6124209", "patch": "@@ -1565,38 +1565,70 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     error_reported = true;\n \n                     let mut err_info = None;\n+\n                     match *place_err {\n-                        Place::Projection(ref proj) => {\n-                            match proj.elem {\n-                                ProjectionElem::Deref => {\n-                                    match proj.base {\n-                                        Place::Local(local) => {\n-                                            let locations = self.mir.find_assignments(local);\n-                                            if locations.len() > 0 {\n-                                                let item_msg = if error_reported {\n-                                                    match self.specialized_description(&proj.base){\n-                                                        Some(msg) => msg,\n-                                                        None => self.get_main_error_message(place)\n-                                                    }\n-                                                } else {\n-                                                    self.get_main_error_message(place)\n-                                                };\n-                                                err_info = Some((\n-                                                    self.mir.source_info(locations[0]).span,\n-                                                      \"consider changing this to be a \\\n-                                                       mutable reference: `&mut`\", item_msg,\n-                                                       \"cannot assign through `&`-reference\"));\n-                                            }\n+\n+                        Place::Projection(box Projection {\n+                        ref base, elem:ProjectionElem::Deref}) => {\n+\n+                            match *base {\n+                                Place::Local(local) => {\n+                                    let locations = self.mir.find_assignments(local);\n+                                        if locations.len() > 0 {\n+                                            let item_msg = if error_reported {\n+                                                match self.specialized_description(base){\n+                                                    Some(msg) => msg,\n+                                                    None => self.get_main_error_message(place)\n+                                                }\n+                                            } else {\n+                                                self.get_main_error_message(place)\n+                                            };\n+                                            err_info = Some((\n+                                                self.mir.source_info(locations[0]).span,\n+                                                    \"consider changing this to be a \\\n+                                                    mutable reference: `&mut`\", item_msg,\n+                                                    \"cannot assign through `&`-reference\"));\n                                         }\n-                                        _ => {},\n-                                    }\n-                                }\n-                                _ => {}\n+                                },\n+                            _ => {},\n                             }\n-                        }\n-                        _ => {}\n+                        }, \n+                        _ => {},\n                     }\n \n+\n+                    // match *place_err {\n+                    //     Place::Projection(ref proj) => {\n+                    //         match proj.elem {\n+                    //             ProjectionElem::Deref => {\n+                    //                 match proj.base {\n+                    //                     Place::Local(local) => {\n+                    //                         let locations = self.mir.find_assignments(local);\n+                    //                         if locations.len() > 0 {\n+                    //                             let item_msg = if error_reported {\n+                    //                                 match self.specialized_description(base){\n+                    //                                     Some(msg) => msg,\n+                    //                                     None => self.get_main_error_message(place)\n+                    //                                 }\n+                    //                             } else {\n+                    //                                 self.get_main_error_message(place)\n+                    //                             };\n+                    //                             err_info = Some((\n+                    //                                 self.mir.source_info(locations[0]).span,\n+                    //                                   \"consider changing this to be a \\\n+                    //                                    mutable reference: `&mut`\", item_msg,\n+                    //                                    \"cannot assign through `&`-reference\"));\n+                    //                         }\n+                    //                     }\n+                    //                     _ => {},\n+                    //                 }\n+                    //             }\n+                    //             _ => {}\n+                    //         }\n+                    //     }\n+                    //     _ => {}\n+                    // }\n+\n                     if let Some((err_help_span, err_help_stmt, item_msg, sec_span)) = err_info {\n                         let mut err = self.tcx.cannot_assign(span, &item_msg, Origin::Mir, true);\n                         err.span_suggestion(err_help_span, err_help_stmt, format!(\"\"));"}, {"sha": "bcb3b605450da94c6898e0ac1d85dff502b0afcc", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fb25fbbe30e81bdbc9b8b63b01603d7a6124209/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb25fbbe30e81bdbc9b8b63b01603d7a6124209/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=1fb25fbbe30e81bdbc9b8b63b01603d7a6124209", "patch": "@@ -284,8 +284,8 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         self.cancel_if_wrong_origin(err, o)\n     }\n \n-    fn cannot_assign(&self, span: Span, desc: &str, o: Origin, is_reference:bool)\n-                     -> DiagnosticBuilder\n+    fn cannot_assign(self, span: Span, desc: &str, o: Origin, is_reference: bool)\n+                     -> DiagnosticBuilder<'cx>\n     {\n         let msg = if is_reference {\n             \"through\""}]}