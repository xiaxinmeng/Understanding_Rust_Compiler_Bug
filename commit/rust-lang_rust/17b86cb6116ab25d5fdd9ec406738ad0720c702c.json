{"sha": "17b86cb6116ab25d5fdd9ec406738ad0720c702c", "node_id": "C_kwDOAAsO6NoAKDE3Yjg2Y2I2MTE2YWIyNWQ1ZmRkOWVjNDA2NzM4YWQwNzIwYzcwMmM", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-26T21:40:48Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-10-28T01:34:56Z"}, "message": "Do fewer passes and generally be more efficient when filtering tests", "tree": {"sha": "b1aa286c4098361961ef8a81807767dca7db8bb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1aa286c4098361961ef8a81807767dca7db8bb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17b86cb6116ab25d5fdd9ec406738ad0720c702c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17b86cb6116ab25d5fdd9ec406738ad0720c702c", "html_url": "https://github.com/rust-lang/rust/commit/17b86cb6116ab25d5fdd9ec406738ad0720c702c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17b86cb6116ab25d5fdd9ec406738ad0720c702c/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da281b6068a7d889ae89a9bd8991284cc9b7535", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da281b6068a7d889ae89a9bd8991284cc9b7535", "html_url": "https://github.com/rust-lang/rust/commit/0da281b6068a7d889ae89a9bd8991284cc9b7535"}], "stats": {"total": 95, "additions": 66, "deletions": 29}, "files": [{"sha": "8cb88016b23ade5b5fb6bdfdf9dce3f128440576", "filename": "library/test/src/console.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17b86cb6116ab25d5fdd9ec406738ad0720c702c/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b86cb6116ab25d5fdd9ec406738ad0720c702c/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=17b86cb6116ab25d5fdd9ec406738ad0720c702c", "patch": "@@ -228,9 +228,9 @@ fn on_test_event(\n     out: &mut dyn OutputFormatter,\n ) -> io::Result<()> {\n     match (*event).clone() {\n-        TestEvent::TeFiltered(ref filtered_tests, shuffle_seed) => {\n-            st.total = filtered_tests.len();\n-            out.write_run_start(filtered_tests.len(), shuffle_seed)?;\n+        TestEvent::TeFiltered(filtered_tests, shuffle_seed) => {\n+            st.total = filtered_tests;\n+            out.write_run_start(filtered_tests, shuffle_seed)?;\n         }\n         TestEvent::TeFilteredOut(filtered_out) => {\n             st.filtered_out = filtered_out;"}, {"sha": "80281ebd2d4cdd946207f67bf741f10cb0d94e58", "filename": "library/test/src/event.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b86cb6116ab25d5fdd9ec406738ad0720c702c/library%2Ftest%2Fsrc%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b86cb6116ab25d5fdd9ec406738ad0720c702c/library%2Ftest%2Fsrc%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fevent.rs?ref=17b86cb6116ab25d5fdd9ec406738ad0720c702c", "patch": "@@ -28,7 +28,7 @@ impl CompletedTest {\n \n #[derive(Debug, Clone)]\n pub enum TestEvent {\n-    TeFiltered(Vec<TestDesc>, Option<u64>),\n+    TeFiltered(usize, Option<u64>),\n     TeWait(TestDesc),\n     TeResult(CompletedTest),\n     TeTimeout(TestDesc),"}, {"sha": "56a8d92f55db2035387ef54e207dab05c313b862", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 62, "deletions": 25, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/17b86cb6116ab25d5fdd9ec406738ad0720c702c/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b86cb6116ab25d5fdd9ec406738ad0720c702c/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=17b86cb6116ab25d5fdd9ec406738ad0720c702c", "patch": "@@ -219,6 +219,35 @@ pub fn assert_test_result<T: Termination>(result: T) -> Result<(), String> {\n     }\n }\n \n+struct FilteredTests {\n+    tests: Vec<(TestId, TestDescAndFn)>,\n+    benchs: Vec<(TestId, TestDescAndFn)>,\n+    next_id: usize,\n+}\n+\n+impl FilteredTests {\n+    fn add_bench(&mut self, desc: TestDesc, testfn: TestFn) {\n+        let test = TestDescAndFn { desc, testfn };\n+        self.benchs.push((TestId(self.next_id), test));\n+        self.next_id += 1;\n+    }\n+    fn add_test(&mut self, desc: TestDesc, testfn: TestFn) {\n+        let test = TestDescAndFn { desc, testfn };\n+        self.tests.push((TestId(self.next_id), test));\n+        self.next_id += 1;\n+    }\n+    fn add_bench_as_test(\n+        &mut self,\n+        desc: TestDesc,\n+        benchfn: impl Fn(&mut Bencher) -> Result<(), String> + Send + 'static,\n+    ) {\n+        let testfn = DynTestFn(Box::new(move || {\n+            bench::run_once(|b| __rust_begin_short_backtrace(|| benchfn(b)))\n+        }));\n+        self.add_test(desc, testfn);\n+    }\n+}\n+\n pub fn run_tests<F>(\n     opts: &TestOpts,\n     tests: Vec<TestDescAndFn>,\n@@ -247,45 +276,51 @@ where\n \n     let tests_len = tests.len();\n \n-    let mut filtered_tests = filter_tests(opts, tests);\n-    if !opts.bench_benchmarks {\n-        filtered_tests = convert_benchmarks_to_tests(filtered_tests);\n-    }\n+    let mut filtered = FilteredTests { tests: Vec::new(), benchs: Vec::new(), next_id: 0 };\n \n-    let filtered_tests = {\n-        let mut filtered_tests = filtered_tests;\n-        for test in filtered_tests.iter_mut() {\n-            test.desc.name = test.desc.name.with_padding(test.testfn.padding());\n-        }\n+    for test in filter_tests(opts, tests) {\n+        let mut desc = test.desc;\n+        desc.name = desc.name.with_padding(test.testfn.padding());\n \n-        filtered_tests\n-    };\n+        match test.testfn {\n+            DynBenchFn(benchfn) => {\n+                if opts.bench_benchmarks {\n+                    filtered.add_bench(desc, DynBenchFn(benchfn));\n+                } else {\n+                    filtered.add_bench_as_test(desc, benchfn);\n+                }\n+            }\n+            StaticBenchFn(benchfn) => {\n+                if opts.bench_benchmarks {\n+                    filtered.add_bench(desc, StaticBenchFn(benchfn));\n+                } else {\n+                    filtered.add_bench_as_test(desc, benchfn);\n+                }\n+            }\n+            testfn => {\n+                filtered.add_test(desc, testfn);\n+            }\n+        };\n+    }\n \n-    let filtered_out = tests_len - filtered_tests.len();\n+    let filtered_out = tests_len - filtered.tests.len();\n     let event = TestEvent::TeFilteredOut(filtered_out);\n     notify_about_test_event(event)?;\n \n-    let filtered_descs = filtered_tests.iter().map(|t| t.desc.clone()).collect();\n-\n     let shuffle_seed = get_shuffle_seed(opts);\n \n-    let event = TestEvent::TeFiltered(filtered_descs, shuffle_seed);\n+    let event = TestEvent::TeFiltered(filtered.tests.len(), shuffle_seed);\n     notify_about_test_event(event)?;\n \n-    let (mut filtered_tests, filtered_benchs): (Vec<_>, _) = filtered_tests\n-        .into_iter()\n-        .enumerate()\n-        .map(|(i, e)| (TestId(i), e))\n-        .partition(|(_, e)| matches!(e.testfn, StaticTestFn(_) | DynTestFn(_)));\n-\n     let concurrency = opts.test_threads.unwrap_or_else(get_concurrency);\n \n+    let mut remaining = filtered.tests;\n     if let Some(shuffle_seed) = shuffle_seed {\n-        shuffle_tests(shuffle_seed, &mut filtered_tests);\n+        shuffle_tests(shuffle_seed, &mut remaining);\n     }\n     // Store the tests in a VecDeque so we can efficiently remove the first element to run the\n     // tests in the order they were passed (unless shuffled).\n-    let mut remaining = VecDeque::from(filtered_tests);\n+    let mut remaining = VecDeque::from(remaining);\n     let mut pending = 0;\n \n     let (tx, rx) = channel::<CompletedTest>();\n@@ -402,7 +437,7 @@ where\n \n     if opts.bench_benchmarks {\n         // All benchmarks run at the end, in serial.\n-        for (id, b) in filtered_benchs {\n+        for (id, b) in filtered.benchs {\n             let event = TestEvent::TeWait(b.desc.clone());\n             notify_about_test_event(event)?;\n             run_test(opts, false, id, b, run_strategy, tx.clone(), Concurrent::No);\n@@ -432,7 +467,9 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n     }\n \n     // Skip tests that match any of the skip filters\n-    filtered.retain(|test| !opts.skip.iter().any(|sf| matches_filter(test, sf)));\n+    if !opts.skip.is_empty() {\n+        filtered.retain(|test| !opts.skip.iter().any(|sf| matches_filter(test, sf)));\n+    }\n \n     // Excludes #[should_panic] tests\n     if opts.exclude_should_panic {"}]}