{"sha": "7377120fee84743ad980ed87458bb08dd97f3101", "node_id": "C_kwDOAAsO6NoAKDczNzcxMjBmZWU4NDc0M2FkOTgwZWQ4NzQ1OGJiMDhkZDk3ZjMxMDE", "commit": {"author": {"name": "hamidreza kalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-09-26T09:17:57Z"}, "committer": {"name": "hamidreza kalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-09-26T09:18:53Z"}, "message": "add some tests", "tree": {"sha": "ac792b0c5e561aa2374f6453c5c15b0aa1ea008a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac792b0c5e561aa2374f6453c5c15b0aa1ea008a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7377120fee84743ad980ed87458bb08dd97f3101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7377120fee84743ad980ed87458bb08dd97f3101", "html_url": "https://github.com/rust-lang/rust/commit/7377120fee84743ad980ed87458bb08dd97f3101", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7377120fee84743ad980ed87458bb08dd97f3101/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13d36e96c2e6ff0bb2b45b470f15fc96fcc67bbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/13d36e96c2e6ff0bb2b45b470f15fc96fcc67bbb", "html_url": "https://github.com/rust-lang/rust/commit/13d36e96c2e6ff0bb2b45b470f15fc96fcc67bbb"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "2ea6f6a9ab1b6add03a095d35fbfc357d727c995", "filename": "crates/ide/src/fixture.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7377120fee84743ad980ed87458bb08dd97f3101/crates%2Fide%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7377120fee84743ad980ed87458bb08dd97f3101/crates%2Fide%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffixture.rs?ref=7377120fee84743ad980ed87458bb08dd97f3101", "patch": "@@ -66,3 +66,22 @@ pub(crate) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(Fil\n         .collect();\n     (host.analysis(), FilePosition { file_id, offset }, annotations)\n }\n+\n+/// Creates analysis from a multi-file fixture with annonations without $0\n+pub(crate) fn annotations_without_marker(ra_fixture: &str) -> (Analysis, Vec<(FileRange, String)>) {\n+    let mut host = AnalysisHost::default();\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.set_enable_proc_attr_macros(true);\n+    host.db.apply_change(change_fixture.change);\n+\n+    let annotations = change_fixture\n+        .files\n+        .iter()\n+        .flat_map(|&file_id| {\n+            let file_text = host.analysis().file_text(file_id).unwrap();\n+            let annotations = extract_annotations(&file_text);\n+            annotations.into_iter().map(move |(range, data)| (FileRange { file_id, range }, data))\n+        })\n+        .collect();\n+    (host.analysis(), annotations)\n+}"}, {"sha": "d467e794cec55045f99d8ec6b1126cbc7103168c", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/7377120fee84743ad980ed87458bb08dd97f3101/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7377120fee84743ad980ed87458bb08dd97f3101/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=7377120fee84743ad980ed87458bb08dd97f3101", "patch": "@@ -179,3 +179,83 @@ fn get_definition(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Option<\n     }\n     None\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{fixture, StaticIndex};\n+    use ide_db::base_db::FileRange;\n+    use std::collections::HashSet;\n+\n+    fn check_all_ranges(ra_fixture: &str) {\n+        let (analysis, ranges) = fixture::annotations_without_marker(ra_fixture);\n+        let s = StaticIndex::compute(&*analysis.db, &analysis).unwrap();\n+        let mut range_set: HashSet<_> = ranges.iter().map(|x| x.0).collect();\n+        for f in s.files {\n+            for (range, _) in f.tokens {\n+                let x = FileRange { file_id: f.file_id, range };\n+                if !range_set.contains(&x) {\n+                    panic!(\"additional range {:?}\", x);\n+                }\n+                range_set.remove(&x);\n+            }\n+        }\n+        if !range_set.is_empty() {\n+            panic!(\"unfound ranges {:?}\", range_set);\n+        }\n+    }\n+\n+    fn check_definitions(ra_fixture: &str) {\n+        let (analysis, ranges) = fixture::annotations_without_marker(ra_fixture);\n+        let s = StaticIndex::compute(&*analysis.db, &analysis).unwrap();\n+        let mut range_set: HashSet<_> = ranges.iter().map(|x| x.0).collect();\n+        for (_, t) in s.tokens.iter() {\n+            if let Some(x) = t.definition {\n+                if !range_set.contains(&x) {\n+                    panic!(\"additional definition {:?}\", x);\n+                }\n+                range_set.remove(&x);\n+            }\n+        }\n+        if !range_set.is_empty() {\n+            panic!(\"unfound definitions {:?}\", range_set);\n+        }\n+    }\n+\n+    #[test]\n+    fn struct_and_enum() {\n+        check_all_ranges(\n+            r#\"\n+struct Foo;\n+     //^^^\n+enum E { X(Foo) }\n+   //^   ^ ^^^\n+\"#,\n+        );\n+        check_definitions(\n+            r#\"\n+struct Foo;\n+     //^^^\n+enum E { X(Foo) }\n+   //^   ^\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn derives() {\n+        check_all_ranges(\n+            r#\"\n+#[rustc_builtin_macro]\n+pub macro Copy {}\n+        //^^^^\n+#[rustc_builtin_macro]\n+pub macro derive {}\n+        //^^^^^^\n+#[derive(Copy)]\n+//^^^^^^ ^^^^\n+struct Hello(i32);\n+     //^^^^^ ^^^\n+\"#,\n+        );\n+    }\n+}"}]}