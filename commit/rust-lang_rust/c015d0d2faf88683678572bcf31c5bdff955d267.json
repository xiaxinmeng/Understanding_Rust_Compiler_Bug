{"sha": "c015d0d2faf88683678572bcf31c5bdff955d267", "node_id": "C_kwDOAAsO6NoAKGMwMTVkMGQyZmFmODg2ODM2Nzg1NzJiY2YzMWM1YmRmZjk1NWQyNjc", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-07T09:21:25Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-07T09:48:26Z"}, "message": "switch to termcolor", "tree": {"sha": "24f82c24b40b47de6d3cb3e756232d862db05bf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24f82c24b40b47de6d3cb3e756232d862db05bf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c015d0d2faf88683678572bcf31c5bdff955d267", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQHCGsACgkQzXazX3c0\ndp6LGBAAgAu35dUdZ3vzc5TvmOsLbBLUxxo+fNGN+U+mz3H/I0n2ofcBHo4tDpj7\n+ZUOhIiQHy8zRprS770XIXOpMVcK0vS5PMN6PN13qtoiS1bJuy7OQCCd0nyAsOno\nl5qHwGe3F+5NAgSWYZXqHFPIG3vSG5ri0NQOkFMq7/1oLGdiog85OX4NjjH52SKS\nU6jitK5P5d6x+gMM61T/k0w7E9l/fBi29qP0szxw0QtbVKNPIICqvaGb4J3tw3Hp\nQN0bIz41kWWx84kklBFI/KEVdLFfx1hu3YNNrv7ZQ79I5VYi4ecHHRdfxVFlrCpo\nLjMb05nABWvkpNIKU36UInDvG+hJyktK62OKtb3KteBL5qs9xxr/iXszjc7qjmf0\nN6YfCztJ6RdQhn/ySoszvIPnXYUZ060H57keQHcZ4EJihxhPlyNhtLnhkd8s489K\nQB/I2bSTkF8hAxJb94NpOBeNXJlsuFIytL61bnmxXzOPIwQqZcwmcughsac5RVFA\nJuGDy0cz4bEQNusOVD1Ac0RoiL6Zrq6mjcykab9WBbVZ8mfwcdNx/DT3kITGV5cH\n2ad2nAPqkZGDmJF048bbJYJO03M1kn0BL3zUgaBhH6oREXjJBuaTBSUOuVEjlF3W\nbMmbXFQbhB6GtzAoqi34moCwzT+aBwfkrudc34K6I63+nZnBye4=\n=/Uye\n-----END PGP SIGNATURE-----", "payload": "tree 24f82c24b40b47de6d3cb3e756232d862db05bf7\nparent 3248ab758a43844ae69172cb7d082735e473ad29\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1678180885 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1678182506 +0100\n\nswitch to termcolor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c015d0d2faf88683678572bcf31c5bdff955d267", "html_url": "https://github.com/rust-lang/rust/commit/c015d0d2faf88683678572bcf31c5bdff955d267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c015d0d2faf88683678572bcf31c5bdff955d267/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3248ab758a43844ae69172cb7d082735e473ad29", "url": "https://api.github.com/repos/rust-lang/rust/commits/3248ab758a43844ae69172cb7d082735e473ad29", "html_url": "https://github.com/rust-lang/rust/commit/3248ab758a43844ae69172cb7d082735e473ad29"}], "stats": {"total": 125, "additions": 78, "deletions": 47}, "files": [{"sha": "69bb98135ca149eb05d733beb5445cd834f34ca5", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c015d0d2faf88683678572bcf31c5bdff955d267/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c015d0d2faf88683678572bcf31c5bdff955d267/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=c015d0d2faf88683678572bcf31c5bdff955d267", "patch": "@@ -67,11 +67,11 @@ dependencies = [\n  \"sha2\",\n  \"sysinfo\",\n  \"tar\",\n+ \"termcolor\",\n  \"toml\",\n  \"walkdir\",\n  \"winapi\",\n  \"xz2\",\n- \"yansi-term\",\n ]\n \n [[package]]\n@@ -649,6 +649,15 @@ dependencies = [\n  \"xattr\",\n ]\n \n+[[package]]\n+name = \"termcolor\"\n+version = \"1.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6\"\n+dependencies = [\n+ \"winapi-util\",\n+]\n+\n [[package]]\n name = \"thread_local\"\n version = \"1.1.4\"\n@@ -813,12 +822,3 @@ name = \"yansi\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec\"\n-\n-[[package]]\n-name = \"yansi-term\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fe5c30ade05e61656247b2e334a031dfd0cc466fadef865bdcdea8d537951bf1\"\n-dependencies = [\n- \"winapi\",\n-]"}, {"sha": "83e63df50147c2736b0ed7569b5dba05622b64d5", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c015d0d2faf88683678572bcf31c5bdff955d267/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c015d0d2faf88683678572bcf31c5bdff955d267/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=c015d0d2faf88683678572bcf31c5bdff955d267", "patch": "@@ -47,13 +47,13 @@ serde_derive = \"1.0.137\"\n serde_json = \"1.0.2\"\n sha2 = \"0.10\"\n tar = \"0.4\"\n+termcolor = \"1.2.0\"\n toml = \"0.5\"\n ignore = \"0.4.10\"\n opener = \"0.5\"\n once_cell = \"1.7.2\"\n xz2 = \"0.1\"\n walkdir = \"2\"\n-yansi-term = \"0.1.2\"\n \n # Dependencies needed by the build-metrics feature\n sysinfo = { version = \"0.26.0\", optional = true }"}, {"sha": "9e1d88a6aefcc2e7beda87c73ac4a3b79cd54edd", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c015d0d2faf88683678572bcf31c5bdff955d267/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c015d0d2faf88683678572bcf31c5bdff955d267/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c015d0d2faf88683678572bcf31c5bdff955d267", "patch": "@@ -89,7 +89,7 @@ pub use crate::builder::PathSet;\n use crate::cache::{Interned, INTERNER};\n pub use crate::config::Config;\n pub use crate::flags::Subcommand;\n-use yansi_term::Color;\n+use termcolor::{ColorChoice, StandardStream, WriteColor};\n \n const LLVM_TOOLS: &[&str] = &[\n     \"llvm-cov\",      // used to generate coverage report\n@@ -1577,21 +1577,29 @@ to download LLVM rather than building it.\n         self.config.ninja_in_file\n     }\n \n-    pub fn color_for_stdout(&self, color: Color, message: &str) -> String {\n-        self.color_for_inner(color, message, self.config.stdout_is_tty)\n+    pub fn colored_stdout<R, F: FnOnce(&mut dyn WriteColor) -> R>(&self, f: F) -> R {\n+        self.colored_stream_inner(StandardStream::stdout, self.config.stdout_is_tty, f)\n     }\n \n-    pub fn color_for_stderr(&self, color: Color, message: &str) -> String {\n-        self.color_for_inner(color, message, self.config.stderr_is_tty)\n+    pub fn colored_stderr<R, F: FnOnce(&mut dyn WriteColor) -> R>(&self, f: F) -> R {\n+        self.colored_stream_inner(StandardStream::stderr, self.config.stderr_is_tty, f)\n     }\n \n-    fn color_for_inner(&self, color: Color, message: &str, is_tty: bool) -> String {\n-        let use_color = match self.config.color {\n-            flags::Color::Always => true,\n-            flags::Color::Never => false,\n-            flags::Color::Auto => is_tty,\n+    fn colored_stream_inner<R, F, C>(&self, constructor: C, is_tty: bool, f: F) -> R\n+    where\n+        C: Fn(ColorChoice) -> StandardStream,\n+        F: FnOnce(&mut dyn WriteColor) -> R,\n+    {\n+        let choice = match self.config.color {\n+            flags::Color::Always => ColorChoice::Always,\n+            flags::Color::Never => ColorChoice::Never,\n+            flags::Color::Auto if !is_tty => ColorChoice::Never,\n+            flags::Color::Auto => ColorChoice::Auto,\n         };\n-        if use_color { color.paint(message).to_string() } else { message.to_string() }\n+        let mut stream = constructor(choice);\n+        let result = f(&mut stream);\n+        stream.reset().unwrap();\n+        result\n     }\n }\n "}, {"sha": "fd78e449a49b8602d888a3d207b9272c7a154295", "filename": "src/bootstrap/render_tests.rs", "status": "modified", "additions": 48, "deletions": 25, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c015d0d2faf88683678572bcf31c5bdff955d267/src%2Fbootstrap%2Frender_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c015d0d2faf88683678572bcf31c5bdff955d267/src%2Fbootstrap%2Frender_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frender_tests.rs?ref=c015d0d2faf88683678572bcf31c5bdff955d267", "patch": "@@ -10,7 +10,7 @@ use crate::builder::Builder;\n use std::io::{BufRead, BufReader, Write};\n use std::process::{ChildStdout, Command, Stdio};\n use std::time::Duration;\n-use yansi_term::Color;\n+use termcolor::{Color, ColorSpec, WriteColor};\n \n const TERSE_TESTS_PER_LINE: usize = 88;\n \n@@ -139,16 +139,12 @@ impl<'a> Renderer<'a> {\n     }\n \n     fn render_test_outcome_verbose(&self, outcome: Outcome<'_>, test: &TestOutcome) {\n+        print!(\"test {} ... \", test.name);\n+        self.builder.colored_stdout(|stdout| outcome.write_long(stdout)).unwrap();\n         if let Some(exec_time) = test.exec_time {\n-            println!(\n-                \"test {} ... {} (in {:.2?})\",\n-                test.name,\n-                outcome.long(self.builder),\n-                Duration::from_secs_f64(exec_time)\n-            );\n-        } else {\n-            println!(\"test {} ... {}\", test.name, outcome.long(self.builder));\n+            print!(\" ({exec_time:.2?})\");\n         }\n+        println!();\n     }\n \n     fn render_test_outcome_terse(&mut self, outcome: Outcome<'_>, _: &TestOutcome) {\n@@ -163,7 +159,7 @@ impl<'a> Renderer<'a> {\n         }\n \n         self.terse_tests_in_line += 1;\n-        print!(\"{}\", outcome.short(self.builder));\n+        self.builder.colored_stdout(|stdout| outcome.write_short(stdout)).unwrap();\n         let _ = std::io::stdout().flush();\n     }\n \n@@ -208,10 +204,11 @@ impl<'a> Renderer<'a> {\n             }\n         }\n \n+        print!(\"\\ntest result: \");\n+        self.builder.colored_stdout(|stdout| outcome.write_long(stdout)).unwrap();\n         println!(\n-            \"\\ntest result: {}. {} passed; {} failed; {} ignored; {} measured; \\\n-             {} filtered out; finished in {:.2?}\\n\",\n-            outcome.long(self.builder),\n+            \". {} passed; {} failed; {} ignored; {} measured; {} filtered out; \\\n+             finished in {:.2?}\\n\",\n             suite.passed,\n             suite.failed,\n             suite.ignored,\n@@ -276,25 +273,51 @@ enum Outcome<'a> {\n }\n \n impl Outcome<'_> {\n-    fn short(&self, builder: &Builder<'_>) -> String {\n+    fn write_short(&self, writer: &mut dyn WriteColor) -> Result<(), std::io::Error> {\n         match self {\n-            Outcome::Ok => builder.color_for_stdout(Color::Green, \".\"),\n-            Outcome::BenchOk => builder.color_for_stdout(Color::Cyan, \"b\"),\n-            Outcome::Failed => builder.color_for_stdout(Color::Red, \"F\"),\n-            Outcome::Ignored { .. } => builder.color_for_stdout(Color::Yellow, \"i\"),\n+            Outcome::Ok => {\n+                writer.set_color(&ColorSpec::new().set_fg(Some(Color::Green)))?;\n+                write!(writer, \".\")?;\n+            }\n+            Outcome::BenchOk => {\n+                writer.set_color(&ColorSpec::new().set_fg(Some(Color::Cyan)))?;\n+                write!(writer, \"b\")?;\n+            }\n+            Outcome::Failed => {\n+                writer.set_color(&ColorSpec::new().set_fg(Some(Color::Red)))?;\n+                write!(writer, \"F\")?;\n+            }\n+            Outcome::Ignored { .. } => {\n+                writer.set_color(&ColorSpec::new().set_fg(Some(Color::Yellow)))?;\n+                write!(writer, \"i\")?;\n+            }\n         }\n+        writer.reset()\n     }\n \n-    fn long(&self, builder: &Builder<'_>) -> String {\n+    fn write_long(&self, writer: &mut dyn WriteColor) -> Result<(), std::io::Error> {\n         match self {\n-            Outcome::Ok => builder.color_for_stdout(Color::Green, \"ok\"),\n-            Outcome::BenchOk => builder.color_for_stdout(Color::Cyan, \"benchmarked\"),\n-            Outcome::Failed => builder.color_for_stdout(Color::Red, \"FAILED\"),\n-            Outcome::Ignored { reason: None } => builder.color_for_stdout(Color::Yellow, \"ignored\"),\n-            Outcome::Ignored { reason: Some(reason) } => {\n-                builder.color_for_stdout(Color::Yellow, &format!(\"ignored, {reason}\"))\n+            Outcome::Ok => {\n+                writer.set_color(&ColorSpec::new().set_fg(Some(Color::Green)))?;\n+                write!(writer, \"ok\")?;\n+            }\n+            Outcome::BenchOk => {\n+                writer.set_color(&ColorSpec::new().set_fg(Some(Color::Cyan)))?;\n+                write!(writer, \"benchmarked\")?;\n+            }\n+            Outcome::Failed => {\n+                writer.set_color(&ColorSpec::new().set_fg(Some(Color::Red)))?;\n+                write!(writer, \"FAILED\")?;\n+            }\n+            Outcome::Ignored { reason } => {\n+                writer.set_color(&ColorSpec::new().set_fg(Some(Color::Yellow)))?;\n+                write!(writer, \"ignored\")?;\n+                if let Some(reason) = reason {\n+                    write!(writer, \", {reason}\")?;\n+                }\n             }\n         }\n+        writer.reset()\n     }\n }\n "}]}