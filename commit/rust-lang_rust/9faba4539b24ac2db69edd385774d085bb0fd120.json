{"sha": "9faba4539b24ac2db69edd385774d085bb0fd120", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYWJhNDUzOWIyNGFjMmRiNjllZGQzODU3NzRkMDg1YmIwZmQxMjA=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-10-30T03:50:25Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-11-03T00:31:51Z"}, "message": "fix(parser): better unclosed delims handling", "tree": {"sha": "926899a142152ef8b30022fb5c4312f5180ad759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/926899a142152ef8b30022fb5c4312f5180ad759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9faba4539b24ac2db69edd385774d085bb0fd120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9faba4539b24ac2db69edd385774d085bb0fd120", "html_url": "https://github.com/rust-lang/rust/commit/9faba4539b24ac2db69edd385774d085bb0fd120", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9faba4539b24ac2db69edd385774d085bb0fd120/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e131797b62fd52f48fb59296c4c700a97250dee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e131797b62fd52f48fb59296c4c700a97250dee4", "html_url": "https://github.com/rust-lang/rust/commit/e131797b62fd52f48fb59296c4c700a97250dee4"}], "stats": {"total": 135, "additions": 86, "deletions": 49}, "files": [{"sha": "78de08b993ecd75e05f82968ffcc63529c59badb", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9faba4539b24ac2db69edd385774d085bb0fd120/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faba4539b24ac2db69edd385774d085bb0fd120/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=9faba4539b24ac2db69edd385774d085bb0fd120", "patch": "@@ -23,7 +23,6 @@ pub(crate) struct Directory {\n /// A parser for Rust source code.\n pub(crate) struct Parser<'a> {\n     parser: RawParser<'a>,\n-    sess: &'a ParseSess,\n }\n \n /// A builder for the `Parser`.\n@@ -71,7 +70,7 @@ impl<'a> ParserBuilder<'a> {\n             }\n         };\n \n-        Ok(Parser { parser, sess })\n+        Ok(Parser { parser })\n     }\n \n     fn parser(\n@@ -150,33 +149,40 @@ impl<'a> Parser<'a> {\n         input: Input,\n         directory_ownership: Option<DirectoryOwnership>,\n         sess: &'a ParseSess,\n+    ) -> Result<ast::Crate, ParserError> {\n+        let krate = Parser::parse_crate_inner(config, input, directory_ownership, sess)?;\n+        if !sess.has_errors() {\n+            return Ok(krate);\n+        }\n+\n+        if sess.can_reset_errors() {\n+            sess.reset_errors();\n+            return Ok(krate);\n+        }\n+\n+        Err(ParserError::ParseError)\n+    }\n+\n+    fn parse_crate_inner(\n+        config: &'a Config,\n+        input: Input,\n+        directory_ownership: Option<DirectoryOwnership>,\n+        sess: &'a ParseSess,\n     ) -> Result<ast::Crate, ParserError> {\n         let mut parser = ParserBuilder::default()\n             .config(config)\n             .input(input)\n             .directory_ownership(directory_ownership)\n             .sess(sess)\n             .build()?;\n-\n-        parser.parse_crate_inner()\n+        parser.parse_crate_mod()\n     }\n \n-    fn parse_crate_inner(&mut self) -> Result<ast::Crate, ParserError> {\n+    fn parse_crate_mod(&mut self) -> Result<ast::Crate, ParserError> {\n         let mut parser = AssertUnwindSafe(&mut self.parser);\n \n         match catch_unwind(move || parser.parse_crate_mod()) {\n-            Ok(Ok(krate)) => {\n-                if !self.sess.has_errors() {\n-                    return Ok(krate);\n-                }\n-\n-                if self.sess.can_reset_errors() {\n-                    self.sess.reset_errors();\n-                    return Ok(krate);\n-                }\n-\n-                Err(ParserError::ParseError)\n-            }\n+            Ok(Ok(k)) => Ok(k),\n             Ok(Err(mut db)) => {\n                 db.emit();\n                 Err(ParserError::ParseError)"}, {"sha": "9b3ca717152071d66ee40d344afd628c3dfdffc7", "filename": "src/test/mod.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9faba4539b24ac2db69edd385774d085bb0fd120/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faba4539b24ac2db69edd385774d085bb0fd120/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=9faba4539b24ac2db69edd385774d085bb0fd120", "patch": "@@ -11,14 +11,12 @@ use std::thread;\n \n use crate::config::{Color, Config, EmitMode, FileName, NewlineStyle, ReportTactic};\n use crate::formatting::{ReportedErrors, SourceFile};\n-use crate::modules::{ModuleResolutionError, ModuleResolutionErrorKind};\n use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, ModifiedChunk, OutputWriter};\n use crate::source_file;\n-use crate::{\n-    is_nightly_channel, ErrorKind, FormatReport, FormatReportFormatterBuilder, Input, Session,\n-};\n+use crate::{is_nightly_channel, FormatReport, FormatReportFormatterBuilder, Input, Session};\n \n mod configuration_snippet;\n+mod parser;\n \n const DIFF_CONTEXT_SIZE: usize = 3;\n \n@@ -485,34 +483,6 @@ fn format_lines_errors_are_reported_with_tabs() {\n     assert!(session.has_formatting_errors());\n }\n \n-#[test]\n-fn parser_errors_in_submods_are_surfaced() {\n-    // See also https://github.com/rust-lang/rustfmt/issues/4126\n-    let filename = \"tests/parser/issue-4126/lib.rs\";\n-    let input_file = PathBuf::from(filename);\n-    let exp_mod_name = \"invalid\";\n-    let config = read_config(&input_file);\n-    let mut session = Session::<io::Stdout>::new(config, None);\n-    if let Err(ErrorKind::ModuleResolutionError(ModuleResolutionError { module, kind })) =\n-        session.format(Input::File(filename.into()))\n-    {\n-        assert_eq!(&module, exp_mod_name);\n-        if let ModuleResolutionErrorKind::ParseError {\n-            file: unparseable_file,\n-        } = kind\n-        {\n-            assert_eq!(\n-                unparseable_file,\n-                PathBuf::from(\"tests/parser/issue-4126/invalid.rs\"),\n-            );\n-        } else {\n-            panic!(\"Expected parser error\");\n-        }\n-    } else {\n-        panic!(\"Expected ModuleResolution operation error\");\n-    }\n-}\n-\n // For each file, run rustfmt and collect the output.\n // Returns the number of files checked and the number of failures.\n fn check_files(files: Vec<PathBuf>, opt_config: &Option<PathBuf>) -> (Vec<FormatReport>, u32, u32) {"}, {"sha": "75aed32e68b61613c35134aac8ec9995a6868271", "filename": "src/test/parser.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9faba4539b24ac2db69edd385774d085bb0fd120/src%2Ftest%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faba4539b24ac2db69edd385774d085bb0fd120/src%2Ftest%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparser.rs?ref=9faba4539b24ac2db69edd385774d085bb0fd120", "patch": "@@ -0,0 +1,50 @@\n+use std::io;\n+use std::path::PathBuf;\n+\n+use super::read_config;\n+\n+use crate::modules::{ModuleResolutionError, ModuleResolutionErrorKind};\n+use crate::{ErrorKind, Input, Session};\n+\n+#[test]\n+fn parser_errors_in_submods_are_surfaced() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/4126\n+    let filename = \"tests/parser/issue-4126/lib.rs\";\n+    let input_file = PathBuf::from(filename);\n+    let exp_mod_name = \"invalid\";\n+    let config = read_config(&input_file);\n+    let mut session = Session::<io::Stdout>::new(config, None);\n+    if let Err(ErrorKind::ModuleResolutionError(ModuleResolutionError { module, kind })) =\n+        session.format(Input::File(filename.into()))\n+    {\n+        assert_eq!(&module, exp_mod_name);\n+        if let ModuleResolutionErrorKind::ParseError {\n+            file: unparseable_file,\n+        } = kind\n+        {\n+            assert_eq!(\n+                unparseable_file,\n+                PathBuf::from(\"tests/parser/issue-4126/invalid.rs\"),\n+            );\n+        } else {\n+            panic!(\"Expected parser error\");\n+        }\n+    } else {\n+        panic!(\"Expected ModuleResolution operation error\");\n+    }\n+}\n+\n+fn assert_parser_error(filename: &str) {\n+    let file = PathBuf::from(filename);\n+    let config = read_config(&file);\n+    let mut session = Session::<io::Stdout>::new(config, None);\n+    let _ = session.format(Input::File(filename.into())).unwrap();\n+    assert!(session.has_parsing_errors());\n+}\n+\n+#[test]\n+fn crate_parsing_errors_on_unclosed_delims() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/4466\n+    let filename = \"tests/parser/unclosed-delims/issue_4466.rs\";\n+    assert_parser_error(filename);\n+}"}, {"sha": "2c2c81c91d1967f268105dcb3024380a8eb2a595", "filename": "tests/parser/unclosed-delims/issue_4466.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9faba4539b24ac2db69edd385774d085bb0fd120/tests%2Fparser%2Funclosed-delims%2Fissue_4466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faba4539b24ac2db69edd385774d085bb0fd120/tests%2Fparser%2Funclosed-delims%2Fissue_4466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser%2Funclosed-delims%2Fissue_4466.rs?ref=9faba4539b24ac2db69edd385774d085bb0fd120", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    if true {\n+        println!(\"answer: {}\", a_func();\n+    } else {\n+        println!(\"don't think so.\");\n+    }\n+}\n+\n+fn a_func() -> i32 {\n+    42\n+} \n\\ No newline at end of file"}]}