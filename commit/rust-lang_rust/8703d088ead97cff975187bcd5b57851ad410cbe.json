{"sha": "8703d088ead97cff975187bcd5b57851ad410cbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MDNkMDg4ZWFkOTdjZmY5NzUxODdiY2Q1YjU3ODUxYWQ0MTBjYmU=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-09T17:45:54Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-09T18:10:09Z"}, "message": "Add example from lkuper's intern talk to the test suite.", "tree": {"sha": "fbeacf8214e38c102cae1392045a6afee7f30c33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbeacf8214e38c102cae1392045a6afee7f30c33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8703d088ead97cff975187bcd5b57851ad410cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8703d088ead97cff975187bcd5b57851ad410cbe", "html_url": "https://github.com/rust-lang/rust/commit/8703d088ead97cff975187bcd5b57851ad410cbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8703d088ead97cff975187bcd5b57851ad410cbe/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82d2ef7639252ba365427ea1ad0e285986b5bf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82d2ef7639252ba365427ea1ad0e285986b5bf8", "html_url": "https://github.com/rust-lang/rust/commit/e82d2ef7639252ba365427ea1ad0e285986b5bf8"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "d5d3f115aa4b7b7cd9b5c000c8c30a54a59d0204", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8703d088ead97cff975187bcd5b57851ad410cbe/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8703d088ead97cff975187bcd5b57851ad410cbe/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=8703d088ead97cff975187bcd5b57851ad410cbe", "patch": "@@ -0,0 +1,54 @@\n+// Example from lkuper's intern talk, August 2012.\n+\n+trait Equal {\n+    fn isEq(a: self) -> bool;\n+}\n+\n+enum Color { cyan, magenta, yellow, black }\n+\n+impl Color : Equal {\n+    fn isEq(a: Color) -> bool {\n+        match (self, a) {\n+          (cyan, cyan)       => { true  }\n+          (magenta, magenta) => { true  }\n+          (yellow, yellow)   => { true  }\n+          (black, black)     => { true  }\n+          _                  => { false }\n+        }\n+    }\n+}\n+\n+enum ColorTree {\n+    leaf(Color),\n+    branch(@ColorTree, @ColorTree)\n+}\n+\n+impl ColorTree : Equal {\n+    fn isEq(a: ColorTree) -> bool {\n+        match (self, a) {\n+          (leaf(x), leaf(y)) => { x.isEq(y) }\n+          (branch(l1, r1), branch(l2, r2)) => { \n+            (*l1).isEq(*l2) && (*r1).isEq(*r2)\n+          }\n+          _ => { false }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    assert cyan.isEq(cyan);\n+    assert magenta.isEq(magenta);\n+    assert !cyan.isEq(yellow);\n+    assert !magenta.isEq(cyan);\n+\n+    assert leaf(cyan).isEq(leaf(cyan));\n+    assert !leaf(cyan).isEq(leaf(yellow));\n+\n+    assert branch(@leaf(magenta), @leaf(cyan))\n+        .isEq(branch(@leaf(magenta), @leaf(cyan)));\n+\n+    assert !branch(@leaf(magenta), @leaf(cyan))\n+        .isEq(branch(@leaf(magenta), @leaf(magenta)));\n+\n+    log(error, \"Assertions all succeeded!\");\n+}\n\\ No newline at end of file"}]}