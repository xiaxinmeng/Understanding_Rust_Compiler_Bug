{"sha": "6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMmQxYjRlMTVkNWRlOTBmOGMzNjE4MWIxZDQyOWRhNjU4YWRmZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-23T01:02:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-23T01:02:21Z"}, "message": "Auto merge of #54071 - eddyb:alignsssss, r=oli-obk\n\nrustc_target: separate out an individual alignment quantity type from Align.\n\nBefore this PR, `rustc_target::abi::Align` combined \"power-of-two alignment quantity\" semantics, with a distinction between ABI (required) and preferred alignment (by having two quantities).\n\nAfter this PR, `Align` is only *one* such quantity, and a new `AbiAndPrefAlign` type is introduced to hold the pair of ABI and preferred `Align` quantities.\n\n`Align` is used everywhere one quantity is necessary/sufficient, simplifying some of the code in codegen/miri, while `AbiAndPrefAlign` only in layout computation (to propagate preferred alignment).\n\nr? @oli-obk cc @nagisa @RalfJung @nikomatsakis", "tree": {"sha": "d815d3ea4166ddf687f92dd0550e0b6233d5e58b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d815d3ea4166ddf687f92dd0550e0b6233d5e58b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "html_url": "https://github.com/rust-lang/rust/commit/6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00e03ee57446d47667e5adba77fca8c13bfe7535", "url": "https://api.github.com/repos/rust-lang/rust/commits/00e03ee57446d47667e5adba77fca8c13bfe7535", "html_url": "https://github.com/rust-lang/rust/commit/00e03ee57446d47667e5adba77fca8c13bfe7535"}, {"sha": "5b4747ded7c964ea4e871b3ea6b10bf20862462a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4747ded7c964ea4e871b3ea6b10bf20862462a", "html_url": "https://github.com/rust-lang/rust/commit/5b4747ded7c964ea4e871b3ea6b10bf20862462a"}], "stats": {"total": 737, "additions": 363, "deletions": 374}, "files": [{"sha": "3250ea266a5872310ff75fc5e2f3845bb2156549", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -104,7 +104,7 @@ impl<Tag, Extra: Default> Allocation<Tag, Extra> {\n     }\n \n     pub fn from_byte_aligned_bytes(slice: &[u8]) -> Self {\n-        Allocation::from_bytes(slice, Align::from_bytes(1, 1).unwrap())\n+        Allocation::from_bytes(slice, Align::from_bytes(1).unwrap())\n     }\n \n     pub fn undef(size: Size, align: Align) -> Self {"}, {"sha": "7477343891e205abe1a58368e6d0416539268370", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -527,7 +527,7 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n                 write!(f, \"tried to interpret an invalid 32-bit value as a char: {}\", c),\n             AlignmentCheckFailed { required, has } =>\n                write!(f, \"tried to access memory with alignment {}, but alignment {} is required\",\n-                      has.abi(), required.abi()),\n+                      has.bytes(), required.bytes()),\n             TypeNotPrimitive(ty) =>\n                 write!(f, \"expected primitive type, got {}\", ty),\n             Layout(ref err) =>\n@@ -537,8 +537,9 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n             MachineError(ref inner) =>\n                 write!(f, \"{}\", inner),\n             IncorrectAllocationInformation(size, size2, align, align2) =>\n-                write!(f, \"incorrect alloc info: expected size {} and align {}, got size {} and \\\n-                       align {}\", size.bytes(), align.abi(), size2.bytes(), align2.abi()),\n+                write!(f, \"incorrect alloc info: expected size {} and align {}, \\\n+                           got size {} and align {}\",\n+                    size.bytes(), align.bytes(), size2.bytes(), align2.bytes()),\n             Panic { ref msg, line, col, ref file } =>\n                 write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n             InvalidDiscriminant(val) =>"}, {"sha": "b8f5ce3cdbc7c924f259bb1102c1446bc064a65e", "filename": "src/librustc/session/code_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fcode_stats.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -71,7 +71,7 @@ impl CodeStats {\n         let info = TypeSizeInfo {\n             kind,\n             type_description: type_desc.to_string(),\n-            align: align.abi(),\n+            align: align.bytes(),\n             overall_size: overall_size.bytes(),\n             packed: packed,\n             opt_discr_size: opt_discr_size.map(|s| s.bytes()),"}, {"sha": "da0a9acede20e690f7ce6227b96186b86f8ab37a", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 52, "deletions": 53, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -226,9 +226,10 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             tcx.intern_layout(LayoutDetails::scalar(self, scalar_unit(value)))\n         };\n         let scalar_pair = |a: Scalar, b: Scalar| {\n-            let align = a.value.align(dl).max(b.value.align(dl)).max(dl.aggregate_align);\n-            let b_offset = a.value.size(dl).abi_align(b.value.align(dl));\n-            let size = (b_offset + b.value.size(dl)).abi_align(align);\n+            let b_align = b.value.align(dl);\n+            let align = a.value.align(dl).max(b_align).max(dl.aggregate_align);\n+            let b_offset = a.value.size(dl).align_to(b_align.abi);\n+            let size = (b_offset + b.value.size(dl)).align_to(align.abi);\n             LayoutDetails {\n                 variants: Variants::Single { index: VariantIdx::new(0) },\n                 fields: FieldPlacement::Arbitrary {\n@@ -257,10 +258,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 bug!(\"struct cannot be packed and aligned\");\n             }\n \n-            let pack = {\n-                let pack = repr.pack as u64;\n-                Align::from_bytes(pack, pack).unwrap()\n-            };\n+            let pack = Align::from_bytes(repr.pack as u64).unwrap();\n \n             let mut align = if packed {\n                 dl.i8_align\n@@ -274,7 +272,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n             let mut optimize = !repr.inhibit_struct_field_reordering_opt();\n             if let StructKind::Prefixed(_, align) = kind {\n-                optimize &= align.abi() == 1;\n+                optimize &= align.bytes() == 1;\n             }\n \n             if optimize {\n@@ -285,7 +283,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 };\n                 let optimizing = &mut inverse_memory_index[..end];\n                 let field_align = |f: &TyLayout<'_>| {\n-                    if packed { f.align.min(pack).abi() } else { f.align.abi() }\n+                    if packed { f.align.abi.min(pack) } else { f.align.abi }\n                 };\n                 match kind {\n                     StructKind::AlwaysSized |\n@@ -312,13 +310,13 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             let mut offset = Size::ZERO;\n \n             if let StructKind::Prefixed(prefix_size, prefix_align) = kind {\n-                if packed {\n-                    let prefix_align = prefix_align.min(pack);\n-                    align = align.max(prefix_align);\n+                let prefix_align = if packed {\n+                    prefix_align.min(pack)\n                 } else {\n-                    align = align.max(prefix_align);\n-                }\n-                offset = prefix_size.abi_align(prefix_align);\n+                    prefix_align\n+                };\n+                align = align.max(AbiAndPrefAlign::new(prefix_align));\n+                offset = prefix_size.align_to(prefix_align);\n             }\n \n             for &i in &inverse_memory_index {\n@@ -333,15 +331,13 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }\n \n                 // Invariant: offset < dl.obj_size_bound() <= 1<<61\n-                if packed {\n-                    let field_pack = field.align.min(pack);\n-                    offset = offset.abi_align(field_pack);\n-                    align = align.max(field_pack);\n-                }\n-                else {\n-                    offset = offset.abi_align(field.align);\n-                    align = align.max(field.align);\n-                }\n+                let field_align = if packed {\n+                    field.align.min(AbiAndPrefAlign::new(pack))\n+                } else {\n+                    field.align\n+                };\n+                offset = offset.align_to(field_align.abi);\n+                align = align.max(field_align);\n \n                 debug!(\"univariant offset: {:?} field: {:#?}\", offset, field);\n                 offsets[i as usize] = offset;\n@@ -352,7 +348,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n             if repr.align > 0 {\n                 let repr_align = repr.align as u64;\n-                align = align.max(Align::from_bytes(repr_align, repr_align).unwrap());\n+                align = align.max(AbiAndPrefAlign::new(Align::from_bytes(repr_align).unwrap()));\n                 debug!(\"univariant repr_align: {:?}\", repr_align);\n             }\n \n@@ -377,7 +373,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 memory_index = inverse_memory_index;\n             }\n \n-            let size = min_size.abi_align(align);\n+            let size = min_size.align_to(align.abi);\n             let mut abi = Abi::Aggregate { sized };\n \n             // Unpack newtype ABIs and find scalar pairs.\n@@ -394,7 +390,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                         (Some((i, field)), None, None) => {\n                             // Field fills the struct and it has a scalar or scalar pair ABI.\n                             if offsets[i].bytes() == 0 &&\n-                               align.abi() == field.align.abi() &&\n+                               align.abi == field.align.abi &&\n                                size == field.size {\n                                 match field.abi {\n                                     // For plain scalars, or vectors of them, we can't unpack\n@@ -648,7 +644,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 let size = element.size.checked_mul(count, dl)\n                     .ok_or(LayoutError::SizeOverflow(ty))?;\n                 let align = dl.vector_align(size);\n-                let size = size.abi_align(align);\n+                let size = size.align_to(align.abi);\n \n                 tcx.intern_layout(LayoutDetails {\n                     variants: Variants::Single { index: VariantIdx::new(0) },\n@@ -680,10 +676,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                         bug!(\"Union cannot be packed and aligned\");\n                     }\n \n-                    let pack = {\n-                        let pack = def.repr.pack as u64;\n-                        Align::from_bytes(pack, pack).unwrap()\n-                    };\n+                    let pack = Align::from_bytes(def.repr.pack as u64).unwrap();\n \n                     let mut align = if packed {\n                         dl.i8_align\n@@ -694,7 +687,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     if def.repr.align > 0 {\n                         let repr_align = def.repr.align as u64;\n                         align = align.max(\n-                            Align::from_bytes(repr_align, repr_align).unwrap());\n+                            AbiAndPrefAlign::new(Align::from_bytes(repr_align).unwrap()));\n                     }\n \n                     let optimize = !def.repr.inhibit_union_abi_opt();\n@@ -704,12 +697,12 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     for field in &variants[index] {\n                         assert!(!field.is_unsized());\n \n-                        if packed {\n-                            let field_pack = field.align.min(pack);\n-                            align = align.max(field_pack);\n+                        let field_align = if packed {\n+                            field.align.min(AbiAndPrefAlign::new(pack))\n                         } else {\n-                            align = align.max(field.align);\n-                        }\n+                            field.align\n+                        };\n+                        align = align.max(field_align);\n \n                         // If all non-ZST fields have the same ABI, forward this ABI\n                         if optimize && !field.is_zst() {\n@@ -749,7 +742,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                         fields: FieldPlacement::Union(variants[index].len()),\n                         abi,\n                         align,\n-                        size: size.abi_align(align)\n+                        size: size.align_to(align.abi)\n                     }));\n                 }\n \n@@ -964,19 +957,19 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 let mut size = Size::ZERO;\n \n                 // We're interested in the smallest alignment, so start large.\n-                let mut start_align = Align::from_bytes(256, 256).unwrap();\n-                assert_eq!(Integer::for_abi_align(dl, start_align), None);\n+                let mut start_align = Align::from_bytes(256).unwrap();\n+                assert_eq!(Integer::for_align(dl, start_align), None);\n \n                 // repr(C) on an enum tells us to make a (tag, union) layout,\n                 // so we need to grow the prefix alignment to be at least\n                 // the alignment of the union. (This value is used both for\n                 // determining the alignment of the overall enum, and the\n                 // determining the alignment of the payload after the tag.)\n-                let mut prefix_align = min_ity.align(dl);\n+                let mut prefix_align = min_ity.align(dl).abi;\n                 if def.repr.c() {\n                     for fields in &variants {\n                         for field in fields {\n-                            prefix_align = prefix_align.max(field.align);\n+                            prefix_align = prefix_align.max(field.align.abi);\n                         }\n                     }\n                 }\n@@ -989,8 +982,8 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     // Find the first field we can't move later\n                     // to make room for a larger discriminant.\n                     for field in st.fields.index_by_increasing_offset().map(|j| field_layouts[j]) {\n-                        if !field.is_zst() || field.align.abi() != 1 {\n-                            start_align = start_align.min(field.align);\n+                        if !field.is_zst() || field.align.abi.bytes() != 1 {\n+                            start_align = start_align.min(field.align.abi);\n                             break;\n                         }\n                     }\n@@ -1000,7 +993,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }).collect::<Result<IndexVec<VariantIdx, _>, _>>()?;\n \n                 // Align the maximum variant size to the largest alignment.\n-                size = size.abi_align(align);\n+                size = size.align_to(align.abi);\n \n                 if size.bytes() >= dl.obj_size_bound() {\n                     return Err(LayoutError::SizeOverflow(ty));\n@@ -1036,7 +1029,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 let mut ity = if def.repr.c() || def.repr.int.is_some() {\n                     min_ity\n                 } else {\n-                    Integer::for_abi_align(dl, start_align).unwrap_or(min_ity)\n+                    Integer::for_align(dl, start_align).unwrap_or(min_ity)\n                 };\n \n                 // If the alignment is not larger than the chosen discriminant size,\n@@ -1204,7 +1197,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             let type_desc = format!(\"{:?}\", layout.ty);\n             self.tcx.sess.code_stats.borrow_mut().record_type_size(kind,\n                                                                    type_desc,\n-                                                                   layout.align,\n+                                                                   layout.align.abi,\n                                                                    layout.size,\n                                                                    packed,\n                                                                    opt_discr_size,\n@@ -1251,7 +1244,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                             name: name.to_string(),\n                             offset: offset.bytes(),\n                             size: field_layout.size.bytes(),\n-                            align: field_layout.align.abi(),\n+                            align: field_layout.align.abi.bytes(),\n                         }\n                     }\n                 }\n@@ -1264,7 +1257,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 } else {\n                     session::SizeKind::Exact\n                 },\n-                align: layout.align.abi(),\n+                align: layout.align.abi.bytes(),\n                 size: if min_size.bytes() == 0 {\n                     layout.size.bytes()\n                 } else {\n@@ -1823,7 +1816,9 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             Abi::ScalarPair(ref a, ref b) => {\n                 // HACK(nox): We iter on `b` and then `a` because `max_by_key`\n                 // returns the last maximum.\n-                let niche = iter::once((b, a.value.size(self).abi_align(b.value.align(self))))\n+                let niche = iter::once(\n+                    (b, a.value.size(self).align_to(b.value.align(self).abi))\n+                )\n                     .chain(iter::once((a, Size::ZERO)))\n                     .filter_map(|(scalar, offset)| scalar_niche(scalar, offset))\n                     .max_by_key(|niche| niche.available);\n@@ -1994,12 +1989,16 @@ impl_stable_hash_for!(enum ::ty::layout::Primitive {\n     Pointer\n });\n \n+impl_stable_hash_for!(struct ::ty::layout::AbiAndPrefAlign {\n+    abi,\n+    pref\n+});\n+\n impl<'gcx> HashStable<StableHashingContext<'gcx>> for Align {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'gcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        self.abi().hash_stable(hcx, hasher);\n-        self.pref().hash_stable(hcx, hasher);\n+        self.bytes().hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "3470d6fd0e72a57fc76b2bc374cfef2241c9506e", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -73,7 +73,7 @@ impl ArgAttributesExt for ArgAttributes {\n             if let Some(align) = self.pointee_align {\n                 llvm::LLVMRustAddAlignmentAttr(llfn,\n                                                idx.as_uint(),\n-                                               align.abi() as u32);\n+                                               align.bytes() as u32);\n             }\n             regular.for_each_kind(|attr| attr.apply_llfn(idx, llfn));\n         }\n@@ -98,7 +98,7 @@ impl ArgAttributesExt for ArgAttributes {\n             if let Some(align) = self.pointee_align {\n                 llvm::LLVMRustAddAlignmentCallSiteAttr(callsite,\n                                                        idx.as_uint(),\n-                                                       align.abi() as u32);\n+                                                       align.bytes() as u32);\n             }\n             regular.for_each_kind(|attr| attr.apply_callsite(idx, callsite));\n         }\n@@ -204,7 +204,7 @@ impl ArgTypeExt<'ll, 'tcx> for ArgType<'tcx, Ty<'tcx>> {\n             return;\n         }\n         if self.is_sized_indirect() {\n-            OperandValue::Ref(val, None, self.layout.align).store(bx, dst)\n+            OperandValue::Ref(val, None, self.layout.align.abi).store(bx, dst)\n         } else if self.is_unsized_indirect() {\n             bug!(\"unsized ArgType must be handled through store_fn_arg\");\n         } else if let PassMode::Cast(cast) = self.mode {\n@@ -214,7 +214,7 @@ impl ArgTypeExt<'ll, 'tcx> for ArgType<'tcx, Ty<'tcx>> {\n             if can_store_through_cast_ptr {\n                 let cast_ptr_llty = bx.cx().type_ptr_to(cast.llvm_type(bx.cx()));\n                 let cast_dst = bx.pointercast(dst.llval, cast_ptr_llty);\n-                bx.store(val, cast_dst, self.layout.align);\n+                bx.store(val, cast_dst, self.layout.align.abi);\n             } else {\n                 // The actual return type is a struct, but the ABI\n                 // adaptation code has cast it into some scalar type.  The\n@@ -242,7 +242,7 @@ impl ArgTypeExt<'ll, 'tcx> for ArgType<'tcx, Ty<'tcx>> {\n                 // ...and then memcpy it to the intended destination.\n                 bx.memcpy(\n                     dst.llval,\n-                    self.layout.align,\n+                    self.layout.align.abi,\n                     llscratch,\n                     scratch_align,\n                     bx.cx().const_usize(self.layout.size.bytes()),\n@@ -273,7 +273,7 @@ impl ArgTypeExt<'ll, 'tcx> for ArgType<'tcx, Ty<'tcx>> {\n                 OperandValue::Pair(next(), next()).store(bx, dst);\n             }\n             PassMode::Indirect(_, Some(_)) => {\n-                OperandValue::Ref(next(), Some(next()), self.layout.align).store(bx, dst);\n+                OperandValue::Ref(next(), Some(next()), self.layout.align.abi).store(bx, dst);\n             }\n             PassMode::Direct(_) | PassMode::Indirect(_, None) | PassMode::Cast(_) => {\n                 self.store(bx, next(), dst);\n@@ -545,7 +545,7 @@ impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n                     adjust_for_rust_scalar(&mut b_attrs,\n                                            b,\n                                            arg.layout,\n-                                           a.value.size(cx).abi_align(b.value.align(cx)),\n+                                           a.value.size(cx).align_to(b.value.align(cx).abi),\n                                            false);\n                     arg.mode = PassMode::Pair(a_attrs, b_attrs);\n                     return arg;"}, {"sha": "d2a99eae3406f969bfe705636f96daeb4b892131", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -475,7 +475,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 llvm::LLVMBuildAlloca(self.llbuilder, ty,\n                                       name.as_ptr())\n             };\n-            llvm::LLVMSetAlignment(alloca, align.abi() as c_uint);\n+            llvm::LLVMSetAlignment(alloca, align.bytes() as c_uint);\n             alloca\n         }\n     }\n@@ -494,7 +494,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 llvm::LLVMBuildArrayAlloca(self.llbuilder, ty, len,\n                                            name.as_ptr())\n             };\n-            llvm::LLVMSetAlignment(alloca, align.abi() as c_uint);\n+            llvm::LLVMSetAlignment(alloca, align.bytes() as c_uint);\n             alloca\n         }\n     }\n@@ -503,7 +503,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         self.count_insn(\"load\");\n         unsafe {\n             let load = llvm::LLVMBuildLoad(self.llbuilder, ptr, noname());\n-            llvm::LLVMSetAlignment(load, align.abi() as c_uint);\n+            llvm::LLVMSetAlignment(load, align.bytes() as c_uint);\n             load\n         }\n     }\n@@ -658,7 +658,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             let align = if flags.contains(MemFlags::UNALIGNED) {\n                 1\n             } else {\n-                align.abi() as c_uint\n+                align.bytes() as c_uint\n             };\n             llvm::LLVMSetAlignment(store, align);\n             if flags.contains(MemFlags::VOLATILE) {\n@@ -893,8 +893,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let dst = self.pointercast(dst, self.cx().type_i8p());\n         let src = self.pointercast(src, self.cx().type_i8p());\n         unsafe {\n-            llvm::LLVMRustBuildMemCpy(self.llbuilder, dst, dst_align.abi() as c_uint,\n-                                      src, src_align.abi() as c_uint, size, is_volatile);\n+            llvm::LLVMRustBuildMemCpy(self.llbuilder, dst, dst_align.bytes() as c_uint,\n+                                      src, src_align.bytes() as c_uint, size, is_volatile);\n         }\n     }\n \n@@ -913,8 +913,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let dst = self.pointercast(dst, self.cx().type_i8p());\n         let src = self.pointercast(src, self.cx().type_i8p());\n         unsafe {\n-            llvm::LLVMRustBuildMemMove(self.llbuilder, dst, dst_align.abi() as c_uint,\n-                                      src, src_align.abi() as c_uint, size, is_volatile);\n+            llvm::LLVMRustBuildMemMove(self.llbuilder, dst, dst_align.bytes() as c_uint,\n+                                      src, src_align.bytes() as c_uint, size, is_volatile);\n         }\n     }\n \n@@ -930,7 +930,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let intrinsic_key = format!(\"llvm.memset.p0i8.i{}\", ptr_width);\n         let llintrinsicfn = self.cx().get_intrinsic(&intrinsic_key);\n         let ptr = self.pointercast(ptr, self.cx().type_i8p());\n-        let align = self.cx().const_u32(align.abi() as u32);\n+        let align = self.cx().const_u32(align.bytes() as u32);\n         let volatile = self.cx().const_bool(flags.contains(MemFlags::VOLATILE));\n         self.call(llintrinsicfn, &[ptr, fill_byte, size, align, volatile], None);\n     }"}, {"sha": "cd74a5854a926e5a8c024c8155cf1c0ce195ac13", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -357,7 +357,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         offset: Size,\n     ) -> PlaceRef<'tcx, &'ll Value> {\n         let init = const_alloc_to_llvm(self, alloc);\n-        let base_addr = self.static_addr_of(init, layout.align, None);\n+        let base_addr = self.static_addr_of(init, layout.align.abi, None);\n \n         let llval = unsafe { llvm::LLVMConstInBoundsGEP(\n             self.static_bitcast(base_addr, self.type_i8p()),"}, {"sha": "07dde2d0301fe72ee1691fd958660d650525f234", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -94,15 +94,15 @@ fn set_global_alignment(cx: &CodegenCx<'ll, '_>,\n     // Note: GCC and Clang also allow `__attribute__((aligned))` on variables,\n     // which can force it to be smaller.  Rust doesn't support this yet.\n     if let Some(min) = cx.sess().target.target.options.min_global_align {\n-        match ty::layout::Align::from_bits(min, min) {\n+        match Align::from_bits(min) {\n             Ok(min) => align = align.max(min),\n             Err(err) => {\n                 cx.sess().err(&format!(\"invalid minimum global alignment: {}\", err));\n             }\n         }\n     }\n     unsafe {\n-        llvm::LLVMSetAlignment(gv, align.abi() as u32);\n+        llvm::LLVMSetAlignment(gv, align.bytes() as u32);\n     }\n }\n \n@@ -219,7 +219,7 @@ impl StaticMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             unsafe {\n                 // Upgrade the alignment in cases where the same constant is used with different\n                 // alignment requirements\n-                let llalign = align.abi() as u32;\n+                let llalign = align.bytes() as u32;\n                 if llalign > llvm::LLVMGetAlignment(gv) {\n                     llvm::LLVMSetAlignment(gv, llalign);\n                 }"}, {"sha": "81f2769800d2f190a96a4d7d8ceb4594fcccbf91", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 27, "deletions": 31, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -323,7 +323,7 @@ fn fixed_vec_metadata(\n         llvm::LLVMRustDIBuilderCreateArrayType(\n             DIB(cx),\n             size.bits(),\n-            align.abi_bits() as u32,\n+            align.bits() as u32,\n             element_type_metadata,\n             subscripts)\n     };\n@@ -465,7 +465,7 @@ fn trait_pointer_metadata(\n                 syntax_pos::DUMMY_SP),\n             offset: layout.fields.offset(0),\n             size: data_ptr_field.size,\n-            align: data_ptr_field.align,\n+            align: data_ptr_field.align.abi,\n             flags: DIFlags::FlagArtificial,\n             discriminant: None,\n         },\n@@ -474,7 +474,7 @@ fn trait_pointer_metadata(\n             type_metadata: type_metadata(cx, vtable_field.ty, syntax_pos::DUMMY_SP),\n             offset: layout.fields.offset(1),\n             size: vtable_field.size,\n-            align: vtable_field.align,\n+            align: vtable_field.align.abi,\n             flags: DIFlags::FlagArtificial,\n             discriminant: None,\n         },\n@@ -787,7 +787,7 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n             DIB(cx),\n             name.as_ptr(),\n             size.bits(),\n-            align.abi_bits() as u32,\n+            align.bits() as u32,\n             encoding)\n     };\n \n@@ -818,7 +818,7 @@ fn pointer_type_metadata(\n             DIB(cx),\n             pointee_type_metadata,\n             pointer_size.bits(),\n-            pointer_align.abi_bits() as u32,\n+            pointer_align.bits() as u32,\n             name.as_ptr())\n     }\n }\n@@ -985,13 +985,12 @@ impl<'tcx> StructMemberDescriptionFactory<'tcx> {\n                 f.ident.to_string()\n             };\n             let field = layout.field(cx, i);\n-            let (size, align) = field.size_and_align();\n             MemberDescription {\n                 name,\n                 type_metadata: type_metadata(cx, field.ty, self.span),\n                 offset: layout.fields.offset(i),\n-                size,\n-                align,\n+                size: field.size,\n+                align: field.align.abi,\n                 flags: DIFlags::FlagZero,\n                 discriminant: None,\n             }\n@@ -1109,13 +1108,12 @@ impl<'tcx> UnionMemberDescriptionFactory<'tcx> {\n                                   -> Vec<MemberDescription<'ll>> {\n         self.variant.fields.iter().enumerate().map(|(i, f)| {\n             let field = self.layout.field(cx, i);\n-            let (size, align) = field.size_and_align();\n             MemberDescription {\n                 name: f.ident.to_string(),\n                 type_metadata: type_metadata(cx, field.ty, self.span),\n                 offset: Size::ZERO,\n-                size,\n-                align,\n+                size: field.size,\n+                align: field.align.abi,\n                 flags: DIFlags::FlagZero,\n                 discriminant: None,\n             }\n@@ -1228,7 +1226,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         type_metadata: variant_type_metadata,\n                         offset: Size::ZERO,\n                         size: self.layout.size,\n-                        align: self.layout.align,\n+                        align: self.layout.align.abi,\n                         flags: DIFlags::FlagZero,\n                         discriminant: None,\n                     }\n@@ -1267,7 +1265,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         type_metadata: variant_type_metadata,\n                         offset: Size::ZERO,\n                         size: self.layout.size,\n-                        align: self.layout.align,\n+                        align: self.layout.align.abi,\n                         flags: DIFlags::FlagZero,\n                         discriminant: Some(self.layout.ty.ty_adt_def().unwrap()\n                                            .discriminant_for_variant(cx.tcx, i)\n@@ -1336,7 +1334,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             type_metadata: variant_type_metadata,\n                             offset: Size::ZERO,\n                             size: variant.size,\n-                            align: variant.align,\n+                            align: variant.align.abi,\n                             flags: DIFlags::FlagZero,\n                             discriminant: None,\n                         }\n@@ -1374,7 +1372,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             type_metadata: variant_type_metadata,\n                             offset: Size::ZERO,\n                             size: self.layout.size,\n-                            align: self.layout.align,\n+                            align: self.layout.align.abi,\n                             flags: DIFlags::FlagZero,\n                             discriminant: niche_value,\n                         }\n@@ -1565,7 +1563,7 @@ fn prepare_enum_metadata(\n                         file_metadata,\n                         UNKNOWN_LINE_NUMBER,\n                         discriminant_size.bits(),\n-                        discriminant_align.abi_bits() as u32,\n+                        discriminant_align.abi.bits() as u32,\n                         create_DIArray(DIB(cx), &enumerators_metadata),\n                         discriminant_base_type_metadata, true)\n                 };\n@@ -1587,8 +1585,6 @@ fn prepare_enum_metadata(\n         _ => {}\n     }\n \n-    let (enum_type_size, enum_type_align) = layout.size_and_align();\n-\n     let enum_name = SmallCStr::new(&enum_name);\n     let unique_type_id_str = SmallCStr::new(\n         debug_context(cx).type_map.borrow().get_unique_type_id_as_string(unique_type_id)\n@@ -1610,8 +1606,8 @@ fn prepare_enum_metadata(\n                 enum_name.as_ptr(),\n                 file_metadata,\n                 UNKNOWN_LINE_NUMBER,\n-                enum_type_size.bits(),\n-                enum_type_align.abi_bits() as u32,\n+                layout.size.bits(),\n+                layout.align.abi.bits() as u32,\n                 DIFlags::FlagZero,\n                 None,\n                 0, // RuntimeLang\n@@ -1659,7 +1655,7 @@ fn prepare_enum_metadata(\n                     file_metadata,\n                     UNKNOWN_LINE_NUMBER,\n                     size.bits(),\n-                    align.abi_bits() as u32,\n+                    align.abi.bits() as u32,\n                     layout.fields.offset(0).bits(),\n                     DIFlags::FlagArtificial,\n                     discr_metadata))\n@@ -1679,7 +1675,7 @@ fn prepare_enum_metadata(\n                     file_metadata,\n                     UNKNOWN_LINE_NUMBER,\n                     size.bits(),\n-                    align.abi_bits() as u32,\n+                    align.bits() as u32,\n                     layout.fields.offset(0).bits(),\n                     DIFlags::FlagArtificial,\n                     discr_metadata))\n@@ -1695,8 +1691,8 @@ fn prepare_enum_metadata(\n             ptr::null_mut(),\n             file_metadata,\n             UNKNOWN_LINE_NUMBER,\n-            enum_type_size.bits(),\n-            enum_type_align.abi_bits() as u32,\n+            layout.size.bits(),\n+            layout.align.abi.bits() as u32,\n             DIFlags::FlagZero,\n             discriminator_metadata,\n             empty_array,\n@@ -1712,8 +1708,8 @@ fn prepare_enum_metadata(\n             enum_name.as_ptr(),\n             file_metadata,\n             UNKNOWN_LINE_NUMBER,\n-            enum_type_size.bits(),\n-            enum_type_align.abi_bits() as u32,\n+            layout.size.bits(),\n+            layout.align.abi.bits() as u32,\n             DIFlags::FlagZero,\n             None,\n             type_array,\n@@ -1807,7 +1803,7 @@ fn set_members_of_composite_type(cx: &CodegenCx<'ll, '_>,\n                     unknown_file_metadata(cx),\n                     UNKNOWN_LINE_NUMBER,\n                     member_description.size.bits(),\n-                    member_description.align.abi_bits() as u32,\n+                    member_description.align.bits() as u32,\n                     member_description.offset.bits(),\n                     match member_description.discriminant {\n                         None => None,\n@@ -1855,7 +1851,7 @@ fn create_struct_stub(\n             unknown_file_metadata(cx),\n             UNKNOWN_LINE_NUMBER,\n             struct_size.bits(),\n-            struct_align.abi_bits() as u32,\n+            struct_align.bits() as u32,\n             DIFlags::FlagZero,\n             None,\n             empty_array,\n@@ -1893,7 +1889,7 @@ fn create_union_stub(\n             unknown_file_metadata(cx),\n             UNKNOWN_LINE_NUMBER,\n             union_size.bits(),\n-            union_align.abi_bits() as u32,\n+            union_align.bits() as u32,\n             DIFlags::FlagZero,\n             Some(empty_array),\n             0, // RuntimeLang\n@@ -1962,7 +1958,7 @@ pub fn create_global_var_metadata(\n                                                     is_local_to_unit,\n                                                     global,\n                                                     None,\n-                                                    global_align.abi() as u32,\n+                                                    global_align.bytes() as u32,\n         );\n     }\n }\n@@ -2000,7 +1996,7 @@ pub fn create_vtable_metadata(\n             unknown_file_metadata(cx),\n             UNKNOWN_LINE_NUMBER,\n             Size::ZERO.bits(),\n-            cx.tcx.data_layout.pointer_align.abi_bits() as u32,\n+            cx.tcx.data_layout.pointer_align.abi.bits() as u32,\n             DIFlags::FlagArtificial,\n             None,\n             empty_array,"}, {"sha": "78bdf678f67078d2411c42fbe1c10bab4b84b070", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -201,7 +201,7 @@ impl DebugInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                         cx.sess().opts.optimize != config::OptLevel::No,\n                         DIFlags::FlagZero,\n                         argument_index,\n-                        align.abi() as u32,\n+                        align.bytes() as u32,\n                     )\n                 };\n                 source_loc::set_debug_location(self,"}, {"sha": "3548ccfd5a53701eb500d49458d32ed1de7b4532", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -110,7 +110,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         let name = &*tcx.item_name(def_id).as_str();\n \n         let llret_ty = self.cx().layout_of(ret_ty).llvm_type(self.cx());\n-        let result = PlaceRef::new_sized(llresult, fn_ty.ret.layout, fn_ty.ret.layout.align);\n+        let result = PlaceRef::new_sized(llresult, fn_ty.ret.layout, fn_ty.ret.layout.align.abi);\n \n         let simple = get_simple_intrinsic(self.cx(), name);\n         let llval = match name {\n@@ -158,7 +158,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             }\n             \"min_align_of\" => {\n                 let tp_ty = substs.type_at(0);\n-                self.cx().const_usize(self.cx().align_of(tp_ty).abi())\n+                self.cx().const_usize(self.cx().align_of(tp_ty).bytes())\n             }\n             \"min_align_of_val\" => {\n                 let tp_ty = substs.type_at(0);\n@@ -167,12 +167,12 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                         glue::size_and_align_of_dst(self, tp_ty, Some(meta));\n                     llalign\n                 } else {\n-                    self.cx().const_usize(self.cx().align_of(tp_ty).abi())\n+                    self.cx().const_usize(self.cx().align_of(tp_ty).bytes())\n                 }\n             }\n             \"pref_align_of\" => {\n                 let tp_ty = substs.type_at(0);\n-                self.cx().const_usize(self.cx().align_of(tp_ty).pref())\n+                self.cx().const_usize(self.cx().layout_of(tp_ty).align.pref.bytes())\n             }\n             \"type_name\" => {\n                 let tp_ty = substs.type_at(0);\n@@ -261,7 +261,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 let align = if name == \"unaligned_volatile_load\" {\n                     1\n                 } else {\n-                    self.cx().align_of(tp_ty).abi() as u32\n+                    self.cx().align_of(tp_ty).bytes() as u32\n                 };\n                 unsafe {\n                     llvm::LLVMSetAlignment(load, align);\n@@ -815,7 +815,7 @@ fn try_intrinsic(\n ) {\n     if bx.cx().sess().no_landing_pads() {\n         bx.call(func, &[data], None);\n-        let ptr_align = bx.tcx().data_layout.pointer_align;\n+        let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n         bx.store(bx.cx().const_null(bx.cx().type_i8p()), dest, ptr_align);\n     } else if wants_msvc_seh(bx.cx().sess()) {\n         codegen_msvc_try(bx, func, data, local_ptr, dest);\n@@ -890,7 +890,7 @@ fn codegen_msvc_try(\n         //\n         // More information can be found in libstd's seh.rs implementation.\n         let i64p = bx.cx().type_ptr_to(bx.cx().type_i64());\n-        let ptr_align = bx.tcx().data_layout.pointer_align;\n+        let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n         let slot = bx.alloca(i64p, \"slot\", ptr_align);\n         bx.invoke(func, &[data], normal.llbb(), catchswitch.llbb(), None);\n \n@@ -906,7 +906,7 @@ fn codegen_msvc_try(\n         let funclet = catchpad.catch_pad(cs, &[tydesc, bx.cx().const_i32(0), slot]);\n         let addr = catchpad.load(slot, ptr_align);\n \n-        let i64_align = bx.tcx().data_layout.i64_align;\n+        let i64_align = bx.tcx().data_layout.i64_align.abi;\n         let arg1 = catchpad.load(addr, i64_align);\n         let val1 = bx.cx().const_i32(1);\n         let gep1 = catchpad.inbounds_gep(addr, &[val1]);\n@@ -923,7 +923,7 @@ fn codegen_msvc_try(\n     // Note that no invoke is used here because by definition this function\n     // can't panic (that's what it's catching).\n     let ret = bx.call(llfn, &[func, data, local_ptr], None);\n-    let i32_align = bx.tcx().data_layout.i32_align;\n+    let i32_align = bx.tcx().data_layout.i32_align.abi;\n     bx.store(ret, dest, i32_align);\n }\n \n@@ -982,7 +982,7 @@ fn codegen_gnu_try(\n         let vals = catch.landing_pad(lpad_ty, bx.cx().eh_personality(), 1);\n         catch.add_clause(vals, bx.cx().const_null(bx.cx().type_i8p()));\n         let ptr = catch.extract_value(vals, 0);\n-        let ptr_align = bx.tcx().data_layout.pointer_align;\n+        let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n         let bitcast = catch.bitcast(local_ptr, bx.cx().type_ptr_to(bx.cx().type_i8p()));\n         catch.store(ptr, bitcast, ptr_align);\n         catch.ret(bx.cx().const_i32(1));\n@@ -991,7 +991,7 @@ fn codegen_gnu_try(\n     // Note that no invoke is used here because by definition this function\n     // can't panic (that's what it's catching).\n     let ret = bx.call(llfn, &[func, data, local_ptr], None);\n-    let i32_align = bx.tcx().data_layout.i32_align;\n+    let i32_align = bx.tcx().data_layout.i32_align.abi;\n     bx.store(ret, dest, i32_align);\n }\n \n@@ -1436,7 +1436,7 @@ fn generic_simd_intrinsic(\n \n         // Alignment of T, must be a constant integer value:\n         let alignment_ty = bx.cx().type_i32();\n-        let alignment = bx.cx().const_i32(bx.cx().align_of(in_elem).abi() as i32);\n+        let alignment = bx.cx().const_i32(bx.cx().align_of(in_elem).bytes() as i32);\n \n         // Truncate the mask vector to a vector of i1s:\n         let (mask, mask_ty) = {\n@@ -1536,7 +1536,7 @@ fn generic_simd_intrinsic(\n \n         // Alignment of T, must be a constant integer value:\n         let alignment_ty = bx.cx().type_i32();\n-        let alignment = bx.cx().const_i32(bx.cx().align_of(in_elem).abi() as i32);\n+        let alignment = bx.cx().const_i32(bx.cx().align_of(in_elem).bytes() as i32);\n \n         // Truncate the mask vector to a vector of i1s:\n         let (mask, mask_ty) = {"}, {"sha": "15b5bdeb44d60f63490ae1f989a02d2d83237868", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -80,7 +80,7 @@ fn uncached_llvm_type<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n     match layout.fields {\n         layout::FieldPlacement::Union(_) => {\n-            let fill = cx.type_padding_filler( layout.size, layout.align);\n+            let fill = cx.type_padding_filler(layout.size, layout.align.abi);\n             let packed = false;\n             match name {\n                 None => {\n@@ -120,23 +120,23 @@ fn struct_llfields<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n     let mut packed = false;\n     let mut offset = Size::ZERO;\n-    let mut prev_effective_align = layout.align;\n+    let mut prev_effective_align = layout.align.abi;\n     let mut result: Vec<_> = Vec::with_capacity(1 + field_count * 2);\n     for i in layout.fields.index_by_increasing_offset() {\n         let target_offset = layout.fields.offset(i as usize);\n         let field = layout.field(cx, i);\n-        let effective_field_align = layout.align\n-            .min(field.align)\n+        let effective_field_align = layout.align.abi\n+            .min(field.align.abi)\n             .restrict_for_offset(target_offset);\n-        packed |= effective_field_align.abi() < field.align.abi();\n+        packed |= effective_field_align < field.align.abi;\n \n         debug!(\"struct_llfields: {}: {:?} offset: {:?} target_offset: {:?} \\\n                 effective_field_align: {}\",\n-               i, field, offset, target_offset, effective_field_align.abi());\n+               i, field, offset, target_offset, effective_field_align.bytes());\n         assert!(target_offset >= offset);\n         let padding = target_offset - offset;\n         let padding_align = prev_effective_align.min(effective_field_align);\n-        assert_eq!(offset.abi_align(padding_align) + padding, target_offset);\n+        assert_eq!(offset.align_to(padding_align) + padding, target_offset);\n         result.push(cx.type_padding_filler( padding, padding_align));\n         debug!(\"    padding before: {:?}\", padding);\n \n@@ -151,7 +151,7 @@ fn struct_llfields<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n         let padding = layout.size - offset;\n         let padding_align = prev_effective_align;\n-        assert_eq!(offset.abi_align(padding_align) + padding, layout.size);\n+        assert_eq!(offset.align_to(padding_align) + padding, layout.size);\n         debug!(\"struct_llfields: pad_bytes: {:?} offset: {:?} stride: {:?}\",\n                padding, offset, layout.size);\n         result.push(cx.type_padding_filler(padding, padding_align));\n@@ -166,15 +166,16 @@ fn struct_llfields<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n     pub fn align_of(&self, ty: Ty<'tcx>) -> Align {\n-        self.layout_of(ty).align\n+        self.layout_of(ty).align.abi\n     }\n \n     pub fn size_of(&self, ty: Ty<'tcx>) -> Size {\n         self.layout_of(ty).size\n     }\n \n     pub fn size_and_align_of(&self, ty: Ty<'tcx>) -> (Size, Align) {\n-        self.layout_of(ty).size_and_align()\n+        let layout = self.layout_of(ty);\n+        (layout.size, layout.align.abi)\n     }\n }\n \n@@ -332,7 +333,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n             layout::Pointer => {\n                 // If we know the alignment, pick something better than i8.\n                 let pointee = if let Some(pointee) = self.pointee_info_at(cx, offset) {\n-                    cx.type_pointee_for_abi_align( pointee.align)\n+                    cx.type_pointee_for_align(pointee.align)\n                 } else {\n                     cx.type_i8()\n                 };\n@@ -376,7 +377,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n         let offset = if index == 0 {\n             Size::ZERO\n         } else {\n-            a.value.size(cx).abi_align(b.value.align(cx))\n+            a.value.size(cx).align_to(b.value.align(cx).abi)\n         };\n         self.scalar_llvm_type_at(cx, scalar, offset)\n     }"}, {"sha": "bb28ea74dc0025f8cb767e23e9146b7eff268226", "filename": "src/librustc_codegen_ssa/glue.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fglue.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -25,14 +25,12 @@ pub fn size_and_align_of_dst<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     t: Ty<'tcx>,\n     info: Option<Bx::Value>\n ) -> (Bx::Value, Bx::Value) {\n-    debug!(\"calculate size of DST: {}; with lost info: {:?}\",\n-           t, info);\n-    if bx.cx().type_is_sized(t) {\n-        let (size, align) = bx.cx().layout_of(t).size_and_align();\n-        debug!(\"size_and_align_of_dst t={} info={:?} size: {:?} align: {:?}\",\n-               t, info, size, align);\n-        let size = bx.cx().const_usize(size.bytes());\n-        let align = bx.cx().const_usize(align.abi());\n+    let layout = bx.cx().layout_of(t);\n+    debug!(\"size_and_align_of_dst(ty={}, info={:?}): layout: {:?}\",\n+           t, info, layout);\n+    if !layout.is_unsized() {\n+        let size = bx.cx().const_usize(layout.size.bytes());\n+        let align = bx.cx().const_usize(layout.align.abi.bytes());\n         return (size, align);\n     }\n     match t.sty {\n@@ -42,24 +40,22 @@ pub fn size_and_align_of_dst<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n             (meth::SIZE.get_usize(bx, vtable), meth::ALIGN.get_usize(bx, vtable))\n         }\n         ty::Slice(_) | ty::Str => {\n-            let unit = t.sequence_element_type(bx.tcx());\n+            let unit = layout.field(bx.cx(), 0);\n             // The info in this case is the length of the str, so the size is that\n             // times the unit size.\n-            let (size, align) = bx.cx().layout_of(unit).size_and_align();\n-            (bx.mul(info.unwrap(), bx.cx().const_usize(size.bytes())),\n-             bx.cx().const_usize(align.abi()))\n+            (bx.mul(info.unwrap(), bx.cx().const_usize(unit.size.bytes())),\n+             bx.cx().const_usize(unit.align.abi.bytes()))\n         }\n         _ => {\n             // First get the size of all statically known fields.\n             // Don't use size_of because it also rounds up to alignment, which we\n             // want to avoid, as the unsized field's alignment could be smaller.\n             assert!(!t.is_simd());\n-            let layout = bx.cx().layout_of(t);\n             debug!(\"DST {} layout: {:?}\", t, layout);\n \n             let i = layout.fields.count() - 1;\n             let sized_size = layout.fields.offset(i).bytes();\n-            let sized_align = layout.align.abi();\n+            let sized_align = layout.align.abi.bytes();\n             debug!(\"DST {} statically sized prefix size: {} align: {}\",\n                    t, sized_size, sized_align);\n             let sized_size = bx.cx().const_usize(sized_size);"}, {"sha": "e45cccee349467355eabe388e07e001528b3f99c", "filename": "src/librustc_codegen_ssa/meth.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmeth.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx: 'a> VirtualIndex {\n             llvtable,\n             bx.cx().type_ptr_to(bx.cx().fn_ptr_backend_type(fn_ty))\n         );\n-        let ptr_align = bx.tcx().data_layout.pointer_align;\n+        let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n         let gep = bx.inbounds_gep(llvtable, &[bx.cx().const_usize(self.0)]);\n         let ptr = bx.load(gep, ptr_align);\n         bx.nonnull_metadata(ptr);\n@@ -59,7 +59,7 @@ impl<'a, 'tcx: 'a> VirtualIndex {\n         debug!(\"get_int({:?}, {:?})\", llvtable, self);\n \n         let llvtable = bx.pointercast(llvtable, bx.cx().type_ptr_to(bx.cx().type_isize()));\n-        let usize_align = bx.tcx().data_layout.pointer_align;\n+        let usize_align = bx.tcx().data_layout.pointer_align.abi;\n         let gep = bx.inbounds_gep(llvtable, &[bx.cx().const_usize(self.0)]);\n         let ptr = bx.load(gep, usize_align);\n         // Vtable loads are invariant\n@@ -100,19 +100,19 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n         })\n     });\n \n-    let (size, align) = cx.layout_of(ty).size_and_align();\n+    let layout = cx.layout_of(ty);\n     // /////////////////////////////////////////////////////////////////////////////////////////////\n     // If you touch this code, be sure to also make the corresponding changes to\n     // `get_vtable` in rust_mir/interpret/traits.rs\n     // /////////////////////////////////////////////////////////////////////////////////////////////\n     let components: Vec<_> = [\n         cx.get_fn(monomorphize::resolve_drop_in_place(cx.tcx(), ty)),\n-        cx.const_usize(size.bytes()),\n-        cx.const_usize(align.abi())\n+        cx.const_usize(layout.size.bytes()),\n+        cx.const_usize(layout.align.abi.bytes())\n     ].iter().cloned().chain(methods).collect();\n \n     let vtable_const = cx.const_struct(&components, false);\n-    let align = cx.data_layout().pointer_align;\n+    let align = cx.data_layout().pointer_align.abi;\n     let vtable = cx.static_addr_of(vtable_const, align, Some(\"vtable\"));\n \n     cx.create_vtable_metadata(ty, vtable);"}, {"sha": "75a6f07124ae72c58bee0999fdb743fdd720e191", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -280,15 +280,15 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 scratch.llval\n                             }\n                             Ref(llval, _, align) => {\n-                                assert_eq!(align.abi(), op.layout.align.abi(),\n+                                assert_eq!(align, op.layout.align.abi,\n                                            \"return place is unaligned!\");\n                                 llval\n                             }\n                         };\n                         let addr = bx.pointercast(llslot, bx.cx().type_ptr_to(\n                             bx.cx().cast_backend_type(&cast_ty)\n                         ));\n-                        bx.load(addr, self.fn_ty.ret.layout.align)\n+                        bx.load(addr, self.fn_ty.ret.layout.align.abi)\n                     }\n                 };\n                 bx.ret(llval);\n@@ -386,9 +386,9 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let filename = bx.cx().const_str_slice(filename);\n                 let line = bx.cx().const_u32(loc.line as u32);\n                 let col = bx.cx().const_u32(loc.col.to_usize() as u32 + 1);\n-                let align = tcx.data_layout.aggregate_align\n-                    .max(tcx.data_layout.i32_align)\n-                    .max(tcx.data_layout.pointer_align);\n+                let align = tcx.data_layout.aggregate_align.abi\n+                    .max(tcx.data_layout.i32_align.abi)\n+                    .max(tcx.data_layout.pointer_align.abi);\n \n                 // Put together the arguments to the panic entry point.\n                 let (lang_item, args) = match *msg {\n@@ -522,9 +522,9 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let filename = bx.cx().const_str_slice(filename);\n                     let line = bx.cx().const_u32(loc.line as u32);\n                     let col = bx.cx().const_u32(loc.col.to_usize() as u32 + 1);\n-                    let align = tcx.data_layout.aggregate_align\n-                        .max(tcx.data_layout.i32_align)\n-                        .max(tcx.data_layout.pointer_align);\n+                    let align = tcx.data_layout.aggregate_align.abi\n+                        .max(tcx.data_layout.i32_align.abi)\n+                        .max(tcx.data_layout.pointer_align.abi);\n \n                     let str = format!(\n                         \"Attempted to instantiate uninhabited type {} using mem::{}\",\n@@ -800,12 +800,12 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         (scratch.llval, scratch.align, true)\n                     }\n                     _ => {\n-                        (op.immediate_or_packed_pair(bx), arg.layout.align, false)\n+                        (op.immediate_or_packed_pair(bx), arg.layout.align.abi, false)\n                     }\n                 }\n             }\n             Ref(llval, _, align) => {\n-                if arg.is_indirect() && align.abi() < arg.layout.align.abi() {\n+                if arg.is_indirect() && align < arg.layout.align.abi {\n                     // `foo(packed.large_field)`. We can't pass the (unaligned) field directly. I\n                     // think that ATM (Rust 1.16) we only pass temporaries, but we shouldn't\n                     // have scary latent bugs around.\n@@ -826,7 +826,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let addr = bx.pointercast(llval, bx.cx().type_ptr_to(\n                     bx.cx().cast_backend_type(&ty))\n                 );\n-                llval = bx.load(addr, align.min(arg.layout.align));\n+                llval = bx.load(addr, align.min(arg.layout.align.abi));\n             } else {\n                 // We can't use `PlaceRef::load` here because the argument\n                 // may have a type we don't treat as immediate, but the ABI\n@@ -1006,7 +1006,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             self.codegen_place(bx, dest)\n         };\n         if fn_ret.is_indirect() {\n-            if dest.align.abi() < dest.layout.align.abi() {\n+            if dest.align < dest.layout.align.abi {\n                 // Currently, MIR code generation does not create calls\n                 // that store directly to fields of packed structs (in\n                 // fact, the calls it creates write only to temps),\n@@ -1062,7 +1062,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let src = self.codegen_operand(bx, src);\n         let llty = bx.cx().backend_type(src.layout);\n         let cast_ptr = bx.pointercast(dst.llval, bx.cx().type_ptr_to(llty));\n-        let align = src.layout.align.min(dst.layout.align);\n+        let align = src.layout.align.abi.min(dst.align);\n         src.val.store(bx, PlaceRef::new_sized(cast_ptr, src.layout, align));\n     }\n "}, {"sha": "fdc9a37a9eb3f7e72afbb5218bc245285e1e213d", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -304,7 +304,7 @@ pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                 if local == mir::RETURN_PLACE && fx.fn_ty.ret.is_indirect() {\n                     debug!(\"alloc: {:?} (return place) -> place\", local);\n                     let llretptr = fx.cx.get_param(llfn, 0);\n-                    LocalRef::Place(PlaceRef::new_sized(llretptr, layout, layout.align))\n+                    LocalRef::Place(PlaceRef::new_sized(llretptr, layout, layout.align.abi))\n                 } else if memory_locals.contains(local) {\n                     debug!(\"alloc: {:?} -> place\", local);\n                     if layout.is_unsized() {\n@@ -555,7 +555,7 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n             let llarg = bx.cx().get_param(bx.llfn(), llarg_idx as c_uint);\n             bx.set_value_name(llarg, &name);\n             llarg_idx += 1;\n-            PlaceRef::new_sized(llarg, arg.layout, arg.layout.align)\n+            PlaceRef::new_sized(llarg, arg.layout, arg.layout.align.abi)\n         } else if arg.is_unsized_indirect() {\n             // As the storage for the indirect argument lives during\n             // the whole function call, we just copy the fat pointer."}, {"sha": "f6917906d4a8aeff1c8ab7e3ff29c3ae7d8336b5", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n             llval: llptr,\n             llextra,\n             layout,\n-            align: layout.align,\n+            align: layout.align.abi,\n         }\n     }\n \n@@ -228,7 +228,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n                     OperandValue::Immediate(a_llval)\n                 } else {\n                     assert_eq!(offset, a.value.size(bx.cx())\n-                        .abi_align(b.value.align(bx.cx())));\n+                        .align_to(b.value.align(bx.cx()).abi));\n                     assert_eq!(field.size, b.value.size(bx.cx()));\n                     OperandValue::Immediate(b_llval)\n                 }\n@@ -348,8 +348,8 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandValue<V> {\n             };\n \n         // FIXME: choose an appropriate alignment, or use dynamic align somehow\n-        let max_align = Align::from_bits(128, 128).unwrap();\n-        let min_align = Align::from_bits(8, 8).unwrap();\n+        let max_align = Align::from_bits(128).unwrap();\n+        let min_align = Align::from_bits(8).unwrap();\n \n         // Allocate an appropriate region on the stack, and copy the value into it\n         let (llsize, _) = glue::size_and_align_of_dst(bx, unsized_ty, Some(llextra));\n@@ -470,7 +470,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         bx.load_operand(PlaceRef::new_sized(\n                             bx.cx().const_undef(bx.cx().type_ptr_to(bx.cx().backend_type(layout))),\n                             layout,\n-                            layout.align,\n+                            layout.align.abi,\n                         ))\n                     })\n             }"}, {"sha": "e6fd6dfca736bfe07ed831f1a289d19f338a02b0", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -58,8 +58,8 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n     ) -> Self {\n         debug!(\"alloca({:?}: {:?})\", name, layout);\n         assert!(!layout.is_unsized(), \"tried to statically allocate unsized place\");\n-        let tmp = bx.alloca(bx.cx().backend_type(layout), name, layout.align);\n-        Self::new_sized(tmp, layout, layout.align)\n+        let tmp = bx.alloca(bx.cx().backend_type(layout), name, layout.align.abi);\n+        Self::new_sized(tmp, layout, layout.align.abi)\n     }\n \n     /// Returns a place for an indirect reference to an unsized place.\n@@ -109,7 +109,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n                 self.llval\n             } else if let layout::Abi::ScalarPair(ref a, ref b) = self.layout.abi {\n                 // Offsets have to match either first or second field.\n-                assert_eq!(offset, a.value.size(bx.cx()).abi_align(b.value.align(bx.cx())));\n+                assert_eq!(offset, a.value.size(bx.cx()).align_to(b.value.align(bx.cx()).abi));\n                 bx.struct_gep(self.llval, 1)\n             } else {\n                 bx.struct_gep(self.llval, bx.cx().backend_field_index(self.layout, ix))\n@@ -143,7 +143,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n                 if def.repr.packed() {\n                     // FIXME(eddyb) generalize the adjustment when we\n                     // start supporting packing to larger alignments.\n-                    assert_eq!(self.layout.align.abi(), 1);\n+                    assert_eq!(self.layout.align.abi.bytes(), 1);\n                     return simple();\n                 }\n             }\n@@ -308,9 +308,8 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n                         // Issue #34427: As workaround for LLVM bug on ARM,\n                         // use memset of 0 before assigning niche value.\n                         let fill_byte = bx.cx().const_u8(0);\n-                        let (size, align) = self.layout.size_and_align();\n-                        let size = bx.cx().const_usize(size.bytes());\n-                        bx.memset(self.llval, fill_byte, size, align, MemFlags::empty());\n+                        let size = bx.cx().const_usize(self.layout.size.bytes());\n+                        bx.memset(self.llval, fill_byte, size, self.align, MemFlags::empty());\n                     }\n \n                     let niche = self.project_field(bx, 0);\n@@ -419,13 +418,13 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let llval = bx.cx().const_undef(\n                             bx.cx().type_ptr_to(bx.cx().backend_type(layout))\n                         );\n-                        PlaceRef::new_sized(llval, layout, layout.align)\n+                        PlaceRef::new_sized(llval, layout, layout.align.abi)\n                     }\n                 }\n             }\n             mir::Place::Static(box mir::Static { def_id, ty }) => {\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n-                PlaceRef::new_sized(cx.get_static(def_id), layout, layout.align)\n+                PlaceRef::new_sized(cx.get_static(def_id), layout, layout.align.abi)\n             },\n             mir::Place::Projection(box mir::Projection {\n                 ref base,"}, {"sha": "805c1a343d0444e9e7ce5d164e5fe87b39546146", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -496,10 +496,10 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::Rvalue::NullaryOp(mir::NullOp::Box, content_ty) => {\n-                let content_ty: Ty<'tcx> = self.monomorphize(&content_ty);\n-                let (size, align) = bx.cx().layout_of(content_ty).size_and_align();\n-                let llsize = bx.cx().const_usize(size.bytes());\n-                let llalign = bx.cx().const_usize(align.abi());\n+                let content_ty = self.monomorphize(&content_ty);\n+                let content_layout = bx.cx().layout_of(content_ty);\n+                let llsize = bx.cx().const_usize(content_layout.size.bytes());\n+                let llalign = bx.cx().const_usize(content_layout.align.abi.bytes());\n                 let box_layout = bx.cx().layout_of(bx.tcx().mk_box(content_ty));\n                 let llty_ptr = bx.cx().backend_type(box_layout);\n "}, {"sha": "0b3066f561cce9e296bf60a9da955324f4e2278a", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -15,10 +15,10 @@ use super::intrinsic::IntrinsicCallMethods;\n use super::type_::ArgTypeMethods;\n use super::HasCodegen;\n use common::{AtomicOrdering, AtomicRmwBinOp, IntPredicate, RealPredicate, SynchronizationScope};\n-use std::ffi::CStr;\n use mir::operand::OperandRef;\n use mir::place::PlaceRef;\n use rustc::ty::layout::{Align, Size};\n+use std::ffi::CStr;\n use MemFlags;\n \n use std::borrow::Cow;"}, {"sha": "15976ac516dc62c4882464bbefafc878cbcec710", "filename": "src/librustc_codegen_ssa/traits/type_.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -120,16 +120,16 @@ pub trait DerivedTypeMethods<'tcx>: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {\n         }\n     }\n \n-    fn type_pointee_for_abi_align(&self, align: Align) -> Self::Type {\n+    fn type_pointee_for_align(&self, align: Align) -> Self::Type {\n         // FIXME(eddyb) We could find a better approximation if ity.align < align.\n-        let ity = layout::Integer::approximate_abi_align(self, align);\n+        let ity = layout::Integer::approximate_align(self, align);\n         self.type_from_integer(ity)\n     }\n \n     /// Return a LLVM type that has at most the required alignment,\n     /// and exactly the required size, as a best-effort padding array.\n     fn type_padding_filler(&self, size: Size, align: Align) -> Self::Type {\n-        let unit = layout::Integer::approximate_abi_align(self, align);\n+        let unit = layout::Integer::approximate_align(self, align);\n         let size = size.bytes();\n         let unit_size = unit.size().bytes();\n         assert_eq!(size % unit_size, 0);"}, {"sha": "1bc3b322717e5215daec29b2b443f4697e9d9665", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -129,7 +129,7 @@ pub fn op_to_const<'tcx>(\n             assert!(meta.is_none());\n             let ptr = ptr.to_ptr()?;\n             let alloc = ecx.memory.get(ptr.alloc_id)?;\n-            assert!(alloc.align.abi() >= align.abi());\n+            assert!(alloc.align >= align);\n             assert!(alloc.bytes.len() as u64 - ptr.offset.bytes() >= op.layout.size.bytes());\n             let mut alloc = alloc.clone();\n             alloc.align = align;"}, {"sha": "936b476df39b9713e430971600a8e23598d94f72", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         layout: TyLayout<'tcx>,\n     ) -> EvalResult<'tcx, Option<(Size, Align)>> {\n         if !layout.is_unsized() {\n-            return Ok(Some(layout.size_and_align()));\n+            return Ok(Some((layout.size, layout.align.abi)));\n         }\n         match layout.ty.sty {\n             ty::Adt(..) | ty::Tuple(..) => {\n@@ -328,7 +328,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                 trace!(\"DST layout: {:?}\", layout);\n \n                 let sized_size = layout.fields.offset(layout.fields.count() - 1);\n-                let sized_align = layout.align;\n+                let sized_align = layout.align.abi;\n                 trace!(\n                     \"DST {} statically sized prefix size: {:?} align: {:?}\",\n                     layout.ty,\n@@ -381,7 +381,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                 //\n                 //   `(size + (align-1)) & -align`\n \n-                Ok(Some((size.abi_align(align), align)))\n+                Ok(Some((size.align_to(align), align)))\n             }\n             ty::Dynamic(..) => {\n                 let vtable = metadata.expect(\"dyn trait fat ptr must have vtable\").to_ptr()?;\n@@ -391,8 +391,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n \n             ty::Slice(_) | ty::Str => {\n                 let len = metadata.expect(\"slice fat ptr must have vtable\").to_usize(self)?;\n-                let (elem_size, align) = layout.field(self, 0)?.size_and_align();\n-                Ok(Some((elem_size * len, align)))\n+                let elem = layout.field(self, 0)?;\n+                Ok(Some((elem.size * len, elem.align.abi)))\n             }\n \n             ty::Foreign(_) => {\n@@ -636,7 +636,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                         let (ptr, align) = mplace.to_scalar_ptr_align();\n                         match ptr {\n                             Scalar::Ptr(ptr) => {\n-                                write!(msg, \" by align({}) ref:\", align.abi()).unwrap();\n+                                write!(msg, \" by align({}) ref:\", align.bytes()).unwrap();\n                                 allocs.push(ptr.alloc_id);\n                             }\n                             ptr => write!(msg, \" by integral ref: {:?}\", ptr).unwrap(),\n@@ -665,7 +665,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             Place::Ptr(mplace) => {\n                 match mplace.ptr {\n                     Scalar::Ptr(ptr) => {\n-                        trace!(\"by align({}) ref:\", mplace.align.abi());\n+                        trace!(\"by align({}) ref:\", mplace.align.bytes());\n                         self.memory.dump_alloc(ptr.alloc_id);\n                     }\n                     ptr => trace!(\" integral by ref: {:?}\", ptr),"}, {"sha": "bbee6e0b49ae0b3d5a1a080b503203b77392f076", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -60,7 +60,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         match intrinsic_name {\n             \"min_align_of\" => {\n                 let elem_ty = substs.type_at(0);\n-                let elem_align = self.layout_of(elem_ty)?.align.abi();\n+                let elem_align = self.layout_of(elem_ty)?.align.abi.bytes();\n                 let align_val = Scalar::from_uint(elem_align, dest.layout.size);\n                 self.write_scalar(align_val, dest)?;\n             }"}, {"sha": "898600d8322d23a0350b8399b26554952801fb10", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -268,18 +268,18 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             }\n         };\n         // Check alignment\n-        if alloc_align.abi() < required_align.abi() {\n+        if alloc_align.bytes() < required_align.bytes() {\n             return err!(AlignmentCheckFailed {\n                 has: alloc_align,\n                 required: required_align,\n             });\n         }\n-        if offset % required_align.abi() == 0 {\n+        if offset % required_align.bytes() == 0 {\n             Ok(())\n         } else {\n-            let has = offset % required_align.abi();\n+            let has = offset % required_align.bytes();\n             err!(AlignmentCheckFailed {\n-                has: Align::from_bytes(has, has).unwrap(),\n+                has: Align::from_bytes(has).unwrap(),\n                 required: required_align,\n             })\n         }\n@@ -449,14 +449,14 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         }\n         // Could also be a fn ptr or extern static\n         match self.tcx.alloc_map.lock().get(id) {\n-            Some(AllocType::Function(..)) => (Size::ZERO, Align::from_bytes(1, 1).unwrap()),\n+            Some(AllocType::Function(..)) => (Size::ZERO, Align::from_bytes(1).unwrap()),\n             Some(AllocType::Static(did)) => {\n                 // The only way `get` couldn't have worked here is if this is an extern static\n                 assert!(self.tcx.is_foreign_item(did));\n                 // Use size and align of the type\n                 let ty = self.tcx.type_of(did);\n                 let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                (layout.size, layout.align)\n+                (layout.size, layout.align.abi)\n             }\n             _ => {\n                 // Must be a deallocated pointer\n@@ -521,7 +521,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             \"{}({} bytes, alignment {}){}\",\n             msg,\n             alloc.bytes.len(),\n-            alloc.align.abi(),\n+            alloc.align.bytes(),\n             extra\n         );\n \n@@ -863,7 +863,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         allow_ptr_and_undef: bool,\n     ) -> EvalResult<'tcx> {\n         // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n-        let align = Align::from_bytes(1, 1).unwrap();\n+        let align = Align::from_bytes(1).unwrap();\n         if size.bytes() == 0 {\n             self.check_align(ptr, align)?;\n             return Ok(());\n@@ -881,7 +881,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n     pub fn read_bytes(&self, ptr: Scalar<M::PointerTag>, size: Size) -> EvalResult<'tcx, &[u8]> {\n         // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n-        let align = Align::from_bytes(1, 1).unwrap();\n+        let align = Align::from_bytes(1).unwrap();\n         if size.bytes() == 0 {\n             self.check_align(ptr, align)?;\n             return Ok(&[]);\n@@ -891,7 +891,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n     pub fn write_bytes(&mut self, ptr: Scalar<M::PointerTag>, src: &[u8]) -> EvalResult<'tcx> {\n         // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n-        let align = Align::from_bytes(1, 1).unwrap();\n+        let align = Align::from_bytes(1).unwrap();\n         if src.is_empty() {\n             self.check_align(ptr, align)?;\n             return Ok(());\n@@ -908,7 +908,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         count: Size\n     ) -> EvalResult<'tcx> {\n         // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n-        let align = Align::from_bytes(1, 1).unwrap();\n+        let align = Align::from_bytes(1).unwrap();\n         if count.bytes() == 0 {\n             self.check_align(ptr, align)?;\n             return Ok(());\n@@ -1035,7 +1035,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             16 => layout::I128,\n             _ => bug!(\"bad integer size: {}\", size.bytes()),\n         };\n-        ity.align(self)\n+        ity.align(self).abi\n     }\n }\n "}, {"sha": "8238d580022a8bc9c641d9bbb064e4597f593d58", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -285,7 +285,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 let (a, b) = (&a.value, &b.value);\n                 let (a_size, b_size) = (a.size(self), b.size(self));\n                 let a_ptr = ptr;\n-                let b_offset = a_size.abi_align(b.align(self));\n+                let b_offset = a_size.align_to(b.align(self).abi);\n                 assert!(b_offset.bytes() > 0); // we later use the offset to test which field to use\n                 let b_ptr = ptr.offset(b_offset, self)?.into();\n                 let a_val = self.memory.read_scalar(a_ptr, ptr_align, a_size)?;"}, {"sha": "7ef3dd5f7201e261264e2fa799c8349319b9c9e9", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -127,7 +127,7 @@ impl<Tag> MemPlace<Tag> {\n     /// Produces a Place that will error if attempted to be read from or written to\n     #[inline(always)]\n     pub fn null(cx: &impl HasDataLayout) -> Self {\n-        Self::from_scalar_ptr(Scalar::ptr_null(cx), Align::from_bytes(1, 1).unwrap())\n+        Self::from_scalar_ptr(Scalar::ptr_null(cx), Align::from_bytes(1).unwrap())\n     }\n \n     #[inline(always)]\n@@ -167,16 +167,16 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n     pub fn dangling(layout: TyLayout<'tcx>, cx: &impl HasDataLayout) -> Self {\n         MPlaceTy {\n             mplace: MemPlace::from_scalar_ptr(\n-                Scalar::from_uint(layout.align.abi(), cx.pointer_size()),\n-                layout.align\n+                Scalar::from_uint(layout.align.abi.bytes(), cx.pointer_size()),\n+                layout.align.abi\n             ),\n             layout\n         }\n     }\n \n     #[inline]\n     fn from_aligned_ptr(ptr: Pointer<Tag>, layout: TyLayout<'tcx>) -> Self {\n-        MPlaceTy { mplace: MemPlace::from_ptr(ptr, layout.align), layout }\n+        MPlaceTy { mplace: MemPlace::from_ptr(ptr, layout.align.abi), layout }\n     }\n \n     #[inline]\n@@ -287,7 +287,7 @@ where\n \n         let mplace = MemPlace {\n             ptr: val.to_scalar_ptr()?,\n-            align: layout.align,\n+            align: layout.align.abi,\n             meta: val.to_meta()?,\n         };\n         Ok(MPlaceTy { mplace, layout })\n@@ -356,11 +356,11 @@ where\n                     // FIXME: Once we have made decisions for how to handle size and alignment\n                     // of `extern type`, this should be adapted.  It is just a temporary hack\n                     // to get some code to work that probably ought to work.\n-                    field_layout.align,\n+                    field_layout.align.abi,\n                 None =>\n                     bug!(\"Cannot compute offset for extern type field at non-0 offset\"),\n             };\n-            (base.meta, offset.abi_align(align))\n+            (base.meta, offset.align_to(align))\n         } else {\n             // base.meta could be present; we might be accessing a sized field of an unsized\n             // struct.\n@@ -730,7 +730,7 @@ where\n                 }\n \n                 self.memory.write_scalar(\n-                    ptr, ptr_align.min(dest.layout.align), scalar, dest.layout.size\n+                    ptr, ptr_align.min(dest.layout.align.abi), scalar, dest.layout.size\n                 )\n             }\n             Immediate::ScalarPair(a_val, b_val) => {\n@@ -740,8 +740,8 @@ where\n                               dest.layout)\n                 };\n                 let (a_size, b_size) = (a.size(self), b.size(self));\n-                let (a_align, b_align) = (a.align(self), b.align(self));\n-                let b_offset = a_size.abi_align(b_align);\n+                let (a_align, b_align) = (a.align(self).abi, b.align(self).abi);\n+                let b_offset = a_size.align_to(b_align);\n                 let b_ptr = ptr.offset(b_offset, self)?.into();\n \n                 // It is tempting to verify `b_offset` against `layout.fields.offset(1)`,\n@@ -899,7 +899,7 @@ where\n             // FIXME: What should we do here? We should definitely also tag!\n             Ok(MPlaceTy::dangling(layout, self))\n         } else {\n-            let ptr = self.memory.allocate(layout.size, layout.align, kind)?;\n+            let ptr = self.memory.allocate(layout.size, layout.align.abi, kind)?;\n             let ptr = M::tag_new_allocation(self, ptr, kind)?;\n             Ok(MPlaceTy::from_aligned_ptr(ptr, layout))\n         }\n@@ -998,7 +998,8 @@ where\n         if cfg!(debug_assertions) {\n             let (size, align) = self.read_size_and_align_from_vtable(vtable)?;\n             assert_eq!(size, layout.size);\n-            assert_eq!(align.abi(), layout.align.abi()); // only ABI alignment is preserved\n+            // only ABI alignment is preserved\n+            assert_eq!(align, layout.align.abi);\n         }\n \n         let mplace = MPlaceTy {"}, {"sha": "fd17a4a71295befd1ae30b4da8437b631cdf3315", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -401,7 +401,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             // cannot use the shim here, because that will only result in infinite recursion\n             ty::InstanceDef::Virtual(_, idx) => {\n                 let ptr_size = self.pointer_size();\n-                let ptr_align = self.tcx.data_layout.pointer_align;\n+                let ptr_align = self.tcx.data_layout.pointer_align.abi;\n                 let ptr = self.deref_operand(args[0])?;\n                 let vtable = ptr.vtable()?;\n                 let fn_ptr = self.memory.read_ptr_sized("}, {"sha": "f11fd45b753fcc65d49a97badd10581e70a51489", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -42,10 +42,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         let layout = self.layout_of(ty)?;\n         assert!(!layout.is_unsized(), \"can't create a vtable for an unsized type\");\n         let size = layout.size.bytes();\n-        let align = layout.align.abi();\n+        let align = layout.align.abi.bytes();\n \n         let ptr_size = self.pointer_size();\n-        let ptr_align = self.tcx.data_layout.pointer_align;\n+        let ptr_align = self.tcx.data_layout.pointer_align.abi;\n         // /////////////////////////////////////////////////////////////////////////////////////////\n         // If you touch this code, be sure to also make the corresponding changes to\n         // `get_vtable` in rust_codegen_llvm/meth.rs\n@@ -87,7 +87,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         vtable: Pointer<M::PointerTag>,\n     ) -> EvalResult<'tcx, (ty::Instance<'tcx>, ty::Ty<'tcx>)> {\n         // we don't care about the pointee type, we just want a pointer\n-        let pointer_align = self.tcx.data_layout.pointer_align;\n+        let pointer_align = self.tcx.data_layout.pointer_align.abi;\n         let drop_fn = self.memory.read_ptr_sized(vtable, pointer_align)?.to_ptr()?;\n         let drop_instance = self.memory.get_fn(drop_fn)?;\n         trace!(\"Found drop fn: {:?}\", drop_instance);\n@@ -103,13 +103,13 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         vtable: Pointer<M::PointerTag>,\n     ) -> EvalResult<'tcx, (Size, Align)> {\n         let pointer_size = self.pointer_size();\n-        let pointer_align = self.tcx.data_layout.pointer_align;\n+        let pointer_align = self.tcx.data_layout.pointer_align.abi;\n         let size = self.memory.read_ptr_sized(vtable.offset(pointer_size, self)?,pointer_align)?\n             .to_bits(pointer_size)? as u64;\n         let align = self.memory.read_ptr_sized(\n             vtable.offset(pointer_size * 2, self)?,\n             pointer_align\n         )?.to_bits(pointer_size)? as u64;\n-        Ok((Size::from_bytes(size), Align::from_bytes(align, align).unwrap()))\n+        Ok((Size::from_bytes(size), Align::from_bytes(align).unwrap()))\n     }\n }"}, {"sha": "6d1cacfa1479c0587272179b15d5f86c1244f8b1", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -355,7 +355,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n                     // for the purpose of validity, consider foreign types to have\n                     // alignment and size determined by the layout (size will be 0,\n                     // alignment should take attributes into account).\n-                    .unwrap_or_else(|| layout.size_and_align());\n+                    .unwrap_or_else(|| (layout.size, layout.align.abi));\n                 match self.ecx.memory.check_align(ptr, align) {\n                     Ok(_) => {},\n                     Err(err) => {\n@@ -463,7 +463,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n                     // for function pointers.\n                     let non_null =\n                         self.ecx.memory.check_align(\n-                            Scalar::Ptr(ptr), Align::from_bytes(1, 1).unwrap()\n+                            Scalar::Ptr(ptr), Align::from_bytes(1).unwrap()\n                         ).is_ok() ||\n                         self.ecx.memory.get_fn(ptr).is_ok();\n                     if !non_null {"}, {"sha": "a96c5dd687069e24306a258b33d6c9fb0f76024b", "filename": "src/librustc_mir/util/alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Futil%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_mir%2Futil%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Falignment.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -30,7 +30,7 @@ pub fn is_disaligned<'a, 'tcx, L>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let ty = place.ty(local_decls, tcx).to_ty(tcx);\n     match tcx.layout_raw(param_env.and(ty)) {\n-        Ok(layout) if layout.align.abi() == 1 => {\n+        Ok(layout) if layout.align.abi.bytes() == 1 => {\n             // if the alignment is 1, the type can't be further\n             // disaligned.\n             debug!(\"is_disaligned({:?}) - align = 1\", place);"}, {"sha": "bf497c09bdc719a109f58ee2004c973ae10e4fae", "filename": "src/librustc_target/abi/call/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -93,7 +93,7 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>, vfp: bool)\n         }\n     }\n \n-    let align = arg.layout.align.abi();\n+    let align = arg.layout.align.abi.bytes();\n     let total = arg.layout.size;\n     arg.cast_to(Uniform {\n         unit: if align <= 4 { Reg::i32() } else { Reg::i64() },"}, {"sha": "abe0bd07892d90be5714c6727e9b733e91ea3bb1", "filename": "src/librustc_target/abi/call/mips.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -27,21 +27,21 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<Ty>, offset: &mut Size)\n {\n     let dl = cx.data_layout();\n     let size = arg.layout.size;\n-    let align = arg.layout.align.max(dl.i32_align).min(dl.i64_align);\n+    let align = arg.layout.align.max(dl.i32_align).min(dl.i64_align).abi;\n \n     if arg.layout.is_aggregate() {\n         arg.cast_to(Uniform {\n             unit: Reg::i32(),\n             total: size\n         });\n-        if !offset.is_abi_aligned(align) {\n+        if !offset.is_aligned(align) {\n             arg.pad_with(Reg::i32());\n         }\n     } else {\n         arg.extend_integer_width_to(32);\n     }\n \n-    *offset = offset.abi_align(align) + size.abi_align(align);\n+    *offset = offset.align_to(align) + size.align_to(align);\n }\n \n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<Ty>)"}, {"sha": "d375b163164de9f8cb045982cbe30bfb1d9fca1c", "filename": "src/librustc_target/abi/call/mips64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -118,9 +118,9 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>)\n                 // We only care about aligned doubles\n                 if let abi::Abi::Scalar(ref scalar) = field.abi {\n                     if let abi::Float(abi::FloatTy::F64) = scalar.value {\n-                        if offset.is_abi_aligned(dl.f64_align) {\n+                        if offset.is_aligned(dl.f64_align.abi) {\n                             // Insert enough integers to cover [last_offset, offset)\n-                            assert!(last_offset.is_abi_aligned(dl.f64_align));\n+                            assert!(last_offset.is_aligned(dl.f64_align.abi));\n                             for _ in 0..((offset - last_offset).bits() / 64)\n                                 .min((prefix.len() - prefix_index) as u64) {\n "}, {"sha": "489bb37fc26ff9ac8393a41262261a51c621cb9d", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -142,23 +142,23 @@ impl Reg {\n         match self.kind {\n             RegKind::Integer => {\n                 match self.size.bits() {\n-                    1 => dl.i1_align,\n-                    2..=8 => dl.i8_align,\n-                    9..=16 => dl.i16_align,\n-                    17..=32 => dl.i32_align,\n-                    33..=64 => dl.i64_align,\n-                    65..=128 => dl.i128_align,\n+                    1 => dl.i1_align.abi,\n+                    2..=8 => dl.i8_align.abi,\n+                    9..=16 => dl.i16_align.abi,\n+                    17..=32 => dl.i32_align.abi,\n+                    33..=64 => dl.i64_align.abi,\n+                    65..=128 => dl.i128_align.abi,\n                     _ => panic!(\"unsupported integer: {:?}\", self)\n                 }\n             }\n             RegKind::Float => {\n                 match self.size.bits() {\n-                    32 => dl.f32_align,\n-                    64 => dl.f64_align,\n+                    32 => dl.f32_align.abi,\n+                    64 => dl.f64_align.abi,\n                     _ => panic!(\"unsupported float: {:?}\", self)\n                 }\n             }\n-            RegKind::Vector => dl.vector_align(self.size)\n+            RegKind::Vector => dl.vector_align(self.size).abi,\n         }\n     }\n }\n@@ -227,13 +227,13 @@ impl CastTarget {\n \n     pub fn size<C: HasDataLayout>(&self, cx: &C) -> Size {\n         (self.prefix_chunk * self.prefix.iter().filter(|x| x.is_some()).count() as u64)\n-             .abi_align(self.rest.align(cx)) + self.rest.total\n+             .align_to(self.rest.align(cx)) + self.rest.total\n     }\n \n     pub fn align<C: HasDataLayout>(&self, cx: &C) -> Align {\n         self.prefix.iter()\n             .filter_map(|x| x.map(|kind| Reg { kind, size: self.prefix_chunk }.align(cx)))\n-            .fold(cx.data_layout().aggregate_align.max(self.rest.align(cx)),\n+            .fold(cx.data_layout().aggregate_align.abi.max(self.rest.align(cx)),\n                 |acc, align| acc.max(align))\n     }\n }\n@@ -369,7 +369,7 @@ impl<'a, Ty> ArgType<'a, Ty> {\n         attrs.pointee_size = self.layout.size;\n         // FIXME(eddyb) We should be doing this, but at least on\n         // i686-pc-windows-msvc, it results in wrong stack offsets.\n-        // attrs.pointee_align = Some(self.layout.align);\n+        // attrs.pointee_align = Some(self.layout.align.abi);\n \n         let extra_attrs = if self.layout.is_unsized() {\n             Some(ArgAttributes::new())"}, {"sha": "a71f3226320888e6d2faeb619596354a742fc722", "filename": "src/librustc_target/abi/call/powerpc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -27,21 +27,21 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<Ty>, offset: &mut Size)\n {\n     let dl = cx.data_layout();\n     let size = arg.layout.size;\n-    let align = arg.layout.align.max(dl.i32_align).min(dl.i64_align);\n+    let align = arg.layout.align.max(dl.i32_align).min(dl.i64_align).abi;\n \n     if arg.layout.is_aggregate() {\n         arg.cast_to(Uniform {\n             unit: Reg::i32(),\n             total: size\n         });\n-        if !offset.is_abi_aligned(align) {\n+        if !offset.is_aligned(align) {\n             arg.pad_with(Reg::i32());\n         }\n     } else {\n         arg.extend_integer_width_to(32);\n     }\n \n-    *offset = offset.abi_align(align) + size.abi_align(align);\n+    *offset = offset.align_to(align) + size.align_to(align);\n }\n \n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<Ty>)"}, {"sha": "99f07c5702a8f21cc1b172091c06216dc13f6938", "filename": "src/librustc_target/abi/call/powerpc64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -13,7 +13,7 @@\n // need to be fixed when PowerPC vector support is added.\n \n use abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n-use abi::{Align, Endian, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use abi::{Endian, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n use spec::HasTargetSpec;\n \n #[derive(Debug, Clone, Copy, PartialEq)]\n@@ -120,8 +120,8 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>, abi: ABI)\n     } else {\n         // Aggregates larger than a doubleword should be padded\n         // at the tail to fill out a whole number of doublewords.\n-        let align = Align::from_bits(64, 64).unwrap();\n-        (Reg::i64(), size.abi_align(align))\n+        let reg_i64 = Reg::i64();\n+        (reg_i64, size.align_to(reg_i64.align(cx)))\n     };\n \n     arg.cast_to(Uniform {"}, {"sha": "abe0bd07892d90be5714c6727e9b733e91ea3bb1", "filename": "src/librustc_target/abi/call/sparc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -27,21 +27,21 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<Ty>, offset: &mut Size)\n {\n     let dl = cx.data_layout();\n     let size = arg.layout.size;\n-    let align = arg.layout.align.max(dl.i32_align).min(dl.i64_align);\n+    let align = arg.layout.align.max(dl.i32_align).min(dl.i64_align).abi;\n \n     if arg.layout.is_aggregate() {\n         arg.cast_to(Uniform {\n             unit: Reg::i32(),\n             total: size\n         });\n-        if !offset.is_abi_aligned(align) {\n+        if !offset.is_aligned(align) {\n             arg.pad_with(Reg::i32());\n         }\n     } else {\n         arg.extend_integer_width_to(32);\n     }\n \n-    *offset = offset.abi_align(align) + size.abi_align(align);\n+    *offset = offset.align_to(align) + size.align_to(align);\n }\n \n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<Ty>)"}, {"sha": "f091f80924d5937d3e32e10fd82f13ddc2b66da3", "filename": "src/librustc_target/abi/call/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -41,7 +41,7 @@ fn classify_arg<'a, Ty, C>(cx: &C, arg: &ArgType<'a, Ty>)\n         where Ty: TyLayoutMethods<'a, C> + Copy,\n             C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n     {\n-        if !off.is_abi_aligned(layout.align) {\n+        if !off.is_aligned(layout.align.abi) {\n             if !layout.is_zst() {\n                 return Err(Memory);\n             }"}, {"sha": "50ce0ad6915da3c9916c1c99ad1d754932590048", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 106, "deletions": 110, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -13,7 +13,7 @@ pub use self::Primitive::*;\n \n use spec::Target;\n \n-use std::{cmp, fmt};\n+use std::fmt;\n use std::ops::{Add, Deref, Sub, Mul, AddAssign, Range, RangeInclusive};\n \n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -24,42 +24,44 @@ pub mod call;\n /// for a target, which contains everything needed to compute layouts.\n pub struct TargetDataLayout {\n     pub endian: Endian,\n-    pub i1_align: Align,\n-    pub i8_align: Align,\n-    pub i16_align: Align,\n-    pub i32_align: Align,\n-    pub i64_align: Align,\n-    pub i128_align: Align,\n-    pub f32_align: Align,\n-    pub f64_align: Align,\n+    pub i1_align: AbiAndPrefAlign,\n+    pub i8_align: AbiAndPrefAlign,\n+    pub i16_align: AbiAndPrefAlign,\n+    pub i32_align: AbiAndPrefAlign,\n+    pub i64_align: AbiAndPrefAlign,\n+    pub i128_align: AbiAndPrefAlign,\n+    pub f32_align: AbiAndPrefAlign,\n+    pub f64_align: AbiAndPrefAlign,\n     pub pointer_size: Size,\n-    pub pointer_align: Align,\n-    pub aggregate_align: Align,\n+    pub pointer_align: AbiAndPrefAlign,\n+    pub aggregate_align: AbiAndPrefAlign,\n \n     /// Alignments for vector types.\n-    pub vector_align: Vec<(Size, Align)>,\n+    pub vector_align: Vec<(Size, AbiAndPrefAlign)>,\n+\n     pub instruction_address_space: u32,\n }\n \n impl Default for TargetDataLayout {\n     /// Creates an instance of `TargetDataLayout`.\n     fn default() -> TargetDataLayout {\n+        let align = |bits| Align::from_bits(bits).unwrap();\n         TargetDataLayout {\n             endian: Endian::Big,\n-            i1_align: Align::from_bits(8, 8).unwrap(),\n-            i8_align: Align::from_bits(8, 8).unwrap(),\n-            i16_align: Align::from_bits(16, 16).unwrap(),\n-            i32_align: Align::from_bits(32, 32).unwrap(),\n-            i64_align: Align::from_bits(32, 64).unwrap(),\n-            i128_align: Align::from_bits(32, 64).unwrap(),\n-            f32_align: Align::from_bits(32, 32).unwrap(),\n-            f64_align: Align::from_bits(64, 64).unwrap(),\n+            i1_align: AbiAndPrefAlign::new(align(8)),\n+            i8_align: AbiAndPrefAlign::new(align(8)),\n+            i16_align: AbiAndPrefAlign::new(align(16)),\n+            i32_align: AbiAndPrefAlign::new(align(32)),\n+            i64_align: AbiAndPrefAlign { abi: align(32), pref: align(64) },\n+            i128_align: AbiAndPrefAlign { abi: align(32), pref: align(64) },\n+            f32_align: AbiAndPrefAlign::new(align(32)),\n+            f64_align: AbiAndPrefAlign::new(align(64)),\n             pointer_size: Size::from_bits(64),\n-            pointer_align: Align::from_bits(64, 64).unwrap(),\n-            aggregate_align: Align::from_bits(0, 64).unwrap(),\n+            pointer_align: AbiAndPrefAlign::new(align(64)),\n+            aggregate_align: AbiAndPrefAlign { abi: align(0), pref: align(64) },\n             vector_align: vec![\n-                (Size::from_bits(64), Align::from_bits(64, 64).unwrap()),\n-                (Size::from_bits(128), Align::from_bits(128, 128).unwrap())\n+                (Size::from_bits(64), AbiAndPrefAlign::new(align(64))),\n+                (Size::from_bits(128), AbiAndPrefAlign::new(align(128))),\n             ],\n             instruction_address_space: 0,\n         }\n@@ -94,11 +96,17 @@ impl TargetDataLayout {\n             if s.is_empty() {\n                 return Err(format!(\"missing alignment for `{}` in \\\"data-layout\\\"\", cause));\n             }\n+            let align_from_bits = |bits| {\n+                Align::from_bits(bits).map_err(|err| {\n+                    format!(\"invalid alignment for `{}` in \\\"data-layout\\\": {}\",\n+                            cause, err)\n+                })\n+            };\n             let abi = parse_bits(s[0], \"alignment\", cause)?;\n             let pref = s.get(1).map_or(Ok(abi), |pref| parse_bits(pref, \"alignment\", cause))?;\n-            Align::from_bits(abi, pref).map_err(|err| {\n-                format!(\"invalid alignment for `{}` in \\\"data-layout\\\": {}\",\n-                        cause, err)\n+            Ok(AbiAndPrefAlign {\n+                abi: align_from_bits(abi)?,\n+                pref: align_from_bits(pref)?,\n             })\n         };\n \n@@ -205,16 +213,15 @@ impl TargetDataLayout {\n         }\n     }\n \n-    pub fn vector_align(&self, vec_size: Size) -> Align {\n+    pub fn vector_align(&self, vec_size: Size) -> AbiAndPrefAlign {\n         for &(size, align) in &self.vector_align {\n             if size == vec_size {\n                 return align;\n             }\n         }\n         // Default to natural alignment, which is what LLVM does.\n         // That is, use the size, rounded up to a power of 2.\n-        let align = vec_size.bytes().next_power_of_two();\n-        Align::from_bytes(align, align).unwrap()\n+        AbiAndPrefAlign::new(Align::from_bytes(vec_size.bytes().next_power_of_two()).unwrap())\n     }\n }\n \n@@ -270,14 +277,14 @@ impl Size {\n     }\n \n     #[inline]\n-    pub fn abi_align(self, align: Align) -> Size {\n-        let mask = align.abi() - 1;\n+    pub fn align_to(self, align: Align) -> Size {\n+        let mask = align.bytes() - 1;\n         Size::from_bytes((self.bytes() + mask) & !mask)\n     }\n \n     #[inline]\n-    pub fn is_abi_aligned(self, align: Align) -> bool {\n-        let mask = align.abi() - 1;\n+    pub fn is_aligned(self, align: Align) -> bool {\n+        let mask = align.bytes() - 1;\n         self.bytes() & mask == 0\n     }\n \n@@ -358,89 +365,54 @@ impl AddAssign for Size {\n     }\n }\n \n-/// Alignment of a type in bytes, both ABI-mandated and preferred.\n-/// Each field is a power of two, giving the alignment a maximum value\n-/// of 2<sup>(2<sup>8</sup> - 1)</sup>, which is limited by LLVM to a\n-/// maximum capacity of 2<sup>29</sup> or 536870912.\n-#[derive(Copy, Clone, PartialEq, Eq, Ord, PartialOrd, Hash, Debug, RustcEncodable, RustcDecodable)]\n+/// Alignment of a type in bytes (always a power of two).\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Align {\n-    abi_pow2: u8,\n-    pref_pow2: u8,\n+    pow2: u8,\n }\n \n impl Align {\n-    pub fn from_bits(abi: u64, pref: u64) -> Result<Align, String> {\n-        Align::from_bytes(Size::from_bits(abi).bytes(),\n-                          Size::from_bits(pref).bytes())\n-    }\n-\n-    pub fn from_bytes(abi: u64, pref: u64) -> Result<Align, String> {\n-        let log2 = |align: u64| {\n-            // Treat an alignment of 0 bytes like 1-byte alignment.\n-            if align == 0 {\n-                return Ok(0);\n-            }\n-\n-            let mut bytes = align;\n-            let mut pow: u8 = 0;\n-            while (bytes & 1) == 0 {\n-                pow += 1;\n-                bytes >>= 1;\n-            }\n-            if bytes != 1 {\n-                Err(format!(\"`{}` is not a power of 2\", align))\n-            } else if pow > 29 {\n-                Err(format!(\"`{}` is too large\", align))\n-            } else {\n-                Ok(pow)\n-            }\n-        };\n-\n-        Ok(Align {\n-            abi_pow2: log2(abi)?,\n-            pref_pow2: log2(pref)?,\n-        })\n+    pub fn from_bits(bits: u64) -> Result<Align, String> {\n+        Align::from_bytes(Size::from_bits(bits).bytes())\n     }\n \n-    pub fn abi(self) -> u64 {\n-        1 << self.abi_pow2\n-    }\n-\n-    pub fn pref(self) -> u64 {\n-        1 << self.pref_pow2\n-    }\n+    pub fn from_bytes(align: u64) -> Result<Align, String> {\n+        // Treat an alignment of 0 bytes like 1-byte alignment.\n+        if align == 0 {\n+            return Ok(Align { pow2: 0 });\n+        }\n \n-    pub fn abi_bits(self) -> u64 {\n-        self.abi() * 8\n-    }\n+        let mut bytes = align;\n+        let mut pow2: u8 = 0;\n+        while (bytes & 1) == 0 {\n+            pow2 += 1;\n+            bytes >>= 1;\n+        }\n+        if bytes != 1 {\n+            return Err(format!(\"`{}` is not a power of 2\", align));\n+        }\n+        if pow2 > 29 {\n+            return Err(format!(\"`{}` is too large\", align));\n+        }\n \n-    pub fn pref_bits(self) -> u64 {\n-        self.pref() * 8\n+        Ok(Align { pow2 })\n     }\n \n-    pub fn min(self, other: Align) -> Align {\n-        Align {\n-            abi_pow2: cmp::min(self.abi_pow2, other.abi_pow2),\n-            pref_pow2: cmp::min(self.pref_pow2, other.pref_pow2),\n-        }\n+    pub fn bytes(self) -> u64 {\n+        1 << self.pow2\n     }\n \n-    pub fn max(self, other: Align) -> Align {\n-        Align {\n-            abi_pow2: cmp::max(self.abi_pow2, other.abi_pow2),\n-            pref_pow2: cmp::max(self.pref_pow2, other.pref_pow2),\n-        }\n+    pub fn bits(self) -> u64 {\n+        self.bytes() * 8\n     }\n \n     /// Compute the best alignment possible for the given offset\n     /// (the largest power of two that the offset is a multiple of).\n     ///\n     /// NB: for an offset of `0`, this happens to return `2^64`.\n     pub fn max_for_offset(offset: Size) -> Align {\n-        let pow2 = offset.bytes().trailing_zeros() as u8;\n         Align {\n-            abi_pow2: pow2,\n-            pref_pow2: pow2,\n+            pow2: offset.bytes().trailing_zeros() as u8,\n         }\n     }\n \n@@ -451,6 +423,36 @@ impl Align {\n     }\n }\n \n+/// A pair of aligments, ABI-mandated and preferred.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+pub struct AbiAndPrefAlign {\n+    pub abi: Align,\n+    pub pref: Align,\n+}\n+\n+impl AbiAndPrefAlign {\n+    pub fn new(align: Align) -> AbiAndPrefAlign {\n+        AbiAndPrefAlign {\n+            abi: align,\n+            pref: align,\n+        }\n+    }\n+\n+    pub fn min(self, other: AbiAndPrefAlign) -> AbiAndPrefAlign {\n+        AbiAndPrefAlign {\n+            abi: self.abi.min(other.abi),\n+            pref: self.pref.min(other.pref),\n+        }\n+    }\n+\n+    pub fn max(self, other: AbiAndPrefAlign) -> AbiAndPrefAlign {\n+        AbiAndPrefAlign {\n+            abi: self.abi.max(other.abi),\n+            pref: self.pref.max(other.pref),\n+        }\n+    }\n+}\n+\n /// Integers, also used for enum discriminants.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n pub enum Integer {\n@@ -472,7 +474,7 @@ impl Integer {\n         }\n     }\n \n-    pub fn align<C: HasDataLayout>(self, cx: &C) -> Align {\n+    pub fn align<C: HasDataLayout>(self, cx: &C) -> AbiAndPrefAlign {\n         let dl = cx.data_layout();\n \n         match self {\n@@ -507,26 +509,24 @@ impl Integer {\n     }\n \n     /// Find the smallest integer with the given alignment.\n-    pub fn for_abi_align<C: HasDataLayout>(cx: &C, align: Align) -> Option<Integer> {\n+    pub fn for_align<C: HasDataLayout>(cx: &C, wanted: Align) -> Option<Integer> {\n         let dl = cx.data_layout();\n \n-        let wanted = align.abi();\n         for &candidate in &[I8, I16, I32, I64, I128] {\n-            if wanted == candidate.align(dl).abi() && wanted == candidate.size().bytes() {\n+            if wanted == candidate.align(dl).abi && wanted.bytes() == candidate.size().bytes() {\n                 return Some(candidate);\n             }\n         }\n         None\n     }\n \n     /// Find the largest integer with the given alignment or less.\n-    pub fn approximate_abi_align<C: HasDataLayout>(cx: &C, align: Align) -> Integer {\n+    pub fn approximate_align<C: HasDataLayout>(cx: &C, wanted: Align) -> Integer {\n         let dl = cx.data_layout();\n \n-        let wanted = align.abi();\n         // FIXME(eddyb) maybe include I128 in the future, when it works everywhere.\n         for &candidate in &[I64, I32, I16] {\n-            if wanted >= candidate.align(dl).abi() && wanted >= candidate.size().bytes() {\n+            if wanted >= candidate.align(dl).abi && wanted.bytes() >= candidate.size().bytes() {\n                 return candidate;\n             }\n         }\n@@ -597,7 +597,7 @@ impl<'a, 'tcx> Primitive {\n         }\n     }\n \n-    pub fn align<C: HasDataLayout>(self, cx: &C) -> Align {\n+    pub fn align<C: HasDataLayout>(self, cx: &C) -> AbiAndPrefAlign {\n         let dl = cx.data_layout();\n \n         match self {\n@@ -868,7 +868,7 @@ pub struct LayoutDetails {\n     pub variants: Variants,\n     pub fields: FieldPlacement,\n     pub abi: Abi,\n-    pub align: Align,\n+    pub align: AbiAndPrefAlign,\n     pub size: Size\n }\n \n@@ -949,8 +949,4 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n             Abi::Aggregate { sized } => sized && self.size.bytes() == 0\n         }\n     }\n-\n-    pub fn size_and_align(&self) -> (Size, Align) {\n-        (self.size, self.align)\n-    }\n }"}, {"sha": "e36c0ae2a1902270b9e57c6f060e9a2b025e1abc", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "patch": "@@ -1779,7 +1779,7 @@ fn check_transparent<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: De\n         // We are currently checking the type this field came from, so it must be local\n         let span = tcx.hir.span_if_local(field.did).unwrap();\n         let zst = layout.map(|layout| layout.is_zst()).unwrap_or(false);\n-        let align1 = layout.map(|layout| layout.align.abi() == 1).unwrap_or(false);\n+        let align1 = layout.map(|layout| layout.align.abi.bytes() == 1).unwrap_or(false);\n         (span, zst, align1)\n     });\n "}]}