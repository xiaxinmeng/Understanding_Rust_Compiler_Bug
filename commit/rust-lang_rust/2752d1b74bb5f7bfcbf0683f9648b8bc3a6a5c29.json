{"sha": "2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NTJkMWI3NGJiNWY3YmZjYmYwNjgzZjk2NDhiOGJjM2E2YTVjMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-23T17:03:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-23T17:03:30Z"}, "message": "Auto merge of #1167 - christianpoveda:shims-refactor, r=RalfJung\n\nReorganize shims by platform\n\nFixes https://github.com/rust-lang/miri/issues/1161. I am currently testing which shims belong to which platform. If you are reading this and know the answer for any of those please write me :P\n\nEdit: this is a list of the shims I haven't been able to figure out to which platform they belong:\n -~~`malloc`~~\n -~~`calloc`~~\n -~~`posix_memalign`~~\n -~~`free`~~\n -~~`realloc`~~\n -~~`__rust_alloc`~~\n -~~`__rust_alloc_zeroed`~~\n -~~`__rust_dealloc`~~\n -~~`__rust_realloc`~~\n -~~`__rust_maybe_catch_panic`~~\n -~~`syscall`~~\n -~~`getrandom`~~\n -~~`dlsym`~~\n -~~`memcmp`~~\n -~~`memrchr`~~\n -~~`memchr`~~\n -~~`strlen`~~\n -~~`signal`~~\n -~~`sigaction`~~\n -~~`sigaltstack`~~\n -~~`sysconf`~~\n -~~`sched_getaffinity`~~\n -~~`isatty`~~\n -~~`pthread_key_create`~~\n -~~`pthread_key_delete`~~\n -~~`pthread_getspecific`~~\n -~~`pthread_setspecific`~~\n -~~`pthread_attr_init`~~\n -~~`pthread_attr_destroy`~~\n -~~`pthread_self`~~\n -~~`pthread_attr_setstacksize`~~\n -~~`pthread_attr_getstack`~~\n -~~`pthread_create`~~\n -~~`pthread_mutexattr_init`~~\n -~~`pthread_mutexattr_settype`~~\n -~~`pthread_mutex_init`~~\n -~~`pthread_mutexattr_destroy`~~\n -~~`pthread_mutex_lock`~~\n -~~`pthread_mutex_unlock`~~\n -~~`pthread_mutex_destroy`~~\n -~~`pthread_rwlock_rdlock`~~\n -~~`pthread_rwlock_unlock`~~\n -~~`pthread_rwlock_wrlock`~~\n -~~`pthread_rwlock_destroy`~~\n -~~`pthread_condattr_init`~~\n -~~`pthread_condattr_setclock`~~\n -~~`pthread_cond_init`~~\n -~~`pthread_condattr_destroy`~~\n -~~`pthread_cond_destroy`~~\n -~~`pthread_atfork`~~\n -~~`posix_fadvise`~~\n -~~`mmap`~~\n -~~`mprotect`~~", "tree": {"sha": "72d2ed6883d6bfd1eb5c73832b57126acc997044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72d2ed6883d6bfd1eb5c73832b57126acc997044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "html_url": "https://github.com/rust-lang/rust/commit/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c40a31e93c3c841885f467a3cab6309e387de51e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c40a31e93c3c841885f467a3cab6309e387de51e", "html_url": "https://github.com/rust-lang/rust/commit/c40a31e93c3c841885f467a3cab6309e387de51e"}, {"sha": "208665836eef558e92925e48bf35d162dfd4d5a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/208665836eef558e92925e48bf35d162dfd4d5a3", "html_url": "https://github.com/rust-lang/rust/commit/208665836eef558e92925e48bf35d162dfd4d5a3"}], "stats": {"total": 1442, "additions": 807, "deletions": 635}, "files": [{"sha": "2ae6910fce2dcd31c2f5fd2de0807228700ce044", "filename": "src/helpers.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "patch": "@@ -368,6 +368,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         Ok(())\n     }\n+    /// Helper function used inside the shims of foreign functions to assert that the target\n+    /// platform is `platform`. It panics showing a message with the `name` of the foreign function\n+    /// if this is not the case.\n+    fn assert_platform(&mut self, platform: &str, name: &str) {\n+        assert_eq!(\n+            self.eval_context_mut().tcx.sess.target.target.target_os.to_lowercase(),\n+            platform,\n+            \"`{}` is only available on the `{}` platform\",\n+            name,\n+            platform\n+        )\n+    }\n \n     /// Sets the last error variable.\n     fn set_last_error(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx> {"}, {"sha": "37296132c038b13f5f56530c6df59020a0243736", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 33, "deletions": 613, "changes": 646, "blob_url": "https://github.com/rust-lang/rust/blob/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "patch": "@@ -1,9 +1,12 @@\n+mod windows;\n+mod posix;\n+\n use std::{convert::TryInto, iter};\n \n use rustc_hir::def_id::DefId;\n use rustc::mir;\n use rustc::ty;\n-use rustc::ty::layout::{Align, LayoutOf, Size};\n+use rustc::ty::layout::{Align, Size};\n use rustc_apfloat::Float;\n use rustc_span::symbol::sym;\n use syntax::attr;\n@@ -167,6 +170,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         };\n \n         // Next: functions that return.\n+        if this.emulate_foreign_item_by_name(link_name, args, dest, ret)? {\n+            this.dump_place(*dest);\n+            this.go_to_block(ret);\n+        }\n+\n+        Ok(None)\n+    }\n+\n+    /// Emulates calling a foreign item using its name, failing if the item is not supported.\n+    /// Returns `true` if the caller is expected to jump to the return block, and `false` if\n+    /// jumping has already been taken care of.\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: &str,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: PlaceTy<'tcx, Tag>,\n+        ret: mir::BasicBlock,\n+    ) -> InterpResult<'tcx, bool> {\n+        let this = self.eval_context_mut();\n+\n+        // Here we dispatch all the shims for foreign functions. If you have a platform specific\n+        // shim, add it to the corresponding submodule.\n         match link_name {\n             \"malloc\" => {\n                 let size = this.read_scalar(args[0])?.to_machine_usize(this)?;\n@@ -181,33 +206,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let res = this.malloc(size, /*zero_init:*/ true, MiriMemoryKind::C);\n                 this.write_scalar(res, dest)?;\n             }\n-            \"posix_memalign\" => {\n-                let ret = this.deref_operand(args[0])?;\n-                let align = this.read_scalar(args[1])?.to_machine_usize(this)?;\n-                let size = this.read_scalar(args[2])?.to_machine_usize(this)?;\n-                // Align must be power of 2, and also at least ptr-sized (POSIX rules).\n-                if !align.is_power_of_two() {\n-                    throw_unsup!(HeapAllocNonPowerOfTwoAlignment(align));\n-                }\n-                if align < this.pointer_size().bytes() {\n-                    throw_ub_format!(\n-                        \"posix_memalign: alignment must be at least the size of a pointer, but is {}\",\n-                        align,\n-                    );\n-                }\n-\n-                if size == 0 {\n-                    this.write_null(ret.into())?;\n-                } else {\n-                    let ptr = this.memory.allocate(\n-                        Size::from_bytes(size),\n-                        Align::from_bytes(align).unwrap(),\n-                        MiriMemoryKind::C.into(),\n-                    );\n-                    this.write_scalar(ptr, ret.into())?;\n-                }\n-                this.write_null(dest)?;\n-            }\n             \"free\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 this.free(ptr, MiriMemoryKind::C)?;\n@@ -292,56 +290,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(new_ptr, dest)?;\n             }\n \n-            \"syscall\" => {\n-                let sys_getrandom = this\n-                    .eval_path_scalar(&[\"libc\", \"SYS_getrandom\"])?\n-                    .expect(\"Failed to get libc::SYS_getrandom\")\n-                    .to_machine_usize(this)?;\n-\n-                let sys_statx = this\n-                    .eval_path_scalar(&[\"libc\", \"SYS_statx\"])?\n-                    .expect(\"Failed to get libc::SYS_statx\")\n-                    .to_machine_usize(this)?;\n-\n-                match this.read_scalar(args[0])?.to_machine_usize(this)? {\n-                    // `libc::syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), GRND_NONBLOCK)`\n-                    // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n-                    id if id == sys_getrandom => {\n-                        // The first argument is the syscall id,\n-                        // so skip over it.\n-                        linux_getrandom(this, &args[1..], dest)?;\n-                    }\n-                    id if id == sys_statx => {\n-                        // The first argument is the syscall id,\n-                        // so skip over it.\n-                        let result = this.statx(args[1], args[2], args[3], args[4], args[5])?;\n-                        this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-                    }\n-                    id => throw_unsup_format!(\"miri does not support syscall ID {}\", id),\n-                }\n-            }\n-\n-            \"getrandom\" => {\n-                linux_getrandom(this, args, dest)?;\n-            }\n-\n-            \"dlsym\" => {\n-                let _handle = this.read_scalar(args[0])?;\n-                let symbol = this.read_scalar(args[1])?.not_undef()?;\n-                let symbol_name = this.memory.read_c_str(symbol)?;\n-                let err = format!(\"bad c unicode symbol: {:?}\", symbol_name);\n-                let symbol_name = ::std::str::from_utf8(symbol_name).unwrap_or(&err);\n-                if let Some(dlsym) = Dlsym::from_str(symbol_name)? {\n-                    let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));\n-                    this.write_scalar(Scalar::from(ptr), dest)?;\n-                } else {\n-                    this.write_null(dest)?;\n-                }\n-            }\n-\n             \"__rust_maybe_catch_panic\" => {\n                 this.handle_catch_panic(args, dest, ret)?;\n-                return Ok(None);\n+                return Ok(false);\n             }\n \n             \"memcmp\" => {\n@@ -399,143 +350,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n-            | \"__errno_location\"\n-            | \"__error\"\n-            => {\n-                let errno_place = this.machine.last_error.unwrap();\n-                this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n-            }\n-\n-            \"getenv\" => {\n-                let result = this.getenv(args[0])?;\n-                this.write_scalar(result, dest)?;\n-            }\n-\n-            \"unsetenv\" => {\n-                let result = this.unsetenv(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"setenv\" => {\n-                let result = this.setenv(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"getcwd\" => {\n-                let result = this.getcwd(args[0], args[1])?;\n-                this.write_scalar(result, dest)?;\n-            }\n-\n-            \"chdir\" => {\n-                let result = this.chdir(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            | \"open\"\n-            | \"open64\"\n-            => {\n-                let result = this.open(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"fcntl\" => {\n-                let result = this.fcntl(args[0], args[1], args.get(2).cloned())?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            | \"close\"\n-            | \"close$NOCANCEL\"\n-            => {\n-                let result = this.close(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"read\" => {\n-                let result = this.read(args[0], args[1], args[2])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"write\" => {\n-                let fd = this.read_scalar(args[0])?.to_i32()?;\n-                let buf = this.read_scalar(args[1])?.not_undef()?;\n-                let n = this.read_scalar(args[2])?.to_machine_usize(tcx)?;\n-                trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, n);\n-                let result = if fd == 1 || fd == 2 {\n-                    // stdout/stderr\n-                    use std::io::{self, Write};\n-\n-                    let buf_cont = this.memory.read_bytes(buf, Size::from_bytes(n))?;\n-                    // We need to flush to make sure this actually appears on the screen\n-                    let res = if fd == 1 {\n-                        // Stdout is buffered, flush to make sure it appears on the screen.\n-                        // This is the write() syscall of the interpreted program, we want it\n-                        // to correspond to a write() syscall on the host -- there is no good\n-                        // in adding extra buffering here.\n-                        let res = io::stdout().write(buf_cont);\n-                        io::stdout().flush().unwrap();\n-                        res\n-                    } else {\n-                        // No need to flush, stderr is not buffered.\n-                        io::stderr().write(buf_cont)\n-                    };\n-                    match res {\n-                        Ok(n) => n as i64,\n-                        Err(_) => -1,\n-                    }\n-                } else {\n-                    this.write(args[0], args[1], args[2])?\n-                };\n-                // Now, `result` is the value we return back to the program.\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            | \"lseek64\"\n-            | \"lseek\"\n-            => {\n-                let result = this.lseek64(args[0], args[1], args[2])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"unlink\" => {\n-                let result = this.unlink(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"symlink\" => {\n-                let result = this.symlink(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"stat$INODE64\" => {\n-                let result = this.stat(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"lstat$INODE64\" => {\n-                let result = this.lstat(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"fstat$INODE64\" => {\n-                let result = this.fstat(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"rename\" => {\n-                let result = this.rename(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"clock_gettime\" => {\n-                let result = this.clock_gettime(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"gettimeofday\" => {\n-                let result = this.gettimeofday(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n             \"strlen\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let n = this.memory.read_c_str(ptr)?.len();\n@@ -641,390 +455,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_f64(res), dest)?;\n             }\n \n-            // Some things needed for `sys::thread` initialization to go through.\n-            | \"signal\"\n-            | \"sigaction\"\n-            | \"sigaltstack\"\n-            => {\n-                this.write_scalar(Scalar::from_int(0, dest.layout.size), dest)?;\n-            }\n-\n-            \"sysconf\" => {\n-                let name = this.read_scalar(args[0])?.to_i32()?;\n-\n-                trace!(\"sysconf() called with name {}\", name);\n-                // TODO: Cache the sysconf integers via Miri's global cache.\n-                let paths = &[\n-                    (&[\"libc\", \"_SC_PAGESIZE\"], Scalar::from_int(PAGE_SIZE, dest.layout.size)),\n-                    (&[\"libc\", \"_SC_GETPW_R_SIZE_MAX\"], Scalar::from_int(-1, dest.layout.size)),\n-                    (\n-                        &[\"libc\", \"_SC_NPROCESSORS_ONLN\"],\n-                        Scalar::from_int(NUM_CPUS, dest.layout.size),\n-                    ),\n-                ];\n-                let mut result = None;\n-                for &(path, path_value) in paths {\n-                    if let Some(val) = this.eval_path_scalar(path)? {\n-                        let val = val.to_i32()?;\n-                        if val == name {\n-                            result = Some(path_value);\n-                            break;\n-                        }\n-                    }\n-                }\n-                if let Some(result) = result {\n-                    this.write_scalar(result, dest)?;\n-                } else {\n-                    throw_unsup_format!(\"Unimplemented sysconf name: {}\", name)\n-                }\n-            }\n-\n-            \"sched_getaffinity\" => {\n-                // Return an error; `num_cpus` then falls back to `sysconf`.\n-                this.write_scalar(Scalar::from_int(-1, dest.layout.size), dest)?;\n-            }\n-\n-            \"isatty\" => {\n-                this.write_null(dest)?;\n+            _ => match this.tcx.sess.target.target.target_os.to_lowercase().as_str() {\n+                \"linux\" | \"macos\" => return posix::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n+                \"windows\" => return windows::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n+                target => throw_unsup_format!(\"The {} target platform is not supported\", target),\n             }\n+        };\n \n-            // Hook pthread calls that go to the thread-local storage memory subsystem.\n-            \"pthread_key_create\" => {\n-                let key_place = this.deref_operand(args[0])?;\n-\n-                // Extract the function type out of the signature (that seems easier than constructing it ourselves).\n-                let dtor = match this.test_null(this.read_scalar(args[1])?.not_undef()?)? {\n-                    Some(dtor_ptr) => Some(this.memory.get_fn(dtor_ptr)?.as_instance()?),\n-                    None => None,\n-                };\n-\n-                // Figure out how large a pthread TLS key actually is.\n-                // This is `libc::pthread_key_t`.\n-                let key_type = args[0].layout.ty\n-                    .builtin_deref(true)\n-                    .ok_or_else(|| err_ub_format!(\n-                        \"wrong signature used for `pthread_key_create`: first argument must be a raw pointer.\"\n-                    ))?\n-                    .ty;\n-                let key_layout = this.layout_of(key_type)?;\n-\n-                // Create key and write it into the memory where `key_ptr` wants it.\n-                let key = this.machine.tls.create_tls_key(dtor) as u128;\n-                if key_layout.size.bits() < 128 && key >= (1u128 << key_layout.size.bits() as u128)\n-                {\n-                    throw_unsup!(OutOfTls);\n-                }\n-\n-                this.write_scalar(Scalar::from_uint(key, key_layout.size), key_place.into())?;\n-\n-                // Return success (`0`).\n-                this.write_null(dest)?;\n-            }\n-            \"pthread_key_delete\" => {\n-                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n-                this.machine.tls.delete_tls_key(key)?;\n-                // Return success (0)\n-                this.write_null(dest)?;\n-            }\n-            \"pthread_getspecific\" => {\n-                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n-                let ptr = this.machine.tls.load_tls(key, tcx)?;\n-                this.write_scalar(ptr, dest)?;\n-            }\n-            \"pthread_setspecific\" => {\n-                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n-                let new_ptr = this.read_scalar(args[1])?.not_undef()?;\n-                this.machine.tls.store_tls(key, this.test_null(new_ptr)?)?;\n-\n-                // Return success (`0`).\n-                this.write_null(dest)?;\n-            }\n-\n-            // Stack size/address stuff.\n-            | \"pthread_attr_init\"\n-            | \"pthread_attr_destroy\"\n-            | \"pthread_self\"\n-            | \"pthread_attr_setstacksize\" => {\n-                this.write_null(dest)?;\n-            }\n-            \"pthread_attr_getstack\" => {\n-                let addr_place = this.deref_operand(args[1])?;\n-                let size_place = this.deref_operand(args[2])?;\n-\n-                this.write_scalar(\n-                    Scalar::from_uint(STACK_ADDR, addr_place.layout.size),\n-                    addr_place.into(),\n-                )?;\n-                this.write_scalar(\n-                    Scalar::from_uint(STACK_SIZE, size_place.layout.size),\n-                    size_place.into(),\n-                )?;\n-\n-                // Return success (`0`).\n-                this.write_null(dest)?;\n-            }\n-\n-            // We don't support threading. (Also for Windows.)\n-            | \"pthread_create\"\n-            | \"CreateThread\"\n-            => {\n-                throw_unsup_format!(\"Miri does not support threading\");\n-            }\n-\n-            // Stub out calls for condvar, mutex and rwlock, to just return `0`.\n-            | \"pthread_mutexattr_init\"\n-            | \"pthread_mutexattr_settype\"\n-            | \"pthread_mutex_init\"\n-            | \"pthread_mutexattr_destroy\"\n-            | \"pthread_mutex_lock\"\n-            | \"pthread_mutex_unlock\"\n-            | \"pthread_mutex_destroy\"\n-            | \"pthread_rwlock_rdlock\"\n-            | \"pthread_rwlock_unlock\"\n-            | \"pthread_rwlock_wrlock\"\n-            | \"pthread_rwlock_destroy\"\n-            | \"pthread_condattr_init\"\n-            | \"pthread_condattr_setclock\"\n-            | \"pthread_cond_init\"\n-            | \"pthread_condattr_destroy\"\n-            | \"pthread_cond_destroy\"\n-            => {\n-                this.write_null(dest)?;\n-            }\n-\n-            // We don't support fork so we don't have to do anything for atfork.\n-            \"pthread_atfork\" => {\n-                this.write_null(dest)?;\n-            }\n-\n-            \"posix_fadvise\" => {\n-                // fadvise is only informational, we can ignore it.\n-                this.write_null(dest)?;\n-            }\n-\n-            \"mmap\" => {\n-                // This is a horrible hack, but since the guard page mechanism calls mmap and expects a particular return value, we just give it that value.\n-                let addr = this.read_scalar(args[0])?.not_undef()?;\n-                this.write_scalar(addr, dest)?;\n-            }\n-            \"mprotect\" => {\n-                this.write_null(dest)?;\n-            }\n-\n-            // macOS API stubs.\n-            | \"pthread_attr_get_np\"\n-            | \"pthread_getattr_np\"\n-            => {\n-                this.write_null(dest)?;\n-            }\n-            \"pthread_get_stackaddr_np\" => {\n-                let stack_addr = Scalar::from_uint(STACK_ADDR, dest.layout.size);\n-                this.write_scalar(stack_addr, dest)?;\n-            }\n-            \"pthread_get_stacksize_np\" => {\n-                let stack_size = Scalar::from_uint(STACK_SIZE, dest.layout.size);\n-                this.write_scalar(stack_size, dest)?;\n-            }\n-            \"_tlv_atexit\" => {\n-                // FIXME: register the destructor.\n-            }\n-            \"_NSGetArgc\" => {\n-                this.write_scalar(this.machine.argc.expect(\"machine must be initialized\"), dest)?;\n-            }\n-            \"_NSGetArgv\" => {\n-                this.write_scalar(this.machine.argv.expect(\"machine must be initialized\"), dest)?;\n-            }\n-            \"SecRandomCopyBytes\" => {\n-                let len = this.read_scalar(args[1])?.to_machine_usize(this)?;\n-                let ptr = this.read_scalar(args[2])?.not_undef()?;\n-                this.gen_random(ptr, len as usize)?;\n-                this.write_null(dest)?;\n-            }\n-\n-            // Windows API stubs.\n-            // HANDLE = isize\n-            // DWORD = ULONG = u32\n-            // BOOL = i32\n-            \"GetProcessHeap\" => {\n-                // Just fake a HANDLE\n-                this.write_scalar(Scalar::from_int(1, this.pointer_size()), dest)?;\n-            }\n-            \"HeapAlloc\" => {\n-                let _handle = this.read_scalar(args[0])?.to_machine_isize(this)?;\n-                let flags = this.read_scalar(args[1])?.to_u32()?;\n-                let size = this.read_scalar(args[2])?.to_machine_usize(this)?;\n-                let zero_init = (flags & 0x00000008) != 0; // HEAP_ZERO_MEMORY\n-                let res = this.malloc(size, zero_init, MiriMemoryKind::WinHeap);\n-                this.write_scalar(res, dest)?;\n-            }\n-            \"HeapFree\" => {\n-                let _handle = this.read_scalar(args[0])?.to_machine_isize(this)?;\n-                let _flags = this.read_scalar(args[1])?.to_u32()?;\n-                let ptr = this.read_scalar(args[2])?.not_undef()?;\n-                this.free(ptr, MiriMemoryKind::WinHeap)?;\n-                this.write_scalar(Scalar::from_int(1, Size::from_bytes(4)), dest)?;\n-            }\n-            \"HeapReAlloc\" => {\n-                let _handle = this.read_scalar(args[0])?.to_machine_isize(this)?;\n-                let _flags = this.read_scalar(args[1])?.to_u32()?;\n-                let ptr = this.read_scalar(args[2])?.not_undef()?;\n-                let size = this.read_scalar(args[3])?.to_machine_usize(this)?;\n-                let res = this.realloc(ptr, size, MiriMemoryKind::WinHeap)?;\n-                this.write_scalar(res, dest)?;\n-            }\n-\n-            \"SetLastError\" => {\n-                this.set_last_error(this.read_scalar(args[0])?.not_undef()?)?;\n-            }\n-            \"GetLastError\" => {\n-                let last_error = this.get_last_error()?;\n-                this.write_scalar(last_error, dest)?;\n-            }\n-\n-            \"AddVectoredExceptionHandler\" => {\n-                // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n-                this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n-            }\n-\n-            | \"InitializeCriticalSection\"\n-            | \"EnterCriticalSection\"\n-            | \"LeaveCriticalSection\"\n-            | \"DeleteCriticalSection\"\n-            => {\n-                // Nothing to do, not even a return value.\n-            }\n-\n-            | \"GetModuleHandleW\"\n-            | \"GetProcAddress\"\n-            | \"TryEnterCriticalSection\"\n-            | \"GetConsoleScreenBufferInfo\"\n-            | \"SetConsoleTextAttribute\"\n-            => {\n-                // Pretend these do not exist / nothing happened, by returning zero.\n-                this.write_null(dest)?;\n-            }\n-\n-            \"GetSystemInfo\" => {\n-                let system_info = this.deref_operand(args[0])?;\n-                // Initialize with `0`.\n-                this.memory.write_bytes(\n-                    system_info.ptr,\n-                    iter::repeat(0u8).take(system_info.layout.size.bytes() as usize),\n-                )?;\n-                // Set number of processors.\n-                let dword_size = Size::from_bytes(4);\n-                let num_cpus = this.mplace_field(system_info, 6)?;\n-                this.write_scalar(Scalar::from_int(NUM_CPUS, dword_size), num_cpus.into())?;\n-            }\n-\n-            \"TlsAlloc\" => {\n-                // This just creates a key; Windows does not natively support TLS destructors.\n-\n-                // Create key and return it.\n-                let key = this.machine.tls.create_tls_key(None) as u128;\n-\n-                // Figure out how large a TLS key actually is. This is `c::DWORD`.\n-                if dest.layout.size.bits() < 128\n-                    && key >= (1u128 << dest.layout.size.bits() as u128)\n-                {\n-                    throw_unsup!(OutOfTls);\n-                }\n-                this.write_scalar(Scalar::from_uint(key, dest.layout.size), dest)?;\n-            }\n-            \"TlsGetValue\" => {\n-                let key = this.read_scalar(args[0])?.to_u32()? as u128;\n-                let ptr = this.machine.tls.load_tls(key, tcx)?;\n-                this.write_scalar(ptr, dest)?;\n-            }\n-            \"TlsSetValue\" => {\n-                let key = this.read_scalar(args[0])?.to_u32()? as u128;\n-                let new_ptr = this.read_scalar(args[1])?.not_undef()?;\n-                this.machine.tls.store_tls(key, this.test_null(new_ptr)?)?;\n-\n-                // Return success (`1`).\n-                this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n-            }\n-            \"GetStdHandle\" => {\n-                let which = this.read_scalar(args[0])?.to_i32()?;\n-                // We just make this the identity function, so we know later in `WriteFile`\n-                // which one it is.\n-                this.write_scalar(Scalar::from_int(which, this.pointer_size()), dest)?;\n-            }\n-            \"WriteFile\" => {\n-                let handle = this.read_scalar(args[0])?.to_machine_isize(this)?;\n-                let buf = this.read_scalar(args[1])?.not_undef()?;\n-                let n = this.read_scalar(args[2])?.to_u32()?;\n-                let written_place = this.deref_operand(args[3])?;\n-                // Spec says to always write `0` first.\n-                this.write_null(written_place.into())?;\n-                let written = if handle == -11 || handle == -12 {\n-                    // stdout/stderr\n-                    use std::io::{self, Write};\n-\n-                    let buf_cont = this.memory.read_bytes(buf, Size::from_bytes(u64::from(n)))?;\n-                    let res = if handle == -11 {\n-                        io::stdout().write(buf_cont)\n-                    } else {\n-                        io::stderr().write(buf_cont)\n-                    };\n-                    res.ok().map(|n| n as u32)\n-                } else {\n-                    eprintln!(\"Miri: Ignored output to handle {}\", handle);\n-                    // Pretend it all went well.\n-                    Some(n)\n-                };\n-                // If there was no error, write back how much was written.\n-                if let Some(n) = written {\n-                    this.write_scalar(Scalar::from_u32(n), written_place.into())?;\n-                }\n-                // Return whether this was a success.\n-                this.write_scalar(\n-                    Scalar::from_int(if written.is_some() { 1 } else { 0 }, dest.layout.size),\n-                    dest,\n-                )?;\n-            }\n-            \"GetConsoleMode\" => {\n-                // Everything is a pipe.\n-                this.write_null(dest)?;\n-            }\n-            \"GetEnvironmentVariableW\" => {\n-                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n-                // args[1] : LPWSTR lpBuffer (32-bit pointer to a string of 16-bit Unicode chars)\n-                // lpBuffer : ptr to buffer that receives contents of the env_var as a null-terminated string.\n-                // Return `# of chars` stored in the buffer pointed to by lpBuffer, excluding null-terminator.\n-                // Return 0 upon failure.\n-\n-                // This is not the env var you are looking for.\n-                this.set_last_error(Scalar::from_u32(203))?; // ERROR_ENVVAR_NOT_FOUND\n-                this.write_null(dest)?;\n-            }\n-            \"SetEnvironmentVariableW\" => {\n-                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n-                // args[1] : LPCWSTR lpValue (32-bit ptr to a const string of 16-bit Unicode chars)\n-                // Return nonzero if success, else return 0.\n-                throw_unsup_format!(\"can't set environment variable on Windows\");\n-            }\n-            \"GetCommandLineW\" => {\n-                this.write_scalar(\n-                    this.machine.cmd_line.expect(\"machine must be initialized\"),\n-                    dest,\n-                )?;\n-            }\n-            // The actual name of 'RtlGenRandom'\n-            \"SystemFunction036\" => {\n-                let ptr = this.read_scalar(args[0])?.not_undef()?;\n-                let len = this.read_scalar(args[1])?.to_u32()?;\n-                this.gen_random(ptr, len as usize)?;\n-                this.write_scalar(Scalar::from_bool(true), dest)?;\n-            }\n-\n-            // We can't execute anything else.\n-            _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n-        }\n-\n-        this.dump_place(*dest);\n-        this.go_to_block(ret);\n-        Ok(None)\n+        Ok(true)\n     }\n \n     /// Evaluates the scalar at the specified path. Returns Some(val)\n@@ -1043,21 +481,3 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         return Ok(None);\n     }\n }\n-\n-// Shims the linux 'getrandom()' syscall.\n-fn linux_getrandom<'tcx>(\n-    this: &mut MiriEvalContext<'_, 'tcx>,\n-    args: &[OpTy<'tcx, Tag>],\n-    dest: PlaceTy<'tcx, Tag>,\n-) -> InterpResult<'tcx> {\n-    let ptr = this.read_scalar(args[0])?.not_undef()?;\n-    let len = this.read_scalar(args[1])?.to_machine_usize(this)?;\n-\n-    // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n-    // neither of which have any effect on our current PRNG.\n-    let _flags = this.read_scalar(args[2])?.to_i32()?;\n-\n-    this.gen_random(ptr, len as usize)?;\n-    this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n-    Ok(())\n-}"}, {"sha": "a391baa0b22c69eea9456236c14bc08830ddc33c", "filename": "src/shims/foreign_items/posix.rs", "status": "added", "additions": 335, "deletions": 0, "changes": 335, "blob_url": "https://github.com/rust-lang/rust/blob/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "patch": "@@ -0,0 +1,335 @@\n+mod linux;\n+mod macos;\n+\n+use crate::*;\n+use rustc::mir;\n+use rustc::ty::layout::{Align, LayoutOf, Size};\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: &str,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: PlaceTy<'tcx, Tag>,\n+        ret: mir::BasicBlock,\n+    ) -> InterpResult<'tcx, bool> {\n+        let this = self.eval_context_mut();\n+        let tcx = &{ this.tcx.tcx };\n+\n+        match link_name {\n+            // Environment related shims\n+            \"getenv\" => {\n+                let result = this.getenv(args[0])?;\n+                this.write_scalar(result, dest)?;\n+            }\n+\n+            \"unsetenv\" => {\n+                let result = this.unsetenv(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"setenv\" => {\n+                let result = this.setenv(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"getcwd\" => {\n+                let result = this.getcwd(args[0], args[1])?;\n+                this.write_scalar(result, dest)?;\n+            }\n+\n+            \"chdir\" => {\n+                let result = this.chdir(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            // File related shims\n+            \"open\" | \"open64\" => {\n+                let result = this.open(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"fcntl\" => {\n+                let result = this.fcntl(args[0], args[1], args.get(2).cloned())?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"read\" => {\n+                let result = this.read(args[0], args[1], args[2])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"write\" => {\n+                let fd = this.read_scalar(args[0])?.to_i32()?;\n+                let buf = this.read_scalar(args[1])?.not_undef()?;\n+                let n = this.read_scalar(args[2])?.to_machine_usize(tcx)?;\n+                trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, n);\n+                let result = if fd == 1 || fd == 2 {\n+                    // stdout/stderr\n+                    use std::io::{self, Write};\n+\n+                    let buf_cont = this.memory.read_bytes(buf, Size::from_bytes(n))?;\n+                    // We need to flush to make sure this actually appears on the screen\n+                    let res = if fd == 1 {\n+                        // Stdout is buffered, flush to make sure it appears on the screen.\n+                        // This is the write() syscall of the interpreted program, we want it\n+                        // to correspond to a write() syscall on the host -- there is no good\n+                        // in adding extra buffering here.\n+                        let res = io::stdout().write(buf_cont);\n+                        io::stdout().flush().unwrap();\n+                        res\n+                    } else {\n+                        // No need to flush, stderr is not buffered.\n+                        io::stderr().write(buf_cont)\n+                    };\n+                    match res {\n+                        Ok(n) => n as i64,\n+                        Err(_) => -1,\n+                    }\n+                } else {\n+                    this.write(args[0], args[1], args[2])?\n+                };\n+                // Now, `result` is the value we return back to the program.\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"unlink\" => {\n+                let result = this.unlink(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"symlink\" => {\n+                let result = this.symlink(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"rename\" => {\n+                let result = this.rename(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"lseek\" | \"lseek64\" => {\n+                let result = this.lseek64(args[0], args[1], args[2])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            // Other shims\n+            \"posix_memalign\" => {\n+                let ret = this.deref_operand(args[0])?;\n+                let align = this.read_scalar(args[1])?.to_machine_usize(this)?;\n+                let size = this.read_scalar(args[2])?.to_machine_usize(this)?;\n+                // Align must be power of 2, and also at least ptr-sized (POSIX rules).\n+                if !align.is_power_of_two() {\n+                    throw_unsup!(HeapAllocNonPowerOfTwoAlignment(align));\n+                }\n+                if align < this.pointer_size().bytes() {\n+                    throw_ub_format!(\n+                        \"posix_memalign: alignment must be at least the size of a pointer, but is {}\",\n+                        align,\n+                    );\n+                }\n+\n+                if size == 0 {\n+                    this.write_null(ret.into())?;\n+                } else {\n+                    let ptr = this.memory.allocate(\n+                        Size::from_bytes(size),\n+                        Align::from_bytes(align).unwrap(),\n+                        MiriMemoryKind::C.into(),\n+                    );\n+                    this.write_scalar(ptr, ret.into())?;\n+                }\n+                this.write_null(dest)?;\n+            }\n+\n+            \"dlsym\" => {\n+                let _handle = this.read_scalar(args[0])?;\n+                let symbol = this.read_scalar(args[1])?.not_undef()?;\n+                let symbol_name = this.memory.read_c_str(symbol)?;\n+                let err = format!(\"bad c unicode symbol: {:?}\", symbol_name);\n+                let symbol_name = ::std::str::from_utf8(symbol_name).unwrap_or(&err);\n+                if let Some(dlsym) = Dlsym::from_str(symbol_name)? {\n+                    let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));\n+                    this.write_scalar(Scalar::from(ptr), dest)?;\n+                } else {\n+                    this.write_null(dest)?;\n+                }\n+            }\n+\n+            // Hook pthread calls that go to the thread-local storage memory subsystem.\n+            \"pthread_key_create\" => {\n+                let key_place = this.deref_operand(args[0])?;\n+\n+                // Extract the function type out of the signature (that seems easier than constructing it ourselves).\n+                let dtor = match this.test_null(this.read_scalar(args[1])?.not_undef()?)? {\n+                    Some(dtor_ptr) => Some(this.memory.get_fn(dtor_ptr)?.as_instance()?),\n+                    None => None,\n+                };\n+\n+                // Figure out how large a pthread TLS key actually is.\n+                // This is `libc::pthread_key_t`.\n+                let key_type = args[0].layout.ty\n+                    .builtin_deref(true)\n+                    .ok_or_else(|| err_ub_format!(\n+                        \"wrong signature used for `pthread_key_create`: first argument must be a raw pointer.\"\n+                    ))?\n+                    .ty;\n+                let key_layout = this.layout_of(key_type)?;\n+\n+                // Create key and write it into the memory where `key_ptr` wants it.\n+                let key = this.machine.tls.create_tls_key(dtor) as u128;\n+                if key_layout.size.bits() < 128 && key >= (1u128 << key_layout.size.bits() as u128)\n+                {\n+                    throw_unsup!(OutOfTls);\n+                }\n+\n+                this.write_scalar(Scalar::from_uint(key, key_layout.size), key_place.into())?;\n+\n+                // Return success (`0`).\n+                this.write_null(dest)?;\n+            }\n+            \"pthread_key_delete\" => {\n+                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n+                this.machine.tls.delete_tls_key(key)?;\n+                // Return success (0)\n+                this.write_null(dest)?;\n+            }\n+            \"pthread_getspecific\" => {\n+                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n+                let ptr = this.machine.tls.load_tls(key, tcx)?;\n+                this.write_scalar(ptr, dest)?;\n+            }\n+            \"pthread_setspecific\" => {\n+                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n+                let new_ptr = this.read_scalar(args[1])?.not_undef()?;\n+                this.machine.tls.store_tls(key, this.test_null(new_ptr)?)?;\n+\n+                // Return success (`0`).\n+                this.write_null(dest)?;\n+            }\n+\n+            // Stack size/address stuff.\n+            | \"pthread_attr_init\"\n+            | \"pthread_attr_destroy\"\n+            | \"pthread_self\"\n+            | \"pthread_attr_setstacksize\" => {\n+                this.write_null(dest)?;\n+            }\n+            \"pthread_attr_getstack\" => {\n+                let addr_place = this.deref_operand(args[1])?;\n+                let size_place = this.deref_operand(args[2])?;\n+\n+                this.write_scalar(\n+                    Scalar::from_uint(STACK_ADDR, addr_place.layout.size),\n+                    addr_place.into(),\n+                )?;\n+                this.write_scalar(\n+                    Scalar::from_uint(STACK_SIZE, size_place.layout.size),\n+                    size_place.into(),\n+                )?;\n+\n+                // Return success (`0`).\n+                this.write_null(dest)?;\n+            }\n+\n+            // We don't support threading.\n+            \"pthread_create\" => {\n+                throw_unsup_format!(\"Miri does not support threading\");\n+            }\n+\n+            // Stub out calls for condvar, mutex and rwlock, to just return `0`.\n+            | \"pthread_mutexattr_init\"\n+            | \"pthread_mutexattr_settype\"\n+            | \"pthread_mutex_init\"\n+            | \"pthread_mutexattr_destroy\"\n+            | \"pthread_mutex_lock\"\n+            | \"pthread_mutex_unlock\"\n+            | \"pthread_mutex_destroy\"\n+            | \"pthread_rwlock_rdlock\"\n+            | \"pthread_rwlock_unlock\"\n+            | \"pthread_rwlock_wrlock\"\n+            | \"pthread_rwlock_destroy\"\n+            | \"pthread_condattr_init\"\n+            | \"pthread_condattr_setclock\"\n+            | \"pthread_cond_init\"\n+            | \"pthread_condattr_destroy\"\n+            | \"pthread_cond_destroy\"\n+            => {\n+                this.write_null(dest)?;\n+            }\n+\n+            // We don't support fork so we don't have to do anything for atfork.\n+            \"pthread_atfork\" => {\n+                this.write_null(dest)?;\n+            }\n+\n+            // Some things needed for `sys::thread` initialization to go through.\n+            | \"signal\"\n+            | \"sigaction\"\n+            | \"sigaltstack\"\n+            => {\n+                this.write_scalar(Scalar::from_int(0, dest.layout.size), dest)?;\n+            }\n+\n+            \"sysconf\" => {\n+                let name = this.read_scalar(args[0])?.to_i32()?;\n+\n+                trace!(\"sysconf() called with name {}\", name);\n+                // TODO: Cache the sysconf integers via Miri's global cache.\n+                let paths = &[\n+                    (&[\"libc\", \"_SC_PAGESIZE\"], Scalar::from_int(PAGE_SIZE, dest.layout.size)),\n+                    (&[\"libc\", \"_SC_GETPW_R_SIZE_MAX\"], Scalar::from_int(-1, dest.layout.size)),\n+                    (\n+                        &[\"libc\", \"_SC_NPROCESSORS_ONLN\"],\n+                        Scalar::from_int(NUM_CPUS, dest.layout.size),\n+                    ),\n+                ];\n+                let mut result = None;\n+                for &(path, path_value) in paths {\n+                    if let Some(val) = this.eval_path_scalar(path)? {\n+                        let val = val.to_i32()?;\n+                        if val == name {\n+                            result = Some(path_value);\n+                            break;\n+                        }\n+                    }\n+                }\n+                if let Some(result) = result {\n+                    this.write_scalar(result, dest)?;\n+                } else {\n+                    throw_unsup_format!(\"Unimplemented sysconf name: {}\", name)\n+                }\n+            }\n+\n+            \"isatty\" => {\n+                this.write_null(dest)?;\n+            }\n+\n+            \"posix_fadvise\" => {\n+                // fadvise is only informational, we can ignore it.\n+                this.write_null(dest)?;\n+            }\n+\n+            \"mmap\" => {\n+                // This is a horrible hack, but since the guard page mechanism calls mmap and expects a particular return value, we just give it that value.\n+                let addr = this.read_scalar(args[0])?.not_undef()?;\n+                this.write_scalar(addr, dest)?;\n+            }\n+\n+            \"mprotect\" => {\n+                this.write_null(dest)?;\n+            }\n+\n+            _ => {\n+                match this.tcx.sess.target.target.target_os.to_lowercase().as_str() {\n+                    \"linux\" => return linux::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n+                    \"macos\" => return macos::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n+                    _ => unreachable!(),\n+                }\n+            }\n+        };\n+\n+        Ok(true)\n+    }\n+}"}, {"sha": "9da54b6d4070259dad97781e9cf3d9e7c0fb2a76", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "patch": "@@ -0,0 +1,106 @@\n+use crate::*;\n+use rustc::mir;\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: &str,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: PlaceTy<'tcx, Tag>,\n+        _ret: mir::BasicBlock,\n+    ) -> InterpResult<'tcx, bool> {\n+        let this = self.eval_context_mut();\n+\n+        match link_name {\n+            \"__errno_location\" => {\n+                let errno_place = this.machine.last_error.unwrap();\n+                this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n+            }\n+\n+            // File related shims\n+\n+            // The only reason this is not in the `posix` module is because the `macos` item has a\n+            // different name.\n+            \"close\" => {\n+                let result = this.close(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            // Time related shims\n+\n+            // This is a POSIX function but it has only been tested on linux.\n+            \"clock_gettime\" => {\n+                let result = this.clock_gettime(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            // Other shims\n+            \"pthread_getattr_np\" => {\n+                this.write_null(dest)?;\n+            }\n+\n+            \"syscall\" => {\n+                let sys_getrandom = this\n+                    .eval_path_scalar(&[\"libc\", \"SYS_getrandom\"])?\n+                    .expect(\"Failed to get libc::SYS_getrandom\")\n+                    .to_machine_usize(this)?;\n+\n+                let sys_statx = this\n+                    .eval_path_scalar(&[\"libc\", \"SYS_statx\"])?\n+                    .expect(\"Failed to get libc::SYS_statx\")\n+                    .to_machine_usize(this)?;\n+\n+                match this.read_scalar(args[0])?.to_machine_usize(this)? {\n+                    // `libc::syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), GRND_NONBLOCK)`\n+                    // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n+                    id if id == sys_getrandom => {\n+                        // The first argument is the syscall id,\n+                        // so skip over it.\n+                        getrandom(this, &args[1..], dest)?;\n+                    }\n+                    // `statx` is used by `libstd` to retrieve metadata information in `linux`\n+                    // instead of using `stat`,`lstat` or `fstat` as in the `macos` platform.\n+                    id if id == sys_statx => {\n+                        // The first argument is the syscall id,\n+                        // so skip over it.\n+                        let result = this.linux_statx(args[1], args[2], args[3], args[4], args[5])?;\n+                        this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                    }\n+                    id => throw_unsup_format!(\"miri does not support syscall ID {}\", id),\n+                }\n+            }\n+\n+            \"getrandom\" => {\n+                getrandom(this, args, dest)?;\n+            }\n+\n+            \"sched_getaffinity\" => {\n+                // Return an error; `num_cpus` then falls back to `sysconf`.\n+                this.write_scalar(Scalar::from_int(-1, dest.layout.size), dest)?;\n+            }\n+\n+            _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n+        };\n+\n+        Ok(true)\n+    }\n+}\n+\n+// Shims the linux 'getrandom()' syscall.\n+fn getrandom<'tcx>(\n+    this: &mut MiriEvalContext<'_, 'tcx>,\n+    args: &[OpTy<'tcx, Tag>],\n+    dest: PlaceTy<'tcx, Tag>,\n+) -> InterpResult<'tcx> {\n+    let ptr = this.read_scalar(args[0])?.not_undef()?;\n+    let len = this.read_scalar(args[1])?.to_machine_usize(this)?;\n+\n+    // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n+    // neither of which have any effect on our current PRNG.\n+    let _flags = this.read_scalar(args[2])?.to_i32()?;\n+\n+    this.gen_random(ptr, len as usize)?;\n+    this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n+    Ok(())\n+}"}, {"sha": "25ac7e93867f256e29cc06ad081ba2befeadf332", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "patch": "@@ -0,0 +1,91 @@\n+use crate::*;\n+use rustc::mir;\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: &str,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: PlaceTy<'tcx, Tag>,\n+        _ret: mir::BasicBlock,\n+    ) -> InterpResult<'tcx, bool> {\n+        let this = self.eval_context_mut();\n+\n+        match link_name {\n+            \"__error\" => {\n+                let errno_place = this.machine.last_error.unwrap();\n+                this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n+            }\n+\n+            // File related shims\n+\n+            // The only reason this is not in the `posix` module is because the `linux` item has a\n+            // different name.\n+            \"close$NOCANCEL\" => {\n+                let result = this.close(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"stat$INODE64\" => {\n+                let result = this.macos_stat(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"lstat$INODE64\" => {\n+                let result = this.macos_lstat(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"fstat$INODE64\" => {\n+                let result = this.macos_fstat(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            // Time related shims\n+            \"gettimeofday\" => {\n+                let result = this.gettimeofday(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            // Other shims\n+            \"pthread_attr_get_np\" => {\n+                this.write_null(dest)?;\n+            }\n+\n+            \"pthread_get_stackaddr_np\" => {\n+                let stack_addr = Scalar::from_uint(STACK_ADDR, dest.layout.size);\n+                this.write_scalar(stack_addr, dest)?;\n+            }\n+\n+            \"pthread_get_stacksize_np\" => {\n+                let stack_size = Scalar::from_uint(STACK_SIZE, dest.layout.size);\n+                this.write_scalar(stack_size, dest)?;\n+            }\n+\n+            \"_tlv_atexit\" => {\n+                // FIXME: register the destructor.\n+            }\n+\n+            \"_NSGetArgc\" => {\n+                this.write_scalar(this.machine.argc.expect(\"machine must be initialized\"), dest)?;\n+            }\n+\n+            \"_NSGetArgv\" => {\n+                this.write_scalar(this.machine.argv.expect(\"machine must be initialized\"), dest)?;\n+            }\n+\n+            \"SecRandomCopyBytes\" => {\n+                let len = this.read_scalar(args[1])?.to_machine_usize(this)?;\n+                let ptr = this.read_scalar(args[2])?.not_undef()?;\n+                this.gen_random(ptr, len as usize)?;\n+                this.write_null(dest)?;\n+            }\n+\n+            _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n+        };\n+\n+        Ok(true)\n+    }\n+}\n+"}, {"sha": "29eac99e565cdbc3470eccae8c8b71d4317cb06c", "filename": "src/shims/foreign_items/windows.rs", "status": "added", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "patch": "@@ -0,0 +1,212 @@\n+use crate::*;\n+use rustc::mir;\n+use rustc::ty::layout::Size;\n+use std::iter;\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: &str,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: PlaceTy<'tcx, Tag>,\n+        _ret: mir::BasicBlock,\n+    ) -> InterpResult<'tcx, bool> {\n+        let this = self.eval_context_mut();\n+        let tcx = &{ this.tcx.tcx };\n+\n+        match link_name {\n+            // Windows API stubs.\n+            // HANDLE = isize\n+            // DWORD = ULONG = u32\n+            // BOOL = i32\n+\n+            // Environment related shims\n+            \"GetEnvironmentVariableW\" => {\n+                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n+                // args[1] : LPWSTR lpBuffer (32-bit pointer to a string of 16-bit Unicode chars)\n+                // lpBuffer : ptr to buffer that receives contents of the env_var as a null-terminated string.\n+                // Return `# of chars` stored in the buffer pointed to by lpBuffer, excluding null-terminator.\n+                // Return 0 upon failure.\n+\n+                // This is not the env var you are looking for.\n+                this.set_last_error(Scalar::from_u32(203))?; // ERROR_ENVVAR_NOT_FOUND\n+                this.write_null(dest)?;\n+            }\n+\n+            \"SetEnvironmentVariableW\" => {\n+                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n+                // args[1] : LPCWSTR lpValue (32-bit ptr to a const string of 16-bit Unicode chars)\n+                // Return nonzero if success, else return 0.\n+                throw_unsup_format!(\"can't set environment variable on Windows\");\n+            }\n+\n+            // File related shims\n+            \"WriteFile\" => {\n+                let handle = this.read_scalar(args[0])?.to_machine_isize(this)?;\n+                let buf = this.read_scalar(args[1])?.not_undef()?;\n+                let n = this.read_scalar(args[2])?.to_u32()?;\n+                let written_place = this.deref_operand(args[3])?;\n+                // Spec says to always write `0` first.\n+                this.write_null(written_place.into())?;\n+                let written = if handle == -11 || handle == -12 {\n+                    // stdout/stderr\n+                    use std::io::{self, Write};\n+\n+                    let buf_cont = this.memory.read_bytes(buf, Size::from_bytes(u64::from(n)))?;\n+                    let res = if handle == -11 {\n+                        io::stdout().write(buf_cont)\n+                    } else {\n+                        io::stderr().write(buf_cont)\n+                    };\n+                    res.ok().map(|n| n as u32)\n+                } else {\n+                    eprintln!(\"Miri: Ignored output to handle {}\", handle);\n+                    // Pretend it all went well.\n+                    Some(n)\n+                };\n+                // If there was no error, write back how much was written.\n+                if let Some(n) = written {\n+                    this.write_scalar(Scalar::from_u32(n), written_place.into())?;\n+                }\n+                // Return whether this was a success.\n+                this.write_scalar(\n+                    Scalar::from_int(if written.is_some() { 1 } else { 0 }, dest.layout.size),\n+                    dest,\n+                )?;\n+            }\n+\n+            // Other shims\n+            \"GetProcessHeap\" => {\n+                // Just fake a HANDLE\n+                this.write_scalar(Scalar::from_int(1, this.pointer_size()), dest)?;\n+            }\n+            \"HeapAlloc\" => {\n+                let _handle = this.read_scalar(args[0])?.to_machine_isize(this)?;\n+                let flags = this.read_scalar(args[1])?.to_u32()?;\n+                let size = this.read_scalar(args[2])?.to_machine_usize(this)?;\n+                let zero_init = (flags & 0x00000008) != 0; // HEAP_ZERO_MEMORY\n+                let res = this.malloc(size, zero_init, MiriMemoryKind::WinHeap);\n+                this.write_scalar(res, dest)?;\n+            }\n+            \"HeapFree\" => {\n+                let _handle = this.read_scalar(args[0])?.to_machine_isize(this)?;\n+                let _flags = this.read_scalar(args[1])?.to_u32()?;\n+                let ptr = this.read_scalar(args[2])?.not_undef()?;\n+                this.free(ptr, MiriMemoryKind::WinHeap)?;\n+                this.write_scalar(Scalar::from_int(1, Size::from_bytes(4)), dest)?;\n+            }\n+            \"HeapReAlloc\" => {\n+                let _handle = this.read_scalar(args[0])?.to_machine_isize(this)?;\n+                let _flags = this.read_scalar(args[1])?.to_u32()?;\n+                let ptr = this.read_scalar(args[2])?.not_undef()?;\n+                let size = this.read_scalar(args[3])?.to_machine_usize(this)?;\n+                let res = this.realloc(ptr, size, MiriMemoryKind::WinHeap)?;\n+                this.write_scalar(res, dest)?;\n+            }\n+\n+            \"SetLastError\" => {\n+                this.set_last_error(this.read_scalar(args[0])?.not_undef()?)?;\n+            }\n+            \"GetLastError\" => {\n+                let last_error = this.get_last_error()?;\n+                this.write_scalar(last_error, dest)?;\n+            }\n+\n+            \"AddVectoredExceptionHandler\" => {\n+                // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n+                this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n+            }\n+\n+            | \"InitializeCriticalSection\"\n+            | \"EnterCriticalSection\"\n+            | \"LeaveCriticalSection\"\n+            | \"DeleteCriticalSection\"\n+            => {\n+                // Nothing to do, not even a return value.\n+            }\n+\n+            | \"GetModuleHandleW\"\n+            | \"GetProcAddress\"\n+            | \"TryEnterCriticalSection\"\n+            | \"GetConsoleScreenBufferInfo\"\n+            | \"SetConsoleTextAttribute\"\n+            => {\n+                // Pretend these do not exist / nothing happened, by returning zero.\n+                this.write_null(dest)?;\n+            }\n+\n+            \"GetSystemInfo\" => {\n+                let system_info = this.deref_operand(args[0])?;\n+                // Initialize with `0`.\n+                this.memory.write_bytes(\n+                    system_info.ptr,\n+                    iter::repeat(0u8).take(system_info.layout.size.bytes() as usize),\n+                )?;\n+                // Set number of processors.\n+                let dword_size = Size::from_bytes(4);\n+                let num_cpus = this.mplace_field(system_info, 6)?;\n+                this.write_scalar(Scalar::from_int(NUM_CPUS, dword_size), num_cpus.into())?;\n+            }\n+\n+            \"TlsAlloc\" => {\n+                // This just creates a key; Windows does not natively support TLS destructors.\n+\n+                // Create key and return it.\n+                let key = this.machine.tls.create_tls_key(None) as u128;\n+\n+                // Figure out how large a TLS key actually is. This is `c::DWORD`.\n+                if dest.layout.size.bits() < 128\n+                    && key >= (1u128 << dest.layout.size.bits() as u128)\n+                {\n+                    throw_unsup!(OutOfTls);\n+                }\n+                this.write_scalar(Scalar::from_uint(key, dest.layout.size), dest)?;\n+            }\n+            \"TlsGetValue\" => {\n+                let key = this.read_scalar(args[0])?.to_u32()? as u128;\n+                let ptr = this.machine.tls.load_tls(key, tcx)?;\n+                this.write_scalar(ptr, dest)?;\n+            }\n+            \"TlsSetValue\" => {\n+                let key = this.read_scalar(args[0])?.to_u32()? as u128;\n+                let new_ptr = this.read_scalar(args[1])?.not_undef()?;\n+                this.machine.tls.store_tls(key, this.test_null(new_ptr)?)?;\n+\n+                // Return success (`1`).\n+                this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n+            }\n+            \"GetStdHandle\" => {\n+                let which = this.read_scalar(args[0])?.to_i32()?;\n+                // We just make this the identity function, so we know later in `WriteFile`\n+                // which one it is.\n+                this.write_scalar(Scalar::from_int(which, this.pointer_size()), dest)?;\n+            }\n+            \"GetConsoleMode\" => {\n+                // Everything is a pipe.\n+                this.write_null(dest)?;\n+            }\n+            \"GetCommandLineW\" => {\n+                this.write_scalar(\n+                    this.machine.cmd_line.expect(\"machine must be initialized\"),\n+                    dest,\n+                )?;\n+            }\n+            // The actual name of 'RtlGenRandom'\n+            \"SystemFunction036\" => {\n+                let ptr = this.read_scalar(args[0])?.not_undef()?;\n+                let len = this.read_scalar(args[1])?.to_u32()?;\n+                this.gen_random(ptr, len as usize)?;\n+                this.write_scalar(Scalar::from_bool(true), dest)?;\n+            }\n+            // We don't support threading.\n+            \"CreateThread\" => {\n+                throw_unsup_format!(\"Miri does not support threading\");\n+            }\n+            _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n+        }\n+\n+        Ok(true)\n+    }\n+}\n+"}, {"sha": "a51a2f52508532498dc78b74a8e8ee828625c400", "filename": "src/shims/fs.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "patch": "@@ -392,73 +392,72 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.try_unwrap_io_result(create_link(target, linkpath).map(|_| 0))\n     }\n \n-    fn stat(\n+    fn macos_stat(\n         &mut self,\n         path_op: OpTy<'tcx, Tag>,\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         this.check_no_isolation(\"stat\")?;\n+        this.assert_platform(\"macos\", \"stat\");\n         // `stat` always follows symlinks.\n-        this.stat_or_lstat(true, path_op, buf_op)\n+        this.macos_stat_or_lstat(true, path_op, buf_op)\n     }\n \n     // `lstat` is used to get symlink metadata.\n-    fn lstat(\n+    fn macos_lstat(\n         &mut self,\n         path_op: OpTy<'tcx, Tag>,\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         this.check_no_isolation(\"lstat\")?;\n-        this.stat_or_lstat(false, path_op, buf_op)\n+        this.assert_platform(\"macos\", \"lstat\");\n+        this.macos_stat_or_lstat(false, path_op, buf_op)\n     }\n \n-    fn fstat(\n+    fn macos_fstat(\n         &mut self,\n         fd_op: OpTy<'tcx, Tag>,\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n         this.check_no_isolation(\"fstat\")?;\n-\n-        if this.tcx.sess.target.target.target_os.to_lowercase() != \"macos\" {\n-            throw_unsup_format!(\"The `fstat` shim is only available for `macos` targets.\")\n-        }\n+        this.assert_platform(\"macos\", \"fstat\");\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n         let metadata = match FileMetadata::from_fd(this, fd)? {\n             Some(metadata) => metadata,\n             None => return Ok(-1),\n         };\n-        stat_macos_write_buf(this, metadata, buf_op)\n+        macos_stat_write_buf(this, metadata, buf_op)\n     }\n \n-    fn stat_or_lstat(\n+    /// Emulate `stat` or `lstat` on the `macos` platform. This function is not intended to be\n+    /// called directly from `emulate_foreign_item_by_name`, so it does not check if isolation is\n+    /// disabled or if the target platform is the correct one. Please use `macos_stat` or\n+    /// `macos_lstat` instead.\n+    fn macos_stat_or_lstat(\n         &mut self,\n         follow_symlink: bool,\n         path_op: OpTy<'tcx, Tag>,\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        if this.tcx.sess.target.target.target_os.to_lowercase() != \"macos\" {\n-            throw_unsup_format!(\"The `stat` and `lstat` shims are only available for `macos` targets.\")\n-        }\n-\n         let path_scalar = this.read_scalar(path_op)?.not_undef()?;\n         let path: PathBuf = this.read_os_str_from_c_str(path_scalar)?.into();\n \n         let metadata = match FileMetadata::from_path(this, path, follow_symlink)? {\n             Some(metadata) => metadata,\n             None => return Ok(-1),\n         };\n-        stat_macos_write_buf(this, metadata, buf_op)\n+        macos_stat_write_buf(this, metadata, buf_op)\n     }\n \n-    fn statx(\n+    fn linux_statx(\n         &mut self,\n         dirfd_op: OpTy<'tcx, Tag>,    // Should be an `int`\n         pathname_op: OpTy<'tcx, Tag>, // Should be a `const char *`\n@@ -469,10 +468,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.check_no_isolation(\"statx\")?;\n-\n-        if this.tcx.sess.target.target.target_os.to_lowercase() != \"linux\" {\n-            throw_unsup_format!(\"The `statx` shim is only available for `linux` targets.\")\n-        }\n+        this.assert_platform(\"linux\", \"statx\");\n \n         let statxbuf_scalar = this.read_scalar(statxbuf_op)?.not_undef()?;\n         let pathname_scalar = this.read_scalar(pathname_op)?.not_undef()?;\n@@ -748,7 +744,7 @@ impl FileMetadata {\n     }\n }\n \n-fn stat_macos_write_buf<'tcx, 'mir>(\n+fn macos_stat_write_buf<'tcx, 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     metadata: FileMetadata,\n     buf_op: OpTy<'tcx, Tag>,"}]}