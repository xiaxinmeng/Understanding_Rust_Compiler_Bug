{"sha": "bb315f25f84c93b69d99d41b2c68185639c30e83", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMzE1ZjI1Zjg0YzkzYjY5ZDk5ZDQxYjJjNjgxODU2MzljMzBlODM=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-24T16:40:40Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-26T16:26:33Z"}, "message": "Implement RaceBox for StdinReader", "tree": {"sha": "7d5ad491eeadcbb8a707126cebdd285a57ec7dc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d5ad491eeadcbb8a707126cebdd285a57ec7dc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb315f25f84c93b69d99d41b2c68185639c30e83", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb315f25f84c93b69d99d41b2c68185639c30e83", "html_url": "https://github.com/rust-lang/rust/commit/bb315f25f84c93b69d99d41b2c68185639c30e83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb315f25f84c93b69d99d41b2c68185639c30e83/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52072dec0f6838ae251259a8f0574776c2028a1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/52072dec0f6838ae251259a8f0574776c2028a1b", "html_url": "https://github.com/rust-lang/rust/commit/52072dec0f6838ae251259a8f0574776c2028a1b"}], "stats": {"total": 59, "additions": 43, "deletions": 16}, "files": [{"sha": "c26450310a9b286a8b2f95a98d32ac27a2b958fe", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb315f25f84c93b69d99d41b2c68185639c30e83/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb315f25f84c93b69d99d41b2c68185639c30e83/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=bb315f25f84c93b69d99d41b2c68185639c30e83", "patch": "@@ -22,6 +22,7 @@ use result::Result::{Ok, Err};\n use slice::{SliceExt};\n use slice;\n use vec::Vec;\n+use kinds::{Send,Sync};\n \n /// Wraps a Reader and buffers input from it\n ///\n@@ -51,6 +52,11 @@ pub struct BufferedReader<R> {\n     cap: uint,\n }\n \n+\n+unsafe impl<R: Send> Send for BufferedReader<R> {}\n+unsafe impl<R: Send+Sync> Sync for BufferedReader<R> {}\n+\n+\n impl<R: Reader> BufferedReader<R> {\n     /// Creates a new `BufferedReader` with the specified buffer capacity\n     pub fn with_capacity(cap: uint, inner: R) -> BufferedReader<R> {"}, {"sha": "b7da57fed270839911710e87b44ac8a78b9c0f40", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bb315f25f84c93b69d99d41b2c68185639c30e83/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb315f25f84c93b69d99d41b2c68185639c30e83/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=bb315f25f84c93b69d99d41b2c68185639c30e83", "patch": "@@ -34,7 +34,7 @@ use failure::LOCAL_STDERR;\n use fmt;\n use io::{Reader, Writer, IoResult, IoError, OtherIoError, Buffer,\n          standard_error, EndOfFile, LineBufferedWriter, BufferedReader};\n-use kinds::Send;\n+use kinds::{Sync, Send};\n use libc;\n use mem;\n use option::Option;\n@@ -98,26 +98,34 @@ thread_local! {\n     }\n }\n \n+struct RaceBox(BufferedReader<StdReader>);\n+\n+unsafe impl Send for RaceBox {}\n+unsafe impl Sync for RaceBox {}\n+\n /// A synchronized wrapper around a buffered reader from stdin\n #[deriving(Clone)]\n pub struct StdinReader {\n-    inner: Arc<Mutex<BufferedReader<StdReader>>>,\n+    inner: Arc<Mutex<RaceBox>>,\n }\n \n+unsafe impl Send for StdinReader {}\n+unsafe impl Sync for StdinReader {}\n+\n /// A guard for exclusive access to `StdinReader`'s internal `BufferedReader`.\n pub struct StdinReaderGuard<'a> {\n-    inner: MutexGuard<'a, BufferedReader<StdReader>>,\n+    inner: MutexGuard<'a, RaceBox>,\n }\n \n impl<'a> Deref<BufferedReader<StdReader>> for StdinReaderGuard<'a> {\n     fn deref(&self) -> &BufferedReader<StdReader> {\n-        &*self.inner\n+        &self.inner.0\n     }\n }\n \n impl<'a> DerefMut<BufferedReader<StdReader>> for StdinReaderGuard<'a> {\n     fn deref_mut(&mut self) -> &mut BufferedReader<StdReader> {\n-        &mut *self.inner\n+        &mut self.inner.0\n     }\n }\n \n@@ -147,53 +155,53 @@ impl StdinReader {\n     /// The read is performed atomically - concurrent read calls in other\n     /// threads will not interleave with this one.\n     pub fn read_line(&mut self) -> IoResult<String> {\n-        self.inner.lock().read_line()\n+        self.inner.lock().0.read_line()\n     }\n \n     /// Like `Buffer::read_until`.\n     ///\n     /// The read is performed atomically - concurrent read calls in other\n     /// threads will not interleave with this one.\n     pub fn read_until(&mut self, byte: u8) -> IoResult<Vec<u8>> {\n-        self.inner.lock().read_until(byte)\n+        self.inner.lock().0.read_until(byte)\n     }\n \n     /// Like `Buffer::read_char`.\n     ///\n     /// The read is performed atomically - concurrent read calls in other\n     /// threads will not interleave with this one.\n     pub fn read_char(&mut self) -> IoResult<char> {\n-        self.inner.lock().read_char()\n+        self.inner.lock().0.read_char()\n     }\n }\n \n impl Reader for StdinReader {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n-        self.inner.lock().read(buf)\n+        self.inner.lock().0.read(buf)\n     }\n \n     // We have to manually delegate all of these because the default impls call\n     // read more than once and we don't want those calls to interleave (or\n     // incur the costs of repeated locking).\n \n     fn read_at_least(&mut self, min: uint, buf: &mut [u8]) -> IoResult<uint> {\n-        self.inner.lock().read_at_least(min, buf)\n+        self.inner.lock().0.read_at_least(min, buf)\n     }\n \n     fn push_at_least(&mut self, min: uint, len: uint, buf: &mut Vec<u8>) -> IoResult<uint> {\n-        self.inner.lock().push_at_least(min, len, buf)\n+        self.inner.lock().0.push_at_least(min, len, buf)\n     }\n \n     fn read_to_end(&mut self) -> IoResult<Vec<u8>> {\n-        self.inner.lock().read_to_end()\n+        self.inner.lock().0.read_to_end()\n     }\n \n     fn read_le_uint_n(&mut self, nbytes: uint) -> IoResult<u64> {\n-        self.inner.lock().read_le_uint_n(nbytes)\n+        self.inner.lock().0.read_le_uint_n(nbytes)\n     }\n \n     fn read_be_uint_n(&mut self, nbytes: uint) -> IoResult<u64> {\n-        self.inner.lock().read_be_uint_n(nbytes)\n+        self.inner.lock().0.read_be_uint_n(nbytes)\n     }\n }\n \n@@ -221,7 +229,7 @@ pub fn stdin() -> StdinReader {\n                 BufferedReader::new(stdin_raw())\n             };\n             let stdin = StdinReader {\n-                inner: Arc::new(Mutex::new(stdin))\n+                inner: Arc::new(Mutex::new(RaceBox(stdin)))\n             };\n             STDIN = mem::transmute(box stdin);\n \n@@ -426,6 +434,9 @@ pub struct StdWriter {\n     inner: StdSource\n }\n \n+unsafe impl Send for StdWriter {}\n+unsafe impl Sync for StdWriter {}\n+\n impl StdWriter {\n     /// Gets the size of this output window, if possible. This is typically used\n     /// when the writer is attached to something like a terminal, this is used"}, {"sha": "a629f035b07afad3b0a5c294496549527aca27ef", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb315f25f84c93b69d99d41b2c68185639c30e83/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb315f25f84c93b69d99d41b2c68185639c30e83/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=bb315f25f84c93b69d99d41b2c68185639c30e83", "patch": "@@ -63,6 +63,11 @@ unsafe impl<M:Send> Send for Helper<M> { }\n \n unsafe impl<M:Send> Sync for Helper<M> { }\n \n+struct RaceBox(helper_signal::signal);\n+\n+unsafe impl Send for RaceBox {}\n+unsafe impl Sync for RaceBox {}\n+\n impl<M: Send> Helper<M> {\n     /// Lazily boots a helper thread, becoming a no-op if the helper has already\n     /// been spawned.\n@@ -85,9 +90,11 @@ impl<M: Send> Helper<M> {\n                 let (receive, send) = helper_signal::new();\n                 *self.signal.get() = send as uint;\n \n+                let receive = RaceBox(receive);\n+\n                 let t = f();\n                 Thread::spawn(move |:| {\n-                    helper(receive, rx, t);\n+                    helper(receive.0, rx, t);\n                     let _g = self.lock.lock();\n                     *self.shutdown.get() = true;\n                     self.cond.notify_one()"}, {"sha": "874838950cd12bfcd59f0751d74d64b40de9cbfc", "filename": "src/libstd/sys/windows/timer.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb315f25f84c93b69d99d41b2c68185639c30e83/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb315f25f84c93b69d99d41b2c68185639c30e83/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs?ref=bb315f25f84c93b69d99d41b2c68185639c30e83", "patch": "@@ -48,6 +48,9 @@ pub enum Req {\n     RemoveTimer(libc::HANDLE, Sender<()>),\n }\n \n+unsafe impl Send for Req {}\n+\n+\n fn helper(input: libc::HANDLE, messages: Receiver<Req>, _: ()) {\n     let mut objs = vec![input];\n     let mut chans = vec![];"}]}