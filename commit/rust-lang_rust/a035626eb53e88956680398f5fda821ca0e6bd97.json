{"sha": "a035626eb53e88956680398f5fda821ca0e6bd97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMzU2MjZlYjUzZTg4OTU2NjgwMzk4ZjVmZGE4MjFjYTBlNmJkOTc=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-11-05T22:08:42Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-11-16T19:26:49Z"}, "message": "Try weak symbols for all linux syscall! wrappers", "tree": {"sha": "cb88a491320ca6ca848d0249215225553ae843ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb88a491320ca6ca848d0249215225553ae843ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a035626eb53e88956680398f5fda821ca0e6bd97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a035626eb53e88956680398f5fda821ca0e6bd97", "html_url": "https://github.com/rust-lang/rust/commit/a035626eb53e88956680398f5fda821ca0e6bd97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a035626eb53e88956680398f5fda821ca0e6bd97/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a15f026f2666a16255904879028acdd5513c766", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a15f026f2666a16255904879028acdd5513c766", "html_url": "https://github.com/rust-lang/rust/commit/7a15f026f2666a16255904879028acdd5513c766"}], "stats": {"total": 25, "additions": 8, "deletions": 17}, "files": [{"sha": "38ddb41700c4b323c6ec2719f3c6d1072a019e91", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a035626eb53e88956680398f5fda821ca0e6bd97/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a035626eb53e88956680398f5fda821ca0e6bd97/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=a035626eb53e88956680398f5fda821ca0e6bd97", "patch": "@@ -29,7 +29,7 @@ mod imp {\n         // A weak symbol allows interposition, e.g. for perf measurements that want to\n         // disable randomness for consistency. Otherwise, we'll try a raw syscall.\n         // (`getrandom` was added in glibc 2.25, musl 1.1.20, android API level 28)\n-        weak_syscall! {\n+        syscall! {\n             fn getrandom(\n                 buffer: *mut libc::c_void,\n                 length: libc::size_t,"}, {"sha": "6251c3147300a74c68985dffbac6517fa0d5d3bd", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a035626eb53e88956680398f5fda821ca0e6bd97/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a035626eb53e88956680398f5fda821ca0e6bd97/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=a035626eb53e88956680398f5fda821ca0e6bd97", "patch": "@@ -92,26 +92,17 @@ macro_rules! syscall {\n             // (not paths).\n             use libc::*;\n \n-            syscall(\n-                concat_idents!(SYS_, $name),\n-                $($arg_name as c_long),*\n-            ) as $ret\n-        }\n-    )\n-}\n-\n-/// Use a weak symbol from libc when possible, allowing `LD_PRELOAD` interposition,\n-/// but if it's not found just use a raw syscall.\n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-macro_rules! weak_syscall {\n-    (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n-        unsafe fn $name($($arg_name:$t),*) -> $ret {\n             weak! { fn $name($($t),*) -> $ret }\n+\n+            // Use a weak symbol from libc when possible, allowing `LD_PRELOAD`\n+            // interposition, but if it's not found just use a raw syscall.\n             if let Some(fun) = $name.get() {\n                 fun($($arg_name),*)\n             } else {\n-                syscall! { fn $name($($arg_name:$t),*) -> $ret }\n-                $name($($arg_name),*)\n+                syscall(\n+                    concat_idents!(SYS_, $name),\n+                    $($arg_name as c_long),*\n+                ) as $ret\n             }\n         }\n     )"}]}