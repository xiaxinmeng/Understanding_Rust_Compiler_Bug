{"sha": "e8f0fb1f1359d042e165b92a9c1053424b77a459", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZjBmYjFmMTM1OWQwNDJlMTY1YjkyYTljMTA1MzQyNGI3N2E0NTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-16T10:43:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-16T10:43:01Z"}, "message": "Rollup merge of #72166 - nnethercote:simpler-slice-Iterator-methods, r=cuviper\n\nSimpler slice `Iterator` methods\n\nThese reduce the amount of LLVM IR generated, helping compile times.\n\nr? @cuviper", "tree": {"sha": "377c9b9c5734fefbb985bb3a9139c730e110412c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/377c9b9c5734fefbb985bb3a9139c730e110412c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8f0fb1f1359d042e165b92a9c1053424b77a459", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJev8O2CRBK7hj4Ov3rIwAAdHIIAEGRVaXKD5f87zSM8K8qn/YV\nW+cgHs3VtIkFsboqEjf5mbxdZe3hl/OrCCht/8pFoYR9/k+CkKEHejwjyj2qc5rA\njMkG5Rs03uFbS1M8G3eY59mc23IwNrgJSJLlH4O9AIE6DcpePAy0LsuokDXLt66o\noROXfOJViDuSC5PuI1QlqmMC0Ga/JM+OqJX9FRuxAMDqtTitVlAfRowjVK+17kRR\nFJk5stVL4wFE1xAQ6/Q3w/9eT0so2z1U1n6zoCfvye1QWMvn2ak5TBy/L5uSsRzj\niUppJpwXsuzHTjNQfJ2hjSAozoK4ygtEA7NVx4MTgGJOf+9GV8sg/Qk19fR/T3s=\n=t/+g\n-----END PGP SIGNATURE-----\n", "payload": "tree 377c9b9c5734fefbb985bb3a9139c730e110412c\nparent 9dd7ad3ed2313db6afbfbd385cfa87e11b27bf9f\nparent 3b108588d159b4f4600ec226679f5ce64341b82e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589625781 +0200\ncommitter GitHub <noreply@github.com> 1589625781 +0200\n\nRollup merge of #72166 - nnethercote:simpler-slice-Iterator-methods, r=cuviper\n\nSimpler slice `Iterator` methods\n\nThese reduce the amount of LLVM IR generated, helping compile times.\n\nr? @cuviper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f0fb1f1359d042e165b92a9c1053424b77a459", "html_url": "https://github.com/rust-lang/rust/commit/e8f0fb1f1359d042e165b92a9c1053424b77a459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8f0fb1f1359d042e165b92a9c1053424b77a459/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dd7ad3ed2313db6afbfbd385cfa87e11b27bf9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd7ad3ed2313db6afbfbd385cfa87e11b27bf9f", "html_url": "https://github.com/rust-lang/rust/commit/9dd7ad3ed2313db6afbfbd385cfa87e11b27bf9f"}, {"sha": "3b108588d159b4f4600ec226679f5ce64341b82e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b108588d159b4f4600ec226679f5ce64341b82e", "html_url": "https://github.com/rust-lang/rust/commit/3b108588d159b4f4600ec226679f5ce64341b82e"}], "stats": {"total": 124, "additions": 106, "deletions": 18}, "files": [{"sha": "447db405c02805d040ff8ade6918e3e1e883f9ec", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f0fb1f1359d042e165b92a9c1053424b77a459/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f0fb1f1359d042e165b92a9c1053424b77a459/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=e8f0fb1f1359d042e165b92a9c1053424b77a459", "patch": "@@ -333,7 +333,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn nth(&mut self, mut n: usize) -> Option<Self::Item> {\n-        for x in self {\n+        while let Some(x) = self.next() {\n             if n == 0 {\n                 return Some(x);\n             }"}, {"sha": "3386f83ec810fb36035efcbe4b9ab4915c433c1f", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 105, "deletions": 17, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/e8f0fb1f1359d042e165b92a9c1053424b77a459/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f0fb1f1359d042e165b92a9c1053424b77a459/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=e8f0fb1f1359d042e165b92a9c1053424b77a459", "patch": "@@ -3179,6 +3179,7 @@ macro_rules! is_empty {\n         $self.ptr.as_ptr() as *const T == $self.end\n     };\n }\n+\n // To get rid of some bounds checks (see `position`), we compute the length in a somewhat\n // unexpected way. (Tested by `codegen/slice-position-bounds-check`.)\n macro_rules! len {\n@@ -3347,40 +3348,127 @@ macro_rules! iterator {\n                 self.next_back()\n             }\n \n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile.\n+            #[inline]\n+            fn for_each<F>(mut self, mut f: F)\n+            where\n+                Self: Sized,\n+                F: FnMut(Self::Item),\n+            {\n+                while let Some(x) = self.next() {\n+                    f(x);\n+                }\n+            }\n+\n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile.\n+            #[inline]\n+            fn all<F>(&mut self, mut f: F) -> bool\n+            where\n+                Self: Sized,\n+                F: FnMut(Self::Item) -> bool,\n+            {\n+                while let Some(x) = self.next() {\n+                    if !f(x) {\n+                        return false;\n+                    }\n+                }\n+                true\n+            }\n+\n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile.\n+            #[inline]\n+            fn any<F>(&mut self, mut f: F) -> bool\n+            where\n+                Self: Sized,\n+                F: FnMut(Self::Item) -> bool,\n+            {\n+                while let Some(x) = self.next() {\n+                    if f(x) {\n+                        return true;\n+                    }\n+                }\n+                false\n+            }\n+\n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile.\n+            #[inline]\n+            fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>\n+            where\n+                Self: Sized,\n+                P: FnMut(&Self::Item) -> bool,\n+            {\n+                while let Some(x) = self.next() {\n+                    if predicate(&x) {\n+                        return Some(x);\n+                    }\n+                }\n+                None\n+            }\n+\n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile.\n+            #[inline]\n+            fn find_map<B, F>(&mut self, mut f: F) -> Option<B>\n+            where\n+                Self: Sized,\n+                F: FnMut(Self::Item) -> Option<B>,\n+            {\n+                while let Some(x) = self.next() {\n+                    if let Some(y) = f(x) {\n+                        return Some(y);\n+                    }\n+                }\n+                None\n+            }\n+\n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile. Also, the `assume` avoids a bounds check.\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn position<P>(&mut self, mut predicate: P) -> Option<usize> where\n                 Self: Sized,\n                 P: FnMut(Self::Item) -> bool,\n             {\n-                // The addition might panic on overflow.\n                 let n = len!(self);\n-                self.try_fold(0, move |i, x| {\n-                    if predicate(x) { Err(i) }\n-                    else { Ok(i + 1) }\n-                }).err()\n-                    .map(|i| {\n+                let mut i = 0;\n+                while let Some(x) = self.next() {\n+                    if predicate(x) {\n                         unsafe { assume(i < n) };\n-                        i\n-                    })\n+                        return Some(i);\n+                    }\n+                    i += 1;\n+                }\n+                None\n             }\n \n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile. Also, the `assume` avoids a bounds check.\n             #[inline]\n             fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where\n                 P: FnMut(Self::Item) -> bool,\n                 Self: Sized + ExactSizeIterator + DoubleEndedIterator\n             {\n-                // No need for an overflow check here, because `ExactSizeIterator`\n                 let n = len!(self);\n-                self.try_rfold(n, move |i, x| {\n-                    let i = i - 1;\n-                    if predicate(x) { Err(i) }\n-                    else { Ok(i) }\n-                }).err()\n-                    .map(|i| {\n+                let mut i = n;\n+                while let Some(x) = self.next_back() {\n+                    i -= 1;\n+                    if predicate(x) {\n                         unsafe { assume(i < n) };\n-                        i\n-                    })\n+                        return Some(i);\n+                    }\n+                }\n+                None\n             }\n \n             $($extra)*"}]}