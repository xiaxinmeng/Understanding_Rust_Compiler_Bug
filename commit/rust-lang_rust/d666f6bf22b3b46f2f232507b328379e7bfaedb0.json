{"sha": "d666f6bf22b3b46f2f232507b328379e7bfaedb0", "node_id": "C_kwDOAAsO6NoAKGQ2NjZmNmJmMjJiM2I0NmYyZjIzMjUwN2IzMjgzNzllN2JmYWVkYjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-15T16:56:25Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-15T16:56:25Z"}, "message": "fix clippy::{filter_map_identiy, map_identity, manual_flatten}", "tree": {"sha": "e4ed15832a92abc5a74c994621012ad997e73aca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4ed15832a92abc5a74c994621012ad997e73aca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d666f6bf22b3b46f2f232507b328379e7bfaedb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d666f6bf22b3b46f2f232507b328379e7bfaedb0", "html_url": "https://github.com/rust-lang/rust/commit/d666f6bf22b3b46f2f232507b328379e7bfaedb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d666f6bf22b3b46f2f232507b328379e7bfaedb0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "281648698693def16f1985ca85948f5efc7e9e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/281648698693def16f1985ca85948f5efc7e9e3f", "html_url": "https://github.com/rust-lang/rust/commit/281648698693def16f1985ca85948f5efc7e9e3f"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "c3e5f9cb745fcbaba80600d03746e1ed1f972d80", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d666f6bf22b3b46f2f232507b328379e7bfaedb0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d666f6bf22b3b46f2f232507b328379e7bfaedb0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=d666f6bf22b3b46f2f232507b328379e7bfaedb0", "patch": "@@ -164,24 +164,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 {\n                     for param in\n                         [param_to_point_at, fallback_param_to_point_at, self_param_to_point_at]\n+                            .into_iter()\n+                            .flatten()\n                     {\n-                        if let Some(param) = param {\n-                            let refined_expr = self.point_at_field_if_possible(\n-                                def_id,\n-                                param,\n-                                variant_def_id,\n-                                fields,\n-                            );\n-\n-                            match refined_expr {\n-                                None => {}\n-                                Some((refined_expr, _)) => {\n-                                    error.obligation.cause.span = refined_expr\n-                                        .span\n-                                        .find_ancestor_in_same_ctxt(error.obligation.cause.span)\n-                                        .unwrap_or(refined_expr.span);\n-                                    return true;\n-                                }\n+                        let refined_expr =\n+                            self.point_at_field_if_possible(def_id, param, variant_def_id, fields);\n+\n+                        match refined_expr {\n+                            None => {}\n+                            Some((refined_expr, _)) => {\n+                                error.obligation.cause.span = refined_expr\n+                                    .span\n+                                    .find_ancestor_in_same_ctxt(error.obligation.cause.span)\n+                                    .unwrap_or(refined_expr.span);\n+                                return true;\n                             }\n                         }\n                     }"}, {"sha": "769e12f77bf2daeca3565096eb313da00b993798", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d666f6bf22b3b46f2f232507b328379e7bfaedb0/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d666f6bf22b3b46f2f232507b328379e7bfaedb0/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=d666f6bf22b3b46f2f232507b328379e7bfaedb0", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> Partitioner<'tcx> for DefaultPartitioning {\n         }\n \n         PreInliningPartitioning {\n-            codegen_units: codegen_units.into_values().map(|codegen_unit| codegen_unit).collect(),\n+            codegen_units: codegen_units.into_values().collect(),\n             roots,\n             internalization_candidates,\n         }"}, {"sha": "a835bd2de3b1452be89b72e801555b2f47423d64", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d666f6bf22b3b46f2f232507b328379e7bfaedb0/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d666f6bf22b3b46f2f232507b328379e7bfaedb0/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=d666f6bf22b3b46f2f232507b328379e7bfaedb0", "patch": "@@ -1349,7 +1349,7 @@ impl LinkCollector<'_, '_> {\n                         if has_derive_trait_collision {\n                             candidates.macro_ns = None;\n                         }\n-                        candidates.into_iter().filter_map(|res| res).flatten().collect::<Vec<_>>()\n+                        candidates.into_iter().flatten().flatten().collect::<Vec<_>>()\n                     }\n                 }\n             }"}]}