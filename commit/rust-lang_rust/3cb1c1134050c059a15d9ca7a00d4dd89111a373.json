{"sha": "3cb1c1134050c059a15d9ca7a00d4dd89111a373", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYjFjMTEzNDA1MGMwNTlhMTVkOWNhN2EwMGQ0ZGQ4OTExMWEzNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-01T09:20:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-01T09:20:38Z"}, "message": "Auto merge of #86774 - GuillaumeGomez:rollup-rkcgvph, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #86558 (Add suggestions for \"undefined reference\" link errors)\n - #86616 (rustc_span: Explicitly handle crates that differ from package names)\n - #86652 (Add support for leaf function frame pointer elimination)\n - #86666 (Fix misleading \"impl Trait\" error)\n - #86762 (mailmap: Add my work email address)\n - #86773 (Enable the tests developed with #86594)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d3e4dd08a2460c57d2904d3a31c9f327025f2680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3e4dd08a2460c57d2904d3a31c9f327025f2680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cb1c1134050c059a15d9ca7a00d4dd89111a373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb1c1134050c059a15d9ca7a00d4dd89111a373", "html_url": "https://github.com/rust-lang/rust/commit/3cb1c1134050c059a15d9ca7a00d4dd89111a373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cb1c1134050c059a15d9ca7a00d4dd89111a373/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8ac8fdacf66b351c6479b0c8313e3e57e571ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ac8fdacf66b351c6479b0c8313e3e57e571ba4", "html_url": "https://github.com/rust-lang/rust/commit/f8ac8fdacf66b351c6479b0c8313e3e57e571ba4"}, {"sha": "d10af08f7234503d53e079d3b0a980b4d8c7b391", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10af08f7234503d53e079d3b0a980b4d8c7b391", "html_url": "https://github.com/rust-lang/rust/commit/d10af08f7234503d53e079d3b0a980b4d8c7b391"}], "stats": {"total": 293, "additions": 216, "deletions": 77}, "files": [{"sha": "113feb3a8f58ac5e917af776b09c230f3f6767ad", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -290,6 +290,7 @@ Xuefeng Wu <benewu@gmail.com> XuefengWu <benewu@gmail.com>\n York Xiang <bombless@126.com>\n Youngsoo Son <ysson83@gmail.com> <ysoo.son@samsung.com>\n Yuki Okushi <jtitor@2k36.org> <huyuumi.dev@gmail.com>\n+Yuki Okushi <jtitor@2k36.org> <yuki.okushi@huawei.com>\n Zach Pomerantz <zmp@umich.edu>\n Zack Corr <zack@z0w0.me> <zackcorr95@gmail.com>\n Zack Slayton <zack.slayton@gmail.com>"}, {"sha": "56b93f83466805d32302878c4fbfa5923ae71f4f", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::config::OptLevel;\n use rustc_session::Session;\n use rustc_target::spec::abi::Abi;\n-use rustc_target::spec::{SanitizerSet, StackProbeType};\n+use rustc_target::spec::{FramePointer, SanitizerSet, StackProbeType};\n \n use crate::attributes;\n use crate::llvm::AttributePlace::Function;\n@@ -69,15 +69,25 @@ fn naked(val: &'ll Value, is_naked: bool) {\n     Attribute::Naked.toggle_llfn(Function, val, is_naked);\n }\n \n-pub fn set_frame_pointer_elimination(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n-    if cx.sess().must_not_eliminate_frame_pointers() {\n-        llvm::AddFunctionAttrStringValue(\n-            llfn,\n-            llvm::AttributePlace::Function,\n-            cstr!(\"frame-pointer\"),\n-            cstr!(\"all\"),\n-        );\n+pub fn set_frame_pointer_type(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n+    let mut fp = cx.sess().target.frame_pointer;\n+    // \"mcount\" function relies on stack pointer.\n+    // See <https://sourceware.org/binutils/docs/gprof/Implementation.html>.\n+    if cx.sess().instrument_mcount() || matches!(cx.sess().opts.cg.force_frame_pointers, Some(true))\n+    {\n+        fp = FramePointer::Always;\n     }\n+    let attr_value = match fp {\n+        FramePointer::Always => cstr!(\"all\"),\n+        FramePointer::NonLeaf => cstr!(\"non-leaf\"),\n+        FramePointer::MayOmit => return,\n+    };\n+    llvm::AddFunctionAttrStringValue(\n+        llfn,\n+        llvm::AttributePlace::Function,\n+        cstr!(\"frame-pointer\"),\n+        attr_value,\n+    );\n }\n \n /// Tell LLVM what instrument function to insert.\n@@ -254,7 +264,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     }\n \n     // FIXME: none of these three functions interact with source level attributes.\n-    set_frame_pointer_elimination(cx, llfn);\n+    set_frame_pointer_type(cx, llfn);\n     set_instrument_function(cx, llfn);\n     set_probestack(cx, llfn);\n "}, {"sha": "f662887abf82025aff4ed7ef19f100e5cca4a360", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -410,8 +410,8 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         &self.used_statics\n     }\n \n-    fn set_frame_pointer_elimination(&self, llfn: &'ll Value) {\n-        attributes::set_frame_pointer_elimination(self, llfn)\n+    fn set_frame_pointer_type(&self, llfn: &'ll Value) {\n+        attributes::set_frame_pointer_type(self, llfn)\n     }\n \n     fn apply_target_cpu_attr(&self, llfn: &'ll Value) {"}, {"sha": "1fb201eda6bb0478d83dafe9fe35505be11382ea", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -674,7 +674,7 @@ fn gen_fn<'ll, 'tcx>(\n ) -> &'ll Value {\n     let fn_abi = FnAbi::of_fn_ptr(cx, rust_fn_sig, &[]);\n     let llfn = cx.declare_fn(name, &fn_abi);\n-    cx.set_frame_pointer_elimination(llfn);\n+    cx.set_frame_pointer_type(llfn);\n     cx.apply_target_cpu_attr(llfn);\n     // FIXME(eddyb) find a nicer way to do this.\n     unsafe { llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::InternalLinkage) };"}, {"sha": "d47624da79a73f934e68d4cdf6f55cdbbd26c0fb", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -912,14 +912,23 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n             if !prog.status.success() {\n                 let mut output = prog.stderr.clone();\n                 output.extend_from_slice(&prog.stdout);\n-                sess.struct_err(&format!(\n+                let escaped_output = escape_stdout_stderr_string(&output);\n+                let mut err = sess.struct_err(&format!(\n                     \"linking with `{}` failed: {}\",\n                     linker_path.display(),\n                     prog.status\n-                ))\n-                .note(&format!(\"{:?}\", &cmd))\n-                .note(&escape_stdout_stderr_string(&output))\n-                .emit();\n+                ));\n+                err.note(&format!(\"{:?}\", &cmd)).note(&escaped_output);\n+                if escaped_output.contains(\"undefined reference to\") {\n+                    err.help(\n+                        \"some `extern` functions couldn't be found; some native libraries may \\\n+                         need to be installed or have their path specified\",\n+                    );\n+                    err.note(\"use the `-l` flag to specify native libraries to link\");\n+                    err.note(\"use the `cargo:rustc-link-lib` directive to specify the native \\\n+                              libraries to link with Cargo (see https://doc.rust-lang.org/cargo/reference/build-scripts.html#cargorustc-link-libkindname)\");\n+                }\n+                err.emit();\n \n                 // If MSVC's `link.exe` was expected but the return code\n                 // is not a Microsoft LNK error then suggest a way to fix or"}, {"sha": "2e9aae467f8743ed5e0c1e9c4ff1422ddf89b733", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -406,7 +406,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         };\n \n         // `main` should respect same config for frame pointer elimination as rest of code\n-        cx.set_frame_pointer_elimination(llfn);\n+        cx.set_frame_pointer_type(llfn);\n         cx.apply_target_cpu_attr(llfn);\n \n         let llbb = Bx::append_block(&cx, llfn, \"top\");"}, {"sha": "46f2adbe55209aa7aea62dbc7c8e2e13e346cf4b", "filename": "compiler/rustc_codegen_ssa/src/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -16,7 +16,7 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n     fn sess(&self) -> &Session;\n     fn codegen_unit(&self) -> &'tcx CodegenUnit<'tcx>;\n     fn used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n-    fn set_frame_pointer_elimination(&self, llfn: Self::Function);\n+    fn set_frame_pointer_type(&self, llfn: Self::Function);\n     fn apply_target_cpu_attr(&self, llfn: Self::Function);\n     fn create_used_variable(&self);\n     /// Declares the extern \"C\" main function for the entry point. Returns None if the symbol already exists."}, {"sha": "f792e319867792eac94c2dc63501ff2750e6ba98", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -792,18 +792,6 @@ impl Session {\n         !self.target.is_like_windows && !self.target.is_like_osx\n     }\n \n-    pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n-        // \"mcount\" function relies on stack pointer.\n-        // See <https://sourceware.org/binutils/docs/gprof/Implementation.html>.\n-        if self.instrument_mcount() {\n-            true\n-        } else if let Some(x) = self.opts.cg.force_frame_pointers {\n-            x\n-        } else {\n-            !self.target.eliminate_frame_pointer\n-        }\n-    }\n-\n     pub fn must_emit_unwind_tables(&self) -> bool {\n         // This is used to control the emission of the `uwtable` attribute on\n         // LLVM functions."}, {"sha": "4552f14de8b706a98292cba864c44fc2a3115da3", "filename": "compiler/rustc_span/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_span%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_span%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2FCargo.toml?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -17,6 +17,6 @@ scoped-tls = \"1.0\"\n unicode-width = \"0.1.4\"\n cfg-if = \"0.1.2\"\n tracing = \"0.1\"\n-sha-1 = \"0.9\"\n+sha1 = { package = \"sha-1\", version = \"0.9\" }\n sha2 = \"0.9\"\n-md-5 = \"0.9\"\n+md5 = { package = \"md-5\", version = \"0.9\" }"}, {"sha": "bf3ec8f9160b08aac80284106fdf342b9eef2efc", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, SanitizerSet, Target, TargetOptions};\n+use crate::spec::{FramePointer, LinkerFlavor, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n@@ -20,6 +20,10 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: arch.to_string(),\n-        options: TargetOptions { mcount: \"\\u{1}mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            mcount: \"\\u{1}mcount\".to_string(),\n+            frame_pointer: FramePointer::NonLeaf,\n+            ..base\n+        },\n     }\n }"}, {"sha": "9fa8ef69d8131e6be8d71a6cc2876fd496a0c832", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,5 +1,5 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = opts(\"ios\", Arch::Arm64);\n@@ -13,6 +13,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(128),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,\n+            frame_pointer: FramePointer::NonLeaf,\n             // Taken from a clang build on Xcode 11.4.1.\n             // These arguments are not actually invoked - they just have\n             // to look right to pass App Store validation."}, {"sha": "a43eb99a1d73f5d48ca7a150b2b413c6359d74d6", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,5 +1,5 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = opts(\"ios\", Arch::Arm64_macabi);\n@@ -13,6 +13,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(128),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,\n+            frame_pointer: FramePointer::NonLeaf,\n             // Taken from a clang build on Xcode 11.4.1.\n             // These arguments are not actually invoked - they just have\n             // to look right to pass App Store validation."}, {"sha": "586e4043d79def6f46c62d4bd23642701e33c33d", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_sim.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,5 +1,5 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = opts(\"ios\", Arch::Arm64_sim);\n@@ -21,6 +21,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(128),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,\n+            frame_pointer: FramePointer::NonLeaf,\n             // Taken from a clang build on Xcode 11.4.1.\n             // These arguments are not actually invoked - they just have\n             // to look right to pass App Store validation."}, {"sha": "934f33703690f6b85af5a606a36422cece9d91ed", "filename": "compiler/rustc_target/src/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,5 +1,5 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = opts(\"tvos\", Arch::Arm64);\n@@ -13,6 +13,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(128),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,\n+            frame_pointer: FramePointer::NonLeaf,\n             ..base\n         },\n     }"}, {"sha": "0c8a89210ffcdcf32a39d1eec5b6441b5fd77037", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,6 +1,6 @@\n use std::env;\n \n-use crate::spec::{SplitDebuginfo, TargetOptions};\n+use crate::spec::{FramePointer, SplitDebuginfo, TargetOptions};\n \n pub fn opts(os: &str) -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n@@ -27,7 +27,7 @@ pub fn opts(os: &str) -> TargetOptions {\n         families: vec![\"unix\".to_string()],\n         is_like_osx: true,\n         dwarf_version: Some(2),\n-        eliminate_frame_pointer: false,\n+        frame_pointer: FramePointer::Always,\n         has_rpath: true,\n         dll_suffix: \".dylib\".to_string(),\n         archive_format: \"darwin\".to_string(),"}, {"sha": "998d6ffe0fc668652b9a2d65ac07d93df7aba1a0", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n+use crate::spec::{FramePointer, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n@@ -8,7 +8,7 @@ pub fn opts() -> TargetOptions {\n         families: vec![\"unix\".to_string()],\n         has_rpath: true,\n         position_independent_executables: true,\n-        eliminate_frame_pointer: false, // FIXME 43575\n+        frame_pointer: FramePointer::Always, // FIXME 43575: should be MayOmit...\n         relro_level: RelroLevel::Full,\n         abi_return_struct_as_int: true,\n         dwarf_version: Some(2),"}, {"sha": "f2635f0656d7a738445df4d41d1dda6302f935ed", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{FramePointer, LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n@@ -8,7 +8,7 @@ pub fn target() -> Target {\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n-    base.eliminate_frame_pointer = false;\n+    base.frame_pointer = FramePointer::Always;\n \n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work"}, {"sha": "92c3a1554ac544286cfe96d423ee023b8dd1e5e4", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target};\n+use crate::spec::{FramePointer, LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.pre_link_args\n         .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".to_string(), \"i386pe\".to_string()]);\n     base.max_atomic_width = Some(64);\n-    base.eliminate_frame_pointer = false; // Required for backtraces\n+    base.frame_pointer = FramePointer::Always; // Required for backtraces\n     base.linker = Some(\"i686-w64-mingw32-gcc\".to_string());\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address"}, {"sha": "d95cb6a82d558014b7fe66c66a4743747e4a27ed", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{FramePointer, LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -21,7 +21,7 @@ pub fn target() -> Target {\n     //\n     // This may or may not be related to this bug:\n     // https://llvm.org/bugs/show_bug.cgi?id=30879\n-    base.eliminate_frame_pointer = false;\n+    base.frame_pointer = FramePointer::Always;\n \n     Target {\n         llvm_target: \"i686-unknown-linux-musl\".to_string(),"}, {"sha": "27a0ac585e3919d052447ae396e032537458af75", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target};\n+use crate::spec::{FramePointer, LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.pre_link_args\n         .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".to_string(), \"i386pe\".to_string()]);\n     base.max_atomic_width = Some(64);\n-    base.eliminate_frame_pointer = false; // Required for backtraces\n+    base.frame_pointer = FramePointer::Always; // Required for backtraces\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64."}, {"sha": "f598f0f38f305c866948831697fcaa2a01cccb12", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use crate::spec::{FramePointer, LinkArgs, LinkerFlavor, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -35,7 +35,7 @@ pub fn opts() -> TargetOptions {\n         is_like_solaris: true,\n         linker_is_gnu: false,\n         limit_rdylib_exports: false, // Linker doesn't support this\n-        eliminate_frame_pointer: false,\n+        frame_pointer: FramePointer::Always,\n         eh_frame_header: false,\n         late_link_args,\n "}, {"sha": "a332e3b847a2931af37b42fdb7da436a02157b7f", "filename": "compiler/rustc_target/src/spec/linux_kernel_base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{PanicStrategy, RelocModel, RelroLevel, StackProbeType, TargetOptions};\n+use crate::spec::TargetOptions;\n+use crate::spec::{FramePointer, PanicStrategy, RelocModel, RelroLevel, StackProbeType};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n@@ -7,7 +8,7 @@ pub fn opts() -> TargetOptions {\n         panic_strategy: PanicStrategy::Abort,\n         // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n         stack_probes: StackProbeType::Call,\n-        eliminate_frame_pointer: false,\n+        frame_pointer: FramePointer::Always,\n         position_independent_executables: true,\n         needs_plt: true,\n         relro_level: RelroLevel::Full,"}, {"sha": "cfdae9623f34a7768a8960099377f11d6fc63e39", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -671,6 +671,42 @@ impl ToJson for SanitizerSet {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum FramePointer {\n+    /// Forces the machine code generator to always preserve the frame pointers.\n+    Always,\n+    /// Forces the machine code generator to preserve the frame pointers except for the leaf\n+    /// functions (i.e. those that don't call other functions).\n+    NonLeaf,\n+    /// Allows the machine code generator to omit the frame pointers.\n+    ///\n+    /// This option does not guarantee that the frame pointers will be omitted.\n+    MayOmit,\n+}\n+\n+impl FromStr for FramePointer {\n+    type Err = ();\n+    fn from_str(s: &str) -> Result<Self, ()> {\n+        Ok(match s {\n+            \"always\" => Self::Always,\n+            \"non-leaf\" => Self::NonLeaf,\n+            \"may-omit\" => Self::MayOmit,\n+            _ => return Err(()),\n+        })\n+    }\n+}\n+\n+impl ToJson for FramePointer {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            Self::Always => \"always\",\n+            Self::NonLeaf => \"non-leaf\",\n+            Self::MayOmit => \"may-omit\",\n+        }\n+        .to_json()\n+    }\n+}\n+\n macro_rules! supported_targets {\n     ( $(($( $triple:literal, )+ $module:ident ),)+ ) => {\n         $(mod $module;)+\n@@ -1068,8 +1104,8 @@ pub struct TargetOptions {\n     pub tls_model: TlsModel,\n     /// Do not emit code that uses the \"red zone\", if the ABI has one. Defaults to false.\n     pub disable_redzone: bool,\n-    /// Eliminate frame pointers from stack frames if possible. Defaults to true.\n-    pub eliminate_frame_pointer: bool,\n+    /// Frame pointer mode for this target. Defaults to `MayOmit`.\n+    pub frame_pointer: FramePointer,\n     /// Emit each function in its own section. Defaults to true.\n     pub function_sections: bool,\n     /// String to prepend to the name of every dynamic library. Defaults to \"lib\".\n@@ -1330,7 +1366,7 @@ impl Default for TargetOptions {\n             code_model: None,\n             tls_model: TlsModel::GeneralDynamic,\n             disable_redzone: false,\n-            eliminate_frame_pointer: true,\n+            frame_pointer: FramePointer::MayOmit,\n             function_sections: true,\n             dll_prefix: \"lib\".to_string(),\n             dll_suffix: \".so\".to_string(),\n@@ -1833,6 +1869,16 @@ impl Target {\n             }\n         }\n \n+        if let Some(fp) = obj.remove_key(\"frame-pointer\") {\n+            if let Some(s) = Json::as_string(&fp) {\n+                base.frame_pointer = s\n+                    .parse()\n+                    .map_err(|()| format!(\"'{}' is not a valid value for frame-pointer\", s))?;\n+            } else {\n+                incorrect_type.push(\"frame-pointer\".to_string())\n+            }\n+        }\n+\n         key!(is_builtin, bool);\n         key!(c_int_width = \"target-c-int-width\");\n         key!(os);\n@@ -1864,7 +1910,6 @@ impl Target {\n         key!(code_model, CodeModel)?;\n         key!(tls_model, TlsModel)?;\n         key!(disable_redzone, bool);\n-        key!(eliminate_frame_pointer, bool);\n         key!(function_sections, bool);\n         key!(dll_prefix);\n         key!(dll_suffix);\n@@ -2128,7 +2173,7 @@ impl ToJson for Target {\n         target_option_val!(code_model);\n         target_option_val!(tls_model);\n         target_option_val!(disable_redzone);\n-        target_option_val!(eliminate_frame_pointer);\n+        target_option_val!(frame_pointer);\n         target_option_val!(function_sections);\n         target_option_val!(dll_prefix);\n         target_option_val!(dll_suffix);"}, {"sha": "70e9e4aed92495605b2bf338b69a35099b43176e", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n+use crate::spec::{FramePointer, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n@@ -9,7 +9,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         abi_return_struct_as_int: true,\n         position_independent_executables: true,\n-        eliminate_frame_pointer: false, // FIXME 43575\n+        frame_pointer: FramePointer::Always, // FIXME 43575: should be MayOmit...\n         relro_level: RelroLevel::Full,\n         dwarf_version: Some(2),\n         ..Default::default()"}, {"sha": "fbe4dd5b501801250031909865b2d6dd86b36f96", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -27,7 +27,8 @@\n // differentiate these targets from our other `arm(v7)-*-*-gnueabi(hf)` targets in the context of\n // build scripts / gcc flags.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n+use crate::spec::TargetOptions;\n+use crate::spec::{FramePointer, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n \n pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults\n@@ -52,7 +53,7 @@ pub fn opts() -> TargetOptions {\n         emit_debug_gdb_scripts: false,\n         // LLVM is eager to trash the link register when calling `noreturn` functions, which\n         // breaks debugging. Preserve LR by default to prevent that from happening.\n-        eliminate_frame_pointer: false,\n+        frame_pointer: FramePointer::Always,\n         ..Default::default()\n     }\n }"}, {"sha": "60fd42970c7d6c908ee152473841654081a9bf6d", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,10 +1,11 @@\n-use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target, TargetOptions};\n+use crate::spec::TargetOptions;\n+use crate::spec::{FramePointer, LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n     base.cpu = \"core2\".to_string();\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n-    base.eliminate_frame_pointer = false;\n+    base.frame_pointer = FramePointer::Always;\n     base.pre_link_args.insert(\n         LinkerFlavor::Gcc,\n         vec![\"-m64\".to_string(), \"-arch\".to_string(), \"x86_64\".to_string()],"}, {"sha": "afa4d0f1c4de9067948fe5219c5e040df6f907a2", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1481,6 +1481,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     expected,\n                     found,\n                     can_suggest,\n+                    fcx.tcx.hir().get_parent_item(id),\n                 );\n             }\n             if !pointing_at_return_type {"}, {"sha": "54aab271fdb3c767e1d68c833088e33e2be24713", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -52,9 +52,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n-            pointing_at_return_type =\n-                self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n             let fn_id = self.tcx.hir().get_return_block(blk_id).unwrap();\n+            pointing_at_return_type = self.suggest_missing_return_type(\n+                err,\n+                &fn_decl,\n+                expected,\n+                found,\n+                can_suggest,\n+                fn_id,\n+            );\n             self.suggest_missing_break_or_return_expr(\n                 err, expr, &fn_decl, expected, found, blk_id, fn_id,\n             );\n@@ -433,6 +439,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         can_suggest: bool,\n+        fn_id: hir::HirId,\n     ) -> bool {\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n@@ -465,7 +472,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n                 debug!(\"suggest_missing_return_type: return type {:?}\", ty);\n                 debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n-                if ty.kind() == expected.kind() {\n+                let bound_vars = self.tcx.late_bound_vars(fn_id);\n+                let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n+                let ty = self.normalize_associated_types_in(sp, ty);\n+                if self.can_coerce(expected, ty) {\n                     err.span_label(sp, format!(\"expected `{}` because of return type\", expected));\n                     return true;\n                 }"}, {"sha": "6dcf0bdcba43f3cca7082051a9f76f296fe8957f", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -72,7 +72,7 @@ ENV PATH=\"/node-v14.4.0-linux-x64/bin:${PATH}\"\n # https://github.com/puppeteer/puppeteer/issues/375\n #\n # We also specify the version in case we need to update it to go around cache limitations.\n-RUN npm install -g browser-ui-test@0.4.0 --unsafe-perm=true\n+RUN npm install -g browser-ui-test@0.4.1 --unsafe-perm=true\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\"}, {"sha": "367591dcb9617843bee42b6884a9507254e0e32c", "filename": "src/test/codegen/frame-pointer.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Fcodegen%2Fframe-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Fcodegen%2Fframe-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fframe-pointer.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -0,0 +1,35 @@\n+// compile-flags: --crate-type=rlib\n+// revisions: aarch64-apple aarch64-linux force x64-apple x64-linux\n+// [aarch64-apple] needs-llvm-components: aarch64\n+// [aarch64-apple] compile-flags: --target=aarch64-apple-darwin\n+// [aarch64-linux] needs-llvm-components: aarch64\n+// [aarch64-linux] compile-flags: --target=aarch64-unknown-linux-gnu\n+// [force] needs-llvm-components: x86\n+// [force] compile-flags: --target=x86_64-unknown-linux-gnu -Cforce-frame-pointers=yes\n+// [x64-apple] needs-llvm-components: x86\n+// [x64-apple] compile-flags: --target=x86_64-apple-darwin\n+// [x64-linux] needs-llvm-components: x86\n+// [x64-linux] compile-flags: --target=x86_64-unknown-linux-gnu\n+\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+\n+\n+// CHECK: define i32 @peach{{.*}}[[PEACH_ATTRS:\\#[0-9]+]] {\n+#[no_mangle]\n+pub fn peach(x: u32) -> u32 {\n+    x\n+}\n+\n+// CHECK: attributes [[PEACH_ATTRS]] = {\n+// x64-linux-NOT: {{.*}}\"frame-pointer\"{{.*}}\n+// aarch64-linux-NOT: {{.*}}\"frame-pointer\"{{.*}}\n+// x64-apple-SAME: {{.*}}\"frame-pointer\"=\"all\"\n+// force-SAME: {{.*}}\"frame-pointer\"=\"all\"\n+// aarch64-apple-SAME: {{.*}}\"frame-pointer\"=\"non-leaf\"\n+// CHECK-SAME: }"}, {"sha": "4fef4e655fdfb94e2d20c70217896dcdeefc161e", "filename": "src/test/rustdoc-gui/label-next-to-symbol.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -13,24 +13,24 @@ assert-css: (\".item-table .item-left .stab.portability\", { \"background-color\": \"\n \n // table like view\n assert-css: (\".item-right.docblock-short\", { \"padding-left\": \"0px\" })\n-// Requires new function: https://github.com/GuillaumeGomez/browser-UI-test/pull/202\n-//compare-elements-position-near: (\"//*[@class='item-left module-item']//a[text()='replaced_function']\", \".item-left .stab.deprecated\", (\"y\"))\n+compare-elements-position-near: (\"//*[@class='item-left module-item']//a[text()='replaced_function']\", \".item-left .stab.deprecated\", {\"y\": 2})\n compare-elements-position: (\".item-left .stab.deprecated\", \".item-left .stab.portability\", (\"y\"))\n \n // Ensure no wrap\n-//compare-elements-position: (\"//*[@class='item-left module-item']//a[text()='replaced_function']\", \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\", (\"y\"))\n+compare-elements-position-near: (\"//*[@class='item-left module-item']//a[text()='replaced_function']\", \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\", {\"y\": 2})\n+// compare parent elements\n compare-elements-position: (\"//*[@class='item-left module-item']//a[text()='replaced_function']/..\", \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']/..\", (\"y\"))\n \n \n // Mobile view\n size: (600, 600)\n // staggered layout with 2em spacing\n assert-css: (\".item-right.docblock-short\", { \"padding-left\": \"32px\" })\n-// Requires new function: https://github.com/GuillaumeGomez/browser-UI-test/pull/202\n-//compare-elements-position-near: (\"//*[@class='item-left module-item']//a[text()='replaced_function']\", \".item-left .stab.deprecated\", (\"y\"))\n+compare-elements-position-near: (\"//*[@class='item-left module-item']//a[text()='replaced_function']\", \".item-left .stab.deprecated\", {\"y\": 1})\n compare-elements-position: (\".item-left .stab.deprecated\", \".item-left .stab.portability\", (\"y\"))\n \n // Ensure wrap\n-compare-elements-position-false: (\"//*[@class='item-left module-item']//a[text()='replaced_function']\", \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\", (\"y\"))\n+compare-elements-position-near-false: (\"//*[@class='item-left module-item']//a[text()='replaced_function']\", \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\", {\"y\": 12})\n+// compare parent elements\n compare-elements-position-false: (\"//*[@class='item-left module-item']//a[text()='replaced_function']/..\", \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']/..\", (\"y\"))\n compare-elements-position-false: (\".item-left .stab.deprecated\", \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\", (\"y\"))"}, {"sha": "f69629232aed1123ac691d08159fea475431edd0", "filename": "src/test/ui/extern/extern-types-distinct-types.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -6,6 +6,8 @@ LL |     type A;\n LL |     type B;\n    |     ------- the expected foreign type\n ...\n+LL | fn foo(r: &A) -> &B {\n+   |                  -- expected `&B` because of return type\n LL |     r\n    |     ^ expected extern type `B`, found extern type `A`\n    |"}, {"sha": "798ce1199a9dc24ac41b70f26fc13f00c5f85b43", "filename": "src/test/ui/retslot-cast.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Fui%2Fretslot-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Fui%2Fretslot-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fretslot-cast.stderr?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/retslot-cast.rs:13:5\n    |\n+LL |             -> Option<&Iterator<Item=()>> {\n+   |                -------------------------- expected `Option<&dyn Iterator<Item = ()>>` because of return type\n+...\n LL |     inner(x)\n    |     ^^^^^^^^ expected trait `Iterator<Item = ()>`, found trait `Iterator<Item = ()> + Send`\n    |"}, {"sha": "7b444df85282af77ebe9641e65cdc0d8e95fecc8", "filename": "src/test/ui/typeck/issue-84160.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -0,0 +1,9 @@\n+fn mismatched_types_with_reference(x: &u32) -> &u32 {\n+    if false {\n+        return x;\n+    }\n+    return \"test\";\n+    //~^ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "24c188b3fcb70292970b746488577b841c1cd2ad", "filename": "src/test/ui/typeck/issue-84160.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.stderr?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-84160.rs:5:12\n+   |\n+LL | fn mismatched_types_with_reference(x: &u32) -> &u32 {\n+   |                                                ---- expected `&u32` because of return type\n+...\n+LL |     return \"test\";\n+   |            ^^^^^^ expected `u32`, found `str`\n+   |\n+   = note: expected reference `&u32`\n+              found reference `&'static str`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}