{"sha": "0c34f5aba8544e2319c1587ac067c188a2d97877", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMzRmNWFiYTg1NDRlMjMxOWMxNTg3YWMwNjdjMTg4YTJkOTc4Nzc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-02T17:16:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-02T17:17:39Z"}, "message": "Refactor the build system", "tree": {"sha": "14fc10d3b55a96536a777af24f5e36f8c37ddd21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14fc10d3b55a96536a777af24f5e36f8c37ddd21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c34f5aba8544e2319c1587ac067c188a2d97877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c34f5aba8544e2319c1587ac067c188a2d97877", "html_url": "https://github.com/rust-lang/rust/commit/0c34f5aba8544e2319c1587ac067c188a2d97877", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c34f5aba8544e2319c1587ac067c188a2d97877/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9410b5820a6a54dc0d13138173bf6a67387146b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9410b5820a6a54dc0d13138173bf6a67387146b2", "html_url": "https://github.com/rust-lang/rust/commit/9410b5820a6a54dc0d13138173bf6a67387146b2"}], "stats": {"total": 239, "additions": 145, "deletions": 94}, "files": [{"sha": "18196bce0094597d583e6e4420c32e0d85022f73", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -6,7 +6,7 @@ perf.data\n perf.data.old\n *.events\n *.string*\n-/build_sysroot/sysroot\n+/build\n /build_sysroot/sysroot_src\n /rust\n /rand"}, {"sha": "151334877a0b11d8743ff175cd17ace730a2ba2b", "filename": "Readme.md", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -2,48 +2,51 @@\n \n > \u26a0\u26a0\u26a0 Certain kinds of FFI don't work yet. \u26a0\u26a0\u26a0\n \n-The goal of this project is to create an alternative codegen backend for the rust compiler based on [Cranelift](https://github.com/bytecodealliance/wasmtime/blob/master/cranelift). This has the potential to improve compilation times in debug mode. If your project doesn't use any of the things listed under \"Not yet supported\", it should work fine. If not please open an issue.\n+The goal of this project is to create an alternative codegen backend for the rust compiler based on [Cranelift](https://github.com/bytecodealliance/wasmtime/blob/master/cranelift).\n+This has the potential to improve compilation times in debug mode.\n+If your project doesn't use any of the things listed under \"Not yet supported\", it should work fine.\n+If not please open an issue.\n \n ## Building and testing\n \n ```bash\n $ git clone https://github.com/bjorn3/rustc_codegen_cranelift.git\n $ cd rustc_codegen_cranelift\n $ ./prepare.sh # download and patch sysroot src and install hyperfine for benchmarking\n-$ ./test.sh --release\n+$ ./build.sh\n ```\n \n-If you want to only build but not test you should replace the last command with:\n+To run the test suite replace the last command with:\n \n ```bash\n-$ cargo build --release\n-$ ./build_sysroot/build_sysroot.sh\n+$ ./test.sh\n ```\n \n+This will implicitly build cg_clif too. Both `build.sh` and `test.sh` accept a `--debug` argument to\n+build in debug mode.\n+\n ## Usage\n \n rustc_codegen_cranelift can be used as a near-drop-in replacement for `cargo build` or `cargo run` for existing projects.\n \n-Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`prepare.sh` and `test.sh`).\n+Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`prepare.sh` and `build.sh` or `test.sh`).\n \n ### Cargo\n \n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/cargo.sh run\n+$ $cg_clif_dir/build/cargo.sh run\n ```\n \n This should build and run your project with rustc_codegen_cranelift instead of the usual LLVM backend.\n \n-If you compiled cg_clif in debug mode (aka you didn't pass `--release` to `./test.sh`) you should set `CHANNEL=\"debug\"`.\n-\n ### Rustc\n \n > You should prefer using the Cargo method.\n \n ```bash\n-$ $cg_clif_dir/target/release/cg_clif my_crate.rs\n+$ $cg_clif_dir/build/cg_clif my_crate.rs\n ```\n \n ### Jit mode\n@@ -54,13 +57,13 @@ In jit mode cg_clif will immediately execute your code without creating an execu\n > The jit mode will probably need cargo integration to make this possible.\n \n ```bash\n-$ $cg_clif_dir/cargo.sh jit\n+$ $cg_clif_dir/build/cargo.sh jit\n ```\n \n or\n \n ```bash\n-$ $cg_clif_dir/target/release/cg_clif --jit my_crate.rs\n+$ $cg_clif_dir/build/cg_clif --jit my_crate.rs\n ```\n \n ### Shell\n@@ -69,7 +72,7 @@ These are a few functions that allow you to easily run rust code from the shell\n \n ```bash\n function jit_naked() {\n-    echo \"$@\" | $cg_clif_dir/target/release/cg_clif - --jit\n+    echo \"$@\" | $cg_clif_dir/build/cg_clif - --jit\n }\n \n function jit() {"}, {"sha": "f9a87e68a046a7f7c7960f5a1ee0858685886e17", "filename": "build.sh", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -0,0 +1,47 @@\n+#!/bin/bash\n+set -e\n+\n+# Settings\n+export CHANNEL=\"release\"\n+build_sysroot=1\n+target_dir='build'\n+while [[ $# != 0 ]]; do\n+    case $1 in\n+        \"--debug\")\n+            export CHANNEL=\"debug\"\n+            ;;\n+        \"--without-sysroot\")\n+            build_sysroot=0\n+            ;;\n+        \"--target-dir\")\n+            target_dir=$2\n+            shift\n+            ;;\n+        *)\n+            echo \"Unknown flag '$1'\"\n+            echo \"Usage: ./build.sh [--debug] [--without-sysroot] [--target-dir DIR]\"\n+            ;;\n+    esac\n+    shift\n+done\n+\n+# Build cg_clif\n+export RUSTFLAGS=\"-Zrun_dsymutil=no\"\n+if [[ \"$CHANNEL\" == \"release\" ]]; then\n+    cargo build --release\n+else\n+    cargo build\n+fi\n+\n+rm -rf $target_dir\n+mkdir $target_dir\n+cp -a target/$CHANNEL/cg_clif{,_build_sysroot} target/$CHANNEL/*rustc_codegen_cranelift* $target_dir/\n+cp -a rust-toolchain scripts/config.sh scripts/cargo.sh $target_dir\n+\n+if [[ \"$build_sysroot\" == \"1\" ]]; then\n+    echo \"[BUILD] sysroot\"\n+    export CG_CLIF_INCR_CACHE_DISABLED=1\n+    dir=$(pwd)\n+    cd $target_dir\n+    time $dir/build_sysroot/build_sysroot.sh\n+fi"}, {"sha": "1d87562a6a4193661b61c01b3a21aefd56542b48", "filename": "build_sysroot/build_sysroot.sh", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/build_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/build_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fbuild_sysroot.sh?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -3,28 +3,24 @@\n # Requires the CHANNEL env var to be set to `debug` or `release.`\n \n set -e\n-cd $(dirname \"$0\")\n \n-if [ -z $CHANNEL ]; then\n-export CHANNEL='release'\n-fi\n+source ./config.sh\n \n-pushd ../ >/dev/null\n-source ./scripts/config.sh\n-popd >/dev/null\n+dir=$(pwd)\n \n-# We expect the target dir in the default location. Guard against the user changing it.\n-export CARGO_TARGET_DIR=target\n+# Use rustc with cg_clif as hotpluggable backend instead of the custom cg_clif driver so that\n+# build scripts are still compiled using cg_llvm.\n+export RUSTC=$dir\"/cg_clif_build_sysroot\"\n+export RUSTFLAGS=$RUSTFLAGS\" --clif\"\n+\n+cd $(dirname \"$0\")\n \n # Cleanup for previous run\n #     v Clean target dir except for build scripts and incremental cache\n-rm -r target/*/{debug,release}/{build,deps,examples,libsysroot*,native} 2>/dev/null || true\n-rm -r sysroot/ 2>/dev/null || true\n+#rm -r target/*/{debug,release}/{build,deps,examples,libsysroot*,native} 2>/dev/null || true\n \n-# Use rustc with cg_clif as hotpluggable backend instead of the custom cg_clif driver so that\n-# build scripts are still compiled using cg_llvm.\n-export RUSTC=$(pwd)/../\"target/\"$CHANNEL\"/cg_clif_build_sysroot\"\n-export RUSTFLAGS=$RUSTFLAGS\" --clif\"\n+# We expect the target dir in the default location. Guard against the user changing it.\n+export CARGO_TARGET_DIR=target\n \n # Build libs\n export RUSTFLAGS=\"$RUSTFLAGS -Zforce-unstable-if-unmarked -Cpanic=abort\"\n@@ -39,5 +35,5 @@ else\n fi\n \n # Copy files to sysroot\n-mkdir -p sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n-cp -r target/$TARGET_TRIPLE/$sysroot_channel/deps/* sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n+mkdir -p $dir/sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n+cp -a target/$TARGET_TRIPLE/$sysroot_channel/deps/* $dir/sysroot/lib/rustlib/$TARGET_TRIPLE/lib/"}, {"sha": "d0fb09ce745d4daf860ed9d70d223880d46dc587", "filename": "build_sysroot/prepare_sysroot_src.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/build_sysroot%2Fprepare_sysroot_src.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/build_sysroot%2Fprepare_sysroot_src.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fprepare_sysroot_src.sh?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -12,7 +12,7 @@ fi\n \n rm -rf $DST_DIR\n mkdir -p $DST_DIR/library\n-cp -r $SRC_DIR/library $DST_DIR/\n+cp -a $SRC_DIR/library $DST_DIR/\n \n pushd $DST_DIR\n echo \"[GIT] init\""}, {"sha": "5a69c862d016d616d967d413d42b598cea2d934f", "filename": "clean_all.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/clean_all.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/clean_all.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clean_all.sh?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -1,5 +1,5 @@\n #!/bin/bash --verbose\n set -e\n \n-rm -rf target/ build_sysroot/{sysroot/,sysroot_src/,target/} perf.data{,.old}\n+rm -rf target/ build/ build_sysroot/{sysroot_src/,target/} perf.data{,.old}\n rm -rf rand/ regex/ simple-raytracer/"}, {"sha": "e63daa40f354099a4b3fdbe3612f73dfb7b8ac70", "filename": "scripts/cargo.sh", "status": "renamed", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/scripts%2Fcargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/scripts%2Fcargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo.sh?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -1,19 +1,13 @@\n #!/bin/bash\n \n-if [ -z $CHANNEL ]; then\n-export CHANNEL='release'\n-fi\n-\n-pushd $(dirname \"$0\") >/dev/null\n-source scripts/config.sh\n+dir=$(dirname \"$0\")\n+source $dir/config.sh\n \n # read nightly compiler from rust-toolchain file\n-TOOLCHAIN=$(cat rust-toolchain)\n-\n-popd >/dev/null\n+TOOLCHAIN=$(cat $dir/rust-toolchain)\n \n cmd=$1\n-shift\n+shift || true\n \n if [[ \"$cmd\" = \"jit\" ]]; then\n cargo +${TOOLCHAIN} rustc $@ -- --jit", "previous_filename": "cargo.sh"}, {"sha": "af181f4f724395dab2f756b25ef948ecbeb6a0fb", "filename": "scripts/config.sh", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/scripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/scripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fconfig.sh?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -39,18 +39,19 @@ echo\n export RUSTC_WRAPPER=\n fi\n \n-export RUSTC=$(pwd)/\"target/\"$CHANNEL\"/cg_clif\"\n+dir=$(cd $(dirname \"$BASH_SOURCE\"); pwd)\n+\n+export RUSTC=$dir\"/cg_clif\"\n export RUSTFLAGS=$linker\n export RUSTDOCFLAGS=$linker' -Ztrim-diagnostic-paths=no -Cpanic=abort -Zpanic-abort-tests '\\\n-'-Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot'\n+'-Zcodegen-backend='$dir'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$dir'/sysroot'\n \n # FIXME remove once the atomic shim is gone\n if [[ `uname` == 'Darwin' ]]; then\n    export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n fi\n \n-export LD_LIBRARY_PATH=\"$(pwd)/target/out:$(pwd)/build_sysroot/sysroot/lib/rustlib/\"$TARGET_TRIPLE\"/lib:\\\n-$(pwd)/target/\"$CHANNEL\":$(rustc --print sysroot)/lib\"\n+export LD_LIBRARY_PATH=\"$dir:$(rustc --print sysroot)/lib:$dir/target/out:$dir/sysroot/lib/rustlib/\"$TARGET_TRIPLE\"/lib\"\n export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH\n \n export CG_CLIF_DISPLAY_CG_TIME=1"}, {"sha": "3327c10089d9b0847fe9fbdccf12c03f91aab412", "filename": "scripts/filter_profile.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/scripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/scripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ffilter_profile.rs?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -1,9 +1,8 @@\n #!/bin/bash\n #![forbid(unsafe_code)]/* This line is ignored by bash\n # This block is ignored by rustc\n-CHANNEL=\"release\"\n pushd $(dirname \"$0\")/../\n-source scripts/config.sh\n+source build/config.sh\n popd\n PROFILE=$1 OUTPUT=$2 exec $RUSTC $RUSTFLAGS --jit $0\n #*/"}, {"sha": "541b3c6563bab74816241c2f94d33ec5fb164684", "filename": "scripts/rustup.sh", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/scripts%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/scripts%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustup.sh?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -26,6 +26,15 @@ case $1 in\n         git add rust-toolchain build_sysroot/Cargo.lock\n         git commit -m \"Rustup to $(rustc -V)\"\n         ;;\n+    \"push\")\n+\tcg_clif=$(pwd)\n+\tpushd ../rust\n+\tbranch=update_cg_clif-$(date +%Y-%m-%d)\n+\tgit checkout -b $branch\n+\tgit subtree pull --prefix=compiler/rustc_codegen_cranelift/ https://github.com/bjorn3/rustc_codegen_cranelift.git master\n+\tgit push -u my $branch\n+\tpopd\n+\t;;\n     *)\n         echo \"Unknown command '$1'\"\n         echo \"Usage: ./rustup.sh prepare|commit\""}, {"sha": "d941b73c81bcc01a4796a69ea0fff796e9a5e337", "filename": "scripts/tests.sh", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -1,65 +1,71 @@\n-function no_sysroot_tests() {\n-    RUSTC=$RUSTC\" \"$RUSTFLAGS\" -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n+#!/bin/bash\n+\n+set -e\n+\n+source build/config.sh\n+export CG_CLIF_INCR_CACHE_DISABLED=1\n+MY_RUSTC=$RUSTC\" \"$RUSTFLAGS\" -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n \n+function no_sysroot_tests() {\n     echo \"[BUILD] mini_core\"\n-    $RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target $TARGET_TRIPLE\n+    $MY_RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target $TARGET_TRIPLE\n \n     echo \"[BUILD] example\"\n-    $RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n+    $MY_RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n \n     if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n         echo \"[JIT] mini_core_hello_world\"\n-        CG_CLIF_JIT_ARGS=\"abc bcd\" $RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n+        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n     else\n         echo \"[JIT] mini_core_hello_world (skipped)\"\n     fi\n \n     echo \"[AOT] mini_core_hello_world\"\n-    $RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target $TARGET_TRIPLE\n+    $MY_RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target $TARGET_TRIPLE\n     $RUN_WRAPPER ./target/out/mini_core_hello_world abc bcd\n     # (echo \"break set -n main\"; echo \"run\"; sleep 1; echo \"si -c 10\"; sleep 1; echo \"frame variable\") | lldb -- ./target/out/mini_core_hello_world abc bcd\n \n     echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n-    $RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target $TARGET_TRIPLE\n     $RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n }\n \n function base_sysroot_tests() {\n     echo \"[AOT] alloc_example\"\n-    $RUSTC example/alloc_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/alloc_example.rs --crate-type bin --target $TARGET_TRIPLE\n     $RUN_WRAPPER ./target/out/alloc_example\n \n     if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n         echo \"[JIT] std_example\"\n-        $RUSTC --jit example/std_example.rs --target $HOST_TRIPLE\n+        $MY_RUSTC --jit example/std_example.rs --target $HOST_TRIPLE\n     else\n         echo \"[JIT] std_example (skipped)\"\n     fi\n \n     echo \"[AOT] dst_field_align\"\n     # FIXME Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed.\n-    $RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target $TARGET_TRIPLE\n     $RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n \n     echo \"[AOT] std_example\"\n-    $RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n     $RUN_WRAPPER ./target/out/std_example arg\n \n     echo \"[AOT] subslice-patterns-const-eval\"\n-    $RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $MY_RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n     $RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n \n     echo \"[AOT] track-caller-attribute\"\n-    $RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $MY_RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n     $RUN_WRAPPER ./target/out/track-caller-attribute\n \n     echo \"[AOT] mod_bench\"\n-    $RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n     $RUN_WRAPPER ./target/out/mod_bench\n \n     pushd rand\n     rm -r ./target || true\n-    ../cargo.sh test --workspace\n+    ../build/cargo.sh test --workspace\n     popd\n }\n \n@@ -69,7 +75,7 @@ function extended_sysroot_tests() {\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n         hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"cargo clean\" \\\n         \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n-        \"../cargo.sh build\"\n+        \"../build/cargo.sh build\"\n \n         echo \"[BENCH RUN] ebobby/simple-raytracer\"\n         cp ./target/debug/main ./raytracer_cg_clif\n@@ -85,18 +91,33 @@ function extended_sysroot_tests() {\n     pushd build_sysroot/sysroot_src/library/core/tests\n     echo \"[TEST] libcore\"\n     rm -r ./target || true\n-    ../../../../../cargo.sh test\n+    ../../../../../build/cargo.sh test\n     popd\n \n     pushd regex\n     echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n-    ../cargo.sh clean\n+    ../build/cargo.sh clean\n     # Make sure `[codegen mono items] start` doesn't poison the diff\n-    ../cargo.sh build --example shootout-regex-dna\n-    cat examples/regexdna-input.txt | ../cargo.sh run --example shootout-regex-dna | grep -v \"Spawned thread\" > res.txt\n+    ../build/cargo.sh build --example shootout-regex-dna\n+    cat examples/regexdna-input.txt | ../build/cargo.sh run --example shootout-regex-dna | grep -v \"Spawned thread\" > res.txt\n     diff -u res.txt examples/regexdna-output.txt\n \n     echo \"[TEST] rust-lang/regex tests\"\n-    ../cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options\n+    ../build/cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n     popd\n }\n+\n+case \"$1\" in\n+    \"no_sysroot\")\n+        no_sysroot_tests\n+        ;;\n+    \"base_sysroot\")\n+        base_sysroot_tests\n+        ;;\n+    \"extended_sysroot\")\n+        extended_sysroot_tests\n+        ;;\n+    *)\n+        echo \"unknown test suite\"\n+        ;;\n+esac"}, {"sha": "6253022ade2273592dffdba345ca1130686c572c", "filename": "src/bin/cg_clif.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -31,11 +31,6 @@ impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n                 .unwrap()\n                 .parent()\n                 .unwrap()\n-                .parent()\n-                .unwrap()\n-                .parent()\n-                .unwrap()\n-                .join(\"build_sysroot\")\n                 .join(\"sysroot\"),\n         );\n     }"}, {"sha": "3cdd4119d794cda6c8a045dce1c5a80566986030", "filename": "test.sh", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0c34f5aba8544e2319c1587ac067c188a2d97877/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c34f5aba8544e2319c1587ac067c188a2d97877/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=0c34f5aba8544e2319c1587ac067c188a2d97877", "patch": "@@ -1,29 +1,15 @@\n #!/bin/bash\n set -e\n \n-# Build cg_clif\n export RUSTFLAGS=\"-Zrun_dsymutil=no\"\n-if [[ \"$1\" == \"--release\" ]]; then\n-    export CHANNEL='release'\n-    cargo build --release\n-else\n-    export CHANNEL='debug'\n-    cargo build --bin cg_clif\n-fi\n \n-# Config\n-source scripts/config.sh\n-source scripts/tests.sh\n-export CG_CLIF_INCR_CACHE_DISABLED=1\n+./build.sh --without-sysroot $@\n \n-# Cleanup\n rm -r target/out || true\n \n-no_sysroot_tests\n+scripts/tests.sh no_sysroot\n \n-echo \"[BUILD] sysroot\"\n-time ./build_sysroot/build_sysroot.sh\n+./build.sh $@\n \n-base_sysroot_tests\n-\n-extended_sysroot_tests\n+scripts/tests.sh base_sysroot\n+scripts/tests.sh extended_sysroot"}]}