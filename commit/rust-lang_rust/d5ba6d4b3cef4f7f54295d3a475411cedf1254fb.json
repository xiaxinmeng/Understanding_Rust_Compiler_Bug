{"sha": "d5ba6d4b3cef4f7f54295d3a475411cedf1254fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YmE2ZDRiM2NlZjRmN2Y1NDI5NWQzYTQ3NTQxMWNlZGYxMjU0ZmI=", "commit": {"author": {"name": "Alexey Shmalko", "email": "rasen.dubi@gmail.com", "date": "2019-04-29T17:51:19Z"}, "committer": {"name": "Alexey Shmalko", "email": "rasen.dubi@gmail.com", "date": "2019-05-02T13:38:29Z"}, "message": "Ensure language features in group are sorted by since", "tree": {"sha": "4e9c5468016f5d9b7730aa276848a4a4d8b0e559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e9c5468016f5d9b7730aa276848a4a4d8b0e559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5ba6d4b3cef4f7f54295d3a475411cedf1254fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ba6d4b3cef4f7f54295d3a475411cedf1254fb", "html_url": "https://github.com/rust-lang/rust/commit/d5ba6d4b3cef4f7f54295d3a475411cedf1254fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5ba6d4b3cef4f7f54295d3a475411cedf1254fb/comments", "author": {"login": "rasendubi", "id": 1366419, "node_id": "MDQ6VXNlcjEzNjY0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1366419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasendubi", "html_url": "https://github.com/rasendubi", "followers_url": "https://api.github.com/users/rasendubi/followers", "following_url": "https://api.github.com/users/rasendubi/following{/other_user}", "gists_url": "https://api.github.com/users/rasendubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasendubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasendubi/subscriptions", "organizations_url": "https://api.github.com/users/rasendubi/orgs", "repos_url": "https://api.github.com/users/rasendubi/repos", "events_url": "https://api.github.com/users/rasendubi/events{/privacy}", "received_events_url": "https://api.github.com/users/rasendubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasendubi", "id": 1366419, "node_id": "MDQ6VXNlcjEzNjY0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1366419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasendubi", "html_url": "https://github.com/rasendubi", "followers_url": "https://api.github.com/users/rasendubi/followers", "following_url": "https://api.github.com/users/rasendubi/following{/other_user}", "gists_url": "https://api.github.com/users/rasendubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasendubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasendubi/subscriptions", "organizations_url": "https://api.github.com/users/rasendubi/orgs", "repos_url": "https://api.github.com/users/rasendubi/repos", "events_url": "https://api.github.com/users/rasendubi/events{/privacy}", "received_events_url": "https://api.github.com/users/rasendubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7f55ca238a70f6738b14f1fded0fb9a47957343", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f55ca238a70f6738b14f1fded0fb9a47957343", "html_url": "https://github.com/rust-lang/rust/commit/b7f55ca238a70f6738b14f1fded0fb9a47957343"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "d014c43f3b3f260cd352e0d9add8de1a3aca4606", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba6d4b3cef4f7f54295d3a475411cedf1254fb/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba6d4b3cef4f7f54295d3a475411cedf1254fb/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=d5ba6d4b3cef4f7f54295d3a475411cedf1254fb", "patch": "@@ -7,6 +7,7 @@\n //! * Library features have at most one stability level.\n //! * Library features have at most one `since` value.\n //! * All unstable lang features have tests to ensure they are actually unstable.\n+//! * Language features in a group are sorted by `since` value.\n \n use std::collections::HashMap;\n use std::fmt;\n@@ -198,6 +199,7 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n     let mut next_feature_omits_tracking_issue = false;\n \n     let mut next_feature_group = None;\n+    let mut prev_since = None;\n \n     contents.lines().zip(1..)\n         .filter_map(|(line, line_number)| {\n@@ -219,9 +221,11 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n             if line.starts_with(FEATURE_GROUP_START_PREFIX) {\n                 let group = line.trim_start_matches(FEATURE_GROUP_START_PREFIX).trim();\n                 next_feature_group = Some(group.to_owned());\n+                prev_since = None;\n                 return None;\n             } else if line.starts_with(FEATURE_GROUP_END_PREFIX) {\n                 next_feature_group = None;\n+                prev_since = None;\n                 return None;\n             }\n \n@@ -233,6 +237,7 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n                 _ => return None,\n             };\n             let name = parts.next().unwrap().trim();\n+\n             let since_str = parts.next().unwrap().trim().trim_matches('\"');\n             let since = match since_str.parse() {\n                 Ok(since) => Some(since),\n@@ -247,6 +252,18 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n                     None\n                 }\n             };\n+            if next_feature_group.is_some() {\n+                if prev_since > since {\n+                    tidy_error!(\n+                        bad,\n+                        \"libsyntax/feature_gate.rs:{}: feature {} is not sorted by since\",\n+                        line_number,\n+                        name,\n+                    );\n+                }\n+                prev_since = since.clone();\n+            }\n+\n             let issue_str = parts.next().unwrap().trim();\n             let tracking_issue = if issue_str.starts_with(\"None\") {\n                 if level == Status::Unstable && !next_feature_omits_tracking_issue {"}]}