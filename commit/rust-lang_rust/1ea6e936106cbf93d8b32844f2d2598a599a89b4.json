{"sha": "1ea6e936106cbf93d8b32844f2d2598a599a89b4", "node_id": "C_kwDOAAsO6NoAKDFlYTZlOTM2MTA2Y2JmOTNkOGIzMjg0NGYyZDI1OThhNTk5YTg5YjQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-03T21:21:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-03T21:21:45Z"}, "message": "Rollup merge of #95618 - adamse:master, r=dtolnay\n\ncore: document that the align_of* functions return the alignment in bytes", "tree": {"sha": "b0006d75855880faca5257f11ff60d90505b9e93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0006d75855880faca5257f11ff60d90505b9e93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ea6e936106cbf93d8b32844f2d2598a599a89b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiSg/pCRBK7hj4Ov3rIwAAqSAIAAIcTev6IKYjSqDtJrOcwIYB\ngpTYf8QESjwpicWOkQfTiFpR9azmmHb8wTT0DFb/4NqN3GPIBSNjpHOZTfjOcjw2\nFgpr65tdbJLPvDGYk9gPPQs/+rj6TSRyIdYsB5xEvhoufn42XT3mpheW2w9v9D5x\nETcfFCPMnoxh3m80ZCfFkMm/N11PsvSuCzF0VJd6FibU7deieAxk0U7DtfU/ntrI\nvA+bbTTnKHXXLKqHvu8lGXuUiVNYV5pfw+eNPK4zFyoykfNZSjLK1DN1DumLUuKa\nGwTJZ4vrq4SJl9cY2NKcYmSo57Ypn/DupG8cSnpVWWRtVXlC0Oyeo+qDVZT19u0=\n=PMIJ\n-----END PGP SIGNATURE-----\n", "payload": "tree b0006d75855880faca5257f11ff60d90505b9e93\nparent f7f2d83eda99c6020c825a048739b476b0214104\nparent 9d4d5a4eeb7d01e34e18490baeae7a68642c316c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649020905 +0200\ncommitter GitHub <noreply@github.com> 1649020905 +0200\n\nRollup merge of #95618 - adamse:master, r=dtolnay\n\ncore: document that the align_of* functions return the alignment in bytes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea6e936106cbf93d8b32844f2d2598a599a89b4", "html_url": "https://github.com/rust-lang/rust/commit/1ea6e936106cbf93d8b32844f2d2598a599a89b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ea6e936106cbf93d8b32844f2d2598a599a89b4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f2d83eda99c6020c825a048739b476b0214104", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f2d83eda99c6020c825a048739b476b0214104", "html_url": "https://github.com/rust-lang/rust/commit/f7f2d83eda99c6020c825a048739b476b0214104"}, {"sha": "9d4d5a4eeb7d01e34e18490baeae7a68642c316c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4d5a4eeb7d01e34e18490baeae7a68642c316c", "html_url": "https://github.com/rust-lang/rust/commit/9d4d5a4eeb7d01e34e18490baeae7a68642c316c"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "0d33fea75f40775bff663d42f8cb3a1376e369c1", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ea6e936106cbf93d8b32844f2d2598a599a89b4/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea6e936106cbf93d8b32844f2d2598a599a89b4/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=1ea6e936106cbf93d8b32844f2d2598a599a89b4", "patch": "@@ -383,7 +383,7 @@ pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n     unsafe { intrinsics::size_of_val(val) }\n }\n \n-/// Returns the [ABI]-required minimum alignment of a type.\n+/// Returns the [ABI]-required minimum alignment of a type in bytes.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n@@ -407,7 +407,8 @@ pub fn min_align_of<T>() -> usize {\n     intrinsics::min_align_of::<T>()\n }\n \n-/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n+/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to in\n+/// bytes.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n@@ -430,7 +431,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n     unsafe { intrinsics::min_align_of_val(val) }\n }\n \n-/// Returns the [ABI]-required minimum alignment of a type.\n+/// Returns the [ABI]-required minimum alignment of a type in bytes.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n@@ -454,7 +455,8 @@ pub const fn align_of<T>() -> usize {\n     intrinsics::min_align_of::<T>()\n }\n \n-/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n+/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to in\n+/// bytes.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n@@ -477,7 +479,8 @@ pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {\n     unsafe { intrinsics::min_align_of_val(val) }\n }\n \n-/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n+/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to in\n+/// bytes.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number.\n ///"}]}