{"sha": "65b1a985229663435851997e44155482eda2f6f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YjFhOTg1MjI5NjYzNDM1ODUxOTk3ZTQ0MTU1NDgyZWRhMmY2ZjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-23T09:24:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-23T19:43:56Z"}, "message": "Rollup merge of #22640 - sfackler:fix-take, r=alexcrichton\n\n We can't call into the inner reader for a 0-byte read because that may\nend up blocking or returning an error.\n\nr? @alexcrichton", "tree": {"sha": "f39f9c4bf0f13113fdcf19757252d9c9be460876", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f39f9c4bf0f13113fdcf19757252d9c9be460876"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65b1a985229663435851997e44155482eda2f6f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65b1a985229663435851997e44155482eda2f6f4", "html_url": "https://github.com/rust-lang/rust/commit/65b1a985229663435851997e44155482eda2f6f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65b1a985229663435851997e44155482eda2f6f4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db04229d23119e76f52408b61d960e1bcc52af7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/db04229d23119e76f52408b61d960e1bcc52af7a", "html_url": "https://github.com/rust-lang/rust/commit/db04229d23119e76f52408b61d960e1bcc52af7a"}, {"sha": "b46e3eec7aec546d8c4e212cc4e27ec870071e74", "url": "https://api.github.com/repos/rust-lang/rust/commits/b46e3eec7aec546d8c4e212cc4e27ec870071e74", "html_url": "https://github.com/rust-lang/rust/commit/b46e3eec7aec546d8c4e212cc4e27ec870071e74"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "3b4e15953c4613958adfea8d2015625ae32e0017", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/65b1a985229663435851997e44155482eda2f6f4/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b1a985229663435851997e44155482eda2f6f4/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=65b1a985229663435851997e44155482eda2f6f4", "patch": "@@ -669,13 +669,33 @@ impl<T> Take<T> {\n \n impl<T: Read> Read for Take<T> {\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n+        // Don't call into inner reader at all at EOF because it may still block\n+        if self.limit == 0 {\n+            return Ok(0);\n+        }\n+\n         let max = cmp::min(buf.len() as u64, self.limit) as usize;\n         let n = try!(self.inner.read(&mut buf[..max]));\n         self.limit -= n as u64;\n         Ok(n)\n     }\n }\n \n+impl<T: BufRead> BufRead for Take<T> {\n+    fn fill_buf(&mut self) -> Result<&[u8]> {\n+        let buf = try!(self.inner.fill_buf());\n+        let cap = cmp::min(buf.len() as u64, self.limit) as usize;\n+        Ok(&buf[..cap])\n+    }\n+\n+    fn consume(&mut self, amt: usize) {\n+        // Don't let callers reset the limit by passing an overlarge value\n+        let amt = cmp::min(amt as u64, self.limit) as usize;\n+        self.limit -= amt as u64;\n+        self.inner.consume(amt);\n+    }\n+}\n+\n /// An adaptor which will emit all read data to a specified writer as well.\n ///\n /// For more information see `ReadExt::tee`\n@@ -846,6 +866,7 @@ impl<B: BufRead> Iterator for Lines<B> {\n mod tests {\n     use prelude::v1::*;\n     use io::prelude::*;\n+    use io;\n     use super::Cursor;\n \n     #[test]\n@@ -943,4 +964,18 @@ mod tests {\n         let mut v = String::new();\n         assert!(c.read_to_string(&mut v).is_err());\n     }\n+\n+    #[test]\n+    fn take_eof() {\n+        struct R;\n+\n+        impl Read for R {\n+            fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+                Err(io::Error::new(io::ErrorKind::Other, \"\", None))\n+            }\n+        }\n+\n+        let mut buf = [0; 1];\n+        assert_eq!(Ok(0), R.take(0).read(&mut buf));\n+    }\n }"}]}