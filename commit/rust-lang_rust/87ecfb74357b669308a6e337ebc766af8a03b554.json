{"sha": "87ecfb74357b669308a6e337ebc766af8a03b554", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZWNmYjc0MzU3YjY2OTMwOGE2ZTMzN2ViYzc2NmFmOGEwM2I1NTQ=", "commit": {"author": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-26T16:37:48Z"}, "committer": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-26T16:37:48Z"}, "message": "converted TCP interface to newtype structs", "tree": {"sha": "f0ed18885c906eea7e96d6a1141d0cbae88e1882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0ed18885c906eea7e96d6a1141d0cbae88e1882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87ecfb74357b669308a6e337ebc766af8a03b554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87ecfb74357b669308a6e337ebc766af8a03b554", "html_url": "https://github.com/rust-lang/rust/commit/87ecfb74357b669308a6e337ebc766af8a03b554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87ecfb74357b669308a6e337ebc766af8a03b554/comments", "author": null, "committer": null, "parents": [{"sha": "d0dc6970d8b8bb0e6cc358ec169daa70d99e1d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0dc6970d8b8bb0e6cc358ec169daa70d99e1d15", "html_url": "https://github.com/rust-lang/rust/commit/d0dc6970d8b8bb0e6cc358ec169daa70d99e1d15"}], "stats": {"total": 33, "additions": 9, "deletions": 24}, "files": [{"sha": "947fade096b92aa43f6155b01662c1f1ca4ed45d", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/87ecfb74357b669308a6e337ebc766af8a03b554/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ecfb74357b669308a6e337ebc766af8a03b554/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=87ecfb74357b669308a6e337ebc766af8a03b554", "patch": "@@ -18,15 +18,11 @@ use rt::rtio::{IoFactory, IoFactoryObject,\n                RtioTcpStream, RtioTcpStreamObject};\n use rt::local::Local;\n \n-pub struct TcpStream {\n-    rtstream: ~RtioTcpStreamObject\n-}\n+pub struct TcpStream(~RtioTcpStreamObject);\n \n impl TcpStream {\n     fn new(s: ~RtioTcpStreamObject) -> TcpStream {\n-        TcpStream {\n-            rtstream: s\n-        }\n+        TcpStream(s)\n     }\n \n     pub fn connect(addr: IpAddr) -> Option<TcpStream> {\n@@ -38,22 +34,19 @@ impl TcpStream {\n         };\n \n         match stream {\n-            Ok(s) => {\n-                Some(TcpStream::new(s))\n-            }\n+            Ok(s) => Some(TcpStream::new(s)),\n             Err(ioerr) => {\n                 rtdebug!(\"failed to connect: %?\", ioerr);\n                 io_error::cond.raise(ioerr);\n-                return None;\n+                None\n             }\n         }\n     }\n }\n \n impl Reader for TcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n-        let bytes_read = self.rtstream.read(buf);\n-        match bytes_read {\n+        match (**self).read(buf) {\n             Ok(read) => Some(read),\n             Err(ioerr) => {\n                 // EOF is indicated by returning None\n@@ -70,8 +63,7 @@ impl Reader for TcpStream {\n \n impl Writer for TcpStream {\n     fn write(&mut self, buf: &[u8]) {\n-        let res = self.rtstream.write(buf);\n-        match res {\n+        match (**self).write(buf) {\n             Ok(_) => (),\n             Err(ioerr) => {\n                 io_error::cond.raise(ioerr);\n@@ -82,9 +74,7 @@ impl Writer for TcpStream {\n     fn flush(&mut self) { fail!() }\n }\n \n-pub struct TcpListener {\n-    rtlistener: ~RtioTcpListenerObject,\n-}\n+pub struct TcpListener(~RtioTcpListenerObject);\n \n impl TcpListener {\n     pub fn bind(addr: IpAddr) -> Option<TcpListener> {\n@@ -93,11 +83,7 @@ impl TcpListener {\n             (*io).tcp_bind(addr)\n         };\n         match listener {\n-            Ok(l) => {\n-                Some(TcpListener {\n-                    rtlistener: l\n-                })\n-            }\n+            Ok(l) => Some(TcpListener(l)),\n             Err(ioerr) => {\n                 io_error::cond.raise(ioerr);\n                 return None;\n@@ -108,8 +94,7 @@ impl TcpListener {\n \n impl Listener<TcpStream> for TcpListener {\n     fn accept(&mut self) -> Option<TcpStream> {\n-        let rtstream = self.rtlistener.accept();\n-        match rtstream {\n+        match (**self).accept() {\n             Ok(s) => {\n                 Some(TcpStream::new(s))\n             }"}]}