{"sha": "dc2237c49fea94c8308f989c43f042a0cc327419", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMjIzN2M0OWZlYTk0YzgzMDhmOTg5YzQzZjA0MmEwY2MzMjc0MTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-31T15:01:53Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-31T15:01:53Z"}, "message": "apply feedback", "tree": {"sha": "5b1e919fb31fd6a3f5728c054fce738487687057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b1e919fb31fd6a3f5728c054fce738487687057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc2237c49fea94c8308f989c43f042a0cc327419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2237c49fea94c8308f989c43f042a0cc327419", "html_url": "https://github.com/rust-lang/rust/commit/dc2237c49fea94c8308f989c43f042a0cc327419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc2237c49fea94c8308f989c43f042a0cc327419/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ed469c4831f00ea9afec5e7becd56be018df45e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed469c4831f00ea9afec5e7becd56be018df45e", "html_url": "https://github.com/rust-lang/rust/commit/4ed469c4831f00ea9afec5e7becd56be018df45e"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "927c6f26b62a7bf34805ce4b91fc985188bedb51", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dc2237c49fea94c8308f989c43f042a0cc327419/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2237c49fea94c8308f989c43f042a0cc327419/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=dc2237c49fea94c8308f989c43f042a0cc327419", "patch": "@@ -967,10 +967,11 @@ extern \"rust-intrinsic\" {\n     ///\n     /// For regions of memory which might overlap, use [`copy`] instead.\n     ///\n-    /// `copy_nonoverlapping` is semantically equivalent to C's [`memcpy`].\n+    /// `copy_nonoverlapping` is semantically equivalent to C's [`memcpy`], but\n+    /// with the argument order swapped.\n     ///\n     /// [`copy`]: ./fn.copy.html\n-    /// [`memcpy`]: https://www.gnu.org/software/libc/manual/html_node/Copying-Strings-and-Arrays.html#index-memcpy\n+    /// [`memcpy`]: https://en.cppreference.com/w/c/string/byte/memcpy\n     ///\n     /// # Safety\n     ///\n@@ -1020,15 +1021,15 @@ extern \"rust-intrinsic\" {\n     ///         let dst_ptr = dst.as_mut_ptr().offset(dst_len as isize);\n     ///         let src_ptr = src.as_ptr();\n     ///\n+    ///         // Truncate `src` without dropping its contents. We do this first,\n+    ///         // to avoid problems in case something further down panics.\n+    ///         src.set_len(0);\n+    ///\n     ///         // The two regions cannot overlap becuase mutable references do\n     ///         // not alias, and two different vectors cannot own the same\n     ///         // memory.\n     ///         ptr::copy_nonoverlapping(src_ptr, dst_ptr, src_len);\n     ///\n-    ///         // Truncate `src` without dropping its contents. This cannot panic,\n-    ///         // so double-drops cannot happen.\n-    ///         src.set_len(0);\n-    ///\n     ///         // Notify `dst` that it now holds the contents of `src`.\n     ///         dst.set_len(dst_len + src_len);\n     ///     }\n@@ -1053,12 +1054,12 @@ extern \"rust-intrinsic\" {\n     /// If the source and destination will *never* overlap,\n     /// [`copy_nonoverlapping`] can be used instead.\n     ///\n-    /// `copy` is semantically equivalent to C's [`memmove`].  Copying takes place as\n-    /// if the bytes were copied from `src` to a temporary array and then copied from\n-    /// the array to `dst`-\n+    /// `copy` is semantically equivalent to C's [`memmove`], but with the argument\n+    /// order swapped.  Copying takes place as if the bytes were copied from `src`\n+    /// to a temporary array and then copied from the array to `dst`.\n     ///\n     /// [`copy_nonoverlapping`]: ./fn.copy_nonoverlapping.html\n-    /// [`memmove`]: https://www.gnu.org/software/libc/manual/html_node/Copying-Strings-and-Arrays.html#index-memmove\n+    /// [`memmove`]: https://en.cppreference.com/w/c/string/byte/memmove\n     ///\n     /// # Safety\n     ///\n@@ -1107,7 +1108,7 @@ extern \"rust-intrinsic\" {\n     /// `write_bytes` is similar to C's [`memset`], but sets `count *\n     /// size_of::<T>()` bytes to `val`.\n     ///\n-    /// [`memset`]: https://www.gnu.org/software/libc/manual/html_node/Copying-Strings-and-Arrays.html#index-memset\n+    /// [`memset`]: https://en.cppreference.com/w/c/string/byte/memset\n     ///\n     /// # Safety\n     ///\n@@ -1158,8 +1159,14 @@ extern \"rust-intrinsic\" {\n     /// // At this point, using or dropping `v` results in undefined behavior.\n     /// // drop(v); // ERROR\n     ///\n-    /// // Leaking it does not invoke drop and is fine:\n-    /// mem::forget(v)\n+    /// // Even leaking `v` \"uses\" it, and henc eis undefined behavior.\n+    /// // mem::forget(v); // ERROR\n+    ///\n+    /// // Let us instead put in a valid value\n+    /// ptr::write(&mut v, Box::new(42i32);\n+    ///\n+    /// // Now the box is fine\n+    /// assert_eq!(*v, 42);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write_bytes<T>(dst: *mut T, val: u8, count: usize);"}, {"sha": "a6c3e544e165b31efeded44c813649196691a653", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc2237c49fea94c8308f989c43f042a0cc327419/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2237c49fea94c8308f989c43f042a0cc327419/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=dc2237c49fea94c8308f989c43f042a0cc327419", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME: talk about offset, copy_memory, copy_nonoverlapping_memory\n-\n //! Manually manage memory through raw pointers.\n //!\n //! *[See also the pointer primitive types](../../std/primitive.pointer.html).*\n@@ -42,8 +40,10 @@\n //!\n //! ## Alignment\n //!\n-//! Valid pointers are not necessarily properly aligned. However, most functions\n-//! require their arguments to be properly aligned, and will explicitly state\n+//! Valid pointers as defined above are not necessarily properly aligned (where\n+//! \"proper\" alignment is defind by the pointee type, i.e., `*const T` must be\n+//! aligned to `mem::align_of::<T>()`). However, most functions require their\n+//! arguments to be properly aligned, and will explicitly state\n //! this requirement in their documentation. Notable exceptions to this are\n //! [`read_unaligned`] and [`write_unaligned`].\n //!\n@@ -136,11 +136,12 @@ pub use intrinsics::write_bytes;\n /// let mut v = vec![Rc::new(0), last];\n ///\n /// unsafe {\n+///     // Shorten `v` to prevent the last item from being dropped.  We do that first,\n+///     // to prevent issues if the `drop_in_place` below panics.\n+///     v.set_len(1);\n ///     // Without a call `drop_in_place`, the last item would never be dropped,\n ///     // and the memory it manages would be leaked.\n ///     ptr::drop_in_place(&mut v[1]);\n-///     // Shorten `v` to prevent the last item from being dropped.\n-///     v.set_len(1);\n /// }\n ///\n /// assert_eq!(v, &[0.into()]);\n@@ -745,7 +746,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n ///\n /// unsafe {\n ///     // Take a reference to a 32-bit integer which is not aligned.\n-///     let unaligned = &mut x.unaligned;\n+///     let unaligned = &mut x.unaligned as *mut u32;\n ///\n ///     // Dereferencing normally will emit an unaligned store instruction,\n ///     // causing undefined behavior."}]}