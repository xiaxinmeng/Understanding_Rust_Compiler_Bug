{"sha": "14add46e94aa57d6f659ccfb5401e00ffacddc0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YWRkNDZlOTRhYTU3ZDZmNjU5Y2NmYjU0MDFlMDBmZmFjZGRjMGI=", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-12T18:54:29Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-18T10:25:15Z"}, "message": "Use more accurate spans when proposing adding lifetime to item", "tree": {"sha": "8d8c90631bd663e4661bffc7934d6c72de81f078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d8c90631bd663e4661bffc7934d6c72de81f078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14add46e94aa57d6f659ccfb5401e00ffacddc0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14add46e94aa57d6f659ccfb5401e00ffacddc0b", "html_url": "https://github.com/rust-lang/rust/commit/14add46e94aa57d6f659ccfb5401e00ffacddc0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14add46e94aa57d6f659ccfb5401e00ffacddc0b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "url": "https://api.github.com/repos/rust-lang/rust/commits/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "html_url": "https://github.com/rust-lang/rust/commit/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6"}], "stats": {"total": 99, "additions": 62, "deletions": 37}, "files": [{"sha": "ac77ec1be78d487c1ae8834825f9f531310f61c9", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -2076,16 +2076,40 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 for param in params {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span) {\n                         if snippet.starts_with('&') && !snippet.starts_with(\"&'\") {\n-                            introduce_suggestion\n-                                .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n-                        } else if let Some(stripped) = snippet.strip_prefix(\"&'_ \") {\n-                            introduce_suggestion.push((param.span, format!(\"&'a {}\", &stripped)));\n+                            let lo = param.span.lo() + BytePos(1);\n+                            let span = param.span.with_lo(lo).with_hi(lo);\n+                            introduce_suggestion.push((span, \"'a \".to_string()));\n+                        } else if let Some(_) = snippet.strip_prefix(\"&'_ \") {\n+                            let lo = param.span.lo() + BytePos(1);\n+                            let hi = lo + BytePos(2);\n+                            let span = param.span.with_lo(lo).with_hi(hi);\n+                            introduce_suggestion.push((span, \"'a\".to_string()));\n                         }\n                     }\n                 }\n                 for ((span, _), sugg) in spans_with_counts.iter().copied().zip(suggs.iter()) {\n-                    if let Some(sugg) = sugg {\n-                        introduce_suggestion.push((span, sugg.to_string()));\n+                    match (sugg, self.tcx.sess.source_map().span_to_snippet(span)) {\n+                        (Some(sugg), Ok(snippet))\n+                            if snippet.starts_with('&')\n+                                && !snippet.starts_with(\"&'\")\n+                                && sugg.starts_with(\"&\") =>\n+                        {\n+                            let lo = span.lo() + BytePos(1);\n+                            let span = span.with_lo(lo).with_hi(lo);\n+                            introduce_suggestion.push((span, sugg[1..].to_string()));\n+                        }\n+                        (Some(sugg), Ok(snippet))\n+                            if snippet.starts_with(\"&'_ \") && sugg.starts_with(\"&\") =>\n+                        {\n+                            let lo = span.lo() + BytePos(1);\n+                            let hi = lo + BytePos(2);\n+                            let span = span.with_lo(lo).with_hi(hi);\n+                            introduce_suggestion.push((span, sugg[1..].to_string()));\n+                        }\n+                        (Some(sugg), _) => {\n+                            introduce_suggestion.push((span, sugg.to_string()));\n+                        }\n+                        _ => {}\n                     }\n                 }\n                 err.multipart_suggestion_with_style(\n@@ -2159,7 +2183,8 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 for ((span, _), snippet) in spans_with_counts.iter().copied().zip(snippets.iter()) {\n                     match snippet.as_deref() {\n                         Some(\"\") => spans_suggs.push((span, \"'lifetime, \".to_string())),\n-                        Some(\"&\") => spans_suggs.push((span, \"&'lifetime \".to_string())),\n+                        Some(\"&\") => spans_suggs\n+                            .push((span.with_lo(span.lo() + BytePos(1)), \"'lifetime \".to_string())),\n                         _ => {}\n                     }\n                 }"}, {"sha": "fbd77d96700911550dcd9264d3b32e9bd77e9895", "filename": "src/test/ui/error-codes/E0106.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -59,7 +59,7 @@ LL | type MyStr = &str;\n help: consider introducing a named lifetime parameter\n    |\n LL | type MyStr<'a> = &'a str;\n-   |           ++++   ~~~\n+   |           ++++    ++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e82cbf7e8e5ef08efabb39dd5033699506608712", "filename": "src/test/ui/generic-associated-types/gat-trait-path-generic-type-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -15,7 +15,7 @@ LL |     type F<T1> = &[u8];\n help: consider introducing a named lifetime parameter\n    |\n LL |     type F<'a, T1> = &'a [u8];\n-   |            +++       ~~~\n+   |            +++        ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "44955c58889aa95141d95d687ccd4360bd95ce4a", "filename": "src/test/ui/impl-header-lifetime-elision/assoc-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -7,7 +7,7 @@ LL |     type Output = &i32;\n help: consider introducing a named lifetime parameter\n    |\n LL |     type Output<'a> = &'a i32;\n-   |                ++++   ~~~\n+   |                ++++    ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/assoc-type.rs:16:20"}, {"sha": "18f69bb57755a54c4d47659a657c01cb9cdb7fa2", "filename": "src/test/ui/issues/issue-19707.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -9,11 +9,11 @@ LL | type Foo = fn(&u8, &u8) -> &u8;\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n LL | type Foo = for<'a> fn(&'a u8, &'a u8) -> &'a u8;\n-   |            +++++++    ~~~~~~  ~~~~~~     ~~~\n+   |            +++++++     ++      ++         ++\n help: consider introducing a named lifetime parameter\n    |\n LL | type Foo<'a> = fn(&'a u8, &'a u8) -> &'a u8;\n-   |         ++++      ~~~~~~  ~~~~~~     ~~~\n+   |         ++++       ++      ++         ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:5:27\n@@ -26,11 +26,11 @@ LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n help: consider making the bound lifetime-generic with a new `'a` lifetime\n    |\n LL | fn bar<F: for<'a> Fn(&'a u8, &'a u8) -> &'a u8>(f: &F) {}\n-   |           +++++++    ~~~~~~  ~~~~~~     ~~~\n+   |           +++++++     ++      ++         ++\n help: consider introducing a named lifetime parameter\n    |\n LL | fn bar<'a, F: Fn(&'a u8, &'a u8) -> &'a u8>(f: &F) {}\n-   |        +++       ~~~~~~  ~~~~~~     ~~~\n+   |        +++        ++      ++         ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bb7cdcbb100fff8aa94011cce119d2bcd743ed11", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -8,7 +8,7 @@ LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.ne\n help: consider introducing a named lifetime parameter\n    |\n LL | fn parse_type<'a>(iter: Box<dyn Iterator<Item=&str>+'static>) -> &'a str { iter.next() }\n-   |              ++++                                                ~~~\n+   |              ++++                                                 ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:4:40"}, {"sha": "e5f492af5b366375419267dcf17f3f9ef03f7b6d", "filename": "src/test/ui/issues/issue-30255.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -8,7 +8,7 @@ LL | fn f(a: &S, b: i32) -> &i32 {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn f<'a>(a: &'a S, b: i32) -> &'a i32 {\n-   |     ++++    ~~~~~             ~~~\n+   |     ++++     ++                ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:14:34\n@@ -20,7 +20,7 @@ LL | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn g<'a>(a: &'a S, b: bool, c: &'a i32) -> &'a i32 {\n-   |     ++++    ~~~~~              ~~~~~~~     ~~~\n+   |     ++++     ++                 ++          ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:19:44\n@@ -32,7 +32,7 @@ LL | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn h<'a>(a: &'a bool, b: bool, c: &'a S, d: &'a i32) -> &'a i32 {\n-   |     ++++    ~~~~~~~~              ~~~~~     ~~~~~~~     ~~~\n+   |     ++++     ++                    ++        ++          ++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0e69cd50f6a825a90318c1942258775227ab2aa0", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -20,7 +20,7 @@ LL | fn g(_x: &isize, _y: &isize) -> &isize {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn g<'a>(_x: &'a isize, _y: &'a isize) -> &'a isize {\n-   |     ++++     ~~~~~~~~~      ~~~~~~~~~     ~~~\n+   |     ++++      ++             ++            ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:19\n@@ -32,7 +32,7 @@ LL | fn h(_x: &Foo) -> &isize {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn h<'a>(_x: &'a Foo) -> &'a isize {\n-   |     ++++     ~~~~~~~     ~~~\n+   |     ++++      ++          ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:21:20"}, {"sha": "bcc3e9510ac97ced275c9a9a5fc63633da289733", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1b-return-no-names-if-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -8,7 +8,7 @@ LL | fn foo(x: &i32, y: &i32) -> &i32 {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n-   |       ++++    ~~~~~~~     ~~~~~~~     ~~~\n+   |       ++++     ++          ++          ++\n \n error: aborting due to previous error\n "}, {"sha": "65b9f68817aa42f28d951d1a4ce5cf929d2523b7", "filename": "src/test/ui/rfc1623-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Frfc1623-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Frfc1623-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623-2.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -9,7 +9,7 @@ LL | static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n LL | static NON_ELIDABLE_FN: &for<'a> fn(&'a u8, &'a u8) -> &'a u8 =\n-   |                          +++++++    ~~~~~~  ~~~~~~     ~~~\n+   |                          +++++++     ++      ++         ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/rfc1623-2.rs:10:39\n@@ -22,7 +22,7 @@ LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n LL |     &(non_elidable as for<'a> fn(&'a u8, &'a u8) -> &'a u8);\n-   |                       +++++++    ~~~~~~  ~~~~~~     ~~~\n+   |                       +++++++     ++      ++         ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7c0f8d199a965b111a9c9be6479f379988499391", "filename": "src/test/ui/suggestions/fn-missing-lifetime-in-item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -25,11 +25,11 @@ LL | struct S2<F: Fn(&i32, &i32) -> &i32>(F);\n help: consider making the bound lifetime-generic with a new `'a` lifetime\n    |\n LL | struct S2<F: for<'a> Fn(&'a i32, &'a i32) -> &'a i32>(F);\n-   |              +++++++    ~~~~~~~  ~~~~~~~     ~~~\n+   |              +++++++     ++       ++          ++\n help: consider introducing a named lifetime parameter\n    |\n LL | struct S2<'a, F: Fn(&'a i32, &'a i32) -> &'a i32>(F);\n-   |           +++       ~~~~~~~  ~~~~~~~     ~~~\n+   |           +++        ++       ++          ++\n \n error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n   --> $DIR/fn-missing-lifetime-in-item.rs:3:40"}, {"sha": "70c96feb1de4c7dc461009449a6892dcee1b8e80", "filename": "src/test/ui/suggestions/issue-84592.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84592.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84592.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84592.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -10,7 +10,7 @@ LL | fn two_lifetimes_needed(a: &(), b: &()) -> TwoLifetimes<'_, '_> {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn two_lifetimes_needed<'a>(a: &'a (), b: &'a ()) -> TwoLifetimes<'a, 'a> {\n-   |                        ++++    ~~~~~~     ~~~~~~                  ~~  ~~\n+   |                        ++++     ++         ++                     ~~  ~~\n \n error: aborting due to previous error\n "}, {"sha": "14dbbfffb0e622b8fc1f5b76a0dd24292e7ef112", "filename": "src/test/ui/suggestions/issue-86667.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86667.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86667.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86667.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -8,7 +8,7 @@ LL | async fn a(s1: &str, s2: &str) -> &str {\n help: consider introducing a named lifetime parameter\n    |\n LL | async fn a<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n-   |           ++++     ~~~~~~~      ~~~~~~~     ~~~\n+   |           ++++      ++           ++          ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-86667.rs:11:29\n@@ -20,7 +20,7 @@ LL | fn b(s1: &str, s2: &str) -> &str {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn b<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n-   |     ++++     ~~~~~~~      ~~~~~~~     ~~~\n+   |     ++++      ++           ++          ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "33f9d092e6ee0444a7b5d685e11c7b54c1404053", "filename": "src/test/ui/suggestions/missing-lt-for-hrtb.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lt-for-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lt-for-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lt-for-hrtb.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -47,7 +47,7 @@ LL | struct V<'a>(&'a dyn for<'b> Fn(&X) -> &X);\n help: consider using one of the available lifetimes here\n    |\n LL | struct V<'a>(&'a dyn for<'b> Fn(&X) -> &'lifetime X);\n-   |                                        ~~~~~~~~~~\n+   |                                         +++++++++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/missing-lt-for-hrtb.rs:5:41"}, {"sha": "f147b4463e2f21e7af310676bbb9c9e16c4790b0", "filename": "src/test/ui/suggestions/return-elided-lifetime.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fsuggestions%2Freturn-elided-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Fsuggestions%2Freturn-elided-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-elided-lifetime.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -80,7 +80,7 @@ LL | fn f3(s: &S) -> &i32 { loop {} }\n help: consider introducing a named lifetime parameter\n    |\n LL | fn f3<'a>(s: &'a S) -> &'a i32 { loop {} }\n-   |      ++++    ~~~~~     ~~~\n+   |      ++++     ++        ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-elided-lifetime.rs:21:26\n@@ -92,7 +92,7 @@ LL | fn f3_(s: &S, t: &S) -> (&i32, &i32) { loop {} }\n help: consider introducing a named lifetime parameter\n    |\n LL | fn f3_<'a>(s: &'a S, t: &'a S) -> (&'a i32, &i32) { loop {} }\n-   |       ++++    ~~~~~     ~~~~~      ~~~\n+   |       ++++     ++        ++         ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-elided-lifetime.rs:21:32\n@@ -104,7 +104,7 @@ LL | fn f3_(s: &S, t: &S) -> (&i32, &i32) { loop {} }\n help: consider introducing a named lifetime parameter\n    |\n LL | fn f3_<'a>(s: &'a S, t: &'a S) -> (&i32, &'a i32) { loop {} }\n-   |       ++++    ~~~~~     ~~~~~            ~~~\n+   |       ++++     ++        ++               ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-elided-lifetime.rs:25:42\n@@ -121,7 +121,7 @@ LL | fn f4<'a, 'b>(a: &'a i32, b: &'b i32) -> &i32 { loop {} }\n help: consider using one of the available lifetimes here\n    |\n LL | fn f4<'a, 'b>(a: &'a i32, b: &'b i32) -> &'lifetime i32 { loop {} }\n-   |                                          ~~~~~~~~~~\n+   |                                           +++++++++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-elided-lifetime.rs:27:44\n@@ -138,7 +138,7 @@ LL | fn f4_<'a, 'b>(a: &'a i32, b: &'b i32) -> (&i32, &i32) { loop {} }\n help: consider using one of the available lifetimes here\n    |\n LL | fn f4_<'a, 'b>(a: &'a i32, b: &'b i32) -> (&'lifetime i32, &i32) { loop {} }\n-   |                                            ~~~~~~~~~~\n+   |                                             +++++++++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-elided-lifetime.rs:27:50\n@@ -155,7 +155,7 @@ LL | fn f4_<'a, 'b>(a: &'a i32, b: &'b i32) -> (&i32, &i32) { loop {} }\n help: consider using one of the available lifetimes here\n    |\n LL | fn f4_<'a, 'b>(a: &'a i32, b: &'b i32) -> (&i32, &'lifetime i32) { loop {} }\n-   |                                                  ~~~~~~~~~~\n+   |                                                   +++++++++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-elided-lifetime.rs:31:35"}, {"sha": "6a104e8f94b32f435da81896372da004756f8195", "filename": "src/test/ui/underscore-lifetime/in-fn-return-illegal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -8,7 +8,7 @@ LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } }\n help: consider introducing a named lifetime parameter\n    |\n LL | fn foo<'a>(x: &'a u32, y: &'a u32) -> &'a u32 { loop { } }\n-   |       ++++    ~~~~~~~     ~~~~~~~      ~~\n+   |       ++++     ++          ++          ~~\n \n error: aborting due to previous error\n "}, {"sha": "22bf1fdba326f303031a711d6bbd73597edc9375", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14add46e94aa57d6f659ccfb5401e00ffacddc0b/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=14add46e94aa57d6f659ccfb5401e00ffacddc0b", "patch": "@@ -43,7 +43,7 @@ LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y }\n help: consider introducing a named lifetime parameter\n    |\n LL | fn foo2<'a>(_: &'a u8, y: &'a u8) -> &'a u8 { y }\n-   |        ++++    ~~~~~~     ~~~~~~      ~~\n+   |        ++++     ~~         ~~         ~~\n \n error: aborting due to 5 previous errors\n "}]}