{"sha": "ff71b80a85185c5d0ce594c13efddcaca9be54c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNzFiODBhODUxODVjNWQwY2U1OTRjMTNlZmRkY2FjYTliZTU0YzU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-01-27T11:03:21Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-12T17:46:43Z"}, "message": "Change compare mode to use -Zborrowck=mir", "tree": {"sha": "6923a16bf6742b2a0d31f99311e6fc4cb1d71913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6923a16bf6742b2a0d31f99311e6fc4cb1d71913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff71b80a85185c5d0ce594c13efddcaca9be54c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff71b80a85185c5d0ce594c13efddcaca9be54c5", "html_url": "https://github.com/rust-lang/rust/commit/ff71b80a85185c5d0ce594c13efddcaca9be54c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff71b80a85185c5d0ce594c13efddcaca9be54c5/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0df1e57991e34825697b1659732c0716e7508519", "url": "https://api.github.com/repos/rust-lang/rust/commits/0df1e57991e34825697b1659732c0716e7508519", "html_url": "https://github.com/rust-lang/rust/commit/0df1e57991e34825697b1659732c0716e7508519"}], "stats": {"total": 4513, "additions": 4503, "deletions": 10}, "files": [{"sha": "5165f9821fd88302c72db33115fe08fb4123f96b", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -49,14 +49,14 @@ pub fn add_parameter() {\n // Change parameter pattern ----------------------------------------------------\n #[cfg(cfail1)]\n pub fn change_parameter_pattern() {\n-    let _ = |x: &u32| x;\n+    let _ = |x: (u32,)| x;\n }\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_pattern() {\n-    let _ = |&x: &u32| x;\n+    let _ = |(x,): (u32,)| x;\n }\n \n "}, {"sha": "ca99304f9b4a0b078aff7683abb651f727e07c5b", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:29\n+   |\n+LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |     let z: I::A = if cond { x } else { y };\n+   |                             ^ assignment requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:40\n+   |\n+LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |     let z: I::A = if cond { x } else { y };\n+   |                                        ^ assignment requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d8506b9c8c81c777b0a37aaf1150947959b9b4ea", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/associated-types-subtyping-1.rs:24:12\n+   |\n+LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n+   |            -- -- lifetime `'b` defined here\n+   |            |\n+   |            lifetime `'a` defined here\n+...\n+LL |     let a: <T as Trait<'a>>::Type = make_any();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/associated-types-subtyping-1.rs:35:13\n+   |\n+LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n+   |            -- -- lifetime `'b` defined here\n+   |            |\n+   |            lifetime `'a` defined here\n+...\n+LL |     let _c: <T as Trait<'a>>::Type = b;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "779e6dac92e252b032e2c31798aa7a2350191d13", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-contravariant.rs:45:4\n+   |\n+LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+...\n+LL |    (a, b)\n+   |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-contravariant.rs:45:4\n+   |\n+LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+...\n+LL |    (a, b)\n+   |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f532c96ed2cc73ed21a190765b33a79a82eb24d5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-contravariant.rs:38:4\n+   |\n+LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n+   |        -- lifetime `'a` defined here\n+LL |    bar(foo, x)\n+   |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c45082fb0538f11d48d76c58519fd8e941eff1de", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:55:4\n+   |\n+LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+...\n+LL |    (a, b)\n+   |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:55:4\n+   |\n+LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+...\n+LL |    (a, b)\n+   |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2c11e7ffe930d215c2d2a024134478f57395228f", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:38:12\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+LL |    let f = foo; // <-- No consistent type can be inferred for `f` here.\n+LL |    let a = bar(f, x);\n+   |            ^^^^^^^^^ argument requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:39:12\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |    let b = bar(f, y);\n+   |            ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8be0ad6e88f3ad446cadee2c786b3152e80279d5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:48:4\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n+   |        -- lifetime `'a` defined here\n+...\n+LL |    bar(foo, x)\n+   |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f66994b3f100a1d27f1afb7ad28286c363b8c502", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.nll.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,40 @@\n+error[E0503]: cannot use `y` because it was mutably borrowed\n+  --> $DIR/borrowck-anon-fields-variant.rs:17:7\n+   |\n+LL |       Foo::Y(ref mut a, _) => a,\n+   |              --------- borrow of `y.0` occurs here\n+...\n+LL |       Foo::Y(_, ref mut b) => b,\n+   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n+...\n+LL |     *a += 1;\n+   |     ------- borrow later used here\n+\n+error[E0503]: cannot use `y` because it was mutably borrowed\n+  --> $DIR/borrowck-anon-fields-variant.rs:37:7\n+   |\n+LL |       Foo::Y(ref mut a, _) => a,\n+   |              --------- borrow of `y.0` occurs here\n+...\n+LL |       Foo::Y(ref mut b, _) => b,\n+   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n+...\n+LL |     *a += 1;\n+   |     ------- borrow later used here\n+\n+error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n+  --> $DIR/borrowck-anon-fields-variant.rs:37:14\n+   |\n+LL |       Foo::Y(ref mut a, _) => a,\n+   |              --------- first mutable borrow occurs here\n+...\n+LL |       Foo::Y(ref mut b, _) => b,\n+   |              ^^^^^^^^^ second mutable borrow occurs here\n+...\n+LL |     *a += 1;\n+   |     ------- first borrow later used here\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0499, E0503.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "f1e1ae18839c4ed848c0a4fbdebe33faf8f76b87", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.nll.stderr", "status": "added", "additions": 366, "deletions": 0, "changes": 366, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,366 @@\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-describe-lvalue.rs:262:13\n+   |\n+LL |             let y = &mut x;\n+   |                     ------ first mutable borrow occurs here\n+LL |             &mut x;\n+   |             ^^^^^^ second mutable borrow occurs here\n+LL |             *y = 1;\n+   |             ------ first borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-describe-lvalue.rs:272:20\n+   |\n+LL |                    let y = &mut x;\n+   |                            ------ first mutable borrow occurs here\n+LL |                    &mut x;\n+   |                    ^^^^^^ second mutable borrow occurs here\n+LL |                    *y = 1;\n+   |                    ------ first borrow later used here\n+\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/borrowck-describe-lvalue.rs:270:16\n+   |\n+LL |              || {\n+   |               - inferred to be a `FnMut` closure\n+LL | /                || {\n+LL | |                    let y = &mut x;\n+LL | |                    &mut x;\n+LL | |                    *y = 1;\n+LL | |                    drop(y);\n+LL | |                 }\n+   | |_________________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error[E0503]: cannot use `f.x` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:41:9\n+   |\n+LL |         let x = f.x();\n+   |                 - borrow of `f` occurs here\n+LL |         f.x;\n+   |         ^^^ use of borrowed `f`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `g.0` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:48:9\n+   |\n+LL |         let x = g.x();\n+   |                 - borrow of `g` occurs here\n+LL |         g.0;\n+   |         ^^^ use of borrowed `g`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `h.0` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:55:9\n+   |\n+LL |         let x = &mut h.0;\n+   |                 -------- borrow of `h.0` occurs here\n+LL |         h.0;\n+   |         ^^^ use of borrowed `h.0`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `e.0` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:63:20\n+   |\n+LL |         let x = e.x();\n+   |                 - borrow of `e` occurs here\n+LL |         match e {\n+LL |             Baz::X(value) => value\n+   |                    ^^^^^ use of borrowed `e`\n+LL |         };\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `u.a` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:71:9\n+   |\n+LL |         let x = &mut u.a;\n+   |                 -------- borrow of `u.a` occurs here\n+LL |         u.a;\n+   |         ^^^ use of borrowed `u.a`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `f.x` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:78:9\n+   |\n+LL |         let x = f.x();\n+   |                 - borrow of `*f` occurs here\n+LL |         f.x;\n+   |         ^^^ use of borrowed `*f`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `g.0` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:85:9\n+   |\n+LL |         let x = g.x();\n+   |                 - borrow of `*g` occurs here\n+LL |         g.0;\n+   |         ^^^ use of borrowed `*g`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `h.0` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:92:9\n+   |\n+LL |         let x = &mut h.0;\n+   |                 -------- borrow of `h.0` occurs here\n+LL |         h.0;\n+   |         ^^^ use of borrowed `h.0`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `e.0` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:100:20\n+   |\n+LL |         let x = e.x();\n+   |                 - borrow of `*e` occurs here\n+LL |         match *e {\n+LL |             Baz::X(value) => value\n+   |                    ^^^^^ use of borrowed `*e`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `u.a` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:109:9\n+   |\n+LL |         let x = &mut u.a;\n+   |                 -------- borrow of `u.a` occurs here\n+LL |         u.a;\n+   |         ^^^ use of borrowed `u.a`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:117:15\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+LL |         match v {\n+LL |             &[x, _, .., _, _] => println!(\"{}\", x),\n+   |               ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:122:18\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+...\n+LL |             &[_, x, .., _, _] => println!(\"{}\", x),\n+   |                  ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:127:25\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+...\n+LL |             &[_, _, .., x, _] => println!(\"{}\", x),\n+   |                         ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:132:28\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+...\n+LL |             &[_, _, .., _, x] => println!(\"{}\", x),\n+   |                            ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:143:15\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+LL |         match v {\n+LL |             &[x..] => println!(\"{:?}\", x),\n+   |               ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:148:18\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+...\n+LL |             &[_, x..] => println!(\"{:?}\", x),\n+   |                  ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:153:15\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+...\n+LL |             &[x.., _] => println!(\"{:?}\", x),\n+   |               ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:158:18\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+...\n+LL |             &[_, x.., _] => println!(\"{:?}\", x),\n+   |                  ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `e` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:171:13\n+   |\n+LL |         let x = &mut e;\n+   |                 ------ borrow of `e` occurs here\n+LL |         match e {\n+LL |             E::A(ref ax) =>\n+   |             ^^^^^^^^^^^^ use of borrowed `e`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0502]: cannot borrow `e.0` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:171:18\n+   |\n+LL |         let x = &mut e;\n+   |                 ------ mutable borrow occurs here\n+LL |         match e {\n+LL |             E::A(ref ax) =>\n+   |                  ^^^^^^ immutable borrow occurs here\n+...\n+LL |         drop(x);\n+   |              - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `e.x` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:175:23\n+   |\n+LL |         let x = &mut e;\n+   |                 ------ mutable borrow occurs here\n+...\n+LL |             E::B { x: ref bx } =>\n+   |                       ^^^^^^ immutable borrow occurs here\n+...\n+LL |         drop(x);\n+   |              - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:188:22\n+   |\n+LL |         let x = &mut s;\n+   |                 ------ mutable borrow occurs here\n+LL |         match s {\n+LL |             S  { y: (ref y0, _), .. } =>\n+   |                      ^^^^^^ immutable borrow occurs here\n+...\n+LL |         drop(x);\n+   |              - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:194:28\n+   |\n+LL |         let x = &mut s;\n+   |                 ------ mutable borrow occurs here\n+...\n+LL |             S  { x: F { y: ref x0, .. }, .. } =>\n+   |                            ^^^^^^ immutable borrow occurs here\n+...\n+LL |         drop(x);\n+   |              - mutable borrow later used here\n+\n+error[E0503]: cannot use `*v` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:240:9\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+LL |         v[0].y;\n+   |         ^^^^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[_].y` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:240:9\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+LL |         v[0].y;\n+   |         ^^^^^^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0502]: cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:251:24\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ mutable borrow occurs here\n+LL |         match v {\n+LL |             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n+   |                        ^^^^^^ immutable borrow occurs here\n+...\n+LL |         drop(x);\n+   |              - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:210:29\n+   |\n+LL |             let x = &mut block;\n+   |                     ---------- mutable borrow occurs here\n+LL |             let p: &'a u8 = &*block.current;\n+   |                             ^^^^^^^^^^^^^^^ immutable borrow occurs here\n+...\n+LL |             drop(x);\n+   |                  - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:227:33\n+   |\n+LL |             let x = &mut block;\n+   |                     ---------- mutable borrow occurs here\n+LL |             let p : *const u8 = &*(*block).current;\n+   |                                 ^^^^^^^^^^^^^^^^^^ immutable borrow occurs here\n+...\n+LL |             drop(x);\n+   |                  - mutable borrow later used here\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/borrowck-describe-lvalue.rs:282:22\n+   |\n+LL |                 drop(x);\n+   |                      - value moved here\n+LL |                 drop(x);\n+   |                      ^ value used here after move\n+   |\n+   = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n+\n+error: aborting due to 32 previous errors\n+\n+Some errors have detailed explanations: E0382, E0499, E0502, E0503.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "3468f29fb1a23d7496ace1bb356ed1b9483da1ba", "filename": "src/test/ui/borrowck/borrowck-for-loop-head-linkage.nll.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,27 @@\n+error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-for-loop-head-linkage.rs:7:9\n+   |\n+LL |     for &x in &vector {\n+   |               -------\n+   |               |\n+   |               immutable borrow occurs here\n+   |               immutable borrow later used here\n+LL |         let cap = vector.capacity();\n+LL |         vector.extend(repeat(0));\n+   |         ^^^^^^ mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-for-loop-head-linkage.rs:8:9\n+   |\n+LL |     for &x in &vector {\n+   |               -------\n+   |               |\n+   |               immutable borrow occurs here\n+   |               immutable borrow later used here\n+...\n+LL |         vector[1] = 5;\n+   |         ^^^^^^ mutable borrow occurs here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "7e4a6322d5f5cd8179f788e0cd79f5db83c25f0d", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.nll.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,41 @@\n+error[E0302]: cannot assign in a pattern guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:10:25\n+   |\n+LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n+   |                         ^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n+\n+error[E0301]: cannot mutably borrow in a pattern guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:15:38\n+   |\n+LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n+   |                                      ^ borrowed mutably in pattern guard\n+   |\n+   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+\n+error[E0302]: cannot assign in a pattern guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:15:41\n+   |\n+LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n+   |                                         ^^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n+\n+error[E0510]: cannot assign `x` in match guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:10:25\n+   |\n+LL |     match x {\n+   |           - value is immutable in match guard\n+LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n+   |                         ^^^^^^^^^^^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot mutably borrow `x` in match guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:15:33\n+   |\n+LL |     match x {\n+   |           - value is immutable in match guard\n+...\n+LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n+   |                                 ^^^^^^ cannot mutably borrow\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0301, E0302, E0510.\n+For more information about an error, try `rustc --explain E0301`."}, {"sha": "49c3f861ea9931278d78aea0c2c587dc672dd856", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.nll.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,23 @@\n+error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-object-lifetime.rs:20:13\n+   |\n+LL |     let y = x.borrowed();\n+   |             - immutable borrow occurs here\n+LL |     let z = x.mut_borrowed();\n+   |             ^ mutable borrow occurs here\n+LL |     y.use_ref();\n+   |     - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-object-lifetime.rs:26:13\n+   |\n+LL |     let y = x.borrowed();\n+   |             - immutable borrow occurs here\n+LL |     let z = &mut x;\n+   |             ^^^^^^ mutable borrow occurs here\n+LL |     y.use_ref();\n+   |     - immutable borrow later used here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "e6d0f88e3ea8bf42014772180f1b04c99f0100e1", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:9:5\n+   |\n+LL | fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n+   |                      -- -- lifetime `'b` defined here\n+   |                      |\n+   |                      lifetime `'a` defined here\n+LL |     S { pointer: &mut *p.pointer }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0da715bbdb76429b638fb4fe0aa464a946f2c5ea", "filename": "src/test/ui/borrowck/issue-7573.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,14 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/issue-7573.rs:21:9\n+   |\n+LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n+   |         ---------------- `lines_to_use` is declared here, outside of the closure body\n+LL |\n+LL |     let push_id = |installed_id: &CrateId| {\n+   |                    ------------ `installed_id` is a reference that is only valid in the closure body\n+...\n+LL |         lines_to_use.push(installed_id);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `installed_id` escapes the closure body here\n+\n+error: aborting due to previous error\n+"}, {"sha": "4797a9d456cc16c9bc3336024d4e1fa43cca7367", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/regions-escape-bound-fn-2.rs:8:18\n+   |\n+LL |     let mut x = None;\n+   |         ----- `x` is declared here, outside of the closure body\n+LL |     with_int(|y| x = Some(y));\n+   |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n+   |               |\n+   |               `y` is a reference that is only valid in the closure body\n+\n+error: aborting due to previous error\n+"}, {"sha": "2b3a9816e454df8cc2c227395f978e48477122e7", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/regions-escape-bound-fn.rs:8:18\n+   |\n+LL |     let mut x: Option<&isize> = None;\n+   |         ----- `x` is declared here, outside of the closure body\n+LL |     with_int(|y| x = Some(y));\n+   |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n+   |               |\n+   |               `y` is a reference that is only valid in the closure body\n+\n+error: aborting due to previous error\n+"}, {"sha": "8ceefd25344a45647f0e259ee4577784c46db5ae", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/regions-escape-unboxed-closure.rs:6:23\n+   |\n+LL |     let mut x: Option<&isize> = None;\n+   |         ----- `x` is declared here, outside of the closure body\n+LL |     with_int(&mut |y| x = Some(y));\n+   |                    -  ^^^^^^^^^^^ `y` escapes the closure body here\n+   |                    |\n+   |                    `y` is a reference that is only valid in the closure body\n+\n+error: aborting due to previous error\n+"}, {"sha": "d2ea5ab2077e577503f59f91e5adcf348d350dbb", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-future-compat-lint.nll.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,36 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:13:9\n+   |\n+LL |         let shared = &v;\n+   |                      -- immutable borrow occurs here\n+LL | \n+LL |         v.push(shared.len());\n+   |         ^      ------ immutable borrow later used here\n+   |         |\n+   |         mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:24:9\n+   |\n+LL |         let shared = &v;\n+   |                      -- immutable borrow occurs here\n+LL | \n+LL |         v.push(shared.len());\n+   |         ^      ------ immutable borrow later used here\n+   |         |\n+   |         mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:37:9\n+   |\n+LL |         let shared = &v;\n+   |                      -- immutable borrow occurs here\n+LL | \n+LL |         v.push(shared.len());\n+   |         ^      ------ immutable borrow later used here\n+   |         |\n+   |         mutable borrow occurs here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "a1afbb06390f8da53507f64c6fb26b3db5128339", "filename": "src/test/ui/c-variadic/variadic-ffi-4.nll.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,81 @@\n+error[E0621]: explicit lifetime required in the type of `ap`\n+  --> $DIR/variadic-ffi-4.rs:8:5\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape0<'a>(_: usize, ap: ...) -> VaList<'a> {\n+   |                                                       --- help: add explicit lifetime `'a` to the type of `ap`: `core::ffi::VaList<'a>`\n+LL |     ap\n+   |     ^^ lifetime `'a` required\n+\n+error[E0621]: explicit lifetime required in the type of `ap`\n+  --> $DIR/variadic-ffi-4.rs:12:5\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaList<'static> {\n+   |                                                   --- help: add explicit lifetime `'static` to the type of `ap`: `core::ffi::VaList<'static>`\n+LL |     ap\n+   |     ^^ lifetime `'static` required\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:16:33\n+   |\n+LL |     let _ = ap.with_copy(|ap| { ap });\n+   |                           ---   ^^ returning this value requires that `'1` must outlive `'2`\n+   |                           | |\n+   |                           | return type of closure is core::ffi::VaList<'2>\n+   |                           has type `core::ffi::VaList<'1>`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:20:5\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n+   |                                               -------               ------- has type `core::ffi::VaList<'1>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaList<'2>`\n+LL |     *ap0 = ap1;\n+   |     ^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:24:5\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+   |                                               ---               ------- has type `core::ffi::VaList<'2>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaList<'1>`\n+LL |     ap0 = &mut ap1;\n+   |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:24:5\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+   |                                               ---               ------- has type `core::ffi::VaList<'1>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaList<'2>`\n+LL |     ap0 = &mut ap1;\n+   |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error[E0384]: cannot assign to immutable argument `ap0`\n+  --> $DIR/variadic-ffi-4.rs:24:5\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+   |                                               --- help: make this binding mutable: `mut ap0`\n+LL |     ap0 = &mut ap1;\n+   |     ^^^^^^^^^^^^^^ cannot assign to immutable argument\n+\n+error[E0597]: `ap1` does not live long enough\n+  --> $DIR/variadic-ffi-4.rs:24:11\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+   |                                                    - let's call the lifetime of this reference `'1`\n+LL |     ap0 = &mut ap1;\n+   |     ------^^^^^^^^\n+   |     |     |\n+   |     |     borrowed value does not live long enough\n+   |     assignment requires that `ap1` is borrowed for `'1`\n+...\n+LL | }\n+   |  - `ap1` dropped here while still borrowed\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0384, E0597, E0621.\n+For more information about an error, try `rustc --explain E0384`."}, {"sha": "7e4ac4e8ce65691612531ce5a833516dd07980bb", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.nll.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,53 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/expect-fn-supply-fn.rs:30:5\n+   |\n+LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(fn(&'a u32), &i32) -> _`\n+   |\n+note: required by `with_closure_expecting_fn_with_free_region`\n+  --> $DIR/expect-fn-supply-fn.rs:1:1\n+   |\n+LL | / fn with_closure_expecting_fn_with_free_region<F>(_: F)\n+LL | |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n+LL | | {\n+LL | | }\n+   | |_^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/expect-fn-supply-fn.rs:37:5\n+   |\n+LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+   |\n+note: required by `with_closure_expecting_fn_with_bound_region`\n+  --> $DIR/expect-fn-supply-fn.rs:6:1\n+   |\n+LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+LL | |     where F: FnOnce(fn(&u32), &i32)\n+LL | | {\n+LL | | }\n+   | |_^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/expect-fn-supply-fn.rs:46:5\n+   |\n+LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+   |\n+note: required by `with_closure_expecting_fn_with_bound_region`\n+  --> $DIR/expect-fn-supply-fn.rs:6:1\n+   |\n+LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+LL | |     where F: FnOnce(fn(&u32), &i32)\n+LL | | {\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "1d12e2f585e8d020737a59b1ca3e1680e1c20fbc", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.nll.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,37 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n+   |\n+LL |   fn foo(x: &()) {\n+   |             --- help: add explicit lifetime `'static` to the type of `x`: `&'static ()`\n+LL | /     bar(|| {\n+LL | |\n+LL | |         let _ = x;\n+LL | |     })\n+   | |______^ lifetime `'static` required\n+\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:9\n+   |\n+LL |     bar(|| {\n+   |         ^^ may outlive borrowed value `x`\n+LL |\n+LL |         let _ = x;\n+   |                 - `x` is borrowed here\n+   |\n+note: function requires argument type to outlive `'static`\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n+   |\n+LL | /     bar(|| {\n+LL | |\n+LL | |         let _ = x;\n+LL | |     })\n+   | |______^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     bar(move || {\n+   |         ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0373, E0621.\n+For more information about an error, try `rustc --explain E0373`."}, {"sha": "bbf75302d564ae91bccc73d000b07f222aa523fa", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.nll.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,42 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/expect-region-supply-region.rs:18:9\n+   |\n+LL |     let mut f: Option<&u32> = None;\n+   |         ----- `f` is declared here, outside of the closure body\n+LL |     closure_expecting_bound(|x| {\n+   |                              - `x` is a reference that is only valid in the closure body\n+LL |         f = Some(x);\n+   |         ^^^^^^^^^^^ `x` escapes the closure body here\n+\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/expect-region-supply-region.rs:28:9\n+   |\n+LL |     let mut f: Option<&u32> = None;\n+   |         ----- `f` is declared here, outside of the closure body\n+LL |     closure_expecting_bound(|x: &u32| {\n+   |                              - `x` is a reference that is only valid in the closure body\n+LL |         f = Some(x);\n+   |         ^^^^^^^^^^^ `x` escapes the closure body here\n+\n+error: lifetime may not live long enough\n+  --> $DIR/expect-region-supply-region.rs:37:30\n+   |\n+LL | fn expect_bound_supply_named<'x>() {\n+   |                              -- lifetime `'x` defined here\n+...\n+LL |     closure_expecting_bound(|x: &'x u32| {\n+   |                              ^  - let's call the lifetime of this reference `'1`\n+   |                              |\n+   |                              requires that `'1` must outlive `'x`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/expect-region-supply-region.rs:37:30\n+   |\n+LL | fn expect_bound_supply_named<'x>() {\n+   |                              -- lifetime `'x` defined here\n+...\n+LL |     closure_expecting_bound(|x: &'x u32| {\n+   |                              ^ requires that `'x` must outlive `'static`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "30ab1f4d5ec0d0d0340217fc9c475dd6e9480617", "filename": "src/test/ui/consts/const_let_refutable.nll.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,31 @@\n+error[E0005]: refutable pattern in function argument: `&[]` not covered\n+  --> $DIR/const_let_refutable.rs:3:16\n+   |\n+LL | const fn slice([a, b]: &[i32]) -> i32 {\n+   |                ^^^^^^ pattern `&[]` not covered\n+\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const std::ops::Add::add` is not stable as `const fn`\n+  --> $DIR/const_let_refutable.rs:4:5\n+   |\n+LL |     a + b\n+   |     ^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0381]: use of possibly uninitialized variable: `a`\n+  --> $DIR/const_let_refutable.rs:4:5\n+   |\n+LL |     a + b\n+   |     ^ use of possibly uninitialized `a`\n+\n+error[E0381]: use of possibly uninitialized variable: `b`\n+  --> $DIR/const_let_refutable.rs:4:9\n+   |\n+LL |     a + b\n+   |         ^ use of possibly uninitialized `b`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0005, E0381, E0723.\n+For more information about an error, try `rustc --explain E0005`."}, {"sha": "8d962384a121ad00e37dc34be1e758e20bbf4e85", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "added", "additions": 328, "deletions": 0, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,328 @@\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:37:25\n+   |\n+LL |     const fn into_inner(self) -> T { self.0 }\n+   |                         ^^^^ constant functions cannot evaluate destructors\n+\n+error[E0723]: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:39:36\n+   |\n+LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n+   |                                    ^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:44:28\n+   |\n+LL |     const fn into_inner_lt(self) -> T { self.0 }\n+   |                            ^^^^ constant functions cannot evaluate destructors\n+\n+error[E0723]: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:46:42\n+   |\n+LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n+   |                                          ^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:51:27\n+   |\n+LL |     const fn into_inner_s(self) -> T { self.0 }\n+   |                           ^^^^ constant functions cannot evaluate destructors\n+\n+error[E0723]: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:53:38\n+   |\n+LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n+   |                                      ^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:58:39\n+   |\n+LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n+   |                                       ^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:76:16\n+   |\n+LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n+   |                ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:78:18\n+   |\n+LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n+   |                  ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:80:33\n+   |\n+LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n+   |                                 ^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:82:35\n+   |\n+LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n+   |                                   ^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: only int and `bool` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:84:35\n+   |\n+LL | const fn foo19_3(f: f32) -> f32 { -f }\n+   |                                   ^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:86:43\n+   |\n+LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n+   |                                           ^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: cannot access `static` items in const fn\n+  --> $DIR/min_const_fn.rs:90:27\n+   |\n+LL | const fn foo25() -> u32 { BAR }\n+   |                           ^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: cannot access `static` items in const fn\n+  --> $DIR/min_const_fn.rs:91:36\n+   |\n+LL | const fn foo26() -> &'static u32 { &BAR }\n+   |                                    ^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:92:42\n+   |\n+LL | const fn foo30(x: *const u32) -> usize { x as usize }\n+   |                                          ^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:94:63\n+   |\n+LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n+   |                                                               ^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:96:42\n+   |\n+LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n+   |                                          ^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:98:63\n+   |\n+LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n+   |                                                               ^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:100:38\n+   |\n+LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:102:29\n+   |\n+LL | const fn foo30_5(b: bool) { while b { } }\n+   |                             ^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:104:44\n+   |\n+LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n+   |                                            ^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:106:44\n+   |\n+LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n+   |                                            ^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:108:14\n+   |\n+LL | const fn inc(x: &mut i32) { *x += 1 }\n+   |              ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:113:6\n+   |\n+LL | impl<T: std::fmt::Debug> Foo<T> {\n+   |      ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:118:6\n+   |\n+LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n+   |      ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:123:6\n+   |\n+LL | impl<T: Sync + Sized> Foo<T> {\n+   |      ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: `impl Trait` in const fn is unstable\n+  --> $DIR/min_const_fn.rs:129:24\n+   |\n+LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:131:34\n+   |\n+LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n+   |                                  ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:133:22\n+   |\n+LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n+   |                      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: `impl Trait` in const fn is unstable\n+  --> $DIR/min_const_fn.rs:134:23\n+   |\n+LL | const fn no_rpit() -> impl std::fmt::Debug {}\n+   |                       ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:135:23\n+   |\n+LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n+   |                       ^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:136:32\n+   |\n+LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/min_const_fn.rs:136:63\n+   |\n+LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n+   |                                                               ^--\n+   |                                                               ||\n+   |                                                               |temporary value created here\n+   |                                                               returns a reference to data owned by the current function\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:144:41\n+   |\n+LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: function pointers in const fn are unstable\n+  --> $DIR/min_const_fn.rs:147:21\n+   |\n+LL | const fn no_fn_ptrs(_x: fn()) {}\n+   |                     ^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: function pointers in const fn are unstable\n+  --> $DIR/min_const_fn.rs:149:27\n+   |\n+LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n+   |                           ^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: aborting due to 37 previous errors\n+\n+Some errors have detailed explanations: E0515, E0723.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "9ffb549057bc63cf0a3b5bd6d9d921a1d9035cfd", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.nll.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,31 @@\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn_dyn.rs:9:5\n+   |\n+LL |     x.0.field;\n+   |     ^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn_dyn.rs:12:66\n+   |\n+LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n+   |                                                                  ^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/min_const_fn_dyn.rs:12:67\n+   |\n+LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n+   |                                                                  -^    - temporary value is freed at the end of this statement\n+   |                                                                  ||\n+   |                                                                  |creates a temporary which is freed while still in use\n+   |                                                                  cast requires that borrow lasts for `'static`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0716, E0723.\n+For more information about an error, try `rustc --explain E0716`."}, {"sha": "aceabf3316479f259137065d8f7b15331e45ba72", "filename": "src/test/ui/continue-after-missing-main.nll.stderr", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fcontinue-after-missing-main.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fcontinue-after-missing-main.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcontinue-after-missing-main.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,7 @@\n+error[E0601]: `main` function not found in crate `continue_after_missing_main`\n+   |\n+   = note: consider adding a `main` function to `$DIR/continue-after-missing-main.rs`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "01ee1c3a4d7fadbf7ec17219fcf79cff4a67648b", "filename": "src/test/ui/empty/empty-never-array.nll.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,23 @@\n+error[E0005]: refutable pattern in local binding: `T(_, _)` not covered\n+  --> $DIR/empty-never-array.rs:10:9\n+   |\n+LL | / enum Helper<T, U> {\n+LL | |     T(T, [!; 0]),\n+LL | |     #[allow(dead_code)]\n+LL | |     U(U),\n+LL | | }\n+   | |_- `Helper<T, U>` defined here\n+...\n+LL |       let Helper::U(u) = Helper::T(t, []);\n+   |           ^^^^^^^^^^^^ pattern `T(_, _)` not covered\n+\n+error[E0381]: use of possibly uninitialized variable: `u`\n+  --> $DIR/empty-never-array.rs:12:5\n+   |\n+LL |     u\n+   |     ^ use of possibly uninitialized `u`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0005, E0381.\n+For more information about an error, try `rustc --explain E0005`."}, {"sha": "e5671ee49e65470c0e56afe6727e7df7ba167df0", "filename": "src/test/ui/error-codes/E0502.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error[E0502]: cannot borrow `*a` as mutable because it is also borrowed as immutable\n+  --> $DIR/E0502.rs:4:9\n+   |\n+LL |     let ref y = a;\n+   |         ----- immutable borrow occurs here\n+LL |     bar(a);\n+   |         ^ mutable borrow occurs here\n+LL |     y.use_ref();\n+   |     - immutable borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "5140d1a9a7add00c84aa82def33936333a355888", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/E0621-does-not-trigger-for-closures.rs:15:45\n+   |\n+LL |     invoke(&x, |a, b| if a > b { a } else { b });\n+   |                    --                       ^ returning this value requires that `'1` must outlive `'2`\n+   |                    ||\n+   |                    |return type of closure is &'2 i32\n+   |                    has type `&'1 i32`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f316644156dc5ec5dd74e9884282efca898fd1a5", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,18 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:35\n+   |\n+LL | existential type WrongGeneric<T>: 'static;\n+   |                                   ^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n+   |\n+LL |     let z: i32 = x;\n+   |                  ^ expected i32, found opaque type\n+   |\n+   = note: expected type `i32`\n+              found type `WrongGeneric::<&{integer}>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4c157a05a5e050fcc992adbde7cba4d0677258e8", "filename": "src/test/ui/generator/auto-trait-regions.nll.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,41 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:44:24\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                        ^^^^                - temporary value is freed at the end of this statement\n+   |                        |\n+   |                        creates a temporary which is freed while still in use\n+LL |         yield;\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:44:35\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                                   ^^^^     - temporary value is freed at the end of this statement\n+   |                                   |\n+   |                                   creates a temporary which is freed while still in use\n+LL |         yield;\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error: higher-ranked subtype error\n+  --> $DIR/auto-trait-regions.rs:30:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/auto-trait-regions.rs:48:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "312a91adca6785f7803940278ce731e65ba8e48f", "filename": "src/test/ui/hashmap-iter-value-lifetime.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fhashmap-iter-value-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fhashmap-iter-value-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-iter-value-lifetime.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,15 @@\n+error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as immutable\n+  --> $DIR/hashmap-iter-value-lifetime.rs:7:5\n+   |\n+LL |     let (_, thing) = my_stuff.iter().next().unwrap();\n+   |                      -------- immutable borrow occurs here\n+LL | \n+LL |     my_stuff.clear();\n+   |     ^^^^^^^^ mutable borrow occurs here\n+LL | \n+LL |     println!(\"{}\", *thing);\n+   |                    ------ immutable borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "aa8e890c168dc3fdcfacdad7b8bbbdbd64bcee04", "filename": "src/test/ui/hashmap-lifetimes.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as immutable\n+  --> $DIR/hashmap-lifetimes.rs:6:5\n+   |\n+LL |     let mut it = my_stuff.iter();\n+   |                  -------- immutable borrow occurs here\n+LL |     my_stuff.insert(1, 43);\n+   |     ^^^^^^^^ mutable borrow occurs here\n+LL |     it;\n+   |     -- immutable borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "070fe12a2849fa77ce3f57ead4cb15ff1f3550a5", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,30 @@\n+error: lifetime may not live long enough\n+  --> $DIR/hr-subtype.rs:33:13\n+   |\n+LL |           fn subtype<'x,'y:'x,'z:'y>() {\n+   |                      -- -- lifetime `'y` defined here\n+   |                      |\n+   |                      lifetime `'x` defined here\n+LL |               gimme::<$t2>(None::<$t1>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n+...\n+LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n+LL | |                                     fn(Inv<'y>)) }\n+   | |__________________________________________________- in this macro invocation\n+\n+error: lifetime may not live long enough\n+  --> $DIR/hr-subtype.rs:39:13\n+   |\n+LL |           fn supertype<'x,'y:'x,'z:'y>() {\n+   |                        -- -- lifetime `'y` defined here\n+   |                        |\n+   |                        lifetime `'x` defined here\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n+...\n+LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n+LL | |                                     fn(Inv<'y>)) }\n+   | |__________________________________________________- in this macro invocation\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e140eaadd48a59cfc52428489c6f1697f002fce4", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.nll.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,16 @@\n+error: lifetime may not live long enough\n+  --> $DIR/hr-subtype.rs:39:13\n+   |\n+LL |           fn supertype<'x,'y:'x,'z:'y>() {\n+   |                        -- -- lifetime `'y` defined here\n+   |                        |\n+   |                        lifetime `'x` defined here\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n+...\n+LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n+LL | |                             fn(&'y u32)) }\n+   | |__________________________________________- in this macro invocation\n+\n+error: aborting due to previous error\n+"}, {"sha": "4de35d70c30a3d64be372a21fe519fa2d8ec6f5f", "filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/hrtb-cache-issue-54302.rs:19:5\n+   |\n+LL |     assert_deserialize_owned::<&'static str>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0522fc45d68f013cfb5d27104b2f4a19024f4df3", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.nll.stderr", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,77 @@\n+warning: function cannot return without recursing\n+  --> $DIR/hrtb-perfect-forwarding.rs:22:1\n+   |\n+LL | / fn no_hrtb<'b,T>(mut t: T)\n+LL | |     where T : Bar<&'b isize>\n+LL | | {\n+LL | |     // OK -- `T : Bar<&'b isize>`, and thus the impl above ensures that\n+LL | |     // `&mut T : Bar<&'b isize>`.\n+LL | |     no_hrtb(&mut t);\n+   | |     --------------- recursive call site\n+LL | | }\n+   | |_^ cannot return without recursing\n+   |\n+   = note: #[warn(unconditional_recursion)] on by default\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+warning: function cannot return without recursing\n+  --> $DIR/hrtb-perfect-forwarding.rs:30:1\n+   |\n+LL | / fn bar_hrtb<T>(mut t: T)\n+LL | |     where T : for<'b> Bar<&'b isize>\n+LL | | {\n+LL | |     // OK -- `T : for<'b> Bar<&'b isize>`, and thus the impl above\n+...  |\n+LL | |     bar_hrtb(&mut t);\n+   | |     ---------------- recursive call site\n+LL | | }\n+   | |_^ cannot return without recursing\n+   |\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+warning: function cannot return without recursing\n+  --> $DIR/hrtb-perfect-forwarding.rs:39:1\n+   |\n+LL | / fn foo_hrtb_bar_not<'b,T>(mut t: T)\n+LL | |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n+LL | | {\n+LL | |     // Not OK -- The forwarding impl for `Foo` requires that `Bar` also\n+...  |\n+LL | |     foo_hrtb_bar_not(&mut t);\n+   | |     ------------------------ recursive call site\n+LL | | }\n+   | |_^ cannot return without recursing\n+   |\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: higher-ranked subtype error\n+  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+   |\n+LL |     foo_hrtb_bar_not(&mut t);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: lifetime may not live long enough\n+  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+   |\n+LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n+   |                     -- lifetime `'b` defined here\n+...\n+LL |     foo_hrtb_bar_not(&mut t);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n+\n+warning: function cannot return without recursing\n+  --> $DIR/hrtb-perfect-forwarding.rs:49:1\n+   |\n+LL | / fn foo_hrtb_bar_hrtb<T>(mut t: T)\n+LL | |     where T : for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>\n+LL | | {\n+LL | |     // OK -- now we have `T : for<'b> Bar&'b isize>`.\n+LL | |     foo_hrtb_bar_hrtb(&mut t);\n+   | |     ------------------------- recursive call site\n+LL | | }\n+   | |_^ cannot return without recursing\n+   |\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "da30997a231110e28bc42c52f6e15765f26415f7", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,10 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/dyn-trait.rs:20:5\n+   |\n+LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n+   |                              - `x` is a reference that is only valid in the function body\n+LL |     static_val(x);\n+   |     ^^^^^^^^^^^^^ `x` escapes the function body here\n+\n+error: aborting due to previous error\n+"}, {"sha": "4b7c04f1e43317a3eb380d71b95482c8ac596571", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,51 @@\n+error: lifetime may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:3:23\n+   |\n+LL | fn elided(x: &i32) -> impl Copy { x }\n+   |              -        ^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n+   |              |\n+   |              let's call the lifetime of this reference `'1`\n+help: to allow this impl Trait to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+   |\n+LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n+   |                       ^^^^^^^^^^^^^^\n+\n+error: lifetime may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:6:32\n+   |\n+LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n+   |             --                 ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n+   |             |\n+   |             lifetime `'a` defined here\n+help: to allow this impl Trait to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+   |\n+LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n+   |                                ^^^^^^^^^^^^^^\n+\n+error: lifetime may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:12:69\n+   |\n+LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n+   |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:17:61\n+   |\n+LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n+   |                          --  -- lifetime `'b` defined here  ^^^^^^^^^^^^^^^^ opaque type requires that `'b` must outlive `'a`\n+   |                          |\n+   |                          lifetime `'a` defined here\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:22:51\n+   |\n+LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n+   |                                                   ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "0bf120cf7ecc1901772c66b2184008d80351cd43", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,26 @@\n+error: lifetime may not live long enough\n+  --> $DIR/static-return-lifetime-infered.rs:6:35\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n+   |                         -         ^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n+   |                         |\n+   |                         let's call the lifetime of this reference `'1`\n+help: to allow this impl Trait to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: lifetime may not live long enough\n+  --> $DIR/static-return-lifetime-infered.rs:10:37\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n+   |                    --               ^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n+   |                    |\n+   |                    lifetime `'a` defined here\n+help: to allow this impl Trait to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "039cb62f86656a69f511b6364d7935181de85bde", "filename": "src/test/ui/impl-trait/type_parameters_captured.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/type_parameters_captured.rs:7:20\n+   |\n+LL | fn foo<T>(x: T) -> impl Any + 'static {\n+   |                    ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "f5aee2d2d7e5cd5df2b96de64f0c696cce717bbb", "filename": "src/test/ui/in-band-lifetimes/mismatched.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,20 @@\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/mismatched.rs:4:42\n+   |\n+LL | fn foo(x: &'a u32, y: &u32) -> &'a u32 { y }\n+   |                       ----               ^ lifetime `'a` required\n+   |                       |\n+   |                       help: add explicit lifetime `'a` to the type of `y`: `&'a u32`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/mismatched.rs:6:46\n+   |\n+LL | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y }\n+   |             --          --                   ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |             |           |\n+   |             |           lifetime `'b` defined here\n+   |             lifetime `'a` defined here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "cd65bab2d4668688d6c83df001b8203c83bc4ee1", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n+  --> $DIR/mismatched_trait_impl.rs:9:5\n+   |\n+LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 9:5...\n+  --> $DIR/mismatched_trait_impl.rs:9:5\n+   |\n+LL | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+LL | |         x\n+LL | |     }\n+   | |_____^\n+note: ...but the lifetime must also be valid for the lifetime 'a as defined on the method body at 9:32...\n+  --> $DIR/mismatched_trait_impl.rs:9:32\n+   |\n+LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+   |                                ^^\n+   = note: ...so that the method type is compatible with trait:\n+           expected fn(&i32, &'a u32, &u32) -> &'a u32\n+              found fn(&i32, &u32, &u32) -> &u32\n+\n+error: aborting due to previous error\n+"}, {"sha": "45f29fd79565b09c70349ea23fb1915d6c465aca", "filename": "src/test/ui/issues/issue-10291.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-10291.rs:3:9\n+   |\n+LL | fn test<'x>(x: &'x isize) {\n+   |         -- lifetime `'x` defined here\n+LL |     drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n+LL |         x\n+   |         ^ returning this value requires that `'x` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8368978deab1a03bf544778c89d3c2aee92cbdf8", "filename": "src/test/ui/issues/issue-13058.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-13058.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-13058.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13058.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error[E0621]: explicit lifetime required in the type of `cont`\n+  --> $DIR/issue-13058.rs:14:21\n+   |\n+LL | fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n+   |                                                                     -- help: add explicit lifetime `'r` to the type of `cont`: `&'r T`\n+LL | {\n+LL |     let cont_iter = cont.iter();\n+   |                     ^^^^^^^^^^^ lifetime `'r` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "f142e260a2313ade72cc4bc8b679deabaada9554", "filename": "src/test/ui/issues/issue-15034.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error[E0621]: explicit lifetime required in the type of `lexer`\n+  --> $DIR/issue-15034.rs:17:9\n+   |\n+LL |     pub fn new(lexer: &'a mut Lexer) -> Parser<'a> {\n+   |                       ------------- help: add explicit lifetime `'a` to the type of `lexer`: `&'a mut Lexer<'a>`\n+LL |         Parser { lexer: lexer }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "a8495846b3610e544fd318ae296de9c89e3e4c8a", "filename": "src/test/ui/issues/issue-15381.nll.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-15381.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-15381.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15381.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,16 @@\n+error[E0005]: refutable pattern in `for` loop binding: `&[]` not covered\n+  --> $DIR/issue-15381.rs:4:9\n+   |\n+LL |     for &[x,y,z] in values.chunks(3).filter(|&xs| xs.len() == 3) {\n+   |         ^^^^^^^^ pattern `&[]` not covered\n+\n+error[E0381]: borrow of possibly uninitialized variable: `y`\n+  --> $DIR/issue-15381.rs:6:26\n+   |\n+LL |         println!(\"y={}\", y);\n+   |                          ^ use of possibly uninitialized `y`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0005, E0381.\n+For more information about an error, try `rustc --explain E0005`."}, {"sha": "ea6b69d1a76c6effed033a140295168d05a2125c", "filename": "src/test/ui/issues/issue-16683.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,10 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/issue-16683.rs:4:9\n+   |\n+LL |     fn b(&self) {\n+   |          ----- `self` is a reference that is only valid in the function body\n+LL |         self.a();\n+   |         ^^^^^^^^ `self` escapes the function body here\n+\n+error: aborting due to previous error\n+"}, {"sha": "7436ebd920ee2aed31a0af93681f28683334c31d", "filename": "src/test/ui/issues/issue-17728.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/issue-17728.rs:109:14\n+   |\n+LL | /     match to_parse {\n+LL | |         \"w\" | \"west\" => RoomDirection::West,\n+LL | |         \"e\" | \"east\" => RoomDirection::East,\n+LL | |         \"n\" | \"north\" => RoomDirection::North,\n+...  |\n+LL | |         \"down\" => RoomDirection::Down,\n+   | |                   ------------------- this and all prior arms are found to be of type `RoomDirection`\n+LL | |         _ => None\n+   | |              ^^^^ expected enum `RoomDirection`, found enum `std::option::Option`\n+LL | |     }\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected type `RoomDirection`\n+              found type `std::option::Option<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "b9dc9da3683d60573078708872e7dd6d888cff84", "filename": "src/test/ui/issues/issue-17758.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,10 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/issue-17758.rs:7:9\n+   |\n+LL |     fn bar(&self) {\n+   |            ----- `self` is a reference that is only valid in the function body\n+LL |         self.foo();\n+   |         ^^^^^^^^^^ `self` escapes the function body here\n+\n+error: aborting due to previous error\n+"}, {"sha": "c7601caacdca3fb4e56bc147a45e82e0a05fb767", "filename": "src/test/ui/issues/issue-26217.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-26217.rs:4:5\n+   |\n+LL | fn bar<'a>() {\n+   |        -- lifetime `'a` defined here\n+LL |     foo::<&'a i32>();\n+   |     ^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5cf9856e4dc7e585f7748e7381ea7cee2067a8be", "filename": "src/test/ui/issues/issue-28848.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-28848.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-28848.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28848.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-28848.rs:10:5\n+   |\n+LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n+   |            --  -- lifetime `'b` defined here\n+   |            |\n+   |            lifetime `'a` defined here\n+LL |     Foo::<'a, 'b>::xmute(u)\n+   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "776a724d3106af25ba69a9393465c34cc1408b54", "filename": "src/test/ui/issues/issue-40510-1.migrate.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-40510-1.rs:11:9\n+   |\n+LL |     || {\n+   |      - inferred to be a `FnMut` closure\n+LL |         &mut x\n+   |         ^^^^^^ returns a reference to a captured variable which escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "17d1c48d075460b3ec368e72ef9a16922d726ab9", "filename": "src/test/ui/issues/issue-40510-1.migrate.stderr", "status": "renamed", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -1,5 +1,5 @@\n warning: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-40510-1.rs:8:9\n+  --> $DIR/issue-40510-1.rs:11:9\n    |\n LL |     || {\n    |      - inferred to be a `FnMut` closure\n@@ -11,3 +11,11 @@ LL |         &mut x\n    = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n+error: compilation successful\n+  --> $DIR/issue-40510-1.rs:20:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+", "previous_filename": "src/test/ui/issues/issue-40510-1.stderr"}, {"sha": "776a724d3106af25ba69a9393465c34cc1408b54", "filename": "src/test/ui/issues/issue-40510-1.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-40510-1.rs:11:9\n+   |\n+LL |     || {\n+   |      - inferred to be a `FnMut` closure\n+LL |         &mut x\n+   |         ^^^^^^ returns a reference to a captured variable which escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "6ecbeefd88115801d2b6a5f9a5204ac886f5df7f", "filename": "src/test/ui/issues/issue-40510-1.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -1,13 +1,21 @@\n-// compile-pass\n+#![feature(rustc_attrs)]\n #![allow(unused)]\n \n+// revisions: migrate nll\n+#![cfg_attr(nll, feature(nll))]\n+\n fn f() {\n     let mut x: Box<()> = Box::new(());\n \n     || {\n         &mut x\n     };\n+    //[migrate]~^^ WARNING captured variable cannot escape `FnMut` closure body\n+    //[migrate]~| WARNING this error has been downgraded to a warning\n+    //[migrate]~| WARNING this warning will become a hard error in the future\n+    //[nll]~^^^^^ ERROR captured variable cannot escape `FnMut` closure body\n }\n \n-\n+#[rustc_error]\n fn main() {}\n+//[migrate]~^ ERROR"}, {"sha": "a49475a8570a1edde617e98d5304ce50144eefc3", "filename": "src/test/ui/issues/issue-40510-3.migrate.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,15 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-40510-3.rs:11:9\n+   |\n+LL |       || {\n+   |        - inferred to be a `FnMut` closure\n+LL | /         || {\n+LL | |             x.push(())\n+LL | |         }\n+   | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "692aa1053779ac586e5ec470064c6b18bd9b9ff9", "filename": "src/test/ui/issues/issue-40510-3.migrate.stderr", "status": "renamed", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -1,5 +1,5 @@\n warning: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-40510-3.rs:8:9\n+  --> $DIR/issue-40510-3.rs:11:9\n    |\n LL |       || {\n    |        - inferred to be a `FnMut` closure\n@@ -13,3 +13,11 @@ LL | |         }\n    = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n+error: compilation successful\n+  --> $DIR/issue-40510-3.rs:22:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+", "previous_filename": "src/test/ui/issues/issue-40510-3.stderr"}, {"sha": "a49475a8570a1edde617e98d5304ce50144eefc3", "filename": "src/test/ui/issues/issue-40510-3.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,15 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-40510-3.rs:11:9\n+   |\n+LL |       || {\n+   |        - inferred to be a `FnMut` closure\n+LL | /         || {\n+LL | |             x.push(())\n+LL | |         }\n+   | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "205d982363128d11d70c5d705580e2a3066284e5", "filename": "src/test/ui/issues/issue-40510-3.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -1,15 +1,23 @@\n-// compile-pass\n+#![feature(rustc_attrs)]\n #![allow(unused)]\n \n+// revisions: migrate nll\n+#![cfg_attr(nll, feature(nll))]\n+\n fn f() {\n     let mut x: Vec<()> = Vec::new();\n \n     || {\n         || {\n             x.push(())\n         }\n+        //[migrate]~^^^ WARNING captured variable cannot escape `FnMut` closure body\n+        //[migrate]~| WARNING this error has been downgraded to a warning\n+        //[migrate]~| WARNING this warning will become a hard error in the future\n+        //[nll]~^^^^^^ ERROR captured variable cannot escape `FnMut` closure body\n     };\n }\n \n-\n+#[rustc_error]\n fn main() {}\n+//[migrate]~^ ERROR"}, {"sha": "9c6f8d4532a70ab7d895afaedf103424a5ea11ff", "filename": "src/test/ui/issues/issue-49824.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,18 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-49824.rs:10:9\n+   |\n+LL |       || {\n+   |        - inferred to be a `FnMut` closure\n+LL | /         || {\n+LL | |\n+LL | |\n+LL | |\n+LL | |             let _y = &mut x;\n+LL | |         }\n+   | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "eba875de2152b2926478aa96b4fa50d1adf3bff1", "filename": "src/test/ui/issues/issue-52213.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-52213.rs:3:20\n+   |\n+LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n+   |                       --  -- lifetime `'b` defined here\n+   |                       |\n+   |                       lifetime `'a` defined here\n+LL |     match (&t,) {\n+LL |         ((u,),) => u,\n+   |                    ^ returning this value requires that `'a` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "20f19b2596716db6f8489ea84a7618681e80bfc7", "filename": "src/test/ui/issues/issue-52533-1.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-52533-1.rs:9:18\n+   |\n+LL |     gimme(|x, y| y)\n+   |            -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |            |  |\n+   |            |  has type `&Foo<'_, '1, u32>`\n+   |            has type `&Foo<'_, '2, u32>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c764736d79878858ef4224b407f6f3603da39571", "filename": "src/test/ui/issues/issue-52533.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-52533.rs:5:16\n+   |\n+LL |     foo(|a, b| b)\n+   |          -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |          |  |\n+   |          |  has type `&'1 u32`\n+   |          has type `&'2 u32`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7463a3f286f4cfeea1641ce9c3751fbfaac582ab", "filename": "src/test/ui/issues/issue-54302-cases.nll.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,26 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-54302-cases.rs:63:5\n+   |\n+LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-54302-cases.rs:69:5\n+   |\n+LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-54302-cases.rs:75:5\n+   |\n+LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-54302-cases.rs:81:5\n+   |\n+LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e68de0312824dac08f14311bbc394c73f608e7ac", "filename": "src/test/ui/issues/issue-54302.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-54302.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-54302.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-54302.rs:13:5\n+   |\n+LL |     assert_deserialize_owned::<&'static str>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "dd38bb62912513d36461c2d96cf57a38104ca292", "filename": "src/test/ui/issues/issue-55731.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-55731.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-55731.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-55731.rs:48:5\n+   |\n+LL | /     multi(Map {\n+LL | |         i: Cloned(PhantomData),\n+LL | |         f: X,\n+LL | |     });\n+   | |______^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5809a56cd4b6b638d5f6811fd8b72d28aebae0ab", "filename": "src/test/ui/issues/issue-55796.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55796.rs:16:9\n+   |\n+LL | pub trait Graph<'a> {\n+   |                 -- lifetime `'a` defined here\n+...\n+LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55796.rs:21:9\n+   |\n+LL | pub trait Graph<'a> {\n+   |                 -- lifetime `'a` defined here\n+...\n+LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "70310780b4330e5e2ce2686172213859ba2b690f", "filename": "src/test/ui/issues/issue-57843.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-57843.rs:23:9\n+   |\n+LL |     Foo(Box::new(|_| ()));\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c1f662fda610b41fcee81e8a9532361bd6e56331", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,63 @@\n+error[E0277]: `T` cannot be sent between threads safely\n+  --> $DIR/kindck-impl-type-params.rs:18:13\n+   |\n+LL |     let a = &t as &Gettable<T>;\n+   |             ^^ `T` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `T`\n+   = help: consider adding a `where T: std::marker::Send` bound\n+   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+   = note: required for the cast to the object type `dyn Gettable<T>`\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/kindck-impl-type-params.rs:18:13\n+   |\n+LL |     let a = &t as &Gettable<T>;\n+   |             ^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::marker::Copy` bound\n+   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+   = note: required for the cast to the object type `dyn Gettable<T>`\n+\n+error[E0277]: `T` cannot be sent between threads safely\n+  --> $DIR/kindck-impl-type-params.rs:25:27\n+   |\n+LL |     let a: &Gettable<T> = &t;\n+   |                           ^^ `T` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `T`\n+   = help: consider adding a `where T: std::marker::Send` bound\n+   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+   = note: required for the cast to the object type `dyn Gettable<T>`\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/kindck-impl-type-params.rs:25:27\n+   |\n+LL |     let a: &Gettable<T> = &t;\n+   |                           ^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::marker::Copy` bound\n+   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+   = note: required for the cast to the object type `dyn Gettable<T>`\n+\n+error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n+  --> $DIR/kindck-impl-type-params.rs:38:13\n+   |\n+LL |     let a = t as Box<Gettable<String>>;\n+   |             ^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   |\n+   = note: required because of the requirements on the impl of `Gettable<std::string::String>` for `S<std::string::String>`\n+   = note: required for the cast to the object type `dyn Gettable<std::string::String>`\n+\n+error[E0277]: the trait bound `foo3::Foo: std::marker::Copy` is not satisfied\n+  --> $DIR/kindck-impl-type-params.rs:46:33\n+   |\n+LL |     let a: Box<Gettable<Foo>> = t;\n+   |                                 ^ the trait `std::marker::Copy` is not implemented for `foo3::Foo`\n+   |\n+   = note: required because of the requirements on the impl of `Gettable<foo3::Foo>` for `S<foo3::Foo>`\n+   = note: required for the cast to the object type `dyn Gettable<foo3::Foo>`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "1df7412132bd9fa6b787c8d95a16c8e80927a2db", "filename": "src/test/ui/kindck/kindck-send-object1.nll.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,32 @@\n+error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n+  --> $DIR/kindck-send-object1.rs:10:5\n+   |\n+LL |     assert_send::<&'a Dummy>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `(dyn Dummy + 'a)`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `&'a (dyn Dummy + 'a)`\n+note: required by `assert_send`\n+  --> $DIR/kindck-send-object1.rs:5:1\n+   |\n+LL | fn assert_send<T:Send+'static>() { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n+  --> $DIR/kindck-send-object1.rs:29:5\n+   |\n+LL |     assert_send::<Box<Dummy+'a>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `(dyn Dummy + 'a)`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<(dyn Dummy + 'a)>`\n+   = note: required because it appears within the type `std::boxed::Box<(dyn Dummy + 'a)>`\n+note: required by `assert_send`\n+  --> $DIR/kindck-send-object1.rs:5:1\n+   |\n+LL | fn assert_send<T:Send+'static>() { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8b24563e920041d1c05668cf0779b4a5a3bf38df", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,20 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/lifetime-bound-will-change-warning.rs:34:5\n+   |\n+LL | fn test2<'a>(x: &'a Box<Fn()+'a>) {\n+   |              - `x` is a reference that is only valid in the function body\n+LL |     // but ref_obj will not, so warn.\n+LL |     ref_obj(x)\n+   |     ^^^^^^^^^^ `x` escapes the function body here\n+\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/lifetime-bound-will-change-warning.rs:39:5\n+   |\n+LL | fn test2cc<'a>(x: &'a Box<Fn()+'a>) {\n+   |                - `x` is a reference that is only valid in the function body\n+LL |     // same as test2, but cross crate\n+LL |     lib::ref_obj(x)\n+   |     ^^^^^^^^^^^^^^^ `x` escapes the function body here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fc9093bb2e4b8dccf4bea23e621c6c97daecb5e4", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:11:20\n+   |\n+LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   |            --     - let's call the lifetime of this reference `'1`\n+   |            |\n+   |            lifetime `'a` defined here\n+LL | \n+LL |         if x > y { x } else { y }\n+   |                    ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3384c24da8fbe5589518e55817b1ce82906f73f0", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:8:5\n+   |\n+LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n+   |          --  - let's call the lifetime of this reference `'1`\n+   |          |\n+   |          lifetime `'a` defined here\n+LL | \n+LL |     x\n+   |     ^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5ef29076e07bf0c6561cc493ba05c3af26fa2bef", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:8:30\n+   |\n+LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n+   |            --  - let's call the lifetime of this reference `'1`\n+   |            |\n+   |            lifetime `'a` defined here\n+LL | \n+LL |         if true { x } else { self }\n+   |                              ^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+\n+error: aborting due to previous error\n+"}, {"sha": "90d4754ebab82d7dfd91ac30c46e38c9855e3faf", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-2.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex2a-push-one-existing-name-2.rs:6:5\n+   |\n+LL | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n+   |               -------- help: add explicit lifetime `'a` to the type of `x`: `Ref<'a, i32>`\n+LL |     y.push(x);\n+   |     ^^^^^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "a03e16b3b791989406c759cde525f850cfd754f4", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:8:5\n+   |\n+LL | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n+   |                                          -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`\n+...\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "487b34e3d18f4c3d6281b8893a9ea1d96b1d83c0", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/ex2a-push-one-existing-name.rs:6:5\n+   |\n+LL | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n+   |                                          -------- help: add explicit lifetime `'a` to the type of `y`: `Ref<'a, i32>`\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "735f7a0dfc633cc4e66ca96deb14ed56ec9a9263", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2b-push-no-existing-names.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex2b-push-no-existing-names.rs:6:5\n+   |\n+LL | fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n+   |        -                      - has type `Ref<'1, i32>`\n+   |        |\n+   |        has type `&mut std::vec::Vec<Ref<'2, i32>>`\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "fbefa1f5667c75c5e60acb2a1cbf37b1cbe68c8c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex2c-push-inference-variable.rs:7:5\n+   |\n+LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n+   |            --  -- lifetime `'c` defined here\n+   |            |\n+   |            lifetime `'b` defined here\n+LL |     let z = Ref { data: y.data };\n+LL |     x.push(z);\n+   |     ^^^^^^^^^ argument requires that `'c` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d889eb4afdbe5843b3098d8a206a15b9633327d9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex2d-push-inference-variable-2.rs:8:5\n+   |\n+LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n+   |            --  -- lifetime `'c` defined here\n+   |            |\n+   |            lifetime `'b` defined here\n+...\n+LL |     a.push(b);\n+   |     ^^^^^^^^^ argument requires that `'c` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "39eb4079352c313e53ad54fe6c52fc2a11968fe1", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex2e-push-inference-variable-3.rs:8:5\n+   |\n+LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n+   |            --  -- lifetime `'c` defined here\n+   |            |\n+   |            lifetime `'b` defined here\n+...\n+LL |     Vec::push(a, b);\n+   |     ^^^^^^^^^^^^^^^ argument requires that `'c` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a94f9a799061a194c92e317c00feb577774cce86", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-2.rs:2:5\n+   |\n+LL | fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n+   |                                   -             - let's call the lifetime of this reference `'1`\n+   |                                   |\n+   |                                   let's call the lifetime of this reference `'2`\n+LL |     *v = x;\n+   |     ^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "779e2eb8b920588417086f76ef01debd2a77e0e6", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.nll.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,22 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-3.rs:2:5\n+   |\n+LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+   |                     -                   - let's call the lifetime of this reference `'1`\n+   |                     |\n+   |                     let's call the lifetime of this reference `'2`\n+LL |     z.push((x,y));\n+   |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-3.rs:2:5\n+   |\n+LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+   |                         -                    - let's call the lifetime of this reference `'1`\n+   |                         |\n+   |                         let's call the lifetime of this reference `'2`\n+LL |     z.push((x,y));\n+   |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4c0ffe5c0901abcb6826b2bc33fcfe364fbb0bbc", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:7:5\n+   |\n+LL | fn foo(mut x: Ref, y: Ref) {\n+   |        -----       - has type `Ref<'_, '1>`\n+   |        |\n+   |        has type `Ref<'_, '2>`\n+LL |     x.b = y.b;\n+   |     ^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "97c665347f6eca5e081f4a7347c034b706f242ba", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:7:5\n+   |\n+LL | fn foo(mut x: Ref) {\n+   |        -----\n+   |        |\n+   |        has type `Ref<'_, '1>`\n+   |        has type `Ref<'2, '_>`\n+LL |     x.a = x.b;\n+   |     ^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a39bb165806f2b2f7600420d05b3d235c82b0307", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:9:5\n+   |\n+LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "48ce5301adef3ceaaf5a7231cbb24459b9ac543c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:6:5\n+   |\n+LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f9c33c2480693b5cd7f4363ee70c279b9dc0e548", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:6:5\n+   |\n+LL | fn foo(mut x: Vec<Ref>, y: Ref) {\n+   |        -----            - has type `Ref<'1>`\n+   |        |\n+   |        has type `std::vec::Vec<Ref<'2>>`\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0996068398009c3abc995f6cd5d1edab666e64f6", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:2:5\n+   |\n+LL | fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5751c3194894e228583bcfed231c11d52877ddf3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,21 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:4:5\n+   |\n+LL | fn foo(mut x: Ref, y: &u32) {\n+   |        -----          - let's call the lifetime of this reference `'2`\n+   |        |\n+   |        has type `Ref<'_, '1>`\n+LL |     y = x.b;\n+   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error[E0384]: cannot assign to immutable argument `y`\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:4:5\n+   |\n+LL | fn foo(mut x: Ref, y: &u32) {\n+   |                    - help: make this binding mutable: `mut y`\n+LL |     y = x.b;\n+   |     ^^^^^^^ cannot assign to immutable argument\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0384`."}, {"sha": "79e7e8e157d9510f375d001d525faea8b8f4e223", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:4:5\n+   |\n+LL | fn foo(mut y: Ref, x: &u32) {\n+   |        -----          - let's call the lifetime of this reference `'1`\n+   |        |\n+   |        has type `Ref<'_, '2>`\n+LL |     y.b = x;\n+   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "53615fd1aba696264ceb114d1a300947bbaeb56b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:4:5\n+   |\n+LL | fn foo(mut y: Ref, x: &u32) {\n+   |        -----          - let's call the lifetime of this reference `'1`\n+   |        |\n+   |        has type `Ref<'_, '2>`\n+LL |     y.b = x;\n+   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6ff44116737567f42649066c02208bc5cd2f5d17", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:7:5\n+   |\n+LL | fn foo(mut x: Ref, y: &u32) {\n+   |        -----          - let's call the lifetime of this reference `'1`\n+   |        |\n+   |        has type `Ref<'_, '2>`\n+LL |     x.b = y;\n+   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1c258ad98ba108584b2f659a9f7f6a04af2203a7", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:7:5\n+   |\n+LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n+   |              -         - let's call the lifetime of this reference `'1`\n+   |              |\n+   |              let's call the lifetime of this reference `'2`\n+LL |     x\n+   |     ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ffe39fdd8c9f5545af1d583a1fc046e2df3c4a4d", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:7:19\n+   |\n+LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n+   |                -         - let's call the lifetime of this reference `'1`\n+   |                |\n+   |                let's call the lifetime of this reference `'2`\n+LL |         if true { x } else { self }\n+   |                   ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: aborting due to previous error\n+"}, {"sha": "33be98c64910d1efe6ad8d0a037be3ae0ae82f81", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,21 @@\n+error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:3\n+   |\n+LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n+   |                        - help: consider changing this to be mutable: `mut y`\n+LL |   y.push(z);\n+   |   ^ cannot borrow as mutable\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:3\n+   |\n+LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n+   |                               -        - let's call the lifetime of this reference `'1`\n+   |                               |\n+   |                               let's call the lifetime of this reference `'2`\n+LL |   y.push(z);\n+   |   ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "f3502674849ef474447f01ed5fc0105974230bdb", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-impl-items.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-using-impl-items.rs:6:9\n+   |\n+LL |     fn foo(x: &mut Vec<&u8>, y: &u8) {\n+   |                        -        - let's call the lifetime of this reference `'1`\n+   |                        |\n+   |                        let's call the lifetime of this reference `'2`\n+LL |         x.push(y);\n+   |         ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c4e7ff90069db0b8a180df1ac2a907c44c92a768", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,21 @@\n+error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3\n+   |\n+LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+   |                              - help: consider changing this to be mutable: `mut y`\n+LL |   y.push(z);\n+   |   ^ cannot borrow as mutable\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3\n+   |\n+LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+   |                                     -        - let's call the lifetime of this reference `'1`\n+   |                                     |\n+   |                                     let's call the lifetime of this reference `'2`\n+LL |   y.push(z);\n+   |   ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "6989acfa1963bce2c239ff5c274ac2d0ecaef0fb", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions.rs:2:5\n+   |\n+LL | fn foo(x: &mut Vec<&u8>, y: &u8) {\n+   |                    -        - let's call the lifetime of this reference `'1`\n+   |                    |\n+   |                    let's call the lifetime of this reference `'2`\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "832688f5162b346d28b19dccb86d64cd92d09575", "filename": "src/test/ui/lub-if.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flub-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flub-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-if.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime may not live long enough\n+  --> $DIR/lub-if.rs:28:9\n+   |\n+LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n+   |                 -- lifetime `'a` defined here\n+...\n+LL |         s\n+   |         ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lub-if.rs:35:9\n+   |\n+LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n+   |                 -- lifetime `'a` defined here\n+...\n+LL |         s\n+   |         ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3a344a77d2c2d779935c478cf2e15d2dfe8fdb1b", "filename": "src/test/ui/lub-match.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flub-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Flub-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-match.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime may not live long enough\n+  --> $DIR/lub-match.rs:30:13\n+   |\n+LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n+   |                 -- lifetime `'a` defined here\n+...\n+LL |             s\n+   |             ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lub-match.rs:39:13\n+   |\n+LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n+   |                 -- lifetime `'a` defined here\n+...\n+LL |             s\n+   |             ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "505b8db6a333251e4dc7b258bb54ff19c16e49b9", "filename": "src/test/ui/match/match-ref-mut-invariance.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/match-ref-mut-invariance.rs:10:9\n+   |\n+LL | impl<'b> S<'b> {\n+   |      -- lifetime `'b` defined here\n+LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n+   |            -- lifetime `'a` defined here\n+LL |         match self.0 { ref mut x => x }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ab5f43d022281ee42c051c05765e9f70436113f3", "filename": "src/test/ui/match/match-ref-mut-let-invariance.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/match-ref-mut-let-invariance.rs:11:9\n+   |\n+LL | impl<'b> S<'b> {\n+   |      -- lifetime `'b` defined here\n+LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n+   |            -- lifetime `'a` defined here\n+LL |         let ref mut x = self.0;\n+LL |         x\n+   |         ^ returning this value requires that `'a` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "279123069877f370f2171ba1ba519d52591cac36", "filename": "src/test/ui/nll/get_default.nll.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,48 @@\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:21:17\n+   |\n+LL | fn ok(map: &mut Map) -> &String {\n+   |            - let's call the lifetime of this reference `'1`\n+LL |     loop {\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+LL |             Some(v) => {\n+LL |                 return v;\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n+...\n+LL |                 map.set(String::new()); // Ideally, this would not error.\n+   |                 ^^^ mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:32:17\n+   |\n+LL | fn err(map: &mut Map) -> &String {\n+   |             - let's call the lifetime of this reference `'1`\n+LL |     loop {\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+LL |             Some(v) => {\n+LL |                 map.set(String::new()); // Both AST and MIR error here\n+   |                 ^^^ mutable borrow occurs here\n+LL |\n+LL |                 return v;\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n+\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:37:17\n+   |\n+LL | fn err(map: &mut Map) -> &String {\n+   |             - let's call the lifetime of this reference `'1`\n+LL |     loop {\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+...\n+LL |                 return v;\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n+...\n+LL |                 map.set(String::new()); // Ideally, just AST would error here\n+   |                 ^^^ mutable borrow occurs here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "322930984a5458fc19ed79f205ff5e64786a8fe5", "filename": "src/test/ui/nll/region-ends-after-if-condition.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,15 @@\n+error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable\n+  --> $DIR/region-ends-after-if-condition.rs:26:9\n+   |\n+LL |     let value = &my_struct.field;\n+   |                 ---------------- immutable borrow occurs here\n+LL |     if value.is_empty() {\n+LL |         my_struct.field.push_str(\"Hello, world!\");\n+   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(value);\n+   |          ----- immutable borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "58bfb600452e036a48745130134eda0278982757", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-lifetime.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error[E0309]: the associated type `<T as MyTrait<'_>>::Output` may not live long enough\n+  --> $DIR/projection-where-clause-env-wrong-lifetime.rs:14:5\n+   |\n+LL |     bar::<<T as MyTrait<'a>>::Output>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as MyTrait<'_>>::Output: 'a`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "19cdd66ef759c2ea1bf9bf211c7135b2d83c036b", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/object-lifetime-default-elision.rs:71:5\n+   |\n+LL | fn load3<'a,'b>(ss: &'a SomeTrait) -> &'b SomeTrait {\n+   |          -- -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+...\n+LL |     ss\n+   |     ^^ returning this value requires that `'a` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "9e68647214c277e939417ea3ba34235c32596155", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.nll.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,28 @@\n+error[E0621]: explicit lifetime required in the type of `ss`\n+  --> $DIR/object-lifetime-default-from-box-error.rs:18:5\n+   |\n+LL | fn load(ss: &mut SomeStruct) -> Box<SomeTrait> {\n+   |             --------------- help: add explicit lifetime `'static` to the type of `ss`: `&mut SomeStruct<'static>`\n+...\n+LL |     ss.r\n+   |     ^^^^ lifetime `'static` required\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/object-lifetime-default-from-box-error.rs:18:5\n+   |\n+LL |     ss.r\n+   |     ^^^^ cannot move out of borrowed content\n+\n+error[E0621]: explicit lifetime required in the type of `ss`\n+  --> $DIR/object-lifetime-default-from-box-error.rs:31:5\n+   |\n+LL | fn store1<'b>(ss: &mut SomeStruct, b: Box<SomeTrait+'b>) {\n+   |                   --------------- help: add explicit lifetime `'b` to the type of `ss`: `&mut SomeStruct<'b>`\n+...\n+LL |     ss.r = b;\n+   |     ^^^^ lifetime `'b` required\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0507, E0621.\n+For more information about an error, try `rustc --explain E0507`."}, {"sha": "6d183ddf22d19902e9d028cbbf49cdca23b33fe8", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-box-error.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/object-lifetime-default-from-rptr-box-error.rs:15:5\n+   |\n+LL | fn c<'a>(t: &'a Box<Test+'a>, mut ss: SomeStruct<'a>) {\n+   |      -- lifetime `'a` defined here\n+LL |     ss.t = t;\n+   |     ^^^^^^^^ assignment requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "fe3b21fa39c57381118da02fb55161840649eec2", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-struct-error.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/object-lifetime-default-from-rptr-struct-error.rs:21:5\n+   |\n+LL | fn c<'a>(t: &'a MyBox<Test+'a>, mut ss: SomeStruct<'a>) {\n+   |      -- lifetime `'a` defined here\n+LL |     ss.t = t;\n+   |     ^^^^^^^^ assignment requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "448fe9e55109c199d726f3d5175ae8fe9f5b6924", "filename": "src/test/ui/object-lifetime/object-lifetime-default-mybox.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,21 @@\n+error: lifetime may not live long enough\n+  --> $DIR/object-lifetime-default-mybox.rs:27:5\n+   |\n+LL | fn load1<'a,'b>(a: &'a MyBox<SomeTrait>,\n+   |          -- -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+...\n+LL |     a\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/object-lifetime-default-mybox.rs:31:5\n+   |\n+LL | fn load2<'a>(ss: &MyBox<SomeTrait+'a>) -> MyBox<SomeTrait+'a> {\n+   |              -- `ss` is a reference that is only valid in the function body\n+LL |     load0(ss)\n+   |     ^^^^^^^^^ `ss` escapes the function body here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "35ee7877f2f7836e52af2c853c35e9e26ca5f69f", "filename": "src/test/ui/pattern/pattern-bindings-after-at.nll.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,22 @@\n+error[E0303]: pattern bindings are not allowed after an `@`\n+  --> $DIR/pattern-bindings-after-at.rs:8:31\n+   |\n+LL |         ref mut z @ &mut Some(ref a) => {\n+   |                               ^^^^^ not allowed after `@`\n+\n+error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n+  --> $DIR/pattern-bindings-after-at.rs:8:31\n+   |\n+LL |         ref mut z @ &mut Some(ref a) => {\n+   |         ----------------------^^^^^-\n+   |         |                     |\n+   |         |                     immutable borrow occurs here\n+   |         mutable borrow occurs here\n+...\n+LL |             **z = None;\n+   |             ---------- mutable borrow later used here\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0303, E0502.\n+For more information about an error, try `rustc --explain E0303`."}, {"sha": "eee331d95b9bc9c6f31a6241b21c2cd67d9290f2", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.nll.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,16 @@\n+error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n+  --> $DIR/recursive-types-are-not-uninhabited.rs:6:9\n+   |\n+LL |     let Ok(x) = res;\n+   |         ^^^^^ pattern `Err(_)` not covered\n+\n+error[E0381]: use of possibly uninitialized variable: `x`\n+  --> $DIR/recursive-types-are-not-uninhabited.rs:8:5\n+   |\n+LL |     x\n+   |     ^ use of possibly uninitialized `x`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0005, E0381.\n+For more information about an error, try `rustc --explain E0005`."}, {"sha": "76129b4d188d3ce2f09c61a43a9f5cd1385e2e36", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/region-invariant-static-error-reporting.rs:15:9\n+   |\n+LL | fn unify<'a>(x: Option<Invariant<'a>>, f: fn(Invariant<'a>)) {\n+   |              - `x` is a reference that is only valid in the function body\n+LL |     let bad = if x.is_some() {\n+LL |         x.unwrap()\n+   |         ^^^^^^^^^^ `x` escapes the function body here\n+\n+error: aborting due to previous error\n+"}, {"sha": "24c9a315badf67b99484249649e59f52f014404e", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:43\n+   |\n+LL |     let _: fn(&mut &isize, &mut &isize) = a;\n+   |                                           ^ expected concrete lifetime, found bound lifetime parameter\n+   |\n+   = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n+              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6d031e9ac3b98a5d5daae099b7b0f796016d0fa6", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:56\n+   |\n+LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n+   |                                                        ^ expected concrete lifetime, found bound lifetime parameter\n+   |\n+   = note: expected type `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n+              found type `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "56e8c40c99f71eae5c6cd559c8c41b7a1ef58bdc", "filename": "src/test/ui/regions/region-object-lifetime-2.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/region-object-lifetime-2.rs:10:5\n+   |\n+LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a Foo) -> &'b () {\n+   |                                          -- -- lifetime `'b` defined here\n+   |                                          |\n+   |                                          lifetime `'a` defined here\n+LL |     x.borrowed()\n+   |     ^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "aa91c371f41b982f69cabdcdd56dfc991937b7c9", "filename": "src/test/ui/regions/region-object-lifetime-4.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/region-object-lifetime-4.rs:12:5\n+   |\n+LL | fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (Foo+'b)) -> &'b () {\n+   |                                         -- -- lifetime `'b` defined here\n+   |                                         |\n+   |                                         lifetime `'a` defined here\n+LL |     x.borrowed()\n+   |     ^^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a54f8f5faab54c150ac6b7feec234c346b97a9d1", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,38 @@\n+error[E0621]: explicit lifetime required in the type of `v`\n+  --> $DIR/region-object-lifetime-in-coercion.rs:8:12\n+   |\n+LL | fn a(v: &[u8]) -> Box<Foo + 'static> {\n+   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+LL |     let x: Box<Foo + 'static> = Box::new(v);\n+   |            ^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n+\n+error[E0621]: explicit lifetime required in the type of `v`\n+  --> $DIR/region-object-lifetime-in-coercion.rs:14:5\n+   |\n+LL | fn b(v: &[u8]) -> Box<Foo + 'static> {\n+   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^ lifetime `'static` required\n+\n+error[E0621]: explicit lifetime required in the type of `v`\n+  --> $DIR/region-object-lifetime-in-coercion.rs:21:5\n+   |\n+LL | fn c(v: &[u8]) -> Box<Foo> {\n+   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+...\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^ lifetime `'static` required\n+\n+error: lifetime may not live long enough\n+  --> $DIR/region-object-lifetime-in-coercion.rs:26:5\n+   |\n+LL | fn d<'a,'b>(v: &'a [u8]) -> Box<Foo+'b> {\n+   |      -- -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "3d7aac74bd4f75a327ec674ab385a6d880b6ca1f", "filename": "src/test/ui/regions/regions-addr-of-self.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-addr-of-self.rs:7:16\n+   |\n+LL |     pub fn chase_cat(&mut self) {\n+   |                      - let's call the lifetime of this reference `'1`\n+LL |         let p: &'static mut usize = &mut self.cats_chased;\n+   |                ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "345e617a7a380a8da5e34757608e1bcc20303389", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.nll.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,35 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-addr-of-upvar-self.rs:10:20\n+   |\n+LL |         let _f = || {\n+   |                  -- lifetime `'1` represents this closure's body\n+LL |             let p: &'static mut usize = &mut self.food;\n+   |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n+   |\n+   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-addr-of-upvar-self.rs:10:20\n+   |\n+LL |     pub fn chase_cat(&mut self) {\n+   |                      - let's call the lifetime of this reference `'1`\n+LL |         let _f = || {\n+LL |             let p: &'static mut usize = &mut self.food;\n+   |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n+\n+error[E0597]: `self` does not live long enough\n+  --> $DIR/regions-addr-of-upvar-self.rs:10:46\n+   |\n+LL |         let _f = || {\n+   |                  -- value captured here\n+LL |             let p: &'static mut usize = &mut self.food;\n+   |                    ------------------        ^^^^ borrowed value does not live long enough\n+   |                    |\n+   |                    type annotation requires that `self` is borrowed for `'static`\n+...\n+LL |     }\n+   |      - `self` dropped here while still borrowed\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "867eafe2529d8ce1d78b554678ccc1698ff00c0a", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:43:12\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "86bd100538d70ce5341cfcdc798a2ef48791028d", "filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.nll.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,50 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:22:5\n+   |\n+LL | fn param_not_ok<'a>(x: &'a isize) {\n+   |                 -- lifetime `'a` defined here\n+LL |     assert_send::<&'a isize>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:26:5\n+   |\n+LL | fn param_not_ok1<'a>(_: &'a isize) {\n+   |                  -- lifetime `'a` defined here\n+LL |     assert_send::<&'a str>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:30:5\n+   |\n+LL | fn param_not_ok2<'a>(_: &'a isize) {\n+   |                  -- lifetime `'a` defined here\n+LL |     assert_send::<&'a [isize]>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:44:5\n+   |\n+LL | fn box_with_region_not_ok<'a>() {\n+   |                           -- lifetime `'a` defined here\n+LL |     assert_send::<Box<&'a isize>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:55:5\n+   |\n+LL | fn unsafe_ok2<'a>(_: &'a isize) {\n+   |               -- lifetime `'a` defined here\n+LL |     assert_send::<*const &'a isize>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:59:5\n+   |\n+LL | fn unsafe_ok3<'a>(_: &'a isize) {\n+   |               -- lifetime `'a` defined here\n+LL |     assert_send::<*mut &'a isize>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "a8ab92d75c06d99ce465a6c1ecd19f021dc26ea2", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-cross-crate.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-bounded-method-type-parameters-cross-crate.rs:20:5\n+   |\n+LL | fn call_bigger_region<'x, 'y>(a: Inv<'x>, b: Inv<'y>) {\n+   |                       --  -- lifetime `'y` defined here\n+   |                       |\n+   |                       lifetime `'x` defined here\n+LL |     // Here the value provided for 'y is 'y, and hence 'y:'x does not hold.\n+LL |     a.bigger_region(b)\n+   |     ^^^^^^^^^^^^^^^^^^ argument requires that `'y` must outlive `'x`\n+\n+error: aborting due to previous error\n+"}, {"sha": "52ad2d9daeb1d63c91d9c3327eed3a4ecb164287", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/regions-bounded-method-type-parameters-trait-bound.rs:20:5\n+   |\n+LL | fn caller2<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n+   |                             -           - `b` is a reference that is only valid in the function body\n+   |                             |\n+   |                             `a` is declared here, outside of the function body\n+LL |     // Here the value provided for 'y is 'b, and hence 'b:'a does not hold.\n+LL |     f.method(b);\n+   |     ^^^^^^^^^^^ `b` escapes the function body here\n+\n+error: aborting due to previous error\n+"}, {"sha": "b6d7b8aac5f19f927e399aa28aaec81af9eb87b6", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-bounded-method-type-parameters.rs:12:9\n+   |\n+LL | fn caller<'a>(x: &isize) {\n+   |           -- lifetime `'a` defined here\n+LL |     Foo.some_method::<&'a isize>();\n+   |         ^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3345946bfddff03be82a0806e23ecff8c53c80ee", "filename": "src/test/ui/regions/regions-bounds.nll.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,22 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-bounds.rs:9:12\n+   |\n+LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n+   |          -- -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     return e;\n+   |            ^ returning this value requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-bounds.rs:13:12\n+   |\n+LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n+   |          -- -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     return e;\n+   |            ^ returning this value requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "92c4956da02d26c0eebb0f3df84f631b215a3591", "filename": "src/test/ui/regions/regions-close-associated-type-into-object.nll.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,36 @@\n+error[E0310]: the associated type `<T as Iter>::Item` may not live long enough\n+  --> $DIR/regions-close-associated-type-into-object.rs:15:5\n+   |\n+LL |     Box::new(item)\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'static`...\n+\n+error[E0310]: the associated type `<T as Iter>::Item` may not live long enough\n+  --> $DIR/regions-close-associated-type-into-object.rs:22:5\n+   |\n+LL |     Box::new(item)\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'static`...\n+\n+error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n+  --> $DIR/regions-close-associated-type-into-object.rs:28:5\n+   |\n+LL |     Box::new(item)\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'a`...\n+\n+error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n+  --> $DIR/regions-close-associated-type-into-object.rs:35:5\n+   |\n+LL |     Box::new(item)\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'a`...\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0309, E0310.\n+For more information about an error, try `rustc --explain E0309`."}, {"sha": "42df9b1c49fba2fec14e6a6f30dda068c6a1fdee", "filename": "src/test/ui/regions/regions-close-object-into-object-2.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-close-object-into-object-2.rs:10:5\n+   |\n+LL | fn g<'a, T: 'static>(v: Box<A<T>+'a>) -> Box<X+'static> {\n+   |      -- lifetime `'a` defined here\n+LL |     box B(&*v) as Box<X>\n+   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error[E0515]: cannot return value referencing local data `*v`\n+  --> $DIR/regions-close-object-into-object-2.rs:10:5\n+   |\n+LL |     box B(&*v) as Box<X>\n+   |     ^^^^^^---^^^^^^^^^^^\n+   |     |     |\n+   |     |     `*v` is borrowed here\n+   |     returns a value referencing data owned by the current function\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "8af94fa7e79b8b6952ac68ad74069056c0050b01", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,37 @@\n+error[E0310]: the parameter type `U` may not live long enough\n+  --> $DIR/regions-close-object-into-object-4.rs:10:5\n+   |\n+LL |     box B(&*v) as Box<X>\n+   |     ^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `U: 'static`...\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-close-object-into-object-4.rs:10:5\n+   |\n+LL | fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {\n+   |      -- lifetime `'a` defined here\n+LL |     box B(&*v) as Box<X>\n+   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error[E0515]: cannot return value referencing local data `*v`\n+  --> $DIR/regions-close-object-into-object-4.rs:10:5\n+   |\n+LL |     box B(&*v) as Box<X>\n+   |     ^^^^^^---^^^^^^^^^^^\n+   |     |     |\n+   |     |     `*v` is borrowed here\n+   |     returns a value referencing data owned by the current function\n+\n+error[E0310]: the parameter type `U` may not live long enough\n+  --> $DIR/regions-close-object-into-object-4.rs:10:9\n+   |\n+LL |     box B(&*v) as Box<X>\n+   |         ^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `U: 'static`...\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0310, E0515.\n+For more information about an error, try `rustc --explain E0310`."}, {"sha": "08ba1b17b56636a176e08492ca9f0b51213ef13c", "filename": "src/test/ui/regions/regions-close-object-into-object-5.nll.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,29 @@\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-close-object-into-object-5.rs:17:5\n+   |\n+LL |     box B(&*v) as Box<X>\n+   |     ^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error[E0515]: cannot return value referencing local data `*v`\n+  --> $DIR/regions-close-object-into-object-5.rs:17:5\n+   |\n+LL |     box B(&*v) as Box<X>\n+   |     ^^^^^^---^^^^^^^^^^^\n+   |     |     |\n+   |     |     `*v` is borrowed here\n+   |     returns a value referencing data owned by the current function\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-close-object-into-object-5.rs:17:9\n+   |\n+LL |     box B(&*v) as Box<X>\n+   |         ^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0310, E0515.\n+For more information about an error, try `rustc --explain E0310`."}, {"sha": "30fdb820e3630226bec9f631e9d3b073d8418b3d", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,20 @@\n+error[E0310]: the parameter type `A` may not live long enough\n+  --> $DIR/regions-close-over-type-parameter-1.rs:10:5\n+   |\n+LL |     box v as Box<SomeTrait+'static>\n+   |     ^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `A: 'static`...\n+\n+error[E0309]: the parameter type `A` may not live long enough\n+  --> $DIR/regions-close-over-type-parameter-1.rs:20:5\n+   |\n+LL |     box v as Box<SomeTrait+'b>\n+   |     ^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `A: 'b`...\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0309, E0310.\n+For more information about an error, try `rustc --explain E0309`."}, {"sha": "001ed7fe4c53a678b262deeb35a9596a43b48267", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-close-over-type-parameter-multiple.rs:20:5\n+   |\n+LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<SomeTrait+'c> {\n+   |                    --    -- lifetime `'c` defined here\n+   |                    |\n+   |                    lifetime `'a` defined here\n+LL |     // A outlives 'a AND 'b...but not 'c.\n+LL |     box v as Box<SomeTrait+'a>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'c`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7bd7824f00a462ccebf0da80ebbc0aa95c385ccc", "filename": "src/test/ui/regions/regions-close-param-into-object.nll.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,36 @@\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-close-param-into-object.rs:6:5\n+   |\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-close-param-into-object.rs:12:5\n+   |\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-close-param-into-object.rs:18:5\n+   |\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-close-param-into-object.rs:24:5\n+   |\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0309, E0310.\n+For more information about an error, try `rustc --explain E0309`."}, {"sha": "e35a878fce17768339f1b269f3dfb8ae42ecfa3b", "filename": "src/test/ui/regions/regions-creating-enums3.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-creating-enums3.rs:7:5\n+   |\n+LL | fn mk_add_bad1<'a,'b>(x: &'a Ast<'a>, y: &'b Ast<'b>) -> Ast<'a> {\n+   |                -- -- lifetime `'b` defined here\n+   |                |\n+   |                lifetime `'a` defined here\n+LL |     Ast::Add(x, y)\n+   |     ^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4eac457feda2c4074c0e68471970b0ec450b4ca4", "filename": "src/test/ui/regions/regions-creating-enums4.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-creating-enums4.rs:7:5\n+   |\n+LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n+   |                -- -- lifetime `'b` defined here\n+   |                |\n+   |                lifetime `'a` defined here\n+LL |     Ast::Add(x, y)\n+   |     ^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1540a7bacd7b205e3934921960d4cf9993d2ba4a", "filename": "src/test/ui/regions/regions-early-bound-error-method.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-early-bound-error-method.rs:20:9\n+   |\n+LL | impl<'a> Box<'a> {\n+   |      -- lifetime `'a` defined here\n+LL |     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n+   |           -- lifetime `'b` defined here\n+LL |         g2.get()\n+   |         ^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7836291a7caab4658213408990446784ecf5e3bb", "filename": "src/test/ui/regions/regions-early-bound-error.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-early-bound-error.rs:19:5\n+   |\n+LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+LL |     g1.get()\n+   |     ^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "9f425125b9896eca564b1efc5b232e9c0e3a2564", "filename": "src/test/ui/regions/regions-escape-method.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-escape-method.rs:15:13\n+   |\n+LL |     s.f(|p| p)\n+   |          -- ^ returning this value requires that `'1` must outlive `'2`\n+   |          ||\n+   |          |return type of closure is &'2 i32\n+   |          has type `&'1 i32`\n+\n+error: aborting due to previous error\n+"}, {"sha": "cae6c33ac6e1759b00ff891f06aaf16cfa6f338a", "filename": "src/test/ui/regions/regions-escape-via-trait-or-not.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-escape-via-trait-or-not.rs:18:14\n+   |\n+LL |     with(|o| o)\n+   |           -- ^ returning this value requires that `'1` must outlive `'2`\n+   |           ||\n+   |           |return type of closure is &'2 isize\n+   |           has type `&'1 isize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "9ae484eaf455800f34c3e6461adb489badb47f01", "filename": "src/test/ui/regions/regions-free-region-ordering-callee.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-free-region-ordering-callee.rs:13:5\n+   |\n+LL | fn ordering2<'a, 'b>(x: &'a &'b usize, y: &'a usize) -> &'b usize {\n+   |              --  -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+LL |     // However, it is not safe to assume that 'b <= 'a\n+LL |     &*y\n+   |     ^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-free-region-ordering-callee.rs:18:12\n+   |\n+LL | fn ordering3<'a, 'b>(x: &'a usize, y: &'b usize) -> &'a &'b usize {\n+   |              --  -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+LL |     // Do not infer an ordering from the return value.\n+LL |     let z: &'b usize = &*x;\n+   |            ^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "16eda2844c64c6736f77578b211c9fb7b272ab12", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.migrate.nll.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,33 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-free-region-ordering-caller.rs:11:12\n+   |\n+LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     let z: Option<&'b &'a usize> = None;\n+   |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-free-region-ordering-caller.rs:17:12\n+   |\n+LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     let y: Paramd<'a> = Paramd { x: a };\n+LL |     let z: Option<&'b Paramd<'a>> = None;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-free-region-ordering-caller.rs:22:12\n+   |\n+LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     let z: Option<&'a &'b usize> = None;\n+   |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "480a81d33f64c8c2a918f3ae66aa2114380eec31", "filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,15 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-free-region-ordering-incorrect.rs:15:9\n+   |\n+LL |   impl<'b, T> Node<'b, T> {\n+   |        -- lifetime `'b` defined here\n+LL |       fn get<'a>(&'a self) -> &'b T {\n+   |              -- lifetime `'a` defined here\n+LL | /         match self.next {\n+LL | |             Some(ref next) => next.get(),\n+LL | |             None => &self.val\n+LL | |         }\n+   | |_________^ returning this value requires that `'a` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0f0f86dfcdd693c4221cd7010e357ac243282870", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-implied-bounds-projection-gap-1.rs:16:5\n+   |\n+LL |     wf::<&'x T>();\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'x`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "0651e305cde35031b160e9c609b5ab1d491e802b", "filename": "src/test/ui/regions/regions-infer-bound-from-trait-self.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error[E0309]: the parameter type `Self` may not live long enough\n+  --> $DIR/regions-infer-bound-from-trait-self.rs:46:9\n+   |\n+LL |         check_bound(x, self)\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "1f7b34fc69962937095054765c206c8fed2dc255", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,19 @@\n+error[E0309]: the parameter type `A` may not live long enough\n+  --> $DIR/regions-infer-bound-from-trait.rs:33:5\n+   |\n+LL |     check_bound(x, a)\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `A: 'a`...\n+\n+error[E0309]: the parameter type `A` may not live long enough\n+  --> $DIR/regions-infer-bound-from-trait.rs:37:5\n+   |\n+LL |     check_bound(x, a)\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `A: 'a`...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "ca51555a07749355b46a7d02bdd995d97022a486", "filename": "src/test/ui/regions/regions-infer-call-3.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-infer-call-3.rs:8:24\n+   |\n+LL |     let z = with(|y| { select(x, y) });\n+   |                   --   ^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n+   |                   ||\n+   |                   |return type of closure is &'2 isize\n+   |                   has type `&'1 isize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "cefeecf16e2d44055d5b987bed6ff8b88564c9c1", "filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-infer-contravariance-due-to-decl.rs:25:12\n+   |\n+LL | fn use_<'short,'long>(c: Contravariant<'short>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: Contravariant<'long> = c;\n+   |            ^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1bddecba50a72103017bddc8b9d769d47e9595ad", "filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-infer-covariance-due-to-decl.rs:22:12\n+   |\n+LL | fn use_<'short,'long>(c: Covariant<'long>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: Covariant<'short> = c;\n+   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0c1e3989b234a84db7663f36baa1b0517c687056", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-infer-invariance-due-to-decl.rs:12:5\n+   |\n+LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n+   |                       -- lifetime `'r` defined here\n+LL |     b_isize\n+   |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0edeb2723998f00e8be7e0a914b51b7905acddc1", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-infer-invariance-due-to-mutability-3.rs:10:5\n+   |\n+LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n+   |                       -- lifetime `'r` defined here\n+LL |     b_isize\n+   |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "724dd7e3f6d3f36c4a322e20adce132d84f6e29d", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-infer-invariance-due-to-mutability-4.rs:10:5\n+   |\n+LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n+   |                       -- lifetime `'r` defined here\n+LL |     b_isize\n+   |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "2064b060ec419fcd1cfffab4a3e7f6b8a2bd9647", "filename": "src/test/ui/regions/regions-infer-not-param.nll.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,26 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-infer-not-param.rs:15:54\n+   |\n+LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n+   |                -- -- lifetime `'b` defined here      ^ returning this value requires that `'a` must outlive `'b`\n+   |                |\n+   |                lifetime `'a` defined here\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-infer-not-param.rs:19:63\n+   |\n+LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n+   |                   -- -- lifetime `'b` defined here            ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |                   |\n+   |                   lifetime `'a` defined here\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-infer-not-param.rs:19:63\n+   |\n+LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n+   |                   -- -- lifetime `'b` defined here            ^ returning this value requires that `'a` must outlive `'b`\n+   |                   |\n+   |                   lifetime `'a` defined here\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "a86e6ccdc5edfb9a60a1a533bd310da2ad98727d", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-infer-paramd-indirect.rs:22:9\n+   |\n+LL | impl<'a> SetF<'a> for C<'a> {\n+   |      -- lifetime `'a` defined here\n+...\n+LL |     fn set_f_bad(&mut self, b: Box<B>) {\n+   |                             - has type `std::boxed::Box<std::boxed::Box<&'1 isize>>`\n+LL |         self.f = b;\n+   |         ^^^^^^ assignment requires that `'1` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e1f14fc0cd919e3446e8542805d9225b1b982c18", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:20:43\n+   |\n+LL |     let _: fn(&mut &isize, &mut &isize) = a;\n+   |                                           ^ expected concrete lifetime, found bound lifetime parameter\n+   |\n+   = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n+              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c11c09b6d0d51cdfa0d1db77e4a38f968043a224", "filename": "src/test/ui/regions/regions-nested-fns.nll.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,51 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/regions-nested-fns.rs:10:9\n+   |\n+LL |     let mut ay = &y;\n+   |         ------ `ay` is declared here, outside of the closure body\n+LL | \n+LL |     ignore::<Box<for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n+   |                                                       - `z` is a reference that is only valid in the closure body\n+...\n+LL |         ay = z;\n+   |         ^^^^^^ `z` escapes the closure body here\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/regions-nested-fns.rs:5:18\n+   |\n+LL |     let mut ay = &y;\n+   |                  ^^ borrowed value does not live long enough\n+...\n+LL |         if false { return ay; }\n+   |                           -- returning this value requires that `y` is borrowed for `'static`\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/regions-nested-fns.rs:9:15\n+   |\n+LL |     ignore::<Box<for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n+   |                                                      --- value captured here\n+LL |         ay = x;\n+LL |         ay = &y;\n+   |               ^ borrowed value does not live long enough\n+...\n+LL |         if false { return ay; }\n+   |                           -- returning this value requires that `y` is borrowed for `'static`\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-nested-fns.rs:14:27\n+   |\n+LL | fn nested<'x>(x: &'x isize) {\n+   |           -- lifetime `'x` defined here\n+...\n+LL |         if false { return x; }\n+   |                           ^ returning this value requires that `'x` must outlive `'static`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "5028663ba6d04f6de8c2815ec513fad25fd1f9a1", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.migrate.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:35:12\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:57:12\n+   |\n+LL | fn with_assoc_sub<'a,'b>() {\n+   |                   -- -- lifetime `'b` defined here\n+   |                   |\n+   |                   lifetime `'a` defined here\n+...\n+LL |     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "880fe17b740e4b508c68f9e508c2eace409e38d1", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.migrate.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-outlives-projection-container-wc.rs:37:12\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ef87d02ec0812cd6e3254d03603a8083486b7ef2", "filename": "src/test/ui/regions/regions-outlives-projection-container.nll.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,46 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-outlives-projection-container.rs:40:13\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-outlives-projection-container.rs:58:13\n+   |\n+LL | fn without_assoc<'a,'b>() {\n+   |                  -- -- lifetime `'b` defined here\n+   |                  |\n+   |                  lifetime `'a` defined here\n+...\n+LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-outlives-projection-container.rs:67:5\n+   |\n+LL | fn call_with_assoc<'a,'b>() {\n+   |                    -- -- lifetime `'b` defined here\n+   |                    |\n+   |                    lifetime `'a` defined here\n+...\n+LL |     call::<&'a WithAssoc<TheType<'b>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-outlives-projection-container.rs:74:5\n+   |\n+LL | fn call_without_assoc<'a,'b>() {\n+   |                       -- -- lifetime `'b` defined here\n+   |                       |\n+   |                       lifetime `'a` defined here\n+...\n+LL |     call::<&'a WithoutAssoc<TheType<'b>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c8582f8bfe7f01d29e6c6bbf22fdbc82673d0f48", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-reborrow-from-shorter-mut-ref-mut-ref.rs:4:5\n+   |\n+LL | fn copy_borrowed_ptr<'a, 'b, 'c>(p: &'a mut &'b mut &'c mut isize) -> &'b mut isize {\n+   |                      --  -- lifetime `'b` defined here\n+   |                      |\n+   |                      lifetime `'a` defined here\n+LL |     &mut ***p\n+   |     ^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5946e7bf84950f42e626a472201cf6c17f385a4e", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-reborrow-from-shorter-mut-ref.rs:6:5\n+   |\n+LL | fn copy_borrowed_ptr<'a, 'b>(p: &'a mut &'b mut isize) -> &'b mut isize {\n+   |                      --  -- lifetime `'b` defined here\n+   |                      |\n+   |                      lifetime `'a` defined here\n+LL |     &mut **p\n+   |     ^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0784e894ea9200f77d764568211eefd82e6b34eb", "filename": "src/test/ui/regions/regions-ret-borrowed-1.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-ret-borrowed-1.rs:10:14\n+   |\n+LL |     with(|o| o)\n+   |           -- ^ returning this value requires that `'1` must outlive `'2`\n+   |           ||\n+   |           |return type of closure is &'2 isize\n+   |           has type `&'1 isize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d9be5ef89ccebd23da3af441abd270ce2a1b209a", "filename": "src/test/ui/regions/regions-ret-borrowed.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-ret-borrowed.rs:13:14\n+   |\n+LL |     with(|o| o)\n+   |           -- ^ returning this value requires that `'1` must outlive `'2`\n+   |           ||\n+   |           |return type of closure is &'2 isize\n+   |           has type `&'1 isize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4c275b19492c69a0d6088f0721969a2badfee555", "filename": "src/test/ui/regions/regions-return-ref-to-upvar-issue-17403.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/regions-return-ref-to-upvar-issue-17403.rs:7:24\n+   |\n+LL |         let mut f = || &mut x;\n+   |                      - ^^^^^^ returns a reference to a captured variable which escapes the closure body\n+   |                      |\n+   |                      inferred to be a `FnMut` closure\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "d6cec03e0ff2ecf89b186fff09a8844903dd34d5", "filename": "src/test/ui/regions/regions-static-bound.ll.nll.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,28 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-static-bound.rs:9:5\n+   |\n+LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n+   |                        -- lifetime `'a` defined here\n+LL |     t //[ll]~ ERROR E0312\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error[E0621]: explicit lifetime required in the type of `u`\n+  --> $DIR/regions-static-bound.rs:14:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |             --- help: add explicit lifetime `'static` to the type of `u`: `&'static ()`\n+LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n+   |     ^^^^^^^^^^^^^ lifetime `'static` required\n+\n+error[E0621]: explicit lifetime required in the type of `v`\n+  --> $DIR/regions-static-bound.rs:16:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n+...\n+LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "b5f3e6cfaba09ed0bac4e5f306493880e848f133", "filename": "src/test/ui/regions/regions-static-bound.migrate.nll.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,28 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-static-bound.rs:9:5\n+   |\n+LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n+   |                        -- lifetime `'a` defined here\n+LL |     t\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error[E0621]: explicit lifetime required in the type of `u`\n+  --> $DIR/regions-static-bound.rs:14:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |             --- help: add explicit lifetime `'static` to the type of `u`: `&'static ()`\n+LL |     static_id(&u);\n+   |     ^^^^^^^^^^^^^ lifetime `'static` required\n+\n+error[E0621]: explicit lifetime required in the type of `v`\n+  --> $DIR/regions-static-bound.rs:16:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n+...\n+LL |     static_id_indirect(&v);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "eccf1b5e8cf76f0add4a63e0054ed8cb3480fa2e", "filename": "src/test/ui/regions/regions-trait-object-subtyping.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-trait-object-subtyping.rs:15:5\n+   |\n+LL | fn foo3<'a,'b>(x: &'a mut Dummy) -> &'b mut Dummy {\n+   |         -- -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+LL |     // Without knowing 'a:'b, we can't coerce\n+LL |     x\n+   |     ^ returning this value requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-trait-object-subtyping.rs:22:5\n+   |\n+LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut Dummy>) -> Wrapper<&'b mut Dummy> {\n+   |         --    -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+LL |     // We can't coerce because it is packed in `Wrapper`\n+LL |     x\n+   |     ^ returning this value requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f5b96f314c57844b7ec06150de74c104bf0a2917", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:25:12\n+   |\n+LL | fn use_<'short,'long>(c: S<'long, 'short>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: S<'long, 'long> = c;\n+   |            ^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "372510a2f7e2801bc9fd4ec86342218272c16824", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-variance-contravariant-use-covariant.rs:23:12\n+   |\n+LL | fn use_<'short,'long>(c: Contravariant<'short>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: Contravariant<'long> = c;\n+   |            ^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e87e914727c5f42b199866b380bb328c39a14b08", "filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-variance-covariant-use-contravariant.rs:23:12\n+   |\n+LL | fn use_<'short,'long>(c: Covariant<'long>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: Covariant<'short> = c;\n+   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "adee33bfc7e83ea79c37545cf280561e552afdb1", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-variance-invariant-use-contravariant.rs:20:12\n+   |\n+LL | fn use_<'short,'long>(c: Invariant<'long>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: Invariant<'short> = c;\n+   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "15853e6ca5d691775b246d83e278e5f3c27e7c23", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-variance-invariant-use-covariant.rs:17:12\n+   |\n+LL | fn use_<'b>(c: Invariant<'b>) {\n+   |         -- lifetime `'b` defined here\n+...\n+LL |     let _: Invariant<'static> = c;\n+   |            ^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c74b82dbbd82811c010c286ff5fb7c927c0b4d32", "filename": "src/test/ui/rfc-2005-default-binding-mode/borrowck-issue-49631.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,14 @@\n+error[E0502]: cannot borrow `foo` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-issue-49631.rs:20:9\n+   |\n+LL |     while let Some(Ok(string)) = foo.get() {\n+   |                                  --- immutable borrow occurs here\n+LL |         foo.mutate();\n+   |         ^^^ mutable borrow occurs here\n+LL |\n+LL |         println!(\"foo={:?}\", *string);\n+   |                              ------- immutable borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "f4eb9813c1ac77f3fe19621fecfe149db2659b95", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error[E0310]: the parameter type `impl Debug` may not live long enough\n+  --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n+   |\n+LL |     bar(d);\n+   |     ^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `impl Debug: 'static`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "18d01b1879018abfcd70489121fb71436fcb0dd1", "filename": "src/test/ui/thread-local-in-ctfe.nll.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,49 @@\n+error[E0625]: thread-local statics cannot be accessed at compile-time\n+  --> $DIR/thread-local-in-ctfe.rs:6:17\n+   |\n+LL | static B: u32 = A;\n+   |                 ^\n+\n+error[E0625]: thread-local statics cannot be accessed at compile-time\n+  --> $DIR/thread-local-in-ctfe.rs:9:18\n+   |\n+LL | static C: &u32 = &A;\n+   |                  ^^\n+\n+error[E0712]: thread-local variable borrowed past end of function\n+  --> $DIR/thread-local-in-ctfe.rs:9:18\n+   |\n+LL | static C: &u32 = &A;\n+   |                  ^^- end of enclosing function is here\n+   |                  |\n+   |                  thread-local variables cannot be borrowed beyond the end of the function\n+\n+error[E0625]: thread-local statics cannot be accessed at compile-time\n+  --> $DIR/thread-local-in-ctfe.rs:15:16\n+   |\n+LL | const D: u32 = A;\n+   |                ^\n+\n+error[E0625]: thread-local statics cannot be accessed at compile-time\n+  --> $DIR/thread-local-in-ctfe.rs:18:17\n+   |\n+LL | const E: &u32 = &A;\n+   |                 ^^\n+\n+error[E0712]: thread-local variable borrowed past end of function\n+  --> $DIR/thread-local-in-ctfe.rs:18:17\n+   |\n+LL | const E: &u32 = &A;\n+   |                 ^^- end of enclosing function is here\n+   |                 |\n+   |                 thread-local variables cannot be borrowed beyond the end of the function\n+\n+error[E0625]: thread-local statics cannot be accessed at compile-time\n+  --> $DIR/thread-local-in-ctfe.rs:25:5\n+   |\n+LL |     A\n+   |     ^\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0712`."}, {"sha": "ead42c1488966d04a5805a649e20fcebd630133b", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:17:9\n+   |\n+LL |     doit(0, &|x, y| {\n+   |               -  - has type `&'1 i32`\n+   |               |\n+   |               has type `&std::cell::Cell<&'2 i32>`\n+LL |         x.set(y);\n+   |         ^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8ed48bda26e852e8717108f013894aaa0dac67d7", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/dyn-trait-underscore.rs:8:5\n+   |\n+LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n+   |                - let's call the lifetime of this reference `'1`\n+LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n+LL |     Box::new(items.iter())\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e1d57b8ba1edab86d3dfd125d14372d639a4cae0", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/underscore-lifetime-elison-mismatch.rs:1:42\n+   |\n+LL | fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n+   |                    -           -         ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |                    |           |\n+   |                    |           let's call the lifetime of this reference `'1`\n+   |                    let's call the lifetime of this reference `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "344437f74e49545c21d421c61059227fb551a9df", "filename": "src/test/ui/variance/variance-btree-invariant-types.nll.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,106 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-btree-invariant-types.rs:4:5\n+   |\n+LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n+   |                     ---- lifetime `'new` defined here\n+LL |     v\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-btree-invariant-types.rs:7:5\n+   |\n+LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n+   |                     ---- lifetime `'new` defined here\n+LL |     v\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-btree-invariant-types.rs:10:5\n+   |\n+LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n+   |                        ---- lifetime `'new` defined here\n+LL |     v\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-btree-invariant-types.rs:13:5\n+   |\n+LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n+   |                        ---- lifetime `'new` defined here\n+LL |     v\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-btree-invariant-types.rs:18:5\n+   |\n+LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n+   |                    ---- lifetime `'new` defined here\n+LL |                          -> OccupiedEntry<'a, &'new (), ()> {\n+LL |     v\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-btree-invariant-types.rs:22:5\n+   |\n+LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n+   |                    ---- lifetime `'new` defined here\n+LL |                          -> OccupiedEntry<'a, (), &'new ()> {\n+LL |     v\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-btree-invariant-types.rs:26:5\n+   |\n+LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n+   |                       ---- lifetime `'new` defined here\n+LL |                             -> OccupiedEntry<'a, &'static (), ()> {\n+LL |     v\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-btree-invariant-types.rs:30:5\n+   |\n+LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n+   |                       ---- lifetime `'new` defined here\n+LL |                             -> OccupiedEntry<'a, (), &'static ()> {\n+LL |     v\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-btree-invariant-types.rs:35:5\n+   |\n+LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n+   |                    ---- lifetime `'new` defined here\n+LL |                          -> VacantEntry<'a, &'new (), ()> {\n+LL |     v\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-btree-invariant-types.rs:39:5\n+   |\n+LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n+   |                    ---- lifetime `'new` defined here\n+LL |                          -> VacantEntry<'a, (), &'new ()> {\n+LL |     v\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-btree-invariant-types.rs:43:5\n+   |\n+LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n+   |                       ---- lifetime `'new` defined here\n+LL |                             -> VacantEntry<'a, &'static (), ()> {\n+LL |     v\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-btree-invariant-types.rs:47:5\n+   |\n+LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n+   |                       ---- lifetime `'new` defined here\n+LL |                             -> VacantEntry<'a, (), &'static ()> {\n+LL |     v\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "a3ae5320c90d47f69c6f6e74e891f8422c5af141", "filename": "src/test/ui/variance/variance-cell-is-invariant.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-cell-is-invariant.rs:14:12\n+   |\n+LL | fn use_<'short,'long>(c: Foo<'short>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: Foo<'long> = c;\n+   |            ^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8b5ecbe56ff2d496d550b61ceb1db0ce8b251a3b", "filename": "src/test/ui/variance/variance-contravariant-arg-object.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-contravariant-arg-object.rs:14:5\n+   |\n+LL | fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     v\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-contravariant-arg-object.rs:22:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     v\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "dbd75cb52fa8385ac887f2f7e0a5777364e5b9f7", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:13:5\n+   |\n+LL | fn get_min_from_max<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<G,&'min i32>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:21:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<G,&'max i32>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9212cf24be3bf634bfb2a301a7ef15b2dd6e6a6c", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-contravariant-self-trait-match.rs:13:5\n+   |\n+LL | fn get_min_from_max<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<&'min G>();\n+   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-contravariant-self-trait-match.rs:22:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<&'max G>();\n+   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "acf9f2e060ce90708649194bd1a5cf234799f317", "filename": "src/test/ui/variance/variance-covariant-arg-object.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-covariant-arg-object.rs:15:5\n+   |\n+LL | fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     v\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-covariant-arg-object.rs:22:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     v\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "33589121c4b83d265c020b50eba3f402c36132c0", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-covariant-arg-trait-match.rs:14:5\n+   |\n+LL | fn get_min_from_max<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<G,&'min i32>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-covariant-arg-trait-match.rs:20:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<G,&'max i32>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6b2413d68be29db70050c77e456c61ddc4c47983", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-covariant-self-trait-match.rs:14:5\n+   |\n+LL | fn get_min_from_max<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<&'min G>();\n+   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-covariant-self-trait-match.rs:20:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<&'max G>();\n+   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3c1ee7fc707f8cea6c40150b384492bba3693a40", "filename": "src/test/ui/variance/variance-invariant-arg-object.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-invariant-arg-object.rs:11:5\n+   |\n+LL | fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     v\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-invariant-arg-object.rs:18:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     v\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2ab44c54c72160fd2868bf94e4e099719eb4a4c6", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-invariant-arg-trait-match.rs:10:5\n+   |\n+LL | fn get_min_from_max<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<G,&'min i32>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-invariant-arg-trait-match.rs:16:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<G,&'max i32>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7b7c42fea8da82a12dadb04381f9b645d49f904f", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-invariant-self-trait-match.rs:10:5\n+   |\n+LL | fn get_min_from_max<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<&'min G>();\n+   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-invariant-self-trait-match.rs:16:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<&'max G>();\n+   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3308cc6d2501643c19669f1b2bae0fe41c488fc9", "filename": "src/test/ui/variance/variance-trait-matching.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,12 @@\n+error[E0621]: explicit lifetime required in the type of `get`\n+  --> $DIR/variance-trait-matching.rs:24:5\n+   |\n+LL | fn get<'a, G>(get: &G) -> i32\n+   |                    -- help: add explicit lifetime `'a` to the type of `get`: `&'a G`\n+...\n+LL |     pick(get, &22)\n+   |     ^^^^^^^^^^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "8468448b27bd28a549562fb0e593007c763af5c4", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-use-contravariant-struct-1.rs:12:5\n+   |\n+LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n+   |        ---- ---- lifetime `'max` defined here\n+   |        |\n+   |        lifetime `'min` defined here\n+...\n+LL |     v\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n+\n+error: aborting due to previous error\n+"}, {"sha": "19a22f064beb0263e989091d0017e7480ba93370", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-use-covariant-struct-1.rs:10:5\n+   |\n+LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n+   |        ---- ---- lifetime `'max` defined here\n+   |        |\n+   |        lifetime `'min` defined here\n+...\n+LL |     v\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n+\n+error: aborting due to previous error\n+"}, {"sha": "61f80fe77e63de24a62aa562d9b54a4670989a81", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-use-invariant-struct-1.rs:12:5\n+   |\n+LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n+   |        ---- ---- lifetime `'max` defined here\n+   |        |\n+   |        lifetime `'min` defined here\n+...\n+LL |     v\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variance-use-invariant-struct-1.rs:19:5\n+   |\n+LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n+   |        ---- ---- lifetime `'max` defined here\n+   |        |\n+   |        lifetime `'min` defined here\n+...\n+LL |     v\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "338de6db1800698bee303af4f301cd069234083d", "filename": "src/test/ui/wf/wf-static-method.nll.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -0,0 +1,65 @@\n+error: lifetime may not live long enough\n+  --> $DIR/wf-static-method.rs:17:9\n+   |\n+LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+...\n+LL |         u\n+   |         ^ returning this value requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/wf-static-method.rs:26:18\n+   |\n+LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+...\n+LL |         let me = Self::make_me();\n+   |                  ^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/wf-static-method.rs:33:9\n+   |\n+LL | impl<'a, 'b> Evil<'a, 'b> {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     fn inherent_evil(u: &'b u32) -> &'a u32 {\n+LL |         u\n+   |         ^ returning this value requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/wf-static-method.rs:41:5\n+   |\n+LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n+   |         --  -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+LL |     <()>::static_evil(b)\n+   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/wf-static-method.rs:45:5\n+   |\n+LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n+   |                  --  -- lifetime `'b` defined here\n+   |                  |\n+   |                  lifetime `'a` defined here\n+LL |     <IndirectEvil>::static_evil(b)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/wf-static-method.rs:50:5\n+   |\n+LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n+   |                  --  -- lifetime `'b` defined here\n+   |                  |\n+   |                  lifetime `'a` defined here\n+LL |     <Evil>::inherent_evil(b) // bug? shouldn't this be an error\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "2579f1f51bd2dbccfc04d3a4e96cb19831be204b", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -1912,8 +1912,7 @@ impl<'test> TestCx<'test> {\n \n         match self.config.compare_mode {\n             Some(CompareMode::Nll) => {\n-                // FIXME(#56993) use -Zborrowck=mir\n-                rustc.args(&[\"-Zborrowck=migrate\"]);\n+                rustc.args(&[\"-Zborrowck=mir\"]);\n             }\n             Some(CompareMode::Polonius) => {\n                 rustc.args(&[\"-Zpolonius\", \"-Zborrowck=mir\"]);"}]}