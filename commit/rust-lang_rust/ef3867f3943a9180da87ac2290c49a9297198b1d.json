{"sha": "ef3867f3943a9180da87ac2290c49a9297198b1d", "node_id": "C_kwDOAAsO6NoAKGVmMzg2N2YzOTQzYTkxODBkYTg3YWMyMjkwYzQ5YTkyOTcxOThiMWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T08:22:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T08:22:16Z"}, "message": "Auto merge of #9102 - botahamec:unused-box, r=xFrednet\n\nAdded the `[unnecessary_box_returns]` lint\n\nfixes #5\n\nI'm not confident in the name of this lint. Let me know if you can think of something better\n\n---\n\nchangelog: New lint: ``[`unnecessary_box_returns`]``\n[#9102](https://github.com/rust-lang/rust-clippy/pull/9102)\n<!-- changelog_checked -->", "tree": {"sha": "f4fbedb14f22eebb3317ef2723c68a47809185b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4fbedb14f22eebb3317ef2723c68a47809185b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef3867f3943a9180da87ac2290c49a9297198b1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3867f3943a9180da87ac2290c49a9297198b1d", "html_url": "https://github.com/rust-lang/rust/commit/ef3867f3943a9180da87ac2290c49a9297198b1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef3867f3943a9180da87ac2290c49a9297198b1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5011e9d42b9bcedf0753a108018618568700a83", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5011e9d42b9bcedf0753a108018618568700a83", "html_url": "https://github.com/rust-lang/rust/commit/c5011e9d42b9bcedf0753a108018618568700a83"}, {"sha": "76d13bb7fa20ba316c75023c66d74fed8e1881df", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d13bb7fa20ba316c75023c66d74fed8e1881df", "html_url": "https://github.com/rust-lang/rust/commit/76d13bb7fa20ba316c75023c66d74fed8e1881df"}], "stats": {"total": 226, "additions": 225, "deletions": 1}, "files": [{"sha": "66833c1810ae3aca45d3c5167edce8e793b479d6", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef3867f3943a9180da87ac2290c49a9297198b1d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef3867f3943a9180da87ac2290c49a9297198b1d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=ef3867f3943a9180da87ac2290c49a9297198b1d", "patch": "@@ -4975,6 +4975,7 @@ Released 2018-09-13\n [`unit_hash`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_hash\n [`unit_return_expecting_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_return_expecting_ord\n [`unknown_clippy_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#unknown_clippy_lints\n+[`unnecessary_box_returns`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_box_returns\n [`unnecessary_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n [`unnecessary_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_filter_map\n [`unnecessary_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_find_map"}, {"sha": "dbd1a404150ac6b763947bbd6fa6d393accf13e1", "filename": "book/src/lint_configuration.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef3867f3943a9180da87ac2290c49a9297198b1d/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef3867f3943a9180da87ac2290c49a9297198b1d/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=ef3867f3943a9180da87ac2290c49a9297198b1d", "patch": "@@ -130,6 +130,7 @@ Suppress lints whenever the suggested change would cause breakage for other crat\n * [option_option](https://rust-lang.github.io/rust-clippy/master/index.html#option_option)\n * [linkedlist](https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist)\n * [rc_mutex](https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex)\n+* [unnecessary_box_returns](https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_box_returns)\n \n \n ### msrv"}, {"sha": "e550b44e2da049df99b494604f10d8301f84da1d", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef3867f3943a9180da87ac2290c49a9297198b1d/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3867f3943a9180da87ac2290c49a9297198b1d/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=ef3867f3943a9180da87ac2290c49a9297198b1d", "patch": "@@ -617,6 +617,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::unit_types::UNIT_CMP_INFO,\n     crate::unnamed_address::FN_ADDRESS_COMPARISONS_INFO,\n     crate::unnamed_address::VTABLE_ADDRESS_COMPARISONS_INFO,\n+    crate::unnecessary_box_returns::UNNECESSARY_BOX_RETURNS_INFO,\n     crate::unnecessary_owned_empty_strings::UNNECESSARY_OWNED_EMPTY_STRINGS_INFO,\n     crate::unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS_INFO,\n     crate::unnecessary_struct_initialization::UNNECESSARY_STRUCT_INITIALIZATION_INFO,"}, {"sha": "9edac5227c618b1384b82311bb6f3f8e05e9df73", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef3867f3943a9180da87ac2290c49a9297198b1d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3867f3943a9180da87ac2290c49a9297198b1d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ef3867f3943a9180da87ac2290c49a9297198b1d", "patch": "@@ -300,6 +300,7 @@ mod uninit_vec;\n mod unit_return_expecting_ord;\n mod unit_types;\n mod unnamed_address;\n+mod unnecessary_box_returns;\n mod unnecessary_owned_empty_strings;\n mod unnecessary_self_imports;\n mod unnecessary_struct_initialization;\n@@ -940,6 +941,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(allow_attributes::AllowAttribute));\n     store.register_late_pass(move |_| Box::new(manual_main_separator_str::ManualMainSeparatorStr::new(msrv())));\n     store.register_late_pass(|_| Box::new(unnecessary_struct_initialization::UnnecessaryStruct));\n+    store.register_late_pass(move |_| {\n+        Box::new(unnecessary_box_returns::UnnecessaryBoxReturns::new(\n+            avoid_breaking_exported_api,\n+        ))\n+    });\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "912bcda630b83b179d39f42dedeb81dadebb2b55", "filename": "clippy_lints/src/unnecessary_box_returns.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/ef3867f3943a9180da87ac2290c49a9297198b1d/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3867f3943a9180da87ac2290c49a9297198b1d/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs?ref=ef3867f3943a9180da87ac2290c49a9297198b1d", "patch": "@@ -0,0 +1,120 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use rustc_errors::Applicability;\n+use rustc_hir::{def_id::LocalDefId, FnDecl, FnRetTy, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::Symbol;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for a return type containing a `Box<T>` where `T` implements `Sized`\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// It's better to just return `T` in these cases. The caller may not need\n+    /// the value to be boxed, and it's expensive to free the memory once the\n+    /// `Box<T>` been dropped.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// fn foo() -> Box<String> {\n+    ///     Box::new(String::from(\"Hello, world!\"))\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn foo() -> String {\n+    ///     String::from(\"Hello, world!\")\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub UNNECESSARY_BOX_RETURNS,\n+    pedantic,\n+    \"Needlessly returning a Box\"\n+}\n+\n+pub struct UnnecessaryBoxReturns {\n+    avoid_breaking_exported_api: bool,\n+}\n+\n+impl_lint_pass!(UnnecessaryBoxReturns => [UNNECESSARY_BOX_RETURNS]);\n+\n+impl UnnecessaryBoxReturns {\n+    pub fn new(avoid_breaking_exported_api: bool) -> Self {\n+        Self {\n+            avoid_breaking_exported_api,\n+        }\n+    }\n+\n+    fn check_fn_item(&mut self, cx: &LateContext<'_>, decl: &FnDecl<'_>, def_id: LocalDefId, name: Symbol) {\n+        // we don't want to tell someone to break an exported function if they ask us not to\n+        if self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(def_id) {\n+            return;\n+        }\n+\n+        // functions which contain the word \"box\" are exempt from this lint\n+        if name.as_str().contains(\"box\") {\n+            return;\n+        }\n+\n+        let FnRetTy::Return(return_ty_hir) = &decl.output else { return };\n+\n+        let return_ty = cx\n+            .tcx\n+            .erase_late_bound_regions(cx.tcx.fn_sig(def_id).skip_binder())\n+            .output();\n+\n+        if !return_ty.is_box() {\n+            return;\n+        }\n+\n+        let boxed_ty = return_ty.boxed_ty();\n+\n+        // it's sometimes useful to return Box<T> if T is unsized, so don't lint those\n+        if boxed_ty.is_sized(cx.tcx, cx.param_env) {\n+            span_lint_and_then(\n+                cx,\n+                UNNECESSARY_BOX_RETURNS,\n+                return_ty_hir.span,\n+                format!(\"boxed return of the sized type `{boxed_ty}`\").as_str(),\n+                |diagnostic| {\n+                    diagnostic.span_suggestion(\n+                        return_ty_hir.span,\n+                        \"try\",\n+                        boxed_ty.to_string(),\n+                        // the return value and function callers also needs to\n+                        // be changed, so this can't be MachineApplicable\n+                        Applicability::Unspecified,\n+                    );\n+                    diagnostic.help(\"changing this also requires a change to the return expressions in this function\");\n+                },\n+            );\n+        }\n+    }\n+}\n+\n+impl LateLintPass<'_> for UnnecessaryBoxReturns {\n+    fn check_trait_item(&mut self, cx: &LateContext<'_>, item: &TraitItem<'_>) {\n+        let TraitItemKind::Fn(signature, _) = &item.kind else { return };\n+        self.check_fn_item(cx, signature.decl, item.owner_id.def_id, item.ident.name);\n+    }\n+\n+    fn check_impl_item(&mut self, cx: &LateContext<'_>, item: &rustc_hir::ImplItem<'_>) {\n+        // Ignore implementations of traits, because the lint should be on the\n+        // trait, not on the implmentation of it.\n+        let Node::Item(parent) = cx.tcx.hir().get_parent(item.hir_id()) else { return };\n+        let ItemKind::Impl(parent) = parent.kind else { return };\n+        if parent.of_trait.is_some() {\n+            return;\n+        }\n+\n+        let ImplItemKind::Fn(signature, ..) = &item.kind else { return };\n+        self.check_fn_item(cx, signature.decl, item.owner_id.def_id, item.ident.name);\n+    }\n+\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        let ItemKind::Fn(signature, ..) = &item.kind else { return };\n+        self.check_fn_item(cx, signature.decl, item.owner_id.def_id, item.ident.name);\n+    }\n+}"}, {"sha": "5384ae01f926253bc168bf1017af54e22da5876d", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef3867f3943a9180da87ac2290c49a9297198b1d/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3867f3943a9180da87ac2290c49a9297198b1d/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=ef3867f3943a9180da87ac2290c49a9297198b1d", "patch": "@@ -249,7 +249,7 @@ define_Conf! {\n     /// arithmetic-side-effects-allowed-unary = [\"SomeType\", \"AnotherType\"]\n     /// ```\n     (arithmetic_side_effects_allowed_unary: rustc_data_structures::fx::FxHashSet<String> = <_>::default()),\n-    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UNUSED_SELF, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_COLLECTION, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX.\n+    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UNUSED_SELF, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_COLLECTION, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX, UNNECESSARY_BOX_RETURNS.\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),"}, {"sha": "fe60d929759ba8eff87cc691df8f89d345ea78d1", "filename": "tests/ui/unnecessary_box_returns.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ef3867f3943a9180da87ac2290c49a9297198b1d/tests%2Fui%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3867f3943a9180da87ac2290c49a9297198b1d/tests%2Fui%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_box_returns.rs?ref=ef3867f3943a9180da87ac2290c49a9297198b1d", "patch": "@@ -0,0 +1,60 @@\n+#![warn(clippy::unnecessary_box_returns)]\n+\n+trait Bar {\n+    // lint\n+    fn baz(&self) -> Box<usize>;\n+}\n+\n+pub struct Foo {}\n+\n+impl Bar for Foo {\n+    // don't lint: this is a problem with the trait, not the implementation\n+    fn baz(&self) -> Box<usize> {\n+        Box::new(42)\n+    }\n+}\n+\n+impl Foo {\n+    fn baz(&self) -> Box<usize> {\n+        // lint\n+        Box::new(13)\n+    }\n+}\n+\n+// lint\n+fn bxed_usize() -> Box<usize> {\n+    Box::new(5)\n+}\n+\n+// lint\n+fn _bxed_foo() -> Box<Foo> {\n+    Box::new(Foo {})\n+}\n+\n+// don't lint: this is exported\n+pub fn bxed_foo() -> Box<Foo> {\n+    Box::new(Foo {})\n+}\n+\n+// don't lint: str is unsized\n+fn bxed_str() -> Box<str> {\n+    \"Hello, world!\".to_string().into_boxed_str()\n+}\n+\n+// don't lint: function contains the word, \"box\"\n+fn boxed_usize() -> Box<usize> {\n+    Box::new(7)\n+}\n+\n+// don't lint: this has an unspecified return type\n+fn default() {}\n+\n+// don't lint: this doesn't return a Box\n+fn string() -> String {\n+    String::from(\"Hello, world\")\n+}\n+\n+fn main() {\n+    // don't lint: this is a closure\n+    let a = || -> Box<usize> { Box::new(5) };\n+}"}, {"sha": "b17512c10a1773c343d9c9eb9a7b7dd82f6698b4", "filename": "tests/ui/unnecessary_box_returns.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ef3867f3943a9180da87ac2290c49a9297198b1d/tests%2Fui%2Funnecessary_box_returns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef3867f3943a9180da87ac2290c49a9297198b1d/tests%2Fui%2Funnecessary_box_returns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_box_returns.stderr?ref=ef3867f3943a9180da87ac2290c49a9297198b1d", "patch": "@@ -0,0 +1,35 @@\n+error: boxed return of the sized type `usize`\n+  --> $DIR/unnecessary_box_returns.rs:5:22\n+   |\n+LL |     fn baz(&self) -> Box<usize>;\n+   |                      ^^^^^^^^^^ help: try: `usize`\n+   |\n+   = help: changing this also requires a change to the return expressions in this function\n+   = note: `-D clippy::unnecessary-box-returns` implied by `-D warnings`\n+\n+error: boxed return of the sized type `usize`\n+  --> $DIR/unnecessary_box_returns.rs:18:22\n+   |\n+LL |     fn baz(&self) -> Box<usize> {\n+   |                      ^^^^^^^^^^ help: try: `usize`\n+   |\n+   = help: changing this also requires a change to the return expressions in this function\n+\n+error: boxed return of the sized type `usize`\n+  --> $DIR/unnecessary_box_returns.rs:25:20\n+   |\n+LL | fn bxed_usize() -> Box<usize> {\n+   |                    ^^^^^^^^^^ help: try: `usize`\n+   |\n+   = help: changing this also requires a change to the return expressions in this function\n+\n+error: boxed return of the sized type `Foo`\n+  --> $DIR/unnecessary_box_returns.rs:30:19\n+   |\n+LL | fn _bxed_foo() -> Box<Foo> {\n+   |                   ^^^^^^^^ help: try: `Foo`\n+   |\n+   = help: changing this also requires a change to the return expressions in this function\n+\n+error: aborting due to 4 previous errors\n+"}]}