{"sha": "78f97595a3e7ef9d796b77cd5572676a1a41fb71", "node_id": "C_kwDOAAsO6NoAKDc4Zjk3NTk1YTNlN2VmOWQ3OTZiNzdjZDU1NzI2NzZhMWE0MWZiNzE", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-07T22:16:37Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-11T17:46:02Z"}, "message": "Only point at methods that might be relevant", "tree": {"sha": "26d43ff8c0f9ff4e2566872707b5d449749b9cf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26d43ff8c0f9ff4e2566872707b5d449749b9cf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78f97595a3e7ef9d796b77cd5572676a1a41fb71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78f97595a3e7ef9d796b77cd5572676a1a41fb71", "html_url": "https://github.com/rust-lang/rust/commit/78f97595a3e7ef9d796b77cd5572676a1a41fb71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78f97595a3e7ef9d796b77cd5572676a1a41fb71/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aff0ab43c8fecbf9473d60d30e5d03f8612efd91", "url": "https://api.github.com/repos/rust-lang/rust/commits/aff0ab43c8fecbf9473d60d30e5d03f8612efd91", "html_url": "https://github.com/rust-lang/rust/commit/aff0ab43c8fecbf9473d60d30e5d03f8612efd91"}], "stats": {"total": 100, "additions": 81, "deletions": 19}, "files": [{"sha": "cfd7c20767f2803888b7af7afaf7399a3cd9eb61", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/78f97595a3e7ef9d796b77cd5572676a1a41fb71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f97595a3e7ef9d796b77cd5572676a1a41fb71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=78f97595a3e7ef9d796b77cd5572676a1a41fb71", "patch": "@@ -3008,7 +3008,17 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             let Some(prev_assoc_in_method) = assocs.peek() else {\n                                 for entry in assocs_in_method {\n                                     let Some((span, (assoc, ty))) = entry else { continue; };\n-                                    primary_spans.push(span);\n+                                    if type_diffs.iter().any(|diff| {\n+                                        let Sorts(expected_found) = diff else { return false; };\n+                                        self.can_eq(param_env, expected_found.found, ty).is_ok()\n+                                    }) {\n+                                        // FIXME: this doesn't quite work for `Iterator::collect`\n+                                        // because we have `Vec<i32>` and `()`, but we'd want `i32`\n+                                        // to point at the `.into_iter()` call, but as long as we\n+                                        // still point at the other method calls that might have\n+                                        // introduced the issue, this is fine for now.\n+                                        primary_spans.push(span);\n+                                    }\n                                     span_labels.push((\n                                         span,\n                                         format!(\"`{assoc}` is `{ty}` here\"),\n@@ -3022,7 +3032,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 match (entry, prev_entry) {\n                                     (Some((span, (assoc, ty))), Some((_, (_, prev_ty)))) => {\n                                         if ty != *prev_ty {\n-                                            primary_spans.push(span);\n+                                            if type_diffs.iter().any(|diff| {\n+                                                let Sorts(expected_found) = diff else { return false; };\n+                                                self.can_eq(param_env, expected_found.found, ty).is_ok()\n+                                            }) {\n+                                                primary_spans.push(span);\n+                                            }\n                                             span_labels.push((\n                                                 span,\n                                                 format!(\"`{assoc}` changed to `{ty}` here\"),"}, {"sha": "688a532adc6a6874ca489147e4852ac82d85d50b", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78f97595a3e7ef9d796b77cd5572676a1a41fb71/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78f97595a3e7ef9d796b77cd5572676a1a41fb71/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=78f97595a3e7ef9d796b77cd5572676a1a41fb71", "patch": "@@ -23,13 +23,13 @@ LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_rece\n    = help: the trait `FromIterator<()>` is not implemented for `Vec<(u32, _, _)>`\n    = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n note: the method call chain might not have had the expected associated types\n-  --> $DIR/issue-34334.rs:5:36\n+  --> $DIR/issue-34334.rs:5:43\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n    |                               ------ this expression has type `Vec<(_, _, _)>`\n ...\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-   |                                    ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `()` here\n+   |                                    ------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `()` here\n    |                                    |\n    |                                    `std::iter::Iterator::Item` is `&(_, _, _)` here\n note: required by a bound in `collect`"}, {"sha": "32141bf0fb84ed29bc074394cdd1a981bfc0bb5a", "filename": "src/test/ui/iterators/invalid-iterator-chain.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78f97595a3e7ef9d796b77cd5572676a1a41fb71/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f97595a3e7ef9d796b77cd5572676a1a41fb71/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.rs?ref=78f97595a3e7ef9d796b77cd5572676a1a41fb71", "patch": "@@ -17,6 +17,16 @@ fn main() {\n             .map(|x| { x; })\n             .sum::<i32>(),\n     );\n+    println!(\n+        \"{}\",\n+        vec![0, 1] //~ ERROR E0277\n+            .iter()\n+            .map(|x| x * 2)\n+            .map(|x| x as f64)\n+            .filter(|x| *x > 0.0)\n+            .map(|x| { x + 1.0 })\n+            .sum::<i32>(),\n+    );\n     println!(\"{}\", vec![0, 1].iter().map(|x| { x; }).sum::<i32>()); //~ ERROR E0277\n     println!(\"{}\", vec![(), ()].iter().sum::<i32>()); //~ ERROR E0277\n     let a = vec![0];"}, {"sha": "55788ae80e601983eafc302efac1bca73bbd8480", "filename": "src/test/ui/iterators/invalid-iterator-chain.stderr", "status": "modified", "additions": 52, "deletions": 15, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/78f97595a3e7ef9d796b77cd5572676a1a41fb71/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78f97595a3e7ef9d796b77cd5572676a1a41fb71/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr?ref=78f97595a3e7ef9d796b77cd5572676a1a41fb71", "patch": "@@ -10,12 +10,12 @@ LL |     println!(\"{}\", scores.sum::<i32>());\n              <i32 as Sum<&'a i32>>\n              <i32 as Sum>\n note: the method call chain might not have had the expected associated types\n-  --> $DIR/invalid-iterator-chain.rs:3:10\n+  --> $DIR/invalid-iterator-chain.rs:4:10\n    |\n LL |       let scores = vec![(0, 0)]\n    |                    ------------ this expression has type `Vec<({integer}, {integer})>`\n LL |           .iter()\n-   |            ^^^^^^ `std::iter::Iterator::Item` is `&({integer}, {integer})` here\n+   |            ------ `std::iter::Iterator::Item` is `&({integer}, {integer})` here\n LL |           .map(|(a, b)| {\n    |  __________^\n LL | |             a + b;\n@@ -45,18 +45,18 @@ LL |               .sum::<i32>(),\n              <i32 as Sum<&'a i32>>\n              <i32 as Sum>\n note: the method call chain might not have had the expected associated types\n-  --> $DIR/invalid-iterator-chain.rs:11:14\n+  --> $DIR/invalid-iterator-chain.rs:12:14\n    |\n LL |         vec![0, 1]\n    |         ---------- this expression has type `Vec<{integer}>`\n LL |             .iter()\n-   |              ^^^^^^ `std::iter::Iterator::Item` is `&{integer}` here\n+   |              ------ `std::iter::Iterator::Item` is `&{integer}` here\n LL |             .map(|x| x * 2)\n    |              ^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `{integer}` here\n LL |             .map(|x| x as f64)\n-   |              ^^^^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `f64` here\n+   |              ----------------- `std::iter::Iterator::Item` changed to `f64` here\n LL |             .map(|x| x as i64)\n-   |              ^^^^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `i64` here\n+   |              ----------------- `std::iter::Iterator::Item` changed to `i64` here\n LL |             .filter(|x| *x > 0)\n    |              ------------------ `std::iter::Iterator::Item` remains `i64` here\n LL |             .map(|x| { x + 1 })\n@@ -69,8 +69,45 @@ note: required by a bound in `std::iter::Iterator::sum`\n LL |         S: Sum<Self::Item>,\n    |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n \n+error[E0277]: the trait bound `i32: Sum<f64>` is not satisfied\n+  --> $DIR/invalid-iterator-chain.rs:22:9\n+   |\n+LL | /         vec![0, 1]\n+LL | |             .iter()\n+LL | |             .map(|x| x * 2)\n+LL | |             .map(|x| x as f64)\n+LL | |             .filter(|x| *x > 0.0)\n+LL | |             .map(|x| { x + 1.0 })\n+   | |_________________________________^ the trait `Sum<f64>` is not implemented for `i32`\n+LL |               .sum::<i32>(),\n+   |                --- required by a bound introduced by this call\n+   |\n+   = help: the following other types implement trait `Sum<A>`:\n+             <i32 as Sum<&'a i32>>\n+             <i32 as Sum>\n+note: the method call chain might not have had the expected associated types\n+  --> $DIR/invalid-iterator-chain.rs:24:14\n+   |\n+LL |         vec![0, 1]\n+   |         ---------- this expression has type `Vec<{integer}>`\n+LL |             .iter()\n+   |              ------ `std::iter::Iterator::Item` is `&{integer}` here\n+LL |             .map(|x| x * 2)\n+   |              ^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `{integer}` here\n+LL |             .map(|x| x as f64)\n+   |              ^^^^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `f64` here\n+LL |             .filter(|x| *x > 0.0)\n+   |              -------------------- `std::iter::Iterator::Item` remains `f64` here\n+LL |             .map(|x| { x + 1.0 })\n+   |              -------------------- `std::iter::Iterator::Item` remains `f64` here\n+note: required by a bound in `std::iter::Iterator::sum`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         S: Sum<Self::Item>,\n+   |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n+\n error[E0277]: the trait bound `i32: Sum<()>` is not satisfied\n-  --> $DIR/invalid-iterator-chain.rs:20:20\n+  --> $DIR/invalid-iterator-chain.rs:30:20\n    |\n LL |     println!(\"{}\", vec![0, 1].iter().map(|x| { x; }).sum::<i32>());\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --- required by a bound introduced by this call\n@@ -81,10 +118,10 @@ LL |     println!(\"{}\", vec![0, 1].iter().map(|x| { x; }).sum::<i32>());\n              <i32 as Sum<&'a i32>>\n              <i32 as Sum>\n note: the method call chain might not have had the expected associated types\n-  --> $DIR/invalid-iterator-chain.rs:20:31\n+  --> $DIR/invalid-iterator-chain.rs:30:38\n    |\n LL |     println!(\"{}\", vec![0, 1].iter().map(|x| { x; }).sum::<i32>());\n-   |                    ---------- ^^^^^^ ^^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `()` here\n+   |                    ---------- ------ ^^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `()` here\n    |                    |          |\n    |                    |          `std::iter::Iterator::Item` is `&{integer}` here\n    |                    this expression has type `Vec<{integer}>`\n@@ -95,7 +132,7 @@ LL |         S: Sum<Self::Item>,\n    |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n \n error[E0277]: the trait bound `i32: Sum<&()>` is not satisfied\n-  --> $DIR/invalid-iterator-chain.rs:21:20\n+  --> $DIR/invalid-iterator-chain.rs:31:20\n    |\n LL |     println!(\"{}\", vec![(), ()].iter().sum::<i32>());\n    |                    ^^^^^^^^^^^^^^^^^^^ --- required by a bound introduced by this call\n@@ -106,7 +143,7 @@ LL |     println!(\"{}\", vec![(), ()].iter().sum::<i32>());\n              <i32 as Sum<&'a i32>>\n              <i32 as Sum>\n note: the method call chain might not have had the expected associated types\n-  --> $DIR/invalid-iterator-chain.rs:21:33\n+  --> $DIR/invalid-iterator-chain.rs:31:33\n    |\n LL |     println!(\"{}\", vec![(), ()].iter().sum::<i32>());\n    |                    ------------ ^^^^^^ `std::iter::Iterator::Item` is `&()` here\n@@ -119,7 +156,7 @@ LL |         S: Sum<Self::Item>,\n    |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n \n error[E0277]: a value of type `Vec<i32>` cannot be built from an iterator over elements of type `()`\n-  --> $DIR/invalid-iterator-chain.rs:30:23\n+  --> $DIR/invalid-iterator-chain.rs:40:23\n    |\n LL |     let g: Vec<i32> = f.collect();\n    |                       ^ ------- required by a bound introduced by this call\n@@ -129,12 +166,12 @@ LL |     let g: Vec<i32> = f.collect();\n    = help: the trait `FromIterator<()>` is not implemented for `Vec<i32>`\n    = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n note: the method call chain might not have had the expected associated types\n-  --> $DIR/invalid-iterator-chain.rs:23:15\n+  --> $DIR/invalid-iterator-chain.rs:36:15\n    |\n LL |       let a = vec![0];\n    |               ------- this expression has type `Vec<{integer}>`\n LL |       let b = a.into_iter();\n-   |                 ^^^^^^^^^^^ `std::iter::Iterator::Item` is `{integer}` here\n+   |                 ----------- `std::iter::Iterator::Item` is `{integer}` here\n LL |       let c = b.map(|x| x + 1);\n    |                 -------------- `std::iter::Iterator::Item` remains `{integer}` here\n LL |       let d = c.filter(|x| *x > 10 );\n@@ -152,6 +189,6 @@ note: required by a bound in `collect`\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}