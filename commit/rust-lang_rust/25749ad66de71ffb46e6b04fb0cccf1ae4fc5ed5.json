{"sha": "25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NzQ5YWQ2NmRlNzFmZmI0NmU2YjA0ZmIwY2NjZjFhZTRmYzVlZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-25T14:52:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-25T14:52:30Z"}, "message": "Auto merge of #49321 - ishitatsuyuki:compile-pass, r=alexcrichton\n\nIntroduce compile-pass\n\nr? @alexcrichton\n\nThe plan is to move things that cannot fail (no assert, unwrap, etc) out so we don't have to run them, and in the long term we can also stop running LLVM for them.\n\nOut of 3215 tests...\n\n```\nLanguage            Files        Lines         Code     Comments       Blanks\nRust                 3215       119254        64688        35135        19431\n```\n\n16% of them has an empty main (which is already moved in this PR).\n\n```\ngrep -rnPzl 'fn main\\(\\)\\s*{\\s*}' | xargs rg --files-without-match cfg | wc -l\n547\n```\n\nAnd only 50% of the tests contains assertions:\n\n```\nrg -e assert -e unwrap -e expect -e panic -l | wc -l\n1600\n```\n\nThe remainder is likely able to get moved, but they need check by a human so I didn't touch them in PR.\n\ncc @rust-lang/compiler\n\n* [ ] Update documentation", "tree": {"sha": "bede1bef21d4a6cc7b24df6cfb4533f8f1d1bbdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bede1bef21d4a6cc7b24df6cfb4533f8f1d1bbdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5", "html_url": "https://github.com/rust-lang/rust/commit/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81135c9dbc92dc78df747d5096ff07d867ef3b02", "url": "https://api.github.com/repos/rust-lang/rust/commits/81135c9dbc92dc78df747d5096ff07d867ef3b02", "html_url": "https://github.com/rust-lang/rust/commit/81135c9dbc92dc78df747d5096ff07d867ef3b02"}, {"sha": "00bc634f8f396b7a0e1e6545b05eb117b5ddc7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/00bc634f8f396b7a0e1e6545b05eb117b5ddc7c6", "html_url": "https://github.com/rust-lang/rust/commit/00bc634f8f396b7a0e1e6545b05eb117b5ddc7c6"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "d24a6506c2c75997a53065fe6511994dfa2da96b", "filename": "src/test/run-pass/compiletest-skip-trans.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5/src%2Ftest%2Frun-pass%2Fcompiletest-skip-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5/src%2Ftest%2Frun-pass%2Fcompiletest-skip-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompiletest-skip-trans.rs?ref=25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that with the `skip-trans` option the test isn't executed.\n+\n+// skip-trans\n+\n+fn main() {\n+    unreachable!();\n+}"}, {"sha": "73dd079cf0ccb8f40e1cc4a494519cb9dfaaab37", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5", "patch": "@@ -228,6 +228,8 @@ pub struct TestProps {\n     pub check_test_line_numbers_match: bool,\n     // The test must be compiled and run successfully. Only used in UI tests for now.\n     pub run_pass: bool,\n+    // Skip any codegen step and running the executable. Only for run-pass.\n+    pub skip_trans: bool,\n     // Do not pass `-Z ui-testing` to UI tests\n     pub disable_ui_testing_normalization: bool,\n     // customized normalization rules\n@@ -260,6 +262,7 @@ impl TestProps {\n             compile_pass: false,\n             check_test_line_numbers_match: false,\n             run_pass: false,\n+            skip_trans: false,\n             disable_ui_testing_normalization: false,\n             normalize_stdout: vec![],\n             normalize_stderr: vec![],\n@@ -381,6 +384,10 @@ impl TestProps {\n                     config.parse_compile_pass(ln) || self.run_pass;\n             }\n \n+                        if !self.skip_trans {\n+                            self.skip_trans = config.parse_skip_trans(ln);\n+                        }\n+\n             if !self.disable_ui_testing_normalization {\n                 self.disable_ui_testing_normalization =\n                     config.parse_disable_ui_testing_normalization(ln);\n@@ -524,6 +531,10 @@ impl Config {\n         self.parse_name_directive(line, \"run-pass\")\n     }\n \n+    fn parse_skip_trans(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"skip-trans\")\n+    }\n+\n     fn parse_env(&self, line: &str, name: &str) -> Option<(String, String)> {\n         self.parse_name_value_directive(line, name).map(|nv| {\n             // nv is either FOO or FOO=BAR"}, {"sha": "85434bb8a69b8a70290c8eca9caf17601282b22b", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5", "patch": "@@ -343,9 +343,11 @@ impl<'test> TestCx<'test> {\n             \"run-pass tests with expected warnings should be moved to ui/\"\n         );\n \n-        let proc_res = self.exec_compiled_test();\n-        if !proc_res.status.success() {\n-            self.fatal_proc_rec(\"test run failed!\", &proc_res);\n+        if !self.props.skip_trans {\n+            let proc_res = self.exec_compiled_test();\n+            if !proc_res.status.success() {\n+                self.fatal_proc_rec(\"test run failed!\", &proc_res);\n+            }\n         }\n     }\n \n@@ -1697,6 +1699,11 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n+        if self.props.skip_trans {\n+            assert!(!self.props.compile_flags.iter().any(|s| s.starts_with(\"--emit\")));\n+            rustc.args(&[\"--emit\", \"metadata\"]);\n+        }\n+\n         if !is_rustdoc {\n             if self.config.target == \"wasm32-unknown-unknown\" {\n                 // rustc.arg(\"-g\"); // get any backtrace at all on errors"}]}