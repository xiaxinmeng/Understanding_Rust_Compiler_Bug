{"sha": "41ee9eaee76fc38eebc0580e8361bced8edd7ccb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZWU5ZWFlZTc2ZmMzOGVlYmMwNTgwZTgzNjFiY2VkOGVkZDdjY2I=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-11T01:42:23Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-25T22:26:27Z"}, "message": "Refactor `check_track_caller`", "tree": {"sha": "b4abc88ccbde340940981e59b4d7bf753ce269df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4abc88ccbde340940981e59b4d7bf753ce269df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41ee9eaee76fc38eebc0580e8361bced8edd7ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41ee9eaee76fc38eebc0580e8361bced8edd7ccb", "html_url": "https://github.com/rust-lang/rust/commit/41ee9eaee76fc38eebc0580e8361bced8edd7ccb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41ee9eaee76fc38eebc0580e8361bced8edd7ccb/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4552c8f2f7c20ff5bb7e23b31b4aa863b4502903", "url": "https://api.github.com/repos/rust-lang/rust/commits/4552c8f2f7c20ff5bb7e23b31b4aa863b4502903", "html_url": "https://github.com/rust-lang/rust/commit/4552c8f2f7c20ff5bb7e23b31b4aa863b4502903"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "d366cd9b4c3fab72fb55fbfa5e350de5af36211c", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/41ee9eaee76fc38eebc0580e8361bced8edd7ccb/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ee9eaee76fc38eebc0580e8361bced8edd7ccb/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=41ee9eaee76fc38eebc0580e8361bced8edd7ccb", "patch": "@@ -146,7 +146,7 @@ impl CheckAttrVisitor<'tcx> {\n             } else if attr.check_name(sym::target_feature) {\n                 self.check_target_feature(attr, span, target)\n             } else if attr.check_name(sym::track_caller) {\n-                self.check_track_caller(attr, &item, target)\n+                self.check_track_caller(&attr.span, attrs, span, target)\n             } else {\n                 true\n             };\n@@ -190,21 +190,27 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     /// Checks if a `#[track_caller]` is applied to a non-naked function. Returns `true` if valid.\n-    fn check_track_caller(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) -> bool {\n+    fn check_track_caller(\n+        &self,\n+        attr_span: &Span,\n+        attrs: &HirVec<Attribute>,\n+        span: &Span,\n+        target: Target,\n+    ) -> bool {\n         if target != Target::Fn {\n             struct_span_err!(\n                 self.tcx.sess,\n-                attr.span,\n+                *attr_span,\n                 E0739,\n                 \"attribute should be applied to function\"\n             )\n-            .span_label(item.span, \"not a function\")\n+            .span_label(*span, \"not a function\")\n             .emit();\n             false\n-        } else if attr::contains_name(&item.attrs, sym::naked) {\n+        } else if attr::contains_name(attrs, sym::naked) {\n             struct_span_err!(\n                 self.tcx.sess,\n-                attr.span,\n+                *attr_span,\n                 E0736,\n                 \"cannot use `#[track_caller]` with `#[naked]`\",\n             )"}]}