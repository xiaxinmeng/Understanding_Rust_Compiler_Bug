{"sha": "f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "node_id": "C_kwDOAAsO6NoAKGY0MTg4NTlkOGE0NjRmYjlmZjViNWIxYTQ0NTlkMzVmYjhjZmFiMWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-28T07:02:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-28T07:02:21Z"}, "message": "Auto merge of #109690 - matthiaskrgr:rollup-6p5m0es, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #108548 (Clarify the 'use a constant in a pattern' error message)\n - #109565 (Improve documentation for E0223)\n - #109661 (Fix LVI test post LLVM 16 update)\n - #109667 (Always set `RUSTC_BOOTSTRAP` with `x doc`)\n - #109669 (Update books)\n - #109678 (Don't shadow the `dep_node` var in `incremental_verify_ich_failed`)\n - #109682 (Add `#[inline]` to CStr trait implementations)\n - #109685 (Make doc comment a little bit more accurate)\n - #109687 (Document the heuristics IsTerminal uses on Windows)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ba5671b3f24a587b97680fab2e4f3156e6dc38a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba5671b3f24a587b97680fab2e4f3156e6dc38a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "html_url": "https://github.com/rust-lang/rust/commit/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc064b341be231403d181402a786cce7f1c73f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc064b341be231403d181402a786cce7f1c73f1", "html_url": "https://github.com/rust-lang/rust/commit/cbc064b341be231403d181402a786cce7f1c73f1"}, {"sha": "a69496002cd08d73fe1c901f2f179ca0a87fefb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a69496002cd08d73fe1c901f2f179ca0a87fefb8", "html_url": "https://github.com/rust-lang/rust/commit/a69496002cd08d73fe1c901f2f179ca0a87fefb8"}], "stats": {"total": 256, "additions": 215, "deletions": 41}, "files": [{"sha": "ba5f00528218d155859d827152bcebf66942018d", "filename": "compiler/rustc_error_codes/src/error_codes/E0223.md", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0223.md", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0223.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0223.md?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,31 +3,33 @@ An attempt was made to retrieve an associated type, but the type was ambiguous.\n Erroneous code example:\n \n ```compile_fail,E0223\n-trait MyTrait {type X; }\n+trait Trait { type X; }\n \n fn main() {\n-    let foo: MyTrait::X;\n+    let foo: Trait::X;\n }\n ```\n \n-The problem here is that we're attempting to take the type of X from MyTrait.\n-Unfortunately, the type of X is not defined, because it's only made concrete in\n-implementations of the trait. A working version of this code might look like:\n+The problem here is that we're attempting to take the associated type of `X`\n+from `Trait`. Unfortunately, the type of `X` is not defined, because it's only\n+made concrete in implementations of the trait. A working version of this code\n+might look like:\n \n ```\n-trait MyTrait {type X; }\n-struct MyStruct;\n+trait Trait { type X; }\n \n-impl MyTrait for MyStruct {\n+struct Struct;\n+impl Trait for Struct {\n     type X = u32;\n }\n \n fn main() {\n-    let foo: <MyStruct as MyTrait>::X;\n+    let foo: <Struct as Trait>::X;\n }\n ```\n \n-This syntax specifies that we want the X type from MyTrait, as made concrete in\n-MyStruct. The reason that we cannot simply use `MyStruct::X` is that MyStruct\n-might implement two different traits with identically-named associated types.\n-This syntax allows disambiguation between the two.\n+This syntax specifies that we want the associated type `X` from `Struct`'s\n+implementation of `Trait`.\n+\n+Due to internal limitations of the current compiler implementation we cannot\n+simply use `Struct::X`."}, {"sha": "f3c80c6d8543b3a205f3b8e4699f36fbd4999867", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -34,7 +34,7 @@ pub type MakeBackendFn = fn() -> Box<dyn CodegenBackend>;\n /// specific features (SSE, NEON etc.).\n ///\n /// This is performed by checking whether a set of permitted features\n-/// is available on the target machine, by querying LLVM.\n+/// is available on the target machine, by querying the codegen backend.\n pub fn add_configuration(\n     cfg: &mut CrateConfig,\n     sess: &mut Session,"}, {"sha": "fcc7cbe0715f525c31a499d5c737e74a23f3e1bb", "filename": "compiler/rustc_mir_build/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/compiler%2Frustc_mir_build%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/compiler%2Frustc_mir_build%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fmessages.ftl?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -331,6 +331,10 @@ mir_build_indirect_structural_match =\n mir_build_nontrivial_structural_match =\n     to use a constant of type `{$non_sm_ty}` in a pattern, the constant's initializer must be trivial or `{$non_sm_ty}` must be annotated with `#[derive(PartialEq, Eq)]`\n \n+mir_build_type_not_structural_tip = the traits must be derived, manual `impl`s are not sufficient\n+\n+mir_build_type_not_structural_more_info = see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n+\n mir_build_overlapping_range_endpoints = multiple patterns overlap on their endpoints\n     .range = ... with this range\n     .note = you likely meant to write mutually exclusive ranges"}, {"sha": "cbfca77bd25d3b1a3336f7abfd0f6f13e72c31d6", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -663,6 +663,8 @@ pub struct UnionPattern {\n \n #[derive(Diagnostic)]\n #[diag(mir_build_type_not_structural)]\n+#[note(mir_build_type_not_structural_tip)]\n+#[note(mir_build_type_not_structural_more_info)]\n pub struct TypeNotStructural<'tcx> {\n     #[primary_span]\n     pub span: Span,\n@@ -695,12 +697,16 @@ pub struct PointerPattern;\n \n #[derive(LintDiagnostic)]\n #[diag(mir_build_indirect_structural_match)]\n+#[note(mir_build_type_not_structural_tip)]\n+#[note(mir_build_type_not_structural_more_info)]\n pub struct IndirectStructuralMatch<'tcx> {\n     pub non_sm_ty: Ty<'tcx>,\n }\n \n #[derive(LintDiagnostic)]\n #[diag(mir_build_nontrivial_structural_match)]\n+#[note(mir_build_type_not_structural_tip)]\n+#[note(mir_build_type_not_structural_more_info)]\n pub struct NontrivialStructuralMatch<'tcx> {\n     pub non_sm_ty: Ty<'tcx>,\n }"}, {"sha": "519ea5ffed18fe22839b298b20faffa5454cc182", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -703,8 +703,7 @@ fn incremental_verify_ich_failed<Tcx>(\n         };\n \n         let dep_node = tcx.dep_graph().data().unwrap().prev_node_of(prev_index);\n-\n-        let dep_node = tcx.sess().emit_err(crate::error::IncrementCompilation {\n+        tcx.sess().emit_err(crate::error::IncrementCompilation {\n             run_cmd,\n             dep_node: format!(\"{dep_node:?}\"),\n         });"}, {"sha": "4a5306ccaa7923f60632b428782fdd27bff0cf24", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -172,6 +172,7 @@ impl fmt::Debug for CStr {\n \n #[stable(feature = \"cstr_default\", since = \"1.10.0\")]\n impl Default for &CStr {\n+    #[inline]\n     fn default() -> Self {\n         const SLICE: &[c_char] = &[0];\n         // SAFETY: `SLICE` is indeed pointing to a valid nul-terminated string.\n@@ -623,6 +624,7 @@ impl CStr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for CStr {\n+    #[inline]\n     fn eq(&self, other: &CStr) -> bool {\n         self.to_bytes().eq(other.to_bytes())\n     }\n@@ -631,12 +633,14 @@ impl PartialEq for CStr {\n impl Eq for CStr {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for CStr {\n+    #[inline]\n     fn partial_cmp(&self, other: &CStr) -> Option<Ordering> {\n         self.to_bytes().partial_cmp(&other.to_bytes())\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for CStr {\n+    #[inline]\n     fn cmp(&self, other: &CStr) -> Ordering {\n         self.to_bytes().cmp(&other.to_bytes())\n     }\n@@ -646,6 +650,7 @@ impl Ord for CStr {\n impl ops::Index<ops::RangeFrom<usize>> for CStr {\n     type Output = CStr;\n \n+    #[inline]\n     fn index(&self, index: ops::RangeFrom<usize>) -> &CStr {\n         let bytes = self.to_bytes_with_nul();\n         // we need to manually check the starting index to account for the null"}, {"sha": "1a3200a5c62b830a11bbd8c4b6fc3341e2822b77", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -1054,6 +1054,15 @@ pub trait IsTerminal: crate::sealed::Sealed {\n     /// On platforms where Rust does not know how to detect a terminal yet, this will return\n     /// `false`. This will also return `false` if an unexpected error occurred, such as from\n     /// passing an invalid file descriptor.\n+    ///\n+    /// # Platform-specific behavior\n+    ///\n+    /// On Windows, in addition to detecting consoles, this currently uses some heuristics to\n+    /// detect older msys/cygwin/mingw pseudo-terminals based on device name: devices with names\n+    /// starting with `msys-` or `cygwin-` and ending in `-pty` will be considered terminals.\n+    /// Note that this [may change in the future][changes].\n+    ///\n+    /// [changes]: io#platform-specific-behavior\n     fn is_terminal(&self) -> bool;\n }\n "}, {"sha": "be43affa404e98fef9bac67f0d31b4654c613708", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -1027,10 +1027,11 @@ impl Step for RustcBook {\n         if self.validate {\n             cmd.arg(\"--validate\");\n         }\n-        if !builder.unstable_features() {\n-            // We need to validate nightly features, even on the stable channel.\n-            cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n-        }\n+        // We need to validate nightly features, even on the stable channel.\n+        // Set this unconditionally as the stage0 compiler may be being used to\n+        // document.\n+        cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n+\n         // If the lib directories are in an unusual location (changed in\n         // config.toml), then this needs to explicitly update the dylib search\n         // path."}, {"sha": "b5f7500fc40775096c2bbd204eae096612cf9047", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -1 +1 @@\n-Subproject commit 1f3e4cd4fd88b5b5d45feb86a11b6d2f93e5a974\n+Subproject commit b5f7500fc40775096c2bbd204eae096612cf9047"}, {"sha": "3c47807a3131b3c7cacb508f52632078d253cd0a", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -1 +1 @@\n-Subproject commit 24c87f6663aed55b05d2cc286878f28f21918825\n+Subproject commit 3c47807a3131b3c7cacb508f52632078d253cd0a"}, {"sha": "cfbfd648ce33926c3490f24de9a5b56cce404b88", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -1 +1 @@\n-Subproject commit af0998b7473839ca75563ba3d3e7fd0160bef235\n+Subproject commit cfbfd648ce33926c3490f24de9a5b56cce404b88"}, {"sha": "d08baa166b463537229eeb737c4ccadabd83cf78", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -1 +1 @@\n-Subproject commit b1b6d693cd1461e53de4132c1b183ace31cd36e5\n+Subproject commit d08baa166b463537229eeb737c4ccadabd83cf78"}, {"sha": "263c27d3d646af634a9b338163ce3416db5fcf75", "filename": "src/tools/clippy/tests/ui/crashes/ice-6254.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6254.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -6,6 +6,8 @@ LL |         FOO_REF_REF => {},\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n    = note: `-D indirect-structural-match` implied by `-D warnings`\n \n error: aborting due to previous error"}, {"sha": "d2e53bee08f4664b6e03562f87a9396d51830a29", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/cc_plus_one_asm.checks", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_asm.checks?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -2,6 +2,6 @@ CHECK: cc_plus_one_asm\n CHECK-NEXT: movl\n CHECK-NEXT: lfence\n CHECK-NEXT: incl\n-CHECK-NEXT: shlq $0, (%rsp)\n+CHECK-NEXT: shlq $0x0, (%rsp)\n CHECK-NEXT: lfence\n CHECK-NEXT: retq"}, {"sha": "0a3d1dced42d509dd221a1bbe8682d5a61ced063", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/cc_plus_one_c_asm.checks", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_c_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_c_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_c_asm.checks?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -6,7 +6,7 @@ CHECK:      lfence\n CHECK:      lfence\n CHECK-NEXT: incl\n CHECK-NEXT: jmp\n-CHECK-NEXT: shlq    $0, (%rsp)\n+CHECK-NEXT: shlq\t$0x0, (%rsp)\n CHECK-NEXT: lfence\n CHECK-NEXT: retq\n CHECK:      popq"}, {"sha": "0126cd8ee643759ebd9f77a35a74bf7271277919", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/cc_plus_one_cxx_asm.checks", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_cxx_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_cxx_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_cxx_asm.checks?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -7,7 +7,7 @@ CHECK:      lfence\n CHECK:      lfence\n CHECK-NEXT: incl\n CHECK-NEXT: jmp     0x{{[[:xdigit:]]+}} <cc_plus_one_cxx_asm+0x{{[[:xdigit:]]+}}>\n-CHECK-NEXT: shlq    $0, (%rsp)\n+CHECK-NEXT: shlq    $0x0, (%rsp)\n CHECK-NEXT: lfence\n CHECK-NEXT: retq\n CHECK:      popq"}, {"sha": "615675488482005910d02724c5f3b8221c7b2b6a", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/cmake_plus_one_asm.checks", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_asm.checks?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -2,6 +2,6 @@ CHECK: cmake_plus_one_asm\n CHECK-NEXT: movl\n CHECK-NEXT: lfence\n CHECK-NEXT: incl\n-CHECK-NEXT: shlq    $0, (%rsp)\n+CHECK-NEXT: shlq    $0x0, (%rsp)\n CHECK-NEXT: lfence\n CHECK-NEXT: retq"}, {"sha": "17312b9126ab86de4b55086a1d2653e07454f36d", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/cmake_plus_one_c_asm.checks", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_c_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_c_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_c_asm.checks?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -7,7 +7,7 @@ CHECK:      movl\n CHECK:      lfence\n CHECK-NEXT: incl\n CHECK-NEXT: jmp     0x{{[[:xdigit:]]+}} <cmake_plus_one_c_asm+0x{{[[:xdigit:]]+}}>\n-CHECK-NEXT: shlq    $0, (%rsp)\n+CHECK-NEXT: shlq    $0x0, (%rsp)\n CHECK-NEXT: lfence\n CHECK-NEXT: retq\n CHECK:      popq"}, {"sha": "222e4ef79836d023cf3b03b192b8ca8bb444b98d", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/cmake_plus_one_cxx_asm.checks", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_cxx_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_cxx_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_cxx_asm.checks?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -7,7 +7,7 @@ CHECK:      movl\n CHECK:      lfence\n CHECK-NEXT: incl\n CHECK-NEXT: jmp     0x{{[[:xdigit:]]+}} <cmake_plus_one_cxx_asm+0x{{[[:xdigit:]]+}}>\n-CHECK-NEXT: shlq    $0, (%rsp)\n+CHECK-NEXT: shlq    $0x0, (%rsp)\n CHECK-NEXT: lfence\n CHECK-NEXT: retq\n CHECK:      popq"}, {"sha": "b46cf758384e073bd6acb031465ae5383913ad5c", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/unw_getcontext.checks", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Funw_getcontext.checks", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Funw_getcontext.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Funw_getcontext.checks?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -1,6 +1,6 @@\n CHECK: unw_getcontext\n CHECK:      lfence\n CHECK:      lfence\n-CHECK:      shlq    $0, (%rsp)\n+CHECK:      shlq    $0x0, (%rsp)\n CHECK-NEXT: lfence\n CHECK-NEXT: retq"}, {"sha": "2f6786999ed4d89970cd4cda5df422dd81490699", "filename": "tests/ui/consts/const_in_pattern/cross-crate-fail.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,12 +3,18 @@ error: to use a constant of type `CustomEq` in a pattern, `CustomEq` must be ann\n    |\n LL |         consts::SOME => panic!(),\n    |         ^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `CustomEq` in a pattern, `CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/cross-crate-fail.rs:20:9\n    |\n LL |         <Defaulted as consts::AssocConst>::SOME  => panic!(),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to 2 previous errors\n "}, {"sha": "41de5e7b4fe2e7244a4851f1d903333dc4399855", "filename": "tests/ui/consts/const_in_pattern/custom-eq-branch-warn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -28,6 +28,8 @@ fn main() {\n     match Foo::Qux(CustomEq) {\n         BAR_BAZ => panic!(),\n         //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| NOTE the traits must be derived\n+        //~| NOTE StructuralEq.html for details\n         //~| WARN this was previously accepted\n         //~| NOTE see issue #73448\n         //~| NOTE `#[warn(nontrivial_structural_match)]` on by default"}, {"sha": "3f19c67d223ef7e9ef090b0d5cf477794d086196", "filename": "tests/ui/consts/const_in_pattern/custom-eq-branch-warn.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -6,6 +6,8 @@ LL |         BAR_BAZ => panic!(),\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n    = note: `#[warn(nontrivial_structural_match)]` on by default\n \n warning: 1 warning emitted"}, {"sha": "b005f3220e9c4cb1cceacd9d6d8186576bfc4ee1", "filename": "tests/ui/consts/const_in_pattern/incomplete-slice.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fincomplete-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fincomplete-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fincomplete-slice.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -6,6 +6,8 @@ LL |         E_SL => {}\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n    = note: `#[warn(indirect_structural_match)]` on by default\n \n error[E0004]: non-exhaustive patterns: `&_` not covered"}, {"sha": "df155bdb625e69fd99697694199e17e23517080b", "filename": "tests/ui/consts/const_in_pattern/issue-78057.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-78057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-78057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-78057.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `Opaque` in a pattern, `Opaque` must be annotat\n    |\n LL |         FOO => {},\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/issue-78057.rs:14:9"}, {"sha": "cced6af499f18f5323fc044ee97d553c373b47f8", "filename": "tests/ui/consts/const_in_pattern/no-eq-branch-fail.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n    |\n LL |         BAR_BAZ => panic!(),\n    |         ^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "958bf373cf40dc43cc20504619cf28934e48371e", "filename": "tests/ui/consts/const_in_pattern/reject_non_partial_eq.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `NoPartialEq` in a pattern, `NoPartialEq` must\n    |\n LL |         NO_PARTIAL_EQ_NONE => println!(\"NO_PARTIAL_EQ_NONE\"),\n    |         ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "dc6b9a33197f1812aa32195a02c1dfd0eb2185a6", "filename": "tests/ui/consts/const_in_pattern/reject_non_structural.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.rs?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -39,45 +39,67 @@ fn main() {\n     const ENUM: Derive<NoDerive> = Derive::Some(NoDerive);\n     match Derive::Some(NoDerive) { ENUM => dbg!(ENUM), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const FIELD: OND = TrivialEq(Some(NoDerive)).0;\n     match Some(NoDerive) { FIELD => dbg!(FIELD), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const NO_DERIVE_SOME: OND = Some(NoDerive);\n     const INDIRECT: OND = NO_DERIVE_SOME;\n     match Some(NoDerive) {INDIRECT => dbg!(INDIRECT), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const TUPLE: (OND, OND) = (None, Some(NoDerive));\n     match (None, Some(NoDerive)) { TUPLE => dbg!(TUPLE), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const TYPE_ASCRIPTION: OND = type_ascribe!(Some(NoDerive), OND);\n     match Some(NoDerive) { TYPE_ASCRIPTION => dbg!(TYPE_ASCRIPTION), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const ARRAY: [OND; 2] = [None, Some(NoDerive)];\n     match [None, Some(NoDerive)] { ARRAY => dbg!(ARRAY), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const REPEAT: [OND; 2] = [Some(NoDerive); 2];\n     match [Some(NoDerive); 2] { REPEAT => dbg!(REPEAT), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n     //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     trait Trait: Sized { const ASSOC: Option<Self>; }\n     impl Trait for NoDerive { const ASSOC: Option<NoDerive> = Some(NoDerive); }\n     match Some(NoDerive) { NoDerive::ASSOC => dbg!(NoDerive::ASSOC), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const BLOCK: OND = { NoDerive; Some(NoDerive) };\n     match Some(NoDerive) { BLOCK => dbg!(BLOCK), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const ADDR_OF: &OND = &Some(NoDerive);\n     match &Some(NoDerive) { ADDR_OF => dbg!(ADDR_OF), _ => panic!(\"whoops\"), };\n     //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n     //~| WARN previously accepted by the compiler but is being phased out\n     //~| NOTE for more information, see issue #62411\n }"}, {"sha": "b6e439f21397fee2e646cb15ca8e7f9351177002", "filename": "tests/ui/consts/const_in_pattern/reject_non_structural.stderr", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,69 +3,101 @@ error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be ann\n    |\n LL |     match Derive::Some(NoDerive) { ENUM => dbg!(ENUM), _ => panic!(\"whoops\"), };\n    |                                    ^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:44:28\n+  --> $DIR/reject_non_structural.rs:46:28\n    |\n LL |     match Some(NoDerive) { FIELD => dbg!(FIELD), _ => panic!(\"whoops\"), };\n    |                            ^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:49:27\n+  --> $DIR/reject_non_structural.rs:53:27\n    |\n LL |     match Some(NoDerive) {INDIRECT => dbg!(INDIRECT), _ => panic!(\"whoops\"), };\n    |                           ^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:53:36\n+  --> $DIR/reject_non_structural.rs:59:36\n    |\n LL |     match (None, Some(NoDerive)) { TUPLE => dbg!(TUPLE), _ => panic!(\"whoops\"), };\n    |                                    ^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:57:28\n+  --> $DIR/reject_non_structural.rs:65:28\n    |\n LL |     match Some(NoDerive) { TYPE_ASCRIPTION => dbg!(TYPE_ASCRIPTION), _ => panic!(\"whoops\"), };\n    |                            ^^^^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:61:36\n+  --> $DIR/reject_non_structural.rs:71:36\n    |\n LL |     match [None, Some(NoDerive)] { ARRAY => dbg!(ARRAY), _ => panic!(\"whoops\"), };\n    |                                    ^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:65:33\n+  --> $DIR/reject_non_structural.rs:77:33\n    |\n LL |     match [Some(NoDerive); 2] { REPEAT => dbg!(REPEAT), _ => panic!(\"whoops\"), };\n    |                                 ^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:65:33\n+  --> $DIR/reject_non_structural.rs:77:33\n    |\n LL |     match [Some(NoDerive); 2] { REPEAT => dbg!(REPEAT), _ => panic!(\"whoops\"), };\n    |                                 ^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:71:28\n+  --> $DIR/reject_non_structural.rs:87:28\n    |\n LL |     match Some(NoDerive) { NoDerive::ASSOC => dbg!(NoDerive::ASSOC), _ => panic!(\"whoops\"), };\n    |                            ^^^^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:75:28\n+  --> $DIR/reject_non_structural.rs:93:28\n    |\n LL |     match Some(NoDerive) { BLOCK => dbg!(BLOCK), _ => panic!(\"whoops\"), };\n    |                            ^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:79:29\n+  --> $DIR/reject_non_structural.rs:99:29\n    |\n LL |     match &Some(NoDerive) { ADDR_OF => dbg!(ADDR_OF), _ => panic!(\"whoops\"), };\n    |                             ^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n note: the lint level is defined here\n   --> $DIR/reject_non_structural.rs:12:9\n    |"}, {"sha": "8c01d2f65ec9002b5965ed602ca5916d87fbf76c", "filename": "tests/ui/consts/const_in_pattern/warn_corner_cases.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -6,6 +6,8 @@ LL |     match None { Some(_) => panic!(\"whoops\"), INDEX => dbg!(INDEX), };\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n    = note: `#[warn(nontrivial_structural_match)]` on by default\n \n warning: to use a constant of type `NoDerive` in a pattern, the constant's initializer must be trivial or `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n@@ -16,6 +18,8 @@ LL |     match None { Some(_) => panic!(\"whoops\"), CALL => dbg!(CALL), };\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n warning: to use a constant of type `NoDerive` in a pattern, the constant's initializer must be trivial or `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/warn_corner_cases.rs:38:47\n@@ -25,6 +29,8 @@ LL |     match None { Some(_) => panic!(\"whoops\"), METHOD_CALL => dbg!(METHOD_CA\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n warning: 3 warnings emitted\n "}, {"sha": "342d94ed31c87678075dd459c3a77e16f553aba7", "filename": "tests/ui/consts/match_ice.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fmatch_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fconsts%2Fmatch_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fmatch_ice.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `S` in a pattern, `S` must be annotated with `#\n    |\n LL |         C => {}\n    |         ^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "dbd46da441316c573510f8e632ea573a198bc62d", "filename": "tests/ui/pattern/usefulness/const-partial_eq-fallback-ice.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fpattern%2Fusefulness%2Fconst-partial_eq-fallback-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fpattern%2Fusefulness%2Fconst-partial_eq-fallback-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fconst-partial_eq-fallback-ice.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `MyType` in a pattern, `MyType` must be annotat\n    |\n LL |     if let CONSTANT = &&MyType {\n    |            ^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "08e3d76b538bf6260da8c7f5888ac0c9d4540322", "filename": "tests/ui/pattern/usefulness/consts-opaque.stderr", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n    |\n LL |         FOO => {}\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:32:9\n@@ -24,6 +27,9 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n    |\n LL |         FOO_REF => {}\n    |         ^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:39:9\n@@ -42,13 +48,18 @@ LL |         FOO_REF_REF => {}\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n    = note: `#[warn(indirect_structural_match)]` on by default\n \n error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/consts-opaque.rs:53:9\n    |\n LL |         BAR => {} // should not be emitting unreachable warning\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:53:9\n@@ -72,6 +83,9 @@ error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated wit\n    |\n LL |         BAR => {}\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:63:9\n@@ -96,12 +110,18 @@ error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated wit\n    |\n LL |         BAR => {}\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/consts-opaque.rs:72:9\n    |\n LL |         BAR => {} // should not be emitting unreachable warning\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:72:9\n@@ -126,6 +146,9 @@ error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated wit\n    |\n LL |         BAZ => {}\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:82:9\n@@ -150,6 +173,9 @@ error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated wit\n    |\n LL |         BAZ => {}\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:92:9\n@@ -165,6 +191,9 @@ error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated wit\n    |\n LL |         BAZ => {}\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:99:9"}, {"sha": "f08ba522a937c37d03f3da258d3d22911de13f32", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-direct-struct-embedded.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be ann\n    |\n LL |         WRAP_DIRECT_INLINE => { panic!(\"WRAP_DIRECT_INLINE matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "012ccab176cfaa57ae0ffa79470a751ba474ec74", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-direct-struct-param.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-param.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be ann\n    |\n LL |         WRAP_DIRECT_PARAM => { panic!(\"WRAP_DIRECT_PARAM matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "94ee2216e9e65b610a57744dbee4fa5a451da135", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-doubly-indirect-embedded.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -6,6 +6,8 @@ LL |         WRAP_DOUBLY_INDIRECT_INLINE => { panic!(\"WRAP_DOUBLY_INDIRECT_INLIN\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n note: the lint level is defined here\n   --> $DIR/cant-hide-behind-doubly-indirect-embedded.rs:7:9\n    |"}, {"sha": "666b7b95ec97fc08b5562b857f3270f1b29f519f", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-doubly-indirect-param.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -6,6 +6,8 @@ LL |         WRAP_DOUBLY_INDIRECT_PARAM => { panic!(\"WRAP_DOUBLY_INDIRECT_PARAM\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n note: the lint level is defined here\n   --> $DIR/cant-hide-behind-doubly-indirect-param.rs:7:9\n    |"}, {"sha": "ecbe83f3dec0e036e63ab4ad99c50d44bd9781e8", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-indirect-struct-embedded.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -6,6 +6,8 @@ LL |         WRAP_INDIRECT_INLINE => { panic!(\"WRAP_INDIRECT_INLINE matched itse\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n note: the lint level is defined here\n   --> $DIR/cant-hide-behind-indirect-struct-embedded.rs:7:9\n    |"}, {"sha": "2119908013b79ae7328c6fca88d9fe337574abdb", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-indirect-struct-param.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -6,6 +6,8 @@ LL |         WRAP_INDIRECT_PARAM => { panic!(\"WRAP_INDIRECT_PARAM matched itself\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n note: the lint level is defined here\n   --> $DIR/cant-hide-behind-indirect-struct-param.rs:7:9\n    |"}, {"sha": "46600e7b215a8be83173b7c58d9545b4a404f06a", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/issue-61188-match-slice-forbidden-without-eq.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-61188-match-slice-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-61188-match-slice-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-61188-match-slice-forbidden-without-eq.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `B` in a pattern, `B` must be annotated with `#\n    |\n LL |         A => (),\n    |         ^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "435812306deee93d047c959f33078e2d62bde0ff", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/issue-62307-match-ref-ref-forbidden-without-eq.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -6,6 +6,8 @@ LL |         RR_B1 => { println!(\"CLAIM RR0: {:?} matches {:?}\", RR_B1, RR_B0);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n note: the lint level is defined here\n   --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:13:9\n    |\n@@ -20,6 +22,8 @@ LL |         RR_B1 => { println!(\"CLAIM RR1: {:?} matches {:?}\", RR_B1, RR_B1);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n warning: 2 warnings emitted\n "}, {"sha": "1c4fb914688f62265a2b1b06c6dcc7b922c86d3a", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/match-forbidden-without-eq.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n    |\n LL |         FOO => { }\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n warning: floating-point types cannot be used in patterns\n   --> $DIR/match-forbidden-without-eq.rs:18:9"}, {"sha": "6adebada0437d3f2cd28fa7e60d84359b6d19dbd", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/match-nonempty-array-forbidden-without-eq.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-nonempty-array-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-nonempty-array-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-nonempty-array-forbidden-without-eq.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `B` in a pattern, `B` must be annotated with `#\n    |\n LL |         FOO => { }\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "f5b10f0626b3229110875f080e4817265f974260", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/match-requires-both-partialeq-and-eq.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.stderr?ref=f418859d8a464fb9ff5b5b1a4459d35fb8cfab1d", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n    |\n LL |         FOO => { }\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}]}