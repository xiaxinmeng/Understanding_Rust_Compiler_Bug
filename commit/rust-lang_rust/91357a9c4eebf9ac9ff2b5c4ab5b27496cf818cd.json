{"sha": "91357a9c4eebf9ac9ff2b5c4ab5b27496cf818cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMzU3YTljNGVlYmY5YWM5ZmYyYjVjNGFiNWIyNzQ5NmNmODE4Y2Q=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-06-09T20:19:38Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-07-09T07:06:28Z"}, "message": "token: replace ast::Ident with just Ident", "tree": {"sha": "d9caa38536fd9dec6b115a476a37f334f7a43c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9caa38536fd9dec6b115a476a37f334f7a43c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91357a9c4eebf9ac9ff2b5c4ab5b27496cf818cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91357a9c4eebf9ac9ff2b5c4ab5b27496cf818cd", "html_url": "https://github.com/rust-lang/rust/commit/91357a9c4eebf9ac9ff2b5c4ab5b27496cf818cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91357a9c4eebf9ac9ff2b5c4ab5b27496cf818cd/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4989a56448c7e3047e0538ff4ef54c49db8a5a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4989a56448c7e3047e0538ff4ef54c49db8a5a4f", "html_url": "https://github.com/rust-lang/rust/commit/4989a56448c7e3047e0538ff4ef54c49db8a5a4f"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "c7aeae04ba2fa0c5ee336bbf9f798fd069f8db37", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/91357a9c4eebf9ac9ff2b5c4ab5b27496cf818cd/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91357a9c4eebf9ac9ff2b5c4ab5b27496cf818cd/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=91357a9c4eebf9ac9ff2b5c4ab5b27496cf818cd", "patch": "@@ -84,25 +84,25 @@ pub enum Token {\n     LIT_INT(i64, ast::IntTy),\n     LIT_UINT(u64, ast::UintTy),\n     LIT_INT_UNSUFFIXED(i64),\n-    LIT_FLOAT(ast::Ident, ast::FloatTy),\n-    LIT_FLOAT_UNSUFFIXED(ast::Ident),\n-    LIT_STR(ast::Ident),\n-    LIT_STR_RAW(ast::Ident, uint), /* raw str delimited by n hash symbols */\n+    LIT_FLOAT(Ident, ast::FloatTy),\n+    LIT_FLOAT_UNSUFFIXED(Ident),\n+    LIT_STR(Ident),\n+    LIT_STR_RAW(Ident, uint), /* raw str delimited by n hash symbols */\n     LIT_BINARY(Rc<Vec<u8>>),\n     LIT_BINARY_RAW(Rc<Vec<u8>>, uint), /* raw binary str delimited by n hash symbols */\n \n     /* Name components */\n     /// An identifier contains an \"is_mod_name\" boolean,\n     /// indicating whether :: follows this token with no\n     /// whitespace in between.\n-    IDENT(ast::Ident, bool),\n+    IDENT(Ident, bool),\n     UNDERSCORE,\n-    LIFETIME(ast::Ident),\n+    LIFETIME(Ident),\n \n     /* For interpolation */\n     INTERPOLATED(Nonterminal),\n \n-    DOC_COMMENT(ast::Ident),\n+    DOC_COMMENT(Ident),\n     EOF,\n }\n \n@@ -115,11 +115,12 @@ pub enum Nonterminal {\n     NtPat( Gc<ast::Pat>),\n     NtExpr(Gc<ast::Expr>),\n     NtTy(  P<ast::Ty>),\n-    // see IDENT, above, for meaning of bool in NtIdent:\n-    NtIdent(Box<ast::Ident>, bool),\n-    NtMeta(Gc<ast::MetaItem>), // stuff inside brackets for attributes\n+    /// See IDENT, above, for meaning of bool in NtIdent:\n+    NtIdent(Box<Ident>, bool),\n+    /// Stuff inside brackets for attributes\n+    NtMeta(Gc<ast::MetaItem>),\n     NtPath(Box<ast::Path>),\n-    NtTT(  Gc<ast::TokenTree>), // needs @ed to break a circularity\n+    NtTT(  Gc<ast::TokenTree>), // needs Gc'd to break a circularity\n     NtMatchers(Vec<ast::Matcher> )\n }\n \n@@ -683,20 +684,20 @@ pub fn gensym(s: &str) -> Name {\n \n /// Maps a string to an identifier with an empty syntax context.\n #[inline]\n-pub fn str_to_ident(s: &str) -> ast::Ident {\n-    ast::Ident::new(intern(s))\n+pub fn str_to_ident(s: &str) -> Ident {\n+    Ident::new(intern(s))\n }\n \n /// Maps a string to a gensym'ed identifier.\n #[inline]\n-pub fn gensym_ident(s: &str) -> ast::Ident {\n-    ast::Ident::new(gensym(s))\n+pub fn gensym_ident(s: &str) -> Ident {\n+    Ident::new(gensym(s))\n }\n \n // create a fresh name that maps to the same string as the old one.\n // note that this guarantees that str_ptr_eq(ident_to_string(src),interner_get(fresh_name(src)));\n // that is, that the new name and the old one are connected to ptr_eq strings.\n-pub fn fresh_name(src: &ast::Ident) -> Name {\n+pub fn fresh_name(src: &Ident) -> Name {\n     let interner = get_ident_interner();\n     interner.gensym_copy(src.name)\n     // following: debug version. Could work in final except that it's incompatible with\n@@ -767,8 +768,8 @@ mod test {\n     use ast;\n     use ext::mtwt;\n \n-    fn mark_ident(id : ast::Ident, m : ast::Mrk) -> ast::Ident {\n-        ast::Ident{name:id.name,ctxt:mtwt::apply_mark(m,id.ctxt)}\n+    fn mark_ident(id : Ident, m : ast::Mrk) -> Ident {\n+        Ident{name:id.name,ctxt:mtwt::apply_mark(m,id.ctxt)}\n     }\n \n     #[test] fn mtwt_token_eq_test() {"}]}