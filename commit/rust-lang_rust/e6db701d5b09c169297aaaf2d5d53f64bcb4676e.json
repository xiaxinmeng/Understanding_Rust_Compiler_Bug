{"sha": "e6db701d5b09c169297aaaf2d5d53f64bcb4676e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZGI3MDFkNWIwOWMxNjkyOTdhYWFmMmQ1ZDUzZjY0YmNiNDY3NmU=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-09T05:59:28Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-12T15:02:43Z"}, "message": "Deprecate Signed method wrappers", "tree": {"sha": "2e43cc404663158bd2e4fef75e0c53c1183776ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e43cc404663158bd2e4fef75e0c53c1183776ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6db701d5b09c169297aaaf2d5d53f64bcb4676e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6db701d5b09c169297aaaf2d5d53f64bcb4676e", "html_url": "https://github.com/rust-lang/rust/commit/e6db701d5b09c169297aaaf2d5d53f64bcb4676e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8666812dce7e219501642d4aabfd89e6b986834f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8666812dce7e219501642d4aabfd89e6b986834f", "html_url": "https://github.com/rust-lang/rust/commit/8666812dce7e219501642d4aabfd89e6b986834f"}], "stats": {"total": 52, "additions": 16, "deletions": 36}, "files": [{"sha": "61fabae4b8b0dfe441ca0fc64df01ddb18c60d3f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e6db701d5b09c169297aaaf2d5d53f64bcb4676e", "patch": "@@ -271,25 +271,6 @@ signed_float_impl!(f32, f32::NAN, f32::INFINITY, f32::NEG_INFINITY,\n signed_float_impl!(f64, f64::NAN, f64::INFINITY, f64::NEG_INFINITY,\n                    intrinsics::fabsf64, intrinsics::copysignf64, fdim)\n \n-/// Computes the absolute value.\n-///\n-/// For `f32` and `f64`, `NaN` will be returned if the number is `NaN`\n-///\n-/// For signed integers, `::MIN` will be returned if the number is `::MIN`.\n-#[inline(always)]\n-pub fn abs<T: Signed>(value: T) -> T {\n-    value.abs()\n-}\n-\n-/// The positive difference of two numbers.\n-///\n-/// Returns zero if `x` is less than or equal to `y`, otherwise the difference\n-/// between `x` and `y` is returned.\n-#[inline(always)]\n-pub fn abs_sub<T: Signed>(x: T, y: T) -> T {\n-    x.abs_sub(y)\n-}\n-\n /// Returns the sign of the number.\n ///\n /// For `f32` and `f64`:\n@@ -1560,3 +1541,10 @@ pub trait Float: Signed + Primitive {\n     /// Convert degrees to radians.\n     fn to_radians(self) -> Self;\n }\n+\n+// DEPRECATED\n+\n+#[deprecated = \"Use `Signed::abs`\"]\n+pub fn abs<T: Signed>(value: T) -> T { value.abs() }\n+#[deprecated = \"Use `Signed::abs_sub`\"]\n+pub fn abs_sub<T: Signed>(x: T, y: T) -> T { x.abs_sub(y) }"}, {"sha": "7d454e49006b4807867dbfa0cecfa962e0bb62f3", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=e6db701d5b09c169297aaaf2d5d53f64bcb4676e", "patch": "@@ -23,7 +23,6 @@ that do not need to record state.\n #![experimental]\n \n use core::prelude::*;\n-use core::num;\n \n use {Rng, Rand};\n \n@@ -243,7 +242,7 @@ fn ziggurat<R:Rng>(\n         let u = if symmetric {2.0 * f - 1.0} else {f};\n         let x = u * x_tab[i];\n \n-        let test_x = if symmetric {num::abs(x)} else {x};\n+        let test_x = if symmetric { x.abs() } else {x};\n \n         // algebraically equivalent to |u| < x_tab[i+1]/x_tab[i] (or u < x_tab[i+1]/x_tab[i])\n         if test_x < x_tab[i + 1] {"}, {"sha": "ff274c874a855a6f407aa7ec5e173d891fae76bd", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=e6db701d5b09c169297aaaf2d5d53f64bcb4676e", "patch": "@@ -17,7 +17,6 @@ use std::hash::Hash;\n use std::io;\n use std::mem;\n use std::num::Zero;\n-use std::num;\n \n fn local_cmp<T:Float>(x: T, y: T) -> Ordering {\n     // arbitrarily decide that NaNs are larger than everything.\n@@ -166,7 +165,6 @@ impl<T: FloatMath + FromPrimitive> Summary<T> {\n }\n \n impl<'a, T: FloatMath + FromPrimitive> Stats<T> for &'a [T] {\n-\n     // FIXME #11059 handle NaN, inf and overflow\n     fn sum(self) -> T {\n         let mut partials = vec![];\n@@ -176,8 +174,8 @@ impl<'a, T: FloatMath + FromPrimitive> Stats<T> for &'a [T] {\n             // This inner loop applies `hi`/`lo` summation to each\n             // partial so that the list of partial sums remains exact.\n             for i in range(0, partials.len()) {\n-                let mut y = partials[i];\n-                if num::abs(x) < num::abs(y) {\n+                let mut y: T = partials[i];\n+                if x.abs() < y.abs() {\n                     mem::swap(&mut x, &mut y);\n                 }\n                 // Rounded `x+y` is stored in `hi` with round-off stored in\n@@ -249,7 +247,7 @@ impl<'a, T: FloatMath + FromPrimitive> Stats<T> for &'a [T] {\n \n     fn median_abs_dev(self) -> T {\n         let med = self.median();\n-        let abs_devs: Vec<T> = self.iter().map(|&v| num::abs(med - v)).collect();\n+        let abs_devs: Vec<T> = self.iter().map(|&v| (med - v).abs()).collect();\n         // This constant is derived by smarter statistics brains than me, but it is\n         // consistent with how R and other packages treat the MAD.\n         let number = FromPrimitive::from_f64(1.4826).unwrap();"}, {"sha": "acd81d4566b9ef6b916822e0f6788d17088d07d2", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=e6db701d5b09c169297aaaf2d5d53f64bcb4676e", "patch": "@@ -30,7 +30,6 @@ extern crate libc;\n use std::fmt::Show;\n use std::fmt;\n use std::io::BufReader;\n-use std::num;\n use std::string::String;\n use std::time::Duration;\n \n@@ -757,7 +756,7 @@ impl<'a> fmt::Show for TmFmt<'a> {\n               'Z' => if tm.tm_gmtoff == 0_i32 { \"GMT\"} else { \"\" }, // FIXME (#2350): support locale\n               'z' => {\n                 let sign = if tm.tm_gmtoff > 0_i32 { '+' } else { '-' };\n-                let mut m = num::abs(tm.tm_gmtoff) / 60_i32;\n+                let mut m = tm.tm_gmtoff.abs() / 60_i32;\n                 let h = m / 60_i32;\n                 m -= h * 60_i32;\n                 return write!(fmt, \"{}{:02d}{:02d}\", sign, h, m);\n@@ -799,7 +798,7 @@ impl<'a> fmt::Show for TmFmt<'a> {\n                         format: FmtStr(\"%Y-%m-%dT%H:%M:%S\"),\n                     };\n                     let sign = if self.tm.tm_gmtoff > 0_i32 { '+' } else { '-' };\n-                    let mut m = num::abs(self.tm.tm_gmtoff) / 60_i32;\n+                    let mut m = self.tm.tm_gmtoff.abs() / 60_i32;\n                     let h = m / 60_i32;\n                     m -= h * 60_i32;\n                     write!(fmt, \"{}{}{:02d}:{:02d}\", s, sign, h as int, m as int)"}, {"sha": "c7e206cb474b86d81d0dbf3f66484972faf09b26", "filename": "src/test/run-pass/trait-inheritance-self-in-supertype.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self-in-supertype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self-in-supertype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self-in-supertype.rs?ref=e6db701d5b09c169297aaaf2d5d53f64bcb4676e", "patch": "@@ -10,8 +10,6 @@\n \n // Test for issue #4183: use of Self in supertraits.\n \n-use std::num;\n-\n pub static FUZZY_EPSILON: f64 = 0.1;\n \n pub trait FuzzyEq<Eps> {\n@@ -29,7 +27,7 @@ impl FuzzyEq<f32> for f32 {\n     }\n \n     fn fuzzy_eq_eps(&self, other: &f32, epsilon: &f32) -> bool {\n-        num::abs(*self - *other) < *epsilon\n+        (*self - *other).abs() < *epsilon\n     }\n }\n \n@@ -43,7 +41,7 @@ impl FuzzyEq<f64> for f64 {\n     }\n \n     fn fuzzy_eq_eps(&self, other: &f64, epsilon: &f64) -> bool {\n-        num::abs(*self - *other) < *epsilon\n+        (*self - *other).abs() < *epsilon\n     }\n }\n "}, {"sha": "68964fa49571e0e2a5415e70bcb45e49f144da06", "filename": "src/test/run-pass/utf8_idents.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6db701d5b09c169297aaaf2d5d53f64bcb4676e/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_idents.rs?ref=e6db701d5b09c169297aaaf2d5d53f64bcb4676e", "patch": "@@ -13,13 +13,11 @@\n \n #![feature(non_ascii_idents)]\n \n-use std::num;\n-\n pub fn main() {\n     let \u03b5 = 0.00001f64;\n     let \u03a0 = 3.14f64;\n     let \u0932\u0902\u091a = \u03a0 * \u03a0 + 1.54;\n-    assert!(num::abs((\u0932\u0902\u091a - 1.54) - (\u03a0 * \u03a0)) < \u03b5);\n+    assert!(((\u0932\u0902\u091a - 1.54) - (\u03a0 * \u03a0)).abs() < \u03b5);\n     assert_eq!(\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8(), 0);\n }\n "}]}