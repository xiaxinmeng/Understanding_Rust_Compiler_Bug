{"sha": "7a2d4b30b6d09f9091b2a4666c894a854b5d781c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMmQ0YjMwYjZkMDlmOTA5MWIyYTQ2NjZjODk0YTg1NGI1ZDc4MWM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-02T15:10:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-02T15:10:47Z"}, "message": "Rollup merge of #42360 - ollie27:rustdoc_vector_rename, r=GuillaumeGomez\n\nrustdoc: Rename `Vector` and `FixedVector` to `Slice` and `Array`\n\nAlso store the array length as a usize rather than a String.\n\nThis is just a minor refactor.", "tree": {"sha": "af3fd98f5fba40ea38af11f893165014cfc9b139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af3fd98f5fba40ea38af11f893165014cfc9b139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a2d4b30b6d09f9091b2a4666c894a854b5d781c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2d4b30b6d09f9091b2a4666c894a854b5d781c", "html_url": "https://github.com/rust-lang/rust/commit/7a2d4b30b6d09f9091b2a4666c894a854b5d781c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a2d4b30b6d09f9091b2a4666c894a854b5d781c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "812966717b5967927c0fdd7f52d2dc1590c600f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/812966717b5967927c0fdd7f52d2dc1590c600f8", "html_url": "https://github.com/rust-lang/rust/commit/812966717b5967927c0fdd7f52d2dc1590c600f8"}, {"sha": "a74338d60e962a61a7b336aea4439973b2861f7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a74338d60e962a61a7b336aea4439973b2861f7e", "html_url": "https://github.com/rust-lang/rust/commit/a74338d60e962a61a7b336aea4439973b2861f7e"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "25e55ff36e7c63ed4697c6f532f445aa5652b022", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d4b30b6d09f9091b2a4666c894a854b5d781c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d4b30b6d09f9091b2a4666c894a854b5d781c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7a2d4b30b6d09f9091b2a4666c894a854b5d781c", "patch": "@@ -1506,8 +1506,8 @@ pub enum Type {\n     /// extern \"ABI\" fn\n     BareFunction(Box<BareFunctionDecl>),\n     Tuple(Vec<Type>),\n-    Vector(Box<Type>),\n-    FixedVector(Box<Type>, String),\n+    Slice(Box<Type>),\n+    Array(Box<Type>, usize),\n     Never,\n     Unique(Box<Type>),\n     RawPointer(Mutability, Box<Type>),\n@@ -1573,10 +1573,8 @@ impl Type {\n     pub fn primitive_type(&self) -> Option<PrimitiveType> {\n         match *self {\n             Primitive(p) | BorrowedRef { type_: box Primitive(p), ..} => Some(p),\n-            Vector(..) | BorrowedRef{ type_: box Vector(..), ..  } => Some(PrimitiveType::Slice),\n-            FixedVector(..) | BorrowedRef { type_: box FixedVector(..), .. } => {\n-                Some(PrimitiveType::Array)\n-            }\n+            Slice(..) | BorrowedRef { type_: box Slice(..), .. } => Some(PrimitiveType::Slice),\n+            Array(..) | BorrowedRef { type_: box Array(..), .. } => Some(PrimitiveType::Array),\n             Tuple(..) => Some(PrimitiveType::Tuple),\n             RawPointer(..) => Some(PrimitiveType::RawPointer),\n             _ => None,\n@@ -1717,11 +1715,11 @@ impl Clean<Type> for hir::Ty {\n                 BorrowedRef {lifetime: lifetime, mutability: m.mutbl.clean(cx),\n                              type_: box m.ty.clean(cx)}\n             }\n-            TySlice(ref ty) => Vector(box ty.clean(cx)),\n+            TySlice(ref ty) => Slice(box ty.clean(cx)),\n             TyArray(ref ty, length) => {\n                 use rustc::middle::const_val::eval_length;\n                 let n = eval_length(cx.tcx, length, \"array length\").unwrap();\n-                FixedVector(box ty.clean(cx), n.to_string())\n+                Array(box ty.clean(cx), n)\n             },\n             TyTup(ref tys) => Tuple(tys.clean(cx)),\n             TyPath(hir::QPath::Resolved(None, ref path)) => {\n@@ -1832,9 +1830,8 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             ty::TyUint(uint_ty) => Primitive(uint_ty.into()),\n             ty::TyFloat(float_ty) => Primitive(float_ty.into()),\n             ty::TyStr => Primitive(PrimitiveType::Str),\n-            ty::TySlice(ty) => Vector(box ty.clean(cx)),\n-            ty::TyArray(ty, i) => FixedVector(box ty.clean(cx),\n-                                              format!(\"{}\", i)),\n+            ty::TySlice(ty) => Slice(box ty.clean(cx)),\n+            ty::TyArray(ty, n) => Array(box ty.clean(cx), n),\n             ty::TyRawPtr(mt) => RawPointer(mt.mutbl.clean(cx), box mt.ty.clean(cx)),\n             ty::TyRef(r, mt) => BorrowedRef {\n                 lifetime: r.clean(cx),"}, {"sha": "86660c28f80ad848aea2e827034790259ed3d104", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d4b30b6d09f9091b2a4666c894a854b5d781c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d4b30b6d09f9091b2a4666c894a854b5d781c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=7a2d4b30b6d09f9091b2a4666c894a854b5d781c", "patch": "@@ -25,7 +25,6 @@ use rustc::hir;\n use clean::{self, PrimitiveType};\n use core::DocAccessLevels;\n use html::item_type::ItemType;\n-use html::escape::Escape;\n use html::render;\n use html::render::{cache, CURRENT_LOCATION_KEY};\n \n@@ -643,21 +642,15 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                 }\n             }\n         }\n-        clean::Vector(ref t) => {\n+        clean::Slice(ref t) => {\n             primitive_link(f, PrimitiveType::Slice, \"[\")?;\n             fmt::Display::fmt(t, f)?;\n             primitive_link(f, PrimitiveType::Slice, \"]\")\n         }\n-        clean::FixedVector(ref t, ref s) => {\n+        clean::Array(ref t, n) => {\n             primitive_link(f, PrimitiveType::Array, \"[\")?;\n             fmt::Display::fmt(t, f)?;\n-            if f.alternate() {\n-                primitive_link(f, PrimitiveType::Array,\n-                               &format!(\"; {}]\", s))\n-            } else {\n-                primitive_link(f, PrimitiveType::Array,\n-                               &format!(\"; {}]\", Escape(s)))\n-            }\n+            primitive_link(f, PrimitiveType::Array, &format!(\"; {}]\", n))\n         }\n         clean::Never => f.write_str(\"!\"),\n         clean::RawPointer(m, ref t) => {\n@@ -685,7 +678,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n             };\n             let m = MutableSpace(mutability);\n             match **ty {\n-                clean::Vector(ref bt) => { // BorrowedRef{ ... Vector(T) } is &[T]\n+                clean::Slice(ref bt) => { // BorrowedRef{ ... Slice(T) } is &[T]\n                     match **bt {\n                         clean::Generic(_) => {\n                             if f.alternate() {"}]}