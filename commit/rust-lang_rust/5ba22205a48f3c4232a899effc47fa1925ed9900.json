{"sha": "5ba22205a48f3c4232a899effc47fa1925ed9900", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYTIyMjA1YTQ4ZjNjNDIzMmE4OTllZmZjNDdmYTE5MjVlZDk5MDA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-20T19:56:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-27T23:28:04Z"}, "message": "Name `RegionKind::ReVar` lifetimes in diagnostics", "tree": {"sha": "50984cb054a310d0ee195c4bd3a910015a5af360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50984cb054a310d0ee195c4bd3a910015a5af360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ba22205a48f3c4232a899effc47fa1925ed9900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba22205a48f3c4232a899effc47fa1925ed9900", "html_url": "https://github.com/rust-lang/rust/commit/5ba22205a48f3c4232a899effc47fa1925ed9900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ba22205a48f3c4232a899effc47fa1925ed9900/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "html_url": "https://github.com/rust-lang/rust/commit/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac"}], "stats": {"total": 150, "additions": 105, "deletions": 45}, "files": [{"sha": "66e7c87f2c3514fc23967e2454720a1f99049b5a", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -987,13 +987,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         fn push_ty_ref<'tcx>(\n-            r: &ty::Region<'tcx>,\n+            region: &ty::Region<'tcx>,\n             ty: Ty<'tcx>,\n             mutbl: hir::Mutability,\n             s: &mut DiagnosticStyledString,\n         ) {\n-            let mut r = r.to_string();\n-            if r == \"'_\" {\n+            let mut r = region.to_string();\n+            if let ty::RegionKind::ReVar(var) = region {\n+                // Show these named, not as `'_` or elide them in \"expected/found\" notes.\n+                r = format!(\"'z{} \", var.index());\n+            } else if r == \"'_\" {\n                 r.clear();\n             } else {\n                 r.push(' ');"}, {"sha": "2e54a4e28e98cf4f0fd6143fe53d8c33a817e5a9", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -1,11 +1,15 @@\n //! Error Reporting for `impl` items that do not match the obligations from their `trait`.\n \n+use crate::hir::def_id::DefId;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{Subtype, ValuePairs};\n use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::ErrorReported;\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::error::ExpectedFound;\n+use rustc_middle::ty::fold::TypeFoldable;\n+use rustc_middle::ty::{self, Ty};\n use rustc_span::Span;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n@@ -52,9 +56,52 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             .tcx()\n             .sess\n             .struct_span_err(sp, \"`impl` item signature doesn't match `trait` item signature\");\n-        err.note(&format!(\"expected `{:?}`\\n   found `{:?}`\", expected, found));\n         err.span_label(sp, &format!(\"found {:?}\", found));\n         err.span_label(impl_sp, &format!(\"expected {:?}\", expected));\n+\n+        struct EarlyBoundRegionHighlighter(FxHashSet<DefId>);\n+        impl<'tcx> ty::fold::TypeVisitor<'tcx> for EarlyBoundRegionHighlighter {\n+            fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n+                debug!(\"LateBoundRegionNameCollector visit_region {:?}\", r);\n+                match *r {\n+                    ty::ReFree(free) => {\n+                        self.0.insert(free.scope);\n+                    }\n+\n+                    ty::ReEarlyBound(bound) => {\n+                        self.0.insert(bound.def_id);\n+                    }\n+                    _ => {}\n+                }\n+                r.super_visit_with(self)\n+            }\n+        }\n+\n+        let mut visitor = EarlyBoundRegionHighlighter(FxHashSet::default());\n+        expected.visit_with(&mut visitor);\n+\n+        let note = !visitor.0.is_empty();\n+\n+        if let Some((expected, found)) = self\n+            .tcx()\n+            .infer_ctxt()\n+            .enter(|infcx| infcx.expected_found_str_ty(&ExpectedFound { expected, found }))\n+        {\n+            err.note_expected_found(&\"\", expected, &\"\", found);\n+        } else {\n+            // This fallback shouldn't be necessary, but let's keep it in just in case.\n+            err.note(&format!(\"expected `{:?}`\\n   found `{:?}`\", expected, found));\n+        }\n+        if note {\n+            err.note(\n+                \"the lifetime requirements from the `trait` could not be fulfilled by the \\\n+                      `impl`\",\n+            );\n+            err.help(\n+                \"consider adding a named lifetime to the `trait` that constrains the item's \\\n+                      `self` argument, its inputs and its output with it\",\n+            );\n+        }\n         err.emit();\n     }\n }"}, {"sha": "3ccfe1cede7acc8577da0758eadec8a30f30a8df", "filename": "src/test/ui/coercion/coerce-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.rs?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let x = 0;\n     f(&x);\n     //~^ ERROR mismatched types\n-    //~| expected mutable reference `&mut i32`\n-    //~| found reference `&{integer}`\n+    //~| expected mutable reference `&'z1 mut i32`\n+    //~| found reference `&'z2 {integer}`\n     //~| types differ in mutability\n }"}, {"sha": "f5b13f6c590991c9c798f770032aedced87d2527", "filename": "src/test/ui/coercion/coerce-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     f(&x);\n    |       ^^ types differ in mutability\n    |\n-   = note: expected mutable reference `&mut i32`\n-                      found reference `&{integer}`\n+   = note: expected mutable reference `&'z1 mut i32`\n+                      found reference `&'z2 {integer}`\n \n error: aborting due to previous error\n "}, {"sha": "9eed16fa994e38b3d5b9a862d0039c5849fcdb0a", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -11,7 +11,7 @@ LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n    |        expected type parameter\n    |\n    = note: expected fn pointer `fn(&E, F) -> F`\n-              found fn pointer `fn(&E, G) -> G`\n+              found fn pointer `fn(&'z0 E, G) -> G`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "4d09fe74e16fcfec7362917b8328606f9e1f2a73", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -7,7 +7,7 @@ LL |     let _: for<'b> fn(&'b u32) = foo();\n    |            expected due to this\n    |\n    = note: expected fn pointer `for<'b> fn(&'b u32)`\n-              found fn pointer `fn(&u32)`\n+              found fn pointer `fn(&'z0 u32)`\n \n error: aborting due to previous error\n "}, {"sha": "d5725efbac3c603bed19c8adfcbc265b387df2f7", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -10,7 +10,7 @@ LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n    |            expected type parameter\n    |\n    = note: expected fn pointer `fn(&(), &B, &impl Debug)`\n-              found fn pointer `fn(&(), &impl Debug, &B)`\n+              found fn pointer `fn(&'z0 (), &impl Debug, &B)`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "3cc9c1a7fb0541d940ab2c666a24b59350a85797", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -5,7 +5,7 @@ LL |    fn fmt(&self, x: &str) -> () { }\n    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n    |\n    = note: expected fn pointer `fn(&MyType, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n-              found fn pointer `fn(&MyType, &str)`\n+              found fn pointer `fn(&'z0 MyType, &str)`\n \n error[E0050]: method `fmt` has 1 parameter but the declaration in trait `std::fmt::Display::fmt` has 2\n   --> $DIR/trait_type.rs:12:11"}, {"sha": "349f813b20d50cf3389e56e284d7dad553bce299", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -10,7 +10,9 @@ LL |     fn deref(&self) -> &Self::Target;\n    |     --------------------------------- expected fn(&Struct) -> &(dyn Trait + 'static)\n    |\n    = note: expected `fn(&Struct) -> &(dyn Trait + 'static)`\n-              found `fn(&Struct) -> &dyn Trait`\n+              found `fn(&'z0 Struct) -> &dyn Trait`\n+   = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n+   = help: consider adding a named lifetime to the `trait` that constrains the item's `self` argument, its inputs and its output with it\n \n error: aborting due to previous error\n "}, {"sha": "72960a41f93df1928c205085c76bd35441829e09", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -8,7 +8,9 @@ LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &u32, &u32) -> &u32\n    |\n    = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n-              found `fn(&i32, &u32, &u32) -> &u32`\n+              found `fn(&'z0 i32, &'z1 u32, &'z2 u32) -> &'z2 u32`\n+   = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n+   = help: consider adding a named lifetime to the `trait` that constrains the item's `self` argument, its inputs and its output with it\n \n error[E0623]: lifetime mismatch\n   --> $DIR/mismatched_trait_impl.rs:10:9"}, {"sha": "3fa94fac23759d711460b1731db27c0fca2a1743", "filename": "src/test/ui/issues/issue-13033.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -8,7 +8,7 @@ impl Foo for Baz {\n     fn bar(&mut self, other: &dyn Foo) {}\n     //~^ ERROR method `bar` has an incompatible type for trait\n     //~| expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n-    //~| found fn pointer `fn(&mut Baz, &dyn Foo)`\n+    //~| found fn pointer `fn(&'z0 mut Baz, &dyn Foo)`\n }\n \n fn main() {}"}, {"sha": "238f41782ba5ad874b689b9856a382132ef18037", "filename": "src/test/ui/issues/issue-13033.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -8,7 +8,7 @@ LL |     fn bar(&mut self, other: &dyn Foo) {}\n    |                              ^^^^^^^^ types differ in mutability\n    |\n    = note: expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n-              found fn pointer `fn(&mut Baz, &dyn Foo)`\n+              found fn pointer `fn(&'z0 mut Baz, &dyn Foo)`\n help: consider change the type to match the mutability in trait\n    |\n LL |     fn bar(&mut self, other: &mut dyn Foo) {}"}, {"sha": "fa782d043312d8b208e7ccf7d6c757d6bbc72a5c", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -27,7 +27,7 @@ note: ...so that the types are compatible\n LL |         self.a();\n    |              ^\n    = note: expected `&'a Self`\n-              found `&Self`\n+              found `&'z0 Self`\n \n error: aborting due to previous error\n "}, {"sha": "7c382b95ae9af6e3fb8ce459e0c3fe4305717045", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -28,7 +28,7 @@ note: ...so that the types are compatible\n LL |         self.foo();\n    |              ^^^\n    = note: expected `&'a Self`\n-              found `&Self`\n+              found `&'z0 Self`\n \n error: aborting due to previous error\n "}, {"sha": "351973d444b05534a71be2fcddaa3501957b88d9", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -7,7 +7,9 @@ LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n-              found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n+              found fn pointer `extern \"rust-call\" fn(&'z0 Foo, (T,))`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:11:3\n@@ -18,7 +20,9 @@ LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n-              found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n+              found fn pointer `extern \"rust-call\" fn(&'z0 mut Foo, (T,))`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_once` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:18:3"}, {"sha": "cc95b31acb7a780965a6cefc9fc24aa0ffb53c8c", "filename": "src/test/ui/issues/issue-21332.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -5,7 +5,7 @@ LL |     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n    = note: expected fn pointer `fn(&mut S) -> std::option::Option<i32>`\n-              found fn pointer `fn(&mut S) -> std::result::Result<i32, i32>`\n+              found fn pointer `fn(&'z0 mut S) -> std::result::Result<i32, i32>`\n \n error: aborting due to previous error\n "}, {"sha": "57d145dcc20a0a58528f74dec876c5f075756c6c", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -8,7 +8,9 @@ LL |     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &i32) -> &i32\n    |\n    = note: expected `fn(&i32, &'a i32) -> &'a i32`\n-              found `fn(&i32, &i32) -> &i32`\n+              found `fn(&'z0 i32, &'z0 i32) -> &'z0 i32`\n+   = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n+   = help: consider adding a named lifetime to the `trait` that constrains the item's `self` argument, its inputs and its output with it\n \n error: aborting due to previous error\n "}, {"sha": "4926068e583e7bd8a5b2d2a21b278b03234d71f5", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -20,7 +20,7 @@ LL |     fn bar(&mut self) { }\n    |            ^^^^^^^^^ types differ in mutability\n    |\n    = note: expected fn pointer `fn(&Bar)`\n-              found fn pointer `fn(&mut Bar)`\n+              found fn pointer `fn(&'z0 mut Bar)`\n help: consider change the type to match the mutability in trait\n    |\n LL |     fn bar(&self) { }"}, {"sha": "debb371db5104e6442a55a0404044f0fb2d1b342", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -20,7 +20,7 @@ LL |     fn bar(&mut self, bar: &Bar) { }\n    |                            ^^^^ types differ in mutability\n    |\n    = note: expected fn pointer `fn(&mut Bar, &mut Bar)`\n-              found fn pointer `fn(&mut Bar, &Bar)`\n+              found fn pointer `fn(&'z0 mut Bar, &'z1 Bar)`\n help: consider change the type to match the mutability in trait\n    |\n LL |     fn bar(&mut self, bar: &mut Bar) { }"}, {"sha": "d029cd23a8b24c15f0ebbf9cf3029d879dbd0137", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -16,7 +16,7 @@ note: ...so that the expression is assignable\n    |\n LL |         C { f: b }\n    |                ^\n-   = note: expected `std::boxed::Box<std::boxed::Box<&isize>>`\n+   = note: expected `std::boxed::Box<std::boxed::Box<&'z0 isize>>`\n               found `std::boxed::Box<std::boxed::Box<&isize>>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 15:6...\n   --> $DIR/type-alias-free-regions.rs:15:6\n@@ -49,7 +49,7 @@ note: ...so that the expression is assignable\n    |\n LL |         C { f: Box::new(b.0) }\n    |                         ^^^\n-   = note: expected `std::boxed::Box<&isize>`\n+   = note: expected `std::boxed::Box<&'z1 isize>`\n               found `std::boxed::Box<&isize>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 25:6...\n   --> $DIR/type-alias-free-regions.rs:25:6"}, {"sha": "074f78027c3b82693c758c30e3e2bd422e15b856", "filename": "src/test/ui/regions-fn-subtyping-return-static-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -5,7 +5,7 @@ LL |     want_F(bar);\n    |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n    |\n    = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'cx S`\n-                 found fn item `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n+                 found fn item `for<'a> fn(&'a S) -> &'z2 S {bar::<'_>}`\n \n error[E0308]: mismatched types\n   --> $DIR/regions-fn-subtyping-return-static-fail.rs:48:12"}, {"sha": "cbe8d01f97729a777cba247cd881d229a519200d", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -39,7 +39,7 @@ note: ...so that the expression is assignable\n    |\n LL |     Box::new(v)\n    |              ^\n-   = note: expected `&[u8]`\n+   = note: expected `&'z1 [u8]`\n               found `&'a [u8]`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 25:9...\n   --> $DIR/region-object-lifetime-in-coercion.rs:25:9"}, {"sha": "b26891a678980db3b95b239b640d3e66baf7edd9", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -5,7 +5,7 @@ LL |     want_F(bar);\n    |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n    |\n    = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'cx S`\n-                 found fn item `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n+                 found fn item `for<'a> fn(&'a S) -> &'z2 S {bar::<'_>}`\n \n error: aborting due to previous error\n "}, {"sha": "40e9146d6894af08f8f900388c6781f30676c296", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -40,7 +40,7 @@ LL | |         return z;\n LL | |     }));\n    | |_____^\n    = note: expected `&isize`\n-              found `&isize`\n+              found `&'z13 isize`\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n   --> $DIR/regions-nested-fns.rs:14:27"}, {"sha": "b489290d9f71d6da7f9ba6385d17a965aea07400", "filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -14,7 +14,7 @@ note: ...so that the expression is assignable\n    |\n LL |     with(|o| o)\n    |              ^\n-   = note: expected `&isize`\n+   = note: expected `&'z0 isize`\n               found `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 9:14...\n   --> $DIR/regions-ret-borrowed-1.rs:9:14"}, {"sha": "6b2a041b95bc3bd513bf8acbf0243876095609c5", "filename": "src/test/ui/regions/regions-ret-borrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -14,7 +14,7 @@ note: ...so that the expression is assignable\n    |\n LL |     with(|o| o)\n    |              ^\n-   = note: expected `&isize`\n+   = note: expected `&'z0 isize`\n               found `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 12:14...\n   --> $DIR/regions-ret-borrowed.rs:12:14"}, {"sha": "6b3c40658a73d998864ae77ab8000126a431c92e", "filename": "src/test/ui/regions/regions-trait-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -5,7 +5,7 @@ LL |     fn get_ctxt(&self) -> &'a Ctxt {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&HasCtxt<'a>) -> &Ctxt`\n-              found fn pointer `fn(&HasCtxt<'a>) -> &'a Ctxt`\n+              found fn pointer `fn(&'z0 HasCtxt<'a>) -> &'a Ctxt`\n note: the lifetime `'a` as defined on the impl at 12:6...\n   --> $DIR/regions-trait-1.rs:12:6\n    |"}, {"sha": "271849fdef69394dd0b69c76e93ff3be24ea40a1", "filename": "src/test/ui/regions/regions-trait-object-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -42,7 +42,7 @@ note: ...so that the expression is assignable\n LL |     x\n    |     ^\n    = note: expected `&'b mut (dyn Dummy + 'b)`\n-              found `&mut (dyn Dummy + 'b)`\n+              found `&'z1 mut (dyn Dummy + 'b)`\n \n error[E0308]: mismatched types\n   --> $DIR/regions-trait-object-subtyping.rs:22:5"}, {"sha": "0d19ea1ff250784ece870ba497afefbf3dc0b781", "filename": "src/test/ui/resolve/resolve-inconsistent-binding-mode.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -54,8 +54,8 @@ LL |         Opts::A(ref mut i) | Opts::B(ref i) => {}\n    |                 |\n    |                 first introduced with type `&mut isize` here\n    |\n-   = note: expected type `&mut isize`\n-              found type `&isize`\n+   = note: expected type `&'z0 mut isize`\n+              found type `&'z1 isize`\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error: aborting due to 6 previous errors"}, {"sha": "8ea45e4191da7716762e153ad940b954126d8ec7", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -22,8 +22,8 @@ error[E0308]: mismatched types\n LL |     test(&y);\n    |          ^^ types differ in mutability\n    |\n-   = note: expected mutable reference `&mut std::string::String`\n-                      found reference `&std::string::String`\n+   = note: expected mutable reference `&'z2 mut std::string::String`\n+                      found reference `&'z3 std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:14:11"}, {"sha": "517da553dc0ee73bbcd7d2b0b4c62f7d11fc46b2", "filename": "src/test/ui/traits/trait-impl-method-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-method-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-method-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-method-mismatch.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -8,7 +8,7 @@ LL |     unsafe fn jumbo(&self, x: &usize) { *self + *x; }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected normal fn, found unsafe fn\n    |\n    = note: expected fn pointer `fn(&usize, &usize) -> usize`\n-              found fn pointer `unsafe fn(&usize, &usize)`\n+              found fn pointer `unsafe fn(&'z0 usize, &'z1 usize)`\n \n error: aborting due to previous error\n "}, {"sha": "7beffa0e5e4938c1d8505b1c47a380ac3c1fb965", "filename": "src/test/ui/type/type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -211,7 +211,7 @@ LL |     want::<&Foo<foo>>(f);\n    |                       expected `&Foo<foo>`, found struct `Foo`\n    |                       help: consider borrowing here: `&f`\n    |\n-   = note: expected reference `&Foo<foo>`\n+   = note: expected reference `&'z0 Foo<foo>`\n                  found struct `Foo<foo>`\n \n error[E0308]: mismatched types\n@@ -313,7 +313,7 @@ LL |     want::<&Foo<foo, B>>(f);\n    |                          expected `&Foo<foo, B>`, found struct `Foo`\n    |                          help: consider borrowing here: `&f`\n    |\n-   = note: expected reference `&Foo<foo, B>`\n+   = note: expected reference `&'z1 Foo<foo, B>`\n                  found struct `Foo<foo, B>`\n \n error[E0308]: mismatched types"}, {"sha": "691c751a080f1e4be32ab2287b562a9437d7614d", "filename": "src/test/ui/unsafe/unsafe-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -8,7 +8,7 @@ impl Foo for u32 {\n     fn len(&self) -> u32 { *self }\n     //~^ ERROR method `len` has an incompatible type for trait\n     //~| expected fn pointer `unsafe fn(&u32) -> _`\n-    //~| found fn pointer `fn(&u32) -> _`\n+    //~| found fn pointer `fn(&'z0 u32) -> _`\n }\n \n fn main() { }"}, {"sha": "f163790eb45119825486865eb16581ebb10a3452", "filename": "src/test/ui/unsafe/unsafe-trait-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -8,7 +8,7 @@ LL |     fn len(&self) -> u32 { *self }\n    |     ^^^^^^^^^^^^^^^^^^^^ expected unsafe fn, found normal fn\n    |\n    = note: expected fn pointer `unsafe fn(&u32) -> _`\n-              found fn pointer `fn(&u32) -> _`\n+              found fn pointer `fn(&'z0 u32) -> _`\n \n error: aborting due to previous error\n "}, {"sha": "cb901cdeedf0cf76d92c2de98b05c8e4ee7637a7", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba22205a48f3c4232a899effc47fa1925ed9900/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=5ba22205a48f3c4232a899effc47fa1925ed9900", "patch": "@@ -5,7 +5,7 @@ LL |     fn mul(self, s: &f64) -> Vec1 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&f64`\n    |\n    = note: expected fn pointer `fn(Vec1, f64) -> Vec1`\n-              found fn pointer `fn(Vec1, &f64) -> Vec1`\n+              found fn pointer `fn(Vec1, &'z0 f64) -> Vec1`\n \n error[E0053]: method `mul` has an incompatible type for trait\n   --> $DIR/wrong-mul-method-signature.rs:33:5"}]}