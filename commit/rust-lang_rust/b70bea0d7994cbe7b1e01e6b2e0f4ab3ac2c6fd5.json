{"sha": "b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MGJlYTBkNzk5NGNiZTdiMWUwMWU2YjJlMGY0YWIzYWMyYzZmZDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-18T19:26:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-18T19:26:10Z"}, "message": "Merge #8083\n\n8083: Track source file IDs in source mapping of Attrs r=jonas-schievink a=Veykril\n\nFixes the panics/incorrect injection highlighting of outline module declarations until we figure out a nicer source mapping strategy for attributes.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "aac5c28a622b6ef3c5639c3e9ab93c11ffa5f678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac5c28a622b6ef3c5639c3e9ab93c11ffa5f678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgU6lSCRBK7hj4Ov3rIwAAdHIIALBc/6aG5+jwyvVBUK3D2vtZ\ng2InmvAOh2O1XvEbyKZnSuBaLCtjH7fq6X9BVziV0nZG1d7T/MyX5W85aRp01rza\nTESPMZkhLzVon/7bY4dIr+E3DA2fTl6UyYL4LJApDdxXB3eLomCs/Pj6+23rkI0v\nvJ8O00jZPeSDFouX51MQxa1E9o+32bmVdtO0tpxolph5ZEba6yhuafwqyR7KqTqj\nRwPLooIEbeHw2LmyR1LCy1EHE1a2Pu/X0kyKJIzSRs9sCxF+vB7arlX1nRqpx2Sn\n+0TsSE4xZ5U0euSxyTpUiurPYOJK9XS88vsoZfSVMfdggiB4zwzGYPppcF8r5XY=\n=HfcT\n-----END PGP SIGNATURE-----\n", "payload": "tree aac5c28a622b6ef3c5639c3e9ab93c11ffa5f678\nparent f57ce6f5588fe62da6eab7a9ad3a3d06a9cd2ac0\nparent d41a1690d2aa5d3287b00d100897136b6186c39c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616095570 +0000\ncommitter GitHub <noreply@github.com> 1616095570 +0000\n\nMerge #8083\n\n8083: Track source file IDs in source mapping of Attrs r=jonas-schievink a=Veykril\n\nFixes the panics/incorrect injection highlighting of outline module declarations until we figure out a nicer source mapping strategy for attributes.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5", "html_url": "https://github.com/rust-lang/rust/commit/b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f57ce6f5588fe62da6eab7a9ad3a3d06a9cd2ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57ce6f5588fe62da6eab7a9ad3a3d06a9cd2ac0", "html_url": "https://github.com/rust-lang/rust/commit/f57ce6f5588fe62da6eab7a9ad3a3d06a9cd2ac0"}, {"sha": "d41a1690d2aa5d3287b00d100897136b6186c39c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d41a1690d2aa5d3287b00d100897136b6186c39c", "html_url": "https://github.com/rust-lang/rust/commit/d41a1690d2aa5d3287b00d100897136b6186c39c"}], "stats": {"total": 102, "additions": 76, "deletions": 26}, "files": [{"sha": "1cab0e363fc2ee22ce69f942368af3d49c6a9055", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5", "patch": "@@ -283,8 +283,51 @@ impl Attrs {\n     /// Constructs a map that maps the lowered `Attr`s in this `Attrs` back to its original syntax nodes.\n     ///\n     /// `owner` must be the original owner of the attributes.\n-    pub fn source_map(&self, owner: &dyn ast::AttrsOwner) -> AttrSourceMap {\n-        AttrSourceMap { attrs: collect_attrs(owner).collect() }\n+    // FIXME: figure out a better api that doesnt require the for_module hack\n+    pub fn source_map(&self, owner: InFile<&dyn ast::AttrsOwner>) -> AttrSourceMap {\n+        // FIXME: This doesn't work correctly for modules, as the attributes there can have up to\n+        // two different owners\n+        AttrSourceMap {\n+            attrs: collect_attrs(owner.value)\n+                .map(|attr| InFile::new(owner.file_id, attr))\n+                .collect(),\n+        }\n+    }\n+\n+    pub fn source_map_for_module(\n+        &self,\n+        db: &dyn DefDatabase,\n+        module: crate::ModuleId,\n+    ) -> AttrSourceMap {\n+        let def_map = module.def_map(db);\n+        let mod_data = &def_map[module.local_id];\n+        let attrs = match mod_data.declaration_source(db) {\n+            Some(it) => {\n+                let mut attrs: Vec<_> = collect_attrs(&it.value as &dyn ast::AttrsOwner)\n+                    .map(|attr| InFile::new(it.file_id, attr))\n+                    .collect();\n+                if let InFile { file_id, value: ModuleSource::SourceFile(file) } =\n+                    mod_data.definition_source(db)\n+                {\n+                    attrs.extend(\n+                        collect_attrs(&file as &dyn ast::AttrsOwner)\n+                            .map(|attr| InFile::new(file_id, attr)),\n+                    )\n+                }\n+                attrs\n+            }\n+            None => {\n+                let InFile { file_id, value } = mod_data.definition_source(db);\n+                match &value {\n+                    ModuleSource::SourceFile(file) => collect_attrs(file as &dyn ast::AttrsOwner),\n+                    ModuleSource::Module(module) => collect_attrs(module as &dyn ast::AttrsOwner),\n+                    ModuleSource::BlockExpr(block) => collect_attrs(block as &dyn ast::AttrsOwner),\n+                }\n+                .map(|attr| InFile::new(file_id, attr))\n+                .collect()\n+            }\n+        };\n+        AttrSourceMap { attrs }\n     }\n \n     pub fn by_key(&self, key: &'static str) -> AttrQuery<'_> {\n@@ -379,7 +422,7 @@ fn inner_attributes(\n }\n \n pub struct AttrSourceMap {\n-    attrs: Vec<Either<ast::Attr, ast::Comment>>,\n+    attrs: Vec<InFile<Either<ast::Attr, ast::Comment>>>,\n }\n \n impl AttrSourceMap {\n@@ -389,10 +432,11 @@ impl AttrSourceMap {\n     ///\n     /// Note that the returned syntax node might be a `#[cfg_attr]`, or a doc comment, instead of\n     /// the attribute represented by `Attr`.\n-    pub fn source_of(&self, attr: &Attr) -> &Either<ast::Attr, ast::Comment> {\n+    pub fn source_of(&self, attr: &Attr) -> InFile<&Either<ast::Attr, ast::Comment>> {\n         self.attrs\n             .get(attr.index as usize)\n             .unwrap_or_else(|| panic!(\"cannot find `Attr` at index {}\", attr.index))\n+            .as_ref()\n     }\n }\n \n@@ -428,18 +472,6 @@ impl Attr {\n         Some(Attr { index, path, input })\n     }\n \n-    /// Maps this lowered `Attr` back to its original syntax node.\n-    ///\n-    /// `owner` must be the original owner of the attribute.\n-    ///\n-    /// Note that the returned syntax node might be a `#[cfg_attr]`, or a doc comment, instead of\n-    /// the attribute represented by `Attr`.\n-    pub fn to_src(&self, owner: &dyn ast::AttrsOwner) -> Either<ast::Attr, ast::Comment> {\n-        collect_attrs(owner).nth(self.index as usize).unwrap_or_else(|| {\n-            panic!(\"cannot find `Attr` at index {} in {}\", self.index, owner.syntax())\n-        })\n-    }\n-\n     /// Parses this attribute as a `#[derive]`, returns an iterator that yields all contained paths\n     /// to derive macros.\n     ///"}, {"sha": "e25b698e0c6e028b6d544b2d5551b4c2ca8697d0", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5", "patch": "@@ -12,7 +12,7 @@ mod html;\n #[cfg(test)]\n mod tests;\n \n-use hir::{Name, Semantics};\n+use hir::{InFile, Name, Semantics};\n use ide_db::{RootDatabase, SymbolKind};\n use rustc_hash::FxHashMap;\n use syntax::{\n@@ -73,14 +73,20 @@ pub(crate) fn highlight(\n     };\n \n     let mut hl = highlights::Highlights::new(root.text_range());\n-    traverse(&mut hl, &sema, &root, range_to_highlight, syntactic_name_ref_highlighting);\n+    traverse(\n+        &mut hl,\n+        &sema,\n+        InFile::new(file_id.into(), &root),\n+        range_to_highlight,\n+        syntactic_name_ref_highlighting,\n+    );\n     hl.to_vec()\n }\n \n fn traverse(\n     hl: &mut Highlights,\n     sema: &Semantics<RootDatabase>,\n-    root: &SyntaxNode,\n+    root: InFile<&SyntaxNode>,\n     range_to_highlight: TextRange,\n     syntactic_name_ref_highlighting: bool,\n ) {\n@@ -93,7 +99,7 @@ fn traverse(\n \n     // Walk all nodes, keeping track of whether we are inside a macro or not.\n     // If in macro, expand it first and highlight the expanded code.\n-    for event in root.preorder_with_tokens() {\n+    for event in root.value.preorder_with_tokens() {\n         let event_range = match &event {\n             WalkEvent::Enter(it) | WalkEvent::Leave(it) => it.text_range(),\n         };\n@@ -150,7 +156,7 @@ fn traverse(\n             WalkEvent::Enter(it) => it,\n             WalkEvent::Leave(it) => {\n                 if let Some(node) = it.as_node() {\n-                    inject::doc_comment(hl, sema, node);\n+                    inject::doc_comment(hl, sema, root.with_value(node));\n                 }\n                 continue;\n             }"}, {"sha": "e6dbd307ec866ba142d12e3f5110ec54b0c0f6b2", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5", "patch": "@@ -3,7 +3,7 @@\n use std::{mem, ops::Range};\n \n use either::Either;\n-use hir::{HasAttrs, Semantics};\n+use hir::{HasAttrs, InFile, Semantics};\n use ide_db::{call_info::ActiveParameter, defs::Definition};\n use syntax::{\n     ast::{self, AstNode, AttrsOwner, DocCommentsOwner},\n@@ -148,16 +148,25 @@ fn doc_attributes<'node>(\n }\n \n /// Injection of syntax highlighting of doctests.\n-pub(super) fn doc_comment(hl: &mut Highlights, sema: &Semantics<RootDatabase>, node: &SyntaxNode) {\n-    let (owner, attributes, def) = match doc_attributes(sema, node) {\n+pub(super) fn doc_comment(\n+    hl: &mut Highlights,\n+    sema: &Semantics<RootDatabase>,\n+    node: InFile<&SyntaxNode>,\n+) {\n+    let (owner, attributes, def) = match doc_attributes(sema, node.value) {\n         Some(it) => it,\n         None => return,\n     };\n \n     let mut inj = Injector::default();\n     inj.add_unmapped(\"fn doctest() {\\n\");\n \n-    let attrs_source_map = attributes.source_map(&owner);\n+    let attrs_source_map = match def {\n+        Definition::ModuleDef(hir::ModuleDef::Module(module)) => {\n+            attributes.source_map_for_module(sema.db, module.into())\n+        }\n+        _ => attributes.source_map(node.with_value(&owner)),\n+    };\n \n     let mut is_codeblock = false;\n     let mut is_doctest = false;\n@@ -168,7 +177,10 @@ pub(super) fn doc_comment(hl: &mut Highlights, sema: &Semantics<RootDatabase>, n\n     let mut intra_doc_links = Vec::new();\n     let mut string;\n     for attr in attributes.by_key(\"doc\").attrs() {\n-        let src = attrs_source_map.source_of(&attr);\n+        let InFile { file_id, value: src } = attrs_source_map.source_of(&attr);\n+        if file_id != node.file_id {\n+            continue;\n+        }\n         let (line, range, prefix) = match &src {\n             Either::Left(it) => {\n                 string = match find_doc_string_in_attr(attr, it) {"}]}