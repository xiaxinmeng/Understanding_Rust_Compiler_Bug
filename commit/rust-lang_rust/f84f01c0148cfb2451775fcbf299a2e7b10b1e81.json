{"sha": "f84f01c0148cfb2451775fcbf299a2e7b10b1e81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NGYwMWMwMTQ4Y2ZiMjQ1MTc3NWZjYmYyOTlhMmU3YjEwYjFlODE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-06T18:01:42Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-06T18:02:02Z"}, "message": "Use futex-based thread-parker for Wasm32.", "tree": {"sha": "f75345076083055a330db5446ddaadb61b7d1fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f75345076083055a330db5446ddaadb61b7d1fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f84f01c0148cfb2451775fcbf299a2e7b10b1e81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f84f01c0148cfb2451775fcbf299a2e7b10b1e81", "html_url": "https://github.com/rust-lang/rust/commit/f84f01c0148cfb2451775fcbf299a2e7b10b1e81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f84f01c0148cfb2451775fcbf299a2e7b10b1e81/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ded394553296d56bb66e925d7001ab3271979ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ded394553296d56bb66e925d7001ab3271979ce", "html_url": "https://github.com/rust-lang/rust/commit/5ded394553296d56bb66e925d7001ab3271979ce"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "3d8bf42f7255eec2b11660c02d5d082eb6a3e422", "filename": "library/std/src/sys/wasm/futex_atomics.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f84f01c0148cfb2451775fcbf299a2e7b10b1e81/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Ffutex_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84f01c0148cfb2451775fcbf299a2e7b10b1e81/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Ffutex_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Ffutex_atomics.rs?ref=f84f01c0148cfb2451775fcbf299a2e7b10b1e81", "patch": "@@ -0,0 +1,17 @@\n+use crate::arch::wasm32;\n+use crate::convert::TryInto;\n+use crate::sync::atomic::AtomicI32;\n+use crate::time::Duration;\n+\n+pub fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) {\n+    let timeout = timeout.and_then(|t| t.as_nanos().try_into().ok()).unwrap_or(-1);\n+    unsafe {\n+        wasm32::memory_atomic_wait32(futex as *const AtomicI32 as *mut i32, expected, timeout);\n+    }\n+}\n+\n+pub fn futex_wake(futex: &AtomicI32) {\n+    unsafe {\n+        wasm32::memory_atomic_notify(futex as *const AtomicI32 as *mut i32, 1);\n+    }\n+}"}, {"sha": "ca50c393c0bfcd269d7c723dbbb7a2e2fc1bd5f6", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f84f01c0148cfb2451775fcbf299a2e7b10b1e81/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84f01c0148cfb2451775fcbf299a2e7b10b1e81/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=f84f01c0148cfb2451775fcbf299a2e7b10b1e81", "patch": "@@ -55,6 +55,8 @@ cfg_if::cfg_if! {\n         pub mod mutex;\n         #[path = \"rwlock_atomics.rs\"]\n         pub mod rwlock;\n+        #[path = \"futex_atomics.rs\"]\n+        pub mod futex;\n     } else {\n         #[path = \"../unsupported/condvar.rs\"]\n         pub mod condvar;"}, {"sha": "5e75ac65de4199a95737f2021ec9e2af329b2d97", "filename": "library/std/src/sys_common/thread_parker/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f84f01c0148cfb2451775fcbf299a2e7b10b1e81/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84f01c0148cfb2451775fcbf299a2e7b10b1e81/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs?ref=f84f01c0148cfb2451775fcbf299a2e7b10b1e81", "patch": "@@ -1,5 +1,9 @@\n cfg_if::cfg_if! {\n-    if #[cfg(any(target_os = \"linux\", target_os = \"android\"))] {\n+    if #[cfg(any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+        all(target_arch = \"wasm32\", target_feature = \"atomics\"),\n+    ))] {\n         mod futex;\n         pub use futex::Parker;\n     } else {"}]}