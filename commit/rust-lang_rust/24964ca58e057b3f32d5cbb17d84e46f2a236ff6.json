{"sha": "24964ca58e057b3f32d5cbb17d84e46f2a236ff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OTY0Y2E1OGUwNTdiM2YzMmQ1Y2JiMTdkODRlNDZmMmEyMzZmZjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T10:28:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T10:28:04Z"}, "message": "Move expr resolver to resolve", "tree": {"sha": "b8b3f17fba8a26bb96a23e15f84730b0eaf658a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8b3f17fba8a26bb96a23e15f84730b0eaf658a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24964ca58e057b3f32d5cbb17d84e46f2a236ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24964ca58e057b3f32d5cbb17d84e46f2a236ff6", "html_url": "https://github.com/rust-lang/rust/commit/24964ca58e057b3f32d5cbb17d84e46f2a236ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24964ca58e057b3f32d5cbb17d84e46f2a236ff6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0102fb41337ac0442e689d410bb424d215e9a7bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0102fb41337ac0442e689d410bb424d215e9a7bd", "html_url": "https://github.com/rust-lang/rust/commit/0102fb41337ac0442e689d410bb424d215e9a7bd"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "3ca0a4de5eac59db10d4c830ed4036580c6b3d26", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/24964ca58e057b3f32d5cbb17d84e46f2a236ff6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24964ca58e057b3f32d5cbb17d84e46f2a236ff6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=24964ca58e057b3f32d5cbb17d84e46f2a236ff6", "patch": "@@ -13,7 +13,7 @@ use crate::{\n     diagnostics::{MissingFields, MissingOkInTailExpr},\n     resolve::HasResolver,\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n-    Adt, DefWithBody, Function, HasBody, Name, Path, Resolver,\n+    Adt, Function, Name, Path,\n };\n \n pub use hir_def::{\n@@ -27,30 +27,6 @@ pub use hir_def::{\n     },\n };\n \n-// needs arbitrary_self_types to be a method... or maybe move to the def?\n-pub(crate) fn resolver_for_expr(\n-    db: &impl HirDatabase,\n-    owner: DefWithBody,\n-    expr_id: ExprId,\n-) -> Resolver {\n-    let scopes = owner.expr_scopes(db);\n-    resolver_for_scope(db, owner, scopes.scope_for(expr_id))\n-}\n-\n-pub(crate) fn resolver_for_scope(\n-    db: &impl HirDatabase,\n-    owner: DefWithBody,\n-    scope_id: Option<ScopeId>,\n-) -> Resolver {\n-    let mut r = owner.resolver(db);\n-    let scopes = owner.expr_scopes(db);\n-    let scope_chain = scopes.scope_chain(scope_id).collect::<Vec<_>>();\n-    for scope in scope_chain.into_iter().rev() {\n-        r = r.push_expr_scope(owner.into(), Arc::clone(&scopes), scope);\n-    }\n-    r\n-}\n-\n pub(crate) struct ExprValidator<'a, 'b: 'a> {\n     func: Function,\n     infer: Arc<InferenceResult>,"}, {"sha": "899959532e6b060e35471387594070ed3f28e9b3", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/24964ca58e057b3f32d5cbb17d84e46f2a236ff6/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24964ca58e057b3f32d5cbb17d84e46f2a236ff6/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=24964ca58e057b3f32d5cbb17d84e46f2a236ff6", "patch": "@@ -4,6 +4,7 @@ use std::sync::Arc;\n use hir_def::{\n     builtin_type::BuiltinType,\n     db::DefDatabase2,\n+    expr::ExprId,\n     generics::GenericParams,\n     nameres::CrateDefMap,\n     path::{Path, PathKind},\n@@ -15,10 +16,10 @@ use rustc_hash::FxHashSet;\n \n use crate::{\n     code_model::Crate,\n-    db::DefDatabase,\n+    db::{DefDatabase, HirDatabase},\n     expr::{ExprScopes, PatId, ScopeId},\n-    Adt, Const, Container, DefWithBody, EnumVariant, Function, GenericDef, ImplBlock, Local,\n-    MacroDef, Module, ModuleDef, PerNs, Static, Struct, Trait, TypeAlias,\n+    Adt, Const, Container, DefWithBody, EnumVariant, Function, GenericDef, HasBody, ImplBlock,\n+    Local, MacroDef, Module, ModuleDef, PerNs, Static, Struct, Trait, TypeAlias,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -492,6 +493,30 @@ impl Scope {\n     }\n }\n \n+// needs arbitrary_self_types to be a method... or maybe move to the def?\n+pub(crate) fn resolver_for_expr(\n+    db: &impl HirDatabase,\n+    owner: DefWithBody,\n+    expr_id: ExprId,\n+) -> Resolver {\n+    let scopes = owner.expr_scopes(db);\n+    resolver_for_scope(db, owner, scopes.scope_for(expr_id))\n+}\n+\n+pub(crate) fn resolver_for_scope(\n+    db: &impl HirDatabase,\n+    owner: DefWithBody,\n+    scope_id: Option<ScopeId>,\n+) -> Resolver {\n+    let mut r = owner.resolver(db);\n+    let scopes = owner.expr_scopes(db);\n+    let scope_chain = scopes.scope_chain(scope_id).collect::<Vec<_>>();\n+    for scope in scope_chain.into_iter().rev() {\n+        r = r.push_expr_scope(owner.into(), Arc::clone(&scopes), scope);\n+    }\n+    r\n+}\n+\n pub(crate) trait HasResolver {\n     /// Builds a resolver for type references inside this def.\n     fn resolver(self, db: &impl DefDatabase) -> Resolver;"}, {"sha": "29c928d51bb30a69970ea00cb224ccd05ffb7d44", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24964ca58e057b3f32d5cbb17d84e46f2a236ff6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24964ca58e057b3f32d5cbb17d84e46f2a236ff6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=24964ca58e057b3f32d5cbb17d84e46f2a236ff6", "patch": "@@ -21,9 +21,9 @@ use ra_syntax::{\n \n use crate::{\n     db::HirDatabase,\n-    expr::{self, BodySourceMap, ExprScopes, ScopeId},\n+    expr::{BodySourceMap, ExprScopes, ScopeId},\n     ids::LocationCtx,\n-    resolve::{HasResolver, ScopeDef, TypeNs, ValueNs},\n+    resolve::{resolver_for_scope, HasResolver, ScopeDef, TypeNs, ValueNs},\n     ty::method_resolution::{self, implements_trait},\n     Adt, AssocItem, Const, DefWithBody, Either, Enum, EnumVariant, FromSource, Function,\n     GenericParam, HasBody, HirFileId, Local, MacroDef, Module, Name, Path, Resolver, Static,\n@@ -160,7 +160,7 @@ impl SourceAnalyzer {\n                 None => scope_for(&scopes, &source_map, node),\n                 Some(offset) => scope_for_offset(&scopes, &source_map, node.with_value(offset)),\n             };\n-            let resolver = expr::resolver_for_scope(db, def, scope);\n+            let resolver = resolver_for_scope(db, def, scope);\n             SourceAnalyzer {\n                 resolver,\n                 body_owner: Some(def),"}, {"sha": "414b06ba16fb9e147d6eb3aa228a215c44e432b1", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24964ca58e057b3f32d5cbb17d84e46f2a236ff6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24964ca58e057b3f32d5cbb17d84e46f2a236ff6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=24964ca58e057b3f32d5cbb17d84e46f2a236ff6", "patch": "@@ -12,8 +12,9 @@ use hir_expand::name;\n use super::{BindingMode, Expectation, InferenceContext, InferenceDiagnostic, TypeMismatch};\n use crate::{\n     db::HirDatabase,\n-    expr::{self, Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n+    expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     generics::{GenericParams, HasGenericParams},\n+    resolve::resolver_for_expr,\n     ty::{\n         autoderef, method_resolution, op, CallableDef, InferTy, IntTy, Mutability, Namespace,\n         Obligation, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n@@ -186,7 +187,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::Path(p) => {\n                 // FIXME this could be more efficient...\n-                let resolver = expr::resolver_for_expr(self.db, self.owner, tgt_expr);\n+                let resolver = resolver_for_expr(self.db, self.owner, tgt_expr);\n                 self.infer_path(&resolver, p, tgt_expr.into()).unwrap_or(Ty::Unknown)\n             }\n             Expr::Continue => Ty::simple(TypeCtor::Never),"}]}