{"sha": "d85718ad01124abcb6a7cd2f958bae2285c933f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NTcxOGFkMDExMjRhYmNiNmE3Y2QyZjk1OGJhZTIyODVjOTMzZjE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-08T16:30:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-08T16:30:34Z"}, "message": "Rollup merge of #86838 - lambinoo:I-69630-rust_const_unstable_check_const, r=oli-obk\n\nChecking that function is const if marked with rustc_const_unstable\n\nFixes #69630\n\nThis one is still missing tests to check the behavior but I checked by hand and it seemed to work.\nI would not mind some direction for writing those unit tests!", "tree": {"sha": "e99e6e50e92ffc5d54e2613037e2e5ada83a2c7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e99e6e50e92ffc5d54e2613037e2e5ada83a2c7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d85718ad01124abcb6a7cd2f958bae2285c933f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg5ygrCRBK7hj4Ov3rIwAAbB0IAC1CGFCfULctnBi+92vFI45k\nEP3WZPkCrLGkVb4HlyLRoxvMuFnpBvITPB/gwkgv3wpnto5Dzu4mH2Y2/+Fdpcoa\naJxe9dzEn7//v0Vab0U77y0Tz08sGXiC5GQRg1xyVKaqmYoEBLCqDy9DfL812qEZ\n6llE67II9BdfzW59niNd2JemBWVZIRwvTCsIPaUIgoJJuHmcvLi5p7t3Os/0bcIe\ngW3gPG+idozJ/rTeIvHyBuPo7M7+pWzIHE0hjF460Q/dj+6nK7ARy8BMlLm7lpeA\ntDVWM336zk/LRvLntG3+LPkNo8qTFuLom/Tav9H+gSk2crUc8+vEDNPtGJBFl7Q=\n=Dbj9\n-----END PGP SIGNATURE-----\n", "payload": "tree e99e6e50e92ffc5d54e2613037e2e5ada83a2c7b\nparent ff4bf73a4274623e302fcde1f7914d6cf8da40e7\nparent 07f903e0e0816821c41a19774f029086b557738b\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1625761834 +0200\ncommitter GitHub <noreply@github.com> 1625761834 +0200\n\nRollup merge of #86838 - lambinoo:I-69630-rust_const_unstable_check_const, r=oli-obk\n\nChecking that function is const if marked with rustc_const_unstable\n\nFixes #69630\n\nThis one is still missing tests to check the behavior but I checked by hand and it seemed to work.\nI would not mind some direction for writing those unit tests!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d85718ad01124abcb6a7cd2f958bae2285c933f1", "html_url": "https://github.com/rust-lang/rust/commit/d85718ad01124abcb6a7cd2f958bae2285c933f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d85718ad01124abcb6a7cd2f958bae2285c933f1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff4bf73a4274623e302fcde1f7914d6cf8da40e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4bf73a4274623e302fcde1f7914d6cf8da40e7", "html_url": "https://github.com/rust-lang/rust/commit/ff4bf73a4274623e302fcde1f7914d6cf8da40e7"}, {"sha": "07f903e0e0816821c41a19774f029086b557738b", "url": "https://api.github.com/repos/rust-lang/rust/commits/07f903e0e0816821c41a19774f029086b557738b", "html_url": "https://github.com/rust-lang/rust/commit/07f903e0e0816821c41a19774f029086b557738b"}], "stats": {"total": 227, "additions": 220, "deletions": 7}, "files": [{"sha": "7fecfeaa57c283000e81c42e4f6dacb7200d824a", "filename": "compiler/rustc_error_codes/src/error_codes/E0542.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d85718ad01124abcb6a7cd2f958bae2285c933f1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md", "raw_url": "https://github.com/rust-lang/rust/raw/d85718ad01124abcb6a7cd2f958bae2285c933f1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md?ref=d85718ad01124abcb6a7cd2f958bae2285c933f1", "patch": "@@ -10,7 +10,7 @@ Erroneous code example:\n fn _stable_fn() {}\n \n #[rustc_const_stable(feature = \"_stable_const_fn\")] // invalid\n-fn _stable_const_fn() {}\n+const fn _stable_const_fn() {}\n \n #[stable(feature = \"_deprecated_fn\", since = \"0.1.0\")]\n #[rustc_deprecated(\n@@ -29,7 +29,7 @@ To fix this issue, you need to provide the `since` field. Example:\n fn _stable_fn() {}\n \n #[rustc_const_stable(feature = \"_stable_const_fn\", since = \"1.0.0\")] // ok!\n-fn _stable_const_fn() {}\n+const fn _stable_const_fn() {}\n \n #[stable(feature = \"_deprecated_fn\", since = \"0.1.0\")]\n #[rustc_deprecated("}, {"sha": "7aba084f4d3aa82b50e8c3958ec891c5b7d4ef84", "filename": "compiler/rustc_error_codes/src/error_codes/E0545.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d85718ad01124abcb6a7cd2f958bae2285c933f1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0545.md", "raw_url": "https://github.com/rust-lang/rust/raw/d85718ad01124abcb6a7cd2f958bae2285c933f1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0545.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0545.md?ref=d85718ad01124abcb6a7cd2f958bae2285c933f1", "patch": "@@ -10,7 +10,7 @@ Erroneous code example:\n fn _unstable_fn() {}\n \n #[rustc_const_unstable(feature = \"_unstable_const_fn\", issue = \"0\")] // invalid\n-fn _unstable_const_fn() {}\n+const fn _unstable_const_fn() {}\n ```\n \n To fix this issue, you need to provide a correct value in the `issue` field.\n@@ -24,7 +24,7 @@ Example:\n fn _unstable_fn() {}\n \n #[rustc_const_unstable(feature = \"_unstable_const_fn\", issue = \"1\")] // ok!\n-fn _unstable_const_fn() {}\n+const fn _unstable_const_fn() {}\n ```\n \n See the [How Rust is Made and \u201cNightly Rust\u201d][how-rust-made-nightly] appendix"}, {"sha": "4950325df640007c23ef4e6b2490f74a49623b9a", "filename": "compiler/rustc_error_codes/src/error_codes/E0547.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d85718ad01124abcb6a7cd2f958bae2285c933f1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0547.md", "raw_url": "https://github.com/rust-lang/rust/raw/d85718ad01124abcb6a7cd2f958bae2285c933f1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0547.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0547.md?ref=d85718ad01124abcb6a7cd2f958bae2285c933f1", "patch": "@@ -10,7 +10,7 @@ Erroneous code example:\n fn _unstable_fn() {}\n \n #[rustc_const_unstable(feature = \"_unstable_const_fn\")] // invalid\n-fn _unstable_const_fn() {}\n+const fn _unstable_const_fn() {}\n ```\n \n To fix this issue, you need to provide the `issue` field. Example:\n@@ -26,7 +26,7 @@ fn _unstable_fn() {}\n     feature = \"_unstable_const_fn\",\n     issue = \"none\"\n )] // ok!\n-fn _unstable_const_fn() {}\n+const fn _unstable_const_fn() {}\n ```\n \n See the [How Rust is Made and \u201cNightly Rust\u201d][how-rust-made-nightly] appendix"}, {"sha": "cd8dd6984d5b9d3f897d623ac85a003fb36b4af9", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d85718ad01124abcb6a7cd2f958bae2285c933f1/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d85718ad01124abcb6a7cd2f958bae2285c933f1/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=d85718ad01124abcb6a7cd2f958bae2285c933f1", "patch": "@@ -20,6 +20,7 @@ use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::spec::abi::Abi;\n \n use std::cmp::Ordering;\n use std::iter;\n@@ -95,10 +96,12 @@ struct Annotator<'a, 'tcx> {\n impl<'a, 'tcx> Annotator<'a, 'tcx> {\n     // Determine the stability for a node based on its attributes and inherited\n     // stability. The stability is recorded in the index and used as the parent.\n+    // If the node is a function, `fn_sig` is its signature\n     fn annotate<F>(\n         &mut self,\n         hir_id: HirId,\n         item_sp: Span,\n+        fn_sig: Option<&'tcx hir::FnSig<'tcx>>,\n         kind: AnnotationKind,\n         inherit_deprecation: InheritDeprecation,\n         inherit_const_stability: InheritConstStability,\n@@ -163,13 +166,30 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         }\n \n         let (stab, const_stab) = attr::find_stability(&self.tcx.sess, attrs, item_sp);\n+        let mut const_span = None;\n \n-        let const_stab = const_stab.map(|(const_stab, _)| {\n+        let const_stab = const_stab.map(|(const_stab, const_span_node)| {\n             let const_stab = self.tcx.intern_const_stability(const_stab);\n             self.index.const_stab_map.insert(hir_id, const_stab);\n+            const_span = Some(const_span_node);\n             const_stab\n         });\n \n+        // If the current node is a function, has const stability attributes and if it doesn not have an intrinsic ABI,\n+        // check if the function/method is const or the parent impl block is const\n+        if let (Some(const_span), Some(fn_sig)) = (const_span, fn_sig) {\n+            if fn_sig.header.abi != Abi::RustIntrinsic\n+                && fn_sig.header.abi != Abi::PlatformIntrinsic\n+                && !fn_sig.header.is_const()\n+            {\n+                if !self.in_trait_impl\n+                    || (self.in_trait_impl && !self.tcx.is_const_fn_raw(hir_id.owner.to_def_id()))\n+                {\n+                    missing_const_err(&self.tcx.sess, fn_sig.span, const_span);\n+                }\n+            }\n+        }\n+\n         // `impl const Trait for Type` items forward their const stability to their\n         // immediate children.\n         if const_stab.is_none() {\n@@ -367,6 +387,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         let orig_in_trait_impl = self.in_trait_impl;\n         let mut kind = AnnotationKind::Required;\n         let mut const_stab_inherit = InheritConstStability::No;\n+        let mut fn_sig = None;\n+\n         match i.kind {\n             // Inherent impls and foreign modules serve only as containers for other items,\n             // they don't have their own stability. They still can be annotated as unstable\n@@ -387,6 +409,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                     self.annotate(\n                         ctor_hir_id,\n                         i.span,\n+                        None,\n                         AnnotationKind::Required,\n                         InheritDeprecation::Yes,\n                         InheritConstStability::No,\n@@ -395,12 +418,16 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                     )\n                 }\n             }\n+            hir::ItemKind::Fn(ref item_fn_sig, _, _) => {\n+                fn_sig = Some(item_fn_sig);\n+            }\n             _ => {}\n         }\n \n         self.annotate(\n             i.hir_id(),\n             i.span,\n+            fn_sig,\n             kind,\n             InheritDeprecation::Yes,\n             const_stab_inherit,\n@@ -411,9 +438,15 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n+        let fn_sig = match ti.kind {\n+            hir::TraitItemKind::Fn(ref fn_sig, _) => Some(fn_sig),\n+            _ => None,\n+        };\n+\n         self.annotate(\n             ti.hir_id(),\n             ti.span,\n+            fn_sig,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -427,9 +460,16 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n         let kind =\n             if self.in_trait_impl { AnnotationKind::Prohibited } else { AnnotationKind::Required };\n+\n+        let fn_sig = match ii.kind {\n+            hir::ImplItemKind::Fn(ref fn_sig, _) => Some(fn_sig),\n+            _ => None,\n+        };\n+\n         self.annotate(\n             ii.hir_id(),\n             ii.span,\n+            fn_sig,\n             kind,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -444,6 +484,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         self.annotate(\n             var.id,\n             var.span,\n+            None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -453,6 +494,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                     v.annotate(\n                         ctor_hir_id,\n                         var.span,\n+                        None,\n                         AnnotationKind::Required,\n                         InheritDeprecation::Yes,\n                         InheritConstStability::No,\n@@ -470,6 +512,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         self.annotate(\n             s.hir_id,\n             s.span,\n+            None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -484,6 +527,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         self.annotate(\n             i.hir_id(),\n             i.span,\n+            None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -498,6 +542,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         self.annotate(\n             md.hir_id(),\n             md.span,\n+            None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -517,6 +562,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         self.annotate(\n             p.hir_id,\n             p.span,\n+            None,\n             kind,\n             InheritDeprecation::No,\n             InheritConstStability::No,\n@@ -687,6 +733,7 @@ fn stability_index(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n         annotator.annotate(\n             hir::CRATE_HIR_ID,\n             krate.item.inner,\n+            None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -969,3 +1016,15 @@ fn duplicate_feature_err(sess: &Session, span: Span, feature: Symbol) {\n     struct_span_err!(sess, span, E0636, \"the feature `{}` has already been declared\", feature)\n         .emit();\n }\n+\n+fn missing_const_err(session: &Session, fn_sig_span: Span, const_span: Span) {\n+    const ERROR_MSG: &'static str = \"attributes `#[rustc_const_unstable]` \\\n+         and `#[rustc_const_stable]` require \\\n+         the function or method to be `const`\";\n+\n+    session\n+        .struct_span_err(fn_sig_span, ERROR_MSG)\n+        .span_help(fn_sig_span, \"make the function or method const\")\n+        .span_label(const_span, \"attribute specified here\")\n+        .emit();\n+}"}, {"sha": "4fb259b335c71d7b3f5170012fd24a064a83fd43", "filename": "src/test/ui/consts/rustc-const-stability-require-const.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d85718ad01124abcb6a7cd2f958bae2285c933f1/src%2Ftest%2Fui%2Fconsts%2Frustc-const-stability-require-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d85718ad01124abcb6a7cd2f958bae2285c933f1/src%2Ftest%2Fui%2Fconsts%2Frustc-const-stability-require-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frustc-const-stability-require-const.rs?ref=d85718ad01124abcb6a7cd2f958bae2285c933f1", "patch": "@@ -0,0 +1,47 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![stable(feature = \"foo\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"foo\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]\n+pub fn foo() {}\n+//~^ ERROR attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+\n+#[stable(feature = \"bar\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"const_bar\", since = \"1.0.0\")]\n+pub fn bar() {}\n+//~^ ERROR attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+\n+#[stable(feature = \"potato\", since = \"1.0.0\")]\n+pub struct Potato;\n+\n+impl Potato {\n+    #[stable(feature = \"salad\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_salad\", issue = \"none\")]\n+    pub fn salad(&self) -> &'static str { \"mmmmmm\" }\n+    //~^ ERROR attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+\n+    #[stable(feature = \"roasted\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_roasted\", issue = \"none\")]\n+    pub fn roasted(&self) -> &'static str { \"mmmmmmmmmm\" }\n+    //~^ ERROR attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+}\n+\n+#[stable(feature = \"bar\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"const_bar\", since = \"1.0.0\")]\n+pub extern \"C\" fn bar_c() {}\n+//~^ ERROR attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+\n+#[stable(feature = \"foo\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]\n+pub extern \"C\" fn foo_c() {}\n+//~^ ERROR attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+\n+\n+#[stable(feature = \"foobar\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"foobar_const\", issue = \"none\")]\n+pub const fn foobar() {}\n+\n+#[stable(feature = \"barfoo\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"barfoo_const\", since = \"1.0.0\")]\n+pub const fn barfoo() {}"}, {"sha": "1027b9311b7a671b87331bd68d4624d4af19cff3", "filename": "src/test/ui/consts/rustc-const-stability-require-const.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d85718ad01124abcb6a7cd2f958bae2285c933f1/src%2Ftest%2Fui%2Fconsts%2Frustc-const-stability-require-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d85718ad01124abcb6a7cd2f958bae2285c933f1/src%2Ftest%2Fui%2Fconsts%2Frustc-const-stability-require-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frustc-const-stability-require-const.stderr?ref=d85718ad01124abcb6a7cd2f958bae2285c933f1", "patch": "@@ -0,0 +1,86 @@\n+error: attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+  --> $DIR/rustc-const-stability-require-const.rs:7:1\n+   |\n+LL | #[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]\n+   | -------------------------------------------------------------- attribute specified here\n+LL | pub fn foo() {}\n+   | ^^^^^^^^^^^^\n+   |\n+help: make the function or method const\n+  --> $DIR/rustc-const-stability-require-const.rs:7:1\n+   |\n+LL | pub fn foo() {}\n+   | ^^^^^^^^^^^^\n+\n+error: attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+  --> $DIR/rustc-const-stability-require-const.rs:12:1\n+   |\n+LL | #[rustc_const_stable(feature = \"const_bar\", since = \"1.0.0\")]\n+   | ------------------------------------------------------------- attribute specified here\n+LL | pub fn bar() {}\n+   | ^^^^^^^^^^^^\n+   |\n+help: make the function or method const\n+  --> $DIR/rustc-const-stability-require-const.rs:12:1\n+   |\n+LL | pub fn bar() {}\n+   | ^^^^^^^^^^^^\n+\n+error: attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+  --> $DIR/rustc-const-stability-require-const.rs:21:5\n+   |\n+LL |     #[rustc_const_unstable(feature = \"const_salad\", issue = \"none\")]\n+   |     ---------------------------------------------------------------- attribute specified here\n+LL |     pub fn salad(&self) -> &'static str { \"mmmmmm\" }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function or method const\n+  --> $DIR/rustc-const-stability-require-const.rs:21:5\n+   |\n+LL |     pub fn salad(&self) -> &'static str { \"mmmmmm\" }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+  --> $DIR/rustc-const-stability-require-const.rs:26:5\n+   |\n+LL |     #[rustc_const_unstable(feature = \"const_roasted\", issue = \"none\")]\n+   |     ------------------------------------------------------------------ attribute specified here\n+LL |     pub fn roasted(&self) -> &'static str { \"mmmmmmmmmm\" }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function or method const\n+  --> $DIR/rustc-const-stability-require-const.rs:26:5\n+   |\n+LL |     pub fn roasted(&self) -> &'static str { \"mmmmmmmmmm\" }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+  --> $DIR/rustc-const-stability-require-const.rs:32:1\n+   |\n+LL | #[rustc_const_stable(feature = \"const_bar\", since = \"1.0.0\")]\n+   | ------------------------------------------------------------- attribute specified here\n+LL | pub extern \"C\" fn bar_c() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function or method const\n+  --> $DIR/rustc-const-stability-require-const.rs:32:1\n+   |\n+LL | pub extern \"C\" fn bar_c() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+  --> $DIR/rustc-const-stability-require-const.rs:37:1\n+   |\n+LL | #[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]\n+   | -------------------------------------------------------------- attribute specified here\n+LL | pub extern \"C\" fn foo_c() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function or method const\n+  --> $DIR/rustc-const-stability-require-const.rs:37:1\n+   |\n+LL | pub extern \"C\" fn foo_c() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "01daa1c9cb42fb1f76753cdcf97a430bc5d50b6d", "filename": "src/test/ui/consts/rustc-impl-const-stability.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d85718ad01124abcb6a7cd2f958bae2285c933f1/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d85718ad01124abcb6a7cd2f958bae2285c933f1/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs?ref=d85718ad01124abcb6a7cd2f958bae2285c933f1", "patch": "@@ -0,0 +1,21 @@\n+// build-pass\n+\n+#![crate_type = \"lib\"]\n+#![allow(incomplete_features)]\n+#![feature(staged_api)]\n+#![feature(const_trait_impl)]\n+#![stable(feature = \"foo\", since = \"1.0.0\")]\n+\n+\n+#[stable(feature = \"potato\", since = \"1.27.0\")]\n+pub struct Data {\n+    _data: u128\n+}\n+\n+#[stable(feature = \"potato\", since = \"1.27.0\")]\n+impl const Default for Data {\n+    #[rustc_const_unstable(feature = \"data_foo\", issue = \"none\")]\n+    fn default() -> Data {\n+        Data { _data: 42 }\n+    }\n+}"}]}