{"sha": "1688e481b31e0f67fba72beee4079adb6b95f83c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ODhlNDgxYjMxZTBmNjdmYmE3MmJlZWU0MDc5YWRiNmI5NWY4M2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-07T11:03:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-07T11:03:13Z"}, "message": "minor", "tree": {"sha": "29c6fdbc4e8a1c313886c8690585d21799ed43c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29c6fdbc4e8a1c313886c8690585d21799ed43c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1688e481b31e0f67fba72beee4079adb6b95f83c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1688e481b31e0f67fba72beee4079adb6b95f83c", "html_url": "https://github.com/rust-lang/rust/commit/1688e481b31e0f67fba72beee4079adb6b95f83c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1688e481b31e0f67fba72beee4079adb6b95f83c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6976494781f810193535eebc73e5bda73ba9eddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6976494781f810193535eebc73e5bda73ba9eddf", "html_url": "https://github.com/rust-lang/rust/commit/6976494781f810193535eebc73e5bda73ba9eddf"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "7aed7816ec9a004e2fa3e62ce50d7a04c97e82cf", "filename": "docs/dev/style.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1688e481b31e0f67fba72beee4079adb6b95f83c/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/1688e481b31e0f67fba72beee4079adb6b95f83c/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=1688e481b31e0f67fba72beee4079adb6b95f83c", "patch": "@@ -113,6 +113,13 @@ Avoid preconditions that span across function boundaries:\n \n ```rust\n // Good\n+fn main() {\n+    let s: &str = ...;\n+    if let Some(contents) = string_literal_contents(s) {\n+\n+    }\n+}\n+\n fn string_literal_contents(s: &str) -> Option<&str> {\n     if s.starts_with('\"') && s.ends_with('\"') {\n         Some(&s[1..s.len() - 1])\n@@ -121,24 +128,17 @@ fn string_literal_contents(s: &str) -> Option<&str> {\n     }\n }\n \n-fn foo() {\n+// Not as good\n+fn main() {\n     let s: &str = ...;\n-    if let Some(contents) = string_literal_contents(s) {\n-\n+    if is_string_literal(s) {\n+        let contents = &s[1..s.len() - 1];\n     }\n }\n \n-// Not as good\n fn is_string_literal(s: &str) -> bool {\n     s.starts_with('\"') && s.ends_with('\"')\n }\n-\n-fn foo() {\n-    let s: &str = ...;\n-    if is_string_literal(s) {\n-        let contents = &s[1..s.len() - 1];\n-    }\n-}\n ```\n \n In the \"Not as good\" version, the precondition that `1` is a valid char boundary is checked in `is_string_literal` and used in `foo`."}]}