{"sha": "a5d7073bf51937508ba38c3745622ef31473c0e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZDcwNzNiZjUxOTM3NTA4YmEzOGMzNzQ1NjIyZWYzMTQ3M2MwZTU=", "commit": {"author": {"name": "dawirstejeck", "email": "dawirstejeck@users.noreply.github.com", "date": "2016-09-06T05:11:56Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-09-06T05:11:56Z"}, "message": "Split impl at 'for' if a line break is needed (#1148)\n\n* Split impl at 'for' if a line break is needed\r\n\r\n* Fix formatting\r\n\r\n* Improve comments\r\n\r\n* Skip second try if there is no 'for'\r\n\r\n* Restore intentional trailing whitespace\r\n\r\n* Change test source to be incorrectly formatted\r\n\r\n* Restore more missing trailing whitespace\r\n\r\n* Remove too much whitespace...\r\n\r\nReally should learn how to use git revert.", "tree": {"sha": "7125acfe67df2172b4cc81486c5a6c01c6e3d179", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7125acfe67df2172b4cc81486c5a6c01c6e3d179"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5d7073bf51937508ba38c3745622ef31473c0e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d7073bf51937508ba38c3745622ef31473c0e5", "html_url": "https://github.com/rust-lang/rust/commit/a5d7073bf51937508ba38c3745622ef31473c0e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5d7073bf51937508ba38c3745622ef31473c0e5/comments", "author": null, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df173c2885c588c52c95c30666b0b1af6b472f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/df173c2885c588c52c95c30666b0b1af6b472f35", "html_url": "https://github.com/rust-lang/rust/commit/df173c2885c588c52c95c30666b0b1af6b472f35"}], "stats": {"total": 134, "additions": 87, "deletions": 47}, "files": [{"sha": "d06fc9b2b8cfaf3541bcabb91b6bf60a0e714a49", "filename": "src/items.rs", "status": "modified", "additions": 80, "deletions": 47, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/a5d7073bf51937508ba38c3745622ef31473c0e5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d7073bf51937508ba38c3745622ef31473c0e5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=a5d7073bf51937508ba38c3745622ef31473c0e5", "patch": "@@ -446,58 +446,21 @@ impl<'a> FmtVisitor<'a> {\n }\n \n pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -> Option<String> {\n-    if let ast::ItemKind::Impl(unsafety,\n-                               polarity,\n-                               ref generics,\n-                               ref trait_ref,\n-                               ref self_ty,\n-                               ref items) = item.node {\n+    if let ast::ItemKind::Impl(_, _, ref generics, ref trait_ref, _, ref items) = item.node {\n         let mut result = String::new();\n \n-        result.push_str(&*format_visibility(&item.vis));\n-        result.push_str(format_unsafety(unsafety));\n-        result.push_str(\"impl\");\n-\n-        let lo = context.codemap.span_after(item.span, \"impl\");\n-        let hi = match *trait_ref {\n-            Some(ref tr) => tr.path.span.lo,\n-            None => self_ty.span.lo,\n-        };\n-        let generics_str = try_opt!(rewrite_generics(context,\n-                                                     generics,\n-                                                     offset,\n-                                                     context.config.max_width,\n-                                                     offset + result.len(),\n-                                                     mk_sp(lo, hi)));\n-        result.push_str(&generics_str);\n-\n-        // FIXME might need to linebreak in the impl header, here would be a\n-        // good place.\n-        result.push(' ');\n-        if polarity == ast::ImplPolarity::Negative {\n-            result.push_str(\"!\");\n-        }\n-        if let Some(ref trait_ref) = *trait_ref {\n-            let budget = try_opt!(context.config.max_width.checked_sub(result.len()));\n-            let indent = offset + result.len();\n-            result.push_str(&*try_opt!(trait_ref.rewrite(context, budget, indent)));\n-            result.push_str(\" for \");\n-        }\n+        // First try to format the ref and type without a split at the 'for'.\n+        let mut ref_and_type = try_opt!(format_impl_ref_and_type(context, item, offset, false));\n \n-        let mut used_space = result.len();\n-        if generics.where_clause.predicates.is_empty() {\n-            // If there is no where clause adapt budget for type formatting to take space and curly\n-            // brace into account.\n-            match context.config.item_brace_style {\n-                BraceStyle::AlwaysNextLine => {}\n-                BraceStyle::PreferSameLine => used_space += 2,\n-                BraceStyle::SameLineWhere => used_space += 2,\n+        // If there is a line break present in the first result format it again\n+        // with a split at the 'for'. Skip this if there is no trait ref and\n+        // therefore no 'for'.\n+        if let Some(_) = *trait_ref {\n+            if ref_and_type.contains('\\n') {\n+                ref_and_type = try_opt!(format_impl_ref_and_type(context, item, offset, true));\n             }\n         }\n-\n-        let budget = try_opt!(context.config.max_width.checked_sub(used_space));\n-        let indent = offset + result.len();\n-        result.push_str(&*try_opt!(self_ty.rewrite(context, budget, indent)));\n+        result.push_str(&ref_and_type);\n \n         let where_budget = try_opt!(context.config.max_width.checked_sub(last_line_width(&result)));\n         let where_clause_str = try_opt!(rewrite_where_clause(context,\n@@ -594,6 +557,76 @@ fn is_impl_single_line(context: &RewriteContext,\n          !contains_comment(&snippet[open_pos..]))\n }\n \n+fn format_impl_ref_and_type(context: &RewriteContext,\n+                            item: &ast::Item,\n+                            offset: Indent,\n+                            split_at_for: bool)\n+                            -> Option<String> {\n+    if let ast::ItemKind::Impl(unsafety, polarity, ref generics, ref trait_ref, ref self_ty, _) =\n+           item.node {\n+        let mut result = String::new();\n+\n+        result.push_str(&*format_visibility(&item.vis));\n+        result.push_str(format_unsafety(unsafety));\n+        result.push_str(\"impl\");\n+\n+        let lo = context.codemap.span_after(item.span, \"impl\");\n+        let hi = match *trait_ref {\n+            Some(ref tr) => tr.path.span.lo,\n+            None => self_ty.span.lo,\n+        };\n+        let generics_str = try_opt!(rewrite_generics(context,\n+                                                     generics,\n+                                                     offset,\n+                                                     context.config.max_width,\n+                                                     offset + result.len(),\n+                                                     mk_sp(lo, hi)));\n+        result.push_str(&generics_str);\n+\n+        result.push(' ');\n+        if polarity == ast::ImplPolarity::Negative {\n+            result.push('!');\n+        }\n+        if let Some(ref trait_ref) = *trait_ref {\n+            let budget = try_opt!(context.config.max_width.checked_sub(result.len()));\n+            let indent = offset + result.len();\n+            result.push_str(&*try_opt!(trait_ref.rewrite(context, budget, indent)));\n+\n+            if split_at_for {\n+                result.push('\\n');\n+\n+                // Add indentation of one additional tab.\n+                let width = context.block_indent.width() + context.config.tab_spaces;\n+                let for_indent = Indent::new(0, width);\n+                result.push_str(&for_indent.to_string(context.config));\n+\n+                result.push_str(\"for \");\n+            } else {\n+                result.push_str(\" for \");\n+            }\n+        }\n+\n+        let mut used_space = last_line_width(&result);\n+        if generics.where_clause.predicates.is_empty() {\n+            // If there is no where clause adapt budget for type formatting to take space and curly\n+            // brace into account.\n+            match context.config.item_brace_style {\n+                BraceStyle::AlwaysNextLine => {}\n+                BraceStyle::PreferSameLine => used_space += 2,\n+                BraceStyle::SameLineWhere => used_space += 2,\n+            }\n+        }\n+\n+        let budget = try_opt!(context.config.max_width.checked_sub(used_space));\n+        let indent = offset + result.len();\n+        result.push_str(&*try_opt!(self_ty.rewrite(context, budget, indent)));\n+\n+        Some(result)\n+    } else {\n+        unreachable!();\n+    }\n+}\n+\n pub fn format_struct(context: &RewriteContext,\n                      item_name: &str,\n                      ident: ast::Ident,"}, {"sha": "6d65b8b4a7ad6c1d88e73ab309dbaff90039f530", "filename": "tests/source/impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5d7073bf51937508ba38c3745622ef31473c0e5/tests%2Fsource%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d7073bf51937508ba38c3745622ef31473c0e5/tests%2Fsource%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimpls.rs?ref=a5d7073bf51937508ba38c3745622ef31473c0e5", "patch": "@@ -100,3 +100,6 @@ mod m {\n \n impl<BorrowType, K, V, NodeType, HandleType> Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType> {\n }\n+\n+impl<BorrowType, K, V, NodeType, HandleType> PartialEq for Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType> {\n+}"}, {"sha": "87791d25648a6c82aad33536815becfb3531d5b2", "filename": "tests/target/impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5d7073bf51937508ba38c3745622ef31473c0e5/tests%2Ftarget%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d7073bf51937508ba38c3745622ef31473c0e5/tests%2Ftarget%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpls.rs?ref=a5d7073bf51937508ba38c3745622ef31473c0e5", "patch": "@@ -128,3 +128,7 @@ mod m {\n impl<BorrowType, K, V, NodeType, HandleType> Handle<NodeRef<BorrowType, K, V, NodeType>,\n                                                     HandleType> {\n }\n+\n+impl<BorrowType, K, V, NodeType, HandleType> PartialEq\n+    for Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType> {\n+}"}]}