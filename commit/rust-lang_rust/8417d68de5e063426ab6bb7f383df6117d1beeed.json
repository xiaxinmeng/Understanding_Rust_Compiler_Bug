{"sha": "8417d68de5e063426ab6bb7f383df6117d1beeed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MTdkNjhkZTVlMDYzNDI2YWI2YmI3ZjM4M2RmNjExN2QxYmVlZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-03T18:40:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-03T18:40:54Z"}, "message": "Auto merge of #68803 - Dylan-DPC:rollup-b4x6ghj, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #68678 (Install robots.txt into rust-docs tarballs)\n - #68711 (Added upper bound of what vecs and boxes can allocate)\n - #68744 (Do not ICE in `type-alias-impl-trait` with save-analysis)\n - #68777 (Clean up E0263 explanation)\n - #68787 (Optimize core::ptr::align_offset (part 1))\n - #68797 (Fix links to types instead of modules)\n - #68798 (Test that `#[track_caller]` as `fn()` respects RT / CTFE equivalence)\n - #68800 (Stabilize `core::iter::once_with()`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "46e8f409b07c23138be597bde715fe944f4274ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46e8f409b07c23138be597bde715fe944f4274ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8417d68de5e063426ab6bb7f383df6117d1beeed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8417d68de5e063426ab6bb7f383df6117d1beeed", "html_url": "https://github.com/rust-lang/rust/commit/8417d68de5e063426ab6bb7f383df6117d1beeed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8417d68de5e063426ab6bb7f383df6117d1beeed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd946df3a7af6be0c075d5ab15f9845b3679364", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd946df3a7af6be0c075d5ab15f9845b3679364", "html_url": "https://github.com/rust-lang/rust/commit/bdd946df3a7af6be0c075d5ab15f9845b3679364"}, {"sha": "af3c315dafae5a40f4794635461625ab712d3582", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3c315dafae5a40f4794635461625ab712d3582", "html_url": "https://github.com/rust-lang/rust/commit/af3c315dafae5a40f4794635461625ab712d3582"}], "stats": {"total": 165, "additions": 123, "deletions": 42}, "files": [{"sha": "facf816857fce00754aae1cc7d301e3014faacf4", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -105,6 +105,7 @@ impl Step for Docs {\n         t!(fs::create_dir_all(&dst));\n         let src = builder.doc_out(host);\n         builder.cp_r(&src, &dst);\n+        builder.install(&builder.src.join(\"src/doc/robots.txt\"), &dst, 0o644);\n \n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"generate\")"}, {"sha": "d119cc464731b2df094e3018ec86d4fb6ae90252", "filename": "src/doc/robots.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Fdoc%2Frobots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Fdoc%2Frobots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frobots.txt?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -1,4 +1,3 @@\n-# NB: This file is not automatically deployed. After changes, it needs to be uploaded manually to doc.rust-lang.org\n User-agent: *\n Disallow: /0.3/\n Disallow: /0.4/"}, {"sha": "7e5efbe3078618f99503c325bde66841ac101ac5", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -2,7 +2,8 @@\n //!\n //! [`Box<T>`], casually referred to as a 'box', provides the simplest form of\n //! heap allocation in Rust. Boxes provide ownership for this allocation, and\n-//! drop their contents when they go out of scope.\n+//! drop their contents when they go out of scope. Boxes also ensure that they\n+//! never allocate more than `isize::MAX` bytes.\n //!\n //! # Examples\n //!"}, {"sha": "4f6b7870e2e8ceca10d51509c2803b9592c97534", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -4,6 +4,8 @@\n //! Vectors have `O(1)` indexing, amortized `O(1)` push (to the end) and\n //! `O(1)` pop (from the end).\n //!\n+//! Vectors ensure they never allocate more than `isize::MAX` bytes.\n+//!\n //! # Examples\n //!\n //! You can explicitly create a [`Vec<T>`] with [`new`]:"}, {"sha": "5fa9962f811c532eb7a39ffd5fd2ed1d7ddc3421", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -327,7 +327,7 @@ pub use self::sources::{empty, Empty};\n pub use self::sources::{from_fn, FromFn};\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub use self::sources::{once, Once};\n-#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+#[stable(feature = \"iter_once_with\", since = \"1.43.0\")]\n pub use self::sources::{once_with, OnceWith};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::sources::{repeat, Repeat};"}, {"sha": "5a31acab273f1fe430270ce8e954531562b2810a", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -399,12 +399,12 @@ pub fn once<T>(value: T) -> Once<T> {\n ///\n /// [`once_with`]: fn.once_with.html\n #[derive(Copy, Clone, Debug)]\n-#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+#[stable(feature = \"iter_once_with\", since = \"1.43.0\")]\n pub struct OnceWith<F> {\n     gen: Option<F>,\n }\n \n-#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+#[stable(feature = \"iter_once_with\", since = \"1.43.0\")]\n impl<A, F: FnOnce() -> A> Iterator for OnceWith<F> {\n     type Item = A;\n \n@@ -420,24 +420,24 @@ impl<A, F: FnOnce() -> A> Iterator for OnceWith<F> {\n     }\n }\n \n-#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+#[stable(feature = \"iter_once_with\", since = \"1.43.0\")]\n impl<A, F: FnOnce() -> A> DoubleEndedIterator for OnceWith<F> {\n     fn next_back(&mut self) -> Option<A> {\n         self.next()\n     }\n }\n \n-#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+#[stable(feature = \"iter_once_with\", since = \"1.43.0\")]\n impl<A, F: FnOnce() -> A> ExactSizeIterator for OnceWith<F> {\n     fn len(&self) -> usize {\n         self.gen.iter().len()\n     }\n }\n \n-#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+#[stable(feature = \"iter_once_with\", since = \"1.43.0\")]\n impl<A, F: FnOnce() -> A> FusedIterator for OnceWith<F> {}\n \n-#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+#[stable(feature = \"iter_once_with\", since = \"1.43.0\")]\n unsafe impl<A, F: FnOnce() -> A> TrustedLen for OnceWith<F> {}\n \n /// Creates an iterator that lazily generates a value exactly once by invoking\n@@ -458,8 +458,6 @@ unsafe impl<A, F: FnOnce() -> A> TrustedLen for OnceWith<F> {}\n /// Basic usage:\n ///\n /// ```\n-/// #![feature(iter_once_with)]\n-///\n /// use std::iter;\n ///\n /// // one is the loneliest number\n@@ -476,8 +474,6 @@ unsafe impl<A, F: FnOnce() -> A> TrustedLen for OnceWith<F> {}\n /// `.foorc`:\n ///\n /// ```no_run\n-/// #![feature(iter_once_with)]\n-///\n /// use std::iter;\n /// use std::fs;\n /// use std::path::PathBuf;\n@@ -500,7 +496,7 @@ unsafe impl<A, F: FnOnce() -> A> TrustedLen for OnceWith<F> {}\n /// }\n /// ```\n #[inline]\n-#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+#[stable(feature = \"iter_once_with\", since = \"1.43.0\")]\n pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n     OnceWith { gen: Some(gen) }\n }"}, {"sha": "7738ea2ac57a4c4718e77034fcf9fb84b2332942", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -87,7 +87,6 @@\n #![feature(intrinsics)]\n #![feature(try_find)]\n #![feature(is_sorted)]\n-#![feature(iter_once_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]"}, {"sha": "0ee50966f968c70cbfb876cada69aa2cf26bd6aa", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -1081,9 +1081,8 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n                 // uses e.g., subtraction `mod n`. It is entirely fine to do them `mod\n                 // usize::max_value()` instead, because we take the result `mod n` at the end\n                 // anyway.\n-                inverse = inverse.wrapping_mul(2usize.wrapping_sub(x.wrapping_mul(inverse)))\n-                    & (going_mod - 1);\n-                if going_mod > m {\n+                inverse = inverse.wrapping_mul(2usize.wrapping_sub(x.wrapping_mul(inverse)));\n+                if going_mod >= m {\n                     return inverse & (m - 1);\n                 }\n                 going_mod = going_mod.wrapping_mul(going_mod);\n@@ -1115,26 +1114,33 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n     let gcdpow = intrinsics::cttz_nonzero(stride).min(intrinsics::cttz_nonzero(a));\n     let gcd = 1usize << gcdpow;\n \n-    if p as usize & (gcd - 1) == 0 {\n+    if p as usize & (gcd.wrapping_sub(1)) == 0 {\n         // This branch solves for the following linear congruence equation:\n         //\n-        // $$ p + so \u2261 0 mod a $$\n+        // ` p + so = 0 mod a `\n         //\n-        // $p$ here is the pointer value, $s$ \u2013 stride of `T`, $o$ offset in `T`s, and $a$ \u2013 the\n+        // `p` here is the pointer value, `s` - stride of `T`, `o` offset in `T`s, and `a` - the\n         // requested alignment.\n         //\n-        // g = gcd(a, s)\n-        // o = (a - (p mod a))/g * ((s/g)\u207b\u00b9 mod a)\n+        // With `g = gcd(a, s)`, and the above asserting that `p` is also divisible by `g`, we can\n+        // denote `a' = a/g`, `s' = s/g`, `p' = p/g`, then this becomes equivalent to:\n         //\n-        // The first term is \u201cthe relative alignment of p to a\u201d, the second term is \u201chow does\n-        // incrementing p by s bytes change the relative alignment of p\u201d. Division by `g` is\n-        // necessary to make this equation well formed if $a$ and $s$ are not co-prime.\n+        // ` p' + s'o = 0 mod a' `\n+        // ` o = (a' - (p' mod a')) * (s'^-1 mod a') `\n         //\n-        // Furthermore, the result produced by this solution is not \u201cminimal\u201d, so it is necessary\n-        // to take the result $o mod lcm(s, a)$. We can replace $lcm(s, a)$ with just a $a / g$.\n-        let j = a.wrapping_sub(pmoda) >> gcdpow;\n-        let k = smoda >> gcdpow;\n-        return intrinsics::unchecked_rem(j.wrapping_mul(mod_inv(k, a)), a >> gcdpow);\n+        // The first term is \"the relative alignment of `p` to `a`\" (divided by the `g`), the second\n+        // term is \"how does incrementing `p` by `s` bytes change the relative alignment of `p`\" (again\n+        // divided by `g`).\n+        // Division by `g` is necessary to make the inverse well formed if `a` and `s` are not\n+        // co-prime.\n+        //\n+        // Furthermore, the result produced by this solution is not \"minimal\", so it is necessary\n+        // to take the result `o mod lcm(s, a)`. We can replace `lcm(s, a)` with just a `a'`.\n+        let a2 = a >> gcdpow;\n+        let a2minus1 = a2.wrapping_sub(1);\n+        let s2 = smoda >> gcdpow;\n+        let minusp2 = a2.wrapping_sub(pmoda >> gcdpow);\n+        return (minusp2.wrapping_mul(mod_inv(s2, a2))) & a2minus1;\n     }\n \n     // Cannot be aligned at all."}, {"sha": "bfc3ee09dce4edd20bff1b239ff5cd629d246711", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -13,7 +13,6 @@\n #![feature(hashmap_internals)]\n #![feature(try_find)]\n #![feature(is_sorted)]\n-#![feature(iter_once_with)]\n #![feature(pattern)]\n #![feature(range_is_empty)]\n #![feature(raw)]"}, {"sha": "37271ac692d55fdbd1b4921c94a9311cf958ed4a", "filename": "src/librustc_error_codes/error_codes/E0263.md", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibrustc_error_codes%2Ferror_codes%2FE0263.md", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibrustc_error_codes%2Ferror_codes%2FE0263.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0263.md?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -1,7 +1,16 @@\n-A lifetime name cannot be declared more than once in the same scope. For\n-example:\n+A lifetime was declared more than once in the same scope.\n+\n+Erroneous code example:\n \n ```compile_fail,E0263\n-// error, lifetime name `'a` declared twice in the same scope\n-fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) { }\n+fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str, z: &'a str) { // error!\n+}\n+```\n+\n+Two lifetimes cannot have the same name. To fix this example, change\n+the second `'a` lifetime into something else (`'c` for example):\n+\n+```\n+fn foo<'a, 'b, 'c>(x: &'a str, y: &'b str, z: &'c str) { // ok!\n+}\n ```"}, {"sha": "d0275429747b60f00b10fc1c1eadfaee47a41bd0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -837,8 +837,11 @@ fn has_typeck_tables(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         return tcx.has_typeck_tables(outer_def_id);\n     }\n \n-    let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    primary_body_of(tcx, id).is_some()\n+    if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n+        primary_body_of(tcx, id).is_some()\n+    } else {\n+        false\n+    }\n }\n \n fn used_trait_imports(tcx: TyCtxt<'_>, def_id: DefId) -> &DefIdSet {"}, {"sha": "230fa84cc1504a96b8aad58d7ec33699e886733b", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -163,11 +163,11 @@\n //! [`Iterator`]: iter/trait.Iterator.html\n //! [`Mutex`]: sync/struct.Mutex.html\n //! [`Option<T>`]: option/enum.Option.html\n-//! [`Rc`]: rc/index.html\n+//! [`Rc`]: rc/struct.Rc.html\n //! [`RefCell`]: cell/struct.RefCell.html\n //! [`Result<T, E>`]: result/enum.Result.html\n //! [`String`]: string/struct.String.html\n-//! [`Vec<T>`]: vec/index.html\n+//! [`Vec<T>`]: vec/struct.Vec.html\n //! [array]: primitive.array.html\n //! [slice]: primitive.slice.html\n //! [`atomic`]: sync/atomic/index.html"}, {"sha": "fe2b92eafdb76d8fd11ff61cfd2a35b35681c824", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-fnptr-rt-ctfe-equiv.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -0,0 +1,32 @@\n+// Ensure that a `#[track_caller]` function, returning `caller_location()`,\n+// which coerced (to a function pointer) and called, inside a `const fn`,\n+// in turn called, results in the same output irrespective of whether\n+// we're in a const or runtime context.\n+\n+// run-pass\n+// compile-flags: -Z unleash-the-miri-inside-of-you\n+\n+#![feature(core_intrinsics, const_caller_location, track_caller, const_fn)]\n+\n+type L = &'static std::panic::Location<'static>;\n+\n+#[track_caller]\n+const fn attributed() -> L {\n+    std::intrinsics::caller_location()\n+}\n+\n+const fn calling_attributed() -> L {\n+    // We need `-Z unleash-the-miri-inside-of-you` for this as we don't have `const fn` pointers.\n+    let ptr: fn() -> L = attributed;\n+    ptr() //~ WARN skipping const checks\n+}\n+\n+fn main() {\n+    const CONSTANT: L = calling_attributed();\n+    let runtime = calling_attributed();\n+\n+    assert_eq!(\n+        (runtime.file(), runtime.line(), runtime.column()),\n+        (CONSTANT.file(), CONSTANT.line(), CONSTANT.column()),\n+    );\n+}"}, {"sha": "fcf0945ed4cc672c3a66a0f3667d21d018bdaaf5", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-fnptr-rt-ctfe-equiv.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -0,0 +1,6 @@\n+warning: skipping const checks\n+  --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:21:5\n+   |\n+LL |     ptr()\n+   |     ^^^^^\n+"}, {"sha": "96af085c5b6b8d8692ed0c7d8e2f196447589cf1", "filename": "src/test/ui/save-analysis/issue-68621.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -Zsave-analysis\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Trait {}\n+\n+trait Service {\n+    type Future: Trait;\n+}\n+\n+struct Struct;\n+\n+impl Service for Struct {\n+    type Future = impl Trait; //~ ERROR: could not find defining uses\n+}\n+\n+fn main() {}"}, {"sha": "2c5bbd7782b35e97698df153ed0add8cb2cd75a0", "filename": "src/test/ui/save-analysis/issue-68621.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -0,0 +1,8 @@\n+error: could not find defining uses\n+  --> $DIR/issue-68621.rs:14:5\n+   |\n+LL |     type Future = impl Trait;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b97192a2aed4a19aa4b2eb86d6227c57fe837875", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -Zsave-analysis\n+\n #![feature(type_alias_impl_trait)]\n \n type Closure = impl FnOnce(); //~ ERROR: type mismatch resolving"}, {"sha": "bef4d01093c6235b1501f8aebce13fb1dd143b4d", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -1,5 +1,5 @@\n-error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:6:5: 6:28] as std::ops::FnOnce<()>>::Output == ()`\n-  --> $DIR/issue-63279.rs:3:1\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:8:5: 8:28] as std::ops::FnOnce<()>>::Output == ()`\n+  --> $DIR/issue-63279.rs:5:1\n    |\n LL | type Closure = impl FnOnce();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found `()`"}, {"sha": "26d97cea989c5e644793ad73d89aafa1169b0865", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8417d68de5e063426ab6bb7f383df6117d1beeed/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs?ref=8417d68de5e063426ab6bb7f383df6117d1beeed", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zsave-analysis\n // check-pass\n \n #![feature(type_alias_impl_trait)]"}]}