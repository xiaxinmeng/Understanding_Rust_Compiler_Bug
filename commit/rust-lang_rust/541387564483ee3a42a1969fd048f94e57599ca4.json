{"sha": "541387564483ee3a42a1969fd048f94e57599ca4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MTM4NzU2NDQ4M2VlM2E0MmExOTY5ZmQwNDhmOTRlNTc1OTljYTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-29T11:55:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-29T11:55:39Z"}, "message": "move expansion-related code to a separate crate", "tree": {"sha": "65575cdef1622e15d2fea79e886951a8b38c3406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65575cdef1622e15d2fea79e886951a8b38c3406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/541387564483ee3a42a1969fd048f94e57599ca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/541387564483ee3a42a1969fd048f94e57599ca4", "html_url": "https://github.com/rust-lang/rust/commit/541387564483ee3a42a1969fd048f94e57599ca4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/541387564483ee3a42a1969fd048f94e57599ca4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f22d2f3b0852f32c0ba5e4545ec8cc2d986cfcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f22d2f3b0852f32c0ba5e4545ec8cc2d986cfcc", "html_url": "https://github.com/rust-lang/rust/commit/4f22d2f3b0852f32c0ba5e4545ec8cc2d986cfcc"}], "stats": {"total": 647, "additions": 344, "deletions": 303}, "files": [{"sha": "c0b060aeafc7f74795876481b8366ea23498d1a0", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/541387564483ee3a42a1969fd048f94e57599ca4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/541387564483ee3a42a1969fd048f94e57599ca4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=541387564483ee3a42a1969fd048f94e57599ca4", "patch": "@@ -1005,9 +1005,13 @@ dependencies = [\n name = \"ra_hir_def\"\n version = \"0.1.0\"\n dependencies = [\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\",\n+ \"ra_mbe 0.1.0\",\n+ \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n+ \"ra_tt 0.1.0\",\n ]\n \n [[package]]"}, {"sha": "a8fd695c0d2f2deff03b1ac9a38418eba20001cb", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 9, "deletions": 35, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=541387564483ee3a42a1969fd048f94e57599ca4", "patch": "@@ -3,7 +3,7 @@\n use std::sync::Arc;\n \n use ra_db::{salsa, SourceDatabase};\n-use ra_syntax::{ast, Parse, SmolStr, SyntaxNode};\n+use ra_syntax::{ast, SmolStr};\n \n use crate::{\n     adt::{EnumData, StructData},\n@@ -19,9 +19,13 @@ use crate::{\n         InferenceResult, Substs, Ty, TypableDef, TypeCtor,\n     },\n     type_alias::TypeAliasData,\n-    AstIdMap, Const, ConstData, Crate, DefWithBody, Enum, ErasedFileAstId, ExprScopes, FnData,\n-    Function, HirFileId, MacroCallLoc, MacroDefId, Module, Static, Struct, StructField, Trait,\n-    TypeAlias,\n+    Const, ConstData, Crate, DefWithBody, Enum, ExprScopes, FnData, Function, HirFileId, Module,\n+    Static, Struct, StructField, Trait, TypeAlias,\n+};\n+\n+pub use hir_def::db::{\n+    AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n+    ParseMacroQuery,\n };\n \n /// We store all interned things in the single QueryGroup.\n@@ -31,8 +35,6 @@ use crate::{\n /// two.\n #[salsa::query_group(InternDatabaseStorage)]\n pub trait InternDatabase: SourceDatabase {\n-    #[salsa::interned]\n-    fn intern_macro(&self, macro_call: MacroCallLoc) -> ids::MacroCallId;\n     #[salsa::interned]\n     fn intern_function(&self, loc: ids::ItemLoc<ast::FnDef>) -> ids::FunctionId;\n     #[salsa::interned]\n@@ -55,38 +57,10 @@ pub trait InternDatabase: SourceDatabase {\n     fn intern_impl(&self, impl_: Impl) -> ids::GlobalImplId;\n }\n \n-/// This database has access to source code, so queries here are not really\n-/// incremental.\n-#[salsa::query_group(AstDatabaseStorage)]\n-pub trait AstDatabase: InternDatabase {\n-    #[salsa::invoke(crate::source_id::ast_id_map_query)]\n-    fn ast_id_map(&self, file_id: HirFileId) -> Arc<AstIdMap>;\n-\n-    #[salsa::transparent]\n-    #[salsa::invoke(crate::source_id::file_item_query)]\n-    fn ast_id_to_node(&self, file_id: HirFileId, ast_id: ErasedFileAstId) -> SyntaxNode;\n-\n-    #[salsa::transparent]\n-    #[salsa::invoke(crate::ids::HirFileId::parse_or_expand_query)]\n-    fn parse_or_expand(&self, file_id: HirFileId) -> Option<SyntaxNode>;\n-\n-    #[salsa::invoke(crate::ids::HirFileId::parse_macro_query)]\n-    fn parse_macro(&self, macro_file: ids::MacroFile) -> Option<Parse<SyntaxNode>>;\n-\n-    #[salsa::invoke(crate::ids::macro_def_query)]\n-    fn macro_def(&self, macro_id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;\n-\n-    #[salsa::invoke(crate::ids::macro_arg_query)]\n-    fn macro_arg(&self, macro_call: ids::MacroCallId) -> Option<Arc<tt::Subtree>>;\n-\n-    #[salsa::invoke(crate::ids::macro_expand_query)]\n-    fn macro_expand(&self, macro_call: ids::MacroCallId) -> Result<Arc<tt::Subtree>, String>;\n-}\n-\n // This database uses `AstDatabase` internally,\n #[salsa::query_group(DefDatabaseStorage)]\n #[salsa::requires(AstDatabase)]\n-pub trait DefDatabase: InternDatabase + HirDebugDatabase {\n+pub trait DefDatabase: InternDatabase + HirDebugDatabase + AstDatabase {\n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]\n     fn struct_data(&self, s: Struct) -> Arc<StructData>;\n "}, {"sha": "c3f890ed4a1ae333a89164b298eca9a8d042cdbe", "filename": "crates/ra_hir/src/debug.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdebug.rs?ref=541387564483ee3a42a1969fd048f94e57599ca4", "patch": "@@ -36,11 +36,11 @@ impl Module {\n     }\n }\n \n-impl HirFileId {\n-    pub fn debug(self, db: &impl HirDebugDatabase) -> impl fmt::Debug + '_ {\n-        debug_fn(move |fmt| db.debug_hir_file_id(self, fmt))\n-    }\n-}\n+// impl HirFileId {\n+//     pub fn debug(self, db: &impl HirDebugDatabase) -> impl fmt::Debug + '_ {\n+//         debug_fn(move |fmt| db.debug_hir_file_id(self, fmt))\n+//     }\n+// }\n \n pub trait HirDebugHelper: HirDatabase {\n     fn crate_name(&self, _krate: CrateId) -> Option<String> {"}, {"sha": "9f85bb30d2ec90dcba711cd725ccf0b60aa86e54", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 16, "deletions": 190, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=541387564483ee3a42a1969fd048f94e57599ca4", "patch": "@@ -1,168 +1,23 @@\n-//! FIXME: write short doc here\n+//! hir makes heavy use of ids: integer (u32) handlers to various things. You\n+//! can think of id as a pointer (but without a lifetime) or a file descriptor\n+//! (but for hir objects).\n+//!\n+//! This module defines a bunch of ids we are using. The most important ones are\n+//! probably `HirFileId` and `DefId`.\n \n-use std::{\n-    hash::{Hash, Hasher},\n-    sync::Arc,\n-};\n+use std::hash::{Hash, Hasher};\n \n-use mbe::MacroRules;\n-use ra_db::{salsa, FileId};\n-use ra_prof::profile;\n-use ra_syntax::{ast, AstNode, Parse, SyntaxNode};\n+use ra_db::salsa;\n+use ra_syntax::{ast, AstNode};\n \n use crate::{\n     db::{AstDatabase, InternDatabase},\n-    AstId, Crate, FileAstId, Module, Source,\n+    AstId, FileAstId, Module, Source,\n };\n \n-/// hir makes heavy use of ids: integer (u32) handlers to various things. You\n-/// can think of id as a pointer (but without a lifetime) or a file descriptor\n-/// (but for hir objects).\n-///\n-/// This module defines a bunch of ids we are using. The most important ones are\n-/// probably `HirFileId` and `DefId`.\n-\n-/// Input to the analyzer is a set of files, where each file is identified by\n-/// `FileId` and contains source code. However, another source of source code in\n-/// Rust are macros: each macro can be thought of as producing a \"temporary\n-/// file\". To assign an id to such a file, we use the id of the macro call that\n-/// produced the file. So, a `HirFileId` is either a `FileId` (source code\n-/// written by user), or a `MacroCallId` (source code produced by macro).\n-///\n-/// What is a `MacroCallId`? Simplifying, it's a `HirFileId` of a file\n-/// containing the call plus the offset of the macro call in the file. Note that\n-/// this is a recursive definition! However, the size_of of `HirFileId` is\n-/// finite (because everything bottoms out at the real `FileId`) and small\n-/// (`MacroCallId` uses the location interner).\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct HirFileId(HirFileIdRepr);\n-\n-impl HirFileId {\n-    /// For macro-expansion files, returns the file original source file the\n-    /// expansion originated from.\n-    pub fn original_file(self, db: &impl InternDatabase) -> FileId {\n-        match self.0 {\n-            HirFileIdRepr::File(file_id) => file_id,\n-            HirFileIdRepr::Macro(macro_file) => {\n-                let loc = macro_file.macro_call_id.loc(db);\n-                loc.ast_id.file_id().original_file(db)\n-            }\n-        }\n-    }\n-\n-    /// Get the crate which the macro lives in, if it is a macro file.\n-    pub(crate) fn macro_crate(self, db: &impl AstDatabase) -> Option<Crate> {\n-        match self.0 {\n-            HirFileIdRepr::File(_) => None,\n-            HirFileIdRepr::Macro(macro_file) => {\n-                let loc = macro_file.macro_call_id.loc(db);\n-                Some(loc.def.krate)\n-            }\n-        }\n-    }\n-\n-    pub(crate) fn parse_or_expand_query(\n-        db: &impl AstDatabase,\n-        file_id: HirFileId,\n-    ) -> Option<SyntaxNode> {\n-        match file_id.0 {\n-            HirFileIdRepr::File(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n-            HirFileIdRepr::Macro(macro_file) => {\n-                db.parse_macro(macro_file).map(|it| it.syntax_node())\n-            }\n-        }\n-    }\n-\n-    pub(crate) fn parse_macro_query(\n-        db: &impl AstDatabase,\n-        macro_file: MacroFile,\n-    ) -> Option<Parse<SyntaxNode>> {\n-        let _p = profile(\"parse_macro_query\");\n-        let macro_call_id = macro_file.macro_call_id;\n-        let tt = db\n-            .macro_expand(macro_call_id)\n-            .map_err(|err| {\n-                // Note:\n-                // The final goal we would like to make all parse_macro success,\n-                // such that the following log will not call anyway.\n-                log::warn!(\"fail on macro_parse: (reason: {})\", err,);\n-            })\n-            .ok()?;\n-        match macro_file.macro_file_kind {\n-            MacroFileKind::Items => mbe::token_tree_to_items(&tt).ok().map(Parse::to_syntax),\n-            MacroFileKind::Expr => mbe::token_tree_to_expr(&tt).ok().map(Parse::to_syntax),\n-        }\n-    }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-enum HirFileIdRepr {\n-    File(FileId),\n-    Macro(MacroFile),\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroFile {\n-    macro_call_id: MacroCallId,\n-    macro_file_kind: MacroFileKind,\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) enum MacroFileKind {\n-    Items,\n-    Expr,\n-}\n-\n-impl From<FileId> for HirFileId {\n-    fn from(file_id: FileId) -> HirFileId {\n-        HirFileId(HirFileIdRepr::File(file_id))\n-    }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroDefId {\n-    pub(crate) ast_id: AstId<ast::MacroCall>,\n-    pub(crate) krate: Crate,\n-}\n-\n-pub(crate) fn macro_def_query(db: &impl AstDatabase, id: MacroDefId) -> Option<Arc<MacroRules>> {\n-    let macro_call = id.ast_id.to_node(db);\n-    let arg = macro_call.token_tree()?;\n-    let (tt, _) = mbe::ast_to_token_tree(&arg).or_else(|| {\n-        log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);\n-        None\n-    })?;\n-    let rules = MacroRules::parse(&tt).ok().or_else(|| {\n-        log::warn!(\"fail on macro_def parse: {:#?}\", tt);\n-        None\n-    })?;\n-    Some(Arc::new(rules))\n-}\n-\n-pub(crate) fn macro_arg_query(db: &impl AstDatabase, id: MacroCallId) -> Option<Arc<tt::Subtree>> {\n-    let loc = id.loc(db);\n-    let macro_call = loc.ast_id.to_node(db);\n-    let arg = macro_call.token_tree()?;\n-    let (tt, _) = mbe::ast_to_token_tree(&arg)?;\n-    Some(Arc::new(tt))\n-}\n-\n-pub(crate) fn macro_expand_query(\n-    db: &impl AstDatabase,\n-    id: MacroCallId,\n-) -> Result<Arc<tt::Subtree>, String> {\n-    let loc = id.loc(db);\n-    let macro_arg = db.macro_arg(id).ok_or(\"Fail to args in to tt::TokenTree\")?;\n-\n-    let macro_rules = db.macro_def(loc.def).ok_or(\"Fail to find macro definition\")?;\n-    let tt = macro_rules.expand(&macro_arg).map_err(|err| format!(\"{:?}\", err))?;\n-    // Set a hard limit for the expanded tt\n-    let count = tt.count();\n-    if count > 65536 {\n-        return Err(format!(\"Total tokens count exceed limit : count = {}\", count));\n-    }\n-    Ok(Arc::new(tt))\n-}\n+pub use hir_def::expand::{\n+    HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, MacroFileKind,\n+};\n \n macro_rules! impl_intern_key {\n     ($name:ident) => {\n@@ -177,35 +32,6 @@ macro_rules! impl_intern_key {\n     };\n }\n \n-/// `MacroCallId` identifies a particular macro invocation, like\n-/// `println!(\"Hello, {}\", world)`.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroCallId(salsa::InternId);\n-impl_intern_key!(MacroCallId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct MacroCallLoc {\n-    pub(crate) def: MacroDefId,\n-    pub(crate) ast_id: AstId<ast::MacroCall>,\n-}\n-\n-impl MacroCallId {\n-    pub(crate) fn loc(self, db: &impl InternDatabase) -> MacroCallLoc {\n-        db.lookup_intern_macro(self)\n-    }\n-\n-    pub(crate) fn as_file(self, kind: MacroFileKind) -> HirFileId {\n-        let macro_file = MacroFile { macro_call_id: self, macro_file_kind: kind };\n-        HirFileId(HirFileIdRepr::Macro(macro_file))\n-    }\n-}\n-\n-impl MacroCallLoc {\n-    pub(crate) fn id(self, db: &impl InternDatabase) -> MacroCallId {\n-        db.intern_macro(self)\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct ItemLoc<N: AstNode> {\n     pub(crate) module: Module,\n@@ -244,7 +70,7 @@ impl<'a, DB> LocationCtx<&'a DB> {\n     }\n }\n \n-impl<'a, DB: AstDatabase> LocationCtx<&'a DB> {\n+impl<'a, DB: AstDatabase + InternDatabase> LocationCtx<&'a DB> {\n     pub(crate) fn to_def<N, DEF>(self, ast: &N) -> DEF\n     where\n         N: AstNode,\n@@ -258,7 +84,7 @@ pub(crate) trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n     fn intern(db: &impl InternDatabase, loc: ItemLoc<N>) -> Self;\n     fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<N>;\n \n-    fn from_ast(ctx: LocationCtx<&impl AstDatabase>, ast: &N) -> Self {\n+    fn from_ast(ctx: LocationCtx<&(impl AstDatabase + InternDatabase)>, ast: &N) -> Self {\n         let items = ctx.db.ast_id_map(ctx.file_id);\n         let item_id = items.ast_id(ast);\n         Self::from_ast_id(ctx, item_id)\n@@ -267,7 +93,7 @@ pub(crate) trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n         let loc = ItemLoc { module: ctx.module, ast_id: AstId::new(ctx.file_id, ast_id) };\n         Self::intern(ctx.db, loc)\n     }\n-    fn source(self, db: &impl AstDatabase) -> Source<N> {\n+    fn source(self, db: &(impl AstDatabase + InternDatabase)) -> Source<N> {\n         let loc = self.lookup_intern(db);\n         let ast = loc.ast_id.to_node(db);\n         Source { file_id: loc.ast_id.file_id(), ast }"}, {"sha": "885ea57a1c569a474f9538edbae4dc95fbfea1fd", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=541387564483ee3a42a1969fd048f94e57599ca4", "patch": "@@ -676,7 +676,8 @@ where\n         // Case 1: macro rules, define a macro in crate-global mutable scope\n         if is_macro_rules(&mac.path) {\n             if let Some(name) = &mac.name {\n-                let macro_id = MacroDefId { ast_id, krate: self.def_collector.def_map.krate };\n+                let macro_id =\n+                    MacroDefId { ast_id, krate: self.def_collector.def_map.krate.crate_id };\n                 let macro_ = MacroDef { id: macro_id };\n                 self.def_collector.define_macro(self.module_id, name.clone(), macro_, mac.export);\n             }"}, {"sha": "bbe536bcb4a98a017b2a2812cf4f2c35d9e1582f", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=541387564483ee3a42a1969fd048f94e57599ca4", "patch": "@@ -66,7 +66,12 @@ impl Path {\n         mut cb: impl FnMut(Path, &ast::UseTree, bool, Option<Name>),\n     ) {\n         if let Some(tree) = item_src.ast.use_tree() {\n-            expand_use_tree(None, tree, &|| item_src.file_id.macro_crate(db), &mut cb);\n+            expand_use_tree(\n+                None,\n+                tree,\n+                &|| item_src.file_id.macro_crate(db).map(|crate_id| Crate { crate_id }),\n+                &mut cb,\n+            );\n         }\n     }\n \n@@ -90,7 +95,7 @@ impl Path {\n     /// It correctly handles `$crate` based path from macro call.\n     pub fn from_src(source: Source<ast::Path>, db: &impl AstDatabase) -> Option<Path> {\n         let file_id = source.file_id;\n-        Path::parse(source.ast, &|| file_id.macro_crate(db))\n+        Path::parse(source.ast, &|| file_id.macro_crate(db).map(|crate_id| Crate { crate_id }))\n     }\n \n     fn parse(mut path: ast::Path, macro_crate: &impl Fn() -> Option<Crate>) -> Option<Path> {"}, {"sha": "c70245949ba3e1b608664c8c370a5a20e9e88acf", "filename": "crates/ra_hir/src/source_id.rs", "status": "modified", "additions": 3, "deletions": 70, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_id.rs?ref=541387564483ee3a42a1969fd048f94e57599ca4", "patch": "@@ -1,73 +1,6 @@\n //! FIXME: write short doc here\n \n-use std::{\n-    hash::{Hash, Hasher},\n-    sync::Arc,\n+pub use hir_def::{\n+    ast_id_map::{AstIdMap, ErasedFileAstId, FileAstId},\n+    expand::AstId,\n };\n-\n-pub use hir_def::ast_id_map::{AstIdMap, ErasedFileAstId, FileAstId};\n-use ra_syntax::{AstNode, SyntaxNode};\n-\n-use crate::{db::AstDatabase, HirFileId};\n-\n-/// `AstId` points to an AST node in any file.\n-///\n-/// It is stable across reparses, and can be used as salsa key/value.\n-// FIXME: isn't this just a `Source<FileAstId<N>>` ?\n-#[derive(Debug)]\n-pub(crate) struct AstId<N: AstNode> {\n-    file_id: HirFileId,\n-    file_ast_id: FileAstId<N>,\n-}\n-\n-impl<N: AstNode> Clone for AstId<N> {\n-    fn clone(&self) -> AstId<N> {\n-        *self\n-    }\n-}\n-impl<N: AstNode> Copy for AstId<N> {}\n-\n-impl<N: AstNode> PartialEq for AstId<N> {\n-    fn eq(&self, other: &Self) -> bool {\n-        (self.file_id, self.file_ast_id) == (other.file_id, other.file_ast_id)\n-    }\n-}\n-impl<N: AstNode> Eq for AstId<N> {}\n-impl<N: AstNode> Hash for AstId<N> {\n-    fn hash<H: Hasher>(&self, hasher: &mut H) {\n-        (self.file_id, self.file_ast_id).hash(hasher);\n-    }\n-}\n-\n-impl<N: AstNode> AstId<N> {\n-    pub fn new(file_id: HirFileId, file_ast_id: FileAstId<N>) -> AstId<N> {\n-        AstId { file_id, file_ast_id }\n-    }\n-\n-    pub(crate) fn file_id(&self) -> HirFileId {\n-        self.file_id\n-    }\n-\n-    pub(crate) fn to_node(&self, db: &impl AstDatabase) -> N {\n-        let syntax_node = db.ast_id_to_node(self.file_id, self.file_ast_id.into());\n-        N::cast(syntax_node).unwrap()\n-    }\n-}\n-\n-pub(crate) fn ast_id_map_query(db: &impl AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n-    let map = if let Some(node) = db.parse_or_expand(file_id) {\n-        AstIdMap::from_source(&node)\n-    } else {\n-        AstIdMap::default()\n-    };\n-    Arc::new(map)\n-}\n-\n-pub(crate) fn file_item_query(\n-    db: &impl AstDatabase,\n-    file_id: HirFileId,\n-    ast_id: ErasedFileAstId,\n-) -> SyntaxNode {\n-    let node = db.parse_or_expand(file_id).unwrap();\n-    db.ast_id_map(file_id)[ast_id].to_node(&node)\n-}"}, {"sha": "049f8a4fc690f1fab06b21152fd7aecf48e2715b", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=541387564483ee3a42a1969fd048f94e57599ca4", "patch": "@@ -5,6 +5,11 @@ version = \"0.1.0\"\n authors = [\"rust-analyzer developers\"]\n \n [dependencies]\n+log = \"0.4.5\"\n+\n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }\n ra_syntax = { path = \"../ra_syntax\" }\n+ra_prof = { path = \"../ra_prof\" }\n+tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n+mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }"}, {"sha": "7133b61dba5de2dfc33857c8b79fa5c8ec907637", "filename": "crates/ra_hir_def/src/db.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=541387564483ee3a42a1969fd048f94e57599ca4", "patch": "@@ -0,0 +1,46 @@\n+use std::sync::Arc;\n+\n+use ra_db::{salsa, SourceDatabase};\n+use ra_syntax::{Parse, SyntaxNode};\n+\n+use crate::{\n+    ast_id_map::{AstIdMap, ErasedFileAstId},\n+    expand::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n+};\n+\n+#[salsa::query_group(AstDatabaseStorage)]\n+pub trait AstDatabase: SourceDatabase {\n+    fn ast_id_map(&self, file_id: HirFileId) -> Arc<AstIdMap>;\n+    #[salsa::transparent]\n+    fn ast_id_to_node(&self, file_id: HirFileId, ast_id: ErasedFileAstId) -> SyntaxNode;\n+\n+    #[salsa::transparent]\n+    #[salsa::invoke(crate::expand::parse_or_expand_query)]\n+    fn parse_or_expand(&self, file_id: HirFileId) -> Option<SyntaxNode>;\n+\n+    #[salsa::interned]\n+    fn intern_macro(&self, macro_call: MacroCallLoc) -> MacroCallId;\n+    #[salsa::invoke(crate::expand::macro_arg_query)]\n+    fn macro_arg(&self, id: MacroCallId) -> Option<Arc<tt::Subtree>>;\n+    #[salsa::invoke(crate::expand::macro_def_query)]\n+    fn macro_def(&self, id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;\n+    #[salsa::invoke(crate::expand::parse_macro_query)]\n+    fn parse_macro(&self, macro_file: MacroFile) -> Option<Parse<SyntaxNode>>;\n+    #[salsa::invoke(crate::expand::macro_expand_query)]\n+    fn macro_expand(&self, macro_call: MacroCallId) -> Result<Arc<tt::Subtree>, String>;\n+}\n+\n+pub(crate) fn ast_id_map(db: &impl AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n+    let map =\n+        db.parse_or_expand(file_id).map_or_else(AstIdMap::default, |it| AstIdMap::from_source(&it));\n+    Arc::new(map)\n+}\n+\n+pub(crate) fn ast_id_to_node(\n+    db: &impl AstDatabase,\n+    file_id: HirFileId,\n+    ast_id: ErasedFileAstId,\n+) -> SyntaxNode {\n+    let node = db.parse_or_expand(file_id).unwrap();\n+    db.ast_id_map(file_id)[ast_id].to_node(&node)\n+}"}, {"sha": "6517ea84da70e5e574d6640163edd8f92e03e1d6", "filename": "crates/ra_hir_def/src/expand.rs", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir_def%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir_def%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpand.rs?ref=541387564483ee3a42a1969fd048f94e57599ca4", "patch": "@@ -0,0 +1,243 @@\n+use std::{\n+    hash::{Hash, Hasher},\n+    sync::Arc,\n+};\n+\n+use mbe::MacroRules;\n+use ra_db::{salsa, CrateId, FileId};\n+use ra_prof::profile;\n+use ra_syntax::{\n+    ast::{self, AstNode},\n+    Parse, SyntaxNode,\n+};\n+\n+use crate::{ast_id_map::FileAstId, db::AstDatabase};\n+\n+macro_rules! impl_intern_key {\n+    ($name:ident) => {\n+        impl salsa::InternKey for $name {\n+            fn from_intern_id(v: salsa::InternId) -> Self {\n+                $name(v)\n+            }\n+            fn as_intern_id(&self) -> salsa::InternId {\n+                self.0\n+            }\n+        }\n+    };\n+}\n+\n+/// Input to the analyzer is a set of files, where each file is identified by\n+/// `FileId` and contains source code. However, another source of source code in\n+/// Rust are macros: each macro can be thought of as producing a \"temporary\n+/// file\". To assign an id to such a file, we use the id of the macro call that\n+/// produced the file. So, a `HirFileId` is either a `FileId` (source code\n+/// written by user), or a `MacroCallId` (source code produced by macro).\n+///\n+/// What is a `MacroCallId`? Simplifying, it's a `HirFileId` of a file\n+/// containing the call plus the offset of the macro call in the file. Note that\n+/// this is a recursive definition! However, the size_of of `HirFileId` is\n+/// finite (because everything bottoms out at the real `FileId`) and small\n+/// (`MacroCallId` uses the location interner).\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum HirFileId {\n+    FileId(FileId),\n+    MacroFile(MacroFile),\n+}\n+\n+impl From<FileId> for HirFileId {\n+    fn from(id: FileId) -> Self {\n+        HirFileId::FileId(id)\n+    }\n+}\n+\n+impl From<MacroFile> for HirFileId {\n+    fn from(id: MacroFile) -> Self {\n+        HirFileId::MacroFile(id)\n+    }\n+}\n+\n+impl HirFileId {\n+    /// For macro-expansion files, returns the file original source file the\n+    /// expansion originated from.\n+    pub fn original_file(self, db: &impl AstDatabase) -> FileId {\n+        match self {\n+            HirFileId::FileId(file_id) => file_id,\n+            HirFileId::MacroFile(macro_file) => {\n+                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                loc.ast_id.file_id().original_file(db)\n+            }\n+        }\n+    }\n+\n+    /// Get the crate which the macro lives in, if it is a macro file.\n+    pub fn macro_crate(self, db: &impl AstDatabase) -> Option<CrateId> {\n+        match self {\n+            HirFileId::FileId(_) => None,\n+            HirFileId::MacroFile(macro_file) => {\n+                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                Some(loc.def.krate)\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroFile {\n+    macro_call_id: MacroCallId,\n+    macro_file_kind: MacroFileKind,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum MacroFileKind {\n+    Items,\n+    Expr,\n+}\n+\n+/// `MacroCallId` identifies a particular macro invocation, like\n+/// `println!(\"Hello, {}\", world)`.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroCallId(salsa::InternId);\n+impl_intern_key!(MacroCallId);\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroDefId {\n+    pub krate: CrateId,\n+    pub ast_id: AstId<ast::MacroCall>,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct MacroCallLoc {\n+    pub def: MacroDefId,\n+    pub ast_id: AstId<ast::MacroCall>,\n+}\n+\n+impl MacroCallId {\n+    pub fn loc(self, db: &impl AstDatabase) -> MacroCallLoc {\n+        db.lookup_intern_macro(self)\n+    }\n+\n+    pub fn as_file(self, kind: MacroFileKind) -> HirFileId {\n+        let macro_file = MacroFile { macro_call_id: self, macro_file_kind: kind };\n+        macro_file.into()\n+    }\n+}\n+\n+impl MacroCallLoc {\n+    pub fn id(self, db: &impl AstDatabase) -> MacroCallId {\n+        db.intern_macro(self)\n+    }\n+}\n+\n+/// `AstId` points to an AST node in any file.\n+///\n+/// It is stable across reparses, and can be used as salsa key/value.\n+// FIXME: isn't this just a `Source<FileAstId<N>>` ?\n+#[derive(Debug)]\n+pub struct AstId<N: AstNode> {\n+    file_id: HirFileId,\n+    file_ast_id: FileAstId<N>,\n+}\n+\n+impl<N: AstNode> Clone for AstId<N> {\n+    fn clone(&self) -> AstId<N> {\n+        *self\n+    }\n+}\n+impl<N: AstNode> Copy for AstId<N> {}\n+\n+impl<N: AstNode> PartialEq for AstId<N> {\n+    fn eq(&self, other: &Self) -> bool {\n+        (self.file_id, self.file_ast_id) == (other.file_id, other.file_ast_id)\n+    }\n+}\n+impl<N: AstNode> Eq for AstId<N> {}\n+impl<N: AstNode> Hash for AstId<N> {\n+    fn hash<H: Hasher>(&self, hasher: &mut H) {\n+        (self.file_id, self.file_ast_id).hash(hasher);\n+    }\n+}\n+\n+impl<N: AstNode> AstId<N> {\n+    pub fn new(file_id: HirFileId, file_ast_id: FileAstId<N>) -> AstId<N> {\n+        AstId { file_id, file_ast_id }\n+    }\n+\n+    pub fn file_id(&self) -> HirFileId {\n+        self.file_id\n+    }\n+\n+    pub fn to_node(&self, db: &impl AstDatabase) -> N {\n+        let syntax_node = db.ast_id_to_node(self.file_id, self.file_ast_id.into());\n+        N::cast(syntax_node).unwrap()\n+    }\n+}\n+\n+pub(crate) fn macro_def_query(db: &impl AstDatabase, id: MacroDefId) -> Option<Arc<MacroRules>> {\n+    let macro_call = id.ast_id.to_node(db);\n+    let arg = macro_call.token_tree()?;\n+    let (tt, _) = mbe::ast_to_token_tree(&arg).or_else(|| {\n+        log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);\n+        None\n+    })?;\n+    let rules = MacroRules::parse(&tt).ok().or_else(|| {\n+        log::warn!(\"fail on macro_def parse: {:#?}\", tt);\n+        None\n+    })?;\n+    Some(Arc::new(rules))\n+}\n+\n+pub(crate) fn macro_arg_query(db: &impl AstDatabase, id: MacroCallId) -> Option<Arc<tt::Subtree>> {\n+    let loc = db.lookup_intern_macro(id);\n+    let macro_call = loc.ast_id.to_node(db);\n+    let arg = macro_call.token_tree()?;\n+    let (tt, _) = mbe::ast_to_token_tree(&arg)?;\n+    Some(Arc::new(tt))\n+}\n+\n+pub(crate) fn macro_expand_query(\n+    db: &impl AstDatabase,\n+    id: MacroCallId,\n+) -> Result<Arc<tt::Subtree>, String> {\n+    let loc = db.lookup_intern_macro(id);\n+    let macro_arg = db.macro_arg(id).ok_or(\"Fail to args in to tt::TokenTree\")?;\n+\n+    let macro_rules = db.macro_def(loc.def).ok_or(\"Fail to find macro definition\")?;\n+    let tt = macro_rules.expand(&macro_arg).map_err(|err| format!(\"{:?}\", err))?;\n+    // Set a hard limit for the expanded tt\n+    let count = tt.count();\n+    if count > 65536 {\n+        return Err(format!(\"Total tokens count exceed limit : count = {}\", count));\n+    }\n+    Ok(Arc::new(tt))\n+}\n+\n+pub(crate) fn parse_or_expand_query(\n+    db: &impl AstDatabase,\n+    file_id: HirFileId,\n+) -> Option<SyntaxNode> {\n+    match file_id {\n+        HirFileId::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n+        HirFileId::MacroFile(macro_file) => db.parse_macro(macro_file).map(|it| it.syntax_node()),\n+    }\n+}\n+\n+pub(crate) fn parse_macro_query(\n+    db: &impl AstDatabase,\n+    macro_file: MacroFile,\n+) -> Option<Parse<SyntaxNode>> {\n+    let _p = profile(\"parse_macro_query\");\n+    let macro_call_id = macro_file.macro_call_id;\n+    let tt = db\n+        .macro_expand(macro_call_id)\n+        .map_err(|err| {\n+            // Note:\n+            // The final goal we would like to make all parse_macro success,\n+            // such that the following log will not call anyway.\n+            log::warn!(\"fail on macro_parse: (reason: {})\", err,);\n+        })\n+        .ok()?;\n+    match macro_file.macro_file_kind {\n+        MacroFileKind::Items => mbe::token_tree_to_items(&tt).ok().map(Parse::to_syntax),\n+        MacroFileKind::Expr => mbe::token_tree_to_expr(&tt).ok().map(Parse::to_syntax),\n+    }\n+}"}, {"sha": "6ccb1106812742eca99d54c036fd0f3107ed2f6c", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541387564483ee3a42a1969fd048f94e57599ca4/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=541387564483ee3a42a1969fd048f94e57599ca4", "patch": "@@ -4,4 +4,8 @@\n //! Note that we are in the process of moving parts of `ra_hir` into\n //! `ra_hir_def`, so this crates doesn't contain a lot at the moment.\n \n+pub mod db;\n+\n pub mod ast_id_map;\n+\n+pub mod expand;"}]}