{"sha": "a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871", "node_id": "C_kwDOAAsO6NoAKGE4ZTg2MmNiN2Q0ZmQzY2U0ZTcxY2EyN2NkZWY4NDEwMWRmYzE4NzE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-26T05:38:10Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-26T22:25:22Z"}, "message": "Avoid producing `NoDelim` values in `Frame`.\n\nThe code currently ignores the actual delimiter on the RHS and fakes up\na `NoDelim`/`DelimSpan::dummy()` one. This commit changes it to use the\nactual delimiter.\n\nThe commit also reorders the fields for the `Delimited` variant to match\nthe `Sequence` variant.", "tree": {"sha": "6f89a9181b32a8fb880f58d9a3cc78a7864eabce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f89a9181b32a8fb880f58d9a3cc78a7864eabce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871", "html_url": "https://github.com/rust-lang/rust/commit/a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b367a05320f2792414281075a4e98452b412a82", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b367a05320f2792414281075a4e98452b412a82", "html_url": "https://github.com/rust-lang/rust/commit/6b367a05320f2792414281075a4e98452b412a82"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "f3dcdbf93c5f14af8eb472de9f46fc983b1f535f", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871", "patch": "@@ -260,16 +260,15 @@ fn generic_extension<'cx, 'tt>(\n                 // Merge the gated spans from parsing the matcher with the pre-existing ones.\n                 sess.gated_spans.merge(gated_spans_snapshot);\n \n-                // Ignore the delimiters on the RHS.\n-                let rhs = match &rhses[i] {\n-                    mbe::TokenTree::Delimited(_, delimited) => &delimited.tts,\n+                let (rhs, rhs_span): (&mbe::Delimited, DelimSpan) = match &rhses[i] {\n+                    mbe::TokenTree::Delimited(span, delimited) => (&delimited, *span),\n                     _ => cx.span_bug(sp, \"malformed macro rhs\"),\n                 };\n                 let arm_span = rhses[i].span();\n \n-                let rhs_spans = rhs.iter().map(|t| t.span()).collect::<Vec<_>>();\n+                let rhs_spans = rhs.tts.iter().map(|t| t.span()).collect::<Vec<_>>();\n                 // rhs has holes ( `$id` and `$(...)` that need filled)\n-                let mut tts = match transcribe(cx, &named_matches, &rhs, transparency) {\n+                let mut tts = match transcribe(cx, &named_matches, &rhs, rhs_span, transparency) {\n                     Ok(tts) => tts,\n                     Err(mut err) => {\n                         err.emit();"}, {"sha": "d5b1913e1440cb7138fc51d840a29f0bbe26ec8f", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871", "patch": "@@ -29,8 +29,8 @@ impl MutVisitor for Marker {\n enum Frame<'a> {\n     Delimited {\n         tts: &'a [mbe::TokenTree],\n-        delim_token: token::DelimToken,\n         idx: usize,\n+        delim_token: token::DelimToken,\n         span: DelimSpan,\n     },\n     Sequence {\n@@ -42,8 +42,8 @@ enum Frame<'a> {\n \n impl<'a> Frame<'a> {\n     /// Construct a new frame around the delimited set of tokens.\n-    fn new(tts: &'a [mbe::TokenTree]) -> Frame<'a> {\n-        Frame::Delimited { tts, delim_token: token::NoDelim, idx: 0, span: DelimSpan::dummy() }\n+    fn new(src: &'a mbe::Delimited, span: DelimSpan) -> Frame<'a> {\n+        Frame::Delimited { tts: &src.tts, idx: 0, delim_token: src.delim, span }\n     }\n }\n \n@@ -85,17 +85,18 @@ impl<'a> Iterator for Frame<'a> {\n pub(super) fn transcribe<'a>(\n     cx: &ExtCtxt<'a>,\n     interp: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,\n-    src: &[mbe::TokenTree],\n+    src: &mbe::Delimited,\n+    src_span: DelimSpan,\n     transparency: Transparency,\n ) -> PResult<'a, TokenStream> {\n     // Nothing for us to transcribe...\n-    if src.is_empty() {\n+    if src.tts.is_empty() {\n         return Ok(TokenStream::default());\n     }\n \n     // We descend into the RHS (`src`), expanding things as we go. This stack contains the things\n     // we have yet to expand/are still expanding. We start the stack off with the whole RHS.\n-    let mut stack: SmallVec<[Frame<'_>; 1]> = smallvec![Frame::new(&src)];\n+    let mut stack: SmallVec<[Frame<'_>; 1]> = smallvec![Frame::new(&src, src_span)];\n \n     // As we descend in the RHS, we will need to be able to match nested sequences of matchers.\n     // `repeats` keeps track of where we are in matching at each level, with the last element being"}]}