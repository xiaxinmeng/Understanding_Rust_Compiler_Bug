{"sha": "97ca8d799c2b6e6a4ce1b55b7d6e28526d3f23d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3Y2E4ZDc5OWMyYjZlNmE0Y2UxYjU1YjdkNmUyODUyNmQzZjIzZDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-21T09:14:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-17T20:27:23Z"}, "message": "fix -Z treat-err-as-bug", "tree": {"sha": "8cd5eae425a631ad5bb56575f3cbc43f4d793d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cd5eae425a631ad5bb56575f3cbc43f4d793d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97ca8d799c2b6e6a4ce1b55b7d6e28526d3f23d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97ca8d799c2b6e6a4ce1b55b7d6e28526d3f23d5", "html_url": "https://github.com/rust-lang/rust/commit/97ca8d799c2b6e6a4ce1b55b7d6e28526d3f23d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97ca8d799c2b6e6a4ce1b55b7d6e28526d3f23d5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df5c62bed2afed6c0f1b64d04bdf4465db6f46ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/df5c62bed2afed6c0f1b64d04bdf4465db6f46ee", "html_url": "https://github.com/rust-lang/rust/commit/df5c62bed2afed6c0f1b64d04bdf4465db6f46ee"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "2ca61ba76d47c6ffef87689bbebd4593c44c09d2", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/97ca8d799c2b6e6a4ce1b55b7d6e28526d3f23d5/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ca8d799c2b6e6a4ce1b55b7d6e28526d3f23d5/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=97ca8d799c2b6e6a4ce1b55b7d6e28526d3f23d5", "patch": "@@ -180,7 +180,7 @@ impl error::Error for ExplicitBug {\n #[must_use]\n #[derive(Clone)]\n pub struct DiagnosticBuilder<'a> {\n-    emitter: &'a RefCell<Box<Emitter>>,\n+    handler: &'a Handler,\n     level: Level,\n     message: String,\n     code: Option<String>,\n@@ -204,8 +204,9 @@ impl<'a> DiagnosticBuilder<'a> {\n             return;\n         }\n \n-        self.emitter.borrow_mut().emit_struct(&self);\n+        self.handler.emit.borrow_mut().emit_struct(&self);\n         self.cancel();\n+        self.handler.panic_if_treat_err_as_bug();\n \n         // if self.is_fatal() {\n         //     panic!(FatalError);\n@@ -321,11 +322,11 @@ impl<'a> DiagnosticBuilder<'a> {\n \n     /// Convenience function for internal use, clients should use one of the\n     /// struct_* methods on Handler.\n-    fn new(emitter: &'a RefCell<Box<Emitter>>,\n+    fn new(handler: &'a Handler,\n            level: Level,\n            message: &str) -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder {\n-            emitter: emitter,\n+            handler: handler,\n             level: level,\n             message: message.to_owned(),\n             code: None,\n@@ -362,10 +363,10 @@ impl<'a> fmt::Debug for DiagnosticBuilder<'a> {\n impl<'a> Drop for DiagnosticBuilder<'a> {\n     fn drop(&mut self) {\n         if !panicking() && !self.cancelled() {\n-            self.emitter.borrow_mut().emit(&MultiSpan::new(),\n-                                           \"Error constructed but not emitted\",\n-                                           None,\n-                                           Bug);\n+            self.handler.emit.borrow_mut().emit(&MultiSpan::new(),\n+                                                \"Error constructed but not emitted\",\n+                                                None,\n+                                                Bug);\n             panic!();\n         }\n     }\n@@ -412,14 +413,14 @@ impl Handler {\n     }\n \n     pub fn struct_dummy<'a>(&'a self) -> DiagnosticBuilder<'a> {\n-        DiagnosticBuilder::new(&self.emit, Level::Cancelled, \"\")\n+        DiagnosticBuilder::new(self, Level::Cancelled, \"\")\n     }\n \n     pub fn struct_span_warn<'a, S: Into<MultiSpan>>(&'a self,\n                                                     sp: S,\n                                                     msg: &str)\n                                                     -> DiagnosticBuilder<'a> {\n-        let mut result = DiagnosticBuilder::new(&self.emit, Level::Warning, msg);\n+        let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n         if !self.can_emit_warnings {\n             result.cancel();\n@@ -431,7 +432,7 @@ impl Handler {\n                                                               msg: &str,\n                                                               code: &str)\n                                                               -> DiagnosticBuilder<'a> {\n-        let mut result = DiagnosticBuilder::new(&self.emit, Level::Warning, msg);\n+        let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n         result.code(code.to_owned());\n         if !self.can_emit_warnings {\n@@ -440,7 +441,7 @@ impl Handler {\n         result\n     }\n     pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n-        let mut result = DiagnosticBuilder::new(&self.emit, Level::Warning, msg);\n+        let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         if !self.can_emit_warnings {\n             result.cancel();\n         }\n@@ -451,7 +452,7 @@ impl Handler {\n                                                    msg: &str)\n                                                    -> DiagnosticBuilder<'a> {\n         self.bump_err_count();\n-        let mut result = DiagnosticBuilder::new(&self.emit, Level::Error, msg);\n+        let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result\n     }\n@@ -461,21 +462,21 @@ impl Handler {\n                                                              code: &str)\n                                                              -> DiagnosticBuilder<'a> {\n         self.bump_err_count();\n-        let mut result = DiagnosticBuilder::new(&self.emit, Level::Error, msg);\n+        let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result.code(code.to_owned());\n         result\n     }\n     pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n         self.bump_err_count();\n-        DiagnosticBuilder::new(&self.emit, Level::Error, msg)\n+        DiagnosticBuilder::new(self, Level::Error, msg)\n     }\n     pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(&'a self,\n                                                      sp: S,\n                                                      msg: &str)\n                                                      -> DiagnosticBuilder<'a> {\n         self.bump_err_count();\n-        let mut result = DiagnosticBuilder::new(&self.emit, Level::Fatal, msg);\n+        let mut result = DiagnosticBuilder::new(self, Level::Fatal, msg);\n         result.set_span(sp);\n         result\n     }\n@@ -485,14 +486,14 @@ impl Handler {\n                                                                code: &str)\n                                                                -> DiagnosticBuilder<'a> {\n         self.bump_err_count();\n-        let mut result = DiagnosticBuilder::new(&self.emit, Level::Fatal, msg);\n+        let mut result = DiagnosticBuilder::new(self, Level::Fatal, msg);\n         result.set_span(sp);\n         result.code(code.to_owned());\n         result\n     }\n     pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n         self.bump_err_count();\n-        DiagnosticBuilder::new(&self.emit, Level::Fatal, msg)\n+        DiagnosticBuilder::new(self, Level::Fatal, msg)\n     }\n \n     pub fn cancel(&mut self, err: &mut DiagnosticBuilder) {\n@@ -503,36 +504,35 @@ impl Handler {\n         err.cancel();\n     }\n \n-    pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> FatalError {\n+    fn panic_if_treat_err_as_bug(&self) {\n         if self.treat_err_as_bug {\n-            self.span_bug(sp, msg);\n+            panic!(\"encountered error with `-Z treat_err_as_bug\");\n         }\n+    }\n+\n+    pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str)\n+                                          -> FatalError {\n         self.emit(&sp.into(), msg, Fatal);\n         self.bump_err_count();\n+        self.panic_if_treat_err_as_bug();\n         return FatalError;\n     }\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str)\n-    -> FatalError {\n-        if self.treat_err_as_bug {\n-            self.span_bug(sp, msg);\n-        }\n+                                                    -> FatalError {\n         self.emit_with_code(&sp.into(), msg, code, Fatal);\n         self.bump_err_count();\n+        self.panic_if_treat_err_as_bug();\n         return FatalError;\n     }\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        if self.treat_err_as_bug {\n-            self.span_bug(sp, msg);\n-        }\n         self.emit(&sp.into(), msg, Error);\n         self.bump_err_count();\n+        self.panic_if_treat_err_as_bug();\n     }\n     pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) {\n-        if self.treat_err_as_bug {\n-            self.span_bug(sp, msg);\n-        }\n         self.emit_with_code(&sp.into(), msg, code, Error);\n         self.bump_err_count();\n+        self.panic_if_treat_err_as_bug();\n     }\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Warning);"}]}