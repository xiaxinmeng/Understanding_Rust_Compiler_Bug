{"sha": "0adf9e046bfa2739784c4269a6191ae6e0958ef6", "node_id": "C_kwDOAAsO6NoAKDBhZGY5ZTA0NmJmYTI3Mzk3ODRjNDI2OWE2MTkxYWU2ZTA5NThlZjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-22T10:03:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-22T10:03:49Z"}, "message": "Rollup merge of #104741 - bryangarza:bug-104588-async-track-caller, r=compiler-errors\n\nSwitch `#[track_caller]` back to a no-op unless feature gate is enabled\n\nThis patch fixes a regression, in which `#[track_caller]`, which was previously a no-op, was changed to actually turn on the behavior. This should instead only happen behind the `closure_track_caller` feature gate.\n\nAlso, add a warning for the user to understand how their code will compile depending on the feature gate being turned on or not.\n\nFixes #104588", "tree": {"sha": "a028bf0c1794ec12c1becf853a693c47044f4edf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a028bf0c1794ec12c1becf853a693c47044f4edf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0adf9e046bfa2739784c4269a6191ae6e0958ef6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjpCuFCRBK7hj4Ov3rIwAANkMIAKL9VArKZtDTBL5p6TAPDoKU\nHiqHvetMXA8NdvokSX+Qck0Z5pSAo4cLHU6ZiZ/lq7KpEFF1azQRn8c9cVQUSffv\nIPeAg7EGs9aX4qxBgELkygx5WmViTvMApZ8SKW47pcmPrLgE5Lil94XqZspkkZ/n\nxWviRGPncFjEugSoS7/xROuSNKjgIV/SlJbDNIsSB1IWUxhOIPUscqyBWN0M40zU\njMq++Cp6IlTDsDehadKIsiuxIyyrTYnqwYs9uusl/Ue9MgQRhISzcggiefgk9YWG\nZYApvhJ33e/1mbOdPMcjux/WY1Z43+6E3JxBL2+xRsxqJU4qBFTgtwq5ttV6eGQ=\n=Wc3w\n-----END PGP SIGNATURE-----\n", "payload": "tree a028bf0c1794ec12c1becf853a693c47044f4edf\nparent 75f4ee8b4427278d7a35b7025ea72e02c55ae8f1\nparent ccbba0a60e3b094aeb48991cac9b6e342eb3e229\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671703429 +0100\ncommitter GitHub <noreply@github.com> 1671703429 +0100\n\nRollup merge of #104741 - bryangarza:bug-104588-async-track-caller, r=compiler-errors\n\nSwitch `#[track_caller]` back to a no-op unless feature gate is enabled\n\nThis patch fixes a regression, in which `#[track_caller]`, which was previously a no-op, was changed to actually turn on the behavior. This should instead only happen behind the `closure_track_caller` feature gate.\n\nAlso, add a warning for the user to understand how their code will compile depending on the feature gate being turned on or not.\n\nFixes #104588\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0adf9e046bfa2739784c4269a6191ae6e0958ef6", "html_url": "https://github.com/rust-lang/rust/commit/0adf9e046bfa2739784c4269a6191ae6e0958ef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0adf9e046bfa2739784c4269a6191ae6e0958ef6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75f4ee8b4427278d7a35b7025ea72e02c55ae8f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/75f4ee8b4427278d7a35b7025ea72e02c55ae8f1", "html_url": "https://github.com/rust-lang/rust/commit/75f4ee8b4427278d7a35b7025ea72e02c55ae8f1"}, {"sha": "ccbba0a60e3b094aeb48991cac9b6e342eb3e229", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccbba0a60e3b094aeb48991cac9b6e342eb3e229", "html_url": "https://github.com/rust-lang/rust/commit/ccbba0a60e3b094aeb48991cac9b6e342eb3e229"}], "stats": {"total": 168, "additions": 134, "deletions": 34}, "files": [{"sha": "3634e6e47ce12e220d3b64f2fa4e6be9eb8b004d", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0adf9e046bfa2739784c4269a6191ae6e0958ef6/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adf9e046bfa2739784c4269a6191ae6e0958ef6/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=0adf9e046bfa2739784c4269a6191ae6e0958ef6", "patch": "@@ -656,18 +656,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             hir::ExprKind::Closure(c)\n         };\n \n-        let track_caller = self\n-            .attrs\n-            .get(&outer_hir_id.local_id)\n-            .map_or(false, |attrs| attrs.into_iter().any(|attr| attr.has_name(sym::track_caller)));\n-\n         let hir_id = self.lower_node_id(closure_node_id);\n-        if track_caller {\n-            let unstable_span = self.mark_span_with_reason(\n-                DesugaringKind::Async,\n-                span,\n-                self.allow_gen_future.clone(),\n-            );\n+        let unstable_span =\n+            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n+\n+        if self.tcx.features().closure_track_caller\n+            && let Some(attrs) = self.attrs.get(&outer_hir_id.local_id)\n+            && attrs.into_iter().any(|attr| attr.has_name(sym::track_caller))\n+        {\n             self.lower_attrs(\n                 hir_id,\n                 &[Attribute {"}, {"sha": "2eb409a5ddd5e12297262ade97e6bb20ce48dd06", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0adf9e046bfa2739784c4269a6191ae6e0958ef6/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0adf9e046bfa2739784c4269a6191ae6e0958ef6/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=0adf9e046bfa2739784c4269a6191ae6e0958ef6", "patch": "@@ -350,6 +350,9 @@ lint_builtin_mutable_transmutes =\n \n lint_builtin_unstable_features = unstable feature\n \n+lint_ungated_async_fn_track_caller = `#[track_caller]` on async functions is a no-op\n+     .label = this function will not propagate the caller location\n+\n lint_builtin_unreachable_pub = unreachable `pub` {$what}\n     .suggestion = consider restricting its visibility\n     .help = or consider exporting it for use by other crates"}, {"sha": "d6de6e70ead808a888d8a56a611a424c3f36e2f4", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0adf9e046bfa2739784c4269a6191ae6e0958ef6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adf9e046bfa2739784c4269a6191ae6e0958ef6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=0adf9e046bfa2739784c4269a6191ae6e0958ef6", "patch": "@@ -25,6 +25,7 @@ use crate::{\n     types::{transparent_newtype_field, CItemKind},\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext,\n };\n+use hir::IsAsync;\n use rustc_ast::attr;\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_ast::visit::{FnCtxt, FnKind};\n@@ -40,7 +41,10 @@ use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, Gate\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LocalDefIdSet, CRATE_DEF_ID};\n-use rustc_hir::{ForeignItemKind, GenericParamKind, HirId, Node, PatKind, PredicateOrigin};\n+use rustc_hir::intravisit::FnKind as HirFnKind;\n+use rustc_hir::{\n+    Body, FnDecl, ForeignItemKind, GenericParamKind, HirId, Node, PatKind, PredicateOrigin,\n+};\n use rustc_index::vec::Idx;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::layout::{LayoutError, LayoutOf};\n@@ -1370,6 +1374,72 @@ impl<'tcx> LateLintPass<'tcx> for UnstableFeatures {\n     }\n }\n \n+declare_lint! {\n+    /// The `ungated_async_fn_track_caller` lint warns when the\n+    /// `#[track_caller]` attribute is used on an async function, method, or\n+    /// closure, without enabling the corresponding unstable feature flag.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #[track_caller]\n+    /// async fn foo() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The attribute must be used in conjunction with the\n+    /// [`closure_track_caller` feature flag]. Otherwise, the `#[track_caller]`\n+    /// annotation will function as as no-op.\n+    ///\n+    /// [`closure_track_caller` feature flag]: https://doc.rust-lang.org/beta/unstable-book/language-features/closure-track-caller.html\n+    UNGATED_ASYNC_FN_TRACK_CALLER,\n+    Warn,\n+    \"enabling track_caller on an async fn is a no-op unless the closure_track_caller feature is enabled\"\n+}\n+\n+declare_lint_pass!(\n+    /// Explains corresponding feature flag must be enabled for the `#[track_caller] attribute to\n+    /// do anything\n+    UngatedAsyncFnTrackCaller => [UNGATED_ASYNC_FN_TRACK_CALLER]\n+);\n+\n+impl<'tcx> LateLintPass<'tcx> for UngatedAsyncFnTrackCaller {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'_>,\n+        fn_kind: HirFnKind<'_>,\n+        _: &'tcx FnDecl<'_>,\n+        _: &'tcx Body<'_>,\n+        span: Span,\n+        hir_id: HirId,\n+    ) {\n+        if fn_kind.asyncness() == IsAsync::Async\n+            && !cx.tcx.features().closure_track_caller\n+            && let attrs = cx.tcx.hir().attrs(hir_id)\n+            // Now, check if the function has the `#[track_caller]` attribute\n+            && let Some(attr) = attrs.iter().find(|attr| attr.has_name(sym::track_caller))\n+            {\n+                cx.struct_span_lint(\n+                    UNGATED_ASYNC_FN_TRACK_CALLER,\n+                    attr.span,\n+                    fluent::lint_ungated_async_fn_track_caller,\n+                    |lint| {\n+                        lint.span_label(span, fluent::label);\n+                        rustc_session::parse::add_feature_diagnostics(\n+                            lint,\n+                            &cx.tcx.sess.parse_sess,\n+                            sym::closure_track_caller,\n+                        );\n+                        lint\n+                    },\n+                );\n+            }\n+    }\n+}\n+\n declare_lint! {\n     /// The `unreachable_pub` lint triggers for `pub` items not reachable from\n     /// the crate root."}, {"sha": "1275d6f223c7a38ebe5fbfd42cc50c04c4990149", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0adf9e046bfa2739784c4269a6191ae6e0958ef6/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adf9e046bfa2739784c4269a6191ae6e0958ef6/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=0adf9e046bfa2739784c4269a6191ae6e0958ef6", "patch": "@@ -219,6 +219,7 @@ late_lint_methods!(\n             // May Depend on constants elsewhere\n             UnusedBrokenConst: UnusedBrokenConst,\n             UnstableFeatures: UnstableFeatures,\n+            UngatedAsyncFnTrackCaller: UngatedAsyncFnTrackCaller,\n             ArrayIntoIter: ArrayIntoIter::default(),\n             DropTraitConstraints: DropTraitConstraints,\n             TemporaryCStringAsPtr: TemporaryCStringAsPtr,"}, {"sha": "d9d556855991b881b5d8b4237263e947d5cdbd13", "filename": "src/test/ui/async-await/track-caller/async-closure-gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0adf9e046bfa2739784c4269a6191ae6e0958ef6/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adf9e046bfa2739784c4269a6191ae6e0958ef6/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.rs?ref=0adf9e046bfa2739784c4269a6191ae6e0958ef6", "patch": "@@ -5,6 +5,5 @@\n fn main() {\n     let _ = #[track_caller] async || {\n         //~^ ERROR `#[track_caller]` on closures is currently unstable [E0658]\n-        //~| ERROR `#[track_caller]` on closures is currently unstable [E0658]\n     };\n }"}, {"sha": "498f1b43b9bca4f587f1121fc593dac62920e8b1", "filename": "src/test/ui/async-await/track-caller/async-closure-gate.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0adf9e046bfa2739784c4269a6191ae6e0958ef6/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0adf9e046bfa2739784c4269a6191ae6e0958ef6/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.stderr?ref=0adf9e046bfa2739784c4269a6191ae6e0958ef6", "patch": "@@ -7,19 +7,6 @@ LL |     let _ = #[track_caller] async || {\n    = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n    = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n \n-error[E0658]: `#[track_caller]` on closures is currently unstable\n-  --> $DIR/async-closure-gate.rs:6:38\n-   |\n-LL |       let _ = #[track_caller] async || {\n-   |  ______________________________________^\n-LL | |\n-LL | |\n-LL | |     };\n-   | |_____^\n-   |\n-   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n-   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "51ea225f4cbd45d56be94c0ed874515dd30b1cc6", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.nofeat.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0adf9e046bfa2739784c4269a6191ae6e0958ef6/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.nofeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0adf9e046bfa2739784c4269a6191ae6e0958ef6/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.nofeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.nofeat.stderr?ref=0adf9e046bfa2739784c4269a6191ae6e0958ef6", "patch": "@@ -0,0 +1,29 @@\n+warning: `#[track_caller]` on async functions is a no-op\n+  --> $DIR/panic-track-caller.rs:50:1\n+   |\n+LL |   #[track_caller]\n+   |   ^^^^^^^^^^^^^^^\n+LL | / async fn bar_track_caller() {\n+LL | |     panic!()\n+LL | | }\n+   | |_- this function will not propagate the caller location\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n+   = note: `#[warn(ungated_async_fn_track_caller)]` on by default\n+\n+warning: `#[track_caller]` on async functions is a no-op\n+  --> $DIR/panic-track-caller.rs:62:5\n+   |\n+LL |       #[track_caller]\n+   |       ^^^^^^^^^^^^^^^\n+LL | /     async fn bar_assoc() {\n+LL | |         panic!();\n+LL | |     }\n+   | |_____- this function will not propagate the caller location\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "f45243b0ea6f59815367bf575969b25735cee9ae", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0adf9e046bfa2739784c4269a6191ae6e0958ef6/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adf9e046bfa2739784c4269a6191ae6e0958ef6/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs?ref=0adf9e046bfa2739784c4269a6191ae6e0958ef6", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n // edition:2021\n+// revisions: feat nofeat\n // needs-unwind\n-#![feature(closure_track_caller, async_closure, stmt_expr_attributes)]\n+#![feature(async_closure, stmt_expr_attributes)]\n+#![cfg_attr(feat, feature(closure_track_caller))]\n \n use std::future::Future;\n use std::panic;\n@@ -45,7 +47,7 @@ async fn foo() {\n     bar().await\n }\n \n-#[track_caller]\n+#[track_caller] //[nofeat]~ WARN `#[track_caller]` on async functions is a no-op\n async fn bar_track_caller() {\n     panic!()\n }\n@@ -57,7 +59,7 @@ async fn foo_track_caller() {\n struct Foo;\n \n impl Foo {\n-    #[track_caller]\n+    #[track_caller] //[nofeat]~ WARN `#[track_caller]` on async functions is a no-op\n     async fn bar_assoc() {\n         panic!();\n     }\n@@ -67,6 +69,9 @@ async fn foo_assoc() {\n     Foo::bar_assoc().await\n }\n \n+// Since compilation is expected to fail for this fn when using\n+// `nofeat`, we test that separately in `async-closure-gate.rs`\n+#[cfg(feat)]\n async fn foo_closure() {\n     let c = #[track_caller] async || {\n         panic!();\n@@ -91,8 +96,18 @@ fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n }\n \n fn main() {\n-    assert_eq!(panicked_at(|| block_on(foo())), 41);\n-    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 54);\n-    assert_eq!(panicked_at(|| block_on(foo_assoc())), 67);\n-    assert_eq!(panicked_at(|| block_on(foo_closure())), 74);\n+    assert_eq!(panicked_at(|| block_on(foo())), 43);\n+\n+    #[cfg(feat)]\n+    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 56);\n+    #[cfg(nofeat)]\n+    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 52);\n+\n+    #[cfg(feat)]\n+    assert_eq!(panicked_at(|| block_on(foo_assoc())), 69);\n+    #[cfg(nofeat)]\n+    assert_eq!(panicked_at(|| block_on(foo_assoc())), 64);\n+\n+    #[cfg(feat)]\n+    assert_eq!(panicked_at(|| block_on(foo_closure())), 79);\n }"}]}