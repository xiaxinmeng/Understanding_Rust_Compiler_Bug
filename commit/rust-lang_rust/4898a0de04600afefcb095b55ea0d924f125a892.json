{"sha": "4898a0de04600afefcb095b55ea0d924f125a892", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OThhMGRlMDQ2MDBhZmVmY2IwOTViNTVlYTBkOTI0ZjEyNWE4OTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-05T01:38:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-05T01:38:06Z"}, "message": "extra: Don't recurse in DList drop glue. #8295\n\nThe compiler-generated dtor for DList recurses deeply to drop Nodes.\nFor big lists this can overflow the stack.", "tree": {"sha": "6788319ed0e736908c8848211c53a9d6cdf7c434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6788319ed0e736908c8848211c53a9d6cdf7c434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4898a0de04600afefcb095b55ea0d924f125a892", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4898a0de04600afefcb095b55ea0d924f125a892", "html_url": "https://github.com/rust-lang/rust/commit/4898a0de04600afefcb095b55ea0d924f125a892", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4898a0de04600afefcb095b55ea0d924f125a892/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6f2364076ff0589463d88b14ac1c2b9e655998c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f2364076ff0589463d88b14ac1c2b9e655998c", "html_url": "https://github.com/rust-lang/rust/commit/d6f2364076ff0589463d88b14ac1c2b9e655998c"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "75487a44f2600253e4d50091eaccc1517c299e06", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4898a0de04600afefcb095b55ea0d924f125a892/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4898a0de04600afefcb095b55ea0d924f125a892/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=4898a0de04600afefcb095b55ea0d924f125a892", "patch": "@@ -92,6 +92,11 @@ impl<T> Rawlink<T> {\n             Some(unsafe { cast::transmute(self.p) })\n         }\n     }\n+\n+    /// Return the `Rawlink` and replace with `Rawlink::none()`\n+    fn take(&mut self) -> Rawlink<T> {\n+        util::replace(self, Rawlink::none())\n+    }\n }\n \n impl<T> Clone for Rawlink<T> {\n@@ -280,13 +285,16 @@ impl<T> DList<T> {\n     /// Add all elements from `other` to the end of the list\n     ///\n     /// O(1)\n-    pub fn append(&mut self, other: DList<T>) {\n+    pub fn append(&mut self, mut other: DList<T>) {\n         match self.list_tail.resolve() {\n             None => *self = other,\n             Some(tail) => {\n-                match other {\n-                    DList{list_head: None, _} => return,\n-                    DList{list_head: Some(node), list_tail: o_tail, length: o_length} => {\n+                // Carefully empty `other`.\n+                let o_tail = other.list_tail.take();\n+                let o_length = other.length;\n+                match other.list_head.take() {\n+                    None => return,\n+                    Some(node) => {\n                         tail.next = link_with_prev(node, self.list_tail);\n                         self.list_tail = o_tail;\n                         self.length += o_length;\n@@ -404,6 +412,32 @@ impl<T: Ord> DList<T> {\n     }\n }\n \n+#[unsafe_destructor]\n+impl<T> Drop for DList<T> {\n+    fn drop(&self) {\n+        let mut_self = unsafe {\n+            cast::transmute_mut(self)\n+        };\n+        // Dissolve the dlist in backwards direction\n+        // Just dropping the list_head can lead to stack exhaustion\n+        // when length is >> 1_000_000\n+        let mut tail = mut_self.list_tail;\n+        loop {\n+            match tail.resolve() {\n+                None => break,\n+                Some(prev) => {\n+                    prev.next.take(); // release ~Node<T>\n+                    tail = prev.prev;\n+                }\n+            }\n+        }\n+        mut_self.length = 0;\n+        mut_self.list_head = None;\n+        mut_self.list_tail = Rawlink::none();\n+    }\n+}\n+\n+\n impl<'self, A> Iterator<&'self A> for DListIterator<'self, A> {\n     #[inline]\n     fn next(&mut self) -> Option<&'self A> {"}]}