{"sha": "58af73c370df9074961ee78dc9263f60afe0c9af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YWY3M2MzNzBkZjkwNzQ5NjFlZTc4ZGM5MjYzZjYwYWZlMGM5YWY=", "commit": {"author": {"name": "Tim", "email": "t.diekmann.3dv@gmail.com", "date": "2018-09-06T11:13:07Z"}, "committer": {"name": "Tim", "email": "t.diekmann.3dv@gmail.com", "date": "2018-09-06T11:13:07Z"}, "message": "Add unchecked_shl/shr checks for intrinsics", "tree": {"sha": "de30e0cc1af92ff9f55b8049fb160b36978de34c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de30e0cc1af92ff9f55b8049fb160b36978de34c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58af73c370df9074961ee78dc9263f60afe0c9af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58af73c370df9074961ee78dc9263f60afe0c9af", "html_url": "https://github.com/rust-lang/rust/commit/58af73c370df9074961ee78dc9263f60afe0c9af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58af73c370df9074961ee78dc9263f60afe0c9af/comments", "author": null, "committer": null, "parents": [{"sha": "20ca02569ae3e1dc29962e92739fbab632abf241", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ca02569ae3e1dc29962e92739fbab632abf241", "html_url": "https://github.com/rust-lang/rust/commit/20ca02569ae3e1dc29962e92739fbab632abf241"}], "stats": {"total": 73, "additions": 69, "deletions": 4}, "files": [{"sha": "0f122209baff4825a37385809b7ee3cb4814b0d3", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/58af73c370df9074961ee78dc9263f60afe0c9af/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58af73c370df9074961ee78dc9263f60afe0c9af/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=58af73c370df9074961ee78dc9263f60afe0c9af", "patch": "@@ -105,8 +105,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             | \"overflowing_add\"\n             | \"overflowing_sub\"\n             | \"overflowing_mul\"\n-            | \"unchecked_shl\"\n-            | \"unchecked_shr\"\n             | \"add_with_overflow\"\n             | \"sub_with_overflow\"\n             | \"mul_with_overflow\" => {\n@@ -116,8 +114,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     \"overflowing_add\" => (BinOp::Add, true),\n                     \"overflowing_sub\" => (BinOp::Sub, true),\n                     \"overflowing_mul\" => (BinOp::Mul, true),\n-                    \"unchecked_shl\" => (BinOp::Shl, true),\n-                    \"unchecked_shr\" => (BinOp::Shr, true),\n                     \"add_with_overflow\" => (BinOp::Add, false),\n                     \"sub_with_overflow\" => (BinOp::Sub, false),\n                     \"mul_with_overflow\" => (BinOp::Mul, false),\n@@ -129,6 +125,34 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     self.binop_with_overflow(bin_op, lhs, rhs, dest)?;\n                 }\n             }\n+            \"unchecked_shl\" | \"unchecked_shr\" => {\n+                let bits = dest.layout.size.bytes() as u128 * 8;\n+                let l = self.read_value(args[0])?;\n+                let r = self.read_value(args[1])?;\n+                let r_ty = substs.type_at(0);\n+                let r_layout_of = self.layout_of(r_ty)?;\n+                let r_val =  r.to_scalar()?.to_bits(r_layout_of.size)?;\n+                let bin_op = match intrinsic_name {\n+                    \"unchecked_shl\" => {\n+                        if r_val >= bits {\n+                            return err!(Intrinsic(\n+                                format!(\"Overflowing shift by {} in unchecked_shl\", r_val),\n+                            ));\n+                        }\n+                        BinOp::Shl\n+                    },\n+                    \"unchecked_shr\" => {\n+                        if r_val >= bits {\n+                            return err!(Intrinsic(\n+                                format!(\"Overflowing shift by {} in unchecked_shr\", r_val),\n+                            ));\n+                        }\n+                        BinOp::Shr\n+                    },\n+                    _ => bug!(\"Already checked for int ops\")\n+                };\n+                self.binop_ignore_overflow(bin_op, l, r, dest)?;\n+            }\n             \"transmute\" => {\n                 // Go through an allocation, to make sure the completely different layouts\n                 // do not pose a problem.  (When the user transmutes through a union,"}, {"sha": "cbf855633fd2d06c5beacfd4a4d1744cd2f1b899", "filename": "src/test/ui/consts/const-int-unchecked.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58af73c370df9074961ee78dc9263f60afe0c9af/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58af73c370df9074961ee78dc9263f60afe0c9af/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs?ref=58af73c370df9074961ee78dc9263f60afe0c9af", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics;\n+\n+const SHR: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n+//^~ ERROR: Overflowing shift by 8 in unchecked_shr\n+const SHL: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n+//^~ ERROR: Overflowing shift by 8 in unchecked_shl\n+\n+fn main() {\n+}"}, {"sha": "b8fd0facbc1ae53262bc5a3411eb9022a7ea7d24", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/58af73c370df9074961ee78dc9263f60afe0c9af/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58af73c370df9074961ee78dc9263f60afe0c9af/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=58af73c370df9074961ee78dc9263f60afe0c9af", "patch": "@@ -0,0 +1,20 @@\n+error: this constant cannot be used\n+  --> $DIR/const-int-unchecked.rs:15:1\n+   |\n+LL | const SHR: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                          |\n+   |                          Overflowing shift by 8 in unchecked_shr\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: this constant cannot be used\n+  --> $DIR/const-int-unchecked.rs:17:1\n+   |\n+LL | const SHL: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                          |\n+   |                          Overflowing shift by 8 in unchecked_shl\n+\n+error: aborting due to 2 previous errors\n+"}]}