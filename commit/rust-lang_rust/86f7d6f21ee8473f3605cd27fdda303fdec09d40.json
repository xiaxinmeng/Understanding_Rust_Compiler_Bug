{"sha": "86f7d6f21ee8473f3605cd27fdda303fdec09d40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZjdkNmYyMWVlODQ3M2YzNjA1Y2QyN2ZkZGEzMDNmZGVjMDlkNDA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-10-25T12:47:04Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-10-25T12:52:38Z"}, "message": "Review feedback: elaborated comments.", "tree": {"sha": "eb2a85b2a402f5cf527ea9d2d5601aaad3101b7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb2a85b2a402f5cf527ea9d2d5601aaad3101b7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86f7d6f21ee8473f3605cd27fdda303fdec09d40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86f7d6f21ee8473f3605cd27fdda303fdec09d40", "html_url": "https://github.com/rust-lang/rust/commit/86f7d6f21ee8473f3605cd27fdda303fdec09d40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86f7d6f21ee8473f3605cd27fdda303fdec09d40/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f5b11b6b7a1e2a424165aa629752862a5924b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f5b11b6b7a1e2a424165aa629752862a5924b0", "html_url": "https://github.com/rust-lang/rust/commit/98f5b11b6b7a1e2a424165aa629752862a5924b0"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "cdf5734f5a50673e4d0bf5eab1674c7932ebb535", "filename": "src/librustc/ty/structural_match.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/86f7d6f21ee8473f3605cd27fdda303fdec09d40/src%2Flibrustc%2Fty%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f7d6f21ee8473f3605cd27fdda303fdec09d40/src%2Flibrustc%2Fty%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_match.rs?ref=86f7d6f21ee8473f3605cd27fdda303fdec09d40", "patch": "@@ -93,17 +93,20 @@ pub fn type_marked_structural(id: hir::HirId,\n     fulfillment_cx.select_all_or_error(infcx).is_ok()\n }\n \n+/// This implements the traversal over the structure of a given type to try to\n+/// find instances of ADTs (specifically structs or enums) that do not implement\n+/// the structural-match traits (`StructuralPartialEq` and `StructuralEq`).\n struct Search<'a, 'tcx> {\n     id: hir::HirId,\n     span: Span,\n \n     infcx: InferCtxt<'a, 'tcx>,\n \n-    // records the first ADT we find that does not implement `Structural`.\n+    /// Records first ADT that does not implement a structural-match trait.\n     found: Option<NonStructuralMatchTy<'tcx>>,\n \n-    // tracks ADT's previously encountered during search, so that\n-    // we will not recur on them again.\n+    /// Tracks ADTs previously encountered during search, so that\n+    /// we will not recur on them again.\n     seen: FxHashSet<hir::def_id::DefId>,\n }\n \n@@ -129,13 +132,26 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n             }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n-                // `*const _`/`*mut _`, so skip super_visit_with\n+                // `*const _`/`*mut _`, so skip `super_visit_with`.\n                 //\n+                // For example, if you have:\n+                // ```\n+                // struct NonStructural;\n+                // #[derive(PartialEq, Eq)]\n+                // struct T(*const NonStructural);\n+                // const C: T = T(std::ptr::null());\n+                // ```\n+                //\n+                // Even though `NonStructural` does not implement `PartialEq`,\n+                // structural equality on `T` does not recur into the raw\n+                // pointer. Therefore, one can still use `C` in a pattern.\n+\n                 // (But still tell caller to continue search.)\n                 return false;\n             }\n             ty::FnDef(..) | ty::FnPtr(..) => {\n-                // types of formals and return in `fn(_) -> _` are also irrelevant\n+                // types of formals and return in `fn(_) -> _` are also irrelevant;\n+                // so we do not recur into them via `super_visit_with`\n                 //\n                 // (But still tell caller to continue search.)\n                 return false;"}]}