{"sha": "bf42a75f1e9a86247067611fadbed48ea9d379b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNDJhNzVmMWU5YTg2MjQ3MDY3NjExZmFkYmVkNDhlYTlkMzc5YjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T20:45:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T20:45:35Z"}, "message": "dedupe", "tree": {"sha": "e10d94db427fb2763d2e0583bb6642d269ca6c5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e10d94db427fb2763d2e0583bb6642d269ca6c5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf42a75f1e9a86247067611fadbed48ea9d379b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf42a75f1e9a86247067611fadbed48ea9d379b0", "html_url": "https://github.com/rust-lang/rust/commit/bf42a75f1e9a86247067611fadbed48ea9d379b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf42a75f1e9a86247067611fadbed48ea9d379b0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d922c87d0c933803441bde825ace5658af78b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d922c87d0c933803441bde825ace5658af78b2", "html_url": "https://github.com/rust-lang/rust/commit/36d922c87d0c933803441bde825ace5658af78b2"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "f521271fbedc3069efdc9513db1eb1cb87d3763e", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bf42a75f1e9a86247067611fadbed48ea9d379b0/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf42a75f1e9a86247067611fadbed48ea9d379b0/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=bf42a75f1e9a86247067611fadbed48ea9d379b0", "patch": "@@ -27,11 +27,13 @@ use std::path::PathBuf;\n use threadpool::ThreadPool;\n use crossbeam_channel::{bounded, Sender, Receiver};\n use flexi_logger::Logger;\n-use libanalysis::WorldState;\n use languageserver_types::{TextDocumentItem, VersionedTextDocumentIdentifier, TextDocumentIdentifier};\n+use serde::{ser::Serialize, de::DeserializeOwned};\n+use libanalysis::{WorldState, World};\n \n use ::{\n-    io::{Io, RawMsg},\n+    io::{Io, RawMsg, RawRequest},\n+    req::Request,\n     handlers::{handle_syntax_tree, handle_extend_selection, publish_diagnostics},\n };\n \n@@ -171,24 +173,12 @@ fn main_loop(\n         match msg {\n             RawMsg::Request(req) => {\n                 let mut req = Some(req);\n-                dispatch::handle_request::<req::SyntaxTree, _>(&mut req, |params, resp| {\n-                    let world = world.snapshot();\n-                    let sender = sender.clone();\n-                    pool.execute(move || {\n-                        let res = handle_syntax_tree(world, params);\n-                        sender.send(Box::new(|io: &mut Io| resp.response(io, res)))\n-                    });\n-                    Ok(())\n-                })?;\n-                dispatch::handle_request::<req::ExtendSelection, _>(&mut req, |params, resp| {\n-                    let world = world.snapshot();\n-                    let sender = sender.clone();\n-                    pool.execute(move || {\n-                        let res = handle_extend_selection(world, params);\n-                        sender.send(Box::new(|io: &mut Io| resp.response(io, res)))\n-                    });\n-                    Ok(())\n-                })?;\n+                handle_request_on_threadpool::<req::SyntaxTree>(\n+                    &mut req, pool, world, &sender, handle_syntax_tree\n+                )?;\n+                handle_request_on_threadpool::<req::ExtendSelection>(\n+                    &mut req, pool, world, &sender, handle_extend_selection\n+                )?;\n                 let mut shutdown = false;\n                 dispatch::handle_request::<req::Shutdown, _>(&mut req, |(), resp| {\n                     resp.result(io, ())?;\n@@ -271,6 +261,29 @@ fn main_loop(\n     }\n }\n \n+fn handle_request_on_threadpool<R>(\n+    req: &mut Option<RawRequest>,\n+    pool: &ThreadPool,\n+    world: &WorldState,\n+    sender: &Sender<Thunk>,\n+    f: fn(World, R::Params) -> Result<R::Result>,\n+) -> Result<()>\n+    where\n+        R: Request + Send + 'static,\n+        R::Params: DeserializeOwned + Send + 'static,\n+        R::Result: Serialize + Send + 'static,\n+{\n+    dispatch::handle_request::<R, _>(req, |params, resp| {\n+        let world = world.snapshot();\n+        let sender = sender.clone();\n+        pool.execute(move || {\n+            let res = f(world, params);\n+            sender.send(Box::new(|io: &mut Io| resp.response(io, res)))\n+        });\n+        Ok(())\n+    })\n+}\n+\n trait FnBox<A, R>: Send {\n     fn call_box(self: Box<Self>, a: A) -> R;\n }"}]}