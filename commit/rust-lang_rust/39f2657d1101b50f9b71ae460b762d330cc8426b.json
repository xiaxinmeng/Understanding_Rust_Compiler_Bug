{"sha": "39f2657d1101b50f9b71ae460b762d330cc8426b", "node_id": "C_kwDOAAsO6NoAKDM5ZjI2NTdkMTEwMWI1MGY5YjcxYWU0NjBiNzYyZDMzMGNjODQyNmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-09T08:21:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-09T08:21:17Z"}, "message": "Auto merge of #108920 - matthiaskrgr:rollup-qrr9a0u, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #108754 (Retry `pred_known_to_hold_modulo_regions` with fulfillment if ambiguous)\n - #108759 (1.41.1 supported 32-bit Apple targets)\n - #108839 (Canonicalize root var when making response from new solver)\n - #108856 (Remove DropAndReplace terminator)\n - #108882 (Tweak E0740)\n - #108898 (Set `LIBC_CHECK_CFG=1` when building Rust code in bootstrap)\n - #108911 (Improve rustdoc-gui/tester.js code a bit)\n - #108916 (Remove an unused return value in `rustc_hir_typeck`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fa6be23bc0b0eed8b13d48d5200ad8c445ec69fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa6be23bc0b0eed8b13d48d5200ad8c445ec69fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39f2657d1101b50f9b71ae460b762d330cc8426b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39f2657d1101b50f9b71ae460b762d330cc8426b", "html_url": "https://github.com/rust-lang/rust/commit/39f2657d1101b50f9b71ae460b762d330cc8426b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39f2657d1101b50f9b71ae460b762d330cc8426b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66a2d6221069e0d08ceacf2a3201600e2092d2e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/66a2d6221069e0d08ceacf2a3201600e2092d2e0", "html_url": "https://github.com/rust-lang/rust/commit/66a2d6221069e0d08ceacf2a3201600e2092d2e0"}, {"sha": "a22c5f9581cc0691be6838ee2a16ab4bd8af9a0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a22c5f9581cc0691be6838ee2a16ab4bd8af9a0b", "html_url": "https://github.com/rust-lang/rust/commit/a22c5f9581cc0691be6838ee2a16ab4bd8af9a0b"}], "stats": {"total": 745, "additions": 284, "deletions": 461}, "files": [{"sha": "4e974bbe9747e5f295319a4b90cb5e5a8081eae6", "filename": "RELEASES.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -3861,6 +3861,8 @@ Version 1.41.1 (2020-02-27)\n * [Always check types of static items][69145]\n * [Always check lifetime bounds of `Copy` impls][69145]\n * [Fix miscompilation in callers of `Layout::repeat`][69225]\n+* [Rust 1.41.0 was announced as the last Rust release with tier 1 or tier 2 support for 32-bit Apple targets][apple-32bit-drop].\n+  That announcement did not expect a patch release. 1.41.1 also includes release binaries for these targets.\n \n [69225]: https://github.com/rust-lang/rust/issues/69225\n [69145]: https://github.com/rust-lang/rust/pull/69145\n@@ -3953,7 +3955,7 @@ Misc\n Compatibility Notes\n -------------------\n \n-- [As previously announced 1.41.0 will be the last tier 1 release for 32-bit\n+- [As previously announced 1.41 will be the last tier 1 release for 32-bit\n   Apple targets.][apple-32bit-drop] This means that the source code is still\n   available to build, but the targets are no longer being tested and release\n   binaries for those platforms will no longer be distributed by the Rust project."}, {"sha": "1006a047cce09ce2a1859b5f1cc89b002a4b4d23", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -118,15 +118,6 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     LocalMutationIsAllowed::Yes,\n                 );\n             }\n-            TerminatorKind::DropAndReplace {\n-                place: drop_place,\n-                value: new_value,\n-                target: _,\n-                unwind: _,\n-            } => {\n-                self.mutate_place(location, *drop_place, Deep);\n-                self.consume_operand(location, new_value);\n-            }\n             TerminatorKind::Call {\n                 func,\n                 args,"}, {"sha": "92acd7555095e0e89d8488a96af7d34aa4add53b", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -743,15 +743,6 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     flow_state,\n                 );\n             }\n-            TerminatorKind::DropAndReplace {\n-                place: drop_place,\n-                value: new_value,\n-                target: _,\n-                unwind: _,\n-            } => {\n-                self.mutate_place(loc, (*drop_place, span), Deep, flow_state);\n-                self.consume_operand(loc, (new_value, span), flow_state);\n-            }\n             TerminatorKind::Call {\n                 func,\n                 args,\n@@ -866,7 +857,6 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }\n             | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }\n             | TerminatorKind::Goto { .. }"}, {"sha": "9731b10aa99d9f931edcff1488a4b1e126bd4085", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -435,8 +435,7 @@ impl<'me, 'typeck, 'flow, 'tcx> LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         //\n         // What we *actually* generate is a store to a temporary\n         // for the call (`TMP = call()...`) and then a\n-        // `DropAndReplace` to swap that with `X`\n-        // (`DropAndReplace` has very particular semantics).\n+        // `Drop(X)` followed by `X = TMP`  to swap that with `X`.\n     }\n }\n "}, {"sha": "d85e058bb208f76a7391477537872f9e62a3a27e", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1312,24 +1312,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // no checks needed for these\n             }\n \n-            TerminatorKind::DropAndReplace { place, value, target: _, unwind: _ } => {\n-                let place_ty = place.ty(body, tcx).ty;\n-                let rv_ty = value.ty(body, tcx);\n-\n-                let locations = term_location.to_locations();\n-                if let Err(terr) =\n-                    self.sub_types(rv_ty, place_ty, locations, ConstraintCategory::Assignment)\n-                {\n-                    span_mirbug!(\n-                        self,\n-                        term,\n-                        \"bad DropAndReplace ({:?} = {:?}): {:?}\",\n-                        place_ty,\n-                        rv_ty,\n-                        terr\n-                    );\n-                }\n-            }\n             TerminatorKind::SwitchInt { discr, .. } => {\n                 self.check_operand(discr, term_location);\n \n@@ -1629,7 +1611,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n             TerminatorKind::Unreachable => {}\n             TerminatorKind::Drop { target, unwind, .. }\n-            | TerminatorKind::DropAndReplace { target, unwind, .. }\n             | TerminatorKind::Assert { target, cleanup: unwind, .. } => {\n                 self.assert_iscleanup(body, block_data, target, is_cleanup);\n                 if let Some(unwind) = unwind {"}, {"sha": "c5991e0bc254e302714cdedee048b3f641f508e8", "filename": "compiler/rustc_borrowck/src/used_muts.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -71,9 +71,6 @@ impl<'visit, 'cx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'tc\n             TerminatorKind::Call { destination, .. } => {\n                 self.remove_never_initialized_mut_locals(*destination);\n             }\n-            TerminatorKind::DropAndReplace { place, .. } => {\n-                self.remove_never_initialized_mut_locals(*place);\n-            }\n             _ => {}\n         }\n "}, {"sha": "cb0e272cedaba829129320a443fce3225f7c54a6", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -499,7 +499,6 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n             TerminatorKind::Yield { .. }\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::GeneratorDrop => {\n                 bug!(\"shouldn't exist at codegen {:?}\", bb_data.terminator());\n             }"}, {"sha": "1930db72ead4417faacfaf70b0f517dac6af5583", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -543,8 +543,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                     | TerminatorKind::Unreachable\n                     | TerminatorKind::Drop { .. }\n                     | TerminatorKind::Assert { .. } => {}\n-                    TerminatorKind::DropAndReplace { .. }\n-                    | TerminatorKind::Yield { .. }\n+                    TerminatorKind::Yield { .. }\n                     | TerminatorKind::GeneratorDrop\n                     | TerminatorKind::FalseEdge { .. }\n                     | TerminatorKind::FalseUnwind { .. } => unreachable!(),"}, {"sha": "0ce395e912db319c32386b93b0b1854f16dcc7f9", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -295,7 +295,6 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n                 TerminatorKind::Call { cleanup: unwind, .. }\n                 | TerminatorKind::InlineAsm { cleanup: unwind, .. }\n                 | TerminatorKind::Assert { cleanup: unwind, .. }\n-                | TerminatorKind::DropAndReplace { unwind, .. }\n                 | TerminatorKind::Drop { unwind, .. } => {\n                     if let Some(unwind) = unwind {\n                         debug!("}, {"sha": "71c71d59b7ab9ec5b3b44f03624880eb3b1b6ce0", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1305,10 +1305,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     mergeable_succ(),\n                 ),\n \n-            mir::TerminatorKind::DropAndReplace { .. } => {\n-                bug!(\"undesugared DropAndReplace in codegen: {:?}\", terminator);\n-            }\n-\n             mir::TerminatorKind::Call {\n                 ref func,\n                 ref args,"}, {"sha": "685a5599cdedf5496b6a537ea236a883c901e9ed", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -171,11 +171,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Unreachable => throw_ub!(Unreachable),\n \n             // These should never occur for MIR we actually run.\n-            DropAndReplace { .. }\n-            | FalseEdge { .. }\n-            | FalseUnwind { .. }\n-            | Yield { .. }\n-            | GeneratorDrop => span_bug!(\n+            FalseEdge { .. } | FalseUnwind { .. } | Yield { .. } | GeneratorDrop => span_bug!(\n                 terminator.source_info.span,\n                 \"{:#?} should have been eliminated by MIR pass\",\n                 terminator.kind"}, {"sha": "656baa784d77754f65d8a32f90874c672e74a179", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -985,8 +985,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n             // Forbid all `Drop` terminators unless the place being dropped is a local with no\n             // projections that cannot be `NeedsNonConstDrop`.\n-            TerminatorKind::Drop { place: dropped_place, .. }\n-            | TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n+            TerminatorKind::Drop { place: dropped_place, .. } => {\n                 // If we are checking live drops after drop-elaboration, don't emit duplicate\n                 // errors here.\n                 if super::post_drop_elaboration::checking_enabled(self.ccx) {"}, {"sha": "43806035a44a04fbd958b63d6c97b4dab7bfdfa7", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -80,8 +80,7 @@ impl<'tcx> Visitor<'tcx> for CheckLiveDrops<'_, 'tcx> {\n         trace!(\"visit_terminator: terminator={:?} location={:?}\", terminator, location);\n \n         match &terminator.kind {\n-            mir::TerminatorKind::Drop { place: dropped_place, .. }\n-            | mir::TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n+            mir::TerminatorKind::Drop { place: dropped_place, .. } => {\n                 let dropped_ty = dropped_place.ty(self.body, self.tcx).ty;\n                 if !NeedsNonConstDrop::in_any_value_of_ty(self.ccx, dropped_ty) {\n                     // Instead of throwing a bug, we just return here. This is because we have to"}, {"sha": "78c74e1892dc51baa3d17b32872a13c00125a960", "filename": "compiler/rustc_const_eval/src/transform/check_consts/resolver.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -222,23 +222,8 @@ where\n         // The effect of assignment to the return place in `TerminatorKind::Call` is not applied\n         // here; that occurs in `apply_call_return_effect`.\n \n-        if let mir::TerminatorKind::DropAndReplace { value, place, .. } = &terminator.kind {\n-            let qualif = qualifs::in_operand::<Q, _>(\n-                self.ccx,\n-                &mut |l| self.state.qualif.contains(l),\n-                value,\n-            );\n-\n-            if !place.is_indirect() {\n-                self.assign_qualif_direct(place, qualif);\n-            }\n-        }\n-\n         // We ignore borrow on drop because custom drop impls are not allowed in consts.\n         // FIXME: Reconsider if accounting for borrows in drops is necessary for const drop.\n-\n-        // We need to assign qualifs to the dropped location before visiting the operand that\n-        // replaces it since qualifs can be cleared on move.\n         self.super_terminator(terminator, location);\n     }\n }"}, {"sha": "8ecd8f639ddd49e9396988ded56d1e2d5c5f9d0c", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -846,18 +846,6 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n-            TerminatorKind::DropAndReplace { target, unwind, .. } => {\n-                if self.mir_phase >= MirPhase::Runtime(RuntimePhase::Initial) {\n-                    self.fail(\n-                        location,\n-                        \"`DropAndReplace` should have been removed during drop elaboration\",\n-                    );\n-                }\n-                self.check_edge(location, *target, EdgeKind::Normal);\n-                if let Some(unwind) = unwind {\n-                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n-                }\n-            }\n             TerminatorKind::Call { func, args, destination, target, cleanup, .. } => {\n                 let func_ty = func.ty(&self.body.local_decls, self.tcx);\n                 match func_ty.kind() {"}, {"sha": "df42881644487b59c99e39d435dac2dcbb887d9e", "filename": "compiler/rustc_hir_analysis/locales/en-US.ftl", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -163,3 +163,10 @@ hir_analysis_pass_to_variadic_function = can't pass `{$ty}` to variadic function\n     .help = cast the value to `{$cast_ty}`\n \n hir_analysis_cast_thin_pointer_to_fat_pointer = cannot cast thin pointer `{$expr_ty}` to fat pointer `{$cast_ty}`\n+\n+hir_analysis_invalid_union_field =\n+    field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n+    .note = union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+\n+hir_analysis_invalid_union_field_sugg =\n+    wrap the field type in `ManuallyDrop<...>`"}, {"sha": "be0ae4ce2ef694e632f58cfe23afd44840ec6b95", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1,5 +1,5 @@\n use crate::check::intrinsicck::InlineAsmCtxt;\n-use crate::errors::LinkageType;\n+use crate::errors::{self, LinkageType};\n \n use super::compare_impl_item::check_type_bounds;\n use super::compare_impl_item::{compare_impl_method, compare_impl_ty};\n@@ -114,9 +114,11 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n                     allowed_union_field(*elem, tcx, param_env)\n                 }\n                 _ => {\n-                    // Fallback case: allow `ManuallyDrop` and things that are `Copy`.\n+                    // Fallback case: allow `ManuallyDrop` and things that are `Copy`,\n+                    // also no need to report an error if the type is unresolved.\n                     ty.ty_adt_def().is_some_and(|adt_def| adt_def.is_manually_drop())\n                         || ty.is_copy_modulo_regions(tcx, param_env)\n+                        || ty.references_error()\n                 }\n             }\n         }\n@@ -131,26 +133,14 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n                     Some(Node::Field(field)) => (field.span, field.ty.span),\n                     _ => unreachable!(\"mir field has to correspond to hir field\"),\n                 };\n-                struct_span_err!(\n-                    tcx.sess,\n+                tcx.sess.emit_err(errors::InvalidUnionField {\n                     field_span,\n-                    E0740,\n-                    \"unions cannot contain fields that may need dropping\"\n-                )\n-                .note(\n-                    \"a type is guaranteed not to need dropping \\\n-                    when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\",\n-                )\n-                .multipart_suggestion_verbose(\n-                    \"when the type does not implement `Copy`, \\\n-                    wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\",\n-                    vec![\n-                        (ty_span.shrink_to_lo(), \"std::mem::ManuallyDrop<\".into()),\n-                        (ty_span.shrink_to_hi(), \">\".into()),\n-                    ],\n-                    Applicability::MaybeIncorrect,\n-                )\n-                .emit();\n+                    sugg: errors::InvalidUnionFieldSuggestion {\n+                        lo: ty_span.shrink_to_lo(),\n+                        hi: ty_span.shrink_to_hi(),\n+                    },\n+                    note: (),\n+                });\n                 return false;\n             } else if field_ty.needs_drop(tcx, param_env) {\n                 // This should never happen. But we can get here e.g. in case of name resolution errors."}, {"sha": "dd40706f1d34580884bd8e6f598d3b36974b9c65", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::{\n     error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic,\n     MultiSpan,\n };\n-use rustc_macros::Diagnostic;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n@@ -430,3 +430,23 @@ pub(crate) struct CastThinPointerToFatPointer<'tcx> {\n     pub expr_ty: Ty<'tcx>,\n     pub cast_ty: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_invalid_union_field, code = \"E0740\")]\n+pub(crate) struct InvalidUnionField {\n+    #[primary_span]\n+    pub field_span: Span,\n+    #[subdiagnostic]\n+    pub sugg: InvalidUnionFieldSuggestion,\n+    #[note]\n+    pub note: (),\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(hir_analysis_invalid_union_field_sugg, applicability = \"machine-applicable\")]\n+pub(crate) struct InvalidUnionFieldSuggestion {\n+    #[suggestion_part(code = \"std::mem::ManuallyDrop<\")]\n+    pub lo: Span,\n+    #[suggestion_part(code = \">\")]\n+    pub hi: Span,\n+}"}, {"sha": "ac7d984c1618dc9a35e7ba9cbd51f7565290ced1", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -301,16 +301,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         span: Span,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n-    ) -> (ty::InstantiatedPredicates<'tcx>, Vec<Span>) {\n+    ) -> ty::InstantiatedPredicates<'tcx> {\n         let bounds = self.tcx.predicates_of(def_id);\n-        let spans: Vec<Span> = bounds.predicates.iter().map(|(_, span)| *span).collect();\n         let result = bounds.instantiate(self.tcx, substs);\n         let result = self.normalize(span, result);\n-        debug!(\n-            \"instantiate_bounds(bounds={:?}, substs={:?}) = {:?}, {:?}\",\n-            bounds, substs, result, spans,\n-        );\n-        (result, spans)\n+        debug!(\"instantiate_bounds(bounds={:?}, substs={:?}) = {:?}\", bounds, substs, result);\n+        result\n     }\n \n     pub(in super::super) fn normalize<T>(&self, span: Span, value: T) -> T\n@@ -1389,7 +1385,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             _ => false,\n         };\n-        let (bounds, _) = self.instantiate_bounds(span, def_id, &substs);\n+        let bounds = self.instantiate_bounds(span, def_id, &substs);\n \n         for mut obligation in traits::predicates_for_generics(\n             |idx, predicate_span| {"}, {"sha": "a43330e2d4ea5db44b9a1392a0d814b464a755f1", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -374,9 +374,18 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n         }\n     }\n \n-    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+    fn fold_ty(&mut self, mut t: Ty<'tcx>) -> Ty<'tcx> {\n         match *t.kind() {\n-            ty::Infer(ty::TyVar(vid)) => {\n+            ty::Infer(ty::TyVar(mut vid)) => {\n+                // We need to canonicalize the *root* of our ty var.\n+                // This is so that our canonical response correctly reflects\n+                // any equated inference vars correctly!\n+                let root_vid = self.infcx.root_var(vid);\n+                if root_vid != vid {\n+                    t = self.infcx.tcx.mk_ty_var(root_vid);\n+                    vid = root_vid;\n+                }\n+\n                 debug!(\"canonical: type var found with vid {:?}\", vid);\n                 match self.infcx.probe_ty_var(vid) {\n                     // `t` could be a float / int variable; canonicalize that instead.\n@@ -467,9 +476,18 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n         }\n     }\n \n-    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+    fn fold_const(&mut self, mut ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         match ct.kind() {\n-            ty::ConstKind::Infer(InferConst::Var(vid)) => {\n+            ty::ConstKind::Infer(InferConst::Var(mut vid)) => {\n+                // We need to canonicalize the *root* of our const var.\n+                // This is so that our canonical response correctly reflects\n+                // any equated inference vars correctly!\n+                let root_vid = self.infcx.root_const_var(vid);\n+                if root_vid != vid {\n+                    ct = self.infcx.tcx.mk_const(ty::InferConst::Var(root_vid), ct.ty());\n+                    vid = root_vid;\n+                }\n+\n                 debug!(\"canonical: const var found with vid {:?}\", vid);\n                 match self.infcx.probe_const_var(vid) {\n                     Ok(c) => {"}, {"sha": "4a2a55573131aa92c091ccf6f4fd2d376e06a334", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1359,6 +1359,10 @@ impl<'tcx> InferCtxt<'tcx> {\n         self.inner.borrow_mut().type_variables().root_var(var)\n     }\n \n+    pub fn root_const_var(&self, var: ty::ConstVid<'tcx>) -> ty::ConstVid<'tcx> {\n+        self.inner.borrow_mut().const_unification_table().find(var)\n+    }\n+\n     /// Where possible, replaces type/const variables in\n     /// `value` with their final value. Note that region variables\n     /// are unaffected. If a type/const variable has not been unified, it"}, {"sha": "e52610faf5af71a6cd9ea83e24bbfcdfa78d4ce4", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -265,7 +265,6 @@ pub fn terminator_kind_name(term: &Terminator<'_>) -> &'static str {\n         Return => \"Return\",\n         Unreachable => \"Unreachable\",\n         Drop { .. } => \"Drop\",\n-        DropAndReplace { .. } => \"DropAndReplace\",\n         Call { .. } => \"Call\",\n         Assert { .. } => \"Assert\",\n         Yield { .. } => \"Yield\","}, {"sha": "58c060db66003f4d6fa57b9dbf28831026961e01", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -133,7 +133,6 @@ pub enum AnalysisPhase {\n pub enum RuntimePhase {\n     /// In addition to the semantic changes, beginning with this phase, the following variants are\n     /// disallowed:\n-    /// * [`TerminatorKind::DropAndReplace`]\n     /// * [`TerminatorKind::Yield`]\n     /// * [`TerminatorKind::GeneratorDrop`]\n     /// * [`Rvalue::Aggregate`] for any `AggregateKind` except `Array`\n@@ -596,43 +595,6 @@ pub enum TerminatorKind<'tcx> {\n     /// > consider indirect assignments.\n     Drop { place: Place<'tcx>, target: BasicBlock, unwind: Option<BasicBlock> },\n \n-    /// Drops the place and assigns a new value to it.\n-    ///\n-    /// This first performs the exact same operation as the pre drop-elaboration `Drop` terminator;\n-    /// it then additionally assigns the `value` to the `place` as if by an assignment statement.\n-    /// This assignment occurs both in the unwind and the regular code paths. The semantics are best\n-    /// explained by the elaboration:\n-    ///\n-    /// ```ignore (MIR)\n-    /// BB0 {\n-    ///   DropAndReplace(P <- V, goto BB1, unwind BB2)\n-    /// }\n-    /// ```\n-    ///\n-    /// becomes\n-    ///\n-    /// ```ignore (MIR)\n-    /// BB0 {\n-    ///   Drop(P, goto BB1, unwind BB2)\n-    /// }\n-    /// BB1 {\n-    ///   // P is now uninitialized\n-    ///   P <- V\n-    /// }\n-    /// BB2 {\n-    ///   // P is now uninitialized -- its dtor panicked\n-    ///   P <- V\n-    /// }\n-    /// ```\n-    ///\n-    /// Disallowed after drop elaboration.\n-    DropAndReplace {\n-        place: Place<'tcx>,\n-        value: Operand<'tcx>,\n-        target: BasicBlock,\n-        unwind: Option<BasicBlock>,\n-    },\n-\n     /// Roughly speaking, evaluates the `func` operand and the arguments, and starts execution of\n     /// the referred to function. The operand types must match the argument types of the function.\n     /// The return place type must match the return type. The type of the `func` operand must be"}, {"sha": "cd970270727f973f94ec95f1a183b6e6c81eaf42", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -148,7 +148,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | Call { target: None, cleanup: Some(t), .. }\n             | Call { target: Some(t), cleanup: None, .. }\n             | Yield { resume: t, drop: None, .. }\n-            | DropAndReplace { target: t, unwind: None, .. }\n             | Drop { target: t, unwind: None, .. }\n             | Assert { target: t, cleanup: None, .. }\n             | FalseUnwind { real_target: t, unwind: None }\n@@ -158,7 +157,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             }\n             Call { target: Some(t), cleanup: Some(ref u), .. }\n             | Yield { resume: t, drop: Some(ref u), .. }\n-            | DropAndReplace { target: t, unwind: Some(ref u), .. }\n             | Drop { target: t, unwind: Some(ref u), .. }\n             | Assert { target: t, cleanup: Some(ref u), .. }\n             | FalseUnwind { real_target: t, unwind: Some(ref u) }\n@@ -188,7 +186,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | Call { target: None, cleanup: Some(ref mut t), .. }\n             | Call { target: Some(ref mut t), cleanup: None, .. }\n             | Yield { resume: ref mut t, drop: None, .. }\n-            | DropAndReplace { target: ref mut t, unwind: None, .. }\n             | Drop { target: ref mut t, unwind: None, .. }\n             | Assert { target: ref mut t, cleanup: None, .. }\n             | FalseUnwind { real_target: ref mut t, unwind: None }\n@@ -198,7 +195,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             }\n             Call { target: Some(ref mut t), cleanup: Some(ref mut u), .. }\n             | Yield { resume: ref mut t, drop: Some(ref mut u), .. }\n-            | DropAndReplace { target: ref mut t, unwind: Some(ref mut u), .. }\n             | Drop { target: ref mut t, unwind: Some(ref mut u), .. }\n             | Assert { target: ref mut t, cleanup: Some(ref mut u), .. }\n             | FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) }\n@@ -225,7 +221,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | TerminatorKind::FalseEdge { .. } => None,\n             TerminatorKind::Call { cleanup: ref unwind, .. }\n             | TerminatorKind::Assert { cleanup: ref unwind, .. }\n-            | TerminatorKind::DropAndReplace { ref unwind, .. }\n             | TerminatorKind::Drop { ref unwind, .. }\n             | TerminatorKind::FalseUnwind { ref unwind, .. }\n             | TerminatorKind::InlineAsm { cleanup: ref unwind, .. } => Some(unwind),\n@@ -245,7 +240,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | TerminatorKind::FalseEdge { .. } => None,\n             TerminatorKind::Call { cleanup: ref mut unwind, .. }\n             | TerminatorKind::Assert { cleanup: ref mut unwind, .. }\n-            | TerminatorKind::DropAndReplace { ref mut unwind, .. }\n             | TerminatorKind::Drop { ref mut unwind, .. }\n             | TerminatorKind::FalseUnwind { ref mut unwind, .. }\n             | TerminatorKind::InlineAsm { cleanup: ref mut unwind, .. } => Some(unwind),\n@@ -309,9 +303,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Yield { value, resume_arg, .. } => write!(fmt, \"{:?} = yield({:?})\", resume_arg, value),\n             Unreachable => write!(fmt, \"unreachable\"),\n             Drop { place, .. } => write!(fmt, \"drop({:?})\", place),\n-            DropAndReplace { place, value, .. } => {\n-                write!(fmt, \"replace({:?} <- {:?})\", place, value)\n-            }\n             Call { func, args, destination, .. } => {\n                 write!(fmt, \"{:?} = \", destination)?;\n                 write!(fmt, \"{:?}(\", func)?;\n@@ -403,10 +394,10 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Call { target: None, cleanup: None, .. } => vec![],\n             Yield { drop: Some(_), .. } => vec![\"resume\".into(), \"drop\".into()],\n             Yield { drop: None, .. } => vec![\"resume\".into()],\n-            DropAndReplace { unwind: None, .. } | Drop { unwind: None, .. } => {\n+            Drop { unwind: None, .. } => {\n                 vec![\"return\".into()]\n             }\n-            DropAndReplace { unwind: Some(_), .. } | Drop { unwind: Some(_), .. } => {\n+            Drop { unwind: Some(_), .. } => {\n                 vec![\"return\".into(), \"unwind\".into()]\n             }\n             Assert { cleanup: None, .. } => vec![\"\".into()],"}, {"sha": "14b18618aa8d8d57e43b55dcbf265052846349a5", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -495,20 +495,6 @@ macro_rules! make_mir_visitor {\n                         );\n                     }\n \n-                    TerminatorKind::DropAndReplace {\n-                        place,\n-                        value,\n-                        target: _,\n-                        unwind: _,\n-                    } => {\n-                        self.visit_place(\n-                            place,\n-                            PlaceContext::MutatingUse(MutatingUseContext::Drop),\n-                            location\n-                        );\n-                        self.visit_operand(value, location);\n-                    }\n-\n                     TerminatorKind::Call {\n                         func,\n                         args,"}, {"sha": "5e77f2dc1268dbe16fdad7ef2d756392f7b0de61", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -59,14 +59,6 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n                     unwind: None,\n                 })\n             },\n-            @call(\"mir_drop_and_replace\", args) => {\n-                Ok(TerminatorKind::DropAndReplace {\n-                    place: self.parse_place(args[0])?,\n-                    value: self.parse_operand(args[1])?,\n-                    target: self.parse_block(args[2])?,\n-                    unwind: None,\n-                })\n-            },\n             @call(\"mir_call\", args) => {\n                 let destination = self.parse_place(args[0])?;\n                 let target = self.parse_block(args[1])?;"}, {"sha": "4bc2c0ca791e6a305744ce47d866110538b30644", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1072,7 +1072,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 TerminatorKind::Assert { .. }\n                     | TerminatorKind::Call { .. }\n                     | TerminatorKind::Drop { .. }\n-                    | TerminatorKind::DropAndReplace { .. }\n                     | TerminatorKind::FalseUnwind { .. }\n                     | TerminatorKind::InlineAsm { .. }\n             ),\n@@ -1432,8 +1431,7 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n                     *unwind = Some(to);\n                 }\n             }\n-            TerminatorKind::DropAndReplace { unwind, .. }\n-            | TerminatorKind::FalseUnwind { unwind, .. }\n+            TerminatorKind::FalseUnwind { unwind, .. }\n             | TerminatorKind::Call { cleanup: unwind, .. }\n             | TerminatorKind::Assert { cleanup: unwind, .. }\n             | TerminatorKind::InlineAsm { cleanup: unwind, .. } => {"}, {"sha": "f6db329fd7cfe9820f220bf5cd79337e8a62b20a", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -128,7 +128,6 @@ impl<'mir, 'tcx> TriColorVisitor<BasicBlocks<'tcx>> for Search<'mir, 'tcx> {\n             TerminatorKind::Assert { .. }\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Goto { .. }"}, {"sha": "a40c38aa4c3334ed9e721cacbb6802c005f81030", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -480,7 +480,6 @@ impl Direction for Forward {\n \n             Assert { target, cleanup: unwind, expected: _, msg: _, cond: _ }\n             | Drop { target, unwind, place: _ }\n-            | DropAndReplace { target, unwind, value: _, place: _ }\n             | FalseUnwind { real_target: target, unwind } => {\n                 if let Some(unwind) = unwind {\n                     propagate(unwind, exit_state);"}, {"sha": "08fadfe68a17a2ad848cb81a6b11df415b0ab13a", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -111,8 +111,7 @@ where\n         self.super_terminator(terminator, location);\n \n         match terminator.kind {\n-            mir::TerminatorKind::Drop { place: dropped_place, .. }\n-            | mir::TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n+            mir::TerminatorKind::Drop { place: dropped_place, .. } => {\n                 // Drop terminators may call custom drop glue (`Drop::drop`), which takes `&mut\n                 // self` as a parameter. In the general case, a drop impl could launder that\n                 // reference into the surrounding environment through a raw pointer, thus creating"}, {"sha": "60fd5169054d316bc13d3eb2f643d1853414c944", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -202,7 +202,6 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             TerminatorKind::Abort\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::GeneratorDrop\n@@ -240,7 +239,6 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             | TerminatorKind::Abort\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::GeneratorDrop"}, {"sha": "fa62960eee0ffb7ff2455238211a8531ee94a142", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -392,11 +392,6 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 self.create_move_path(place);\n                 self.gather_init(place.as_ref(), InitKind::Deep);\n             }\n-            TerminatorKind::DropAndReplace { place, ref value, .. } => {\n-                self.create_move_path(place);\n-                self.gather_operand(value);\n-                self.gather_init(place.as_ref(), InitKind::Deep);\n-            }\n             TerminatorKind::Call {\n                 ref func,\n                 ref args,"}, {"sha": "b1474a770c59d7e044ee76a3254f3bac76264602", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -230,7 +230,7 @@ pub trait ValueAnalysis<'tcx> {\n             TerminatorKind::Drop { place, .. } => {\n                 state.flood_with(place.as_ref(), self.map(), Self::Value::bottom());\n             }\n-            TerminatorKind::DropAndReplace { .. } | TerminatorKind::Yield { .. } => {\n+            TerminatorKind::Yield { .. } => {\n                 // They would have an effect, but are not allowed in this phase.\n                 bug!(\"encountered disallowed terminator\");\n             }"}, {"sha": "893018e0d8e7370751e8da6155976339eaa02b85", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n                     };\n                     layout::fn_can_unwind(tcx, fn_def_id, sig.abi())\n                 }\n-                TerminatorKind::Drop { .. } | TerminatorKind::DropAndReplace { .. } => {\n+                TerminatorKind::Drop { .. } => {\n                     tcx.sess.opts.unstable_opts.panic_in_drop == PanicStrategy::Unwind\n                         && layout::fn_can_unwind(tcx, None, Abi::Rust)\n                 }"}, {"sha": "896fcd9cdd6086a9aae2b3e1964e22f76b974c30", "filename": "compiler/rustc_mir_transform/src/add_moves_for_packed_drops.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -64,9 +64,6 @@ fn add_moves_for_packed_drops_patch<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>)\n             {\n                 add_move_for_packed_drop(tcx, body, &mut patch, terminator, loc, data.is_cleanup);\n             }\n-            TerminatorKind::DropAndReplace { .. } => {\n-                span_bug!(terminator.source_info.span, \"replace in AddMovesForPackedDrops\");\n-            }\n             _ => {}\n         }\n     }"}, {"sha": "916f2904dda809e40a5eaf6c6249c09669e61d70", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -100,7 +100,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                     }\n \n                     // `Drop` is also a call, but it doesn't return anything so we are good.\n-                    TerminatorKind::Drop { .. } | TerminatorKind::DropAndReplace { .. } => None,\n+                    TerminatorKind::Drop { .. } => None,\n                     // Not a block ending in a Call -> ignore.\n                     _ => None,\n                 }"}, {"sha": "c61947c566d7c5a95677cbf4d92c4d4e6aa85dfc", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -55,7 +55,6 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::Assert { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Resume\n             | TerminatorKind::Abort"}, {"sha": "9bc4b26db92ebd34a5fd6c4406cf5281479de17d", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1007,7 +1007,6 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }"}, {"sha": "77402b8737e24141149c55716448b0039b90ed78", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -686,7 +686,6 @@ impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }"}, {"sha": "0e7dc171a5d0c456a64869012875d89e16e71f16", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -822,7 +822,6 @@ pub(super) fn term_type(kind: &TerminatorKind<'_>) -> &'static str {\n         TerminatorKind::Return => \"Return\",\n         TerminatorKind::Unreachable => \"Unreachable\",\n         TerminatorKind::Drop { .. } => \"Drop\",\n-        TerminatorKind::DropAndReplace { .. } => \"DropAndReplace\",\n         TerminatorKind::Call { .. } => \"Call\",\n         TerminatorKind::Assert { .. } => \"Assert\",\n         TerminatorKind::Yield { .. } => \"Yield\","}, {"sha": "c03cacd8615e397a7f1550c69e339119ed88ea79", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -156,7 +156,6 @@ impl CoverageGraph {\n                 | TerminatorKind::Resume\n                 | TerminatorKind::Unreachable\n                 | TerminatorKind::Drop { .. }\n-                | TerminatorKind::DropAndReplace { .. }\n                 | TerminatorKind::Call { .. }\n                 | TerminatorKind::GeneratorDrop\n                 | TerminatorKind::Assert { .. }"}, {"sha": "d9f68f5d93acc47f8601b27b763f5ce8f7c8d855", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -850,7 +850,6 @@ pub(super) fn filtered_terminator_span(terminator: &Terminator<'_>) -> Option<Sp\n         TerminatorKind::Unreachable // Unreachable blocks are not connected to the MIR CFG\n         | TerminatorKind::Assert { .. }\n         | TerminatorKind::Drop { .. }\n-        | TerminatorKind::DropAndReplace { .. }\n         | TerminatorKind::SwitchInt { .. }\n         // For `FalseEdge`, only the `real` branch is taken, so it is similar to a `Goto`.\n         | TerminatorKind::FalseEdge { .. }"}, {"sha": "aded8039dc313522ca86f91b13aae7a1904c9857", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -86,7 +86,6 @@ impl<'tcx> MockBlocks<'tcx> {\n             TerminatorKind::Assert { ref mut target, .. }\n             | TerminatorKind::Call { target: Some(ref mut target), .. }\n             | TerminatorKind::Drop { ref mut target, .. }\n-            | TerminatorKind::DropAndReplace { ref mut target, .. }\n             | TerminatorKind::FalseEdge { real_target: ref mut target, .. }\n             | TerminatorKind::FalseUnwind { real_target: ref mut target, .. }\n             | TerminatorKind::Goto { ref mut target }\n@@ -184,7 +183,6 @@ fn debug_basic_blocks(mir_body: &Body<'_>) -> String {\n                     TerminatorKind::Assert { target, .. }\n                     | TerminatorKind::Call { target: Some(target), .. }\n                     | TerminatorKind::Drop { target, .. }\n-                    | TerminatorKind::DropAndReplace { target, .. }\n                     | TerminatorKind::FalseEdge { real_target: target, .. }\n                     | TerminatorKind::FalseUnwind { real_target: target, .. }\n                     | TerminatorKind::Goto { target }"}, {"sha": "3823b6201c3477685071998fff5805852bd66928", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -650,8 +650,7 @@ impl WriteInfo {\n             TerminatorKind::Drop { .. } => {\n                 // `Drop`s create a `&mut` and so are not considered\n             }\n-            TerminatorKind::DropAndReplace { .. }\n-            | TerminatorKind::Yield { .. }\n+            TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. } => {"}, {"sha": "3faccca823a576fd22a1512626d8c83ec1f0dc27", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 114, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -18,15 +18,14 @@ use rustc_span::{DesugaringKind, Span};\n use rustc_target::abi::VariantIdx;\n use std::fmt;\n \n-/// During MIR building, Drop and DropAndReplace terminators are inserted in every place where a drop may occur.\n+/// During MIR building, Drop terminators are inserted in every place where a drop may occur.\n /// However, in this phase, the presence of these terminators does not guarantee that a destructor will run,\n /// as the target of the drop may be uninitialized.\n /// In general, the compiler cannot determine at compile time whether a destructor will run or not.\n ///\n-/// At a high level, this pass refines Drop and DropAndReplace to only run the destructor if the\n+/// At a high level, this pass refines Drop to only run the destructor if the\n /// target is initialized. The way this is achievied is by inserting drop flags for every variable\n /// that may be dropped, and then using those flags to determine whether a destructor should run.\n-/// This pass also removes DropAndReplace, replacing it with a Drop paired with an assign statement.\n /// Once this is complete, Drop terminators in the MIR correspond to a call to the \"drop glue\" or\n /// \"drop shim\" for the type of the dropped place.\n ///\n@@ -121,8 +120,7 @@ fn remove_dead_unwinds<'tcx>(\n         .into_results_cursor(body);\n     for (bb, bb_data) in body.basic_blocks.iter_enumerated() {\n         let place = match bb_data.terminator().kind {\n-            TerminatorKind::Drop { ref place, unwind: Some(_), .. }\n-            | TerminatorKind::DropAndReplace { ref place, unwind: Some(_), .. } => {\n+            TerminatorKind::Drop { ref place, unwind: Some(_), .. } => {\n                 und.derefer(place.as_ref(), body).unwrap_or(*place)\n             }\n             _ => continue,\n@@ -343,8 +341,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             }\n             let terminator = data.terminator();\n             let place = match terminator.kind {\n-                TerminatorKind::Drop { ref place, .. }\n-                | TerminatorKind::DropAndReplace { ref place, .. } => {\n+                TerminatorKind::Drop { ref place, .. } => {\n                     self.un_derefer.derefer(place.as_ref(), self.body).unwrap_or(*place)\n                 }\n                 _ => continue,\n@@ -441,103 +438,11 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                         }\n                     }\n                 }\n-                TerminatorKind::DropAndReplace { mut place, ref value, target, unwind } => {\n-                    assert!(!data.is_cleanup);\n-\n-                    if let Some(new_place) = self.un_derefer.derefer(place.as_ref(), self.body) {\n-                        place = new_place;\n-                    }\n-                    self.elaborate_replace(loc, place, value, target, unwind);\n-                }\n                 _ => continue,\n             }\n         }\n     }\n \n-    /// Elaborate a MIR `replace` terminator. This instruction\n-    /// is not directly handled by codegen, and therefore\n-    /// must be desugared.\n-    ///\n-    /// The desugaring drops the location if needed, and then writes\n-    /// the value (including setting the drop flag) over it in *both* arms.\n-    ///\n-    /// The `replace` terminator can also be called on places that\n-    /// are not tracked by elaboration (for example,\n-    /// `replace x[i] <- tmp0`). The borrow checker requires that\n-    /// these locations are initialized before the assignment,\n-    /// so we just generate an unconditional drop.\n-    fn elaborate_replace(\n-        &mut self,\n-        loc: Location,\n-        place: Place<'tcx>,\n-        value: &Operand<'tcx>,\n-        target: BasicBlock,\n-        unwind: Option<BasicBlock>,\n-    ) {\n-        let bb = loc.block;\n-        let data = &self.body[bb];\n-        let terminator = data.terminator();\n-        assert!(!data.is_cleanup, \"DropAndReplace in unwind path not supported\");\n-\n-        let assign = Statement {\n-            kind: StatementKind::Assign(Box::new((place, Rvalue::Use(value.clone())))),\n-            source_info: terminator.source_info,\n-        };\n-\n-        let unwind = unwind.unwrap_or_else(|| self.patch.resume_block());\n-        let unwind = self.patch.new_block(BasicBlockData {\n-            statements: vec![assign.clone()],\n-            terminator: Some(Terminator {\n-                kind: TerminatorKind::Goto { target: unwind },\n-                ..*terminator\n-            }),\n-            is_cleanup: true,\n-        });\n-\n-        let target = self.patch.new_block(BasicBlockData {\n-            statements: vec![assign],\n-            terminator: Some(Terminator { kind: TerminatorKind::Goto { target }, ..*terminator }),\n-            is_cleanup: false,\n-        });\n-\n-        match self.move_data().rev_lookup.find(place.as_ref()) {\n-            LookupResult::Exact(path) => {\n-                debug!(\"elaborate_drop_and_replace({:?}) - tracked {:?}\", terminator, path);\n-                self.init_data.seek_before(loc);\n-                elaborate_drop(\n-                    &mut Elaborator { ctxt: self },\n-                    terminator.source_info,\n-                    place,\n-                    path,\n-                    target,\n-                    Unwind::To(unwind),\n-                    bb,\n-                );\n-                on_all_children_bits(self.tcx, self.body, self.move_data(), path, |child| {\n-                    self.set_drop_flag(\n-                        Location { block: target, statement_index: 0 },\n-                        child,\n-                        DropFlagState::Present,\n-                    );\n-                    self.set_drop_flag(\n-                        Location { block: unwind, statement_index: 0 },\n-                        child,\n-                        DropFlagState::Present,\n-                    );\n-                });\n-            }\n-            LookupResult::Parent(parent) => {\n-                // drop and replace behind a pointer/array/whatever. The location\n-                // must be initialized.\n-                debug!(\"elaborate_drop_and_replace({:?}) - untracked {:?}\", terminator, parent);\n-                self.patch.patch_terminator(\n-                    bb,\n-                    TerminatorKind::Drop { place, target, unwind: Some(unwind) },\n-                );\n-            }\n-        }\n-    }\n-\n     fn constant_bool(&self, span: Span, val: bool) -> Rvalue<'tcx> {\n         Rvalue::Use(Operand::Constant(Box::new(Constant {\n             span,\n@@ -609,22 +514,12 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             debug!(\"drop_flags_for_locs({:?})\", data);\n             for i in 0..(data.statements.len() + 1) {\n                 debug!(\"drop_flag_for_locs: stmt {}\", i);\n-                let mut allow_initializations = true;\n                 if i == data.statements.len() {\n                     match data.terminator().kind {\n                         TerminatorKind::Drop { .. } => {\n                             // drop elaboration should handle that by itself\n                             continue;\n                         }\n-                        TerminatorKind::DropAndReplace { .. } => {\n-                            // this contains the move of the source and\n-                            // the initialization of the destination. We\n-                            // only want the former - the latter is handled\n-                            // by the elaboration code and must be done\n-                            // *after* the destination is dropped.\n-                            assert!(self.patch.is_patched(bb));\n-                            allow_initializations = false;\n-                        }\n                         TerminatorKind::Resume => {\n                             // It is possible for `Resume` to be patched\n                             // (in particular it can be patched to be replaced with\n@@ -641,11 +536,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                     self.body,\n                     self.env,\n                     loc,\n-                    |path, ds| {\n-                        if ds == DropFlagState::Absent || allow_initializations {\n-                            self.set_drop_flag(loc, path, ds)\n-                        }\n-                    },\n+                    |path, ds| self.set_drop_flag(loc, path, ds),\n                 )\n             }\n "}, {"sha": "129f366bcd0b0d3b9e8a76bf44a381cd2aa06a20", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1199,7 +1199,6 @@ fn can_unwind<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n \n             // These may unwind.\n             TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::InlineAsm { .. }\n             | TerminatorKind::Assert { .. } => return true,\n@@ -1691,7 +1690,6 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }"}, {"sha": "9cba8870f2377a6482a742f2930163c11818f4f4", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -453,9 +453,7 @@ impl<'tcx> Inliner<'tcx> {\n             checker.visit_basic_block_data(bb, blk);\n \n             let term = blk.terminator();\n-            if let TerminatorKind::Drop { ref place, target, unwind }\n-            | TerminatorKind::DropAndReplace { ref place, target, unwind, .. } = term.kind\n-            {\n+            if let TerminatorKind::Drop { ref place, target, unwind } = term.kind {\n                 work_list.push(target);\n \n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n@@ -815,8 +813,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         let tcx = self.tcx;\n         match terminator.kind {\n-            TerminatorKind::Drop { ref place, unwind, .. }\n-            | TerminatorKind::DropAndReplace { ref place, unwind, .. } => {\n+            TerminatorKind::Drop { ref place, unwind, .. } => {\n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n                 let ty = self.instance.subst_mir(tcx, &place.ty(self.callee_body, tcx).ty);\n                 if ty.needs_drop(tcx, self.param_env) {\n@@ -1120,8 +1117,7 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n                     *tgt = self.map_block(*tgt);\n                 }\n             }\n-            TerminatorKind::Drop { ref mut target, ref mut unwind, .. }\n-            | TerminatorKind::DropAndReplace { ref mut target, ref mut unwind, .. } => {\n+            TerminatorKind::Drop { ref mut target, ref mut unwind, .. } => {\n                 *target = self.map_block(*target);\n                 *unwind = self.map_unwind(*unwind);\n             }"}, {"sha": "6c067f45299294bc564f13859eac2ae0aaaf6390", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -75,7 +75,6 @@ impl RemoveNoopLandingPads {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Assert { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::InlineAsm { .. } => false,\n         }"}, {"sha": "e72729b152e69b2214c3348492efa4130d96969a", "filename": "compiler/rustc_mir_transform/src/remove_uninit_drops.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1,5 +1,5 @@\n use rustc_index::bit_set::ChunkedBitSet;\n-use rustc_middle::mir::{Body, Field, Rvalue, Statement, StatementKind, TerminatorKind};\n+use rustc_middle::mir::{Body, Field, TerminatorKind};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, VariantDef};\n use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n@@ -8,7 +8,7 @@ use rustc_mir_dataflow::{self, move_path_children_matching, Analysis, MoveDataPa\n \n use crate::MirPass;\n \n-/// Removes `Drop` and `DropAndReplace` terminators whose target is known to be uninitialized at\n+/// Removes `Drop` terminators whose target is known to be uninitialized at\n /// that point.\n ///\n /// This is redundant with drop elaboration, but we need to do it prior to const-checking, and\n@@ -37,8 +37,7 @@ impl<'tcx> MirPass<'tcx> for RemoveUninitDrops {\n         let mut to_remove = vec![];\n         for (bb, block) in body.basic_blocks.iter_enumerated() {\n             let terminator = block.terminator();\n-            let (TerminatorKind::Drop { place, .. } | TerminatorKind::DropAndReplace { place, .. })\n-                = &terminator.kind\n+            let TerminatorKind::Drop { place, .. } = &terminator.kind\n             else { continue };\n \n             maybe_inits.seek_before_primary_effect(body.terminator_loc(bb));\n@@ -64,24 +63,12 @@ impl<'tcx> MirPass<'tcx> for RemoveUninitDrops {\n         for bb in to_remove {\n             let block = &mut body.basic_blocks_mut()[bb];\n \n-            let (TerminatorKind::Drop { target, .. } | TerminatorKind::DropAndReplace { target, .. })\n+            let TerminatorKind::Drop { target, .. }\n                 = &block.terminator().kind\n             else { unreachable!() };\n \n             // Replace block terminator with `Goto`.\n-            let target = *target;\n-            let old_terminator_kind = std::mem::replace(\n-                &mut block.terminator_mut().kind,\n-                TerminatorKind::Goto { target },\n-            );\n-\n-            // If this is a `DropAndReplace`, we need to emulate the assignment to the return place.\n-            if let TerminatorKind::DropAndReplace { place, value, .. } = old_terminator_kind {\n-                block.statements.push(Statement {\n-                    source_info: block.terminator().source_info,\n-                    kind: StatementKind::Assign(Box::new((place, Rvalue::Use(value)))),\n-                });\n-            }\n+            block.terminator_mut().kind = TerminatorKind::Goto { target: *target };\n         }\n     }\n }"}, {"sha": "c3f5b881ab8b22f430d7646a9bd911c8addb39cc", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -108,7 +108,6 @@ pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n                         // The following terminators are not allowed\n                         TerminatorKind::Resume\n                         | TerminatorKind::Drop { .. }\n-                        | TerminatorKind::DropAndReplace { .. }\n                         | TerminatorKind::Call { .. }\n                         | TerminatorKind::Assert { .. }\n                         | TerminatorKind::FalseUnwind { .. }\n@@ -170,7 +169,6 @@ pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Assert { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::Call { .. }"}, {"sha": "f529944acce63a7b142b5009f3dbf08f2815e7a6", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -808,8 +808,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 let callee_ty = self.monomorphize(callee_ty);\n                 visit_fn_use(self.tcx, callee_ty, true, source, &mut self.output)\n             }\n-            mir::TerminatorKind::Drop { ref place, .. }\n-            | mir::TerminatorKind::DropAndReplace { ref place, .. } => {\n+            mir::TerminatorKind::Drop { ref place, .. } => {\n                 let ty = place.ty(self.body, self.tcx).ty;\n                 let ty = self.monomorphize(ty);\n                 visit_drop_use(self.tcx, ty, true, source, self.output);"}, {"sha": "981a8f45e4542f8f7b78cfdb704a7dcdf8151dba", "filename": "compiler/rustc_trait_selection/src/solve/canonical/canonicalize.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fcanonicalize.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -261,12 +261,23 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n         self.interner().mk_re_late_bound(self.binder_index, br)\n     }\n \n-    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+    fn fold_ty(&mut self, mut t: Ty<'tcx>) -> Ty<'tcx> {\n         let kind = match *t.kind() {\n-            ty::Infer(ty::TyVar(vid)) => match self.infcx.probe_ty_var(vid) {\n-                Ok(t) => return self.fold_ty(t),\n-                Err(ui) => CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),\n-            },\n+            ty::Infer(ty::TyVar(mut vid)) => {\n+                // We need to canonicalize the *root* of our ty var.\n+                // This is so that our canonical response correctly reflects\n+                // any equated inference vars correctly!\n+                let root_vid = self.infcx.root_var(vid);\n+                if root_vid != vid {\n+                    t = self.infcx.tcx.mk_ty_var(root_vid);\n+                    vid = root_vid;\n+                }\n+\n+                match self.infcx.probe_ty_var(vid) {\n+                    Ok(t) => return self.fold_ty(t),\n+                    Err(ui) => CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),\n+                }\n+            }\n             ty::Infer(ty::IntVar(_)) => {\n                 let nt = self.infcx.shallow_resolve(t);\n                 if nt != t {\n@@ -338,13 +349,23 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n         self.interner().mk_bound(self.binder_index, bt)\n     }\n \n-    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+    fn fold_const(&mut self, mut c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         let kind = match c.kind() {\n-            ty::ConstKind::Infer(ty::InferConst::Var(vid)) => match self.infcx.probe_const_var(vid)\n-            {\n-                Ok(c) => return self.fold_const(c),\n-                Err(universe) => CanonicalVarKind::Const(universe, c.ty()),\n-            },\n+            ty::ConstKind::Infer(ty::InferConst::Var(mut vid)) => {\n+                // We need to canonicalize the *root* of our const var.\n+                // This is so that our canonical response correctly reflects\n+                // any equated inference vars correctly!\n+                let root_vid = self.infcx.root_const_var(vid);\n+                if root_vid != vid {\n+                    c = self.infcx.tcx.mk_const(ty::InferConst::Var(root_vid), c.ty());\n+                    vid = root_vid;\n+                }\n+\n+                match self.infcx.probe_const_var(vid) {\n+                    Ok(c) => return self.fold_const(c),\n+                    Err(universe) => CanonicalVarKind::Const(universe, c.ty()),\n+                }\n+            }\n             ty::ConstKind::Infer(ty::InferConst::Fresh(_)) => {\n                 bug!(\"fresh var during canonicalization: {c:?}\")\n             }"}, {"sha": "43fd415e871e18dcdd2ba31c647bb27d66596323", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -238,6 +238,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             && has_changed\n             && !self.in_projection_eq_hack\n             && !self.search_graph.in_cycle()\n+            && false\n         {\n             let (_orig_values, canonical_goal) = self.canonicalize_goal(goal);\n             let canonical_response ="}, {"sha": "62bad5b49b4607090469034824897562a948f9bd", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -155,10 +155,12 @@ fn pred_known_to_hold_modulo_regions<'tcx>(\n         predicate: pred.to_predicate(infcx.tcx),\n     };\n \n-    let result = infcx.predicate_must_hold_modulo_regions(&obligation);\n+    let result = infcx.evaluate_obligation_no_overflow(&obligation);\n     debug!(?result);\n \n-    if result && has_non_region_infer {\n+    if result.must_apply_modulo_regions() && !has_non_region_infer {\n+        true\n+    } else if result.may_apply() {\n         // Because of inference \"guessing\", selection can sometimes claim\n         // to succeed while the success requires a guess. To ensure\n         // this function's result remains infallible, we must confirm\n@@ -179,7 +181,7 @@ fn pred_known_to_hold_modulo_regions<'tcx>(\n             }\n         }\n     } else {\n-        result\n+        false\n     }\n }\n "}, {"sha": "d2d9771bdce2eee6e85bcc70c8db11de97cf084a", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -227,7 +227,7 @@\n //! are no resume and abort terminators, and terminators that might unwind do not have any way to\n //! indicate the unwind block.\n //!\n-//!  - [`Goto`], [`Return`], [`Unreachable`], [`Drop`](Drop()), and [`DropAndReplace`] have associated functions.\n+//!  - [`Goto`], [`Return`], [`Unreachable`] and [`Drop`](Drop()) have associated functions.\n //!  - `match some_int_operand` becomes a `SwitchInt`. Each arm should be `literal => basic_block`\n //!     - The exception is the last arm, which must be `_ => basic_block` and corresponds to the\n //!       otherwise branch.\n@@ -259,7 +259,6 @@ define!(\"mir_return\", fn Return() -> BasicBlock);\n define!(\"mir_goto\", fn Goto(destination: BasicBlock) -> BasicBlock);\n define!(\"mir_unreachable\", fn Unreachable() -> BasicBlock);\n define!(\"mir_drop\", fn Drop<T>(place: T, goto: BasicBlock));\n-define!(\"mir_drop_and_replace\", fn DropAndReplace<T>(place: T, value: T, goto: BasicBlock));\n define!(\"mir_call\", fn Call<T>(place: T, goto: BasicBlock, call: T));\n define!(\"mir_storage_live\", fn StorageLive<T>(local: T));\n define!(\"mir_storage_dead\", fn StorageDead<T>(local: T));"}, {"sha": "47d742ef7964d06f4bb02a952808f6a3ad77f3a6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1721,6 +1721,15 @@ impl<'a> Builder<'a> {\n \n         cargo.env(\"RUSTC_VERBOSE\", self.verbosity.to_string());\n \n+        // Downstream forks of the Rust compiler might want to use a custom libc to add support for\n+        // targets that are not yet available upstream. Adding a patch to replace libc with a\n+        // custom one would cause compilation errors though, because Cargo would interpret the\n+        // custom libc as part of the workspace, and apply the check-cfg lints on it.\n+        //\n+        // The libc build script emits check-cfg flags only when this environment variable is set,\n+        // so this line allows the use of custom libcs.\n+        cargo.env(\"LIBC_CHECK_CFG\", \"1\");\n+\n         if source_type == SourceType::InTree {\n             let mut lint_flags = Vec::new();\n             // When extending this list, add the new lints to the RUSTFLAGS of the"}, {"sha": "c00800291dbd3074abc06e5f9e0cb3b761b9dd72", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -299,10 +299,6 @@ fn check_terminator<'tcx>(\n         | TerminatorKind::Unreachable => Ok(()),\n \n         TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span, body),\n-        TerminatorKind::DropAndReplace { place, value, .. } => {\n-            check_place(tcx, *place, span, body)?;\n-            check_operand(tcx, value, span, body)\n-        },\n \n         TerminatorKind::SwitchInt { discr, targets: _ } => check_operand(tcx, discr, span, body),\n "}, {"sha": "80bfd38d1e961aa4dd70aa0b683d12891081cec6", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -31,7 +31,7 @@ function isNumeric(s) {\n }\n \n function parseOptions(args) {\n-    var opts = {\n+    const opts = {\n         \"doc_folder\": \"\",\n         \"tests_folder\": \"\",\n         \"files\": [],\n@@ -42,7 +42,7 @@ function parseOptions(args) {\n         \"executable_path\": null,\n         \"no_sandbox\": false,\n     };\n-    var correspondances = {\n+    const correspondances = {\n         \"--doc-folder\": \"doc_folder\",\n         \"--tests-folder\": \"tests_folder\",\n         \"--debug\": \"debug\",\n@@ -52,39 +52,41 @@ function parseOptions(args) {\n         \"--no-sandbox\": \"no_sandbox\",\n     };\n \n-    for (var i = 0; i < args.length; ++i) {\n-        if (args[i] === \"--doc-folder\"\n-            || args[i] === \"--tests-folder\"\n-            || args[i] === \"--file\"\n-            || args[i] === \"--jobs\"\n-            || args[i] === \"--executable-path\") {\n+    for (let i = 0; i < args.length; ++i) {\n+        const arg = args[i];\n+        if (arg === \"--doc-folder\"\n+            || arg === \"--tests-folder\"\n+            || arg === \"--file\"\n+            || arg === \"--jobs\"\n+            || arg === \"--executable-path\") {\n             i += 1;\n             if (i >= args.length) {\n-                console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n+                console.log(\"Missing argument after `\" + arg + \"` option.\");\n                 return null;\n             }\n-            if (args[i - 1] === \"--jobs\") {\n-                if (!isNumeric(args[i])) {\n+            const arg_value = args[i];\n+            if (arg === \"--jobs\") {\n+                if (!isNumeric(arg_value)) {\n                     console.log(\n-                        \"`--jobs` option expects a positive number, found `\" + args[i] + \"`\");\n+                        \"`--jobs` option expects a positive number, found `\" + arg_value + \"`\");\n                     return null;\n                 }\n-                opts[\"jobs\"] = parseInt(args[i]);\n-            } else if (args[i - 1] !== \"--file\") {\n-                opts[correspondances[args[i - 1]]] = args[i];\n+                opts[\"jobs\"] = parseInt(arg_value);\n+            } else if (arg !== \"--file\") {\n+                opts[correspondances[arg]] = arg_value;\n             } else {\n-                opts[\"files\"].push(args[i]);\n+                opts[\"files\"].push(arg_value);\n             }\n-        } else if (args[i] === \"--help\") {\n+        } else if (arg === \"--help\") {\n             showHelp();\n             process.exit(0);\n-        } else if (args[i] === \"--no-sandbox\") {\n+        } else if (arg === \"--no-sandbox\") {\n             console.log(\"`--no-sandbox` is being used. Be very careful!\");\n-            opts[correspondances[args[i]]] = true;\n-        } else if (correspondances[args[i]]) {\n-            opts[correspondances[args[i]]] = true;\n+            opts[correspondances[arg]] = true;\n+        } else if (correspondances[arg]) {\n+            opts[correspondances[arg]] = true;\n         } else {\n-            console.log(\"Unknown option `\" + args[i] + \"`.\");\n+            console.log(\"Unknown option `\" + arg + \"`.\");\n             console.log(\"Use `--help` to see the list of options\");\n             return null;\n         }\n@@ -186,7 +188,7 @@ function createEmptyResults() {\n }\n \n async function main(argv) {\n-    let opts = parseOptions(argv.slice(2));\n+    const opts = parseOptions(argv.slice(2));\n     if (opts === null) {\n         process.exit(1);\n     }"}, {"sha": "ada78c0fc782eaa0e9d6b307c9a07f16598fc161", "filename": "tests/mir-opt/building/custom/terminators.drop_first.built.after.mir", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -4,10 +4,11 @@ fn drop_first(_1: WriteOnDrop<'_>, _2: WriteOnDrop<'_>) -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/terminators.rs:+0:59: +0:59\n \n     bb0: {\n-        replace(_1 <- move _2) -> bb1;   // scope 0 at $DIR/terminators.rs:+3:13: +3:49\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/terminators.rs:+3:13: +3:30\n     }\n \n     bb1: {\n-        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+        _1 = move _2;                    // scope 0 at $DIR/terminators.rs:+7:13: +7:24\n+        return;                          // scope 0 at $DIR/terminators.rs:+8:13: +8:21\n     }\n }"}, {"sha": "f12405661685b6063a6dd42f664c269f34fc7658", "filename": "tests/mir-opt/building/custom/terminators.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -48,10 +48,11 @@ impl<'a> Drop for WriteOnDrop<'a> {\n fn drop_first<'a>(a: WriteOnDrop<'a>, b: WriteOnDrop<'a>) {\n     mir!(\n         {\n-            DropAndReplace(a, Move(b), retblock)\n+            Drop(a, retblock)\n         }\n \n         retblock = {\n+            a = Move(b);\n             Return()\n         }\n     )"}, {"sha": "d1c6b1077e8efd0d2d35cb3b1c60abd8c75b7b00", "filename": "tests/ui/traits/new-solver/canonical-ty-var-eq-in-response.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Ftraits%2Fnew-solver%2Fcanonical-ty-var-eq-in-response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Ftraits%2Fnew-solver%2Fcanonical-ty-var-eq-in-response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fcanonical-ty-var-eq-in-response.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+\n+trait Mirror {\n+    type Item;\n+}\n+\n+struct Wrapper<T>(T);\n+impl<T> Mirror for Wrapper<T> {\n+    type Item = T;\n+}\n+\n+fn mirror<T>()\n+where\n+    Wrapper<T>: Mirror<Item = i32>,\n+{\n+}\n+\n+fn main() {\n+    mirror::<_ /* ?0 */>();\n+\n+    // Solving `<Wrapper<?0> as Mirror>::Item = i32`\n+\n+    // First, we replace the term with a fresh infer var:\n+    // `<Wrapper<?0> as Mirror>::Item = ?1`\n+\n+    // We select the impl candidate on line #6, which leads us to learn that\n+    // `?0 == ?1`.\n+\n+    // That should be reflected in our canonical response, which should have\n+    // `^0 = ^0, ^1 = ^0`\n+    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n+    // !! We used to return a totally unconstrained response here :< !!\n+    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n+\n+    // Then, during the \"equate term\" part of the projection solving, we\n+    // instantiate the response from the unconstrained projection predicate,\n+    // and equate `?0 == i32`.\n+}"}, {"sha": "7398bce7b61cfbd0792dce2ef8020faf67dc8e47", "filename": "tests/ui/traits/new-solver/deduce-ty-from-object.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Ftraits%2Fnew-solver%2Fdeduce-ty-from-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Ftraits%2Fnew-solver%2Fdeduce-ty-from-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fdeduce-ty-from-object.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -0,0 +1,6 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+\n+fn main() {\n+    let x: Box<dyn Iterator<Item = ()>> = Box::new(std::iter::empty());\n+}"}, {"sha": "bb4eccb4cf896a93124cca2db73635252399d7e2", "filename": "tests/ui/union/field_checks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Ffield_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Ffield_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Ffield_checks.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -21,15 +21,15 @@ union U24<T> { // OK\n }\n \n union U3 {\n-    a: String, //~ ERROR unions cannot contain fields that may need dropping\n+    a: String, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n union U32 { // field that does not drop but is not `Copy`, either\n-    a: std::cell::RefCell<i32>, //~ ERROR unions cannot contain fields that may need dropping\n+    a: std::cell::RefCell<i32>, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n union U4<T> {\n-    a: T, //~ ERROR unions cannot contain fields that may need dropping\n+    a: T, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n union U5 { // Having a drop impl is OK\n@@ -41,11 +41,11 @@ impl Drop for U5 {\n }\n \n union U5Nested { // a nested union that drops is NOT OK\n-    nest: U5, //~ ERROR unions cannot contain fields that may need dropping\n+    nest: U5, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n union U5Nested2 { // for now we don't special-case empty arrays\n-    nest: [U5; 0], //~ ERROR unions cannot contain fields that may need dropping\n+    nest: [U5; 0], //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n union U6 { // OK"}, {"sha": "32407a749709cd5b6885201d8536ff944dce9a7d", "filename": "tests/ui/union/field_checks.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Ffield_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Ffield_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Ffield_checks.stderr?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1,59 +1,59 @@\n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/field_checks.rs:24:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/field_checks.rs:28:5\n    |\n LL |     a: std::cell::RefCell<i32>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<std::cell::RefCell<i32>>,\n    |        +++++++++++++++++++++++                       +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/field_checks.rs:32:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/field_checks.rs:44:5\n    |\n LL |     nest: U5,\n    |     ^^^^^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     nest: std::mem::ManuallyDrop<U5>,\n    |           +++++++++++++++++++++++  +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/field_checks.rs:48:5\n    |\n LL |     nest: [U5; 0],\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     nest: std::mem::ManuallyDrop<[U5; 0]>,\n    |           +++++++++++++++++++++++       +"}, {"sha": "f7a82b4e7cf5d17ab806a44c4a9d893a1e0c0452", "filename": "tests/ui/union/issue-41073.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Fissue-41073.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Fissue-41073.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Fissue-41073.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1,5 +1,5 @@\n union Test {\n-    a: A, //~ ERROR unions cannot contain fields that may need dropping\n+    a: A, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n     b: B\n }\n "}, {"sha": "ae1c4dfed9a2340bb6c4825d16542b98a9cb3a64", "filename": "tests/ui/union/issue-41073.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Fissue-41073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Fissue-41073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Fissue-41073.stderr?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1,11 +1,11 @@\n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/issue-41073.rs:2:5\n    |\n LL |     a: A,\n    |     ^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<A>,\n    |        +++++++++++++++++++++++ +"}, {"sha": "9861a21cb3d8f5122068ad1de5e31007f6b9451a", "filename": "tests/ui/union/union-with-drop-fields.mirunsafeck.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1,35 +1,35 @@\n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/union-with-drop-fields.rs:11:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/union-with-drop-fields.rs:19:5\n    |\n LL |     a: S,\n    |     ^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<S>,\n    |        +++++++++++++++++++++++ +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/union-with-drop-fields.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +"}, {"sha": "9720830fb1ff2ca836e1c0b101f5d729b379c7db", "filename": "tests/ui/union/union-with-drop-fields.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Funion-with-drop-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Funion-with-drop-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-with-drop-fields.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -8,20 +8,20 @@ union U {\n }\n \n union W {\n-    a: String, //~ ERROR unions cannot contain fields that may need dropping\n+    a: String, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n     b: String, // OK, only one field is reported\n }\n \n struct S(String);\n \n // `S` doesn't implement `Drop` trait, but still has non-trivial destructor\n union Y {\n-    a: S, //~ ERROR unions cannot contain fields that may need dropping\n+    a: S, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n // We don't know if `T` is trivially-destructable or not until trans\n union J<T> {\n-    a: T, //~ ERROR unions cannot contain fields that may need dropping\n+    a: T, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n union H<T: Copy> {"}, {"sha": "9861a21cb3d8f5122068ad1de5e31007f6b9451a", "filename": "tests/ui/union/union-with-drop-fields.thirunsafeck.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -1,35 +1,35 @@\n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/union-with-drop-fields.rs:11:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/union-with-drop-fields.rs:19:5\n    |\n LL |     a: S,\n    |     ^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<S>,\n    |        +++++++++++++++++++++++ +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/union-with-drop-fields.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +"}, {"sha": "7a6d79b2faa8850df582a849e747ac0223017fe4", "filename": "tests/ui/union/unresolved-field-isnt-copy.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Funresolved-field-isnt-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Funresolved-field-isnt-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funresolved-field-isnt-copy.rs?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -0,0 +1,8 @@\n+// Unresolved fields are not copy, but also shouldn't report an extra E0740.\n+\n+pub union Foo {\n+    x: *const Missing,\n+    //~^ ERROR cannot find type `Missing` in this scope\n+}\n+\n+fn main() {}"}, {"sha": "22301582eefc7a0cd44bca76baf75a88f0ab93de", "filename": "tests/ui/union/unresolved-field-isnt-copy.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Funresolved-field-isnt-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f2657d1101b50f9b71ae460b762d330cc8426b/tests%2Fui%2Funion%2Funresolved-field-isnt-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funresolved-field-isnt-copy.stderr?ref=39f2657d1101b50f9b71ae460b762d330cc8426b", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `Missing` in this scope\n+  --> $DIR/unresolved-field-isnt-copy.rs:4:15\n+   |\n+LL |     x: *const Missing,\n+   |               ^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}]}