{"sha": "d5aed20f4712010585532b4de51918bd66ac4797", "node_id": "C_kwDOAAsO6NoAKGQ1YWVkMjBmNDcxMjAxMDU4NTUzMmI0ZGU1MTkxOGJkNjZhYzQ3OTc", "commit": {"author": {"name": "rhysd", "email": "lin90162@yahoo.co.jp", "date": "2022-07-09T17:48:53Z"}, "committer": {"name": "rhysd", "email": "lin90162@yahoo.co.jp", "date": "2022-07-10T07:39:12Z"}, "message": "Remove duplicate notes from error on inter-crate ambiguous impl of traits (fix #99092)", "tree": {"sha": "d3746cf8f8bb731c6f4d1bcbd4f5270770efcd3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3746cf8f8bb731c6f4d1bcbd4f5270770efcd3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5aed20f4712010585532b4de51918bd66ac4797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5aed20f4712010585532b4de51918bd66ac4797", "html_url": "https://github.com/rust-lang/rust/commit/d5aed20f4712010585532b4de51918bd66ac4797", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5aed20f4712010585532b4de51918bd66ac4797/comments", "author": {"login": "rhysd", "id": 823277, "node_id": "MDQ6VXNlcjgyMzI3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/823277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhysd", "html_url": "https://github.com/rhysd", "followers_url": "https://api.github.com/users/rhysd/followers", "following_url": "https://api.github.com/users/rhysd/following{/other_user}", "gists_url": "https://api.github.com/users/rhysd/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhysd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhysd/subscriptions", "organizations_url": "https://api.github.com/users/rhysd/orgs", "repos_url": "https://api.github.com/users/rhysd/repos", "events_url": "https://api.github.com/users/rhysd/events{/privacy}", "received_events_url": "https://api.github.com/users/rhysd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rhysd", "id": 823277, "node_id": "MDQ6VXNlcjgyMzI3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/823277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhysd", "html_url": "https://github.com/rhysd", "followers_url": "https://api.github.com/users/rhysd/followers", "following_url": "https://api.github.com/users/rhysd/following{/other_user}", "gists_url": "https://api.github.com/users/rhysd/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhysd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhysd/subscriptions", "organizations_url": "https://api.github.com/users/rhysd/orgs", "repos_url": "https://api.github.com/users/rhysd/repos", "events_url": "https://api.github.com/users/rhysd/events{/privacy}", "received_events_url": "https://api.github.com/users/rhysd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c20ab744b0f82646d90ce9d25894823abc9c669", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c20ab744b0f82646d90ce9d25894823abc9c669", "html_url": "https://github.com/rust-lang/rust/commit/6c20ab744b0f82646d90ce9d25894823abc9c669"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "52ca23c4b303ebd906a9b10eaf33fcabb7a64f48", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5aed20f4712010585532b4de51918bd66ac4797/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5aed20f4712010585532b4de51918bd66ac4797/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=d5aed20f4712010585532b4de51918bd66ac4797", "patch": "@@ -13,7 +13,7 @@ use crate::traits::{\n     self, FulfillmentContext, Normalized, Obligation, ObligationCause, PredicateObligation,\n     PredicateObligations, SelectionContext,\n };\n-//use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::Diagnostic;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n@@ -44,7 +44,7 @@ pub enum Conflict {\n \n pub struct OverlapResult<'tcx> {\n     pub impl_header: ty::ImplHeader<'tcx>,\n-    pub intercrate_ambiguity_causes: Vec<IntercrateAmbiguityCause>,\n+    pub intercrate_ambiguity_causes: FxIndexSet<IntercrateAmbiguityCause>,\n \n     /// `true` if the overlap might've been permitted before the shift\n     /// to universes."}, {"sha": "96d83deeeb7ab885e57d717a4d7d47add0c24303", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5aed20f4712010585532b4de51918bd66ac4797/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5aed20f4712010585532b4de51918bd66ac4797/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=d5aed20f4712010585532b4de51918bd66ac4797", "patch": "@@ -110,7 +110,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc }\n                         };\n                         debug!(?cause, \"evaluate_stack: pushing cause\");\n-                        self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);\n+                        self.intercrate_ambiguity_causes.as_mut().unwrap().insert(cause);\n                     }\n                 }\n             }"}, {"sha": "2bb53a466caa462bfdef02a96442bf18fe9babb3", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5aed20f4712010585532b4de51918bd66ac4797/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5aed20f4712010585532b4de51918bd66ac4797/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d5aed20f4712010585532b4de51918bd66ac4797", "patch": "@@ -24,7 +24,7 @@ use crate::traits::error_reporting::InferCtxtExt;\n use crate::traits::project::ProjectAndUnifyResult;\n use crate::traits::project::ProjectionCacheKeyExt;\n use crate::traits::ProjectionCacheKey;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n@@ -52,7 +52,7 @@ pub use rustc_middle::traits::select::*;\n mod candidate_assembly;\n mod confirmation;\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, Eq, PartialEq, Hash)]\n pub enum IntercrateAmbiguityCause {\n     DownstreamCrate { trait_desc: String, self_desc: Option<String> },\n     UpstreamCrateUpdate { trait_desc: String, self_desc: Option<String> },\n@@ -128,7 +128,7 @@ pub struct SelectionContext<'cx, 'tcx> {\n     /// We don't do his until we detect a coherence error because it can\n     /// lead to false overflow results (#47139) and because always\n     /// computing it may negatively impact performance.\n-    intercrate_ambiguity_causes: Option<Vec<IntercrateAmbiguityCause>>,\n+    intercrate_ambiguity_causes: Option<FxIndexSet<IntercrateAmbiguityCause>>,\n \n     /// The mode that trait queries run in, which informs our error handling\n     /// policy. In essence, canonicalized queries need their errors propagated\n@@ -254,14 +254,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {\n         assert!(self.intercrate);\n         assert!(self.intercrate_ambiguity_causes.is_none());\n-        self.intercrate_ambiguity_causes = Some(vec![]);\n+        self.intercrate_ambiguity_causes = Some(FxIndexSet::default());\n         debug!(\"selcx: enable_tracking_intercrate_ambiguity_causes\");\n     }\n \n     /// Gets the intercrate ambiguity causes collected since tracking\n     /// was enabled and disables tracking at the same time. If\n     /// tracking is not enabled, just returns an empty vector.\n-    pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {\n+    pub fn take_intercrate_ambiguity_causes(&mut self) -> FxIndexSet<IntercrateAmbiguityCause> {\n         assert!(self.intercrate);\n         self.intercrate_ambiguity_causes.take().unwrap_or_default()\n     }\n@@ -960,7 +960,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             });\n \n                             debug!(?cause, \"evaluate_stack: pushing cause\");\n-                            self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);\n+                            self.intercrate_ambiguity_causes.as_mut().unwrap().insert(cause);\n                         }\n                     }\n                 }\n@@ -1252,7 +1252,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                  reservation impl ambiguity on {:?}\",\n                             def_id\n                         );\n-                        intercrate_ambiguity_clauses.push(\n+                        intercrate_ambiguity_clauses.insert(\n                             IntercrateAmbiguityCause::ReservationImpl {\n                                 message: value.to_string(),\n                             },"}, {"sha": "fdd282d47a9019e71e6b38112a058358968992cc", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5aed20f4712010585532b4de51918bd66ac4797/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5aed20f4712010585532b4de51918bd66ac4797/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=d5aed20f4712010585532b4de51918bd66ac4797", "patch": "@@ -15,7 +15,7 @@ use specialization_graph::GraphExt;\n use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_errors::{struct_span_err, EmissionGuarantee, LintDiagnosticBuilder};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n@@ -33,7 +33,7 @@ pub struct OverlapError {\n     pub with_impl: DefId,\n     pub trait_desc: String,\n     pub self_desc: Option<String>,\n-    pub intercrate_ambiguity_causes: Vec<IntercrateAmbiguityCause>,\n+    pub intercrate_ambiguity_causes: FxIndexSet<IntercrateAmbiguityCause>,\n     pub involves_placeholder: bool,\n }\n "}, {"sha": "b1ee0795b2eb3b7293fd8f79b21f72b81746a6e4", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5aed20f4712010585532b4de51918bd66ac4797/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5aed20f4712010585532b4de51918bd66ac4797/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr?ref=d5aed20f4712010585532b4de51918bd66ac4797", "patch": "@@ -8,7 +8,6 @@ LL | impl<A:Iterator> Foo<A::Item> for A { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n    |\n    = note: upstream crates may add a new impl of trait `std::iter::Iterator` for type `i32` in future versions\n-   = note: upstream crates may add a new impl of trait `std::iter::Iterator` for type `i32` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "5b11c78ab2605667137e459cdd0dd7f61cf061f0", "filename": "src/test/ui/coherence/inter-crate-ambiguity-causes-notes.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d5aed20f4712010585532b4de51918bd66ac4797/src%2Ftest%2Fui%2Fcoherence%2Finter-crate-ambiguity-causes-notes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5aed20f4712010585532b4de51918bd66ac4797/src%2Ftest%2Fui%2Fcoherence%2Finter-crate-ambiguity-causes-notes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Finter-crate-ambiguity-causes-notes.rs?ref=d5aed20f4712010585532b4de51918bd66ac4797", "patch": "@@ -0,0 +1,19 @@\n+struct S;\n+\n+impl From<()> for S {\n+    fn from(x: ()) -> Self {\n+        S\n+    }\n+}\n+\n+impl<I> From<I> for S\n+//~^ ERROR conflicting implementations of trait\n+where\n+    I: Iterator<Item = ()>,\n+{\n+    fn from(x: I) -> Self {\n+        S\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "038a0199a8f270105716725913c4e6142ba50926", "filename": "src/test/ui/coherence/inter-crate-ambiguity-causes-notes.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5aed20f4712010585532b4de51918bd66ac4797/src%2Ftest%2Fui%2Fcoherence%2Finter-crate-ambiguity-causes-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5aed20f4712010585532b4de51918bd66ac4797/src%2Ftest%2Fui%2Fcoherence%2Finter-crate-ambiguity-causes-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Finter-crate-ambiguity-causes-notes.stderr?ref=d5aed20f4712010585532b4de51918bd66ac4797", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `std::convert::From<()>` for type `S`\n+  --> $DIR/inter-crate-ambiguity-causes-notes.rs:9:1\n+   |\n+LL | impl From<()> for S {\n+   | ------------------- first implementation here\n+...\n+LL | impl<I> From<I> for S\n+   | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `S`\n+   |\n+   = note: upstream crates may add a new impl of trait `std::iter::Iterator` for type `()` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}]}