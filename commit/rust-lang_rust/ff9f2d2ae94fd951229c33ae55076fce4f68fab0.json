{"sha": "ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOWYyZDJhZTk0ZmQ5NTEyMjljMzNhZTU1MDc2ZmNlNGY2OGZhYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-17T06:47:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-17T06:47:54Z"}, "message": "Auto merge of #42712 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 3 pull requests\n\n- Successful merges: #42660, #42662, #42705\n- Failed merges:", "tree": {"sha": "3e8b1dc8719c4068a4ffcd079807d92ac55d6f65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e8b1dc8719c4068a4ffcd079807d92ac55d6f65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "html_url": "https://github.com/rust-lang/rust/commit/ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08d920cd4d95cc3e3c6ee3dd1ad5c98a4c58639e", "url": "https://api.github.com/repos/rust-lang/rust/commits/08d920cd4d95cc3e3c6ee3dd1ad5c98a4c58639e", "html_url": "https://github.com/rust-lang/rust/commit/08d920cd4d95cc3e3c6ee3dd1ad5c98a4c58639e"}, {"sha": "6062bf7aca1927bc0e64854c54b466fffa73f07a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6062bf7aca1927bc0e64854c54b466fffa73f07a", "html_url": "https://github.com/rust-lang/rust/commit/6062bf7aca1927bc0e64854c54b466fffa73f07a"}], "stats": {"total": 125, "additions": 80, "deletions": 45}, "files": [{"sha": "325c3da0814f44916bef00ff225f934f2d613203", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -1 +1 @@\n-Subproject commit f746084b099060f55ac5e7d8050797593fcedd6e\n+Subproject commit 325c3da0814f44916bef00ff225f934f2d613203"}, {"sha": "21a56ff9899e3b67dd614a9f16ae728df4555180", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -428,7 +428,7 @@ impl Rc<str> {\n     #[doc(hidden)]\n     #[unstable(feature = \"rustc_private\",\n                reason = \"for internal use in rustc\",\n-               issue = \"0\")]\n+               issue = \"27812\")]\n     pub fn __from_str(value: &str) -> Rc<str> {\n         unsafe {\n             // Allocate enough space for `RcBox<str>`.\n@@ -453,7 +453,7 @@ impl<T> Rc<[T]> {\n     #[doc(hidden)]\n     #[unstable(feature = \"rustc_private\",\n                reason = \"for internal use in rustc\",\n-               issue = \"0\")]\n+               issue = \"27812\")]\n     pub fn __from_array(value: Box<[T]>) -> Rc<[T]> {\n         unsafe {\n             let ptr: *mut RcBox<[T]> ="}, {"sha": "3b304f4c479a02258b019a1fd513e741eb5cd19a", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -99,7 +99,7 @@ use mem;\n #[allow(deprecated)]\n pub use self::sip::SipHasher;\n \n-#[unstable(feature = \"sip_hash_13\", issue = \"29754\")]\n+#[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n #[allow(deprecated)]\n pub use self::sip::{SipHasher13, SipHasher24};\n "}, {"sha": "624c3638df5cced4895d8d73bb1b3881fe2b6ca9", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -2085,7 +2085,7 @@ pub trait StrExt {\n     fn is_char_boundary(&self, index: usize) -> bool;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn as_bytes(&self) -> &[u8];\n-    #[unstable(feature = \"str_mut_extras\", issue = \"0\")]\n+    #[unstable(feature = \"str_mut_extras\", issue = \"41119\")]\n     unsafe fn as_bytes_mut(&mut self) -> &mut [u8];\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>;"}, {"sha": "967bfb6c99057e7a09714c5c4adc8e067868b6d1", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -26,7 +26,7 @@\n #![deny(warnings)]\n \n #![cfg_attr(stage0, feature(staged_api))]\n-#![feature(unicode)]\n+#![feature(rustc_private)]\n \n pub use self::Piece::*;\n pub use self::Position::*;"}, {"sha": "b4075f6973098eaa185ced9cfc92ac1b0d4e2be3", "filename": "src/librustc/infer/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibrustc%2Finfer%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibrustc%2Finfer%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2FREADME.md?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -236,4 +236,4 @@ yet, that's what we're trying to find!  In our code, we opt to unify\n \n We make use of a trait-like implementation strategy to consolidate\n duplicated code between subtypes, GLB, and LUB computations.  See the\n-section on \"Type Combining\" below for details.\n+section on \"Type Combining\" in combine.rs for more details."}, {"sha": "4c7037c9ef2d5a8941d6d5ad44210d07e795dbaa", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -33,7 +33,6 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n-#![feature(unicode)]\n #![feature(conservative_impl_trait)]\n #![feature(command_envs)]\n "}, {"sha": "105f4026ec843894e1d3045bcb66757987f4d14f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -484,7 +484,7 @@ pub mod rt;\n // but it may be stabilized long-term. As a result we're exposing a hidden,\n // unstable module so we can get our build working.\n #[doc(hidden)]\n-#[unstable(feature = \"rand\", issue = \"0\")]\n+#[unstable(feature = \"rand\", issue = \"27703\")]\n pub mod __rand {\n     pub use rand::{thread_rng, ThreadRng, Rng};\n }"}, {"sha": "8da070e7a497a49e8a8d7fb618b9a218eef93f64", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -56,7 +56,7 @@\n //!     between the two sources. (Also note that, on some systems e.g. FreeBSD, both `/dev/random`\n //!     and `/dev/urandom` may block once if the CSPRNG has not seeded yet.)\n \n-#![unstable(feature = \"rand\", issue = \"0\")]\n+#![unstable(feature = \"rand\", issue = \"27703\")]\n \n use cell::RefCell;\n use fmt;"}, {"sha": "eb36cbe3b1f57aeea6ea3aa50337ef2c00ad452b", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -599,9 +599,9 @@ impl char {\n     /// 'XID_Start' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to `ID_Start` but modified for closure under `NFKx`.\n-    #[unstable(feature = \"unicode\",\n+    #[unstable(feature = \"rustc_private\",\n                reason = \"mainly needed for compiler internals\",\n-               issue = \"0\")]\n+               issue = \"27812\")]\n     #[inline]\n     pub fn is_xid_start(self) -> bool {\n         derived_property::XID_Start(self)\n@@ -613,9 +613,9 @@ impl char {\n     /// 'XID_Continue' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to 'ID_Continue' but modified for closure under NFKx.\n-    #[unstable(feature = \"unicode\",\n+    #[unstable(feature = \"rustc_private\",\n                reason = \"mainly needed for compiler internals\",\n-               issue = \"0\")]\n+               issue = \"27812\")]\n     #[inline]\n     pub fn is_xid_continue(self) -> bool {\n         derived_property::XID_Continue(self)"}, {"sha": "722fc2b317eb40d10ad8dc2d564ae88a674f8ea5", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 65, "deletions": 28, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -56,7 +56,7 @@ pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n     let mut features = collect_lang_features(path);\n     assert!(!features.is_empty());\n \n-    let lib_features = collect_lib_features(path, bad, &features);\n+    let lib_features = get_and_check_lib_features(path, bad, &features);\n     assert!(!lib_features.is_empty());\n \n     let mut contents = String::new();\n@@ -217,10 +217,61 @@ pub fn collect_lang_features(base_src_path: &Path) -> Features {\n         .collect()\n }\n \n-pub fn collect_lib_features(base_src_path: &Path,\n-                            bad: &mut bool,\n-                            features: &Features) -> Features {\n+pub fn collect_lib_features(base_src_path: &Path) -> Features {\n     let mut lib_features = Features::new();\n+    map_lib_features(base_src_path,\n+                     &mut |res, _, _| {\n+        match res {\n+            Ok((name, feature)) => {\n+                if lib_features.get(name).is_some() {\n+                    return;\n+                }\n+                lib_features.insert(name.to_owned(), feature);\n+            },\n+            Err(_) => (),\n+        }\n+    });\n+   lib_features\n+}\n+\n+fn get_and_check_lib_features(base_src_path: &Path,\n+                              bad: &mut bool,\n+                              lang_features: &Features) -> Features {\n+    let mut lib_features = Features::new();\n+    map_lib_features(base_src_path,\n+                     &mut |res, file, line| {\n+            match res {\n+                Ok((name, f)) => {\n+                    let mut err = |msg: &str| {\n+                        tidy_error!(bad, \"{}:{}: {}\", file.display(), line, msg);\n+                    };\n+                    if lang_features.contains_key(name) {\n+                        err(\"duplicating a lang feature\");\n+                    }\n+                    if let Some(ref s) = lib_features.get(name) {\n+                        if s.level != f.level {\n+                            err(\"different stability level than before\");\n+                        }\n+                        if s.since != f.since {\n+                            err(\"different `since` than before\");\n+                        }\n+                        if s.tracking_issue != f.tracking_issue {\n+                            err(\"different `tracking_issue` than before\");\n+                        }\n+                    }\n+                    lib_features.insert(name.to_owned(), f);\n+                },\n+                Err(msg) => {\n+                    tidy_error!(bad, \"{}:{}: {}\", file.display(), line, msg);\n+                },\n+            }\n+\n+    });\n+    lib_features\n+}\n+\n+fn map_lib_features(base_src_path: &Path,\n+                    mf: &mut FnMut(Result<(&str, Feature), &str>, &Path, usize)) {\n     let mut contents = String::new();\n     super::walk(base_src_path,\n                 &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n@@ -236,16 +287,19 @@ pub fn collect_lib_features(base_src_path: &Path,\n \n         let mut becoming_feature: Option<(String, Feature)> = None;\n         for (i, line) in contents.lines().enumerate() {\n-            let mut err = |msg: &str| {\n-                tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n+            macro_rules! err {\n+                ($msg:expr) => {{\n+                    mf(Err($msg), file, i + 1);\n+                    continue;\n+                }};\n             };\n             if let Some((ref name, ref mut f)) = becoming_feature {\n                 if f.tracking_issue.is_none() {\n                     f.tracking_issue = find_attr_val(line, \"issue\")\n                     .map(|s| s.parse().unwrap());\n                 }\n                 if line.ends_with(\"]\") {\n-                    lib_features.insert(name.to_owned(), f.clone());\n+                    mf(Ok((name, f.clone())), file, i + 1);\n                 } else if !line.ends_with(\",\") && !line.ends_with(\"\\\\\") {\n                     // We need to bail here because we might have missed the\n                     // end of a stability attribute above because the \"]\"\n@@ -254,7 +308,7 @@ pub fn collect_lib_features(base_src_path: &Path,\n                     // we continue parsing the file assuming the current stability\n                     // attribute has not ended, and ignoring possible feature\n                     // attributes in the process.\n-                    err(\"malformed stability attribute\");\n+                    err!(\"malformed stability attribute\");\n                 } else {\n                     continue;\n                 }\n@@ -269,45 +323,28 @@ pub fn collect_lib_features(base_src_path: &Path,\n             };\n             let feature_name = match find_attr_val(line, \"feature\") {\n                 Some(name) => name,\n-                None => {\n-                    err(\"malformed stability attribute\");\n-                    continue;\n-                }\n+                None => err!(\"malformed stability attribute\"),\n             };\n             let since = match find_attr_val(line, \"since\") {\n                 Some(name) => name,\n                 None if level == Status::Stable => {\n-                    err(\"malformed stability attribute\");\n-                    continue;\n+                    err!(\"malformed stability attribute\");\n                 }\n                 None => \"None\",\n             };\n             let tracking_issue = find_attr_val(line, \"issue\").map(|s| s.parse().unwrap());\n \n-            if features.contains_key(feature_name) {\n-                err(\"duplicating a lang feature\");\n-            }\n-            if let Some(ref s) = lib_features.get(feature_name) {\n-                if s.level != level {\n-                    err(\"different stability level than before\");\n-                }\n-                if s.since != since {\n-                    err(\"different `since` than before\");\n-                }\n-                continue;\n-            }\n             let feature = Feature {\n                 level,\n                 since: since.to_owned(),\n                 has_gate_test: false,\n                 tracking_issue,\n             };\n             if line.contains(\"]\") {\n-                lib_features.insert(feature_name.to_owned(), feature);\n+                mf(Ok((feature_name, feature)), file, i + 1);\n             } else {\n                 becoming_feature = Some((feature_name.to_owned(), feature));\n             }\n         }\n     });\n-    lib_features\n }"}, {"sha": "c8bfe42aa03df467de84f9a9085f45ba8876a9cb", "filename": "src/tools/tidy/src/unstable_book.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -87,7 +87,7 @@ pub fn check(path: &path::Path, bad: &mut bool) {\n     // Library features\n \n     let lang_features = collect_lang_features(path);\n-    let lib_features = collect_lib_features(path, bad, &lang_features);\n+    let lib_features = collect_lib_features(path);\n \n     let unstable_lib_feature_names = collect_unstable_feature_names(&lib_features);\n     let unstable_book_lib_features_section_file_names ="}, {"sha": "71063968ff2c018829b96103d303f9532ce560fc", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9f2d2ae94fd951229c33ae55076fce4f68fab0/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "patch": "@@ -129,8 +129,7 @@ fn main() {\n     let dest_path = Path::new(&dest_path_str).join(\"src\");\n \n     let lang_features = collect_lang_features(src_path);\n-    let mut bad = false;\n-    let lib_features = collect_lib_features(src_path, &mut bad, &lang_features);\n+    let lib_features = collect_lib_features(src_path);\n \n     let doc_src_path = src_path.join(PATH_STR);\n "}]}