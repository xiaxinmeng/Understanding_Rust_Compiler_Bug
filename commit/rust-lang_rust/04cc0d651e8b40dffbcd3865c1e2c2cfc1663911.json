{"sha": "04cc0d651e8b40dffbcd3865c1e2c2cfc1663911", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0Y2MwZDY1MWU4YjQwZGZmYmNkMzg2NWMxZTJjMmNmYzE2NjM5MTE=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2018-11-11T20:05:09Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2018-11-11T20:42:20Z"}, "message": "save-analysis: Don't panic for macro-generated use globs\n\nFollow-up to\nhttps://github.com/rust-lang/rust/commit/c2bb7cadf24e82b80f403c09e800fe5fad504caf.", "tree": {"sha": "fb18f2f346ba290f48039ffb6f6875181a0a2426", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb18f2f346ba290f48039ffb6f6875181a0a2426"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04cc0d651e8b40dffbcd3865c1e2c2cfc1663911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04cc0d651e8b40dffbcd3865c1e2c2cfc1663911", "html_url": "https://github.com/rust-lang/rust/commit/04cc0d651e8b40dffbcd3865c1e2c2cfc1663911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04cc0d651e8b40dffbcd3865c1e2c2cfc1663911/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a2ca1a6f18aa93d3120761f614ec2d39b4cb1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2ca1a6f18aa93d3120761f614ec2d39b4cb1ac", "html_url": "https://github.com/rust-lang/rust/commit/5a2ca1a6f18aa93d3120761f614ec2d39b4cb1ac"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "0c0f50c1fd70907fee7e855b88f8cc90b499649a", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/04cc0d651e8b40dffbcd3865c1e2c2cfc1663911/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04cc0d651e8b40dffbcd3865c1e2c2cfc1663911/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=04cc0d651e8b40dffbcd3865c1e2c2cfc1663911", "patch": "@@ -1254,21 +1254,25 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     Vec::new()\n                 };\n \n-                let sub_span =\n-                    self.span.sub_span_of_token(use_tree.span, token::BinOp(token::Star));\n-                if !self.span.filter_generated(use_tree.span) {\n-                    let span =\n-                        self.span_from_span(sub_span.expect(\"No span found for use glob\"));\n-                    self.dumper.import(&access, Import {\n-                        kind: ImportKind::GlobUse,\n-                        ref_id: None,\n-                        span,\n-                        alias_span: None,\n-                        name: \"*\".to_owned(),\n-                        value: names.join(\", \"),\n-                        parent,\n-                    });\n-                    self.write_sub_paths(&path);\n+                // Otherwise it's a span with wrong macro expansion info, which\n+                // we don't want to track anyway, since it's probably macro-internal `use`\n+                if let Some(sub_span) =\n+                    self.span.sub_span_of_token(use_tree.span, token::BinOp(token::Star))\n+                {\n+                    if !self.span.filter_generated(use_tree.span) {\n+                        let span = self.span_from_span(sub_span);\n+\n+                        self.dumper.import(&access, Import {\n+                            kind: ImportKind::GlobUse,\n+                            ref_id: None,\n+                            span,\n+                            alias_span: None,\n+                            name: \"*\".to_owned(),\n+                            value: names.join(\", \"),\n+                            parent,\n+                        });\n+                        self.write_sub_paths(&path);\n+                    }\n                 }\n             }\n             ast::UseTreeKind::Nested(ref nested_items) => {"}]}