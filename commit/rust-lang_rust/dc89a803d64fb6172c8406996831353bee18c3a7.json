{"sha": "dc89a803d64fb6172c8406996831353bee18c3a7", "node_id": "C_kwDOAAsO6NoAKGRjODlhODAzZDY0ZmI2MTcyYzg0MDY5OTY4MzEzNTNiZWUxOGMzYTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-19T15:36:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-19T15:36:46Z"}, "message": "Auto merge of #108237 - GuillaumeGomez:rollup-olxq5dt, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #107766 (Fix json reexports of different items with same name)\n - #108129 (Correctly handle links starting with whitespace)\n - #108188 (Change src/etc/vscode_settings.json to always treat ./library as the sysroot source)\n - #108203 (Fix RPITITs in default trait methods (by assuming projection predicates in param-env))\n - #108212 (Download rustfmt regardless of rustc being set in config.toml)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "32376b6cd8a7cfdd594aed1e2ca2edc842a690a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32376b6cd8a7cfdd594aed1e2ca2edc842a690a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc89a803d64fb6172c8406996831353bee18c3a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc89a803d64fb6172c8406996831353bee18c3a7", "html_url": "https://github.com/rust-lang/rust/commit/dc89a803d64fb6172c8406996831353bee18c3a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc89a803d64fb6172c8406996831353bee18c3a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eebdfb55fce148676c24555505aebf648123b2de", "url": "https://api.github.com/repos/rust-lang/rust/commits/eebdfb55fce148676c24555505aebf648123b2de", "html_url": "https://github.com/rust-lang/rust/commit/eebdfb55fce148676c24555505aebf648123b2de"}, {"sha": "24d907a7a97de34ed4150b3c2172874e4774baa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/24d907a7a97de34ed4150b3c2172874e4774baa7", "html_url": "https://github.com/rust-lang/rust/commit/24d907a7a97de34ed4150b3c2172874e4774baa7"}], "stats": {"total": 385, "additions": 294, "deletions": 91}, "files": [{"sha": "5743f086f89b4b31adc3e108c7ff9ea00f1bffee", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -1599,7 +1599,7 @@ fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n     {\n         for arg in fn_output.walk() {\n             if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                && let ty::Alias(ty::Projection, proj) = ty.kind()\n+                && let ty::Alias(ty::Opaque, proj) = ty.kind()\n                 && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n                 && tcx.impl_trait_in_trait_parent(proj.def_id) == fn_def_id.to_def_id()\n             {"}, {"sha": "ca46cf29919f850b1d5f6997ef809df1646f03c6", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -4,7 +4,7 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n use crate::ty::layout::IntegerExt;\n use crate::ty::{\n-    self, ir::TypeFolder, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable,\n+    self, ir::TypeFolder, DefIdTree, FallibleTypeFolder, ToPredicate, Ty, TyCtxt, TypeFoldable,\n     TypeSuperFoldable,\n };\n use crate::ty::{GenericArgKind, SubstsRef};\n@@ -865,6 +865,26 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for OpaqueTypeExpander<'tcx> {\n         }\n         t\n     }\n+\n+    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n+        if let ty::PredicateKind::Clause(clause) = p.kind().skip_binder()\n+            && let ty::Clause::Projection(projection_pred) = clause\n+        {\n+            p.kind()\n+                .rebind(ty::ProjectionPredicate {\n+                    projection_ty: projection_pred.projection_ty.fold_with(self),\n+                    // Don't fold the term on the RHS of the projection predicate.\n+                    // This is because for default trait methods with RPITITs, we\n+                    // install a `NormalizesTo(Projection(RPITIT) -> Opaque(RPITIT))`\n+                    // predicate, which would trivially cause a cycle when we do\n+                    // anything that requires `ParamEnv::with_reveal_all_normalized`.\n+                    term: projection_pred.term,\n+                })\n+                .to_predicate(self.tcx)\n+        } else {\n+            p.super_fold_with(self)\n+        }\n+    }\n }\n \n impl<'tcx> Ty<'tcx> {"}, {"sha": "5e4b66018e42ec9e0b3263301cdb65f3558ee974", "filename": "compiler/rustc_resolve/src/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -339,6 +339,7 @@ pub fn inner_docs(attrs: &[ast::Attribute]) -> bool {\n fn preprocess_link(link: &str) -> String {\n     let link = link.replace('`', \"\");\n     let link = link.split('#').next().unwrap();\n+    let link = link.trim();\n     let link = link.rsplit('@').next().unwrap();\n     let link = link.strip_suffix(\"()\").unwrap_or(link);\n     let link = link.strip_suffix(\"{}\").unwrap_or(link);"}, {"sha": "1c66fb257ebb56acbc68b244ffd52a2bf114d1de", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -90,15 +90,7 @@ enum ProjectionCandidate<'tcx> {\n     /// From an \"impl\" (or a \"pseudo-impl\" returned by select)\n     Select(Selection<'tcx>),\n \n-    ImplTraitInTrait(ImplTraitInTraitCandidate<'tcx>),\n-}\n-\n-#[derive(PartialEq, Eq, Debug)]\n-enum ImplTraitInTraitCandidate<'tcx> {\n-    // The `impl Trait` from a trait function's default body\n-    Trait,\n-    // A concrete type provided from a trait's `impl Trait` from an impl\n-    Impl(ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>),\n+    ImplTraitInTrait(ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>),\n }\n \n enum ProjectionCandidateSet<'tcx> {\n@@ -1292,17 +1284,6 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n     let tcx = selcx.tcx();\n     if tcx.def_kind(obligation.predicate.def_id) == DefKind::ImplTraitPlaceholder {\n         let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n-        // If we are trying to project an RPITIT with trait's default `Self` parameter,\n-        // then we must be within a default trait body.\n-        if obligation.predicate.self_ty()\n-            == ty::InternalSubsts::identity_for_item(tcx, obligation.predicate.def_id).type_at(0)\n-            && tcx.associated_item(trait_fn_def_id).defaultness(tcx).has_value()\n-        {\n-            candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n-                ImplTraitInTraitCandidate::Trait,\n-            ));\n-            return;\n-        }\n \n         let trait_def_id = tcx.parent(trait_fn_def_id);\n         let trait_substs =\n@@ -1313,9 +1294,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let _ = selcx.infcx.commit_if_ok(|_| {\n             match selcx.select(&obligation.with(tcx, trait_predicate)) {\n                 Ok(Some(super::ImplSource::UserDefined(data))) => {\n-                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n-                        ImplTraitInTraitCandidate::Impl(data),\n-                    ));\n+                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(data));\n                     Ok(())\n                 }\n                 Ok(None) => {\n@@ -1777,18 +1756,9 @@ fn confirm_candidate<'cx, 'tcx>(\n         ProjectionCandidate::Select(impl_source) => {\n             confirm_select_candidate(selcx, obligation, impl_source)\n         }\n-        ProjectionCandidate::ImplTraitInTrait(ImplTraitInTraitCandidate::Impl(data)) => {\n+        ProjectionCandidate::ImplTraitInTrait(data) => {\n             confirm_impl_trait_in_trait_candidate(selcx, obligation, data)\n         }\n-        // If we're projecting an RPITIT for a default trait body, that's just\n-        // the same def-id, but as an opaque type (with regular RPIT semantics).\n-        ProjectionCandidate::ImplTraitInTrait(ImplTraitInTraitCandidate::Trait) => Progress {\n-            term: selcx\n-                .tcx()\n-                .mk_opaque(obligation.predicate.def_id, obligation.predicate.substs)\n-                .into(),\n-            obligations: vec![],\n-        },\n     };\n \n     // When checking for cycle during evaluation, we compare predicates with"}, {"sha": "f1af0073e4da95564b15b22585c0d63a45ec0d38", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -1,8 +1,12 @@\n-use rustc_data_structures::fx::FxIndexSet;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n+#[cfg(not(bootstrap))]\n+use rustc_middle::ty::ir::TypeVisitable;\n use rustc_middle::ty::{\n-    self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n+    self, ir::TypeVisitor, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n+    TypeSuperVisitable,\n };\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::{DefId, CRATE_DEF_ID};\n@@ -136,6 +140,19 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         predicates.extend(environment);\n     }\n \n+    if tcx.def_kind(def_id) == DefKind::AssocFn\n+        && tcx.associated_item(def_id).container == ty::AssocItemContainer::TraitContainer\n+    {\n+        let sig = tcx.fn_sig(def_id).subst_identity();\n+        sig.visit_with(&mut ImplTraitInTraitFinder {\n+            tcx,\n+            fn_def_id: def_id,\n+            bound_vars: sig.bound_vars(),\n+            predicates: &mut predicates,\n+            seen: FxHashSet::default(),\n+        });\n+    }\n+\n     let local_did = def_id.as_local();\n     let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n \n@@ -222,6 +239,46 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     traits::normalize_param_env_or_error(tcx, unnormalized_env, cause)\n }\n \n+/// Walk through a function type, gathering all RPITITs and installing a\n+/// `NormalizesTo(Projection(RPITIT) -> Opaque(RPITIT))` predicate into the\n+/// predicates list. This allows us to observe that an RPITIT projects to\n+/// its corresponding opaque within the body of a default-body trait method.\n+struct ImplTraitInTraitFinder<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    predicates: &'a mut Vec<Predicate<'tcx>>,\n+    fn_def_id: DefId,\n+    bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n+    seen: FxHashSet<DefId>,\n+}\n+\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n+        if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n+            && self.tcx.def_kind(alias_ty.def_id) == DefKind::ImplTraitPlaceholder\n+            && self.tcx.impl_trait_in_trait_parent(alias_ty.def_id) == self.fn_def_id\n+            && self.seen.insert(alias_ty.def_id)\n+        {\n+            self.predicates.push(\n+                ty::Binder::bind_with_vars(\n+                    ty::ProjectionPredicate {\n+                        projection_ty: alias_ty,\n+                        term: self.tcx.mk_alias(ty::Opaque, alias_ty).into(),\n+                    },\n+                    self.bound_vars,\n+                )\n+                .to_predicate(self.tcx),\n+            );\n+\n+            for bound in self.tcx.item_bounds(alias_ty.def_id).subst_iter(self.tcx, alias_ty.substs)\n+            {\n+                bound.visit_with(self);\n+            }\n+        }\n+\n+        ty.super_visit_with(self)\n+    }\n+}\n+\n /// Elaborate the environment.\n ///\n /// Collect a list of `Predicate`'s used for building the `ParamEnv`. Adds `TypeWellFormedFromEnv`'s"}, {"sha": "56f96734bbbc7af2d9cadb4408baedd468fee0af", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -1315,15 +1315,6 @@ impl Config {\n             } else {\n                 RustfmtState::Unavailable\n             };\n-        } else {\n-            // If using a system toolchain for bootstrapping, see if that has rustfmt available.\n-            let host = config.build;\n-            let rustfmt_path = config.initial_rustc.with_file_name(exe(\"rustfmt\", host));\n-            let bin_root = config.out.join(host.triple).join(\"stage0\");\n-            if !rustfmt_path.starts_with(&bin_root) {\n-                // Using a system-provided toolchain; we shouldn't download rustfmt.\n-                *config.initial_rustfmt.borrow_mut() = RustfmtState::SystemToolchain(rustfmt_path);\n-            }\n         }\n \n         // Now that we've reached the end of our configuration, infer the"}, {"sha": "a027139df23979032eb231ee90ff3c9e015a0920", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -29,6 +29,7 @@ pub enum Profile {\n static SETTINGS_HASHES: &[&str] = &[\n     \"ea67e259dedf60d4429b6c349a564ffcd1563cf41c920a856d1f5b16b4701ac8\",\n     \"56e7bf011c71c5d81e0bf42e84938111847a810eee69d906bba494ea90b51922\",\n+    \"af1b5efe196aed007577899db9dae15d6dbc923d6fa42fa0934e68617ba9bbe0\",\n ];\n static VSCODE_SETTINGS: &str = include_str!(\"../etc/vscode_settings.json\");\n "}, {"sha": "dd01bfaa7252d77022b423ce858ea1951147accf", "filename": "src/etc/vscode_settings.json", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/src%2Fetc%2Fvscode_settings.json", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/src%2Fetc%2Fvscode_settings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvscode_settings.json?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -1,7 +1,7 @@\n {\n     \"rust-analyzer.check.invocationLocation\": \"root\",\n     \"rust-analyzer.check.invocationStrategy\": \"once\",\n-    \"rust-analyzer.checkOnSave.overrideCommand\": [\n+    \"rust-analyzer.check.overrideCommand\": [\n         \"python3\",\n         \"x.py\",\n         \"check\",\n@@ -23,6 +23,6 @@\n         \"check\",\n         \"--json-output\"\n     ],\n-    \"rust-analyzer.cargo.sysroot\": \"./build/host/stage0-sysroot\",\n+    \"rust-analyzer.cargo.sysrootSrc\": \"./library\",\n     \"rust-analyzer.rustc.source\": \"./Cargo.toml\"\n }"}, {"sha": "d5e9010eb4ed98682e08976810fd35edad3fd0a6", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 67, "deletions": 32, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -38,7 +38,7 @@ impl JsonRenderer<'_> {\n                     Some(UrlFragment::UserWritten(_)) | None => *page_id,\n                 };\n \n-                (link.clone(), from_item_id(id.into(), self.tcx))\n+                (link.clone(), id_from_item_default(id.into(), self.tcx))\n             })\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();\n@@ -50,7 +50,8 @@ impl JsonRenderer<'_> {\n             .collect();\n         let span = item.span(self.tcx);\n         let visibility = item.visibility(self.tcx);\n-        let clean::Item { name, attrs: _, kind: _, item_id, cfg: _, .. } = item;\n+        let clean::Item { name, item_id, .. } = item;\n+        let id = id_from_item(&item, self.tcx);\n         let inner = match *item.kind {\n             clean::KeywordItem => return None,\n             clean::StrippedItem(ref inner) => {\n@@ -69,7 +70,7 @@ impl JsonRenderer<'_> {\n             _ => from_clean_item(item, self.tcx),\n         };\n         Some(Item {\n-            id: from_item_id_with_name(item_id, self.tcx, name),\n+            id,\n             crate_id: item_id.krate().as_u32(),\n             name: name.map(|sym| sym.to_string()),\n             span: span.and_then(|span| self.convert_span(span)),\n@@ -107,7 +108,7 @@ impl JsonRenderer<'_> {\n             Some(ty::Visibility::Public) => Visibility::Public,\n             Some(ty::Visibility::Restricted(did)) if did.is_crate_root() => Visibility::Crate,\n             Some(ty::Visibility::Restricted(did)) => Visibility::Restricted {\n-                parent: from_item_id(did.into(), self.tcx),\n+                parent: id_from_item_default(did.into(), self.tcx),\n                 path: self.tcx.def_path(did).to_string_no_crate_verbose(),\n             },\n         }\n@@ -204,21 +205,42 @@ impl FromWithTcx<clean::TypeBindingKind> for TypeBindingKind {\n     }\n }\n \n-/// It generates an ID as follows:\n-///\n-/// `CRATE_ID:ITEM_ID[:NAME_ID]` (if there is no name, NAME_ID is not generated).\n-pub(crate) fn from_item_id(item_id: ItemId, tcx: TyCtxt<'_>) -> Id {\n-    from_item_id_with_name(item_id, tcx, None)\n+#[inline]\n+pub(crate) fn id_from_item_default(item_id: ItemId, tcx: TyCtxt<'_>) -> Id {\n+    id_from_item_inner(item_id, tcx, None, None)\n }\n \n-// FIXME: this function (and appending the name at the end of the ID) should be removed when\n-// reexports are not inlined anymore for json format. It should be done in #93518.\n-pub(crate) fn from_item_id_with_name(item_id: ItemId, tcx: TyCtxt<'_>, name: Option<Symbol>) -> Id {\n-    struct DisplayDefId<'a>(DefId, TyCtxt<'a>, Option<Symbol>);\n+/// It generates an ID as follows:\n+///\n+/// `CRATE_ID:ITEM_ID[:NAME_ID][-EXTRA]`:\n+///   * If there is no `name`, `NAME_ID` is not generated.\n+///   * If there is no `extra`, `EXTRA` is not generated.\n+///\n+/// * `name` is the item's name if available (it's not for impl blocks for example).\n+/// * `extra` is used for reexports: it contains the ID of the reexported item. It is used to allow\n+///   to have items with the same name but different types to both appear in the generated JSON.\n+pub(crate) fn id_from_item_inner(\n+    item_id: ItemId,\n+    tcx: TyCtxt<'_>,\n+    name: Option<Symbol>,\n+    extra: Option<&Id>,\n+) -> Id {\n+    struct DisplayDefId<'a, 'b>(DefId, TyCtxt<'a>, Option<&'b Id>, Option<Symbol>);\n \n-    impl<'a> fmt::Display for DisplayDefId<'a> {\n+    impl<'a, 'b> fmt::Display for DisplayDefId<'a, 'b> {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            let DisplayDefId(def_id, tcx, name) = self;\n+            let DisplayDefId(def_id, tcx, extra, name) = self;\n+            // We need this workaround because primitive types' DefId actually refers to\n+            // their parent module, which isn't present in the output JSON items. So\n+            // instead, we directly get the primitive symbol and convert it to u32 to\n+            // generate the ID.\n+            let s;\n+            let extra = if let Some(e) = extra {\n+                s = format!(\"-{}\", e.0);\n+                &s\n+            } else {\n+                \"\"\n+            };\n             let name = match name {\n                 Some(name) => format!(\":{}\", name.as_u32()),\n                 None => {\n@@ -240,18 +262,33 @@ pub(crate) fn from_item_id_with_name(item_id: ItemId, tcx: TyCtxt<'_>, name: Opt\n                     }\n                 }\n             };\n-            write!(f, \"{}:{}{}\", self.0.krate.as_u32(), u32::from(self.0.index), name)\n+            write!(f, \"{}:{}{name}{extra}\", def_id.krate.as_u32(), u32::from(def_id.index))\n         }\n     }\n \n     match item_id {\n-        ItemId::DefId(did) => Id(format!(\"{}\", DisplayDefId(did, tcx, name))),\n-        ItemId::Blanket { for_, impl_id } => {\n-            Id(format!(\"b:{}-{}\", DisplayDefId(impl_id, tcx, None), DisplayDefId(for_, tcx, name)))\n-        }\n-        ItemId::Auto { for_, trait_ } => {\n-            Id(format!(\"a:{}-{}\", DisplayDefId(trait_, tcx, None), DisplayDefId(for_, tcx, name)))\n+        ItemId::DefId(did) => Id(format!(\"{}\", DisplayDefId(did, tcx, extra, name))),\n+        ItemId::Blanket { for_, impl_id } => Id(format!(\n+            \"b:{}-{}\",\n+            DisplayDefId(impl_id, tcx, None, None),\n+            DisplayDefId(for_, tcx, extra, name)\n+        )),\n+        ItemId::Auto { for_, trait_ } => Id(format!(\n+            \"a:{}-{}\",\n+            DisplayDefId(trait_, tcx, None, None),\n+            DisplayDefId(for_, tcx, extra, name)\n+        )),\n+    }\n+}\n+\n+pub(crate) fn id_from_item(item: &clean::Item, tcx: TyCtxt<'_>) -> Id {\n+    match *item.kind {\n+        clean::ItemKind::ImportItem(ref import) => {\n+            let extra =\n+                import.source.did.map(ItemId::from).map(|i| id_from_item_inner(i, tcx, None, None));\n+            id_from_item_inner(item.item_id, tcx, item.name, extra.as_ref())\n         }\n+        _ => id_from_item_inner(item.item_id, tcx, item.name, None),\n     }\n }\n \n@@ -525,7 +562,7 @@ impl FromWithTcx<clean::Path> for Path {\n     fn from_tcx(path: clean::Path, tcx: TyCtxt<'_>) -> Path {\n         Path {\n             name: path.whole_name(),\n-            id: from_item_id(path.def_id().into(), tcx),\n+            id: id_from_item_default(path.def_id().into(), tcx),\n             args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n         }\n     }\n@@ -702,7 +739,7 @@ impl FromWithTcx<clean::Import> for Import {\n         Import {\n             source: import.source.path.whole_name(),\n             name,\n-            id: import.source.did.map(ItemId::from).map(|i| from_item_id(i, tcx)),\n+            id: import.source.did.map(ItemId::from).map(|i| id_from_item_default(i, tcx)),\n             glob,\n         }\n     }\n@@ -791,7 +828,7 @@ fn ids(items: impl IntoIterator<Item = clean::Item>, tcx: TyCtxt<'_>) -> Vec<Id>\n     items\n         .into_iter()\n         .filter(|x| !x.is_stripped() && !x.is_keyword())\n-        .map(|i| from_item_id_with_name(i.item_id, tcx, i.name))\n+        .map(|i| id_from_item(&i, tcx))\n         .collect()\n }\n \n@@ -801,12 +838,10 @@ fn ids_keeping_stripped(\n ) -> Vec<Option<Id>> {\n     items\n         .into_iter()\n-        .map(|i| {\n-            if !i.is_stripped() && !i.is_keyword() {\n-                Some(from_item_id_with_name(i.item_id, tcx, i.name))\n-            } else {\n-                None\n-            }\n-        })\n+        .map(\n+            |i| {\n+                if !i.is_stripped() && !i.is_keyword() { Some(id_from_item(&i, tcx)) } else { None }\n+            },\n+        )\n         .collect()\n }"}, {"sha": "08bceb59cfde683c686bae3e66eb7b6baaf2872f", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -28,7 +28,7 @@ use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n use crate::formats::FormatRenderer;\n-use crate::json::conversions::{from_item_id, from_item_id_with_name, IntoWithTcx};\n+use crate::json::conversions::{id_from_item, id_from_item_default, IntoWithTcx};\n use crate::{clean, try_err};\n \n #[derive(Clone)]\n@@ -58,7 +58,7 @@ impl<'tcx> JsonRenderer<'tcx> {\n                     .map(|i| {\n                         let item = &i.impl_item;\n                         self.item(item.clone()).unwrap();\n-                        from_item_id_with_name(item.item_id, self.tcx, item.name)\n+                        id_from_item(&item, self.tcx)\n                     })\n                     .collect()\n             })\n@@ -89,7 +89,7 @@ impl<'tcx> JsonRenderer<'tcx> {\n \n                         if item.item_id.is_local() || is_primitive_impl {\n                             self.item(item.clone()).unwrap();\n-                            Some(from_item_id_with_name(item.item_id, self.tcx, item.name))\n+                            Some(id_from_item(&item, self.tcx))\n                         } else {\n                             None\n                         }\n@@ -150,7 +150,6 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         // Flatten items that recursively store other items\n         item.kind.inner_items().for_each(|i| self.item(i.clone()).unwrap());\n \n-        let name = item.name;\n         let item_id = item.item_id;\n         if let Some(mut new_item) = self.convert_item(item) {\n             let can_be_ignored = match new_item.inner {\n@@ -193,10 +192,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 | types::ItemEnum::Macro(_)\n                 | types::ItemEnum::ProcMacro(_) => false,\n             };\n-            let removed = self\n-                .index\n-                .borrow_mut()\n-                .insert(from_item_id_with_name(item_id, self.tcx, name), new_item.clone());\n+            let removed = self.index.borrow_mut().insert(new_item.id.clone(), new_item.clone());\n \n             // FIXME(adotinthevoid): Currently, the index is duplicated. This is a sanity check\n             // to make sure the items are unique. The main place this happens is when an item, is\n@@ -207,6 +203,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 if !can_be_ignored {\n                     assert_eq!(old_item, new_item);\n                 }\n+                trace!(\"replaced {:?}\\nwith {:?}\", old_item, new_item);\n             }\n         }\n \n@@ -246,7 +243,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 .chain(&self.cache.external_paths)\n                 .map(|(&k, &(ref path, kind))| {\n                     (\n-                        from_item_id(k.into(), self.tcx),\n+                        id_from_item_default(k.into(), self.tcx),\n                         types::ItemSummary {\n                             crate_id: k.krate.as_u32(),\n                             path: path.iter().map(|s| s.to_string()).collect(),"}, {"sha": "920a3b22f25a2f610cbe93f50d07a16a3e6ce5ce", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -884,7 +884,8 @@ fn preprocess_link(\n     let mut parts = stripped.split('#');\n \n     let link = parts.next().unwrap();\n-    if link.trim().is_empty() {\n+    let link = link.trim();\n+    if link.is_empty() {\n         // This is an anchor to an element of the current page, nothing to do in here!\n         return None;\n     }\n@@ -897,7 +898,7 @@ fn preprocess_link(\n     // Parse and strip the disambiguator from the link, if present.\n     let (disambiguator, path_str, link_text) = match Disambiguator::from_str(link) {\n         Ok(Some((d, path, link_text))) => (Some(d), path.trim(), link_text.trim()),\n-        Ok(None) => (None, link.trim(), link.trim()),\n+        Ok(None) => (None, link, link),\n         Err((err_msg, relative_range)) => {\n             // Only report error if we would not have ignored this link. See issue #83859.\n             if !should_ignore_link_with_disambiguators(link) {"}, {"sha": "2314a4eb90940368e3f31b9abf188e3f10fb0c44", "filename": "tests/rustdoc-json/reexport/same_name_different_types.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/tests%2Frustdoc-json%2Freexport%2Fsame_name_different_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/tests%2Frustdoc-json%2Freexport%2Fsame_name_different_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fsame_name_different_types.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -0,0 +1,25 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/107677>.\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+pub mod nested {\n+    // @set foo_struct = \"$.index[*][?(@.docs == 'Foo the struct')].id\"\n+\n+    /// Foo the struct\n+    pub struct Foo {}\n+\n+    // @set foo_fn = \"$.index[*][?(@.docs == 'Foo the function')].id\"\n+\n+    #[allow(non_snake_case)]\n+    /// Foo the function\n+    pub fn Foo() {}\n+}\n+\n+// @ismany \"$.index[*][?(@.inner.name == 'Foo' && @.kind == 'import')].inner.id\" $foo_fn $foo_struct\n+// @ismany \"$.index[*][?(@.inner.name == 'Bar' && @.kind == 'import')].inner.id\" $foo_fn $foo_struct\n+\n+// @count \"$.index[*][?(@.inner.name == 'Foo' && @.kind == 'import')]\" 2\n+pub use nested::Foo;\n+// @count \"$.index[*][?(@.inner.name == 'Bar' && @.kind == 'import')]\" 2\n+pub use Foo as Bar;"}, {"sha": "1273e4fdd12ebd876806b09eb01119973f8077e9", "filename": "tests/rustdoc/issue-107995.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/tests%2Frustdoc%2Fissue-107995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/tests%2Frustdoc%2Fissue-107995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-107995.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -0,0 +1,28 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/107995>.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/fn.foo.html'\n+// @has - '//*[@class=\"docblock\"]//a[@href=\"fn.bar.html\"]' 'bar`'\n+/// A foo, see also [ bar`]\n+pub fn foo() {}\n+\n+// @has 'foo/fn.bar.html'\n+// @has - '//*[@class=\"docblock\"]' 'line Path line'\n+// @has - '//*[@class=\"docblock\"]//a[@href=\"struct.Path.html\"]' 'Path'\n+#[doc = \"line [\"]\n+#[doc = \"Path\"]\n+#[doc = \"] line\"]\n+pub fn bar() {}\n+\n+// @has 'foo/fn.another.html'\n+// @has - '//*[@class=\"docblock\"]//a[@href=\"struct.Path.html\"]' 'Path'\n+/// [ `Path`]\n+pub fn another() {}\n+\n+// @has 'foo/fn.last.html'\n+// @has - '//*[@class=\"docblock\"]//a[@href=\"struct.Path.html\"]' 'Path'\n+/// [ Path`]\n+pub fn last() {}\n+\n+pub struct Path;"}, {"sha": "0fd1a2703db998ecd8d85544e483b5f658821194", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -0,0 +1,66 @@\n+// run-pass\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use\n+\n+use std::future::Future;\n+\n+trait AsyncTrait {\n+    async fn default_impl() {\n+        assert!(false);\n+    }\n+\n+    async fn call_default_impl() {\n+        Self::default_impl().await\n+    }\n+}\n+\n+struct AsyncType;\n+\n+impl AsyncTrait for AsyncType {\n+    async fn default_impl() {\n+        // :)\n+    }\n+}\n+\n+async fn async_main() {\n+    // Should not assert false\n+    AsyncType::call_default_impl().await;\n+}\n+\n+// ------------------------------------------------------------------------- //\n+// Implementation Details Below...\n+\n+use std::pin::Pin;\n+use std::task::*;\n+\n+pub fn noop_waker() -> Waker {\n+    let raw = RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE);\n+\n+    // SAFETY: the contracts for RawWaker and RawWakerVTable are upheld\n+    unsafe { Waker::from_raw(raw) }\n+}\n+\n+const NOOP_WAKER_VTABLE: RawWakerVTable = RawWakerVTable::new(noop_clone, noop, noop, noop);\n+\n+unsafe fn noop_clone(_p: *const ()) -> RawWaker {\n+    RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE)\n+}\n+\n+unsafe fn noop(_p: *const ()) {}\n+\n+fn main() {\n+    let mut fut = async_main();\n+\n+    // Poll loop, just to test the future...\n+    let waker = noop_waker();\n+    let ctx = &mut Context::from_waker(&waker);\n+\n+    loop {\n+        match unsafe { Pin::new_unchecked(&mut fut).poll(ctx) } {\n+            Poll::Pending => {}\n+            Poll::Ready(()) => break,\n+        }\n+    }\n+}"}, {"sha": "61a826258d09f0c351b2ee6775b6aac15cb4f424", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc89a803d64fb6172c8406996831353bee18c3a7/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc89a803d64fb6172c8406996831353bee18c3a7/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.stderr?ref=dc89a803d64fb6172c8406996831353bee18c3a7", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/async-default-fn-overridden.rs:4:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}