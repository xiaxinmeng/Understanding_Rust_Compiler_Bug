{"sha": "85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18", "node_id": "C_kwDOAAsO6NoAKDg1ZWUwNGM0NGExZDRmZmMyZjJlM2JiMGMyMTc5MDhjZTQwNjJhMTg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-17T23:16:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-17T23:16:54Z"}, "message": "when writing uninit to an allocation, also clear relocations like other writes do", "tree": {"sha": "ede3d143d9ac3e9fc0db8c20af2f3de91f74aed4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ede3d143d9ac3e9fc0db8c20af2f3de91f74aed4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18", "html_url": "https://github.com/rust-lang/rust/commit/85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad4e98ed7dc535d161886b17f7792501baa82c9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad4e98ed7dc535d161886b17f7792501baa82c9b", "html_url": "https://github.com/rust-lang/rust/commit/ad4e98ed7dc535d161886b17f7792501baa82c9b"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "32b739f9335a0efbce66c94733ae3a5191f6f2a8", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18", "patch": "@@ -892,8 +892,11 @@ impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {\n     }\n \n     /// Mark the entire referenced range as uninitalized\n-    pub fn write_uninit(&mut self) {\n-        self.alloc.mark_init(self.range, false);\n+    pub fn write_uninit(&mut self) -> InterpResult<'tcx> {\n+        Ok(self\n+            .alloc\n+            .write_uninit(&self.tcx, self.range)\n+            .map_err(|e| e.to_interp_error(self.alloc_id))?)\n     }\n }\n \n@@ -1053,8 +1056,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // This also avoids writing to the target bytes so that the backing allocation is never\n             // touched if the bytes stay uninitialized for the whole interpreter execution. On contemporary\n             // operating system this can avoid physically allocating the page.\n-            dest_alloc.mark_init(dest_range, false); // `Size` multiplication\n-            dest_alloc.mark_relocation_range(relocations);\n+            dest_alloc\n+                .write_uninit(&tcx, dest_range)\n+                .map_err(|e| e.to_interp_error(dest_alloc_id))?; // `Size` multiplication\n+            // We can forget about the relocations, this is all not initialized anyway.\n             return Ok(());\n         }\n "}, {"sha": "e4660fe090ce5fb4900d9c350908103866906a1d", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18", "patch": "@@ -823,7 +823,7 @@ where\n             // Zero-sized access\n             return Ok(());\n         };\n-        alloc.write_uninit();\n+        alloc.write_uninit()?;\n         Ok(())\n     }\n "}, {"sha": "e106f9efc1870fe9f015d91cab004d9ae499c5c5", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18", "patch": "@@ -429,8 +429,7 @@ impl<Tag: Provenance, Extra> Allocation<Tag, Extra> {\n         let val = match val {\n             ScalarMaybeUninit::Scalar(scalar) => scalar,\n             ScalarMaybeUninit::Uninit => {\n-                self.mark_init(range, false);\n-                return Ok(());\n+                return self.write_uninit(cx, range);\n             }\n         };\n \n@@ -455,6 +454,13 @@ impl<Tag: Provenance, Extra> Allocation<Tag, Extra> {\n \n         Ok(())\n     }\n+\n+    /// Write \"uninit\" to the given memory range.\n+    pub fn write_uninit(&mut self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult {\n+        self.mark_init(range, false);\n+        self.clear_relocations(cx, range)?;\n+        return Ok(());\n+    }\n }\n \n /// Relocations.\n@@ -1056,7 +1062,7 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n         })\n     }\n \n-    pub fn mark_init(&mut self, range: AllocRange, is_init: bool) {\n+    fn mark_init(&mut self, range: AllocRange, is_init: bool) {\n         if range.size.bytes() == 0 {\n             return;\n         }"}]}