{"sha": "b491587c91c5cce0ed49751f552b0729e9b69d2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OTE1ODdjOTFjNWNjZTBlZDQ5NzUxZjU1MmIwNzI5ZTliNjlkMmY=", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2020-11-18T12:48:54Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2020-11-18T12:48:54Z"}, "message": "Extract write_srclink to its own method", "tree": {"sha": "3f3bd841c34aac790a1bb7a8fdd58019e50c0c84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f3bd841c34aac790a1bb7a8fdd58019e50c0c84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b491587c91c5cce0ed49751f552b0729e9b69d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b491587c91c5cce0ed49751f552b0729e9b69d2f", "html_url": "https://github.com/rust-lang/rust/commit/b491587c91c5cce0ed49751f552b0729e9b69d2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b491587c91c5cce0ed49751f552b0729e9b69d2f/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f836ad1aceb83507810d9499f56988fd24578d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f836ad1aceb83507810d9499f56988fd24578d", "html_url": "https://github.com/rust-lang/rust/commit/c4f836ad1aceb83507810d9499f56988fd24578d"}], "stats": {"total": 54, "additions": 24, "deletions": 30}, "files": [{"sha": "70969984b0739102525e56954568d71ad9566bcc", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b491587c91c5cce0ed49751f552b0729e9b69d2f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b491587c91c5cce0ed49751f552b0729e9b69d2f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b491587c91c5cce0ed49751f552b0729e9b69d2f", "patch": "@@ -86,7 +86,11 @@ crate type NameDoc = (String, Option<String>);\n \n crate fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n     crate::html::format::display_fn(move |f| {\n-        if !v.ends_with('/') && !v.is_empty() { write!(f, \"{}/\", v) } else { write!(f, \"{}\", v) }\n+        if !v.ends_with('/') && !v.is_empty() {\n+            write!(f, \"{}/\", v)\n+        } else {\n+            write!(f, \"{}\", v)\n+        }\n     })\n }\n \n@@ -1194,6 +1198,16 @@ fn write_minify(\n     }\n }\n \n+fn write_srclink(cx: &Context, item: &clean::Item, buf: &mut Buffer, cache: &Cache) {\n+    if let Some(l) = cx.src_href(item, cache) {\n+        write!(\n+            buf,\n+            \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"{}\\\">[src]</a>\",\n+            l, \"goto source code\"\n+        )\n+    }\n+}\n+\n #[derive(Debug, Eq, PartialEq, Hash)]\n struct ItemEntry {\n     url: String,\n@@ -1706,13 +1720,7 @@ fn print_item(cx: &Context, item: &clean::Item, buf: &mut Buffer, cache: &Cache)\n     // this page, and this link will be auto-clicked. The `id` attribute is\n     // used to find the link to auto-click.\n     if cx.shared.include_sources && !item.is_primitive() {\n-        if let Some(l) = cx.src_href(item, cache) {\n-            write!(\n-                buf,\n-                \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"{}\\\">[src]</a>\",\n-                l, \"goto source code\"\n-            );\n-        }\n+        write_srclink(cx, item, buf, cache);\n     }\n \n     write!(buf, \"</span>\"); // out-of-band\n@@ -1942,7 +1950,11 @@ fn document_stability(\n }\n \n fn document_non_exhaustive_header(item: &clean::Item) -> &str {\n-    if item.is_non_exhaustive() { \" (Non-exhaustive)\" } else { \"\" }\n+    if item.is_non_exhaustive() {\n+        \" (Non-exhaustive)\"\n+    } else {\n+        \"\"\n+    }\n }\n \n fn document_non_exhaustive(w: &mut Buffer, item: &clean::Item) {\n@@ -3693,13 +3705,7 @@ fn render_impl(\n             StabilityLevel::Unstable { .. } => None,\n         });\n         render_stability_since_raw(w, since.as_deref(), outer_version);\n-        if let Some(l) = cx.src_href(&i.impl_item, cache) {\n-            write!(\n-                w,\n-                \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"{}\\\">[src]</a>\",\n-                l, \"goto source code\"\n-            );\n-        }\n+        write_srclink(cx, &i.impl_item, w, cache);\n         write!(w, \"</h3>\");\n \n         if trait_.is_some() {\n@@ -3765,13 +3771,7 @@ fn render_impl(\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");\n                     render_stability_since_raw(w, item.stable_since().as_deref(), outer_version);\n-                    if let Some(l) = cx.src_href(item, cache) {\n-                        write!(\n-                            w,\n-                            \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"{}\\\">[src]</a>\",\n-                            l, \"goto source code\"\n-                        );\n-                    }\n+                    write_srclink(cx, item, w, cache);\n                     write!(w, \"</h4>\");\n                 }\n             }\n@@ -3787,13 +3787,7 @@ fn render_impl(\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code>\");\n                 render_stability_since_raw(w, item.stable_since().as_deref(), outer_version);\n-                if let Some(l) = cx.src_href(item, cache) {\n-                    write!(\n-                        w,\n-                        \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"{}\\\">[src]</a>\",\n-                        l, \"goto source code\"\n-                    );\n-                }\n+                write_srclink(cx, item, w, cache);\n                 write!(w, \"</h4>\");\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {"}]}