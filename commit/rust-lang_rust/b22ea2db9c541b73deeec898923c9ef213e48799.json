{"sha": "b22ea2db9c541b73deeec898923c9ef213e48799", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMmVhMmRiOWM1NDFiNzNkZWVlYzg5ODkyM2M5ZWYyMTNlNDg3OTk=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-04-23T20:41:21Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-04-24T14:55:57Z"}, "message": "reference: Audit & Edit chapter 8.1 Types.\n\n- Remove mention of unit type\n- Update closure types and reference types sections\n- Fix minor typos", "tree": {"sha": "9d84a0bb89813049d5c8fe140d9647dfba6bfe1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d84a0bb89813049d5c8fe140d9647dfba6bfe1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b22ea2db9c541b73deeec898923c9ef213e48799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b22ea2db9c541b73deeec898923c9ef213e48799", "html_url": "https://github.com/rust-lang/rust/commit/b22ea2db9c541b73deeec898923c9ef213e48799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b22ea2db9c541b73deeec898923c9ef213e48799/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69e47c77b257360ec64e714eb97abf6c51475f27", "url": "https://api.github.com/repos/rust-lang/rust/commits/69e47c77b257360ec64e714eb97abf6c51475f27", "html_url": "https://github.com/rust-lang/rust/commit/69e47c77b257360ec64e714eb97abf6c51475f27"}], "stats": {"total": 79, "additions": 30, "deletions": 49}, "files": [{"sha": "3de23250547767837725e286e4629502c0f30855", "filename": "src/doc/reference.md", "status": "modified", "additions": 30, "deletions": 49, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b22ea2db9c541b73deeec898923c9ef213e48799/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/b22ea2db9c541b73deeec898923c9ef213e48799/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=b22ea2db9c541b73deeec898923c9ef213e48799", "patch": "@@ -3383,17 +3383,10 @@ User-defined types have limited capabilities.\n \n The primitive types are the following:\n \n-* The \"unit\" type `()`, having the single \"unit\" value `()` (occasionally called\n-  \"nil\"). [^unittype]\n * The boolean type `bool` with values `true` and `false`.\n * The machine types.\n * The machine-dependent integer and floating-point types.\n \n-[^unittype]: The \"unit\" value `()` is *not* a sentinel \"null pointer\" value for\n-    reference variables; the \"unit\" type is the implicit return type from functions\n-    otherwise lacking a return type, and can be used in other contexts (such as\n-    message-sending or type-parametric code) as a zero-size type.]\n-\n #### Machine types\n \n The machine types are the following:\n@@ -3434,7 +3427,7 @@ UTF-32 string.\n A value of type `str` is a Unicode string, represented as an array of 8-bit\n unsigned bytes holding a sequence of UTF-8 codepoints. Since `str` is of\n unknown size, it is not a _first-class_ type, but can only be instantiated\n-through a pointer type, such as `&str` or `String`.\n+through a pointer type, such as `&str`.\n \n ### Tuple types\n \n@@ -3490,7 +3483,7 @@ to an array or slice is always bounds-checked.\n A `struct` *type* is a heterogeneous product of other types, called the\n *fields* of the type.[^structtype]\n \n-[^structtype]: `struct` types are analogous `struct` types in C,\n+[^structtype]: `struct` types are analogous to `struct` types in C,\n     the *record* types of the ML family,\n     or the *structure* types of the Lisp family.\n \n@@ -3504,7 +3497,7 @@ a corresponding struct *expression*; the resulting `struct` value will always\n have the same memory layout.\n \n The fields of a `struct` may be qualified by [visibility\n-modifiers](#re-exporting-and-visibility), to allow access to data in a\n+modifiers](#visibility-and-privacy), to allow access to data in a\n structure outside a module.\n \n A _tuple struct_ type is just like a structure type, except that the fields are\n@@ -3572,18 +3565,18 @@ varieties of pointer in Rust:\n \n * References (`&`)\n   : These point to memory _owned by some other value_.\n-    A reference type is written `&type` for some lifetime-variable `f`,\n-    or just `&'a type` when you need an explicit lifetime.\n+    A reference type is written `&type`,\n+    or `&'a type` when you need to specify an explicit lifetime.\n     Copying a reference is a \"shallow\" operation:\n     it involves only copying the pointer itself.\n-    Releasing a reference typically has no effect on the value it points to,\n-    with the exception of temporary values, which are released when the last\n-    reference to them is released.\n+    Releasing a reference has no effect on the value it points to,\n+    but a reference of a temporary value will keep it alive during the scope\n+    of the reference itself.\n \n * Raw pointers (`*`)\n   : Raw pointers are pointers without safety or liveness guarantees.\n     Raw pointers are written as `*const T` or `*mut T`,\n-    for example `*const int` means a raw pointer to an integer.\n+    for example `*const i32` means a raw pointer to a 32-bit integer.\n     Copying or dropping a raw pointer has no effect on the lifecycle of any\n     other value. Dereferencing a raw pointer or converting it to any other\n     pointer type is an [`unsafe` operation](#unsafe-functions).\n@@ -3616,38 +3609,26 @@ x = bo(5,7);\n \n ### Closure types\n \n-```{.ebnf .notation}\n-closure_type := [ 'unsafe' ] [ '<' lifetime-list '>' ] '|' arg-list '|'\n-                [ ':' bound-list ] [ '->' type ]\n-lifetime-list := lifetime | lifetime ',' lifetime-list\n-arg-list := ident ':' type | ident ':' type ',' arg-list\n-bound-list := bound | bound '+' bound-list\n-bound := path | lifetime\n-```\n-\n-The type of a closure mapping an input of type `A` to an output of type `B` is\n-`|A| -> B`. A closure with no arguments or return values has type `||`.\n-\n-An example of creating and calling a closure:\n+A [lambda expression](#lambda-expressions) produces a closure value with\n+a unique, anonymous type that cannot be written out.\n \n-```rust\n-let captured_var = 10;\n+Depending on the requirements of the closure, its type implements one or\n+more of the closure traits:\n \n-let closure_no_args = || println!(\"captured_var={}\", captured_var);\n+* `FnOnce`\n+  : The closure can be called once. A closure called as `FnOnce`\n+    can move out values from its environment.\n \n-let closure_args = |arg: i32| -> i32 {\n-  println!(\"captured_var={}, arg={}\", captured_var, arg);\n-  arg // Note lack of semicolon after 'arg'\n-};\n+* `FnMut`\n+  : The closure can be called multiple times as mutable. A closure called as\n+    `FnMut` can mutate values from its environment. `FnMut` implies\n+    `FnOnce`.\n \n-fn call_closure<F: Fn(), G: Fn(i32) -> i32>(c1: F, c2: G) {\n-  c1();\n-  c2(2);\n-}\n+* `Fn`\n+  : The closure can be called multiple times through a shared reference.\n+    A closure called as `Fn` can neither move out from nor mutate values\n+    from its environment. `Fn` implies `FnMut` and `FnOnce`.\n \n-call_closure(closure_no_args, closure_args);\n-\n-```\n \n ### Object types\n \n@@ -3694,19 +3675,19 @@ Within the body of an item that has type parameter declarations, the names of\n its type parameters are types:\n \n ```ignore\n-fn map<A: Clone, B: Clone>(f: |A| -> B, xs: &[A]) -> Vec<B> {\n+fn to_vec<A: Clone>(xs: &[A]) -> Vec<A> {\n     if xs.is_empty() {\n        return vec![];\n     }\n-    let first: B = f(xs[0].clone());\n-    let mut rest: Vec<B> = map(f, xs.slice(1, xs.len()));\n+    let first: A = xs[0].clone();\n+    let mut rest: Vec<A> = to_vec(&xs[1..]);\n     rest.insert(0, first);\n-    return rest;\n+    rest\n }\n ```\n \n-Here, `first` has type `B`, referring to `map`'s `B` type parameter; and `rest`\n-has type `Vec<B>`, a vector type with element type `B`.\n+Here, `first` has type `A`, referring to `to_vec`'s `A` type parameter; and `rest`\n+has type `Vec<A>`, a vector with element type `A`.\n \n ### Self types\n "}]}