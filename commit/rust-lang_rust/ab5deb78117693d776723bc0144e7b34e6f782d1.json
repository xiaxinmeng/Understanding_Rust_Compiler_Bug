{"sha": "ab5deb78117693d776723bc0144e7b34e6f782d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNWRlYjc4MTE3NjkzZDc3NjcyM2JjMDE0NGU3YjM0ZTZmNzgyZDE=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-16T18:35:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:25Z"}, "message": "Create struct patterns up to the hir level", "tree": {"sha": "06a1de31ffc6d9d75315829cd7aebce43b44e009", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06a1de31ffc6d9d75315829cd7aebce43b44e009"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab5deb78117693d776723bc0144e7b34e6f782d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5deb78117693d776723bc0144e7b34e6f782d1", "html_url": "https://github.com/rust-lang/rust/commit/ab5deb78117693d776723bc0144e7b34e6f782d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab5deb78117693d776723bc0144e7b34e6f782d1/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c2d83a4c809b0b11ca389bb454e197859e5116c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c2d83a4c809b0b11ca389bb454e197859e5116c", "html_url": "https://github.com/rust-lang/rust/commit/9c2d83a4c809b0b11ca389bb454e197859e5116c"}], "stats": {"total": 128, "additions": 116, "deletions": 12}, "files": [{"sha": "c6d442ec416c277add83cbb2394ce3df1eeafb06", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ab5deb78117693d776723bc0144e7b34e6f782d1/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5deb78117693d776723bc0144e7b34e6f782d1/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=ab5deb78117693d776723bc0144e7b34e6f782d1", "patch": "@@ -329,13 +329,23 @@ impl Expr {\n pub struct PatId(RawId);\n impl_arena_id!(PatId);\n \n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct FieldPat {\n+    name: Name,\n+    pat: Option<PatId>,\n+}\n+\n /// Close relative to rustc's hir::PatKind\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Pat {\n     Missing, // do we need this?\n     Wild,\n     Tuple(Vec<PatId>),\n-    Struct, // TODO\n+    Struct {\n+        path: Option<Path>,\n+        args: Vec<FieldPat>,\n+        // TODO: 'ellipsis' option\n+    },\n     Range {\n         start: ExprId,\n         end: ExprId,\n@@ -802,11 +812,30 @@ impl ExprCollector {\n                 Pat::Tuple(args)\n             }\n             ast::PatKind::PlaceholderPat(_) => Pat::Wild,\n+            ast::PatKind::StructPat(p) => {\n+                let path = p.path().and_then(Path::from_ast);\n+\n+                if let Some(field_list) = p.field_pat_list() {\n+                    let fields = field_list\n+                        .field_pats()\n+                        .into_iter()\n+                        .map(|f| FieldPat {\n+                            name: Name::new(f.ident),\n+                            pat: f.pat.as_ref().map(|p| self.collect_pat(p)),\n+                        })\n+                        .collect();\n+\n+                    Pat::Struct {\n+                        path: path,\n+                        args: fields,\n+                    }\n+                } else {\n+                    Pat::Missing\n+                }\n+            }\n+\n             // TODO: implement\n-            ast::PatKind::FieldPatList(_)\n-            | ast::PatKind::SlicePat(_)\n-            | ast::PatKind::StructPat(_)\n-            | ast::PatKind::RangePat(_) => Pat::Missing,\n+            ast::PatKind::SlicePat(_) | ast::PatKind::RangePat(_) => Pat::Missing,\n         };\n         let syntax_ptr = LocalSyntaxPtr::new(pat.syntax());\n         self.alloc_pat(pattern, syntax_ptr)"}, {"sha": "3e1a4f02ee5cf2722252dd87bffb325cec4b964f", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5deb78117693d776723bc0144e7b34e6f782d1/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5deb78117693d776723bc0144e7b34e6f782d1/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=ab5deb78117693d776723bc0144e7b34e6f782d1", "patch": "@@ -877,6 +877,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn infer_pat(&mut self, pat: PatId, expected: &Expectation) -> Ty {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n \n+        // FIXME: we can do some inference even if the expected ty isnt already\n+        // of the right form\n         let ty = match (&body[pat], &expected.ty) {\n             (Pat::Tuple(ref args), &Ty::Tuple(ref tuple_args))\n                 if args.len() == tuple_args.len() =>"}, {"sha": "3df23b16f0444edccae392dce8444dfddf0d32c2", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ab5deb78117693d776723bc0144e7b34e6f782d1/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5deb78117693d776723bc0144e7b34e6f782d1/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=ab5deb78117693d776723bc0144e7b34e6f782d1", "patch": "@@ -664,6 +664,75 @@ impl LiteralExpr {\n     }\n }\n \n+// STRUCT_PAT@[20; 42)\n+//   PATH@[20; 26)\n+//     PATH_SEGMENT@[20; 26)\n+//       NAME_REF@[20; 26)\n+//         IDENT@[20; 26) \"Strukt\"\n+//   WHITESPACE@[26; 27)\n+//   FIELD_PAT_LIST@[27; 42)\n+//     L_CURLY@[27; 28)\n+//     WHITESPACE@[28; 29)\n+//     IDENT@[29; 30) \"x\"\n+//     COLON@[30; 31)\n+//     WHITESPACE@[31; 32)\n+//     BIND_PAT@[32; 33)\n+//       NAME@[32; 33)\n+//         IDENT@[32; 33) \"x\"\n+//     COMMA@[33; 34)\n+//     WHITESPACE@[34; 35)\n+//     BIND_PAT@[35; 36)\n+//       NAME@[35; 36)\n+//         IDENT@[35; 36) \"y\"\n+//     COMMA@[36; 37)\n+//     WHITESPACE@[37; 38)\n+//     DOTDOT@[38; 40)\n+//     WHITESPACE@[40; 41)\n+//     R_CURLY@[41; 42)\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct FieldPat {\n+    pub ident: SmolStr,\n+    pub pat: Option<TreeArc<Pat>>,\n+}\n+\n+impl FieldPatList {\n+    // TODO: try returning an iterator?\n+    // FIXME: shouldnt the parser do this? :o\n+    pub fn field_pats(&self) -> Vec<FieldPat> {\n+        let mut child_iter = self.syntax().children();\n+        let mut pats = Vec::new();\n+\n+        while let Some(node) = child_iter.next() {\n+            if node.kind() != IDENT {\n+                continue;\n+            }\n+\n+            let ident = node.leaf_text().unwrap().clone();\n+            let mut pat = None;\n+\n+            // get pat\n+            while let Some(node) = child_iter.next() {\n+                if node.kind() == COMMA {\n+                    break;\n+                }\n+\n+                if let Some(p) = Pat::cast(node) {\n+                    pat = Some(p.to_owned());\n+                }\n+            }\n+\n+            let field_pat = FieldPat {\n+                ident: ident,\n+                pat: pat,\n+            };\n+            pats.push(field_pat);\n+        }\n+\n+        pats\n+    }\n+}\n+\n #[test]\n fn test_doc_comment_of_items() {\n     let file = SourceFile::parse("}, {"sha": "251d53bdfbf7ebf5005eea94d4cba40b2336f212", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab5deb78117693d776723bc0144e7b34e6f782d1/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5deb78117693d776723bc0144e7b34e6f782d1/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=ab5deb78117693d776723bc0144e7b34e6f782d1", "patch": "@@ -2156,7 +2156,6 @@ pub enum PatKind<'a> {\n     PlaceholderPat(&'a PlaceholderPat),\n     PathPat(&'a PathPat),\n     StructPat(&'a StructPat),\n-    FieldPatList(&'a FieldPatList),\n     TupleStructPat(&'a TupleStructPat),\n     TuplePat(&'a TuplePat),\n     SlicePat(&'a SlicePat),\n@@ -2171,7 +2170,6 @@ impl AstNode for Pat {\n             | PLACEHOLDER_PAT\n             | PATH_PAT\n             | STRUCT_PAT\n-            | FIELD_PAT_LIST\n             | TUPLE_STRUCT_PAT\n             | TUPLE_PAT\n             | SLICE_PAT\n@@ -2191,7 +2189,6 @@ impl Pat {\n             PLACEHOLDER_PAT => PatKind::PlaceholderPat(PlaceholderPat::cast(&self.syntax).unwrap()),\n             PATH_PAT => PatKind::PathPat(PathPat::cast(&self.syntax).unwrap()),\n             STRUCT_PAT => PatKind::StructPat(StructPat::cast(&self.syntax).unwrap()),\n-            FIELD_PAT_LIST => PatKind::FieldPatList(FieldPatList::cast(&self.syntax).unwrap()),\n             TUPLE_STRUCT_PAT => PatKind::TupleStructPat(TupleStructPat::cast(&self.syntax).unwrap()),\n             TUPLE_PAT => PatKind::TuplePat(TuplePat::cast(&self.syntax).unwrap()),\n             SLICE_PAT => PatKind::SlicePat(SlicePat::cast(&self.syntax).unwrap()),\n@@ -3066,7 +3063,15 @@ impl AstNode for StructPat {\n }\n \n \n-impl StructPat {}\n+impl StructPat {\n+    pub fn field_pat_list(&self) -> Option<&FieldPatList> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn path(&self) -> Option<&Path> {\n+        super::child_opt(self)\n+    }\n+}\n \n // TokenTree\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "33080f6641544b8fadede4a003c2fb90bac3e6a1", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab5deb78117693d776723bc0144e7b34e6f782d1/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/ab5deb78117693d776723bc0144e7b34e6f782d1/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=ab5deb78117693d776723bc0144e7b34e6f782d1", "patch": "@@ -490,8 +490,8 @@ Grammar(\n         \"RefPat\": ( options: [ \"Pat\" ]),\n         \"BindPat\": ( traits: [\"NameOwner\"] ),\n         \"PlaceholderPat\": (),\n-        \"PathPat\": ( options: [\"Path\"] ),\n-        \"StructPat\": (),\n+        \"PathPat\": ( options: [ \"Path\" ] ),\n+        \"StructPat\": ( options: [\"FieldPatList\", \"Path\"] ),\n         \"FieldPatList\": (),\n         \"TupleStructPat\": (\n             options: [\"Path\"],\n@@ -508,7 +508,6 @@ Grammar(\n                 \"PlaceholderPat\",\n                 \"PathPat\",\n                 \"StructPat\",\n-                \"FieldPatList\",\n                 \"TupleStructPat\",\n                 \"TuplePat\",\n                 \"SlicePat\","}]}