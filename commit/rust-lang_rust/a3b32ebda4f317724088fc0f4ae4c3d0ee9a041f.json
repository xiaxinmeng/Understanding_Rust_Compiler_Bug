{"sha": "a3b32ebda4f317724088fc0f4ae4c3d0ee9a041f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYjMyZWJkYTRmMzE3NzI0MDg4ZmMwZjRhZTRjM2QwZWU5YTA0MWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-27T22:08:36Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-27T22:08:36Z"}, "message": "Rollup merge of #28010 - GuillaumeGomez:patch-2, r=Manishearth\n\nr? @Manishearth", "tree": {"sha": "f1d838029f4b4faad5ef702d03ac2b810bd2dd5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1d838029f4b4faad5ef702d03ac2b810bd2dd5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3b32ebda4f317724088fc0f4ae4c3d0ee9a041f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b32ebda4f317724088fc0f4ae4c3d0ee9a041f", "html_url": "https://github.com/rust-lang/rust/commit/a3b32ebda4f317724088fc0f4ae4c3d0ee9a041f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3b32ebda4f317724088fc0f4ae4c3d0ee9a041f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abfa081c10c9401c8a2f858497fbac583bae234d", "url": "https://api.github.com/repos/rust-lang/rust/commits/abfa081c10c9401c8a2f858497fbac583bae234d", "html_url": "https://github.com/rust-lang/rust/commit/abfa081c10c9401c8a2f858497fbac583bae234d"}, {"sha": "fbbd8741710c1f8b40a8ec3422672043bbeaaa05", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbbd8741710c1f8b40a8ec3422672043bbeaaa05", "html_url": "https://github.com/rust-lang/rust/commit/fbbd8741710c1f8b40a8ec3422672043bbeaaa05"}], "stats": {"total": 215, "additions": 174, "deletions": 41}, "files": [{"sha": "0dbfffe5c644abba7c246926b7044e6e2fbe7dca", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 174, "deletions": 41, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/a3b32ebda4f317724088fc0f4ae4c3d0ee9a041f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b32ebda4f317724088fc0f4ae4c3d0ee9a041f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=a3b32ebda4f317724088fc0f4ae4c3d0ee9a041f", "patch": "@@ -73,10 +73,39 @@ the enum.\n \"##,\n \n E0025: r##\"\n-Each field of a struct can only be bound once in a pattern. Each occurrence of a\n-field name binds the value of that field, so to fix this error you will have to\n-remove or alter the duplicate uses of the field name. Perhaps you misspelt\n-another field name?\n+Each field of a struct can only be bound once in a pattern. Erroneous code\n+example:\n+\n+```\n+struct Foo {\n+    a: u8,\n+    b: u8,\n+}\n+\n+fn main(){\n+    let x = Foo { a:1, b:2 };\n+\n+    let Foo { a: x, a: y } = x;\n+    // error: field `a` bound multiple times in the pattern\n+}\n+```\n+\n+Each occurrence of a field name binds the value of that field, so to fix this\n+error you will have to remove or alter the duplicate uses of the field name.\n+Perhaps you misspelled another field name? Example:\n+\n+```\n+struct Foo {\n+    a: u8,\n+    b: u8,\n+}\n+\n+fn main(){\n+    let x = Foo { a:1, b:2 };\n+\n+    let Foo { a: x, b: y } = x; // ok!\n+}\n+```\n \"##,\n \n E0026: r##\"\n@@ -401,10 +430,35 @@ extern \"C\" {\n \"##,\n \n E0046: r##\"\n+Items are missing in a trait implementation. Erroneous code example:\n+\n+```\n+trait Foo {\n+    fn foo();\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {}\n+// error: not all trait items implemented, missing: `foo`\n+```\n+\n When trying to make some type implement a trait `Foo`, you must, at minimum,\n provide implementations for all of `Foo`'s required methods (meaning the\n methods that do not have default implementations), as well as any required\n-trait items like associated types or constants.\n+trait items like associated types or constants. Example:\n+\n+```\n+trait Foo {\n+    fn foo();\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn foo() {} // ok!\n+}\n+```\n \"##,\n \n E0049: r##\"\n@@ -615,14 +669,62 @@ variadic functions (except for its C-FFI).\n \n E0062: r##\"\n This error indicates that during an attempt to build a struct or struct-like\n-enum variant, one of the fields was specified more than once. Each field should\n-be specified exactly one time.\n+enum variant, one of the fields was specified more than once. Erroneous code\n+example:\n+\n+```\n+struct Foo {\n+    x: i32\n+}\n+\n+fn main() {\n+    let x = Foo {\n+                x: 0,\n+                x: 0, // error: field `x` specified more than once\n+            };\n+}\n+```\n+\n+Each field should be specified exactly one time. Example:\n+\n+```\n+struct Foo {\n+    x: i32\n+}\n+\n+fn main() {\n+    let x = Foo { x: 0 }; // ok!\n+}\n+```\n \"##,\n \n E0063: r##\"\n This error indicates that during an attempt to build a struct or struct-like\n-enum variant, one of the fields was not provided. Each field should be\n-specified exactly once.\n+enum variant, one of the fields was not provided. Erroneous code example:\n+\n+```\n+struct Foo {\n+    x: i32,\n+    y: i32\n+}\n+\n+fn main() {\n+    let x = Foo { x: 0 }; // error: missing field: `y`\n+}\n+```\n+\n+Each field should be specified exactly once. Example:\n+\n+```\n+struct Foo {\n+    x: i32,\n+    y: i32\n+}\n+\n+fn main() {\n+    let x = Foo { x: 0, y: 0 }; // ok!\n+}\n+```\n \"##,\n \n E0066: r##\"\n@@ -1025,7 +1127,7 @@ fn main() {\n }\n ```\n \n-The number of supplied parameters much exactly match the number of defined type\n+The number of supplied parameters must exactly match the number of defined type\n parameters.\n \"##,\n \n@@ -1620,14 +1722,20 @@ extern {\n E0131: r##\"\n It is not possible to define `main` with type parameters, or even with function\n parameters. When `main` is present, it must take no arguments and return `()`.\n+Erroneous code example:\n+\n+```\n+fn main<T>() { // error: main function is not allowed to have type parameters\n+}\n+```\n \"##,\n \n E0132: r##\"\n It is not possible to declare type parameters on a function that has the `start`\n attribute. Such a function must have the following type signature:\n \n ```\n-fn(isize, *const *const u8) -> isize\n+fn(isize, *const *const u8) -> isize;\n ```\n \"##,\n \n@@ -1779,7 +1887,7 @@ rfcs/blob/master/text/0019-opt-in-builtin-traits.md).\n \n E0193: r##\"\n `where` clauses must use generic type parameters: it does not make sense to use\n-them otherwise.  An example causing this error:\n+them otherwise. An example causing this error:\n \n ```\n trait Foo {\n@@ -1881,7 +1989,6 @@ unsafe impl Foo { }\n // converting it to this will fix it\n impl Foo { }\n ```\n-\n \"##,\n \n E0198: r##\"\n@@ -1898,7 +2005,6 @@ unsafe impl !Clone for Foo { }\n // this will compile\n impl !Clone for Foo { }\n ```\n-\n \"##,\n \n E0199: r##\"\n@@ -1916,7 +2022,6 @@ unsafe impl Bar for Foo { }\n // this will compile\n impl Bar for Foo { }\n ```\n-\n \"##,\n \n E0200: r##\"\n@@ -1934,7 +2039,6 @@ impl Bar for Foo { }\n // this will compile\n unsafe impl Bar for Foo { }\n ```\n-\n \"##,\n \n E0201: r##\"\n@@ -2717,6 +2821,36 @@ It is also possible to overload most operators for your own type by\n implementing traits from `std::ops`.\n \"##,\n \n+E0370: r##\"\n+The maximum value of an enum was reached, so it cannot be automatically\n+set in the next enum value. Erroneous code example:\n+\n+```\n+enum Foo {\n+    X = 0x7fffffffffffffff,\n+    Y // error: enum discriminant overflowed on value after\n+      //        9223372036854775807: i64; set explicitly via\n+      //        Y = -9223372036854775808 if that is desired outcome\n+}\n+```\n+\n+To fix this, please set manually the next enum value or put the enum variant\n+with the maximum value at the end of the enum. Examples:\n+\n+```\n+enum Foo {\n+    X = 0x7fffffffffffffff,\n+    Y = 0, // ok!\n+}\n+\n+// or:\n+enum Foo {\n+    Y = 0, // ok!\n+    X = 0x7fffffffffffffff,\n+}\n+```\n+\"##,\n+\n E0371: r##\"\n When `Trait2` is a subtrait of `Trait1` (for example, when `Trait2` has a\n definition like `trait Trait2: Trait1 { ... }`), it is not allowed to implement\n@@ -2869,44 +3003,44 @@ https://doc.rust-lang.org/std/marker/struct.PhantomData.html\n }\n \n register_diagnostics! {\n-    E0068,\n-    E0085,\n-    E0086,\n+//  E0068,\n+//  E0085,\n+//  E0086,\n     E0090,\n     E0103, // @GuillaumeGomez: I was unable to get this error, try your best!\n     E0104,\n     E0118,\n     E0122,\n-    E0123,\n-    E0127,\n-    E0129,\n-    E0141,\n+//  E0123,\n+//  E0127,\n+//  E0129,\n+//  E0141,\n //  E0159, // use of trait `{}` as struct constructor\n     E0163,\n     E0164,\n     E0167,\n //  E0168,\n-    E0173, // manual implementations of unboxed closure traits are experimental\n+//  E0173, // manual implementations of unboxed closure traits are experimental\n     E0174, // explicit use of unboxed closure methods are experimental\n     E0182,\n     E0183,\n-    E0187, // can't infer the kind of the closure\n-    E0188, // can not cast a immutable reference to a mutable pointer\n-    E0189, // deprecated: can only cast a boxed pointer to a boxed object\n-    E0190, // deprecated: can only cast a &-pointer to an &-object\n+//  E0187, // can't infer the kind of the closure\n+//  E0188, // can not cast a immutable reference to a mutable pointer\n+//  E0189, // deprecated: can only cast a boxed pointer to a boxed object\n+//  E0190, // deprecated: can only cast a &-pointer to an &-object\n     E0196, // cannot determine a type for this closure\n     E0203, // type parameter has more than one relaxed default bound,\n            // and only one is supported\n     E0208,\n-    E0209, // builtin traits can only be implemented on structs or enums\n+//  E0209, // builtin traits can only be implemented on structs or enums\n     E0212, // cannot extract an associated type from a higher-ranked trait bound\n-    E0213, // associated types are not accepted in this context\n+//  E0213, // associated types are not accepted in this context\n     E0214, // parenthesized parameters may only be used with a trait\n //  E0215, // angle-bracket notation is not stable with `Fn`\n //  E0216, // parenthetical notation is only stable with `Fn`\n-    E0217, // ambiguous associated type, defined in multiple supertraits\n-    E0218, // no associated type defined\n-    E0219, // associated type defined in higher-ranked supertrait\n+//  E0217, // ambiguous associated type, defined in multiple supertraits\n+//  E0218, // no associated type defined\n+//  E0219, // associated type defined in higher-ranked supertrait\n //  E0222, // Error code E0045 (variadic function must have C calling\n            // convention) duplicate\n     E0224, // at least one non-builtin train is required for an object type\n@@ -2916,25 +3050,24 @@ register_diagnostics! {\n     E0229, // associated type bindings are not allowed here\n     E0230, // there is no type parameter on trait\n     E0231, // only named substitution parameters are allowed\n-    E0233,\n-    E0234,\n+//  E0233,\n+//  E0234,\n //  E0235, // structure constructor specifies a structure of type but\n     E0236, // no lang item for range syntax\n     E0237, // no lang item for range syntax\n     E0238, // parenthesized parameters may only be used with a trait\n-    E0239, // `next` method of `Iterator` trait has unexpected type\n-    E0240,\n-    E0241,\n+//  E0239, // `next` method of `Iterator` trait has unexpected type\n+//  E0240,\n+//  E0241,\n     E0242, // internal error looking up a definition\n     E0245, // not a trait\n-    E0246, // invalid recursive type\n+//  E0246, // invalid recursive type\n     E0247, // found module name used as a type\n-    E0319, // trait impls for defaulted traits allowed just for structs/enums\n+//  E0319, // trait impls for defaulted traits allowed just for structs/enums\n     E0320, // recursive overflow during dropck\n     E0321, // extended coherence rules for defaulted traits violated\n     E0328, // cannot implement Unsize explicitly\n     E0329, // associated const depends on type parameter or Self.\n-    E0370, // discriminant overflow\n     E0374, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with one field being coerced, none found\n     E0375, // the trait `CoerceUnsized` may only be implemented for a coercion"}]}