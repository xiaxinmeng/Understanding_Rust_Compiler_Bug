{"sha": "507448945612f6b6f80a08a943e88d9a3a14b52f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNzQ0ODk0NTYxMmY2YjZmODBhMDhhOTQzZTg4ZDlhM2ExNGI1MmY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-03-12T16:37:22Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-03-12T16:37:22Z"}, "message": "Unregress using scalar unions in constants.", "tree": {"sha": "133fac3fbbb3575e7dff70db5684245570c664dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/133fac3fbbb3575e7dff70db5684245570c664dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/507448945612f6b6f80a08a943e88d9a3a14b52f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/507448945612f6b6f80a08a943e88d9a3a14b52f", "html_url": "https://github.com/rust-lang/rust/commit/507448945612f6b6f80a08a943e88d9a3a14b52f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/507448945612f6b6f80a08a943e88d9a3a14b52f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7486b9c208f7e1c4aa1e36961927327bd793e952", "url": "https://api.github.com/repos/rust-lang/rust/commits/7486b9c208f7e1c4aa1e36961927327bd793e952", "html_url": "https://github.com/rust-lang/rust/commit/7486b9c208f7e1c4aa1e36961927327bd793e952"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "d97be0b28725c26c94f647e0d1fee8d3e2e3ae7d", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/507448945612f6b6f80a08a943e88d9a3a14b52f/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507448945612f6b6f80a08a943e88d9a3a14b52f/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=507448945612f6b6f80a08a943e88d9a3a14b52f", "patch": "@@ -65,12 +65,12 @@ pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n fn mplace_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n     mplace: MPlaceTy<'tcx>,\n-) -> EvalResult<'tcx, ty::Const<'tcx>> {\n+) -> ty::Const<'tcx> {\n     let MemPlace { ptr, align, meta } = *mplace;\n     // extract alloc-offset pair\n     assert!(meta.is_none());\n-    let ptr = ptr.to_ptr()?;\n-    let alloc = ecx.memory.get(ptr.alloc_id)?;\n+    let ptr = ptr.to_ptr().unwrap();\n+    let alloc = ecx.memory.get(ptr.alloc_id).unwrap();\n     assert!(alloc.align >= align);\n     assert!(alloc.bytes.len() as u64 - ptr.offset.bytes() >= mplace.layout.size.bytes());\n     let mut alloc = alloc.clone();\n@@ -79,16 +79,16 @@ fn mplace_to_const<'tcx>(\n     // interned this?  I thought that is the entire point of that `FinishStatic` stuff?\n     let alloc = ecx.tcx.intern_const_alloc(alloc);\n     let val = ConstValue::ByRef(ptr, alloc);\n-    Ok(ty::Const { val, ty: mplace.layout.ty })\n+    ty::Const { val, ty: mplace.layout.ty }\n }\n \n fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n     op: OpTy<'tcx>,\n-) -> EvalResult<'tcx, ty::Const<'tcx>> {\n-    // We do not normalize just any data.  Only scalar layout and slices.\n+) -> ty::Const<'tcx> {\n+    // We do not normalize just any data.  Only non-union scalars and slices.\n     let normalize = match op.layout.abi {\n-        layout::Abi::Scalar(..) => true,\n+        layout::Abi::Scalar(..) => op.layout.ty.ty_adt_def().map_or(true, |adt| !adt.is_union()),\n         layout::Abi::ScalarPair(..) => op.layout.ty.is_slice(),\n         _ => false,\n     };\n@@ -100,11 +100,11 @@ fn op_to_const<'tcx>(\n     let val = match normalized_op {\n         Ok(mplace) => return mplace_to_const(ecx, mplace),\n         Err(Immediate::Scalar(x)) =>\n-            ConstValue::Scalar(x.not_undef()?),\n+            ConstValue::Scalar(x.not_undef().unwrap()),\n         Err(Immediate::ScalarPair(a, b)) =>\n-            ConstValue::Slice(a.not_undef()?, b.to_usize(ecx)?),\n+            ConstValue::Slice(a.not_undef().unwrap(), b.to_usize(ecx).unwrap()),\n     };\n-    Ok(ty::Const { val, ty: op.layout.ty })\n+    ty::Const { val, ty: op.layout.ty }\n }\n \n fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n@@ -488,7 +488,7 @@ pub fn const_field<'a, 'tcx>(\n     let field = ecx.operand_field(down, field.index() as u64).unwrap();\n     // and finally move back to the const world, always normalizing because\n     // this is not called for statics.\n-    op_to_const(&ecx, field).unwrap()\n+    op_to_const(&ecx, field)\n }\n \n // this function uses `unwrap` copiously, because an already validated constant must have valid\n@@ -534,9 +534,9 @@ fn validate_and_turn_into_const<'a, 'tcx>(\n         // Now that we validated, turn this into a proper constant.\n         let def_id = cid.instance.def.def_id();\n         if tcx.is_static(def_id).is_some() || cid.promoted.is_some() {\n-            mplace_to_const(&ecx, mplace)\n+            Ok(mplace_to_const(&ecx, mplace))\n         } else {\n-            op_to_const(&ecx, mplace.into())\n+            Ok(op_to_const(&ecx, mplace.into()))\n         }\n     })();\n "}, {"sha": "074014908bad45f0b2181cc848b9345156ac2fbd", "filename": "src/test/ui/consts/union_constant.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/507448945612f6b6f80a08a943e88d9a3a14b52f/src%2Ftest%2Fui%2Fconsts%2Funion_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507448945612f6b6f80a08a943e88d9a3a14b52f/src%2Ftest%2Fui%2Fconsts%2Funion_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funion_constant.rs?ref=507448945612f6b6f80a08a943e88d9a3a14b52f", "patch": "@@ -0,0 +1,11 @@\n+// compile-pass\n+\n+union Uninit {\n+    _never_use: *const u8,\n+    uninit: (),\n+}\n+\n+const UNINIT: Uninit = Uninit { uninit: () };\n+\n+fn main() {}\n+"}]}