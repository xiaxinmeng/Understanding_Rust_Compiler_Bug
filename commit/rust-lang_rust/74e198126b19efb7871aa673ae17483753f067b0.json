{"sha": "74e198126b19efb7871aa673ae17483753f067b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZTE5ODEyNmIxOWVmYjc4NzFhYTY3M2FlMTc0ODM3NTNmMDY3YjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-16T07:11:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-17T03:25:51Z"}, "message": "trans: Add kind to writeArchive\n\nUpdates our LLVM bindings to be able to write out multiple kinds of archives.\nThis commit also enables using LLVM instead of the system ar on all current\ntargets.", "tree": {"sha": "29ecd1434421fc39bd3e56f0fa2f8278978803b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29ecd1434421fc39bd3e56f0fa2f8278978803b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74e198126b19efb7871aa673ae17483753f067b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74e198126b19efb7871aa673ae17483753f067b0", "html_url": "https://github.com/rust-lang/rust/commit/74e198126b19efb7871aa673ae17483753f067b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74e198126b19efb7871aa673ae17483753f067b0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f0e733f1d8e597faee4bff0fc04838867725fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0e733f1d8e597faee4bff0fc04838867725fad", "html_url": "https://github.com/rust-lang/rust/commit/7f0e733f1d8e597faee4bff0fc04838867725fad"}], "stats": {"total": 67, "additions": 52, "deletions": 15}, "files": [{"sha": "f34ba40a8b2fe2888d61d84551ba05d056c5625a", "filename": "src/librustc_back/target/apple_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -23,6 +23,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         dll_prefix: \"lib\".to_string(),\n         dll_suffix: \".dylib\".to_string(),\n+        archive_format: \"bsd\".to_string(),\n         pre_link_args: Vec::new(),\n         .. Default::default()\n     }"}, {"sha": "9f6a1f1e530079f3b5239ce4edf9f3caf5a8bb27", "filename": "src/librustc_back/target/bitrig_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -22,6 +22,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         pre_link_args: vec!(\n         ),\n+        archive_format: \"bsd\".to_string(),\n \n         .. Default::default()\n     }"}, {"sha": "51a371db72446a04745316d64706785c2af5c78e", "filename": "src/librustc_back/target/dragonfly_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -29,6 +29,7 @@ pub fn opts() -> TargetOptions {\n             \"-Wl,--as-needed\".to_string(),\n         ),\n         position_independent_executables: true,\n+        archive_format: \"bsd\".to_string(),\n         .. Default::default()\n     }\n }"}, {"sha": "2c3d240dbf3d53851ad732980b532c4620d1fb29", "filename": "src/librustc_back/target/freebsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -18,6 +18,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         morestack: true,\n         has_rpath: true,\n+        archive_format: \"bsd\".to_string(),\n \n         .. Default::default()\n     }"}, {"sha": "9b20bd927cb7a1d161df8a1b19c512d5d080a0f8", "filename": "src/librustc_back/target/netbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -27,6 +27,7 @@ pub fn opts() -> TargetOptions {\n             \"-Wl,--as-needed\".to_string(),\n         ),\n         position_independent_executables: true,\n+        archive_format: \"bsd\".to_string(),\n         .. Default::default()\n     }\n }"}, {"sha": "9b20bd927cb7a1d161df8a1b19c512d5d080a0f8", "filename": "src/librustc_back/target/openbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -27,6 +27,7 @@ pub fn opts() -> TargetOptions {\n             \"-Wl,--as-needed\".to_string(),\n         ),\n         position_independent_executables: true,\n+        archive_format: \"bsd\".to_string(),\n         .. Default::default()\n     }\n }"}, {"sha": "85c0c721114f5837d6c112e9a47a74420c0087e3", "filename": "src/librustc_llvm/archive_ro.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_llvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_llvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Farchive_ro.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -118,6 +118,9 @@ impl<'a> Child<'a> {\n         unsafe {\n             let mut data_len = 0;\n             let data_ptr = ::LLVMRustArchiveChildData(self.ptr, &mut data_len);\n+            if data_ptr.is_null() {\n+                panic!(\"failed to read data from archive child\");\n+            }\n             slice::from_raw_parts(data_ptr as *const u8, data_len as usize)\n         }\n     }"}, {"sha": "051cc1c5bb2485544f07dd1e92ea5e3502d2b4de", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -452,6 +452,15 @@ pub enum DiagnosticKind {\n     DK_OptimizationFailure,\n }\n \n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+pub enum ArchiveKind {\n+    K_GNU,\n+    K_MIPS64,\n+    K_BSD,\n+    K_COFF,\n+}\n+\n // Opaque pointer types\n #[allow(missing_copy_implementations)]\n pub enum Module_opaque {}\n@@ -2119,7 +2128,8 @@ extern {\n     pub fn LLVMRustWriteArchive(Dst: *const c_char,\n                                 NumMembers: size_t,\n                                 Members: *const RustArchiveMemberRef,\n-                                WriteSymbtab: bool) -> c_int;\n+                                WriteSymbtab: bool,\n+                                Kind: ArchiveKind) -> c_int;\n     pub fn LLVMRustArchiveMemberNew(Filename: *const c_char,\n                                     Name: *const c_char,\n                                     Child: ArchiveChildRef) -> RustArchiveMemberRef;"}, {"sha": "02f4bc83b7524a0a040d66021e528323993f0f28", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -22,7 +22,7 @@ use std::str;\n \n use libc;\n use llvm::archive_ro::{ArchiveRO, Child};\n-use llvm;\n+use llvm::{self, ArchiveKind};\n use rustc::metadata::loader::METADATA_FILENAME;\n use rustc::session::Session;\n use rustc_back::tempdir::TempDir;\n@@ -208,28 +208,34 @@ impl<'a> ArchiveBuilder<'a> {\n     /// Combine the provided files, rlibs, and native libraries into a single\n     /// `Archive`.\n     pub fn build(&mut self) {\n-        let res = if self.using_llvm() {\n-            self.build_with_llvm()\n-        } else {\n-            self.build_with_ar_cmd()\n+        let res = match self.llvm_archive_kind() {\n+            Some(kind) => self.build_with_llvm(kind),\n+            None => self.build_with_ar_cmd(),\n         };\n         if let Err(e) = res {\n             self.config.sess.fatal(&format!(\"failed to build archive: {}\", e));\n         }\n     }\n \n-    pub fn using_llvm(&self) -> bool {\n+    pub fn llvm_archive_kind(&self) -> Option<ArchiveKind> {\n         if unsafe { llvm::LLVMVersionMinor() < 7 } {\n-            return false\n+            return None\n         }\n \n         // Currently LLVM only supports writing archives in the 'gnu' format.\n         match &self.config.sess.target.target.options.archive_format[..] {\n-            \"gnu\" => true,\n-            _ => false,\n+            \"gnu\" => Some(ArchiveKind::K_GNU),\n+            \"mips64\" => Some(ArchiveKind::K_MIPS64),\n+            \"bsd\" => Some(ArchiveKind::K_BSD),\n+            \"coff\" => Some(ArchiveKind::K_COFF),\n+            _ => None,\n         }\n     }\n \n+    pub fn using_llvm(&self) -> bool {\n+        self.llvm_archive_kind().is_some()\n+    }\n+\n     fn build_with_ar_cmd(&mut self) -> io::Result<()> {\n         let removals = mem::replace(&mut self.removals, Vec::new());\n         let additions = mem::replace(&mut self.additions, Vec::new());\n@@ -425,7 +431,7 @@ impl<'a> ArchiveBuilder<'a> {\n         }\n     }\n \n-    fn build_with_llvm(&mut self) -> io::Result<()> {\n+    fn build_with_llvm(&mut self, kind: ArchiveKind) -> io::Result<()> {\n         let mut archives = Vec::new();\n         let mut strings = Vec::new();\n         let mut members = Vec::new();\n@@ -482,7 +488,8 @@ impl<'a> ArchiveBuilder<'a> {\n             let r = llvm::LLVMRustWriteArchive(dst.as_ptr(),\n                                                members.len() as libc::size_t,\n                                                members.as_ptr(),\n-                                               self.should_update_symbols);\n+                                               self.should_update_symbols,\n+                                               kind);\n             let ret = if r != 0 {\n                 let err = llvm::LLVMRustGetLastError();\n                 let msg = if err.is_null() {"}, {"sha": "86225874df77d39b6e89e702b821bd092b9ae47b", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -120,7 +120,17 @@ LLVMRustArchiveChildName(const Archive::Child *child, size_t *size) {\n \n extern \"C\" const char*\n LLVMRustArchiveChildData(Archive::Child *child, size_t *size) {\n-    StringRef buf = child->getBuffer();\n+    StringRef buf;\n+#if LLVM_VERSION_MINOR >= 7\n+    ErrorOr<StringRef> buf_or_err = child->getBuffer();\n+    if (buf_or_err.getError()) {\n+      LLVMRustSetLastError(buf_or_err.getError().message().c_str());\n+      return NULL;\n+    }\n+    buf = buf_or_err.get();\n+#else\n+    buf = child->getBuffer();\n+#endif\n     *size = buf.size();\n     return buf.data();\n }\n@@ -144,7 +154,8 @@ extern \"C\" int\n LLVMRustWriteArchive(char *Dst,\n                      size_t NumMembers,\n                      const LLVMRustArchiveMember **NewMembers,\n-                     bool WriteSymbtab) {\n+                     bool WriteSymbtab,\n+                     Archive::Kind Kind) {\n #if LLVM_VERSION_MINOR >= 7\n   std::vector<NewArchiveIterator> Members;\n \n@@ -157,7 +168,7 @@ LLVMRustWriteArchive(char *Dst,\n       Members.push_back(NewArchiveIterator(Member->child, Member->name));\n     }\n   }\n-  auto pair = writeArchive(Dst, Members, WriteSymbtab);\n+  auto pair = writeArchive(Dst, Members, WriteSymbtab, Kind, false);\n   if (!pair.second)\n     return 0;\n   LLVMRustSetLastError(pair.second.message().c_str());"}]}