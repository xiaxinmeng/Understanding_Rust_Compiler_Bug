{"sha": "c9230b88b4852faf1dac59e05fd4f4d8c1f0dfb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MjMwYjg4YjQ4NTJmYWYxZGFjNTllMDVmZDRmNGQ4YzFmMGRmYjA=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T22:57:49Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T22:57:49Z"}, "message": "vscode: migrate inlay_hints to rust-analyzer-api.ts", "tree": {"sha": "405af93a91f3cf9e1fa2d71315bc9392d41ecd26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/405af93a91f3cf9e1fa2d71315bc9392d41ecd26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9230b88b4852faf1dac59e05fd4f4d8c1f0dfb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9230b88b4852faf1dac59e05fd4f4d8c1f0dfb0", "html_url": "https://github.com/rust-lang/rust/commit/c9230b88b4852faf1dac59e05fd4f4d8c1f0dfb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9230b88b4852faf1dac59e05fd4f4d8c1f0dfb0/comments", "author": null, "committer": null, "parents": [{"sha": "8aea0ec511d141b5c53d419960c688b13bb6c061", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aea0ec511d141b5c53d419960c688b13bb6c061", "html_url": "https://github.com/rust-lang/rust/commit/8aea0ec511d141b5c53d419960c688b13bb6c061"}], "stats": {"total": 47, "additions": 16, "deletions": 31}, "files": [{"sha": "5951cf1b457dc5c157b4542d0c064f633b7b28f8", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c9230b88b4852faf1dac59e05fd4f4d8c1f0dfb0/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c9230b88b4852faf1dac59e05fd4f4d8c1f0dfb0/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=c9230b88b4852faf1dac59e05fd4f4d8c1f0dfb0", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from './rust-analyzer-api';\n \n import { Ctx } from './ctx';\n import { log, sendRequestWithRetry } from './util';\n@@ -39,16 +39,6 @@ export function activateInlayHints(ctx: Ctx) {\n     void hintsUpdater.setEnabled(ctx.config.displayInlayHints);\n }\n \n-interface InlayHintsParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-}\n-\n-interface InlayHint {\n-    range: vscode.Range;\n-    kind: \"TypeHint\" | \"ParameterHint\";\n-    label: string;\n-}\n-\n const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n     after: {\n         color: new vscode.ThemeColor('rust_analyzer.inlayHint'),\n@@ -107,9 +97,9 @@ class HintsUpdater {\n         if (newHints == null) return;\n \n         const newTypeDecorations = newHints\n-            .filter(hint => hint.kind === 'TypeHint')\n+            .filter(hint => hint.kind === ra.InlayKind.TypeHint)\n             .map(hint => ({\n-                range: hint.range,\n+                range: this.ctx.client.protocol2CodeConverter.asRange(hint.range),\n                 renderOptions: {\n                     after: {\n                         contentText: `: ${hint.label}`,\n@@ -119,9 +109,9 @@ class HintsUpdater {\n         this.setTypeDecorations(editor, newTypeDecorations);\n \n         const newParameterDecorations = newHints\n-            .filter(hint => hint.kind === 'ParameterHint')\n+            .filter(hint => hint.kind === ra.InlayKind.ParameterHint)\n             .map(hint => ({\n-                range: hint.range,\n+                range: this.ctx.client.protocol2CodeConverter.asRange(hint.range),\n                 renderOptions: {\n                     before: {\n                         contentText: `${hint.label}: `,\n@@ -151,20 +141,15 @@ class HintsUpdater {\n         );\n     }\n \n-    private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n+    private async queryHints(documentUri: string): Promise<ra.InlayHint[] | null> {\n         this.pending.get(documentUri)?.cancel();\n \n         const tokenSource = new vscode.CancellationTokenSource();\n         this.pending.set(documentUri, tokenSource);\n \n-        const request: InlayHintsParams = { textDocument: { uri: documentUri } };\n+        const request = { textDocument: { uri: documentUri } };\n \n-        return sendRequestWithRetry<InlayHint[]>(\n-            this.ctx.client,\n-            'rust-analyzer/inlayHints',\n-            request,\n-            tokenSource.token\n-        )\n+        return sendRequestWithRetry(this.ctx.client, ra.inlayHints, request, tokenSource.token)\n             .catch(_ => null)\n             .finally(() => {\n                 if (!tokenSource.token.isCancellationRequested) {"}, {"sha": "68c2a94d0455833c6fd3cfe61b64295a721d69ae", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9230b88b4852faf1dac59e05fd4f4d8c1f0dfb0/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c9230b88b4852faf1dac59e05fd4f4d8c1f0dfb0/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=c9230b88b4852faf1dac59e05fd4f4d8c1f0dfb0", "patch": "@@ -20,21 +20,21 @@ export const log = {\n     }\n };\n \n-export async function sendRequestWithRetry<R>(\n+export async function sendRequestWithRetry<TParam, TRet>(\n     client: lc.LanguageClient,\n-    method: string,\n-    param: unknown,\n+    reqType: lc.RequestType<TParam, TRet, unknown>,\n+    param: TParam,\n     token?: vscode.CancellationToken,\n-): Promise<R> {\n+): Promise<TRet> {\n     for (const delay of [2, 4, 6, 8, 10, null]) {\n         try {\n             return await (token\n-                ? client.sendRequest(method, param, token)\n-                : client.sendRequest(method, param)\n+                ? client.sendRequest(reqType, param, token)\n+                : client.sendRequest(reqType, param)\n             );\n         } catch (error) {\n             if (delay === null) {\n-                log.error(\"LSP request timed out\", { method, param, error });\n+                log.error(\"LSP request timed out\", { method: reqType.method, param, error });\n                 throw error;\n             }\n \n@@ -43,7 +43,7 @@ export async function sendRequestWithRetry<R>(\n             }\n \n             if (error.code !== lc.ErrorCodes.ContentModified) {\n-                log.error(\"LSP request failed\", { method, param, error });\n+                log.error(\"LSP request failed\", { method: reqType.method, param, error });\n                 throw error;\n             }\n "}]}