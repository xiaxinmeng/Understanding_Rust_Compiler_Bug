{"sha": "6d3501ebe3b2395456c90d7c6147ce5a8244979d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMzUwMWViZTNiMjM5NTQ1NmM5MGQ3YzYxNDdjZTVhODI0NDk3OWQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-07T04:42:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-07T04:42:30Z"}, "message": "Rollup merge of #56250 - dwijnand:ptr-hash, r=alexcrichton\n\nIntroduce ptr::hash for references\n\nThe RHS is what I used, which wasn't as convenient as `ptr::eq`, so I wondered: should `ptr::hash` exist?\n\nMy first Rust PR, so I'm going to need some guidance. :)", "tree": {"sha": "45cbce44eafaaf9eb4434e00ee1057ef6eb7ad41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45cbce44eafaaf9eb4434e00ee1057ef6eb7ad41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d3501ebe3b2395456c90d7c6147ce5a8244979d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCfo2CRBK7hj4Ov3rIwAAdHIIAFDl8bcHvs6XJyTQ1hs4cCAC\nvSOKFyMLp1oLfvjJhoE5K+c2aFUZLnCb2JvadMRTSuPUjfWciZ9NSdZaUYWFZS27\nh88JXKdVLOdtRhNL30jJx/NgWJmDmwRei5faDguF9jFOnNIZNlOryrUVBEqL/LV1\nLp1zEYwAaf5MutAyETAI3FTI4nyY97zwLsANgg8DfJ97SERtU8laRfrxaqiZKffp\nZHYiKVM0igVZl/R5+QhlsCvGRNxBRjf82E5OLgfp/l04m06HSorzjfCq+pB6MCLr\nGiR2Mohtg+B0eu1xCTEajbLiMkDLOTYmJaFgccGYbLNMK/Hm44hg8LaLOE8STt0=\n=Y4m1\n-----END PGP SIGNATURE-----\n", "payload": "tree 45cbce44eafaaf9eb4434e00ee1057ef6eb7ad41\nparent 92638ef0cb753b2bb25b9cec8b6a1a8dce581327\nparent ad765695d1a831b9e1c11102a1e8680af86a89bd\nauthor kennytm <kennytm@gmail.com> 1544157750 +0800\ncommitter GitHub <noreply@github.com> 1544157750 +0800\n\nRollup merge of #56250 - dwijnand:ptr-hash, r=alexcrichton\n\nIntroduce ptr::hash for references\n\nThe RHS is what I used, which wasn't as convenient as `ptr::eq`, so I wondered: should `ptr::hash` exist?\n\nMy first Rust PR, so I'm going to need some guidance. :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3501ebe3b2395456c90d7c6147ce5a8244979d", "html_url": "https://github.com/rust-lang/rust/commit/6d3501ebe3b2395456c90d7c6147ce5a8244979d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d3501ebe3b2395456c90d7c6147ce5a8244979d/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92638ef0cb753b2bb25b9cec8b6a1a8dce581327", "url": "https://api.github.com/repos/rust-lang/rust/commits/92638ef0cb753b2bb25b9cec8b6a1a8dce581327", "html_url": "https://github.com/rust-lang/rust/commit/92638ef0cb753b2bb25b9cec8b6a1a8dce581327"}, {"sha": "ad765695d1a831b9e1c11102a1e8680af86a89bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad765695d1a831b9e1c11102a1e8680af86a89bd", "html_url": "https://github.com/rust-lang/rust/commit/ad765695d1a831b9e1c11102a1e8680af86a89bd"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "8630dd402ef68043a34ec9523de66007296ba3fc", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6d3501ebe3b2395456c90d7c6147ce5a8244979d/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3501ebe3b2395456c90d7c6147ce5a8244979d/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=6d3501ebe3b2395456c90d7c6147ce5a8244979d", "patch": "@@ -2516,6 +2516,36 @@ pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {\n     a == b\n }\n \n+/// Hash the raw pointer address behind a reference, rather than the value\n+/// it points to.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(ptr_hash)]\n+/// use std::collections::hash_map::DefaultHasher;\n+/// use std::hash::{Hash, Hasher};\n+/// use std::ptr;\n+///\n+/// let five = 5;\n+/// let five_ref = &five;\n+///\n+/// let mut hasher = DefaultHasher::new();\n+/// ptr::hash(five_ref, &mut hasher);\n+/// let actual = hasher.finish();\n+///\n+/// let mut hasher = DefaultHasher::new();\n+/// (five_ref as *const i32).hash(&mut hasher);\n+/// let expected = hasher.finish();\n+///\n+/// assert_eq!(actual, expected);\n+/// ```\n+#[unstable(feature = \"ptr_hash\", reason = \"newly added\", issue = \"56286\")]\n+pub fn hash<T, S: hash::Hasher>(hashee: *const T, into: &mut S) {\n+    use hash::Hash;\n+    hashee.hash(into);\n+}\n+\n // Impls for function pointers\n macro_rules! fnptr_impls_safety_abi {\n     ($FnTy: ty, $($Arg: ident),*) => {"}]}