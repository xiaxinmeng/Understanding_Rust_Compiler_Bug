{"sha": "3c2b706da60f3a2d2e5421ac1a7e137a50b18a25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMmI3MDZkYTYwZjNhMmQyZTU0MjFhYzFhN2UxMzdhNTBiMThhMjU=", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-08-11T03:16:11Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-08-25T21:49:28Z"}, "message": "implement InitMaskCompressed using InitChunkIter, cleanup", "tree": {"sha": "15f051de794adb718fbe8987a4b187b1833953df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15f051de794adb718fbe8987a4b187b1833953df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c2b706da60f3a2d2e5421ac1a7e137a50b18a25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c2b706da60f3a2d2e5421ac1a7e137a50b18a25", "html_url": "https://github.com/rust-lang/rust/commit/3c2b706da60f3a2d2e5421ac1a7e137a50b18a25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c2b706da60f3a2d2e5421ac1a7e137a50b18a25/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eaccab24e536f5708bef8538cfe0dca367ed544", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eaccab24e536f5708bef8538cfe0dca367ed544", "html_url": "https://github.com/rust-lang/rust/commit/1eaccab24e536f5708bef8538cfe0dca367ed544"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "348cf761285969a71d34c5f385a13aba8a59dcd8", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3c2b706da60f3a2d2e5421ac1a7e137a50b18a25/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2b706da60f3a2d2e5421ac1a7e137a50b18a25/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=3c2b706da60f3a2d2e5421ac1a7e137a50b18a25", "patch": "@@ -563,22 +563,12 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n \n         let mut ranges = smallvec::SmallVec::<[u64; 1]>::new();\n         let initial = self.init_mask.get(range.start);\n-        let mut cur_len = 1;\n-        let mut cur = initial;\n \n-        for i in 1..range.size.bytes() {\n-            // FIXME: optimize to bitshift the current uninitialized block's bits and read the top bit.\n-            if self.init_mask.get(range.start + Size::from_bytes(i)) == cur {\n-                cur_len += 1;\n-            } else {\n-                ranges.push(cur_len);\n-                cur_len = 1;\n-                cur = !cur;\n-            }\n+        for chunk in self.init_mask.range_as_init_chunks(range.start, range.end()) {\n+            let len = chunk.range().end.bytes() - chunk.range().start.bytes();\n+            ranges.push(len);\n         }\n \n-        ranges.push(cur_len);\n-\n         InitMaskCompressed { ranges, initial }\n     }\n \n@@ -830,45 +820,65 @@ impl InitMask {\n     }\n }\n \n+/// A contiguous chunk of initialized or uninitialized memory.\n+pub enum InitChunk {\n+    Init(Range<Size>),\n+    Uninit(Range<Size>),\n+}\n+\n+impl InitChunk {\n+    #[inline]\n+    pub fn range(&self) -> Range<Size> {\n+        match self {\n+            Self::Init(r) => r.clone(),\n+            Self::Uninit(r) => r.clone(),\n+        }\n+    }\n+}\n+\n /// Yields [`InitChunk`]s. See [`InitMask::range_as_init_chunks`].\n pub struct InitChunkIter<'a> {\n     init_mask: &'a InitMask,\n+    /// Whether the last chunk was initialized.\n+    is_init: bool,\n     /// The current byte index into `init_mask`.\n     start: Size,\n     /// The end byte index into `init_mask`.\n     end: Size,\n }\n \n-/// A contiguous chunk of initialized or uninitialized memory.\n-pub enum InitChunk {\n-    Init(Range<Size>),\n-    Uninit(Range<Size>),\n-}\n-\n impl<'a> InitChunkIter<'a> {\n+    #[inline]\n     fn new(init_mask: &'a InitMask, start: Size, end: Size) -> Self {\n         assert!(start <= end);\n         assert!(end <= init_mask.len);\n-        Self { init_mask, start, end }\n+\n+        let is_init = if start < end { init_mask.get(start) } else { false };\n+\n+        Self { init_mask, is_init, start, end }\n     }\n }\n \n impl<'a> Iterator for InitChunkIter<'a> {\n     type Item = InitChunk;\n \n+    #[inline]\n     fn next(&mut self) -> Option<Self::Item> {\n         if self.start >= self.end {\n             return None;\n         }\n \n-        let is_init = self.init_mask.get(self.start);\n         let end_of_chunk =\n-            find_bit(&self.init_mask, self.start, self.end, !is_init).unwrap_or(self.end);\n+            find_bit(&self.init_mask, self.start, self.end, !self.is_init).unwrap_or(self.end);\n         let range = self.start..end_of_chunk;\n \n+        let ret =\n+            Some(if self.is_init { InitChunk::Init(range) } else { InitChunk::Uninit(range) });\n+\n+        self.is_init = !self.is_init;\n         self.start = end_of_chunk;\n \n-        Some(if is_init { InitChunk::Init(range) } else { InitChunk::Uninit(range) })\n+        ret\n     }\n }\n "}]}