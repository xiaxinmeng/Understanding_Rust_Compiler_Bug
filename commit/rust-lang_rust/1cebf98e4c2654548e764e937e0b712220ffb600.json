{"sha": "1cebf98e4c2654548e764e937e0b712220ffb600", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZWJmOThlNGMyNjU0NTQ4ZTc2NGU5MzdlMGI3MTIyMjBmZmI2MDA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-07-15T22:17:35Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-07-27T18:38:33Z"}, "message": "Make a lint instead", "tree": {"sha": "08856135fb2d9d42b403b4de5873521f63c6f7d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08856135fb2d9d42b403b4de5873521f63c6f7d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cebf98e4c2654548e764e937e0b712220ffb600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cebf98e4c2654548e764e937e0b712220ffb600", "html_url": "https://github.com/rust-lang/rust/commit/1cebf98e4c2654548e764e937e0b712220ffb600", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cebf98e4c2654548e764e937e0b712220ffb600/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b68a03bded5380278ae162bacc79d926e41fd76c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b68a03bded5380278ae162bacc79d926e41fd76c", "html_url": "https://github.com/rust-lang/rust/commit/b68a03bded5380278ae162bacc79d926e41fd76c"}], "stats": {"total": 162, "additions": 71, "deletions": 91}, "files": [{"sha": "a3a133daa09c460bb7a3beec60612ce702a6aeb5", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1cebf98e4c2654548e764e937e0b712220ffb600/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cebf98e4c2654548e764e937e0b712220ffb600/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1cebf98e4c2654548e764e937e0b712220ffb600", "patch": "@@ -892,6 +892,13 @@ impl Decl_ {\n             DeclItem(_) => &[]\n         }\n     }\n+\n+    pub fn is_local(&self) -> bool {\n+        match *self {\n+            Decl_::DeclLocal(_) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n /// represents one arm of a 'match'"}, {"sha": "ca30ed4a536e2be1a0c910bb9a6a183a09fe0a9e", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1cebf98e4c2654548e764e937e0b712220ffb600/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cebf98e4c2654548e764e937e0b712220ffb600/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=1cebf98e4c2654548e764e937e0b712220ffb600", "patch": "@@ -722,6 +722,46 @@ impl EarlyLintPass for IllegalFloatLiteralPattern {\n     }\n }\n \n+declare_lint! {\n+    pub UNUSED_DOC_COMMENT,\n+    Warn,\n+    \"detects doc comments that aren't used by rustdoc\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct UnusedDocComment;\n+\n+impl LintPass for UnusedDocComment {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![UNUSED_DOC_COMMENT]\n+    }\n+}\n+\n+impl UnusedDocComment {\n+    fn warn_if_doc<'a, 'tcx,\n+                   I: Iterator<Item=&'a ast::Attribute>,\n+                   C: LintContext<'tcx>>(&self, mut attrs: I, cx: &C) {\n+        if let Some(attr) = attrs.find(|a| a.is_value_str() && a.check_name(\"doc\")) {\n+            cx.struct_span_lint(UNUSED_DOC_COMMENT, attr.span, \"doc comment not used by rustdoc\")\n+              .emit();\n+        }\n+    }\n+}\n+\n+impl EarlyLintPass for UnusedDocComment {\n+    fn check_local(&mut self, cx: &EarlyContext, decl: &ast::Local) {\n+        self.warn_if_doc(decl.attrs.iter(), cx);\n+    }\n+\n+    fn check_arm(&mut self, cx: &EarlyContext, arm: &ast::Arm) {\n+        self.warn_if_doc(arm.attrs.iter(), cx);\n+    }\n+\n+    fn check_expr(&mut self, cx: &EarlyContext, expr: &ast::Expr) {\n+        self.warn_if_doc(expr.attrs.iter(), cx);\n+    }\n+}\n+\n declare_lint! {\n     pub UNCONDITIONAL_RECURSION,\n     Warn,"}, {"sha": "83c00c178a0ba540ce6e3588e2efa05709e63a23", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cebf98e4c2654548e764e937e0b712220ffb600/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cebf98e4c2654548e764e937e0b712220ffb600/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=1cebf98e4c2654548e764e937e0b712220ffb600", "patch": "@@ -111,6 +111,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnusedImportBraces,\n                        AnonymousParameters,\n                        IllegalFloatLiteralPattern,\n+                       UnusedDocComment,\n                        );\n \n     add_early_builtin_with_new!(sess,"}, {"sha": "df3f68fd1c6c142ae10dc7dd21a85474d7f1a941", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1cebf98e4c2654548e764e937e0b712220ffb600/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cebf98e4c2654548e764e937e0b712220ffb600/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1cebf98e4c2654548e764e937e0b712220ffb600", "patch": "@@ -718,6 +718,13 @@ impl Stmt {\n         };\n         self\n     }\n+\n+    pub fn is_item(&self) -> bool {\n+        match self.node {\n+            StmtKind::Local(_) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n impl fmt::Debug for Stmt {"}, {"sha": "582f72e398d7cd2a1125e17c2148ceee2ce60c3d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1cebf98e4c2654548e764e937e0b712220ffb600/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cebf98e4c2654548e764e937e0b712220ffb600/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1cebf98e4c2654548e764e937e0b712220ffb600", "patch": "@@ -2420,12 +2420,6 @@ impl<'a> Parser<'a> {\n             expr.map(|mut expr| {\n                 attrs.extend::<Vec<_>>(expr.attrs.into());\n                 expr.attrs = attrs;\n-                if if let Some(ref doc) = expr.attrs.iter().find(|x| x.is_sugared_doc) {\n-                    self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n-                    true\n-                } else { false } {\n-                    return expr;\n-                }\n                 match expr.node {\n                     ExprKind::If(..) | ExprKind::IfLet(..) => {\n                         if !expr.attrs.is_empty() {\n@@ -3110,9 +3104,6 @@ impl<'a> Parser<'a> {\n \n     // `else` token already eaten\n     pub fn parse_else_expr(&mut self) -> PResult<'a, P<Expr>> {\n-        if self.prev_token_kind == PrevTokenKind::DocComment {\n-            return Err(self.span_fatal_err(self.span, Error::UselessDocComment));\n-        }\n         if self.eat_keyword(keywords::If) {\n             return self.parse_if_expr(ThinVec::new());\n         } else {\n@@ -3126,9 +3117,6 @@ impl<'a> Parser<'a> {\n                           span_lo: Span,\n                           mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         // Parse: `for <src_pat> in <src_expr> <src_loop_block>`\n-        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n-            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n-        }\n \n         let pat = self.parse_pat()?;\n         self.expect_keyword(keywords::In)?;\n@@ -3144,9 +3132,6 @@ impl<'a> Parser<'a> {\n     pub fn parse_while_expr(&mut self, opt_ident: Option<ast::SpannedIdent>,\n                             span_lo: Span,\n                             mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n-        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n-            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n-        }\n         if self.token.is_keyword(keywords::Let) {\n             return self.parse_while_let_expr(opt_ident, span_lo, attrs);\n         }\n@@ -3175,9 +3160,6 @@ impl<'a> Parser<'a> {\n     pub fn parse_loop_expr(&mut self, opt_ident: Option<ast::SpannedIdent>,\n                            span_lo: Span,\n                            mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n-        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n-            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n-        }\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n         let span = span_lo.to(body.span);\n@@ -3188,19 +3170,13 @@ impl<'a> Parser<'a> {\n     pub fn parse_catch_expr(&mut self, span_lo: Span, mut attrs: ThinVec<Attribute>)\n         -> PResult<'a, P<Expr>>\n     {\n-        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n-            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n-        }\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n         Ok(self.mk_expr(span_lo.to(body.span), ExprKind::Catch(body), attrs))\n     }\n \n     // `match` token already eaten\n     fn parse_match_expr(&mut self, mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n-        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n-            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n-        }\n         let match_span = self.prev_span;\n         let lo = self.prev_span;\n         let discriminant = self.parse_expr_res(RESTRICTION_NO_STRUCT_LITERAL,\n@@ -3238,9 +3214,6 @@ impl<'a> Parser<'a> {\n         maybe_whole!(self, NtArm, |x| x);\n \n         let attrs = self.parse_outer_attributes()?;\n-        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n-            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n-        }\n         let pats = self.parse_pats()?;\n         let guard = if self.eat_keyword(keywords::If) {\n             Some(self.parse_expr()?)\n@@ -3695,9 +3668,6 @@ impl<'a> Parser<'a> {\n \n     /// Parse a local variable declaration\n     fn parse_local(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Local>> {\n-        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n-            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n-        }\n         let lo = self.span;\n         let pat = self.parse_pat()?;\n \n@@ -4187,8 +4157,6 @@ impl<'a> Parser<'a> {\n                 stmts.push(stmt);\n             } else if self.token == token::Eof {\n                 break;\n-            } else if let token::DocComment(_) = self.token {\n-                return Err(self.span_fatal_err(self.span, Error::UselessDocComment));\n             } else {\n                 // Found only `;` or `}`.\n                 continue;"}, {"sha": "bceec186120a7245f1d291c2167cc83e391fa9aa", "filename": "src/test/compile-fail/useless_comment.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1cebf98e4c2654548e764e937e0b712220ffb600/src%2Ftest%2Fcompile-fail%2Fuseless_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cebf98e4c2654548e764e937e0b712220ffb600/src%2Ftest%2Fcompile-fail%2Fuseless_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless_comment.rs?ref=1cebf98e4c2654548e764e937e0b712220ffb600", "patch": "@@ -8,19 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo3() -> i32 {\n-    let mut x = 12;\n-    /// z //~ ERROR E0585\n-    while x < 1 {\n-        /// x //~ ERROR E0585\n-        //~^ ERROR attributes on non-item statements and expressions are experimental\n-        x += 1;\n+#![deny(unused_doc_comment)]\n+\n+fn foo() {\n+    /// a //~ ERROR unused doc comment\n+    let x = 12;\n+\n+    /// b //~ ERROR unused doc comment\n+    match x {\n+        /// c //~ ERROR unused doc comment\n+        1 => {},\n+        _ => {}\n     }\n-    /// d //~ ERROR E0585\n-    return x;\n+\n+    /// foo //~ ERROR unused doc comment\n+    unsafe {}\n }\n \n fn main() {\n-    /// e //~ ERROR E0585\n-    foo3();\n-}\n+    foo();\n+}\n\\ No newline at end of file"}, {"sha": "52ac7b6a76944e0e94353e5441e60fba420b6db1", "filename": "src/test/compile-fail/useless_comment2.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b68a03bded5380278ae162bacc79d926e41fd76c/src%2Ftest%2Fcompile-fail%2Fuseless_comment2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b68a03bded5380278ae162bacc79d926e41fd76c/src%2Ftest%2Fcompile-fail%2Fuseless_comment2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless_comment2.rs?ref=b68a03bded5380278ae162bacc79d926e41fd76c", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foo() {\n-    /// a //~ ERROR E0585\n-    let x = 12;\n-\n-    /// b //~ ERROR E0585\n-    match x {\n-        /// c //~ ERROR E0585\n-        1 => {},\n-        _ => {}\n-    }\n-}\n-\n-fn main() {\n-    foo();\n-}\n\\ No newline at end of file"}, {"sha": "c26031b5eb647df05cd0882b681a067de7fcc312", "filename": "src/test/compile-fail/useless_comment3.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b68a03bded5380278ae162bacc79d926e41fd76c/src%2Ftest%2Fcompile-fail%2Fuseless_comment3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b68a03bded5380278ae162bacc79d926e41fd76c/src%2Ftest%2Fcompile-fail%2Fuseless_comment3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless_comment3.rs?ref=b68a03bded5380278ae162bacc79d926e41fd76c", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foo() {\n-    let x = 13;\n-    /// x //~ ERROR E0585\n-    if x == 12 {\n-        /// y\n-        println!(\"hello\");\n-    }\n-}\n-\n-fn main() {\n-    foo();\n-}"}]}