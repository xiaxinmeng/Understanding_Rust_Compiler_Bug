{"sha": "94d142b596465989958db270e1c6bec83ee1eb99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZDE0MmI1OTY0NjU5ODk5NThkYjI3MGUxYzZiZWM4M2VlMWViOTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-29T09:58:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-03T22:41:00Z"}, "message": "Add in the bounds into the typeparameterdefs for assoc types", "tree": {"sha": "82cf5d0f202f25aea40d643035c85aaa9087c779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82cf5d0f202f25aea40d643035c85aaa9087c779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94d142b596465989958db270e1c6bec83ee1eb99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94d142b596465989958db270e1c6bec83ee1eb99", "html_url": "https://github.com/rust-lang/rust/commit/94d142b596465989958db270e1c6bec83ee1eb99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94d142b596465989958db270e1c6bec83ee1eb99/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "319d778ed306d0b3c35af79c47c702dbdebf6d09", "url": "https://api.github.com/repos/rust-lang/rust/commits/319d778ed306d0b3c35af79c47c702dbdebf6d09", "html_url": "https://github.com/rust-lang/rust/commit/319d778ed306d0b3c35af79c47c702dbdebf6d09"}], "stats": {"total": 131, "additions": 64, "deletions": 67}, "files": [{"sha": "66c311e4d664be40819490efee5e746f3ad74a63", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 61, "deletions": 64, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/94d142b596465989958db270e1c6bec83ee1eb99/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d142b596465989958db270e1c6bec83ee1eb99/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=94d142b596465989958db270e1c6bec83ee1eb99", "patch": "@@ -1661,35 +1661,30 @@ fn ty_generics_for_type(ccx: &CrateCtxt,\n fn ty_generics_for_trait(ccx: &CrateCtxt,\n                          trait_id: ast::NodeId,\n                          substs: &subst::Substs,\n-                         generics: &ast::Generics,\n+                         ast_generics: &ast::Generics,\n                          items: &[ast::TraitItem])\n                          -> ty::Generics {\n     let mut generics =\n         ty_generics(ccx,\n                     subst::TypeSpace,\n-                    generics.lifetimes.as_slice(),\n-                    generics.ty_params.as_slice(),\n+                    ast_generics.lifetimes.as_slice(),\n+                    ast_generics.ty_params.as_slice(),\n                     ty::Generics::empty(),\n-                    &generics.where_clause,\n+                    &ast_generics.where_clause,\n                     DontCreateTypeParametersForAssociatedTypes);\n \n     // Add in type parameters for any associated types.\n     for item in items.iter() {\n         match *item {\n             ast::TypeTraitItem(ref associated_type) => {\n-                let def = ty::TypeParameterDef {\n-                    space: subst::TypeSpace,\n-                    index: generics.types.len(subst::TypeSpace),\n-                    name: associated_type.ty_param.ident.name,\n-                    def_id: local_def(associated_type.ty_param.id),\n-                    bounds: ty::ParamBounds {\n-                        builtin_bounds: ty::empty_builtin_bounds(),\n-                        trait_bounds: Vec::new(),\n-                        region_bounds: Vec::new(),\n-                    },\n-                    associated_with: Some(local_def(trait_id)),\n-                    default: None,\n-                };\n+                let def =\n+                    get_or_create_type_parameter_def(\n+                        ccx,\n+                        subst::TypeSpace,\n+                        &associated_type.ty_param,\n+                        generics.types.len(subst::TypeSpace),\n+                        &ast_generics.where_clause,\n+                        Some(local_def(trait_id)));\n                 ccx.tcx.ty_param_defs.borrow_mut().insert(associated_type.ty_param.id,\n                                                           def.clone());\n                 generics.types.push(subst::TypeSpace, def);\n@@ -1960,7 +1955,8 @@ fn ty_generics<'tcx,AC>(this: &AC,\n                                                    space,\n                                                    param,\n                                                    i,\n-                                                   where_clause);\n+                                                   where_clause,\n+                                                   None);\n         debug!(\"ty_generics: def for type param: {}, {}\",\n                def.repr(this.tcx()),\n                space);\n@@ -1980,63 +1976,64 @@ fn ty_generics<'tcx,AC>(this: &AC,\n     }\n \n     return result;\n+}\n \n-    fn get_or_create_type_parameter_def<'tcx,AC>(\n-                                        this: &AC,\n-                                        space: subst::ParamSpace,\n-                                        param: &ast::TyParam,\n-                                        index: uint,\n-                                        where_clause: &ast::WhereClause)\n-                                        -> ty::TypeParameterDef\n-                                        where AC: AstConv<'tcx> {\n-        match this.tcx().ty_param_defs.borrow().find(&param.id) {\n-            Some(d) => { return (*d).clone(); }\n-            None => { }\n-        }\n-\n-        let param_ty = ty::ParamTy::new(space, index, local_def(param.id));\n-        let bounds = compute_bounds(this,\n-                                    param.ident.name,\n-                                    param_ty,\n-                                    param.bounds.as_slice(),\n-                                    &param.unbound,\n-                                    param.span,\n-                                    where_clause);\n-        let default = match param.default {\n-            None => None,\n-            Some(ref path) => {\n-                let ty = ast_ty_to_ty(this, &ExplicitRscope, &**path);\n-                let cur_idx = index;\n-\n-                ty::walk_ty(ty, |t| {\n-                    match ty::get(t).sty {\n-                        ty::ty_param(p) => if p.idx > cur_idx {\n+fn get_or_create_type_parameter_def<'tcx,AC>(this: &AC,\n+                                             space: subst::ParamSpace,\n+                                             param: &ast::TyParam,\n+                                             index: uint,\n+                                             where_clause: &ast::WhereClause,\n+                                             associated_with: Option<ast::DefId>)\n+                                             -> ty::TypeParameterDef\n+    where AC: AstConv<'tcx>\n+{\n+    match this.tcx().ty_param_defs.borrow().find(&param.id) {\n+        Some(d) => { return (*d).clone(); }\n+        None => { }\n+    }\n+\n+    let param_ty = ty::ParamTy::new(space, index, local_def(param.id));\n+    let bounds = compute_bounds(this,\n+                                param.ident.name,\n+                                param_ty,\n+                                param.bounds.as_slice(),\n+                                &param.unbound,\n+                                param.span,\n+                                where_clause);\n+    let default = match param.default {\n+        None => None,\n+        Some(ref path) => {\n+            let ty = ast_ty_to_ty(this, &ExplicitRscope, &**path);\n+            let cur_idx = index;\n+\n+            ty::walk_ty(ty, |t| {\n+                match ty::get(t).sty {\n+                    ty::ty_param(p) => if p.idx > cur_idx {\n                         span_err!(this.tcx().sess, path.span, E0128,\n                                   \"type parameters with a default cannot use \\\n                                    forward declared identifiers\");\n                         },\n                         _ => {}\n                     }\n-                });\n+            });\n \n-                Some(ty)\n-            }\n-        };\n+            Some(ty)\n+        }\n+    };\n \n-        let def = ty::TypeParameterDef {\n-            space: space,\n-            index: index,\n-            name: param.ident.name,\n-            def_id: local_def(param.id),\n-            associated_with: None,\n-            bounds: bounds,\n-            default: default\n-        };\n+    let def = ty::TypeParameterDef {\n+        space: space,\n+        index: index,\n+        name: param.ident.name,\n+        def_id: local_def(param.id),\n+        associated_with: associated_with,\n+        bounds: bounds,\n+        default: default\n+    };\n \n-        this.tcx().ty_param_defs.borrow_mut().insert(param.id, def.clone());\n+    this.tcx().ty_param_defs.borrow_mut().insert(param.id, def.clone());\n \n-        def\n-    }\n+    def\n }\n \n fn compute_bounds<'tcx,AC>(this: &AC,"}, {"sha": "f96b3916f06dee31cdf5a2f6ae16b2f4a680ac8f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94d142b596465989958db270e1c6bec83ee1eb99/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d142b596465989958db270e1c6bec83ee1eb99/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=94d142b596465989958db270e1c6bec83ee1eb99", "patch": "@@ -2203,12 +2203,12 @@ impl Clean<Stability> for attr::Stability {\n impl Clean<Item> for ast::AssociatedType {\n     fn clean(&self, cx: &DocContext) -> Item {\n         Item {\n-            source: self.span.clean(cx),\n-            name: Some(self.ident.clean(cx)),\n+            source: self.ty_param.span.clean(cx),\n+            name: Some(self.ty_param.ident.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             inner: AssociatedTypeItem,\n             visibility: None,\n-            def_id: ast_util::local_def(self.id),\n+            def_id: ast_util::local_def(self.ty_param.id),\n             stability: None,\n         }\n     }"}]}