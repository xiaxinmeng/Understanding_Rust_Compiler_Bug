{"sha": "3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOGJiMjJhZjE3ZjdjOTdlMjUxM2FjNGQ5OTMyM2RjYjQ2Y2E2ZmU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-11T20:28:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-11T20:28:43Z"}, "message": "rustc: Unify regions in most cases. (Nested functions aren't properly handled yet.)", "tree": {"sha": "25bc18dd39e7560bb9bd7acc1d58b3a9d221460d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25bc18dd39e7560bb9bd7acc1d58b3a9d221460d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe", "html_url": "https://github.com/rust-lang/rust/commit/3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3", "html_url": "https://github.com/rust-lang/rust/commit/f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "90be3f5b12e70e79fccf50a98d5c361eb48e08d2", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe", "patch": "@@ -43,6 +43,20 @@ type ctxt = {\n     parent: parent\n };\n \n+// Returns true if `subblock` is equal to or is lexically nested inside\n+// `superblock` and false otherwise.\n+fn block_contains(region_map: @region_map, superblock: ast::node_id,\n+                  subblock: ast::node_id) -> bool {\n+    let subblock = subblock;\n+    while superblock != subblock {\n+        alt region_map.parent_blocks.find(subblock) {\n+            none { ret false; }\n+            some(blk) { subblock = blk; }\n+        }\n+    }\n+    ret true;\n+}\n+\n fn resolve_ty(ty: @ast::ty, cx: ctxt, visitor: visit::vt<ctxt>) {\n     alt ty.node {\n         ast::ty_rptr({id: region_id, node: node}, _) {"}, {"sha": "a9a71f511005b49ee6e8cf3290b3c73c82261522", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe", "patch": "@@ -283,6 +283,7 @@ enum type_err {\n     terr_mode_mismatch(mode, mode),\n     terr_constr_len(uint, uint),\n     terr_constr_mismatch(@type_constr, @type_constr),\n+    terr_regions_differ,\n }\n \n enum param_bound {\n@@ -1885,6 +1886,45 @@ mod unify {\n           }\n         }\n     }\n+    fn unify_regions(cx: @uctxt, e_region: region, a_region: region,\n+                     variance: variance) -> option<region> {\n+        let sub, super;\n+        alt variance {\n+            covariant { super = e_region; sub = a_region; }\n+            contravariant { super = a_region; sub = e_region; }\n+            invariant {\n+                ret if e_region == a_region { some(e_region) } else { none };\n+            }\n+        }\n+\n+        alt (super, sub) {\n+            (re_caller(_), re_caller(_)) {\n+                // FIXME: This is wrong w/r/t nested functions.\n+                ret some(super);\n+            }\n+            (re_caller(_), re_named(_)) | (re_named(_), re_caller(_)) {\n+                ret none;\n+            }\n+            (re_named(a), re_named(b)) {\n+                ret if a == b { some(super) } else { none }\n+            }\n+            (re_caller(_), re_block(_)) | (re_named(_), re_block(_)) {\n+                // FIXME: This is wrong w/r/t nested functions.\n+                ret some(super);\n+            }\n+            (re_block(_), re_caller(_)) | (re_block(_), re_named(_)) {\n+                ret none;\n+            }\n+            (re_block(superblock), re_block(subblock)) {\n+                if region::block_contains(cx.tcx.region_map, superblock,\n+                                          subblock) {\n+                    ret some(super);\n+                } else {\n+                    ret none;\n+                }\n+            }\n+        }\n+    }\n \n     fn unify_step(cx: @uctxt, expected: t, actual: t,\n                   variance: variance) -> result {\n@@ -1943,9 +1983,13 @@ mod unify {\n             unify_mt(cx, e_mt, a_mt, variance, terr_ptr_mutability, mk_ptr)\n           }\n           (ty_rptr(e_region, e_mt), ty_rptr(a_region, a_mt)) {\n-            // TODO: Unify regions. Take covariance/invariance into account.\n-            unify_mt(cx, e_mt, a_mt, variance, terr_ref_mutability,\n-                     bind mk_rptr(_, re_block(0), _))\n+            alt unify_regions(cx, e_region, a_region, variance) {\n+                none { ures_err(terr_regions_differ) }\n+                some(r_region) {\n+                    unify_mt(cx, e_mt, a_mt, variance, terr_ref_mutability,\n+                             bind mk_rptr(_, r_region, _))\n+                }\n+            }\n           }\n           (ty_res(e_id, e_inner, e_tps), ty_res(a_id, a_inner, a_tps))\n           if e_id == a_id {\n@@ -2154,6 +2198,9 @@ fn type_err_to_str(err: type_err) -> str {\n                 \" but found one with constraint \" +\n                 ty_constr_to_str(a_constr);\n       }\n+      terr_regions_differ {\n+        ret \"inconsistent pointer lifetimes\"\n+      }\n     }\n }\n "}, {"sha": "7bc779429fb3ce53de218828c8c09d97fa3b3fea", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=3e8bb22af17f7c97e2513ac4d99323dcb46ca6fe", "patch": "@@ -319,8 +319,9 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n       ast::ty_ptr(mt) {\n         ty::mk_ptr(tcx, ast_mt_to_mt(tcx, mode, mt))\n       }\n-      ast::ty_rptr(_, mt) {\n-        ty::mk_rptr(tcx, ty::re_block(0), ast_mt_to_mt(tcx, mode, mt))\n+      ast::ty_rptr(region, mt) {\n+        let region = tcx.region_map.ast_type_to_region.get(region.id);\n+        ty::mk_rptr(tcx, region, ast_mt_to_mt(tcx, mode, mt))\n       }\n       ast::ty_tup(fields) {\n         let flds = vec::map(fields, bind ast_ty_to_ty(tcx, mode, _));"}]}