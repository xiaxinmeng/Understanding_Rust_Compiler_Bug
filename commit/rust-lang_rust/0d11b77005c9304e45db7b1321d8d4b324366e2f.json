{"sha": "0d11b77005c9304e45db7b1321d8d4b324366e2f", "node_id": "C_kwDOAAsO6NoAKDBkMTFiNzcwMDVjOTMwNGU0NWRiN2IxMzIxZDhkNGIzMjQzNjZlMmY", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-31T10:14:29Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-21T10:24:58Z"}, "message": "Some ty::tls cleanups\n\nPutting the cfged functions into a seperate module and giving them\nbetter names.", "tree": {"sha": "6f2ac01746f323bf9f044fd439e2047a253eb55f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f2ac01746f323bf9f044fd439e2047a253eb55f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d11b77005c9304e45db7b1321d8d4b324366e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d11b77005c9304e45db7b1321d8d4b324366e2f", "html_url": "https://github.com/rust-lang/rust/commit/0d11b77005c9304e45db7b1321d8d4b324366e2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d11b77005c9304e45db7b1321d8d4b324366e2f/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd530793454a42951dcc0fe50b1cd66f397c438", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd530793454a42951dcc0fe50b1cd66f397c438", "html_url": "https://github.com/rust-lang/rust/commit/afd530793454a42951dcc0fe50b1cd66f397c438"}], "stats": {"total": 104, "additions": 53, "deletions": 51}, "files": [{"sha": "bae2c863a813d0b7c1be6fa711aa6d808ba30a08", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d11b77005c9304e45db7b1321d8d4b324366e2f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d11b77005c9304e45db7b1321d8d4b324366e2f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0d11b77005c9304e45db7b1321d8d4b324366e2f", "patch": "@@ -2222,12 +2222,6 @@ pub struct DeducedParamAttrs {\n     pub read_only: bool,\n }\n \n-// We are comparing types with different invariant lifetimes, so `ptr::eq`\n-// won't work for us.\n-fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n-    t as *const () == u as *const ()\n-}\n-\n pub fn provide(providers: &mut ty::query::Providers) {\n     providers.module_reexports =\n         |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);"}, {"sha": "f1fe47f6ba6edd976f2468d194c23b4cea3500e4", "filename": "compiler/rustc_middle/src/ty/context/tls.rs", "status": "modified", "additions": 53, "deletions": 45, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/0d11b77005c9304e45db7b1321d8d4b324366e2f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d11b77005c9304e45db7b1321d8d4b324366e2f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs?ref=0d11b77005c9304e45db7b1321d8d4b324366e2f", "patch": "@@ -1,18 +1,13 @@\n-use super::{ptr_eq, GlobalCtxt, TyCtxt};\n+use super::{GlobalCtxt, TyCtxt};\n \n use crate::dep_graph::TaskDepsRef;\n use crate::ty::query;\n use rustc_data_structures::sync::{self, Lock};\n use rustc_errors::Diagnostic;\n use std::mem;\n+use std::ptr;\n use thin_vec::ThinVec;\n \n-#[cfg(not(parallel_compiler))]\n-use std::cell::Cell;\n-\n-#[cfg(parallel_compiler)]\n-use rustc_rayon_core as rayon_core;\n-\n /// This is the implicit state of rustc. It contains the current\n /// `TyCtxt` and query. It is updated when creating a local interner or\n /// executing a new query. Whenever there's a `TyCtxt` value available\n@@ -52,46 +47,53 @@ impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {\n     }\n }\n \n-/// Sets Rayon's thread-local variable, which is preserved for Rayon jobs\n-/// to `value` during the call to `f`. It is restored to its previous value after.\n-/// This is used to set the pointer to the new `ImplicitCtxt`.\n #[cfg(parallel_compiler)]\n-#[inline]\n-fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n-    rayon_core::tlv::with(value, f)\n-}\n+mod tlv {\n+    use rustc_rayon_core as rayon_core;\n+    use std::ptr;\n+\n+    /// Gets Rayon's thread-local variable, which is preserved for Rayon jobs.\n+    /// This is used to get the pointer to the current `ImplicitCtxt`.\n+    #[inline]\n+    pub(super) fn get_tlv() -> usize {\n+        rayon_core::tlv::get()\n+    }\n \n-/// Gets Rayon's thread-local variable, which is preserved for Rayon jobs.\n-/// This is used to get the pointer to the current `ImplicitCtxt`.\n-#[cfg(parallel_compiler)]\n-#[inline]\n-pub fn get_tlv() -> usize {\n-    rayon_core::tlv::get()\n+    /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs\n+    /// to `value` during the call to `f`. It is restored to its previous value after.\n+    /// This is used to set the pointer to the new `ImplicitCtxt`.\n+    #[inline]\n+    pub(super) fn with_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n+        rayon_core::tlv::with(value, f)\n+    }\n }\n \n #[cfg(not(parallel_compiler))]\n-thread_local! {\n-    /// A thread local variable that stores a pointer to the current `ImplicitCtxt`.\n-    static TLV: Cell<usize> = const { Cell::new(0) };\n-}\n+mod tlv {\n+    use std::cell::Cell;\n+    use std::ptr;\n \n-/// Sets TLV to `value` during the call to `f`.\n-/// It is restored to its previous value after.\n-/// This is used to set the pointer to the new `ImplicitCtxt`.\n-#[cfg(not(parallel_compiler))]\n-#[inline]\n-fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n-    let old = get_tlv();\n-    let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));\n-    TLV.with(|tlv| tlv.set(value));\n-    f()\n-}\n+    thread_local! {\n+        /// A thread local variable that stores a pointer to the current `ImplicitCtxt`.\n+        static TLV: Cell<usize> = const { Cell::new(0) };\n+    }\n \n-/// Gets the pointer to the current `ImplicitCtxt`.\n-#[cfg(not(parallel_compiler))]\n-#[inline]\n-fn get_tlv() -> usize {\n-    TLV.with(|tlv| tlv.get())\n+    /// Gets the pointer to the current `ImplicitCtxt`.\n+    #[inline]\n+    pub(super) fn get_tlv() -> usize {\n+        TLV.with(|tlv| tlv.get())\n+    }\n+\n+    /// Sets TLV to `value` during the call to `f`.\n+    /// It is restored to its previous value after.\n+    /// This is used to set the pointer to the new `ImplicitCtxt`.\n+    #[inline]\n+    pub(super) fn with_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n+        let old = get_tlv();\n+        let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));\n+        TLV.with(|tlv| tlv.set(value));\n+        f()\n+    }\n }\n \n /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.\n@@ -100,7 +102,7 @@ pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) ->\n where\n     F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,\n {\n-    set_tlv(context as *const _ as usize, || f(&context))\n+    tlv::with_tlv(context as *const _ as usize, || f(&context))\n }\n \n /// Allows access to the current `ImplicitCtxt` in a closure if one is available.\n@@ -109,7 +111,7 @@ pub fn with_context_opt<F, R>(f: F) -> R\n where\n     F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,\n {\n-    let context = get_tlv();\n+    let context = tlv::get_tlv();\n     if context == 0 {\n         f(None)\n     } else {\n@@ -141,9 +143,15 @@ pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R\n where\n     F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,\n {\n-    with_context(|context| unsafe {\n-        assert!(ptr_eq(context.tcx.gcx, tcx.gcx));\n-        let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);\n+    with_context(|context| {\n+        // The two gcx have different invariant lifetimes, so we need to erase them for the comparison.\n+        assert!(ptr::eq(\n+            context.tcx.gcx as *const _ as *const (),\n+            tcx.gcx as *const _ as *const ()\n+        ));\n+\n+        let context: &ImplicitCtxt<'_, '_> = unsafe { mem::transmute(context) };\n+\n         f(context)\n     })\n }"}]}