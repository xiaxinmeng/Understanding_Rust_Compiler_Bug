{"sha": "540ca2ff2acf5539868b1f1c156f6c895fdc9ffc", "node_id": "C_kwDOAAsO6NoAKDU0MGNhMmZmMmFjZjU1Mzk4NjhiMWYxYzE1NmY2Yzg5NWZkYzlmZmM", "commit": {"author": {"name": "DebugSteven", "email": "debugsteven@gmail.com", "date": "2023-01-05T04:57:20Z"}, "committer": {"name": "DebugSteven", "email": "debugsteven@gmail.com", "date": "2023-01-20T17:05:19Z"}, "message": "run cargo install to check for x installation and version", "tree": {"sha": "807a944ef9c039d2834720f1f0a6d71fd6685525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/807a944ef9c039d2834720f1f0a6d71fd6685525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc", "html_url": "https://github.com/rust-lang/rust/commit/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc/comments", "author": {"login": "DebugSteven", "id": 10746702, "node_id": "MDQ6VXNlcjEwNzQ2NzAy", "avatar_url": "https://avatars.githubusercontent.com/u/10746702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DebugSteven", "html_url": "https://github.com/DebugSteven", "followers_url": "https://api.github.com/users/DebugSteven/followers", "following_url": "https://api.github.com/users/DebugSteven/following{/other_user}", "gists_url": "https://api.github.com/users/DebugSteven/gists{/gist_id}", "starred_url": "https://api.github.com/users/DebugSteven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DebugSteven/subscriptions", "organizations_url": "https://api.github.com/users/DebugSteven/orgs", "repos_url": "https://api.github.com/users/DebugSteven/repos", "events_url": "https://api.github.com/users/DebugSteven/events{/privacy}", "received_events_url": "https://api.github.com/users/DebugSteven/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DebugSteven", "id": 10746702, "node_id": "MDQ6VXNlcjEwNzQ2NzAy", "avatar_url": "https://avatars.githubusercontent.com/u/10746702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DebugSteven", "html_url": "https://github.com/DebugSteven", "followers_url": "https://api.github.com/users/DebugSteven/followers", "following_url": "https://api.github.com/users/DebugSteven/following{/other_user}", "gists_url": "https://api.github.com/users/DebugSteven/gists{/gist_id}", "starred_url": "https://api.github.com/users/DebugSteven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DebugSteven/subscriptions", "organizations_url": "https://api.github.com/users/DebugSteven/orgs", "repos_url": "https://api.github.com/users/DebugSteven/repos", "events_url": "https://api.github.com/users/DebugSteven/events{/privacy}", "received_events_url": "https://api.github.com/users/DebugSteven/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "html_url": "https://github.com/rust-lang/rust/commit/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "f6a5fb14d53b343bfd06aebb2eb0bde7994d7db0", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=540ca2ff2acf5539868b1f1c156f6c895fdc9ffc", "patch": "@@ -5607,6 +5607,7 @@ dependencies = [\n  \"lazy_static\",\n  \"miropt-test-tools\",\n  \"regex\",\n+ \"semver\",\n  \"termcolor\",\n  \"walkdir\",\n ]"}, {"sha": "cdf1dd366046c56c92d285239cef4ecc9101e251", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=540ca2ff2acf5539868b1f1c156f6c895fdc9ffc", "patch": "@@ -12,6 +12,7 @@ miropt-test-tools = { path = \"../miropt-test-tools\" }\n lazy_static = \"1\"\n walkdir = \"2\"\n ignore = \"0.4.18\"\n+semver = \"1.0\"\n termcolor = \"1.1.3\"\n \n [[bin]]"}, {"sha": "35000320d1abfcbe24610b55ab4a5df2f5f82a76", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=540ca2ff2acf5539868b1f1c156f6c895fdc9ffc", "patch": "@@ -70,3 +70,4 @@ pub mod ui_tests;\n pub mod unit_tests;\n pub mod unstable_book;\n pub mod walk;\n+pub mod x_version;"}, {"sha": "4c446b72a44951f20d4261debcbb2ae75a635de8", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=540ca2ff2acf5539868b1f1c156f6c895fdc9ffc", "patch": "@@ -114,6 +114,8 @@ fn main() {\n         check!(alphabetical, &compiler_path);\n         check!(alphabetical, &library_path);\n \n+        check!(x_version, &root_path, &cargo);\n+\n         let collected = {\n             drain_handles(&mut handles);\n "}, {"sha": "c470d502a6548d31fcb298b9f4a022dee4598880", "filename": "src/tools/tidy/src/x_version.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc/src%2Ftools%2Ftidy%2Fsrc%2Fx_version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc/src%2Ftools%2Ftidy%2Fsrc%2Fx_version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fx_version.rs?ref=540ca2ff2acf5539868b1f1c156f6c895fdc9ffc", "patch": "@@ -0,0 +1,68 @@\n+use semver::Version;\n+use std::path::Path;\n+use std::process::{Command, Stdio};\n+\n+pub fn check(root: &Path, cargo: &Path, bad: &mut bool) {\n+    let cargo_list = Command::new(cargo).args([\"install\", \"--list\"]).stdout(Stdio::piped()).spawn();\n+\n+    let child = match cargo_list {\n+        Ok(child) => child,\n+        Err(e) => return tidy_error!(bad, \"failed to run `cargo`: {}\", e),\n+    };\n+\n+    let cargo_list = child.wait_with_output().unwrap();\n+\n+    if cargo_list.status.success() {\n+        let exe_list = String::from_utf8_lossy(&cargo_list.stdout);\n+        let exe_list = exe_list.lines();\n+\n+        let mut installed: Option<Version> = None;\n+\n+        for line in exe_list {\n+            let mut iter = line.split_whitespace();\n+            if iter.next() == Some(\"x\") {\n+                if let Some(version) = iter.next() {\n+                    // Check this is the rust-lang/rust x tool installation since it should be\n+                    // installed at a path containing `src/tools/x`.\n+                    if let Some(path) = iter.next() {\n+                        if path.contains(&\"src/tools/x\") {\n+                            let version = version.strip_prefix(\"v\").unwrap();\n+                            installed = Some(Version::parse(version).unwrap());\n+                            break;\n+                        }\n+                    };\n+                }\n+            } else {\n+                continue;\n+            }\n+        }\n+        // Unwrap the some if x is installed, otherwise return because it's fine if x isn't installed.\n+        let installed = if let Some(i) = installed { i } else { return };\n+\n+        if let Some(expected) = get_x_wrapper_version(root, cargo) {\n+            if installed < expected {\n+                return println!(\n+                    \"Current version of x is {installed}, but the latest version is {expected}\\nConsider updating to the newer version of x by running `cargo install --path src/tools/x`\"\n+                );\n+            }\n+        } else {\n+            return tidy_error!(\n+                bad,\n+                \"Unable to parse the latest version of `x` at `src/tools/x/Cargo.toml`\"\n+            );\n+        }\n+    } else {\n+        return tidy_error!(bad, \"failed to check version of `x`: {}\", cargo_list.status);\n+    }\n+}\n+\n+// Parse latest version out of `x` Cargo.toml\n+fn get_x_wrapper_version(root: &Path, cargo: &Path) -> Option<Version> {\n+    let mut cmd = cargo_metadata::MetadataCommand::new();\n+    cmd.cargo_path(cargo)\n+        .manifest_path(root.join(\"src/tools/x/Cargo.toml\"))\n+        .no_deps()\n+        .features(cargo_metadata::CargoOpt::AllFeatures);\n+    let mut metadata = t!(cmd.exec());\n+    metadata.packages.pop().map(|x| x.version)\n+}"}]}