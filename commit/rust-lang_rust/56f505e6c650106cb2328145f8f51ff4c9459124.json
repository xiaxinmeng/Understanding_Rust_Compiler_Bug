{"sha": "56f505e6c650106cb2328145f8f51ff4c9459124", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZjUwNWU2YzY1MDEwNmNiMjMyODE0NWY4ZjUxZmY0Yzk0NTkxMjQ=", "commit": {"author": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2018-05-14T01:23:10Z"}, "committer": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2018-05-14T01:23:32Z"}, "message": "read2: Use inner function instead of closure", "tree": {"sha": "8248453f3274f0d3a26c07ce9795415e7f1813f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8248453f3274f0d3a26c07ce9795415e7f1813f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56f505e6c650106cb2328145f8f51ff4c9459124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56f505e6c650106cb2328145f8f51ff4c9459124", "html_url": "https://github.com/rust-lang/rust/commit/56f505e6c650106cb2328145f8f51ff4c9459124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56f505e6c650106cb2328145f8f51ff4c9459124/comments", "author": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fae1537462bb10fd17d07816efc17cfe4786806", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fae1537462bb10fd17d07816efc17cfe4786806", "html_url": "https://github.com/rust-lang/rust/commit/9fae1537462bb10fd17d07816efc17cfe4786806"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "0a5dccddddae250c9e6cd35531b921bbf18f9ca4", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/56f505e6c650106cb2328145f8f51ff4c9459124/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f505e6c650106cb2328145f8f51ff4c9459124/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=56f505e6c650106cb2328145f8f51ff4c9459124", "patch": "@@ -100,24 +100,6 @@ pub fn read2(p1: AnonPipe,\n         // wait for either pipe to become readable using `poll`\n         cvt_r(|| unsafe { libc::poll(fds.as_mut_ptr(), 2, -1) })?;\n \n-        // Read as much as we can from each pipe, ignoring EWOULDBLOCK or\n-        // EAGAIN. If we hit EOF, then this will happen because the underlying\n-        // reader will return Ok(0), in which case we'll see `Ok` ourselves. In\n-        // this case we flip the other fd back into blocking mode and read\n-        // whatever's leftover on that file descriptor.\n-        let read = |fd: &FileDesc, dst: &mut Vec<u8>| {\n-            match fd.read_to_end(dst) {\n-                Ok(_) => Ok(true),\n-                Err(e) => {\n-                    if e.raw_os_error() == Some(libc::EWOULDBLOCK) ||\n-                       e.raw_os_error() == Some(libc::EAGAIN) {\n-                        Ok(false)\n-                    } else {\n-                        Err(e)\n-                    }\n-                }\n-            }\n-        };\n         if fds[0].revents != 0 && read(&p1, v1)? {\n             p2.set_nonblocking(false)?;\n             return p2.read_to_end(v2).map(|_| ());\n@@ -127,4 +109,23 @@ pub fn read2(p1: AnonPipe,\n             return p1.read_to_end(v1).map(|_| ());\n         }\n     }\n+\n+    // Read as much as we can from each pipe, ignoring EWOULDBLOCK or\n+    // EAGAIN. If we hit EOF, then this will happen because the underlying\n+    // reader will return Ok(0), in which case we'll see `Ok` ourselves. In\n+    // this case we flip the other fd back into blocking mode and read\n+    // whatever's leftover on that file descriptor.\n+    fn read(fd: &FileDesc, dst: &mut Vec<u8>) -> Result<bool, io::Error> {\n+        match fd.read_to_end(dst) {\n+            Ok(_) => Ok(true),\n+            Err(e) => {\n+                if e.raw_os_error() == Some(libc::EWOULDBLOCK) ||\n+                   e.raw_os_error() == Some(libc::EAGAIN) {\n+                    Ok(false)\n+                } else {\n+                    Err(e)\n+                }\n+            }\n+        }\n+    }\n }"}]}