{"sha": "7e226e6d3f5dc5c39a222091f7a234c1480e1cbd", "node_id": "C_kwDOAAsO6NoAKDdlMjI2ZTZkM2Y1ZGM1YzM5YTIyMjA5MWY3YTIzNGMxNDgwZTFjYmQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-05T05:00:26Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-05T05:00:33Z"}, "message": "Look at move place's type when suggesting mutable reborrow", "tree": {"sha": "5b764285c954a5357fa4f72b30800e68299d13d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b764285c954a5357fa4f72b30800e68299d13d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd", "html_url": "https://github.com/rust-lang/rust/commit/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "html_url": "https://github.com/rust-lang/rust/commit/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "a2e4641f66d5ce01f4183b5f7208c33c38bcd737", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=7e226e6d3f5dc5c39a222091f7a234c1480e1cbd", "patch": "@@ -198,7 +198,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     move_span,\n                     move_spans,\n                     *moved_place,\n-                    Some(used_place),\n                     partially_str,\n                     loop_message,\n                     move_msg,"}, {"sha": "2d849316f9294744efd04fadd12270f303c768df", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=7e226e6d3f5dc5c39a222091f7a234c1480e1cbd", "patch": "@@ -970,7 +970,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         move_span: Span,\n         move_spans: UseSpans<'tcx>,\n         moved_place: Place<'tcx>,\n-        used_place: Option<PlaceRef<'tcx>>,\n         partially_str: &str,\n         loop_message: &str,\n         move_msg: &str,\n@@ -1058,9 +1057,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 place_name, partially_str, loop_message\n                             ),\n                         );\n-                        // If we have a `&mut` ref, we need to reborrow.\n-                        if let Some(ty::Ref(_, _, hir::Mutability::Mut)) = used_place\n-                            .map(|used_place| used_place.ty(self.body, self.infcx.tcx).ty.kind())\n+                        // If the moved place was a `&mut` ref, then we can\n+                        // suggest to reborrow it where it was moved, so it\n+                        // will still be valid by the time we get to the usage.\n+                        if let ty::Ref(_, _, hir::Mutability::Mut) =\n+                            moved_place.ty(self.body, self.infcx.tcx).ty.kind()\n                         {\n                             // If we are in a loop this will be suggested later.\n                             if !is_loop_move {"}, {"sha": "bb06a94635c4669b8f22adbd2df399671aebfd90", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=7e226e6d3f5dc5c39a222091f7a234c1480e1cbd", "patch": "@@ -401,7 +401,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         };\n         if let Some(use_spans) = use_spans {\n             self.explain_captures(\n-                &mut err, span, span, use_spans, move_place, None, \"\", \"\", \"\", false, true,\n+                &mut err, span, span, use_spans, move_place, \"\", \"\", \"\", false, true,\n             );\n         }\n         err"}, {"sha": "31eba074008467132fce9e876ee75016cbe5948b", "filename": "src/test/ui/borrowck/reborrow-sugg-move-then-borrow.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.rs?ref=7e226e6d3f5dc5c39a222091f7a234c1480e1cbd", "patch": "@@ -0,0 +1,26 @@\n+// Tests the suggestion to reborrow the first move site\n+// when we move then borrow a `&mut` ref.\n+\n+struct State;\n+\n+impl IntoIterator for &mut State {\n+    type IntoIter = std::vec::IntoIter<()>;\n+    type Item = ();\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        vec![].into_iter()\n+    }\n+}\n+\n+fn once(f: impl FnOnce()) {}\n+\n+fn fill_memory_blocks_mt(state: &mut State) {\n+    for _ in state {}\n+    //~^ HELP consider creating a fresh reborrow of `state` here\n+    fill_segment(state);\n+    //~^ ERROR borrow of moved value: `state`\n+}\n+\n+fn fill_segment(state: &mut State) {}\n+\n+fn main() {}"}, {"sha": "13a2005e2ef4c40ef38abd3ee3034f7fb972f656", "filename": "src/test/ui/borrowck/reborrow-sugg-move-then-borrow.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr?ref=7e226e6d3f5dc5c39a222091f7a234c1480e1cbd", "patch": "@@ -0,0 +1,24 @@\n+error[E0382]: borrow of moved value: `state`\n+  --> $DIR/reborrow-sugg-move-then-borrow.rs:20:18\n+   |\n+LL | fn fill_memory_blocks_mt(state: &mut State) {\n+   |                          ----- move occurs because `state` has type `&mut State`, which does not implement the `Copy` trait\n+LL |     for _ in state {}\n+   |              ----- `state` moved due to this implicit call to `.into_iter()`\n+LL |\n+LL |     fill_segment(state);\n+   |                  ^^^^^ value borrowed here after move\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `state`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |                  ^^^^\n+help: consider creating a fresh reborrow of `state` here\n+   |\n+LL |     for _ in &mut *state {}\n+   |              ++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}]}