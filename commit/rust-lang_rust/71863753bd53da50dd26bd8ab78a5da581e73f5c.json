{"sha": "71863753bd53da50dd26bd8ab78a5da581e73f5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxODYzNzUzYmQ1M2RhNTBkZDI2YmQ4YWI3OGE1ZGE1ODFlNzNmNWM=", "commit": {"author": {"name": "Geoffry Song", "email": "goffrie@dropbox.com", "date": "2020-12-16T01:19:54Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-01-17T17:48:47Z"}, "message": "Rename `merge_imports` to `imports_granularity` and add a `Module` option.\n\nThis renames the existing `true`/`false` options to `Crate`/`Never`, then adds a\nnew `Module` option which causes imports to be grouped together by their\noriginating module.", "tree": {"sha": "568afbf431d133451e640514164f6a198db06df6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/568afbf431d133451e640514164f6a198db06df6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71863753bd53da50dd26bd8ab78a5da581e73f5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71863753bd53da50dd26bd8ab78a5da581e73f5c", "html_url": "https://github.com/rust-lang/rust/commit/71863753bd53da50dd26bd8ab78a5da581e73f5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71863753bd53da50dd26bd8ab78a5da581e73f5c/comments", "author": {"login": "goffrie", "id": 1240398, "node_id": "MDQ6VXNlcjEyNDAzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1240398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goffrie", "html_url": "https://github.com/goffrie", "followers_url": "https://api.github.com/users/goffrie/followers", "following_url": "https://api.github.com/users/goffrie/following{/other_user}", "gists_url": "https://api.github.com/users/goffrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/goffrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goffrie/subscriptions", "organizations_url": "https://api.github.com/users/goffrie/orgs", "repos_url": "https://api.github.com/users/goffrie/repos", "events_url": "https://api.github.com/users/goffrie/events{/privacy}", "received_events_url": "https://api.github.com/users/goffrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "216a64300563351cad20bb3847110c14561687e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/216a64300563351cad20bb3847110c14561687e0", "html_url": "https://github.com/rust-lang/rust/commit/216a64300563351cad20bb3847110c14561687e0"}], "stats": {"total": 343, "additions": 291, "deletions": 52}, "files": [{"sha": "07c8a442d4191da720f63ad2b2d4ae872ecf9e0a", "filename": "Configurations.md", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -1615,13 +1615,56 @@ pub enum Foo {}\n pub enum Foo {}\n ```\n \n+## `imports_granularity`\n+\n+Merge together related imports based on their paths.\n+\n+- **Default value**: `Preserve`\n+- **Possible values**: `Preserve`, `Crate`, `Module`\n+- **Stable**: No\n+\n+#### `Preserve` (default):\n+\n+Do not perform any merging and preserve the original structure written by the developer.\n+\n+```rust\n+use foo::b;\n+use foo::b::{f, g};\n+use foo::{a, c, d::e};\n+use qux::{h, i};\n+```\n+\n+#### `Crate`:\n+\n+Merge imports from the same crate into a single `use` statement. Conversely, imports from different crates are split into separate statements.\n+\n+```rust\n+use foo::{\n+    a, b,\n+    b::{f, g},\n+    c,\n+    d::e,\n+};\n+use qux::{h, i};\n+```\n+\n+#### `Module`:\n+\n+Merge imports from the same module into a single `use` statement. Conversely, imports from different modules are split into separate statements.\n+\n+```rust\n+use foo::b::{f, g};\n+use foo::d::e;\n+use foo::{a, b, c};\n+use qux::{h, i};\n+```\n+\n ## `merge_imports`\n \n-Merge multiple imports into a single nested import.\n+This option is deprecated. Use `imports_granularity = \"Crate\"` instead.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3362)\n \n #### `false` (default):\n "}, {"sha": "bd4a847e0f12e8a6d95e993008591fb8ea5665b2", "filename": "src/config/config_type.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -97,6 +97,7 @@ macro_rules! create_config {\n                 match stringify!($i) {\n                     \"max_width\" | \"use_small_heuristics\" => self.0.set_heuristics(),\n                     \"license_template_path\" => self.0.set_license_template(),\n+                    \"merge_imports\" => self.0.set_merge_imports(),\n                     &_ => (),\n                 }\n             }\n@@ -156,6 +157,7 @@ macro_rules! create_config {\n                 self.set_heuristics();\n                 self.set_license_template();\n                 self.set_ignore(dir);\n+                self.set_merge_imports();\n                 self\n             }\n \n@@ -230,14 +232,15 @@ macro_rules! create_config {\n                 match key {\n                     \"max_width\" | \"use_small_heuristics\" => self.set_heuristics(),\n                     \"license_template_path\" => self.set_license_template(),\n+                    \"merge_imports\" => self.set_merge_imports(),\n                     &_ => (),\n                 }\n             }\n \n             #[allow(unreachable_pub)]\n             pub fn is_hidden_option(name: &str) -> bool {\n-                const HIDE_OPTIONS: [&str; 4] =\n-                    [\"verbose\", \"verbose_diff\", \"file_lines\", \"width_heuristics\"];\n+                const HIDE_OPTIONS: [&str; 5] =\n+                    [\"verbose\", \"verbose_diff\", \"file_lines\", \"width_heuristics\", \"merge_imports\"];\n                 HIDE_OPTIONS.contains(&name)\n             }\n \n@@ -309,6 +312,22 @@ macro_rules! create_config {\n                 self.ignore.2.add_prefix(dir);\n             }\n \n+            fn set_merge_imports(&mut self) {\n+                if self.was_set().merge_imports() {\n+                    eprintln!(\n+                        \"Warning: the `merge_imports` option is deprecated. \\\n+                        Use `imports_granularity=Crate` instead\"\n+                    );\n+                    if !self.was_set().imports_granularity() {\n+                        self.imports_granularity.2 = if self.merge_imports() {\n+                            ImportGranularity::Crate\n+                        } else {\n+                            ImportGranularity::Preserve\n+                        };\n+                    }\n+                }\n+            }\n+\n             #[allow(unreachable_pub)]\n             /// Returns `true` if the config key was explicitly set and is the default value.\n             pub fn is_default(&self, key: &str) -> bool {"}, {"sha": "a5356fc257e35aa9df4f4cc6edada6aa6f49f29c", "filename": "src/config/mod.rs", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -64,9 +64,11 @@ create_config! {\n     // Imports\n     imports_indent: IndentStyle, IndentStyle::Block, false, \"Indent of imports\";\n     imports_layout: ListTactic, ListTactic::Mixed, false, \"Item layout inside a import block\";\n-    merge_imports: bool, false, false, \"Merge imports\";\n+    imports_granularity: ImportGranularity, ImportGranularity::Preserve, false,\n+        \"Merge or split imports to the provided granularity\";\n     group_imports: GroupImportsTactic, GroupImportsTactic::Preserve, false,\n         \"Controls the strategy for how imports are grouped together\";\n+    merge_imports: bool, false, false, \"(deprecated: use imports_granularity instead)\";\n \n     // Ordering\n     reorder_imports: bool, true, true, \"Reorder import and extern crate statements alphabetically\";\n@@ -174,6 +176,7 @@ impl PartialConfig {\n         cloned.verbose = None;\n         cloned.width_heuristics = None;\n         cloned.print_misformatted_file_names = None;\n+        cloned.merge_imports = None;\n \n         ::toml::to_string(&cloned).map_err(ToTomlError)\n     }\n@@ -407,6 +410,10 @@ mod test {\n                     via the --file-lines option\";\n             width_heuristics: WidthHeuristics, WidthHeuristics::scaled(100), false,\n                 \"'small' heuristic values\";\n+            // merge_imports deprecation\n+            imports_granularity: ImportGranularity, ImportGranularity::Preserve, false,\n+                \"Merge imports\";\n+            merge_imports: bool, false, false, \"(deprecated: use imports_granularity instead)\";\n \n             // Options that are used by the tests\n             stable_option: bool, false, true, \"A stable option\";\n@@ -529,7 +536,7 @@ fn_single_line = false\n where_single_line = false\n imports_indent = \"Block\"\n imports_layout = \"Mixed\"\n-merge_imports = false\n+imports_granularity = \"Preserve\"\n group_imports = \"Preserve\"\n reorder_imports = true\n reorder_modules = true\n@@ -615,4 +622,53 @@ make_backup = false\n     //     assert_eq!(config.unstable_features(), true);\n     //     ::std::env::set_var(\"CFG_RELEASE_CHANNEL\", v);\n     // }\n+\n+    #[cfg(test)]\n+    mod deprecated_option_merge_imports {\n+        use super::*;\n+\n+        #[test]\n+        fn test_old_option_set() {\n+            let toml = r#\"\n+                unstable_features = true\n+                merge_imports = true\n+            \"#;\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.imports_granularity(), ImportGranularity::Crate);\n+        }\n+\n+        #[test]\n+        fn test_both_set() {\n+            let toml = r#\"\n+                unstable_features = true\n+                merge_imports = true\n+                imports_granularity = \"Preserve\"\n+            \"#;\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.imports_granularity(), ImportGranularity::Preserve);\n+        }\n+\n+        #[test]\n+        fn test_new_overridden() {\n+            let toml = r#\"\n+                unstable_features = true\n+                merge_imports = true\n+            \"#;\n+            let mut config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            config.override_value(\"imports_granularity\", \"Preserve\");\n+            assert_eq!(config.imports_granularity(), ImportGranularity::Preserve);\n+        }\n+\n+        #[test]\n+        fn test_old_overridden() {\n+            let toml = r#\"\n+                unstable_features = true\n+                imports_granularity = \"Module\"\n+            \"#;\n+            let mut config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            config.override_value(\"merge_imports\", \"true\");\n+            // no effect: the new option always takes precedence\n+            assert_eq!(config.imports_granularity(), ImportGranularity::Module);\n+        }\n+    }\n }"}, {"sha": "690e0b73a3e3c1c4fc15c45592e214d9633987d2", "filename": "src/config/options.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -1,6 +1,7 @@\n use std::collections::{hash_set, HashSet};\n use std::fmt;\n use std::path::{Path, PathBuf};\n+use std::str::FromStr;\n \n use itertools::Itertools;\n use rustfmt_config_proc_macro::config_type;\n@@ -111,6 +112,17 @@ pub enum GroupImportsTactic {\n     StdExternalCrate,\n }\n \n+#[config_type]\n+/// How to merge imports.\n+pub enum ImportGranularity {\n+    /// Do not merge imports.\n+    Preserve,\n+    /// Use one `use` statement per crate.\n+    Crate,\n+    /// Use one `use` statement per module.\n+    Module,\n+}\n+\n #[config_type]\n pub enum ReportTactic {\n     Always,\n@@ -362,7 +374,7 @@ impl IgnoreList {\n     }\n }\n \n-impl ::std::str::FromStr for IgnoreList {\n+impl FromStr for IgnoreList {\n     type Err = &'static str;\n \n     fn from_str(_: &str) -> Result<Self, Self::Err> {"}, {"sha": "156bf6da5abab2daecac719db80472f5b2da87e1", "filename": "src/imports.rs", "status": "modified", "additions": 85, "deletions": 33, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -159,7 +159,7 @@ impl UseSegment {\n     }\n }\n \n-pub(crate) fn merge_use_trees(use_trees: Vec<UseTree>) -> Vec<UseTree> {\n+pub(crate) fn merge_use_trees(use_trees: Vec<UseTree>, merge_by: SharedPrefix) -> Vec<UseTree> {\n     let mut result = Vec::with_capacity(use_trees.len());\n     for use_tree in use_trees {\n         if use_tree.has_comment() || use_tree.attrs.is_some() {\n@@ -168,8 +168,11 @@ pub(crate) fn merge_use_trees(use_trees: Vec<UseTree>) -> Vec<UseTree> {\n         }\n \n         for flattened in use_tree.flatten() {\n-            if let Some(tree) = result.iter_mut().find(|tree| tree.share_prefix(&flattened)) {\n-                tree.merge(&flattened);\n+            if let Some(tree) = result\n+                .iter_mut()\n+                .find(|tree| tree.share_prefix(&flattened, merge_by))\n+            {\n+                tree.merge(&flattened, merge_by);\n             } else {\n                 result.push(flattened);\n             }\n@@ -527,15 +530,20 @@ impl UseTree {\n         }\n     }\n \n-    fn share_prefix(&self, other: &UseTree) -> bool {\n+    fn share_prefix(&self, other: &UseTree, shared_prefix: SharedPrefix) -> bool {\n         if self.path.is_empty()\n             || other.path.is_empty()\n             || self.attrs.is_some()\n             || !self.same_visibility(other)\n         {\n             false\n         } else {\n-            self.path[0] == other.path[0]\n+            match shared_prefix {\n+                SharedPrefix::Crate => self.path[0] == other.path[0],\n+                SharedPrefix::Module => {\n+                    self.path[..self.path.len() - 1] == other.path[..other.path.len() - 1]\n+                }\n+            }\n         }\n     }\n \n@@ -573,7 +581,7 @@ impl UseTree {\n         }\n     }\n \n-    fn merge(&mut self, other: &UseTree) {\n+    fn merge(&mut self, other: &UseTree, merge_by: SharedPrefix) {\n         let mut prefix = 0;\n         for (a, b) in self.path.iter().zip(other.path.iter()) {\n             if *a == *b {\n@@ -582,20 +590,30 @@ impl UseTree {\n                 break;\n             }\n         }\n-        if let Some(new_path) = merge_rest(&self.path, &other.path, prefix) {\n+        if let Some(new_path) = merge_rest(&self.path, &other.path, prefix, merge_by) {\n             self.path = new_path;\n             self.span = self.span.to(other.span);\n         }\n     }\n }\n \n-fn merge_rest(a: &[UseSegment], b: &[UseSegment], mut len: usize) -> Option<Vec<UseSegment>> {\n+fn merge_rest(\n+    a: &[UseSegment],\n+    b: &[UseSegment],\n+    mut len: usize,\n+    merge_by: SharedPrefix,\n+) -> Option<Vec<UseSegment>> {\n     if a.len() == len && b.len() == len {\n         return None;\n     }\n     if a.len() != len && b.len() != len {\n-        if let UseSegment::List(mut list) = a[len].clone() {\n-            merge_use_trees_inner(&mut list, UseTree::from_path(b[len..].to_vec(), DUMMY_SP));\n+        if let UseSegment::List(ref list) = a[len] {\n+            let mut list = list.clone();\n+            merge_use_trees_inner(\n+                &mut list,\n+                UseTree::from_path(b[len..].to_vec(), DUMMY_SP),\n+                merge_by,\n+            );\n             let mut new_path = b[..len].to_vec();\n             new_path.push(UseSegment::List(list));\n             return Some(new_path);\n@@ -622,20 +640,20 @@ fn merge_rest(a: &[UseSegment], b: &[UseSegment], mut len: usize) -> Option<Vec<\n     Some(new_path)\n }\n \n-fn merge_use_trees_inner(trees: &mut Vec<UseTree>, use_tree: UseTree) {\n-    let similar_trees = trees.iter_mut().filter(|tree| tree.share_prefix(&use_tree));\n-    if use_tree.path.len() == 1 {\n+fn merge_use_trees_inner(trees: &mut Vec<UseTree>, use_tree: UseTree, merge_by: SharedPrefix) {\n+    let similar_trees = trees\n+        .iter_mut()\n+        .filter(|tree| tree.share_prefix(&use_tree, merge_by));\n+    if use_tree.path.len() == 1 && merge_by == SharedPrefix::Crate {\n         if let Some(tree) = similar_trees.min_by_key(|tree| tree.path.len()) {\n             if tree.path.len() == 1 {\n                 return;\n             }\n         }\n-    } else {\n-        if let Some(tree) = similar_trees.max_by_key(|tree| tree.path.len()) {\n-            if tree.path.len() > 1 {\n-                tree.merge(&use_tree);\n-                return;\n-            }\n+    } else if let Some(tree) = similar_trees.max_by_key(|tree| tree.path.len()) {\n+        if tree.path.len() > 1 {\n+            tree.merge(&use_tree, merge_by);\n+            return;\n         }\n     }\n     trees.push(use_tree);\n@@ -848,6 +866,12 @@ impl Rewrite for UseTree {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub(crate) enum SharedPrefix {\n+    Crate,\n+    Module,\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::*;\n@@ -994,44 +1018,72 @@ mod test {\n         }\n     }\n \n-    #[test]\n-    fn test_use_tree_merge() {\n-        macro_rules! test_merge {\n-            ([$($input:expr),* $(,)*], [$($output:expr),* $(,)*]) => {\n-                assert_eq!(\n-                    merge_use_trees(parse_use_trees!($($input,)*)),\n-                    parse_use_trees!($($output,)*),\n-                );\n-            }\n+    macro_rules! test_merge {\n+        ($by:ident, [$($input:expr),* $(,)*], [$($output:expr),* $(,)*]) => {\n+            assert_eq!(\n+                merge_use_trees(parse_use_trees!($($input,)*), SharedPrefix::$by),\n+                parse_use_trees!($($output,)*),\n+            );\n         }\n+    }\n \n-        test_merge!([\"a::b::{c, d}\", \"a::b::{e, f}\"], [\"a::b::{c, d, e, f}\"]);\n-        test_merge!([\"a::b::c\", \"a::b\"], [\"a::{b, b::c}\"]);\n-        test_merge!([\"a::b\", \"a::b\"], [\"a::b\"]);\n-        test_merge!([\"a\", \"a::b\", \"a::b::c\"], [\"a::{self, b, b::c}\"]);\n+    #[test]\n+    fn test_use_tree_merge_crate() {\n         test_merge!(\n+            Crate,\n+            [\"a::b::{c, d}\", \"a::b::{e, f}\"],\n+            [\"a::b::{c, d, e, f}\"]\n+        );\n+        test_merge!(Crate, [\"a::b::c\", \"a::b\"], [\"a::{b, b::c}\"]);\n+        test_merge!(Crate, [\"a::b\", \"a::b\"], [\"a::b\"]);\n+        test_merge!(Crate, [\"a\", \"a::b\", \"a::b::c\"], [\"a::{self, b, b::c}\"]);\n+        test_merge!(\n+            Crate,\n             [\"a\", \"a::b\", \"a::b::c\", \"a::b::c::d\"],\n             [\"a::{self, b, b::{c, c::d}}\"]\n         );\n-        test_merge!([\"a\", \"a::b\", \"a::b::c\", \"a::b\"], [\"a::{self, b, b::c}\"]);\n         test_merge!(\n+            Crate,\n+            [\"a\", \"a::b\", \"a::b::c\", \"a::b\"],\n+            [\"a::{self, b, b::c}\"]\n+        );\n+        test_merge!(\n+            Crate,\n             [\"a::{b::{self, c}, d::e}\", \"a::d::f\"],\n             [\"a::{b::{self, c}, d::{e, f}}\"]\n         );\n         test_merge!(\n+            Crate,\n             [\"a::d::f\", \"a::{b::{self, c}, d::e}\"],\n             [\"a::{b::{self, c}, d::{e, f}}\"]\n         );\n         test_merge!(\n+            Crate,\n             [\"a::{c, d, b}\", \"a::{d, e, b, a, f}\", \"a::{f, g, c}\"],\n             [\"a::{a, b, c, d, e, f, g}\"]\n         );\n         test_merge!(\n+            Crate,\n             [\"a::{self}\", \"b::{self as foo}\"],\n             [\"a::{self}\", \"b::{self as foo}\"]\n         );\n     }\n \n+    #[test]\n+    fn test_use_tree_merge_module() {\n+        test_merge!(\n+            Module,\n+            [\"foo::b\", \"foo::{a, c, d::e}\"],\n+            [\"foo::{a, b, c}\", \"foo::d::e\"]\n+        );\n+\n+        test_merge!(\n+            Module,\n+            [\"foo::{a::b, a::c, d::e, d::f}\"],\n+            [\"foo::a::{b, c}\", \"foo::d::{e, f}\"]\n+        );\n+    }\n+\n     #[test]\n     fn test_use_tree_flatten() {\n         assert_eq!("}, {"sha": "3ac6bc5f5c4cc7733a0ceeb0b5d524af6dcc3297", "filename": "src/reorder.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -11,8 +11,8 @@ use std::cmp::{Ord, Ordering};\n use rustc_ast::ast;\n use rustc_span::{symbol::sym, Span};\n \n-use crate::config::{Config, GroupImportsTactic};\n-use crate::imports::{merge_use_trees, UseSegment, UseTree};\n+use crate::config::{Config, GroupImportsTactic, ImportGranularity};\n+use crate::imports::{merge_use_trees, SharedPrefix, UseSegment, UseTree};\n use crate::items::{is_mod_decl, rewrite_extern_crate, rewrite_mod};\n use crate::lists::{itemize_list, write_list, ListFormatting, ListItem};\n use crate::rewrite::RewriteContext;\n@@ -107,8 +107,14 @@ fn rewrite_reorderable_or_regroupable_items(\n             for (item, list_item) in normalized_items.iter_mut().zip(list_items) {\n                 item.list_item = Some(list_item.clone());\n             }\n-            if context.config.merge_imports() {\n-                normalized_items = merge_use_trees(normalized_items);\n+            match context.config.imports_granularity() {\n+                ImportGranularity::Crate => {\n+                    normalized_items = merge_use_trees(normalized_items, SharedPrefix::Crate)\n+                }\n+                ImportGranularity::Module => {\n+                    normalized_items = merge_use_trees(normalized_items, SharedPrefix::Module)\n+                }\n+                ImportGranularity::Preserve => {}\n             }\n \n             let mut regrouped_items = match context.config.group_imports() {"}, {"sha": "ea7f6280a64af5a5848eb409f6e5748db0865b7b", "filename": "tests/source/configs/group_imports/StdExternalCrate-merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-merge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-merge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-merge_imports.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -1,5 +1,5 @@\n // rustfmt-group_imports: StdExternalCrate\n-// rustfmt-merge_imports: true\n+// rustfmt-imports_granularity: Crate\n use chrono::Utc;\n use super::update::convert_publish_payload;\n "}, {"sha": "477c4aa1684b756a1d28c84b92de007de79c44ea", "filename": "tests/source/configs/imports_layout/merge_mixed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Fsource%2Fconfigs%2Fimports_layout%2Fmerge_mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Fsource%2Fconfigs%2Fimports_layout%2Fmerge_mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fimports_layout%2Fmerge_mixed.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -1,5 +1,5 @@\n // rustfmt-imports_indent: Block\n-// rustfmt-merge_imports: true\n+// rustfmt-imports_granularity: Crate\n // rustfmt-imports_layout: Mixed\n \n use std::{fmt, io, str};"}, {"sha": "d16681b01b56196516863e139b801294232687d6", "filename": "tests/source/imports_granularity_crate.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Fsource%2Fimports_granularity_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Fsource%2Fimports_granularity_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports_granularity_crate.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-merge_imports: true\n+// rustfmt-imports_granularity: Crate\n \n use a::{c,d,b};\n use a::{d, e, b, a, f};\n@@ -32,3 +32,6 @@ use g::{self, b};\n use h::{a};\n use i::a::{self};\n use j::{a::{self}};\n+\n+use {k::{a, b}, l::{a, b}};\n+use {k::{c, d}, l::{c, d}};", "previous_filename": "tests/source/merge_imports.rs"}, {"sha": "5a4fad5872bdd2cc5fccc3f06137ae98fb1e9f40", "filename": "tests/source/imports_granularity_module.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Fsource%2Fimports_granularity_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Fsource%2Fimports_granularity_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports_granularity_module.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -0,0 +1,18 @@\n+// rustfmt-imports_granularity: Module\n+\n+use a::{b::c, d::e};\n+use a::{f, g::{h, i}};\n+use a::{j::{self, k::{self, l}, m}, n::{o::p, q}};\n+pub use a::{r::s, t};\n+\n+#[cfg(test)]\n+use foo::{a::b, c::d};\n+use foo::e;\n+\n+use bar::{\n+    // comment\n+    a::b,\n+    // more comment\n+    c::d,\n+    e::f,\n+};"}, {"sha": "1189a99d2b6d67cabde99808dfd5a7f5c9774ff0", "filename": "tests/source/issue-3750.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Fsource%2Fissue-3750.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Fsource%2Fissue-3750.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3750.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-merge_imports: true\n+// rustfmt-imports_granularity: Crate\n \n pub mod foo {\n     pub mod bar {"}, {"sha": "bcea9435129f676aa139224bcfc9f23fd5bb0441", "filename": "tests/source/merge_imports_true_compat.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Fsource%2Fmerge_imports_true_compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Fsource%2Fmerge_imports_true_compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmerge_imports_true_compat.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -0,0 +1,4 @@\n+// rustfmt-merge_imports: true\n+\n+use a::b;\n+use a::c;\n\\ No newline at end of file"}, {"sha": "5e4064dd8119f5eb6e48d910e60028d56ba8910e", "filename": "tests/target/configs/group_imports/StdExternalCrate-merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-merge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-merge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-merge_imports.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -1,5 +1,5 @@\n // rustfmt-group_imports: StdExternalCrate\n-// rustfmt-merge_imports: true\n+// rustfmt-imports_granularity: Crate\n use alloc::{alloc::Layout, vec::Vec};\n use core::f32;\n use std::sync::Arc;"}, {"sha": "bc0da92fffba53eb4a453694f0d65bca5acd92e0", "filename": "tests/target/configs/imports_layout/merge_mixed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Ftarget%2Fconfigs%2Fimports_layout%2Fmerge_mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Ftarget%2Fconfigs%2Fimports_layout%2Fmerge_mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fimports_layout%2Fmerge_mixed.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -1,5 +1,5 @@\n // rustfmt-imports_indent: Block\n-// rustfmt-merge_imports: true\n+// rustfmt-imports_granularity: Crate\n // rustfmt-imports_layout: Mixed\n \n use std::{fmt, io, str, str::FromStr};"}, {"sha": "d75906d30f18bf6f31cdd69cb57e22b37bb549ad", "filename": "tests/target/imports_granularity_crate.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Ftarget%2Fimports_granularity_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Ftarget%2Fimports_granularity_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports_granularity_crate.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-merge_imports: true\n+// rustfmt-imports_granularity: Crate\n \n use a::{a, b, c, d, e, f, g};\n \n@@ -23,3 +23,6 @@ use g::{self, a, b};\n use h::a;\n use i::a::{self};\n use j::a::{self};\n+\n+use k::{a, b, c, d};\n+use l::{a, b, c, d};", "previous_filename": "tests/target/merge_imports.rs"}, {"sha": "9c1387c466afa6e26cff5985912bad5cb92617df", "filename": "tests/target/imports_granularity_module.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Ftarget%2Fimports_granularity_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Ftarget%2Fimports_granularity_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports_granularity_module.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -0,0 +1,20 @@\n+// rustfmt-imports_granularity: Module\n+\n+use a::b::c;\n+use a::d::e;\n+use a::f;\n+use a::g::{h, i};\n+use a::j::k::{self, l};\n+use a::j::{self, m};\n+use a::n::o::p;\n+use a::n::q;\n+pub use a::r::s;\n+pub use a::t;\n+\n+use foo::e;\n+#[cfg(test)]\n+use foo::{a::b, c::d};\n+\n+use bar::a::b;\n+use bar::c::d;\n+use bar::e::f;"}, {"sha": "6875f8d3897bfbae6b64ff7207574f0345da1739", "filename": "tests/target/issue-3750.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Ftarget%2Fissue-3750.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Ftarget%2Fissue-3750.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3750.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-merge_imports: true\n+// rustfmt-imports_granularity: Crate\n \n pub mod foo {\n     pub mod bar {"}, {"sha": "46cd0a3b8a0a3400eb9abf7591c77c31bc6fbf53", "filename": "tests/target/merge_imports_true_compat.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Ftarget%2Fmerge_imports_true_compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71863753bd53da50dd26bd8ab78a5da581e73f5c/tests%2Ftarget%2Fmerge_imports_true_compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmerge_imports_true_compat.rs?ref=71863753bd53da50dd26bd8ab78a5da581e73f5c", "patch": "@@ -0,0 +1,3 @@\n+// rustfmt-merge_imports: true\n+\n+use a::{b, c};"}]}