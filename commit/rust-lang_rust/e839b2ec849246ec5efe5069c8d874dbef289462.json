{"sha": "e839b2ec849246ec5efe5069c8d874dbef289462", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MzliMmVjODQ5MjQ2ZWM1ZWZlNTA2OWM4ZDg3NGRiZWYyODk0NjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-30T01:42:33Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T09:39:23Z"}, "message": "Constness -> enum Const { Yes(Span), No }\nSame idea for `Unsafety` & use new span for better diagnostics.", "tree": {"sha": "36489d29fe26c85fd9f283335acfb37d4915ee40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36489d29fe26c85fd9f283335acfb37d4915ee40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e839b2ec849246ec5efe5069c8d874dbef289462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e839b2ec849246ec5efe5069c8d874dbef289462", "html_url": "https://github.com/rust-lang/rust/commit/e839b2ec849246ec5efe5069c8d874dbef289462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e839b2ec849246ec5efe5069c8d874dbef289462/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6eaceedeeda764056eb0e2134735793533770d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6eaceedeeda764056eb0e2134735793533770d", "html_url": "https://github.com/rust-lang/rust/commit/2e6eaceedeeda764056eb0e2134735793533770d"}], "stats": {"total": 450, "additions": 238, "deletions": 212}, "files": [{"sha": "3ab87ce8eb4a32b5cb600593bf1e113232995c7b", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -9,7 +9,6 @@ use crate::ty::fold::TypeFolder;\n use crate::ty::{Region, RegionVid};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use syntax::ast;\n \n use std::collections::hash_map::Entry;\n use std::collections::VecDeque;\n@@ -350,7 +349,7 @@ impl AutoTraitFinder<'tcx> {\n                         already_visited.remove(&pred);\n                         self.add_user_pred(\n                             &mut user_computed_preds,\n-                            ty::Predicate::Trait(pred, ast::Constness::NotConst),\n+                            ty::Predicate::Trait(pred, hir::Constness::NotConst),\n                         );\n                         predicates.push_back(pred);\n                     } else {"}, {"sha": "c25b392ec239ae87de88ad73e8bbe0a6f51c89a6", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -695,7 +695,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             let unit_obligation = Obligation {\n                                 predicate: ty::Predicate::Trait(\n                                     predicate,\n-                                    ast::Constness::NotConst,\n+                                    hir::Constness::NotConst,\n                                 ),\n                                 ..obligation.clone()\n                             };"}, {"sha": "1fe8ab58d152caebce006519f9f23d0ddd0f5435", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -40,19 +40,19 @@ use crate::ty::fast_reject;\n use crate::ty::relate::TypeRelation;\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n-use rustc_hir::def_id::DefId;\n-\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::symbol::sym;\n use rustc_target::spec::abi::Abi;\n+use syntax::attr;\n+\n use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::fmt::{self, Display};\n use std::iter;\n use std::rc::Rc;\n-use syntax::{ast, attr};\n \n pub use rustc::traits::types::select::*;\n \n@@ -677,7 +677,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // if the regions match exactly.\n             let cycle = stack.iter().skip(1).take_while(|s| s.depth >= cycle_depth);\n             let cycle = cycle.map(|stack| {\n-                ty::Predicate::Trait(stack.obligation.predicate, ast::Constness::NotConst)\n+                ty::Predicate::Trait(stack.obligation.predicate, hir::Constness::NotConst)\n             });\n             if self.coinductive_match(cycle) {\n                 debug!(\"evaluate_stack({:?}) --> recursive, coinductive\", stack.fresh_trait_ref);"}, {"sha": "1f007b970b0ca3dbce2b745dc3cacba3a394cae1", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -32,6 +32,7 @@\n //! looking for, and does not need to visit anything else.\n \n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n+use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -150,7 +151,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n }\n \n-impl TypeFoldable<'tcx> for syntax::ast::Constness {\n+impl TypeFoldable<'tcx> for hir::Constness {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         *self\n     }"}, {"sha": "2bda99e6d20fc4021d1e4c4a5f2e37e3c4b81bf5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -35,15 +35,15 @@ use rustc_data_structures::sync::{self, par_iter, Lrc, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_hir::{GlobMap, Node, TraitMap};\n+use rustc_hir::{Constness, GlobMap, Node, TraitMap};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::Align;\n-use syntax::ast::{self, Constness, Ident, Name};\n+use syntax::ast::{self, Ident, Name};\n use syntax::node_id::{NodeId, NodeMap, NodeSet};\n \n use std::cell::RefCell;"}, {"sha": "384422956367a5dfc475f409421f20e55b309d32", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -1818,7 +1818,7 @@ define_print_and_forward_display! {\n     ty::Predicate<'tcx> {\n         match *self {\n             ty::Predicate::Trait(ref data, constness) => {\n-                if let ast::Constness::Const = constness {\n+                if let hir::Constness::Const = constness {\n                     p!(write(\"const \"));\n                 }\n                 p!(print(data))"}, {"sha": "59dd41e9d56c911db38e293fc8606129823fafdb", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -7,6 +7,7 @@ use crate::mir::ProjectionKind;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::{self, InferConst, Lift, Ty, TyCtxt};\n+use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -15,7 +16,6 @@ use smallvec::SmallVec;\n use std::fmt;\n use std::rc::Rc;\n use std::sync::Arc;\n-use syntax::ast;\n \n impl fmt::Debug for ty::GenericParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -236,7 +236,7 @@ impl fmt::Debug for ty::Predicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             ty::Predicate::Trait(ref a, constness) => {\n-                if let ast::Constness::Const = constness {\n+                if let hir::Constness::Const = constness {\n                     write!(f, \"const \")?;\n                 }\n                 a.fmt(f)"}, {"sha": "8cc3479dd1ba379415c2f548e02e65fe14a4d3d0", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -67,10 +67,12 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n             self.lctx.with_parent_item_lifetime_defs(hir_id, |this| {\n                 let this = &mut ItemLowerer { lctx: this };\n                 if let ItemKind::Impl { constness, ref of_trait, .. } = item.kind {\n-                    if constness == Constness::Const {\n+                    if let Const::Yes(span) = constness {\n                         this.lctx\n                             .diagnostic()\n-                            .span_err(item.span, \"const trait impls are not yet implemented\");\n+                            .struct_span_err(item.span, \"const trait impls are not yet implemented\")\n+                            .span_label(span, \"const because of this\")\n+                            .emit();\n                     }\n \n                     this.with_trait_impl_ref(of_trait, |this| visit::walk_item(this, item));\n@@ -413,10 +415,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     });\n \n                 hir::ItemKind::Impl {\n-                    unsafety,\n+                    unsafety: self.lower_unsafety(unsafety),\n                     polarity,\n                     defaultness: self.lower_defaultness(defaultness, true /* [1] */),\n-                    constness,\n+                    constness: self.lower_constness(constness),\n                     generics,\n                     of_trait: trait_ref,\n                     self_ty: lowered_ty,\n@@ -430,7 +432,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     .alloc_from_iter(items.iter().map(|item| self.lower_trait_item_ref(item)));\n                 hir::ItemKind::Trait(\n                     is_auto,\n-                    unsafety,\n+                    self.lower_unsafety(unsafety),\n                     self.lower_generics(generics, ImplTraitContext::disallowed()),\n                     bounds,\n                     items,\n@@ -1245,9 +1247,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_fn_header(&mut self, h: FnHeader) -> hir::FnHeader {\n         hir::FnHeader {\n-            unsafety: h.unsafety,\n+            unsafety: self.lower_unsafety(h.unsafety),\n             asyncness: self.lower_asyncness(h.asyncness.node),\n-            constness: h.constness.node,\n+            constness: self.lower_constness(h.constness),\n             abi: self.lower_extern(h.ext),\n         }\n     }\n@@ -1281,6 +1283,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n+    fn lower_constness(&mut self, c: Const) -> hir::Constness {\n+        match c {\n+            Const::Yes(_) => hir::Constness::Const,\n+            Const::No => hir::Constness::NotConst,\n+        }\n+    }\n+\n+    pub(super) fn lower_unsafety(&mut self, u: Unsafe) -> hir::Unsafety {\n+        match u {\n+            Unsafe::Yes(_) => hir::Unsafety::Unsafe,\n+            Unsafe::No => hir::Unsafety::Normal,\n+        }\n+    }\n+\n     pub(super) fn lower_generics_mut(\n         &mut self,\n         generics: &Generics,"}, {"sha": "618b1e7964b95da158b0b751e34c0d0718c61403", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -1196,7 +1196,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             &NodeMap::default(),\n                             ImplTraitContext::disallowed(),\n                         ),\n-                        unsafety: f.unsafety,\n+                        unsafety: this.lower_unsafety(f.unsafety),\n                         abi: this.lower_extern(f.ext),\n                         decl: this.lower_fn_decl(&f.decl, None, false, None),\n                         param_names: this.lower_fn_params_to_names(&f.decl),"}, {"sha": "de4f092dbf011f4c0b50192d0d64dc2ae3c0271a", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -13,7 +13,6 @@ use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n use rustc_session::lint::LintBuffer;\n use rustc_session::Session;\n-use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use std::mem;\n@@ -234,16 +233,11 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_trait_fn_not_const(&self, constness: Spanned<Constness>) {\n-        if constness.node == Constness::Const {\n-            struct_span_err!(\n-                self.session,\n-                constness.span,\n-                E0379,\n-                \"trait fns cannot be declared const\"\n-            )\n-            .span_label(constness.span, \"trait fns cannot be const\")\n-            .emit();\n+    fn check_trait_fn_not_const(&self, constness: Const) {\n+        if let Const::Yes(span) = constness {\n+            struct_span_err!(self.session, span, E0379, \"trait fns cannot be declared const\")\n+                .span_label(span, \"trait fns cannot be const\")\n+                .emit();\n         }\n     }\n \n@@ -487,7 +481,7 @@ impl<'a> AstValidator<'a> {\n             (Some(FnCtxt::Foreign), _) => return,\n             (Some(FnCtxt::Free), Some(header)) => match header.ext {\n                 Extern::Explicit(StrLit { symbol_unescaped: sym::C, .. }) | Extern::Implicit\n-                    if header.unsafety == Unsafety::Unsafe =>\n+                    if matches!(header.unsafety, Unsafe::Yes(_)) =>\n                 {\n                     return;\n                 }\n@@ -514,12 +508,13 @@ impl<'a> AstValidator<'a> {\n     /// FIXME(const_generics): Is this really true / necessary? Discuss with @varkor.\n     /// At any rate, the restriction feels too syntactic. Consider moving it to e.g. typeck.\n     fn check_const_fn_const_generic(&self, span: Span, sig: &FnSig, generics: &Generics) {\n-        if sig.header.constness.node == Constness::Const {\n+        if let Const::Yes(const_span) = sig.header.constness {\n             // Look for const generics and error if we find any.\n             for param in &generics.params {\n                 if let GenericParamKind::Const { .. } = param.kind {\n                     self.err_handler()\n                         .struct_span_err(span, \"const parameters are not permitted in `const fn`\")\n+                        .span_label(const_span, \"`const fn` because of this\")\n                         .emit();\n                 }\n             }\n@@ -754,13 +749,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                             .help(\"use `auto trait Trait {}` instead\")\n                             .emit();\n                     }\n-                    if unsafety == Unsafety::Unsafe && polarity == ImplPolarity::Negative {\n+                    if let (Unsafe::Yes(span), ImplPolarity::Negative) = (unsafety, polarity) {\n                         struct_span_err!(\n                             this.session,\n                             item.span,\n                             E0198,\n                             \"negative impls cannot be unsafe\"\n                         )\n+                        .span_label(span, \"unsafe because of this\")\n                         .emit();\n                     }\n \n@@ -782,13 +778,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     &item.vis,\n                     Some(\"place qualifiers on individual impl items instead\"),\n                 );\n-                if unsafety == Unsafety::Unsafe {\n+                if let Unsafe::Yes(span) = unsafety {\n                     struct_span_err!(\n                         self.session,\n                         item.span,\n                         E0197,\n                         \"inherent impls cannot be unsafe\"\n                     )\n+                    .span_label(span, \"unsafe because of this\")\n                     .emit();\n                 }\n                 if polarity == ImplPolarity::Negative {\n@@ -800,9 +797,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .note(\"only trait implementations may be annotated with default\")\n                         .emit();\n                 }\n-                if constness == Constness::Const {\n+                if let Const::Yes(span) = constness {\n                     self.err_handler()\n                         .struct_span_err(item.span, \"inherent impls cannot be `const`\")\n+                        .span_label(span, \"`const` because of this\")\n                         .note(\"only trait implementations may be annotated with `const`\")\n                         .emit();\n                 }"}, {"sha": "cfab54925b161119fbc8fa2f490dfa8317843546", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -538,8 +538,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n         match i.kind {\n             ast::AssocItemKind::Fn(ref sig, _) => {\n-                let constness = sig.header.constness.node;\n-                if let (ast::Constness::Const, AssocCtxt::Trait) = (constness, ctxt) {\n+                if let (ast::Const::Yes(_), AssocCtxt::Trait) = (sig.header.constness, ctxt) {\n                     gate_feature_post!(&self, const_fn, i.span, \"const fn is unstable\");\n                 }\n             }"}, {"sha": "633964683dcc64c0fb3926857abd84be9f1198b1", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -2686,7 +2686,7 @@ impl<'a> State<'a> {\n     crate fn print_ty_fn(\n         &mut self,\n         ext: ast::Extern,\n-        unsafety: ast::Unsafety,\n+        unsafety: ast::Unsafe,\n         decl: &ast::FnDecl,\n         name: Option<ast::Ident>,\n         generic_params: &[ast::GenericParam],\n@@ -2733,11 +2733,7 @@ impl<'a> State<'a> {\n     crate fn print_fn_header_info(&mut self, header: ast::FnHeader, vis: &ast::Visibility) {\n         self.s.word(visibility_qualified(vis, \"\"));\n \n-        match header.constness.node {\n-            ast::Constness::NotConst => {}\n-            ast::Constness::Const => self.word_nbsp(\"const\"),\n-        }\n-\n+        self.print_constness(header.constness);\n         self.print_asyncness(header.asyncness.node);\n         self.print_unsafety(header.unsafety);\n \n@@ -2756,17 +2752,17 @@ impl<'a> State<'a> {\n         self.s.word(\"fn\")\n     }\n \n-    crate fn print_unsafety(&mut self, s: ast::Unsafety) {\n+    crate fn print_unsafety(&mut self, s: ast::Unsafe) {\n         match s {\n-            ast::Unsafety::Normal => {}\n-            ast::Unsafety::Unsafe => self.word_nbsp(\"unsafe\"),\n+            ast::Unsafe::No => {}\n+            ast::Unsafe::Yes(_) => self.word_nbsp(\"unsafe\"),\n         }\n     }\n \n-    crate fn print_constness(&mut self, s: ast::Constness) {\n+    crate fn print_constness(&mut self, s: ast::Const) {\n         match s {\n-            ast::Constness::Const => self.word_nbsp(\"const\"),\n-            ast::Constness::NotConst => {}\n+            ast::Const::No => {}\n+            ast::Const::Yes(_) => self.word_nbsp(\"const\"),\n         }\n     }\n "}, {"sha": "5cf233e222e7c0d7360437af671fa27ffabf00b6", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -700,7 +700,7 @@ impl<'a> TraitDef<'a> {\n         let mut a = vec![attr, unused_qual];\n         a.extend(self.attributes.iter().cloned());\n \n-        let unsafety = if self.is_unsafe { ast::Unsafety::Unsafe } else { ast::Unsafety::Normal };\n+        let unsafety = if self.is_unsafe { ast::Unsafe::Yes(self.span) } else { ast::Unsafe::No };\n \n         cx.item(\n             self.span,\n@@ -710,7 +710,7 @@ impl<'a> TraitDef<'a> {\n                 unsafety,\n                 polarity: ast::ImplPolarity::Positive,\n                 defaultness: ast::Defaultness::Final,\n-                constness: ast::Constness::NotConst,\n+                constness: ast::Const::No,\n                 generics: trait_generics,\n                 of_trait: opt_trait_ref,\n                 self_ty: self_type,\n@@ -960,7 +960,7 @@ impl<'a> MethodDef<'a> {\n         let fn_decl = cx.fn_decl(args, ast::FunctionRetTy::Ty(ret_type));\n         let body_block = cx.block_expr(body);\n \n-        let unsafety = if self.is_unsafe { ast::Unsafety::Unsafe } else { ast::Unsafety::Normal };\n+        let unsafety = if self.is_unsafe { ast::Unsafe::Yes(trait_.span) } else { ast::Unsafe::No };\n \n         let trait_lo_sp = trait_.span.shrink_to_lo();\n "}, {"sha": "63cd03527e15cb1569fe668bea45247cc17297ca", "filename": "src/librustc_builtin_macros/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -157,10 +157,10 @@ fn inject_impl_of_structural_trait(\n         ast::Ident::invalid(),\n         attrs,\n         ItemKind::Impl {\n-            unsafety: ast::Unsafety::Normal,\n+            unsafety: ast::Unsafe::No,\n             polarity: ast::ImplPolarity::Positive,\n             defaultness: ast::Defaultness::Final,\n-            constness: ast::Constness::NotConst,\n+            constness: ast::Const::No,\n             generics,\n             of_trait: Some(trait_ref),\n             self_ty: self_type,"}, {"sha": "52f033e8b1404f31b58d8bdae32d0a4462eb4384", "filename": "src/librustc_builtin_macros/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -4,7 +4,7 @@ use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use syntax::ast::{self, Attribute, Expr, FnHeader, FnSig, Generics, Ident, Param};\n-use syntax::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafety};\n+use syntax::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafe};\n use syntax::expand::allocator::{AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n use syntax::ptr::P;\n \n@@ -64,7 +64,7 @@ impl AllocFnFactory<'_, '_> {\n         let result = self.call_allocator(method.name, args);\n         let (output_ty, output_expr) = self.ret_ty(&method.output, result);\n         let decl = self.cx.fn_decl(abi_args, ast::FunctionRetTy::Ty(output_ty));\n-        let header = FnHeader { unsafety: Unsafety::Unsafe, ..FnHeader::default() };\n+        let header = FnHeader { unsafety: Unsafe::Yes(self.span), ..FnHeader::default() };\n         let sig = FnSig { decl, header };\n         let kind = ItemKind::Fn(sig, Generics::default(), Some(self.cx.block_expr(output_expr)));\n         let item = self.cx.item("}, {"sha": "dd93596b3cfce21c5e93c4a3ce7eddae86d0dfad", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -375,8 +375,10 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = attr::contains_name(&i.attrs, sym::should_panic);\n     let ref sd = cx.parse_sess.span_diagnostic;\n     if let ast::ItemKind::Fn(ref sig, ref generics, _) = i.kind {\n-        if sig.header.unsafety == ast::Unsafety::Unsafe {\n-            sd.span_err(i.span, \"unsafe functions cannot be used for tests\");\n+        if let ast::Unsafe::Yes(span) = sig.header.unsafety {\n+            sd.struct_span_err(i.span, \"unsafe functions cannot be used for tests\")\n+                .span_label(span, \"unsafe because of this\")\n+                .emit();\n             return false;\n         }\n         if sig.header.asyncness.node.is_async() {"}, {"sha": "c2ddaf7df316aef34459c8d12dbcf6e7b5b31649", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -19,7 +19,7 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, AsmDialect, CrateSugar, Ident, Name, NodeId};\n use syntax::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use syntax::ast::{BorrowKind, ImplPolarity, IsAuto};\n-pub use syntax::ast::{CaptureBy, Constness, Movability, Mutability, Unsafety};\n+pub use syntax::ast::{CaptureBy, Movability, Mutability};\n use syntax::node_id::NodeMap;\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n@@ -2109,18 +2109,8 @@ impl ImplicitSelfKind {\n     }\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    HashStable_Generic,\n-    Ord,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug\n-)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum IsAsync {\n     Async,\n     NotAsync,\n@@ -2389,6 +2379,38 @@ pub struct Item<'hir> {\n     pub span: Span,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n+pub enum Unsafety {\n+    Unsafe,\n+    Normal,\n+}\n+\n+impl Unsafety {\n+    pub fn prefix_str(&self) -> &'static str {\n+        match self {\n+            Self::Unsafe => \"unsafe \",\n+            Self::Normal => \"\",\n+        }\n+    }\n+}\n+\n+impl fmt::Display for Unsafety {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(match *self {\n+            Self::Unsafe => \"unsafe\",\n+            Self::Normal => \"normal\",\n+        })\n+    }\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n+pub enum Constness {\n+    Const,\n+    NotConst,\n+}\n+\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct FnHeader {\n     pub unsafety: Unsafety,"}, {"sha": "b31b814d67be6eaac814861d1b2c682d08701560", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -648,7 +648,7 @@ impl<'a> State<'a> {\n                     self.s.space();\n                 }\n \n-                if constness == ast::Constness::Const {\n+                if let hir::Constness::Const = constness {\n                     self.word_nbsp(\"const\");\n                 }\n "}, {"sha": "659323d1c2555d006e69d3e0ef3c566f29f462e2", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -668,7 +668,7 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n     }\n \n     fn is_sig_const(sig: &ast::FnSig) -> bool {\n-        sig.header.constness.node == ast::Constness::Const\n+        matches!(sig.header.constness, ast::Const::Yes(_))\n             || ReplaceBodyWithLoop::should_ignore_fn(&sig.decl.output)\n     }\n }"}, {"sha": "93fca43d67c1fb4fcd7171c1c0a5e2986046af16", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -258,13 +258,13 @@ impl EarlyLintPass for UnsafeCode {\n \n     fn check_item(&mut self, cx: &EarlyContext<'_>, it: &ast::Item) {\n         match it.kind {\n-            ast::ItemKind::Trait(_, ast::Unsafety::Unsafe, ..) => {\n+            ast::ItemKind::Trait(_, ast::Unsafe::Yes(_), ..) => {\n                 self.report_unsafe(cx, it.span, |lint| {\n                     lint.build(\"declaration of an `unsafe` trait\").emit()\n                 })\n             }\n \n-            ast::ItemKind::Impl { unsafety: ast::Unsafety::Unsafe, .. } => {\n+            ast::ItemKind::Impl { unsafety: ast::Unsafe::Yes(_), .. } => {\n                 self.report_unsafe(cx, it.span, |lint| {\n                     lint.build(\"implementation of an `unsafe` trait\").emit()\n                 })\n@@ -278,7 +278,7 @@ impl EarlyLintPass for UnsafeCode {\n         if let FnKind::Fn(\n             ctxt,\n             _,\n-            ast::FnSig { header: ast::FnHeader { unsafety: ast::Unsafety::Unsafe, .. }, .. },\n+            ast::FnSig { header: ast::FnHeader { unsafety: ast::Unsafe::Yes(_), .. }, .. },\n             _,\n             body,\n         ) = fk"}, {"sha": "4cbe41455894b531c6fefbe1e1cd19c8108fac9f", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -32,7 +32,6 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast;\n \n use crate::dataflow::generic::ResultsCursor;\n use crate::dataflow::move_paths::MoveData;\n@@ -1938,7 +1937,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                                 tcx.mk_substs_trait(ty, &[]),\n                                             ),\n                                         }),\n-                                        ast::Constness::NotConst,\n+                                        hir::Constness::NotConst,\n                                     ),\n                                 ),\n                                 &traits::SelectionError::Unimplemented,\n@@ -2579,7 +2578,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         self.prove_predicates(\n             Some(ty::Predicate::Trait(\n                 trait_ref.to_poly_trait_ref().to_poly_trait_predicate(),\n-                ast::Constness::NotConst,\n+                hir::Constness::NotConst,\n             )),\n             locations,\n             category,"}, {"sha": "b12f4ce32698fb2c64114f5ac11ff02104f811fa", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -6,7 +6,6 @@ use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use std::borrow::Cow;\n-use syntax::ast;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n@@ -35,7 +34,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n                     match pred.skip_binder().self_ty().kind {\n                         ty::Param(ref p) => {\n                             // Allow `T: ?const Trait`\n-                            if *constness == ast::Constness::NotConst\n+                            if *constness == hir::Constness::NotConst\n                                 && feature_allowed(tcx, def_id, sym::const_trait_bound_opt_out)\n                             {\n                                 continue;"}, {"sha": "a66a85b2b830f1f58320050812e9b9ceeee637fb", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 34, "deletions": 43, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -12,7 +12,7 @@ use rustc_span::BytePos;\n use syntax::ast::{self, AttrKind, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n use syntax::ast::{AssocItem, AssocItemKind, Item, ItemKind, UseTree, UseTreeKind};\n use syntax::ast::{BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter, Param, SelfKind};\n-use syntax::ast::{Constness, Defaultness, Extern, IsAsync, IsAuto, PathSegment, StrLit, Unsafety};\n+use syntax::ast::{Const, Defaultness, Extern, IsAsync, IsAuto, PathSegment, StrLit, Unsafe};\n use syntax::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n use syntax::ast::{FnHeader, ForeignItem, ForeignItemKind, Mutability, Visibility, VisibilityKind};\n use syntax::ptr::P;\n@@ -107,9 +107,9 @@ impl<'a> Parser<'a> {\n                 // EXTERN FUNCTION ITEM\n                 let fn_span = self.prev_span;\n                 let header = FnHeader {\n-                    unsafety: Unsafety::Normal,\n+                    unsafety: Unsafe::No,\n                     asyncness: respan(fn_span, IsAsync::NotAsync),\n-                    constness: respan(fn_span, Constness::NotConst),\n+                    constness: Const::No,\n                     ext: Extern::from_abi(abi),\n                 };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n@@ -128,8 +128,8 @@ impl<'a> Parser<'a> {\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n-        if self.eat_keyword(kw::Const) {\n-            let const_span = self.prev_span;\n+        let constness = self.parse_constness();\n+        if let Const::Yes(const_span) = constness {\n             if [kw::Fn, kw::Unsafe, kw::Extern].iter().any(|k| self.check_keyword(*k)) {\n                 // CONST FUNCTION ITEM\n                 let unsafety = self.parse_unsafety();\n@@ -143,7 +143,7 @@ impl<'a> Parser<'a> {\n                 let header = FnHeader {\n                     unsafety,\n                     asyncness: respan(const_span, IsAsync::NotAsync),\n-                    constness: respan(const_span, Constness::Const),\n+                    constness,\n                     ext,\n                 };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n@@ -175,7 +175,6 @@ impl<'a> Parser<'a> {\n                 self.bump(); // `async`\n                 let unsafety = self.parse_unsafety(); // `unsafe`?\n                 self.expect_keyword(kw::Fn)?; // `fn`\n-                let fn_span = self.prev_span;\n                 let asyncness = respan(\n                     async_span,\n                     IsAsync::Async {\n@@ -184,20 +183,16 @@ impl<'a> Parser<'a> {\n                     },\n                 );\n                 self.ban_async_in_2015(async_span);\n-                let header = FnHeader {\n-                    unsafety,\n-                    asyncness,\n-                    constness: respan(fn_span, Constness::NotConst),\n-                    ext: Extern::None,\n-                };\n+                let header =\n+                    FnHeader { unsafety, asyncness, constness: Const::No, ext: Extern::None };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             }\n         }\n \n         if self.check_keyword(kw::Unsafe) && self.is_keyword_ahead(1, &[kw::Trait, kw::Auto]) {\n             // UNSAFE TRAIT ITEM\n-            self.bump(); // `unsafe`\n-            let info = self.parse_item_trait(lo, Unsafety::Unsafe)?;\n+            let unsafety = self.parse_unsafety();\n+            let info = self.parse_item_trait(lo, unsafety)?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n@@ -218,9 +213,9 @@ impl<'a> Parser<'a> {\n             self.bump();\n             let fn_span = self.prev_span;\n             let header = FnHeader {\n-                unsafety: Unsafety::Normal,\n+                unsafety: Unsafe::No,\n                 asyncness: respan(fn_span, IsAsync::NotAsync),\n-                constness: respan(fn_span, Constness::NotConst),\n+                constness: Const::No,\n                 ext: Extern::None,\n             };\n             return self.parse_item_fn(lo, vis, attrs, header);\n@@ -230,16 +225,16 @@ impl<'a> Parser<'a> {\n             && self.look_ahead(1, |t| *t != token::OpenDelim(token::Brace))\n         {\n             // UNSAFE FUNCTION ITEM\n-            self.bump(); // `unsafe`\n+            let unsafety = self.parse_unsafety();\n             // `{` is also expected after `unsafe`; in case of error, include it in the diagnostic.\n             self.check(&token::OpenDelim(token::Brace));\n             let ext = self.parse_extern()?;\n             self.expect_keyword(kw::Fn)?;\n             let fn_span = self.prev_span;\n             let header = FnHeader {\n-                unsafety: Unsafety::Unsafe,\n+                unsafety,\n                 asyncness: respan(fn_span, IsAsync::NotAsync),\n-                constness: respan(fn_span, Constness::NotConst),\n+                constness: Const::No,\n                 ext,\n             };\n             return self.parse_item_fn(lo, vis, attrs, header);\n@@ -268,7 +263,7 @@ impl<'a> Parser<'a> {\n             || (self.check_keyword(kw::Auto) && self.is_keyword_ahead(1, &[kw::Trait]))\n         {\n             // TRAIT ITEM\n-            let info = self.parse_item_trait(lo, Unsafety::Normal)?;\n+            let info = self.parse_item_trait(lo, Unsafe::No)?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n@@ -547,7 +542,7 @@ impl<'a> Parser<'a> {\n     ///   `impl` GENERICS `const`? `!`? TYPE (`where` PREDICATES)? `{` BODY `}`\n     fn parse_item_impl(\n         &mut self,\n-        unsafety: Unsafety,\n+        unsafety: Unsafe,\n         defaultness: Defaultness,\n     ) -> PResult<'a, ItemInfo> {\n         // First, parse generic parameters if necessary.\n@@ -561,13 +556,10 @@ impl<'a> Parser<'a> {\n             generics\n         };\n \n-        let constness = if self.eat_keyword(kw::Const) {\n-            let span = self.prev_span;\n+        let constness = self.parse_constness();\n+        if let Const::Yes(span) = constness {\n             self.sess.gated_spans.gate(sym::const_trait_impl, span);\n-            Constness::Const\n-        } else {\n-            Constness::NotConst\n-        };\n+        }\n \n         // Disambiguate `impl !Trait for Type { ... }` and `impl ! { ... }` for the never type.\n         let polarity = if self.check(&token::Not) && self.look_ahead(1, |t| t.can_begin_type()) {\n@@ -707,7 +699,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses `auto? trait Foo { ... }` or `trait Foo = Bar;`.\n-    fn parse_item_trait(&mut self, lo: Span, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n+    fn parse_item_trait(&mut self, lo: Span, unsafety: Unsafe) -> PResult<'a, ItemInfo> {\n         // Parse optional `auto` prefix.\n         let is_auto = if self.eat_keyword(kw::Auto) { IsAuto::Yes } else { IsAuto::No };\n \n@@ -734,11 +726,11 @@ impl<'a> Parser<'a> {\n             self.expect_semi()?;\n \n             let whole_span = lo.to(self.prev_span);\n-            if is_auto == IsAuto::Yes {\n+            if let IsAuto::Yes = is_auto {\n                 let msg = \"trait aliases cannot be `auto`\";\n                 self.struct_span_err(whole_span, msg).span_label(whole_span, msg).emit();\n             }\n-            if unsafety != Unsafety::Normal {\n+            if let Unsafe::Yes(_) = unsafety {\n                 let msg = \"trait aliases cannot be `unsafe`\";\n                 self.struct_span_err(whole_span, msg).span_label(whole_span, msg).emit();\n             }\n@@ -1785,28 +1777,27 @@ impl<'a> Parser<'a> {\n         Ok(body)\n     }\n \n-    /// Parses all the \"front matter\" for a `fn` declaration, up to\n-    /// and including the `fn` keyword:\n+    /// Parses all the \"front matter\" (or \"qualifiers\") for a `fn` declaration,\n+    /// up to and including the `fn` keyword. The formal grammar is:\n     ///\n-    /// - `const fn`\n-    /// - `unsafe fn`\n-    /// - `const unsafe fn`\n-    /// - `extern fn`\n-    /// - etc.\n+    /// ```\n+    /// Extern = \"extern\" StringLit ;\n+    /// FnQual = \"const\"? \"async\"? \"unsafe\"? Extern? ;\n+    /// FnFrontMatter = FnQual? \"fn\" ;\n+    /// ```\n     fn parse_fn_front_matter(&mut self) -> PResult<'a, FnHeader> {\n-        let is_const_fn = self.eat_keyword(kw::Const);\n-        let const_span = self.prev_span;\n+        let constness = self.parse_constness();\n         let asyncness = self.parse_asyncness();\n         if let IsAsync::Async { .. } = asyncness {\n             self.ban_async_in_2015(self.prev_span);\n         }\n         let asyncness = respan(self.prev_span, asyncness);\n         let unsafety = self.parse_unsafety();\n-        let (constness, unsafety, ext) = if is_const_fn {\n-            (respan(const_span, Constness::Const), unsafety, Extern::None)\n+        let (constness, unsafety, ext) = if let Const::Yes(_) = constness {\n+            (constness, unsafety, Extern::None)\n         } else {\n             let ext = self.parse_extern()?;\n-            (respan(self.prev_span, Constness::NotConst), unsafety, ext)\n+            (Const::No, unsafety, ext)\n         };\n         if !self.eat_keyword(kw::Fn) {\n             // It is possible for `expect_one_of` to recover given the contents of"}, {"sha": "bccf5968118b4462558c2933b3c357fe31060d24", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -22,7 +22,8 @@ use rustc_session::parse::ParseSess;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{FileName, Span, DUMMY_SP};\n-use syntax::ast::{self, AttrStyle, AttrVec, CrateSugar, Extern, Ident, Unsafety, DUMMY_NODE_ID};\n+use syntax::ast::DUMMY_NODE_ID;\n+use syntax::ast::{self, AttrStyle, AttrVec, Const, CrateSugar, Extern, Ident, Unsafe};\n use syntax::ast::{IsAsync, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n use syntax::ptr::P;\n use syntax::token::{self, DelimToken, Token, TokenKind};\n@@ -962,8 +963,13 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses unsafety: `unsafe` or nothing.\n-    fn parse_unsafety(&mut self) -> Unsafety {\n-        if self.eat_keyword(kw::Unsafe) { Unsafety::Unsafe } else { Unsafety::Normal }\n+    fn parse_unsafety(&mut self) -> Unsafe {\n+        if self.eat_keyword(kw::Unsafe) { Unsafe::Yes(self.prev_span) } else { Unsafe::No }\n+    }\n+\n+    /// Parses constness: `const` or nothing.\n+    fn parse_constness(&mut self) -> Const {\n+        if self.eat_keyword(kw::Const) { Const::Yes(self.prev_span) } else { Const::No }\n     }\n \n     /// Parses mutability (`mut` or nothing)."}, {"sha": "820202c85ab87e78da925b1fff71d333f0793f44", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -225,7 +225,7 @@ impl Sig for ast::Ty {\n                     text.push('>');\n                 }\n \n-                if f.unsafety == ast::Unsafety::Unsafe {\n+                if let ast::Unsafe::Yes(_) = f.unsafety {\n                     text.push_str(\"unsafe \");\n                 }\n                 push_extern(&mut text, f.ext);\n@@ -365,13 +365,13 @@ impl Sig for ast::Item {\n             }\n             ast::ItemKind::Fn(ast::FnSig { ref decl, header }, ref generics, _) => {\n                 let mut text = String::new();\n-                if header.constness.node == ast::Constness::Const {\n+                if let ast::Const::Yes(_) = header.constness {\n                     text.push_str(\"const \");\n                 }\n                 if header.asyncness.node.is_async() {\n                     text.push_str(\"async \");\n                 }\n-                if header.unsafety == ast::Unsafety::Unsafe {\n+                if let ast::Unsafe::Yes(_) = header.unsafety {\n                     text.push_str(\"unsafe \");\n                 }\n                 push_extern(&mut text, header.ext);\n@@ -453,7 +453,7 @@ impl Sig for ast::Item {\n                     text.push_str(\"auto \");\n                 }\n \n-                if unsafety == ast::Unsafety::Unsafe {\n+                if let ast::Unsafe::Yes(_) = unsafety {\n                     text.push_str(\"unsafe \");\n                 }\n                 text.push_str(\"trait \");\n@@ -496,11 +496,11 @@ impl Sig for ast::Item {\n                 if let ast::Defaultness::Default = defaultness {\n                     text.push_str(\"default \");\n                 }\n-                if unsafety == ast::Unsafety::Unsafe {\n+                if let ast::Unsafe::Yes(_) = unsafety {\n                     text.push_str(\"unsafe \");\n                 }\n                 text.push_str(\"impl\");\n-                if constness == ast::Constness::Const {\n+                if let ast::Const::Yes(_) = constness {\n                     text.push_str(\" const\");\n                 }\n \n@@ -884,13 +884,13 @@ fn make_method_signature(\n ) -> Result {\n     // FIXME code dup with function signature\n     let mut text = String::new();\n-    if m.header.constness.node == ast::Constness::Const {\n+    if let ast::Const::Yes(_) = m.header.constness {\n         text.push_str(\"const \");\n     }\n     if m.header.asyncness.node.is_async() {\n         text.push_str(\"async \");\n     }\n-    if m.header.unsafety == ast::Unsafety::Unsafe {\n+    if let ast::Unsafe::Yes(_) = m.header.unsafety {\n         text.push_str(\"unsafe \");\n     }\n     push_extern(&mut text, m.header.ext);"}, {"sha": "0e7c10541cad7038b6a0e223471a749012c69fa0", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -28,12 +28,12 @@ use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::print;\n-use rustc_hir::{ExprKind, GenericArg, GenericArgs};\n+use rustc_hir::{Constness, ExprKind, GenericArg, GenericArgs};\n use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use smallvec::SmallVec;\n-use syntax::ast::{self, Constness};\n+use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use std::collections::BTreeSet;\n@@ -1502,7 +1502,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .filter(|(trait_ref, _, _)| !tcx.trait_is_auto(trait_ref.def_id()));\n \n         for (base_trait_ref, span, constness) in regular_traits_refs_spans {\n-            assert_eq!(constness, ast::Constness::NotConst);\n+            assert_eq!(constness, Constness::NotConst);\n \n             for trait_ref in traits::elaborate_trait_ref(tcx, base_trait_ref) {\n                 debug!("}, {"sha": "a825856e38aa0370bd37fcebcaeca682ccb0e58f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -2693,13 +2693,13 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         None\n     }\n \n-    fn default_constness_for_trait_bounds(&self) -> ast::Constness {\n+    fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n         // FIXME: refactor this into a method\n         let node = self.tcx.hir().get(self.body_id);\n         if let Some(fn_like) = FnLikeNode::from_node(node) {\n             fn_like.constness()\n         } else {\n-            ast::Constness::NotConst\n+            hir::Constness::NotConst\n         }\n     }\n "}, {"sha": "5349c324ad8a7b6d0448e023a89bde5c35120346", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -300,11 +300,11 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         Some(self.item_def_id)\n     }\n \n-    fn default_constness_for_trait_bounds(&self) -> ast::Constness {\n+    fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n         if let Some(fn_like) = FnLikeNode::from_node(self.node()) {\n             fn_like.constness()\n         } else {\n-            ast::Constness::NotConst\n+            hir::Constness::NotConst\n         }\n     }\n \n@@ -2429,7 +2429,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n                     match bound {\n                         &hir::GenericBound::Trait(ref poly_trait_ref, modifier) => {\n                             let constness = match modifier {\n-                                hir::TraitBoundModifier::MaybeConst => ast::Constness::NotConst,\n+                                hir::TraitBoundModifier::MaybeConst => hir::Constness::NotConst,\n                                 hir::TraitBoundModifier::None => constness,\n                                 hir::TraitBoundModifier::Maybe => bug!(\"this wasn't handled\"),\n                             };\n@@ -2617,13 +2617,13 @@ fn predicates_from_bound<'tcx>(\n     astconv: &dyn AstConv<'tcx>,\n     param_ty: Ty<'tcx>,\n     bound: &'tcx hir::GenericBound<'tcx>,\n-    constness: ast::Constness,\n+    constness: hir::Constness,\n ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n     match *bound {\n         hir::GenericBound::Trait(ref tr, modifier) => {\n             let constness = match modifier {\n                 hir::TraitBoundModifier::Maybe => return vec![],\n-                hir::TraitBoundModifier::MaybeConst => ast::Constness::NotConst,\n+                hir::TraitBoundModifier::MaybeConst => hir::Constness::NotConst,\n                 hir::TraitBoundModifier::None => constness,\n             };\n "}, {"sha": "067b33c144742c58cfb1476cada479c906cec5f7", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -377,7 +377,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         &item_cx,\n         hir_trait,\n         DUMMY_SP,\n-        syntax::ast::Constness::NotConst,\n+        hir::Constness::NotConst,\n         tcx.types.err,\n         &mut bounds,\n         true,"}, {"sha": "744201a00500bcf4be69e59b1477e1ede76f39ce", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -203,7 +203,7 @@ pub struct Impl<'hir> {\n     pub unsafety: hir::Unsafety,\n     pub polarity: hir::ImplPolarity,\n     pub defaultness: hir::Defaultness,\n-    pub constness: ast::Constness,\n+    pub constness: hir::Constness,\n     pub generics: &'hir hir::Generics<'hir>,\n     pub trait_: &'hir Option<hir::TraitRef<'hir>>,\n     pub for_: &'hir hir::Ty<'hir>,"}, {"sha": "a7142dfda8593f5fd4f2d01105648880bff68b51", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 18, "deletions": 50, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -1863,7 +1863,7 @@ pub struct Ty {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct BareFnTy {\n-    pub unsafety: Unsafety,\n+    pub unsafety: Unsafe,\n     pub ext: Extern,\n     pub generic_params: Vec<GenericParam>,\n     pub decl: P<FnDecl>,\n@@ -2101,43 +2101,11 @@ pub enum IsAuto {\n     No,\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug,\n-    HashStable_Generic\n-)]\n-pub enum Unsafety {\n-    Unsafe,\n-    Normal,\n-}\n-\n-impl Unsafety {\n-    pub fn prefix_str(&self) -> &'static str {\n-        match self {\n-            Unsafety::Unsafe => \"unsafe \",\n-            Unsafety::Normal => \"\",\n-        }\n-    }\n-}\n-\n-impl fmt::Display for Unsafety {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(\n-            match *self {\n-                Unsafety::Normal => \"normal\",\n-                Unsafety::Unsafe => \"unsafe\",\n-            },\n-            f,\n-        )\n-    }\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(HashStable_Generic)]\n+pub enum Unsafe {\n+    Yes(Span),\n+    No,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n@@ -2162,9 +2130,9 @@ impl IsAsync {\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n #[derive(HashStable_Generic)]\n-pub enum Constness {\n-    Const,\n-    NotConst,\n+pub enum Const {\n+    Yes(Span),\n+    No,\n }\n \n /// Item defaultness.\n@@ -2527,29 +2495,29 @@ impl Extern {\n /// included in this struct (e.g., `async unsafe fn` or `const extern \"C\" fn`).\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n pub struct FnHeader {\n-    pub unsafety: Unsafety,\n+    pub unsafety: Unsafe,\n     pub asyncness: Spanned<IsAsync>,\n-    pub constness: Spanned<Constness>,\n+    pub constness: Const,\n     pub ext: Extern,\n }\n \n impl FnHeader {\n     /// Does this function header have any qualifiers or is it empty?\n     pub fn has_qualifiers(&self) -> bool {\n         let Self { unsafety, asyncness, constness, ext } = self;\n-        matches!(unsafety, Unsafety::Unsafe)\n+        matches!(unsafety, Unsafe::Yes(_))\n             || asyncness.node.is_async()\n-            || matches!(constness.node, Constness::Const)\n+            || matches!(constness, Const::Yes(_))\n             || !matches!(ext, Extern::None)\n     }\n }\n \n impl Default for FnHeader {\n     fn default() -> FnHeader {\n         FnHeader {\n-            unsafety: Unsafety::Normal,\n+            unsafety: Unsafe::No,\n             asyncness: dummy_spanned(IsAsync::NotAsync),\n-            constness: dummy_spanned(Constness::NotConst),\n+            constness: Const::No,\n             ext: Extern::None,\n         }\n     }\n@@ -2606,7 +2574,7 @@ pub enum ItemKind {\n     /// A trait declaration (`trait`).\n     ///\n     /// E.g., `trait Foo { .. }`, `trait Foo<T> { .. }` or `auto trait Foo {}`.\n-    Trait(IsAuto, Unsafety, Generics, GenericBounds, Vec<P<AssocItem>>),\n+    Trait(IsAuto, Unsafe, Generics, GenericBounds, Vec<P<AssocItem>>),\n     /// Trait alias\n     ///\n     /// E.g., `trait Foo = Bar + Quux;`.\n@@ -2615,10 +2583,10 @@ pub enum ItemKind {\n     ///\n     /// E.g., `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`.\n     Impl {\n-        unsafety: Unsafety,\n+        unsafety: Unsafe,\n         polarity: ImplPolarity,\n         defaultness: Defaultness,\n-        constness: Constness,\n+        constness: Const,\n         generics: Generics,\n \n         /// The trait being implemented, if any."}, {"sha": "4db66af6783cae505a82b474ccc742baee4ce3af", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -2,7 +2,9 @@ error[E0198]: negative impls cannot be unsafe\n   --> $DIR/coherence-negative-impls-safe.rs:7:1\n    |\n LL | unsafe impl !Send for TestType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | unsafe because of this\n \n error: aborting due to previous error\n "}, {"sha": "68670963f8e5ecf5a07d998de568e85038b64a48", "filename": "src/test/ui/const-generics/const-fn-with-const-param.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -1,7 +1,11 @@\n error: const parameters are not permitted in `const fn`\n   --> $DIR/const-fn-with-const-param.rs:4:1\n    |\n-LL | / const fn const_u32_identity<const X: u32>() -> u32 {\n+LL |   const fn const_u32_identity<const X: u32>() -> u32 {\n+   |   ^----\n+   |   |\n+   |  _`const fn` because of this\n+   | |\n LL | |\n LL | |     X\n LL | | }"}, {"sha": "51ed9c83bc99924447a7359921d16b015daa1beb", "filename": "src/test/ui/error-codes/E0197.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -2,7 +2,9 @@ error[E0197]: inherent impls cannot be unsafe\n   --> $DIR/E0197.rs:3:1\n    |\n LL | unsafe impl Foo { }\n-   | ^^^^^^^^^^^^^^^^^^^\n+   | ------^^^^^^^^^^^^^\n+   | |\n+   | unsafe because of this\n \n error: aborting due to previous error\n "}, {"sha": "90e8b4abd1296dfad3286306e1863e25c76af464", "filename": "src/test/ui/error-codes/E0198.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -2,7 +2,9 @@ error[E0198]: negative impls cannot be unsafe\n   --> $DIR/E0198.rs:5:1\n    |\n LL | unsafe impl !Send for Foo { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | unsafe because of this\n \n error: aborting due to previous error\n "}, {"sha": "061af3c94b44d36af4b9d8db83a0bc52cd535520", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.gated.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -2,7 +2,9 @@ error: const trait impls are not yet implemented\n   --> $DIR/feature-gate.rs:9:1\n    |\n LL | impl const T for S {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^-----^^^^^^^^^^^\n+   |      |\n+   |      const because of this\n \n error: aborting due to previous error\n "}, {"sha": "cfe226ea7a7ce0053795818c67700b546288d499", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.stock.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -11,7 +11,9 @@ error: const trait impls are not yet implemented\n   --> $DIR/feature-gate.rs:9:1\n    |\n LL | impl const T for S {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^-----^^^^^^^^^^^\n+   |      |\n+   |      const because of this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bdc95ff2a57b5339d86248245928a9bddc052990", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -2,29 +2,37 @@ error: inherent impls cannot be `const`\n   --> $DIR/inherent-impl.rs:9:1\n    |\n LL | impl const S {}\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^-----^^^^^\n+   |      |\n+   |      `const` because of this\n    |\n    = note: only trait implementations may be annotated with `const`\n \n error: inherent impls cannot be `const`\n   --> $DIR/inherent-impl.rs:13:1\n    |\n LL | impl const T {}\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^-----^^^^^\n+   |      |\n+   |      `const` because of this\n    |\n    = note: only trait implementations may be annotated with `const`\n \n error: const trait impls are not yet implemented\n   --> $DIR/inherent-impl.rs:9:1\n    |\n LL | impl const S {}\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^-----^^^^^\n+   |      |\n+   |      const because of this\n \n error: const trait impls are not yet implemented\n   --> $DIR/inherent-impl.rs:13:1\n    |\n LL | impl const T {}\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^-----^^^^^\n+   |      |\n+   |      const because of this\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fef3a65088855df8fc32db0b11704f7fbc931549", "filename": "src/test/ui/syntax-trait-polarity.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -8,7 +8,9 @@ error[E0198]: negative impls cannot be unsafe\n   --> $DIR/syntax-trait-polarity.rs:12:1\n    |\n LL | unsafe impl !Send for TestType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | unsafe because of this\n \n error: inherent impls cannot be negative\n   --> $DIR/syntax-trait-polarity.rs:19:1\n@@ -20,7 +22,9 @@ error[E0198]: negative impls cannot be unsafe\n   --> $DIR/syntax-trait-polarity.rs:22:1\n    |\n LL | unsafe impl<T> !Send for TestType2<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | unsafe because of this\n \n error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)\n   --> $DIR/syntax-trait-polarity.rs:14:1"}, {"sha": "c398785d3949ec13b314db720fbc8ea55ec385e9", "filename": "src/test/ui/traits/trait-safety-inherent-impl.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e839b2ec849246ec5efe5069c8d874dbef289462/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr?ref=e839b2ec849246ec5efe5069c8d874dbef289462", "patch": "@@ -1,7 +1,11 @@\n error[E0197]: inherent impls cannot be unsafe\n   --> $DIR/trait-safety-inherent-impl.rs:5:1\n    |\n-LL | / unsafe impl SomeStruct {\n+LL |   unsafe impl SomeStruct {\n+   |   ^-----\n+   |   |\n+   |  _unsafe because of this\n+   | |\n LL | |     fn foo(self) { }\n LL | | }\n    | |_^"}]}