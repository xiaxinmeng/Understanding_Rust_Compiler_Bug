{"sha": "097309c10f6bdfa0f8540d063e6e64942fd53204", "node_id": "C_kwDOAAsO6NoAKDA5NzMwOWMxMGY2YmRmYTBmODU0MGQwNjNlNmU2NDk0MmZkNTMyMDQ", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-04-17T22:43:46Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-04-20T18:36:50Z"}, "message": "add EarlyBinder to output of explicit_item_bounds; replace bound_explicit_item_bounds usages; remove bound_explicit_item_bounds query", "tree": {"sha": "eab112aad6adbf7e9965383b417bcd556d788a9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eab112aad6adbf7e9965383b417bcd556d788a9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/097309c10f6bdfa0f8540d063e6e64942fd53204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/097309c10f6bdfa0f8540d063e6e64942fd53204", "html_url": "https://github.com/rust-lang/rust/commit/097309c10f6bdfa0f8540d063e6e64942fd53204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/097309c10f6bdfa0f8540d063e6e64942fd53204/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afa28e63044649230671635e78b649e8cdfe3b3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa28e63044649230671635e78b649e8cdfe3b3a", "html_url": "https://github.com/rust-lang/rust/commit/afa28e63044649230671635e78b649e8cdfe3b3a"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "ff838c2d56e43f85214b79bdcc0e635c99e5f936", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097309c10f6bdfa0f8540d063e6e64942fd53204/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097309c10f6bdfa0f8540d063e6e64942fd53204/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=097309c10f6bdfa0f8540d063e6e64942fd53204", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         }\n         let ret_ty = return_ty(cx, cx.tcx.hir().local_def_id_to_hir_id(fn_def_id).expect_owner());\n         if let ty::Alias(ty::Opaque, AliasTy { def_id, substs, .. }) = *ret_ty.kind() {\n-            let preds = cx.tcx.bound_explicit_item_bounds(def_id);\n+            let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n             for (p, _span) in preds.subst_iter_copied(cx.tcx, substs) {\n                 if let Some(trait_pred) = p.to_opt_poly_trait_pred() {"}, {"sha": "5f768928adf052bc68d24a70597cbed24b6d3811", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/097309c10f6bdfa0f8540d063e6e64942fd53204/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097309c10f6bdfa0f8540d063e6e64942fd53204/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=097309c10f6bdfa0f8540d063e6e64942fd53204", "patch": "@@ -90,7 +90,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                         return false;\n                     }\n \n-                    for bound in cx.tcx.bound_explicit_item_bounds(def_id).transpose_iter() {\n+                    for bound in cx.tcx.explicit_item_bounds(def_id).transpose_iter() {\n                         let (predicate, _span) = bound.map_bound(|b| *b).subst_identity();\n                         match predicate.kind().skip_binder() {\n                             // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n@@ -268,7 +268,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n-            for (predicate, _) in cx.tcx.bound_explicit_item_bounds(*def_id).skip_binder() {\n+            for (predicate, _) in cx.tcx.explicit_item_bounds(def_id).skip_binder() {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n                         return true;\n@@ -744,7 +744,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: AliasTy<'tcx>) -> Option\n \n     for (pred, _) in cx\n         .tcx\n-        .bound_explicit_item_bounds(ty.def_id)\n+        .explicit_item_bounds(ty.def_id)\n         .subst_iter_copied(cx.tcx, ty.substs)\n     {\n         match pred.kind().skip_binder() {"}]}