{"sha": "502e30e6767ef26cf56158a92b47b3b8e9b63235", "node_id": "C_kwDOAAsO6NoAKDUwMmUzMGU2NzY3ZWYyNmNmNTYxNThhOTJiNDdiM2I4ZTliNjMyMzU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-17T12:58:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-17T12:58:14Z"}, "message": "Merge #11737 #11739\n\n11737: Emit `#[must_use]` in `Generate new` assist r=lnicola a=lnicola\n\nCloses #11736\n\n11739: Insert #[must_use] in generate_getter r=lnicola a=Walther\n\nInserts `#[must_use]` for the generated getter methods.\r\n\r\nFrom discussion in https://github.com/rust-analyzer/rust-analyzer/issues/11736 and https://github.com/rust-analyzer/rust-analyzer/pull/11738\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\nCo-authored-by: Walther <veeti.haapsamo@gmail.com>", "tree": {"sha": "ec0cbf8e1e86ec813c5a71e819680acd446079ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec0cbf8e1e86ec813c5a71e819680acd446079ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/502e30e6767ef26cf56158a92b47b3b8e9b63235", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiMzBmCRBK7hj4Ov3rIwAAbN4IAKsv9FnUUxBxVotFPbrUms+Z\nH+6T4LGabF0RymcfR7lRamqsnzjb7dIfm2ykEXTLvji68afh3ZDUJNWSZ93sODbC\nze2S2fyoDsAgr1Pidu7dP2xAn2C/pr9++P5zNaY5b6U76SQzOWqQBjrgTE3ZskmW\ni/YZZbjT0s2ks1W4u63X3u60jOalMPqWQqhZXsEPcjHI+dRQjqGORiII498Zc4Vf\nHjBI5Xm1dGy4ffZg/oAIRsroDsfn7tnDYmRnTyWF0vCIOkzkuQsfF3I3aA3Q0Wlv\nZEI0HqqtPSptfwBalwz+YwCNgcMlIZbGHK/Fa8eDwN5bsHOoaQAqXEiqXRC57gs=\n=hVMU\n-----END PGP SIGNATURE-----\n", "payload": "tree ec0cbf8e1e86ec813c5a71e819680acd446079ac\nparent 98143da79924fe2044acae749ffb01923f2f14c6\nparent 7e05e10495cd0f83cbcba2e7d881b616998cf7dc\nparent e5adbd88e91c8b823cd9e180d9ec55655928b768\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647521894 +0000\ncommitter GitHub <noreply@github.com> 1647521894 +0000\n\nMerge #11737 #11739\n\n11737: Emit `#[must_use]` in `Generate new` assist r=lnicola a=lnicola\n\nCloses #11736\n\n11739: Insert #[must_use] in generate_getter r=lnicola a=Walther\n\nInserts `#[must_use]` for the generated getter methods.\r\n\r\nFrom discussion in https://github.com/rust-analyzer/rust-analyzer/issues/11736 and https://github.com/rust-analyzer/rust-analyzer/pull/11738\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\nCo-authored-by: Walther <veeti.haapsamo@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/502e30e6767ef26cf56158a92b47b3b8e9b63235", "html_url": "https://github.com/rust-lang/rust/commit/502e30e6767ef26cf56158a92b47b3b8e9b63235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/502e30e6767ef26cf56158a92b47b3b8e9b63235/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98143da79924fe2044acae749ffb01923f2f14c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/98143da79924fe2044acae749ffb01923f2f14c6", "html_url": "https://github.com/rust-lang/rust/commit/98143da79924fe2044acae749ffb01923f2f14c6"}, {"sha": "7e05e10495cd0f83cbcba2e7d881b616998cf7dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e05e10495cd0f83cbcba2e7d881b616998cf7dc", "html_url": "https://github.com/rust-lang/rust/commit/7e05e10495cd0f83cbcba2e7d881b616998cf7dc"}, {"sha": "e5adbd88e91c8b823cd9e180d9ec55655928b768", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5adbd88e91c8b823cd9e180d9ec55655928b768", "html_url": "https://github.com/rust-lang/rust/commit/e5adbd88e91c8b823cd9e180d9ec55655928b768"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "2e81dd13f41b47f0b41c8dd6ab02aabb85a699d2", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/502e30e6767ef26cf56158a92b47b3b8e9b63235/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502e30e6767ef26cf56158a92b47b3b8e9b63235/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=502e30e6767ef26cf56158a92b47b3b8e9b63235", "patch": "@@ -39,6 +39,7 @@ use crate::{\n //\n // impl Person {\n //     /// Get a reference to the person's name.\n+//     #[must_use]\n //     fn $0name(&self) -> &str {\n //         self.name.as_ref()\n //     }\n@@ -65,6 +66,7 @@ pub(crate) fn generate_getter(acc: &mut Assists, ctx: &AssistContext) -> Option<\n //\n // impl Person {\n //     /// Get a mutable reference to the person's name.\n+//     #[must_use]\n //     fn $0name_mut(&mut self) -> &mut String {\n //         &mut self.name\n //     }\n@@ -143,6 +145,7 @@ pub(crate) fn generate_getter_impl(\n             format_to!(\n                 buf,\n                 \"    /// Get {}the {}'s {}.\n+    #[must_use]\n     {}fn {}(&{}self) -> {} {{\n         {}\n     }}\",\n@@ -195,6 +198,7 @@ struct Context {\n \n impl Context {\n     /// Get a reference to the context's data.\n+    #[must_use]\n     fn $0data(&self) -> &Data {\n         &self.data\n     }\n@@ -216,6 +220,7 @@ struct Context {\n \n impl Context {\n     /// Get a mutable reference to the context's data.\n+    #[must_use]\n     fn $0data_mut(&mut self) -> &mut Data {\n         &mut self.data\n     }\n@@ -249,6 +254,7 @@ struct Context {\n }\n \n impl Context {\n+    #[must_use]\n     fn data_mut(&mut self) -> &mut Data {\n         &mut self.data\n     }\n@@ -273,6 +279,7 @@ pub(crate) struct Context {\n \n impl Context {\n     /// Get a reference to the context's data.\n+    #[must_use]\n     pub(crate) fn $0data(&self) -> &Data {\n         &self.data\n     }\n@@ -293,6 +300,7 @@ struct Context {\n \n impl Context {\n     /// Get a reference to the context's data.\n+    #[must_use]\n     fn data(&self) -> &Data {\n         &self.data\n     }\n@@ -306,11 +314,13 @@ struct Context {\n \n impl Context {\n     /// Get a reference to the context's data.\n+    #[must_use]\n     fn data(&self) -> &Data {\n         &self.data\n     }\n \n     /// Get a reference to the context's count.\n+    #[must_use]\n     fn $0count(&self) -> &usize {\n         &self.count\n     }\n@@ -337,6 +347,7 @@ struct S { foo: String }\n \n impl S {\n     /// Get a reference to the s's foo.\n+    #[must_use]\n     fn $0foo(&self) -> &String {\n         &self.foo\n     }\n@@ -361,6 +372,7 @@ struct S { foo: bool }\n \n impl S {\n     /// Get the s's foo.\n+    #[must_use]\n     fn $0foo(&self) -> bool {\n         self.foo\n     }\n@@ -394,6 +406,7 @@ struct S { foo: String }\n \n impl S {\n     /// Get a reference to the s's foo.\n+    #[must_use]\n     fn $0foo(&self) -> &str {\n         self.foo.as_ref()\n     }\n@@ -431,6 +444,7 @@ struct S { foo: Box<Sweets> }\n \n impl S {\n     /// Get a reference to the s's foo.\n+    #[must_use]\n     fn $0foo(&self) -> &Sweets {\n         self.foo.as_ref()\n     }\n@@ -464,6 +478,7 @@ struct S { foo: Vec<()> }\n \n impl S {\n     /// Get a reference to the s's foo.\n+    #[must_use]\n     fn $0foo(&self) -> &[()] {\n         self.foo.as_ref()\n     }\n@@ -487,6 +502,7 @@ struct S { foo: Option<Failure> }\n \n impl S {\n     /// Get a reference to the s's foo.\n+    #[must_use]\n     fn $0foo(&self) -> Option<&Failure> {\n         self.foo.as_ref()\n     }\n@@ -510,6 +526,7 @@ struct Context {\n \n impl Context {\n     /// Get a reference to the context's data.\n+    #[must_use]\n     fn $0data(&self) -> Result<&bool, &i32> {\n         self.data.as_ref()\n     }"}, {"sha": "eb9f1d04e1933368485d960e78c97177c30539eb", "filename": "crates/ide_assists/src/handlers/generate_new.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/502e30e6767ef26cf56158a92b47b3b8e9b63235/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502e30e6767ef26cf56158a92b47b3b8e9b63235/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=502e30e6767ef26cf56158a92b47b3b8e9b63235", "patch": "@@ -23,6 +23,7 @@ use crate::{\n // }\n //\n // impl<T: Clone> Ctx<T> {\n+//     #[must_use]\n //     fn $0new(data: T) -> Self { Self { data } }\n // }\n // ```\n@@ -54,7 +55,13 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n             .format(\", \");\n         let fields = field_list.fields().filter_map(|f| f.name()).format(\", \");\n \n-        format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n+        format_to!(\n+            buf,\n+            \"    #[must_use]\\n    {}fn new({}) -> Self {{ Self {{ {} }} }}\",\n+            vis,\n+            params,\n+            fields\n+        );\n \n         let start_offset = impl_def\n             .and_then(|impl_def| find_impl_block_start(impl_def, &mut buf))\n@@ -90,6 +97,7 @@ struct Foo {$0}\n struct Foo {}\n \n impl Foo {\n+    #[must_use]\n     fn $0new() -> Self { Self {  } }\n }\n \"#,\n@@ -103,6 +111,7 @@ struct Foo<T: Clone> {$0}\n struct Foo<T: Clone> {}\n \n impl<T: Clone> Foo<T> {\n+    #[must_use]\n     fn $0new() -> Self { Self {  } }\n }\n \"#,\n@@ -116,6 +125,7 @@ struct Foo<'a, T: Foo<'a>> {$0}\n struct Foo<'a, T: Foo<'a>> {}\n \n impl<'a, T: Foo<'a>> Foo<'a, T> {\n+    #[must_use]\n     fn $0new() -> Self { Self {  } }\n }\n \"#,\n@@ -129,6 +139,7 @@ struct Foo { baz: String $0}\n struct Foo { baz: String }\n \n impl Foo {\n+    #[must_use]\n     fn $0new(baz: String) -> Self { Self { baz } }\n }\n \"#,\n@@ -142,6 +153,7 @@ struct Foo { baz: String, qux: Vec<i32> $0}\n struct Foo { baz: String, qux: Vec<i32> }\n \n impl Foo {\n+    #[must_use]\n     fn $0new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }\n }\n \"#,\n@@ -159,6 +171,7 @@ struct Foo { pub baz: String, pub qux: Vec<i32> $0}\n struct Foo { pub baz: String, pub qux: Vec<i32> }\n \n impl Foo {\n+    #[must_use]\n     fn $0new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }\n }\n \"#,\n@@ -178,6 +191,7 @@ impl Foo {}\n struct Foo {}\n \n impl Foo {\n+    #[must_use]\n     fn $0new() -> Self { Self {  } }\n }\n \"#,\n@@ -195,6 +209,7 @@ impl Foo {\n struct Foo {}\n \n impl Foo {\n+    #[must_use]\n     fn $0new() -> Self { Self {  } }\n \n     fn qux(&self) {}\n@@ -218,6 +233,7 @@ impl Foo {\n struct Foo {}\n \n impl Foo {\n+    #[must_use]\n     fn $0new() -> Self { Self {  } }\n \n     fn qux(&self) {}\n@@ -240,6 +256,7 @@ pub struct Foo {$0}\n pub struct Foo {}\n \n impl Foo {\n+    #[must_use]\n     pub fn $0new() -> Self { Self {  } }\n }\n \"#,\n@@ -253,6 +270,7 @@ pub(crate) struct Foo {$0}\n pub(crate) struct Foo {}\n \n impl Foo {\n+    #[must_use]\n     pub(crate) fn $0new() -> Self { Self {  } }\n }\n \"#,\n@@ -348,6 +366,7 @@ pub struct Source<T> {\n }\n \n impl<T> Source<T> {\n+    #[must_use]\n     pub fn $0new(file_id: HirFileId, ast: T) -> Self { Self { file_id, ast } }\n \n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {"}, {"sha": "53e5d085909ced1787bcca1bd8004790af59c768", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/502e30e6767ef26cf56158a92b47b3b8e9b63235/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502e30e6767ef26cf56158a92b47b3b8e9b63235/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=502e30e6767ef26cf56158a92b47b3b8e9b63235", "patch": "@@ -1036,6 +1036,7 @@ struct Person {\n \n impl Person {\n     /// Get a reference to the person's name.\n+    #[must_use]\n     fn $0name(&self) -> &str {\n         self.name.as_ref()\n     }\n@@ -1060,6 +1061,7 @@ struct Person {\n \n impl Person {\n     /// Get a mutable reference to the person's name.\n+    #[must_use]\n     fn $0name_mut(&mut self) -> &mut String {\n         &mut self.name\n     }\n@@ -1133,6 +1135,7 @@ struct Ctx<T: Clone> {\n }\n \n impl<T: Clone> Ctx<T> {\n+    #[must_use]\n     fn $0new(data: T) -> Self { Self { data } }\n }\n \"#####,"}]}