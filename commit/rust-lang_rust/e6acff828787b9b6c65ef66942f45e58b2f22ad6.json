{"sha": "e6acff828787b9b6c65ef66942f45e58b2f22ad6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YWNmZjgyODc4N2I5YjZjNjVlZjY2OTQyZjQ1ZTU4YjJmMjJhZDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-05T02:20:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-05T17:11:11Z"}, "message": "native: Fix usage of a deallocated mutex\n\nWhen the timer_helper thread exited, it would attempt to re-acquire the global\ntask count mutex, but the mutex had previously been deallocated, leading to\nundefined behavior of the mutex, and in some cases deadlock.\n\nAnother mutex is used to coordinate shutting down the timer helper thread.\n\nCloses #12699", "tree": {"sha": "18a6b8ac782598961cc0f8561ae3db9934d1c3ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a6b8ac782598961cc0f8561ae3db9934d1c3ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6acff828787b9b6c65ef66942f45e58b2f22ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6acff828787b9b6c65ef66942f45e58b2f22ad6", "html_url": "https://github.com/rust-lang/rust/commit/e6acff828787b9b6c65ef66942f45e58b2f22ad6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6acff828787b9b6c65ef66942f45e58b2f22ad6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8bd8de82e19702ad26fff704ff9a4890ebe1bf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bd8de82e19702ad26fff704ff9a4890ebe1bf7", "html_url": "https://github.com/rust-lang/rust/commit/d8bd8de82e19702ad26fff704ff9a4890ebe1bf7"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "76e58ce753f21d6c52211664349375ac77bf0dc5", "filename": "src/libnative/bookkeeping.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6acff828787b9b6c65ef66942f45e58b2f22ad6/src%2Flibnative%2Fbookkeeping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6acff828787b9b6c65ef66942f45e58b2f22ad6/src%2Flibnative%2Fbookkeeping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fbookkeeping.rs?ref=e6acff828787b9b6c65ef66942f45e58b2f22ad6", "patch": "@@ -39,12 +39,9 @@ pub fn decrement() {\n /// the entry points of native programs\n pub fn wait_for_other_tasks() {\n     unsafe {\n-        {\n-            let mut guard = TASK_LOCK.lock();\n-            while TASK_COUNT.load(atomics::SeqCst) > 0 {\n-                guard.wait();\n-            }\n+        let mut guard = TASK_LOCK.lock();\n+        while TASK_COUNT.load(atomics::SeqCst) > 0 {\n+            guard.wait();\n         }\n-        TASK_LOCK.destroy();\n     }\n }"}, {"sha": "45bd0f8b67cf543e19ba639035436382e076558a", "filename": "src/libnative/io/timer_helper.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e6acff828787b9b6c65ef66942f45e58b2f22ad6/src%2Flibnative%2Fio%2Ftimer_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6acff828787b9b6c65ef66942f45e58b2f22ad6/src%2Flibnative%2Fio%2Ftimer_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_helper.rs?ref=e6acff828787b9b6c65ef66942f45e58b2f22ad6", "patch": "@@ -36,6 +36,8 @@ use task;\n static mut HELPER_CHAN: *mut Chan<Req> = 0 as *mut Chan<Req>;\n static mut HELPER_SIGNAL: imp::signal = 0 as imp::signal;\n \n+static mut TIMER_HELPER_EXIT: StaticNativeMutex = NATIVE_MUTEX_INIT;\n+\n pub fn boot(helper: fn(imp::signal, Port<Req>)) {\n     static mut LOCK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n     static mut INITIALIZED: bool = false;\n@@ -53,6 +55,7 @@ pub fn boot(helper: fn(imp::signal, Port<Req>)) {\n             task::spawn(proc() {\n                 bookkeeping::decrement();\n                 helper(receive, msgp);\n+                TIMER_HELPER_EXIT.lock().signal()\n             });\n \n             rt::at_exit(proc() { shutdown() });\n@@ -70,17 +73,15 @@ pub fn send(req: Req) {\n }\n \n fn shutdown() {\n-    // We want to wait for the entire helper task to exit, and in doing so it\n-    // will attempt to decrement the global task count. When the helper was\n-    // created, it decremented the count so it wouldn't count towards preventing\n-    // the program to exit, so here we pair that manual decrement with a manual\n-    // increment. We will then wait for the helper thread to exit by calling\n-    // wait_for_other_tasks.\n-    bookkeeping::increment();\n-\n     // Request a shutdown, and then wait for the task to exit\n-    send(Shutdown);\n-    bookkeeping::wait_for_other_tasks();\n+    unsafe {\n+        let mut guard = TIMER_HELPER_EXIT.lock();\n+        send(Shutdown);\n+        guard.wait();\n+        drop(guard);\n+        TIMER_HELPER_EXIT.destroy();\n+    }\n+\n \n     // Clean up after ther helper thread\n     unsafe {"}, {"sha": "24f9a05b2c16df1154a95382f2c6f73ec9d90c13", "filename": "src/test/run-pass/issue-12699.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e6acff828787b9b6c65ef66942f45e58b2f22ad6/src%2Ftest%2Frun-pass%2Fissue-12699.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6acff828787b9b6c65ef66942f45e58b2f22ad6/src%2Ftest%2Frun-pass%2Fissue-12699.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12699.rs?ref=e6acff828787b9b6c65ef66942f45e58b2f22ad6", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate native;\n+\n+use std::io::timer;\n+\n+#[start]\n+fn start(argc: int, argv: **u8) -> int {\n+    native::start(argc, argv, main)\n+}\n+\n+fn main() {\n+    timer::sleep(250);\n+}"}]}