{"sha": "19120209d8e532514203d16a2cff0ad3b44de3bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MTIwMjA5ZDhlNTMyNTE0MjAzZDE2YTJjZmYwYWQzYjQ0ZGUzYmI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-30T02:53:20Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T01:30:30Z"}, "message": "Rename `core::char::Char` to `CharExt` to match prelude guidelines.\n\nImports may need to be updated so this is a\n\n[breaking-change]", "tree": {"sha": "dbfa9a8814fa0c10078ed4fa1b8668343d468ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbfa9a8814fa0c10078ed4fa1b8668343d468ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19120209d8e532514203d16a2cff0ad3b44de3bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19120209d8e532514203d16a2cff0ad3b44de3bb", "html_url": "https://github.com/rust-lang/rust/commit/19120209d8e532514203d16a2cff0ad3b44de3bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19120209d8e532514203d16a2cff0ad3b44de3bb/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01417f245cad2dc7dcafcf285ed6c1be163ac3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/01417f245cad2dc7dcafcf285ed6c1be163ac3a5", "html_url": "https://github.com/rust-lang/rust/commit/01417f245cad2dc7dcafcf285ed6c1be163ac3a5"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "bf3b35b4f6817a86eedb7533dc2f02582fd344b3", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=19120209d8e532514203d16a2cff0ad3b44de3bb", "patch": "@@ -103,7 +103,7 @@ mod std {\n mod prelude {\n     // from core.\n     pub use core::borrow::IntoCow;\n-    pub use core::char::Char;\n+    pub use core::char::CharExt;\n     pub use core::clone::Clone;\n     pub use core::cmp::{PartialEq, Eq, PartialOrd, Ord};\n     pub use core::cmp::Ordering::{Less, Equal, Greater};"}, {"sha": "ecf17820d2d8f72c58f44bc97d18c59a3b8666e9", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=19120209d8e532514203d16a2cff0ad3b44de3bb", "patch": "@@ -55,7 +55,7 @@ use self::RecompositionState::*;\n use self::DecompositionType::*;\n \n use core::borrow::{BorrowFrom, ToOwned};\n-use core::char::Char;\n+use core::char::CharExt;\n use core::clone::Clone;\n use core::iter::AdditiveIterator;\n use core::iter::{range, Iterator, IteratorExt};"}, {"sha": "ce530ae1d32e513bcbaceca72a31150484844291", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=19120209d8e532514203d16a2cff0ad3b44de3bb", "patch": "@@ -112,7 +112,7 @@ pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n \n /// Basic `char` manipulations.\n #[stable]\n-pub trait Char {\n+pub trait CharExt {\n     /// Checks if a `char` parses as a numeric digit in the given radix.\n     ///\n     /// Compared to `is_numeric()`, this function only recognizes the characters"}, {"sha": "f63242b4f859a451d9bddabff995532c9d1ec900", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=19120209d8e532514203d16a2cff0ad3b44de3bb", "patch": "@@ -15,7 +15,7 @@ pub use self::SignificantDigits::*;\n pub use self::SignFormat::*;\n \n use char;\n-use char::Char;\n+use char::CharExt;\n use fmt;\n use iter::{IteratorExt, range};\n use num::{cast, Float, ToPrimitive};"}, {"sha": "102836f8d3024831044766fe17c0ec2062f66af3", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=19120209d8e532514203d16a2cff0ad3b44de3bb", "patch": "@@ -388,7 +388,7 @@ impl<'a> Formatter<'a> {\n                         prefix: &str,\n                         buf: &str)\n                         -> Result {\n-        use char::Char;\n+        use char::CharExt;\n         use fmt::rt::{FlagAlternate, FlagSignPlus, FlagSignAwareZeroPad};\n \n         let mut width = buf.len();\n@@ -504,7 +504,7 @@ impl<'a> Formatter<'a> {\n     fn with_padding<F>(&mut self, padding: uint, default: rt::Alignment, f: F) -> Result where\n         F: FnOnce(&mut Formatter) -> Result,\n     {\n-        use char::Char;\n+        use char::CharExt;\n         let align = match self.align {\n             rt::AlignUnknown => default,\n             _ => self.align\n@@ -613,7 +613,7 @@ impl Show for str {\n \n impl Show for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        use char::Char;\n+        use char::CharExt;\n \n         let mut utf8 = [0u8; 4];\n         let amt = self.encode_utf8(&mut utf8).unwrap_or(0);"}, {"sha": "426c858d408adb142123fba77c491184a239d08e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=19120209d8e532514203d16a2cff0ad3b44de3bb", "patch": "@@ -15,7 +15,7 @@\n #![stable]\n #![allow(missing_docs)]\n \n-use char::Char;\n+use char::CharExt;\n use clone::Clone;\n use cmp::{PartialEq, Eq};\n use cmp::{PartialOrd, Ord};"}, {"sha": "d4aca1bb73c23659e987f6774abfc3c64708cef9", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=19120209d8e532514203d16a2cff0ad3b44de3bb", "patch": "@@ -38,7 +38,7 @@ pub use mem::drop;\n \n // Reexported types and traits\n \n-pub use char::Char;\n+pub use char::CharExt;\n pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n pub use iter::{Extend, IteratorExt};"}, {"sha": "5f6c62f1d7a68fc4321a5b6212012f2cb7f7ae37", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=19120209d8e532514203d16a2cff0ad3b44de3bb", "patch": "@@ -50,7 +50,6 @@ use rustc::session::config;\n use std::rc::Rc;\n use std::u32;\n use std::str::Str as StrTrait; // Conflicts with Str variant\n-use std::char::Char as CharTrait; // Conflicts with Char variant\n use std::path::Path as FsPath; // Conflicts with Path struct\n \n use core::DocContext;"}, {"sha": "51bf206f70e9f55dbb6bb5ccb3f7afbaf7639507", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=19120209d8e532514203d16a2cff0ad3b44de3bb", "patch": "@@ -225,7 +225,7 @@ pub use self::FileMode::*;\n pub use self::FileAccess::*;\n pub use self::IoErrorKind::*;\n \n-use char::Char;\n+use char::CharExt;\n use clone::Clone;\n use default::Default;\n use error::{FromError, Error};"}, {"sha": "eda20fc7d603fc54b43fe9f31a733a7884d7faca", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=19120209d8e532514203d16a2cff0ad3b44de3bb", "patch": "@@ -22,7 +22,7 @@\n // Reexported types and traits\n \n #[stable] #[doc(no_inline)] pub use boxed::Box;\n-#[stable] #[doc(no_inline)] pub use char::{Char, UnicodeChar};\n+#[stable] #[doc(no_inline)] pub use char::{CharExt, UnicodeChar};\n #[stable] #[doc(no_inline)] pub use clone::Clone;\n #[stable] #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[stable] #[doc(no_inline)] pub use iter::CloneIteratorExt;"}, {"sha": "170700fb4d5fe207dddcd65137f216de87be5249", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19120209d8e532514203d16a2cff0ad3b44de3bb/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=19120209d8e532514203d16a2cff0ad3b44de3bb", "patch": "@@ -58,7 +58,7 @@ mod u_str;\n /// however the converse is not always true due to the above range limits\n /// and, as such, should be performed via the `from_u32` function..\n pub mod char {\n-    pub use core::char::{MAX, from_u32, from_digit, Char};\n+    pub use core::char::{MAX, from_u32, from_digit, CharExt};\n \n     pub use normalize::{decompose_canonical, decompose_compatible, compose};\n "}]}