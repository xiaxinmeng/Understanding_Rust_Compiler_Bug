{"sha": "64729390a1b2b6b05f8a4407658163ddff4d017e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NzI5MzkwYTFiMmI2YjA1ZjhhNDQwNzY1ODE2M2RkZmY0ZDAxN2U=", "commit": {"author": {"name": "boolean_coercion", "email": "booleancoercion@gmail.com", "date": "2021-02-11T00:30:37Z"}, "committer": {"name": "boolean_coercion", "email": "booleancoercion@gmail.com", "date": "2021-02-12T09:54:22Z"}, "message": "Implemented majority of from_str_radix_10", "tree": {"sha": "b6a52ceea6258361675cf3a3b14152db2a2d69cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6a52ceea6258361675cf3a3b14152db2a2d69cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64729390a1b2b6b05f8a4407658163ddff4d017e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64729390a1b2b6b05f8a4407658163ddff4d017e", "html_url": "https://github.com/rust-lang/rust/commit/64729390a1b2b6b05f8a4407658163ddff4d017e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64729390a1b2b6b05f8a4407658163ddff4d017e/comments", "author": {"login": "booleancoercion", "id": 33005025, "node_id": "MDQ6VXNlcjMzMDA1MDI1", "avatar_url": "https://avatars.githubusercontent.com/u/33005025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/booleancoercion", "html_url": "https://github.com/booleancoercion", "followers_url": "https://api.github.com/users/booleancoercion/followers", "following_url": "https://api.github.com/users/booleancoercion/following{/other_user}", "gists_url": "https://api.github.com/users/booleancoercion/gists{/gist_id}", "starred_url": "https://api.github.com/users/booleancoercion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/booleancoercion/subscriptions", "organizations_url": "https://api.github.com/users/booleancoercion/orgs", "repos_url": "https://api.github.com/users/booleancoercion/repos", "events_url": "https://api.github.com/users/booleancoercion/events{/privacy}", "received_events_url": "https://api.github.com/users/booleancoercion/received_events", "type": "User", "site_admin": false}, "committer": {"login": "booleancoercion", "id": 33005025, "node_id": "MDQ6VXNlcjMzMDA1MDI1", "avatar_url": "https://avatars.githubusercontent.com/u/33005025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/booleancoercion", "html_url": "https://github.com/booleancoercion", "followers_url": "https://api.github.com/users/booleancoercion/followers", "following_url": "https://api.github.com/users/booleancoercion/following{/other_user}", "gists_url": "https://api.github.com/users/booleancoercion/gists{/gist_id}", "starred_url": "https://api.github.com/users/booleancoercion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/booleancoercion/subscriptions", "organizations_url": "https://api.github.com/users/booleancoercion/orgs", "repos_url": "https://api.github.com/users/booleancoercion/repos", "events_url": "https://api.github.com/users/booleancoercion/events{/privacy}", "received_events_url": "https://api.github.com/users/booleancoercion/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b80ac2af9c0939428054e7d018f19fc16b920b05", "url": "https://api.github.com/repos/rust-lang/rust/commits/b80ac2af9c0939428054e7d018f19fc16b920b05", "html_url": "https://github.com/rust-lang/rust/commit/b80ac2af9c0939428054e7d018f19fc16b920b05"}], "stats": {"total": 92, "additions": 86, "deletions": 6}, "files": [{"sha": "612ea9ae62c78ebcbec69b69c6b07c26e9824002", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 55, "deletions": 4, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/64729390a1b2b6b05f8a4407658163ddff4d017e/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64729390a1b2b6b05f8a4407658163ddff4d017e/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=64729390a1b2b6b05f8a4407658163ddff4d017e", "patch": "@@ -1,6 +1,10 @@\n-use rustc_lint::{EarlyLintPass, EarlyContext};\n+use rustc_lint::{LateLintPass, LateContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_ast::ast::*;\n+use rustc_hir::*;\n+use rustc_errors::Applicability;\n+use if_chain::if_chain;\n+\n+use crate::utils::span_lint_and_sugg;\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -26,9 +30,56 @@ declare_clippy_lint! {\n     /// ```\n     pub FROM_STR_RADIX_10,\n     style,\n-    \"default lint description\"\n+    \"from_str_radix with radix 10\"\n }\n \n declare_lint_pass!(FromStrRadix10 => [FROM_STR_RADIX_10]);\n \n-impl EarlyLintPass for FromStrRadix10 {}\n+impl LateLintPass<'tcx> for FromStrRadix10 {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, exp: &Expr<'tcx>) {\n+        if_chain! {\n+            if let ExprKind::Call(maybe_path, arguments) = &exp.kind;\n+            if let ExprKind::Path(qpath) = &maybe_path.kind;\n+            if let QPath::TypeRelative(ty, pathseg) = &qpath;\n+\n+            // check if the first part of the path is some integer primitive\n+            if let TyKind::Path(ty_qpath) = &ty.kind;\n+            let ty_res = cx.qpath_res(ty_qpath, ty.hir_id);\n+            if let def::Res::PrimTy(prim_ty) = ty_res;\n+            if is_primitive_integer_ty(prim_ty);\n+\n+            // check if the second part of the path indeed calls the associated\n+            // function `from_str_radix`\n+            if pathseg.ident.name.as_str() == \"from_str_radix\";\n+\n+            // check if the second argument resolves to a constant `10`\n+            if arguments.len() == 2;\n+            if is_constant_10(&arguments[1]);\n+\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    FROM_STR_RADIX_10,\n+                    exp.span,\n+                    \"This call to `from_str_radix` can be shortened to a call to str::parse\",\n+                    \"try\",\n+                    format!(\"TODO\"),\n+                    Applicability::MachineApplicable\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn is_primitive_integer_ty(ty: PrimTy) -> bool {\n+    match ty {\n+        PrimTy::Int(_) => true,\n+        PrimTy::Uint(_) => true,\n+        _ => false\n+    }\n+}\n+\n+fn is_constant_10<'tcx>(expr: &Expr<'tcx>) -> bool {\n+    // TODO\n+    true\n+}\n\\ No newline at end of file"}, {"sha": "dae686b1229d5bf874ea9a5ae74b1b53f8fa6cfb", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64729390a1b2b6b05f8a4407658163ddff4d017e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64729390a1b2b6b05f8a4407658163ddff4d017e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=64729390a1b2b6b05f8a4407658163ddff4d017e", "patch": "@@ -1258,6 +1258,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box types::PtrAsPtr::new(msrv));\n     store.register_late_pass(|| box case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons);\n     store.register_late_pass(|| box redundant_slicing::RedundantSlicing);\n+    store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),"}, {"sha": "086616d09ff8fa2ab0a8485b723b9a311fb395b3", "filename": "tests/ui/from_str_radix_10.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/64729390a1b2b6b05f8a4407658163ddff4d017e/tests%2Fui%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64729390a1b2b6b05f8a4407658163ddff4d017e/tests%2Fui%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_str_radix_10.rs?ref=64729390a1b2b6b05f8a4407658163ddff4d017e", "patch": "@@ -1,5 +1,33 @@\n #![warn(clippy::from_str_radix_10)]\n \n-fn main() {\n-    // test code goes here\n+mod some_mod {\n+    // fake function that shouldn't trigger the lint\n+    pub fn from_str_radix(_: &str, _: u32) -> Result<(), std::num::ParseIntError> {\n+        unimplemented!()\n+    }\n }\n+\n+// fake function that shouldn't trigger the lint\n+fn from_str_radix(_: &str, _: u32) -> Result<(), std::num::ParseIntError> {\n+    unimplemented!()\n+}\n+\n+fn main() -> Result<(), Box<dyn std::error::Error>> {\n+    // all of these should trigger the lint\n+    u32::from_str_radix(\"30\", 10)?;\n+    i64::from_str_radix(\"24\", 10)?;\n+    isize::from_str_radix(\"100\", 10)?;\n+    u8::from_str_radix(\"7\", 10)?;\n+\n+    // none of these should trigger the lint\n+    u16::from_str_radix(\"20\", 3)?;\n+    i32::from_str_radix(\"45\", 12)?;\n+    usize::from_str_radix(\"10\", 16)?;\n+    i128::from_str_radix(\"10\", 13)?;\n+    some_mod::from_str_radix(\"50\", 10)?;\n+    some_mod::from_str_radix(\"50\", 6)?;\n+    from_str_radix(\"50\", 10)?;\n+    from_str_radix(\"50\", 6)?;\n+\n+    Ok(())\n+}\n\\ No newline at end of file"}]}