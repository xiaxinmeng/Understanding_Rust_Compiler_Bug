{"sha": "0250ff9a5f1347f3177516e178fd8382d48169c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNTBmZjlhNWYxMzQ3ZjMxNzc1MTZlMTc4ZmQ4MzgyZDQ4MTY5Yzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-17T00:44:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-17T00:44:25Z"}, "message": "Auto merge of #22681 - mzabaluev:extend-faster, r=huonw\n\nInstead of a fast branch with a sized iterator falling back to a potentially poorly optimized iterate-and-push loop, a single efficient loop can serve all cases.\r\n\r\nIn my benchmark runs, I see some good gains, but also some regressions, possibly due to different inlining choices by the compiler. YMMV.", "tree": {"sha": "6ac056ac2e231116ec1440a21e1e80078bd1354e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ac056ac2e231116ec1440a21e1e80078bd1354e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0250ff9a5f1347f3177516e178fd8382d48169c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0250ff9a5f1347f3177516e178fd8382d48169c7", "html_url": "https://github.com/rust-lang/rust/commit/0250ff9a5f1347f3177516e178fd8382d48169c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0250ff9a5f1347f3177516e178fd8382d48169c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "014a5c12ac5692339c854cda02cbabc031f2c5d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/014a5c12ac5692339c854cda02cbabc031f2c5d1", "html_url": "https://github.com/rust-lang/rust/commit/014a5c12ac5692339c854cda02cbabc031f2c5d1"}, {"sha": "7b464d364b33915b88f67213a3329e0a3d997e4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b464d364b33915b88f67213a3329e0a3d997e4d", "html_url": "https://github.com/rust-lang/rust/commit/7b464d364b33915b88f67213a3329e0a3d997e4d"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "ba41f438b37fba79a6464144cf985b2f8a1e65f9", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0250ff9a5f1347f3177516e178fd8382d48169c7/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0250ff9a5f1347f3177516e178fd8382d48169c7/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=0250ff9a5f1347f3177516e178fd8382d48169c7", "patch": "@@ -1469,42 +1469,26 @@ impl<T> ops::DerefMut for Vec<T> {\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=T>>(iterable: I) -> Vec<T> {\n+        // Unroll the first iteration, as the vector is going to be\n+        // expanded on this iteration in every case when the iterable is not\n+        // empty, but the loop in extend_desugared() is not going to see the\n+        // vector being full in the few subsequent loop iterations.\n+        // So we get better branch prediction and the possibility to\n+        // construct the vector with initial estimated capacity.\n         let mut iterator = iterable.into_iter();\n-        let (lower, _) = iterator.size_hint();\n-        let mut vector = Vec::with_capacity(lower);\n-\n-        // This function should be the moral equivalent of:\n-        //\n-        //      for item in iterator {\n-        //          vector.push(item);\n-        //      }\n-        //\n-        // This equivalent crucially runs the iterator precisely once. Below we\n-        // actually in theory run the iterator twice (one without bounds checks\n-        // and one with). To achieve the \"moral equivalent\", we use the `if`\n-        // statement below to break out early.\n-        //\n-        // If the first loop has terminated, then we have one of two conditions.\n-        //\n-        // 1. The underlying iterator returned `None`. In this case we are\n-        //    guaranteed that less than `vector.capacity()` elements have been\n-        //    returned, so we break out early.\n-        // 2. The underlying iterator yielded `vector.capacity()` elements and\n-        //    has not yielded `None` yet. In this case we run the iterator to\n-        //    its end below.\n-        for element in iterator.by_ref().take(vector.capacity()) {\n-            let len = vector.len();\n-            unsafe {\n-                ptr::write(vector.get_unchecked_mut(len), element);\n-                vector.set_len(len + 1);\n-            }\n-        }\n-\n-        if vector.len() == vector.capacity() {\n-            for element in iterator {\n-                vector.push(element);\n+        let mut vector = match iterator.next() {\n+            None => return Vec::new(),\n+            Some(element) => {\n+                let (lower, _) = iterator.size_hint();\n+                let mut vector = Vec::with_capacity(1 + lower);\n+                unsafe {\n+                    ptr::write(vector.get_unchecked_mut(0), element);\n+                    vector.set_len(1);\n+                }\n+                vector\n             }\n-        }\n+        };\n+        vector.extend_desugared(iterator);\n         vector\n     }\n }\n@@ -1569,11 +1553,27 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n     fn extend<I: IntoIterator<Item=T>>(&mut self, iterable: I) {\n-        let iterator = iterable.into_iter();\n-        let (lower, _) = iterator.size_hint();\n-        self.reserve(lower);\n-        for element in iterator {\n-            self.push(element)\n+        self.extend_desugared(iterable.into_iter())\n+    }\n+}\n+\n+impl<T> Vec<T> {\n+    fn extend_desugared<I: Iterator<Item=T>>(&mut self, mut iterator: I) {\n+        // This function should be the moral equivalent of:\n+        //\n+        //      for item in iterator {\n+        //          self.push(item);\n+        //      }\n+        while let Some(element) = iterator.next() {\n+            let len = self.len();\n+            if len == self.capacity() {\n+                let (lower, _) = iterator.size_hint();\n+                self.reserve(lower + 1);\n+            }\n+            unsafe {\n+                ptr::write(self.get_unchecked_mut(len), element);\n+                self.set_len(len + 1);\n+            }\n         }\n     }\n }"}]}