{"sha": "f83c0166be76462c64c3609bfba25b35e77c8582", "node_id": "C_kwDOAAsO6NoAKGY4M2MwMTY2YmU3NjQ2MmM2NGMzNjA5YmZiYTI1YjM1ZTc3Yzg1ODI", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2022-01-14T09:48:59Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2022-01-14T09:48:59Z"}, "message": "cleanup + detect num cpus", "tree": {"sha": "2fb962333ec64621e94874074ce6beef93a682cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fb962333ec64621e94874074ce6beef93a682cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f83c0166be76462c64c3609bfba25b35e77c8582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f83c0166be76462c64c3609bfba25b35e77c8582", "html_url": "https://github.com/rust-lang/rust/commit/f83c0166be76462c64c3609bfba25b35e77c8582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f83c0166be76462c64c3609bfba25b35e77c8582/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b0bfc6fdd5a23ded563ba15004018db145b5af7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b0bfc6fdd5a23ded563ba15004018db145b5af7", "html_url": "https://github.com/rust-lang/rust/commit/0b0bfc6fdd5a23ded563ba15004018db145b5af7"}], "stats": {"total": 51, "additions": 13, "deletions": 38}, "files": [{"sha": "264876855304f22e190855282c600b8bbca5eddc", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f83c0166be76462c64c3609bfba25b35e77c8582/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f83c0166be76462c64c3609bfba25b35e77c8582/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f83c0166be76462c64c3609bfba25b35e77c8582", "patch": "@@ -1013,9 +1013,9 @@ dependencies = [\n \n [[package]]\n name = \"num_cpus\"\n-version = \"1.13.0\"\n+version = \"1.13.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"05499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3\"\n+checksum = \"19e64526ebdee182341572e50e9ad03965aa510cd94427a4549448f285e957a1\"\n dependencies = [\n  \"hermit-abi\",\n  \"libc\",\n@@ -1349,6 +1349,7 @@ dependencies = [\n  \"lsp-types\",\n  \"mbe\",\n  \"mimalloc\",\n+ \"num_cpus\",\n  \"oorandom\",\n  \"parking_lot\",\n  \"proc_macro_api\","}, {"sha": "4028b0bc7257053c929d46f1a67eaf45fbcd554e", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f83c0166be76462c64c3609bfba25b35e77c8582/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c0166be76462c64c3609bfba25b35e77c8582/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=f83c0166be76462c64c3609bfba25b35e77c8582", "patch": "@@ -87,7 +87,7 @@ pub use crate::{\n     moniker::{MonikerKind, MonikerResult, PackageInformation},\n     move_item::Direction,\n     navigation_target::NavigationTarget,\n-    prime_caches::{ParallelPrimeCachesProgress, PrimeCachesProgress},\n+    prime_caches::ParallelPrimeCachesProgress,\n     references::ReferenceSearchResult,\n     rename::RenameError,\n     runnables::{Runnable, RunnableKind, TestId},\n@@ -244,13 +244,6 @@ impl Analysis {\n         self.with_db(|db| status::status(&*db, file_id))\n     }\n \n-    pub fn prime_caches<F>(&self, cb: F) -> Cancellable<()>\n-    where\n-        F: Fn(PrimeCachesProgress) + Sync + std::panic::UnwindSafe,\n-    {\n-        self.with_db(move |db| prime_caches::prime_caches(db, &cb))\n-    }\n-\n     pub fn parallel_prime_caches<F>(&self, num_worker_threads: u8, cb: F) -> Cancellable<()>\n     where\n         F: Fn(ParallelPrimeCachesProgress) + Sync + std::panic::UnwindSafe,"}, {"sha": "b3413c0326608e0215872afed102cdf7f41a9d05", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f83c0166be76462c64c3609bfba25b35e77c8582/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c0166be76462c64c3609bfba25b35e77c8582/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=f83c0166be76462c64c3609bfba25b35e77c8582", "patch": "@@ -16,29 +16,6 @@ use rustc_hash::FxHashSet;\n \n use crate::RootDatabase;\n \n-/// We started indexing a crate.\n-#[derive(Debug)]\n-pub struct PrimeCachesProgress {\n-    pub on_crate: String,\n-    pub n_done: usize,\n-    pub n_total: usize,\n-}\n-\n-pub(crate) fn prime_caches(db: &RootDatabase, cb: &(dyn Fn(PrimeCachesProgress) + Sync)) {\n-    let _p = profile::span(\"prime_caches\");\n-    let graph = db.crate_graph();\n-    let to_prime = compute_crates_to_prime(db, &graph);\n-\n-    let n_total = to_prime.len();\n-    for (n_done, &crate_id) in to_prime.iter().enumerate() {\n-        let crate_name = graph[crate_id].display_name.as_deref().unwrap_or_default().to_string();\n-\n-        cb(PrimeCachesProgress { on_crate: crate_name, n_done, n_total });\n-        // This also computes the DefMap\n-        db.import_map(crate_id);\n-    }\n-}\n-\n /// We're indexing many crates.\n #[derive(Debug)]\n pub struct ParallelPrimeCachesProgress {"}, {"sha": "014001397de4264826353ec8feec60406408a1cb", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83c0166be76462c64c3609bfba25b35e77c8582/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f83c0166be76462c64c3609bfba25b35e77c8582/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=f83c0166be76462c64c3609bfba25b35e77c8582", "patch": "@@ -31,6 +31,7 @@ serde = { version = \"1.0.106\", features = [\"derive\"] }\n serde_json = { version = \"1.0.48\", features = [\"preserve_order\"] }\n threadpool = \"1.7.1\"\n rayon = \"1.5\"\n+num_cpus = \"1.13.1\"\n mimalloc = { version = \"0.1.19\", default-features = false, optional = true }\n lsp-server = \"0.5.1\"\n tracing = \"0.1\""}, {"sha": "490aef50f3e70c2f675e006b8498bec448a5cae7", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f83c0166be76462c64c3609bfba25b35e77c8582/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c0166be76462c64c3609bfba25b35e77c8582/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=f83c0166be76462c64c3609bfba25b35e77c8582", "patch": "@@ -88,7 +88,7 @@ pub fn load_workspace(\n         load_crate_graph(crate_graph, project_folders.source_root_config, &mut vfs, &receiver);\n \n     if load_config.prefill_caches {\n-        host.analysis().prime_caches(|_| {})?;\n+        host.analysis().parallel_prime_caches(1, |_| {})?;\n     }\n     Ok((host, vfs, proc_macro_client))\n }"}, {"sha": "3d17ee45137045af853b018bb72d8305348b9800", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f83c0166be76462c64c3609bfba25b35e77c8582/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c0166be76462c64c3609bfba25b35e77c8582/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f83c0166be76462c64c3609bfba25b35e77c8582", "patch": "@@ -509,10 +509,13 @@ impl GlobalState {\n                 let analysis = self.snapshot().analysis;\n                 move |sender| {\n                     sender.send(Task::PrimeCaches(PrimeCachesProgress::Begin)).unwrap();\n-                    let res = analysis.parallel_prime_caches(32, |progress| {\n-                        let report = PrimeCachesProgress::Report(progress);\n-                        sender.send(Task::PrimeCaches(report)).unwrap();\n-                    });\n+                    let res = analysis.parallel_prime_caches(\n+                        num_cpus::get_physical().try_into().unwrap_or(u8::MAX),\n+                        |progress| {\n+                            let report = PrimeCachesProgress::Report(progress);\n+                            sender.send(Task::PrimeCaches(report)).unwrap();\n+                        },\n+                    );\n                     sender\n                         .send(Task::PrimeCaches(PrimeCachesProgress::End {\n                             cancelled: res.is_err(),"}]}