{"sha": "db7611c4c9b8a0ad84d8e69930d237b74211ceb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNzYxMWM0YzliOGEwYWQ4NGQ4ZTY5OTMwZDIzN2I3NDIxMWNlYjE=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-22T20:58:33Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-22T20:58:33Z"}, "message": "rustc: More cleanup of rustc.rs", "tree": {"sha": "80acccd3aa820879fd1aaff5929b0d5ce67e2064", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80acccd3aa820879fd1aaff5929b0d5ce67e2064"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db7611c4c9b8a0ad84d8e69930d237b74211ceb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db7611c4c9b8a0ad84d8e69930d237b74211ceb1", "html_url": "https://github.com/rust-lang/rust/commit/db7611c4c9b8a0ad84d8e69930d237b74211ceb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db7611c4c9b8a0ad84d8e69930d237b74211ceb1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1081d0aee9fc0b942a90cff5b88c08f17454f763", "url": "https://api.github.com/repos/rust-lang/rust/commits/1081d0aee9fc0b942a90cff5b88c08f17454f763", "html_url": "https://github.com/rust-lang/rust/commit/1081d0aee9fc0b942a90cff5b88c08f17454f763"}], "stats": {"total": 126, "additions": 61, "deletions": 65}, "files": [{"sha": "7dcf41b00e52a65fd3e57408d7552d64c0c76880", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 61, "deletions": 65, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/db7611c4c9b8a0ad84d8e69930d237b74211ceb1/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7611c4c9b8a0ad84d8e69930d237b74211ceb1/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=db7611c4c9b8a0ad84d8e69930d237b74211ceb1", "patch": "@@ -37,12 +37,12 @@ fn default_environment(session::session sess,\n                        str argv0,\n                        str input) -> eval::env {\n \n-    auto libc = \"libc.so\";\n-    alt (sess.get_targ_cfg().os) {\n-        case (session::os_win32) { libc = \"msvcrt.dll\"; }\n-        case (session::os_macos) { libc = \"libc.dylib\"; }\n-        case (session::os_linux) { libc = \"libc.so.6\"; }\n-    }\n+    auto libc = alt (sess.get_targ_cfg().os) {\n+        case (session::os_win32) { \"msvcrt.dll\" }\n+        case (session::os_macos) { \"libc.dylib\" }\n+        case (session::os_linux) { \"libc.so.6\" }\n+        case (_) { \"libc.so\" }\n+    };\n \n     ret [// Target bindings.\n          tup(\"target_os\", eval::val_str(std::os::target_os())),\n@@ -58,13 +58,14 @@ fn default_environment(session::session sess,\n fn parse_input(session::session sess,\n                parser::parser p,\n                str input) -> @ast::crate {\n-    if (str::ends_with(input, \".rc\")) {\n-        ret parser::parse_crate_from_crate_file(p);\n+    ret if (str::ends_with(input, \".rc\")) {\n+        parser::parse_crate_from_crate_file(p)\n     } else if (str::ends_with(input, \".rs\")) {\n-        ret parser::parse_crate_from_source_file(p);\n-    }\n-    sess.err(\"unknown input file type: \" + input);\n-    fail;\n+       parser::parse_crate_from_source_file(p)\n+    } else {\n+        sess.err(\"unknown input file type: \" + input);\n+        fail\n+    };\n }\n \n fn time[T](bool do_it, str what, fn()->T thunk) -> T {\n@@ -174,31 +175,36 @@ options:\n }\n \n fn get_os(str triple) -> session::os {\n-    if (str::find(triple, \"win32\") >= 0 ||\n-        str::find(triple, \"mingw32\") >= 0 ) {\n-        ret session::os_win32;\n-    } else if (str::find(triple, \"darwin\") >= 0) { ret session::os_macos; }\n-    else if (str::find(triple, \"linux\") >= 0) { ret session::os_linux; }\n-    else { log_err \"Unknown operating system!\"; fail; }\n+    ret if (str::find(triple, \"win32\") >= 0 ||\n+            str::find(triple, \"mingw32\") >= 0 ) {\n+        session::os_win32\n+    } else if (str::find(triple, \"darwin\") >= 0) {\n+        session::os_macos\n+    } else if (str::find(triple, \"linux\") >= 0) {\n+        session::os_linux\n+    } else {\n+        log_err \"Unknown operating system!\";\n+        fail\n+    };\n }\n \n fn get_arch(str triple) -> session::arch {\n-    if (str::find(triple, \"i386\") >= 0 ||\n-        str::find(triple, \"i486\") >= 0 ||\n-        str::find(triple, \"i586\") >= 0 ||\n-        str::find(triple, \"i686\") >= 0 ||\n-        str::find(triple, \"i786\") >= 0 ) {\n-        ret session::arch_x86;\n+    ret if (str::find(triple, \"i386\") >= 0 ||\n+            str::find(triple, \"i486\") >= 0 ||\n+            str::find(triple, \"i586\") >= 0 ||\n+            str::find(triple, \"i686\") >= 0 ||\n+            str::find(triple, \"i786\") >= 0 ) {\n+        session::arch_x86\n     } else if (str::find(triple, \"x86_64\") >= 0) {\n-        ret session::arch_x64;\n+        session::arch_x64\n     } else if (str::find(triple, \"arm\") >= 0 ||\n         str::find(triple, \"xscale\") >= 0 ) {\n-        ret session::arch_arm;\n+        session::arch_arm\n     }\n     else {\n         log_err (\"Unknown architecture! \" + triple);\n-        fail;\n-    }\n+        fail\n+    };\n }\n \n fn get_default_sysroot(str binary) -> str {\n@@ -226,16 +232,17 @@ fn build_session_options(str binary, getopts::match match)\n     auto shared = opt_present(match, \"shared\");\n     auto library_search_paths = getopts::opt_strs(match, \"L\");\n \n-    auto output_type = link::output_type_exe;\n-    if (opt_present(match, \"parse-only\")) {\n-        output_type = link::output_type_none;\n+    auto output_type = if (opt_present(match, \"parse-only\")) {\n+        link::output_type_none\n     } else if (opt_present(match, \"S\")) {\n-        output_type = link::output_type_assembly;\n+        link::output_type_assembly\n     } else if (opt_present(match, \"c\")) {\n-        output_type = link::output_type_object;\n+        link::output_type_object\n     } else if (opt_present(match, \"emit-llvm\")) {\n-        output_type = link::output_type_bitcode;\n-    }\n+        link::output_type_bitcode\n+    } else {\n+        link::output_type_exe\n+    };\n \n     auto verify = !opt_present(match, \"noverify\");\n     auto save_temps = opt_present(match, \"save-temps\");\n@@ -246,46 +253,35 @@ fn build_session_options(str binary, getopts::match match)\n     auto run_typestate = !opt_present(match, \"no-typestate\");\n     auto sysroot_opt = getopts::opt_maybe_str(match, \"sysroot\");\n \n-    let uint optLevel = 0u;\n-    if (opt_present(match, \"O\")) {\n-        optLevel = 2u;\n+    let uint opt_level = if (opt_present(match, \"O\")) {\n         if (opt_present(match, \"OptLevel\")) {\n             log_err \"error: -O and --OptLevel both provided\";\n             fail;\n         }\n-    }\n-\n-    if (opt_present(match, \"OptLevel\")) {\n-        auto opt = getopts::opt_maybe_str(match, \"OptLevel\");\n-        alt (opt) {\n-            case (some[str](?s)) {\n-                alt (s) {\n-                    case (\"0\") { optLevel = 0u; }\n-                    case (\"1\") { optLevel = 1u; }\n-                    case (\"2\") { optLevel = 2u; }\n-                    case (\"3\") { optLevel = 3u; }\n-                    case (_) {\n-                        log_err \"error: optimization level needs to be between 0-3\";\n-                        fail;\n-                    }\n-                }\n-            }\n-            case (none[str]) {\n-                log_err \"error: expected optimization level after --OptLevel=\";\n-                fail;\n+        2u\n+    } else if (opt_present(match, \"OptLevel\")) {\n+        alt (getopts::opt_str(match, \"OptLevel\")) {\n+            case (\"0\") { 0u }\n+            case (\"1\") { 1u }\n+            case (\"2\") { 2u }\n+            case (\"3\") { 3u }\n+            case (_) {\n+                log_err \"error: optimization level needs to be between 0-3\";\n+                fail\n             }\n         }\n-    }\n+    } else {\n+        0u\n+    };\n \n-    auto sysroot;\n-    alt (sysroot_opt) {\n-        case (none[str]) { sysroot = get_default_sysroot(binary); }\n-        case (some[str](?s)) { sysroot = s; }\n-    }\n+    auto sysroot = alt (sysroot_opt) {\n+        case (none[str]) { get_default_sysroot(binary) }\n+        case (some[str](?s)) { s }\n+    };\n \n     let @session::options sopts =\n         @rec(shared = shared,\n-             optimize = optLevel,\n+             optimize = opt_level,\n              debuginfo = debuginfo,\n              verify = verify,\n              run_typestate = run_typestate,"}]}