{"sha": "81ac99f60a3b847aa2b566af54e8ffa0b3b1a147", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYWM5OWY2MGEzYjg0N2FhMmI1NjZhZjU0ZThmZmEwYjNiMWExNDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-12T10:45:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-12T10:45:18Z"}, "message": "Simplify code", "tree": {"sha": "95266ee12845ad26c6d327fa84cd688aa43932ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95266ee12845ad26c6d327fa84cd688aa43932ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81ac99f60a3b847aa2b566af54e8ffa0b3b1a147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81ac99f60a3b847aa2b566af54e8ffa0b3b1a147", "html_url": "https://github.com/rust-lang/rust/commit/81ac99f60a3b847aa2b566af54e8ffa0b3b1a147", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81ac99f60a3b847aa2b566af54e8ffa0b3b1a147/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73b874157ccb953b30b0a8b4d7a97dcd172ca98", "url": "https://api.github.com/repos/rust-lang/rust/commits/f73b874157ccb953b30b0a8b4d7a97dcd172ca98", "html_url": "https://github.com/rust-lang/rust/commit/f73b874157ccb953b30b0a8b4d7a97dcd172ca98"}], "stats": {"total": 51, "additions": 23, "deletions": 28}, "files": [{"sha": "2661c753e22c2ef5255029ae0310686a76c3f6c6", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/81ac99f60a3b847aa2b566af54e8ffa0b3b1a147/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ac99f60a3b847aa2b566af54e8ffa0b3b1a147/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=81ac99f60a3b847aa2b566af54e8ffa0b3b1a147", "patch": "@@ -14,16 +14,15 @@ use crate::{\n \n impl ast::Comment {\n     pub fn kind(&self) -> CommentKind {\n-        kind_by_prefix(self.text())\n+        CommentKind::from_text(self.text())\n     }\n \n     pub fn prefix(&self) -> &'static str {\n-        for (prefix, k) in COMMENT_PREFIX_TO_KIND.iter() {\n-            if *k == self.kind() && self.text().starts_with(prefix) {\n-                return prefix;\n-            }\n-        }\n-        unreachable!()\n+        let &(prefix, _kind) = CommentKind::BY_PREFIX\n+            .iter()\n+            .find(|&(prefix, kind)| self.kind() == *kind && self.text().starts_with(prefix))\n+            .unwrap();\n+        prefix\n     }\n }\n \n@@ -55,29 +54,25 @@ pub enum CommentPlacement {\n     Outer,\n }\n \n-const COMMENT_PREFIX_TO_KIND: &[(&str, CommentKind)] = {\n-    use {CommentPlacement::*, CommentShape::*};\n-    &[\n-        (\"////\", CommentKind { shape: Line, doc: None }),\n-        (\"///\", CommentKind { shape: Line, doc: Some(Outer) }),\n-        (\"//!\", CommentKind { shape: Line, doc: Some(Inner) }),\n-        (\"/**\", CommentKind { shape: Block, doc: Some(Outer) }),\n-        (\"/*!\", CommentKind { shape: Block, doc: Some(Inner) }),\n-        (\"//\", CommentKind { shape: Line, doc: None }),\n-        (\"/*\", CommentKind { shape: Block, doc: None }),\n-    ]\n-};\n+impl CommentKind {\n+    const BY_PREFIX: [(&'static str, CommentKind); 8] = [\n+        (\"/**/\", CommentKind { shape: CommentShape::Block, doc: None }),\n+        (\"////\", CommentKind { shape: CommentShape::Line, doc: None }),\n+        (\"///\", CommentKind { shape: CommentShape::Line, doc: Some(CommentPlacement::Outer) }),\n+        (\"//!\", CommentKind { shape: CommentShape::Line, doc: Some(CommentPlacement::Inner) }),\n+        (\"/**\", CommentKind { shape: CommentShape::Block, doc: Some(CommentPlacement::Outer) }),\n+        (\"/*!\", CommentKind { shape: CommentShape::Block, doc: Some(CommentPlacement::Inner) }),\n+        (\"//\", CommentKind { shape: CommentShape::Line, doc: None }),\n+        (\"/*\", CommentKind { shape: CommentShape::Block, doc: None }),\n+    ];\n \n-fn kind_by_prefix(text: &str) -> CommentKind {\n-    if text == \"/**/\" {\n-        return CommentKind { shape: CommentShape::Block, doc: None };\n-    }\n-    for (prefix, kind) in COMMENT_PREFIX_TO_KIND.iter() {\n-        if text.starts_with(prefix) {\n-            return *kind;\n-        }\n+    pub(crate) fn from_text(text: &str) -> CommentKind {\n+        let &(_prefix, kind) = CommentKind::BY_PREFIX\n+            .iter()\n+            .find(|&(prefix, _kind)| text.starts_with(prefix))\n+            .unwrap();\n+        kind\n     }\n-    panic!(\"bad comment text: {:?}\", text)\n }\n \n impl ast::Whitespace {"}]}