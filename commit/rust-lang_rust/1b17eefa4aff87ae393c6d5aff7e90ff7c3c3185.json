{"sha": "1b17eefa4aff87ae393c6d5aff7e90ff7c3c3185", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMTdlZWZhNGFmZjg3YWUzOTNjNmQ1YWZmN2U5MGZmN2MzYzMxODU=", "commit": {"author": {"name": "Jonathan Reem", "email": "jonathan.reem@gmail.com", "date": "2014-11-23T00:06:21Z"}, "committer": {"name": "Jonathan Reem", "email": "jonathan.reem@gmail.com", "date": "2014-11-23T00:06:21Z"}, "message": "Any: use plain transmute instead of transmute_copy for downcasting.\n\ntransmute_copy is no longer needed and is just slow.", "tree": {"sha": "b7a247b8ed039d5c83095b8b5f16106a7cb3e7a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7a247b8ed039d5c83095b8b5f16106a7cb3e7a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b17eefa4aff87ae393c6d5aff7e90ff7c3c3185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b17eefa4aff87ae393c6d5aff7e90ff7c3c3185", "html_url": "https://github.com/rust-lang/rust/commit/1b17eefa4aff87ae393c6d5aff7e90ff7c3c3185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b17eefa4aff87ae393c6d5aff7e90ff7c3c3185/comments", "author": {"login": "reem", "id": 4745181, "node_id": "MDQ6VXNlcjQ3NDUxODE=", "avatar_url": "https://avatars.githubusercontent.com/u/4745181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reem", "html_url": "https://github.com/reem", "followers_url": "https://api.github.com/users/reem/followers", "following_url": "https://api.github.com/users/reem/following{/other_user}", "gists_url": "https://api.github.com/users/reem/gists{/gist_id}", "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reem/subscriptions", "organizations_url": "https://api.github.com/users/reem/orgs", "repos_url": "https://api.github.com/users/reem/repos", "events_url": "https://api.github.com/users/reem/events{/privacy}", "received_events_url": "https://api.github.com/users/reem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reem", "id": 4745181, "node_id": "MDQ6VXNlcjQ3NDUxODE=", "avatar_url": "https://avatars.githubusercontent.com/u/4745181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reem", "html_url": "https://github.com/reem", "followers_url": "https://api.github.com/users/reem/followers", "following_url": "https://api.github.com/users/reem/following{/other_user}", "gists_url": "https://api.github.com/users/reem/gists{/gist_id}", "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reem/subscriptions", "organizations_url": "https://api.github.com/users/reem/orgs", "repos_url": "https://api.github.com/users/reem/repos", "events_url": "https://api.github.com/users/reem/events{/privacy}", "received_events_url": "https://api.github.com/users/reem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d0a29061443852cae070b27d51de7cc69bbf293", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0a29061443852cae070b27d51de7cc69bbf293", "html_url": "https://github.com/rust-lang/rust/commit/0d0a29061443852cae070b27d51de7cc69bbf293"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "000dda59e3ddaeb3e3e38d095abdda7c8b9794e3", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b17eefa4aff87ae393c6d5aff7e90ff7c3c3185/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b17eefa4aff87ae393c6d5aff7e90ff7c3c3185/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=1b17eefa4aff87ae393c6d5aff7e90ff7c3c3185", "patch": "@@ -15,7 +15,6 @@ use core::clone::Clone;\n use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n use core::default::Default;\n use core::fmt;\n-use core::intrinsics;\n use core::kinds::Sized;\n use core::mem;\n use core::option::Option;\n@@ -104,17 +103,14 @@ pub trait BoxAny {\n }\n \n #[stable]\n-impl BoxAny for Box<Any+'static> {\n+impl BoxAny for Box<Any> {\n     #[inline]\n-    fn downcast<T: 'static>(self) -> Result<Box<T>, Box<Any+'static>> {\n+    fn downcast<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object\n                 let to: TraitObject =\n-                    *mem::transmute::<&Box<Any>, &TraitObject>(&self);\n-\n-                // Prevent destructor on self being run\n-                intrinsics::forget(self);\n+                    mem::transmute::<Box<Any>, TraitObject>(self);\n \n                 // Extract the data pointer\n                 Ok(mem::transmute(to.data))"}, {"sha": "ebd6fab34e9b519e1a1799e311c9c53a17ca1b81", "filename": "src/libcore/any.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b17eefa4aff87ae393c6d5aff7e90ff7c3c3185/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b17eefa4aff87ae393c6d5aff7e90ff7c3c3185/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=1b17eefa4aff87ae393c6d5aff7e90ff7c3c3185", "patch": "@@ -71,7 +71,7 @@\n \n #![stable]\n \n-use mem::{transmute, transmute_copy};\n+use mem::{transmute};\n use option::{Option, Some, None};\n use raw::TraitObject;\n use intrinsics::TypeId;\n@@ -134,7 +134,7 @@ impl<'a> AnyRefExt<'a> for &'a Any {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object\n-                let to: TraitObject = transmute_copy(&self);\n+                let to: TraitObject = transmute(self);\n \n                 // Extract the data pointer\n                 Some(transmute(to.data))\n@@ -162,7 +162,7 @@ impl<'a> AnyMutRefExt<'a> for &'a mut Any {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object\n-                let to: TraitObject = transmute_copy(&self);\n+                let to: TraitObject = transmute(self);\n \n                 // Extract the data pointer\n                 Some(transmute(to.data))"}]}