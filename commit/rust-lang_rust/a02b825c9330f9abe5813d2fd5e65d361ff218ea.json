{"sha": "a02b825c9330f9abe5813d2fd5e65d361ff218ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMmI4MjVjOTMzMGY5YWJlNTgxM2QyZmQ1ZTY1ZDM2MWZmMjE4ZWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-31T14:10:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-31T14:10:34Z"}, "message": "Rollup merge of #58828 - Centril:deny-elided_lifetimes_in_paths-libstd, r=oli-obk\n\nlibstd: deny(elided_lifetimes_in_paths)\n\nr? @oli-obk", "tree": {"sha": "94f78e617a1bdc74f54596183e565fe3b0b5c996", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94f78e617a1bdc74f54596183e565fe3b0b5c996"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a02b825c9330f9abe5813d2fd5e65d361ff218ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcoMpaCRBK7hj4Ov3rIwAAdHIIACyngR4KPCHUDb6yl/toJ4/0\npjSdSczZtmvzO2Y3DS88lq2lkYzCqzqMXHoCYp/DEYXhZYXfJx4BcxzquW4hfxH8\nrAGcLtdlexN1STi+1WwlYzY5EHhm20n82qjqVOo+D9LNCWWlBvYbAFVhNOA9NqMQ\nYn8kA9ID1U33RtnalCQAZN40kUKGimEdI5Euzk5ZBNolrSjWk7kfwwPZbIMRGkca\nbtgIlNb4KmkSAsBdMsyFZ/875mHEhFoKj+k4pwJaZ86t1IdDjSf/0+rUcpeWHVS/\nqK6a0YqitofB3Q8+ucpHFJOM6BN0GYAHXi3Do8PyB2/06NGAN84fNFCqgMDJSaA=\n=f/rk\n-----END PGP SIGNATURE-----\n", "payload": "tree 94f78e617a1bdc74f54596183e565fe3b0b5c996\nparent cee58fdc12bea8cc373366bd84fc786277729b1c\nparent 1d9508a33a3ff16355ad76c356c572cb67b4784f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1554041434 +0200\ncommitter GitHub <noreply@github.com> 1554041434 +0200\n\nRollup merge of #58828 - Centril:deny-elided_lifetimes_in_paths-libstd, r=oli-obk\n\nlibstd: deny(elided_lifetimes_in_paths)\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a02b825c9330f9abe5813d2fd5e65d361ff218ea", "html_url": "https://github.com/rust-lang/rust/commit/a02b825c9330f9abe5813d2fd5e65d361ff218ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a02b825c9330f9abe5813d2fd5e65d361ff218ea/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cee58fdc12bea8cc373366bd84fc786277729b1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cee58fdc12bea8cc373366bd84fc786277729b1c", "html_url": "https://github.com/rust-lang/rust/commit/cee58fdc12bea8cc373366bd84fc786277729b1c"}, {"sha": "1d9508a33a3ff16355ad76c356c572cb67b4784f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9508a33a3ff16355ad76c356c572cb67b4784f", "html_url": "https://github.com/rust-lang/rust/commit/1d9508a33a3ff16355ad76c356c572cb67b4784f"}], "stats": {"total": 837, "additions": 422, "deletions": 415}, "files": [{"sha": "ac3cfde47b5202033e8be90378258ed6a7183043", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -534,7 +534,7 @@ fn search_hashed_nonempty_mut<K, V, M, F>(table: M, hash: SafeHash, mut is_match\n     }\n }\n \n-fn pop_internal<K, V>(starting_bucket: FullBucketMut<K, V>)\n+fn pop_internal<K, V>(starting_bucket: FullBucketMut<'_, K, V>)\n     -> (K, V, &mut RawTable<K, V>)\n {\n     let (empty, retkey, retval) = starting_bucket.take();\n@@ -759,7 +759,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn keys(&self) -> Keys<K, V> {\n+    pub fn keys(&self) -> Keys<'_, K, V> {\n         Keys { inner: self.iter() }\n     }\n \n@@ -781,7 +781,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn values(&self) -> Values<K, V> {\n+    pub fn values(&self) -> Values<'_, K, V> {\n         Values { inner: self.iter() }\n     }\n \n@@ -808,7 +808,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// }\n     /// ```\n     #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n-    pub fn values_mut(&mut self) -> ValuesMut<K, V> {\n+    pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {\n         ValuesMut { inner: self.iter_mut() }\n     }\n \n@@ -830,7 +830,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<K, V> {\n+    pub fn iter(&self) -> Iter<'_, K, V> {\n         Iter { inner: self.table.iter() }\n     }\n \n@@ -858,7 +858,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter_mut(&mut self) -> IterMut<K, V> {\n+    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {\n         IterMut { inner: self.table.iter_mut() }\n     }\n \n@@ -918,7 +918,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n-    pub fn drain(&mut self) -> Drain<K, V> {\n+    pub fn drain(&mut self) -> Drain<'_, K, V> {\n         Drain { inner: self.table.drain() }\n     }\n \n@@ -1270,7 +1270,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// assert_eq!(letters.get(&'y'), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn entry(&mut self, key: K) -> Entry<K, V> {\n+    pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {\n         // Gotta resize now.\n         self.reserve(1);\n         let hash = self.make_hash(&key);\n@@ -1571,7 +1571,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// are free to assume this doesn't happen (within the limits of memory-safety).\n     #[inline(always)]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n-    pub fn raw_entry_mut(&mut self) -> RawEntryBuilderMut<K, V, S> {\n+    pub fn raw_entry_mut(&mut self) -> RawEntryBuilderMut<'_, K, V, S> {\n         self.reserve(1);\n         RawEntryBuilderMut { map: self }\n     }\n@@ -1592,7 +1592,7 @@ impl<K, V, S> HashMap<K, V, S>\n     ///\n     /// Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n-    pub fn raw_entry(&self) -> RawEntryBuilder<K, V, S> {\n+    pub fn raw_entry(&self) -> RawEntryBuilder<'_, K, V, S> {\n         RawEntryBuilder { map: self }\n     }\n }\n@@ -1626,7 +1626,7 @@ impl<K, V, S> Debug for HashMap<K, V, S>\n           V: Debug,\n           S: BuildHasher\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_map().entries(self.iter()).finish()\n     }\n }\n@@ -1683,7 +1683,7 @@ impl<K, V> Clone for Iter<'_, K, V> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<K: Debug, V: Debug> fmt::Debug for Iter<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list()\n             .entries(self.clone())\n             .finish()\n@@ -1736,7 +1736,7 @@ impl<K, V> Clone for Keys<'_, K, V> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<K: Debug, V> fmt::Debug for Keys<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list()\n             .entries(self.clone())\n             .finish()\n@@ -1765,7 +1765,7 @@ impl<K, V> Clone for Values<'_, K, V> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<K, V: Debug> fmt::Debug for Values<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list()\n             .entries(self.clone())\n             .finish()\n@@ -2244,15 +2244,15 @@ impl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<K, V, S> Debug for RawEntryBuilderMut<'_, K, V, S> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RawEntryBuilder\")\n          .finish()\n     }\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<K: Debug, V: Debug, S> Debug for RawEntryMut<'_, K, V, S> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             RawEntryMut::Vacant(ref v) => {\n                 f.debug_tuple(\"RawEntry\")\n@@ -2270,7 +2270,7 @@ impl<K: Debug, V: Debug, S> Debug for RawEntryMut<'_, K, V, S> {\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<K: Debug, V: Debug> Debug for RawOccupiedEntryMut<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RawOccupiedEntryMut\")\n          .field(\"key\", self.key())\n          .field(\"value\", self.get())\n@@ -2280,15 +2280,15 @@ impl<K: Debug, V: Debug> Debug for RawOccupiedEntryMut<'_, K, V> {\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<K, V, S> Debug for RawVacantEntryMut<'_, K, V, S> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RawVacantEntryMut\")\n          .finish()\n     }\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<K, V, S> Debug for RawEntryBuilder<'_, K, V, S> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RawEntryBuilder\")\n          .finish()\n     }\n@@ -2315,7 +2315,7 @@ pub enum Entry<'a, K: 'a, V: 'a> {\n \n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n impl<K: Debug, V: Debug> Debug for Entry<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             Vacant(ref v) => {\n                 f.debug_tuple(\"Entry\")\n@@ -2348,7 +2348,7 @@ unsafe impl<'a, K: 'a + Sync, V: 'a + Sync> Sync for OccupiedEntry<'a, K, V> {}\n \n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n impl<K: Debug, V: Debug> Debug for OccupiedEntry<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"OccupiedEntry\")\n             .field(\"key\", self.key())\n             .field(\"value\", self.get())\n@@ -2374,7 +2374,7 @@ unsafe impl<'a, K: 'a + Sync, V: 'a + Sync> Sync for VacantEntry<'a, K, V> {}\n \n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n impl<K: Debug, V> Debug for VacantEntry<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"VacantEntry\")\n             .field(self.key())\n             .finish()\n@@ -2489,7 +2489,7 @@ impl<K, V> fmt::Debug for IterMut<'_, K, V>\n     where K: fmt::Debug,\n           V: fmt::Debug,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list()\n             .entries(self.inner.iter())\n             .finish()\n@@ -2521,7 +2521,7 @@ impl<K, V> FusedIterator for IntoIter<K, V> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<K: Debug, V: Debug> fmt::Debug for IntoIter<K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list()\n             .entries(self.inner.iter())\n             .finish()\n@@ -2602,7 +2602,7 @@ impl<K, V> fmt::Debug for ValuesMut<'_, K, V>\n     where K: fmt::Debug,\n           V: fmt::Debug,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list()\n             .entries(self.inner.inner.iter())\n             .finish()\n@@ -2637,7 +2637,7 @@ impl<K, V> fmt::Debug for Drain<'_, K, V>\n     where K: fmt::Debug,\n           V: fmt::Debug,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list()\n             .entries(self.inner.iter())\n             .finish()\n@@ -3257,7 +3257,7 @@ impl Default for RandomState {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for RandomState {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"RandomState { .. }\")\n     }\n }"}, {"sha": "89d5b2ff30f9fa89c1755b0e80e2af344efab470", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -182,7 +182,7 @@ impl<T, S> HashSet<T, S> {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<'_, T> {\n         Iter { iter: self.map.keys() }\n     }\n \n@@ -239,7 +239,7 @@ impl<T, S> HashSet<T, S> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n-    pub fn drain(&mut self) -> Drain<T> {\n+    pub fn drain(&mut self) -> Drain<'_, T> {\n         Drain { iter: self.map.drain() }\n     }\n \n@@ -801,7 +801,7 @@ impl<T, S> fmt::Debug for HashSet<T, S>\n     where T: Eq + Hash + fmt::Debug,\n           S: BuildHasher\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_set().entries(self.iter()).finish()\n     }\n }\n@@ -1135,7 +1135,7 @@ impl<K> FusedIterator for Iter<'_, K> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<K: fmt::Debug> fmt::Debug for Iter<'_, K> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n }\n@@ -1162,7 +1162,7 @@ impl<K> FusedIterator for IntoIter<K> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<K: fmt::Debug> fmt::Debug for IntoIter<K> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let entries_iter = self.iter\n             .inner\n             .iter()\n@@ -1193,7 +1193,7 @@ impl<K> FusedIterator for Drain<'_, K> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<K: fmt::Debug> fmt::Debug for Drain<'_, K> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let entries_iter = self.iter\n             .inner\n             .iter()\n@@ -1236,7 +1236,7 @@ impl<T, S> fmt::Debug for Intersection<'_, T, S>\n     where T: fmt::Debug + Eq + Hash,\n           S: BuildHasher\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n }\n@@ -1289,7 +1289,7 @@ impl<T, S> fmt::Debug for Difference<'_, T, S>\n     where T: fmt::Debug + Eq + Hash,\n           S: BuildHasher\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n }\n@@ -1328,7 +1328,7 @@ impl<T, S> fmt::Debug for SymmetricDifference<'_, T, S>\n     where T: fmt::Debug + Eq + Hash,\n           S: BuildHasher\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n }\n@@ -1352,7 +1352,7 @@ impl<T, S> fmt::Debug for Union<'_, T, S>\n     where T: fmt::Debug + Eq + Hash,\n           S: BuildHasher\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n }"}, {"sha": "2113b448910abaf713996960ee22929e90c16ea7", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -772,21 +772,21 @@ impl<K, V> RawTable<K, V> {\n         self.size\n     }\n \n-    fn raw_buckets(&self) -> RawBuckets<K, V> {\n+    fn raw_buckets(&self) -> RawBuckets<'_, K, V> {\n         RawBuckets {\n             raw: self.raw_bucket_at(0),\n             elems_left: self.size,\n             marker: marker::PhantomData,\n         }\n     }\n \n-    pub fn iter(&self) -> Iter<K, V> {\n+    pub fn iter(&self) -> Iter<'_, K, V> {\n         Iter {\n             iter: self.raw_buckets(),\n         }\n     }\n \n-    pub fn iter_mut(&mut self) -> IterMut<K, V> {\n+    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {\n         IterMut {\n             iter: self.raw_buckets(),\n             _marker: marker::PhantomData,\n@@ -806,7 +806,7 @@ impl<K, V> RawTable<K, V> {\n         }\n     }\n \n-    pub fn drain(&mut self) -> Drain<K, V> {\n+    pub fn drain(&mut self) -> Drain<'_, K, V> {\n         let RawBuckets { raw, elems_left, .. } = self.raw_buckets();\n         // Replace the marker regardless of lifetime bounds on parameters.\n         Drain {\n@@ -936,7 +936,7 @@ unsafe impl<K: Sync, V: Sync> Sync for IterMut<'_, K, V> {}\n unsafe impl<K: Send, V: Send> Send for IterMut<'_, K, V> {}\n \n impl<'a, K: 'a, V: 'a> IterMut<'a, K, V> {\n-    pub fn iter(&self) -> Iter<K, V> {\n+    pub fn iter(&self) -> Iter<'_, K, V> {\n         Iter {\n             iter: self.iter.clone(),\n         }\n@@ -953,7 +953,7 @@ unsafe impl<K: Sync, V: Sync> Sync for IntoIter<K, V> {}\n unsafe impl<K: Send, V: Send> Send for IntoIter<K, V> {}\n \n impl<K, V> IntoIter<K, V> {\n-    pub fn iter(&self) -> Iter<K, V> {\n+    pub fn iter(&self) -> Iter<'_, K, V> {\n         Iter {\n             iter: self.iter.clone(),\n         }\n@@ -971,7 +971,7 @@ unsafe impl<K: Sync, V: Sync> Sync for Drain<'_, K, V> {}\n unsafe impl<K: Send, V: Send> Send for Drain<'_, K, V> {}\n \n impl<'a, K, V> Drain<'a, K, V> {\n-    pub fn iter(&self) -> Iter<K, V> {\n+    pub fn iter(&self) -> Iter<'_, K, V> {\n         Iter {\n             iter: self.iter.clone(),\n         }"}, {"sha": "01b301cb43d54520fd1c3dcaba29278b47328fc0", "filename": "src/libstd/env.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -156,7 +156,7 @@ impl Iterator for Vars {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Vars {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Vars { .. }\")\n     }\n }\n@@ -170,7 +170,7 @@ impl Iterator for VarsOs {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for VarsOs {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"VarsOs { .. }\")\n     }\n }\n@@ -253,7 +253,7 @@ pub enum VarError {\n \n #[stable(feature = \"env\", since = \"1.0.0\")]\n impl fmt::Display for VarError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             VarError::NotPresent => write!(f, \"environment variable not found\"),\n             VarError::NotUnicode(ref s) => {\n@@ -387,7 +387,7 @@ pub struct SplitPaths<'a> { inner: os_imp::SplitPaths<'a> }\n /// }\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n-pub fn split_paths<T: AsRef<OsStr> + ?Sized>(unparsed: &T) -> SplitPaths {\n+pub fn split_paths<T: AsRef<OsStr> + ?Sized>(unparsed: &T) -> SplitPaths<'_> {\n     SplitPaths { inner: os_imp::split_paths(unparsed.as_ref()) }\n }\n \n@@ -400,7 +400,7 @@ impl<'a> Iterator for SplitPaths<'a> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for SplitPaths<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"SplitPaths { .. }\")\n     }\n }\n@@ -488,7 +488,7 @@ pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n \n #[stable(feature = \"env\", since = \"1.0.0\")]\n impl fmt::Display for JoinPathsError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.inner.fmt(f)\n     }\n }\n@@ -757,7 +757,7 @@ impl DoubleEndedIterator for Args {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Args {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Args\")\n             .field(\"inner\", &self.inner.inner.inner_debug())\n             .finish()\n@@ -790,7 +790,7 @@ impl DoubleEndedIterator for ArgsOs {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for ArgsOs {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"ArgsOs\")\n             .field(\"inner\", &self.inner.inner_debug())\n             .finish()"}, {"sha": "89051030f6683bc944f45a950d037c5272aa1651", "filename": "src/libstd/error.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -84,7 +84,7 @@ pub trait Error: Debug + Display {\n     /// }\n     ///\n     /// impl fmt::Display for SuperError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"SuperError is here!\")\n     ///     }\n     /// }\n@@ -103,7 +103,7 @@ pub trait Error: Debug + Display {\n     /// struct SuperErrorSideKick;\n     ///\n     /// impl fmt::Display for SuperErrorSideKick {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"SuperErrorSideKick is here!\")\n     ///     }\n     /// }\n@@ -149,7 +149,7 @@ pub trait Error: Debug + Display {\n     /// }\n     ///\n     /// impl fmt::Display for SuperError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"SuperError is here!\")\n     ///     }\n     /// }\n@@ -168,7 +168,7 @@ pub trait Error: Debug + Display {\n     /// struct SuperErrorSideKick;\n     ///\n     /// impl fmt::Display for SuperErrorSideKick {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"SuperErrorSideKick is here!\")\n     ///     }\n     /// }\n@@ -219,7 +219,7 @@ impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     /// struct AnError;\n     ///\n     /// impl fmt::Display for AnError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f , \"An error\")\n     ///     }\n     /// }\n@@ -256,7 +256,7 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     /// struct AnError;\n     ///\n     /// impl fmt::Display for AnError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f , \"An error\")\n     ///     }\n     /// }\n@@ -306,7 +306,7 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n         }\n \n         impl Display for StringError {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 Display::fmt(&self.0, f)\n             }\n         }\n@@ -686,13 +686,13 @@ impl dyn Error {\n     /// struct B(Option<Box<dyn Error + 'static>>);\n     ///\n     /// impl fmt::Display for A {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"A\")\n     ///     }\n     /// }\n     ///\n     /// impl fmt::Display for B {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"B\")\n     ///     }\n     /// }\n@@ -721,7 +721,7 @@ impl dyn Error {\n     /// [`source`]: trait.Error.html#method.source\n     #[unstable(feature = \"error_iter\", issue = \"58520\")]\n     #[inline]\n-    pub fn iter_chain(&self) -> ErrorIter {\n+    pub fn iter_chain(&self) -> ErrorIter<'_> {\n         ErrorIter {\n             current: Some(self),\n         }\n@@ -747,19 +747,19 @@ impl dyn Error {\n     /// struct C(Option<Box<dyn Error + 'static>>);\n     ///\n     /// impl fmt::Display for A {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"A\")\n     ///     }\n     /// }\n     ///\n     /// impl fmt::Display for B {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"B\")\n     ///     }\n     /// }\n     ///\n     /// impl fmt::Display for C {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"C\")\n     ///     }\n     /// }\n@@ -795,7 +795,7 @@ impl dyn Error {\n     /// [`source`]: trait.Error.html#method.source\n     #[inline]\n     #[unstable(feature = \"error_iter\", issue = \"58520\")]\n-    pub fn iter_sources(&self) -> ErrorIter {\n+    pub fn iter_sources(&self) -> ErrorIter<'_> {\n         ErrorIter {\n             current: self.source(),\n         }\n@@ -861,12 +861,12 @@ mod tests {\n     struct B;\n \n     impl fmt::Display for A {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             write!(f, \"A\")\n         }\n     }\n     impl fmt::Display for B {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             write!(f, \"B\")\n         }\n     }"}, {"sha": "f93583dff818f115329faf35ffae148466b742f6", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -628,7 +628,7 @@ impl ops::Deref for CString {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for CString {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&**self, f)\n     }\n }\n@@ -649,7 +649,7 @@ impl From<CString> for Vec<u8> {\n \n #[stable(feature = \"cstr_debug\", since = \"1.3.0\")]\n impl fmt::Debug for CStr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"\\\"\")?;\n         for byte in self.to_bytes().iter().flat_map(|&b| ascii::escape_default(b)) {\n             f.write_char(byte as char)?;\n@@ -847,7 +847,7 @@ impl Error for NulError {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for NulError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"nul byte found in provided data at position: {}\", self.0)\n     }\n }\n@@ -878,7 +878,7 @@ impl Error for FromBytesWithNulError {\n \n #[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n impl fmt::Display for FromBytesWithNulError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(self.description())?;\n         if let FromBytesWithNulErrorKind::InteriorNul(pos) = self.kind {\n             write!(f, \" at byte pos {}\", pos)?;\n@@ -917,7 +917,7 @@ impl Error for IntoStringError {\n \n #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n impl fmt::Display for IntoStringError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.description().fmt(f)\n     }\n }\n@@ -1208,11 +1208,11 @@ impl CStr {\n     ///                  .expect(\"CStr::from_bytes_with_nul failed\");\n     /// assert_eq!(\n     ///     c_str.to_string_lossy(),\n-    ///     Cow::Owned(String::from(\"Hello \ufffdWorld\")) as Cow<str>\n+    ///     Cow::Owned(String::from(\"Hello \ufffdWorld\")) as Cow<'_, str>\n     /// );\n     /// ```\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n-    pub fn to_string_lossy(&self) -> Cow<str> {\n+    pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         String::from_utf8_lossy(self.to_bytes())\n     }\n "}, {"sha": "01e7a57cd003fb1cd51021768c8c99164bfcd4d5", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -394,7 +394,7 @@ impl Default for OsString {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for OsString {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&**self, formatter)\n     }\n }\n@@ -563,7 +563,7 @@ impl OsStr {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn to_string_lossy(&self) -> Cow<str> {\n+    pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         self.inner.to_string_lossy()\n     }\n \n@@ -891,13 +891,13 @@ impl Hash for OsStr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for OsStr {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.inner, formatter)\n     }\n }\n \n impl OsStr {\n-    pub(crate) fn display(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    pub(crate) fn display(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.inner, formatter)\n     }\n }"}, {"sha": "705dc8f40b5a0b16973ad87e9957a4d451eb90c4", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -597,7 +597,7 @@ impl IntoInner<fs_imp::File> for File {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for File {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.inner.fmt(f)\n     }\n }\n@@ -1087,7 +1087,7 @@ impl Metadata {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Metadata {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Metadata\")\n             .field(\"file_type\", &self.file_type())\n             .field(\"is_dir\", &self.is_dir())\n@@ -1394,7 +1394,7 @@ impl DirEntry {\n \n #[stable(feature = \"dir_entry_debug\", since = \"1.13.0\")]\n impl fmt::Debug for DirEntry {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"DirEntry\")\n             .field(&self.path())\n             .finish()"}, {"sha": "3370a447fcc8e0fa06802351400157f2bc4dbf00", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -291,7 +291,7 @@ impl<R: Read> BufRead for BufReader<R> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<R> fmt::Debug for BufReader<R> where R: fmt::Debug {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt.debug_struct(\"BufReader\")\n             .field(\"reader\", &self.inner)\n             .field(\"buffer\", &format_args!(\"{}/{}\", self.cap - self.pos, self.buf.len()))\n@@ -631,7 +631,7 @@ impl<W: Write> Write for BufWriter<W> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W: Write> fmt::Debug for BufWriter<W> where W: fmt::Debug {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt.debug_struct(\"BufWriter\")\n             .field(\"writer\", &self.inner.as_ref().unwrap())\n             .field(\"buffer\", &format_args!(\"{}/{}\", self.buf.len(), self.buf.capacity()))\n@@ -739,7 +739,7 @@ impl<W: Send + fmt::Debug> error::Error for IntoInnerError<W> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W> fmt::Display for IntoInnerError<W> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.error().fmt(f)\n     }\n }\n@@ -981,7 +981,7 @@ impl<W: Write> Write for LineWriter<W> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W: Write> fmt::Debug for LineWriter<W> where W: fmt::Debug {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt.debug_struct(\"LineWriter\")\n             .field(\"writer\", &self.inner.inner)\n             .field(\"buffer\","}, {"sha": "c29a68e6f02b867cbb9d66f7fbcacbbbe395daac", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -59,7 +59,7 @@ pub struct Error {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.repr, f)\n     }\n }\n@@ -413,7 +413,7 @@ impl Error {\n     /// }\n     ///\n     /// impl Display for MyError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"MyError: {}\", &self.v)\n     ///     }\n     /// }\n@@ -512,7 +512,7 @@ impl Error {\n }\n \n impl fmt::Debug for Repr {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             Repr::Os(code) =>\n                 fmt.debug_struct(\"Os\")\n@@ -527,7 +527,7 @@ impl fmt::Debug for Repr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Error {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.repr {\n             Repr::Os(code) => {\n                 let detail = sys::os::error_string(code);\n@@ -612,7 +612,7 @@ mod test {\n         struct TestError;\n \n         impl fmt::Display for TestError {\n-            fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 Ok(())\n             }\n         }"}, {"sha": "0eac96fc39a4b1d2ae3bfd12701afeb646867ac0", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -58,7 +58,7 @@ impl<W: Write + ?Sized> Write for &mut W {\n     }\n \n     #[inline]\n-    fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {\n+    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {\n         (**self).write_fmt(fmt)\n     }\n }\n@@ -137,7 +137,7 @@ impl<W: Write + ?Sized> Write for Box<W> {\n     }\n \n     #[inline]\n-    fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {\n+    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {\n         (**self).write_fmt(fmt)\n     }\n }"}, {"sha": "1ce66b931df14d4e1c981dbf0c213297e8d576c6", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -917,7 +917,7 @@ pub struct IoVecMut<'a>(sys::io::IoVecMut<'a>);\n \n #[unstable(feature = \"iovec\", issue = \"58452\")]\n impl<'a> fmt::Debug for IoVecMut<'a> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.0.as_slice(), fmt)\n     }\n }\n@@ -964,7 +964,7 @@ pub struct IoVec<'a>(sys::io::IoVec<'a>);\n \n #[unstable(feature = \"iovec\", issue = \"58452\")]\n impl<'a> fmt::Debug for IoVec<'a> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.0.as_slice(), fmt)\n     }\n }\n@@ -1255,7 +1255,7 @@ pub trait Write {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<()> {\n+    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> Result<()> {\n         // Create a shim which translates a Write to a fmt::Write and saves\n         // off I/O errors. instead of discarding them\n         struct Adaptor<'a, T: ?Sized + 'a> {\n@@ -1906,7 +1906,7 @@ impl<T, U> Chain<T, U> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T: fmt::Debug, U: fmt::Debug> fmt::Debug for Chain<T, U> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Chain\")\n             .field(\"t\", &self.first)\n             .field(\"u\", &self.second)"}, {"sha": "0bbff5769ab82b24cac26b7b4d0923ea215558ff", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -255,7 +255,7 @@ impl Stdin {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn lock(&self) -> StdinLock {\n+    pub fn lock(&self) -> StdinLock<'_> {\n         StdinLock { inner: self.inner.lock().unwrap_or_else(|e| e.into_inner()) }\n     }\n \n@@ -295,7 +295,7 @@ impl Stdin {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Stdin {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Stdin { .. }\")\n     }\n }\n@@ -339,7 +339,7 @@ impl BufRead for StdinLock<'_> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for StdinLock<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"StdinLock { .. }\")\n     }\n }\n@@ -466,14 +466,14 @@ impl Stdout {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn lock(&self) -> StdoutLock {\n+    pub fn lock(&self) -> StdoutLock<'_> {\n         StdoutLock { inner: self.inner.lock().unwrap_or_else(|e| e.into_inner()) }\n     }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Stdout {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Stdout { .. }\")\n     }\n }\n@@ -489,7 +489,7 @@ impl Write for Stdout {\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         self.lock().write_all(buf)\n     }\n-    fn write_fmt(&mut self, args: fmt::Arguments) -> io::Result<()> {\n+    fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> io::Result<()> {\n         self.lock().write_fmt(args)\n     }\n }\n@@ -505,7 +505,7 @@ impl Write for StdoutLock<'_> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for StdoutLock<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"StdoutLock { .. }\")\n     }\n }\n@@ -619,14 +619,14 @@ impl Stderr {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn lock(&self) -> StderrLock {\n+    pub fn lock(&self) -> StderrLock<'_> {\n         StderrLock { inner: self.inner.lock().unwrap_or_else(|e| e.into_inner()) }\n     }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Stderr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Stderr { .. }\")\n     }\n }\n@@ -642,7 +642,7 @@ impl Write for Stderr {\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         self.lock().write_all(buf)\n     }\n-    fn write_fmt(&mut self, args: fmt::Arguments) -> io::Result<()> {\n+    fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> io::Result<()> {\n         self.lock().write_fmt(args)\n     }\n }\n@@ -658,7 +658,7 @@ impl Write for StderrLock<'_> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for StderrLock<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"StderrLock { .. }\")\n     }\n }\n@@ -720,7 +720,7 @@ pub fn set_print(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write +\n ///\n /// However, if the actual I/O causes an error, this function does panic.\n fn print_to<T>(\n-    args: fmt::Arguments,\n+    args: fmt::Arguments<'_>,\n     local_s: &'static LocalKey<RefCell<Option<Box<dyn Write+Send>>>>,\n     global_s: fn() -> T,\n     label: &str,\n@@ -749,7 +749,7 @@ where\n            issue = \"0\")]\n #[doc(hidden)]\n #[cfg(not(test))]\n-pub fn _print(args: fmt::Arguments) {\n+pub fn _print(args: fmt::Arguments<'_>) {\n     print_to(args, &LOCAL_STDOUT, stdout, \"stdout\");\n }\n \n@@ -758,7 +758,7 @@ pub fn _print(args: fmt::Arguments) {\n            issue = \"0\")]\n #[doc(hidden)]\n #[cfg(not(test))]\n-pub fn _eprint(args: fmt::Arguments) {\n+pub fn _eprint(args: fmt::Arguments<'_>) {\n     print_to(args, &LOCAL_STDERR, stderr, \"stderr\");\n }\n \n@@ -777,7 +777,7 @@ mod tests {\n     }\n     #[test]\n     fn stdoutlock_unwind_safe() {\n-        assert_unwind_safe::<StdoutLock>();\n+        assert_unwind_safe::<StdoutLock<'_>>();\n         assert_unwind_safe::<StdoutLock<'static>>();\n     }\n     #[test]\n@@ -786,7 +786,7 @@ mod tests {\n     }\n     #[test]\n     fn stderrlock_unwind_safe() {\n-        assert_unwind_safe::<StderrLock>();\n+        assert_unwind_safe::<StderrLock<'_>>();\n         assert_unwind_safe::<StderrLock<'static>>();\n     }\n "}, {"sha": "d2638be4e2db58c61737ce60b8f956a9a2e7564a", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -111,7 +111,7 @@ impl BufRead for Empty {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Empty {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Empty { .. }\")\n     }\n }\n@@ -169,7 +169,7 @@ impl Read for Repeat {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Repeat {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Repeat { .. }\")\n     }\n }\n@@ -217,7 +217,7 @@ impl Write for Sink {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Sink {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Sink { .. }\")\n     }\n }"}, {"sha": "d11dee8fc97077a23f2014464a0f3272da940fbb", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -211,7 +211,6 @@\n \n #![deny(rust_2018_idioms)]\n #![allow(explicit_outlives_requirements)]\n-#![allow(elided_lifetimes_in_paths)]\n \n // Tell the compiler to link to either panic_abort or panic_unwind\n #![needs_panic_runtime]"}, {"sha": "ec54d8a042a3c10cf7dfab90892b959f4f13c8f7", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -587,7 +587,7 @@ impl<'a> IntoInner<(*const c::sockaddr, c::socklen_t)> for &'a SocketAddr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for SocketAddr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             SocketAddr::V4(ref a) => a.fmt(f),\n             SocketAddr::V6(ref a) => a.fmt(f),\n@@ -597,28 +597,28 @@ impl fmt::Display for SocketAddr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for SocketAddrV4 {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}:{}\", self.ip(), self.port())\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for SocketAddrV4 {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self, fmt)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for SocketAddrV6 {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"[{}]:{}\", self.ip(), self.port())\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for SocketAddrV6 {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self, fmt)\n     }\n }"}, {"sha": "7f9f3b91a600b49c9e0c19c3d78ba346a5d9a9ec", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -658,7 +658,7 @@ impl Ipv4Addr {\n \n #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n impl fmt::Display for IpAddr {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             IpAddr::V4(ip) => ip.fmt(fmt),\n             IpAddr::V6(ip) => ip.fmt(fmt),\n@@ -682,15 +682,15 @@ impl From<Ipv6Addr> for IpAddr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Ipv4Addr {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let octets = self.octets();\n         write!(fmt, \"{}.{}.{}.{}\", octets[0], octets[1], octets[2], octets[3])\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for Ipv4Addr {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self, fmt)\n     }\n }\n@@ -1229,7 +1229,7 @@ impl Ipv6Addr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Ipv6Addr {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.segments() {\n             // We need special cases for :: and ::1, otherwise they're formatted\n             // as ::0.0.0.[01]\n@@ -1276,7 +1276,7 @@ impl fmt::Display for Ipv6Addr {\n                 let (zeros_at, zeros_len) = find_zero_slice(&self.segments());\n \n                 if zeros_len > 1 {\n-                    fn fmt_subslice(segments: &[u16], fmt: &mut fmt::Formatter) -> fmt::Result {\n+                    fn fmt_subslice(segments: &[u16], fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                         if !segments.is_empty() {\n                             write!(fmt, \"{:x}\", segments[0])?;\n                             for &seg in &segments[1..] {\n@@ -1301,7 +1301,7 @@ impl fmt::Display for Ipv6Addr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for Ipv6Addr {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self, fmt)\n     }\n }"}, {"sha": "5a76139530a46429dbf16f2d597bdd7bc88a58c9", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -28,7 +28,7 @@ impl<'a> Parser<'a> {\n \n     // Commit only if parser returns Some\n     fn read_atomically<T, F>(&mut self, cb: F) -> Option<T> where\n-        F: FnOnce(&mut Parser) -> Option<T>,\n+        F: FnOnce(&mut Parser<'_>) -> Option<T>,\n     {\n         let pos = self.pos;\n         let r = cb(self);\n@@ -40,18 +40,18 @@ impl<'a> Parser<'a> {\n \n     // Commit only if parser read till EOF\n     fn read_till_eof<T, F>(&mut self, cb: F) -> Option<T> where\n-        F: FnOnce(&mut Parser) -> Option<T>,\n+        F: FnOnce(&mut Parser<'_>) -> Option<T>,\n     {\n         self.read_atomically(move |p| {\n             cb(p).filter(|_| p.is_eof())\n         })\n     }\n \n     // Return result of first successful parser\n-    fn read_or<T>(&mut self, parsers: &mut [Box<dyn FnMut(&mut Parser) -> Option<T> + 'static>])\n+    fn read_or<T>(&mut self, parsers: &mut [Box<dyn FnMut(&mut Parser<'_>) -> Option<T> + 'static>])\n                -> Option<T> {\n         for pf in parsers {\n-            if let Some(r) = self.read_atomically(|p: &mut Parser| pf(p)) {\n+            if let Some(r) = self.read_atomically(|p: &mut Parser<'_>| pf(p)) {\n                 return Some(r);\n             }\n         }\n@@ -64,9 +64,9 @@ impl<'a> Parser<'a> {\n                                        pb: PB,\n                                        pc: PC)\n                                        -> Option<(A, B, C)> where\n-        PA: FnOnce(&mut Parser) -> Option<A>,\n-        PB: FnOnce(&mut Parser) -> Option<B>,\n-        PC: FnOnce(&mut Parser) -> Option<C>,\n+        PA: FnOnce(&mut Parser<'_>) -> Option<A>,\n+        PB: FnOnce(&mut Parser<'_>) -> Option<B>,\n+        PC: FnOnce(&mut Parser<'_>) -> Option<C>,\n     {\n         self.read_atomically(move |p| {\n             let a = pa(p);\n@@ -177,7 +177,7 @@ impl<'a> Parser<'a> {\n             Ipv6Addr::new(gs[0], gs[1], gs[2], gs[3], gs[4], gs[5], gs[6], gs[7])\n         }\n \n-        fn read_groups(p: &mut Parser, groups: &mut [u16; 8], limit: usize)\n+        fn read_groups(p: &mut Parser<'_>, groups: &mut [u16; 8], limit: usize)\n                        -> (usize, bool) {\n             let mut i = 0;\n             while i < limit {\n@@ -244,15 +244,15 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_ip_addr(&mut self) -> Option<IpAddr> {\n-        let ipv4_addr = |p: &mut Parser| p.read_ipv4_addr().map(IpAddr::V4);\n-        let ipv6_addr = |p: &mut Parser| p.read_ipv6_addr().map(IpAddr::V6);\n+        let ipv4_addr = |p: &mut Parser<'_>| p.read_ipv4_addr().map(IpAddr::V4);\n+        let ipv6_addr = |p: &mut Parser<'_>| p.read_ipv6_addr().map(IpAddr::V6);\n         self.read_or(&mut [Box::new(ipv4_addr), Box::new(ipv6_addr)])\n     }\n \n     fn read_socket_addr_v4(&mut self) -> Option<SocketAddrV4> {\n-        let ip_addr = |p: &mut Parser| p.read_ipv4_addr();\n-        let colon = |p: &mut Parser| p.read_given_char(':');\n-        let port = |p: &mut Parser| {\n+        let ip_addr = |p: &mut Parser<'_>| p.read_ipv4_addr();\n+        let colon = |p: &mut Parser<'_>| p.read_given_char(':');\n+        let port = |p: &mut Parser<'_>| {\n             p.read_number(10, 5, 0x10000).map(|n| n as u16)\n         };\n \n@@ -263,14 +263,14 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_socket_addr_v6(&mut self) -> Option<SocketAddrV6> {\n-        let ip_addr = |p: &mut Parser| {\n-            let open_br = |p: &mut Parser| p.read_given_char('[');\n-            let ip_addr = |p: &mut Parser| p.read_ipv6_addr();\n-            let clos_br = |p: &mut Parser| p.read_given_char(']');\n+        let ip_addr = |p: &mut Parser<'_>| {\n+            let open_br = |p: &mut Parser<'_>| p.read_given_char('[');\n+            let ip_addr = |p: &mut Parser<'_>| p.read_ipv6_addr();\n+            let clos_br = |p: &mut Parser<'_>| p.read_given_char(']');\n             p.read_seq_3(open_br, ip_addr, clos_br).map(|t| t.1)\n         };\n-        let colon = |p: &mut Parser| p.read_given_char(':');\n-        let port = |p: &mut Parser| {\n+        let colon = |p: &mut Parser<'_>| p.read_given_char(':');\n+        let port = |p: &mut Parser<'_>| {\n             p.read_number(10, 5, 0x10000).map(|n| n as u16)\n         };\n \n@@ -281,8 +281,8 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_socket_addr(&mut self) -> Option<SocketAddr> {\n-        let v4 = |p: &mut Parser| p.read_socket_addr_v4().map(SocketAddr::V4);\n-        let v6 = |p: &mut Parser| p.read_socket_addr_v6().map(SocketAddr::V6);\n+        let v4 = |p: &mut Parser<'_>| p.read_socket_addr_v4().map(SocketAddr::V4);\n+        let v6 = |p: &mut Parser<'_>| p.read_socket_addr_v6().map(SocketAddr::V6);\n         self.read_or(&mut [Box::new(v4), Box::new(v6)])\n     }\n }\n@@ -391,7 +391,7 @@ pub struct AddrParseError(());\n \n #[stable(feature = \"addr_parse_error_error\", since = \"1.4.0\")]\n impl fmt::Display for AddrParseError {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt.write_str(self.description())\n     }\n }"}, {"sha": "cb8928866cbce9024883ed771241ca10c05a4e97", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -626,7 +626,7 @@ impl IntoInner<net_imp::TcpStream> for TcpStream {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for TcpStream {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n@@ -771,7 +771,7 @@ impl TcpListener {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn incoming(&self) -> Incoming {\n+    pub fn incoming(&self) -> Incoming<'_> {\n         Incoming { listener: self }\n     }\n \n@@ -922,7 +922,7 @@ impl IntoInner<net_imp::TcpListener> for TcpListener {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for TcpListener {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }"}, {"sha": "d4187d2932b1289a78fefc7c3e6bfc323009e980", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -832,7 +832,7 @@ impl IntoInner<net_imp::UdpSocket> for UdpSocket {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for UdpSocket {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }"}, {"sha": "cc147d851de545fd1dd40d6a5308aeb5c9424f35", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -312,7 +312,7 @@ impl<R, F: FnOnce() -> R> FnOnce<()> for AssertUnwindSafe<F> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T: fmt::Debug> fmt::Debug for AssertUnwindSafe<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"AssertUnwindSafe\")\n             .field(&self.0)\n             .finish()"}, {"sha": "27b8a110ca71e7844843dde773c487d2dcd5b60e", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -51,7 +51,7 @@ extern {\n #[derive(Copy, Clone)]\n enum Hook {\n     Default,\n-    Custom(*mut (dyn Fn(&PanicInfo) + 'static + Sync + Send)),\n+    Custom(*mut (dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send)),\n }\n \n static HOOK_LOCK: RWLock = RWLock::new();\n@@ -91,7 +91,7 @@ static mut HOOK: Hook = Hook::Default;\n /// panic!(\"Normal panic\");\n /// ```\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-pub fn set_hook(hook: Box<dyn Fn(&PanicInfo) + 'static + Sync + Send>) {\n+pub fn set_hook(hook: Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>) {\n     if thread::panicking() {\n         panic!(\"cannot modify the panic hook from a panicking thread\");\n     }\n@@ -136,7 +136,7 @@ pub fn set_hook(hook: Box<dyn Fn(&PanicInfo) + 'static + Sync + Send>) {\n /// panic!(\"Normal panic\");\n /// ```\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-pub fn take_hook() -> Box<dyn Fn(&PanicInfo) + 'static + Sync + Send> {\n+pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n     if thread::panicking() {\n         panic!(\"cannot modify the panic hook from a panicking thread\");\n     }\n@@ -154,7 +154,7 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo) + 'static + Sync + Send> {\n     }\n }\n \n-fn default_hook(info: &PanicInfo) {\n+fn default_hook(info: &PanicInfo<'_>) {\n     #[cfg(feature = \"backtrace\")]\n     use crate::sys_common::backtrace;\n \n@@ -304,7 +304,7 @@ pub fn panicking() -> bool {\n #[cfg(not(test))]\n #[panic_handler]\n #[unwind(allowed)]\n-pub fn rust_begin_panic(info: &PanicInfo) -> ! {\n+pub fn rust_begin_panic(info: &PanicInfo<'_>) -> ! {\n     continue_panic_fmt(&info)\n }\n \n@@ -322,7 +322,7 @@ pub fn rust_begin_panic(info: &PanicInfo) -> ! {\n // otherwise avoid inlining because of it is cold path.\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n-pub fn begin_panic_fmt(msg: &fmt::Arguments,\n+pub fn begin_panic_fmt(msg: &fmt::Arguments<'_>,\n                        file_line_col: &(&'static str, u32, u32)) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { intrinsics::abort() }\n@@ -336,7 +336,7 @@ pub fn begin_panic_fmt(msg: &fmt::Arguments,\n     continue_panic_fmt(&info)\n }\n \n-fn continue_panic_fmt(info: &PanicInfo) -> ! {\n+fn continue_panic_fmt(info: &PanicInfo<'_>) -> ! {\n     struct PanicPayload<'a> {\n         inner: &'a fmt::Arguments<'a>,\n         string: Option<String>,\n@@ -441,7 +441,7 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n /// panics, panic hooks, and finally dispatching to the panic runtime to either\n /// abort or unwind.\n fn rust_panic_with_hook(payload: &mut dyn BoxMeUp,\n-                        message: Option<&fmt::Arguments>,\n+                        message: Option<&fmt::Arguments<'_>>,\n                         file_line_col: &(&str, u32, u32)) -> ! {\n     let (file, line, col) = *file_line_col;\n "}, {"sha": "71e82f0a9b02e3fe6b1652253e99f9d8f32083c2", "filename": "src/libstd/path.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -323,7 +323,7 @@ fn has_redox_scheme(s: &[u8]) -> bool {\n ////////////////////////////////////////////////////////////////////////////////\n \n /// Says whether the first byte after the prefix is a separator.\n-fn has_physical_root(s: &[u8], prefix: Option<Prefix>) -> bool {\n+fn has_physical_root(s: &[u8], prefix: Option<Prefix<'_>>) -> bool {\n     let path = if let Some(p) = prefix {\n         &s[p.len()..]\n     } else {\n@@ -630,11 +630,11 @@ pub struct Iter<'a> {\n \n #[stable(feature = \"path_components_debug\", since = \"1.13.0\")]\n impl fmt::Debug for Components<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         struct DebugHelper<'a>(&'a Path);\n \n         impl fmt::Debug for DebugHelper<'_> {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 f.debug_list()\n                     .entries(self.0.components())\n                     .finish()\n@@ -828,11 +828,11 @@ impl AsRef<OsStr> for Components<'_> {\n \n #[stable(feature = \"path_iter_debug\", since = \"1.13.0\")]\n impl fmt::Debug for Iter<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         struct DebugHelper<'a>(&'a Path);\n \n         impl fmt::Debug for DebugHelper<'_> {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 f.debug_list()\n                     .entries(self.0.iter())\n                     .finish()\n@@ -1559,7 +1559,7 @@ impl<P: AsRef<Path>> iter::Extend<P> for PathBuf {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for PathBuf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&**self, formatter)\n     }\n }\n@@ -1857,7 +1857,7 @@ impl Path {\n     /// Had `path` contained invalid unicode, the `to_string_lossy` call might\n     /// have returned `\"fo\ufffd.txt\"`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn to_string_lossy(&self) -> Cow<str> {\n+    pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         self.inner.to_string_lossy()\n     }\n \n@@ -1926,7 +1926,7 @@ impl Path {\n         !self.is_absolute()\n     }\n \n-    fn prefix(&self) -> Option<Prefix> {\n+    fn prefix(&self) -> Option<Prefix<'_>> {\n         self.components().prefix\n     }\n \n@@ -2007,7 +2007,7 @@ impl Path {\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     /// [`parent`]: struct.Path.html#method.parent\n     #[stable(feature = \"path_ancestors\", since = \"1.28.0\")]\n-    pub fn ancestors(&self) -> Ancestors {\n+    pub fn ancestors(&self) -> Ancestors<'_> {\n         Ancestors {\n             next: Some(&self),\n         }\n@@ -2305,7 +2305,7 @@ impl Path {\n     /// [`Component`]: enum.Component.html\n     /// [`CurDir`]: enum.Component.html#variant.CurDir\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn components(&self) -> Components {\n+    pub fn components(&self) -> Components<'_> {\n         let prefix = parse_prefix(self.as_os_str());\n         Components {\n             path: self.as_u8_slice(),\n@@ -2339,7 +2339,7 @@ impl Path {\n     /// assert_eq!(it.next(), None)\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter {\n+    pub fn iter(&self) -> Iter<'_> {\n         Iter { inner: self.components() }\n     }\n \n@@ -2358,7 +2358,7 @@ impl Path {\n     /// println!(\"{}\", path.display());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn display(&self) -> Display {\n+    pub fn display(&self) -> Display<'_> {\n         Display { path: self }\n     }\n \n@@ -2578,7 +2578,7 @@ impl AsRef<OsStr> for Path {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for Path {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.inner, formatter)\n     }\n }\n@@ -2610,14 +2610,14 @@ pub struct Display<'a> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for Display<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.path, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Display<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.path.inner.display(f)\n     }\n }\n@@ -2805,7 +2805,7 @@ impl_cmp_os_str!(Cow<'a, Path>, OsString);\n \n #[stable(since = \"1.7.0\", feature = \"strip_prefix\")]\n impl fmt::Display for StripPrefixError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.description().fmt(f)\n     }\n }\n@@ -2915,7 +2915,7 @@ mod tests {\n \n         {\n             let path: &Path = &pathbuf;\n-            let borrowed_cow_path: Cow<Path> = path.into();\n+            let borrowed_cow_path: Cow<'_, Path> = path.into();\n \n             assert_eq!(static_cow_path, borrowed_cow_path);\n         }\n@@ -4013,8 +4013,8 @@ mod tests {\n         let mut owned: PathBuf = PathBuf::new();\n         owned.push(\"foo\");\n         owned.push(\"bar\");\n-        let borrowed_cow: Cow<Path> = borrowed.into();\n-        let owned_cow: Cow<Path> = owned.clone().into();\n+        let borrowed_cow: Cow<'_, Path> = borrowed.into();\n+        let owned_cow: Cow<'_, Path> = owned.clone().into();\n \n         macro_rules! t {\n             ($($current:expr),+) => {"}, {"sha": "94fece10e0fbc2f15aea92fb0cceead04a7fd88c", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -204,10 +204,10 @@ mod prim_bool { }\n /// #![feature(never_type)]\n /// # use std::fmt;\n /// # trait Debug {\n-/// # fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;\n+/// # fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result;\n /// # }\n /// impl Debug for ! {\n-///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         *self\n ///     }\n /// }"}, {"sha": "e0c9b7cad86ca597e2730d770113ba766095aca9", "filename": "src/libstd/process.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -194,7 +194,7 @@ impl IntoInner<imp::Process> for Child {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Child {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Child\")\n             .field(\"stdin\", &self.stdin)\n             .field(\"stdout\", &self.stdout)\n@@ -246,7 +246,7 @@ impl FromInner<AnonPipe> for ChildStdin {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for ChildStdin {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"ChildStdin { .. }\")\n     }\n }\n@@ -293,7 +293,7 @@ impl FromInner<AnonPipe> for ChildStdout {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for ChildStdout {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"ChildStdout { .. }\")\n     }\n }\n@@ -340,7 +340,7 @@ impl FromInner<AnonPipe> for ChildStderr {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for ChildStderr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"ChildStderr { .. }\")\n     }\n }\n@@ -803,7 +803,7 @@ impl fmt::Debug for Command {\n     /// Format the program and arguments of a Command for display. Any\n     /// non-utf8 data is lossily converted using the utf8 replacement\n     /// character.\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.inner.fmt(f)\n     }\n }\n@@ -844,7 +844,7 @@ pub struct Output {\n // strings, otherwise it prints the byte sequence instead\n #[stable(feature = \"process_output_debug\", since = \"1.7.0\")]\n impl fmt::Debug for Output {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n \n         let stdout_utf8 = str::from_utf8(&self.stdout);\n         let stdout_debug: &dyn fmt::Debug = match stdout_utf8 {\n@@ -1002,7 +1002,7 @@ impl FromInner<imp::Stdio> for Stdio {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Stdio {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Stdio { .. }\")\n     }\n }\n@@ -1199,7 +1199,7 @@ impl FromInner<imp::ExitStatus> for ExitStatus {\n \n #[stable(feature = \"process\", since = \"1.0.0\")]\n impl fmt::Display for ExitStatus {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }"}, {"sha": "23ba63a61098dd0a9d634bb4961deefe1b134294", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -59,7 +59,7 @@ pub struct BarrierWaitResult(bool);\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Barrier {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Barrier { .. }\")\n     }\n }\n@@ -151,7 +151,7 @@ impl Barrier {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for BarrierWaitResult {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"BarrierWaitResult\")\n             .field(\"is_leader\", &self.is_leader())\n             .finish()"}, {"sha": "ffb9ce1c81a5356c0acf3fd4d930abbfd8027f63", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -589,7 +589,7 @@ impl Condvar {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Condvar {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Condvar { .. }\")\n     }\n }"}, {"sha": "bc32b8e47b31690c6d593e07981786d4f5317421", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -914,7 +914,7 @@ impl<T> Drop for Sender<T> {\n \n #[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for Sender<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Sender\").finish()\n     }\n }\n@@ -1044,7 +1044,7 @@ impl<T> Drop for SyncSender<T> {\n \n #[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for SyncSender<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SyncSender\").finish()\n     }\n }\n@@ -1463,7 +1463,7 @@ impl<T> Receiver<T> {\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<'_, T> {\n         Iter { rx: self }\n     }\n \n@@ -1506,7 +1506,7 @@ impl<T> Receiver<T> {\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     #[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n-    pub fn try_iter(&self) -> TryIter<T> {\n+    pub fn try_iter(&self) -> TryIter<'_, T> {\n         TryIter { rx: self }\n     }\n \n@@ -1636,21 +1636,21 @@ impl<T> Drop for Receiver<T> {\n \n #[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for Receiver<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Receiver\").finish()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Debug for SendError<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"SendError(..)\".fmt(f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Display for SendError<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"sending on a closed channel\".fmt(f)\n     }\n }\n@@ -1668,7 +1668,7 @@ impl<T: Send> error::Error for SendError<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Debug for TrySendError<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             TrySendError::Full(..) => \"Full(..)\".fmt(f),\n             TrySendError::Disconnected(..) => \"Disconnected(..)\".fmt(f),\n@@ -1678,7 +1678,7 @@ impl<T> fmt::Debug for TrySendError<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Display for TrySendError<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             TrySendError::Full(..) => {\n                 \"sending on a full channel\".fmt(f)\n@@ -1720,7 +1720,7 @@ impl<T> From<SendError<T>> for TrySendError<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for RecvError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"receiving on a closed channel\".fmt(f)\n     }\n }\n@@ -1739,7 +1739,7 @@ impl error::Error for RecvError {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for TryRecvError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             TryRecvError::Empty => {\n                 \"receiving on an empty channel\".fmt(f)\n@@ -1781,7 +1781,7 @@ impl From<RecvError> for TryRecvError {\n \n #[stable(feature = \"mpsc_recv_timeout_error\", since = \"1.15.0\")]\n impl fmt::Display for RecvTimeoutError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             RecvTimeoutError::Timeout => {\n                 \"timed out waiting on channel\".fmt(f)"}, {"sha": "d1b5f2deccc1c40e7194eeea8a509fa18e6c6f03", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -340,13 +340,13 @@ impl Iterator for Packets {\n }\n \n impl fmt::Debug for Select {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Select\").finish()\n     }\n }\n \n impl<T: Send> fmt::Debug for Handle<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Handle\").finish()\n     }\n }"}, {"sha": "cc70a62036590b4b514fdbd0639dbf93d64e6f74", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -78,7 +78,7 @@ impl<T> Packet<T> {\n     // In other case mutex data will be duplicated while cloning\n     // and that could cause problems on platforms where it is\n     // represented by opaque data structure\n-    pub fn postinit_lock(&self) -> MutexGuard<()> {\n+    pub fn postinit_lock(&self) -> MutexGuard<'_, ()> {\n         self.select_lock.lock().unwrap()\n     }\n \n@@ -89,7 +89,7 @@ impl<T> Packet<T> {\n     // This can only be called at channel-creation time\n     pub fn inherit_blocker(&self,\n                            token: Option<SignalToken>,\n-                           guard: MutexGuard<()>) {\n+                           guard: MutexGuard<'_, ()>) {\n         token.map(|token| {\n             assert_eq!(self.cnt.load(Ordering::SeqCst), 0);\n             assert_eq!(self.to_wake.load(Ordering::SeqCst), 0);"}, {"sha": "b2d9f4c6491e4026c8429cd6ffa11b0d57cdb64c", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -153,7 +153,7 @@ fn abort_selection<'a, T>(guard: &mut MutexGuard<'a , State<T>>) -> bool {\n }\n \n /// Wakes up a thread, dropping the lock at the correct time\n-fn wakeup<T>(token: SignalToken, guard: MutexGuard<State<T>>) {\n+fn wakeup<T>(token: SignalToken, guard: MutexGuard<'_, State<T>>) {\n     // We need to be careful to wake up the waiting thread *outside* of the mutex\n     // in case it incurs a context switch.\n     drop(guard);\n@@ -184,7 +184,7 @@ impl<T> Packet<T> {\n \n     // wait until a send slot is available, returning locked access to\n     // the channel state.\n-    fn acquire_send_slot(&self) -> MutexGuard<State<T>> {\n+    fn acquire_send_slot(&self) -> MutexGuard<'_, State<T>> {\n         let mut node = Node { token: None, next: ptr::null_mut() };\n         loop {\n             let mut guard = self.lock.lock().unwrap();\n@@ -316,7 +316,7 @@ impl<T> Packet<T> {\n     // * `waited` - flag if the receiver blocked to receive some data, or if it\n     //              just picked up some data on the way out\n     // * `guard` - the lock guard that is held over this channel's lock\n-    fn wakeup_senders(&self, waited: bool, mut guard: MutexGuard<State<T>>) {\n+    fn wakeup_senders(&self, waited: bool, mut guard: MutexGuard<'_, State<T>>) {\n         let pending_sender1: Option<SignalToken> = guard.queue.dequeue();\n \n         // If this is a no-buffer channel (cap == 0), then if we didn't wait we"}, {"sha": "11ac34fcb24f6c9097fda20e33d6e944d74a6b3c", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -215,7 +215,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// assert_eq!(*mutex.lock().unwrap(), 10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn lock(&self) -> LockResult<MutexGuard<T>> {\n+    pub fn lock(&self) -> LockResult<MutexGuard<'_, T>> {\n         unsafe {\n             self.inner.raw_lock();\n             MutexGuard::new(self)\n@@ -258,7 +258,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// assert_eq!(*mutex.lock().unwrap(), 10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn try_lock(&self) -> TryLockResult<MutexGuard<T>> {\n+    pub fn try_lock(&self) -> TryLockResult<MutexGuard<'_, T>> {\n         unsafe {\n             if self.inner.try_lock() {\n                 Ok(MutexGuard::new(self)?)\n@@ -391,7 +391,7 @@ impl<T: ?Sized + Default> Default for Mutex<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.try_lock() {\n             Ok(guard) => f.debug_struct(\"Mutex\").field(\"data\", &&*guard).finish(),\n             Err(TryLockError::Poisoned(err)) => {\n@@ -400,7 +400,9 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T> {\n             Err(TryLockError::WouldBlock) => {\n                 struct LockedPlaceholder;\n                 impl fmt::Debug for LockedPlaceholder {\n-                    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str(\"<locked>\") }\n+                    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                        f.write_str(\"<locked>\")\n+                    }\n                 }\n \n                 f.debug_struct(\"Mutex\").field(\"data\", &LockedPlaceholder).finish()\n@@ -449,14 +451,14 @@ impl<T: ?Sized> Drop for MutexGuard<'_, T> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for MutexGuard<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<T: ?Sized + fmt::Display> fmt::Display for MutexGuard<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         (**self).fmt(f)\n     }\n }"}, {"sha": "0c912494024170577ae855ba5a1f97812cdb0ac5", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -431,7 +431,7 @@ impl Once {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Once {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Once { .. }\")\n     }\n }"}, {"sha": "1299a74409560263edc6b5b3f7e71c8c6336b4fe", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -180,7 +180,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn read(&self) -> LockResult<RwLockReadGuard<T>> {\n+    pub fn read(&self) -> LockResult<RwLockReadGuard<'_, T>> {\n         unsafe {\n             self.inner.read();\n             RwLockReadGuard::new(self)\n@@ -219,7 +219,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn try_read(&self) -> TryLockResult<RwLockReadGuard<T>> {\n+    pub fn try_read(&self) -> TryLockResult<RwLockReadGuard<'_, T>> {\n         unsafe {\n             if self.inner.try_read() {\n                 Ok(RwLockReadGuard::new(self)?)\n@@ -262,7 +262,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn write(&self) -> LockResult<RwLockWriteGuard<T>> {\n+    pub fn write(&self) -> LockResult<RwLockWriteGuard<'_, T>> {\n         unsafe {\n             self.inner.write();\n             RwLockWriteGuard::new(self)\n@@ -301,7 +301,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn try_write(&self) -> TryLockResult<RwLockWriteGuard<T>> {\n+    pub fn try_write(&self) -> TryLockResult<RwLockWriteGuard<'_, T>> {\n         unsafe {\n             if self.inner.try_write() {\n                 Ok(RwLockWriteGuard::new(self)?)\n@@ -421,7 +421,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for RwLock<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.try_read() {\n             Ok(guard) => f.debug_struct(\"RwLock\").field(\"data\", &&*guard).finish(),\n             Err(TryLockError::Poisoned(err)) => {\n@@ -430,7 +430,9 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n             Err(TryLockError::WouldBlock) => {\n                 struct LockedPlaceholder;\n                 impl fmt::Debug for LockedPlaceholder {\n-                    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str(\"<locked>\") }\n+                    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                        f.write_str(\"<locked>\")\n+                    }\n                 }\n \n                 f.debug_struct(\"RwLock\").field(\"data\", &LockedPlaceholder).finish()\n@@ -481,7 +483,7 @@ impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T: fmt::Debug> fmt::Debug for RwLockReadGuard<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RwLockReadGuard\")\n             .field(\"lock\", &self.__lock)\n             .finish()\n@@ -490,14 +492,14 @@ impl<T: fmt::Debug> fmt::Debug for RwLockReadGuard<'_, T> {\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<T: ?Sized + fmt::Display> fmt::Display for RwLockReadGuard<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         (**self).fmt(f)\n     }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T: fmt::Debug> fmt::Debug for RwLockWriteGuard<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RwLockWriteGuard\")\n             .field(\"lock\", &self.__lock)\n             .finish()\n@@ -506,7 +508,7 @@ impl<T: fmt::Debug> fmt::Debug for RwLockWriteGuard<'_, T> {\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<T: ?Sized + fmt::Display> fmt::Display for RwLockWriteGuard<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         (**self).fmt(f)\n     }\n }"}, {"sha": "17719a29b6ed637f7a688720a56863e9fc819794", "filename": "src/libstd/sys/cloudabi/backtrace.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fcloudabi%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fcloudabi%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fbacktrace.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -24,7 +24,7 @@ impl Error for UnwindError {\n }\n \n impl fmt::Display for UnwindError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}: {:?}\", self.description(), self.0)\n     }\n }\n@@ -33,8 +33,9 @@ impl fmt::Display for UnwindError {\n                  // tracing\n pub fn unwind_backtrace(frames: &mut [Frame]) -> io::Result<(usize, BacktraceContext)> {\n     let mut cx = Context { idx: 0, frames };\n-    let result_unwind =\n-        unsafe { uw::_Unwind_Backtrace(trace_fn, &mut cx as *mut Context as *mut libc::c_void) };\n+    let result_unwind = unsafe {\n+        uw::_Unwind_Backtrace(trace_fn, &mut cx as *mut Context<'_> as *mut libc::c_void)\n+    };\n     // See libunwind:src/unwind/Backtrace.c for the return values.\n     // No, there is no doc.\n     match result_unwind {\n@@ -54,7 +55,7 @@ extern \"C\" fn trace_fn(\n     ctx: *mut uw::_Unwind_Context,\n     arg: *mut libc::c_void,\n ) -> uw::_Unwind_Reason_Code {\n-    let cx = unsafe { &mut *(arg as *mut Context) };\n+    let cx = unsafe { &mut *(arg as *mut Context<'_>) };\n     if cx.idx >= cx.frames.len() {\n         return uw::_URC_NORMAL_STOP;\n     }"}, {"sha": "ee045b8e51544967705eef2e809fac3917097142", "filename": "src/libstd/sys/cloudabi/shims/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -81,7 +81,7 @@ impl PartialEq for FilePermissions {\n impl Eq for FilePermissions {}\n \n impl fmt::Debug for FilePermissions {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -123,13 +123,13 @@ impl Hash for FileType {\n }\n \n impl fmt::Debug for FileType {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n \n impl fmt::Debug for ReadDir {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -234,7 +234,7 @@ impl DirBuilder {\n }\n \n impl fmt::Debug for File {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }"}, {"sha": "7cf23748e1bf024be4ded35f4759e39bbe38c08b", "filename": "src/libstd/sys/cloudabi/shims/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -97,7 +97,7 @@ impl TcpStream {\n }\n \n impl fmt::Debug for TcpStream {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -147,7 +147,7 @@ impl TcpListener {\n }\n \n impl fmt::Debug for TcpListener {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -281,7 +281,7 @@ impl UdpSocket {\n }\n \n impl fmt::Debug for UdpSocket {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }"}, {"sha": "944b9525b3b603aeb6c1d1ecb723745c217b5eb3", "filename": "src/libstd/sys/cloudabi/shims/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fos.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -34,7 +34,7 @@ pub fn unsetenv(_: &OsStr) -> io::Result<()> {\n \n pub struct SplitPaths<'a>(&'a Void);\n \n-pub fn split_paths(_unparsed: &OsStr) -> SplitPaths {\n+pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n }\n \n@@ -57,7 +57,7 @@ where\n }\n \n impl fmt::Display for JoinPathsError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"not supported on CloudABI yet\".fmt(f)\n     }\n }"}, {"sha": "e719b362cbf555a84c232d194d23604c1b740a6c", "filename": "src/libstd/sys/cloudabi/shims/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -71,7 +71,7 @@ impl From<File> for Stdio {\n }\n \n impl fmt::Debug for Command {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Ok(())\n     }\n }\n@@ -105,13 +105,13 @@ impl PartialEq for ExitStatus {\n impl Eq for ExitStatus {}\n \n impl fmt::Debug for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n \n impl fmt::Display for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }"}, {"sha": "13f34338fd33b2b7d620643ec8438b08e7882f70", "filename": "src/libstd/sys/redox/backtrace/tracing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -21,7 +21,7 @@ impl Error for UnwindError {\n }\n \n impl fmt::Display for UnwindError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}: {:?}\", self.description(), self.0)\n     }\n }\n@@ -37,7 +37,7 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n     };\n     let result_unwind = unsafe {\n         uw::_Unwind_Backtrace(trace_fn,\n-                              &mut cx as *mut Context\n+                              &mut cx as *mut Context<'_>\n                               as *mut libc::c_void)\n     };\n     // See libunwind:src/unwind/Backtrace.c for the return values.\n@@ -57,7 +57,7 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n \n extern fn trace_fn(ctx: *mut uw::_Unwind_Context,\n                    arg: *mut libc::c_void) -> uw::_Unwind_Reason_Code {\n-    let cx = unsafe { &mut *(arg as *mut Context) };\n+    let cx = unsafe { &mut *(arg as *mut Context<'_>) };\n     if cx.idx >= cx.frames.len() {\n         return uw::_URC_NORMAL_STOP;\n     }"}, {"sha": "096d0681959cd865f16c841d6b5e8942d5cda368", "filename": "src/libstd/sys/redox/ext/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -90,7 +90,7 @@ impl SocketAddr {\n }\n #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl fmt::Debug for SocketAddr {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"SocketAddr\")\n     }\n }\n@@ -114,7 +114,7 @@ pub struct UnixStream(FileDesc);\n \n #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl fmt::Debug for UnixStream {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut builder = fmt.debug_struct(\"UnixStream\");\n         builder.field(\"fd\", &self.0.raw());\n         if let Ok(addr) = self.local_addr() {\n@@ -503,7 +503,7 @@ pub struct UnixListener(FileDesc);\n \n #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl fmt::Debug for UnixListener {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut builder = fmt.debug_struct(\"UnixListener\");\n         builder.field(\"fd\", &self.0.raw());\n         if let Ok(addr) = self.local_addr() {"}, {"sha": "3ef9925705fb8777e4ece7bd482ad25e080c1157", "filename": "src/libstd/sys/redox/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -123,7 +123,7 @@ impl FromInner<u32> for FilePermissions {\n }\n \n impl fmt::Debug for ReadDir {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // This will only be called from std::fs::ReadDir, which will add a \"ReadDir()\" frame.\n         // Thus the result will be e g 'ReadDir(\"/home\")'\n         fmt::Debug::fmt(&*self.root, f)\n@@ -341,7 +341,7 @@ impl FromInner<usize> for File {\n }\n \n impl fmt::Debug for File {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut b = f.debug_struct(\"File\");\n         b.field(\"fd\", &self.0.raw());\n         if let Ok(path) = self.path() {"}, {"sha": "3ae201f698c2b0cb38f112cfdba33fcb37a98fdb", "filename": "src/libstd/sys/redox/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -58,7 +58,7 @@ pub struct SplitPaths<'a> {\n                     fn(&'a [u8]) -> PathBuf>,\n }\n \n-pub fn split_paths(unparsed: &OsStr) -> SplitPaths {\n+pub fn split_paths(unparsed: &OsStr) -> SplitPaths<'_> {\n     fn bytes_to_path(b: &[u8]) -> PathBuf {\n         PathBuf::from(<OsStr as OsStrExt>::from_bytes(b))\n     }\n@@ -97,7 +97,7 @@ pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n }\n \n impl fmt::Display for JoinPathsError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"path segment contains separator `:`\".fmt(f)\n     }\n }"}, {"sha": "b62d6c9878211ae95b7dee1a2a9b705bfa0beb3d", "filename": "src/libstd/sys/redox/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fpath.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -11,7 +11,7 @@ pub fn is_verbatim_sep(b: u8) -> bool {\n     b == b'/'\n }\n \n-pub fn parse_prefix(path: &OsStr) -> Option<Prefix> {\n+pub fn parse_prefix(path: &OsStr) -> Option<Prefix<'_>> {\n     if let Some(path_str) = path.to_str() {\n         if let Some(_i) = path_str.find(':') {\n             // FIXME: Redox specific prefix"}, {"sha": "8e6f50773abfe37ee1496d78ee9ece62b16446a7", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -492,7 +492,7 @@ impl ChildStdio {\n }\n \n impl fmt::Debug for Command {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}\", self.program)?;\n         for arg in &self.args {\n             write!(f, \" {:?}\", arg)?;\n@@ -542,7 +542,7 @@ impl From<i32> for ExitStatus {\n }\n \n impl fmt::Display for ExitStatus {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some(code) = self.code() {\n             write!(f, \"exit code: {}\", code)\n         } else {"}, {"sha": "da84ffb0423597494d15cf8ad318520c9a59474b", "filename": "src/libstd/sys/redox/syscall/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -38,13 +38,13 @@ impl Error {\n }\n \n impl fmt::Debug for Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(self.text())\n     }\n }\n \n impl fmt::Display for Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(self.text())\n     }\n }"}, {"sha": "081437459cc40d0ea32b736f03edca563308d224", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -151,7 +151,7 @@ impl Instant {\n }\n \n impl fmt::Debug for Instant {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Instant\")\n          .field(\"tv_sec\", &self.t.t.tv_sec)\n          .field(\"tv_nsec\", &self.t.t.tv_nsec)\n@@ -185,7 +185,7 @@ impl From<syscall::TimeSpec> for SystemTime {\n }\n \n impl fmt::Debug for SystemTime {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SystemTime\")\n          .field(\"tv_sec\", &self.t.t.tv_sec)\n          .field(\"tv_nsec\", &self.t.t.tv_nsec)"}, {"sha": "fa82e8ccf0588e5fb75cbcde967b26094a70a329", "filename": "src/libstd/sys/sgx/abi/tls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -84,7 +84,7 @@ impl Tls {\n         Tls { data: dup!((* * * * * * *) (Cell::new(ptr::null_mut()))) }\n     }\n \n-    pub unsafe fn activate(&self) -> ActiveTls {\n+    pub unsafe fn activate(&self) -> ActiveTls<'_> {\n         set_tls_ptr(self as *const Tls as _);\n         ActiveTls { tls: self }\n     }\n@@ -141,7 +141,7 @@ mod sync_bitset {\n         }\n \n         /// Not atomic.\n-        pub fn iter(&self) -> SyncBitsetIter {\n+        pub fn iter(&self) -> SyncBitsetIter<'_> {\n             SyncBitsetIter {\n                 iter: self.0.iter().enumerate().peekable(),\n                 elem_idx: 0,"}, {"sha": "ec9c30a3e4f9d0d94d32b0feab4be41d212d6323", "filename": "src/libstd/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -429,7 +429,7 @@ impl<T> UserRef<[T]> where [T]: UserSafe {\n     }\n \n     /// Returns an iterator over the slice.\n-    pub fn iter(&self) -> Iter<T>\n+    pub fn iter(&self) -> Iter<'_, T>\n         where T: UserSafe // FIXME: should be implied by [T]: UserSafe?\n     {\n         unsafe {\n@@ -438,7 +438,7 @@ impl<T> UserRef<[T]> where [T]: UserSafe {\n     }\n \n     /// Returns an iterator that allows modifying each value.\n-    pub fn iter_mut(&mut self) -> IterMut<T>\n+    pub fn iter_mut(&mut self) -> IterMut<'_, T>\n         where T: UserSafe // FIXME: should be implied by [T]: UserSafe?\n     {\n         unsafe {"}, {"sha": "326737a2418637369ac4fd7679ae2bb132c424fa", "filename": "src/libstd/sys/sgx/backtrace.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -23,16 +23,17 @@ impl Error for UnwindError {\n }\n \n impl fmt::Display for UnwindError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}: {:?}\", self.description(), self.0)\n     }\n }\n \n #[inline(never)] // this function call can be skipped it when tracing.\n pub fn unwind_backtrace(frames: &mut [Frame]) -> io::Result<(usize, BacktraceContext)> {\n     let mut cx = Context { idx: 0, frames };\n-    let result_unwind =\n-        unsafe { uw::_Unwind_Backtrace(trace_fn, &mut cx as *mut Context as *mut libc::c_void) };\n+    let result_unwind = unsafe {\n+        uw::_Unwind_Backtrace(trace_fn, &mut cx as *mut Context<'_> as *mut libc::c_void)\n+    };\n     // See libunwind:src/unwind/Backtrace.c for the return values.\n     // No, there is no doc.\n     let res = match result_unwind {\n@@ -53,7 +54,7 @@ extern \"C\" fn trace_fn(\n     ctx: *mut uw::_Unwind_Context,\n     arg: *mut libc::c_void,\n ) -> uw::_Unwind_Reason_Code {\n-    let cx = unsafe { &mut *(arg as *mut Context) };\n+    let cx = unsafe { &mut *(arg as *mut Context<'_>) };\n     if cx.idx >= cx.frames.len() {\n         return uw::_URC_NORMAL_STOP;\n     }"}, {"sha": "68c8e9356a89a7448d7e406a53662844eb0016f3", "filename": "src/libstd/sys/sgx/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -82,7 +82,7 @@ impl Eq for FilePermissions {\n }\n \n impl fmt::Debug for FilePermissions {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -125,13 +125,13 @@ impl Hash for FileType {\n }\n \n impl fmt::Debug for FileType {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n \n impl fmt::Debug for ReadDir {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -236,7 +236,7 @@ impl DirBuilder {\n }\n \n impl fmt::Debug for File {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }"}, {"sha": "10cc644a55ec6762e95b303915dfa9165d63b914", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -48,7 +48,7 @@ pub struct TcpStream {\n }\n \n impl fmt::Debug for TcpStream {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut res = f.debug_struct(\"TcpStream\");\n \n         if let Some(ref addr) = self.inner.local_addr {\n@@ -213,7 +213,7 @@ pub struct TcpListener {\n }\n \n impl fmt::Debug for TcpListener {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut res = f.debug_struct(\"TcpListener\");\n \n         if let Some(ref addr) = self.inner.local_addr {\n@@ -421,7 +421,7 @@ impl UdpSocket {\n }\n \n impl fmt::Debug for UdpSocket {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -438,7 +438,7 @@ impl error::Error for NonIpSockAddr {\n }\n \n impl fmt::Display for NonIpSockAddr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"Failed to convert address to SocketAddr: {}\", self.host)\n     }\n }"}, {"sha": "8b12c49edbaae0757843c8f8657cf832e616d6eb", "filename": "src/libstd/sys/sgx/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -37,7 +37,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n \n pub struct SplitPaths<'a>(&'a Void);\n \n-pub fn split_paths(_unparsed: &OsStr) -> SplitPaths {\n+pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n }\n \n@@ -58,7 +58,7 @@ pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>\n }\n \n impl fmt::Display for JoinPathsError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"not supported in SGX yet\".fmt(f)\n     }\n }"}, {"sha": "b5fd7e3ae6d1e88f637458ea44d58b05f6516650", "filename": "src/libstd/sys/sgx/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fpath.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -11,7 +11,7 @@ pub fn is_verbatim_sep(b: u8) -> bool {\n     b == b'/'\n }\n \n-pub fn parse_prefix(_: &OsStr) -> Option<Prefix> {\n+pub fn parse_prefix(_: &OsStr) -> Option<Prefix<'_>> {\n     None\n }\n "}, {"sha": "a02e009d95356d848608135cef3b69f1ebe1f183", "filename": "src/libstd/sys/sgx/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fprocess.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -73,7 +73,7 @@ impl From<File> for Stdio {\n }\n \n impl fmt::Debug for Command {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Ok(())\n     }\n }\n@@ -108,13 +108,13 @@ impl Eq for ExitStatus {\n }\n \n impl fmt::Debug for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n \n impl fmt::Display for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }"}, {"sha": "4cba36aa64dd53992605d567ca892d1c99b7961e", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -93,8 +93,8 @@ impl RWLock {\n     #[inline]\n     unsafe fn __read_unlock(\n         &self,\n-        mut rguard: SpinMutexGuard<WaitVariable<Option<NonZeroUsize>>>,\n-        wguard: SpinMutexGuard<WaitVariable<bool>>,\n+        mut rguard: SpinMutexGuard<'_, WaitVariable<Option<NonZeroUsize>>>,\n+        wguard: SpinMutexGuard<'_, WaitVariable<bool>>,\n     ) {\n         *rguard.lock_var_mut() = NonZeroUsize::new(rguard.lock_var().unwrap().get() - 1);\n         if rguard.lock_var().is_some() {\n@@ -120,8 +120,8 @@ impl RWLock {\n     #[inline]\n     unsafe fn __write_unlock(\n         &self,\n-        rguard: SpinMutexGuard<WaitVariable<Option<NonZeroUsize>>>,\n-        wguard: SpinMutexGuard<WaitVariable<bool>>,\n+        rguard: SpinMutexGuard<'_, WaitVariable<Option<NonZeroUsize>>>,\n+        wguard: SpinMutexGuard<'_, WaitVariable<bool>>,\n     ) {\n         if let Err(mut wguard) = WaitQueue::notify_one(wguard) {\n             // No writers waiting, release the write lock"}, {"sha": "f4adb7d1e16067e2f8028ce52b48e25735ad61dc", "filename": "src/libstd/sys/sgx/waitqueue.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -140,7 +140,7 @@ impl WaitQueue {\n     /// until a wakeup event.\n     ///\n     /// This function does not return until this thread has been awoken.\n-    pub fn wait<T>(mut guard: SpinMutexGuard<WaitVariable<T>>) {\n+    pub fn wait<T>(mut guard: SpinMutexGuard<'_, WaitVariable<T>>) {\n         unsafe {\n             let mut entry = UnsafeListEntry::new(SpinMutex::new(WaitEntry {\n                 tcs: thread::current(),\n@@ -162,8 +162,8 @@ impl WaitQueue {\n     ///\n     /// If a waiter is found, a `WaitGuard` is returned which will notify the\n     /// waiter when it is dropped.\n-    pub fn notify_one<T>(mut guard: SpinMutexGuard<WaitVariable<T>>)\n-        -> Result<WaitGuard<T>, SpinMutexGuard<WaitVariable<T>>>\n+    pub fn notify_one<T>(mut guard: SpinMutexGuard<'_, WaitVariable<T>>)\n+        -> Result<WaitGuard<'_, T>, SpinMutexGuard<'_, WaitVariable<T>>>\n     {\n         unsafe {\n             if let Some(entry) = guard.queue.inner.pop() {\n@@ -186,8 +186,8 @@ impl WaitQueue {\n     ///\n     /// If at least one waiter is found, a `WaitGuard` is returned which will\n     /// notify all waiters when it is dropped.\n-    pub fn notify_all<T>(mut guard: SpinMutexGuard<WaitVariable<T>>)\n-        -> Result<WaitGuard<T>, SpinMutexGuard<WaitVariable<T>>>\n+    pub fn notify_all<T>(mut guard: SpinMutexGuard<'_, WaitVariable<T>>)\n+        -> Result<WaitGuard<'_, T>, SpinMutexGuard<'_, WaitVariable<T>>>\n     {\n         unsafe {\n             let mut count = 0;\n@@ -433,7 +433,7 @@ mod spin_mutex {\n         }\n \n         #[inline(always)]\n-        pub fn lock(&self) -> SpinMutexGuard<T> {\n+        pub fn lock(&self) -> SpinMutexGuard<'_, T> {\n             loop {\n                 match self.try_lock() {\n                     None => while self.lock.load(Ordering::Relaxed) {\n@@ -445,7 +445,7 @@ mod spin_mutex {\n         }\n \n         #[inline(always)]\n-        pub fn try_lock(&self) -> Option<SpinMutexGuard<T>> {\n+        pub fn try_lock(&self) -> Option<SpinMutexGuard<'_, T>> {\n             if !self.lock.compare_and_swap(false, true, Ordering::Acquire) {\n                 Some(SpinMutexGuard {\n                     mutex: self,"}, {"sha": "e6379132bafbe35552adac17dd543aaef39accf4", "filename": "src/libstd/sys/unix/backtrace/tracing/gcc_s.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -21,7 +21,7 @@ impl Error for UnwindError {\n }\n \n impl fmt::Display for UnwindError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}: {:?}\", self.description(), self.0)\n     }\n }\n@@ -37,7 +37,7 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n     };\n     let result_unwind = unsafe {\n         uw::_Unwind_Backtrace(trace_fn,\n-                              &mut cx as *mut Context\n+                              &mut cx as *mut Context<'_>\n                               as *mut libc::c_void)\n     };\n     // See libunwind:src/unwind/Backtrace.c for the return values.\n@@ -57,7 +57,7 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n \n extern fn trace_fn(ctx: *mut uw::_Unwind_Context,\n                    arg: *mut libc::c_void) -> uw::_Unwind_Reason_Code {\n-    let cx = unsafe { &mut *(arg as *mut Context) };\n+    let cx = unsafe { &mut *(arg as *mut Context<'_>) };\n     if cx.idx >= cx.frames.len() {\n         return uw::_URC_NORMAL_STOP;\n     }"}, {"sha": "406863a6cba24520ae7f898abfe1aef39e4c5ae9", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -219,7 +219,7 @@ impl SocketAddr {\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl fmt::Debug for SocketAddr {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.address() {\n             AddressKind::Unnamed => write!(fmt, \"(unnamed)\"),\n             AddressKind::Abstract(name) => write!(fmt, \"{} (abstract)\", AsciiEscaped(name)),\n@@ -231,7 +231,7 @@ impl fmt::Debug for SocketAddr {\n struct AsciiEscaped<'a>(&'a [u8]);\n \n impl<'a> fmt::Display for AsciiEscaped<'a> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"\\\"\")?;\n         for byte in self.0.iter().cloned().flat_map(ascii::escape_default) {\n             write!(fmt, \"{}\", byte as char)?;\n@@ -259,7 +259,7 @@ pub struct UnixStream(Socket);\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl fmt::Debug for UnixStream {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut builder = fmt.debug_struct(\"UnixStream\");\n         builder.field(\"fd\", self.0.as_inner());\n         if let Ok(addr) = self.local_addr() {\n@@ -719,7 +719,7 @@ pub struct UnixListener(Socket);\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl fmt::Debug for UnixListener {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut builder = fmt.debug_struct(\"UnixListener\");\n         builder.field(\"fd\", self.0.as_inner());\n         if let Ok(addr) = self.local_addr() {\n@@ -998,7 +998,7 @@ pub struct UnixDatagram(Socket);\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl fmt::Debug for UnixDatagram {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut builder = fmt.debug_struct(\"UnixDatagram\");\n         builder.field(\"fd\", self.0.as_inner());\n         if let Ok(addr) = self.local_addr() {"}, {"sha": "a36dae2f5a19d2257b801c17886fa042d2f35d08", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -206,7 +206,7 @@ impl FromInner<u32> for FilePermissions {\n }\n \n impl fmt::Debug for ReadDir {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // This will only be called from std::fs::ReadDir, which will add a \"ReadDir()\" frame.\n         // Thus the result will be e g 'ReadDir(\"/home\")'\n         fmt::Debug::fmt(&*self.inner.root, f)\n@@ -627,7 +627,7 @@ impl FromInner<c_int> for File {\n }\n \n impl fmt::Debug for File {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         #[cfg(target_os = \"linux\")]\n         fn get_path(fd: c_int) -> Option<PathBuf> {\n             let mut p = PathBuf::from(\"/proc/self/fd\");"}, {"sha": "f52fe8070906ecef2909445ffd86e0edb8ad526d", "filename": "src/libstd/sys/unix/l4re.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -212,7 +212,7 @@ pub mod net {\n     }\n \n     impl fmt::Debug for TcpStream {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             write!(f, \"No networking support available on L4Re\")\n         }\n     }\n@@ -274,7 +274,7 @@ pub mod net {\n     }\n \n     impl fmt::Debug for TcpListener {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             write!(f, \"No networking support available on L4Re.\")\n         }\n     }\n@@ -424,7 +424,7 @@ pub mod net {\n     }\n \n     impl fmt::Debug for UdpSocket {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             write!(f, \"No networking support on L4Re available.\")\n         }\n     }"}, {"sha": "726b17969b7c3e9b4f41274709ff4e4944d8836f", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -152,7 +152,7 @@ pub struct SplitPaths<'a> {\n                     fn(&'a [u8]) -> PathBuf>,\n }\n \n-pub fn split_paths(unparsed: &OsStr) -> SplitPaths {\n+pub fn split_paths(unparsed: &OsStr) -> SplitPaths<'_> {\n     fn bytes_to_path(b: &[u8]) -> PathBuf {\n         PathBuf::from(<OsStr as OsStrExt>::from_bytes(b))\n     }\n@@ -191,7 +191,7 @@ pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n }\n \n impl fmt::Display for JoinPathsError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"path segment contains separator `:`\".fmt(f)\n     }\n }"}, {"sha": "7a1839561078575c74850ce343f81b0989767916", "filename": "src/libstd/sys/unix/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpath.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -11,7 +11,7 @@ pub fn is_verbatim_sep(b: u8) -> bool {\n     b == b'/'\n }\n \n-pub fn parse_prefix(_: &OsStr) -> Option<Prefix> {\n+pub fn parse_prefix(_: &OsStr) -> Option<Prefix<'_>> {\n     None\n }\n "}, {"sha": "f6a12a16396b4980f9c98ed1c40491d4cadf353d", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -330,7 +330,7 @@ impl ChildStdio {\n }\n \n impl fmt::Debug for Command {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}\", self.program)?;\n         for arg in &self.args {\n             write!(f, \" {:?}\", arg)?;\n@@ -380,7 +380,7 @@ impl From<c_int> for ExitStatus {\n }\n \n impl fmt::Display for ExitStatus {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some(code) = self.code() {\n             write!(f, \"exit code: {}\", code)\n         } else {"}, {"sha": "127ae6aa1048122abc27bc32df71afa9cbca1ee1", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -213,7 +213,7 @@ mod inner {\n     }\n \n     impl fmt::Debug for SystemTime {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             f.debug_struct(\"SystemTime\")\n              .field(\"tv_sec\", &self.t.t.tv_sec)\n              .field(\"tv_nsec\", &self.t.t.tv_nsec)\n@@ -298,7 +298,7 @@ mod inner {\n     }\n \n     impl fmt::Debug for Instant {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             f.debug_struct(\"Instant\")\n              .field(\"tv_sec\", &self.t.t.tv_sec)\n              .field(\"tv_nsec\", &self.t.t.tv_nsec)\n@@ -332,7 +332,7 @@ mod inner {\n     }\n \n     impl fmt::Debug for SystemTime {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             f.debug_struct(\"SystemTime\")\n              .field(\"tv_sec\", &self.t.t.tv_sec)\n              .field(\"tv_nsec\", &self.t.t.tv_nsec)"}, {"sha": "29e1880b8f135744cb4e713302c4b7eaf914d7f7", "filename": "src/libstd/sys/wasi/fd.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -23,25 +23,25 @@ pub type RiFlags = u16;\n pub type RoFlags = u16;\n pub type SiFlags = u16;\n \n-fn iovec(a: &mut [IoVecMut]) -> (*const libc::__wasi_iovec_t, usize) {\n+fn iovec(a: &mut [IoVecMut<'_>]) -> (*const libc::__wasi_iovec_t, usize) {\n     assert_eq!(\n-        mem::size_of::<IoVecMut>(),\n+        mem::size_of::<IoVecMut<'_>>(),\n         mem::size_of::<libc::__wasi_iovec_t>()\n     );\n     assert_eq!(\n-        mem::align_of::<IoVecMut>(),\n+        mem::align_of::<IoVecMut<'_>>(),\n         mem::align_of::<libc::__wasi_iovec_t>()\n     );\n     (a.as_ptr() as *const libc::__wasi_iovec_t, a.len())\n }\n \n-fn ciovec(a: &[IoVec]) -> (*const libc::__wasi_ciovec_t, usize) {\n+fn ciovec(a: &[IoVec<'_>]) -> (*const libc::__wasi_ciovec_t, usize) {\n     assert_eq!(\n-        mem::size_of::<IoVec>(),\n+        mem::size_of::<IoVec<'_>>(),\n         mem::size_of::<libc::__wasi_ciovec_t>()\n     );\n     assert_eq!(\n-        mem::align_of::<IoVec>(),\n+        mem::align_of::<IoVec<'_>>(),\n         mem::align_of::<libc::__wasi_ciovec_t>()\n     );\n     (a.as_ptr() as *const libc::__wasi_ciovec_t, a.len())\n@@ -56,28 +56,28 @@ impl WasiFd {\n         cvt_wasi(unsafe { libc::__wasi_fd_datasync(self.fd) })\n     }\n \n-    pub fn pread(&self, bufs: &mut [IoVecMut], offset: u64) -> io::Result<usize> {\n+    pub fn pread(&self, bufs: &mut [IoVecMut<'_>], offset: u64) -> io::Result<usize> {\n         let mut read = 0;\n         let (ptr, len) = iovec(bufs);\n         cvt_wasi(unsafe { libc::__wasi_fd_pread(self.fd, ptr, len, offset, &mut read) })?;\n         Ok(read)\n     }\n \n-    pub fn pwrite(&self, bufs: &[IoVec], offset: u64) -> io::Result<usize> {\n+    pub fn pwrite(&self, bufs: &[IoVec<'_>], offset: u64) -> io::Result<usize> {\n         let mut read = 0;\n         let (ptr, len) = ciovec(bufs);\n         cvt_wasi(unsafe { libc::__wasi_fd_pwrite(self.fd, ptr, len, offset, &mut read) })?;\n         Ok(read)\n     }\n \n-    pub fn read(&self, bufs: &mut [IoVecMut]) -> io::Result<usize> {\n+    pub fn read(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n         let mut read = 0;\n         let (ptr, len) = iovec(bufs);\n         cvt_wasi(unsafe { libc::__wasi_fd_read(self.fd, ptr, len, &mut read) })?;\n         Ok(read)\n     }\n \n-    pub fn write(&self, bufs: &[IoVec]) -> io::Result<usize> {\n+    pub fn write(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n         let mut read = 0;\n         let (ptr, len) = ciovec(bufs);\n         cvt_wasi(unsafe { libc::__wasi_fd_write(self.fd, ptr, len, &mut read) })?;\n@@ -281,7 +281,7 @@ impl WasiFd {\n \n     pub fn sock_recv(\n         &self,\n-        ri_data: &mut [IoVecMut],\n+        ri_data: &mut [IoVecMut<'_>],\n         ri_flags: RiFlags,\n     ) -> io::Result<(usize, RoFlags)> {\n         let mut ro_datalen = 0;\n@@ -293,7 +293,7 @@ impl WasiFd {\n         Ok((ro_datalen, ro_flags))\n     }\n \n-    pub fn sock_send(&self, si_data: &[IoVec], si_flags: SiFlags) -> io::Result<usize> {\n+    pub fn sock_send(&self, si_data: &[IoVec<'_>], si_flags: SiFlags) -> io::Result<usize> {\n         let mut so_datalen = 0;\n         let (ptr, len) = ciovec(si_data);\n         cvt_wasi(unsafe { libc::__wasi_sock_send(self.fd, ptr, len, si_flags, &mut so_datalen) })?;"}, {"sha": "68c8e9356a89a7448d7e406a53662844eb0016f3", "filename": "src/libstd/sys/wasi/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -82,7 +82,7 @@ impl Eq for FilePermissions {\n }\n \n impl fmt::Debug for FilePermissions {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -125,13 +125,13 @@ impl Hash for FileType {\n }\n \n impl fmt::Debug for FileType {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n \n impl fmt::Debug for ReadDir {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -236,7 +236,7 @@ impl DirBuilder {\n }\n \n impl fmt::Debug for File {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }"}, {"sha": "1579aa4b572b043517384e77db28b8957a3a771c", "filename": "src/libstd/sys/wasi/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -94,7 +94,7 @@ impl TcpStream {\n }\n \n impl fmt::Debug for TcpStream {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -144,7 +144,7 @@ impl TcpListener {\n }\n \n impl fmt::Debug for TcpListener {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -282,7 +282,7 @@ impl UdpSocket {\n }\n \n impl fmt::Debug for UdpSocket {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }"}, {"sha": "6d4d6aae61b9fa385e7ff0547920cde26250b695", "filename": "src/libstd/sys/wasi/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -41,7 +41,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n \n pub struct SplitPaths<'a>(&'a Void);\n \n-pub fn split_paths(_unparsed: &OsStr) -> SplitPaths {\n+pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n }\n \n@@ -62,7 +62,7 @@ pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>\n }\n \n impl fmt::Display for JoinPathsError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"not supported on wasm yet\".fmt(f)\n     }\n }"}, {"sha": "7a1839561078575c74850ce343f81b0989767916", "filename": "src/libstd/sys/wasi/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasi%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasi%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fpath.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -11,7 +11,7 @@ pub fn is_verbatim_sep(b: u8) -> bool {\n     b == b'/'\n }\n \n-pub fn parse_prefix(_: &OsStr) -> Option<Prefix> {\n+pub fn parse_prefix(_: &OsStr) -> Option<Prefix<'_>> {\n     None\n }\n "}, {"sha": "a02e009d95356d848608135cef3b69f1ebe1f183", "filename": "src/libstd/sys/wasi/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasi%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasi%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fprocess.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -73,7 +73,7 @@ impl From<File> for Stdio {\n }\n \n impl fmt::Debug for Command {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Ok(())\n     }\n }\n@@ -108,13 +108,13 @@ impl Eq for ExitStatus {\n }\n \n impl fmt::Debug for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n \n impl fmt::Display for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }"}, {"sha": "68c8e9356a89a7448d7e406a53662844eb0016f3", "filename": "src/libstd/sys/wasm/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -82,7 +82,7 @@ impl Eq for FilePermissions {\n }\n \n impl fmt::Debug for FilePermissions {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -125,13 +125,13 @@ impl Hash for FileType {\n }\n \n impl fmt::Debug for FileType {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n \n impl fmt::Debug for ReadDir {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -236,7 +236,7 @@ impl DirBuilder {\n }\n \n impl fmt::Debug for File {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }"}, {"sha": "38552eab0a6550c5b764143aeeea643def2d699f", "filename": "src/libstd/sys/wasm/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -94,7 +94,7 @@ impl TcpStream {\n }\n \n impl fmt::Debug for TcpStream {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -144,7 +144,7 @@ impl TcpListener {\n }\n \n impl fmt::Debug for TcpListener {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n@@ -282,7 +282,7 @@ impl UdpSocket {\n }\n \n impl fmt::Debug for UdpSocket {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }"}, {"sha": "5d21999a991e109fe94125e2b72f14db199e5b93", "filename": "src/libstd/sys/wasm/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasm%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasm%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fos.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -24,7 +24,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n \n pub struct SplitPaths<'a>(&'a Void);\n \n-pub fn split_paths(_unparsed: &OsStr) -> SplitPaths {\n+pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n }\n \n@@ -45,7 +45,7 @@ pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>\n }\n \n impl fmt::Display for JoinPathsError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"not supported on wasm yet\".fmt(f)\n     }\n }"}, {"sha": "7a1839561078575c74850ce343f81b0989767916", "filename": "src/libstd/sys/wasm/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasm%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasm%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fpath.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -11,7 +11,7 @@ pub fn is_verbatim_sep(b: u8) -> bool {\n     b == b'/'\n }\n \n-pub fn parse_prefix(_: &OsStr) -> Option<Prefix> {\n+pub fn parse_prefix(_: &OsStr) -> Option<Prefix<'_>> {\n     None\n }\n "}, {"sha": "a02e009d95356d848608135cef3b69f1ebe1f183", "filename": "src/libstd/sys/wasm/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasm%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwasm%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fprocess.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -73,7 +73,7 @@ impl From<File> for Stdio {\n }\n \n impl fmt::Debug for Command {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Ok(())\n     }\n }\n@@ -108,13 +108,13 @@ impl Eq for ExitStatus {\n }\n \n impl fmt::Debug for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }\n \n impl fmt::Display for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0 {}\n     }\n }"}, {"sha": "b04bb484eedb9499cf453c344749251be4fca405", "filename": "src/libstd/sys/windows/args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -164,13 +164,13 @@ pub struct ArgsInnerDebug<'a> {\n }\n \n impl<'a> fmt::Debug for ArgsInnerDebug<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.args.parsed_args_list.as_slice().fmt(f)\n     }\n }\n \n impl Args {\n-    pub fn inner_debug(&self) -> ArgsInnerDebug {\n+    pub fn inner_debug(&self) -> ArgsInnerDebug<'_> {\n         ArgsInnerDebug {\n             args: self\n         }"}, {"sha": "1381825806f6374aa5a1040447958334b2a9b5c6", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -131,12 +131,12 @@ pub trait OsStrExt {\n     ///\n     /// [`OsString::from_wide`]: ./trait.OsStringExt.html#tymethod.from_wide\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn encode_wide(&self) -> EncodeWide;\n+    fn encode_wide(&self) -> EncodeWide<'_>;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl OsStrExt for OsStr {\n-    fn encode_wide(&self) -> EncodeWide {\n+    fn encode_wide(&self) -> EncodeWide<'_> {\n         self.as_inner().inner.encode_wide()\n     }\n }"}, {"sha": "4ebbb0707f78ade0f7ecf4b99107bcb00e0d607d", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -74,7 +74,7 @@ pub struct FilePermissions { attrs: c::DWORD }\n pub struct DirBuilder;\n \n impl fmt::Debug for ReadDir {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // This will only be called from std::fs::ReadDir, which will add a \"ReadDir()\" frame.\n         // Thus the result will be e g 'ReadDir(\"C:\\\")'\n         fmt::Debug::fmt(&*self.root, f)\n@@ -435,7 +435,7 @@ impl FromInner<c::HANDLE> for File {\n }\n \n impl fmt::Debug for File {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // FIXME(#24570): add more info here (e.g., mode)\n         let mut b = f.debug_struct(\"File\");\n         b.field(\"handle\", &self.handle.raw());"}, {"sha": "4e50b5521eb046fa8cea5fdf78c847f4f86061e1", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -136,7 +136,7 @@ pub struct SplitPaths<'a> {\n     must_yield: bool,\n }\n \n-pub fn split_paths(unparsed: &OsStr) -> SplitPaths {\n+pub fn split_paths(unparsed: &OsStr) -> SplitPaths<'_> {\n     SplitPaths {\n         data: unparsed.encode_wide(),\n         must_yield: true,\n@@ -212,7 +212,7 @@ pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n }\n \n impl fmt::Display for JoinPathsError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"path segment contains `\\\"`\".fmt(f)\n     }\n }"}, {"sha": "c7a82e092528e4a227e6f39de940c7a95cd1b7c9", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -33,13 +33,13 @@ impl AsInner<Wtf8> for Buf {\n }\n \n impl fmt::Debug for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.as_slice(), formatter)\n     }\n }\n \n impl fmt::Display for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self.as_slice(), formatter)\n     }\n }\n@@ -49,13 +49,13 @@ pub struct Slice {\n }\n \n impl fmt::Debug for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.inner, formatter)\n     }\n }\n \n impl fmt::Display for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.inner, formatter)\n     }\n }\n@@ -139,7 +139,7 @@ impl Slice {\n         self.inner.as_str()\n     }\n \n-    pub fn to_string_lossy(&self) -> Cow<str> {\n+    pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         self.inner.to_string_lossy()\n     }\n "}, {"sha": "f3178a5e9e6909f78eb0a72829bbead4729e3900", "filename": "src/libstd/sys/windows/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -19,7 +19,7 @@ pub fn is_verbatim_sep(b: u8) -> bool {\n     b == b'\\\\'\n }\n \n-pub fn parse_prefix<'a>(path: &'a OsStr) -> Option<Prefix> {\n+pub fn parse_prefix<'a>(path: &'a OsStr) -> Option<Prefix<'a>> {\n     use crate::path::Prefix::*;\n     unsafe {\n         // The unsafety here stems from converting between &OsStr and &[u8]"}, {"sha": "e39b7ae8890255fc52938ab77dd843969ba2dea3", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -219,7 +219,7 @@ impl Command {\n }\n \n impl fmt::Debug for Command {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}\", self.program)?;\n         for arg in &self.args {\n             write!(f, \" {:?}\", arg)?;\n@@ -393,7 +393,7 @@ impl From<c::DWORD> for ExitStatus {\n }\n \n impl fmt::Display for ExitStatus {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // Windows exit codes with the high bit set typically mean some form of\n         // unhandled exception or warning. In this scenario printing the exit\n         // code in decimal doesn't always make sense because it's a very large"}, {"sha": "4c9d2aee15709cd5eb2f6ccb2a11152971327590", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -139,7 +139,7 @@ impl Ord for SystemTime {\n }\n \n impl fmt::Debug for SystemTime {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SystemTime\")\n          .field(\"intervals\", &self.intervals())\n          .finish()"}, {"sha": "429ecf6281b3ec32c4806158baff95d84e47bceb", "filename": "src/libstd/sys_common/bytestring.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fbytestring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fbytestring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbytestring.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -3,9 +3,9 @@\n use crate::fmt::{Formatter, Result, Write};\n use core::str::lossy::{Utf8Lossy, Utf8LossyChunk};\n \n-pub fn debug_fmt_bytestring(slice: &[u8], f: &mut Formatter) -> Result {\n+pub fn debug_fmt_bytestring(slice: &[u8], f: &mut Formatter<'_>) -> Result {\n     // Writes out a valid unicode string with the correct escape sequences\n-    fn write_str_escaped(f: &mut Formatter, s: &str) -> Result {\n+    fn write_str_escaped(f: &mut Formatter<'_>, s: &str) -> Result {\n         for c in s.chars().flat_map(|c| c.escape_debug()) {\n             f.write_char(c)?\n         }\n@@ -32,7 +32,7 @@ mod tests {\n         struct Helper<'a>(&'a [u8]);\n \n         impl Debug for Helper<'_> {\n-            fn fmt(&self, f: &mut Formatter) -> Result {\n+            fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n                 debug_fmt_bytestring(self.0, f)\n             }\n         }"}, {"sha": "28d85949ffa3c433d026e3fb69595d750117017f", "filename": "src/libstd/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmutex.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -38,7 +38,7 @@ impl Mutex {\n     /// Calls raw_lock() and then returns an RAII guard to guarantee the mutex\n     /// will be unlocked.\n     #[inline]\n-    pub unsafe fn lock(&self) -> MutexGuard {\n+    pub unsafe fn lock(&self) -> MutexGuard<'_> {\n         self.raw_lock();\n         MutexGuard(&self.0)\n     }"}, {"sha": "02bd91c43810400e2d0dd146baacb027372d2890", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -328,7 +328,7 @@ impl FromInner<Socket> for TcpStream {\n }\n \n impl fmt::Debug for TcpStream {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut res = f.debug_struct(\"TcpStream\");\n \n         if let Ok(addr) = self.socket_addr() {\n@@ -435,7 +435,7 @@ impl FromInner<Socket> for TcpListener {\n }\n \n impl fmt::Debug for TcpListener {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut res = f.debug_struct(\"TcpListener\");\n \n         if let Ok(addr) = self.socket_addr() {\n@@ -644,7 +644,7 @@ impl FromInner<Socket> for UdpSocket {\n }\n \n impl fmt::Debug for UdpSocket {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut res = f.debug_struct(\"UdpSocket\");\n \n         if let Ok(addr) = self.socket_addr() {"}, {"sha": "7cc93477a73c707a7795379a915c9958fd83b992", "filename": "src/libstd/sys_common/os_str_bytes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -23,25 +23,25 @@ pub(crate) struct Slice {\n }\n \n impl fmt::Debug for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         debug_fmt_bytestring(&self.inner, formatter)\n     }\n }\n \n impl fmt::Display for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)\n     }\n }\n \n impl fmt::Debug for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.as_slice(), formatter)\n     }\n }\n \n impl fmt::Display for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self.as_slice(), formatter)\n     }\n }\n@@ -148,7 +148,7 @@ impl Slice {\n         str::from_utf8(&self.inner).ok()\n     }\n \n-    pub fn to_string_lossy(&self) -> Cow<str> {\n+    pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         String::from_utf8_lossy(&self.inner)\n     }\n "}, {"sha": "adac45f2d59daab2146a3b075e993a906372ed7d", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -136,14 +136,14 @@ pub type TryLockResult<Guard> = Result<Guard, TryLockError<Guard>>;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Debug for PoisonError<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"PoisonError { inner: .. }\".fmt(f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Display for PoisonError<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"poisoned lock: another task failed inside\".fmt(f)\n     }\n }\n@@ -214,7 +214,7 @@ impl<T> From<PoisonError<T>> for TryLockError<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Debug for TryLockError<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             TryLockError::Poisoned(..) => \"Poisoned(..)\".fmt(f),\n             TryLockError::WouldBlock => \"WouldBlock\".fmt(f)\n@@ -224,7 +224,7 @@ impl<T> fmt::Debug for TryLockError<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Display for TryLockError<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             TryLockError::Poisoned(..) => \"poisoned lock: another task failed inside\",\n             TryLockError::WouldBlock => \"try_lock failed because the operation would block\""}, {"sha": "f08b13c4aa274dd863082d14e741bd3fe916c52e", "filename": "src/libstd/sys_common/remutex.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fremutex.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -72,7 +72,7 @@ impl<T> ReentrantMutex<T> {\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return failure if the mutex would otherwise be\n     /// acquired.\n-    pub fn lock(&self) -> LockResult<ReentrantMutexGuard<T>> {\n+    pub fn lock(&self) -> LockResult<ReentrantMutexGuard<'_, T>> {\n         unsafe { self.inner.lock() }\n         ReentrantMutexGuard::new(&self)\n     }\n@@ -89,7 +89,7 @@ impl<T> ReentrantMutex<T> {\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return failure if the mutex would otherwise be\n     /// acquired.\n-    pub fn try_lock(&self) -> TryLockResult<ReentrantMutexGuard<T>> {\n+    pub fn try_lock(&self) -> TryLockResult<ReentrantMutexGuard<'_, T>> {\n         if unsafe { self.inner.try_lock() } {\n             Ok(ReentrantMutexGuard::new(&self)?)\n         } else {\n@@ -108,7 +108,7 @@ impl<T> Drop for ReentrantMutex<T> {\n }\n \n impl<T: fmt::Debug + 'static> fmt::Debug for ReentrantMutex<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.try_lock() {\n             Ok(guard) => f.debug_struct(\"ReentrantMutex\").field(\"data\", &*guard).finish(),\n             Err(TryLockError::Poisoned(err)) => {\n@@ -117,7 +117,9 @@ impl<T: fmt::Debug + 'static> fmt::Debug for ReentrantMutex<T> {\n             Err(TryLockError::WouldBlock) => {\n                 struct LockedPlaceholder;\n                 impl fmt::Debug for LockedPlaceholder {\n-                    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str(\"<locked>\") }\n+                    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                        f.write_str(\"<locked>\")\n+                    }\n                 }\n \n                 f.debug_struct(\"ReentrantMutex\").field(\"data\", &LockedPlaceholder).finish()"}, {"sha": "7936dd35999e284fc37155f363b61268209700e4", "filename": "src/libstd/sys_common/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Futil.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -3,7 +3,7 @@ use crate::io::prelude::*;\n use crate::sys::stdio::panic_output;\n use crate::thread;\n \n-pub fn dumb_print(args: fmt::Arguments) {\n+pub fn dumb_print(args: fmt::Arguments<'_>) {\n     if let Some(mut out) = panic_output() {\n         let _ = out.write_fmt(args);\n     }\n@@ -14,7 +14,7 @@ pub fn dumb_print(args: fmt::Arguments) {\n // crate::intrinsics::abort() may be used instead.  The above implementations cover\n // all targets currently supported by libstd.\n \n-pub fn abort(args: fmt::Arguments) -> ! {\n+pub fn abort(args: fmt::Arguments<'_>) -> ! {\n     dumb_print(format_args!(\"fatal runtime error: {}\\n\", args));\n     unsafe { crate::sys::abort_internal(); }\n }"}, {"sha": "7fe1818291e5ddd7856300f0e475a516432b74f0", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -46,7 +46,7 @@ pub struct CodePoint {\n /// Example: `U+1F4A9`\n impl fmt::Debug for CodePoint {\n     #[inline]\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(formatter, \"U+{:04X}\", self.value)\n     }\n }\n@@ -134,7 +134,7 @@ impl ops::DerefMut for Wtf8Buf {\n /// Example: `\"a\\u{D800}\"` for a string with code points [U+0061, U+D800]\n impl fmt::Debug for Wtf8Buf {\n     #[inline]\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&**self, formatter)\n     }\n }\n@@ -411,8 +411,8 @@ impl AsInner<[u8]> for Wtf8 {\n /// and surrogates as `\\u` followed by four hexadecimal digits.\n /// Example: `\"a\\u{D800}\"` for a slice with code points [U+0061, U+D800]\n impl fmt::Debug for Wtf8 {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fn write_str_escaped(f: &mut fmt::Formatter, s: &str) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fn write_str_escaped(f: &mut fmt::Formatter<'_>, s: &str) -> fmt::Result {\n             use crate::fmt::Write;\n             for c in s.chars().flat_map(|c| c.escape_debug()) {\n                 f.write_char(c)?\n@@ -441,7 +441,7 @@ impl fmt::Debug for Wtf8 {\n }\n \n impl fmt::Display for Wtf8 {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let wtf8_bytes = &self.bytes;\n         let mut pos = 0;\n         loop {\n@@ -522,7 +522,7 @@ impl Wtf8 {\n \n     /// Returns an iterator for the string\u2019s code points.\n     #[inline]\n-    pub fn code_points(&self) -> Wtf8CodePoints {\n+    pub fn code_points(&self) -> Wtf8CodePoints<'_> {\n         Wtf8CodePoints { bytes: self.bytes.iter() }\n     }\n \n@@ -547,7 +547,7 @@ impl Wtf8 {\n     /// Surrogates are replaced with `\"\\u{FFFD}\"` (the replacement character \u201c\ufffd\u201d).\n     ///\n     /// This only copies the data if necessary (if it contains any surrogate).\n-    pub fn to_string_lossy(&self) -> Cow<str> {\n+    pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         let surrogate_pos = match self.next_surrogate(0) {\n             None => return Cow::Borrowed(unsafe { str::from_utf8_unchecked(&self.bytes) }),\n             Some((pos, _)) => pos,\n@@ -579,7 +579,7 @@ impl Wtf8 {\n     /// calling `Wtf8Buf::from_ill_formed_utf16` on the resulting code units\n     /// would always return the original WTF-8 string.\n     #[inline]\n-    pub fn encode_wide(&self) -> EncodeWide {\n+    pub fn encode_wide(&self) -> EncodeWide<'_> {\n         EncodeWide { code_points: self.code_points(), extra: 0 }\n     }\n \n@@ -1228,7 +1228,7 @@ mod tests {\n         assert_eq!(Wtf8::from_str(\"a\u00e9 \ud83d\udca9\").to_string_lossy(), Cow::Borrowed(\"a\u00e9 \ud83d\udca9\"));\n         let mut string = Wtf8Buf::from_str(\"a\u00e9 \ud83d\udca9\");\n         string.push(CodePoint::from_u32(0xD800).unwrap());\n-        let expected: Cow<str> = Cow::Owned(String::from(\"a\u00e9 \ud83d\udca9\ufffd\"));\n+        let expected: Cow<'_, str> = Cow::Owned(String::from(\"a\u00e9 \ud83d\udca9\ufffd\"));\n         assert_eq!(string.to_string_lossy(), expected);\n     }\n "}, {"sha": "bfc1deddf7bdbf7f9a434064324f8ffdf4874dc0", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -100,7 +100,7 @@ pub struct LocalKey<T: 'static> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T: 'static> fmt::Debug for LocalKey<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"LocalKey { .. }\")\n     }\n }\n@@ -204,14 +204,14 @@ pub struct AccessError {\n \n #[stable(feature = \"thread_local_try_with\", since = \"1.26.0\")]\n impl fmt::Debug for AccessError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"AccessError\").finish()\n     }\n }\n \n #[stable(feature = \"thread_local_try_with\", since = \"1.26.0\")]\n impl fmt::Display for AccessError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(\"already destroyed\", f)\n     }\n }\n@@ -319,7 +319,7 @@ pub mod statik {\n     unsafe impl<T> Sync for Key<T> { }\n \n     impl<T> fmt::Debug for Key<T> {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             f.pad(\"Key { .. }\")\n         }\n     }\n@@ -356,7 +356,7 @@ pub mod fast {\n     }\n \n     impl<T> fmt::Debug for Key<T> {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             f.pad(\"Key { .. }\")\n         }\n     }\n@@ -424,7 +424,7 @@ pub mod os {\n     }\n \n     impl<T> fmt::Debug for Key<T> {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             f.pad(\"Key { .. }\")\n         }\n     }"}, {"sha": "cb507971091a4b685c6cfba979758d0be70251d4", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -1256,7 +1256,7 @@ impl Thread {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for Thread {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Thread\")\n             .field(\"id\", &self.id())\n             .field(\"name\", &self.name())\n@@ -1469,7 +1469,7 @@ impl<T> IntoInner<imp::Thread> for JoinHandle<T> {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T> fmt::Debug for JoinHandle<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"JoinHandle { .. }\")\n     }\n }"}, {"sha": "dc97f8c04a83912cb26561121d40adb5b925c501", "filename": "src/libstd/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b825c9330f9abe5813d2fd5e65d361ff218ea/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=a02b825c9330f9abe5813d2fd5e65d361ff218ea", "patch": "@@ -349,7 +349,7 @@ impl Sub<Instant> for Instant {\n \n #[stable(feature = \"time2\", since = \"1.8.0\")]\n impl fmt::Debug for Instant {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n@@ -513,7 +513,7 @@ impl SubAssign<Duration> for SystemTime {\n \n #[stable(feature = \"time2\", since = \"1.8.0\")]\n impl fmt::Debug for SystemTime {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n@@ -581,7 +581,7 @@ impl Error for SystemTimeError {\n \n #[stable(feature = \"time2\", since = \"1.8.0\")]\n impl fmt::Display for SystemTimeError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"second time provided was later than self\")\n     }\n }"}]}