{"sha": "b443e57ce6015278031144dcc6aeea2d6dc1d680", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NDNlNTdjZTYwMTUyNzgwMzExNDRkY2M2YWVlYTJkNmRjMWQ2ODA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-25T07:54:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-25T07:54:42Z"}, "message": "Rollup merge of #48166 - hedgehog1024:hedgehog1024-stabilize-entry_and_modify, r=alexcrichton\n\nStabilize 'entry_and_modify' feature\n\nStabilize `entry_and_modify` feature introduced by #44734.\n\nCloses #44733", "tree": {"sha": "7b6b83884ec491882ee0c4225970b8b1ed8302e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b6b83884ec491882ee0c4225970b8b1ed8302e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b443e57ce6015278031144dcc6aeea2d6dc1d680", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJakmvCCRBK7hj4Ov3rIwAAdHIIABXAFQVaBZQO3j0VpqQ9diVv\nXeb7mvyHhm2FX+1JqDcZ/gaJSTM4xOtJRn/cX0wmemc2llAR/kznkqPVOzA1W8LF\nazDLvRKCZBZmNil9NeIODL5gRlvmpnAlyPnmQQcBZ3VQB3fojjXFl/PuUeJxT9D9\nGWXKw+Nho+P8tQrvz8bOQ7Ku0BFwj5SotyUfnVIKRzhkE++A6QDYQnY5NPuVCIqC\nAzREQmCPJlCrtjBDOwzc4BYTfs5Cu2Qo+xH7/FHF7K8yAEmvCt7bFUlTh4dDyQ2s\n/4g0Ur9PbHjzubDeEy2WIooUjszHQLSLx7OhAcoKqt0fpq3r4mNgU65KQ9GepoI=\n=VarJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b6b83884ec491882ee0c4225970b8b1ed8302e2\nparent 562626ac3f51d87b87039ba7f73bc251bea6efdf\nparent 0aa753ba30254631ce05f37cd2ff0dd428d931c5\nauthor kennytm <kennytm@gmail.com> 1519545282 +0800\ncommitter GitHub <noreply@github.com> 1519545282 +0800\n\nRollup merge of #48166 - hedgehog1024:hedgehog1024-stabilize-entry_and_modify, r=alexcrichton\n\nStabilize 'entry_and_modify' feature\n\nStabilize `entry_and_modify` feature introduced by #44734.\n\nCloses #44733\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b443e57ce6015278031144dcc6aeea2d6dc1d680", "html_url": "https://github.com/rust-lang/rust/commit/b443e57ce6015278031144dcc6aeea2d6dc1d680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b443e57ce6015278031144dcc6aeea2d6dc1d680/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "562626ac3f51d87b87039ba7f73bc251bea6efdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/562626ac3f51d87b87039ba7f73bc251bea6efdf", "html_url": "https://github.com/rust-lang/rust/commit/562626ac3f51d87b87039ba7f73bc251bea6efdf"}, {"sha": "0aa753ba30254631ce05f37cd2ff0dd428d931c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa753ba30254631ce05f37cd2ff0dd428d931c5", "html_url": "https://github.com/rust-lang/rust/commit/0aa753ba30254631ce05f37cd2ff0dd428d931c5"}], "stats": {"total": 83, "additions": 2, "deletions": 81}, "files": [{"sha": "1280c71e83c922fa2b5e3befe3419f6014aa1dd2", "filename": "src/doc/unstable-book/src/library-features/entry-and-modify.md", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/562626ac3f51d87b87039ba7f73bc251bea6efdf/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry-and-modify.md", "raw_url": "https://github.com/rust-lang/rust/raw/562626ac3f51d87b87039ba7f73bc251bea6efdf/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry-and-modify.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry-and-modify.md?ref=562626ac3f51d87b87039ba7f73bc251bea6efdf", "patch": "@@ -1,77 +0,0 @@\n-# `entry_and_modify`\n-\n-The tracking issue for this feature is: [#44733]\n-\n-[#44733]: https://github.com/rust-lang/rust/issues/44733\n-\n-------------------------\n-\n-This introduces a new method for the Entry API of maps\n-(`std::collections::HashMap` and `std::collections::BTreeMap`), so that\n-occupied entries can be modified before any potential inserts into the\n-map.\n-\n-For example:\n-\n-```rust\n-#![feature(entry_and_modify)]\n-# fn main() {\n-use std::collections::HashMap;\n-\n-struct Foo {\n-    new: bool,\n-}\n-\n-let mut map: HashMap<&str, Foo> = HashMap::new();\n-\n-map.entry(\"quux\")\n-   .and_modify(|e| e.new = false)\n-   .or_insert(Foo { new: true });\n-# }\n-```\n-\n-This is not possible with the stable API alone since inserting a default\n-_before_ modifying the `new` field would mean we would lose the default state:\n-\n-```rust\n-# fn main() {\n-use std::collections::HashMap;\n-\n-struct Foo {\n-    new: bool,\n-}\n-\n-let mut map: HashMap<&str, Foo> = HashMap::new();\n-\n-map.entry(\"quux\").or_insert(Foo { new: true }).new = false;\n-# }\n-```\n-\n-In the above code the `new` field will never be `true`, even though we only\n-intended to update that field to `false` for previously extant entries.\n-\n-To achieve the same effect as `and_modify` we would have to manually match\n-against the `Occupied` and `Vacant` variants of the `Entry` enum, which is\n-a little less user-friendly, and much more verbose:\n-\n-```rust\n-# fn main() {\n-use std::collections::HashMap;\n-use std::collections::hash_map::Entry;\n-\n-struct Foo {\n-    new: bool,\n-}\n-\n-let mut map: HashMap<&str, Foo> = HashMap::new();\n-\n-match map.entry(\"quux\") {\n-    Entry::Occupied(entry) => {\n-        entry.into_mut().new = false;\n-    },\n-    Entry::Vacant(entry) => {\n-        entry.insert(Foo { new: true });\n-    },\n-};\n-# }\n-```"}, {"sha": "618ef81fdd98198c71268a8b08eb257f3ca2feb6", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b443e57ce6015278031144dcc6aeea2d6dc1d680/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b443e57ce6015278031144dcc6aeea2d6dc1d680/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=b443e57ce6015278031144dcc6aeea2d6dc1d680", "patch": "@@ -2114,7 +2114,6 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(entry_and_modify)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map: BTreeMap<&str, usize> = BTreeMap::new();\n@@ -2129,7 +2128,7 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n     ///    .or_insert(42);\n     /// assert_eq!(map[\"poneyland\"], 43);\n     /// ```\n-    #[unstable(feature = \"entry_and_modify\", issue = \"44733\")]\n+    #[stable(feature = \"entry_and_modify\", since = \"1.26.0\")]\n     pub fn and_modify<F>(self, mut f: F) -> Self\n         where F: FnMut(&mut V)\n     {"}, {"sha": "4dfdc23ebee53120ac1d225d6fa10f5d2ca7c950", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b443e57ce6015278031144dcc6aeea2d6dc1d680/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b443e57ce6015278031144dcc6aeea2d6dc1d680/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=b443e57ce6015278031144dcc6aeea2d6dc1d680", "patch": "@@ -2082,7 +2082,6 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(entry_and_modify)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map: HashMap<&str, u32> = HashMap::new();\n@@ -2097,7 +2096,7 @@ impl<'a, K, V> Entry<'a, K, V> {\n     ///    .or_insert(42);\n     /// assert_eq!(map[\"poneyland\"], 43);\n     /// ```\n-    #[unstable(feature = \"entry_and_modify\", issue = \"44733\")]\n+    #[stable(feature = \"entry_and_modify\", since = \"1.26.0\")]\n     pub fn and_modify<F>(self, mut f: F) -> Self\n         where F: FnMut(&mut V)\n     {"}]}