{"sha": "dfa611146c7acd692f760619d25bfabf7261eaf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYTYxMTE0NmM3YWNkNjkyZjc2MDYxOWQyNWJmYWJmNzI2MWVhZjU=", "commit": {"author": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-04-19T01:50:50Z"}, "committer": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-04-20T00:36:51Z"}, "message": "Remove the explicit box_free type check\n\nBecause box_free is now passed a pointer instead of a Box, we can stop\nrelying on TypeChecked::check_box_free_inputs, because\nTypeChecker::check_call_inputs should be enough, like for all other\nfunction calls.\n\nIt seems it was not actually reached anyways in cases where it would\nhave made a difference. (issue #50071)", "tree": {"sha": "58327ba1b66cf4c3f853f2d0b2325fdaf53f4332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58327ba1b66cf4c3f853f2d0b2325fdaf53f4332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfa611146c7acd692f760619d25bfabf7261eaf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa611146c7acd692f760619d25bfabf7261eaf5", "html_url": "https://github.com/rust-lang/rust/commit/dfa611146c7acd692f760619d25bfabf7261eaf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfa611146c7acd692f760619d25bfabf7261eaf5/comments", "author": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43b24c6c83acbd7ef63a97cf45b1a622d2cd61b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/43b24c6c83acbd7ef63a97cf45b1a622d2cd61b0", "html_url": "https://github.com/rust-lang/rust/commit/43b24c6c83acbd7ef63a97cf45b1a622d2cd61b0"}], "stats": {"total": 70, "additions": 1, "deletions": 69}, "files": [{"sha": "78e0b1c2cc196248585900263654b09bc57b1dc8", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 69, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/dfa611146c7acd692f760619d25bfabf7261eaf5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa611146c7acd692f760619d25bfabf7261eaf5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=dfa611146c7acd692f760619d25bfabf7261eaf5", "patch": "@@ -918,11 +918,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     ));\n                 }\n \n-                if self.is_box_free(func) {\n-                    self.check_box_free_inputs(mir, term, &sig, args, term_location);\n-                } else {\n-                    self.check_call_inputs(mir, term, &sig, args, term_location);\n-                }\n+                self.check_call_inputs(mir, term, &sig, args, term_location);\n             }\n             TerminatorKind::Assert {\n                 ref cond, ref msg, ..\n@@ -1026,70 +1022,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn is_box_free(&self, operand: &Operand<'tcx>) -> bool {\n-        match *operand {\n-            Operand::Constant(ref c) => match c.ty.sty {\n-                ty::TyFnDef(ty_def_id, _) => {\n-                    Some(ty_def_id) == self.tcx().lang_items().box_free_fn()\n-                }\n-                _ => false,\n-            },\n-            _ => false,\n-        }\n-    }\n-\n-    fn check_box_free_inputs(\n-        &mut self,\n-        mir: &Mir<'tcx>,\n-        term: &Terminator<'tcx>,\n-        sig: &ty::FnSig<'tcx>,\n-        args: &[Operand<'tcx>],\n-        term_location: Location,\n-    ) {\n-        debug!(\"check_box_free_inputs\");\n-\n-        // box_free takes a Box as a pointer. Allow for that.\n-\n-        if sig.inputs().len() != 1 {\n-            span_mirbug!(self, term, \"box_free should take 1 argument\");\n-            return;\n-        }\n-\n-        let pointee_ty = match sig.inputs()[0].sty {\n-            ty::TyRawPtr(mt) => mt.ty,\n-            _ => {\n-                span_mirbug!(self, term, \"box_free should take a raw ptr\");\n-                return;\n-            }\n-        };\n-\n-        if args.len() != 1 {\n-            span_mirbug!(self, term, \"box_free called with wrong # of args\");\n-            return;\n-        }\n-\n-        let ty = args[0].ty(mir, self.tcx());\n-        let arg_ty = match ty.sty {\n-            ty::TyRawPtr(mt) => mt.ty,\n-            ty::TyAdt(def, _) if def.is_box() => ty.boxed_ty(),\n-            _ => {\n-                span_mirbug!(self, term, \"box_free called with bad arg ty\");\n-                return;\n-            }\n-        };\n-\n-        if let Err(terr) = self.sub_types(arg_ty, pointee_ty, term_location.at_self()) {\n-            span_mirbug!(\n-                self,\n-                term,\n-                \"bad box_free arg ({:?} <- {:?}): {:?}\",\n-                pointee_ty,\n-                arg_ty,\n-                terr\n-            );\n-        }\n-    }\n-\n     fn check_iscleanup(&mut self, mir: &Mir<'tcx>, block_data: &BasicBlockData<'tcx>) {\n         let is_cleanup = block_data.is_cleanup;\n         self.last_span = block_data.terminator().source_info.span;"}]}