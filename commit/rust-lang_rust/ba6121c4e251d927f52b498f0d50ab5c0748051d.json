{"sha": "ba6121c4e251d927f52b498f0d50ab5c0748051d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNjEyMWM0ZTI1MWQ5MjdmNTJiNDk4ZjBkNTBhYjVjMDc0ODA1MWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-08-24T06:10:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-24T06:10:51Z"}, "message": "Merge pull request #1898 from spinda/overflow-controls\n\nAdd overflow_closures and overflow_match_arms opts", "tree": {"sha": "2e39742f60c1f763ff6886bdd2ebc06e3ced4d0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e39742f60c1f763ff6886bdd2ebc06e3ced4d0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba6121c4e251d927f52b498f0d50ab5c0748051d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6121c4e251d927f52b498f0d50ab5c0748051d", "html_url": "https://github.com/rust-lang/rust/commit/ba6121c4e251d927f52b498f0d50ab5c0748051d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba6121c4e251d927f52b498f0d50ab5c0748051d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc9c65a2ac8daaebba0313f612b4a9e68ee42216", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9c65a2ac8daaebba0313f612b4a9e68ee42216", "html_url": "https://github.com/rust-lang/rust/commit/bc9c65a2ac8daaebba0313f612b4a9e68ee42216"}, {"sha": "411c73c12fa014c568c2ff0b0141042e500910d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/411c73c12fa014c568c2ff0b0141042e500910d7", "html_url": "https://github.com/rust-lang/rust/commit/411c73c12fa014c568c2ff0b0141042e500910d7"}], "stats": {"total": 169, "additions": 167, "deletions": 2}, "files": [{"sha": "13a704240c377afa89c6a2eff0475867592c8ece", "filename": "Configurations.md", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ba6121c4e251d927f52b498f0d50ab5c0748051d/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/ba6121c4e251d927f52b498f0d50ab5c0748051d/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=ba6121c4e251d927f52b498f0d50ab5c0748051d", "patch": "@@ -1265,6 +1265,64 @@ Maximum width of each line\n \n See also [`error_on_line_overflow`](#error_on_line_overflow).\n \n+## `multiline_closure_forces_block`\n+\n+Force multiline closure bodies to be wrapped in a block\n+\n+- **Default value**: `false`\n+- **Possible values**: `false`, `true`\n+\n+#### `false`:\n+\n+```rust\n+result.and_then(|maybe_value| match maybe_value {\n+    None => ...,\n+    Some(value) => ...,\n+})\n+```\n+\n+#### `true`:\n+\n+```rust\n+result.and_then(|maybe_value| {\n+    match maybe_value {\n+        None => ...,\n+        Some(value) => ...,\n+    }\n+})\n+```\n+\n+## `multiline_match_arm_forces_block`\n+\n+Force multiline match arm bodies to be wrapped in a block\n+\n+- **Default value**: `false`\n+- **Possible values**: `false`, `true`\n+\n+#### `false`:\n+\n+```rust\n+match lorem {\n+    None => if ipsum {\n+        println!(\"Hello World\");\n+    },\n+    Some(dolor) => ...,\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+match lorem {\n+    None => {\n+        if ipsum {\n+            println!(\"Hello World\");\n+        }\n+    }\n+    Some(dolor) => ...,\n+}\n+```\n+\n ## `newline_style`\n \n Unix or Windows line endings"}, {"sha": "9659f19377d06227983f8df20608769551656321", "filename": "src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba6121c4e251d927f52b498f0d50ab5c0748051d/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6121c4e251d927f52b498f0d50ab5c0748051d/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=ba6121c4e251d927f52b498f0d50ab5c0748051d", "patch": "@@ -615,6 +615,10 @@ create_config! {\n         \"Try to put attributes on the same line as fields.\";\n     attributes_on_same_line_as_variant: bool, true,\n         \"Try to put attributes on the same line as variants in enum declarations.\";\n+    multiline_closure_forces_block: bool, false,\n+        \"Force multiline closure bodies to be wrapped in a block\";\n+    multiline_match_arm_forces_block: bool, false,\n+        \"Force multiline match arm bodies to be wrapped in a block\";\n }\n \n #[cfg(test)]"}, {"sha": "a42ab973e0d25ac3a891cb5dae35d35a6bb1b9ff", "filename": "src/expr.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ba6121c4e251d927f52b498f0d50ab5c0748051d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6121c4e251d927f52b498f0d50ab5c0748051d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=ba6121c4e251d927f52b498f0d50ab5c0748051d", "patch": "@@ -690,6 +690,13 @@ fn rewrite_closure_expr(\n     if classify::expr_requires_semi_to_be_stmt(left_most_sub_expr(expr)) {\n         rewrite = and_one_line(rewrite);\n     }\n+    rewrite = rewrite.and_then(|rw| {\n+        if context.config.multiline_closure_forces_block() && rw.contains('\\n') {\n+            None\n+        } else {\n+            Some(rw)\n+        }\n+    });\n     rewrite.map(|rw| format!(\"{} {}\", prefix, rw))\n }\n \n@@ -1690,12 +1697,20 @@ fn flatten_arm_body<'a>(context: &'a RewriteContext, body: &'a ast::Expr) -> (bo\n             if !is_unsafe_block(block) && is_simple_block(block, context.codemap) =>\n         {\n             if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n-                (expr.can_be_overflowed(context, 1), &**expr)\n+                (\n+                    !context.config.multiline_match_arm_forces_block() &&\n+                        expr.can_be_overflowed(context, 1),\n+                    &**expr,\n+                )\n             } else {\n                 (false, &*body)\n             }\n         }\n-        _ => (body.can_be_overflowed(context, 1), &*body),\n+        _ => (\n+            !context.config.multiline_match_arm_forces_block() &&\n+                body.can_be_overflowed(context, 1),\n+            &*body,\n+        ),\n     }\n }\n "}, {"sha": "e885dff5ee6978e15f31701f3a2642b517c9a83c", "filename": "tests/source/configs-multiline_closure_forces_block-false.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Fsource%2Fconfigs-multiline_closure_forces_block-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Fsource%2Fconfigs-multiline_closure_forces_block-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-multiline_closure_forces_block-false.rs?ref=ba6121c4e251d927f52b498f0d50ab5c0748051d", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-multiline_closure_forces_block: false\n+// Option forces multiline closure bodies to be wrapped in a block\n+\n+fn main() {\n+    result.and_then(|maybe_value| {\n+        match maybe_value {\n+            None => Err(\"oops\"),\n+            Some(value) => Ok(1),\n+        }\n+    });\n+}"}, {"sha": "f267466ac660654e36d5ff415d91084e6dceb997", "filename": "tests/source/configs-multiline_closure_forces_block-true.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Fsource%2Fconfigs-multiline_closure_forces_block-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Fsource%2Fconfigs-multiline_closure_forces_block-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-multiline_closure_forces_block-true.rs?ref=ba6121c4e251d927f52b498f0d50ab5c0748051d", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-multiline_closure_forces_block: true\n+// Option forces multiline closure bodies to be wrapped in a block\n+\n+fn main() {\n+    result.and_then(|maybe_value| match maybe_value {\n+        None => Err(\"oops\"),\n+        Some(value) => Ok(1),\n+    });\n+}"}, {"sha": "4cbec0c7c1cb5fa4ded30aa5c046c087381f810a", "filename": "tests/source/configs-multiline_match_arm_forces_block-false.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Fsource%2Fconfigs-multiline_match_arm_forces_block-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Fsource%2Fconfigs-multiline_match_arm_forces_block-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-multiline_match_arm_forces_block-false.rs?ref=ba6121c4e251d927f52b498f0d50ab5c0748051d", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-multiline_match_arm_forces_block: false\n+// Option forces multiline match arm bodies to be wrapped in a block\n+\n+fn main() {\n+    match lorem {\n+        Lorem::Ipsum => {\n+            if ipsum {\n+                println!(\"dolor\");\n+            }\n+        }\n+        Lorem::Dolor => println!(\"amet\"),\n+    }\n+}"}, {"sha": "602076a4e74bafe665432ddea41efad2f4c906bd", "filename": "tests/source/configs-multiline_match_arm_forces_block-true.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Fsource%2Fconfigs-multiline_match_arm_forces_block-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Fsource%2Fconfigs-multiline_match_arm_forces_block-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-multiline_match_arm_forces_block-true.rs?ref=ba6121c4e251d927f52b498f0d50ab5c0748051d", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-multiline_match_arm_forces_block: true\n+// Option forces multiline match arm bodies to be wrapped in a block\n+\n+fn main() {\n+    match lorem {\n+        Lorem::Ipsum => if ipsum {\n+            println!(\"dolor\");\n+        },\n+        Lorem::Dolor => println!(\"amet\"),\n+    }\n+}"}, {"sha": "7fb3d597da1f90a9534bd63ac9f01b2861431659", "filename": "tests/target/configs-multiline_closure_forces_block-false.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Ftarget%2Fconfigs-multiline_closure_forces_block-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Ftarget%2Fconfigs-multiline_closure_forces_block-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-multiline_closure_forces_block-false.rs?ref=ba6121c4e251d927f52b498f0d50ab5c0748051d", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-multiline_closure_forces_block: false\n+// Option forces multiline closure bodies to be wrapped in a block\n+\n+fn main() {\n+    result.and_then(|maybe_value| match maybe_value {\n+        None => Err(\"oops\"),\n+        Some(value) => Ok(1),\n+    });\n+}"}, {"sha": "01e2de4352779e9d1e843806397119b346cf460e", "filename": "tests/target/configs-multiline_closure_forces_block-true.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Ftarget%2Fconfigs-multiline_closure_forces_block-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Ftarget%2Fconfigs-multiline_closure_forces_block-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-multiline_closure_forces_block-true.rs?ref=ba6121c4e251d927f52b498f0d50ab5c0748051d", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-multiline_closure_forces_block: true\n+// Option forces multiline closure bodies to be wrapped in a block\n+\n+fn main() {\n+    result.and_then(|maybe_value| {\n+        match maybe_value {\n+            None => Err(\"oops\"),\n+            Some(value) => Ok(1),\n+        }\n+    });\n+}"}, {"sha": "3c4c1470b0f7c58b949b870d0f22c45ad4d179f7", "filename": "tests/target/configs-multiline_match_arm_forces_block-false.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Ftarget%2Fconfigs-multiline_match_arm_forces_block-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Ftarget%2Fconfigs-multiline_match_arm_forces_block-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-multiline_match_arm_forces_block-false.rs?ref=ba6121c4e251d927f52b498f0d50ab5c0748051d", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-multiline_match_arm_forces_block: false\n+// Option forces multiline match arm bodies to be wrapped in a block\n+\n+fn main() {\n+    match lorem {\n+        Lorem::Ipsum => if ipsum {\n+            println!(\"dolor\");\n+        },\n+        Lorem::Dolor => println!(\"amet\"),\n+    }\n+}"}, {"sha": "c36d59c315c0abdde3f55af984c3c40500b74ac0", "filename": "tests/target/configs-multiline_match_arm_forces_block-true.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Ftarget%2Fconfigs-multiline_match_arm_forces_block-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6121c4e251d927f52b498f0d50ab5c0748051d/tests%2Ftarget%2Fconfigs-multiline_match_arm_forces_block-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-multiline_match_arm_forces_block-true.rs?ref=ba6121c4e251d927f52b498f0d50ab5c0748051d", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-multiline_match_arm_forces_block: true\n+// Option forces multiline match arm bodies to be wrapped in a block\n+\n+fn main() {\n+    match lorem {\n+        Lorem::Ipsum => {\n+            if ipsum {\n+                println!(\"dolor\");\n+            }\n+        }\n+        Lorem::Dolor => println!(\"amet\"),\n+    }\n+}"}]}