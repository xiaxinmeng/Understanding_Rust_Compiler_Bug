{"sha": "d6aa56f44e062bfe06144318cbd88ac0b58d5814", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YWE1NmY0NGUwNjJiZmUwNjE0NDMxOGNiZDg4YWMwYjU4ZDU4MTQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-10T17:20:35Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-14T06:54:27Z"}, "message": "rustc: split off BodyOwnerKind from MirSource.", "tree": {"sha": "545e79647d5083c6100eed35172ea19dae1a3d40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/545e79647d5083c6100eed35172ea19dae1a3d40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6aa56f44e062bfe06144318cbd88ac0b58d5814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6aa56f44e062bfe06144318cbd88ac0b58d5814", "html_url": "https://github.com/rust-lang/rust/commit/d6aa56f44e062bfe06144318cbd88ac0b58d5814", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6aa56f44e062bfe06144318cbd88ac0b58d5814/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c79e8f4d1d077b7c56875c2eb4dfd64dbc5ebba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c79e8f4d1d077b7c56875c2eb4dfd64dbc5ebba1", "html_url": "https://github.com/rust-lang/rust/commit/c79e8f4d1d077b7c56875c2eb4dfd64dbc5ebba1"}], "stats": {"total": 513, "additions": 238, "deletions": 275}, "files": [{"sha": "1b590c2b2c47735db6c494d3c3214820fe921175", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -448,6 +448,28 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n+    pub fn body_owner_kind(&self, id: NodeId) -> BodyOwnerKind {\n+        // Handle constants in enum discriminants, types, and repeat expressions.\n+        let def_id = self.local_def_id(id);\n+        let def_key = self.def_key(def_id);\n+        if def_key.disambiguated_data.data == DefPathData::Initializer {\n+            return BodyOwnerKind::Const;\n+        }\n+\n+        match self.get(id) {\n+            NodeItem(&Item { node: ItemConst(..), .. }) |\n+            NodeTraitItem(&TraitItem { node: TraitItemKind::Const(..), .. }) |\n+            NodeImplItem(&ImplItem { node: ImplItemKind::Const(..), .. }) => {\n+                BodyOwnerKind::Const\n+            }\n+            NodeItem(&Item { node: ItemStatic(_, m, _), .. }) => {\n+                BodyOwnerKind::Static(m)\n+            }\n+            // Default to function if it's not a constant or static.\n+            _ => BodyOwnerKind::Fn\n+        }\n+    }\n+\n     pub fn ty_param_owner(&self, id: NodeId) -> NodeId {\n         match self.get(id) {\n             NodeItem(&Item { node: ItemTrait(..), .. }) => id,"}, {"sha": "a7206f5d420a513e5d6cb5632caf771479d60026", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -1028,6 +1028,18 @@ impl Body {\n     }\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub enum BodyOwnerKind {\n+    /// Functions and methods.\n+    Fn,\n+\n+    /// Constants and associated constants.\n+    Const,\n+\n+    /// Initializer of a `static` item.\n+    Static(Mutability),\n+}\n+\n /// An expression\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub struct Expr {"}, {"sha": "a7882992d61c4a79e8649abd01486a12e2b0db2f", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -31,7 +31,6 @@ use hir;\n use hir::def_id::DefId;\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use hir::{Block, Arm, Pat, PatKind, Stmt, Expr, Local};\n-use mir::transform::MirSource;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n@@ -1298,7 +1297,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n \n         // The body of the every fn is a root scope.\n         self.cx.parent = self.cx.var_parent;\n-        if let MirSource::Fn(_) = MirSource::from_node(self.tcx, owner_id) {\n+        if let hir::BodyOwnerKind::Fn = self.tcx.hir.body_owner_kind(owner_id) {\n             self.visit_expr(&body.value);\n         } else {\n             // Only functions have an outer terminating (drop) scope, while"}, {"sha": "18c26500dbe18647e186aea2efbf59ece2de4917", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -41,7 +41,6 @@ use syntax_pos::Span;\n mod cache;\n pub mod tcx;\n pub mod visit;\n-pub mod transform;\n pub mod traversal;\n \n /// Types for locals"}, {"sha": "00f8926711e337bc7c7d90a85da0637653bc69b4", "filename": "src/librustc/mir/transform.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c79e8f4d1d077b7c56875c2eb4dfd64dbc5ebba1/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c79e8f4d1d077b7c56875c2eb4dfd64dbc5ebba1/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=c79e8f4d1d077b7c56875c2eb4dfd64dbc5ebba1", "patch": "@@ -1,74 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! See [the README](README.md) for details on writing your own pass.\n-\n-use hir;\n-use hir::def_id::DefId;\n-use hir::map::DefPathData;\n-use mir::Promoted;\n-use ty::TyCtxt;\n-use syntax::ast::NodeId;\n-\n-/// Where a specific Mir comes from.\n-#[derive(Debug, Copy, Clone)]\n-pub enum MirSource {\n-    /// Functions and methods.\n-    Fn(NodeId),\n-\n-    /// Constants and associated constants.\n-    Const(NodeId),\n-\n-    /// Initializer of a `static` item.\n-    Static(NodeId, hir::Mutability),\n-\n-    /// Promoted rvalues within a function.\n-    Promoted(NodeId, Promoted),\n-}\n-\n-impl<'a, 'gcx, 'tcx> MirSource {\n-    pub fn from_local_def_id(tcx: TyCtxt<'a, 'gcx, 'tcx>, def_id: DefId) -> MirSource {\n-        let id = tcx.hir.as_local_node_id(def_id).expect(\"mir source requires local def-id\");\n-        Self::from_node(tcx, id)\n-    }\n-\n-    pub fn from_node(tcx: TyCtxt<'a, 'gcx, 'tcx>, id: NodeId) -> MirSource {\n-        use hir::*;\n-\n-        // Handle constants in enum discriminants, types, and repeat expressions.\n-        let def_id = tcx.hir.local_def_id(id);\n-        let def_key = tcx.def_key(def_id);\n-        if def_key.disambiguated_data.data == DefPathData::Initializer {\n-            return MirSource::Const(id);\n-        }\n-\n-        match tcx.hir.get(id) {\n-            map::NodeItem(&Item { node: ItemConst(..), .. }) |\n-            map::NodeTraitItem(&TraitItem { node: TraitItemKind::Const(..), .. }) |\n-            map::NodeImplItem(&ImplItem { node: ImplItemKind::Const(..), .. }) => {\n-                MirSource::Const(id)\n-            }\n-            map::NodeItem(&Item { node: ItemStatic(_, m, _), .. }) => {\n-                MirSource::Static(id, m)\n-            }\n-            // Default to function if it's not a constant or static.\n-            _ => MirSource::Fn(id)\n-        }\n-    }\n-\n-    pub fn item_id(&self) -> NodeId {\n-        match *self {\n-            MirSource::Fn(id) |\n-            MirSource::Const(id) |\n-            MirSource::Static(id, _) |\n-            MirSource::Promoted(id, _) => id\n-        }\n-    }\n-}"}, {"sha": "deffb85bf8795b147e091d5da8312c18c6d62712", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -18,7 +18,6 @@ use rustc::ty::maps::Providers;\n use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Location, Lvalue, Local};\n use rustc::mir::{Mir, Mutability, Operand, Projection, ProjectionElem, Rvalue};\n use rustc::mir::{Statement, StatementKind, Terminator, TerminatorKind};\n-use rustc::mir::transform::MirSource;\n use transform::nll;\n \n use rustc_data_structures::indexed_set::{self, IdxSetBuf};\n@@ -50,8 +49,7 @@ pub fn provide(providers: &mut Providers) {\n \n fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     let input_mir = tcx.mir_validated(def_id);\n-    let src = MirSource::from_local_def_id(tcx, def_id);\n-    debug!(\"run query mir_borrowck: {}\", tcx.node_path_str(src.item_id()));\n+    debug!(\"run query mir_borrowck: {}\", tcx.item_path_str(def_id));\n \n     if {\n         !tcx.has_attr(def_id, \"rustc_mir_borrowck\") &&\n@@ -63,21 +61,20 @@ fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n \n     tcx.infer_ctxt().enter(|infcx| {\n         let input_mir: &Mir = &input_mir.borrow();\n-        do_mir_borrowck(&infcx, input_mir, def_id, src);\n+        do_mir_borrowck(&infcx, input_mir, def_id);\n     });\n     debug!(\"mir_borrowck done\");\n }\n \n fn do_mir_borrowck<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                    input_mir: &Mir<'gcx>,\n-                                   def_id: DefId,\n-                                   src: MirSource)\n+                                   def_id: DefId)\n {\n     let tcx = infcx.tcx;\n     let attributes = tcx.get_attrs(def_id);\n     let param_env = tcx.param_env(def_id);\n-\n-    let id = src.item_id();\n+    let id = tcx.hir.as_local_node_id(def_id)\n+        .expect(\"do_mir_borrowck: non-local DefId\");\n \n     let move_data: MoveData<'tcx> = match MoveData::gather_moves(input_mir, tcx, param_env) {\n         Ok(move_data) => move_data,\n@@ -117,7 +114,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     let opt_regioncx = if !tcx.sess.opts.debugging_opts.nll {\n         None\n     } else {\n-        Some(nll::compute_regions(infcx, src, mir))\n+        Some(nll::compute_regions(infcx, def_id, mir))\n     };\n \n     let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };"}, {"sha": "0489a03c97e6fc3c377fabbafc4a3ef57a90adb2", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -16,7 +16,6 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::region;\n use rustc::mir::*;\n-use rustc::mir::transform::MirSource;\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n@@ -30,6 +29,7 @@ use syntax::abi::Abi;\n use syntax::ast;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n+use transform::MirSource;\n use util as mir_util;\n \n /// Construct the MIR for a given def-id.\n@@ -83,12 +83,11 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n         _ => unsupported(),\n     };\n \n-    let src = MirSource::from_node(tcx, id);\n     tcx.infer_ctxt().enter(|infcx| {\n-        let cx = Cx::new(&infcx, src);\n+        let cx = Cx::new(&infcx, id);\n         let mut mir = if cx.tables().tainted_by_errors {\n             build::construct_error(cx, body_id)\n-        } else if let MirSource::Fn(id) = src {\n+        } else if let hir::BodyOwnerKind::Fn = cx.body_owner_kind {\n             // fetch the fully liberated fn signature (that is, all bound\n             // types/lifetimes replaced)\n             let fn_hir_id = tcx.hir.node_to_hir_id(id);\n@@ -150,7 +149,8 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n             mem::transmute::<Mir, Mir<'tcx>>(mir)\n         };\n \n-        mir_util::dump_mir(tcx, None, \"mir_map\", &0, src, &mir, |_, _| Ok(()) );\n+        mir_util::dump_mir(tcx, None, \"mir_map\", &0,\n+                           MirSource::item(def_id), &mir, |_, _| Ok(()) );\n \n         mir\n     })\n@@ -214,8 +214,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let span = tcx.hir.span(ctor_id);\n     if let hir::VariantData::Tuple(ref fields, ctor_id) = *v {\n         tcx.infer_ctxt().enter(|infcx| {\n-            let (mut mir, src) =\n-                shim::build_adt_ctor(&infcx, ctor_id, fields, span);\n+            let mut mir = shim::build_adt_ctor(&infcx, ctor_id, fields, span);\n \n             // Convert the Mir to global types.\n             let tcx = infcx.tcx.global_tcx();\n@@ -228,7 +227,9 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 mem::transmute::<Mir, Mir<'tcx>>(mir)\n             };\n \n-            mir_util::dump_mir(tcx, None, \"mir_map\", &0, src, &mir, |_, _| Ok(()) );\n+            mir_util::dump_mir(tcx, None, \"mir_map\", &0,\n+                               MirSource::item(tcx.hir.local_def_id(ctor_id)),\n+                               &mir, |_, _| Ok(()) );\n \n             mir\n         })"}, {"sha": "3c3dabdfa54f1192e33ffca02553774688a94e2e", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -91,9 +91,9 @@ use build::{BlockAnd, BlockAndExtension, Builder, CFG};\n use hair::LintLevel;\n use rustc::middle::region;\n use rustc::ty::{Ty, TyCtxt};\n+use rustc::hir;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::mir::*;\n-use rustc::mir::transform::MirSource;\n use syntax_pos::{Span};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::fx::FxHashMap;\n@@ -596,15 +596,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// When building statics/constants, returns `None` since\n     /// intermediate values do not have to be dropped in that case.\n     pub fn local_scope(&self) -> Option<region::Scope> {\n-        match self.hir.src {\n-            MirSource::Const(_) |\n-            MirSource::Static(..) =>\n+        match self.hir.body_owner_kind {\n+            hir::BodyOwnerKind::Const |\n+            hir::BodyOwnerKind::Static(_) =>\n                 // No need to free storage in this context.\n                 None,\n-            MirSource::Fn(_) =>\n+            hir::BodyOwnerKind::Fn =>\n                 Some(self.topmost_scope()),\n-            MirSource::Promoted(..) =>\n-                bug!(),\n         }\n     }\n "}, {"sha": "50264238aacb21850cc41c53ddf1835a92a77375", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -15,7 +15,6 @@\n //!\n \n use hair::*;\n-use rustc::mir::transform::MirSource;\n \n use rustc::middle::const_val::{ConstEvalErr, ConstVal};\n use rustc_const_eval::ConstContext;\n@@ -51,30 +50,29 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     /// `const`, or the body of a `const fn`.\n     constness: hir::Constness,\n \n-    /// What are we compiling?\n-    pub src: MirSource,\n+    /// What kind of body is being compiled.\n+    pub body_owner_kind: hir::BodyOwnerKind,\n \n     /// True if this constant/function needs overflow checks.\n     check_overflow: bool,\n }\n \n impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-               src: MirSource) -> Cx<'a, 'gcx, 'tcx> {\n-        let constness = match src {\n-            MirSource::Const(_) |\n-            MirSource::Static(..) => hir::Constness::Const,\n-            MirSource::Fn(id) => {\n-                let fn_like = FnLikeNode::from_node(infcx.tcx.hir.get(id));\n+               src_id: ast::NodeId) -> Cx<'a, 'gcx, 'tcx> {\n+        let tcx = infcx.tcx;\n+        let src_def_id = tcx.hir.local_def_id(src_id);\n+        let body_owner_kind = tcx.hir.body_owner_kind(src_id);\n+\n+        let constness = match body_owner_kind {\n+            hir::BodyOwnerKind::Const |\n+            hir::BodyOwnerKind::Static(_) => hir::Constness::Const,\n+            hir::BodyOwnerKind::Fn => {\n+                let fn_like = FnLikeNode::from_node(infcx.tcx.hir.get(src_id));\n                 fn_like.map_or(hir::Constness::NotConst, |f| f.constness())\n             }\n-            MirSource::Promoted(..) => bug!(),\n         };\n \n-        let tcx = infcx.tcx;\n-        let src_id = src.item_id();\n-        let src_def_id = tcx.hir.local_def_id(src_id);\n-\n         let attrs = tcx.hir.attrs(src_id);\n \n         // Some functions always have overflow checks enabled,\n@@ -99,7 +97,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             region_scope_tree: tcx.region_scope_tree(src_def_id),\n             tables: tcx.typeck_tables_of(src_def_id),\n             constness,\n-            src,\n+            body_owner_kind,\n             check_overflow,\n         }\n     }"}, {"sha": "e1f0e01b88c7872c96656cd6c919e6bf382275fd", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -13,7 +13,6 @@ use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n-use rustc::mir::transform::MirSource;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::ty::maps::Providers;\n@@ -826,7 +825,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n                                       ctor_id: ast::NodeId,\n                                       fields: &[hir::StructField],\n                                       span: Span)\n-                                      -> (Mir<'tcx>, MirSource)\n+                                      -> Mir<'tcx>\n {\n     let tcx = infcx.tcx;\n     let def_id = tcx.hir.local_def_id(ctor_id);\n@@ -875,7 +874,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n         is_cleanup: false\n     };\n \n-    let mir = Mir::new(\n+    Mir::new(\n         IndexVec::from_elem_n(start_block, 1),\n         IndexVec::from_elem_n(\n             VisibilityScopeData { span: span, parent_scope: None }, 1\n@@ -888,6 +887,5 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n         sig.inputs().len(),\n         vec![],\n         span\n-    );\n-    (mir, MirSource::Fn(ctor_id))\n+    )\n }"}, {"sha": "5be369f85bc2169cc1a92ae31230621bb455b3c8", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -10,9 +10,8 @@\n \n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n-use rustc::mir::transform::MirSource;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n \n #[derive(PartialEq)]\n pub enum AddCallGuards {"}, {"sha": "c6f2154eaa471e34f29114934b91a816a008b8ce", "filename": "src/librustc_mir/transform/add_validation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -17,9 +17,8 @@\n use rustc::ty::{self, TyCtxt, RegionKind};\n use rustc::hir;\n use rustc::mir::*;\n-use rustc::mir::transform::MirSource;\n use rustc::middle::region;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n \n pub struct AddValidation;\n \n@@ -107,8 +106,9 @@ fn fn_contains_unsafe<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource) ->\n         }\n     }\n \n-    let fn_like = match src {\n-        MirSource::Fn(node_id) => {\n+    let node_id = tcx.hir.as_local_node_id(src.def_id).unwrap();\n+    let fn_like = match tcx.hir.body_owner_kind(node_id) {\n+        hir::BodyOwnerKind::Fn => {\n             match FnLikeNode::from_node(tcx.hir.get(node_id)) {\n                 Some(fn_like) => fn_like,\n                 None => return false, // e.g. struct ctor shims -- such auto-generated code cannot"}, {"sha": "7986313aa81346526da86a6205cbd71d5a8cb5e7", "filename": "src/librustc_mir/transform/clean_end_regions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -22,11 +22,10 @@\n use rustc_data_structures::fx::FxHashSet;\n \n use rustc::middle::region;\n-use rustc::mir::transform::MirSource;\n use rustc::mir::{BasicBlock, Location, Mir, Rvalue, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, Visitor, TyContext};\n use rustc::ty::{Ty, RegionKind, TyCtxt};\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n \n pub struct CleanEndRegions;\n "}, {"sha": "2966290c2964c145ec98da79b5c3359b14cf6e00", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -29,11 +29,11 @@\n //! (non-mutating) use of `SRC`. These restrictions are conservative and may be relaxed in the\n //! future.\n \n+use rustc::hir;\n use rustc::mir::{Constant, Local, LocalKind, Location, Lvalue, Mir, Operand, Rvalue, StatementKind};\n-use rustc::mir::transform::MirSource;\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n use util::def_use::DefUseAnalysis;\n \n pub struct CopyPropagation;\n@@ -43,19 +43,17 @@ impl MirPass for CopyPropagation {\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        match source {\n-            MirSource::Const(_) => {\n-                // Don't run on constants, because constant qualification might reject the\n-                // optimized IR.\n-                return\n-            }\n-            MirSource::Static(..) | MirSource::Promoted(..) => {\n-                // Don't run on statics and promoted statics, because trans might not be able to\n-                // evaluate the optimized IR.\n-                return\n-            }\n-            MirSource::Fn(function_node_id) => {\n-                if tcx.is_const_fn(tcx.hir.local_def_id(function_node_id)) {\n+        // Don't run on constant MIR, because trans might not be able to\n+        // evaluate the modified MIR.\n+        // FIXME(eddyb) Remove check after miri is merged.\n+        let id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n+        match (tcx.hir.body_owner_kind(id), source.promoted) {\n+            (_, Some(_)) |\n+            (hir::BodyOwnerKind::Const, _) |\n+            (hir::BodyOwnerKind::Static(_), _) => return,\n+\n+            (hir::BodyOwnerKind::Fn, _) => {\n+                if tcx.is_const_fn(source.def_id) {\n                     // Don't run on const functions, as, again, trans might not be able to evaluate\n                     // the optimized IR.\n                     return"}, {"sha": "61b4716c56409b20d8afc66b1f9d1c6e09b020d4", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc::hir;\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n-use rustc::mir::transform::MirSource;\n use rustc_data_structures::indexed_vec::Idx;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n \n pub struct Deaggregator;\n \n@@ -21,16 +21,21 @@ impl MirPass for Deaggregator {\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        let node_id = source.item_id();\n-        let node_path = tcx.item_path_str(tcx.hir.local_def_id(node_id));\n+        let node_path = tcx.item_path_str(source.def_id);\n         debug!(\"running on: {:?}\", node_path);\n         // we only run when mir_opt_level > 2\n         if tcx.sess.opts.debugging_opts.mir_opt_level <= 2 {\n             return;\n         }\n \n-        // Do not trigger on constants.  Could be revised in future\n-        if let MirSource::Fn(_) = source {} else { return; }\n+        // Don't run on constant MIR, because trans might not be able to\n+        // evaluate the modified MIR.\n+        // FIXME(eddyb) Remove check after miri is merged.\n+        let id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n+        match (tcx.hir.body_owner_kind(id), source.promoted) {\n+            (hir::BodyOwnerKind::Fn, None) => {},\n+            _ => return\n+        }\n         // In fact, we might not want to trigger in other cases.\n         // Ex: when we could use SROA.  See issue #35259\n "}, {"sha": "98753eaa5a354442ddbb1bca2ef9a0c4c9eeac23", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -16,10 +16,9 @@ use std::fs::File;\n use std::io;\n \n use rustc::mir::Mir;\n-use rustc::mir::transform::MirSource;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::ty::TyCtxt;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n use util as mir_util;\n \n pub struct Marker(pub &'static str);"}, {"sha": "c24256cc92cde133ec0005b12040b0799f68a456", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -15,14 +15,14 @@ use dataflow::{on_all_children_bits, on_all_drop_children_bits};\n use dataflow::{drop_flag_effects_for_location, on_lookup_result_bits};\n use dataflow::MoveDataParamEnv;\n use dataflow;\n+use rustc::hir;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n-use rustc::mir::transform::MirSource;\n use rustc::middle::const_val::ConstVal;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::Idx;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n use util::patch::MirPatch;\n use util::elaborate_drops::{DropFlagState, Unwind, elaborate_drop};\n use util::elaborate_drops::{DropElaborator, DropStyle, DropFlagMode};\n@@ -40,12 +40,16 @@ impl MirPass for ElaborateDrops {\n                           mir: &mut Mir<'tcx>)\n     {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, mir.span);\n-        match src {\n-            MirSource::Fn(..) => {},\n+\n+        // Don't run on constant MIR, because trans might not be able to\n+        // evaluate the modified MIR.\n+        // FIXME(eddyb) Remove check after miri is merged.\n+        let id = tcx.hir.as_local_node_id(src.def_id).unwrap();\n+        match (tcx.hir.body_owner_kind(id), src.promoted) {\n+            (hir::BodyOwnerKind::Fn, None) => {},\n             _ => return\n         }\n-        let id = src.item_id();\n-        let param_env = tcx.param_env(tcx.hir.local_def_id(id));\n+        let param_env = tcx.param_env(src.def_id);\n         let move_data = MoveData::gather_moves(mir, tcx, param_env).unwrap();\n         let elaborate_patch = {\n             let mir = &*mir;"}, {"sha": "dfa048e2e4bcf6167bad93004fd68be44bd402d9", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -18,8 +18,7 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, TyContext};\n-use rustc::mir::transform::MirSource;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n \n struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "7d12d50355b598a8a16459fce911f84df3ca010f", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -63,7 +63,6 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n-use rustc::mir::transform::MirSource;\n use rustc::mir::visit::{LvalueContext, Visitor, MutVisitor};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty, GeneratorInterior};\n use rustc::ty::subst::{Kind, Substs};\n@@ -76,7 +75,7 @@ use std::collections::HashMap;\n use std::borrow::Cow;\n use std::iter::once;\n use std::mem;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n use transform::simplify;\n use transform::no_landing_pads::no_landing_pads;\n use dataflow::{self, MaybeStorageLive, state_for_location};\n@@ -339,7 +338,7 @@ fn locals_live_across_suspend_points<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                (liveness::LocalSet,\n                                                 HashMap<BasicBlock, liveness::LocalSet>) {\n     let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n-    let node_id = source.item_id();\n+    let node_id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n     let analysis = MaybeStorageLive::new(mir);\n     let storage_live =\n         dataflow::do_dataflow(tcx, mir, node_id, &[], &dead_unwinds, analysis,\n@@ -764,8 +763,8 @@ impl MirPass for StateTransform {\n \n         assert!(mir.generator_drop.is_none());\n \n-        let node_id = source.item_id();\n-        let def_id = tcx.hir.local_def_id(source.item_id());\n+        let def_id = source.def_id;\n+        let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n         let hir_id = tcx.hir.node_to_hir_id(node_id);\n \n         // Get the interior types which typeck computed"}, {"sha": "5dec6177b36c27696aa6651c71fbad62fcabc412", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -10,19 +10,19 @@\n \n //! Inlining pass for MIR functions\n \n+use rustc::hir;\n use rustc::hir::def_id::DefId;\n \n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n use rustc::mir::*;\n-use rustc::mir::transform::MirSource;\n use rustc::mir::visit::*;\n use rustc::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::subst::{Subst,Substs};\n \n use std::collections::VecDeque;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n \n use syntax::{attr};\n@@ -78,12 +78,12 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         let mut callsites = VecDeque::new();\n \n-        let param_env;\n+        let param_env = self.tcx.param_env(self.source.def_id);\n \n         // Only do inlining into fn bodies.\n-        if let MirSource::Fn(caller_id) = self.source {\n-            let caller_def_id = self.tcx.hir.local_def_id(caller_id);\n-            param_env = self.tcx.param_env(caller_def_id);\n+        let id = self.tcx.hir.as_local_node_id(self.source.def_id).unwrap();\n+        let body_owner_kind = self.tcx.hir.body_owner_kind(id);\n+        if let (hir::BodyOwnerKind::Fn, None) = (body_owner_kind, self.source.promoted) {\n \n             for (bb, bb_data) in caller_mir.basic_blocks().iter_enumerated() {\n                 // Don't inline calls that are in cleanup blocks.\n@@ -252,8 +252,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         // FIXME: Give a bonus to functions with only a single caller\n \n-        let def_id = tcx.hir.local_def_id(self.source.item_id());\n-        let param_env = tcx.param_env(def_id);\n+        let param_env = tcx.param_env(self.source.def_id);\n \n         let mut first_block = true;\n         let mut cost = 0;"}, {"sha": "b091f2f4b6d78095f9d179d88dc61a5c7326b87c", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -11,13 +11,12 @@\n //! Performs various peephole optimizations.\n \n use rustc::mir::{Location, Lvalue, Mir, Operand, ProjectionElem, Rvalue, Local};\n-use rustc::mir::transform::MirSource;\n use rustc::mir::visit::{MutVisitor, Visitor};\n use rustc::ty::TyCtxt;\n use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::indexed_vec::Idx;\n use std::mem;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n \n pub struct InstCombine;\n "}, {"sha": "441f9be9be1f421057dd9ffffd5c0698b43db65c", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -10,8 +10,7 @@\n \n use build;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::mir::Mir;\n-use rustc::mir::transform::MirSource;\n+use rustc::mir::{Mir, Promoted};\n use rustc::ty::TyCtxt;\n use rustc::ty::maps::Providers;\n use rustc::ty::steal::Steal;\n@@ -108,6 +107,24 @@ fn mir_built<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n     tcx.alloc_steal_mir(mir)\n }\n \n+/// Where a specific Mir comes from.\n+#[derive(Debug, Copy, Clone)]\n+pub struct MirSource {\n+    pub def_id: DefId,\n+\n+    /// If `Some`, this is a promoted rvalue within the parent function.\n+    pub promoted: Option<Promoted>,\n+}\n+\n+impl MirSource {\n+    pub fn item(def_id: DefId) -> Self {\n+        MirSource {\n+            def_id,\n+            promoted: None\n+        }\n+    }\n+}\n+\n /// Generates a default name for the pass based on the name of the\n /// type `T`.\n pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n@@ -133,9 +150,13 @@ pub trait MirPass {\n                           mir: &mut Mir<'tcx>);\n }\n \n-pub macro run_passes($tcx:ident, $mir:ident, $source:ident, $suite_index:expr; $($pass:expr,)*) {{\n+pub macro run_passes($tcx:ident, $mir:ident, $def_id:ident, $suite_index:expr; $($pass:expr,)*) {{\n     let suite_index: usize = $suite_index;\n-    let run_passes = |mir: &mut _, source| {\n+    let run_passes = |mir: &mut _, promoted| {\n+        let source = MirSource {\n+            def_id: $def_id,\n+            promoted\n+        };\n         let mut index = 0;\n         let mut run_pass = |pass: &MirPass| {\n             let run_hooks = |mir: &_, index, is_after| {\n@@ -150,10 +171,11 @@ pub macro run_passes($tcx:ident, $mir:ident, $source:ident, $suite_index:expr; $\n         };\n         $(run_pass(&$pass);)*\n     };\n-    run_passes(&mut $mir, $source);\n+\n+    run_passes(&mut $mir, None);\n \n     for (index, promoted_mir) in $mir.promoted.iter_enumerated_mut() {\n-        run_passes(promoted_mir, MirSource::Promoted($source.item_id(), index));\n+        run_passes(promoted_mir, Some(index));\n \n         // Let's make sure we don't miss any nested instances\n         assert!(promoted_mir.promoted.is_empty());\n@@ -165,8 +187,7 @@ fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n     let _ = tcx.unsafety_check_result(def_id);\n \n     let mut mir = tcx.mir_built(def_id).steal();\n-    let source = MirSource::from_local_def_id(tcx, def_id);\n-    run_passes![tcx, mir, source, 0;\n+    run_passes![tcx, mir, def_id, 0;\n         // Remove all `EndRegion` statements that are not involved in borrows.\n         clean_end_regions::CleanEndRegions,\n \n@@ -179,15 +200,15 @@ fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n }\n \n fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n-    let source = MirSource::from_local_def_id(tcx, def_id);\n-    if let MirSource::Const(_) = source {\n+    let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n+    if let hir::BodyOwnerKind::Const = tcx.hir.body_owner_kind(node_id) {\n         // Ensure that we compute the `mir_const_qualif` for constants at\n         // this point, before we steal the mir-const result.\n         let _ = tcx.mir_const_qualif(def_id);\n     }\n \n     let mut mir = tcx.mir_const(def_id).steal();\n-    run_passes![tcx, mir, source, 1;\n+    run_passes![tcx, mir, def_id, 1;\n         // What we need to run borrowck etc.\n         qualify_consts::QualifyAndPromoteConstants,\n         simplify::SimplifyCfg::new(\"qualify-consts\"),\n@@ -202,8 +223,7 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     let _ = tcx.borrowck(def_id);\n \n     let mut mir = tcx.mir_validated(def_id).steal();\n-    let source = MirSource::from_local_def_id(tcx, def_id);\n-    run_passes![tcx, mir, source, 2;\n+    run_passes![tcx, mir, def_id, 2;\n         no_landing_pads::NoLandingPads,\n         simplify_branches::SimplifyBranches::new(\"initial\"),\n "}, {"sha": "b095a198d8f03f34320d87398603e58eeb570f25", "filename": "src/librustc_mir/transform/nll/constraint_generation.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -10,7 +10,6 @@\n \n use rustc::hir;\n use rustc::mir::{BasicBlock, BorrowKind, Location, Lvalue, Mir, Rvalue, Statement, StatementKind};\n-use rustc::mir::transform::MirSource;\n use rustc::mir::visit::Visitor;\n use rustc::mir::Lvalue::Projection;\n use rustc::mir::{LvalueProjection, ProjectionElem};\n@@ -31,15 +30,15 @@ pub(super) fn generate_constraints<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     regioncx: &mut RegionInferenceContext<'tcx>,\n     mir: &Mir<'tcx>,\n-    mir_source: MirSource,\n+    param_env: ty::ParamEnv<'tcx>,\n     liveness: &LivenessResults,\n ) {\n     ConstraintGeneration {\n         infcx,\n         regioncx,\n         mir,\n         liveness,\n-        mir_source,\n+        param_env,\n     }.add_constraints();\n }\n \n@@ -48,7 +47,7 @@ struct ConstraintGeneration<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     regioncx: &'cx mut RegionInferenceContext<'tcx>,\n     mir: &'cx Mir<'tcx>,\n     liveness: &'cx LivenessResults,\n-    mir_source: MirSource,\n+    param_env: ty::ParamEnv<'tcx>,\n }\n \n impl<'cx, 'gcx, 'tcx> ConstraintGeneration<'cx, 'gcx, 'tcx> {\n@@ -153,13 +152,11 @@ impl<'cx, 'gcx, 'tcx> ConstraintGeneration<'cx, 'gcx, 'tcx> {\n             // `dtorck_constraint_for_ty` could not resolve (e.g.,\n             // associated types and parameters). We need to normalize\n             // associated types here and possibly recursively process.\n-            let def_id = tcx.hir.local_def_id(self.mir_source.item_id());\n-            let param_env = self.infcx.tcx.param_env(def_id);\n             for ty in dtorck_types {\n                 // FIXME -- I think that this may disregard some region obligations\n                 // or something. Do we care? -nmatsakis\n                 let cause = ObligationCause::dummy();\n-                match traits::fully_normalize(self.infcx, cause, param_env, &ty) {\n+                match traits::fully_normalize(self.infcx, cause, self.param_env, &ty) {\n                     Ok(ty) => match ty.sty {\n                         ty::TyParam(..) | ty::TyProjection(..) | ty::TyAnon(..) => {\n                             self.add_regular_live_constraint(ty, location);"}, {"sha": "554d212880ea9e9e5a3f199869e7b7a4cd4b93f3", "filename": "src/librustc_mir/transform/nll/free_regions.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fnll%2Ffree_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fnll%2Ffree_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Ffree_regions.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -22,9 +22,9 @@\n //! The code in this file doesn't *do anything* with those results; it\n //! just returns them for other code to use.\n \n+use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::middle::free_region::FreeRegionMap;\n-use rustc::mir::transform::MirSource;\n use rustc::ty;\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::FxHashMap;\n@@ -43,12 +43,9 @@ pub struct FreeRegions<'tcx> {\n \n pub fn free_regions<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-    source: MirSource,\n+    item_def_id: DefId,\n ) -> FreeRegions<'tcx> {\n-    debug!(\"free_regions(source={:?})\", source);\n-\n-    let item_id = source.item_id();\n-    let item_def_id = infcx.tcx.hir.local_def_id(item_id);\n+    debug!(\"free_regions(item_def_id={:?})\", item_def_id);\n \n     let mut indices = FxHashMap();\n \n@@ -63,6 +60,7 @@ pub fn free_regions<'a, 'gcx, 'tcx>(\n     // Extract the late-bound regions. Use the liberated fn sigs,\n     // where the late-bound regions will have been converted into free\n     // regions, and add them to the map.\n+    let item_id = infcx.tcx.hir.as_local_node_id(item_def_id).unwrap();\n     let fn_hir_id = infcx.tcx.hir.node_to_hir_id(item_id);\n     let tables = infcx.tcx.typeck_tables_of(item_def_id);\n     let fn_sig = tables.liberated_fn_sigs()[fn_hir_id].clone();"}, {"sha": "f27d0a8da16ccfcd8b6d6326356477aee04ad2dd", "filename": "src/librustc_mir/transform/nll/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::ty::{self, RegionKind};\n+use rustc::hir::def_id::DefId;\n use rustc::mir::Mir;\n-use rustc::mir::transform::MirSource;\n use rustc::infer::InferCtxt;\n+use rustc::ty::{self, RegionKind};\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use std::collections::BTreeSet;\n+use transform::MirSource;\n use util::liveness::{self, LivenessMode, LivenessResult, LocalSet};\n \n use util as mir_util;\n@@ -34,11 +35,11 @@ mod renumber;\n /// This may result in errors being reported.\n pub fn compute_regions<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-    source: MirSource,\n+    def_id: DefId,\n     mir: &mut Mir<'tcx>,\n ) -> RegionInferenceContext<'tcx> {\n     // Compute named region information.\n-    let free_regions = &free_regions::free_regions(infcx, source);\n+    let free_regions = &free_regions::free_regions(infcx, def_id);\n \n     // Replace all regions with fresh inference variables.\n     let num_region_variables = renumber::renumber_mir(infcx, free_regions, mir);\n@@ -65,12 +66,13 @@ pub fn compute_regions<'a, 'gcx, 'tcx>(\n     // Create the region inference context, generate the constraints,\n     // and then solve them.\n     let mut regioncx = RegionInferenceContext::new(free_regions, num_region_variables, mir);\n-    constraint_generation::generate_constraints(infcx, &mut regioncx, &mir, source, liveness);\n+    let param_env = infcx.tcx.param_env(def_id);\n+    constraint_generation::generate_constraints(infcx, &mut regioncx, &mir, param_env, liveness);\n     regioncx.solve(infcx, &mir);\n \n     // Dump MIR results into a file, if that is enabled. This let us\n     // write unit-tests.\n-    dump_mir_results(infcx, liveness, source, &mir, &regioncx);\n+    dump_mir_results(infcx, liveness, MirSource::item(def_id), &mir, &regioncx);\n \n     regioncx\n }"}, {"sha": "dd5898cb561b59466613dbfaed23d9762a6bac60", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -14,8 +14,7 @@\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc::mir::visit::MutVisitor;\n-use rustc::mir::transform::MirSource;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n \n pub struct NoLandingPads;\n "}, {"sha": "ab29134c3254189f3989e0bc975b65571a82c893", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -26,7 +26,6 @@ use rustc::ty::cast::CastTy;\n use rustc::ty::maps::Providers;\n use rustc::mir::*;\n use rustc::mir::traversal::ReversePostorder;\n-use rustc::mir::transform::MirSource;\n use rustc::mir::visit::{LvalueContext, Visitor};\n use rustc::middle::lang_items;\n use syntax::abi::Abi;\n@@ -38,7 +37,7 @@ use std::fmt;\n use std::rc::Rc;\n use std::usize;\n \n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n use super::promote_consts::{self, Candidate, TempState};\n \n bitflags! {\n@@ -962,24 +961,27 @@ impl MirPass for QualifyAndPromoteConstants {\n             return;\n         }\n \n-        let id = src.item_id();\n-        let def_id = tcx.hir.local_def_id(id);\n+        if src.promoted.is_some() {\n+            return;\n+        }\n+\n+        let def_id = src.def_id;\n+        let id = tcx.hir.as_local_node_id(def_id).unwrap();\n         let mut const_promoted_temps = None;\n-        let mode = match src {\n-            MirSource::Fn(_) => {\n+        let mode = match tcx.hir.body_owner_kind(id) {\n+            hir::BodyOwnerKind::Fn => {\n                 if tcx.is_const_fn(def_id) {\n                     Mode::ConstFn\n                 } else {\n                     Mode::Fn\n                 }\n             }\n-            MirSource::Const(_) => {\n+            hir::BodyOwnerKind::Const => {\n                 const_promoted_temps = Some(tcx.mir_const_qualif(def_id).1);\n                 Mode::Const\n             }\n-            MirSource::Static(_, hir::MutImmutable) => Mode::Static,\n-            MirSource::Static(_, hir::MutMutable) => Mode::StaticMut,\n-            MirSource::Promoted(..) => return\n+            hir::BodyOwnerKind::Static(hir::MutImmutable) => Mode::Static,\n+            hir::BodyOwnerKind::Static(hir::MutMutable) => Mode::StaticMut,\n         };\n \n         if mode == Mode::Fn || mode == Mode::ConstFn {"}, {"sha": "32d4a14c7f75730d7dc124959da4b3c42163e173", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -14,10 +14,9 @@ use syntax_pos::Span;\n \n use rustc::ty::{self, TyCtxt};\n use rustc::mir::{self, Mir, Location};\n-use rustc::mir::transform::MirSource;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::Idx;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n \n use dataflow::do_dataflow;\n use dataflow::MoveDataParamEnv;\n@@ -35,8 +34,8 @@ pub struct SanityCheck;\n impl MirPass for SanityCheck {\n     fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           src: MirSource, mir: &mut Mir<'tcx>) {\n-        let id = src.item_id();\n-        let def_id = tcx.hir.local_def_id(id);\n+        let def_id = src.def_id;\n+        let id = tcx.hir.as_local_node_id(def_id).unwrap();\n         if !tcx.has_attr(def_id, \"rustc_mir_borrowck\") {\n             debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.item_path_str(def_id));\n             return;"}, {"sha": "02ae6328461da2542bfb53d702f2c0a8ea7c1db8", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -41,10 +41,9 @@ use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n-use rustc::mir::transform::MirSource;\n use rustc::mir::visit::{MutVisitor, Visitor, LvalueContext};\n use std::borrow::Cow;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n \n pub struct SimplifyCfg { label: String }\n "}, {"sha": "20c33bab1aacb2b5ebae5e75fc6be120e34e56da", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -12,9 +12,8 @@\n \n use rustc::ty::{self, TyCtxt};\n use rustc::middle::const_val::ConstVal;\n-use rustc::mir::transform::MirSource;\n use rustc::mir::*;\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n \n use std::borrow::Cow;\n "}, {"sha": "dc462cd9c74fc775ce1408148525273b2424918b", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -18,12 +18,11 @@ use rustc::ty::{self, Ty, TyCtxt, TypeVariants};\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::tcx::LvalueTy;\n-use rustc::mir::transform::MirSource;\n use rustc::mir::visit::Visitor;\n use std::fmt;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n-use transform::MirPass;\n+use transform::{MirPass, MirSource};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -795,8 +794,8 @@ impl MirPass for TypeckMir {\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           src: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        let item_id = src.item_id();\n-        let def_id = tcx.hir.local_def_id(item_id);\n+        let def_id = src.def_id;\n+        let id = tcx.hir.as_local_node_id(def_id).unwrap();\n         debug!(\"run_pass: {:?}\", def_id);\n \n         if tcx.sess.err_count() > 0 {\n@@ -806,7 +805,7 @@ impl MirPass for TypeckMir {\n         }\n         let param_env = tcx.param_env(def_id);\n         tcx.infer_ctxt().enter(|infcx| {\n-            let mut checker = TypeChecker::new(&infcx, item_id, param_env);\n+            let mut checker = TypeChecker::new(&infcx, id, param_env);\n             {\n                 let mut verifier = TypeVerifier::new(&mut checker, mir);\n                 verifier.visit_mir(mir);"}, {"sha": "b3c7b4bce0353dd310ae9b2e628384f65de5e2dc", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -14,7 +14,6 @@ use rustc::mir::*;\n use rustc::ty::TyCtxt;\n use std::fmt::Debug;\n use std::io::{self, Write};\n-use syntax::ast::NodeId;\n \n use rustc_data_structures::indexed_vec::Idx;\n \n@@ -28,29 +27,28 @@ pub fn write_mir_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n     where W: Write\n {\n     for def_id in dump_mir_def_ids(tcx, single) {\n-        let nodeid = tcx.hir.as_local_node_id(def_id).unwrap();\n         let mir = &tcx.optimized_mir(def_id);\n-        write_mir_fn_graphviz(tcx, nodeid, mir, w)?;\n+        write_mir_fn_graphviz(tcx, def_id, mir, w)?;\n     }\n     Ok(())\n }\n \n /// Write a graphviz DOT graph of the MIR.\n pub fn write_mir_fn_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n-                                      nodeid: NodeId,\n+                                      def_id: DefId,\n                                       mir: &Mir,\n                                       w: &mut W) -> io::Result<()>\n     where W: Write\n {\n-    writeln!(w, \"digraph Mir_{} {{\", nodeid)?;\n+    writeln!(w, \"digraph Mir_{} {{\", tcx.hir.as_local_node_id(def_id).unwrap())?;\n \n     // Global graph properties\n     writeln!(w, r#\"    graph [fontname=\"monospace\"];\"#)?;\n     writeln!(w, r#\"    node [fontname=\"monospace\"];\"#)?;\n     writeln!(w, r#\"    edge [fontname=\"monospace\"];\"#)?;\n \n     // Graph label\n-    write_graph_label(tcx, nodeid, mir, w)?;\n+    write_graph_label(tcx, def_id, mir, w)?;\n \n     // Nodes\n     for (block, _) in mir.basic_blocks().iter_enumerated() {\n@@ -138,11 +136,11 @@ fn write_edges<W: Write>(source: BasicBlock, mir: &Mir, w: &mut W) -> io::Result\n /// will appear below the graph, showing the type of the `fn` this MIR represents and the types of\n /// all the variables and temporaries.\n fn write_graph_label<'a, 'gcx, 'tcx, W: Write>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                               nid: NodeId,\n+                                               def_id: DefId,\n                                                mir: &Mir,\n                                                w: &mut W)\n                                                -> io::Result<()> {\n-    write!(w, \"    label=<fn {}(\", dot::escape_html(&tcx.node_path_str(nid)))?;\n+    write!(w, \"    label=<fn {}(\", dot::escape_html(&tcx.item_path_str(def_id)))?;\n \n     // fn argument types.\n     for (i, arg) in mir.args_iter().enumerate() {"}, {"sha": "4b165a71c81b37639ac72d1e6e7f8c742da826dc", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -38,12 +38,12 @@ use rustc::mir::visit::{LvalueContext, Visitor};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use util::pretty::{dump_enabled, write_basic_block, write_mir_intro};\n-use rustc::mir::transform::MirSource;\n use rustc::ty::item_path;\n use std::path::{Path, PathBuf};\n use std::fs;\n use rustc::ty::TyCtxt;\n use std::io::{self, Write};\n+use transform::MirSource;\n \n pub type LocalSet = IdxSetBuf<Local>;\n \n@@ -357,7 +357,7 @@ pub fn dump_mir<'a, 'tcx>(\n     }\n     let node_path = item_path::with_forced_impl_filename_line(|| {\n         // see notes on #41697 below\n-        tcx.item_path_str(tcx.hir.local_def_id(source.item_id()))\n+        tcx.item_path_str(source.def_id)\n     });\n     dump_matched_mir_node(tcx, pass_name, &node_path, source, mir, result);\n }\n@@ -375,7 +375,8 @@ fn dump_matched_mir_node<'a, 'tcx>(\n         let p = Path::new(file_dir);\n         file_path.push(p);\n     };\n-    let file_name = format!(\"rustc.node{}{}-liveness.mir\", source.item_id(), pass_name);\n+    let item_id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n+    let file_name = format!(\"rustc.node{}{}-liveness.mir\", item_id, pass_name);\n     file_path.push(&file_name);\n     let _ = fs::File::create(&file_path).and_then(|mut file| {\n         writeln!(file, \"// MIR local liveness analysis for `{}`\", node_path)?;"}, {"sha": "5dc7a324c2d4511f78fc7ae86bf33d43b35d5178", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -11,7 +11,6 @@\n use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::*;\n-use rustc::mir::transform::MirSource;\n use rustc::ty::TyCtxt;\n use rustc::ty::item_path;\n use rustc_data_structures::fx::FxHashMap;\n@@ -21,6 +20,7 @@ use std::fs;\n use std::io::{self, Write};\n use std::path::{PathBuf, Path};\n use super::graphviz::write_mir_fn_graphviz;\n+use transform::MirSource;\n \n const INDENT: &'static str = \"    \";\n /// Alignment for lining up comments following MIR statements\n@@ -71,7 +71,7 @@ where\n     }\n \n     let node_path = item_path::with_forced_impl_filename_line(|| { // see notes on #41697 below\n-        tcx.item_path_str(tcx.hir.local_def_id(source.item_id()))\n+        tcx.item_path_str(source.def_id)\n     });\n     dump_matched_mir_node(tcx, pass_num, pass_name, &node_path,\n                           disambiguator, source, mir, extra_data);\n@@ -85,9 +85,8 @@ pub fn dump_enabled<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         None => return false,\n         Some(ref filters) => filters,\n     };\n-    let node_id = source.item_id();\n     let node_path = item_path::with_forced_impl_filename_line(|| { // see notes on #41697 below\n-        tcx.item_path_str(tcx.hir.local_def_id(node_id))\n+        tcx.item_path_str(source.def_id)\n     });\n     filters.split(\"&\")\n            .any(|filter| {\n@@ -112,9 +111,9 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n where\n     F: FnMut(PassWhere, &mut Write) -> io::Result<()>\n {\n-    let promotion_id = match source {\n-        MirSource::Promoted(_, id) => format!(\"-{:?}\", id),\n-        _ => String::new()\n+    let promotion_id = match source.promoted {\n+        Some(id) => format!(\"-{:?}\", id),\n+        None => String::new()\n     };\n \n     let pass_num = if tcx.sess.opts.debugging_opts.dump_mir_exclude_pass_number {\n@@ -133,11 +132,9 @@ where\n     };\n \n     let _ = fs::create_dir_all(&file_path);\n-    let function_name  = tcx.hir.def_path_from_id(source.item_id())\n-        .map(|d| d.to_filename_friendly_no_crate())\n-        .unwrap_or(format!(\"node{}\", source.item_id()));\n+    let item_name = tcx.hir.def_path(source.def_id).to_filename_friendly_no_crate();\n     let file_name = format!(\"rustc.{}{}{}.{}.{}.mir\",\n-                            function_name, promotion_id, pass_num, pass_name, disambiguator);\n+                            item_name, promotion_id, pass_num, pass_name, disambiguator);\n     file_path.push(&file_name);\n     let _ = fs::File::create(&file_path).and_then(|mut file| {\n         writeln!(file, \"// MIR for `{}`\", node_path)?;\n@@ -157,7 +154,7 @@ where\n     if tcx.sess.opts.debugging_opts.dump_mir_graphviz {\n         file_path.set_extension(\"dot\");\n         let _ = fs::File::create(&file_path).and_then(|mut file| {\n-            write_mir_fn_graphviz(tcx, source.item_id(), mir, &mut file)?;\n+            write_mir_fn_graphviz(tcx, source.def_id, mir, &mut file)?;\n             Ok(())\n         });\n     }\n@@ -183,13 +180,15 @@ pub fn write_mir_pretty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n             writeln!(w, \"\")?;\n         }\n \n-        let id = tcx.hir.as_local_node_id(def_id).unwrap();\n-        let src = MirSource::from_node(tcx, id);\n-        write_mir_fn(tcx, src, mir, &mut |_, _| Ok(()), w)?;\n+        write_mir_fn(tcx, MirSource::item(def_id), mir, &mut |_, _| Ok(()), w)?;\n \n         for (i, mir) in mir.promoted.iter_enumerated() {\n             writeln!(w, \"\")?;\n-            write_mir_fn(tcx, MirSource::Promoted(id, i), mir, &mut |_, _| Ok(()), w)?;\n+            let src = MirSource {\n+                def_id,\n+                promoted: Some(i)\n+            };\n+            write_mir_fn(tcx, src, mir, &mut |_, _| Ok(()), w)?;\n         }\n     }\n     Ok(())\n@@ -367,20 +366,22 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut Write)\n                  -> io::Result<()>\n {\n-    match src {\n-        MirSource::Fn(_) => write!(w, \"fn\")?,\n-        MirSource::Const(_) => write!(w, \"const\")?,\n-        MirSource::Static(_, hir::MutImmutable) => write!(w, \"static\")?,\n-        MirSource::Static(_, hir::MutMutable) => write!(w, \"static mut\")?,\n-        MirSource::Promoted(_, i) => write!(w, \"{:?} in\", i)?,\n+    let id = tcx.hir.as_local_node_id(src.def_id).unwrap();\n+    let body_owner_kind = tcx.hir.body_owner_kind(id);\n+    match (body_owner_kind, src.promoted) {\n+        (_, Some(i)) => write!(w, \"{:?} in\", i)?,\n+        (hir::BodyOwnerKind::Fn, _) => write!(w, \"fn\")?,\n+        (hir::BodyOwnerKind::Const, _) => write!(w, \"const\")?,\n+        (hir::BodyOwnerKind::Static(hir::MutImmutable), _) => write!(w, \"static\")?,\n+        (hir::BodyOwnerKind::Static(hir::MutMutable), _) => write!(w, \"static mut\")?,\n     }\n \n     item_path::with_forced_impl_filename_line(|| { // see notes on #41697 elsewhere\n-        write!(w, \" {}\", tcx.node_path_str(src.item_id()))\n+        write!(w, \" {}\", tcx.item_path_str(src.def_id))\n     })?;\n \n-    match src {\n-        MirSource::Fn(_) => {\n+    match (body_owner_kind, src.promoted) {\n+        (hir::BodyOwnerKind::Fn, None) => {\n             write!(w, \"(\")?;\n \n             // fn argument types.\n@@ -393,9 +394,9 @@ fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut Write)\n \n             write!(w, \") -> {}\", mir.return_ty)\n         }\n-        MirSource::Const(..) |\n-        MirSource::Static(..) |\n-        MirSource::Promoted(..) => {\n+        (hir::BodyOwnerKind::Const, _) |\n+        (hir::BodyOwnerKind::Static(_), _) |\n+        (_, Some(_)) => {\n             assert_eq!(mir.arg_count, 0);\n             write!(w, \": {} =\", mir.return_ty)\n         }"}, {"sha": "776b5f3c984f1ed118ffb3cd12429e166605024f", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6aa56f44e062bfe06144318cbd88ac0b58d5814/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=d6aa56f44e062bfe06144318cbd88ac0b58d5814", "patch": "@@ -37,7 +37,6 @@ use rustc::hir::map::blocks::FnLikeNode;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n-use rustc::mir::transform::MirSource;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::{queries, Providers};\n use rustc::ty::subst::Substs;\n@@ -184,9 +183,9 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n         self.in_fn = false;\n         self.in_static = false;\n \n-        match MirSource::from_node(self.tcx, item_id) {\n-            MirSource::Fn(_) => self.in_fn = true,\n-            MirSource::Static(_, _) => self.in_static = true,\n+        match self.tcx.hir.body_owner_kind(item_id) {\n+            hir::BodyOwnerKind::Fn => self.in_fn = true,\n+            hir::BodyOwnerKind::Static(_) => self.in_static = true,\n             _ => {}\n         };\n "}]}