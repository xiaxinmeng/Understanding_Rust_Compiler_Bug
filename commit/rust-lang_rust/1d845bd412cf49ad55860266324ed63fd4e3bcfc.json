{"sha": "1d845bd412cf49ad55860266324ed63fd4e3bcfc", "node_id": "C_kwDOAAsO6NoAKDFkODQ1YmQ0MTJjZjQ5YWQ1NTg2MDI2NjMyNGVkNjNmZDRlM2JjZmM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-28T09:43:31Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-28T09:44:25Z"}, "message": "fix `emit_inference_failure_err` ICE", "tree": {"sha": "de28eaa04bd4b78b67771b0069474184c5dbb9c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de28eaa04bd4b78b67771b0069474184c5dbb9c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d845bd412cf49ad55860266324ed63fd4e3bcfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d845bd412cf49ad55860266324ed63fd4e3bcfc", "html_url": "https://github.com/rust-lang/rust/commit/1d845bd412cf49ad55860266324ed63fd4e3bcfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d845bd412cf49ad55860266324ed63fd4e3bcfc/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ffa8f67b75be56cf829bfc9d055082c8382c0cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffa8f67b75be56cf829bfc9d055082c8382c0cf", "html_url": "https://github.com/rust-lang/rust/commit/5ffa8f67b75be56cf829bfc9d055082c8382c0cf"}], "stats": {"total": 123, "additions": 117, "deletions": 6}, "files": [{"sha": "cf05399cfb4825843eda00c254e3185e83c01169", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1d845bd412cf49ad55860266324ed63fd4e3bcfc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d845bd412cf49ad55860266324ed63fd4e3bcfc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=1d845bd412cf49ad55860266324ed63fd4e3bcfc", "patch": "@@ -334,7 +334,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let mut local_visitor = FindInferSourceVisitor::new(&self, typeck_results, arg);\n         if let Some(body_id) = body_id {\n             let expr = self.tcx.hir().expect_expr(body_id.hir_id);\n-            debug!(?expr);\n             local_visitor.visit_expr(expr);\n         }\n \n@@ -550,6 +549,7 @@ impl<'tcx> InferSourceKind<'tcx> {\n     }\n }\n \n+#[derive(Debug)]\n struct InsertableGenericArgs<'tcx> {\n     insert_span: Span,\n     substs: SubstsRef<'tcx>,\n@@ -735,10 +735,20 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                     return self.path_inferred_subst_iter(expr.hir_id, substs, path);\n                 }\n             }\n-            hir::ExprKind::Struct(path, _, _) => {\n+            // FIXME: Ideally we would also deal with type relative\n+            // paths here, even if that is quite rare.\n+            //\n+            // See the `need_type_info/expr-struct-type-relative-gat.rs` test\n+            // for an example where that would be needed.\n+            //\n+            // However, the `type_dependent_def_id` for `Self::Output` in an\n+            // impl is currently the `DefId` of `Output` in the trait definition\n+            // which makes this somewhat difficult and prevents us from just\n+            // using `self.path_inferred_subst_iter` here.\n+            hir::ExprKind::Struct(&hir::QPath::Resolved(_self_ty, path), _, _) => {\n                 if let Some(ty) = self.opt_node_type(expr.hir_id) {\n                     if let ty::Adt(_, substs) = ty.kind() {\n-                        return self.path_inferred_subst_iter(expr.hir_id, substs, path);\n+                        return Box::new(self.resolved_path_inferred_subst_iter(path, substs));\n                     }\n                 }\n             }\n@@ -945,6 +955,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n         intravisit::walk_body(self, body);\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         let tcx = self.infcx.tcx;\n         match expr.kind {\n@@ -959,9 +970,9 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n             _ => intravisit::walk_expr(self, expr),\n         }\n \n-        for InsertableGenericArgs { insert_span, substs, generics_def_id, def_id } in\n-            self.expr_inferred_subst_iter(expr)\n-        {\n+        for args in self.expr_inferred_subst_iter(expr) {\n+            debug!(?args);\n+            let InsertableGenericArgs { insert_span, substs, generics_def_id, def_id } = args;\n             let generics = tcx.generics_of(generics_def_id);\n             if let Some(argument_index) =\n                 generics.own_substs(substs).iter().position(|&arg| self.generic_arg_is_target(arg))"}, {"sha": "42af9fa8d113a4685bcc775c53e63fbf381ea558", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative-enum.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1d845bd412cf49ad55860266324ed63fd4e3bcfc/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d845bd412cf49ad55860266324ed63fd4e3bcfc/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-enum.rs?ref=1d845bd412cf49ad55860266324ed63fd4e3bcfc", "patch": "@@ -0,0 +1,21 @@\n+trait Foo {\n+    type Output;\n+\n+    fn baz() -> Self::Output;\n+}\n+\n+fn needs_infer<T>() {}\n+\n+enum Bar {\n+    Variant {}\n+}\n+\n+impl Foo for u8 {\n+    type Output = Bar;\n+    fn baz() -> Self::Output {\n+        needs_infer(); //~ ERROR type annotations needed\n+        Self::Output::Variant {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "68ecb3813483716e9d8d684a99255cce52f513d5", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative-enum.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d845bd412cf49ad55860266324ed63fd4e3bcfc/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d845bd412cf49ad55860266324ed63fd4e3bcfc/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-enum.stderr?ref=1d845bd412cf49ad55860266324ed63fd4e3bcfc", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/expr-struct-type-relative-enum.rs:16:9\n+   |\n+LL |         needs_infer();\n+   |         ^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `needs_infer`\n+   |\n+help: consider specifying the generic argument\n+   |\n+LL |         needs_infer::<T>();\n+   |                    +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "bcd29bb4e3495b78a3756a2753737cd0b727b1f9", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative-gat.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1d845bd412cf49ad55860266324ed63fd4e3bcfc/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d845bd412cf49ad55860266324ed63fd4e3bcfc/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.rs?ref=1d845bd412cf49ad55860266324ed63fd4e3bcfc", "patch": "@@ -0,0 +1,21 @@\n+#![feature(generic_associated_types)]\n+\n+trait Foo {\n+    type Output<T>;\n+\n+    fn baz();\n+}\n+\n+enum Bar<T> {\n+    Simple {},\n+    Generic(T),\n+}\n+\n+impl Foo for u8 {\n+    type Output<T> = Bar<T>;\n+    fn baz() {\n+        Self::Output::Simple {}; //~ ERROR type annotations needed\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "65a75b68c1f080b622abff74e776596982529815", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative-gat.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d845bd412cf49ad55860266324ed63fd4e3bcfc/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d845bd412cf49ad55860266324ed63fd4e3bcfc/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.stderr?ref=1d845bd412cf49ad55860266324ed63fd4e3bcfc", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/expr-struct-type-relative-gat.rs:17:9\n+   |\n+LL |         Self::Output::Simple {};\n+   |         ^^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the associated type `Output`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "c3ece2b16cf08ba0bc1e34141e1177e0046d8655", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1d845bd412cf49ad55860266324ed63fd4e3bcfc/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d845bd412cf49ad55860266324ed63fd4e3bcfc/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative.rs?ref=1d845bd412cf49ad55860266324ed63fd4e3bcfc", "patch": "@@ -0,0 +1,21 @@\n+// regression test for #98598\n+\n+trait Foo {\n+    type Output;\n+\n+    fn baz() -> Self::Output;\n+}\n+\n+fn needs_infer<T>() {}\n+\n+struct Bar {}\n+\n+impl Foo for u8 {\n+    type Output = Bar;\n+    fn baz() -> Self::Output {\n+        needs_infer(); //~ ERROR type annotations needed\n+        Self::Output {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "397d8e7be04ff90585b492f259f1b6fb4c368906", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d845bd412cf49ad55860266324ed63fd4e3bcfc/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d845bd412cf49ad55860266324ed63fd4e3bcfc/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative.stderr?ref=1d845bd412cf49ad55860266324ed63fd4e3bcfc", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/expr-struct-type-relative.rs:16:9\n+   |\n+LL |         needs_infer();\n+   |         ^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `needs_infer`\n+   |\n+help: consider specifying the generic argument\n+   |\n+LL |         needs_infer::<T>();\n+   |                    +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}