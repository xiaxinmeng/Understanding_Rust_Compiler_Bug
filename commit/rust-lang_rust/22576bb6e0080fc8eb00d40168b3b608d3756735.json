{"sha": "22576bb6e0080fc8eb00d40168b3b608d3756735", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNTc2YmI2ZTAwODBmYzhlYjAwZDQwMTY4YjNiNjA4ZDM3NTY3MzU=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-12-06T04:49:42Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-12-14T05:00:02Z"}, "message": "Implement additional functions", "tree": {"sha": "6e80a874012eff71685671f089faad80b913d6f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e80a874012eff71685671f089faad80b913d6f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22576bb6e0080fc8eb00d40168b3b608d3756735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22576bb6e0080fc8eb00d40168b3b608d3756735", "html_url": "https://github.com/rust-lang/rust/commit/22576bb6e0080fc8eb00d40168b3b608d3756735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22576bb6e0080fc8eb00d40168b3b608d3756735/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27e944231c3ca26add3c1a801fbe1c6de79f51fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/27e944231c3ca26add3c1a801fbe1c6de79f51fd", "html_url": "https://github.com/rust-lang/rust/commit/27e944231c3ca26add3c1a801fbe1c6de79f51fd"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "c588505daf871019e7d38f80fc9451f660a23392", "filename": "crates/core_simd/src/macros.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmacros.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -139,31 +139,27 @@ macro_rules! call_counting_args {\n macro_rules! impl_vector {\n     { $name:ident, $type:ty } => {\n         impl<const LANES: usize> $name<LANES> {\n-            /// Construct a vector by setting all lanes to the given value.\n+            /// Construct a SIMD vector by setting all lanes to the given value.\n             pub const fn splat(value: $type) -> Self {\n                 Self([value; LANES])\n             }\n \n+            /// Returns a slice containing the entire SIMD vector.\n             pub const fn as_slice(&self) -> &[$type] {\n                 &self.0\n             }\n \n+            /// Returns a mutable slice containing the entire SIMD vector.\n             pub fn as_mut_slice(&mut self) -> &mut [$type] {\n                 &mut self.0\n             }\n \n-            pub const fn as_ptr(&self) -> *const $type {\n-                self.0.as_ptr()\n-            }\n-\n-            pub fn as_mut_ptr(&mut self) -> *mut $type {\n-                self.0.as_mut_ptr()\n-            }\n-\n+            /// Converts an array to a SIMD vector.\n             pub const fn from_array(array: [$type; LANES]) -> Self {\n                 Self(array)\n             }\n \n+            /// Converts a SIMD vector to an array.\n             pub const fn to_array(self) -> [$type; LANES] {\n                 self.0\n             }\n@@ -250,7 +246,7 @@ macro_rules! impl_vector {\n \n /// Implements additional integer traits (Eq, Ord, Hash) on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n macro_rules! impl_integer_vector {\n-    { $name:path, $type:ty } => {\n+    { $name:ident, $type:ty } => {\n         impl_vector! { $name, $type }\n \n         impl<const LANES: usize> Eq for $name<LANES> {}\n@@ -279,22 +275,26 @@ macro_rules! impl_integer_vector {\n /// `$lanes` of float `$type`, which uses `$bits_ty` as its binary\n /// representation. Called from `define_float_vector!`.\n macro_rules! impl_float_vector {\n-    { $name:path => [$type:ty; $lanes:literal]; bits $bits_ty:ty; } => {\n-        impl $name {\n-//            /// Raw transmutation to an unsigned integer vector type with the\n-//            /// same size and number of lanes.\n-//            #[inline]\n-//            pub fn to_bits(self) -> $bits_ty {\n-//                unsafe { core::mem::transmute(self) }\n-//            }\n-//\n-//            /// Raw transmutation from an unsigned integer vector type with the\n-//            /// same size and number of lanes.\n-//            #[inline]\n-//            pub fn from_bits(bits: $bits_ty) -> Self {\n-//                unsafe { core::mem::transmute(bits) }\n-//            }\n-//\n+    { $name:ident, $type:ty, $bits_ty:ident } => {\n+        impl_vector! { $name, $type }\n+\n+        impl<const LANES: usize> $name<LANES> {\n+            /// Raw transmutation to an unsigned integer vector type with the\n+            /// same size and number of lanes.\n+            #[inline]\n+            pub fn to_bits(self) -> crate::$bits_ty<LANES> {\n+                assert_eq!(core::mem::size_of::<Self>(), core::mem::size_of::<crate::$bits_ty<LANES>>());\n+                unsafe { core::mem::transmute_copy(&self) }\n+            }\n+\n+            /// Raw transmutation from an unsigned integer vector type with the\n+            /// same size and number of lanes.\n+            #[inline]\n+            pub fn from_bits(bits: crate::$bits_ty<LANES>) -> Self {\n+                assert_eq!(core::mem::size_of::<Self>(), core::mem::size_of::<crate::$bits_ty<LANES>>());\n+                unsafe { core::mem::transmute_copy(&bits) }\n+            }\n+\n //            /// Produces a vector where every lane has the absolute value of the\n //            /// equivalently-indexed lane in `self`.\n //            #[inline]"}, {"sha": "b1e13408cc9567799333afc2f9c1fbca70b57b20", "filename": "crates/core_simd/src/vectors_f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_f32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_f32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_f32.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdF32<const LANES: usize>([f32; LANES]);\n \n-impl_vector! { SimdF32, f32 }\n+impl_float_vector! { SimdF32, f32, SimdU32 }\n \n pub type f32x2 = SimdF32<2>;\n pub type f32x4 = SimdF32<4>;"}, {"sha": "4297c9d636c3c0c164167af4009970bf30883327", "filename": "crates/core_simd/src/vectors_f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_f64.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdF64<const LANES: usize>([f64; LANES]);\n \n-impl_vector! { SimdF64, f64 }\n+impl_float_vector! { SimdF64, f64, SimdU64 }\n \n pub type f64x2 = SimdF64<2>;\n pub type f64x4 = SimdF64<4>;"}, {"sha": "a48c823cbd664aa04b367cca17c6f6693593f64c", "filename": "crates/core_simd/src/vectors_i128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdI128<const LANES: usize>([i128; LANES]);\n \n-impl_vector! { SimdI128, i128 }\n+impl_integer_vector! { SimdI128, i128 }\n \n pub type i128x2 = SimdI128<2>;\n pub type i128x4 = SimdI128<4>;"}, {"sha": "7bc522287a3bbd0862dc13ff060724276c6ff899", "filename": "crates/core_simd/src/vectors_i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdI16<const LANES: usize>([i16; LANES]);\n \n-impl_vector! { SimdI16, i16 }\n+impl_integer_vector! { SimdI16, i16 }\n \n pub type i16x4 = SimdI16<4>;\n pub type i16x8 = SimdI16<8>;"}, {"sha": "05533bb0b6d7c9717529fbc4fafb90612f0f972d", "filename": "crates/core_simd/src/vectors_i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdI32<const LANES: usize>([i32; LANES]);\n \n-impl_vector! { SimdI32, i32 }\n+impl_integer_vector! { SimdI32, i32 }\n \n pub type i32x2 = SimdI32<2>;\n pub type i32x4 = SimdI32<4>;"}, {"sha": "e669e8a367c0c1e6f5eb949911723f471024d209", "filename": "crates/core_simd/src/vectors_i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdI64<const LANES: usize>([i64; LANES]);\n \n-impl_vector! { SimdI64, i64 }\n+impl_integer_vector! { SimdI64, i64 }\n \n pub type i64x2 = SimdI64<2>;\n pub type i64x4 = SimdI64<4>;"}, {"sha": "55a440cc92fafdfb049c6f251ef54e6d28d65e73", "filename": "crates/core_simd/src/vectors_i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdI8<const LANES: usize>([i8; LANES]);\n \n-impl_vector! { SimdI8, i8 }\n+impl_integer_vector! { SimdI8, i8 }\n \n pub type i8x8 = SimdI8<8>;\n pub type i8x16 = SimdI8<16>;"}, {"sha": "6d9b20615326f361fb8e55fe27aa2a2171925b43", "filename": "crates/core_simd/src/vectors_isize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdIsize<const LANES: usize>([isize; LANES]);\n \n-impl_vector! { SimdIsize, isize }\n+impl_integer_vector! { SimdIsize, isize }\n \n pub type isizex2 = SimdIsize<2>;\n pub type isizex4 = SimdIsize<4>;"}, {"sha": "54ad6e191f734caad7484c3b0aa3e61c4d96b112", "filename": "crates/core_simd/src/vectors_u128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdU128<const LANES: usize>([u128; LANES]);\n \n-impl_vector! { SimdU128, u128 }\n+impl_integer_vector! { SimdU128, u128 }\n \n pub type u128x2 = SimdU128<2>;\n pub type u128x4 = SimdU128<4>;"}, {"sha": "7b0e345ef159ccf2c0c1e5aa18667e7f5e5a9525", "filename": "crates/core_simd/src/vectors_u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdU16<const LANES: usize>([u16; LANES]);\n \n-impl_vector! { SimdU16, u16 }\n+impl_integer_vector! { SimdU16, u16 }\n \n pub type u16x4 = SimdU16<4>;\n pub type u16x8 = SimdU16<8>;"}, {"sha": "f80efbc59ebbb025f7daaa6b09c5db4447033d14", "filename": "crates/core_simd/src/vectors_u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdU32<const LANES: usize>([u32; LANES]);\n \n-impl_vector! { SimdU32, u32 }\n+impl_integer_vector! { SimdU32, u32 }\n \n pub type u32x2 = SimdU32<2>;\n pub type u32x4 = SimdU32<4>;"}, {"sha": "848d90faaa7380a588f089c4ff7b42e08b31556d", "filename": "crates/core_simd/src/vectors_u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdU64<const LANES: usize>([u64; LANES]);\n \n-impl_vector! { SimdU64, u64 }\n+impl_integer_vector! { SimdU64, u64 }\n \n pub type u64x2 = SimdU64<2>;\n pub type u64x4 = SimdU64<4>;"}, {"sha": "b172801aa993f3379a4ba2e052411c6d6493a18a", "filename": "crates/core_simd/src/vectors_u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdU8<const LANES: usize>([u8; LANES]);\n \n-impl_vector! { SimdU8, u8 }\n+impl_integer_vector! { SimdU8, u8 }\n \n pub type u8x8 = SimdU8<8>;\n pub type u8x16 = SimdU8<16>;"}, {"sha": "b0655ab311b16a44463b539e8599d814d2359e54", "filename": "crates/core_simd/src/vectors_usize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22576bb6e0080fc8eb00d40168b3b608d3756735/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs?ref=22576bb6e0080fc8eb00d40168b3b608d3756735", "patch": "@@ -4,7 +4,7 @@\n #[repr(simd)]\n pub struct SimdUsize<const LANES: usize>([usize; LANES]);\n \n-impl_vector! { SimdUsize, usize }\n+impl_integer_vector! { SimdUsize, usize }\n \n pub type usizex2 = SimdUsize<2>;\n pub type usizex4 = SimdUsize<4>;"}]}