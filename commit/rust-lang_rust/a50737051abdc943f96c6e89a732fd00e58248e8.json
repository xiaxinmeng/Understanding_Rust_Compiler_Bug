{"sha": "a50737051abdc943f96c6e89a732fd00e58248e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MDczNzA1MWFiZGM5NDNmOTZjNmU4OWE3MzJmZDAwZTU4MjQ4ZTg=", "commit": {"author": {"name": "alexey zabelin", "email": "zabelin.alex@gmail.com", "date": "2017-04-13T00:46:44Z"}, "committer": {"name": "alexey zabelin", "email": "zabelin.alex@gmail.com", "date": "2017-04-13T00:46:44Z"}, "message": "Fix old docs\n\n #41158", "tree": {"sha": "04d692b23d1db256ce6036f1108f905db02dd797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04d692b23d1db256ce6036f1108f905db02dd797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a50737051abdc943f96c6e89a732fd00e58248e8", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEyGBf8fbcGdY6ClTCOhaZhUeDJOkFAljuyp4ACgkQOhaZhUeD\nJOkbdQgAiSHm/QRMboWsPTNb+M862RdoKy01mxFaartJ8qiK4Qhq7ZRC44imFhpj\n+GVUJBZyYclGAn78yzc8TQB+Vp8Lbzmp34VA5YgpdqnmYaEkatNjtlMUUxJ2A28X\nAx7ENYtYqVRa87FrwdOZw4+MT9MVp10O5afqvej8rCIKeK5lmjtS0so1SxilFovG\nehG5FvwTOb6mQ1d324aICWUINaTKLy33mnqA0g+BsLFVh6yz9lfu0x9y6ENwz9Z1\nNIE4Xa1OL0PPEcYudSdPiVpUlXPovpTQLyWFam0hbj09ISL6n6LAcjZBxUFoiCnB\nNqfEjBKeynZxaWjiDH99wcKKhLg/Dg==\n=I8I9\n-----END PGP SIGNATURE-----", "payload": "tree 04d692b23d1db256ce6036f1108f905db02dd797\nparent 910c4816fdee01a1299d11a5e85ebb4aceee6d1a\nauthor alexey zabelin <zabelin.alex@gmail.com> 1492044404 -0400\ncommitter alexey zabelin <zabelin.alex@gmail.com> 1492044404 -0400\n\nFix old docs\n\n #41158\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a50737051abdc943f96c6e89a732fd00e58248e8", "html_url": "https://github.com/rust-lang/rust/commit/a50737051abdc943f96c6e89a732fd00e58248e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a50737051abdc943f96c6e89a732fd00e58248e8/comments", "author": {"login": "alexeyzab", "id": 5606260, "node_id": "MDQ6VXNlcjU2MDYyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5606260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeyzab", "html_url": "https://github.com/alexeyzab", "followers_url": "https://api.github.com/users/alexeyzab/followers", "following_url": "https://api.github.com/users/alexeyzab/following{/other_user}", "gists_url": "https://api.github.com/users/alexeyzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeyzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeyzab/subscriptions", "organizations_url": "https://api.github.com/users/alexeyzab/orgs", "repos_url": "https://api.github.com/users/alexeyzab/repos", "events_url": "https://api.github.com/users/alexeyzab/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeyzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexeyzab", "id": 5606260, "node_id": "MDQ6VXNlcjU2MDYyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5606260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeyzab", "html_url": "https://github.com/alexeyzab", "followers_url": "https://api.github.com/users/alexeyzab/followers", "following_url": "https://api.github.com/users/alexeyzab/following{/other_user}", "gists_url": "https://api.github.com/users/alexeyzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeyzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeyzab/subscriptions", "organizations_url": "https://api.github.com/users/alexeyzab/orgs", "repos_url": "https://api.github.com/users/alexeyzab/repos", "events_url": "https://api.github.com/users/alexeyzab/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeyzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "910c4816fdee01a1299d11a5e85ebb4aceee6d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/910c4816fdee01a1299d11a5e85ebb4aceee6d1a", "html_url": "https://github.com/rust-lang/rust/commit/910c4816fdee01a1299d11a5e85ebb4aceee6d1a"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "239afd41f023a4b83973f0418099f9ef8bc302b5", "filename": "src/doc/grammar.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a50737051abdc943f96c6e89a732fd00e58248e8/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/a50737051abdc943f96c6e89a732fd00e58248e8/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=a50737051abdc943f96c6e89a732fd00e58248e8", "patch": "@@ -780,6 +780,14 @@ never_type : \"!\" ;\n \n **FIXME:** grammar?\n \n+### Type parameter bounds\n+\n+```antlr\n+bound := ty_bound | lt_bound\n+lt_bound := lifetime\n+ty_bound := [?] [ for<lt_param_defs> ] simple_path\n+```\n+\n ### Self types\n \n **FIXME:** grammar?"}, {"sha": "5cacb0da9e5d9db7dd393b3e5d0083b44ccb7db2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a50737051abdc943f96c6e89a732fd00e58248e8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50737051abdc943f96c6e89a732fd00e58248e8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a50737051abdc943f96c6e89a732fd00e58248e8", "patch": "@@ -4066,7 +4066,7 @@ impl<'a> Parser<'a> {\n         }).emit();\n     }\n \n-    // Parse bounds of a type parameter `BOUND + BOUND + BOUND` without trailing `+`.\n+    // Parse bounds of a type parameter `BOUND + BOUND + BOUND`.\n     // BOUND = TY_BOUND | LT_BOUND\n     // LT_BOUND = LIFETIME (e.g. `'a`)\n     // TY_BOUND = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g. `?for<'a: 'b> m::Trait<'a>`)\n@@ -4107,7 +4107,7 @@ impl<'a> Parser<'a> {\n         self.parse_ty_param_bounds_common(true)\n     }\n \n-    // Parse bounds of a type parameter `BOUND + BOUND + BOUND` without trailing `+`.\n+    // Parse bounds of a type parameter `BOUND + BOUND + BOUND`.\n     // BOUND = LT_BOUND (e.g. `'a`)\n     fn parse_lt_param_bounds(&mut self) -> Vec<Lifetime> {\n         let mut lifetimes = Vec::new();"}]}