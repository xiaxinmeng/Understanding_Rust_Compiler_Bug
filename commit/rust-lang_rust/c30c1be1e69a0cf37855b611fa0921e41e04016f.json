{"sha": "c30c1be1e69a0cf37855b611fa0921e41e04016f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMGMxYmUxZTY5YTBjZjM3ODU1YjYxMWZhMDkyMWU0MWUwNDAxNmY=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-15T11:23:44Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-15T12:06:52Z"}, "message": "s/ConstantSource/ConstantKind/", "tree": {"sha": "d3f35feb423a420dac4543dae9d4a97e7ad04901", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3f35feb423a420dac4543dae9d4a97e7ad04901"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c30c1be1e69a0cf37855b611fa0921e41e04016f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c30c1be1e69a0cf37855b611fa0921e41e04016f", "html_url": "https://github.com/rust-lang/rust/commit/c30c1be1e69a0cf37855b611fa0921e41e04016f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c30c1be1e69a0cf37855b611fa0921e41e04016f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11ddd2251061bd84408c6e098588c41f4f51370b", "url": "https://api.github.com/repos/rust-lang/rust/commits/11ddd2251061bd84408c6e098588c41f4f51370b", "html_url": "https://github.com/rust-lang/rust/commit/11ddd2251061bd84408c6e098588c41f4f51370b"}], "stats": {"total": 94, "additions": 43, "deletions": 51}, "files": [{"sha": "9d93370b7d0c9d4dd88cf8ee8ce46cc0a1c2ee78", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=c30c1be1e69a0cf37855b611fa0921e41e04016f", "patch": "@@ -40,8 +40,8 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     let mut all_constants_ok = true;\n     for constant in &fx.mir.required_consts {\n         let const_ = match fx.monomorphize(constant.literal) {\n-            ConstantSource::Ty(ct) => ct,\n-            ConstantSource::Val(..) => continue,\n+            ConstantKind::Ty(ct) => ct,\n+            ConstantKind::Val(..) => continue,\n         };\n         match const_.val {\n             ConstKind::Value(_) => {}\n@@ -117,8 +117,8 @@ pub(crate) fn codegen_constant<'tcx>(\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n     let const_ = match fx.monomorphize(constant.literal) {\n-        ConstantSource::Ty(ct) => ct,\n-        ConstantSource::Val(val, ty) => return codegen_const_value(fx, val, ty),\n+        ConstantKind::Ty(ct) => ct,\n+        ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n@@ -427,10 +427,10 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n     match operand {\n         Operand::Copy(_) | Operand::Move(_) => None,\n         Operand::Constant(const_) => match const_.literal {\n-            ConstantSource::Ty(const_) => {\n+            ConstantKind::Ty(const_) => {\n                 fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val.try_to_value()\n             }\n-            ConstantSource::Val(val, _) => Some(val),\n+            ConstantKind::Val(val, _) => Some(val),\n         },\n     }\n }"}, {"sha": "aa41acc357841e0e58d78dc3df37a7236752cec0", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=c30c1be1e69a0cf37855b611fa0921e41e04016f", "patch": "@@ -26,8 +26,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     ) -> Result<ConstValue<'tcx>, ErrorHandled> {\n         let ct = self.monomorphize(constant.literal);\n         let ct = match ct {\n-            mir::ConstantSource::Ty(ct) => ct,\n-            mir::ConstantSource::Val(val, _) => return Ok(val),\n+            mir::ConstantKind::Ty(ct) => ct,\n+            mir::ConstantKind::Val(val, _) => return Ok(val),\n         };\n         match ct.val {\n             ty::ConstKind::Unevaluated(def, substs, promoted) => self"}, {"sha": "44810a9b2e6db2bb018d80d4a1bd25cecb2f461a", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=c30c1be1e69a0cf37855b611fa0921e41e04016f", "patch": "@@ -381,14 +381,6 @@ impl<'tcx, Tag> Scalar<Tag> {\n         self.to_bits(target_size).expect(\"expected Raw bits but got a Pointer\")\n     }\n \n-    #[inline]\n-    pub fn to_int(self) -> InterpResult<'tcx, ScalarInt> {\n-        match self {\n-            Scalar::Ptr(_) => throw_unsup!(ReadPointerAsBytes),\n-            Scalar::Int(int) => Ok(int),\n-        }\n-    }\n-\n     #[inline]\n     pub fn assert_int(self) -> ScalarInt {\n         self.to_int().expect(\"expected an int but got an abstract pointer\")"}, {"sha": "0ba0429b4e2fae11294be221b6b1aa1efc345894", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c30c1be1e69a0cf37855b611fa0921e41e04016f", "patch": "@@ -2033,7 +2033,7 @@ impl<'tcx> Operand<'tcx> {\n         Operand::Constant(box Constant {\n             span,\n             user_ty: None,\n-            literal: ConstantSource::Ty(ty::Const::zero_sized(tcx, ty)),\n+            literal: ConstantKind::Ty(ty::Const::zero_sized(tcx, ty)),\n         })\n     }\n \n@@ -2064,7 +2064,7 @@ impl<'tcx> Operand<'tcx> {\n         Operand::Constant(box Constant {\n             span,\n             user_ty: None,\n-            literal: ConstantSource::Val(val.into(), ty),\n+            literal: ConstantKind::Val(val.into(), ty),\n         })\n     }\n \n@@ -2406,11 +2406,11 @@ pub struct Constant<'tcx> {\n     /// Needed for NLL to impose user-given type constraints.\n     pub user_ty: Option<UserTypeAnnotationIndex>,\n \n-    pub literal: ConstantSource<'tcx>,\n+    pub literal: ConstantKind<'tcx>,\n }\n \n #[derive(Clone, Copy, PartialEq, PartialOrd, TyEncodable, TyDecodable, Hash, HashStable, Debug)]\n-pub enum ConstantSource<'tcx> {\n+pub enum ConstantKind<'tcx> {\n     /// This constant came from the type system\n     Ty(&'tcx ty::Const<'tcx>),\n     /// This constant cannot go back into the type system, as it represents\n@@ -2436,33 +2436,33 @@ impl Constant<'tcx> {\n     }\n }\n \n-impl From<&'tcx ty::Const<'tcx>> for ConstantSource<'tcx> {\n+impl From<&'tcx ty::Const<'tcx>> for ConstantKind<'tcx> {\n     fn from(ct: &'tcx ty::Const<'tcx>) -> Self {\n         Self::Ty(ct)\n     }\n }\n \n-impl ConstantSource<'tcx> {\n+impl ConstantKind<'tcx> {\n     /// Returns `None` if the constant is not trivially safe for use in the type system.\n     pub fn const_for_ty(&self) -> Option<&'tcx ty::Const<'tcx>> {\n         match self {\n-            ConstantSource::Ty(c) => Some(c),\n-            ConstantSource::Val(..) => None,\n+            ConstantKind::Ty(c) => Some(c),\n+            ConstantKind::Val(..) => None,\n         }\n     }\n \n     pub fn ty(&self) -> Ty<'tcx> {\n         match self {\n-            ConstantSource::Ty(c) => c.ty,\n-            ConstantSource::Val(_, ty) => ty,\n+            ConstantKind::Ty(c) => c.ty,\n+            ConstantKind::Val(_, ty) => ty,\n         }\n     }\n \n     #[inline]\n     pub fn try_to_value(self) -> Option<interpret::ConstValue<'tcx>> {\n         match self {\n-            ConstantSource::Ty(c) => c.val.try_to_value(),\n-            ConstantSource::Val(val, _) => Some(val),\n+            ConstantKind::Ty(c) => c.val.try_to_value(),\n+            ConstantKind::Val(val, _) => Some(val),\n         }\n     }\n \n@@ -2709,8 +2709,8 @@ impl<'tcx> Display for Constant<'tcx> {\n             _ => write!(fmt, \"const \")?,\n         }\n         match self.literal {\n-            ConstantSource::Ty(c) => pretty_print_const(c, fmt, true),\n-            ConstantSource::Val(val, ty) => pretty_print_const_value(val, ty, fmt, true),\n+            ConstantKind::Ty(c) => pretty_print_const(c, fmt, true),\n+            ConstantKind::Val(val, ty) => pretty_print_const_value(val, ty, fmt, true),\n         }\n     }\n }"}, {"sha": "cb59927727010fd43094fb6d9aa7e8d1ce66fc6e", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=c30c1be1e69a0cf37855b611fa0921e41e04016f", "patch": "@@ -347,18 +347,18 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ConstantSource<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for ConstantKind<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         match self {\n-            ConstantSource::Ty(c) => ConstantSource::Ty(c.fold_with(folder)),\n-            ConstantSource::Val(v, t) => ConstantSource::Val(v, t.fold_with(folder)),\n+            ConstantKind::Ty(c) => ConstantKind::Ty(c.fold_with(folder)),\n+            ConstantKind::Val(v, t) => ConstantKind::Val(v, t.fold_with(folder)),\n         }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match *self {\n-            ConstantSource::Ty(c) => c.visit_with(visitor),\n-            ConstantSource::Val(_, t) => t.visit_with(visitor),\n+            ConstantKind::Ty(c) => c.visit_with(visitor),\n+            ConstantKind::Val(_, t) => t.visit_with(visitor),\n         }\n     }\n }"}, {"sha": "be248ccabda01e40aecbdb4efc6bcac05956b795", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=c30c1be1e69a0cf37855b611fa0921e41e04016f", "patch": "@@ -872,8 +872,8 @@ macro_rules! make_mir_visitor {\n                 self.visit_span(span);\n                 drop(user_ty); // no visit method for this\n                 match literal {\n-                    ConstantSource::Ty(ct) => self.visit_const(ct, location),\n-                    ConstantSource::Val(_, t) => self.visit_ty(t, TyContext::Location(location)),\n+                    ConstantKind::Ty(ct) => self.visit_const(ct, location),\n+                    ConstantKind::Val(_, t) => self.visit_ty(t, TyContext::Location(location)),\n                 }\n             }\n "}, {"sha": "cce1549cb29c2fd47765cb9ecc595b47a7447c71", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=c30c1be1e69a0cf37855b611fa0921e41e04016f", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n         } else {\n             let tcx = self.tcx();\n             let maybe_uneval = match constant.literal {\n-                ConstantSource::Ty(ct) => match ct.val {\n+                ConstantKind::Ty(ct) => match ct.val {\n                     ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                         Some((def, substs, promoted))\n                     }"}, {"sha": "28933493a21c41bcfd271b194bbeda51bb6069fc", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=c30c1be1e69a0cf37855b611fa0921e41e04016f", "patch": "@@ -573,12 +573,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     crate fn mir_const_to_op(\n         &self,\n-        val: &mir::ConstantSource<'tcx>,\n+        val: &mir::ConstantKind<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         match val {\n-            mir::ConstantSource::Ty(ct) => self.const_to_op(ct, layout),\n-            mir::ConstantSource::Val(val, ty) => self.const_val_to_op(*val, ty, None),\n+            mir::ConstantKind::Ty(ct) => self.const_to_op(ct, layout),\n+            mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, ty, None),\n         }\n     }\n "}, {"sha": "cc8669d9705468ce65cba883b911a330a9f6df35", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=c30c1be1e69a0cf37855b611fa0921e41e04016f", "patch": "@@ -13,9 +13,9 @@ use rustc_middle::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n use rustc_middle::mir::{\n-    AssertKind, BasicBlock, BinOp, Body, ClearCrossCrate, Constant, ConstantSource, Local,\n-    LocalDecl, LocalKind, Location, Operand, Place, Rvalue, SourceInfo, SourceScope,\n-    SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n+    AssertKind, BasicBlock, BinOp, Body, ClearCrossCrate, Constant, ConstantKind, Local, LocalDecl,\n+    LocalKind, Location, Operand, Place, Rvalue, SourceInfo, SourceScope, SourceScopeData,\n+    Statement, StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n };\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutError, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n@@ -489,14 +489,14 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 let err = ConstEvalErr::new(&self.ecx, error, Some(c.span));\n                 if let Some(lint_root) = self.lint_root(source_info) {\n                     let lint_only = match c.literal {\n-                        ConstantSource::Ty(ct) => match ct.val {\n+                        ConstantKind::Ty(ct) => match ct.val {\n                             // Promoteds must lint and not error as the user didn't ask for them\n                             ConstKind::Unevaluated(_, _, Some(_)) => true,\n                             // Out of backwards compatibility we cannot report hard errors in unused\n                             // generic functions using associated constants of the generic parameters.\n                             _ => c.literal.needs_subst(),\n                         },\n-                        ConstantSource::Val(_, ty) => ty.needs_subst(),\n+                        ConstantKind::Val(_, ty) => ty.needs_subst(),\n                     };\n                     if lint_only {\n                         // Out of backwards compatibility we cannot report hard errors in unused\n@@ -818,7 +818,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     ) {\n         if let Rvalue::Use(Operand::Constant(c)) = rval {\n             match c.literal {\n-                ConstantSource::Ty(c) if matches!(c.val, ConstKind::Unevaluated(..)) => {}\n+                ConstantKind::Ty(c) if matches!(c.val, ConstKind::Unevaluated(..)) => {}\n                 _ => {\n                     trace!(\"skipping replace of Rvalue::Use({:?} because it is already a const\", c);\n                     return;"}, {"sha": "1bf010ffca7529683933ce3c7337d884e830083b", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=c30c1be1e69a0cf37855b611fa0921e41e04016f", "patch": "@@ -450,8 +450,8 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n                     self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n                 }\n                 match literal {\n-                    ConstantSource::Ty(literal) => self.push(&format!(\"+ literal: {:?}\", literal)),\n-                    ConstantSource::Val(val, ty) => {\n+                    ConstantKind::Ty(literal) => self.push(&format!(\"+ literal: {:?}\", literal)),\n+                    ConstantKind::Val(val, ty) => {\n                         self.push(&format!(\"+ literal: {:?}, {}\", val, ty))\n                     }\n                 }"}, {"sha": "670527fb3f08f1a7dfc0563bd18e757b5f3c7b8e", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c30c1be1e69a0cf37855b611fa0921e41e04016f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=c30c1be1e69a0cf37855b611fa0921e41e04016f", "patch": "@@ -378,8 +378,8 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 Ok(self.locals[local])\n             }\n             mir::Operand::Constant(ct) => match ct.literal {\n-                mir::ConstantSource::Ty(ct) => Ok(self.add_node(Node::Leaf(ct), span)),\n-                mir::ConstantSource::Val(..) => self.error(Some(span), \"unsupported constant\")?,\n+                mir::ConstantKind::Ty(ct) => Ok(self.add_node(Node::Leaf(ct), span)),\n+                mir::ConstantKind::Val(..) => self.error(Some(span), \"unsupported constant\")?,\n             },\n         }\n     }"}]}