{"sha": "8f0e9ff02914459a98d1727f5bf0c26bba604bb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMGU5ZmYwMjkxNDQ1OWE5OGQxNzI3ZjViZjBjMjZiYmE2MDRiYjk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-27T01:23:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-27T01:23:05Z"}, "message": "Long lines", "tree": {"sha": "ffd12f31f40701b85778a2db824805aa3fb04058", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffd12f31f40701b85778a2db824805aa3fb04058"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f0e9ff02914459a98d1727f5bf0c26bba604bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0e9ff02914459a98d1727f5bf0c26bba604bb9", "html_url": "https://github.com/rust-lang/rust/commit/8f0e9ff02914459a98d1727f5bf0c26bba604bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f0e9ff02914459a98d1727f5bf0c26bba604bb9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a08919a52273e8fdeb044e43be16c72915760035", "url": "https://api.github.com/repos/rust-lang/rust/commits/a08919a52273e8fdeb044e43be16c72915760035", "html_url": "https://github.com/rust-lang/rust/commit/a08919a52273e8fdeb044e43be16c72915760035"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "b650a8890c593aee48f64012f5856cd0bbfe52b5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f0e9ff02914459a98d1727f5bf0c26bba604bb9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0e9ff02914459a98d1727f5bf0c26bba604bb9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8f0e9ff02914459a98d1727f5bf0c26bba604bb9", "patch": "@@ -2285,7 +2285,8 @@ impl parser {\n                     let stmt = self.parse_stmt(initial_attrs);\n                     initial_attrs = ~[];\n                     match stmt.node {\n-                        stmt_expr(e, stmt_id) => { // Expression without semicolon:\n+                        stmt_expr(e, stmt_id) => {\n+                            // Expression without semicolon\n                             match self.token {\n                                 token::SEMI => {\n                                     self.bump();\n@@ -2297,9 +2298,11 @@ impl parser {\n                                 }\n                                 t => {\n                                     if classify::stmt_ends_with_semi(*stmt) {\n-                                        self.fatal(~\"expected `;` or `}` after \\\n-                                                     expression but found `\"\n-                                                   + token_to_str(self.reader, t) + ~\"`\");\n+                                        self.fatal(\n+                                            ~\"expected `;` or `}` after \\\n+                                              expression but found `\"\n+                                            + token_to_str(self.reader, t)\n+                                            + ~\"`\");\n                                     }\n                                     stmts.push(stmt);\n                                 }"}]}