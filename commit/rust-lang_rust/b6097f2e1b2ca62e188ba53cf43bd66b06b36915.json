{"sha": "b6097f2e1b2ca62e188ba53cf43bd66b06b36915", "node_id": "C_kwDOAAsO6NoAKGI2MDk3ZjJlMWIyY2E2MmUxODhiYTUzY2Y0M2JkNjZiMDZiMzY5MTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-17T13:47:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-17T13:47:03Z"}, "message": "Auto merge of #104219 - bryangarza:async-track-caller-dup, r=eholk\n\nSupport `#[track_caller]` on async fns\n\nAdds `#[track_caller]` to the generator that is created when we desugar the async fn.\n\nFixes #78840\n\nOpen questions:\n- What is the performance impact of adding `#[track_caller]` to every `GenFuture`'s `poll(...)` function, even if it's unused (i.e., the parent span does not set `#[track_caller]`)? We might need to set it only conditionally, if the indirection causes overhead we don't want.", "tree": {"sha": "2e5d5c944967d1a4629252a8016b34df8da1efd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e5d5c944967d1a4629252a8016b34df8da1efd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6097f2e1b2ca62e188ba53cf43bd66b06b36915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6097f2e1b2ca62e188ba53cf43bd66b06b36915", "html_url": "https://github.com/rust-lang/rust/commit/b6097f2e1b2ca62e188ba53cf43bd66b06b36915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6097f2e1b2ca62e188ba53cf43bd66b06b36915/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36db030a7c3c51cb4484cbd8c8daebcf5057d61c", "url": "https://api.github.com/repos/rust-lang/rust/commits/36db030a7c3c51cb4484cbd8c8daebcf5057d61c", "html_url": "https://github.com/rust-lang/rust/commit/36db030a7c3c51cb4484cbd8c8daebcf5057d61c"}, {"sha": "79c06fc595261a118cea2e5440ed98fbf5659a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/79c06fc595261a118cea2e5440ed98fbf5659a99", "html_url": "https://github.com/rust-lang/rust/commit/79c06fc595261a118cea2e5440ed98fbf5659a99"}], "stats": {"total": 116, "additions": 109, "deletions": 7}, "files": [{"sha": "01716859a9ddf94b23d8aff4f6b8afa0372e5367", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b6097f2e1b2ca62e188ba53cf43bd66b06b36915/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6097f2e1b2ca62e188ba53cf43bd66b06b36915/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=b6097f2e1b2ca62e188ba53cf43bd66b06b36915", "patch": "@@ -655,15 +655,40 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             hir::ExprKind::Closure(c)\n         };\n-        let generator = hir::Expr {\n-            hir_id: self.lower_node_id(closure_node_id),\n-            kind: generator_kind,\n-            span: self.lower_span(span),\n+        let parent_has_track_caller = self\n+            .attrs\n+            .values()\n+            .find(|attrs| attrs.into_iter().find(|attr| attr.has_name(sym::track_caller)).is_some())\n+            .is_some();\n+        let unstable_span =\n+            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n+\n+        let hir_id = if parent_has_track_caller {\n+            let generator_hir_id = self.lower_node_id(closure_node_id);\n+            self.lower_attrs(\n+                generator_hir_id,\n+                &[Attribute {\n+                    kind: AttrKind::Normal(ptr::P(NormalAttr {\n+                        item: AttrItem {\n+                            path: Path::from_ident(Ident::new(sym::track_caller, span)),\n+                            args: MacArgs::Empty,\n+                            tokens: None,\n+                        },\n+                        tokens: None,\n+                    })),\n+                    id: self.tcx.sess.parse_sess.attr_id_generator.mk_attr_id(),\n+                    style: AttrStyle::Outer,\n+                    span: unstable_span,\n+                }],\n+            );\n+            generator_hir_id\n+        } else {\n+            self.lower_node_id(closure_node_id)\n         };\n \n+        let generator = hir::Expr { hir_id, kind: generator_kind, span: self.lower_span(span) };\n+\n         // `future::from_generator`:\n-        let unstable_span =\n-            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n         let gen_future = self.expr_lang_item_path(\n             unstable_span,\n             hir::LangItem::FromGenerator,"}, {"sha": "795ad113ef2db4d5455bf487f18216ad24c60baf", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6097f2e1b2ca62e188ba53cf43bd66b06b36915/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6097f2e1b2ca62e188ba53cf43bd66b06b36915/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=b6097f2e1b2ca62e188ba53cf43bd66b06b36915", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             impl_trait_defs: Vec::new(),\n             impl_trait_bounds: Vec::new(),\n             allow_try_trait: Some([sym::try_trait_v2, sym::yeet_desugar_details][..].into()),\n-            allow_gen_future: Some([sym::gen_future][..].into()),\n+            allow_gen_future: Some([sym::gen_future, sym::closure_track_caller][..].into()),\n             allow_into_future: Some([sym::into_future][..].into()),\n             generics_def_id_map: Default::default(),\n         };"}, {"sha": "107cf92c1c0f7c9bb515051591665807010221c1", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6097f2e1b2ca62e188ba53cf43bd66b06b36915/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6097f2e1b2ca62e188ba53cf43bd66b06b36915/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=b6097f2e1b2ca62e188ba53cf43bd66b06b36915", "patch": "@@ -82,6 +82,7 @@ where\n \n     impl<T: Generator<ResumeTy, Yield = ()>> Future for GenFuture<T> {\n         type Output = T::Return;\n+        #[track_caller]\n         fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n             // SAFETY: Safe because we're !Unpin + !Drop, and this is just a field projection.\n             let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };"}, {"sha": "b113c56412ff65322dc4646a9dd8593e4a863462", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b6097f2e1b2ca62e188ba53cf43bd66b06b36915/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6097f2e1b2ca62e188ba53cf43bd66b06b36915/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs?ref=b6097f2e1b2ca62e188ba53cf43bd66b06b36915", "patch": "@@ -0,0 +1,76 @@\n+// run-pass\n+// edition:2021\n+// needs-unwind\n+#![feature(closure_track_caller)]\n+\n+use std::future::Future;\n+use std::panic;\n+use std::sync::{Arc, Mutex};\n+use std::task::{Context, Poll, Wake};\n+use std::thread::{self, Thread};\n+\n+/// A waker that wakes up the current thread when called.\n+struct ThreadWaker(Thread);\n+\n+impl Wake for ThreadWaker {\n+    fn wake(self: Arc<Self>) {\n+        self.0.unpark();\n+    }\n+}\n+\n+/// Run a future to completion on the current thread.\n+fn block_on<T>(fut: impl Future<Output = T>) -> T {\n+    // Pin the future so it can be polled.\n+    let mut fut = Box::pin(fut);\n+\n+    // Create a new context to be passed to the future.\n+    let t = thread::current();\n+    let waker = Arc::new(ThreadWaker(t)).into();\n+    let mut cx = Context::from_waker(&waker);\n+\n+    // Run the future to completion.\n+    loop {\n+        match fut.as_mut().poll(&mut cx) {\n+            Poll::Ready(res) => return res,\n+            Poll::Pending => thread::park(),\n+        }\n+    }\n+}\n+\n+async fn bar() {\n+    panic!()\n+}\n+\n+async fn foo() {\n+    bar().await\n+}\n+\n+#[track_caller]\n+async fn bar_track_caller() {\n+    panic!()\n+}\n+\n+async fn foo_track_caller() {\n+    bar_track_caller().await\n+}\n+\n+fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n+    let loc = Arc::new(Mutex::new(None));\n+\n+    let hook = panic::take_hook();\n+    {\n+        let loc = loc.clone();\n+        panic::set_hook(Box::new(move |info| {\n+            *loc.lock().unwrap() = info.location().map(|loc| loc.line())\n+        }));\n+    }\n+    panic::catch_unwind(f).unwrap_err();\n+    panic::set_hook(hook);\n+    let x = loc.lock().unwrap().unwrap();\n+    x\n+}\n+\n+fn main() {\n+    assert_eq!(panicked_at(|| block_on(foo())), 41);\n+    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 54);\n+}"}]}