{"sha": "525b0bb77a6d0bf88772a47b13275a553e625797", "node_id": "C_kwDOAAsO6NoAKDUyNWIwYmI3N2E2ZDBiZjg4NzcyYTQ3YjEzMjc1YTU1M2U2MjU3OTc", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-11T20:41:58Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-11T23:25:46Z"}, "message": "Bless tests.", "tree": {"sha": "2d557141e54de8d7dd3a7044e85fd670d12b0041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d557141e54de8d7dd3a7044e85fd670d12b0041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/525b0bb77a6d0bf88772a47b13275a553e625797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/525b0bb77a6d0bf88772a47b13275a553e625797", "html_url": "https://github.com/rust-lang/rust/commit/525b0bb77a6d0bf88772a47b13275a553e625797", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/525b0bb77a6d0bf88772a47b13275a553e625797/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4dbcb525b2f36f66c89df6919a7506cd99041cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4dbcb525b2f36f66c89df6919a7506cd99041cc", "html_url": "https://github.com/rust-lang/rust/commit/a4dbcb525b2f36f66c89df6919a7506cd99041cc"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "aaa8b169583fd667d723ea93d733ccd262f66ee3", "filename": "tests/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/525b0bb77a6d0bf88772a47b13275a553e625797/tests%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/525b0bb77a6d0bf88772a47b13275a553e625797/tests%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=525b0bb77a6d0bf88772a47b13275a553e625797", "patch": "@@ -15,12 +15,7 @@ LL | bug!();\n    |\n    = note: this error originates in the macro `bug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: unexpected expression: `{\n-               let res =\n-                   ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n-                           &[::core::fmt::ArgumentV1::new_display(&\"u8\")]));\n-               res\n-           }.as_str()`\n+error: unexpected expression: `{ let res = ::alloc::fmt::format(format_args!(\"{0}\", \"u8\")); res }.as_str()`\n   --> $DIR/key-value-expansion.rs:48:23\n    |\n LL |         doc_comment! {format!(\"{coor}\", coor = stringify!($t1)).as_str()}"}, {"sha": "ad97f7a4a7540d08bc99643e5bb17f99d721d37b", "filename": "tests/ui/macros/rfc-2011-nicer-assert-messages/non-consuming-methods-have-optimized-codegen.stdout", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/525b0bb77a6d0bf88772a47b13275a553e625797/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/525b0bb77a6d0bf88772a47b13275a553e625797/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout?ref=525b0bb77a6d0bf88772a47b13275a553e625797", "patch": "@@ -25,8 +25,8 @@ fn arbitrary_consuming_method_for_demonstration_purposes() {\n \n \n                 {\n-                    ::std::rt::panic_fmt(::core::fmt::Arguments::new_v1(&[\"Assertion failed: elem as usize\\nWith captures:\\n  elem = \",\n-                                        \"\\n\"], &[::core::fmt::ArgumentV1::new_debug(&__capture0)]))\n+                    ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem as usize\\nWith captures:\\n  elem = {0:?}\\n\",\n+                            __capture0))\n                 }\n             }\n     };\n@@ -41,8 +41,8 @@ fn addr_of() {\n         if ::core::intrinsics::unlikely(!&*__local_bind0) {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n-                    ::std::rt::panic_fmt(::core::fmt::Arguments::new_v1(&[\"Assertion failed: &elem\\nWith captures:\\n  elem = \",\n-                                        \"\\n\"], &[::core::fmt::ArgumentV1::new_debug(&__capture0)]))\n+                    ::std::rt::panic_fmt(format_args!(\"Assertion failed: &elem\\nWith captures:\\n  elem = {0:?}\\n\",\n+                            __capture0))\n                 }\n             }\n     };\n@@ -57,8 +57,8 @@ fn binary() {\n         if ::core::intrinsics::unlikely(!(*__local_bind0 == 1)) {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n-                    ::std::rt::panic_fmt(::core::fmt::Arguments::new_v1(&[\"Assertion failed: elem == 1\\nWith captures:\\n  elem = \",\n-                                        \"\\n\"], &[::core::fmt::ArgumentV1::new_debug(&__capture0)]))\n+                    ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem == 1\\nWith captures:\\n  elem = {0:?}\\n\",\n+                            __capture0))\n                 }\n             }\n     };\n@@ -70,8 +70,8 @@ fn binary() {\n         if ::core::intrinsics::unlikely(!(*__local_bind0 >= 1)) {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n-                    ::std::rt::panic_fmt(::core::fmt::Arguments::new_v1(&[\"Assertion failed: elem >= 1\\nWith captures:\\n  elem = \",\n-                                        \"\\n\"], &[::core::fmt::ArgumentV1::new_debug(&__capture0)]))\n+                    ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem >= 1\\nWith captures:\\n  elem = {0:?}\\n\",\n+                            __capture0))\n                 }\n             }\n     };\n@@ -83,8 +83,8 @@ fn binary() {\n         if ::core::intrinsics::unlikely(!(*__local_bind0 > 0)) {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n-                    ::std::rt::panic_fmt(::core::fmt::Arguments::new_v1(&[\"Assertion failed: elem > 0\\nWith captures:\\n  elem = \",\n-                                        \"\\n\"], &[::core::fmt::ArgumentV1::new_debug(&__capture0)]))\n+                    ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem > 0\\nWith captures:\\n  elem = {0:?}\\n\",\n+                            __capture0))\n                 }\n             }\n     };\n@@ -96,8 +96,8 @@ fn binary() {\n         if ::core::intrinsics::unlikely(!(*__local_bind0 < 3)) {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n-                    ::std::rt::panic_fmt(::core::fmt::Arguments::new_v1(&[\"Assertion failed: elem < 3\\nWith captures:\\n  elem = \",\n-                                        \"\\n\"], &[::core::fmt::ArgumentV1::new_debug(&__capture0)]))\n+                    ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem < 3\\nWith captures:\\n  elem = {0:?}\\n\",\n+                            __capture0))\n                 }\n             }\n     };\n@@ -109,8 +109,8 @@ fn binary() {\n         if ::core::intrinsics::unlikely(!(*__local_bind0 <= 3)) {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n-                    ::std::rt::panic_fmt(::core::fmt::Arguments::new_v1(&[\"Assertion failed: elem <= 3\\nWith captures:\\n  elem = \",\n-                                        \"\\n\"], &[::core::fmt::ArgumentV1::new_debug(&__capture0)]))\n+                    ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem <= 3\\nWith captures:\\n  elem = {0:?}\\n\",\n+                            __capture0))\n                 }\n             }\n     };\n@@ -122,8 +122,8 @@ fn binary() {\n         if ::core::intrinsics::unlikely(!(*__local_bind0 != 3)) {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n-                    ::std::rt::panic_fmt(::core::fmt::Arguments::new_v1(&[\"Assertion failed: elem != 3\\nWith captures:\\n  elem = \",\n-                                        \"\\n\"], &[::core::fmt::ArgumentV1::new_debug(&__capture0)]))\n+                    ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem != 3\\nWith captures:\\n  elem = {0:?}\\n\",\n+                            __capture0))\n                 }\n             }\n     };\n@@ -138,8 +138,8 @@ fn unary() {\n         if ::core::intrinsics::unlikely(!**__local_bind0) {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n-                    ::std::rt::panic_fmt(::core::fmt::Arguments::new_v1(&[\"Assertion failed: *elem\\nWith captures:\\n  elem = \",\n-                                        \"\\n\"], &[::core::fmt::ArgumentV1::new_debug(&__capture0)]))\n+                    ::std::rt::panic_fmt(format_args!(\"Assertion failed: *elem\\nWith captures:\\n  elem = {0:?}\\n\",\n+                            __capture0))\n                 }\n             }\n     };"}]}