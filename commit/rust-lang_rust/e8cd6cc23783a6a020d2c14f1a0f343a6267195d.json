{"sha": "e8cd6cc23783a6a020d2c14f1a0f343a6267195d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Y2Q2Y2MyMzc4M2E2YTAyMGQyYzE0ZjFhMGYzNDNhNjI2NzE5NWQ=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-01-16T01:08:09Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-03-07T00:58:02Z"}, "message": "Add query for trans fn attributes\n\nPart of #47320", "tree": {"sha": "448ec88648f2cd0b70b26ddccee4c322699c3bc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/448ec88648f2cd0b70b26ddccee4c322699c3bc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8cd6cc23783a6a020d2c14f1a0f343a6267195d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cd6cc23783a6a020d2c14f1a0f343a6267195d", "html_url": "https://github.com/rust-lang/rust/commit/e8cd6cc23783a6a020d2c14f1a0f343a6267195d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2789b067da2ac921b86199bde21dd231ace1da39", "url": "https://api.github.com/repos/rust-lang/rust/commits/2789b067da2ac921b86199bde21dd231ace1da39", "html_url": "https://github.com/rust-lang/rust/commit/2789b067da2ac921b86199bde21dd231ace1da39"}], "stats": {"total": 113, "additions": 98, "deletions": 15}, "files": [{"sha": "715dbb16ae45af01e59d80ada1fd8a50a2bbd57d", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=e8cd6cc23783a6a020d2c14f1a0f343a6267195d", "patch": "@@ -559,6 +559,7 @@ define_dep_nodes!( <'tcx>\n     [] IsReachableNonGeneric(DefId),\n     [] IsMirAvailable(DefId),\n     [] ItemAttrs(DefId),\n+    [] TransFnAttrs(DefId),\n     [] FnArgNames(DefId),\n     [] DylibDepFormats(CrateNum),\n     [] IsPanicRuntime(CrateNum),"}, {"sha": "5de341ef5113634864f0f956d51de05aa1d8d798", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e8cd6cc23783a6a020d2c14f1a0f343a6267195d", "patch": "@@ -2210,3 +2210,28 @@ pub type GlobMap = NodeMap<FxHashSet<Name>>;\n pub fn provide(providers: &mut Providers) {\n     providers.describe_def = map::describe_def;\n }\n+\n+#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+pub struct TransFnAttrs {\n+    pub flags: TransFnAttrFlags,\n+}\n+\n+bitflags! {\n+    #[derive(RustcEncodable, RustcDecodable)]\n+    pub struct TransFnAttrFlags: u8 {\n+        const COLD                      = 0b0000_0001;\n+        const ALLOCATOR                 = 0b0000_0010;\n+        const UNWIND                    = 0b0000_0100;\n+        const RUSTC_ALLOCATOR_NOUNWIND  = 0b0000_1000;\n+        const NAKED                     = 0b0001_0000;\n+    }\n+}\n+\n+impl TransFnAttrs {\n+    pub fn new() -> TransFnAttrs {\n+        TransFnAttrs {\n+            flags: TransFnAttrFlags::empty(),\n+        }\n+    }\n+}\n+"}, {"sha": "d3151476fffb5b6ac1c5aaf5ed978c8c436d17df", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=e8cd6cc23783a6a020d2c14f1a0f343a6267195d", "patch": "@@ -1138,6 +1138,27 @@ impl<'gcx> ToStableHashKey<StableHashingContext<'gcx>> for hir::TraitCandidate {\n     }\n }\n \n+impl<'hir> HashStable<StableHashingContext<'hir>> for hir::TransFnAttrs\n+{\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'hir>,\n+                                          hasher: &mut StableHasher<W>) {\n+        let hir::TransFnAttrs {\n+            flags,\n+        } = *self;\n+\n+        flags.hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<'hir> HashStable<StableHashingContext<'hir>> for hir::TransFnAttrFlags\n+{\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'hir>,\n+                                          hasher: &mut StableHasher<W>) {\n+        self.bits().hash_stable(hcx, hasher);\n+    }\n+}\n \n impl_stable_hash_for!(struct hir::Freevar {\n     def,"}, {"sha": "fd3aee77e36c955314d12b620f6f55bad2de03bf", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=e8cd6cc23783a6a020d2c14f1a0f343a6267195d", "patch": "@@ -12,7 +12,7 @@ use dep_graph::{DepConstructor, DepNode};\n use errors::DiagnosticBuilder;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::def::{Def, Export};\n-use hir::{self, TraitCandidate, ItemLocalId};\n+use hir::{self, TraitCandidate, ItemLocalId, TransFnAttrs};\n use hir::svh::Svh;\n use lint;\n use middle::borrowck::BorrowCheckResult;\n@@ -235,6 +235,7 @@ define_maps! { <'tcx>\n     [] fn lookup_stability: LookupStability(DefId) -> Option<&'tcx attr::Stability>,\n     [] fn lookup_deprecation_entry: LookupDeprecationEntry(DefId) -> Option<DeprecationEntry>,\n     [] fn item_attrs: ItemAttrs(DefId) -> Lrc<[ast::Attribute]>,\n+    [] fn trans_fn_attrs: trans_fn_attrs(DefId) -> TransFnAttrs,\n     [] fn fn_arg_names: FnArgNames(DefId) -> Vec<ast::Name>,\n     [] fn impl_parent: ImplParent(DefId) -> Option<DefId>,\n     [] fn trait_of_item: TraitOfItem(DefId) -> Option<DefId>,\n@@ -403,6 +404,10 @@ fn features_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::Features\n }\n \n+fn trans_fn_attrs<'tcx>(id: DefId) -> DepConstructor<'tcx> {\n+    DepConstructor::TransFnAttrs { 0: id }\n+}\n+\n fn erase_regions_ty<'tcx>(ty: Ty<'tcx>) -> DepConstructor<'tcx> {\n     DepConstructor::EraseRegionsTy { ty }\n }"}, {"sha": "9082037e10c00e5349b7a1580378a37636f82538", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=e8cd6cc23783a6a020d2c14f1a0f343a6267195d", "patch": "@@ -854,6 +854,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::IsReachableNonGeneric => { force!(is_reachable_non_generic, def_id!()); }\n         DepKind::IsMirAvailable => { force!(is_mir_available, def_id!()); }\n         DepKind::ItemAttrs => { force!(item_attrs, def_id!()); }\n+        DepKind::TransFnAttrs => { force!(trans_fn_attrs, def_id!()); }\n         DepKind::FnArgNames => { force!(fn_arg_names, def_id!()); }\n         DepKind::DylibDepFormats => { force!(dylib_dependency_formats, krate!()); }\n         DepKind::IsPanicRuntime => { force!(is_panic_runtime, krate!()); }"}, {"sha": "92447d516c36b45fe7668eb58015e34969613dde", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=e8cd6cc23783a6a020d2c14f1a0f343a6267195d", "patch": "@@ -11,6 +11,7 @@\n \n use std::ffi::{CStr, CString};\n \n+use rustc::hir::TransFnAttrFlags;\n use rustc::hir::Unsafety;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::config::Sanitizer;\n@@ -109,22 +110,27 @@ pub fn from_fn_attrs(cx: &CodegenCx, llfn: ValueRef, id: DefId) {\n     set_frame_pointer_elimination(cx, llfn);\n     set_probestack(cx, llfn);\n \n-    for attr in attrs.iter() {\n-        if attr.check_name(\"cold\") {\n-            Attribute::Cold.apply_llfn(Function, llfn);\n-        } else if attr.check_name(\"naked\") {\n-            naked(llfn, true);\n-        } else if attr.check_name(\"allocator\") {\n-            Attribute::NoAlias.apply_llfn(\n-                llvm::AttributePlace::ReturnValue, llfn);\n-        } else if attr.check_name(\"unwind\") {\n-            unwind(llfn, true);\n-        } else if attr.check_name(\"rustc_allocator_nounwind\") {\n-            unwind(llfn, false);\n-        }\n+    let trans_fn_attrs = cx.tcx.trans_fn_attrs(id);\n+\n+    if trans_fn_attrs.flags.contains(TransFnAttrFlags::COLD) {\n+        Attribute::Cold.apply_llfn(Function, llfn);\n+    }\n+    if trans_fn_attrs.flags.contains(TransFnAttrFlags::NAKED) {\n+        naked(llfn, true);\n+    }\n+    if trans_fn_attrs.flags.contains(TransFnAttrFlags::ALLOCATOR) {\n+        Attribute::NoAlias.apply_llfn(\n+            llvm::AttributePlace::ReturnValue, llfn);\n+    }\n+    if trans_fn_attrs.flags.contains(TransFnAttrFlags::UNWIND) {\n+        unwind(llfn, true);\n+    }\n+    if trans_fn_attrs.flags.contains(TransFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND) {\n+        unwind(llfn, false);\n     }\n \n     let target_features = cx.tcx.target_features_enabled(id);\n+\n     if !target_features.is_empty() {\n         let val = CString::new(target_features.join(\",\")).unwrap();\n         llvm::AddFunctionAttrStringValue("}, {"sha": "f85af64bb4bbe7b3042e7f07d1bf2f11146d966f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cd6cc23783a6a020d2c14f1a0f343a6267195d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e8cd6cc23783a6a020d2c14f1a0f343a6267195d", "patch": "@@ -45,7 +45,7 @@ use syntax::codemap::Spanned;\n use syntax::symbol::{Symbol, keywords};\n use syntax_pos::{Span, DUMMY_SP};\n \n-use rustc::hir::{self, map as hir_map};\n+use rustc::hir::{self, map as hir_map, TransFnAttrs, TransFnAttrFlags};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n@@ -71,6 +71,7 @@ pub fn provide(providers: &mut Providers) {\n         impl_trait_ref,\n         impl_polarity,\n         is_foreign_item,\n+        trans_fn_attrs,\n         ..*providers\n     };\n }\n@@ -1723,3 +1724,26 @@ fn is_foreign_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         _ => bug!(\"is_foreign_item applied to non-local def-id {:?}\", def_id)\n     }\n }\n+\n+fn trans_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> TransFnAttrs {\n+    let attrs = tcx.get_attrs(id);\n+\n+    let mut trans_fn_attrs = TransFnAttrs::new();\n+\n+    for attr in attrs.iter() {\n+        if attr.check_name(\"cold\") {\n+            trans_fn_attrs.flags |= TransFnAttrFlags::COLD;\n+        } else if attr.check_name(\"allocator\") {\n+            trans_fn_attrs.flags |= TransFnAttrFlags::ALLOCATOR;\n+        } else if attr.check_name(\"unwind\") {\n+            trans_fn_attrs.flags |= TransFnAttrFlags::UNWIND;\n+        } else if attr.check_name(\"rustc_allocator_nounwind\") {\n+            trans_fn_attrs.flags |= TransFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND;\n+        } else if attr.check_name(\"naked\") {\n+            trans_fn_attrs.flags |= TransFnAttrFlags::NAKED;\n+        } else if attr.check_name(\"inline\") {\n+        }\n+    }\n+\n+    trans_fn_attrs\n+}"}]}