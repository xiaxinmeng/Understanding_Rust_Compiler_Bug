{"sha": "37a01de42c1bd435710741a2e15ceee1efaccf39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YTAxZGU0MmMxYmQ0MzU3MTA3NDFhMmUxNWNlZWUxZWZhY2NmMzk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-31T17:19:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-31T17:19:37Z"}, "message": "Merge #3793\n\n3793: Add integrated test for concat include env r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f3c9bb9abb7ae2c6af7ca6886358a69a08725a06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3c9bb9abb7ae2c6af7ca6886358a69a08725a06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37a01de42c1bd435710741a2e15ceee1efaccf39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeg3upCRBK7hj4Ov3rIwAAdHIIAF/p621jmxCue2WKEAbYkFM2\nxGzMpINwd5rWy1Mq1uRZuFu8F2jbDh5hl/PR21fn8rsbcaWJRCwA5Ph11j/8CO9q\nfd48frNhTpsghONpy59XZBQtFE7YGpPpYSYehskB8eDOrMZQi4EFn95Aoud7nMuH\nUdKQ25bAgqfb3H7h41ZRav/frxFMoVAtjLfmZ7MbxYJgdR8vKzSlSVmUYwPxN6PT\n0nb+bbi/zn/76ZxXgvTfITtGzjxte1/Drbiv84uFsPA8iM1Yd4ejz+N7LxaLm8uc\ne4DmqPe3SzRU7g2khCvmdT/94DgqH83i3Mn3OYiYaIMgMkapbvbPrdkVeWaNnVk=\n=UW6g\n-----END PGP SIGNATURE-----\n", "payload": "tree f3c9bb9abb7ae2c6af7ca6886358a69a08725a06\nparent 47c9ee235552fe9eae974ea2560d16c6e5dc7ff4\nparent a4f9d966f015010e435d6a73360809a884c7415b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585675177 +0000\ncommitter GitHub <noreply@github.com> 1585675177 +0000\n\nMerge #3793\n\n3793: Add integrated test for concat include env r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37a01de42c1bd435710741a2e15ceee1efaccf39", "html_url": "https://github.com/rust-lang/rust/commit/37a01de42c1bd435710741a2e15ceee1efaccf39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37a01de42c1bd435710741a2e15ceee1efaccf39/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c9ee235552fe9eae974ea2560d16c6e5dc7ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c9ee235552fe9eae974ea2560d16c6e5dc7ff4", "html_url": "https://github.com/rust-lang/rust/commit/47c9ee235552fe9eae974ea2560d16c6e5dc7ff4"}, {"sha": "a4f9d966f015010e435d6a73360809a884c7415b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f9d966f015010e435d6a73360809a884c7415b", "html_url": "https://github.com/rust-lang/rust/commit/a4f9d966f015010e435d6a73360809a884c7415b"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "5af5eaad20960af7d6da6242d0d5232b36727b19", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/37a01de42c1bd435710741a2e15ceee1efaccf39/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a01de42c1bd435710741a2e15ceee1efaccf39/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=37a01de42c1bd435710741a2e15ceee1efaccf39", "patch": "@@ -9,7 +9,7 @@ use lsp_types::{\n };\n use rust_analyzer::req::{\n     CodeActionParams, CodeActionRequest, Completion, CompletionParams, DidOpenTextDocument,\n-    Formatting, OnEnter, Runnables, RunnablesParams,\n+    Formatting, GotoDefinition, OnEnter, Runnables, RunnablesParams,\n };\n use serde_json::json;\n use tempfile::TempDir;\n@@ -581,3 +581,47 @@ version = \\\"0.0.0\\\"\n         }),\n     );\n }\n+\n+#[test]\n+fn resolve_include_concat_env() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let server = Project::with_fixture(\n+        r###\"\n+//- Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- build.rs\n+use std::{env, fs, path::Path};\n+\n+fn main() {\n+    let out_dir = env::var_os(\"OUT_DIR\").unwrap();\n+    let dest_path = Path::new(&out_dir).join(\"hello.rs\");\n+    fs::write(\n+        &dest_path,\n+        r#\"pub fn message() -> &'static str { \"Hello, World!\" }\"#,\n+    )\n+    .unwrap();\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}\n+//- src/main.rs\n+include!(concat!(env!(\"OUT_DIR\"), \"/hello.rs\"));\n+\n+fn main() { message(); }\n+\"###,\n+    )\n+    .with_config(|config| {\n+        config.cargo_features.load_out_dirs_from_check = true;\n+    })\n+    .server();\n+    server.wait_until_workspace_is_loaded();\n+    let res = server.send_request::<GotoDefinition>(TextDocumentPositionParams::new(\n+        server.doc_id(\"src/main.rs\"),\n+        Position::new(2, 15),\n+    ));\n+    assert!(format!(\"{}\", res).contains(\"hello.rs\"));\n+}"}, {"sha": "d8bed6d7f410fb006ed29f866d0ef293a5f44d2a", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/37a01de42c1bd435710741a2e15ceee1efaccf39/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a01de42c1bd435710741a2e15ceee1efaccf39/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=37a01de42c1bd435710741a2e15ceee1efaccf39", "patch": "@@ -27,11 +27,12 @@ pub struct Project<'a> {\n     with_sysroot: bool,\n     tmp_dir: Option<TempDir>,\n     roots: Vec<PathBuf>,\n+    config: Option<Box<dyn Fn(&mut ServerConfig)>>,\n }\n \n impl<'a> Project<'a> {\n     pub fn with_fixture(fixture: &str) -> Project {\n-        Project { fixture, tmp_dir: None, roots: vec![], with_sysroot: false }\n+        Project { fixture, tmp_dir: None, roots: vec![], with_sysroot: false, config: None }\n     }\n \n     pub fn tmp_dir(mut self, tmp_dir: TempDir) -> Project<'a> {\n@@ -49,6 +50,11 @@ impl<'a> Project<'a> {\n         self\n     }\n \n+    pub fn with_config(mut self, config: impl Fn(&mut ServerConfig) + 'static) -> Project<'a> {\n+        self.config = Some(Box::new(config));\n+        self\n+    }\n+\n     pub fn server(self) -> Server {\n         let tmp_dir = self.tmp_dir.unwrap_or_else(|| TempDir::new().unwrap());\n         static INIT: Once = Once::new();\n@@ -72,7 +78,14 @@ impl<'a> Project<'a> {\n \n         let roots = self.roots.into_iter().map(|root| tmp_dir.path().join(root)).collect();\n \n-        Server::new(tmp_dir, self.with_sysroot, roots, paths)\n+        let mut config =\n+            ServerConfig { with_sysroot: self.with_sysroot, ..ServerConfig::default() };\n+\n+        if let Some(f) = &self.config {\n+            f(&mut config)\n+        }\n+\n+        Server::new(tmp_dir, config, roots, paths)\n     }\n }\n \n@@ -92,7 +105,7 @@ pub struct Server {\n impl Server {\n     fn new(\n         dir: TempDir,\n-        with_sysroot: bool,\n+        config: ServerConfig,\n         roots: Vec<PathBuf>,\n         files: Vec<(PathBuf, String)>,\n     ) -> Server {\n@@ -118,7 +131,7 @@ impl Server {\n                         window: None,\n                         experimental: None,\n                     },\n-                    ServerConfig { with_sysroot, ..ServerConfig::default() },\n+                    config,\n                     connection,\n                 )\n                 .unwrap()"}]}